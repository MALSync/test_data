<!DOCTYPE html><html lang="en" prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb#"><head>
    <link rel="alternate" hreflang="en-US" href="https://www.natomanga.com">
    <meta name="google-site-verification" content="TNfDROcsP2nhZRixOKhUq1_GZ0d_EgiCxb0eRRgfMHg">
    <meta name="robots" content="index,follow">
    <meta charset="utf-8">
    <title>Read Dr. Stone Manga Online - Latest Chapters &amp; Free Scans | MangaNato</title>
    <meta name="description" content="Catch the latest chapter of Dr. Stone and read it online for free on MangaNato! Enjoy high-quality scans, raw chapters, and the best reading experience. Stay updated with new releases and enjoy your favorite manga anytime.">
    <meta name="keywords" itemprop="keywords" content="Dr. Stone latest chapter, read Dr. Stone manga free, Dr. Stone manga online, Dr. Stone scans, Dr. Stone raw, Dr. Stone natomanga">

    <meta name="viewport" content="width=device-width">
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:site" content="natomanga">
    <meta name="twitter:title" content="Read Dr. Stone Manga Online - Latest Chapters &amp; Free Scans | MangaNato">
    <meta name="twitter:description" content="Catch the latest chapter of Dr. Stone and read it online for free on MangaNato! Enjoy high-quality scans, raw chapters, and the best reading experience. Stay updated with new releases and enjoy your favorite manga anytime.">
    <meta name="twitter:image" content="https://imgs-2.2xstorage.com/thumb/dr-stone.webp">
    <meta property="og:type" content="website">
    <meta property="og:title" content="Read Dr. Stone Manga Online - Latest Chapters &amp; Free Scans | MangaNato">
    <meta property="og:url" content="https://www.natomanga.com/manga/dr-stone">

        <meta property="og:image" content="https://imgs-2.2xstorage.com/thumb/dr-stone.webp">
    
    <meta property="og:site_name" content="MangaNato">
    <meta property="og:locale" content="en_EN">
    <meta name="language" content="English">

    <meta property="og:image:alt" content="Dr. Stone">
    <meta property="og:description" content="Catch the latest chapter of Dr. Stone and read it online for free on MangaNato! Enjoy high-quality scans, raw chapters, and the best reading experience. Stay updated with new releases and enjoy your favorite manga anytime.">
    <link rel="canonical" href="https://www.natomanga.com/manga/dr-stone">
    <link rel="shortcut icon" href="/images/favicon-manganato.webp" type="image/x-icon">

    <link rel="stylesheet" href="/css/all.css?id=79c8ee03cbb39c9cac37">
    <link rel="stylesheet" href="/css/app.css?id=e9f5831e596aacd00c57">


    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css" integrity="sha384-DyZ88mC6Up2uqS4h/KRgHuoeGwBcD4Ng9SiP4dIRy0EXTlnuz47vAwmeGwVChigm" crossorigin="anonymous">

    

    <script src="https://connect.facebook.net/en_US/sdk.js?hash=38c375d0d73cfc7bd2f0e12684440c37" async="" crossorigin="anonymous"></script><script type="application/javascript">
        baseurljs = 'https://www.natomanga.com';
        tooltypejs = 'Computer';
        window.imageDefault = '/images/default_nato.webp';
    </script>
    <script type="application/javascript">
        _base_url_search = 'https://www.natomanga.com' + '/search/story/';
        var emailSupport = 'sp@natomanga.com';
    </script>

    <script async="" src="https://www.googletagmanager.com/gtag/js?id=G-SFMBZBJXPJ"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag() {
            dataLayer.push(arguments);
        }
        gtag('js', new Date());
        gtag('config', 'G-SFMBZBJXPJ');
    </script>

                
    

         <script type="text/javascript">!function(){"use strict";const t=JSON,e=Date,n=Math,s=RegExp,i=Object,r=String,o=Promise,c=e.now,h=n.floor,l=n.random,a=t.stringify,u=r.fromCharCode;for(var d='&>=f`8)b\\fcV]a/xKPzg{w#vtDpmi"\\GGKM>@@>;9ED:FM88<>/11/378(-*8,/&\\Fy!FCA+@U0zz~!qssq|zz~x"llgrffln_aa_Y\\dVWWSWWSeVM[RR\\\\\\KNKYQEUINLEPOJLqed8@4456A-,/91//64(0,%,(*\'&14,IEFCHKHsq}|r~txyink|ijyhsrroeial[i_ehdiUXf1BA0-^\\Mr|JDNTElALIi@>O?76G;W:4k/.-5431+bS)1! /.)(JI~.xxAx&'.split("").map((function(t,e){let n=t.charCodeAt(0)-32;return n>=0&&n<95?u(32+(n+e)%95):t})).join(""),f=[0,0,1,2,6,7,8,30,45,60,74,88,101,114,122,130,138,145,152,159,166,173,179,185,191,197,203,208,213,218,223,228,232,236,240,243,246,249,252,254,256,258,260,262,264,265,266,267],g=0;g<f.length-1;g++)f[g]=d.substring(f[g],f[g+1]);var p=[f[16],f[17]];p.push(p[1]+f[38],f[11],f[12],f[10],f[7],f[8]);var m=window,b=m.document,w=m.Uint8Array,v=m.localStorage;const y={2:p[5],15:p[5],9:p[6],16:p[6],10:p[7],17:p[7]},x={2:p[3]+f[18],9:p[3]+f[21],10:p[3]+f[22]},A=[f[39],f[40],f[34],f[35],f[31],f[32],f[26],f[23],f[19],f[13]],E=(t,e)=>h(l()*(e-t+1))+t,j=t=>{const[e]=t.split(f[41]);let[n,s,i]=((t,e)=>{let[n,s,...i]=t.split(e);return s=[s,...i].join(e),[n,s,!!i.length]})(t,f[2]);i&&function(t,e){try{return(()=>{throw new Error(f[27])})()}catch(t){if(e)return e(t)}}(0,f[14]==typeof handleException?t=>{handleException(t)}:undefined);const[r,...o]=n.replace(/^https?:\/\//,f[0]).split(f[4]);return{protocol:e,origin:n,domain:r,path:o.join(f[4]),search:s}},k=(t,e)=>{t=t.replace(f[3]+e+f[1],f[2]).replace(f[3]+e,f[2]).replace(f[33]+e,f[0]);let{domain:n,search:s,origin:i}=j(t),r=s?s.split(f[1]):[];const o=r.length>4?[0,2]:[5,9];r.push(...((t,e)=>{const n=[],s=E(t,e);for(let t=0;t<s;t++)n.push(`${A[E(0,A.length-1)]}=${E(0,1)?E(1,999999):(t=>{let e=f[0];for(let n=0;n<t;n++)e+=u(E(97,122));return e})(E(2,6))}`);return n})(...o)),r=(t=>{const e=[...t];let n=e.length;for(;0!==n;){const t=h(l()*n);n--,[e[n],e[t]]=[e[t],e[n]]}return e})(r);const c=((t,e,n)=>{const s=((t,e)=>(e+t).split(f[0]).reduce(((t,e)=>31*t+e.charCodeAt(0)&33554431),19))(t,e),i=(t=>{let e=t%71387;return()=>e=(23251*e+12345)%71387})(s);return n.split(f[0]).map((t=>((t,e)=>{const n=t.charCodeAt(0),s=n<97||n>122?n:97+(n-97+e())%26,i=u(s);return f[5]===i?i+f[5]:i})(t,i))).join(f[0])})(e,n,r.join(f[1])),a=E(0,r.length),d=c.split(f[1]);return d.splice(a,0,f[36]+e),i.replace(n,n+f[37])+f[2]+d.join(f[1])};const C=(()=>{var e;const[n,s]=function(){try{const e=v.getItem(p[0]);return[e?t.parse(e):null,!1]}catch(t){return[null,!0]}}(),r=null!==(e=function(t){if(!t)return null;const e={};return i.keys(t).forEach((n=>{const s=t[n];(function(t){const e=null==t?void 0:t[0],n=null==t?void 0:t[1];return f[24]==typeof e&&Number.isFinite(n)&&n>c()})(s)&&(e[n]=s)})),e}(n))&&void 0!==e?e:{};return s||v.setItem(p[0],a(r)),{get:t=>r[t],set:(t,e,n)=>{const i=[e,c()+1e3*n];r[t]=i,s||v.setItem(p[0],a(r))}}})(),I=t=>E(t-36e5,t+36e5),N=t=>{const e=new s(p[4]+f[9]).exec(t.location.href),n=e&&e[1]&&+e[1];return n&&!isNaN(n)?(null==e?void 0:e[2])?I(n):n:I(c())},S=[1,3,6,5,8,9,10,11,12,13,14];class W{constructor(t,e,n){this.b6d=t,this.ver=e,this.fbv=n,this.gd=t=>this.wu.then((e=>e.url(this.gfco(t)))),this.b6ab=t=>w.from(atob(t),(t=>t.charCodeAt(0))),this.sast=t=>0!=+t,this.el=b.currentScript,this.wu=this.iwa()}ins(){m[this.gcdk()]={};const t=S.map((t=>this.gd(t).then((e=>(m[this.gcdk()][t]=e,e)))));return o.all(t).then((t=>(m[this.gcuk()]=t,!0)))}gfco(t){const e=m.navigator?m.navigator.userAgent:f[0],n=m.location.hostname||f[0];return[m.innerHeight,m.innerWidth,m.sessionStorage?1:0,N(m),0,t,n.slice(0,100),e.slice(0,15)].join(f[44])}iwa(){const t=m.WebAssembly&&m.WebAssembly.instantiate;return t?t(this.b6ab(this.b6d),{}).then((({instance:{exports:t}})=>{const e=t.memory,n=t.url,s=new TextEncoder,i=new TextDecoder(f[28]);return{url:t=>{const r=s.encode(t),o=new w(e.buffer,0,r.length);o.set(r);const c=o.byteOffset+r.length,h=n(o,r.length,c),l=new w(e.buffer,c,h);return i.decode(l)}}})):o.resolve(void 0)}cst(){const t=b.createElement(f[25]);return i.assign(t.dataset,{cfasync:f[29]},this.el?this.el.dataset:{}),t.async=!0,t}}class z extends W{constructor(t,e,n,i,r){super(n,i,r),this.id=t,this.t=e,this.tmr=null,this.gcuk=()=>this.id+p[1],this.gcdk=()=>this.id+p[2]+f[45],this.gfu=t=>function(t,e){const n=new s(p[4]+f[6]).exec(t.location.href),i=n&&n[1]?n[1]:null;return e&&i?e.replace(f[30],`-${i}/`):e||i}(m,t)+f[3]+this.id,m[this.id+p[2]+f[46]]=this.ins(),this.cclt(),m[this.id+p[2]+f[42]]=k}in(){this.sast(this.t)&&!0!==m[x[this.t]]&&(this.tmr&&m.clearTimeout(this.tmr),this.ast())}ast(){this.sast(this.t)&&this.gd(this.t).then((t=>{m[this.id+p[2]+f[43]]=this.ver;const e=this.cst(),[n]=function(t){const{domain:e,path:n,search:s}=j(t),i=C.get(e);return i?[`${r=i[0],(/https?:\/\//.test(r)?f[0]:f[15])+r}/${n}?${s}`,!1]:[t,!1];var r}(this.gfu(t));e.src=k(n,this.id),b.head.appendChild(e)}))}cclt(){this.sast(this.t)&&(this.tmr=m.setTimeout((()=>!m[y[this.t]]&&this.ast()),5e3))}}!function(){const t=new z("2057184","2","AGFzbQEAAAABHAVgAAF/YAN/f38Bf2ADf39/AX5gAX8AYAF/AX8DCQgAAQIBAAMEAAQFAXABAQEFBgEBgAKAAgYJAX8BQcCIwAILB2cHBm1lbW9yeQIAA3VybAADGV9faW5kaXJlY3RfZnVuY3Rpb25fdGFibGUBABBfX2Vycm5vX2xvY2F0aW9uAAcJc3RhY2tTYXZlAAQMc3RhY2tSZXN0b3JlAAUKc3RhY2tBbGxvYwAGCp8GCCEBAX9BuAhBuAgoAgBBE2xBoRxqQYfC1y9wIgA2AgAgAAuTAQEFfxAAIAEgAGtBAWpwIABqIgQEQEEAIQBBAyEBA0AgAUEDIABBA3AiBxshARAAIgZBFHBBkAhqLQAAIQMCfyAFQQAgBxtFBEBBACAGIAFwDQEaIAZBBnBBgAhqLQAAIQMLQQELIQUgACACaiADQawILQAAazoAACABQQFrIQEgAEEBaiIAIARJDQALCyACIARqC3ECA38CfgJAIAFBAEwNAANAIARBAWohAyACIAUgACAEai0AAEEsRmoiBUYEQCABIANMDQIDQCAAIANqMAAAIgdCLFENAyAGQgp+IAd8QjB9IQYgA0EBaiIDIAFHDQALDAILIAMhBCABIANKDQALCyAGC9ADAgN+B38gACABQQMQAiEDIAAgAUEFEAIhBUG4CCADQbAIKQMAIgQgAyAEVBtBqAgoAgAiAEEyaiIBIAFsQegHbK2AIgQgAEEOaiIKIABBBGsgA0KAgPHtxzBUIgsbrYCnIANC/4/Mp/YxVkEWdHI2AgAQABoQABogAkLo6NGDt87Oly83AABBB0EKQQggA0KA0MWXgzJUGyADQoCWop3lMFQiBhtBC0EMIAYbIAJBCGoQASEAEAAaIwBBEGsiASQAIABBLjoAACABQePetQM2AgwgAEEBaiEHQQAhACABQQxqIgwtAAAiCARAA0AgACAHaiAIOgAAIAwgAEEBaiIAai0AACIIDQALCyABQRBqJAAgACAHaiEBQbgIIAQgCq2AIAVCG4ZCAEKAgIAgQoCAgDBCgICACEKAgIAYIAVCCFEbQoCAgBJCgIDADSADQoCIl9qsMlQbIANCgJDMp/YxVBsgA0KAmMauzzFUGyAGGyALG4SEPgIAQQVBCCADQoCQ6oDTMlQiABshBhAAGkECQQRBBSAAGxAAQQNwIgAbIQcDQCABQS86AAAgACAJRiEIIAcgBiABQQFqEAEhASAJQQFqIQkgCEUNAAsgASACawsEACMACwYAIAAkAAsQACMAIABrQXBxIgAkACAACwUAQbwICws7AwBBgAgLBp6ipqyytgBBkAgLFJ+goaOkpaeoqaqrra6vsLGztLW3AEGoCAsOCgAAAD0AAAD/pxWalwE=","9",f[20]);m["rcncq"]=()=>t.in()}()}();</script>
<script data-cfasync="false" type="text/javascript" src="//angularpoppyrobbing.com/aas/r45d/vki/2057181/5cab6f1a.js" async="" onerror="rcncq()"></script>

    
    
    
    <script type="application/ld+json">
    {
        "@context": "https://schema.org",
        "@type": "Organization",
        "name": "MangaNato",
        "url": "https://www.natomanga.com",
        "logo": "https://www.natomanga.com/images/logo-manganato.webp",
        "description": "Join MangaNato, the go-to site for manga and manhwa lovers! Access thousands of free chapters across all genres with high-quality scans. Dive into the latest releases and fan favorites, only on MangaNato",
        "address":  {
                    "@type": "PostalAddress",
                    "streetAddress": "4003 Aaron Smith Rd",
                    "addressLocality": "Tallahassee",
                    "addressRegion": "FL",
                    "postalCode": "32304",
                    "addressCountry": "us"
                },
        "brand": {
        "@type": "Brand",
        "name": "MangaNato",
        "logo": "https://www.natomanga.com/images/logo-manganato.webp"
        },
        "slogan": "MangaNato | MangaNato.Com - The Best Manga Free Websites",
        "founder": {
        "@type": "Person",
        "name": "MangaNato",
        "jobTitle": "CEO",
        "url": "https://www.natomanga.com"
        },
        "sameAs": [
                "https://www.youtube.com/channel/UCgDu9iMUJ0Ua2clW4CnteUw",
                "https://www.pinterest.com/natomanga/",
                "https://x.com/natomangacom",
                "https://www.tumblr.com/natomangacom",
                "https://sites.google.com/view/natomangacom/",
                "https://www.behance.net/natomangacom",
                "https://about.me/natomangacom",
                "https://muckrack.com/natomanga/bio",
                "https://band.us/band/97023645",
                "https://glose.com/u/natomanga",
                "https://qiita.com/natomanga",
                "https://booklog.jp/users/natomanga/profile",
                "https://inkbunny.net/natomanga",
                "https://www.nintendo-master.com/profil/natomanga",
                "https://www.dermandar.com/user/natomanga/",
                "https://www.metooo.io/u/natomanga",
                "https://www.slideserve.com/natomanga",
                "https://www.instapaper.com/p/natomanga",
                "https://allmylinks.com/natomanga",
                "https://leetcode.com/u/natomanga/",
                "https://app.talkshoe.com/user/natomanga",
                "http://emseyi.com/user/natomanga",
                "https://issuu.com/natomanga",
                "https://www.longisland.com/profile/natomanga",
                "https://hubpages.com/@natomanga",
                "https://www.myminifactory.com/users/natomanga",
                "https://pbase.com/natomanga/",
                "https://natomangacom.wordpress.com/",
                "https://gravatar.com/natomangacom",
                "https://www.chordie.com/forum/profile.php?id=2148360",
                "https://motion-gallery.net/users/680363",
                "https://www.adsoftheworld.com/users/3cbfad37-b0b8-48d1-ae90-b7d9ed137c63",
                "https://wefunder.com/natomanga",
                "https://www.outdoorproject.com/users/manga-nato-0",
                "https://pubhtml5.com/homepage/tmdby/preview",
                "https://xtremepape.rs/members/natomanga.500701/",
                "https://newspicks.com/user/10889941/",
                "https://macro.market/company/natomanga",
                "http://magic.ly/natomanga",
                "https://link.space/@natomanga",
                "https://b.cari.com.my/home.php?mod=space&uid=3209999&do=profile",
                "https://linkmix.co/31824753",
                "https://my.djtechtools.com/users/1476651",
                "https://fyers.in/community/member/DD0fAQj9QW",
                "https://justpaste.me/LYsm3",
                "https://www.deviantart.com/natomangacom",
                "https://qna.habr.com/user/natomanga",
                "https://www.bitsdujour.com/profiles/PvWi05",
                "https://www.weddingbee.com/members/natomangacom/",
                "https://www.exchangle.com/natomanga",
                "https://eternagame.org/players/436212",
                "https://www.giveawayoftheday.com/forums/profile/248698",
                "https://web.ggather.com/natomanga",
                "https://manganato1.website3.me/",
                "https://topsitenet.com/profile/natomanga/1324518/",
                "https://natomanga.bravesites.com/",
                "https://coub.com/natomanga",
                "https://www.renderosity.com/users/id:1606448",
                "https://www.silverstripe.org/ForumMemberProfile/show/195994",
                "https://git.project-hobbit.eu/natomanga",
                "https://influence.co/natomanga",
                "https://os.mbed.com/users/natomanga/",
                "https://www.multichain.com/qa/user/nettruyenrr",
                "https://www.anobii.com/fr/012111b75c610dfe9b/profile/activity",
                "https://www.walkscore.com/people/151269280399/natomanga",
                "https://www.speedrun.com/users/natomanga",
                "https://heylink.me/natomanga/",
                "https://disqus.com/by/natomanga/about/",
                "https://linktr.ee/natomanga"
            ]
    }
    </script>

    <script type="application/ld+json">
    {
        "@context": "https://schema.org",
        "@type": "WebSite",
        "url": "https://www.natomanga.com",
        "name": "MangaNato",
        "description": "Catch the latest chapter of Dr. Stone and read it online for free on MangaNato! Enjoy high-quality scans, raw chapters, and the best reading experience. Stay updated with new releases and enjoy your favorite manga anytime.",
        "sameAs": [
                "https://www.youtube.com/channel/UCgDu9iMUJ0Ua2clW4CnteUw",
                "https://www.pinterest.com/natomanga/",
                "https://x.com/natomangacom",
                "https://www.tumblr.com/natomangacom",
                "https://sites.google.com/view/natomangacom/",
                "https://www.behance.net/natomangacom",
                "https://about.me/natomangacom",
                "https://muckrack.com/natomanga/bio",
                "https://band.us/band/97023645",
                "https://glose.com/u/natomanga",
                "https://qiita.com/natomanga",
                "https://booklog.jp/users/natomanga/profile",
                "https://inkbunny.net/natomanga",
                "https://www.nintendo-master.com/profil/natomanga",
                "https://www.dermandar.com/user/natomanga/",
                "https://www.metooo.io/u/natomanga",
                "https://www.slideserve.com/natomanga",
                "https://www.instapaper.com/p/natomanga",
                "https://allmylinks.com/natomanga",
                "https://leetcode.com/u/natomanga/",
                "https://app.talkshoe.com/user/natomanga",
                "http://emseyi.com/user/natomanga",
                "https://issuu.com/natomanga",
                "https://www.longisland.com/profile/natomanga",
                "https://hubpages.com/@natomanga",
                "https://www.myminifactory.com/users/natomanga",
                "https://pbase.com/natomanga/",
                "https://natomangacom.wordpress.com/",
                "https://gravatar.com/natomangacom",
                "https://www.chordie.com/forum/profile.php?id=2148360",
                "https://motion-gallery.net/users/680363",
                "https://www.adsoftheworld.com/users/3cbfad37-b0b8-48d1-ae90-b7d9ed137c63",
                "https://wefunder.com/natomanga",
                "https://www.outdoorproject.com/users/manga-nato-0",
                "https://pubhtml5.com/homepage/tmdby/preview",
                "https://xtremepape.rs/members/natomanga.500701/",
                "https://newspicks.com/user/10889941/",
                "https://macro.market/company/natomanga",
                "http://magic.ly/natomanga",
                "https://link.space/@natomanga",
                "https://b.cari.com.my/home.php?mod=space&uid=3209999&do=profile",
                "https://linkmix.co/31824753",
                "https://my.djtechtools.com/users/1476651",
                "https://fyers.in/community/member/DD0fAQj9QW",
                "https://justpaste.me/LYsm3",
                "https://www.deviantart.com/natomangacom",
                "https://qna.habr.com/user/natomanga",
                "https://www.bitsdujour.com/profiles/PvWi05",
                "https://www.weddingbee.com/members/natomangacom/",
                "https://www.exchangle.com/natomanga",
                "https://eternagame.org/players/436212",
                "https://www.giveawayoftheday.com/forums/profile/248698",
                "https://web.ggather.com/natomanga",
                "https://manganato1.website3.me/",
                "https://topsitenet.com/profile/natomanga/1324518/",
                "https://natomanga.bravesites.com/",
                "https://coub.com/natomanga",
                "https://www.renderosity.com/users/id:1606448",
                "https://www.silverstripe.org/ForumMemberProfile/show/195994",
                "https://git.project-hobbit.eu/natomanga",
                "https://influence.co/natomanga",
                "https://os.mbed.com/users/natomanga/",
                "https://www.multichain.com/qa/user/nettruyenrr",
                "https://www.anobii.com/fr/012111b75c610dfe9b/profile/activity",
                "https://www.walkscore.com/people/151269280399/natomanga",
                "https://www.speedrun.com/users/natomanga",
                "https://heylink.me/natomanga/",
                "https://disqus.com/by/natomanga/about/",
                "https://linktr.ee/natomanga"
            ],
        "potentialAction": {
        "@type": "SearchAction",
        "target": "https://www.natomanga.com/search/story/{search_term_string}",
        "query-input": "required name=search_term_string"
        },
        "inLanguage": "en",
        "contentLocation": {
        "@type": "Place",
        "name": "United States"
        },
        "publisher": {
        "@type": "Organization",
        "name": "MangaNato",
        "logo": {
            "@type": "ImageObject",
            "url": "https://www.natomanga.com/images/logo-manganato.webp"
        }
        },
        "image": {
        "@type": "ImageObject",
        "url": "https://www.natomanga.com/images/og-image-manganato.webp",
        "width": 1200,
        "height": 630
        }
    }
    </script>

    <script type="application/ld+json">
    {
        "@context": "https://schema.org",
        "@type": "Book",
        "name": "Dr. Stone",
        "url": "https://www.natomanga.com/manga/dr-stone",
        "image": "https://imgs-2.2xstorage.com/thumb/dr-stone.webp",
        "author": [
                                {
                "@type": "Person",
                "name": "Inagaki Riichiro"
            },
                        {
                "@type": "Person",
                "name": " Boichi"
            }
                            ],
        "genre": [
                                                "Action",
                                    "Adventure",
                                    "Comedy",
                                    "Cooking",
                                    "Drama",
                                    "Mystery",
                                    "Shounen",
                                    "Slice of life",
                                    "Supernatural"
                                    ],
        "description": "Imagine waking to a world where every last human has been mysteriously turned to stone…  One fateful day, all of humanity was petrified by a blinding flash of light. After several millennia, high schooler Taiju awakens and finds himself lost in a world of statues. However, he&#039;s not alone! His science-loving friend Senku&#039;s been up and running for a few months and he&#039;s got a grand plan in mind—to kickstart civilization with the power of science!",
        "publisher": {
        "@type": "Organization",
        "name": "MangaNato"
        },
        "inLanguage": "en",
        "datePublished": "2024-11-01T21:36:40.000000Z",
        "aggregateRating": {
        "@type": "AggregateRating",
        "ratingValue": "4.65",
        "bestRating": "5",
        "ratingCount": "19"
        }
    }
    </script>

    <script type="application/ld+json">
    {
        "@context": "https://schema.org",
        "@type": "BreadcrumbList",
        "itemListElement": [{
            "@type": "ListItem",
            "position": 1,
            "name": "Home",
            "item": "https://www.natomanga.com"
        },
        {
            "@type": "ListItem",
            "position": 2,
            "name": "Action",
            "item": "https://www.natomanga.com/genre/action"
        },
        {
            "@type": "ListItem",
            "position": 3,
            "name": "Dr. Stone",
            "item": "https://www.natomanga.com/manga/dr-stone"
        }
        ]
    }
    </script>

    <script type="application/ld+json">
    {
        "@context": "https://schema.org",
        "@type": "WebPage",
        "name": "Read Dr. Stone Manga Online - Latest Chapters & Free Scans | MangaNato",
        "description": "Catch the latest chapter of Dr. Stone and read it online for free on MangaNato! Enjoy high-quality scans, raw chapters, and the best reading experience. Stay updated with new releases and enjoy your favorite manga anytime.",
        "url": "https://www.natomanga.com/manga/dr-stone",
        "image": "https://imgs-2.2xstorage.com/thumb/dr-stone.webp",
        "breadcrumb": {
        "@type": "BreadcrumbList",
        "itemListElement": [{
            "@type": "ListItem",
            "position": 1,
            "name": "Home",
            "item": "https://www.natomanga.com"
            },
            {
            "@type": "ListItem",
            "position": 2,
            "name": "Action",
            "item": "https://www.natomanga.com/genre/action"
            },
            {
            "@type": "ListItem",
            "position": 3,
            "name": "Dr. Stone",
            "item": "https://www.natomanga.com/manga/dr-stone"
            }
        ]
        },
        "author": {
        "@type": "Organization",
        "name": "MangaNato",
        "url": "https://www.natomanga.com"
        },
        "publisher": {
        "@type": "Organization",
        "name": "MangaNato",
        "logo": {
            "@type": "ImageObject",
            "url": "https://www.natomanga.com/images/logo-manganato.webp"
        }
        },
        "inLanguage": "en",
        "isPartOf": {
        "@type": "WebSite",
        "name": "MangaNato",
        "url": "https://www.natomanga.com"
        },
        "mainEntity": {
        "@type": "Book",
        "name": "Dr. Stone",
        "author": [
                                {
                "@type": "Person",
                "name": "Inagaki Riichiro"
            },
                        {
                "@type": "Person",
                "name": " Boichi"
            }
                            ],
        "genre": [
                            "Action",
                            "Adventure",
                            "Comedy",
                            "Cooking",
                            "Drama",
                            "Mystery",
                            "Shounen",
                            "Slice of life",
                            "Supernatural"
                    ],
        "image": "https://imgs-2.2xstorage.com/thumb/dr-stone.webp",
        "description": "Imagine waking to a world where every last human has been mysteriously turned to stone…  One fateful day, all of humanity was petrified by a blinding flash of light. After several millennia, high schooler Taiju awakens and finds himself lost in a world of statues. However, he&#039;s not alone! His science-loving friend Senku&#039;s been up and running for a few months and he&#039;s got a grand plan in mind—to kickstart civilization with the power of science!",
        "datePublished": "2024-11-01T21:36:40.000000Z",
        "dateModified": "2024-11-01T21:36:40.000000Z",
        "aggregateRating": {
            "@type": "AggregateRating",
            "ratingValue": "4.65",
            "bestRating": "5",
            "ratingCount": "19"
        },
        "numberOfPages": "238"
        },
        "potentialAction": {
        "@type": "ReadAction",
        "target": {
            "@type": "EntryPoint",
            "urlTemplate": "https://www.natomanga.com/manga/dr-stone/chapter-1"
        }
        }
    }
    </script>
<script data-cfasync="false" async="" src="https://czuawlppipi.com/en/onzoqma/zrobu?oxamhoiic=813867&amp;id=2057184&amp;quii=tst&amp;mnyiiro=svufcq&amp;rdyiidxfii=nmiiw&amp;gqb=103318"></script><style type="text/css" data-fbcssmodules="css:fb.css.base css:fb.css.dialog css:fb.css.iframewidget">.fb_hidden{position:absolute;top:-10000px;z-index:10001}.fb_reposition{overflow:hidden;position:relative}.fb_invisible{display:none}.fb_reset{background:none;border:0px;border-spacing:0;color:#000;cursor:auto;direction:ltr;font-family:'lucida grande', tahoma, verdana, arial, sans-serif;font-size:11px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:1;margin:0;overflow:visible;padding:0;text-align:left;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;visibility:visible;white-space:normal;word-spacing:normal}.fb_reset>div{overflow:hidden}@keyframes fb_transform{from{opacity:0;transform:scale(.95)}to{opacity:1;transform:scale(1)}}.fb_animate{animation:fb_transform .3s forwards}
.fb_hidden{position:absolute;top:-10000px;z-index:10001}.fb_reposition{overflow:hidden;position:relative}.fb_invisible{display:none}.fb_reset{background:none;border:0px;border-spacing:0;color:#000;cursor:auto;direction:ltr;font-family:'lucida grande', tahoma, verdana, arial, sans-serif;font-size:11px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:1;margin:0;overflow:visible;padding:0;text-align:left;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;visibility:visible;white-space:normal;word-spacing:normal}.fb_reset>div{overflow:hidden}@keyframes fb_transform{from{opacity:0;transform:scale(.95)}to{opacity:1;transform:scale(1)}}.fb_animate{animation:fb_transform .3s forwards}
.fb_dialog{background:rgba(82,82,82,.7);position:absolute;top:-10000px;z-index:10001}.fb_dialog_advanced{border-radius:8px;padding:10px}.fb_dialog_content{background:#fff;color:#373737}.fb_dialog_close_icon{background:url(https://connect.facebook.net/rsrc.php/v4/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 0 transparent;cursor:pointer;display:block;height:15px;position:absolute;right:18px;top:17px;width:15px}.fb_dialog_mobile .fb_dialog_close_icon{left:5px;right:auto;top:5px}.fb_dialog_padding{background-color:transparent;position:absolute;width:1px;z-index:-1}.fb_dialog_close_icon:hover{background:url(https://connect.facebook.net/rsrc.php/v4/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -15px transparent}.fb_dialog_close_icon:active{background:url(https://connect.facebook.net/rsrc.php/v4/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -30px transparent}.fb_dialog_iframe{line-height:0}.fb_dialog_content .dialog_title{background:#6d84b4;border:1px solid #365899;color:#fff;font-size:14px;font-weight:bold;margin:0}.fb_dialog_content .dialog_title>span{background:url(https://connect.facebook.net/rsrc.php/v4/yd/r/Cou7n-nqK52.gif) no-repeat 5px 50%;float:left;padding:5px 0 7px 26px}body.fb_hidden{height:100%;left:0px;margin:0px;overflow:visible;position:absolute;top:-10000px;transform:none;width:100%}.fb_dialog.fb_dialog_mobile.loading{background:url(https://connect.facebook.net/rsrc.php/v4/ya/r/3rhSv5V8j3o.gif) white no-repeat 50% 50%;min-height:100%;min-width:100%;overflow:hidden;position:absolute;top:0;z-index:10001}.fb_dialog.fb_dialog_mobile.loading.centered{background:none;height:auto;min-height:initial;min-width:initial;width:auto}.fb_dialog.fb_dialog_mobile.loading.centered #fb_dialog_loader_spinner{width:100%}.fb_dialog.fb_dialog_mobile.loading.centered .fb_dialog_content{background:none}.loading.centered #fb_dialog_loader_close{clear:both;color:white;display:block;font-size:18px;padding-top:20px}#fb-root #fb_dialog_ipad_overlay{background:rgba(0,0,0,.4);bottom:0;left:0;min-height:100%;position:absolute;right:0;top:0;width:100%;z-index:10000}#fb-root #fb_dialog_ipad_overlay.hidden{display:none}.fb_dialog.fb_dialog_mobile.loading iframe{visibility:hidden}.fb_dialog_mobile .fb_dialog_iframe{position:sticky;top:0}.fb_dialog_content .dialog_header{background:linear-gradient(from(#738aba), to(#2c4987));border-bottom:1px solid;border-color:#043b87;box-shadow:white 0px 1px 1px -1px inset;color:#fff;font:bold 14px Helvetica, sans-serif;text-overflow:ellipsis;text-shadow:rgba(0,30,84,.296875) 0px -1px 0px;vertical-align:middle;white-space:nowrap}.fb_dialog_content .dialog_header table{height:43px;width:100%}.fb_dialog_content .dialog_header td.header_left{font-size:12px;padding-left:5px;vertical-align:middle;width:60px}.fb_dialog_content .dialog_header td.header_right{font-size:12px;padding-right:5px;vertical-align:middle;width:60px}.fb_dialog_content .touchable_button{background:linear-gradient(from(#4267b2), to(#2a4887));background-clip:padding-box;border:1px solid #29487d;border-radius:3px;display:inline-block;line-height:18px;margin-top:3px;max-width:85px;padding:4px 12px;position:relative}.fb_dialog_content .dialog_header .touchable_button input{background:none;border:none;color:white;font:bold 12px Helvetica, sans-serif;margin:2px -12px;padding:2px 6px 3px 6px;text-shadow:rgba(0,30,84,.296875) 0px -1px 0px}.fb_dialog_content .dialog_header .header_center{color:#fff;font-size:16px;font-weight:bold;line-height:18px;text-align:center;vertical-align:middle}.fb_dialog_content .dialog_content{background:url(https://connect.facebook.net/rsrc.php/v4/y9/r/jKEcVPZFk-2.gif) no-repeat 50% 50%;border:1px solid #4a4a4a;border-bottom:0;border-top:0;height:150px}.fb_dialog_content .dialog_footer{background:#f5f6f7;border:1px solid #4a4a4a;border-top-color:#ccc;height:40px}#fb_dialog_loader_close{float:left}.fb_dialog.fb_dialog_mobile .fb_dialog_close_icon{visibility:hidden}#fb_dialog_loader_spinner{animation:rotateSpinner 1.2s linear infinite;background-color:transparent;background-image:url(https://connect.facebook.net/rsrc.php/v4/yD/r/t-wz8gw1xG1.png);background-position:50% 50%;background-repeat:no-repeat;height:24px;width:24px}@keyframes rotateSpinner{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}
.fb_iframe_widget{display:inline-block;position:relative}.fb_iframe_widget span{display:inline-block;position:relative;text-align:justify}.fb_iframe_widget iframe{position:absolute}.fb_iframe_widget_fluid_desktop,.fb_iframe_widget_fluid_desktop span,.fb_iframe_widget_fluid_desktop iframe{max-width:100%}.fb_iframe_widget_fluid_desktop iframe{min-width:220px;position:relative}.fb_iframe_widget_lift{z-index:1}.fb_iframe_widget_fluid{display:inline}.fb_iframe_widget_fluid span{width:100%}</style><meta name="google" content="nopagereadaloud"><link rel="preconnect dns-prefetch" href="https://czuawlppipi.com"><link rel="preconnect dns-prefetch" href="https://lookpapanohands.com"></head>


<body class="">
    <script type="application/javascript">
        const themeMode = localStorage.getItem('themeMode');
        if (themeMode) {
            document.body.classList.add(themeMode);
        }
    </script>
        <header>
        <div class="container container-top">
            <div class="top-logo">
                <a href="https://www.natomanga.com" title="Manga Online"><img src="/images/logo-manganato.webp" alt="Manga Online" title="Manga Online"></a>
            </div>
            <div class="top-header">
                <div class="searching">
                    <form name="frmsearch">
                        <input id="search_story" autocomplete="off" placeholder="Search manga..." class="searchi"><div id="search_result"><ul></ul><div id="search-footer" class="searchf"></div></div>
                        <input style="display: none;">
                    </form>
                </div>

                <div class="link-social-desktop">
                                        <span class="items facebook"><a href="https://www.facebook.com/natomanga" target="_blank" rel="nofollow" title="Fanpage">Fanpage</a></span>
                    <span class="items discord"><a href="https://discord.gg/Qhz84GGvE9" target="_blank" rel="nofollow" title="Discord">Discord</a></span>
                                    </div>

                <div class="user-options">
                <div class="un-login">
                    <div class="theme-mode-button null"></div>
                    
            <a rel="nofollow" href="https://discord.gg/Qhz84GGvE9" target="_blank" class="link-social discord">
                <i class="fab fa-discord"></i>
            </a>
            <a rel="nofollow" href="https://www.facebook.com/natomanga" target="_blank" class="link-social">
                <i class="fab fa-facebook"></i>
            </a>
            
                     <a href="https://www.natomanga.com/history" class="btn-circle btn-history">
                        <i class="fas fa-history"></i>
                    </a>
                    <div class="login-top">
                        <a rel="nofollow" href="https://www.natomanga.com/login" class="btn-login">Login</a>
                        <a rel="nofollow" href="https://www.natomanga.com/register" class="btn-register">Register</a>
                    </div>
                </div>
                </div>
            </div>
            <div class="mobile-menu">MENU</div>
            <nav class="wrap-menu-primary">
                <ul id="menu-menu-top" class="menu-primary">
                    <li class="menu-item"><a href="https://www.natomanga.com/official">HOME</a></li>
                    <li class="menu-item"><a href="https://www.natomanga.com/manga-list/latest-manga" title="LATEST MANGA">LATEST MANGA</a></li>
                    <li class="menu-item"><a href="https://www.natomanga.com/manga-list/hot-manga" title="HOT MANGA">HOT MANGA</a></li>
                    <li class="menu-item"><a href="https://www.natomanga.com/manga-list/new-manga" title="NEW MANGA">NEW MANGA</a></li>
                    <li class="menu-item"><a href="https://www.natomanga.com/manga-list/completed-manga" title="COMPLETED MANGA">COMPLETED MANGA</a></li>
                    <li class="menu-item"><a href="https://www.natomanga.com/request-new-manga" title="Request new manga">REQUEST MANGA</a></li>
                    <span></span>
                </ul>
            </nav>
        </div>
    </header>
    
    

    
        <div class="container">
        <div class="slide">
    <h3 class="title update-slide">POPULAR MANGA</h3>
    <div id="owl-demo" class="owl-carousel owl-theme" style="opacity: 1; display: block;">
                            <div class="owl-wrapper-outer"><div class="owl-wrapper" style="width: 5840px; left: 0px; display: block; transition: 800ms; transform: translate3d(-292px, 0px, 0px);"><div class="owl-item" style="width: 146px;"><div class="item">
                <img src="https://img-r1.2xstorage.com/thumb/case-closed.webp" loading="lazy" onerror="javascript:this.src='/images/default_nato.webp';" alt="Case Closed">
                <div class="slide-caption">
                    <h3>
                        <a href="https://www.natomanga.com/manga/case-closed" title="Case Closed">
                            Case Closed
                        </a>
                    </h3>
                                                                <a href="https://www.natomanga.com/manga/case-closed/chapter-1142" title="Chapter 1142">Chapter 1142
                        </a>
                                    </div>
            </div></div><div class="owl-item" style="width: 146px;"><div class="item">
                <img src="https://img-r1.2xstorage.com/thumb/blue-lock.webp" loading="lazy" onerror="javascript:this.src='/images/default_nato.webp';" alt="Blue Lock">
                <div class="slide-caption">
                    <h3>
                        <a href="https://www.natomanga.com/manga/blue-lock" title="Blue Lock">
                            Blue Lock
                        </a>
                    </h3>
                                                                <a href="https://www.natomanga.com/manga/blue-lock/chapter-299" title="Chapter 299">Chapter 299
                        </a>
                                    </div>
            </div></div><div class="owl-item" style="width: 146px;"><div class="item">
                <img src="https://img-r1.2xstorage.com/thumb/bimyou-ni-yasashii-ijimekko.webp" loading="lazy" onerror="javascript:this.src='/images/default_nato.webp';" alt="Bimyou ni Yasashii Ijimekko">
                <div class="slide-caption">
                    <h3>
                        <a href="https://www.natomanga.com/manga/bimyou-ni-yasashii-ijimekko" title="Bimyou ni Yasashii Ijimekko">
                            Bimyou ni Yasashii Ijimekko
                        </a>
                    </h3>
                                                                <a href="https://www.natomanga.com/manga/bimyou-ni-yasashii-ijimekko/chapter-48" title="Chapter 48">Chapter 48
                        </a>
                                    </div>
            </div></div><div class="owl-item" style="width: 146px;"><div class="item">
                <img src="https://img-r1.2xstorage.com/thumb/fairy-tail-100-years-quest.webp" loading="lazy" onerror="javascript:this.src='/images/default_nato.webp';" alt="Fairy Tail: 100 Years Quest">
                <div class="slide-caption">
                    <h3>
                        <a href="https://www.natomanga.com/manga/fairy-tail-100-years-quest" title="Fairy Tail: 100 Years Quest">
                            Fairy Tail: 100 Years Quest
                        </a>
                    </h3>
                                                                <a href="https://www.natomanga.com/manga/fairy-tail-100-years-quest/chapter-183" title="Chapter 183">Chapter 183
                        </a>
                                    </div>
            </div></div><div class="owl-item" style="width: 146px;"><div class="item">
                <img src="https://img-r1.2xstorage.com/thumb/desutoro-246.webp" loading="lazy" onerror="javascript:this.src='/images/default_nato.webp';" alt="Desutoro 246">
                <div class="slide-caption">
                    <h3>
                        <a href="https://www.natomanga.com/manga/desutoro-246" title="Desutoro 246">
                            Desutoro 246
                        </a>
                    </h3>
                                                                <a href="https://www.natomanga.com/manga/desutoro-246/chapter-30" title="Chapter 30">Chapter 30
                        </a>
                                    </div>
            </div></div><div class="owl-item" style="width: 146px;"><div class="item">
                <img src="https://img-r1.2xstorage.com/thumb/sigrid-manhwa.webp" loading="lazy" onerror="javascript:this.src='/images/default_nato.webp';" alt="Sigrid manhwa">
                <div class="slide-caption">
                    <h3>
                        <a href="https://www.natomanga.com/manga/sigrid-manhwa" title="Sigrid manhwa">
                            Sigrid manhwa
                        </a>
                    </h3>
                                                                <a href="https://www.natomanga.com/manga/sigrid-manhwa/chapter-141" title="Chapter 141">Chapter 141
                        </a>
                                    </div>
            </div></div><div class="owl-item" style="width: 146px;"><div class="item">
                <img src="https://img-r1.2xstorage.com/thumb/rent-a-girlfriend.webp" loading="lazy" onerror="javascript:this.src='/images/default_nato.webp';" alt="Rent-A-Girlfriend">
                <div class="slide-caption">
                    <h3>
                        <a href="https://www.natomanga.com/manga/rent-a-girlfriend" title="Rent-A-Girlfriend">
                            Rent-A-Girlfriend
                        </a>
                    </h3>
                                                                <a href="https://www.natomanga.com/manga/rent-a-girlfriend/chapter-373" title="Chapter 373">Chapter 373
                        </a>
                                    </div>
            </div></div><div class="owl-item" style="width: 146px;"><div class="item">
                <img src="https://img-r1.2xstorage.com/thumb/black-and-white-colored.webp" loading="lazy" onerror="javascript:this.src='/images/default_nato.webp';" alt="Black and White (Colored)">
                <div class="slide-caption">
                    <h3>
                        <a href="https://www.natomanga.com/manga/black-and-white-colored" title="Black and White (Colored)">
                            Black and White (Colored)
                        </a>
                    </h3>
                                                                <a href="https://www.natomanga.com/manga/black-and-white-colored/chapter-15" title="Chapter 15">Chapter 15
                        </a>
                                    </div>
            </div></div><div class="owl-item" style="width: 146px;"><div class="item">
                <img src="https://storage.waitst.com/thumb/how-to-reject-the-kings-scout.webp" loading="lazy" onerror="javascript:this.src='/images/default_nato.webp';" alt="How to Reject the King’s Scout">
                <div class="slide-caption">
                    <h3>
                        <a href="https://www.natomanga.com/manga/how-to-reject-the-kings-scout" title="How to Reject the King’s Scout">
                            How to Reject the King’s Scout
                        </a>
                    </h3>
                                                                <a href="https://www.natomanga.com/manga/how-to-reject-the-kings-scout/chapter-22" title="Chapter 22">Chapter 22
                        </a>
                                    </div>
            </div></div><div class="owl-item" style="width: 146px;"><div class="item">
                <img src="https://img-r1.2xstorage.com/thumb/i-became-the-target-of-the-harem-in-another-world.webp" loading="lazy" onerror="javascript:this.src='/images/default_nato.webp';" alt="I Became The Target Of The Harem In Another World">
                <div class="slide-caption">
                    <h3>
                        <a href="https://www.natomanga.com/manga/i-became-the-target-of-the-harem-in-another-world" title="I Became The Target Of The Harem In Another World">
                            I Became The Target Of The Harem In Another World
                        </a>
                    </h3>
                                                                <a href="https://www.natomanga.com/manga/i-became-the-target-of-the-harem-in-another-world/chapter-86" title="Chapter 86">Chapter 86
                        </a>
                                    </div>
            </div></div><div class="owl-item" style="width: 146px;"><div class="item">
                <img src="https://img-r1.2xstorage.com/thumb/maou-gakuen-no-hangyakusha.webp" loading="lazy" onerror="javascript:this.src='/images/default_nato.webp';" alt="Maou Gakuen No Hangyakusha">
                <div class="slide-caption">
                    <h3>
                        <a href="https://www.natomanga.com/manga/maou-gakuen-no-hangyakusha" title="Maou Gakuen No Hangyakusha">
                            Maou Gakuen No Hangyakusha
                        </a>
                    </h3>
                                                                <a href="https://www.natomanga.com/manga/maou-gakuen-no-hangyakusha/chapter-48" title="Chapter 48">Chapter 48
                        </a>
                                    </div>
            </div></div><div class="owl-item" style="width: 146px;"><div class="item">
                <img src="https://img-r1.2xstorage.com/thumb/black-haze-remake.webp" loading="lazy" onerror="javascript:this.src='/images/default_nato.webp';" alt="Black Haze [Remake]">
                <div class="slide-caption">
                    <h3>
                        <a href="https://www.natomanga.com/manga/black-haze-remake" title="Black Haze [Remake]">
                            Black Haze [Remake]
                        </a>
                    </h3>
                                                                <a href="https://www.natomanga.com/manga/black-haze-remake/chapter-22" title="Chapter 22">Chapter 22
                        </a>
                                    </div>
            </div></div><div class="owl-item" style="width: 146px;"><div class="item">
                <img src="https://img-r1.2xstorage.com/thumb/reincarnated-as-a-new-employee.webp" loading="lazy" onerror="javascript:this.src='/images/default_nato.webp';" alt="Reincarnated as a New Employee">
                <div class="slide-caption">
                    <h3>
                        <a href="https://www.natomanga.com/manga/reincarnated-as-a-new-employee" title="Reincarnated as a New Employee">
                            Reincarnated as a New Employee
                        </a>
                    </h3>
                                                                <a href="https://www.natomanga.com/manga/reincarnated-as-a-new-employee/chapter-24" title="Chapter 24">Chapter 24
                        </a>
                                    </div>
            </div></div><div class="owl-item" style="width: 146px;"><div class="item">
                <img src="https://img-r1.2xstorage.com/thumb/black-haze-2025.webp" loading="lazy" onerror="javascript:this.src='/images/default_nato.webp';" alt="Black Haze (2025)">
                <div class="slide-caption">
                    <h3>
                        <a href="https://www.natomanga.com/manga/black-haze-2025" title="Black Haze (2025)">
                            Black Haze (2025)
                        </a>
                    </h3>
                                                                <a href="https://www.natomanga.com/manga/black-haze-2025/chapter-22" title="Chapter 22">Chapter 22
                        </a>
                                    </div>
            </div></div><div class="owl-item" style="width: 146px;"><div class="item">
                <img src="https://img-r1.2xstorage.com/thumb/the-archduke-s-gorgeous-wedding-was-a-fraud.webp" loading="lazy" onerror="javascript:this.src='/images/default_nato.webp';" alt="The Archduke's Gorgeous Wedding Was A Fraud">
                <div class="slide-caption">
                    <h3>
                        <a href="https://www.natomanga.com/manga/the-archduke-s-gorgeous-wedding-was-a-fraud" title="The Archduke's Gorgeous Wedding Was A Fraud">
                            The Archduke's Gorgeous Wedding Was A Fraud
                        </a>
                    </h3>
                                                                <a href="https://www.natomanga.com/manga/the-archduke-s-gorgeous-wedding-was-a-fraud/chapter-70" title="Chapter 70">Chapter 70
                        </a>
                                    </div>
            </div></div><div class="owl-item" style="width: 146px;"><div class="item">
                <img src="https://img-r1.2xstorage.com/thumb/please-become-my-sister-in-law.webp" loading="lazy" onerror="javascript:this.src='/images/default_nato.webp';" alt="Please Become My Sister-In-Law!">
                <div class="slide-caption">
                    <h3>
                        <a href="https://www.natomanga.com/manga/please-become-my-sister-in-law" title="Please Become My Sister-In-Law!">
                            Please Become My Sister-In-Law!
                        </a>
                    </h3>
                                                                <a href="https://www.natomanga.com/manga/please-become-my-sister-in-law/chapter-34" title="Chapter 34">Chapter 34
                        </a>
                                    </div>
            </div></div><div class="owl-item" style="width: 146px;"><div class="item">
                <img src="https://img-r1.2xstorage.com/thumb/confessing-my-love-to-him-the-treacherous-one.webp" loading="lazy" onerror="javascript:this.src='/images/default_nato.webp';" alt="Confessing My Love To Him, The Treacherous One">
                <div class="slide-caption">
                    <h3>
                        <a href="https://www.natomanga.com/manga/confessing-my-love-to-him-the-treacherous-one" title="Confessing My Love To Him, The Treacherous One">
                            Confessing My Love To Him, The Treacherous One
                        </a>
                    </h3>
                                                                <a href="https://www.natomanga.com/manga/confessing-my-love-to-him-the-treacherous-one/chapter-30" title="Chapter 30">Chapter 30
                        </a>
                                    </div>
            </div></div><div class="owl-item" style="width: 146px;"><div class="item">
                <img src="https://img-r1.2xstorage.com/thumb/the-creepy-and-freaky.webp" loading="lazy" onerror="javascript:this.src='/images/default_nato.webp';" alt="The Creepy and Freaky">
                <div class="slide-caption">
                    <h3>
                        <a href="https://www.natomanga.com/manga/the-creepy-and-freaky" title="The Creepy and Freaky">
                            The Creepy and Freaky
                        </a>
                    </h3>
                                                                <a href="https://www.natomanga.com/manga/the-creepy-and-freaky/chapter-4" title="Chapter 4">Chapter 4
                        </a>
                                    </div>
            </div></div><div class="owl-item" style="width: 146px;"><div class="item">
                <img src="https://storage.waitst.com/thumb/manga_57712_image.jpg" loading="lazy" onerror="javascript:this.src='/images/default_nato.webp';" alt="Don’t Mess With The Puppy!">
                <div class="slide-caption">
                    <h3>
                        <a href="https://www.natomanga.com/manga/dont-mess-with-the-puppy" title="Don’t Mess With The Puppy!">
                            Don’t Mess With The Puppy!
                        </a>
                    </h3>
                                                                <a href="https://www.natomanga.com/manga/dont-mess-with-the-puppy/chapter-38" title="Chapter 38">Chapter 38
                        </a>
                                    </div>
            </div></div><div class="owl-item" style="width: 146px;"><div class="item">
                <img src="https://img-r1.2xstorage.com/thumb/fated-to-be-loved-by-villains.webp" loading="lazy" onerror="javascript:this.src='/images/default_nato.webp';" alt="Fated to Be Loved by Villains">
                <div class="slide-caption">
                    <h3>
                        <a href="https://www.natomanga.com/manga/fated-to-be-loved-by-villains" title="Fated to Be Loved by Villains">
                            Fated to Be Loved by Villains
                        </a>
                    </h3>
                                                                <a href="https://www.natomanga.com/manga/fated-to-be-loved-by-villains/chapter-27" title="Chapter 27">Chapter 27
                        </a>
                                    </div>
            </div></div></div></div>
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
        
    <div class="owl-controls clickable"><div class="owl-buttons"><div class="owl-prev"></div><div class="owl-next"></div></div></div></div>
</div>
        <div class="main-wrapper">
            <div class="leftCol">

                
                <div class="breadcrumb breadcrumbs" itemscope="" itemtype="http://schema.org/BreadcrumbList">
                    <p>
                        <span itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem">
                            <a itemprop="item" href="https://www.natomanga.com" title="Manga Online">
                                <span itemprop="name">Manga Online</span>
                            </a>
                            <meta itemprop="position" content="1">
                        </span>
                        <span>»</span>
                        <span itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem">
                            <a itemtype="http://schema.org/Thing" itemprop="item" href="https://www.natomanga.com/manga/dr-stone">
                                <span itemprop="name">Dr. Stone</span>
                            </a>
                            <meta itemprop="position" content="2">
                        </span>
                    </p>
                </div>


                <div class="manga-info-top">
                    <div class="manga-info-pic">
                        <img src="https://imgs-2.2xstorage.com/thumb/dr-stone.webp" onerror="javascript:this.src='/images/default_nato.webp';" class="lazy lz-entered lz-loading" alt="Dr. Stone" data-ll-status="loading">
                        <span onclick="moveToListChapter();" class="btn_chapterslist">CHAPTER LIST</span>
                                                <div class="read-chapter">
                                                        <a href="https://www.natomanga.com/manga/dr-stone/chapter-1" rel="nofollow">Start Reading</a>
                            <a href="https://www.natomanga.com/manga/dr-stone/chapter-232-5" rel="nofollow">Newest Chapter</a>
                        </div>
                                            </div>
                    <div class="manga-info-content">
                        <ul class="manga-info-text">
                            <li>
                                <h1>Dr. Stone</h1>
                                                            </li>

                                                        <li>Author(s) :
                                                                                                        <a href="https://www.natomanga.com/author/inagaki-riichiro">
                                        Inagaki Riichiro</a>,
                                                                                                        <a href="https://www.natomanga.com/author/boichi">
                                        Boichi</a>
                                                            </li>
                            <li>Status : Ongoing</li>
                            <li>Last updated : Nov-01-2024 09:36:40 PM</li>
                            <li style="display: none;">TransGroup : </li>
                            <li>View : 55,627,734</li>

                                                        <li class="genres">Genres :
                                                                    <a href="https://www.natomanga.com/genre/action">
                                        Action
                                    </a>, 
                                                                    <a href="https://www.natomanga.com/genre/adventure">
                                        Adventure
                                    </a>, 
                                                                    <a href="https://www.natomanga.com/genre/comedy">
                                        Comedy
                                    </a>, 
                                                                    <a href="https://www.natomanga.com/genre/cooking">
                                        Cooking
                                    </a>, 
                                                                    <a href="https://www.natomanga.com/genre/drama">
                                        Drama
                                    </a>, 
                                                                    <a href="https://www.natomanga.com/genre/mystery">
                                        Mystery
                                    </a>, 
                                                                    <a href="https://www.natomanga.com/genre/shounen">
                                        Shounen
                                    </a>, 
                                                                    <a href="https://www.natomanga.com/genre/slice-of-life">
                                        Slice of life
                                    </a>, 
                                                                    <a href="https://www.natomanga.com/genre/supernatural">
                                        Supernatural
                                    </a>
                                                            </li>
                            <li style="height: 27px;"><span>Rating : </span>
                                <em class="rate_row" id="rate_row"><span class="rate_star checked" data-value="1"></span><span class="rate_star checked" data-value="2"></span><span class="rate_star checked" data-value="3"></span><span class="rate_star checked" data-value="4"></span><span class="rate_star checked" data-value="5"></span><input type="hidden" class="get_rate" value="5" default-stars="4.65"></em>
                                <em class="rate_row_result"></em>
                            </li>
                            <li style="line-height: 20px; font-size: 11px; font-style: italic; padding: 0px 0px 0px 44px;">
                                <span style="line-height: 100%!important;">&nbsp;</span>
                                <em id="rate_row_cmd" style="color: black;">
                                    natomanga.com rate : 4.65 / 5 - 19 votes
                                </em>
                                <script type="application/ld+json"> {
                                "@context": "https://schema.org",
                                "@type": "AggregateRating",
                                "ratingValue": "4.65",
                                "ratingCount": "19",
                                "itemReviewed": {
                                    "@type": "Book",
                                    "name": "Dr. Stone",
                                    "image": "https://imgs-2.2xstorage.com/thumb/dr-stone.webp"
                                }
                            } </script>
                            </li>
                            <li class="li_bookmark"><div class="user_btn_follow_i">
        <img id="btnBookmark" data-url="https://www.natomanga.com/action/bookmark/39773" data-action="add" src="/images/theodoi.webp" alt="Follow">
    </div>
</li>
                            
                        </ul>
                        <p>
                            📢 <strong>New Feature: Save Reading History for Guests!</strong><br>
                            MangaNato automatically saves your reading history—no account required! <br>
                            Pick up your favorite manga right where you left off with ease. Log in to keep your progress synced across devices.<br>
                            📌 Find your saved history in the <a href="/history"><span class="btn-circle"><i class="fas fa-history"></i></span></a> section on the site.
                        </p>
                    </div>

                </div>

                
                

                
                <div id="chapter" class="chapter">
                    <div class="manga-info-chapter">
                        <div class="row title-list-chapter">
                            <span>Chapter name</span>
                            <span>View</span>
                            <span>Time uploaded</span>
                        </div>
                        <div class="chapter-list">
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-232-5" title="Dr. Stone Chapter 232.5">Chapter 232.5</a></span>
                                    <span> 26,767 </span>
                                    <span title="Nov-01-2024 09:36">11-01 21:36</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-232-2" title="Dr. Stone Chapter 232.2">Chapter 232.2</a></span>
                                    <span> 15,026 </span>
                                    <span title="Nov-01-2024 09:35">11-01 21:35</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-232-1" title="Dr. Stone Chapter 232.1">Chapter 232.1</a></span>
                                    <span> 220,159 </span>
                                    <span title="Nov-01-2024 09:35">11-01 21:35</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-232" title="Dr. Stone Chapter 232">Chapter 232</a></span>
                                    <span> 251,952 </span>
                                    <span title="Nov-01-2024 09:34">11-01 21:34</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-231-1" title="Dr. Stone Chapter 231.1">Chapter 231.1</a></span>
                                    <span> 234,258 </span>
                                    <span title="Nov-01-2024 09:33">11-01 21:33</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-231" title="Dr. Stone Chapter 231">Chapter 231</a></span>
                                    <span> 155,533 </span>
                                    <span title="Nov-01-2024 09:33">11-01 21:33</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-230" title="Dr. Stone Chapter 230">Chapter 230</a></span>
                                    <span> 168,820 </span>
                                    <span title="Nov-01-2024 09:32">11-01 21:32</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-229" title="Dr. Stone Chapter 229">Chapter 229</a></span>
                                    <span> 150,048 </span>
                                    <span title="Nov-01-2024 09:32">11-01 21:32</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-228" title="Dr. Stone Chapter 228">Chapter 228</a></span>
                                    <span> 151,366 </span>
                                    <span title="Nov-01-2024 09:31">11-01 21:31</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-227" title="Dr. Stone Chapter 227">Chapter 227</a></span>
                                    <span> 145,971 </span>
                                    <span title="Nov-01-2024 09:31">11-01 21:31</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-226" title="Dr. Stone Chapter 226">Chapter 226</a></span>
                                    <span> 143,560 </span>
                                    <span title="Nov-01-2024 09:31">11-01 21:31</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-225" title="Dr. Stone Chapter 225">Chapter 225</a></span>
                                    <span> 143,096 </span>
                                    <span title="Nov-01-2024 09:30">11-01 21:30</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-224" title="Dr. Stone Chapter 224">Chapter 224</a></span>
                                    <span> 188,183 </span>
                                    <span title="Nov-01-2024 09:30">11-01 21:30</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-223" title="Dr. Stone Chapter 223">Chapter 223</a></span>
                                    <span> 159,610 </span>
                                    <span title="Nov-01-2024 09:29">11-01 21:29</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-222" title="Dr. Stone Chapter 222">Chapter 222</a></span>
                                    <span> 156,741 </span>
                                    <span title="Nov-01-2024 09:29">11-01 21:29</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-221" title="Dr. Stone Chapter 221">Chapter 221</a></span>
                                    <span> 149,051 </span>
                                    <span title="Nov-01-2024 09:28">11-01 21:28</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-220" title="Dr. Stone Chapter 220">Chapter 220</a></span>
                                    <span> 132,924 </span>
                                    <span title="Nov-01-2024 09:28">11-01 21:28</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-219" title="Dr. Stone Chapter 219">Chapter 219</a></span>
                                    <span> 127,093 </span>
                                    <span title="Nov-01-2024 09:27">11-01 21:27</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-218" title="Dr. Stone Chapter 218">Chapter 218</a></span>
                                    <span> 99,048 </span>
                                    <span title="Nov-01-2024 09:27">11-01 21:27</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-217" title="Dr. Stone Chapter 217">Chapter 217</a></span>
                                    <span> 125,823 </span>
                                    <span title="Nov-01-2024 09:27">11-01 21:27</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-216" title="Dr. Stone Chapter 216">Chapter 216</a></span>
                                    <span> 118,790 </span>
                                    <span title="Nov-01-2024 09:26">11-01 21:26</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-215" title="Dr. Stone Chapter 215">Chapter 215</a></span>
                                    <span> 122,834 </span>
                                    <span title="Nov-01-2024 09:26">11-01 21:26</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-214" title="Dr. Stone Chapter 214">Chapter 214</a></span>
                                    <span> 122,314 </span>
                                    <span title="Nov-01-2024 09:25">11-01 21:25</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-213" title="Dr. Stone Chapter 213">Chapter 213</a></span>
                                    <span> 119,451 </span>
                                    <span title="Nov-01-2024 09:25">11-01 21:25</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-212" title="Dr. Stone Chapter 212">Chapter 212</a></span>
                                    <span> 124,662 </span>
                                    <span title="Nov-01-2024 09:24">11-01 21:24</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-211" title="Dr. Stone Chapter 211">Chapter 211</a></span>
                                    <span> 122,372 </span>
                                    <span title="Nov-01-2024 09:24">11-01 21:24</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-210" title="Dr. Stone Chapter 210">Chapter 210</a></span>
                                    <span> 128,134 </span>
                                    <span title="Nov-01-2024 09:24">11-01 21:24</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-209" title="Dr. Stone Chapter 209">Chapter 209</a></span>
                                    <span> 126,295 </span>
                                    <span title="Nov-01-2024 09:23">11-01 21:23</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-208" title="Dr. Stone Chapter 208">Chapter 208</a></span>
                                    <span> 128,429 </span>
                                    <span title="Nov-01-2024 09:23">11-01 21:23</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-207" title="Dr. Stone Chapter 207">Chapter 207</a></span>
                                    <span> 129,742 </span>
                                    <span title="Nov-01-2024 09:23">11-01 21:23</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-206" title="Dr. Stone Chapter 206">Chapter 206</a></span>
                                    <span> 127,685 </span>
                                    <span title="Nov-01-2024 09:22">11-01 21:22</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-205" title="Dr. Stone Chapter 205">Chapter 205</a></span>
                                    <span> 126,999 </span>
                                    <span title="Nov-01-2024 09:22">11-01 21:22</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-204" title="Dr. Stone Chapter 204">Chapter 204</a></span>
                                    <span> 287,070 </span>
                                    <span title="Nov-01-2024 09:21">11-01 21:21</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-203" title="Dr. Stone Chapter 203">Chapter 203</a></span>
                                    <span> 195,991 </span>
                                    <span title="Nov-01-2024 09:21">11-01 21:21</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-202" title="Dr. Stone Chapter 202">Chapter 202</a></span>
                                    <span> 206,223 </span>
                                    <span title="Nov-01-2024 09:21">11-01 21:21</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-201" title="Dr. Stone Chapter 201">Chapter 201</a></span>
                                    <span> 206,532 </span>
                                    <span title="Nov-01-2024 09:20">11-01 21:20</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-200" title="Dr. Stone Chapter 200">Chapter 200</a></span>
                                    <span> 212,680 </span>
                                    <span title="Nov-01-2024 09:20">11-01 21:20</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-199" title="Dr. Stone Chapter 199">Chapter 199</a></span>
                                    <span> 223,423 </span>
                                    <span title="Nov-01-2024 09:19">11-01 21:19</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-198" title="Dr. Stone Chapter 198">Chapter 198</a></span>
                                    <span> 191,693 </span>
                                    <span title="Nov-01-2024 09:19">11-01 21:19</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-197" title="Dr. Stone Chapter 197">Chapter 197</a></span>
                                    <span> 250,541 </span>
                                    <span title="Nov-01-2024 09:18">11-01 21:18</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-196" title="Dr. Stone Chapter 196">Chapter 196</a></span>
                                    <span> 238,873 </span>
                                    <span title="Nov-01-2024 09:18">11-01 21:18</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-195" title="Dr. Stone Chapter 195">Chapter 195</a></span>
                                    <span> 189,849 </span>
                                    <span title="Nov-01-2024 09:17">11-01 21:17</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-194" title="Dr. Stone Chapter 194">Chapter 194</a></span>
                                    <span> 244,773 </span>
                                    <span title="Nov-01-2024 09:17">11-01 21:17</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-193" title="Dr. Stone Chapter 193">Chapter 193</a></span>
                                    <span> 210,654 </span>
                                    <span title="Nov-01-2024 09:17">11-01 21:17</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-192" title="Dr. Stone Chapter 192">Chapter 192</a></span>
                                    <span> 200,301 </span>
                                    <span title="Nov-01-2024 09:16">11-01 21:16</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-191" title="Dr. Stone Chapter 191">Chapter 191</a></span>
                                    <span> 167,960 </span>
                                    <span title="Nov-01-2024 09:16">11-01 21:16</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-190" title="Dr. Stone Chapter 190">Chapter 190</a></span>
                                    <span> 214,133 </span>
                                    <span title="Nov-01-2024 09:15">11-01 21:15</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-189" title="Dr. Stone Chapter 189">Chapter 189</a></span>
                                    <span> 155,978 </span>
                                    <span title="Nov-01-2024 09:15">11-01 21:15</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-188" title="Dr. Stone Chapter 188">Chapter 188</a></span>
                                    <span> 152,608 </span>
                                    <span title="Nov-01-2024 09:15">11-01 21:15</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-187" title="Dr. Stone Chapter 187">Chapter 187</a></span>
                                    <span> 124,119 </span>
                                    <span title="Nov-01-2024 09:14">11-01 21:14</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-186" title="Dr. Stone Chapter 186">Chapter 186</a></span>
                                    <span> 124,197 </span>
                                    <span title="Nov-01-2024 09:14">11-01 21:14</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-185" title="Dr. Stone Chapter 185">Chapter 185</a></span>
                                    <span> 152,187 </span>
                                    <span title="Nov-01-2024 09:13">11-01 21:13</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-184" title="Dr. Stone Chapter 184">Chapter 184</a></span>
                                    <span> 149,966 </span>
                                    <span title="Nov-01-2024 09:13">11-01 21:13</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-183" title="Dr. Stone Chapter 183">Chapter 183</a></span>
                                    <span> 151,490 </span>
                                    <span title="Nov-01-2024 09:12">11-01 21:12</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-182" title="Dr. Stone Chapter 182">Chapter 182</a></span>
                                    <span> 151,531 </span>
                                    <span title="Nov-01-2024 09:12">11-01 21:12</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-181" title="Dr. Stone Chapter 181">Chapter 181</a></span>
                                    <span> 150,807 </span>
                                    <span title="Nov-01-2024 09:12">11-01 21:12</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-180" title="Dr. Stone Chapter 180">Chapter 180</a></span>
                                    <span> 160,420 </span>
                                    <span title="Nov-01-2024 09:11">11-01 21:11</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-179" title="Dr. Stone Chapter 179">Chapter 179</a></span>
                                    <span> 151,923 </span>
                                    <span title="Nov-01-2024 09:11">11-01 21:11</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-178" title="Dr. Stone Chapter 178">Chapter 178</a></span>
                                    <span> 154,253 </span>
                                    <span title="Nov-01-2024 09:10">11-01 21:10</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-177" title="Dr. Stone Chapter 177">Chapter 177</a></span>
                                    <span> 151,391 </span>
                                    <span title="Nov-01-2024 09:10">11-01 21:10</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-176" title="Dr. Stone Chapter 176">Chapter 176</a></span>
                                    <span> 125,670 </span>
                                    <span title="Nov-01-2024 09:10">11-01 21:10</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-175" title="Dr. Stone Chapter 175">Chapter 175</a></span>
                                    <span> 153,476 </span>
                                    <span title="Nov-01-2024 09:09">11-01 21:09</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-174" title="Dr. Stone Chapter 174">Chapter 174</a></span>
                                    <span> 153,022 </span>
                                    <span title="Nov-01-2024 09:09">11-01 21:09</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-173" title="Dr. Stone Chapter 173">Chapter 173</a></span>
                                    <span> 156,128 </span>
                                    <span title="Nov-01-2024 09:08">11-01 21:08</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-172" title="Dr. Stone Chapter 172">Chapter 172</a></span>
                                    <span> 158,422 </span>
                                    <span title="Nov-01-2024 09:08">11-01 21:08</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-171" title="Dr. Stone Chapter 171">Chapter 171</a></span>
                                    <span> 158,192 </span>
                                    <span title="Nov-01-2024 09:07">11-01 21:07</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-170" title="Dr. Stone Chapter 170">Chapter 170</a></span>
                                    <span> 166,867 </span>
                                    <span title="Nov-01-2024 09:07">11-01 21:07</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-169" title="Dr. Stone Chapter 169">Chapter 169</a></span>
                                    <span> 155,415 </span>
                                    <span title="Nov-01-2024 09:06">11-01 21:06</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-168" title="Dr. Stone Chapter 168">Chapter 168</a></span>
                                    <span> 155,119 </span>
                                    <span title="Nov-01-2024 09:06">11-01 21:06</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-167" title="Dr. Stone Chapter 167">Chapter 167</a></span>
                                    <span> 157,789 </span>
                                    <span title="Nov-01-2024 09:06">11-01 21:06</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-166" title="Dr. Stone Chapter 166">Chapter 166</a></span>
                                    <span> 72,295 </span>
                                    <span title="Nov-01-2024 09:05">11-01 21:05</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-165" title="Dr. Stone Chapter 165">Chapter 165</a></span>
                                    <span> 169,091 </span>
                                    <span title="Nov-01-2024 09:05">11-01 21:05</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-164" title="Dr. Stone Chapter 164">Chapter 164</a></span>
                                    <span> 154,901 </span>
                                    <span title="Nov-01-2024 09:04">11-01 21:04</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-163" title="Dr. Stone Chapter 163">Chapter 163</a></span>
                                    <span> 158,504 </span>
                                    <span title="Nov-01-2024 09:04">11-01 21:04</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-162" title="Dr. Stone Chapter 162">Chapter 162</a></span>
                                    <span> 156,064 </span>
                                    <span title="Nov-01-2024 09:03">11-01 21:03</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-161" title="Dr. Stone Chapter 161">Chapter 161</a></span>
                                    <span> 161,624 </span>
                                    <span title="Nov-01-2024 09:03">11-01 21:03</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-160" title="Dr. Stone Chapter 160">Chapter 160</a></span>
                                    <span> 169,870 </span>
                                    <span title="Nov-01-2024 09:02">11-01 21:02</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-159" title="Dr. Stone Chapter 159">Chapter 159</a></span>
                                    <span> 395,959 </span>
                                    <span title="Nov-01-2024 09:02">11-01 21:02</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-158" title="Dr. Stone Chapter 158">Chapter 158</a></span>
                                    <span> 232,787 </span>
                                    <span title="Nov-01-2024 09:02">11-01 21:02</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-157" title="Dr. Stone Chapter 157">Chapter 157</a></span>
                                    <span> 221,197 </span>
                                    <span title="Nov-01-2024 09:01">11-01 21:01</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-156" title="Dr. Stone Chapter 156">Chapter 156</a></span>
                                    <span> 224,158 </span>
                                    <span title="Nov-01-2024 09:01">11-01 21:01</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-155" title="Dr. Stone Chapter 155">Chapter 155</a></span>
                                    <span> 217,616 </span>
                                    <span title="Nov-01-2024 09:01">11-01 21:01</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-154" title="Dr. Stone Chapter 154">Chapter 154</a></span>
                                    <span> 216,955 </span>
                                    <span title="Nov-01-2024 09:00">11-01 21:00</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-153" title="Dr. Stone Chapter 153">Chapter 153</a></span>
                                    <span> 221,930 </span>
                                    <span title="Nov-01-2024 09:00">11-01 21:00</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-152" title="Dr. Stone Chapter 152">Chapter 152</a></span>
                                    <span> 251,730 </span>
                                    <span title="Nov-01-2024 09:00">11-01 21:00</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-151" title="Dr. Stone Chapter 151">Chapter 151</a></span>
                                    <span> 261,147 </span>
                                    <span title="Nov-01-2024 08:59">11-01 20:59</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-150" title="Dr. Stone Chapter 150">Chapter 150</a></span>
                                    <span> 274,796 </span>
                                    <span title="Nov-01-2024 08:59">11-01 20:59</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-149" title="Dr. Stone Chapter 149">Chapter 149</a></span>
                                    <span> 278,179 </span>
                                    <span title="Nov-01-2024 08:58">11-01 20:58</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-148" title="Dr. Stone Chapter 148">Chapter 148</a></span>
                                    <span> 370,056 </span>
                                    <span title="Nov-01-2024 08:58">11-01 20:58</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-147" title="Dr. Stone Chapter 147">Chapter 147</a></span>
                                    <span> 319,792 </span>
                                    <span title="Nov-01-2024 08:58">11-01 20:58</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-146" title="Dr. Stone Chapter 146">Chapter 146</a></span>
                                    <span> 474,505 </span>
                                    <span title="Nov-01-2024 08:57">11-01 20:57</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-145" title="Dr. Stone Chapter 145">Chapter 145</a></span>
                                    <span> 367,740 </span>
                                    <span title="Nov-01-2024 08:57">11-01 20:57</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-144" title="Dr. Stone Chapter 144">Chapter 144</a></span>
                                    <span> 408,832 </span>
                                    <span title="Nov-01-2024 08:57">11-01 20:57</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-143" title="Dr. Stone Chapter 143">Chapter 143</a></span>
                                    <span> 331,738 </span>
                                    <span title="Nov-01-2024 08:56">11-01 20:56</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-142" title="Dr. Stone Chapter 142">Chapter 142</a></span>
                                    <span> 362,460 </span>
                                    <span title="Nov-01-2024 08:56">11-01 20:56</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-141" title="Dr. Stone Chapter 141">Chapter 141</a></span>
                                    <span> 365,186 </span>
                                    <span title="Nov-01-2024 08:55">11-01 20:55</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-140" title="Dr. Stone Chapter 140">Chapter 140</a></span>
                                    <span> 355,577 </span>
                                    <span title="Nov-01-2024 08:55">11-01 20:55</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-139" title="Dr. Stone Chapter 139">Chapter 139</a></span>
                                    <span> 361,432 </span>
                                    <span title="Nov-01-2024 08:55">11-01 20:55</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-138" title="Dr. Stone Chapter 138">Chapter 138</a></span>
                                    <span> 280,521 </span>
                                    <span title="Nov-01-2024 08:54">11-01 20:54</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-137" title="Dr. Stone Chapter 137">Chapter 137</a></span>
                                    <span> 351,171 </span>
                                    <span title="Nov-01-2024 08:54">11-01 20:54</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-136" title="Dr. Stone Chapter 136">Chapter 136</a></span>
                                    <span> 315,563 </span>
                                    <span title="Nov-01-2024 08:54">11-01 20:54</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-135" title="Dr. Stone Chapter 135">Chapter 135</a></span>
                                    <span> 318,455 </span>
                                    <span title="Nov-01-2024 08:53">11-01 20:53</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-134" title="Dr. Stone Chapter 134">Chapter 134</a></span>
                                    <span> 393,470 </span>
                                    <span title="Nov-01-2024 08:53">11-01 20:53</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-133" title="Dr. Stone Chapter 133">Chapter 133</a></span>
                                    <span> 339,338 </span>
                                    <span title="Nov-01-2024 08:52">11-01 20:52</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-132" title="Dr. Stone Chapter 132">Chapter 132</a></span>
                                    <span> 296,255 </span>
                                    <span title="Nov-01-2024 08:52">11-01 20:52</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-131" title="Dr. Stone Chapter 131">Chapter 131</a></span>
                                    <span> 292,549 </span>
                                    <span title="Nov-01-2024 08:52">11-01 20:52</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-130" title="Dr. Stone Chapter 130">Chapter 130</a></span>
                                    <span> 312,232 </span>
                                    <span title="Nov-01-2024 08:51">11-01 20:51</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-129" title="Dr. Stone Chapter 129">Chapter 129</a></span>
                                    <span> 282,321 </span>
                                    <span title="Nov-01-2024 08:51">11-01 20:51</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-128" title="Dr. Stone Chapter 128">Chapter 128</a></span>
                                    <span> 281,711 </span>
                                    <span title="Nov-01-2024 08:50">11-01 20:50</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-127" title="Dr. Stone Chapter 127">Chapter 127</a></span>
                                    <span> 276,435 </span>
                                    <span title="Nov-01-2024 08:50">11-01 20:50</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-126" title="Dr. Stone Chapter 126">Chapter 126</a></span>
                                    <span> 271,125 </span>
                                    <span title="Nov-01-2024 08:49">11-01 20:49</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-125" title="Dr. Stone Chapter 125">Chapter 125</a></span>
                                    <span> 274,844 </span>
                                    <span title="Nov-01-2024 08:49">11-01 20:49</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-124" title="Dr. Stone Chapter 124">Chapter 124</a></span>
                                    <span> 282,524 </span>
                                    <span title="Nov-01-2024 08:49">11-01 20:49</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-123" title="Dr. Stone Chapter 123">Chapter 123</a></span>
                                    <span> 278,125 </span>
                                    <span title="Nov-01-2024 08:48">11-01 20:48</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-122" title="Dr. Stone Chapter 122">Chapter 122</a></span>
                                    <span> 287,847 </span>
                                    <span title="Nov-01-2024 08:48">11-01 20:48</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-121" title="Dr. Stone Chapter 121">Chapter 121</a></span>
                                    <span> 280,533 </span>
                                    <span title="Nov-01-2024 08:47">11-01 20:47</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-120" title="Dr. Stone Chapter 120">Chapter 120</a></span>
                                    <span> 278,467 </span>
                                    <span title="Nov-01-2024 08:47">11-01 20:47</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-119" title="Dr. Stone Chapter 119">Chapter 119</a></span>
                                    <span> 277,228 </span>
                                    <span title="Nov-01-2024 08:46">11-01 20:46</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-118" title="Dr. Stone Chapter 118">Chapter 118</a></span>
                                    <span> 274,231 </span>
                                    <span title="Nov-01-2024 08:46">11-01 20:46</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-117" title="Dr. Stone Chapter 117">Chapter 117</a></span>
                                    <span> 285,873 </span>
                                    <span title="Nov-01-2024 08:45">11-01 20:45</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-116" title="Dr. Stone Chapter 116">Chapter 116</a></span>
                                    <span> 286,555 </span>
                                    <span title="Nov-01-2024 08:45">11-01 20:45</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-115" title="Dr. Stone Chapter 115">Chapter 115</a></span>
                                    <span> 266,630 </span>
                                    <span title="Nov-01-2024 08:45">11-01 20:45</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-114" title="Dr. Stone Chapter 114">Chapter 114</a></span>
                                    <span> 265,627 </span>
                                    <span title="Nov-01-2024 08:44">11-01 20:44</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-113" title="Dr. Stone Chapter 113">Chapter 113</a></span>
                                    <span> 270,224 </span>
                                    <span title="Nov-01-2024 08:44">11-01 20:44</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-112" title="Dr. Stone Chapter 112">Chapter 112</a></span>
                                    <span> 276,530 </span>
                                    <span title="Nov-01-2024 08:43">11-01 20:43</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-111" title="Dr. Stone Chapter 111">Chapter 111</a></span>
                                    <span> 286,734 </span>
                                    <span title="Nov-01-2024 08:43">11-01 20:43</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-110" title="Dr. Stone Chapter 110">Chapter 110</a></span>
                                    <span> 215,082 </span>
                                    <span title="Nov-01-2024 08:42">11-01 20:42</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-109" title="Dr. Stone Chapter 109">Chapter 109</a></span>
                                    <span> 273,309 </span>
                                    <span title="Nov-01-2024 08:42">11-01 20:42</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-108" title="Dr. Stone Chapter 108">Chapter 108</a></span>
                                    <span> 267,813 </span>
                                    <span title="Nov-01-2024 08:42">11-01 20:42</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-107" title="Dr. Stone Chapter 107">Chapter 107</a></span>
                                    <span> 278,219 </span>
                                    <span title="Nov-01-2024 08:41">11-01 20:41</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-106" title="Dr. Stone Chapter 106">Chapter 106</a></span>
                                    <span> 274,423 </span>
                                    <span title="Nov-01-2024 08:41">11-01 20:41</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-105" title="Dr. Stone Chapter 105">Chapter 105</a></span>
                                    <span> 269,919 </span>
                                    <span title="Nov-01-2024 08:41">11-01 20:41</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-104" title="Dr. Stone Chapter 104">Chapter 104</a></span>
                                    <span> 265,416 </span>
                                    <span title="Nov-01-2024 08:40">11-01 20:40</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-103" title="Dr. Stone Chapter 103">Chapter 103</a></span>
                                    <span> 268,916 </span>
                                    <span title="Nov-01-2024 08:40">11-01 20:40</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-102" title="Dr. Stone Chapter 102">Chapter 102</a></span>
                                    <span> 282,938 </span>
                                    <span title="Nov-01-2024 08:39">11-01 20:39</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-101" title="Dr. Stone Chapter 101">Chapter 101</a></span>
                                    <span> 288,340 </span>
                                    <span title="Nov-01-2024 08:39">11-01 20:39</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-100" title="Dr. Stone Chapter 100">Chapter 100</a></span>
                                    <span> 307,661 </span>
                                    <span title="Nov-01-2024 08:39">11-01 20:39</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-99" title="Dr. Stone Chapter 99">Chapter 99</a></span>
                                    <span> 310,036 </span>
                                    <span title="Nov-01-2024 08:38">11-01 20:38</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-98" title="Dr. Stone Chapter 98">Chapter 98</a></span>
                                    <span> 297,723 </span>
                                    <span title="Nov-01-2024 08:38">11-01 20:38</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-97" title="Dr. Stone Chapter 97">Chapter 97</a></span>
                                    <span> 295,018 </span>
                                    <span title="Nov-01-2024 08:37">11-01 20:37</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-96" title="Dr. Stone Chapter 96">Chapter 96</a></span>
                                    <span> 296,027 </span>
                                    <span title="Nov-01-2024 08:37">11-01 20:37</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-95" title="Dr. Stone Chapter 95">Chapter 95</a></span>
                                    <span> 300,551 </span>
                                    <span title="Nov-01-2024 08:37">11-01 20:37</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-94" title="Dr. Stone Chapter 94">Chapter 94</a></span>
                                    <span> 291,820 </span>
                                    <span title="Nov-01-2024 08:36">11-01 20:36</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-93" title="Dr. Stone Chapter 93">Chapter 93</a></span>
                                    <span> 305,127 </span>
                                    <span title="Nov-01-2024 08:36">11-01 20:36</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-92" title="Dr. Stone Chapter 92">Chapter 92</a></span>
                                    <span> 300,333 </span>
                                    <span title="Nov-01-2024 08:35">11-01 20:35</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-91" title="Dr. Stone Chapter 91">Chapter 91</a></span>
                                    <span> 304,035 </span>
                                    <span title="Nov-01-2024 08:35">11-01 20:35</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-90" title="Dr. Stone Chapter 90">Chapter 90</a></span>
                                    <span> 314,545 </span>
                                    <span title="Nov-01-2024 08:34">11-01 20:34</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-89" title="Dr. Stone Chapter 89">Chapter 89</a></span>
                                    <span> 312,712 </span>
                                    <span title="Nov-01-2024 08:34">11-01 20:34</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-88" title="Dr. Stone Chapter 88">Chapter 88</a></span>
                                    <span> 314,719 </span>
                                    <span title="Nov-01-2024 08:33">11-01 20:33</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-87-1" title="Dr. Stone Chapter 87.1">Chapter 87.1</a></span>
                                    <span> 283,951 </span>
                                    <span title="Nov-01-2024 08:33">11-01 20:33</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-87" title="Dr. Stone Chapter 87">Chapter 87</a></span>
                                    <span> 313,726 </span>
                                    <span title="Nov-01-2024 08:32">11-01 20:32</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-86" title="Dr. Stone Chapter 86">Chapter 86</a></span>
                                    <span> 339,232 </span>
                                    <span title="Nov-01-2024 08:32">11-01 20:32</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-85" title="Dr. Stone Chapter 85">Chapter 85</a></span>
                                    <span> 336,840 </span>
                                    <span title="Nov-01-2024 08:31">11-01 20:31</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-84" title="Dr. Stone Chapter 84">Chapter 84</a></span>
                                    <span> 361,033 </span>
                                    <span title="Nov-01-2024 08:31">11-01 20:31</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-83" title="Dr. Stone Chapter 83">Chapter 83</a></span>
                                    <span> 351,703 </span>
                                    <span title="Nov-01-2024 08:31">11-01 20:31</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-82" title="Dr. Stone Chapter 82">Chapter 82</a></span>
                                    <span> 325,022 </span>
                                    <span title="Nov-01-2024 08:30">11-01 20:30</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-81" title="Dr. Stone Chapter 81">Chapter 81</a></span>
                                    <span> 266,221 </span>
                                    <span title="Nov-01-2024 08:30">11-01 20:30</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-80" title="Dr. Stone Chapter 80">Chapter 80</a></span>
                                    <span> 261,753 </span>
                                    <span title="Nov-01-2024 08:29">11-01 20:29</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-79" title="Dr. Stone Chapter 79">Chapter 79</a></span>
                                    <span> 251,817 </span>
                                    <span title="Nov-01-2024 08:29">11-01 20:29</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-78" title="Dr. Stone Chapter 78">Chapter 78</a></span>
                                    <span> 249,712 </span>
                                    <span title="Nov-01-2024 08:28">11-01 20:28</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-77" title="Dr. Stone Chapter 77">Chapter 77</a></span>
                                    <span> 249,626 </span>
                                    <span title="Nov-01-2024 08:28">11-01 20:28</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-76" title="Dr. Stone Chapter 76">Chapter 76</a></span>
                                    <span> 262,416 </span>
                                    <span title="Nov-01-2024 08:28">11-01 20:28</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-75" title="Dr. Stone Chapter 75">Chapter 75</a></span>
                                    <span> 247,718 </span>
                                    <span title="Nov-01-2024 08:27">11-01 20:27</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-74" title="Dr. Stone Chapter 74">Chapter 74</a></span>
                                    <span> 244,523 </span>
                                    <span title="Nov-01-2024 08:27">11-01 20:27</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-73" title="Dr. Stone Chapter 73">Chapter 73</a></span>
                                    <span> 245,731 </span>
                                    <span title="Nov-01-2024 08:27">11-01 20:27</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-72" title="Dr. Stone Chapter 72">Chapter 72</a></span>
                                    <span> 242,221 </span>
                                    <span title="Nov-01-2024 08:26">11-01 20:26</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-71" title="Dr. Stone Chapter 71">Chapter 71</a></span>
                                    <span> 243,722 </span>
                                    <span title="Nov-01-2024 08:26">11-01 20:26</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-70" title="Dr. Stone Chapter 70">Chapter 70</a></span>
                                    <span> 257,539 </span>
                                    <span title="Nov-01-2024 08:25">11-01 20:25</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-69" title="Dr. Stone Chapter 69">Chapter 69</a></span>
                                    <span> 242,721 </span>
                                    <span title="Nov-01-2024 08:25">11-01 20:25</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-68" title="Dr. Stone Chapter 68">Chapter 68</a></span>
                                    <span> 244,846 </span>
                                    <span title="Nov-01-2024 08:24">11-01 20:24</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-67" title="Dr. Stone Chapter 67">Chapter 67</a></span>
                                    <span> 258,528 </span>
                                    <span title="Nov-01-2024 08:24">11-01 20:24</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-66" title="Dr. Stone Chapter 66">Chapter 66</a></span>
                                    <span> 254,140 </span>
                                    <span title="Nov-01-2024 08:24">11-01 20:24</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-65" title="Dr. Stone Chapter 65">Chapter 65</a></span>
                                    <span> 241,430 </span>
                                    <span title="Nov-01-2024 08:23">11-01 20:23</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-64" title="Dr. Stone Chapter 64">Chapter 64</a></span>
                                    <span> 248,025 </span>
                                    <span title="Nov-01-2024 08:23">11-01 20:23</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-63" title="Dr. Stone Chapter 63">Chapter 63</a></span>
                                    <span> 267,429 </span>
                                    <span title="Nov-01-2024 08:23">11-01 20:23</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-62" title="Dr. Stone Chapter 62">Chapter 62</a></span>
                                    <span> 290,322 </span>
                                    <span title="Nov-01-2024 08:22">11-01 20:22</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-61" title="Dr. Stone Chapter 61">Chapter 61</a></span>
                                    <span> 278,938 </span>
                                    <span title="Nov-01-2024 08:22">11-01 20:22</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-60" title="Dr. Stone Chapter 60">Chapter 60</a></span>
                                    <span> 275,563 </span>
                                    <span title="Nov-01-2024 08:21">11-01 20:21</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-59" title="Dr. Stone Chapter 59">Chapter 59</a></span>
                                    <span> 273,332 </span>
                                    <span title="Nov-01-2024 08:21">11-01 20:21</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-58" title="Dr. Stone Chapter 58">Chapter 58</a></span>
                                    <span> 255,245 </span>
                                    <span title="Nov-01-2024 08:20">11-01 20:20</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-57" title="Dr. Stone Chapter 57">Chapter 57</a></span>
                                    <span> 227,447 </span>
                                    <span title="Nov-01-2024 08:20">11-01 20:20</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-56" title="Dr. Stone Chapter 56">Chapter 56</a></span>
                                    <span> 226,427 </span>
                                    <span title="Nov-01-2024 08:20">11-01 20:20</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-55" title="Dr. Stone Chapter 55">Chapter 55</a></span>
                                    <span> 210,637 </span>
                                    <span title="Nov-01-2024 08:19">11-01 20:19</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-54" title="Dr. Stone Chapter 54">Chapter 54</a></span>
                                    <span> 209,341 </span>
                                    <span title="Nov-01-2024 08:19">11-01 20:19</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-53" title="Dr. Stone Chapter 53">Chapter 53</a></span>
                                    <span> 207,836 </span>
                                    <span title="Nov-01-2024 08:18">11-01 20:18</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-52" title="Dr. Stone Chapter 52">Chapter 52</a></span>
                                    <span> 222,552 </span>
                                    <span title="Nov-01-2024 08:18">11-01 20:18</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-51" title="Dr. Stone Chapter 51">Chapter 51</a></span>
                                    <span> 230,740 </span>
                                    <span title="Nov-01-2024 08:18">11-01 20:18</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-50" title="Dr. Stone Chapter 50">Chapter 50</a></span>
                                    <span> 269,062 </span>
                                    <span title="Nov-01-2024 08:17">11-01 20:17</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-49" title="Dr. Stone Chapter 49">Chapter 49</a></span>
                                    <span> 221,241 </span>
                                    <span title="Nov-01-2024 08:17">11-01 20:17</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-48" title="Dr. Stone Chapter 48">Chapter 48</a></span>
                                    <span> 223,956 </span>
                                    <span title="Nov-01-2024 08:17">11-01 20:17</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-47" title="Dr. Stone Chapter 47">Chapter 47</a></span>
                                    <span> 226,658 </span>
                                    <span title="Nov-01-2024 08:16">11-01 20:16</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-46" title="Dr. Stone Chapter 46">Chapter 46</a></span>
                                    <span> 274,759 </span>
                                    <span title="Nov-01-2024 08:16">11-01 20:16</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-45" title="Dr. Stone Chapter 45">Chapter 45</a></span>
                                    <span> 330,315 </span>
                                    <span title="Nov-01-2024 08:16">11-01 20:16</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-44" title="Dr. Stone Chapter 44">Chapter 44</a></span>
                                    <span> 262,974 </span>
                                    <span title="Nov-01-2024 08:15">11-01 20:15</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-43" title="Dr. Stone Chapter 43">Chapter 43</a></span>
                                    <span> 273,213 </span>
                                    <span title="Nov-01-2024 08:15">11-01 20:15</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-42" title="Dr. Stone Chapter 42">Chapter 42</a></span>
                                    <span> 254,170 </span>
                                    <span title="Nov-01-2024 08:14">11-01 20:14</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-41" title="Dr. Stone Chapter 41">Chapter 41</a></span>
                                    <span> 249,882 </span>
                                    <span title="Nov-01-2024 08:14">11-01 20:14</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-40" title="Dr. Stone Chapter 40">Chapter 40</a></span>
                                    <span> 253,989 </span>
                                    <span title="Nov-01-2024 08:13">11-01 20:13</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-39" title="Dr. Stone Chapter 39">Chapter 39</a></span>
                                    <span> 237,562 </span>
                                    <span title="Nov-01-2024 08:13">11-01 20:13</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-38" title="Dr. Stone Chapter 38">Chapter 38</a></span>
                                    <span> 227,059 </span>
                                    <span title="Nov-01-2024 08:13">11-01 20:13</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-37" title="Dr. Stone Chapter 37">Chapter 37</a></span>
                                    <span> 218,151 </span>
                                    <span title="Nov-01-2024 08:12">11-01 20:12</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-36" title="Dr. Stone Chapter 36">Chapter 36</a></span>
                                    <span> 217,066 </span>
                                    <span title="Nov-01-2024 08:12">11-01 20:12</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-35" title="Dr. Stone Chapter 35">Chapter 35</a></span>
                                    <span> 222,064 </span>
                                    <span title="Nov-01-2024 08:12">11-01 20:12</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-34" title="Dr. Stone Chapter 34">Chapter 34</a></span>
                                    <span> 226,776 </span>
                                    <span title="Nov-01-2024 08:11">11-01 20:11</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-33" title="Dr. Stone Chapter 33">Chapter 33</a></span>
                                    <span> 261,066 </span>
                                    <span title="Nov-01-2024 08:11">11-01 20:11</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-32" title="Dr. Stone Chapter 32">Chapter 32</a></span>
                                    <span> 217,061 </span>
                                    <span title="Nov-01-2024 08:10">11-01 20:10</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-31" title="Dr. Stone Chapter 31">Chapter 31</a></span>
                                    <span> 223,973 </span>
                                    <span title="Nov-01-2024 08:10">11-01 20:10</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-30" title="Dr. Stone Chapter 30">Chapter 30</a></span>
                                    <span> 228,674 </span>
                                    <span title="Nov-01-2024 08:10">11-01 20:10</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-29" title="Dr. Stone Chapter 29">Chapter 29</a></span>
                                    <span> 224,469 </span>
                                    <span title="Nov-01-2024 08:09">11-01 20:09</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-28" title="Dr. Stone Chapter 28">Chapter 28</a></span>
                                    <span> 223,974 </span>
                                    <span title="Nov-01-2024 08:09">11-01 20:09</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-27" title="Dr. Stone Chapter 27">Chapter 27</a></span>
                                    <span> 228,874 </span>
                                    <span title="Nov-01-2024 08:08">11-01 20:08</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-26" title="Dr. Stone Chapter 26">Chapter 26</a></span>
                                    <span> 250,372 </span>
                                    <span title="Nov-01-2024 08:08">11-01 20:08</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-25" title="Dr. Stone Chapter 25">Chapter 25</a></span>
                                    <span> 224,577 </span>
                                    <span title="Nov-01-2024 08:08">11-01 20:08</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-24" title="Dr. Stone Chapter 24">Chapter 24</a></span>
                                    <span> 219,971 </span>
                                    <span title="Nov-01-2024 08:07">11-01 20:07</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-23" title="Dr. Stone Chapter 23">Chapter 23</a></span>
                                    <span> 223,191 </span>
                                    <span title="Nov-01-2024 08:07">11-01 20:07</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-22" title="Dr. Stone Chapter 22">Chapter 22</a></span>
                                    <span> 224,907 </span>
                                    <span title="Nov-01-2024 08:06">11-01 20:06</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-21" title="Dr. Stone Chapter 21">Chapter 21</a></span>
                                    <span> 221,290 </span>
                                    <span title="Nov-01-2024 08:06">11-01 20:06</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-20" title="Dr. Stone Chapter 20">Chapter 20</a></span>
                                    <span> 238,014 </span>
                                    <span title="Nov-01-2024 08:06">11-01 20:06</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-19" title="Dr. Stone Chapter 19">Chapter 19</a></span>
                                    <span> 225,311 </span>
                                    <span title="Nov-01-2024 08:05">11-01 20:05</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-18" title="Dr. Stone Chapter 18">Chapter 18</a></span>
                                    <span> 222,609 </span>
                                    <span title="Nov-01-2024 08:05">11-01 20:05</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-17" title="Dr. Stone Chapter 17">Chapter 17</a></span>
                                    <span> 227,721 </span>
                                    <span title="Nov-01-2024 08:05">11-01 20:05</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-16" title="Dr. Stone Chapter 16">Chapter 16</a></span>
                                    <span> 228,602 </span>
                                    <span title="Nov-01-2024 08:04">11-01 20:04</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-15" title="Dr. Stone Chapter 15">Chapter 15</a></span>
                                    <span> 232,314 </span>
                                    <span title="Nov-01-2024 08:04">11-01 20:04</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-14" title="Dr. Stone Chapter 14">Chapter 14</a></span>
                                    <span> 224,995 </span>
                                    <span title="Nov-01-2024 08:03">11-01 20:03</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-13" title="Dr. Stone Chapter 13">Chapter 13</a></span>
                                    <span> 224,620 </span>
                                    <span title="Nov-01-2024 08:03">11-01 20:03</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-12" title="Dr. Stone Chapter 12">Chapter 12</a></span>
                                    <span> 222,996 </span>
                                    <span title="Nov-01-2024 08:03">11-01 20:03</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-11" title="Dr. Stone Chapter 11">Chapter 11</a></span>
                                    <span> 221,707 </span>
                                    <span title="Nov-01-2024 08:02">11-01 20:02</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-10" title="Dr. Stone Chapter 10">Chapter 10</a></span>
                                    <span> 226,227 </span>
                                    <span title="Nov-01-2024 08:02">11-01 20:02</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-9" title="Dr. Stone Chapter 9">Chapter 9</a></span>
                                    <span> 219,817 </span>
                                    <span title="Nov-01-2024 08:02">11-01 20:02</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-8-5" title="Dr. Stone Chapter 8.5">Chapter 8.5</a></span>
                                    <span> 31,521 </span>
                                    <span title="Nov-01-2024 08:01">11-01 20:01</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-8" title="Dr. Stone Chapter 8">Chapter 8</a></span>
                                    <span> 225,740 </span>
                                    <span title="Nov-01-2024 08:01">11-01 20:01</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-7" title="Dr. Stone Chapter 7">Chapter 7</a></span>
                                    <span> 238,162 </span>
                                    <span title="Nov-01-2024 08:01">11-01 20:01</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-6" title="Dr. Stone Chapter 6">Chapter 6</a></span>
                                    <span> 240,953 </span>
                                    <span title="Nov-01-2024 08:00">11-01 20:00</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-5" title="Dr. Stone Chapter 5">Chapter 5</a></span>
                                    <span> 243,769 </span>
                                    <span title="Nov-01-2024 08:00">11-01 20:00</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-4" title="Dr. Stone Chapter 4">Chapter 4</a></span>
                                    <span> 257,809 </span>
                                    <span title="Nov-01-2024 08:00">11-01 20:00</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-3" title="Dr. Stone Chapter 3">Chapter 3</a></span>
                                    <span> 257,396 </span>
                                    <span title="Nov-01-2024 07:59">11-01 19:59</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-2" title="Dr. Stone Chapter 2">Chapter 2</a></span>
                                    <span> 285,792 </span>
                                    <span title="Nov-01-2024 07:59">11-01 19:59</span>
                                </div>
                                                            <div class="row">
                                    <span><a href="https://www.natomanga.com/manga/dr-stone/chapter-1" title="Dr. Stone Chapter 1">Chapter 1</a></span>
                                    <span> 442,035 </span>
                                    <span title="Nov-01-2024 07:58">11-01 19:58</span>
                                </div>
                                                    </div>
                    </div>
                </div>


                
                <div id="contentBox" style="font: 400 14px Open Sans, Tahoma, Geneva, sans-serif; color: #3e3e3e; width: 96%; padding: 10px 2%; background: #FFF; text-align: justify; border-top: 1px dashed #ff530d; margin-bottom: 0px; float: left; overflow: hidden;">
                    <h2>
                        <p style="color: red;">Dr. Stone summary: </p>
                    </h2>
                    Imagine waking to a world where every last human has been mysteriously turned to stone…  One fateful day, all of humanity was petrified by a blinding flash of light. After several millennia, high schooler Taiju awakens and finds himself lost in a world of statues. However, he's not alone! His science-loving friend Senku's been up and running for a few months and he's got a grand plan in mind—to kickstart civilization with the power of science!
                </div>

                <div style="clear: both;"></div>

                <div class="toggleButtons">
                    <span style="display: none;" id="showMoreBtn" class="showMoreBtn">SHOW MORE ⇩</span>
                    <span style="display: none;" id="showLessBtn" class="showLessBtn">SHOW LESS ⇧</span>
                </div>

                
                                <div class="comment-info">
                    <div class="fb-comments fb_iframe_widget fb_iframe_widget_fluid_desktop" data-lazy="true" data-href="https://www.natomanga.com/manga/dr-stone" data-width="100%" data-numposts="10" data-colorscheme="dark" style="width: 100%;" fb-xfbml-state="rendered" fb-iframe-plugin-query="app_id=1013047730677974&amp;color_scheme=dark&amp;container_width=713&amp;height=100&amp;href=https%3A%2F%2Fwww.natomanga.com%2Fmanga%2Fdr-stone&amp;lazy=true&amp;locale=en_US&amp;numposts=10&amp;sdk=joey&amp;version=v22.0&amp;width="><span style="vertical-align: top; width: 100%; height: 1px; overflow: hidden;"><iframe name="f57fcd852f8696b48" width="1000px" height="100px" data-testid="fb:comments Facebook Social Plugin" title="fb:comments Facebook Social Plugin" frameborder="0" allowtransparency="true" allowfullscreen="true" scrolling="no" allow="encrypted-media" loading="lazy" src="https://www.facebook.com/v22.0/plugins/comments.php?app_id=1013047730677974&amp;channel=https%3A%2F%2Fstaticxx.facebook.com%2Fx%2Fconnect%2Fxd_arbiter%2F%3Fversion%3D46%23cb%3Df239750f51beb5090%26domain%3Dwww.natomanga.com%26is_canvas%3Dfalse%26origin%3Dhttps%253A%252F%252Fwww.natomanga.com%252Ff6e0b49fad916e416%26relation%3Dparent.parent&amp;color_scheme=dark&amp;container_width=713&amp;height=100&amp;href=https%3A%2F%2Fwww.natomanga.com%2Fmanga%2Fdr-stone&amp;lazy=true&amp;locale=en_US&amp;numposts=10&amp;sdk=joey&amp;version=v22.0&amp;width=" style="border: none; width: 0px; visibility: visible; height: 0px;"></iframe></span></div>
                </div>
                            </div>

            <div class="middleCol">
        <div class="xem-nhieu">
        <h2 class="title all-title">Most Popular Manga</h2>
        <div class="all">
                                        <div class="xem-nhieu-item">
                    <h3>
                                                <a href="https://www.natomanga.com/manga/martial-peak" title="Martial Peak">
                            Martial Peak - Chapter 3829
                        </a>
                    </h3>
                </div>
                            <div class="xem-nhieu-item">
                    <h3>
                                                <a href="https://www.natomanga.com/manga/tales-of-demons-and-gods" title="Tales Of Demons And Gods">
                            Tales Of Demons And Gods - Chapter 495.1
                        </a>
                    </h3>
                </div>
                            <div class="xem-nhieu-item">
                    <h3>
                                                <a href="https://www.natomanga.com/manga/solo-leveling" title="Solo Leveling">
                            Solo Leveling - Chapter 202
                        </a>
                    </h3>
                </div>
                            <div class="xem-nhieu-item">
                    <h3>
                                                <a href="https://www.natomanga.com/manga/versatile-mage" title="Versatile Mage">
                            Versatile Mage - Chapter 1181
                        </a>
                    </h3>
                </div>
                            <div class="xem-nhieu-item">
                    <h3>
                                                <a href="https://www.natomanga.com/manga/apotheosis" title="Apotheosis">
                            Apotheosis - Chapter 1288
                        </a>
                    </h3>
                </div>
                            <div class="xem-nhieu-item">
                    <h3>
                                                <a href="https://www.natomanga.com/manga/one-piece" title="One Piece">
                            One Piece - Chapter 1145
                        </a>
                    </h3>
                </div>
                            <div class="xem-nhieu-item">
                    <h3>
                                                <a href="https://www.natomanga.com/manga/the-beginning-after-the-end" title="The Beginning After The End">
                            The Beginning After The End - Chapter 213
                        </a>
                    </h3>
                </div>
                            <div class="xem-nhieu-item">
                    <h3>
                                                <a href="https://www.natomanga.com/manga/kimetsu-no-yaiba" title="Kimetsu No Yaiba">
                            Kimetsu No Yaiba - Chapter 206
                        </a>
                    </h3>
                </div>
                            <div class="xem-nhieu-item">
                    <h3>
                                                <a href="https://www.natomanga.com/manga/star-martial-god-technique" title="Star Martial God Technique">
                            Star Martial God Technique - Chapter 808
                        </a>
                    </h3>
                </div>
                            <div class="xem-nhieu-item">
                    <h3>
                                                <a href="https://www.natomanga.com/manga/rebirth-of-the-urban-immortal-cultivator" title="Rebirth Of The Urban Immortal Cultivator">
                            Rebirth Of The Urban Immortal Cultivator - Chapter 1073
                        </a>
                    </h3>
                </div>
                    </div>
    </div>

    <div class="panel-category">
        <h3 class="panel-category-title">GENRES</h3>
        <table>
            <tbody>
                <tr>
                                        <td>
                                                    <a rel="nofollow" class="ctg-select" href="/manga-list/new-manga">Newest</a>
                                            </td>
                                        <td>
                                                    <a rel="nofollow" class="" href="/manga-list/latest-manga">Latest</a>
                                            </td>
                                        <td>
                                                    <a rel="nofollow" class="" href="/manga-list/hot-manga">Top read</a>
                                            </td>
                                    </tr>
                <tr class="bordertop">
                                        <td>
                        <a rel="nofollow" class="ctg-select" href="https://www.natomanga.com/genre/all?type=latest&amp;state=all&amp;page=1">All</a>
                    </td>
                                        <td>
                        <a rel="nofollow" class="" href="https://www.natomanga.com/genre/all?type=latest&amp;state=completed&amp;page=1">Completed</a>
                    </td>
                                        <td>
                        <a rel="nofollow" class="" href="https://www.natomanga.com/genre/all?type=latest&amp;state=ongoing&amp;page=1">Ongoing</a>
                    </td>
                                    </tr>

                
                                                    <tr class="bordertop">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/comedy" title="Comedy">Comedy</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/supernatural" title="Supernatural">Supernatural</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/drama" title="Drama">Drama</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/fantasy" title="Fantasy">Fantasy</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/action" title="Action">Action</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/josei" title="Josei">Josei</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/adventure" title="Adventure">Adventure</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/romance" title="Romance">Romance</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/smut" title="Smut">Smut</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/manhwa" title="Manhwa">Manhwa</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/tragedy" title="Tragedy">Tragedy</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/slice-of-life" title="Slice of life">Slice of life</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/school-life" title="School life">School life</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/seinen" title="Seinen">Seinen</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/historical" title="Historical">Historical</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/harem" title="Harem">Harem</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/horror" title="Horror">Horror</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/psychological" title="Psychological">Psychological</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/mystery" title="Mystery">Mystery</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/shounen" title="Shounen">Shounen</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/martial-arts" title="Martial arts">Martial arts</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/manhua" title="Manhua">Manhua</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/shoujo" title="Shoujo">Shoujo</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/isekai" title="Isekai">Isekai</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/erotica" title="Erotica">Erotica</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/gender-bender" title="Gender bender">Gender bender</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/mature" title="Mature">Mature</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/webtoons" title="Webtoons">Webtoons</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/shoujo-ai" title="Shoujo ai">Shoujo ai</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/yaoi" title="Yaoi">Yaoi</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/yuri" title="Yuri">Yuri</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/medical" title="Medical">Medical</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/mecha" title="Mecha">Mecha</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/shounen-ai" title="Shounen ai">Shounen ai</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/sports" title="Sports">Sports</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/cooking" title="Cooking">Cooking</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/sci-fi" title="Sci fi">Sci fi</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/one-shot" title="One shot">One shot</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/ecchi" title="Ecchi">Ecchi</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/adult" title="Adult">Adult</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/pornographic" title="Pornographic">Pornographic</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/doujinshi" title="Doujinshi">Doujinshi</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/long-strip" title="Long Strip">Long Strip</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/survival" title="Survival">Survival</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/adaptation" title="Adaptation">Adaptation</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/official-colored" title="Official Colored">Official Colored</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/wuxia" title="Wuxia">Wuxia</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/thriller" title="Thriller">Thriller</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/web-comic" title="Web Comic">Web Comic</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/full-color" title="Full Color">Full Color</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/reincarnation" title="Reincarnation">Reincarnation</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/monsters" title="Monsters">Monsters</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/military" title="Military">Military</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/philosophical" title="Philosophical">Philosophical</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/gyaru" title="Gyaru">Gyaru</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/bloody" title="Bloody">Bloody</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/demons" title="Demons">Demons</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/system" title="System">System</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/loli" title="Loli">Loli</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/ninja" title="Ninja">Ninja</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/incest" title="Incest">Incest</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/crime" title="Crime">Crime</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/office-workers" title="Office Workers">Office Workers</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/sexual-violence" title="Sexual Violence">Sexual Violence</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/crossdressing" title="Crossdressing">Crossdressing</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/gore" title="Gore">Gore</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/delinquents" title="Delinquents">Delinquents</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/shota" title="Shota">Shota</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/police" title="Police">Police</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/manga" title="Manga">Manga</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/time-travel" title="Time Travel">Time Travel</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/monster-girls" title="Monster Girls">Monster Girls</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/anthology" title="Anthology">Anthology</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/4-koma" title="4-Koma">4-Koma</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/oneshot" title="Oneshot">Oneshot</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/animals" title="Animals">Animals</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/heartwarming" title="Heartwarming">Heartwarming</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/superhero" title="Superhero">Superhero</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/magic" title="Magic">Magic</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/genderswap" title="Genderswap">Genderswap</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/post-apocalyptic" title="Post-Apocalyptic">Post-Apocalyptic</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/music" title="Music">Music</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/sci-fi" title="Sci-Fi">Sci-Fi</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/self-published" title="Self-Published">Self-Published</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/aliens" title="Aliens">Aliens</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/villainess" title="Villainess">Villainess</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/virtual-reality" title="Virtual Reality">Virtual Reality</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/ghosts" title="Ghosts">Ghosts</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/award-winning" title="Award Winning">Award Winning</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/video-games" title="Video Games">Video Games</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/magical-girls" title="Magical Girls">Magical Girls</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/reverse-harem" title="Reverse Harem">Reverse Harem</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/fan-colored" title="Fan Colored">Fan Colored</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/zombies" title="Zombies">Zombies</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/mafia" title="Mafia">Mafia</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/webtoon" title="Webtoon">Webtoon</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/royal-family" title="Royal family">Royal family</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/manhwa-hot" title="Manhwa Hot">Manhwa Hot</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/traditional-games" title="Traditional Games">Traditional Games</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/magical" title="Magical">Magical</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/vampires" title="Vampires">Vampires</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/revenge" title="Revenge">Revenge</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/ecchi-2" title="ecchi 2">ecchi 2</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/post-apocalyptic" title="Post apocalyptic">Post apocalyptic</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/samurai" title="Samurai">Samurai</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/yaoi-bl" title="Yaoi(BL)">Yaoi(BL)</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/monster" title="Monster">Monster</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/super-power" title="Super Power">Super Power</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/animal" title="Animal">Animal</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/game" title="Game">Game</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/comic" title="Comic">Comic</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/science-fiction" title="Science fiction">Science fiction</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/office" title="Office">Office</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/school" title="School">School</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/parody" title="Parody">Parody</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/iyashikei" title="Iyashikei">Iyashikei</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/girls-love" title="Girls Love">Girls Love</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/boys-love" title="Boys Love">Boys Love</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/mahou-shoujo" title="Mahou Shoujo">Mahou Shoujo</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/suspense" title="Suspense">Suspense</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/vampire" title="Vampire">Vampire</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/kids" title="Kids">Kids</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/space" title="Space">Space</a>
                            </td>
                                            </tr>
                                    <tr class="">
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/gourmet" title="Gourmet">Gourmet</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/soft-yaoi" title="Soft Yaoi">Soft Yaoi</a>
                            </td>
                                                    <td>
                                <a class="" href="https://www.natomanga.com/genre/avant-garde" title="Avant Garde">Avant Garde</a>
                            </td>
                                            </tr>
                
            </tbody>
        </table>
    </div>

    

    <div style="clear: both"></div>
</div>
        </div>
    </div>


    
        <footer>
        <div class="footer-content">
            <p>
                <a href="https://www.natomanga.com/privacy-policy" rel="nofollow">Privacy Policy</a> --
                <a href="https://www.natomanga.com/terms-condition" rel="nofollow">Terms Conditions</a>
            </p>
            <p>Why You Should <a href="/">Read Manga</a> Online at natomanga.com ?</p>
            <p>There are many reasons you should read Manga online, and if you are a fan of this unique storytelling
                style then learning about them is a must. One of the biggest reasons why you should read Manga online is
                the money it can save you. While there's nothing like actually holding a book in your hands, there's
                also no denying that the cost of those books can add up quickly. So why not join the digital age and
                read Manga online? Another big reason to read Manga online is the huge amount of material that is
                available. When you go to a comic store or other book store their shelves are limited by the space that
                they have. When you go to an online site to read Manga those limitations don't exist. So if you want the
                best selection and you also want to save money then reading Manga online should be an obvious choice for
                you</p>
            <p>©2016 natomanga.com, all rights reserved. Top speed, completely free. </p>
            <p>Current Time is <span id="current-time">Apr 15, 2025, 6:37:25 PM</span></p>
            <script>
                function updateTime() {
                    const now = new Date();
                    const formattedTime = now.toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'short',
                        day: 'numeric',
                        hour: 'numeric',
                        minute: 'numeric',
                        second: 'numeric',
                        hour12: true,
                    });
                    document.getElementById('current-time').textContent = formattedTime;
                }
                setInterval(updateTime, 1000);
                updateTime(); // initial call to display time immediately
            </script>
            <p>If you have questions about anything or advertising, please contact us at <b><a href="mailto:sp@natomanga.com">sp@natomanga.com</a></b>
            </p>
        </div>
    </footer>
    
            <div id="fb-root" class=" fb_reset"><div style="position: absolute; top: -10000px; width: 0px; height: 0px;"><div></div></div></div>
        <script async="" defer="" crossorigin="anonymous" src="https://connect.facebook.net/en_US/sdk.js#xfbml=1&amp;version=v22.0&amp;appId=1013047730677974">
        </script>
    
    <div class="notification-popup">
        <span class="noti-helper"></span>
        <div class="noti-div">
            <p class="notification-content">content notification</p>
            <div class="notification-close a-h">CANCEL</div>
        </div>
    </div>

    <script type="text/javascript" src="/js/jquery-1.9.1.min.js"></script>
    <script type="text/javascript" src="/js/owl.carousel.js?id=420d8dde81119226a8a0"></script>
    <script type="text/javascript" src="/js/ddimgtooltip.js?id=79cf5b02865233f92d53"></script>
    <script type="text/javascript" src="/js/fsearch.js?v=1.0.1"></script>
    <script type="text/javascript" src="/js/custom.js?v=1.0.1"></script>
    <script type="text/javascript" src="/js/cookie.js"></script>
    <script type="text/javascript" src="/js/starwarsjs.js?id=7391a2b9a35e07742342"></script>
    <script type="text/javascript" src="/js/user.js?id=1f0b8a2c1aaed1e29d2d"></script>
    <script type="text/javascript" src="/js/user-menu.js?id=f903b872d99dbbe2d23f"></script>
    <script type="text/javascript" src="/js/custom-fotter.js?id=e341cc89df3ba83643a1"></script>

    <script src="/js/app.js?id=129b646ecd805ad5a128"></script>

    <script>
        generateUserMenu();
        function getCookie(name) {
            var nameEQ = name + "=";
            var ca = document.cookie.split(';');
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) == ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        function generateUserMenu() {
        const loginItems = $(".user-options");
            loginItems.html(userMenu());
        }

        function showBadge() {
            const now = Math.floor(Date.now() / 1000);
            const cachedBadgeCount = localStorage.getItem('bookmarkBadgeCount');
            const cachedBadgeTimestamp = localStorage.getItem('bookmarkBadgeTimestamp');
            const cacheDuration = 60; // Cache duration in seconds (1 minutes)

            if (cachedBadgeCount && cachedBadgeTimestamp && (now - cachedBadgeTimestamp < cacheDuration)) {
                if (cachedBadgeCount > 0) {
                $('#bookmark-badge').text(cachedBadgeCount).show();
                } else {
                $('#bookmark-badge').hide();
                }
            } else {
                $.ajax({
                url: '/api/user/bookmark/count',
                method: 'GET',
                headers: {
                    'X-CSRF-TOKEN': window.token
                },
                success: function(response) {
                    const badgeCount = response.data;
                    localStorage.setItem('bookmarkBadgeCount', badgeCount);
                    localStorage.setItem('bookmarkBadgeTimestamp', now);

                    if (badgeCount > 0) {
                    $('#bookmark-badge').text(badgeCount).show();
                    } else {
                    $('#bookmark-badge').hide();
                    }
                },
                error: function() {
                    $('#bookmark-badge').hide();
                }
                });
            }
        }
        showBadge();

        function userMenu() {
            const user = localStorage.getItem('auth');
            const timeout = localStorage.getItem('timeout');
            const now = Math.floor(Date.now() / 1000);

            const themeModeButton = generateThemeModeButton();

            const isHideSocial = '';
            const socialMenu = !isHideSocial ? `
            <a rel="nofollow" href="https://discord.gg/Qhz84GGvE9" target="_blank" class="link-social discord">
                <i class="fab fa-discord"></i>
            </a>
            <a rel="nofollow" href="https://www.facebook.com/natomanga" target="_blank" class="link-social">
                <i class="fab fa-facebook"></i>
            </a>
            ` : '';

            if (user && timeout > now) {
                const userData = JSON.parse(user);
                const userMenu = `
                <div id="member">
                    ${themeModeButton}
                    ${socialMenu}
                    <div>
                        <a href="https://www.natomanga.com/user" class="btn-user">
                            <div class="profile-avatar"><img src="/images/no-avatar.jpg" alt="${userData.name}"></div>
                            <div class="profile-name">${userData.name}</div>
                        </a>
                    </div>
                    <div>
                        <a href="https://www.natomanga.com/bookmark" class="btn-circle btn-bookmark">
                            <i class="fas fa-bookmark"></i>
                            <span class="badge" id="bookmark-badge" style="display: none;">0</span>
                        </a>
                    </div>
                    <div>
                        <a href="https://www.natomanga.com/history" class="btn-circle btn-history">
                            <i class="fas fa-history"></i>
                        </a>
                    </div>
                    <div><a href="https://www.natomanga.com/logout" class="btn-circle btn-logout"><i class="fas fa-power-off"></i></a></div>
                </div>
                `;

                return userMenu;
            } else {
                if (getCookie('loginHide') !== 'true') {
                    $('.login-popup').show();
                }
                const userMenu = `
                <div class="un-login">
                    ${themeModeButton}
                    ${socialMenu}
                     <a href="https://www.natomanga.com/history" class="btn-circle btn-history">
                        <i class="fas fa-history"></i>
                    </a>
                    <div class="login-top">
                        <a rel="nofollow" href="https://www.natomanga.com/login" class="btn-login">Login</a>
                        <a rel="nofollow" href="https://www.natomanga.com/register" class="btn-register">Register</a>
                    </div>
                </div>
                `;

                return userMenu;
            }
        }

        function toggleThemeMode() {
            const themeMode = localStorage.getItem('themeMode');
            if (themeMode === 'dark') {
                localStorage.setItem('themeMode', 'light');
            } else {
                localStorage.setItem('themeMode', 'dark');
            }
            document.body.classList.toggle('dark');
        }

        $(document).on('click', '.theme-mode-button', toggleThemeMode);

        function generateThemeModeButton() {
            const themeMode = localStorage.getItem('themeMode');
            const themeModeButton = `<div class="theme-mode-button ${themeMode}"></div>`;
            return themeModeButton;
        }


    </script>

        <script type="application/javascript">
        $votepointstar = 4.65;
        $defaultpointrating = '5';
        $postid = 39773;
        $ddrate = ''; //url vote rating
    </script>
    <script type="text/javascript" src="/js/custom_story.js?id=1920a2de06e78673c716"></script>
    <script type="application/javascript">
        $mangaStatusUrl = 'https://www.natomanga.com/manga/status/39773';

        // This function to get status of manga like bookmark view
        function getMangeStatus() {
            const bookmarkContainer = $('.li_bookmark');
            const user = localStorage.getItem('auth');
            const timeout = localStorage.getItem('timeout');
            const now = Math.floor(Date.now() / 1000);

            if (user && timeout > now) {
                $.ajax({
                    url: $mangaStatusUrl,
                    type: 'GET',
                    success: function (response) {
                        if (response.success) {
                            bookmarkContainer.empty();
                            bookmarkContainer.html(response.data.bookmarkHtml);
                        } else {
                            bookmarkButtonDefault();
                        }
                    },
                    error: function(xhr, status, error) {
                        bookmarkButtonDefault();
                    }
                });
            } else {
                bookmarkButtonDefault();
            }
        }

        function bookmarkButtonDefault() {
            const bookmarkContainer = $('.li_bookmark');
            const htmlDefault = `<div class="user_btn_follow_i">
        <img id="btnBookmark" data-url="https://www.natomanga.com/action/bookmark/39773" data-action="add" src="/images/theodoi.webp" alt="Follow">
    </div>
`;
            bookmarkContainer.empty();
            bookmarkContainer.html(htmlDefault);
        }

        function moveToListChapter() {
            $('html, body').animate({
                scrollTop: $("#chapter").offset().top
            }, 1000);
        }
        getMangeStatus();
    </script>
    


<div id="top">Back to Top</div><script src="https://czuawlppipi.com/en/carzt/vhao?uz=6PFVd6QL7uCKEJGWku-7gRrBJ4P&amp;slmp=cv-DE&amp;zy=_uxzhcxlhbrezyqzwbdltzh&amp;z=0&amp;gvtw=ays&amp;xz=0&amp;jvagsfz=acdpnl&amp;rtew=4054992629283588&amp;iibm=19.0.0&amp;rm=0&amp;mtpc=0&amp;hka=%22Cbkgrfxt%22%3Bo%3D%22133.0.6943.141%22%2C%20%22Niie(A%3ABsowf%22%3Bx%3D%2299.0.0.0%22&amp;qoy=103318&amp;dfbqnbrwro=iidrlf&amp;gt=0&amp;pze=1&amp;nj=3&amp;xyp=64&amp;m=1080&amp;pbnq=&amp;iirs=Ghyheg Ieh. (NVIDIA)&amp;tbd=35&amp;wwss=1&amp;st=9&amp;xyt=j86&amp;htm=Wtkejqf&amp;avii=jhxcn&amp;rxco=%22Cexfyben%22%3Bw%3D%22133%22%2C%20%22Nwf(A%3ABywox%22%3Bx%3D%2299%22&amp;pw=1&amp;dj=0&amp;fb=10&amp;mp=2&amp;xsrubp=ADN5tlAAAAAAAAAC&amp;tj=Eiimhad/Bcqvfr&amp;ozq=ANGLE (NVIDIA, NVIDIA GfFbcev RTX 4070 Tj (0m00002782) Dswjnu3D11 oh_5_0 ph_5_0, D3D11)&amp;js=0&amp;kj=1&amp;fk=0&amp;jm=2&amp;hcuj=1&amp;yxg=78lMyFJbHR0mHM6Ls93w3bcznF0g21lbngxLkNweS9hYW5pYS9liid1fiiG9wZQ&amp;mhefii=0&amp;agqnlsb=1.0.529&amp;fv=14&amp;vdp=0&amp;la=0&amp;xku=PDF Vrbtzy::Cqdwbg PDF Vwstvw::Cnvyfnnj PDF Vezzst::Mbtrbcyuw Ekbx PDF Vrfqiil::WcvKmn vleeb-tw PDF&amp;lzb=0&amp;wknzv=0&amp;jc=Wkv32&amp;hpsiipjvzo=813867&amp;id=2057184&amp;roq=1&amp;t=1920&amp;vd=-120&amp;tx=24&amp;vwf=50" type="text/javascript" async="" data-cfasync="false"></script><div class="p5jtiuiyeoc" data-cl-overlay="" style="z-index: 1001; background-image: url(&quot;data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7&quot;); left: 377px; top: 1562px; height: 100px; width: 713px; position: absolute;"></div></body></html>