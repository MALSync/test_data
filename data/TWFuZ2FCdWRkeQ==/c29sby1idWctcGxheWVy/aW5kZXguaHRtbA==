<html lang="en">

<head>
  <meta http-equiv="origin-trial"
    content="Az520Inasey3TAyqLyojQa8MnmCALSEU29yQFW8dePZ7xQTvSt73pHazLFTK5f7SyLUJSo2uKLesEtEa9aUYcgMAAACPeyJvcmlnaW4iOiJodHRwczovL2dvb2dsZS5jb206NDQzIiwiZmVhdHVyZSI6IkRpc2FibGVUaGlyZFBhcnR5U3RvcmFnZVBhcnRpdGlvbmluZyIsImV4cGlyeSI6MTcyNTQwNzk5OSwiaXNTdWJkb21haW4iOnRydWUsImlzVGhpcmRQYXJ0eSI6dHJ1ZX0=">
  <title>Read Solo Bug Player - MangaBuddy</title>
  <meta charset="utf-8">
  <meta httpequiv="x-ua-compatible" content="ie=edge">
  <meta name="viewport" content="width=device-width, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <meta name="description"
    content="Read Solo Bug Player - .Description :If I can succeed it's OK to use bugs or any possible way! A story of reincarnated ultra-high obesity young lord.BRASIL: Se eu tiver sucesso, no h problema em usar bugs ou qualquer coisa possvel! Uma histria do jovem lorde da obesidade u">
  <meta name="keywords" content="Solo Bug Player, Solo Bug Player Manga, Read Solo Bug Player online, Solo Bug Player online For Free,
               Read Solo Bug Player chapters for free, Solo Bug Player chapters,
                   Solo Bug Player scans, Solo Bug Player MangaBuddy">
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content="Read Solo Bug Player - MangaBuddy">
  <meta name="twitter:image:alt" content="Read Solo Bug Player - MangaBuddy">
  <meta name="twitter:description"
    content="Read Solo Bug Player - .Description :If I can succeed it's OK to use bugs or any possible way! A story of reincarnated ultra-high obesity young lord.BRASIL: Se eu tiver sucesso, no h problema em usar bugs ou qualquer coisa possvel! Uma histria do jovem lorde da obesidade u">
  <meta name="twitter:image" content="https://thumb.youmadcdn.xyz/thumb/solo-bug-player.png">
  <meta name="twitter:url" content="https://mangabuddy.com/solo-bug-player">
  <meta name="twitter:site" content="@MangaBuddy">
  <meta property="og:title" content="Read Solo Bug Player - MangaBuddy">
  <meta property="og:description"
    content="Read Solo Bug Player - .Description :If I can succeed it's OK to use bugs or any possible way! A story of reincarnated ultra-high obesity young lord.BRASIL: Se eu tiver sucesso, no h problema em usar bugs ou qualquer coisa possvel! Uma histria do jovem lorde da obesidade u">
  <meta property="og:image" content="https://thumb.youmadcdn.xyz/thumb/solo-bug-player.png">
  <meta property="og:url" content="https://mangabuddy.com/solo-bug-player">
  <meta property="og:type" content="website">
  <meta property="og:site_name" content="MangaBuddy">
  <link rel="canonical" href="https://mangabuddy.com/solo-bug-player">
  <link rel="apple-touch-icon" href="/static/sites/mangabuddy/icons/apple-touch-icon.png">
  <link rel="apple-touch-icon" sizes="180x180" href="/static/sites/mangabuddy/icons/apple-touch-icon.png">
  <link rel="apple-touch-icon" sizes="152x152" href="/static/sites/mangabuddy/icons/apple-touch-icon.png">
  <link rel="apple-touch-icon" sizes="167x167" href="/static/sites/mangabuddy/icons/apple-touch-icon.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/static/sites/mangabuddy/icons/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/static/sites/mangabuddy/icons/favicon-16x16.png">
  <link rel="manifest" href="/static/sites/mangabuddy/icons/site.webmanifest">
  <link rel="icon" type="image/ico" href="/static/sites/mangabuddy/icons/favicon.ico">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Nunito+Sans&amp;display=swap">
  <link rel="preconnect" href="//tpc.googlesyndication.com">
  <link rel="dns-prefetch" href="//lh3.googleusercontent.com">
  <link rel="preconnect" href="//pagead2.googlesyndication.com">
  <link rel="dns-prefetch" href="//pagead2.googlesyndication.com">
  <link rel="preconnect" href="//www.google-analytics.com" as="script">
  <link rel="preload" href="/static/common/x.gif" as="image">
  <link x-rel="prefetch" href="/solo-bug-player/chapter-120">
  <link x-rel="prefetch" href="/solo-bug-player/chapter-0-25">
  <script async="" src="https://www.google-analytics.com/analytics.js"></script>
  <script type="text/javascript" async=""
    src="https://www.gstatic.com/recaptcha/releases/MydHw_zggsxIJuhSbyOmPv5R/recaptcha__de.js" crossorigin="anonymous"
    integrity="sha384-ygbX2yp+QgVysYp6WuX24k7l6nxkqq4pH5suMdfhxKUhngcB0THZCu0ZSeR6XEGC"></script>
  <script>
    function lazyImage(i) { return function (e) { var t, n = document.querySelectorAll("." + i); function o(e) { e.onload = function () { e.classList.remove(i), e.parentElement && e.parentElement.className && 0 <= e.parentElement.className.indexOf("chapter-image") && (e.parentElement.classList.remove("spinner"), e.parentElement.classList.remove("loading")) }; var n = e.getAttribute("data-src"); n && (e.src = n), "IntersectionObserver" in window && t.unobserve(e) } if ("IntersectionObserver" in window) t = new IntersectionObserver(function (e) { e.forEach(function (e) { 0 < e.intersectionRatio && o(e.target) }) }, { rootMargin: "0px", threshold: .05 }), n.forEach(function (e) { t.observe(e) }); else for (var r = 0; r < n.length; r++)o(n[r]) } } function lazyScript(e, n) { var t = document.createElement("script"); t.async = !0, n && (t.onload = n), document.head.appendChild(t), t.src = e } function loadBundleScript(e) { lazyScript("/static/dist/js/bundle.min.js?v=8.2", e) } setTimeout(function () { var i = !1, a = "UA-145677571-14", c = "true"; function s() { var e, n, t, o, r; !0 !== i && "false" !== c && (i = !0, document.removeEventListener("scroll", s), document.removeEventListener("mousemove", s), document.removeEventListener("mousedown", s), document.removeEventListener("touchstart", s), e = window, n = document, t = "script", e.GoogleAnalyticsObject = "ga", e.ga = e.ga || function () { (e.ga.q = e.ga.q || []).push(arguments) }, e.ga.l = +new Date, o = n.createElement(t), r = n.getElementsByTagName(t)[0], o.async = 1, o.src = "https://www.google-analytics.com/analytics.js", r.parentNode.insertBefore(o, r), ga("create", a, "auto"), ga("set", "allowAdFeatures", !1), ga("send", "pageview"), window.onerror = function (e, n, t, o, r) { return "string" == typeof e && (e.toLowerCase().indexOf("script error") <= -1 && location.href), !1 }) } document.addEventListener("scroll", s), document.addEventListener("mousemove", s), document.addEventListener("mousedown", s), document.addEventListener("touchstart", s), document.addEventListener("load", function () { document.body.clientHeight != document.documentElement.clientHeight && 0 == document.documentElement.scrollTop && 0 == document.body.scrollTop || s() }) }, 1), "serviceWorker" in navigator ? navigator.serviceWorker.register("/static/service-worker.js").then(function (e) { console.log("ServiceWorker registration successful with scope: ", e.scope) }).catch(function (e) { console.log("ServiceWorker registration failed: ", e) }) : console.log("No service-worker on this browser"); var isMobile = { Android: function () { return navigator.userAgent.match(/Android/i) }, BlackBerry: function () { return navigator.userAgent.match(/BlackBerry/i) }, iOS: function () { return navigator.userAgent.match(/iPhone|iPad|iPod/i) }, Opera: function () { return navigator.userAgent.match(/Opera Mini/i) }, Windows: function () { return navigator.userAgent.match(/IEMobile/i) }, any: function () { return isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows() } };
  </script>
  <script async="" src="https://www.googletagmanager.com/gtag/js?id=G-WEF0Z9GG4P"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag() { dataLayer.push(arguments); }
    gtag('js', new Date());
    gtag('config', 'G-WEF0Z9GG4P');
  </script>
  <script async="" data-cfasync="false" src="https://cdn.pubfuture-ad.com/v2/unit/pt.js"
    type="text/javascript"></script>
  <style>
    &#xFEFF;

    :root {
      --bs-blue: #0d6efd;
      --bs-indigo: #6610f2;
      --bs-purple: #6f42c1;
      --bs-pink: #d63384;
      --bs-red: #dc3545;
      --bs-orange: #fd7e14;
      --bs-yellow: #ffc107;
      --bs-green: #198754;
      --bs-teal: #20c997;
      --bs-cyan: #0dcaf0;
      --bs-white: #fff;
      --bs-gray: #6c757d;
      --bs-gray-dark: #343a40;
      --bs-primary: #0d6efd;
      --bs-secondary: #6c757d;
      --bs-success: #198754;
      --bs-info: #0dcaf0;
      --bs-warning: #ffc107;
      --bs-danger: #dc3545;
      --bs-light: #f8f9fa;
      --bs-dark: #212529;
      --bs-font-sans-serif: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", "Liberation Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
      --bs-font-monospace: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
      --bs-gradient: linear-gradient(180deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0))
    }

    *,
    ::after,
    ::before {
      box-sizing: border-box
    }

    @media (prefers-reduced-motion: no-preference) {
      :root {
        scroll-behavior: smooth
      }
    }

    body {
      margin: 0;
      font-family: var(--bs-font-sans-serif);
      font-size: 1rem;
      font-weight: 400;
      line-height: 1.5;
      color: #212529;
      background-color: #fff;
      -webkit-text-size-adjust: 100%;
      -webkit-tap-highlight-color: transparent
    }

    hr {
      margin: 1rem 0;
      color: inherit;
      background-color: currentColor;
      border: 0;
      opacity: .25
    }

    hr:not([size]) {
      height: 1px
    }

    .h1,
    h1 {
      font-size: calc(1.375rem + 1.5vw)
    }

    @media (min-width: 1200px) {

      .h1,
      h1 {
        font-size: 2.5rem
      }
    }

    .h2,
    h2 {
      font-size: calc(1.325rem + .9vw)
    }

    @media (min-width: 1200px) {

      .h2,
      h2 {
        font-size: 2rem
      }
    }

    .h3,
    h3 {
      font-size: calc(1.3rem + .6vw)
    }

    @media (min-width: 1200px) {

      .h3,
      h3 {
        font-size: 1.75rem
      }
    }

    .h4,
    h4 {
      font-size: calc(1.275rem + .3vw)
    }

    @media (min-width: 1200px) {

      .h4,
      h4 {
        font-size: 1.5rem
      }
    }

    .h5,
    h5 {
      font-size: 1.25rem
    }

    .h6,
    h6 {
      font-size: 1rem
    }

    p {
      margin-top: 0;
      margin-bottom: 1rem
    }

    abbr[data-bs-original-title],
    abbr[title] {
      -webkit-text-decoration: underline dotted;
      text-decoration: underline dotted;
      cursor: help;
      -webkit-text-decoration-skip-ink: none;
      text-decoration-skip-ink: none
    }

    address {
      margin-bottom: 1rem;
      font-style: normal;
      line-height: inherit
    }

    ol,
    ul {
      padding-left: 2rem
    }

    dl,
    ol,
    ul {
      margin-top: 0;
      margin-bottom: 1rem
    }

    ol ol,
    ol ul,
    ul ol,
    ul ul {
      margin-bottom: 0
    }

    dt {
      font-weight: 700
    }

    dd {
      margin-bottom: .5rem;
      margin-left: 0
    }

    blockquote {
      margin: 0 0 1rem
    }

    b,
    strong {
      font-weight: bolder
    }

    .small,
    small {
      font-size: .875em
    }

    .mark,
    mark {
      padding: .2em;
      background-color: #fcf8e3
    }

    sub,
    sup {
      position: relative;
      font-size: .75em;
      line-height: 0;
      vertical-align: baseline
    }

    sub {
      bottom: -.25em
    }

    sup {
      top: -.5em
    }

    a {
      color: #0d6efd;
      text-decoration: underline
    }

    a:hover {
      color: #0a58ca
    }

    a:not([href]):not([class]),
    a:not([href]):not([class]):hover {
      color: inherit;
      text-decoration: none
    }

    code,
    kbd,
    pre,
    samp {
      font-family: var(--bs-font-monospace);
      font-size: 1em;
      direction: ltr;
      unicode-bidi: bidi-override
    }

    pre {
      display: block;
      margin-top: 0;
      margin-bottom: 1rem;
      overflow: auto;
      font-size: .875em
    }

    pre code {
      font-size: inherit;
      color: inherit;
      word-break: normal
    }

    code {
      font-size: .875em;
      color: #d63384;
      word-wrap: break-word
    }

    a>code {
      color: inherit
    }

    kbd {
      padding: .2rem .4rem;
      font-size: .875em;
      color: #fff;
      background-color: #212529;
      border-radius: .2rem
    }

    kbd kbd {
      padding: 0;
      font-size: 1em;
      font-weight: 700
    }

    figure {
      margin: 0 0 1rem
    }

    img,
    svg {
      vertical-align: middle
    }

    table {
      caption-side: bottom;
      border-collapse: collapse
    }

    caption {
      padding-top: .5rem;
      padding-bottom: .5rem;
      color: #6c757d;
      text-align: left
    }

    th {
      text-align: inherit;
      text-align: -webkit-match-parent
    }

    tbody,
    td,
    tfoot,
    th,
    thead,
    tr {
      border-color: inherit;
      border-style: solid;
      border-width: 0
    }

    label {
      display: inline-block
    }

    button {
      border-radius: 0
    }

    button:focus:not(:focus-visible) {
      outline: 0
    }

    button,
    input,
    optgroup,
    select,
    textarea {
      margin: 0;
      font-family: inherit;
      font-size: inherit;
      line-height: inherit
    }

    button,
    select {
      text-transform: none
    }

    [role=button] {
      cursor: pointer
    }

    select {
      word-wrap: normal
    }

    select:disabled {
      opacity: 1
    }

    [list]::-webkit-calendar-picker-indicator {
      display: none
    }

    [type=button],
    [type=reset],
    [type=submit],
    button {
      -webkit-appearance: button
    }

    [type=button]:not(:disabled),
    [type=reset]:not(:disabled),
    [type=submit]:not(:disabled),
    button:not(:disabled) {
      cursor: pointer
    }

    ::-moz-focus-inner {
      padding: 0;
      border-style: none
    }

    textarea {
      resize: vertical
    }

    fieldset {
      min-width: 0;
      padding: 0;
      margin: 0;
      border: 0
    }

    legend {
      float: left;
      width: 100%;
      padding: 0;
      margin-bottom: .5rem;
      font-size: calc(1.275rem + .3vw);
      line-height: inherit
    }

    @media (min-width: 1200px) {
      legend {
        font-size: 1.5rem
      }
    }

    legend+* {
      clear: left
    }

    ::-webkit-datetime-edit-day-field,
    ::-webkit-datetime-edit-fields-wrapper,
    ::-webkit-datetime-edit-hour-field,
    ::-webkit-datetime-edit-minute,
    ::-webkit-datetime-edit-month-field,
    ::-webkit-datetime-edit-text,
    ::-webkit-datetime-edit-year-field {
      padding: 0
    }

    ::-webkit-inner-spin-button {
      height: auto
    }

    [type=search] {
      outline-offset: -2px;
      -webkit-appearance: textfield
    }

    ::-webkit-search-decoration {
      -webkit-appearance: none
    }

    ::-webkit-color-swatch-wrapper {
      padding: 0
    }

    ::file-selector-button {
      font: inherit
    }

    ::-webkit-file-upload-button {
      font: inherit;
      -webkit-appearance: button
    }

    output {
      display: inline-block
    }

    iframe {
      border: 0
    }

    summary {
      display: list-item;
      cursor: pointer
    }

    progress {
      vertical-align: baseline
    }

    [hidden] {
      display: none !important
    }

    .lead {
      font-size: 1.25rem;
      font-weight: 300
    }

    .display-1 {
      font-size: calc(1.625rem + 4.5vw);
      font-weight: 300;
      line-height: 1.2
    }

    @media (min-width: 1200px) {
      .display-1 {
        font-size: 5rem
      }
    }

    .display-2 {
      font-size: calc(1.575rem + 3.9vw);
      font-weight: 300;
      line-height: 1.2
    }

    @media (min-width: 1200px) {
      .display-2 {
        font-size: 4.5rem
      }
    }

    .display-3 {
      font-size: calc(1.525rem + 3.3vw);
      font-weight: 300;
      line-height: 1.2
    }

    @media (min-width: 1200px) {
      .display-3 {
        font-size: 4rem
      }
    }

    .display-4 {
      font-size: calc(1.475rem + 2.7vw);
      font-weight: 300;
      line-height: 1.2
    }

    @media (min-width: 1200px) {
      .display-4 {
        font-size: 3.5rem
      }
    }

    .display-5 {
      font-size: calc(1.425rem + 2.1vw);
      font-weight: 300;
      line-height: 1.2
    }

    @media (min-width: 1200px) {
      .display-5 {
        font-size: 3rem
      }
    }

    .display-6 {
      font-size: calc(1.375rem + 1.5vw);
      font-weight: 300;
      line-height: 1.2
    }

    @media (min-width: 1200px) {
      .display-6 {
        font-size: 2.5rem
      }
    }

    .list-unstyled {
      padding-left: 0;
      list-style: none
    }

    .list-inline {
      padding-left: 0;
      list-style: none
    }

    .list-inline-item {
      display: inline-block
    }

    .list-inline-item:not(:last-child) {
      margin-right: .5rem
    }

    .initialism {
      font-size: .875em;
      text-transform: uppercase
    }

    .blockquote {
      margin-bottom: 1rem;
      font-size: 1.25rem
    }

    .blockquote>:last-child {
      margin-bottom: 0
    }

    .blockquote-footer {
      margin-top: -1rem;
      margin-bottom: 1rem;
      font-size: .875em;
      color: #6c757d
    }

    .blockquote-footer::before {
      content: "—&nbsp;"
    }

    .img-fluid {
      max-width: 100%;
      height: auto
    }

    .img-thumbnail {
      padding: .25rem;
      background-color: #fff;
      border: 1px solid #dee2e6;
      border-radius: .25rem;
      max-width: 100%;
      height: auto
    }

    .figure {
      display: inline-block
    }

    .figure-img {
      margin-bottom: .5rem;
      line-height: 1
    }

    .figure-caption {
      font-size: .875em;
      color: #6c757d
    }

    .container,
    .container-fluid,
    .container-lg,
    .container-md,
    .container-sm,
    .container-xl,
    .container-xxl {
      width: 100%;
      padding-right: var(--bs-gutter-x, 0.75rem);
      padding-left: var(--bs-gutter-x, 0.75rem);
      margin-right: auto;
      margin-left: auto
    }

    @media (min-width: 576px) {

      .container,
      .container-sm {
        max-width: 540px
      }
    }

    @media (min-width: 768px) {

      .container,
      .container-md,
      .container-sm {
        max-width: 720px
      }
    }

    @media (min-width: 992px) {

      .container,
      .container-lg,
      .container-md,
      .container-sm {
        max-width: 960px
      }
    }

    @media (min-width: 1200px) {

      .container,
      .container-lg,
      .container-md,
      .container-sm,
      .container-xl {
        max-width: 1140px
      }
    }

    @media (min-width: 1400px) {

      .container,
      .container-lg,
      .container-md,
      .container-sm,
      .container-xl,
      .container-xxl {
        max-width: 1320px
      }
    }

    .row {
      --bs-gutter-x: 1.5rem;
      --bs-gutter-y: 0;
      display: flex;
      flex-wrap: wrap;
      margin-top: calc(var(--bs-gutter-y) * -1);
      margin-right: calc(var(--bs-gutter-x) * -.5);
      margin-left: calc(var(--bs-gutter-x) * -.5)
    }

    .row>* {
      flex-shrink: 0;
      width: 100%;
      max-width: 100%;
      padding-right: calc(var(--bs-gutter-x) * .5);
      padding-left: calc(var(--bs-gutter-x) * .5);
      margin-top: var(--bs-gutter-y)
    }

    .col {
      flex: 1 0 0%
    }

    .row-cols-auto>* {
      flex: 0 0 auto;
      width: auto
    }

    .row-cols-1>* {
      flex: 0 0 auto;
      width: 100%
    }

    .row-cols-2>* {
      flex: 0 0 auto;
      width: 50%
    }

    .row-cols-3>* {
      flex: 0 0 auto;
      width: 33.3333333333%
    }

    .row-cols-4>* {
      flex: 0 0 auto;
      width: 25%
    }

    .row-cols-5>* {
      flex: 0 0 auto;
      width: 20%
    }

    .row-cols-6>* {
      flex: 0 0 auto;
      width: 16.6666666667%
    }

    @media (min-width: 576px) {
      .col-sm {
        flex: 1 0 0%
      }

      .row-cols-sm-auto>* {
        flex: 0 0 auto;
        width: auto
      }

      .row-cols-sm-1>* {
        flex: 0 0 auto;
        width: 100%
      }

      .row-cols-sm-2>* {
        flex: 0 0 auto;
        width: 50%
      }

      .row-cols-sm-3>* {
        flex: 0 0 auto;
        width: 33.3333333333%
      }

      .row-cols-sm-4>* {
        flex: 0 0 auto;
        width: 25%
      }

      .row-cols-sm-5>* {
        flex: 0 0 auto;
        width: 20%
      }

      .row-cols-sm-6>* {
        flex: 0 0 auto;
        width: 16.6666666667%
      }
    }

    @media (min-width: 768px) {
      .col-md {
        flex: 1 0 0%
      }

      .row-cols-md-auto>* {
        flex: 0 0 auto;
        width: auto
      }

      .row-cols-md-1>* {
        flex: 0 0 auto;
        width: 100%
      }

      .row-cols-md-2>* {
        flex: 0 0 auto;
        width: 50%
      }

      .row-cols-md-3>* {
        flex: 0 0 auto;
        width: 33.3333333333%
      }

      .row-cols-md-4>* {
        flex: 0 0 auto;
        width: 25%
      }

      .row-cols-md-5>* {
        flex: 0 0 auto;
        width: 20%
      }

      .row-cols-md-6>* {
        flex: 0 0 auto;
        width: 16.6666666667%
      }
    }

    @media (min-width: 992px) {
      .col-lg {
        flex: 1 0 0%
      }

      .row-cols-lg-auto>* {
        flex: 0 0 auto;
        width: auto
      }

      .row-cols-lg-1>* {
        flex: 0 0 auto;
        width: 100%
      }

      .row-cols-lg-2>* {
        flex: 0 0 auto;
        width: 50%
      }

      .row-cols-lg-3>* {
        flex: 0 0 auto;
        width: 33.3333333333%
      }

      .row-cols-lg-4>* {
        flex: 0 0 auto;
        width: 25%
      }

      .row-cols-lg-5>* {
        flex: 0 0 auto;
        width: 20%
      }

      .row-cols-lg-6>* {
        flex: 0 0 auto;
        width: 16.6666666667%
      }
    }

    @media (min-width: 1200px) {
      .col-xl {
        flex: 1 0 0%
      }

      .row-cols-xl-auto>* {
        flex: 0 0 auto;
        width: auto
      }

      .row-cols-xl-1>* {
        flex: 0 0 auto;
        width: 100%
      }

      .row-cols-xl-2>* {
        flex: 0 0 auto;
        width: 50%
      }

      .row-cols-xl-3>* {
        flex: 0 0 auto;
        width: 33.3333333333%
      }

      .row-cols-xl-4>* {
        flex: 0 0 auto;
        width: 25%
      }

      .row-cols-xl-5>* {
        flex: 0 0 auto;
        width: 20%
      }

      .row-cols-xl-6>* {
        flex: 0 0 auto;
        width: 16.6666666667%
      }
    }

    @media (min-width: 1400px) {
      .col-xxl {
        flex: 1 0 0%
      }

      .row-cols-xxl-auto>* {
        flex: 0 0 auto;
        width: auto
      }

      .row-cols-xxl-1>* {
        flex: 0 0 auto;
        width: 100%
      }

      .row-cols-xxl-2>* {
        flex: 0 0 auto;
        width: 50%
      }

      .row-cols-xxl-3>* {
        flex: 0 0 auto;
        width: 33.3333333333%
      }

      .row-cols-xxl-4>* {
        flex: 0 0 auto;
        width: 25%
      }

      .row-cols-xxl-5>* {
        flex: 0 0 auto;
        width: 20%
      }

      .row-cols-xxl-6>* {
        flex: 0 0 auto;
        width: 16.6666666667%
      }
    }

    .col-auto {
      flex: 0 0 auto;
      width: auto
    }

    .col-1 {
      flex: 0 0 auto;
      width: 8.33333333%
    }

    .col-2 {
      flex: 0 0 auto;
      width: 16.66666667%
    }

    .col-3 {
      flex: 0 0 auto;
      width: 25%
    }

    .col-4 {
      flex: 0 0 auto;
      width: 33.33333333%
    }

    .col-5 {
      flex: 0 0 auto;
      width: 41.66666667%
    }

    .col-6 {
      flex: 0 0 auto;
      width: 50%
    }

    .col-7 {
      flex: 0 0 auto;
      width: 58.33333333%
    }

    .col-8 {
      flex: 0 0 auto;
      width: 66.66666667%
    }

    .col-9 {
      flex: 0 0 auto;
      width: 75%
    }

    .col-10 {
      flex: 0 0 auto;
      width: 83.33333333%
    }

    .col-11 {
      flex: 0 0 auto;
      width: 91.66666667%
    }

    .col-12 {
      flex: 0 0 auto;
      width: 100%
    }

    .offset-1 {
      margin-left: 8.33333333%
    }

    .offset-2 {
      margin-left: 16.66666667%
    }

    .offset-3 {
      margin-left: 25%
    }

    .offset-4 {
      margin-left: 33.33333333%
    }

    .offset-5 {
      margin-left: 41.66666667%
    }

    .offset-6 {
      margin-left: 50%
    }

    .offset-7 {
      margin-left: 58.33333333%
    }

    .offset-8 {
      margin-left: 66.66666667%
    }

    .offset-9 {
      margin-left: 75%
    }

    .offset-10 {
      margin-left: 83.33333333%
    }

    .offset-11 {
      margin-left: 91.66666667%
    }

    .g-0,
    .gx-0 {
      --bs-gutter-x: 0
    }

    .g-0,
    .gy-0 {
      --bs-gutter-y: 0
    }

    .g-1,
    .gx-1 {
      --bs-gutter-x: 0.25rem
    }

    .g-1,
    .gy-1 {
      --bs-gutter-y: 0.25rem
    }

    .g-2,
    .gx-2 {
      --bs-gutter-x: 0.5rem
    }

    .g-2,
    .gy-2 {
      --bs-gutter-y: 0.5rem
    }

    .g-3,
    .gx-3 {
      --bs-gutter-x: 1rem
    }

    .g-3,
    .gy-3 {
      --bs-gutter-y: 1rem
    }

    .g-4,
    .gx-4 {
      --bs-gutter-x: 1.5rem
    }

    .g-4,
    .gy-4 {
      --bs-gutter-y: 1.5rem
    }

    .g-5,
    .gx-5 {
      --bs-gutter-x: 3rem
    }

    .g-5,
    .gy-5 {
      --bs-gutter-y: 3rem
    }

    @media (min-width: 576px) {
      .col-sm-auto {
        flex: 0 0 auto;
        width: auto
      }

      .col-sm-1 {
        flex: 0 0 auto;
        width: 8.33333333%
      }

      .col-sm-2 {
        flex: 0 0 auto;
        width: 16.66666667%
      }

      .col-sm-3 {
        flex: 0 0 auto;
        width: 25%
      }

      .col-sm-4 {
        flex: 0 0 auto;
        width: 33.33333333%
      }

      .col-sm-5 {
        flex: 0 0 auto;
        width: 41.66666667%
      }

      .col-sm-6 {
        flex: 0 0 auto;
        width: 50%
      }

      .col-sm-7 {
        flex: 0 0 auto;
        width: 58.33333333%
      }

      .col-sm-8 {
        flex: 0 0 auto;
        width: 66.66666667%
      }

      .col-sm-9 {
        flex: 0 0 auto;
        width: 75%
      }

      .col-sm-10 {
        flex: 0 0 auto;
        width: 83.33333333%
      }

      .col-sm-11 {
        flex: 0 0 auto;
        width: 91.66666667%
      }

      .col-sm-12 {
        flex: 0 0 auto;
        width: 100%
      }

      .offset-sm-0 {
        margin-left: 0
      }

      .offset-sm-1 {
        margin-left: 8.33333333%
      }

      .offset-sm-2 {
        margin-left: 16.66666667%
      }

      .offset-sm-3 {
        margin-left: 25%
      }

      .offset-sm-4 {
        margin-left: 33.33333333%
      }

      .offset-sm-5 {
        margin-left: 41.66666667%
      }

      .offset-sm-6 {
        margin-left: 50%
      }

      .offset-sm-7 {
        margin-left: 58.33333333%
      }

      .offset-sm-8 {
        margin-left: 66.66666667%
      }

      .offset-sm-9 {
        margin-left: 75%
      }

      .offset-sm-10 {
        margin-left: 83.33333333%
      }

      .offset-sm-11 {
        margin-left: 91.66666667%
      }

      .g-sm-0,
      .gx-sm-0 {
        --bs-gutter-x: 0
      }

      .g-sm-0,
      .gy-sm-0 {
        --bs-gutter-y: 0
      }

      .g-sm-1,
      .gx-sm-1 {
        --bs-gutter-x: 0.25rem
      }

      .g-sm-1,
      .gy-sm-1 {
        --bs-gutter-y: 0.25rem
      }

      .g-sm-2,
      .gx-sm-2 {
        --bs-gutter-x: 0.5rem
      }

      .g-sm-2,
      .gy-sm-2 {
        --bs-gutter-y: 0.5rem
      }

      .g-sm-3,
      .gx-sm-3 {
        --bs-gutter-x: 1rem
      }

      .g-sm-3,
      .gy-sm-3 {
        --bs-gutter-y: 1rem
      }

      .g-sm-4,
      .gx-sm-4 {
        --bs-gutter-x: 1.5rem
      }

      .g-sm-4,
      .gy-sm-4 {
        --bs-gutter-y: 1.5rem
      }

      .g-sm-5,
      .gx-sm-5 {
        --bs-gutter-x: 3rem
      }

      .g-sm-5,
      .gy-sm-5 {
        --bs-gutter-y: 3rem
      }
    }

    @media (min-width: 768px) {
      .col-md-auto {
        flex: 0 0 auto;
        width: auto
      }

      .col-md-1 {
        flex: 0 0 auto;
        width: 8.33333333%
      }

      .col-md-2 {
        flex: 0 0 auto;
        width: 16.66666667%
      }

      .col-md-3 {
        flex: 0 0 auto;
        width: 25%
      }

      .col-md-4 {
        flex: 0 0 auto;
        width: 33.33333333%
      }

      .col-md-5 {
        flex: 0 0 auto;
        width: 41.66666667%
      }

      .col-md-6 {
        flex: 0 0 auto;
        width: 50%
      }

      .col-md-7 {
        flex: 0 0 auto;
        width: 58.33333333%
      }

      .col-md-8 {
        flex: 0 0 auto;
        width: 66.66666667%
      }

      .col-md-9 {
        flex: 0 0 auto;
        width: 75%
      }

      .col-md-10 {
        flex: 0 0 auto;
        width: 83.33333333%
      }

      .col-md-11 {
        flex: 0 0 auto;
        width: 91.66666667%
      }

      .col-md-12 {
        flex: 0 0 auto;
        width: 100%
      }

      .offset-md-0 {
        margin-left: 0
      }

      .offset-md-1 {
        margin-left: 8.33333333%
      }

      .offset-md-2 {
        margin-left: 16.66666667%
      }

      .offset-md-3 {
        margin-left: 25%
      }

      .offset-md-4 {
        margin-left: 33.33333333%
      }

      .offset-md-5 {
        margin-left: 41.66666667%
      }

      .offset-md-6 {
        margin-left: 50%
      }

      .offset-md-7 {
        margin-left: 58.33333333%
      }

      .offset-md-8 {
        margin-left: 66.66666667%
      }

      .offset-md-9 {
        margin-left: 75%
      }

      .offset-md-10 {
        margin-left: 83.33333333%
      }

      .offset-md-11 {
        margin-left: 91.66666667%
      }

      .g-md-0,
      .gx-md-0 {
        --bs-gutter-x: 0
      }

      .g-md-0,
      .gy-md-0 {
        --bs-gutter-y: 0
      }

      .g-md-1,
      .gx-md-1 {
        --bs-gutter-x: 0.25rem
      }

      .g-md-1,
      .gy-md-1 {
        --bs-gutter-y: 0.25rem
      }

      .g-md-2,
      .gx-md-2 {
        --bs-gutter-x: 0.5rem
      }

      .g-md-2,
      .gy-md-2 {
        --bs-gutter-y: 0.5rem
      }

      .g-md-3,
      .gx-md-3 {
        --bs-gutter-x: 1rem
      }

      .g-md-3,
      .gy-md-3 {
        --bs-gutter-y: 1rem
      }

      .g-md-4,
      .gx-md-4 {
        --bs-gutter-x: 1.5rem
      }

      .g-md-4,
      .gy-md-4 {
        --bs-gutter-y: 1.5rem
      }

      .g-md-5,
      .gx-md-5 {
        --bs-gutter-x: 3rem
      }

      .g-md-5,
      .gy-md-5 {
        --bs-gutter-y: 3rem
      }
    }

    @media (min-width: 992px) {
      .col-lg-auto {
        flex: 0 0 auto;
        width: auto
      }

      .col-lg-1 {
        flex: 0 0 auto;
        width: 8.33333333%
      }

      .col-lg-2 {
        flex: 0 0 auto;
        width: 16.66666667%
      }

      .col-lg-3 {
        flex: 0 0 auto;
        width: 25%
      }

      .col-lg-4 {
        flex: 0 0 auto;
        width: 33.33333333%
      }

      .col-lg-5 {
        flex: 0 0 auto;
        width: 41.66666667%
      }

      .col-lg-6 {
        flex: 0 0 auto;
        width: 50%
      }

      .col-lg-7 {
        flex: 0 0 auto;
        width: 58.33333333%
      }

      .col-lg-8 {
        flex: 0 0 auto;
        width: 66.66666667%
      }

      .col-lg-9 {
        flex: 0 0 auto;
        width: 75%
      }

      .col-lg-10 {
        flex: 0 0 auto;
        width: 83.33333333%
      }

      .col-lg-11 {
        flex: 0 0 auto;
        width: 91.66666667%
      }

      .col-lg-12 {
        flex: 0 0 auto;
        width: 100%
      }

      .offset-lg-0 {
        margin-left: 0
      }

      .offset-lg-1 {
        margin-left: 8.33333333%
      }

      .offset-lg-2 {
        margin-left: 16.66666667%
      }

      .offset-lg-3 {
        margin-left: 25%
      }

      .offset-lg-4 {
        margin-left: 33.33333333%
      }

      .offset-lg-5 {
        margin-left: 41.66666667%
      }

      .offset-lg-6 {
        margin-left: 50%
      }

      .offset-lg-7 {
        margin-left: 58.33333333%
      }

      .offset-lg-8 {
        margin-left: 66.66666667%
      }

      .offset-lg-9 {
        margin-left: 75%
      }

      .offset-lg-10 {
        margin-left: 83.33333333%
      }

      .offset-lg-11 {
        margin-left: 91.66666667%
      }

      .g-lg-0,
      .gx-lg-0 {
        --bs-gutter-x: 0
      }

      .g-lg-0,
      .gy-lg-0 {
        --bs-gutter-y: 0
      }

      .g-lg-1,
      .gx-lg-1 {
        --bs-gutter-x: 0.25rem
      }

      .g-lg-1,
      .gy-lg-1 {
        --bs-gutter-y: 0.25rem
      }

      .g-lg-2,
      .gx-lg-2 {
        --bs-gutter-x: 0.5rem
      }

      .g-lg-2,
      .gy-lg-2 {
        --bs-gutter-y: 0.5rem
      }

      .g-lg-3,
      .gx-lg-3 {
        --bs-gutter-x: 1rem
      }

      .g-lg-3,
      .gy-lg-3 {
        --bs-gutter-y: 1rem
      }

      .g-lg-4,
      .gx-lg-4 {
        --bs-gutter-x: 1.5rem
      }

      .g-lg-4,
      .gy-lg-4 {
        --bs-gutter-y: 1.5rem
      }

      .g-lg-5,
      .gx-lg-5 {
        --bs-gutter-x: 3rem
      }

      .g-lg-5,
      .gy-lg-5 {
        --bs-gutter-y: 3rem
      }
    }

    @media (min-width: 1200px) {
      .col-xl-auto {
        flex: 0 0 auto;
        width: auto
      }

      .col-xl-1 {
        flex: 0 0 auto;
        width: 8.33333333%
      }

      .col-xl-2 {
        flex: 0 0 auto;
        width: 16.66666667%
      }

      .col-xl-3 {
        flex: 0 0 auto;
        width: 25%
      }

      .col-xl-4 {
        flex: 0 0 auto;
        width: 33.33333333%
      }

      .col-xl-5 {
        flex: 0 0 auto;
        width: 41.66666667%
      }

      .col-xl-6 {
        flex: 0 0 auto;
        width: 50%
      }

      .col-xl-7 {
        flex: 0 0 auto;
        width: 58.33333333%
      }

      .col-xl-8 {
        flex: 0 0 auto;
        width: 66.66666667%
      }

      .col-xl-9 {
        flex: 0 0 auto;
        width: 75%
      }

      .col-xl-10 {
        flex: 0 0 auto;
        width: 83.33333333%
      }

      .col-xl-11 {
        flex: 0 0 auto;
        width: 91.66666667%
      }

      .col-xl-12 {
        flex: 0 0 auto;
        width: 100%
      }

      .offset-xl-0 {
        margin-left: 0
      }

      .offset-xl-1 {
        margin-left: 8.33333333%
      }

      .offset-xl-2 {
        margin-left: 16.66666667%
      }

      .offset-xl-3 {
        margin-left: 25%
      }

      .offset-xl-4 {
        margin-left: 33.33333333%
      }

      .offset-xl-5 {
        margin-left: 41.66666667%
      }

      .offset-xl-6 {
        margin-left: 50%
      }

      .offset-xl-7 {
        margin-left: 58.33333333%
      }

      .offset-xl-8 {
        margin-left: 66.66666667%
      }

      .offset-xl-9 {
        margin-left: 75%
      }

      .offset-xl-10 {
        margin-left: 83.33333333%
      }

      .offset-xl-11 {
        margin-left: 91.66666667%
      }

      .g-xl-0,
      .gx-xl-0 {
        --bs-gutter-x: 0
      }

      .g-xl-0,
      .gy-xl-0 {
        --bs-gutter-y: 0
      }

      .g-xl-1,
      .gx-xl-1 {
        --bs-gutter-x: 0.25rem
      }

      .g-xl-1,
      .gy-xl-1 {
        --bs-gutter-y: 0.25rem
      }

      .g-xl-2,
      .gx-xl-2 {
        --bs-gutter-x: 0.5rem
      }

      .g-xl-2,
      .gy-xl-2 {
        --bs-gutter-y: 0.5rem
      }

      .g-xl-3,
      .gx-xl-3 {
        --bs-gutter-x: 1rem
      }

      .g-xl-3,
      .gy-xl-3 {
        --bs-gutter-y: 1rem
      }

      .g-xl-4,
      .gx-xl-4 {
        --bs-gutter-x: 1.5rem
      }

      .g-xl-4,
      .gy-xl-4 {
        --bs-gutter-y: 1.5rem
      }

      .g-xl-5,
      .gx-xl-5 {
        --bs-gutter-x: 3rem
      }

      .g-xl-5,
      .gy-xl-5 {
        --bs-gutter-y: 3rem
      }
    }

    @media (min-width: 1400px) {
      .col-xxl-auto {
        flex: 0 0 auto;
        width: auto
      }

      .col-xxl-1 {
        flex: 0 0 auto;
        width: 8.33333333%
      }

      .col-xxl-2 {
        flex: 0 0 auto;
        width: 16.66666667%
      }

      .col-xxl-3 {
        flex: 0 0 auto;
        width: 25%
      }

      .col-xxl-4 {
        flex: 0 0 auto;
        width: 33.33333333%
      }

      .col-xxl-5 {
        flex: 0 0 auto;
        width: 41.66666667%
      }

      .col-xxl-6 {
        flex: 0 0 auto;
        width: 50%
      }

      .col-xxl-7 {
        flex: 0 0 auto;
        width: 58.33333333%
      }

      .col-xxl-8 {
        flex: 0 0 auto;
        width: 66.66666667%
      }

      .col-xxl-9 {
        flex: 0 0 auto;
        width: 75%
      }

      .col-xxl-10 {
        flex: 0 0 auto;
        width: 83.33333333%
      }

      .col-xxl-11 {
        flex: 0 0 auto;
        width: 91.66666667%
      }

      .col-xxl-12 {
        flex: 0 0 auto;
        width: 100%
      }

      .offset-xxl-0 {
        margin-left: 0
      }

      .offset-xxl-1 {
        margin-left: 8.33333333%
      }

      .offset-xxl-2 {
        margin-left: 16.66666667%
      }

      .offset-xxl-3 {
        margin-left: 25%
      }

      .offset-xxl-4 {
        margin-left: 33.33333333%
      }

      .offset-xxl-5 {
        margin-left: 41.66666667%
      }

      .offset-xxl-6 {
        margin-left: 50%
      }

      .offset-xxl-7 {
        margin-left: 58.33333333%
      }

      .offset-xxl-8 {
        margin-left: 66.66666667%
      }

      .offset-xxl-9 {
        margin-left: 75%
      }

      .offset-xxl-10 {
        margin-left: 83.33333333%
      }

      .offset-xxl-11 {
        margin-left: 91.66666667%
      }

      .g-xxl-0,
      .gx-xxl-0 {
        --bs-gutter-x: 0
      }

      .g-xxl-0,
      .gy-xxl-0 {
        --bs-gutter-y: 0
      }

      .g-xxl-1,
      .gx-xxl-1 {
        --bs-gutter-x: 0.25rem
      }

      .g-xxl-1,
      .gy-xxl-1 {
        --bs-gutter-y: 0.25rem
      }

      .g-xxl-2,
      .gx-xxl-2 {
        --bs-gutter-x: 0.5rem
      }

      .g-xxl-2,
      .gy-xxl-2 {
        --bs-gutter-y: 0.5rem
      }

      .g-xxl-3,
      .gx-xxl-3 {
        --bs-gutter-x: 1rem
      }

      .g-xxl-3,
      .gy-xxl-3 {
        --bs-gutter-y: 1rem
      }

      .g-xxl-4,
      .gx-xxl-4 {
        --bs-gutter-x: 1.5rem
      }

      .g-xxl-4,
      .gy-xxl-4 {
        --bs-gutter-y: 1.5rem
      }

      .g-xxl-5,
      .gx-xxl-5 {
        --bs-gutter-x: 3rem
      }

      .g-xxl-5,
      .gy-xxl-5 {
        --bs-gutter-y: 3rem
      }
    }

    .table {
      --bs-table-bg: transparent;
      --bs-table-accent-bg: transparent;
      --bs-table-striped-color: #212529;
      --bs-table-striped-bg: rgba(0, 0, 0, 0.05);
      --bs-table-active-color: #212529;
      --bs-table-active-bg: rgba(0, 0, 0, 0.1);
      --bs-table-hover-color: #212529;
      --bs-table-hover-bg: rgba(0, 0, 0, 0.075);
      width: 100%;
      margin-bottom: 1rem;
      color: #212529;
      vertical-align: top;
      border-color: #dee2e6
    }

    .table>:not(caption)>*>* {
      padding: .5rem .5rem;
      background-color: var(--bs-table-bg);
      border-bottom-width: 1px;
      box-shadow: inset 0 0 0 9999px var(--bs-table-accent-bg)
    }

    .table>tbody {
      vertical-align: inherit
    }

    .table>thead {
      vertical-align: bottom
    }

    .table>:not(:last-child)>:last-child>* {
      border-bottom-color: currentColor
    }

    .caption-top {
      caption-side: top
    }

    .table-sm>:not(caption)>*>* {
      padding: .25rem .25rem
    }

    .table-bordered>:not(caption)>* {
      border-width: 1px 0
    }

    .table-bordered>:not(caption)>*>* {
      border-width: 0 1px
    }

    .table-borderless>:not(caption)>*>* {
      border-bottom-width: 0
    }

    .table-striped>tbody>tr:nth-of-type(odd) {
      --bs-table-accent-bg: var(--bs-table-striped-bg);
      color: var(--bs-table-striped-color)
    }

    .table-active {
      --bs-table-accent-bg: var(--bs-table-active-bg);
      color: var(--bs-table-active-color)
    }

    .table-hover>tbody>tr:hover {
      --bs-table-accent-bg: var(--bs-table-hover-bg);
      color: var(--bs-table-hover-color)
    }

    .table-primary {
      --bs-table-bg: #cfe2ff;
      --bs-table-striped-bg: #c5d7f2;
      --bs-table-striped-color: #000;
      --bs-table-active-bg: #bacbe6;
      --bs-table-active-color: #000;
      --bs-table-hover-bg: #bfd1ec;
      --bs-table-hover-color: #000;
      color: #000;
      border-color: #bacbe6
    }

    .table-secondary {
      --bs-table-bg: #e2e3e5;
      --bs-table-striped-bg: #d7d8da;
      --bs-table-striped-color: #000;
      --bs-table-active-bg: #cbccce;
      --bs-table-active-color: #000;
      --bs-table-hover-bg: #d1d2d4;
      --bs-table-hover-color: #000;
      color: #000;
      border-color: #cbccce
    }

    .table-success {
      --bs-table-bg: #d1e7dd;
      --bs-table-striped-bg: #c7dbd2;
      --bs-table-striped-color: #000;
      --bs-table-active-bg: #bcd0c7;
      --bs-table-active-color: #000;
      --bs-table-hover-bg: #c1d6cc;
      --bs-table-hover-color: #000;
      color: #000;
      border-color: #bcd0c7
    }

    .table-info {
      --bs-table-bg: #cff4fc;
      --bs-table-striped-bg: #c5e8ef;
      --bs-table-striped-color: #000;
      --bs-table-active-bg: #badce3;
      --bs-table-active-color: #000;
      --bs-table-hover-bg: #bfe2e9;
      --bs-table-hover-color: #000;
      color: #000;
      border-color: #badce3
    }

    .table-warning {
      --bs-table-bg: #fff3cd;
      --bs-table-striped-bg: #f2e7c3;
      --bs-table-striped-color: #000;
      --bs-table-active-bg: #e6dbb9;
      --bs-table-active-color: #000;
      --bs-table-hover-bg: #ece1be;
      --bs-table-hover-color: #000;
      color: #000;
      border-color: #e6dbb9
    }

    .table-danger {
      --bs-table-bg: #f8d7da;
      --bs-table-striped-bg: #eccccf;
      --bs-table-striped-color: #000;
      --bs-table-active-bg: #dfc2c4;
      --bs-table-active-color: #000;
      --bs-table-hover-bg: #e5c7ca;
      --bs-table-hover-color: #000;
      color: #000;
      border-color: #dfc2c4
    }

    .table-light {
      --bs-table-bg: #f8f9fa;
      --bs-table-striped-bg: #ecedee;
      --bs-table-striped-color: #000;
      --bs-table-active-bg: #dfe0e1;
      --bs-table-active-color: #000;
      --bs-table-hover-bg: #e5e6e7;
      --bs-table-hover-color: #000;
      color: #000;
      border-color: #dfe0e1
    }

    .table-dark {
      --bs-table-bg: #212529;
      --bs-table-striped-bg: #2c3034;
      --bs-table-striped-color: #fff;
      --bs-table-active-bg: #373b3e;
      --bs-table-active-color: #fff;
      --bs-table-hover-bg: #323539;
      --bs-table-hover-color: #fff;
      color: #fff;
      border-color: #373b3e
    }

    .table-responsive {
      overflow-x: auto;
      -webkit-overflow-scrolling: touch
    }

    @media (max-width: 575.98px) {
      .table-responsive-sm {
        overflow-x: auto;
        -webkit-overflow-scrolling: touch
      }
    }

    @media (max-width: 767.98px) {
      .table-responsive-md {
        overflow-x: auto;
        -webkit-overflow-scrolling: touch
      }
    }

    @media (max-width: 991.98px) {
      .table-responsive-lg {
        overflow-x: auto;
        -webkit-overflow-scrolling: touch
      }
    }

    @media (max-width: 1199.98px) {
      .table-responsive-xl {
        overflow-x: auto;
        -webkit-overflow-scrolling: touch
      }
    }

    @media (max-width: 1399.98px) {
      .table-responsive-xxl {
        overflow-x: auto;
        -webkit-overflow-scrolling: touch
      }
    }

    .form-label {
      margin-bottom: .5rem
    }

    .col-form-label {
      padding-top: calc(.375rem + 1px);
      padding-bottom: calc(.375rem + 1px);
      margin-bottom: 0;
      font-size: inherit;
      line-height: 1.5
    }

    .col-form-label-lg {
      padding-top: calc(.5rem + 1px);
      padding-bottom: calc(.5rem + 1px);
      font-size: 1.25rem
    }

    .col-form-label-sm {
      padding-top: calc(.25rem + 1px);
      padding-bottom: calc(.25rem + 1px);
      font-size: .875rem
    }

    .form-text {
      margin-top: .25rem;
      font-size: .875em;
      color: #6c757d
    }

    .form-control {
      display: block;
      width: 100%;
      padding: .375rem .75rem;
      font-size: 1rem;
      font-weight: 400;
      line-height: 1.5;
      color: #212529;
      background-color: #fff;
      background-clip: padding-box;
      border: 1px solid #ced4da;
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
      border-radius: .25rem;
      transition: border-color .15s ease-in-out, box-shadow .15s ease-in-out
    }

    @media (prefers-reduced-motion: reduce) {
      .form-control {
        transition: none
      }
    }

    .form-control[type=file] {
      overflow: hidden
    }

    .form-control[type=file]:not(:disabled):not([readonly]) {
      cursor: pointer
    }

    .form-control:focus {
      color: #212529;
      background-color: #fff;
      border-color: #86b7fe;
      outline: 0;
      box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25)
    }

    .form-control::-webkit-date-and-time-value {
      height: 1.5em
    }

    .form-control::-moz-placeholder {
      color: #6c757d;
      opacity: 1
    }

    .form-control::placeholder {
      color: #6c757d;
      opacity: 1
    }

    .form-control:disabled,
    .form-control[readonly] {
      background-color: #e9ecef;
      opacity: 1
    }

    .form-control::file-selector-button {
      padding: .375rem .75rem;
      margin: -.375rem -.75rem;
      -webkit-margin-end: .75rem;
      margin-inline-end: .75rem;
      color: #212529;
      background-color: #e9ecef;
      pointer-events: none;
      border-color: inherit;
      border-style: solid;
      border-width: 0;
      border-inline-end-width: 1px;
      border-radius: 0;
      transition: color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out
    }

    @media (prefers-reduced-motion: reduce) {
      .form-control::file-selector-button {
        transition: none
      }
    }

    .form-control:hover:not(:disabled):not([readonly])::file-selector-button {
      background-color: #dde0e3
    }

    .form-control::-webkit-file-upload-button {
      padding: .375rem .75rem;
      margin: -.375rem -.75rem;
      -webkit-margin-end: .75rem;
      margin-inline-end: .75rem;
      color: #212529;
      background-color: #e9ecef;
      pointer-events: none;
      border-color: inherit;
      border-style: solid;
      border-width: 0;
      border-inline-end-width: 1px;
      border-radius: 0;
      -webkit-transition: color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out;
      transition: color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out
    }

    @media (prefers-reduced-motion: reduce) {
      .form-control::-webkit-file-upload-button {
        -webkit-transition: none;
        transition: none
      }
    }

    .form-control:hover:not(:disabled):not([readonly])::-webkit-file-upload-button {
      background-color: #dde0e3
    }

    .form-control-plaintext {
      display: block;
      width: 100%;
      padding: .375rem 0;
      margin-bottom: 0;
      line-height: 1.5;
      color: #212529;
      background-color: transparent;
      border: solid transparent;
      border-width: 1px 0
    }

    .form-control-plaintext.form-control-lg,
    .form-control-plaintext.form-control-sm {
      padding-right: 0;
      padding-left: 0
    }

    .form-control-sm {
      min-height: calc(1.5em + (.5rem + 2px));
      padding: .25rem .5rem;
      font-size: .875rem;
      border-radius: .2rem
    }

    .form-control-sm::file-selector-button {
      padding: .25rem .5rem;
      margin: -.25rem -.5rem;
      -webkit-margin-end: .5rem;
      margin-inline-end: .5rem
    }

    .form-control-sm::-webkit-file-upload-button {
      padding: .25rem .5rem;
      margin: -.25rem -.5rem;
      -webkit-margin-end: .5rem;
      margin-inline-end: .5rem
    }

    .form-control-lg {
      min-height: calc(1.5em + (1rem + 2px));
      padding: .5rem 1rem;
      font-size: 1.25rem;
      border-radius: .3rem
    }

    .form-control-lg::file-selector-button {
      padding: .5rem 1rem;
      margin: -.5rem -1rem;
      -webkit-margin-end: 1rem;
      margin-inline-end: 1rem
    }

    .form-control-lg::-webkit-file-upload-button {
      padding: .5rem 1rem;
      margin: -.5rem -1rem;
      -webkit-margin-end: 1rem;
      margin-inline-end: 1rem
    }

    textarea.form-control {
      min-height: calc(1.5em + (.75rem + 2px))
    }

    textarea.form-control-sm {
      min-height: calc(1.5em + (.5rem + 2px))
    }

    textarea.form-control-lg {
      min-height: calc(1.5em + (1rem + 2px))
    }

    .form-control-color {
      max-width: 3rem;
      height: auto;
      padding: .375rem
    }

    .form-control-color:not(:disabled):not([readonly]) {
      cursor: pointer
    }

    .form-control-color::-moz-color-swatch {
      height: 1.5em;
      border-radius: .25rem
    }

    .form-control-color::-webkit-color-swatch {
      height: 1.5em;
      border-radius: .25rem
    }

    .form-select {
      display: block;
      width: 100%;
      padding: .375rem 2.25rem .375rem .75rem;
      -moz-padding-start: calc(0.75rem - 3px);
      font-size: 1rem;
      font-weight: 400;
      line-height: 1.5;
      color: #212529;
      background-color: #fff;
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e");
      background-repeat: no-repeat;
      background-position: right .75rem center;
      background-size: 16px 12px;
      border: 1px solid #ced4da;
      border-radius: .25rem;
      transition: border-color .15s ease-in-out, box-shadow .15s ease-in-out;
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none
    }

    @media (prefers-reduced-motion: reduce) {
      .form-select {
        transition: none
      }
    }

    .form-select:focus {
      border-color: #86b7fe;
      outline: 0;
      box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25)
    }

    .form-select[multiple],
    .form-select[size]:not([size="1"]) {
      padding-right: .75rem;
      background-image: none
    }

    .form-select:disabled {
      background-color: #e9ecef
    }

    .form-select:-moz-focusring {
      color: transparent;
      text-shadow: 0 0 0 #212529
    }

    .form-select-sm {
      padding-top: .25rem;
      padding-bottom: .25rem;
      padding-left: .5rem;
      font-size: .875rem
    }

    .form-select-lg {
      padding-top: .5rem;
      padding-bottom: .5rem;
      padding-left: 1rem;
      font-size: 1.25rem
    }

    .form-check {
      display: block;
      min-height: 1.5rem;
      padding-left: 1.5em;
      margin-bottom: .125rem
    }

    .form-check .form-check-input {
      float: left;
      margin-left: -1.5em
    }

    .form-check-input {
      width: 1em;
      height: 1em;
      margin-top: .25em;
      vertical-align: top;
      background-color: #fff;
      background-repeat: no-repeat;
      background-position: center;
      background-size: contain;
      border: 1px solid rgba(0, 0, 0, 0.25);
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
      -webkit-print-color-adjust: exact;
      color-adjust: exact
    }

    .form-check-input[type=checkbox] {
      border-radius: .25em
    }

    .form-check-input[type=radio] {
      border-radius: 50%
    }

    .form-check-input:active {
      filter: brightness(90%)
    }

    .form-check-input:focus {
      border-color: #86b7fe;
      outline: 0;
      box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25)
    }

    .form-check-input:checked {
      background-color: #0d6efd;
      border-color: #0d6efd
    }

    .form-check-input:checked[type=checkbox] {
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'%3e%3cpath fill='none' stroke='%23fff' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='M6 10l3 3l6-6'/%3e%3c/svg%3e")
    }

    .form-check-input:checked[type=radio] {
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='2' fill='%23fff'/%3e%3c/svg%3e")
    }

    .form-check-input[type=checkbox]:indeterminate {
      background-color: #0d6efd;
      border-color: #0d6efd;
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'%3e%3cpath fill='none' stroke='%23fff' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='M6 10h8'/%3e%3c/svg%3e")
    }

    .form-check-input:disabled {
      pointer-events: none;
      filter: none;
      opacity: .5
    }

    .form-check-input:disabled~.form-check-label,
    .form-check-input[disabled]~.form-check-label {
      opacity: .5
    }

    .form-switch {
      padding-left: 2.5em
    }

    .form-switch .form-check-input {
      width: 2em;
      margin-left: -2.5em;
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='rgba%280, 0, 0, 0.25%29'/%3e%3c/svg%3e");
      background-position: left center;
      border-radius: 2em;
      transition: background-position .15s ease-in-out
    }

    @media (prefers-reduced-motion: reduce) {
      .form-switch .form-check-input {
        transition: none
      }
    }

    .form-switch .form-check-input:focus {
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='%2386b7fe'/%3e%3c/svg%3e")
    }

    .form-switch .form-check-input:checked {
      background-position: right center;
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='%23fff'/%3e%3c/svg%3e")
    }

    .form-check-inline {
      display: inline-block;
      margin-right: 1rem
    }

    .btn-check {
      position: absolute;
      clip: rect(0, 0, 0, 0);
      pointer-events: none
    }

    .btn-check:disabled+.btn,
    .btn-check[disabled]+.btn {
      pointer-events: none;
      filter: none;
      opacity: .65
    }

    .form-range {
      width: 100%;
      height: 1.5rem;
      padding: 0;
      background-color: transparent;
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none
    }

    .form-range:focus {
      outline: 0
    }

    .form-range:focus::-webkit-slider-thumb {
      box-shadow: 0 0 0 1px #fff, 0 0 0 0.25rem rgba(13, 110, 253, 0.25)
    }

    .form-range:focus::-moz-range-thumb {
      box-shadow: 0 0 0 1px #fff, 0 0 0 0.25rem rgba(13, 110, 253, 0.25)
    }

    .form-range::-moz-focus-outer {
      border: 0
    }

    .form-range::-webkit-slider-thumb {
      width: 1rem;
      height: 1rem;
      margin-top: -.25rem;
      background-color: #0d6efd;
      border: 0;
      border-radius: 1rem;
      -webkit-transition: background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out;
      transition: background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out;
      -webkit-appearance: none;
      appearance: none
    }

    @media (prefers-reduced-motion: reduce) {
      .form-range::-webkit-slider-thumb {
        -webkit-transition: none;
        transition: none
      }
    }

    .form-range::-webkit-slider-thumb:active {
      background-color: #b6d4fe
    }

    .form-range::-webkit-slider-runnable-track {
      width: 100%;
      height: .5rem;
      color: transparent;
      cursor: pointer;
      background-color: #dee2e6;
      border-color: transparent;
      border-radius: 1rem
    }

    .form-range::-moz-range-thumb {
      width: 1rem;
      height: 1rem;
      background-color: #0d6efd;
      border: 0;
      border-radius: 1rem;
      -moz-transition: background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out;
      transition: background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out;
      -moz-appearance: none;
      appearance: none
    }

    @media (prefers-reduced-motion: reduce) {
      .form-range::-moz-range-thumb {
        -moz-transition: none;
        transition: none
      }
    }

    .form-range::-moz-range-thumb:active {
      background-color: #b6d4fe
    }

    .form-range::-moz-range-track {
      width: 100%;
      height: .5rem;
      color: transparent;
      cursor: pointer;
      background-color: #dee2e6;
      border-color: transparent;
      border-radius: 1rem
    }

    .form-range:disabled {
      pointer-events: none
    }

    .form-range:disabled::-webkit-slider-thumb {
      background-color: #adb5bd
    }

    .form-range:disabled::-moz-range-thumb {
      background-color: #adb5bd
    }

    .form-floating {
      position: relative
    }

    .form-floating>.form-control,
    .form-floating>.form-select {
      height: calc(3.5rem + 2px);
      line-height: 1.25
    }

    .form-floating>label {
      position: absolute;
      top: 0;
      left: 0;
      height: 100%;
      padding: 1rem .75rem;
      pointer-events: none;
      border: 1px solid transparent;
      transform-origin: 0 0;
      transition: opacity .1s ease-in-out, transform .1s ease-in-out
    }

    @media (prefers-reduced-motion: reduce) {
      .form-floating>label {
        transition: none
      }
    }

    .form-floating>.form-control {
      padding: 1rem .75rem
    }

    .form-floating>.form-control::-moz-placeholder {
      color: transparent
    }

    .form-floating>.form-control::placeholder {
      color: transparent
    }

    .form-floating>.form-control:not(:-moz-placeholder-shown) {
      padding-top: 1.625rem;
      padding-bottom: .625rem
    }

    .form-floating>.form-control:focus,
    .form-floating>.form-control:not(:placeholder-shown) {
      padding-top: 1.625rem;
      padding-bottom: .625rem
    }

    .form-floating>.form-control:-webkit-autofill {
      padding-top: 1.625rem;
      padding-bottom: .625rem
    }

    .form-floating>.form-select {
      padding-top: 1.625rem;
      padding-bottom: .625rem
    }

    .form-floating>.form-control:not(:-moz-placeholder-shown)~label {
      opacity: .65;
      transform: scale(0.85) translateY(-0.5rem) translateX(0.15rem)
    }

    .form-floating>.form-control:focus~label,
    .form-floating>.form-control:not(:placeholder-shown)~label,
    .form-floating>.form-select~label {
      opacity: .65;
      transform: scale(0.85) translateY(-0.5rem) translateX(0.15rem)
    }

    .form-floating>.form-control:-webkit-autofill~label {
      opacity: .65;
      transform: scale(0.85) translateY(-0.5rem) translateX(0.15rem)
    }

    .input-group {
      position: relative;
      display: flex;
      flex-wrap: wrap;
      align-items: stretch;
      width: 100%
    }

    .input-group>.form-control,
    .input-group>.form-select {
      position: relative;
      flex: 1 1 auto;
      width: 1%;
      min-width: 0
    }

    .input-group>.form-control:focus,
    .input-group>.form-select:focus {
      z-index: 3
    }

    .input-group .btn {
      position: relative;
      z-index: 2
    }

    .input-group .btn:focus {
      z-index: 3
    }

    .input-group-text {
      display: flex;
      align-items: center;
      padding: .375rem .75rem;
      font-size: 1rem;
      font-weight: 400;
      line-height: 1.5;
      color: #212529;
      text-align: center;
      white-space: nowrap;
      background-color: #e9ecef;
      border: 1px solid #ced4da;
      border-radius: .25rem
    }

    .input-group-lg>.btn,
    .input-group-lg>.form-control,
    .input-group-lg>.form-select,
    .input-group-lg>.input-group-text {
      padding: .5rem 1rem;
      font-size: 1.25rem;
      border-radius: .3rem
    }

    .input-group-sm>.btn,
    .input-group-sm>.form-control,
    .input-group-sm>.form-select,
    .input-group-sm>.input-group-text {
      padding: .25rem .5rem;
      font-size: .875rem;
      border-radius: .2rem
    }

    .input-group-lg>.form-select,
    .input-group-sm>.form-select {
      padding-right: 3rem
    }

    .input-group:not(.has-validation)>.dropdown-toggle:nth-last-child(n+3),
    .input-group:not(.has-validation)>:not(:last-child):not(.dropdown-toggle):not(.dropdown-menu) {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0
    }

    .input-group.has-validation>.dropdown-toggle:nth-last-child(n+4),
    .input-group.has-validation>:nth-last-child(n+3):not(.dropdown-toggle):not(.dropdown-menu) {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0
    }

    .input-group>:not(:first-child):not(.dropdown-menu):not(.valid-tooltip):not(.valid-feedback):not(.invalid-tooltip):not(.invalid-feedback) {
      margin-left: -1px;
      border-top-left-radius: 0;
      border-bottom-left-radius: 0
    }

    .valid-feedback {
      display: none;
      width: 100%;
      margin-top: .25rem;
      font-size: .875em;
      color: #198754
    }

    .valid-tooltip {
      position: absolute;
      top: 100%;
      z-index: 5;
      display: none;
      max-width: 100%;
      padding: .25rem .5rem;
      margin-top: .1rem;
      font-size: .875rem;
      color: #fff;
      background-color: rgba(25, 135, 84, 0.9);
      border-radius: .25rem
    }

    .is-valid~.valid-feedback,
    .is-valid~.valid-tooltip,
    .was-validated :valid~.valid-feedback,
    .was-validated :valid~.valid-tooltip {
      display: block
    }

    .form-control.is-valid,
    .was-validated .form-control:valid {
      border-color: #198754;
      padding-right: calc(1.5em + .75rem);
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e");
      background-repeat: no-repeat;
      background-position: right calc(.375em + .1875rem) center;
      background-size: calc(.75em + .375rem) calc(.75em + .375rem)
    }

    .form-control.is-valid:focus,
    .was-validated .form-control:valid:focus {
      border-color: #198754;
      box-shadow: 0 0 0 0.25rem rgba(25, 135, 84, 0.25)
    }

    .was-validated textarea.form-control:valid,
    textarea.form-control.is-valid {
      padding-right: calc(1.5em + .75rem);
      background-position: top calc(.375em + .1875rem) right calc(.375em + .1875rem)
    }

    .form-select.is-valid,
    .was-validated .form-select:valid {
      border-color: #198754
    }

    .form-select.is-valid:not([multiple]):not([size]),
    .form-select.is-valid:not([multiple])[size="1"],
    .was-validated .form-select:valid:not([multiple]):not([size]),
    .was-validated .form-select:valid:not([multiple])[size="1"] {
      padding-right: 4.125rem;
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e"), url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e");
      background-position: right .75rem center, center right 2.25rem;
      background-size: 16px 12px, calc(.75em + .375rem) calc(.75em + .375rem)
    }

    .form-select.is-valid:focus,
    .was-validated .form-select:valid:focus {
      border-color: #198754;
      box-shadow: 0 0 0 0.25rem rgba(25, 135, 84, 0.25)
    }

    .form-check-input.is-valid,
    .was-validated .form-check-input:valid {
      border-color: #198754
    }

    .form-check-input.is-valid:checked,
    .was-validated .form-check-input:valid:checked {
      background-color: #198754
    }

    .form-check-input.is-valid:focus,
    .was-validated .form-check-input:valid:focus {
      box-shadow: 0 0 0 0.25rem rgba(25, 135, 84, 0.25)
    }

    .form-check-input.is-valid~.form-check-label,
    .was-validated .form-check-input:valid~.form-check-label {
      color: #198754
    }

    .form-check-inline .form-check-input~.valid-feedback {
      margin-left: .5em
    }

    .input-group .form-control.is-valid,
    .input-group .form-select.is-valid,
    .was-validated .input-group .form-control:valid,
    .was-validated .input-group .form-select:valid {
      z-index: 1
    }

    .input-group .form-control.is-valid:focus,
    .input-group .form-select.is-valid:focus,
    .was-validated .input-group .form-control:valid:focus,
    .was-validated .input-group .form-select:valid:focus {
      z-index: 3
    }

    .invalid-feedback {
      display: none;
      width: 100%;
      margin-top: .25rem;
      font-size: .875em;
      color: #dc3545
    }

    .invalid-tooltip {
      position: absolute;
      top: 100%;
      z-index: 5;
      display: none;
      max-width: 100%;
      padding: .25rem .5rem;
      margin-top: .1rem;
      font-size: .875rem;
      color: #fff;
      background-color: rgba(220, 53, 69, 0.9);
      border-radius: .25rem
    }

    .is-invalid~.invalid-feedback,
    .is-invalid~.invalid-tooltip,
    .was-validated :invalid~.invalid-feedback,
    .was-validated :invalid~.invalid-tooltip {
      display: block
    }

    .form-control.is-invalid,
    .was-validated .form-control:invalid {
      border-color: #dc3545;
      padding-right: calc(1.5em + .75rem);
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
      background-repeat: no-repeat;
      background-position: right calc(.375em + .1875rem) center;
      background-size: calc(.75em + .375rem) calc(.75em + .375rem)
    }

    .form-control.is-invalid:focus,
    .was-validated .form-control:invalid:focus {
      border-color: #dc3545;
      box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25)
    }

    .was-validated textarea.form-control:invalid,
    textarea.form-control.is-invalid {
      padding-right: calc(1.5em + .75rem);
      background-position: top calc(.375em + .1875rem) right calc(.375em + .1875rem)
    }

    .form-select.is-invalid,
    .was-validated .form-select:invalid {
      border-color: #dc3545
    }

    .form-select.is-invalid:not([multiple]):not([size]),
    .form-select.is-invalid:not([multiple])[size="1"],
    .was-validated .form-select:invalid:not([multiple]):not([size]),
    .was-validated .form-select:invalid:not([multiple])[size="1"] {
      padding-right: 4.125rem;
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e"), url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
      background-position: right .75rem center, center right 2.25rem;
      background-size: 16px 12px, calc(.75em + .375rem) calc(.75em + .375rem)
    }

    .form-select.is-invalid:focus,
    .was-validated .form-select:invalid:focus {
      border-color: #dc3545;
      box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25)
    }

    .form-check-input.is-invalid,
    .was-validated .form-check-input:invalid {
      border-color: #dc3545
    }

    .form-check-input.is-invalid:checked,
    .was-validated .form-check-input:invalid:checked {
      background-color: #dc3545
    }

    .form-check-input.is-invalid:focus,
    .was-validated .form-check-input:invalid:focus {
      box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25)
    }

    .form-check-input.is-invalid~.form-check-label,
    .was-validated .form-check-input:invalid~.form-check-label {
      color: #dc3545
    }

    .form-check-inline .form-check-input~.invalid-feedback {
      margin-left: .5em
    }

    .input-group .form-control.is-invalid,
    .input-group .form-select.is-invalid,
    .was-validated .input-group .form-control:invalid,
    .was-validated .input-group .form-select:invalid {
      z-index: 2
    }

    .input-group .form-control.is-invalid:focus,
    .input-group .form-select.is-invalid:focus,
    .was-validated .input-group .form-control:invalid:focus,
    .was-validated .input-group .form-select:invalid:focus {
      z-index: 3
    }

    .btn {
      display: inline-block;
      font-weight: 400;
      line-height: 1.5;
      color: #212529;
      text-align: center;
      text-decoration: none;
      vertical-align: middle;
      cursor: pointer;
      -webkit-user-select: none;
      -moz-user-select: none;
      user-select: none;
      background-color: transparent;
      border: 1px solid transparent;
      padding: .375rem .75rem;
      font-size: 1rem;
      border-radius: .25rem;
      transition: color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out
    }

    @media (prefers-reduced-motion: reduce) {
      .btn {
        transition: none
      }
    }

    .btn:hover {
      color: #212529
    }

    .btn-check:focus+.btn,
    .btn:focus {
      outline: 0;
      box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25)
    }

    .btn.disabled,
    .btn:disabled,
    fieldset:disabled .btn {
      pointer-events: none;
      opacity: .65
    }

    .btn-primary {
      color: #fff;
      background-color: #0d6efd;
      border-color: #0d6efd
    }

    .btn-primary:hover {
      color: #fff;
      background-color: #0b5ed7;
      border-color: #0a58ca
    }

    .btn-check:focus+.btn-primary,
    .btn-primary:focus {
      color: #fff;
      background-color: #0b5ed7;
      border-color: #0a58ca;
      box-shadow: 0 0 0 0.25rem rgba(49, 132, 253, 0.5)
    }

    .btn-check:active+.btn-primary,
    .btn-check:checked+.btn-primary,
    .btn-primary.active,
    .btn-primary:active,
    .show>.btn-primary.dropdown-toggle {
      color: #fff;
      background-color: #0a58ca;
      border-color: #0a53be
    }

    .btn-check:active+.btn-primary:focus,
    .btn-check:checked+.btn-primary:focus,
    .btn-primary.active:focus,
    .btn-primary:active:focus,
    .show>.btn-primary.dropdown-toggle:focus {
      box-shadow: 0 0 0 0.25rem rgba(49, 132, 253, 0.5)
    }

    .btn-primary.disabled,
    .btn-primary:disabled {
      color: #fff;
      background-color: #0d6efd;
      border-color: #0d6efd
    }

    .btn-secondary {
      color: #fff;
      background-color: #6c757d;
      border-color: #6c757d
    }

    .btn-secondary:hover {
      color: #fff;
      background-color: #5c636a;
      border-color: #565e64
    }

    .btn-check:focus+.btn-secondary,
    .btn-secondary:focus {
      color: #fff;
      background-color: #5c636a;
      border-color: #565e64;
      box-shadow: 0 0 0 0.25rem rgba(130, 138, 145, 0.5)
    }

    .btn-check:active+.btn-secondary,
    .btn-check:checked+.btn-secondary,
    .btn-secondary.active,
    .btn-secondary:active,
    .show>.btn-secondary.dropdown-toggle {
      color: #fff;
      background-color: #565e64;
      border-color: #51585e
    }

    .btn-check:active+.btn-secondary:focus,
    .btn-check:checked+.btn-secondary:focus,
    .btn-secondary.active:focus,
    .btn-secondary:active:focus,
    .show>.btn-secondary.dropdown-toggle:focus {
      box-shadow: 0 0 0 0.25rem rgba(130, 138, 145, 0.5)
    }

    .btn-secondary.disabled,
    .btn-secondary:disabled {
      color: #fff;
      background-color: #6c757d;
      border-color: #6c757d
    }

    .btn-success {
      color: #fff;
      background-color: #198754;
      border-color: #198754
    }

    .btn-success:hover {
      color: #fff;
      background-color: #157347;
      border-color: #146c43
    }

    .btn-check:focus+.btn-success,
    .btn-success:focus {
      color: #fff;
      background-color: #157347;
      border-color: #146c43;
      box-shadow: 0 0 0 0.25rem rgba(60, 153, 110, 0.5)
    }

    .btn-check:active+.btn-success,
    .btn-check:checked+.btn-success,
    .btn-success.active,
    .btn-success:active,
    .show>.btn-success.dropdown-toggle {
      color: #fff;
      background-color: #146c43;
      border-color: #13653f
    }

    .btn-check:active+.btn-success:focus,
    .btn-check:checked+.btn-success:focus,
    .btn-success.active:focus,
    .btn-success:active:focus,
    .show>.btn-success.dropdown-toggle:focus {
      box-shadow: 0 0 0 0.25rem rgba(60, 153, 110, 0.5)
    }

    .btn-success.disabled,
    .btn-success:disabled {
      color: #fff;
      background-color: #198754;
      border-color: #198754
    }

    .btn-info {
      color: #000;
      background-color: #0dcaf0;
      border-color: #0dcaf0
    }

    .btn-info:hover {
      color: #000;
      background-color: #31d2f2;
      border-color: #25cff2
    }

    .btn-check:focus+.btn-info,
    .btn-info:focus {
      color: #000;
      background-color: #31d2f2;
      border-color: #25cff2;
      box-shadow: 0 0 0 0.25rem rgba(11, 172, 204, 0.5)
    }

    .btn-check:active+.btn-info,
    .btn-check:checked+.btn-info,
    .btn-info.active,
    .btn-info:active,
    .show>.btn-info.dropdown-toggle {
      color: #000;
      background-color: #3dd5f3;
      border-color: #25cff2
    }

    .btn-check:active+.btn-info:focus,
    .btn-check:checked+.btn-info:focus,
    .btn-info.active:focus,
    .btn-info:active:focus,
    .show>.btn-info.dropdown-toggle:focus {
      box-shadow: 0 0 0 0.25rem rgba(11, 172, 204, 0.5)
    }

    .btn-info.disabled,
    .btn-info:disabled {
      color: #000;
      background-color: #0dcaf0;
      border-color: #0dcaf0
    }

    .btn-warning {
      color: #000;
      background-color: #ffc107;
      border-color: #ffc107
    }

    .btn-warning:hover {
      color: #000;
      background-color: #ffca2c;
      border-color: #ffc720
    }

    .btn-check:focus+.btn-warning,
    .btn-warning:focus {
      color: #000;
      background-color: #ffca2c;
      border-color: #ffc720;
      box-shadow: 0 0 0 0.25rem rgba(217, 164, 6, 0.5)
    }

    .btn-check:active+.btn-warning,
    .btn-check:checked+.btn-warning,
    .btn-warning.active,
    .btn-warning:active,
    .show>.btn-warning.dropdown-toggle {
      color: #000;
      background-color: #ffcd39;
      border-color: #ffc720
    }

    .btn-check:active+.btn-warning:focus,
    .btn-check:checked+.btn-warning:focus,
    .btn-warning.active:focus,
    .btn-warning:active:focus,
    .show>.btn-warning.dropdown-toggle:focus {
      box-shadow: 0 0 0 0.25rem rgba(217, 164, 6, 0.5)
    }

    .btn-warning.disabled,
    .btn-warning:disabled {
      color: #000;
      background-color: #ffc107;
      border-color: #ffc107
    }

    .btn-danger {
      color: #fff;
      background-color: #dc3545;
      border-color: #dc3545
    }

    .btn-danger:hover {
      color: #fff;
      background-color: #bb2d3b;
      border-color: #b02a37
    }

    .btn-check:focus+.btn-danger,
    .btn-danger:focus {
      color: #fff;
      background-color: #bb2d3b;
      border-color: #b02a37;
      box-shadow: 0 0 0 0.25rem rgba(225, 83, 97, 0.5)
    }

    .btn-check:active+.btn-danger,
    .btn-check:checked+.btn-danger,
    .btn-danger.active,
    .btn-danger:active,
    .show>.btn-danger.dropdown-toggle {
      color: #fff;
      background-color: #b02a37;
      border-color: #a52834
    }

    .btn-check:active+.btn-danger:focus,
    .btn-check:checked+.btn-danger:focus,
    .btn-danger.active:focus,
    .btn-danger:active:focus,
    .show>.btn-danger.dropdown-toggle:focus {
      box-shadow: 0 0 0 0.25rem rgba(225, 83, 97, 0.5)
    }

    .btn-danger.disabled,
    .btn-danger:disabled {
      color: #fff;
      background-color: #dc3545;
      border-color: #dc3545
    }

    .btn-light {
      color: #000;
      background-color: #f8f9fa;
      border-color: #f8f9fa
    }

    .btn-light:hover {
      color: #000;
      background-color: #f9fafb;
      border-color: #f9fafb
    }

    .btn-check:focus+.btn-light,
    .btn-light:focus {
      color: #000;
      background-color: #f9fafb;
      border-color: #f9fafb;
      box-shadow: 0 0 0 0.25rem rgba(211, 212, 213, 0.5)
    }

    .btn-check:active+.btn-light,
    .btn-check:checked+.btn-light,
    .btn-light.active,
    .btn-light:active,
    .show>.btn-light.dropdown-toggle {
      color: #000;
      background-color: #f9fafb;
      border-color: #f9fafb
    }

    .btn-check:active+.btn-light:focus,
    .btn-check:checked+.btn-light:focus,
    .btn-light.active:focus,
    .btn-light:active:focus,
    .show>.btn-light.dropdown-toggle:focus {
      box-shadow: 0 0 0 0.25rem rgba(211, 212, 213, 0.5)
    }

    .btn-light.disabled,
    .btn-light:disabled {
      color: #000;
      background-color: #f8f9fa;
      border-color: #f8f9fa
    }

    .btn-dark {
      color: #fff;
      background-color: #212529;
      border-color: #212529
    }

    .btn-dark:hover {
      color: #fff;
      background-color: #1c1f23;
      border-color: #1a1e21
    }

    .btn-check:focus+.btn-dark,
    .btn-dark:focus {
      color: #fff;
      background-color: #1c1f23;
      border-color: #1a1e21;
      box-shadow: 0 0 0 0.25rem rgba(66, 70, 73, 0.5)
    }

    .btn-check:active+.btn-dark,
    .btn-check:checked+.btn-dark,
    .btn-dark.active,
    .btn-dark:active,
    .show>.btn-dark.dropdown-toggle {
      color: #fff;
      background-color: #1a1e21;
      border-color: #191c1f
    }

    .btn-check:active+.btn-dark:focus,
    .btn-check:checked+.btn-dark:focus,
    .btn-dark.active:focus,
    .btn-dark:active:focus,
    .show>.btn-dark.dropdown-toggle:focus {
      box-shadow: 0 0 0 0.25rem rgba(66, 70, 73, 0.5)
    }

    .btn-dark.disabled,
    .btn-dark:disabled {
      color: #fff;
      background-color: #212529;
      border-color: #212529
    }

    .btn-outline-primary {
      color: #0d6efd;
      border-color: #0d6efd
    }

    .btn-outline-primary:hover {
      color: #fff;
      background-color: #0d6efd;
      border-color: #0d6efd
    }

    .btn-check:focus+.btn-outline-primary,
    .btn-outline-primary:focus {
      box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.5)
    }

    .btn-check:active+.btn-outline-primary,
    .btn-check:checked+.btn-outline-primary,
    .btn-outline-primary.active,
    .btn-outline-primary.dropdown-toggle.show,
    .btn-outline-primary:active {
      color: #fff;
      background-color: #0d6efd;
      border-color: #0d6efd
    }

    .btn-check:active+.btn-outline-primary:focus,
    .btn-check:checked+.btn-outline-primary:focus,
    .btn-outline-primary.active:focus,
    .btn-outline-primary.dropdown-toggle.show:focus,
    .btn-outline-primary:active:focus {
      box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.5)
    }

    .btn-outline-primary.disabled,
    .btn-outline-primary:disabled {
      color: #0d6efd;
      background-color: transparent
    }

    .btn-outline-secondary {
      color: #6c757d;
      border-color: #6c757d
    }

    .btn-outline-secondary:hover {
      color: #fff;
      background-color: #6c757d;
      border-color: #6c757d
    }

    .btn-check:focus+.btn-outline-secondary,
    .btn-outline-secondary:focus {
      box-shadow: 0 0 0 0.25rem rgba(108, 117, 125, 0.5)
    }

    .btn-check:active+.btn-outline-secondary,
    .btn-check:checked+.btn-outline-secondary,
    .btn-outline-secondary.active,
    .btn-outline-secondary.dropdown-toggle.show,
    .btn-outline-secondary:active {
      color: #fff;
      background-color: #6c757d;
      border-color: #6c757d
    }

    .btn-check:active+.btn-outline-secondary:focus,
    .btn-check:checked+.btn-outline-secondary:focus,
    .btn-outline-secondary.active:focus,
    .btn-outline-secondary.dropdown-toggle.show:focus,
    .btn-outline-secondary:active:focus {
      box-shadow: 0 0 0 0.25rem rgba(108, 117, 125, 0.5)
    }

    .btn-outline-secondary.disabled,
    .btn-outline-secondary:disabled {
      color: #6c757d;
      background-color: transparent
    }

    .btn-outline-success {
      color: #198754;
      border-color: #198754
    }

    .btn-outline-success:hover {
      color: #fff;
      background-color: #198754;
      border-color: #198754
    }

    .btn-check:focus+.btn-outline-success,
    .btn-outline-success:focus {
      box-shadow: 0 0 0 0.25rem rgba(25, 135, 84, 0.5)
    }

    .btn-check:active+.btn-outline-success,
    .btn-check:checked+.btn-outline-success,
    .btn-outline-success.active,
    .btn-outline-success.dropdown-toggle.show,
    .btn-outline-success:active {
      color: #fff;
      background-color: #198754;
      border-color: #198754
    }

    .btn-check:active+.btn-outline-success:focus,
    .btn-check:checked+.btn-outline-success:focus,
    .btn-outline-success.active:focus,
    .btn-outline-success.dropdown-toggle.show:focus,
    .btn-outline-success:active:focus {
      box-shadow: 0 0 0 0.25rem rgba(25, 135, 84, 0.5)
    }

    .btn-outline-success.disabled,
    .btn-outline-success:disabled {
      color: #198754;
      background-color: transparent
    }

    .btn-outline-info {
      color: #0dcaf0;
      border-color: #0dcaf0
    }

    .btn-outline-info:hover {
      color: #000;
      background-color: #0dcaf0;
      border-color: #0dcaf0
    }

    .btn-check:focus+.btn-outline-info,
    .btn-outline-info:focus {
      box-shadow: 0 0 0 0.25rem rgba(13, 202, 240, 0.5)
    }

    .btn-check:active+.btn-outline-info,
    .btn-check:checked+.btn-outline-info,
    .btn-outline-info.active,
    .btn-outline-info.dropdown-toggle.show,
    .btn-outline-info:active {
      color: #000;
      background-color: #0dcaf0;
      border-color: #0dcaf0
    }

    .btn-check:active+.btn-outline-info:focus,
    .btn-check:checked+.btn-outline-info:focus,
    .btn-outline-info.active:focus,
    .btn-outline-info.dropdown-toggle.show:focus,
    .btn-outline-info:active:focus {
      box-shadow: 0 0 0 0.25rem rgba(13, 202, 240, 0.5)
    }

    .btn-outline-info.disabled,
    .btn-outline-info:disabled {
      color: #0dcaf0;
      background-color: transparent
    }

    .btn-outline-warning {
      color: #ffc107;
      border-color: #ffc107
    }

    .btn-outline-warning:hover {
      color: #000;
      background-color: #ffc107;
      border-color: #ffc107
    }

    .btn-check:focus+.btn-outline-warning,
    .btn-outline-warning:focus {
      box-shadow: 0 0 0 0.25rem rgba(255, 193, 7, 0.5)
    }

    .btn-check:active+.btn-outline-warning,
    .btn-check:checked+.btn-outline-warning,
    .btn-outline-warning.active,
    .btn-outline-warning.dropdown-toggle.show,
    .btn-outline-warning:active {
      color: #000;
      background-color: #ffc107;
      border-color: #ffc107
    }

    .btn-check:active+.btn-outline-warning:focus,
    .btn-check:checked+.btn-outline-warning:focus,
    .btn-outline-warning.active:focus,
    .btn-outline-warning.dropdown-toggle.show:focus,
    .btn-outline-warning:active:focus {
      box-shadow: 0 0 0 0.25rem rgba(255, 193, 7, 0.5)
    }

    .btn-outline-warning.disabled,
    .btn-outline-warning:disabled {
      color: #ffc107;
      background-color: transparent
    }

    .btn-outline-danger {
      color: #dc3545;
      border-color: #dc3545
    }

    .btn-outline-danger:hover {
      color: #fff;
      background-color: #dc3545;
      border-color: #dc3545
    }

    .btn-check:focus+.btn-outline-danger,
    .btn-outline-danger:focus {
      box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.5)
    }

    .btn-check:active+.btn-outline-danger,
    .btn-check:checked+.btn-outline-danger,
    .btn-outline-danger.active,
    .btn-outline-danger.dropdown-toggle.show,
    .btn-outline-danger:active {
      color: #fff;
      background-color: #dc3545;
      border-color: #dc3545
    }

    .btn-check:active+.btn-outline-danger:focus,
    .btn-check:checked+.btn-outline-danger:focus,
    .btn-outline-danger.active:focus,
    .btn-outline-danger.dropdown-toggle.show:focus,
    .btn-outline-danger:active:focus {
      box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.5)
    }

    .btn-outline-danger.disabled,
    .btn-outline-danger:disabled {
      color: #dc3545;
      background-color: transparent
    }

    .btn-outline-light {
      color: #f8f9fa;
      border-color: #f8f9fa
    }

    .btn-outline-light:hover {
      color: #000;
      background-color: #f8f9fa;
      border-color: #f8f9fa
    }

    .btn-check:focus+.btn-outline-light,
    .btn-outline-light:focus {
      box-shadow: 0 0 0 0.25rem rgba(248, 249, 250, 0.5)
    }

    .btn-check:active+.btn-outline-light,
    .btn-check:checked+.btn-outline-light,
    .btn-outline-light.active,
    .btn-outline-light.dropdown-toggle.show,
    .btn-outline-light:active {
      color: #000;
      background-color: #f8f9fa;
      border-color: #f8f9fa
    }

    .btn-check:active+.btn-outline-light:focus,
    .btn-check:checked+.btn-outline-light:focus,
    .btn-outline-light.active:focus,
    .btn-outline-light.dropdown-toggle.show:focus,
    .btn-outline-light:active:focus {
      box-shadow: 0 0 0 0.25rem rgba(248, 249, 250, 0.5)
    }

    .btn-outline-light.disabled,
    .btn-outline-light:disabled {
      color: #f8f9fa;
      background-color: transparent
    }

    .btn-outline-dark {
      color: #212529;
      border-color: #212529
    }

    .btn-outline-dark:hover {
      color: #fff;
      background-color: #212529;
      border-color: #212529
    }

    .btn-check:focus+.btn-outline-dark,
    .btn-outline-dark:focus {
      box-shadow: 0 0 0 0.25rem rgba(33, 37, 41, 0.5)
    }

    .btn-check:active+.btn-outline-dark,
    .btn-check:checked+.btn-outline-dark,
    .btn-outline-dark.active,
    .btn-outline-dark.dropdown-toggle.show,
    .btn-outline-dark:active {
      color: #fff;
      background-color: #212529;
      border-color: #212529
    }

    .btn-check:active+.btn-outline-dark:focus,
    .btn-check:checked+.btn-outline-dark:focus,
    .btn-outline-dark.active:focus,
    .btn-outline-dark.dropdown-toggle.show:focus,
    .btn-outline-dark:active:focus {
      box-shadow: 0 0 0 0.25rem rgba(33, 37, 41, 0.5)
    }

    .btn-outline-dark.disabled,
    .btn-outline-dark:disabled {
      color: #212529;
      background-color: transparent
    }

    .btn-link {
      font-weight: 400;
      color: #0d6efd;
      text-decoration: underline
    }

    .btn-link:hover {
      color: #0a58ca
    }

    .btn-link.disabled,
    .btn-link:disabled {
      color: #6c757d
    }

    .btn-group-lg>.btn,
    .btn-lg {
      padding: .5rem 1rem;
      font-size: 1.25rem;
      border-radius: .3rem
    }

    .btn-group-sm>.btn,
    .btn-sm {
      padding: .25rem .5rem;
      font-size: .875rem;
      border-radius: .2rem
    }

    .fade {
      transition: opacity .15s linear
    }

    @media (prefers-reduced-motion: reduce) {
      .fade {
        transition: none
      }
    }

    .fade:not(.show) {
      opacity: 0
    }

    .collapse:not(.show) {
      display: none
    }

    .collapsing {
      height: 0;
      overflow: hidden;
      transition: height .35s ease
    }

    @media (prefers-reduced-motion: reduce) {
      .collapsing {
        transition: none
      }
    }

    .dropdown,
    .dropend,
    .dropstart,
    .dropup {
      position: relative
    }

    .dropdown-toggle {
      white-space: nowrap
    }

    .dropdown-toggle::after {
      display: inline-block;
      margin-left: .255em;
      vertical-align: .255em;
      content: "";
      border-top: .3em solid;
      border-right: .3em solid transparent;
      border-bottom: 0;
      border-left: .3em solid transparent
    }

    .dropdown-toggle:empty::after {
      margin-left: 0
    }

    .dropdown-menu {
      position: absolute;
      z-index: 1000;
      display: none;
      min-width: 10rem;
      padding: .5rem 0;
      margin: 0;
      font-size: 1rem;
      color: #212529;
      text-align: left;
      list-style: none;
      background-color: #fff;
      background-clip: padding-box;
      border: 1px solid rgba(0, 0, 0, 0.15);
      border-radius: .25rem
    }

    .dropdown-menu[data-bs-popper] {
      top: 100%;
      left: 0;
      margin-top: .125rem
    }

    .dropdown-menu-start {
      --bs-position: start
    }

    .dropdown-menu-start[data-bs-popper] {
      right: auto;
      left: 0
    }

    .dropdown-menu-end {
      --bs-position: end
    }

    .dropdown-menu-end[data-bs-popper] {
      right: 0;
      left: auto
    }

    @media (min-width: 576px) {
      .dropdown-menu-sm-start {
        --bs-position: start
      }

      .dropdown-menu-sm-start[data-bs-popper] {
        right: auto;
        left: 0
      }

      .dropdown-menu-sm-end {
        --bs-position: end
      }

      .dropdown-menu-sm-end[data-bs-popper] {
        right: 0;
        left: auto
      }
    }

    @media (min-width: 768px) {
      .dropdown-menu-md-start {
        --bs-position: start
      }

      .dropdown-menu-md-start[data-bs-popper] {
        right: auto;
        left: 0
      }

      .dropdown-menu-md-end {
        --bs-position: end
      }

      .dropdown-menu-md-end[data-bs-popper] {
        right: 0;
        left: auto
      }
    }

    @media (min-width: 992px) {
      .dropdown-menu-lg-start {
        --bs-position: start
      }

      .dropdown-menu-lg-start[data-bs-popper] {
        right: auto;
        left: 0
      }

      .dropdown-menu-lg-end {
        --bs-position: end
      }

      .dropdown-menu-lg-end[data-bs-popper] {
        right: 0;
        left: auto
      }
    }

    @media (min-width: 1200px) {
      .dropdown-menu-xl-start {
        --bs-position: start
      }

      .dropdown-menu-xl-start[data-bs-popper] {
        right: auto;
        left: 0
      }

      .dropdown-menu-xl-end {
        --bs-position: end
      }

      .dropdown-menu-xl-end[data-bs-popper] {
        right: 0;
        left: auto
      }
    }

    @media (min-width: 1400px) {
      .dropdown-menu-xxl-start {
        --bs-position: start
      }

      .dropdown-menu-xxl-start[data-bs-popper] {
        right: auto;
        left: 0
      }

      .dropdown-menu-xxl-end {
        --bs-position: end
      }

      .dropdown-menu-xxl-end[data-bs-popper] {
        right: 0;
        left: auto
      }
    }

    .dropup .dropdown-menu[data-bs-popper] {
      top: auto;
      bottom: 100%;
      margin-top: 0;
      margin-bottom: .125rem
    }

    .dropup .dropdown-toggle::after {
      display: inline-block;
      margin-left: .255em;
      vertical-align: .255em;
      content: "";
      border-top: 0;
      border-right: .3em solid transparent;
      border-bottom: .3em solid;
      border-left: .3em solid transparent
    }

    .dropup .dropdown-toggle:empty::after {
      margin-left: 0
    }

    .dropend .dropdown-menu[data-bs-popper] {
      top: 0;
      right: auto;
      left: 100%;
      margin-top: 0;
      margin-left: .125rem
    }

    .dropend .dropdown-toggle::after {
      display: inline-block;
      margin-left: .255em;
      vertical-align: .255em;
      content: "";
      border-top: .3em solid transparent;
      border-right: 0;
      border-bottom: .3em solid transparent;
      border-left: .3em solid
    }

    .dropend .dropdown-toggle:empty::after {
      margin-left: 0
    }

    .dropend .dropdown-toggle::after {
      vertical-align: 0
    }

    .dropstart .dropdown-menu[data-bs-popper] {
      top: 0;
      right: 100%;
      left: auto;
      margin-top: 0;
      margin-right: .125rem
    }

    .dropstart .dropdown-toggle::after {
      display: inline-block;
      margin-left: .255em;
      vertical-align: .255em;
      content: ""
    }

    .dropstart .dropdown-toggle::after {
      display: none
    }

    .dropstart .dropdown-toggle::before {
      display: inline-block;
      margin-right: .255em;
      vertical-align: .255em;
      content: "";
      border-top: .3em solid transparent;
      border-right: .3em solid;
      border-bottom: .3em solid transparent
    }

    .dropstart .dropdown-toggle:empty::after {
      margin-left: 0
    }

    .dropstart .dropdown-toggle::before {
      vertical-align: 0
    }

    .dropdown-divider {
      height: 0;
      margin: .5rem 0;
      overflow: hidden;
      border-top: 1px solid rgba(0, 0, 0, 0.15)
    }

    .dropdown-item {
      display: block;
      width: 100%;
      padding: .25rem 1rem;
      clear: both;
      font-weight: 400;
      color: #212529;
      text-align: inherit;
      text-decoration: none;
      white-space: nowrap;
      background-color: transparent;
      border: 0
    }

    .dropdown-item:focus,
    .dropdown-item:hover {
      color: #1e2125;
      background-color: #e9ecef
    }

    .dropdown-item.active,
    .dropdown-item:active {
      color: #fff;
      text-decoration: none;
      background-color: #0d6efd
    }

    .dropdown-item.disabled,
    .dropdown-item:disabled {
      color: #adb5bd;
      pointer-events: none;
      background-color: transparent
    }

    .dropdown-menu.show {
      display: block
    }

    .dropdown-header {
      display: block;
      padding: .5rem 1rem;
      margin-bottom: 0;
      font-size: .875rem;
      color: #6c757d;
      white-space: nowrap
    }

    .dropdown-item-text {
      display: block;
      padding: .25rem 1rem;
      color: #212529
    }

    .dropdown-menu-dark {
      color: #dee2e6;
      background-color: #343a40;
      border-color: rgba(0, 0, 0, 0.15)
    }

    .dropdown-menu-dark .dropdown-item {
      color: #dee2e6
    }

    .dropdown-menu-dark .dropdown-item:focus,
    .dropdown-menu-dark .dropdown-item:hover {
      color: #fff;
      background-color: rgba(255, 255, 255, 0.15)
    }

    .dropdown-menu-dark .dropdown-item.active,
    .dropdown-menu-dark .dropdown-item:active {
      color: #fff;
      background-color: #0d6efd
    }

    .dropdown-menu-dark .dropdown-item.disabled,
    .dropdown-menu-dark .dropdown-item:disabled {
      color: #adb5bd
    }

    .dropdown-menu-dark .dropdown-divider {
      border-color: rgba(0, 0, 0, 0.15)
    }

    .dropdown-menu-dark .dropdown-item-text {
      color: #dee2e6
    }

    .dropdown-menu-dark .dropdown-header {
      color: #adb5bd
    }

    .btn-group,
    .btn-group-vertical {
      position: relative;
      display: inline-flex;
      vertical-align: middle
    }

    .btn-group-vertical>.btn,
    .btn-group>.btn {
      position: relative;
      flex: 1 1 auto
    }

    .btn-group-vertical>.btn-check:checked+.btn,
    .btn-group-vertical>.btn-check:focus+.btn,
    .btn-group-vertical>.btn.active,
    .btn-group-vertical>.btn:active,
    .btn-group-vertical>.btn:focus,
    .btn-group-vertical>.btn:hover,
    .btn-group>.btn-check:checked+.btn,
    .btn-group>.btn-check:focus+.btn,
    .btn-group>.btn.active,
    .btn-group>.btn:active,
    .btn-group>.btn:focus,
    .btn-group>.btn:hover {
      z-index: 1
    }

    .btn-toolbar {
      display: flex;
      flex-wrap: wrap;
      justify-content: flex-start
    }

    .btn-toolbar .input-group {
      width: auto
    }

    .btn-group>.btn-group:not(:first-child),
    .btn-group>.btn:not(:first-child) {
      margin-left: -1px
    }

    .btn-group>.btn-group:not(:last-child)>.btn,
    .btn-group>.btn:not(:last-child):not(.dropdown-toggle) {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0
    }

    .btn-group>.btn-group:not(:first-child)>.btn,
    .btn-group>.btn:nth-child(n+3),
    .btn-group>:not(.btn-check)+.btn {
      border-top-left-radius: 0;
      border-bottom-left-radius: 0
    }

    .dropdown-toggle-split {
      padding-right: .5625rem;
      padding-left: .5625rem
    }

    .dropdown-toggle-split::after,
    .dropend .dropdown-toggle-split::after,
    .dropup .dropdown-toggle-split::after {
      margin-left: 0
    }

    .dropstart .dropdown-toggle-split::before {
      margin-right: 0
    }

    .btn-group-sm>.btn+.dropdown-toggle-split,
    .btn-sm+.dropdown-toggle-split {
      padding-right: .375rem;
      padding-left: .375rem
    }

    .btn-group-lg>.btn+.dropdown-toggle-split,
    .btn-lg+.dropdown-toggle-split {
      padding-right: .75rem;
      padding-left: .75rem
    }

    .btn-group-vertical {
      flex-direction: column;
      align-items: flex-start;
      justify-content: center
    }

    .btn-group-vertical>.btn,
    .btn-group-vertical>.btn-group {
      width: 100%
    }

    .btn-group-vertical>.btn-group:not(:first-child),
    .btn-group-vertical>.btn:not(:first-child) {
      margin-top: -1px
    }

    .btn-group-vertical>.btn-group:not(:last-child)>.btn,
    .btn-group-vertical>.btn:not(:last-child):not(.dropdown-toggle) {
      border-bottom-right-radius: 0;
      border-bottom-left-radius: 0
    }

    .btn-group-vertical>.btn-group:not(:first-child)>.btn,
    .btn-group-vertical>.btn~.btn {
      border-top-left-radius: 0;
      border-top-right-radius: 0
    }

    .nav {
      display: flex;
      flex-wrap: wrap;
      padding-left: 0;
      margin-bottom: 0;
      list-style: none
    }

    .nav-link {
      display: block;
      padding: .5rem 1rem;
      color: #0d6efd;
      text-decoration: none;
      transition: color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out
    }

    @media (prefers-reduced-motion: reduce) {
      .nav-link {
        transition: none
      }
    }

    .nav-link:focus,
    .nav-link:hover {
      color: #0a58ca
    }

    .nav-link.disabled {
      color: #6c757d;
      pointer-events: none;
      cursor: default
    }

    .nav-tabs {
      border-bottom: 1px solid #dee2e6
    }

    .nav-tabs .nav-link {
      margin-bottom: -1px;
      background: 0 0;
      border: 1px solid transparent;
      border-top-left-radius: .25rem;
      border-top-right-radius: .25rem
    }

    .nav-tabs .nav-link:focus,
    .nav-tabs .nav-link:hover {
      border-color: #e9ecef #e9ecef #dee2e6;
      isolation: isolate
    }

    .nav-tabs .nav-link.disabled {
      color: #6c757d;
      background-color: transparent;
      border-color: transparent
    }

    .nav-tabs .nav-item.show .nav-link,
    .nav-tabs .nav-link.active {
      color: #495057;
      background-color: #fff;
      border-color: #dee2e6 #dee2e6 #fff
    }

    .nav-tabs .dropdown-menu {
      margin-top: -1px;
      border-top-left-radius: 0;
      border-top-right-radius: 0
    }

    .nav-pills .nav-link {
      background: 0 0;
      border: 0;
      border-radius: .25rem
    }

    .nav-pills .nav-link.active,
    .nav-pills .show>.nav-link {
      color: #fff;
      background-color: #0d6efd
    }

    .nav-fill .nav-item,
    .nav-fill>.nav-link {
      flex: 1 1 auto;
      text-align: center
    }

    .nav-justified .nav-item,
    .nav-justified>.nav-link {
      flex-basis: 0;
      flex-grow: 1;
      text-align: center
    }

    .nav-fill .nav-item .nav-link,
    .nav-justified .nav-item .nav-link {
      width: 100%
    }

    .tab-content>.tab-pane {
      display: none
    }

    .tab-content>.active {
      display: block
    }

    .navbar {
      position: relative;
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      justify-content: space-between;
      padding-top: .5rem;
      padding-bottom: .5rem
    }

    .navbar>.container,
    .navbar>.container-fluid,
    .navbar>.container-lg,
    .navbar>.container-md,
    .navbar>.container-sm,
    .navbar>.container-xl,
    .navbar>.container-xxl {
      display: flex;
      flex-wrap: inherit;
      align-items: center;
      justify-content: space-between
    }

    .navbar-brand {
      padding-top: .3125rem;
      padding-bottom: .3125rem;
      margin-right: 1rem;
      font-size: 1.25rem;
      text-decoration: none;
      white-space: nowrap
    }

    .navbar-nav {
      display: flex;
      flex-direction: column;
      padding-left: 0;
      margin-bottom: 0;
      list-style: none
    }

    .navbar-nav .nav-link {
      padding-right: 0;
      padding-left: 0
    }

    .navbar-nav .dropdown-menu {
      position: static
    }

    .navbar-text {
      padding-top: .5rem;
      padding-bottom: .5rem
    }

    .navbar-collapse {
      flex-basis: 100%;
      flex-grow: 1;
      align-items: center
    }

    .navbar-toggler {
      padding: .25rem .75rem;
      font-size: 1.25rem;
      line-height: 1;
      background-color: transparent;
      border: 1px solid transparent;
      border-radius: .25rem;
      transition: box-shadow .15s ease-in-out
    }

    @media (prefers-reduced-motion: reduce) {
      .navbar-toggler {
        transition: none
      }
    }

    .navbar-toggler:hover {
      text-decoration: none
    }

    .navbar-toggler:focus {
      text-decoration: none;
      outline: 0;
      box-shadow: 0 0 0 .25rem
    }

    .navbar-toggler-icon {
      display: inline-block;
      width: 1.5em;
      height: 1.5em;
      vertical-align: middle;
      background-repeat: no-repeat;
      background-position: center;
      background-size: 100%
    }

    .navbar-nav-scroll {
      max-height: var(--bs-scroll-height, 75vh);
      overflow-y: auto
    }

    @media (min-width: 576px) {
      .navbar-expand-sm {
        flex-wrap: nowrap;
        justify-content: flex-start
      }

      .navbar-expand-sm .navbar-nav {
        flex-direction: row
      }

      .navbar-expand-sm .navbar-nav .dropdown-menu {
        position: absolute
      }

      .navbar-expand-sm .navbar-nav .nav-link {
        padding-right: .5rem;
        padding-left: .5rem
      }

      .navbar-expand-sm .navbar-nav-scroll {
        overflow: visible
      }

      .navbar-expand-sm .navbar-collapse {
        display: flex !important;
        flex-basis: auto
      }

      .navbar-expand-sm .navbar-toggler {
        display: none
      }
    }

    @media (min-width: 768px) {
      .navbar-expand-md {
        flex-wrap: nowrap;
        justify-content: flex-start
      }

      .navbar-expand-md .navbar-nav {
        flex-direction: row
      }

      .navbar-expand-md .navbar-nav .dropdown-menu {
        position: absolute
      }

      .navbar-expand-md .navbar-nav .nav-link {
        padding-right: .5rem;
        padding-left: .5rem
      }

      .navbar-expand-md .navbar-nav-scroll {
        overflow: visible
      }

      .navbar-expand-md .navbar-collapse {
        display: flex !important;
        flex-basis: auto
      }

      .navbar-expand-md .navbar-toggler {
        display: none
      }
    }

    @media (min-width: 992px) {
      .navbar-expand-lg {
        flex-wrap: nowrap;
        justify-content: flex-start
      }

      .navbar-expand-lg .navbar-nav {
        flex-direction: row
      }

      .navbar-expand-lg .navbar-nav .dropdown-menu {
        position: absolute
      }

      .navbar-expand-lg .navbar-nav .nav-link {
        padding-right: .5rem;
        padding-left: .5rem
      }

      .navbar-expand-lg .navbar-nav-scroll {
        overflow: visible
      }

      .navbar-expand-lg .navbar-collapse {
        display: flex !important;
        flex-basis: auto
      }

      .navbar-expand-lg .navbar-toggler {
        display: none
      }
    }

    @media (min-width: 1200px) {
      .navbar-expand-xl {
        flex-wrap: nowrap;
        justify-content: flex-start
      }

      .navbar-expand-xl .navbar-nav {
        flex-direction: row
      }

      .navbar-expand-xl .navbar-nav .dropdown-menu {
        position: absolute
      }

      .navbar-expand-xl .navbar-nav .nav-link {
        padding-right: .5rem;
        padding-left: .5rem
      }

      .navbar-expand-xl .navbar-nav-scroll {
        overflow: visible
      }

      .navbar-expand-xl .navbar-collapse {
        display: flex !important;
        flex-basis: auto
      }

      .navbar-expand-xl .navbar-toggler {
        display: none
      }
    }

    @media (min-width: 1400px) {
      .navbar-expand-xxl {
        flex-wrap: nowrap;
        justify-content: flex-start
      }

      .navbar-expand-xxl .navbar-nav {
        flex-direction: row
      }

      .navbar-expand-xxl .navbar-nav .dropdown-menu {
        position: absolute
      }

      .navbar-expand-xxl .navbar-nav .nav-link {
        padding-right: .5rem;
        padding-left: .5rem
      }

      .navbar-expand-xxl .navbar-nav-scroll {
        overflow: visible
      }

      .navbar-expand-xxl .navbar-collapse {
        display: flex !important;
        flex-basis: auto
      }

      .navbar-expand-xxl .navbar-toggler {
        display: none
      }
    }

    .navbar-expand {
      flex-wrap: nowrap;
      justify-content: flex-start
    }

    .navbar-expand .navbar-nav {
      flex-direction: row
    }

    .navbar-expand .navbar-nav .dropdown-menu {
      position: absolute
    }

    .navbar-expand .navbar-nav .nav-link {
      padding-right: .5rem;
      padding-left: .5rem
    }

    .navbar-expand .navbar-nav-scroll {
      overflow: visible
    }

    .navbar-expand .navbar-collapse {
      display: flex !important;
      flex-basis: auto
    }

    .navbar-expand .navbar-toggler {
      display: none
    }

    .navbar-light .navbar-brand {
      color: rgba(0, 0, 0, 0.9)
    }

    .navbar-light .navbar-brand:focus,
    .navbar-light .navbar-brand:hover {
      color: rgba(0, 0, 0, 0.9)
    }

    .navbar-light .navbar-nav .nav-link {
      color: rgba(0, 0, 0, 0.55)
    }

    .navbar-light .navbar-nav .nav-link:focus,
    .navbar-light .navbar-nav .nav-link:hover {
      color: rgba(0, 0, 0, 0.7)
    }

    .navbar-light .navbar-nav .nav-link.disabled {
      color: rgba(0, 0, 0, 0.3)
    }

    .navbar-light .navbar-nav .nav-link.active,
    .navbar-light .navbar-nav .show>.nav-link {
      color: rgba(0, 0, 0, 0.9)
    }

    .navbar-light .navbar-toggler {
      color: rgba(0, 0, 0, 0.55);
      border-color: rgba(0, 0, 0, 0.1)
    }

    .navbar-light .navbar-toggler-icon {
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%280, 0, 0, 0.55%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e")
    }

    .navbar-light .navbar-text {
      color: rgba(0, 0, 0, 0.55)
    }

    .navbar-light .navbar-text a,
    .navbar-light .navbar-text a:focus,
    .navbar-light .navbar-text a:hover {
      color: rgba(0, 0, 0, 0.9)
    }

    .navbar-dark .navbar-brand {
      color: #fff
    }

    .navbar-dark .navbar-brand:focus,
    .navbar-dark .navbar-brand:hover {
      color: #fff
    }

    .navbar-dark .navbar-nav .nav-link {
      color: rgba(255, 255, 255, 0.55)
    }

    .navbar-dark .navbar-nav .nav-link:focus,
    .navbar-dark .navbar-nav .nav-link:hover {
      color: rgba(255, 255, 255, 0.75)
    }

    .navbar-dark .navbar-nav .nav-link.disabled {
      color: rgba(255, 255, 255, 0.25)
    }

    .navbar-dark .navbar-nav .nav-link.active,
    .navbar-dark .navbar-nav .show>.nav-link {
      color: #fff
    }

    .navbar-dark .navbar-toggler {
      color: rgba(255, 255, 255, 0.55);
      border-color: rgba(255, 255, 255, 0.1)
    }

    .navbar-dark .navbar-toggler-icon {
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%28255, 255, 255, 0.55%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e")
    }

    .navbar-dark .navbar-text {
      color: rgba(255, 255, 255, 0.55)
    }

    .navbar-dark .navbar-text a,
    .navbar-dark .navbar-text a:focus,
    .navbar-dark .navbar-text a:hover {
      color: #fff
    }

    .card {
      position: relative;
      display: flex;
      flex-direction: column;
      min-width: 0;
      word-wrap: break-word;
      background-color: #fff;
      background-clip: border-box;
      border: 1px solid rgba(0, 0, 0, 0.125);
      border-radius: .25rem
    }

    .card>hr {
      margin-right: 0;
      margin-left: 0
    }

    .card>.list-group {
      border-top: inherit;
      border-bottom: inherit
    }

    .card>.list-group:first-child {
      border-top-width: 0;
      border-top-left-radius: calc(.25rem - 1px);
      border-top-right-radius: calc(.25rem - 1px)
    }

    .card>.list-group:last-child {
      border-bottom-width: 0;
      border-bottom-right-radius: calc(.25rem - 1px);
      border-bottom-left-radius: calc(.25rem - 1px)
    }

    .card>.card-header+.list-group,
    .card>.list-group+.card-footer {
      border-top: 0
    }

    .card-body {
      flex: 1 1 auto;
      padding: 1rem 1rem
    }

    .card-title {
      margin-bottom: .5rem
    }

    .card-subtitle {
      margin-top: -.25rem;
      margin-bottom: 0
    }

    .card-text:last-child {
      margin-bottom: 0
    }

    .card-link:hover {
      text-decoration: none
    }

    .card-link+.card-link {
      margin-left: 1rem
    }

    .card-header {
      padding: .5rem 1rem;
      margin-bottom: 0;
      background-color: rgba(0, 0, 0, 0.03);
      border-bottom: 1px solid rgba(0, 0, 0, 0.125)
    }

    .card-header:first-child {
      border-radius: calc(.25rem - 1px) calc(.25rem - 1px) 0 0
    }

    .card-footer {
      padding: .5rem 1rem;
      background-color: rgba(0, 0, 0, 0.03);
      border-top: 1px solid rgba(0, 0, 0, 0.125)
    }

    .card-footer:last-child {
      border-radius: 0 0 calc(.25rem - 1px) calc(.25rem - 1px)
    }

    .card-header-tabs {
      margin-right: -.5rem;
      margin-bottom: -.5rem;
      margin-left: -.5rem;
      border-bottom: 0
    }

    .card-header-pills {
      margin-right: -.5rem;
      margin-left: -.5rem
    }

    .card-img-overlay {
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      padding: 1rem;
      border-radius: calc(.25rem - 1px)
    }

    .card-img,
    .card-img-bottom,
    .card-img-top {
      width: 100%
    }

    .card-img,
    .card-img-top {
      border-top-left-radius: calc(.25rem - 1px);
      border-top-right-radius: calc(.25rem - 1px)
    }

    .card-img,
    .card-img-bottom {
      border-bottom-right-radius: calc(.25rem - 1px);
      border-bottom-left-radius: calc(.25rem - 1px)
    }

    .card-group>.card {
      margin-bottom: .75rem
    }

    @media (min-width: 576px) {
      .card-group {
        display: flex;
        flex-flow: row wrap
      }

      .card-group>.card {
        flex: 1 0 0%;
        margin-bottom: 0
      }

      .card-group>.card+.card {
        margin-left: 0;
        border-left: 0
      }

      .card-group>.card:not(:last-child) {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0
      }

      .card-group>.card:not(:last-child) .card-header,
      .card-group>.card:not(:last-child) .card-img-top {
        border-top-right-radius: 0
      }

      .card-group>.card:not(:last-child) .card-footer,
      .card-group>.card:not(:last-child) .card-img-bottom {
        border-bottom-right-radius: 0
      }

      .card-group>.card:not(:first-child) {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0
      }

      .card-group>.card:not(:first-child) .card-header,
      .card-group>.card:not(:first-child) .card-img-top {
        border-top-left-radius: 0
      }

      .card-group>.card:not(:first-child) .card-footer,
      .card-group>.card:not(:first-child) .card-img-bottom {
        border-bottom-left-radius: 0
      }
    }

    .accordion-button {
      position: relative;
      display: flex;
      align-items: center;
      width: 100%;
      padding: 1rem 1.25rem;
      font-size: 1rem;
      color: #212529;
      text-align: left;
      background-color: #fff;
      border: 0;
      border-radius: 0;
      overflow-anchor: none;
      transition: color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out, border-radius .15s ease
    }

    @media (prefers-reduced-motion: reduce) {
      .accordion-button {
        transition: none
      }
    }

    .accordion-button:not(.collapsed) {
      color: #0c63e4;
      background-color: #e7f1ff;
      box-shadow: inset 0 -1px 0 rgba(0, 0, 0, 0.125)
    }

    .accordion-button:not(.collapsed)::after {
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%230c63e4'%3e%3cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e");
      transform: rotate(-180deg)
    }

    .accordion-button::after {
      flex-shrink: 0;
      width: 1.25rem;
      height: 1.25rem;
      margin-left: auto;
      content: "";
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23212529'%3e%3cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e");
      background-repeat: no-repeat;
      background-size: 1.25rem;
      transition: transform .2s ease-in-out
    }

    @media (prefers-reduced-motion: reduce) {
      .accordion-button::after {
        transition: none
      }
    }

    .accordion-button:hover {
      z-index: 2
    }

    .accordion-button:focus {
      z-index: 3;
      border-color: #86b7fe;
      outline: 0;
      box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25)
    }

    .accordion-header {
      margin-bottom: 0
    }

    .accordion-item {
      background-color: #fff;
      border: 1px solid rgba(0, 0, 0, 0.125)
    }

    .accordion-item:first-of-type {
      border-top-left-radius: .25rem;
      border-top-right-radius: .25rem
    }

    .accordion-item:first-of-type .accordion-button {
      border-top-left-radius: calc(.25rem - 1px);
      border-top-right-radius: calc(.25rem - 1px)
    }

    .accordion-item:not(:first-of-type) {
      border-top: 0
    }

    .accordion-item:last-of-type {
      border-bottom-right-radius: .25rem;
      border-bottom-left-radius: .25rem
    }

    .accordion-item:last-of-type .accordion-button.collapsed {
      border-bottom-right-radius: calc(.25rem - 1px);
      border-bottom-left-radius: calc(.25rem - 1px)
    }

    .accordion-item:last-of-type .accordion-collapse {
      border-bottom-right-radius: .25rem;
      border-bottom-left-radius: .25rem
    }

    .accordion-body {
      padding: 1rem 1.25rem
    }

    .accordion-flush .accordion-collapse {
      border-width: 0
    }

    .accordion-flush .accordion-item {
      border-right: 0;
      border-left: 0;
      border-radius: 0
    }

    .accordion-flush .accordion-item:first-child {
      border-top: 0
    }

    .accordion-flush .accordion-item:last-child {
      border-bottom: 0
    }

    .accordion-flush .accordion-item .accordion-button {
      border-radius: 0
    }

    .breadcrumb {
      display: flex;
      flex-wrap: wrap;
      padding: 0 0;
      margin-bottom: 1rem;
      list-style: none
    }

    .breadcrumb-item+.breadcrumb-item {
      padding-left: .5rem
    }

    .breadcrumb-item+.breadcrumb-item::before {
      float: left;
      padding-right: .5rem;
      color: #6c757d;
      content: var(--bs-breadcrumb-divider, "/")
    }

    .breadcrumb-item.active {
      color: #6c757d
    }

    .pagination {
      display: flex;
      padding-left: 0;
      list-style: none
    }

    .page-link {
      position: relative;
      display: block;
      color: #0d6efd;
      text-decoration: none;
      background-color: #fff;
      border: 1px solid #dee2e6;
      transition: color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out
    }

    @media (prefers-reduced-motion: reduce) {
      .page-link {
        transition: none
      }
    }

    .page-link:hover {
      z-index: 2;
      color: #0a58ca;
      background-color: #e9ecef;
      border-color: #dee2e6
    }

    .page-link:focus {
      z-index: 3;
      color: #0a58ca;
      background-color: #e9ecef;
      outline: 0;
      box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25)
    }

    .page-item:not(:first-child) .page-link {
      margin-left: -1px
    }

    .page-item.active .page-link {
      z-index: 3;
      color: #fff;
      background-color: #0d6efd;
      border-color: #0d6efd
    }

    .page-item.disabled .page-link {
      color: #6c757d;
      pointer-events: none;
      background-color: #fff;
      border-color: #dee2e6
    }

    .page-link {
      padding: .375rem .75rem
    }

    .page-item:first-child .page-link {
      border-top-left-radius: .25rem;
      border-bottom-left-radius: .25rem
    }

    .page-item:last-child .page-link {
      border-top-right-radius: .25rem;
      border-bottom-right-radius: .25rem
    }

    .pagination-lg .page-link {
      padding: .75rem 1.5rem;
      font-size: 1.25rem
    }

    .pagination-lg .page-item:first-child .page-link {
      border-top-left-radius: .3rem;
      border-bottom-left-radius: .3rem
    }

    .pagination-lg .page-item:last-child .page-link {
      border-top-right-radius: .3rem;
      border-bottom-right-radius: .3rem
    }

    .pagination-sm .page-link {
      padding: .25rem .5rem;
      font-size: .875rem
    }

    .pagination-sm .page-item:first-child .page-link {
      border-top-left-radius: .2rem;
      border-bottom-left-radius: .2rem
    }

    .pagination-sm .page-item:last-child .page-link {
      border-top-right-radius: .2rem;
      border-bottom-right-radius: .2rem
    }

    .badge {
      display: inline-block;
      padding: .35em .65em;
      font-size: .75em;
      font-weight: 700;
      line-height: 1;
      color: #fff;
      text-align: center;
      white-space: nowrap;
      vertical-align: baseline;
      border-radius: .25rem
    }

    .badge:empty {
      display: none
    }

    .btn .badge {
      position: relative;
      top: -1px
    }

    .alert {
      position: relative;
      padding: 1rem 1rem;
      margin-bottom: 1rem;
      border: 1px solid transparent;
      border-radius: .25rem
    }

    .alert-heading {
      color: inherit
    }

    .alert-link {
      font-weight: 700
    }

    .alert-dismissible {
      padding-right: 3rem
    }

    .alert-dismissible .btn-close {
      position: absolute;
      top: 0;
      right: 0;
      z-index: 2;
      padding: 1.25rem 1rem
    }

    .alert-primary {
      color: #084298;
      background-color: #cfe2ff;
      border-color: #b6d4fe
    }

    .alert-primary .alert-link {
      color: #06357a
    }

    .alert-secondary {
      color: #41464b;
      background-color: #e2e3e5;
      border-color: #d3d6d8
    }

    .alert-secondary .alert-link {
      color: #34383c
    }

    .alert-success {
      color: #0f5132;
      background-color: #d1e7dd;
      border-color: #badbcc
    }

    .alert-success .alert-link {
      color: #0c4128
    }

    .alert-info {
      color: #055160;
      background-color: #cff4fc;
      border-color: #b6effb
    }

    .alert-info .alert-link {
      color: #04414d
    }

    .alert-warning {
      color: #664d03;
      background-color: #fff3cd;
      border-color: #ffecb5
    }

    .alert-warning .alert-link {
      color: #523e02
    }

    .alert-danger {
      color: #842029;
      background-color: #f8d7da;
      border-color: #f5c2c7
    }

    .alert-danger .alert-link {
      color: #6a1a21
    }

    .alert-light {
      color: #636464;
      background-color: #fefefe;
      border-color: #fdfdfe
    }

    .alert-light .alert-link {
      color: #4f5050
    }

    .alert-dark {
      color: #141619;
      background-color: #d3d3d4;
      border-color: #bcbebf
    }

    .alert-dark .alert-link {
      color: #101214
    }

    @-webkit-keyframes progress-bar-stripes {
      0% {
        background-position-x: 1rem
      }
    }

    @keyframes progress-bar-stripes {
      0% {
        background-position-x: 1rem
      }
    }

    .progress {
      display: flex;
      height: 1rem;
      overflow: hidden;
      font-size: .75rem;
      background-color: #e9ecef;
      border-radius: .25rem
    }

    .progress-bar {
      display: flex;
      flex-direction: column;
      justify-content: center;
      overflow: hidden;
      color: #fff;
      text-align: center;
      white-space: nowrap;
      background-color: #0d6efd;
      transition: width .6s ease
    }

    @media (prefers-reduced-motion: reduce) {
      .progress-bar {
        transition: none
      }
    }

    .progress-bar-striped {
      background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);
      background-size: 1rem 1rem
    }

    .progress-bar-animated {
      -webkit-animation: 1s linear infinite progress-bar-stripes;
      animation: 1s linear infinite progress-bar-stripes
    }

    @media (prefers-reduced-motion: reduce) {
      .progress-bar-animated {
        -webkit-animation: none;
        animation: none
      }
    }

    .list-group {
      display: flex;
      flex-direction: column;
      padding-left: 0;
      margin-bottom: 0;
      border-radius: .25rem
    }

    .list-group-numbered {
      list-style-type: none;
      counter-reset: section
    }

    .list-group-numbered>li::before {
      content: counters(section, ".") ". ";
      counter-increment: section
    }

    .list-group-item-action {
      width: 100%;
      color: #495057;
      text-align: inherit
    }

    .list-group-item-action:focus,
    .list-group-item-action:hover {
      z-index: 1;
      color: #495057;
      text-decoration: none;
      background-color: #f8f9fa
    }

    .list-group-item-action:active {
      color: #212529;
      background-color: #e9ecef
    }

    .list-group-item {
      position: relative;
      display: block;
      padding: .5rem 1rem;
      color: #212529;
      text-decoration: none;
      background-color: #fff;
      border: 1px solid rgba(0, 0, 0, 0.125)
    }

    .list-group-item:first-child {
      border-top-left-radius: inherit;
      border-top-right-radius: inherit
    }

    .list-group-item:last-child {
      border-bottom-right-radius: inherit;
      border-bottom-left-radius: inherit
    }

    .list-group-item.disabled,
    .list-group-item:disabled {
      color: #6c757d;
      pointer-events: none;
      background-color: #fff
    }

    .list-group-item.active {
      z-index: 2;
      color: #fff;
      background-color: #0d6efd;
      border-color: #0d6efd
    }

    .list-group-item+.list-group-item {
      border-top-width: 0
    }

    .list-group-item+.list-group-item.active {
      margin-top: -1px;
      border-top-width: 1px
    }

    .list-group-horizontal {
      flex-direction: row
    }

    .list-group-horizontal>.list-group-item:first-child {
      border-bottom-left-radius: .25rem;
      border-top-right-radius: 0
    }

    .list-group-horizontal>.list-group-item:last-child {
      border-top-right-radius: .25rem;
      border-bottom-left-radius: 0
    }

    .list-group-horizontal>.list-group-item.active {
      margin-top: 0
    }

    .list-group-horizontal>.list-group-item+.list-group-item {
      border-top-width: 1px;
      border-left-width: 0
    }

    .list-group-horizontal>.list-group-item+.list-group-item.active {
      margin-left: -1px;
      border-left-width: 1px
    }

    @media (min-width: 576px) {
      .list-group-horizontal-sm {
        flex-direction: row
      }

      .list-group-horizontal-sm>.list-group-item:first-child {
        border-bottom-left-radius: .25rem;
        border-top-right-radius: 0
      }

      .list-group-horizontal-sm>.list-group-item:last-child {
        border-top-right-radius: .25rem;
        border-bottom-left-radius: 0
      }

      .list-group-horizontal-sm>.list-group-item.active {
        margin-top: 0
      }

      .list-group-horizontal-sm>.list-group-item+.list-group-item {
        border-top-width: 1px;
        border-left-width: 0
      }

      .list-group-horizontal-sm>.list-group-item+.list-group-item.active {
        margin-left: -1px;
        border-left-width: 1px
      }
    }

    @media (min-width: 768px) {
      .list-group-horizontal-md {
        flex-direction: row
      }

      .list-group-horizontal-md>.list-group-item:first-child {
        border-bottom-left-radius: .25rem;
        border-top-right-radius: 0
      }

      .list-group-horizontal-md>.list-group-item:last-child {
        border-top-right-radius: .25rem;
        border-bottom-left-radius: 0
      }

      .list-group-horizontal-md>.list-group-item.active {
        margin-top: 0
      }

      .list-group-horizontal-md>.list-group-item+.list-group-item {
        border-top-width: 1px;
        border-left-width: 0
      }

      .list-group-horizontal-md>.list-group-item+.list-group-item.active {
        margin-left: -1px;
        border-left-width: 1px
      }
    }

    @media (min-width: 992px) {
      .list-group-horizontal-lg {
        flex-direction: row
      }

      .list-group-horizontal-lg>.list-group-item:first-child {
        border-bottom-left-radius: .25rem;
        border-top-right-radius: 0
      }

      .list-group-horizontal-lg>.list-group-item:last-child {
        border-top-right-radius: .25rem;
        border-bottom-left-radius: 0
      }

      .list-group-horizontal-lg>.list-group-item.active {
        margin-top: 0
      }

      .list-group-horizontal-lg>.list-group-item+.list-group-item {
        border-top-width: 1px;
        border-left-width: 0
      }

      .list-group-horizontal-lg>.list-group-item+.list-group-item.active {
        margin-left: -1px;
        border-left-width: 1px
      }
    }

    @media (min-width: 1200px) {
      .list-group-horizontal-xl {
        flex-direction: row
      }

      .list-group-horizontal-xl>.list-group-item:first-child {
        border-bottom-left-radius: .25rem;
        border-top-right-radius: 0
      }

      .list-group-horizontal-xl>.list-group-item:last-child {
        border-top-right-radius: .25rem;
        border-bottom-left-radius: 0
      }

      .list-group-horizontal-xl>.list-group-item.active {
        margin-top: 0
      }

      .list-group-horizontal-xl>.list-group-item+.list-group-item {
        border-top-width: 1px;
        border-left-width: 0
      }

      .list-group-horizontal-xl>.list-group-item+.list-group-item.active {
        margin-left: -1px;
        border-left-width: 1px
      }
    }

    @media (min-width: 1400px) {
      .list-group-horizontal-xxl {
        flex-direction: row
      }

      .list-group-horizontal-xxl>.list-group-item:first-child {
        border-bottom-left-radius: .25rem;
        border-top-right-radius: 0
      }

      .list-group-horizontal-xxl>.list-group-item:last-child {
        border-top-right-radius: .25rem;
        border-bottom-left-radius: 0
      }

      .list-group-horizontal-xxl>.list-group-item.active {
        margin-top: 0
      }

      .list-group-horizontal-xxl>.list-group-item+.list-group-item {
        border-top-width: 1px;
        border-left-width: 0
      }

      .list-group-horizontal-xxl>.list-group-item+.list-group-item.active {
        margin-left: -1px;
        border-left-width: 1px
      }
    }

    .list-group-flush {
      border-radius: 0
    }

    .list-group-flush>.list-group-item {
      border-width: 0 0 1px
    }

    .list-group-flush>.list-group-item:last-child {
      border-bottom-width: 0
    }

    .list-group-item-primary {
      color: #084298;
      background-color: #cfe2ff
    }

    .list-group-item-primary.list-group-item-action:focus,
    .list-group-item-primary.list-group-item-action:hover {
      color: #084298;
      background-color: #bacbe6
    }

    .list-group-item-primary.list-group-item-action.active {
      color: #fff;
      background-color: #084298;
      border-color: #084298
    }

    .list-group-item-secondary {
      color: #41464b;
      background-color: #e2e3e5
    }

    .list-group-item-secondary.list-group-item-action:focus,
    .list-group-item-secondary.list-group-item-action:hover {
      color: #41464b;
      background-color: #cbccce
    }

    .list-group-item-secondary.list-group-item-action.active {
      color: #fff;
      background-color: #41464b;
      border-color: #41464b
    }

    .list-group-item-success {
      color: #0f5132;
      background-color: #d1e7dd
    }

    .list-group-item-success.list-group-item-action:focus,
    .list-group-item-success.list-group-item-action:hover {
      color: #0f5132;
      background-color: #bcd0c7
    }

    .list-group-item-success.list-group-item-action.active {
      color: #fff;
      background-color: #0f5132;
      border-color: #0f5132
    }

    .list-group-item-info {
      color: #055160;
      background-color: #cff4fc
    }

    .list-group-item-info.list-group-item-action:focus,
    .list-group-item-info.list-group-item-action:hover {
      color: #055160;
      background-color: #badce3
    }

    .list-group-item-info.list-group-item-action.active {
      color: #fff;
      background-color: #055160;
      border-color: #055160
    }

    .list-group-item-warning {
      color: #664d03;
      background-color: #fff3cd
    }

    .list-group-item-warning.list-group-item-action:focus,
    .list-group-item-warning.list-group-item-action:hover {
      color: #664d03;
      background-color: #e6dbb9
    }

    .list-group-item-warning.list-group-item-action.active {
      color: #fff;
      background-color: #664d03;
      border-color: #664d03
    }

    .list-group-item-danger {
      color: #842029;
      background-color: #f8d7da
    }

    .list-group-item-danger.list-group-item-action:focus,
    .list-group-item-danger.list-group-item-action:hover {
      color: #842029;
      background-color: #dfc2c4
    }

    .list-group-item-danger.list-group-item-action.active {
      color: #fff;
      background-color: #842029;
      border-color: #842029
    }

    .list-group-item-light {
      color: #636464;
      background-color: #fefefe
    }

    .list-group-item-light.list-group-item-action:focus,
    .list-group-item-light.list-group-item-action:hover {
      color: #636464;
      background-color: #e5e5e5
    }

    .list-group-item-light.list-group-item-action.active {
      color: #fff;
      background-color: #636464;
      border-color: #636464
    }

    .list-group-item-dark {
      color: #141619;
      background-color: #d3d3d4
    }

    .list-group-item-dark.list-group-item-action:focus,
    .list-group-item-dark.list-group-item-action:hover {
      color: #141619;
      background-color: #bebebf
    }

    .list-group-item-dark.list-group-item-action.active {
      color: #fff;
      background-color: #141619;
      border-color: #141619
    }

    .btn-close {
      box-sizing: content-box;
      width: 1em;
      height: 1em;
      padding: .25em .25em;
      color: #000;
      background: transparent url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23000'%3e%3cpath d='M.293.293a1 1 0 011.414 0L8 6.586 14.293.293a1 1 0 111.414 1.414L9.414 8l6.293 6.293a1 1 0 01-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 01-1.414-1.414L6.586 8 .293 1.707a1 1 0 010-1.414z'/%3e%3c/svg%3e") center/1em auto no-repeat;
      border: 0;
      border-radius: .25rem;
      opacity: .5
    }

    .btn-close:hover {
      color: #000;
      text-decoration: none;
      opacity: .75
    }

    .btn-close:focus {
      outline: 0;
      box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
      opacity: 1
    }

    .btn-close.disabled,
    .btn-close:disabled {
      pointer-events: none;
      -webkit-user-select: none;
      -moz-user-select: none;
      user-select: none;
      opacity: .25
    }

    .btn-close-white {
      filter: invert(1) grayscale(100%) brightness(200%)
    }

    .toast {
      width: 350px;
      max-width: 100%;
      font-size: .875rem;
      pointer-events: auto;
      background-color: rgba(255, 255, 255, 0.85);
      background-clip: padding-box;
      border: 1px solid rgba(0, 0, 0, 0.1);
      box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
      border-radius: .25rem
    }

    .toast:not(.showing):not(.show) {
      opacity: 0
    }

    .toast.hide {
      display: none
    }

    .toast-container {
      width: -webkit-max-content;
      width: -moz-max-content;
      width: max-content;
      max-width: 100%;
      pointer-events: none
    }

    .toast-container>:not(:last-child) {
      margin-bottom: .75rem
    }

    .toast-header {
      display: flex;
      align-items: center;
      padding: .5rem .75rem;
      color: #6c757d;
      background-color: rgba(255, 255, 255, 0.85);
      background-clip: padding-box;
      border-bottom: 1px solid rgba(0, 0, 0, 0.05);
      border-top-left-radius: calc(.25rem - 1px);
      border-top-right-radius: calc(.25rem - 1px)
    }

    .toast-header .btn-close {
      margin-right: -.375rem;
      margin-left: .75rem
    }

    .toast-body {
      padding: .75rem;
      word-wrap: break-word
    }

    .modal {
      position: fixed;
      top: 0;
      left: 0;
      z-index: 1060;
      display: none;
      width: 100%;
      height: 100%;
      overflow-x: hidden;
      overflow-y: auto;
      outline: 0
    }

    .modal-dialog {
      position: relative;
      width: auto;
      margin: .5rem;
      pointer-events: none
    }

    .modal.fade .modal-dialog {
      transition: transform .3s ease-out;
      transform: translate(0, -50px)
    }

    @media (prefers-reduced-motion: reduce) {
      .modal.fade .modal-dialog {
        transition: none
      }
    }

    .modal.show .modal-dialog {
      transform: none
    }

    .modal.modal-static .modal-dialog {
      transform: scale(1.02)
    }

    .modal-dialog-scrollable {
      height: calc(100% - 1rem)
    }

    .modal-dialog-scrollable .modal-content {
      max-height: 100%;
      overflow: hidden
    }

    .modal-dialog-scrollable .modal-body {
      overflow-y: auto
    }

    .modal-dialog-centered {
      display: flex;
      align-items: center;
      min-height: calc(100% - 1rem)
    }

    .modal-content {
      position: relative;
      display: flex;
      flex-direction: column;
      width: 100%;
      pointer-events: auto;
      background-color: #fff;
      background-clip: padding-box;
      border: 1px solid rgba(0, 0, 0, 0.2);
      border-radius: .3rem;
      outline: 0
    }

    .modal-backdrop {
      position: fixed;
      top: 0;
      left: 0;
      z-index: 1040;
      width: 100vw;
      height: 100vh;
      background-color: #000
    }

    .modal-backdrop.fade {
      opacity: 0
    }

    .modal-backdrop.show {
      opacity: .5
    }

    .modal-header {
      display: flex;
      flex-shrink: 0;
      align-items: center;
      justify-content: space-between;
      padding: 1rem 1rem;
      border-bottom: 1px solid #dee2e6;
      border-top-left-radius: calc(.3rem - 1px);
      border-top-right-radius: calc(.3rem - 1px)
    }

    .modal-header .btn-close {
      padding: .5rem .5rem;
      margin: -.5rem -.5rem -.5rem auto
    }

    .modal-title {
      margin-bottom: 0;
      line-height: 1.5
    }

    .modal-body {
      position: relative;
      flex: 1 1 auto;
      padding: 1rem
    }

    .modal-footer {
      display: flex;
      flex-wrap: wrap;
      flex-shrink: 0;
      align-items: center;
      justify-content: flex-end;
      padding: .75rem;
      border-top: 1px solid #dee2e6;
      border-bottom-right-radius: calc(.3rem - 1px);
      border-bottom-left-radius: calc(.3rem - 1px)
    }

    .modal-footer>* {
      margin: .25rem
    }

    @media (min-width: 576px) {
      .modal-dialog {
        max-width: 500px;
        margin: 1.75rem auto
      }

      .modal-dialog-scrollable {
        height: calc(100% - 3.5rem)
      }

      .modal-dialog-centered {
        min-height: calc(100% - 3.5rem)
      }

      .modal-sm {
        max-width: 300px
      }
    }

    @media (min-width: 992px) {

      .modal-lg,
      .modal-xl {
        max-width: 800px
      }
    }

    @media (min-width: 1200px) {
      .modal-xl {
        max-width: 1140px
      }
    }

    .modal-fullscreen {
      width: 100vw;
      max-width: none;
      height: 100%;
      margin: 0
    }

    .modal-fullscreen .modal-content {
      height: 100%;
      border: 0;
      border-radius: 0
    }

    .modal-fullscreen .modal-header {
      border-radius: 0
    }

    .modal-fullscreen .modal-body {
      overflow-y: auto
    }

    .modal-fullscreen .modal-footer {
      border-radius: 0
    }

    @media (max-width: 575.98px) {
      .modal-fullscreen-sm-down {
        width: 100vw;
        max-width: none;
        height: 100%;
        margin: 0
      }

      .modal-fullscreen-sm-down .modal-content {
        height: 100%;
        border: 0;
        border-radius: 0
      }

      .modal-fullscreen-sm-down .modal-header {
        border-radius: 0
      }

      .modal-fullscreen-sm-down .modal-body {
        overflow-y: auto
      }

      .modal-fullscreen-sm-down .modal-footer {
        border-radius: 0
      }
    }

    @media (max-width: 767.98px) {
      .modal-fullscreen-md-down {
        width: 100vw;
        max-width: none;
        height: 100%;
        margin: 0
      }

      .modal-fullscreen-md-down .modal-content {
        height: 100%;
        border: 0;
        border-radius: 0
      }

      .modal-fullscreen-md-down .modal-header {
        border-radius: 0
      }

      .modal-fullscreen-md-down .modal-body {
        overflow-y: auto
      }

      .modal-fullscreen-md-down .modal-footer {
        border-radius: 0
      }
    }

    @media (max-width: 991.98px) {
      .modal-fullscreen-lg-down {
        width: 100vw;
        max-width: none;
        height: 100%;
        margin: 0
      }

      .modal-fullscreen-lg-down .modal-content {
        height: 100%;
        border: 0;
        border-radius: 0
      }

      .modal-fullscreen-lg-down .modal-header {
        border-radius: 0
      }

      .modal-fullscreen-lg-down .modal-body {
        overflow-y: auto
      }

      .modal-fullscreen-lg-down .modal-footer {
        border-radius: 0
      }
    }

    @media (max-width: 1199.98px) {
      .modal-fullscreen-xl-down {
        width: 100vw;
        max-width: none;
        height: 100%;
        margin: 0
      }

      .modal-fullscreen-xl-down .modal-content {
        height: 100%;
        border: 0;
        border-radius: 0
      }

      .modal-fullscreen-xl-down .modal-header {
        border-radius: 0
      }

      .modal-fullscreen-xl-down .modal-body {
        overflow-y: auto
      }

      .modal-fullscreen-xl-down .modal-footer {
        border-radius: 0
      }
    }

    @media (max-width: 1399.98px) {
      .modal-fullscreen-xxl-down {
        width: 100vw;
        max-width: none;
        height: 100%;
        margin: 0
      }

      .modal-fullscreen-xxl-down .modal-content {
        height: 100%;
        border: 0;
        border-radius: 0
      }

      .modal-fullscreen-xxl-down .modal-header {
        border-radius: 0
      }

      .modal-fullscreen-xxl-down .modal-body {
        overflow-y: auto
      }

      .modal-fullscreen-xxl-down .modal-footer {
        border-radius: 0
      }
    }

    .tooltip {
      position: absolute;
      z-index: 1080;
      display: block;
      margin: 0;
      font-family: var(--bs-font-sans-serif);
      font-style: normal;
      font-weight: 400;
      line-height: 1.5;
      text-align: left;
      text-align: start;
      text-decoration: none;
      text-shadow: none;
      text-transform: none;
      letter-spacing: normal;
      word-break: normal;
      word-spacing: normal;
      white-space: normal;
      line-break: auto;
      font-size: .875rem;
      word-wrap: break-word;
      opacity: 0
    }

    .tooltip.show {
      opacity: .9
    }

    .tooltip .tooltip-arrow {
      position: absolute;
      display: block;
      width: .8rem;
      height: .4rem
    }

    .tooltip .tooltip-arrow::before {
      position: absolute;
      content: "";
      border-color: transparent;
      border-style: solid
    }

    .bs-tooltip-auto[data-popper-placement^=top],
    .bs-tooltip-top {
      padding: .4rem 0
    }

    .bs-tooltip-auto[data-popper-placement^=top] .tooltip-arrow,
    .bs-tooltip-top .tooltip-arrow {
      bottom: 0
    }

    .bs-tooltip-auto[data-popper-placement^=top] .tooltip-arrow::before,
    .bs-tooltip-top .tooltip-arrow::before {
      top: -1px;
      border-width: .4rem .4rem 0;
      border-top-color: #000
    }

    .bs-tooltip-auto[data-popper-placement^=right],
    .bs-tooltip-end {
      padding: 0 .4rem
    }

    .bs-tooltip-auto[data-popper-placement^=right] .tooltip-arrow,
    .bs-tooltip-end .tooltip-arrow {
      left: 0;
      width: .4rem;
      height: .8rem
    }

    .bs-tooltip-auto[data-popper-placement^=right] .tooltip-arrow::before,
    .bs-tooltip-end .tooltip-arrow::before {
      right: -1px;
      border-width: .4rem .4rem .4rem 0;
      border-right-color: #000
    }

    .bs-tooltip-auto[data-popper-placement^=bottom],
    .bs-tooltip-bottom {
      padding: .4rem 0
    }

    .bs-tooltip-auto[data-popper-placement^=bottom] .tooltip-arrow,
    .bs-tooltip-bottom .tooltip-arrow {
      top: 0
    }

    .bs-tooltip-auto[data-popper-placement^=bottom] .tooltip-arrow::before,
    .bs-tooltip-bottom .tooltip-arrow::before {
      bottom: -1px;
      border-width: 0 .4rem .4rem;
      border-bottom-color: #000
    }

    .bs-tooltip-auto[data-popper-placement^=left],
    .bs-tooltip-start {
      padding: 0 .4rem
    }

    .bs-tooltip-auto[data-popper-placement^=left] .tooltip-arrow,
    .bs-tooltip-start .tooltip-arrow {
      right: 0;
      width: .4rem;
      height: .8rem
    }

    .bs-tooltip-auto[data-popper-placement^=left] .tooltip-arrow::before,
    .bs-tooltip-start .tooltip-arrow::before {
      left: -1px;
      border-width: .4rem 0 .4rem .4rem;
      border-left-color: #000
    }

    .tooltip-inner {
      max-width: 200px;
      padding: .25rem .5rem;
      color: #fff;
      text-align: center;
      background-color: #000;
      border-radius: .25rem
    }

    .popover {
      position: absolute;
      top: 0;
      left: 0;
      z-index: 1070;
      display: block;
      max-width: 276px;
      font-family: var(--bs-font-sans-serif);
      font-style: normal;
      font-weight: 400;
      line-height: 1.5;
      text-align: left;
      text-align: start;
      text-decoration: none;
      text-shadow: none;
      text-transform: none;
      letter-spacing: normal;
      word-break: normal;
      word-spacing: normal;
      white-space: normal;
      line-break: auto;
      font-size: .875rem;
      word-wrap: break-word;
      background-color: #fff;
      background-clip: padding-box;
      border: 1px solid rgba(0, 0, 0, 0.2);
      border-radius: .3rem
    }

    .popover .popover-arrow {
      position: absolute;
      display: block;
      width: 1rem;
      height: .5rem
    }

    .popover .popover-arrow::after,
    .popover .popover-arrow::before {
      position: absolute;
      display: block;
      content: "";
      border-color: transparent;
      border-style: solid
    }

    .bs-popover-auto[data-popper-placement^=top]>.popover-arrow,
    .bs-popover-top>.popover-arrow {
      bottom: calc(-.5rem - 1px)
    }

    .bs-popover-auto[data-popper-placement^=top]>.popover-arrow::before,
    .bs-popover-top>.popover-arrow::before {
      bottom: 0;
      border-width: .5rem .5rem 0;
      border-top-color: rgba(0, 0, 0, 0.25)
    }

    .bs-popover-auto[data-popper-placement^=top]>.popover-arrow::after,
    .bs-popover-top>.popover-arrow::after {
      bottom: 1px;
      border-width: .5rem .5rem 0;
      border-top-color: #fff
    }

    .bs-popover-auto[data-popper-placement^=right]>.popover-arrow,
    .bs-popover-end>.popover-arrow {
      left: calc(-.5rem - 1px);
      width: .5rem;
      height: 1rem
    }

    .bs-popover-auto[data-popper-placement^=right]>.popover-arrow::before,
    .bs-popover-end>.popover-arrow::before {
      left: 0;
      border-width: .5rem .5rem .5rem 0;
      border-right-color: rgba(0, 0, 0, 0.25)
    }

    .bs-popover-auto[data-popper-placement^=right]>.popover-arrow::after,
    .bs-popover-end>.popover-arrow::after {
      left: 1px;
      border-width: .5rem .5rem .5rem 0;
      border-right-color: #fff
    }

    .bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow,
    .bs-popover-bottom>.popover-arrow {
      top: calc(-.5rem - 1px)
    }

    .bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow::before,
    .bs-popover-bottom>.popover-arrow::before {
      top: 0;
      border-width: 0 .5rem .5rem .5rem;
      border-bottom-color: rgba(0, 0, 0, 0.25)
    }

    .bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow::after,
    .bs-popover-bottom>.popover-arrow::after {
      top: 1px;
      border-width: 0 .5rem .5rem .5rem;
      border-bottom-color: #fff
    }

    .bs-popover-auto[data-popper-placement^=bottom] .popover-header::before,
    .bs-popover-bottom .popover-header::before {
      position: absolute;
      top: 0;
      left: 50%;
      display: block;
      width: 1rem;
      margin-left: -.5rem;
      content: "";
      border-bottom: 1px solid #f0f0f0
    }

    .bs-popover-auto[data-popper-placement^=left]>.popover-arrow,
    .bs-popover-start>.popover-arrow {
      right: calc(-.5rem - 1px);
      width: .5rem;
      height: 1rem
    }

    .bs-popover-auto[data-popper-placement^=left]>.popover-arrow::before,
    .bs-popover-start>.popover-arrow::before {
      right: 0;
      border-width: .5rem 0 .5rem .5rem;
      border-left-color: rgba(0, 0, 0, 0.25)
    }

    .bs-popover-auto[data-popper-placement^=left]>.popover-arrow::after,
    .bs-popover-start>.popover-arrow::after {
      right: 1px;
      border-width: .5rem 0 .5rem .5rem;
      border-left-color: #fff
    }

    .popover-header {
      padding: .5rem 1rem;
      margin-bottom: 0;
      font-size: 1rem;
      background-color: #f0f0f0;
      border-bottom: 1px solid rgba(0, 0, 0, 0.2);
      border-top-left-radius: calc(.3rem - 1px);
      border-top-right-radius: calc(.3rem - 1px)
    }

    .popover-header:empty {
      display: none
    }

    .popover-body {
      padding: 1rem 1rem;
      color: #212529
    }

    .carousel {
      position: relative
    }

    .carousel.pointer-event {
      touch-action: pan-y
    }

    .carousel-inner {
      position: relative;
      width: 100%;
      overflow: hidden
    }

    .carousel-inner::after {
      display: block;
      clear: both;
      content: ""
    }

    .carousel-item {
      position: relative;
      display: none;
      float: left;
      width: 100%;
      margin-right: -100%;
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
      transition: transform .6s ease-in-out
    }

    @media (prefers-reduced-motion: reduce) {
      .carousel-item {
        transition: none
      }
    }

    .carousel-item-next,
    .carousel-item-prev,
    .carousel-item.active {
      display: block
    }

    .active.carousel-item-end,
    .carousel-item-next:not(.carousel-item-start) {
      transform: translateX(100%)
    }

    .active.carousel-item-start,
    .carousel-item-prev:not(.carousel-item-end) {
      transform: translateX(-100%)
    }

    .carousel-fade .carousel-item {
      opacity: 0;
      transition-property: opacity;
      transform: none
    }

    .carousel-fade .carousel-item-next.carousel-item-start,
    .carousel-fade .carousel-item-prev.carousel-item-end,
    .carousel-fade .carousel-item.active {
      z-index: 1;
      opacity: 1
    }

    .carousel-fade .active.carousel-item-end,
    .carousel-fade .active.carousel-item-start {
      z-index: 0;
      opacity: 0;
      transition: opacity 0s .6s
    }

    @media (prefers-reduced-motion: reduce) {

      .carousel-fade .active.carousel-item-end,
      .carousel-fade .active.carousel-item-start {
        transition: none
      }
    }

    .carousel-control-next,
    .carousel-control-prev {
      position: absolute;
      top: 0;
      bottom: 0;
      z-index: 1;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 15%;
      padding: 0;
      color: #fff;
      text-align: center;
      background: 0 0;
      border: 0;
      opacity: .5;
      transition: opacity .15s ease
    }

    @media (prefers-reduced-motion: reduce) {

      .carousel-control-next,
      .carousel-control-prev {
        transition: none
      }
    }

    .carousel-control-next:focus,
    .carousel-control-next:hover,
    .carousel-control-prev:focus,
    .carousel-control-prev:hover {
      color: #fff;
      text-decoration: none;
      outline: 0;
      opacity: .9
    }

    .carousel-control-prev {
      left: 0
    }

    .carousel-control-next {
      right: 0
    }

    .carousel-control-next-icon,
    .carousel-control-prev-icon {
      display: inline-block;
      width: 2rem;
      height: 2rem;
      background-repeat: no-repeat;
      background-position: 50%;
      background-size: 100% 100%
    }

    .carousel-control-prev-icon {
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23fff'%3e%3cpath d='M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z'/%3e%3c/svg%3e")
    }

    .carousel-control-next-icon {
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23fff'%3e%3cpath d='M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e")
    }

    .carousel-indicators {
      position: absolute;
      right: 0;
      bottom: 0;
      left: 0;
      z-index: 2;
      display: flex;
      justify-content: center;
      padding: 0;
      margin-right: 15%;
      margin-bottom: 1rem;
      margin-left: 15%;
      list-style: none
    }

    .carousel-indicators [data-bs-target] {
      box-sizing: content-box;
      flex: 0 1 auto;
      width: 30px;
      height: 3px;
      padding: 0;
      margin-right: 3px;
      margin-left: 3px;
      text-indent: -999px;
      cursor: pointer;
      background-color: #fff;
      background-clip: padding-box;
      border: 0;
      border-top: 10px solid transparent;
      border-bottom: 10px solid transparent;
      opacity: .5;
      transition: opacity .6s ease
    }

    @media (prefers-reduced-motion: reduce) {
      .carousel-indicators [data-bs-target] {
        transition: none
      }
    }

    .carousel-indicators .active {
      opacity: 1
    }

    .carousel-caption {
      position: absolute;
      right: 15%;
      bottom: 1.25rem;
      left: 15%;
      padding-top: 1.25rem;
      padding-bottom: 1.25rem;
      color: #fff;
      text-align: center
    }

    .carousel-dark .carousel-control-next-icon,
    .carousel-dark .carousel-control-prev-icon {
      filter: invert(1) grayscale(100)
    }

    .carousel-dark .carousel-indicators [data-bs-target] {
      background-color: #000
    }

    .carousel-dark .carousel-caption {
      color: #000
    }

    @-webkit-keyframes spinner-border {
      to {
        transform: rotate(360deg)
      }
    }

    @keyframes spinner-border {
      to {
        transform: rotate(360deg)
      }
    }

    .spinner-border {
      display: inline-block;
      width: 2rem;
      height: 2rem;
      vertical-align: -.125em;
      border: .25em solid currentColor;
      border-right-color: transparent;
      border-radius: 50%;
      -webkit-animation: .75s linear infinite spinner-border;
      animation: .75s linear infinite spinner-border
    }

    .spinner-border-sm {
      width: 1rem;
      height: 1rem;
      border-width: .2em
    }

    @-webkit-keyframes spinner-grow {
      0% {
        transform: scale(0)
      }

      50% {
        opacity: 1;
        transform: none
      }
    }

    @keyframes spinner-grow {
      0% {
        transform: scale(0)
      }

      50% {
        opacity: 1;
        transform: none
      }
    }

    .spinner-grow {
      display: inline-block;
      width: 2rem;
      height: 2rem;
      vertical-align: -.125em;
      background-color: currentColor;
      border-radius: 50%;
      opacity: 0;
      -webkit-animation: .75s linear infinite spinner-grow;
      animation: .75s linear infinite spinner-grow
    }

    .spinner-grow-sm {
      width: 1rem;
      height: 1rem
    }

    @media (prefers-reduced-motion: reduce) {

      .spinner-border,
      .spinner-grow {
        -webkit-animation-duration: 1.5s;
        animation-duration: 1.5s
      }
    }

    .offcanvas {
      position: fixed;
      bottom: 0;
      z-index: 1050;
      display: flex;
      flex-direction: column;
      max-width: 100%;
      visibility: hidden;
      background-color: #fff;
      background-clip: padding-box;
      outline: 0;
      transition: transform .3s ease-in-out
    }

    @media (prefers-reduced-motion: reduce) {
      .offcanvas {
        transition: none
      }
    }

    .offcanvas-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 1rem 1rem
    }

    .offcanvas-header .btn-close {
      padding: .5rem .5rem;
      margin-top: -.5rem;
      margin-right: -.5rem;
      margin-bottom: -.5rem
    }

    .offcanvas-title {
      margin-bottom: 0;
      line-height: 1.5
    }

    .offcanvas-body {
      flex-grow: 1;
      padding: 1rem 1rem;
      overflow-y: auto
    }

    .offcanvas-start {
      top: 0;
      left: 0;
      width: 400px;
      border-right: 1px solid rgba(0, 0, 0, 0.2);
      transform: translateX(-100%)
    }

    .offcanvas-end {
      top: 0;
      right: 0;
      width: 400px;
      border-left: 1px solid rgba(0, 0, 0, 0.2);
      transform: translateX(100%)
    }

    .offcanvas-top {
      top: 0;
      right: 0;
      left: 0;
      height: 30vh;
      max-height: 100%;
      border-bottom: 1px solid rgba(0, 0, 0, 0.2);
      transform: translateY(-100%)
    }

    .offcanvas-bottom {
      right: 0;
      left: 0;
      height: 30vh;
      max-height: 100%;
      border-top: 1px solid rgba(0, 0, 0, 0.2);
      transform: translateY(100%)
    }

    .offcanvas.show {
      transform: none
    }

    .clearfix::after {
      display: block;
      clear: both;
      content: ""
    }

    .link-primary {
      color: #0d6efd
    }

    .link-primary:focus,
    .link-primary:hover {
      color: #0a58ca
    }

    .link-secondary {
      color: #6c757d
    }

    .link-secondary:focus,
    .link-secondary:hover {
      color: #565e64
    }

    .link-success {
      color: #198754
    }

    .link-success:focus,
    .link-success:hover {
      color: #146c43
    }

    .link-info {
      color: #0dcaf0
    }

    .link-info:focus,
    .link-info:hover {
      color: #3dd5f3
    }

    .link-warning {
      color: #ffc107
    }

    .link-warning:focus,
    .link-warning:hover {
      color: #ffcd39
    }

    .link-danger {
      color: #dc3545
    }

    .link-danger:focus,
    .link-danger:hover {
      color: #b02a37
    }

    .link-light {
      color: #f8f9fa
    }

    .link-light:focus,
    .link-light:hover {
      color: #f9fafb
    }

    .link-dark {
      color: #212529
    }

    .link-dark:focus,
    .link-dark:hover {
      color: #1a1e21
    }

    .ratio {
      position: relative;
      width: 100%
    }

    .ratio::before {
      display: block;
      padding-top: var(--bs-aspect-ratio);
      content: ""
    }

    .ratio>* {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%
    }

    .ratio-1x1 {
      --bs-aspect-ratio: 100%
    }

    .ratio-4x3 {
      --bs-aspect-ratio: calc(3 / 4 * 100%)
    }

    .ratio-16x9 {
      --bs-aspect-ratio: calc(9 / 16 * 100%)
    }

    .ratio-21x9 {
      --bs-aspect-ratio: calc(9 / 21 * 100%)
    }

    .fixed-top {
      position: fixed;
      top: 0;
      right: 0;
      left: 0;
      z-index: 1030
    }

    .fixed-bottom {
      position: fixed;
      right: 0;
      bottom: 0;
      left: 0;
      z-index: 1030
    }

    .sticky-top {
      position: -webkit-sticky;
      position: sticky;
      top: 0;
      z-index: 1020
    }

    @media (min-width: 576px) {
      .sticky-sm-top {
        position: -webkit-sticky;
        position: sticky;
        top: 0;
        z-index: 1020
      }
    }

    @media (min-width: 768px) {
      .sticky-md-top {
        position: -webkit-sticky;
        position: sticky;
        top: 0;
        z-index: 1020
      }
    }

    @media (min-width: 992px) {
      .sticky-lg-top {
        position: -webkit-sticky;
        position: sticky;
        top: 0;
        z-index: 1020
      }
    }

    @media (min-width: 1200px) {
      .sticky-xl-top {
        position: -webkit-sticky;
        position: sticky;
        top: 0;
        z-index: 1020
      }
    }

    @media (min-width: 1400px) {
      .sticky-xxl-top {
        position: -webkit-sticky;
        position: sticky;
        top: 0;
        z-index: 1020
      }
    }

    .visually-hidden,
    .visually-hidden-focusable:not(:focus):not(:focus-within) {
      position: absolute !important;
      width: 1px !important;
      height: 1px !important;
      padding: 0 !important;
      margin: -1px !important;
      overflow: hidden !important;
      clip: rect(0, 0, 0, 0) !important;
      white-space: nowrap !important;
      border: 0 !important
    }

    .stretched-link::after {
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      z-index: 1;
      content: ""
    }

    .text-truncate {
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap
    }

    .align-baseline {
      vertical-align: baseline !important
    }

    .align-top {
      vertical-align: top !important
    }

    .align-middle {
      vertical-align: middle !important
    }

    .align-bottom {
      vertical-align: bottom !important
    }

    .align-text-bottom {
      vertical-align: text-bottom !important
    }

    .align-text-top {
      vertical-align: text-top !important
    }

    .float-start {
      float: left !important
    }

    .float-end {
      float: right !important
    }

    .float-none {
      float: none !important
    }

    .overflow-auto {
      overflow: auto !important
    }

    .overflow-hidden {
      overflow: hidden !important
    }

    .overflow-visible {
      overflow: visible !important
    }

    .overflow-scroll {
      overflow: scroll !important
    }

    .d-inline {
      display: inline !important
    }

    .d-inline-block {
      display: inline-block !important
    }

    .d-block {
      display: block !important
    }

    .d-grid {
      display: grid !important
    }

    .d-table {
      display: table !important
    }

    .d-table-row {
      display: table-row !important
    }

    .d-table-cell {
      display: table-cell !important
    }

    .d-flex {
      display: flex !important
    }

    .d-inline-flex {
      display: inline-flex !important
    }

    .d-none {
      display: none !important
    }

    .shadow {
      box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important
    }

    .shadow-sm {
      box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important
    }

    .shadow-lg {
      box-shadow: 0 1rem 3rem rgba(0, 0, 0, 0.175) !important
    }

    .shadow-none {
      box-shadow: none !important
    }

    .position-static {
      position: static !important
    }

    .position-relative {
      position: relative !important
    }

    .position-absolute {
      position: absolute !important
    }

    .position-fixed {
      position: fixed !important
    }

    .position-sticky {
      position: -webkit-sticky !important;
      position: sticky !important
    }

    .top-0 {
      top: 0 !important
    }

    .top-50 {
      top: 50% !important
    }

    .top-100 {
      top: 100% !important
    }

    .bottom-0 {
      bottom: 0 !important
    }

    .bottom-50 {
      bottom: 50% !important
    }

    .bottom-100 {
      bottom: 100% !important
    }

    .start-0 {
      left: 0 !important
    }

    .start-50 {
      left: 50% !important
    }

    .start-100 {
      left: 100% !important
    }

    .end-0 {
      right: 0 !important
    }

    .end-50 {
      right: 50% !important
    }

    .end-100 {
      right: 100% !important
    }

    .translate-middle {
      transform: translate(-50%, -50%) !important
    }

    .translate-middle-x {
      transform: translateX(-50%) !important
    }

    .translate-middle-y {
      transform: translateY(-50%) !important
    }

    .border {
      border: 1px solid #dee2e6 !important
    }

    .border-0 {
      border: 0 !important
    }

    .border-top {
      border-top: 1px solid #dee2e6 !important
    }

    .border-top-0 {
      border-top: 0 !important
    }

    .border-end {
      border-right: 1px solid #dee2e6 !important
    }

    .border-end-0 {
      border-right: 0 !important
    }

    .border-bottom {
      border-bottom: 1px solid #dee2e6 !important
    }

    .border-bottom-0 {
      border-bottom: 0 !important
    }

    .border-start {
      border-left: 1px solid #dee2e6 !important
    }

    .border-start-0 {
      border-left: 0 !important
    }

    .border-primary {
      border-color: #0d6efd !important
    }

    .border-secondary {
      border-color: #6c757d !important
    }

    .border-success {
      border-color: #198754 !important
    }

    .border-info {
      border-color: #0dcaf0 !important
    }

    .border-warning {
      border-color: #ffc107 !important
    }

    .border-danger {
      border-color: #dc3545 !important
    }

    .border-light {
      border-color: #f8f9fa !important
    }

    .border-dark {
      border-color: #212529 !important
    }

    .border-white {
      border-color: #fff !important
    }

    .border-1 {
      border-width: 1px !important
    }

    .border-2 {
      border-width: 2px !important
    }

    .border-3 {
      border-width: 3px !important
    }

    .border-4 {
      border-width: 4px !important
    }

    .border-5 {
      border-width: 5px !important
    }

    .w-25 {
      width: 25% !important
    }

    .w-50 {
      width: 50% !important
    }

    .w-75 {
      width: 75% !important
    }

    .w-100 {
      width: 100% !important
    }

    .w-auto {
      width: auto !important
    }

    .mw-100 {
      max-width: 100% !important
    }

    .vw-100 {
      width: 100vw !important
    }

    .min-vw-100 {
      min-width: 100vw !important
    }

    .h-25 {
      height: 25% !important
    }

    .h-50 {
      height: 50% !important
    }

    .h-75 {
      height: 75% !important
    }

    .h-100 {
      height: 100% !important
    }

    .h-auto {
      height: auto !important
    }

    .mh-100 {
      max-height: 100% !important
    }

    .vh-100 {
      height: 100vh !important
    }

    .min-vh-100 {
      min-height: 100vh !important
    }

    .flex-fill {
      flex: 1 1 auto !important
    }

    .flex-row {
      flex-direction: row !important
    }

    .flex-column {
      flex-direction: column !important
    }

    .flex-row-reverse {
      flex-direction: row-reverse !important
    }

    .flex-column-reverse {
      flex-direction: column-reverse !important
    }

    .flex-grow-0 {
      flex-grow: 0 !important
    }

    .flex-grow-1 {
      flex-grow: 1 !important
    }

    .flex-shrink-0 {
      flex-shrink: 0 !important
    }

    .flex-shrink-1 {
      flex-shrink: 1 !important
    }

    .flex-wrap {
      flex-wrap: wrap !important
    }

    .flex-nowrap {
      flex-wrap: nowrap !important
    }

    .flex-wrap-reverse {
      flex-wrap: wrap-reverse !important
    }

    .gap-0 {
      gap: 0 !important
    }

    .gap-1 {
      gap: .25rem !important
    }

    .gap-2 {
      gap: .5rem !important
    }

    .gap-3 {
      gap: 1rem !important
    }

    .gap-4 {
      gap: 1.5rem !important
    }

    .gap-5 {
      gap: 3rem !important
    }

    .justify-content-start {
      justify-content: flex-start !important
    }

    .justify-content-end {
      justify-content: flex-end !important
    }

    .justify-content-center {
      justify-content: center !important
    }

    .justify-content-between {
      justify-content: space-between !important
    }

    .justify-content-around {
      justify-content: space-around !important
    }

    .justify-content-evenly {
      justify-content: space-evenly !important
    }

    .align-items-start {
      align-items: flex-start !important
    }

    .align-items-end {
      align-items: flex-end !important
    }

    .align-items-center {
      align-items: center !important
    }

    .align-items-baseline {
      align-items: baseline !important
    }

    .align-items-stretch {
      align-items: stretch !important
    }

    .align-content-start {
      align-content: flex-start !important
    }

    .align-content-end {
      align-content: flex-end !important
    }

    .align-content-center {
      align-content: center !important
    }

    .align-content-between {
      align-content: space-between !important
    }

    .align-content-around {
      align-content: space-around !important
    }

    .align-content-stretch {
      align-content: stretch !important
    }

    .align-self-auto {
      align-self: auto !important
    }

    .align-self-start {
      align-self: flex-start !important
    }

    .align-self-end {
      align-self: flex-end !important
    }

    .align-self-center {
      align-self: center !important
    }

    .align-self-baseline {
      align-self: baseline !important
    }

    .align-self-stretch {
      align-self: stretch !important
    }

    .order-first {
      order: -1 !important
    }

    .order-0 {
      order: 0 !important
    }

    .order-1 {
      order: 1 !important
    }

    .order-2 {
      order: 2 !important
    }

    .order-3 {
      order: 3 !important
    }

    .order-4 {
      order: 4 !important
    }

    .order-5 {
      order: 5 !important
    }

    .order-last {
      order: 6 !important
    }

    .m-0 {
      margin: 0 !important
    }

    .m-1 {
      margin: .25rem !important
    }

    .m-2 {
      margin: .5rem !important
    }

    .m-3 {
      margin: 1rem !important
    }

    .m-4 {
      margin: 1.5rem !important
    }

    .m-5 {
      margin: 3rem !important
    }

    .m-auto {
      margin: auto !important
    }

    .mx-0 {
      margin-right: 0 !important;
      margin-left: 0 !important
    }

    .mx-1 {
      margin-right: .25rem !important;
      margin-left: .25rem !important
    }

    .mx-2 {
      margin-right: .5rem !important;
      margin-left: .5rem !important
    }

    .mx-3 {
      margin-right: 1rem !important;
      margin-left: 1rem !important
    }

    .mx-4 {
      margin-right: 1.5rem !important;
      margin-left: 1.5rem !important
    }

    .mx-5 {
      margin-right: 3rem !important;
      margin-left: 3rem !important
    }

    .mx-auto {
      margin-right: auto !important;
      margin-left: auto !important
    }

    .my-0 {
      margin-top: 0 !important;
      margin-bottom: 0 !important
    }

    .my-1 {
      margin-top: .25rem !important;
      margin-bottom: .25rem !important
    }

    .my-2 {
      margin-top: .5rem !important;
      margin-bottom: .5rem !important
    }

    .my-3 {
      margin-top: 1rem !important;
      margin-bottom: 1rem !important
    }

    .my-4 {
      margin-top: 1.5rem !important;
      margin-bottom: 1.5rem !important
    }

    .my-5 {
      margin-top: 3rem !important;
      margin-bottom: 3rem !important
    }

    .my-auto {
      margin-top: auto !important;
      margin-bottom: auto !important
    }

    .mt-0 {
      margin-top: 0 !important
    }

    .mt-1 {
      margin-top: .25rem !important
    }

    .mt-2 {
      margin-top: .5rem !important
    }

    .mt-3 {
      margin-top: 1rem !important
    }

    .mt-4 {
      margin-top: 1.5rem !important
    }

    .mt-5 {
      margin-top: 3rem !important
    }

    .mt-auto {
      margin-top: auto !important
    }

    .me-0 {
      margin-right: 0 !important
    }

    .me-1 {
      margin-right: .25rem !important
    }

    .me-2 {
      margin-right: .5rem !important
    }

    .me-3 {
      margin-right: 1rem !important
    }

    .me-4 {
      margin-right: 1.5rem !important
    }

    .me-5 {
      margin-right: 3rem !important
    }

    .me-auto {
      margin-right: auto !important
    }

    .mb-0 {
      margin-bottom: 0 !important
    }

    .mb-1 {
      margin-bottom: .25rem !important
    }

    .mb-2 {
      margin-bottom: .5rem !important
    }

    .mb-3 {
      margin-bottom: 1rem !important
    }

    .mb-4 {
      margin-bottom: 1.5rem !important
    }

    .mb-5 {
      margin-bottom: 3rem !important
    }

    .mb-auto {
      margin-bottom: auto !important
    }

    .ms-0 {
      margin-left: 0 !important
    }

    .ms-1 {
      margin-left: .25rem !important
    }

    .ms-2 {
      margin-left: .5rem !important
    }

    .ms-3 {
      margin-left: 1rem !important
    }

    .ms-4 {
      margin-left: 1.5rem !important
    }

    .ms-5 {
      margin-left: 3rem !important
    }

    .ms-auto {
      margin-left: auto !important
    }

    .p-0 {
      padding: 0 !important
    }

    .p-1 {
      padding: .25rem !important
    }

    .p-2 {
      padding: .5rem !important
    }

    .p-3 {
      padding: 1rem !important
    }

    .p-4 {
      padding: 1.5rem !important
    }

    .p-5 {
      padding: 3rem !important
    }

    .px-0 {
      padding-right: 0 !important;
      padding-left: 0 !important
    }

    .px-1 {
      padding-right: .25rem !important;
      padding-left: .25rem !important
    }

    .px-2 {
      padding-right: .5rem !important;
      padding-left: .5rem !important
    }

    .px-3 {
      padding-right: 1rem !important;
      padding-left: 1rem !important
    }

    .px-4 {
      padding-right: 1.5rem !important;
      padding-left: 1.5rem !important
    }

    .px-5 {
      padding-right: 3rem !important;
      padding-left: 3rem !important
    }

    .py-0 {
      padding-top: 0 !important;
      padding-bottom: 0 !important
    }

    .py-1 {
      padding-top: .25rem !important;
      padding-bottom: .25rem !important
    }

    .py-2 {
      padding-top: .5rem !important;
      padding-bottom: .5rem !important
    }

    .py-3 {
      padding-top: 1rem !important;
      padding-bottom: 1rem !important
    }

    .py-4 {
      padding-top: 1.5rem !important;
      padding-bottom: 1.5rem !important
    }

    .py-5 {
      padding-top: 3rem !important;
      padding-bottom: 3rem !important
    }

    .pt-0 {
      padding-top: 0 !important
    }

    .pt-1 {
      padding-top: .25rem !important
    }

    .pt-2 {
      padding-top: .5rem !important
    }

    .pt-3 {
      padding-top: 1rem !important
    }

    .pt-4 {
      padding-top: 1.5rem !important
    }

    .pt-5 {
      padding-top: 3rem !important
    }

    .pe-0 {
      padding-right: 0 !important
    }

    .pe-1 {
      padding-right: .25rem !important
    }

    .pe-2 {
      padding-right: .5rem !important
    }

    .pe-3 {
      padding-right: 1rem !important
    }

    .pe-4 {
      padding-right: 1.5rem !important
    }

    .pe-5 {
      padding-right: 3rem !important
    }

    .pb-0 {
      padding-bottom: 0 !important
    }

    .pb-1 {
      padding-bottom: .25rem !important
    }

    .pb-2 {
      padding-bottom: .5rem !important
    }

    .pb-3 {
      padding-bottom: 1rem !important
    }

    .pb-4 {
      padding-bottom: 1.5rem !important
    }

    .pb-5 {
      padding-bottom: 3rem !important
    }

    .ps-0 {
      padding-left: 0 !important
    }

    .ps-1 {
      padding-left: .25rem !important
    }

    .ps-2 {
      padding-left: .5rem !important
    }

    .ps-3 {
      padding-left: 1rem !important
    }

    .ps-4 {
      padding-left: 1.5rem !important
    }

    .ps-5 {
      padding-left: 3rem !important
    }

    .font-monospace {
      font-family: var(--bs-font-monospace) !important
    }

    .fs-1 {
      font-size: calc(1.375rem + 1.5vw) !important
    }

    .fs-2 {
      font-size: calc(1.325rem + .9vw) !important
    }

    .fs-3 {
      font-size: calc(1.3rem + .6vw) !important
    }

    .fs-4 {
      font-size: calc(1.275rem + .3vw) !important
    }

    .fs-5 {
      font-size: 1.25rem !important
    }

    .fs-6 {
      font-size: 1rem !important
    }

    .fst-italic {
      font-style: italic !important
    }

    .fst-normal {
      font-style: normal !important
    }

    .fw-light {
      font-weight: 300 !important
    }

    .fw-lighter {
      font-weight: lighter !important
    }

    .fw-normal {
      font-weight: 400 !important
    }

    .fw-bold {
      font-weight: 700 !important
    }

    .fw-bolder {
      font-weight: bolder !important
    }

    .lh-1 {
      line-height: 1 !important
    }

    .lh-sm {
      line-height: 1.25 !important
    }

    .lh-base {
      line-height: 1.5 !important
    }

    .lh-lg {
      line-height: 2 !important
    }

    .text-start {
      text-align: left !important
    }

    .text-end {
      text-align: right !important
    }

    .text-center {
      text-align: center !important
    }

    .text-decoration-none {
      text-decoration: none !important
    }

    .text-decoration-underline {
      text-decoration: underline !important
    }

    .text-decoration-line-through {
      text-decoration: line-through !important
    }

    .text-lowercase {
      text-transform: lowercase !important
    }

    .text-uppercase {
      text-transform: uppercase !important
    }

    .text-capitalize {
      text-transform: capitalize !important
    }

    .text-wrap {
      white-space: normal !important
    }

    .text-nowrap {
      white-space: nowrap !important
    }

    .text-break {
      word-wrap: break-word !important;
      word-break: break-word !important
    }

    .text-primary {
      color: #0d6efd !important
    }

    .text-secondary {
      color: #6c757d !important
    }

    .text-success {
      color: #198754 !important
    }

    .text-info {
      color: #0dcaf0 !important
    }

    .text-warning {
      color: #ffc107 !important
    }

    .text-danger {
      color: #dc3545 !important
    }

    .text-light {
      color: #f8f9fa !important
    }

    .text-dark {
      color: #212529 !important
    }

    .text-white {
      color: #fff !important
    }

    .text-body {
      color: #212529 !important
    }

    .text-muted {
      color: #6c757d !important
    }

    .text-black-50 {
      color: rgba(0, 0, 0, 0.5) !important
    }

    .text-white-50 {
      color: rgba(255, 255, 255, 0.5) !important
    }

    .text-reset {
      color: inherit !important
    }

    .bg-primary {
      background-color: #0d6efd !important
    }

    .bg-secondary {
      background-color: #6c757d !important
    }

    .bg-success {
      background-color: #198754 !important
    }

    .bg-info {
      background-color: #0dcaf0 !important
    }

    .bg-warning {
      background-color: #ffc107 !important
    }

    .bg-danger {
      background-color: #dc3545 !important
    }

    .bg-light {
      background-color: #f8f9fa !important
    }

    .bg-dark {
      background-color: #212529 !important
    }

    .bg-body {
      background-color: #fff !important
    }

    .bg-white {
      background-color: #fff !important
    }

    .bg-transparent {
      background-color: transparent !important
    }

    .bg-gradient {
      background-image: var(--bs-gradient) !important
    }

    .user-select-all {
      -webkit-user-select: all !important;
      -moz-user-select: all !important;
      user-select: all !important
    }

    .user-select-auto {
      -webkit-user-select: auto !important;
      -moz-user-select: auto !important;
      user-select: auto !important
    }

    .user-select-none {
      -webkit-user-select: none !important;
      -moz-user-select: none !important;
      user-select: none !important
    }

    .pe-none {
      pointer-events: none !important
    }

    .pe-auto {
      pointer-events: auto !important
    }

    .rounded {
      border-radius: .25rem !important
    }

    .rounded-0 {
      border-radius: 0 !important
    }

    .rounded-1 {
      border-radius: .2rem !important
    }

    .rounded-2 {
      border-radius: .25rem !important
    }

    .rounded-3 {
      border-radius: .3rem !important
    }

    .rounded-circle {
      border-radius: 50% !important
    }

    .rounded-pill {
      border-radius: 50rem !important
    }

    .rounded-top {
      border-top-left-radius: .25rem !important;
      border-top-right-radius: .25rem !important
    }

    .rounded-end {
      border-top-right-radius: .25rem !important;
      border-bottom-right-radius: .25rem !important
    }

    .rounded-bottom {
      border-bottom-right-radius: .25rem !important;
      border-bottom-left-radius: .25rem !important
    }

    .rounded-start {
      border-bottom-left-radius: .25rem !important;
      border-top-left-radius: .25rem !important
    }

    .visible {
      visibility: visible !important
    }

    .invisible {
      visibility: hidden !important
    }

    @media (min-width: 576px) {
      .float-sm-start {
        float: left !important
      }

      .float-sm-end {
        float: right !important
      }

      .float-sm-none {
        float: none !important
      }

      .d-sm-inline {
        display: inline !important
      }

      .d-sm-inline-block {
        display: inline-block !important
      }

      .d-sm-block {
        display: block !important
      }

      .d-sm-grid {
        display: grid !important
      }

      .d-sm-table {
        display: table !important
      }

      .d-sm-table-row {
        display: table-row !important
      }

      .d-sm-table-cell {
        display: table-cell !important
      }

      .d-sm-flex {
        display: flex !important
      }

      .d-sm-inline-flex {
        display: inline-flex !important
      }

      .d-sm-none {
        display: none !important
      }

      .flex-sm-fill {
        flex: 1 1 auto !important
      }

      .flex-sm-row {
        flex-direction: row !important
      }

      .flex-sm-column {
        flex-direction: column !important
      }

      .flex-sm-row-reverse {
        flex-direction: row-reverse !important
      }

      .flex-sm-column-reverse {
        flex-direction: column-reverse !important
      }

      .flex-sm-grow-0 {
        flex-grow: 0 !important
      }

      .flex-sm-grow-1 {
        flex-grow: 1 !important
      }

      .flex-sm-shrink-0 {
        flex-shrink: 0 !important
      }

      .flex-sm-shrink-1 {
        flex-shrink: 1 !important
      }

      .flex-sm-wrap {
        flex-wrap: wrap !important
      }

      .flex-sm-nowrap {
        flex-wrap: nowrap !important
      }

      .flex-sm-wrap-reverse {
        flex-wrap: wrap-reverse !important
      }

      .gap-sm-0 {
        gap: 0 !important
      }

      .gap-sm-1 {
        gap: .25rem !important
      }

      .gap-sm-2 {
        gap: .5rem !important
      }

      .gap-sm-3 {
        gap: 1rem !important
      }

      .gap-sm-4 {
        gap: 1.5rem !important
      }

      .gap-sm-5 {
        gap: 3rem !important
      }

      .justify-content-sm-start {
        justify-content: flex-start !important
      }

      .justify-content-sm-end {
        justify-content: flex-end !important
      }

      .justify-content-sm-center {
        justify-content: center !important
      }

      .justify-content-sm-between {
        justify-content: space-between !important
      }

      .justify-content-sm-around {
        justify-content: space-around !important
      }

      .justify-content-sm-evenly {
        justify-content: space-evenly !important
      }

      .align-items-sm-start {
        align-items: flex-start !important
      }

      .align-items-sm-end {
        align-items: flex-end !important
      }

      .align-items-sm-center {
        align-items: center !important
      }

      .align-items-sm-baseline {
        align-items: baseline !important
      }

      .align-items-sm-stretch {
        align-items: stretch !important
      }

      .align-content-sm-start {
        align-content: flex-start !important
      }

      .align-content-sm-end {
        align-content: flex-end !important
      }

      .align-content-sm-center {
        align-content: center !important
      }

      .align-content-sm-between {
        align-content: space-between !important
      }

      .align-content-sm-around {
        align-content: space-around !important
      }

      .align-content-sm-stretch {
        align-content: stretch !important
      }

      .align-self-sm-auto {
        align-self: auto !important
      }

      .align-self-sm-start {
        align-self: flex-start !important
      }

      .align-self-sm-end {
        align-self: flex-end !important
      }

      .align-self-sm-center {
        align-self: center !important
      }

      .align-self-sm-baseline {
        align-self: baseline !important
      }

      .align-self-sm-stretch {
        align-self: stretch !important
      }

      .order-sm-first {
        order: -1 !important
      }

      .order-sm-0 {
        order: 0 !important
      }

      .order-sm-1 {
        order: 1 !important
      }

      .order-sm-2 {
        order: 2 !important
      }

      .order-sm-3 {
        order: 3 !important
      }

      .order-sm-4 {
        order: 4 !important
      }

      .order-sm-5 {
        order: 5 !important
      }

      .order-sm-last {
        order: 6 !important
      }

      .m-sm-0 {
        margin: 0 !important
      }

      .m-sm-1 {
        margin: .25rem !important
      }

      .m-sm-2 {
        margin: .5rem !important
      }

      .m-sm-3 {
        margin: 1rem !important
      }

      .m-sm-4 {
        margin: 1.5rem !important
      }

      .m-sm-5 {
        margin: 3rem !important
      }

      .m-sm-auto {
        margin: auto !important
      }

      .mx-sm-0 {
        margin-right: 0 !important;
        margin-left: 0 !important
      }

      .mx-sm-1 {
        margin-right: .25rem !important;
        margin-left: .25rem !important
      }

      .mx-sm-2 {
        margin-right: .5rem !important;
        margin-left: .5rem !important
      }

      .mx-sm-3 {
        margin-right: 1rem !important;
        margin-left: 1rem !important
      }

      .mx-sm-4 {
        margin-right: 1.5rem !important;
        margin-left: 1.5rem !important
      }

      .mx-sm-5 {
        margin-right: 3rem !important;
        margin-left: 3rem !important
      }

      .mx-sm-auto {
        margin-right: auto !important;
        margin-left: auto !important
      }

      .my-sm-0 {
        margin-top: 0 !important;
        margin-bottom: 0 !important
      }

      .my-sm-1 {
        margin-top: .25rem !important;
        margin-bottom: .25rem !important
      }

      .my-sm-2 {
        margin-top: .5rem !important;
        margin-bottom: .5rem !important
      }

      .my-sm-3 {
        margin-top: 1rem !important;
        margin-bottom: 1rem !important
      }

      .my-sm-4 {
        margin-top: 1.5rem !important;
        margin-bottom: 1.5rem !important
      }

      .my-sm-5 {
        margin-top: 3rem !important;
        margin-bottom: 3rem !important
      }

      .my-sm-auto {
        margin-top: auto !important;
        margin-bottom: auto !important
      }

      .mt-sm-0 {
        margin-top: 0 !important
      }

      .mt-sm-1 {
        margin-top: .25rem !important
      }

      .mt-sm-2 {
        margin-top: .5rem !important
      }

      .mt-sm-3 {
        margin-top: 1rem !important
      }

      .mt-sm-4 {
        margin-top: 1.5rem !important
      }

      .mt-sm-5 {
        margin-top: 3rem !important
      }

      .mt-sm-auto {
        margin-top: auto !important
      }

      .me-sm-0 {
        margin-right: 0 !important
      }

      .me-sm-1 {
        margin-right: .25rem !important
      }

      .me-sm-2 {
        margin-right: .5rem !important
      }

      .me-sm-3 {
        margin-right: 1rem !important
      }

      .me-sm-4 {
        margin-right: 1.5rem !important
      }

      .me-sm-5 {
        margin-right: 3rem !important
      }

      .me-sm-auto {
        margin-right: auto !important
      }

      .mb-sm-0 {
        margin-bottom: 0 !important
      }

      .mb-sm-1 {
        margin-bottom: .25rem !important
      }

      .mb-sm-2 {
        margin-bottom: .5rem !important
      }

      .mb-sm-3 {
        margin-bottom: 1rem !important
      }

      .mb-sm-4 {
        margin-bottom: 1.5rem !important
      }

      .mb-sm-5 {
        margin-bottom: 3rem !important
      }

      .mb-sm-auto {
        margin-bottom: auto !important
      }

      .ms-sm-0 {
        margin-left: 0 !important
      }

      .ms-sm-1 {
        margin-left: .25rem !important
      }

      .ms-sm-2 {
        margin-left: .5rem !important
      }

      .ms-sm-3 {
        margin-left: 1rem !important
      }

      .ms-sm-4 {
        margin-left: 1.5rem !important
      }

      .ms-sm-5 {
        margin-left: 3rem !important
      }

      .ms-sm-auto {
        margin-left: auto !important
      }

      .p-sm-0 {
        padding: 0 !important
      }

      .p-sm-1 {
        padding: .25rem !important
      }

      .p-sm-2 {
        padding: .5rem !important
      }

      .p-sm-3 {
        padding: 1rem !important
      }

      .p-sm-4 {
        padding: 1.5rem !important
      }

      .p-sm-5 {
        padding: 3rem !important
      }

      .px-sm-0 {
        padding-right: 0 !important;
        padding-left: 0 !important
      }

      .px-sm-1 {
        padding-right: .25rem !important;
        padding-left: .25rem !important
      }

      .px-sm-2 {
        padding-right: .5rem !important;
        padding-left: .5rem !important
      }

      .px-sm-3 {
        padding-right: 1rem !important;
        padding-left: 1rem !important
      }

      .px-sm-4 {
        padding-right: 1.5rem !important;
        padding-left: 1.5rem !important
      }

      .px-sm-5 {
        padding-right: 3rem !important;
        padding-left: 3rem !important
      }

      .py-sm-0 {
        padding-top: 0 !important;
        padding-bottom: 0 !important
      }

      .py-sm-1 {
        padding-top: .25rem !important;
        padding-bottom: .25rem !important
      }

      .py-sm-2 {
        padding-top: .5rem !important;
        padding-bottom: .5rem !important
      }

      .py-sm-3 {
        padding-top: 1rem !important;
        padding-bottom: 1rem !important
      }

      .py-sm-4 {
        padding-top: 1.5rem !important;
        padding-bottom: 1.5rem !important
      }

      .py-sm-5 {
        padding-top: 3rem !important;
        padding-bottom: 3rem !important
      }

      .pt-sm-0 {
        padding-top: 0 !important
      }

      .pt-sm-1 {
        padding-top: .25rem !important
      }

      .pt-sm-2 {
        padding-top: .5rem !important
      }

      .pt-sm-3 {
        padding-top: 1rem !important
      }

      .pt-sm-4 {
        padding-top: 1.5rem !important
      }

      .pt-sm-5 {
        padding-top: 3rem !important
      }

      .pe-sm-0 {
        padding-right: 0 !important
      }

      .pe-sm-1 {
        padding-right: .25rem !important
      }

      .pe-sm-2 {
        padding-right: .5rem !important
      }

      .pe-sm-3 {
        padding-right: 1rem !important
      }

      .pe-sm-4 {
        padding-right: 1.5rem !important
      }

      .pe-sm-5 {
        padding-right: 3rem !important
      }

      .pb-sm-0 {
        padding-bottom: 0 !important
      }

      .pb-sm-1 {
        padding-bottom: .25rem !important
      }

      .pb-sm-2 {
        padding-bottom: .5rem !important
      }

      .pb-sm-3 {
        padding-bottom: 1rem !important
      }

      .pb-sm-4 {
        padding-bottom: 1.5rem !important
      }

      .pb-sm-5 {
        padding-bottom: 3rem !important
      }

      .ps-sm-0 {
        padding-left: 0 !important
      }

      .ps-sm-1 {
        padding-left: .25rem !important
      }

      .ps-sm-2 {
        padding-left: .5rem !important
      }

      .ps-sm-3 {
        padding-left: 1rem !important
      }

      .ps-sm-4 {
        padding-left: 1.5rem !important
      }

      .ps-sm-5 {
        padding-left: 3rem !important
      }

      .text-sm-start {
        text-align: left !important
      }

      .text-sm-end {
        text-align: right !important
      }

      .text-sm-center {
        text-align: center !important
      }
    }

    @media (min-width: 768px) {
      .float-md-start {
        float: left !important
      }

      .float-md-end {
        float: right !important
      }

      .float-md-none {
        float: none !important
      }

      .d-md-inline {
        display: inline !important
      }

      .d-md-inline-block {
        display: inline-block !important
      }

      .d-md-block {
        display: block !important
      }

      .d-md-grid {
        display: grid !important
      }

      .d-md-table {
        display: table !important
      }

      .d-md-table-row {
        display: table-row !important
      }

      .d-md-table-cell {
        display: table-cell !important
      }

      .d-md-flex {
        display: flex !important
      }

      .d-md-inline-flex {
        display: inline-flex !important
      }

      .d-md-none {
        display: none !important
      }

      .flex-md-fill {
        flex: 1 1 auto !important
      }

      .flex-md-row {
        flex-direction: row !important
      }

      .flex-md-column {
        flex-direction: column !important
      }

      .flex-md-row-reverse {
        flex-direction: row-reverse !important
      }

      .flex-md-column-reverse {
        flex-direction: column-reverse !important
      }

      .flex-md-grow-0 {
        flex-grow: 0 !important
      }

      .flex-md-grow-1 {
        flex-grow: 1 !important
      }

      .flex-md-shrink-0 {
        flex-shrink: 0 !important
      }

      .flex-md-shrink-1 {
        flex-shrink: 1 !important
      }

      .flex-md-wrap {
        flex-wrap: wrap !important
      }

      .flex-md-nowrap {
        flex-wrap: nowrap !important
      }

      .flex-md-wrap-reverse {
        flex-wrap: wrap-reverse !important
      }

      .gap-md-0 {
        gap: 0 !important
      }

      .gap-md-1 {
        gap: .25rem !important
      }

      .gap-md-2 {
        gap: .5rem !important
      }

      .gap-md-3 {
        gap: 1rem !important
      }

      .gap-md-4 {
        gap: 1.5rem !important
      }

      .gap-md-5 {
        gap: 3rem !important
      }

      .justify-content-md-start {
        justify-content: flex-start !important
      }

      .justify-content-md-end {
        justify-content: flex-end !important
      }

      .justify-content-md-center {
        justify-content: center !important
      }

      .justify-content-md-between {
        justify-content: space-between !important
      }

      .justify-content-md-around {
        justify-content: space-around !important
      }

      .justify-content-md-evenly {
        justify-content: space-evenly !important
      }

      .align-items-md-start {
        align-items: flex-start !important
      }

      .align-items-md-end {
        align-items: flex-end !important
      }

      .align-items-md-center {
        align-items: center !important
      }

      .align-items-md-baseline {
        align-items: baseline !important
      }

      .align-items-md-stretch {
        align-items: stretch !important
      }

      .align-content-md-start {
        align-content: flex-start !important
      }

      .align-content-md-end {
        align-content: flex-end !important
      }

      .align-content-md-center {
        align-content: center !important
      }

      .align-content-md-between {
        align-content: space-between !important
      }

      .align-content-md-around {
        align-content: space-around !important
      }

      .align-content-md-stretch {
        align-content: stretch !important
      }

      .align-self-md-auto {
        align-self: auto !important
      }

      .align-self-md-start {
        align-self: flex-start !important
      }

      .align-self-md-end {
        align-self: flex-end !important
      }

      .align-self-md-center {
        align-self: center !important
      }

      .align-self-md-baseline {
        align-self: baseline !important
      }

      .align-self-md-stretch {
        align-self: stretch !important
      }

      .order-md-first {
        order: -1 !important
      }

      .order-md-0 {
        order: 0 !important
      }

      .order-md-1 {
        order: 1 !important
      }

      .order-md-2 {
        order: 2 !important
      }

      .order-md-3 {
        order: 3 !important
      }

      .order-md-4 {
        order: 4 !important
      }

      .order-md-5 {
        order: 5 !important
      }

      .order-md-last {
        order: 6 !important
      }

      .m-md-0 {
        margin: 0 !important
      }

      .m-md-1 {
        margin: .25rem !important
      }

      .m-md-2 {
        margin: .5rem !important
      }

      .m-md-3 {
        margin: 1rem !important
      }

      .m-md-4 {
        margin: 1.5rem !important
      }

      .m-md-5 {
        margin: 3rem !important
      }

      .m-md-auto {
        margin: auto !important
      }

      .mx-md-0 {
        margin-right: 0 !important;
        margin-left: 0 !important
      }

      .mx-md-1 {
        margin-right: .25rem !important;
        margin-left: .25rem !important
      }

      .mx-md-2 {
        margin-right: .5rem !important;
        margin-left: .5rem !important
      }

      .mx-md-3 {
        margin-right: 1rem !important;
        margin-left: 1rem !important
      }

      .mx-md-4 {
        margin-right: 1.5rem !important;
        margin-left: 1.5rem !important
      }

      .mx-md-5 {
        margin-right: 3rem !important;
        margin-left: 3rem !important
      }

      .mx-md-auto {
        margin-right: auto !important;
        margin-left: auto !important
      }

      .my-md-0 {
        margin-top: 0 !important;
        margin-bottom: 0 !important
      }

      .my-md-1 {
        margin-top: .25rem !important;
        margin-bottom: .25rem !important
      }

      .my-md-2 {
        margin-top: .5rem !important;
        margin-bottom: .5rem !important
      }

      .my-md-3 {
        margin-top: 1rem !important;
        margin-bottom: 1rem !important
      }

      .my-md-4 {
        margin-top: 1.5rem !important;
        margin-bottom: 1.5rem !important
      }

      .my-md-5 {
        margin-top: 3rem !important;
        margin-bottom: 3rem !important
      }

      .my-md-auto {
        margin-top: auto !important;
        margin-bottom: auto !important
      }

      .mt-md-0 {
        margin-top: 0 !important
      }

      .mt-md-1 {
        margin-top: .25rem !important
      }

      .mt-md-2 {
        margin-top: .5rem !important
      }

      .mt-md-3 {
        margin-top: 1rem !important
      }

      .mt-md-4 {
        margin-top: 1.5rem !important
      }

      .mt-md-5 {
        margin-top: 3rem !important
      }

      .mt-md-auto {
        margin-top: auto !important
      }

      .me-md-0 {
        margin-right: 0 !important
      }

      .me-md-1 {
        margin-right: .25rem !important
      }

      .me-md-2 {
        margin-right: .5rem !important
      }

      .me-md-3 {
        margin-right: 1rem !important
      }

      .me-md-4 {
        margin-right: 1.5rem !important
      }

      .me-md-5 {
        margin-right: 3rem !important
      }

      .me-md-auto {
        margin-right: auto !important
      }

      .mb-md-0 {
        margin-bottom: 0 !important
      }

      .mb-md-1 {
        margin-bottom: .25rem !important
      }

      .mb-md-2 {
        margin-bottom: .5rem !important
      }

      .mb-md-3 {
        margin-bottom: 1rem !important
      }

      .mb-md-4 {
        margin-bottom: 1.5rem !important
      }

      .mb-md-5 {
        margin-bottom: 3rem !important
      }

      .mb-md-auto {
        margin-bottom: auto !important
      }

      .ms-md-0 {
        margin-left: 0 !important
      }

      .ms-md-1 {
        margin-left: .25rem !important
      }

      .ms-md-2 {
        margin-left: .5rem !important
      }

      .ms-md-3 {
        margin-left: 1rem !important
      }

      .ms-md-4 {
        margin-left: 1.5rem !important
      }

      .ms-md-5 {
        margin-left: 3rem !important
      }

      .ms-md-auto {
        margin-left: auto !important
      }

      .p-md-0 {
        padding: 0 !important
      }

      .p-md-1 {
        padding: .25rem !important
      }

      .p-md-2 {
        padding: .5rem !important
      }

      .p-md-3 {
        padding: 1rem !important
      }

      .p-md-4 {
        padding: 1.5rem !important
      }

      .p-md-5 {
        padding: 3rem !important
      }

      .px-md-0 {
        padding-right: 0 !important;
        padding-left: 0 !important
      }

      .px-md-1 {
        padding-right: .25rem !important;
        padding-left: .25rem !important
      }

      .px-md-2 {
        padding-right: .5rem !important;
        padding-left: .5rem !important
      }

      .px-md-3 {
        padding-right: 1rem !important;
        padding-left: 1rem !important
      }

      .px-md-4 {
        padding-right: 1.5rem !important;
        padding-left: 1.5rem !important
      }

      .px-md-5 {
        padding-right: 3rem !important;
        padding-left: 3rem !important
      }

      .py-md-0 {
        padding-top: 0 !important;
        padding-bottom: 0 !important
      }

      .py-md-1 {
        padding-top: .25rem !important;
        padding-bottom: .25rem !important
      }

      .py-md-2 {
        padding-top: .5rem !important;
        padding-bottom: .5rem !important
      }

      .py-md-3 {
        padding-top: 1rem !important;
        padding-bottom: 1rem !important
      }

      .py-md-4 {
        padding-top: 1.5rem !important;
        padding-bottom: 1.5rem !important
      }

      .py-md-5 {
        padding-top: 3rem !important;
        padding-bottom: 3rem !important
      }

      .pt-md-0 {
        padding-top: 0 !important
      }

      .pt-md-1 {
        padding-top: .25rem !important
      }

      .pt-md-2 {
        padding-top: .5rem !important
      }

      .pt-md-3 {
        padding-top: 1rem !important
      }

      .pt-md-4 {
        padding-top: 1.5rem !important
      }

      .pt-md-5 {
        padding-top: 3rem !important
      }

      .pe-md-0 {
        padding-right: 0 !important
      }

      .pe-md-1 {
        padding-right: .25rem !important
      }

      .pe-md-2 {
        padding-right: .5rem !important
      }

      .pe-md-3 {
        padding-right: 1rem !important
      }

      .pe-md-4 {
        padding-right: 1.5rem !important
      }

      .pe-md-5 {
        padding-right: 3rem !important
      }

      .pb-md-0 {
        padding-bottom: 0 !important
      }

      .pb-md-1 {
        padding-bottom: .25rem !important
      }

      .pb-md-2 {
        padding-bottom: .5rem !important
      }

      .pb-md-3 {
        padding-bottom: 1rem !important
      }

      .pb-md-4 {
        padding-bottom: 1.5rem !important
      }

      .pb-md-5 {
        padding-bottom: 3rem !important
      }

      .ps-md-0 {
        padding-left: 0 !important
      }

      .ps-md-1 {
        padding-left: .25rem !important
      }

      .ps-md-2 {
        padding-left: .5rem !important
      }

      .ps-md-3 {
        padding-left: 1rem !important
      }

      .ps-md-4 {
        padding-left: 1.5rem !important
      }

      .ps-md-5 {
        padding-left: 3rem !important
      }

      .text-md-start {
        text-align: left !important
      }

      .text-md-end {
        text-align: right !important
      }

      .text-md-center {
        text-align: center !important
      }
    }

    @media (min-width: 992px) {
      .float-lg-start {
        float: left !important
      }

      .float-lg-end {
        float: right !important
      }

      .float-lg-none {
        float: none !important
      }

      .d-lg-inline {
        display: inline !important
      }

      .d-lg-inline-block {
        display: inline-block !important
      }

      .d-lg-block {
        display: block !important
      }

      .d-lg-grid {
        display: grid !important
      }

      .d-lg-table {
        display: table !important
      }

      .d-lg-table-row {
        display: table-row !important
      }

      .d-lg-table-cell {
        display: table-cell !important
      }

      .d-lg-flex {
        display: flex !important
      }

      .d-lg-inline-flex {
        display: inline-flex !important
      }

      .d-lg-none {
        display: none !important
      }

      .flex-lg-fill {
        flex: 1 1 auto !important
      }

      .flex-lg-row {
        flex-direction: row !important
      }

      .flex-lg-column {
        flex-direction: column !important
      }

      .flex-lg-row-reverse {
        flex-direction: row-reverse !important
      }

      .flex-lg-column-reverse {
        flex-direction: column-reverse !important
      }

      .flex-lg-grow-0 {
        flex-grow: 0 !important
      }

      .flex-lg-grow-1 {
        flex-grow: 1 !important
      }

      .flex-lg-shrink-0 {
        flex-shrink: 0 !important
      }

      .flex-lg-shrink-1 {
        flex-shrink: 1 !important
      }

      .flex-lg-wrap {
        flex-wrap: wrap !important
      }

      .flex-lg-nowrap {
        flex-wrap: nowrap !important
      }

      .flex-lg-wrap-reverse {
        flex-wrap: wrap-reverse !important
      }

      .gap-lg-0 {
        gap: 0 !important
      }

      .gap-lg-1 {
        gap: .25rem !important
      }

      .gap-lg-2 {
        gap: .5rem !important
      }

      .gap-lg-3 {
        gap: 1rem !important
      }

      .gap-lg-4 {
        gap: 1.5rem !important
      }

      .gap-lg-5 {
        gap: 3rem !important
      }

      .justify-content-lg-start {
        justify-content: flex-start !important
      }

      .justify-content-lg-end {
        justify-content: flex-end !important
      }

      .justify-content-lg-center {
        justify-content: center !important
      }

      .justify-content-lg-between {
        justify-content: space-between !important
      }

      .justify-content-lg-around {
        justify-content: space-around !important
      }

      .justify-content-lg-evenly {
        justify-content: space-evenly !important
      }

      .align-items-lg-start {
        align-items: flex-start !important
      }

      .align-items-lg-end {
        align-items: flex-end !important
      }

      .align-items-lg-center {
        align-items: center !important
      }

      .align-items-lg-baseline {
        align-items: baseline !important
      }

      .align-items-lg-stretch {
        align-items: stretch !important
      }

      .align-content-lg-start {
        align-content: flex-start !important
      }

      .align-content-lg-end {
        align-content: flex-end !important
      }

      .align-content-lg-center {
        align-content: center !important
      }

      .align-content-lg-between {
        align-content: space-between !important
      }

      .align-content-lg-around {
        align-content: space-around !important
      }

      .align-content-lg-stretch {
        align-content: stretch !important
      }

      .align-self-lg-auto {
        align-self: auto !important
      }

      .align-self-lg-start {
        align-self: flex-start !important
      }

      .align-self-lg-end {
        align-self: flex-end !important
      }

      .align-self-lg-center {
        align-self: center !important
      }

      .align-self-lg-baseline {
        align-self: baseline !important
      }

      .align-self-lg-stretch {
        align-self: stretch !important
      }

      .order-lg-first {
        order: -1 !important
      }

      .order-lg-0 {
        order: 0 !important
      }

      .order-lg-1 {
        order: 1 !important
      }

      .order-lg-2 {
        order: 2 !important
      }

      .order-lg-3 {
        order: 3 !important
      }

      .order-lg-4 {
        order: 4 !important
      }

      .order-lg-5 {
        order: 5 !important
      }

      .order-lg-last {
        order: 6 !important
      }

      .m-lg-0 {
        margin: 0 !important
      }

      .m-lg-1 {
        margin: .25rem !important
      }

      .m-lg-2 {
        margin: .5rem !important
      }

      .m-lg-3 {
        margin: 1rem !important
      }

      .m-lg-4 {
        margin: 1.5rem !important
      }

      .m-lg-5 {
        margin: 3rem !important
      }

      .m-lg-auto {
        margin: auto !important
      }

      .mx-lg-0 {
        margin-right: 0 !important;
        margin-left: 0 !important
      }

      .mx-lg-1 {
        margin-right: .25rem !important;
        margin-left: .25rem !important
      }

      .mx-lg-2 {
        margin-right: .5rem !important;
        margin-left: .5rem !important
      }

      .mx-lg-3 {
        margin-right: 1rem !important;
        margin-left: 1rem !important
      }

      .mx-lg-4 {
        margin-right: 1.5rem !important;
        margin-left: 1.5rem !important
      }

      .mx-lg-5 {
        margin-right: 3rem !important;
        margin-left: 3rem !important
      }

      .mx-lg-auto {
        margin-right: auto !important;
        margin-left: auto !important
      }

      .my-lg-0 {
        margin-top: 0 !important;
        margin-bottom: 0 !important
      }

      .my-lg-1 {
        margin-top: .25rem !important;
        margin-bottom: .25rem !important
      }

      .my-lg-2 {
        margin-top: .5rem !important;
        margin-bottom: .5rem !important
      }

      .my-lg-3 {
        margin-top: 1rem !important;
        margin-bottom: 1rem !important
      }

      .my-lg-4 {
        margin-top: 1.5rem !important;
        margin-bottom: 1.5rem !important
      }

      .my-lg-5 {
        margin-top: 3rem !important;
        margin-bottom: 3rem !important
      }

      .my-lg-auto {
        margin-top: auto !important;
        margin-bottom: auto !important
      }

      .mt-lg-0 {
        margin-top: 0 !important
      }

      .mt-lg-1 {
        margin-top: .25rem !important
      }

      .mt-lg-2 {
        margin-top: .5rem !important
      }

      .mt-lg-3 {
        margin-top: 1rem !important
      }

      .mt-lg-4 {
        margin-top: 1.5rem !important
      }

      .mt-lg-5 {
        margin-top: 3rem !important
      }

      .mt-lg-auto {
        margin-top: auto !important
      }

      .me-lg-0 {
        margin-right: 0 !important
      }

      .me-lg-1 {
        margin-right: .25rem !important
      }

      .me-lg-2 {
        margin-right: .5rem !important
      }

      .me-lg-3 {
        margin-right: 1rem !important
      }

      .me-lg-4 {
        margin-right: 1.5rem !important
      }

      .me-lg-5 {
        margin-right: 3rem !important
      }

      .me-lg-auto {
        margin-right: auto !important
      }

      .mb-lg-0 {
        margin-bottom: 0 !important
      }

      .mb-lg-1 {
        margin-bottom: .25rem !important
      }

      .mb-lg-2 {
        margin-bottom: .5rem !important
      }

      .mb-lg-3 {
        margin-bottom: 1rem !important
      }

      .mb-lg-4 {
        margin-bottom: 1.5rem !important
      }

      .mb-lg-5 {
        margin-bottom: 3rem !important
      }

      .mb-lg-auto {
        margin-bottom: auto !important
      }

      .ms-lg-0 {
        margin-left: 0 !important
      }

      .ms-lg-1 {
        margin-left: .25rem !important
      }

      .ms-lg-2 {
        margin-left: .5rem !important
      }

      .ms-lg-3 {
        margin-left: 1rem !important
      }

      .ms-lg-4 {
        margin-left: 1.5rem !important
      }

      .ms-lg-5 {
        margin-left: 3rem !important
      }

      .ms-lg-auto {
        margin-left: auto !important
      }

      .p-lg-0 {
        padding: 0 !important
      }

      .p-lg-1 {
        padding: .25rem !important
      }

      .p-lg-2 {
        padding: .5rem !important
      }

      .p-lg-3 {
        padding: 1rem !important
      }

      .p-lg-4 {
        padding: 1.5rem !important
      }

      .p-lg-5 {
        padding: 3rem !important
      }

      .px-lg-0 {
        padding-right: 0 !important;
        padding-left: 0 !important
      }

      .px-lg-1 {
        padding-right: .25rem !important;
        padding-left: .25rem !important
      }

      .px-lg-2 {
        padding-right: .5rem !important;
        padding-left: .5rem !important
      }

      .px-lg-3 {
        padding-right: 1rem !important;
        padding-left: 1rem !important
      }

      .px-lg-4 {
        padding-right: 1.5rem !important;
        padding-left: 1.5rem !important
      }

      .px-lg-5 {
        padding-right: 3rem !important;
        padding-left: 3rem !important
      }

      .py-lg-0 {
        padding-top: 0 !important;
        padding-bottom: 0 !important
      }

      .py-lg-1 {
        padding-top: .25rem !important;
        padding-bottom: .25rem !important
      }

      .py-lg-2 {
        padding-top: .5rem !important;
        padding-bottom: .5rem !important
      }

      .py-lg-3 {
        padding-top: 1rem !important;
        padding-bottom: 1rem !important
      }

      .py-lg-4 {
        padding-top: 1.5rem !important;
        padding-bottom: 1.5rem !important
      }

      .py-lg-5 {
        padding-top: 3rem !important;
        padding-bottom: 3rem !important
      }

      .pt-lg-0 {
        padding-top: 0 !important
      }

      .pt-lg-1 {
        padding-top: .25rem !important
      }

      .pt-lg-2 {
        padding-top: .5rem !important
      }

      .pt-lg-3 {
        padding-top: 1rem !important
      }

      .pt-lg-4 {
        padding-top: 1.5rem !important
      }

      .pt-lg-5 {
        padding-top: 3rem !important
      }

      .pe-lg-0 {
        padding-right: 0 !important
      }

      .pe-lg-1 {
        padding-right: .25rem !important
      }

      .pe-lg-2 {
        padding-right: .5rem !important
      }

      .pe-lg-3 {
        padding-right: 1rem !important
      }

      .pe-lg-4 {
        padding-right: 1.5rem !important
      }

      .pe-lg-5 {
        padding-right: 3rem !important
      }

      .pb-lg-0 {
        padding-bottom: 0 !important
      }

      .pb-lg-1 {
        padding-bottom: .25rem !important
      }

      .pb-lg-2 {
        padding-bottom: .5rem !important
      }

      .pb-lg-3 {
        padding-bottom: 1rem !important
      }

      .pb-lg-4 {
        padding-bottom: 1.5rem !important
      }

      .pb-lg-5 {
        padding-bottom: 3rem !important
      }

      .ps-lg-0 {
        padding-left: 0 !important
      }

      .ps-lg-1 {
        padding-left: .25rem !important
      }

      .ps-lg-2 {
        padding-left: .5rem !important
      }

      .ps-lg-3 {
        padding-left: 1rem !important
      }

      .ps-lg-4 {
        padding-left: 1.5rem !important
      }

      .ps-lg-5 {
        padding-left: 3rem !important
      }

      .text-lg-start {
        text-align: left !important
      }

      .text-lg-end {
        text-align: right !important
      }

      .text-lg-center {
        text-align: center !important
      }
    }

    @media (min-width: 1200px) {
      .float-xl-start {
        float: left !important
      }

      .float-xl-end {
        float: right !important
      }

      .float-xl-none {
        float: none !important
      }

      .d-xl-inline {
        display: inline !important
      }

      .d-xl-inline-block {
        display: inline-block !important
      }

      .d-xl-block {
        display: block !important
      }

      .d-xl-grid {
        display: grid !important
      }

      .d-xl-table {
        display: table !important
      }

      .d-xl-table-row {
        display: table-row !important
      }

      .d-xl-table-cell {
        display: table-cell !important
      }

      .d-xl-flex {
        display: flex !important
      }

      .d-xl-inline-flex {
        display: inline-flex !important
      }

      .d-xl-none {
        display: none !important
      }

      .flex-xl-fill {
        flex: 1 1 auto !important
      }

      .flex-xl-row {
        flex-direction: row !important
      }

      .flex-xl-column {
        flex-direction: column !important
      }

      .flex-xl-row-reverse {
        flex-direction: row-reverse !important
      }

      .flex-xl-column-reverse {
        flex-direction: column-reverse !important
      }

      .flex-xl-grow-0 {
        flex-grow: 0 !important
      }

      .flex-xl-grow-1 {
        flex-grow: 1 !important
      }

      .flex-xl-shrink-0 {
        flex-shrink: 0 !important
      }

      .flex-xl-shrink-1 {
        flex-shrink: 1 !important
      }

      .flex-xl-wrap {
        flex-wrap: wrap !important
      }

      .flex-xl-nowrap {
        flex-wrap: nowrap !important
      }

      .flex-xl-wrap-reverse {
        flex-wrap: wrap-reverse !important
      }

      .gap-xl-0 {
        gap: 0 !important
      }

      .gap-xl-1 {
        gap: .25rem !important
      }

      .gap-xl-2 {
        gap: .5rem !important
      }

      .gap-xl-3 {
        gap: 1rem !important
      }

      .gap-xl-4 {
        gap: 1.5rem !important
      }

      .gap-xl-5 {
        gap: 3rem !important
      }

      .justify-content-xl-start {
        justify-content: flex-start !important
      }

      .justify-content-xl-end {
        justify-content: flex-end !important
      }

      .justify-content-xl-center {
        justify-content: center !important
      }

      .justify-content-xl-between {
        justify-content: space-between !important
      }

      .justify-content-xl-around {
        justify-content: space-around !important
      }

      .justify-content-xl-evenly {
        justify-content: space-evenly !important
      }

      .align-items-xl-start {
        align-items: flex-start !important
      }

      .align-items-xl-end {
        align-items: flex-end !important
      }

      .align-items-xl-center {
        align-items: center !important
      }

      .align-items-xl-baseline {
        align-items: baseline !important
      }

      .align-items-xl-stretch {
        align-items: stretch !important
      }

      .align-content-xl-start {
        align-content: flex-start !important
      }

      .align-content-xl-end {
        align-content: flex-end !important
      }

      .align-content-xl-center {
        align-content: center !important
      }

      .align-content-xl-between {
        align-content: space-between !important
      }

      .align-content-xl-around {
        align-content: space-around !important
      }

      .align-content-xl-stretch {
        align-content: stretch !important
      }

      .align-self-xl-auto {
        align-self: auto !important
      }

      .align-self-xl-start {
        align-self: flex-start !important
      }

      .align-self-xl-end {
        align-self: flex-end !important
      }

      .align-self-xl-center {
        align-self: center !important
      }

      .align-self-xl-baseline {
        align-self: baseline !important
      }

      .align-self-xl-stretch {
        align-self: stretch !important
      }

      .order-xl-first {
        order: -1 !important
      }

      .order-xl-0 {
        order: 0 !important
      }

      .order-xl-1 {
        order: 1 !important
      }

      .order-xl-2 {
        order: 2 !important
      }

      .order-xl-3 {
        order: 3 !important
      }

      .order-xl-4 {
        order: 4 !important
      }

      .order-xl-5 {
        order: 5 !important
      }

      .order-xl-last {
        order: 6 !important
      }

      .m-xl-0 {
        margin: 0 !important
      }

      .m-xl-1 {
        margin: .25rem !important
      }

      .m-xl-2 {
        margin: .5rem !important
      }

      .m-xl-3 {
        margin: 1rem !important
      }

      .m-xl-4 {
        margin: 1.5rem !important
      }

      .m-xl-5 {
        margin: 3rem !important
      }

      .m-xl-auto {
        margin: auto !important
      }

      .mx-xl-0 {
        margin-right: 0 !important;
        margin-left: 0 !important
      }

      .mx-xl-1 {
        margin-right: .25rem !important;
        margin-left: .25rem !important
      }

      .mx-xl-2 {
        margin-right: .5rem !important;
        margin-left: .5rem !important
      }

      .mx-xl-3 {
        margin-right: 1rem !important;
        margin-left: 1rem !important
      }

      .mx-xl-4 {
        margin-right: 1.5rem !important;
        margin-left: 1.5rem !important
      }

      .mx-xl-5 {
        margin-right: 3rem !important;
        margin-left: 3rem !important
      }

      .mx-xl-auto {
        margin-right: auto !important;
        margin-left: auto !important
      }

      .my-xl-0 {
        margin-top: 0 !important;
        margin-bottom: 0 !important
      }

      .my-xl-1 {
        margin-top: .25rem !important;
        margin-bottom: .25rem !important
      }

      .my-xl-2 {
        margin-top: .5rem !important;
        margin-bottom: .5rem !important
      }

      .my-xl-3 {
        margin-top: 1rem !important;
        margin-bottom: 1rem !important
      }

      .my-xl-4 {
        margin-top: 1.5rem !important;
        margin-bottom: 1.5rem !important
      }

      .my-xl-5 {
        margin-top: 3rem !important;
        margin-bottom: 3rem !important
      }

      .my-xl-auto {
        margin-top: auto !important;
        margin-bottom: auto !important
      }

      .mt-xl-0 {
        margin-top: 0 !important
      }

      .mt-xl-1 {
        margin-top: .25rem !important
      }

      .mt-xl-2 {
        margin-top: .5rem !important
      }

      .mt-xl-3 {
        margin-top: 1rem !important
      }

      .mt-xl-4 {
        margin-top: 1.5rem !important
      }

      .mt-xl-5 {
        margin-top: 3rem !important
      }

      .mt-xl-auto {
        margin-top: auto !important
      }

      .me-xl-0 {
        margin-right: 0 !important
      }

      .me-xl-1 {
        margin-right: .25rem !important
      }

      .me-xl-2 {
        margin-right: .5rem !important
      }

      .me-xl-3 {
        margin-right: 1rem !important
      }

      .me-xl-4 {
        margin-right: 1.5rem !important
      }

      .me-xl-5 {
        margin-right: 3rem !important
      }

      .me-xl-auto {
        margin-right: auto !important
      }

      .mb-xl-0 {
        margin-bottom: 0 !important
      }

      .mb-xl-1 {
        margin-bottom: .25rem !important
      }

      .mb-xl-2 {
        margin-bottom: .5rem !important
      }

      .mb-xl-3 {
        margin-bottom: 1rem !important
      }

      .mb-xl-4 {
        margin-bottom: 1.5rem !important
      }

      .mb-xl-5 {
        margin-bottom: 3rem !important
      }

      .mb-xl-auto {
        margin-bottom: auto !important
      }

      .ms-xl-0 {
        margin-left: 0 !important
      }

      .ms-xl-1 {
        margin-left: .25rem !important
      }

      .ms-xl-2 {
        margin-left: .5rem !important
      }

      .ms-xl-3 {
        margin-left: 1rem !important
      }

      .ms-xl-4 {
        margin-left: 1.5rem !important
      }

      .ms-xl-5 {
        margin-left: 3rem !important
      }

      .ms-xl-auto {
        margin-left: auto !important
      }

      .p-xl-0 {
        padding: 0 !important
      }

      .p-xl-1 {
        padding: .25rem !important
      }

      .p-xl-2 {
        padding: .5rem !important
      }

      .p-xl-3 {
        padding: 1rem !important
      }

      .p-xl-4 {
        padding: 1.5rem !important
      }

      .p-xl-5 {
        padding: 3rem !important
      }

      .px-xl-0 {
        padding-right: 0 !important;
        padding-left: 0 !important
      }

      .px-xl-1 {
        padding-right: .25rem !important;
        padding-left: .25rem !important
      }

      .px-xl-2 {
        padding-right: .5rem !important;
        padding-left: .5rem !important
      }

      .px-xl-3 {
        padding-right: 1rem !important;
        padding-left: 1rem !important
      }

      .px-xl-4 {
        padding-right: 1.5rem !important;
        padding-left: 1.5rem !important
      }

      .px-xl-5 {
        padding-right: 3rem !important;
        padding-left: 3rem !important
      }

      .py-xl-0 {
        padding-top: 0 !important;
        padding-bottom: 0 !important
      }

      .py-xl-1 {
        padding-top: .25rem !important;
        padding-bottom: .25rem !important
      }

      .py-xl-2 {
        padding-top: .5rem !important;
        padding-bottom: .5rem !important
      }

      .py-xl-3 {
        padding-top: 1rem !important;
        padding-bottom: 1rem !important
      }

      .py-xl-4 {
        padding-top: 1.5rem !important;
        padding-bottom: 1.5rem !important
      }

      .py-xl-5 {
        padding-top: 3rem !important;
        padding-bottom: 3rem !important
      }

      .pt-xl-0 {
        padding-top: 0 !important
      }

      .pt-xl-1 {
        padding-top: .25rem !important
      }

      .pt-xl-2 {
        padding-top: .5rem !important
      }

      .pt-xl-3 {
        padding-top: 1rem !important
      }

      .pt-xl-4 {
        padding-top: 1.5rem !important
      }

      .pt-xl-5 {
        padding-top: 3rem !important
      }

      .pe-xl-0 {
        padding-right: 0 !important
      }

      .pe-xl-1 {
        padding-right: .25rem !important
      }

      .pe-xl-2 {
        padding-right: .5rem !important
      }

      .pe-xl-3 {
        padding-right: 1rem !important
      }

      .pe-xl-4 {
        padding-right: 1.5rem !important
      }

      .pe-xl-5 {
        padding-right: 3rem !important
      }

      .pb-xl-0 {
        padding-bottom: 0 !important
      }

      .pb-xl-1 {
        padding-bottom: .25rem !important
      }

      .pb-xl-2 {
        padding-bottom: .5rem !important
      }

      .pb-xl-3 {
        padding-bottom: 1rem !important
      }

      .pb-xl-4 {
        padding-bottom: 1.5rem !important
      }

      .pb-xl-5 {
        padding-bottom: 3rem !important
      }

      .ps-xl-0 {
        padding-left: 0 !important
      }

      .ps-xl-1 {
        padding-left: .25rem !important
      }

      .ps-xl-2 {
        padding-left: .5rem !important
      }

      .ps-xl-3 {
        padding-left: 1rem !important
      }

      .ps-xl-4 {
        padding-left: 1.5rem !important
      }

      .ps-xl-5 {
        padding-left: 3rem !important
      }

      .text-xl-start {
        text-align: left !important
      }

      .text-xl-end {
        text-align: right !important
      }

      .text-xl-center {
        text-align: center !important
      }
    }

    @media (min-width: 1400px) {
      .float-xxl-start {
        float: left !important
      }

      .float-xxl-end {
        float: right !important
      }

      .float-xxl-none {
        float: none !important
      }

      .d-xxl-inline {
        display: inline !important
      }

      .d-xxl-inline-block {
        display: inline-block !important
      }

      .d-xxl-block {
        display: block !important
      }

      .d-xxl-grid {
        display: grid !important
      }

      .d-xxl-table {
        display: table !important
      }

      .d-xxl-table-row {
        display: table-row !important
      }

      .d-xxl-table-cell {
        display: table-cell !important
      }

      .d-xxl-flex {
        display: flex !important
      }

      .d-xxl-inline-flex {
        display: inline-flex !important
      }

      .d-xxl-none {
        display: none !important
      }

      .flex-xxl-fill {
        flex: 1 1 auto !important
      }

      .flex-xxl-row {
        flex-direction: row !important
      }

      .flex-xxl-column {
        flex-direction: column !important
      }

      .flex-xxl-row-reverse {
        flex-direction: row-reverse !important
      }

      .flex-xxl-column-reverse {
        flex-direction: column-reverse !important
      }

      .flex-xxl-grow-0 {
        flex-grow: 0 !important
      }

      .flex-xxl-grow-1 {
        flex-grow: 1 !important
      }

      .flex-xxl-shrink-0 {
        flex-shrink: 0 !important
      }

      .flex-xxl-shrink-1 {
        flex-shrink: 1 !important
      }

      .flex-xxl-wrap {
        flex-wrap: wrap !important
      }

      .flex-xxl-nowrap {
        flex-wrap: nowrap !important
      }

      .flex-xxl-wrap-reverse {
        flex-wrap: wrap-reverse !important
      }

      .gap-xxl-0 {
        gap: 0 !important
      }

      .gap-xxl-1 {
        gap: .25rem !important
      }

      .gap-xxl-2 {
        gap: .5rem !important
      }

      .gap-xxl-3 {
        gap: 1rem !important
      }

      .gap-xxl-4 {
        gap: 1.5rem !important
      }

      .gap-xxl-5 {
        gap: 3rem !important
      }

      .justify-content-xxl-start {
        justify-content: flex-start !important
      }

      .justify-content-xxl-end {
        justify-content: flex-end !important
      }

      .justify-content-xxl-center {
        justify-content: center !important
      }

      .justify-content-xxl-between {
        justify-content: space-between !important
      }

      .justify-content-xxl-around {
        justify-content: space-around !important
      }

      .justify-content-xxl-evenly {
        justify-content: space-evenly !important
      }

      .align-items-xxl-start {
        align-items: flex-start !important
      }

      .align-items-xxl-end {
        align-items: flex-end !important
      }

      .align-items-xxl-center {
        align-items: center !important
      }

      .align-items-xxl-baseline {
        align-items: baseline !important
      }

      .align-items-xxl-stretch {
        align-items: stretch !important
      }

      .align-content-xxl-start {
        align-content: flex-start !important
      }

      .align-content-xxl-end {
        align-content: flex-end !important
      }

      .align-content-xxl-center {
        align-content: center !important
      }

      .align-content-xxl-between {
        align-content: space-between !important
      }

      .align-content-xxl-around {
        align-content: space-around !important
      }

      .align-content-xxl-stretch {
        align-content: stretch !important
      }

      .align-self-xxl-auto {
        align-self: auto !important
      }

      .align-self-xxl-start {
        align-self: flex-start !important
      }

      .align-self-xxl-end {
        align-self: flex-end !important
      }

      .align-self-xxl-center {
        align-self: center !important
      }

      .align-self-xxl-baseline {
        align-self: baseline !important
      }

      .align-self-xxl-stretch {
        align-self: stretch !important
      }

      .order-xxl-first {
        order: -1 !important
      }

      .order-xxl-0 {
        order: 0 !important
      }

      .order-xxl-1 {
        order: 1 !important
      }

      .order-xxl-2 {
        order: 2 !important
      }

      .order-xxl-3 {
        order: 3 !important
      }

      .order-xxl-4 {
        order: 4 !important
      }

      .order-xxl-5 {
        order: 5 !important
      }

      .order-xxl-last {
        order: 6 !important
      }

      .m-xxl-0 {
        margin: 0 !important
      }

      .m-xxl-1 {
        margin: .25rem !important
      }

      .m-xxl-2 {
        margin: .5rem !important
      }

      .m-xxl-3 {
        margin: 1rem !important
      }

      .m-xxl-4 {
        margin: 1.5rem !important
      }

      .m-xxl-5 {
        margin: 3rem !important
      }

      .m-xxl-auto {
        margin: auto !important
      }

      .mx-xxl-0 {
        margin-right: 0 !important;
        margin-left: 0 !important
      }

      .mx-xxl-1 {
        margin-right: .25rem !important;
        margin-left: .25rem !important
      }

      .mx-xxl-2 {
        margin-right: .5rem !important;
        margin-left: .5rem !important
      }

      .mx-xxl-3 {
        margin-right: 1rem !important;
        margin-left: 1rem !important
      }

      .mx-xxl-4 {
        margin-right: 1.5rem !important;
        margin-left: 1.5rem !important
      }

      .mx-xxl-5 {
        margin-right: 3rem !important;
        margin-left: 3rem !important
      }

      .mx-xxl-auto {
        margin-right: auto !important;
        margin-left: auto !important
      }

      .my-xxl-0 {
        margin-top: 0 !important;
        margin-bottom: 0 !important
      }

      .my-xxl-1 {
        margin-top: .25rem !important;
        margin-bottom: .25rem !important
      }

      .my-xxl-2 {
        margin-top: .5rem !important;
        margin-bottom: .5rem !important
      }

      .my-xxl-3 {
        margin-top: 1rem !important;
        margin-bottom: 1rem !important
      }

      .my-xxl-4 {
        margin-top: 1.5rem !important;
        margin-bottom: 1.5rem !important
      }

      .my-xxl-5 {
        margin-top: 3rem !important;
        margin-bottom: 3rem !important
      }

      .my-xxl-auto {
        margin-top: auto !important;
        margin-bottom: auto !important
      }

      .mt-xxl-0 {
        margin-top: 0 !important
      }

      .mt-xxl-1 {
        margin-top: .25rem !important
      }

      .mt-xxl-2 {
        margin-top: .5rem !important
      }

      .mt-xxl-3 {
        margin-top: 1rem !important
      }

      .mt-xxl-4 {
        margin-top: 1.5rem !important
      }

      .mt-xxl-5 {
        margin-top: 3rem !important
      }

      .mt-xxl-auto {
        margin-top: auto !important
      }

      .me-xxl-0 {
        margin-right: 0 !important
      }

      .me-xxl-1 {
        margin-right: .25rem !important
      }

      .me-xxl-2 {
        margin-right: .5rem !important
      }

      .me-xxl-3 {
        margin-right: 1rem !important
      }

      .me-xxl-4 {
        margin-right: 1.5rem !important
      }

      .me-xxl-5 {
        margin-right: 3rem !important
      }

      .me-xxl-auto {
        margin-right: auto !important
      }

      .mb-xxl-0 {
        margin-bottom: 0 !important
      }

      .mb-xxl-1 {
        margin-bottom: .25rem !important
      }

      .mb-xxl-2 {
        margin-bottom: .5rem !important
      }

      .mb-xxl-3 {
        margin-bottom: 1rem !important
      }

      .mb-xxl-4 {
        margin-bottom: 1.5rem !important
      }

      .mb-xxl-5 {
        margin-bottom: 3rem !important
      }

      .mb-xxl-auto {
        margin-bottom: auto !important
      }

      .ms-xxl-0 {
        margin-left: 0 !important
      }

      .ms-xxl-1 {
        margin-left: .25rem !important
      }

      .ms-xxl-2 {
        margin-left: .5rem !important
      }

      .ms-xxl-3 {
        margin-left: 1rem !important
      }

      .ms-xxl-4 {
        margin-left: 1.5rem !important
      }

      .ms-xxl-5 {
        margin-left: 3rem !important
      }

      .ms-xxl-auto {
        margin-left: auto !important
      }

      .p-xxl-0 {
        padding: 0 !important
      }

      .p-xxl-1 {
        padding: .25rem !important
      }

      .p-xxl-2 {
        padding: .5rem !important
      }

      .p-xxl-3 {
        padding: 1rem !important
      }

      .p-xxl-4 {
        padding: 1.5rem !important
      }

      .p-xxl-5 {
        padding: 3rem !important
      }

      .px-xxl-0 {
        padding-right: 0 !important;
        padding-left: 0 !important
      }

      .px-xxl-1 {
        padding-right: .25rem !important;
        padding-left: .25rem !important
      }

      .px-xxl-2 {
        padding-right: .5rem !important;
        padding-left: .5rem !important
      }

      .px-xxl-3 {
        padding-right: 1rem !important;
        padding-left: 1rem !important
      }

      .px-xxl-4 {
        padding-right: 1.5rem !important;
        padding-left: 1.5rem !important
      }

      .px-xxl-5 {
        padding-right: 3rem !important;
        padding-left: 3rem !important
      }

      .py-xxl-0 {
        padding-top: 0 !important;
        padding-bottom: 0 !important
      }

      .py-xxl-1 {
        padding-top: .25rem !important;
        padding-bottom: .25rem !important
      }

      .py-xxl-2 {
        padding-top: .5rem !important;
        padding-bottom: .5rem !important
      }

      .py-xxl-3 {
        padding-top: 1rem !important;
        padding-bottom: 1rem !important
      }

      .py-xxl-4 {
        padding-top: 1.5rem !important;
        padding-bottom: 1.5rem !important
      }

      .py-xxl-5 {
        padding-top: 3rem !important;
        padding-bottom: 3rem !important
      }

      .pt-xxl-0 {
        padding-top: 0 !important
      }

      .pt-xxl-1 {
        padding-top: .25rem !important
      }

      .pt-xxl-2 {
        padding-top: .5rem !important
      }

      .pt-xxl-3 {
        padding-top: 1rem !important
      }

      .pt-xxl-4 {
        padding-top: 1.5rem !important
      }

      .pt-xxl-5 {
        padding-top: 3rem !important
      }

      .pe-xxl-0 {
        padding-right: 0 !important
      }

      .pe-xxl-1 {
        padding-right: .25rem !important
      }

      .pe-xxl-2 {
        padding-right: .5rem !important
      }

      .pe-xxl-3 {
        padding-right: 1rem !important
      }

      .pe-xxl-4 {
        padding-right: 1.5rem !important
      }

      .pe-xxl-5 {
        padding-right: 3rem !important
      }

      .pb-xxl-0 {
        padding-bottom: 0 !important
      }

      .pb-xxl-1 {
        padding-bottom: .25rem !important
      }

      .pb-xxl-2 {
        padding-bottom: .5rem !important
      }

      .pb-xxl-3 {
        padding-bottom: 1rem !important
      }

      .pb-xxl-4 {
        padding-bottom: 1.5rem !important
      }

      .pb-xxl-5 {
        padding-bottom: 3rem !important
      }

      .ps-xxl-0 {
        padding-left: 0 !important
      }

      .ps-xxl-1 {
        padding-left: .25rem !important
      }

      .ps-xxl-2 {
        padding-left: .5rem !important
      }

      .ps-xxl-3 {
        padding-left: 1rem !important
      }

      .ps-xxl-4 {
        padding-left: 1.5rem !important
      }

      .ps-xxl-5 {
        padding-left: 3rem !important
      }

      .text-xxl-start {
        text-align: left !important
      }

      .text-xxl-end {
        text-align: right !important
      }

      .text-xxl-center {
        text-align: center !important
      }
    }

    @media (min-width: 1200px) {
      .fs-1 {
        font-size: 2.5rem !important
      }

      .fs-2 {
        font-size: 2rem !important
      }

      .fs-3 {
        font-size: 1.75rem !important
      }

      .fs-4 {
        font-size: 1.5rem !important
      }
    }

    @media print {
      .d-print-inline {
        display: inline !important
      }

      .d-print-inline-block {
        display: inline-block !important
      }

      .d-print-block {
        display: block !important
      }

      .d-print-grid {
        display: grid !important
      }

      .d-print-table {
        display: table !important
      }

      .d-print-table-row {
        display: table-row !important
      }

      .d-print-table-cell {
        display: table-cell !important
      }

      .d-print-flex {
        display: flex !important
      }

      .d-print-inline-flex {
        display: inline-flex !important
      }

      .d-print-none {
        display: none !important
      }
    }

    *,
    ::after,
    ::before {
      box-sizing: border-box
    }

    * {
      -webkit-font-smoothing: antialiased;
      -webkit-text-shadow: rgba(0, 0, 0, 0.01) 0 0 1px;
      text-shadow: rgba(0, 0, 0, 0.01) 0 0 1px
    }

    [type=button]:not(:disabled),
    [type=reset]:not(:disabled),
    [type=submit]:not(:disabled),
    button:not(:disabled) {
      cursor: pointer
    }

    article,
    aside,
    figure,
    footer,
    header,
    main,
    nav,
    section {
      display: block
    }

    html,
    body {
      width: 100%;
      margin: 0;
      font-family: "Nunito Sans", "Segoe UI", "Helvetica Neue", Helvetica, Roboto, Oxygen, Ubuntu, Cantarell, "Fira Sans", "Droid Sans", sans-serif;
      font-size: 14px;
      font-weight: 400;
      line-height: 1.5;
      text-align: left;
      background-color: #f8f8f8;
      color: #1c1f2b
    }

    html {
      scroll-behavior: smooth
    }

    body.dark-mode {
      color: #aaa
    }

    *,
    body {
      margin: 0;
      padding: 0
    }

    a {
      color: #222
    }

    body.dark-mode a {
      color: #ccc
    }

    p a {
      display: inline;
      position: relative;
      border-bottom: solid 1px #ffa07f;
      transition: all 200ms ease
    }

    a,
    a:hover,
    a:visited,
    a:active,
    a:link {
      text-decoration: none;
      -webkit-font-smoothing: antialiased;
      -webkit-text-shadow: rgba(0, 0, 0, 0.01) 0 0 1px;
      text-shadow: rgba(0, 0, 0, 0.01) 0 0 1px
    }

    ul {
      list-style: none;
      margin-bottom: 0px
    }

    p {
      margin-top: 0;
      margin-bottom: 1rem
    }

    ol ol,
    ol ul,
    ul ol,
    ul ul {
      margin-bottom: 0
    }

    b,
    strong {
      font-weight: bolder
    }

    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
      -webkit-font-smoothing: antialiased;
      -webkit-text-shadow: rgba(0, 0, 0, 0.01) 0 0 1px;
      text-shadow: rgba(0, 0, 0, 0.01) 0 0 1px
    }

    body.dark-mod h1,
    body.dark-mod h2,
    body.dark-mod h3,
    body.dark-mod h4,
    body.dark-mod h5,
    body.dark-mod h6 {
      color: #ccc !important
    }

    h3 {
      font-size: 1.75rem
    }

    i[class*="fa-"] {
      display: inline-block;
      width: 16px;
      text-align: center
    }

    img {
      max-width: 100%;
      border-style: none;
      outline: none !important
    }

    img,
    svg {
      vertical-align: middle
    }

    svg {
      display: inline-block;
      width: 1.2em;
      height: 1.2em;
      vertical-align: middle;
      pointer-events: none;
      stroke-width: 0;
      stroke: currentColor;
      fill: currentColor
    }

    button:focus {
      outline: none !important;
      border: none !important;
      -webkit-box-shadow: none !important;
      box-shadow: none !important
    }

    textarea:focus,
    input:focus {
      outline: none
    }

    textarea {
      height: unset
    }

    input {
      border-radius: 0;
      -webkit-appearance: none
    }

    input[type="search"] {
      -webkit-appearance: none
    }

    @media (min-width: 576px) {
      .container {
        max-width: 540px
      }
    }

    @media (min-width: 768px) {
      .container {
        max-width: 720px
      }
    }

    @media (min-width: 992px) {
      .container {
        max-width: 960px
      }
    }

    @media (min-width: 1200px) {
      .container {
        max-width: 1140px
      }
    }

    .w-100 {
      width: 100% !important
    }

    .p-5 {
      padding: 5px
    }

    .p-10 {
      padding: 10px
    }

    .pb-20 {
      padding-bottom: 20px
    }

    .pt-20 {
      padding-top: 10px
    }

    .mt-1 {
      margin-top: 5px !important
    }

    .mt-2 {
      margin-top: 10px !important
    }

    .gutters-10 {
      margin-right: 10px;
      margin-left: 10px
    }

    .text-center {
      text-align: center !important
    }

    .layout {
      display: flex;
      flex-direction: column;
      min-height: 100vh;
      flex: 1 1 auto;
      background: #f0f2f5
    }

    .layout .main-container {
      flex-grow: 1;
      display: flex;
      flex-direction: column;
      margin-bottom: 0.25rem !important;
      margin-top: 0.25rem !important
    }

    @media (max-width: 992px) {
      .container {
        max-width: 100% !important
      }

      .main-container .container {
        padding-left: 0px !important;
        padding-right: 0px !important
      }

      .row {
        margin-left: 0 !important;
        margin-right: 0 !important
      }
    }

    .grid-list {
      padding: 2.5px !important;
      width: 100%;
      display: flex;
      flex-wrap: wrap;
      flex-direction: row
    }

    .box {
      background: #fff;
      box-shadow: 0 2px 3px rgba(0, 0, 0, 0.1)
    }

    .shadow-box {
      box-shadow: 0 2px 4px 0 rgba(189, 189, 189, 0.3)
    }

    .section .section-body {
      background: white;
      padding: 10px 10px 0
    }

    .section .section-body.no-y-padding {
      padding-top: 0;
      padding-bottom: 0
    }

    .main__button {
      background: #3A6073;
      transition: background 0.2s;
      border: none;
      display: block;
      padding: 10px 10px;
      text-align: center;
      font-weight: 700;
      color: #fff !important;
      cursor: pointer;
      border-radius: 2px;
      -webkit-appearance: none !important;
      height: 40px;
      position: relative
    }

    @media (min-width: 768px) {
      .main__button:hover {
        color: #fff !important;
        filter: brightness(90%);
        text-decoration: none
      }
    }

    .main__button[disabled] {
      background-color: #d6d6d6 !important;
      border-color: #d6d6d6;
      box-shadow: none;
      color: #7a7a7a !important;
      cursor: not-allowed;
      pointer-events: none
    }

    .ad-box .section-body {
      padding: 0 !important
    }

    .container__left {
      padding-right: 2.5px
    }

    .container__right {
      padding-left: 2.5px
    }

    .hidden-sm {
      display: block
    }

    .hidden-xs {
      display: block
    }

    .hidden-md {
      display: block
    }

    .show-lg {
      display: none
    }

    @media (max-width: 1119px) {
      .show-lg {
        display: block
      }
    }

    @media (max-width: 992px) {
      .hidden-md {
        display: none !important
      }

      .container__right {
        margin-left: 0;
        margin-right: 0
      }

      .container__left {
        margin-left: 0;
        margin-right: 0
      }
    }

    @media (max-width: 768px) {
      .hidden-sm {
        display: none
      }

      .container__left {
        padding-right: 0;
        padding-left: 0
      }

      .container__right {
        padding-left: 0;
        padding-right: 0
      }
    }

    .grid-items {
      display: flex;
      flex-wrap: wrap;
      flex-direction: row
    }

    input:not([type="checkbox"]),
    textarea {
      width: 100%
    }

    body.dark-mode input:not([type="checkbox"]),
    body.dark-mode textarea {
      background-color: #17151b;
      color: #ccc;
      border: 1px solid #273e52
    }

    body.dark-mode input:not([type=checkbox]),
    body.dark-mode textarea {
      background: #020d18;
      color: #ccc;
      border: 1px solid #273e52
    }

    .dark-mode .layout {
      background: #020d18
    }

    .dark-mode .box {
      background: #06121e
    }

    .dark-mode .section-header {
      background: #06121e
    }

    .dark-mode .section .section-body {
      background: #06121e
    }

    @keyframes spinner {
      to {
        transform: rotate(360deg)
      }
    }

    .spinner {
      pointer-events: none;
      cursor: default;
      text-decoration: none;
      position: relative
    }

    .spinner:before {
      content: '';
      box-sizing: border-box;
      position: absolute;
      top: 50%;
      left: 50%;
      width: 20px;
      height: 20px;
      margin-top: -10px;
      margin-left: -10px;
      border-radius: 50%;
      border: 2px solid transparent;
      border-top-color: #93291E;
      border-bottom-color: #93291E;
      animation: spinner .8s ease infinite
    }

    .main__button.spinner {
      background-color: #7a7a7a;
      color: #333 !important
    }

    .nav-tabs {
      align-items: center
    }

    .nav-tabs,
    .nav-tabs .nav-link {
      border: unset;
      border: 1px solid #3A6073
    }

    .nav-item a {
      display: inline-block;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1;
      text-align: center;
      text-decoration: none;
      vertical-align: middle;
      position: relative
    }

    .nav-tabs a:hover::after,
    .nav-tabs a.active::after {
      content: "";
      position: absolute;
      top: 90%;
      left: 0;
      width: 100%;
      -webkit-transition: 0.3s;
      -o-transition: 0.3s;
      transition: 0.3s;
      border-top: 3px solid #3A6073
    }

    body.dark-mode .nav-tabs .nav-link {
      color: #4c5669 !important;
      background-color: transparent !important
    }

    body.dark-mode .nav-tabs .nav-link.active {
      color: #ccc !important
    }

    .bookmark-btn>i.fas.fa-heart {
      color: #f39834
    }

    ol,
    ul {
      padding-left: unset
    }

    .form-error {
      color: red;
      padding: 5px 0
    }

    iframe.vliIgnore {
      display: none !important
    }

    .spin {
      animation: spinner .8s ease infinite
    }

    .blinking {
      display: inline-block;
      padding: 3px;
      color: #e74c3c;
      font-size: .6rem;
      line-height: 1;
      font-weight: 500;
      -webkit-animation: live-icon 1s infinite;
      animation: live-icon 1s infinite;
      text-align: center;
      vertical-align: middle
    }

    @keyframes blinkingText {
      0% {
        color: red
      }

      49% {
        color: red
      }

      50% {
        color: transparent
      }

      99% {
        color: transparent
      }

      100% {
        color: red
      }
    }

    @-webkit-keyframes live-icon {
      0% {
        color: #3A6073
      }

      49% {
        color: #3A6073
      }

      50% {
        color: #e74c3c
      }
    }

    @keyframes live-icon {
      0% {
        color: #3A6073
      }

      49% {
        color: #3A6073
      }

      50% {
        color: #e74c3c
      }
    }

    .go-to-top {
      cursor: pointer;
      width: 32px;
      height: 32px;
      background-color: rgba(0, 146, 69, 0.7);
      color: #fff;
      font-size: 20px;
      text-align: center;
      position: fixed;
      bottom: 15px;
      z-index: 10;
      line-height: 1.4;
      -moz-transition: all .2s;
      -o-transition: all .2s;
      transition: all .2s;
      -webkit-transition: all .2s;
      right: 15px;
      -webkit-transform: translateY(-60%);
      -moz-transform: translateY(-60%);
      -ms-transform: translateY(-60%);
      -o-transform: translateY(-60%);
      visibility: hidden;
      opacity: 0
    }

    .go-to-top i {
      padding-top: 5px
    }

    .go-to-top.active {
      -webkit-transform: translateY(0);
      -moz-transform: translateY(0);
      -ms-transform: translateY(0);
      -o-transform: translateY(0);
      visibility: visible;
      opacity: 1;
      z-index: 1001
    }

    .go-to-top:hover {
      background-color: #40865e
    }

    .btn-bookmark {
      height: 100%
    }

    .dropdown {
      height: 100%
    }

    #bookmark-btn-holder {
      height: 100%
    }

    #bookmark-btn-holder .btn-bookmark {
      background: #c24229
    }

    .chapter__actions .btn-bookmark {
      height: 40px;
      width: 40px;
      line-height: 26px
    }

    .btn-dropdown {
      width: 40px;
      height: 40px;
      display: flex;
      justify-content: center;
      align-items: center
    }

    .btn-dropdown i {
      color: #eaab0c
    }

    @media (max-width: 576px) {
      .dropdown-item {
        padding: 0.45rem 1.5rem
      }
    }

    .chap-item h3,
    .chap-item h4 {
      font-size: unset !important;
      margin-bottom: unset !important;
      line-height: unset !important
    }

    .chapter-list>li>a:visited,
    .chap-item a:visited {
      color: #25aae1 !important
    }

    #comment-list-holder {
      position: relative;
      background: #0f2133
    }

    #comment-list-holder .cml-header {
      display: none;
      justify-content: space-between;
      padding: 0 10px;
      align-items: center
    }

    #comment-list-holder .cml-header .cml-close {
      cursor: pointer;
      width: 40px;
      height: 40px;
      line-height: 27px;
      text-align: center;
      background: transparent;
      font-size: 30px;
      color: #da1b60
    }

    body.show-comment #comment-list-holder {
      position: fixed;
      display: block;
      left: 0;
      right: 0;
      top: 0;
      margin: 0;
      bottom: 0;
      z-index: 1000
    }

    body.show-comment #comment-list-holder .cml-header {
      display: flex
    }

    body.show-comment #comment-list-holder #comment-section {
      position: absolute;
      padding: 10px;
      padding-top: 5px;
      top: 40px;
      left: 0;
      right: 0;
      bottom: 0;
      overflow: auto
    }

    @media screen and (min-width: 1024px) {
      body.show-comment #comment-list-holder {
        width: 500px;
        border-radius: 0;
        left: auto
      }
    }

    .btn-default {
      background: #3A6073;
      color: #fff
    }

    .btn-primary {
      color: #fff;
      background-color: #3A6073;
      border-color: #3A6073
    }

    .list {
      background-color: #020d18 !important
    }

    .list .row {
      margin-left: unset;
      margin-right: unset
    }

    .manga-list {
      background-color: #06121e !important;
      display: flex;
      flex-wrap: wrap
    }

    .main-list {
      display: flex;
      flex-wrap: wrap
    }

    .list-item {
      background-color: #06121e;
      margin-bottom: 5px;
      padding: 10px 0
    }

    .no-padding {
      padding: 0 !important
    }

    .discussion-item img {
      max-width: 80px !important
    }

    .discussion-item.sticky h4 a {
      color: #f60
    }

    .dropdown-item.disabled {
      position: relative
    }

    .modal .btn-close {
      color: #f2f2f2
    }

    .modal .modal-title {
      font-weight: 600
    }

    .modal .modal-header {
      color: #f2f2f2;
      border-bottom: 1px solid #273e52;
      padding: 1.2rem 1rem
    }

    .modal .modal-content {
      background-color: #0f2133;
      color: #f2f2f2
    }

    .modal .modal-body {
      padding: 2.2rem 1rem
    }

    .modal .modal-body label {
      color: #f2f2f2
    }

    .modal .modal-footer {
      border-top: 1px solid #273e52
    }

    .text-white {
      color: #fefefe
    }

    .btn:hover {
      color: #fff !important;
      filter: brightness(90%);
      text-decoration: none
    }

    .col-30 {
      width: 30%
    }

    .col-70 {
      width: 70%
    }

    @media (max-width: 768px) {

      .col-70,
      .col-30 {
        width: 100%
      }
    }

    .notice-box {
      background-color: gray;
      color: yellow;
      padding: 20px;
      margin: 10px
    }

    .tox .tox-dialog-wrap {
      z-index: 10000005 !important
    }

    .review-item {
      display: flex;
      justify-content: space-between;
      padding: 5px;
      border: 1px solid #a8a8a8;
      align-items: center;
      margin-bottom: 5px
    }

    .review-item span {
      font-size: 14px;
      color: #999;
      white-space: nowrap
    }

    .review-item img {
      max-width: 50px !important
    }

    .review-item .content {
      padding: 5px
    }

    #latest-reviews-holder,
    .review-list {
      background: #fff !important;
      margin: 0 10px
    }

    .modal-footer a {
      color: #ccc
    }

    .rating-view {
      padding: 5px 0 10px
    }

    .rating-view i {
      color: #fc9443
    }

    .comment-quote {
      display: flow-root;
      margin: .5em 0;
      margin-top: 0.5em;
      background: #e2e3e5;
      border: 1px solid #d3d5d7;
      border-left-color: #d3d5d7;
      border-left-style: solid;
      border-left-width: 1px;
      border-left: 3px solid #ff944d
    }

    .quote-title {
      padding: 6px 10px;
      font-size: 0.875rem;
      color: #ff944d !important;
      background: #e7e8e9
    }

    .quote-content {
      font-size: 0.875rem;
      position: relative;
      padding: 6px 10px;
      color: #15191d
    }

    .quote-content p {
      margin-bottom: unset !important
    }

    .quote-content img {
      max-width: 50px !important
    }

    .tab-content {
      padding: 10px 0 !important
    }

    .tabs .tab .name {
      padding: 2px 6px !important
    }

    .header {
      box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);
      left: 0;
      top: 0;
      right: 0
    }

    .header .top-bar {
      background: #fff;
      padding: 5px
    }

    body.dark-mode .header .top-bar {
      background: #0f2133
    }

    .header .top-bar #search {
      float: left;
      height: 32px;
      position: relative;
      width: 310px;
      margin-left: 10px
    }

    .header .top-bar #search .inner {
      overflow: hidden;
      height: 100%;
      width: 100%;
      position: relative;
      border: none
    }

    .header .top-bar #search input {
      width: 100%;
      height: 100%;
      border: 1px solid #d5d5d5;
      border-radius: 4px;
      transition: border-color 0.2s ease-in-out;
      padding: 4px 37px 4px 10px;
      font-family: "Nunito Sans", sans-serif;
      color: #555
    }

    body.dark-mode .header .top-bar #search input {
      border: 1px solid #273e52;
      color: #aaa
    }

    .header .top-bar i {
      color: #555
    }

    body.dark-mode .header .top-bar i {
      color: #fff
    }

    .header .top-bar .user-avatar {
      height: 30px;
      width: 30px;
      line-height: 30px;
      text-align: center;
      background: -webkit-gradient(linear, left top, right top, from(#ff8a00), to(#da1b60));
      color: #fff;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 60px;
      transition: all 0.2s ease
    }

    .header .top-bar .user-avatar i {
      font-size: 12px;
      color: #fff !important
    }

    .header .top-bar .m-bars {
      padding-left: 5px
    }

    .header .top-bar .m-bars .header__links-item:last-child {
      padding: 0 7px !important
    }

    .header .top-bar .advance-search {
      position: absolute;
      top: 6px;
      right: 0;
      padding: 0 10px
    }

    .header .bottom-bar {
      background: #3A6073
    }

    .dark-mode .layout .header .bottom-bar {
      background: #06121e
    }

    .header .container {
      position: relative
    }

    .header .container a {
      cursor: pointer
    }

    .header .container,
    .header .m-bars {
      display: flex;
      align-items: center;
      left: 0;
      justify-content: space-between
    }

    .header .m-bars .header__links-item:not(.user) {
      display: none
    }

    a.navbar-item {
      cursor: pointer;
      font-weight: 600;
      padding: unset
    }

    .hub {
      display: block;
      font-weight: bold;
      font-size: 20px;
      text-transform: uppercase
    }

    .hub span,
    .hub strong {
      line-height: 30px;
      font-weight: 800;
      background: -webkit-gradient(linear, left top, right top, from(#ff8a00), to(#da1b60));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      -webkit-box-decoration-break: clone
    }

    .hub span:nth-child(2) {
      margin-left: 2px;
      background: #3A6073;
      color: #eee;
      border-radius: 2px;
      padding: 1px 8px 2px 10px;
      display: inline-block
    }

    .header__links-list {
      display: flex;
      align-items: center
    }

    .header__links-item {
      display: inline-block
    }

    .header__links-item>a {
      font-size: 15px;
      font-weight: 600;
      color: #fff !important;
      position: relative;
      display: inline-block;
      line-height: 52px;
      padding: 0 15px;
      transition: all 0.2s ease
    }

    body.dark-mode .header__links-item>a {
      color: #eee !important
    }

    .header__links-item>a i {
      font-size: 14px
    }

    .header__links-item>a .fa-user {
      font-size: 16px
    }

    .top-bar .header__links-item>a {
      padding: 0 20px
    }

    .bottom-bar .header__links-item>a {
      line-height: 45px
    }

    .header__links-item.search,
    .header__links-item.hamburger {
      display: none
    }

    .header__links-item.dark-mode-settings {
      display: flex;
      justify-content: center;
      flex-direction: row;
      align-items: center;
      padding: 0 10px
    }

    .header__links-item.dark-mode-settings .text {
      color: #eee;
      text-transform: uppercase;
      font-size: 10px;
      padding-top: 0;
      display: block;
      margin-right: 5px
    }

    .header__links-item.dark-mode-settings .text i {
      font-size: 9px !important;
      width: 16px;
      padding: 0 2px
    }

    @media (min-width: 992px) {
      .header__links-item:hover>a {
        background: rgba(255, 255, 255, 0.1);
        color: #fff !important;
        text-decoration: none
      }

      .header__links-item:hover>a i {
        color: #3A6073
      }

      body.dark-mode .header__links-item:hover>a {
        background: #020d18;
        color: #3A6073 !important;
        position: relative
      }

      body.dark-mode .header .top-bar .header__links-item:hover>a {
        background: rgba(255, 255, 255, 0.1)
      }
    }

    @media (max-width: 768px) {
      .header__links-item>a {
        padding: 0 10px
      }
    }

    @media (max-width: 576px) {
      .header .m-bars .header__links-item:not(.user) {
        display: block
      }

      #search,
      .header__links-list {
        display: none
      }

      .header__links-item.search,
      .header__links-item.hamburger {
        display: block
      }

      .header__links-item.search a i,
      .header__links-item.hamburger a i {
        font-size: 16px
      }

      .top-bar .header__links-item>a {
        padding: 0 15px
      }
    }

    @media (max-width: 576px) {
      .header .container {
        padding-left: 5px;
        padding-right: 5px
      }
    }

    .header__links-item.has-menu {
      position: relative
    }

    .genres__wrapper {
      display: none;
      position: absolute;
      overflow: hidden;
      top: 45px;
      left: 0;
      width: 600px;
      z-index: 1000;
      text-align: left;
      padding: 20px 10px;
      transition: transform 0.3s, opacity 0.3s;
      background: #fff;
      box-shadow: 0px 10px 28.8px 1.2px rgba(0, 0, 0, 0.08);
      color: #3A6073
    }

    .genres__wrapper a:hover {
      color: #3A6073 !important
    }

    body.dark-mode .genres__wrapper {
      background: #020d18;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2)
    }

    .genres__wrapper li {
      float: left;
      width: 25%;
      line-height: 1em;
      margin-bottom: 5px
    }

    .genres__wrapper li a {
      color: #555;
      margin: 0 5px;
      padding: 7px 10px;
      display: block;
      font-size: 14px;
      font-weight: 600
    }

    body.dark-mode .genres__wrapper li a {
      color: #888
    }

    .genres__wrapper li:hover a {
      background: #eee;
      text-decoration: none
    }

    body.dark-mode .genres__wrapper li:hover a {
      color: #c4c4c4;
      background: #212029
    }

    .genres__wrapper.status,
    .genres__wrapper.types {
      width: 300px
    }

    .genres__wrapper.status li,
    .genres__wrapper.types li {
      width: 50%
    }

    .genres__wrapper.top {
      width: 350px
    }

    .genres__wrapper.top li {
      min-width: 15%;
      width: unset
    }

    .sidebar__menu .genres__wrapper.top {
      width: 300px
    }

    .header__links-item.has-menu:hover .genres__wrapper {
      display: block
    }

    @media (max-width: 992px) {
      .genres__wrapper {
        width: 500px
      }

      .genres__wrapper li {
        width: 33.3333333%
      }
    }

    .switch-container input[type="checkbox"].switch {
      position: absolute;
      opacity: 0
    }

    .switch-container input[type="checkbox"].switch+div {
      vertical-align: middle;
      width: 40px;
      height: 20px;
      border-radius: 999px;
      -webkit-transition-duration: 0.4s;
      transition-duration: 0.4s;
      -webkit-transition-property: background-color, box-shadow;
      transition-property: background-color, box-shadow;
      cursor: pointer;
      background-color: #1d1b26
    }

    body.dark-mode .switch-container input[type="checkbox"].switch+div {
      background-color: #fff
    }

    .switch-container input[type="checkbox"].switch:checked+div {
      width: 40px;
      background-position: 0 0;
      background-color: #57bb00
    }

    .switch-container input[type="checkbox"].switch+div {
      width: 40px;
      height: 20px
    }

    .switch-container input[type="checkbox"].switch+div>div {
      float: left;
      width: 20px;
      height: 20px;
      border-radius: inherit;
      background: #ffffff;
      -webkit-transition-timing-function: cubic-bezier(1, 0, 0, 1);
      transition-timing-function: cubic-bezier(1, 0, 0, 1);
      -webkit-transition-duration: 0.4s;
      transition-duration: 0.4s;
      -webkit-transition-property: transform, background-color;
      transition-property: transform, background-color;
      pointer-events: none;
      margin-top: 0;
      margin-left: 1px
    }

    body.dark-mode .switch-container input[type="checkbox"].switch+div>div {
      background-color: #0f2133
    }

    .switch-container input[type="checkbox"].switch:checked+div>div {
      -webkit-transform: translate3d(10px, 0, 0);
      transform: translate3d(10px, 0, 0)
    }

    .switch-container input[type="checkbox"].switch:checked+div>div {
      -webkit-transform: translate3d(20px, 0, 0);
      transform: translate3d(20px, 0, 0)
    }

    body.dark-mode input[type="checkbox"].switch+div {
      background-color: #fff
    }

    body.dark-mode input[type="checkbox"].switch+div>div {
      background-color: #3A6073
    }

    .novel__item {
      border-bottom: 1px solid #e8e8e8
    }

    body.dark-mode .novel__item {
      border-bottom: 1px solid #222
    }

    .novel__item-inner {
      position: relative;
      display: flex;
      flex-direction: row;
      overflow: hidden;
      height: 80px;
      padding: 10px
    }

    .novel__item-icon {
      display: flex;
      margin-right: 5px
    }

    .novel__item-icon a {
      display: block
    }

    .novel__item-icon img {
      width: 60px;
      min-width: 60px;
      height: 100%;
      object-fit: cover
    }

    .novel__item-meta {
      margin: 0;
      padding: 0;
      list-style: none;
      overflow: hidden
    }

    .novel__item-meta a {
      color: #4a4a4a;
      display: block;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap
    }

    body.dark-mode .novel__item-meta a {
      color: #ccc
    }

    .novel__item-meta .name {
      font-weight: 400;
      text-overflow: ellipsis;
      white-space: nowrap;
      margin-top: 5px;
      display: flex;
      flex-direction: column
    }

    .novel__item-meta .name h3 {
      font-size: 14px;
      margin-bottom: 3px
    }

    .novel__item-meta .info {
      list-style: none;
      display: flex;
      flex-direction: column
    }

    .novel__item-meta .info span {
      color: #9a9da2;
      text-overflow: ellipsis;
      white-space: nowrap;
      font-size: 12px;
      margin-top: 5px
    }

    .novel__item-meta a:hover {
      text-decoration: underline
    }

    @media (max-width: 578px) {
      .novel__item {
        border-right: none
      }
    }

    .suggestions {
      position: absolute;
      top: 34px;
      left: 0;
      right: 0;
      background: #fff;
      border-radius: 3px;
      box-shadow: 0 2px 3px rgba(0, 0, 0, 0.5);
      overflow: hidden;
      z-index: 9999
    }

    body.dark-mode .suggestions {
      background: #020d18;
      box-shadow: 0 4px 20px #000
    }

    .suggestions .view-all {
      padding: 7px;
      text-align: center;
      background: #3A6073;
      width: 100%;
      color: #fff;
      display: block
    }

    .suggestions .view-all:hover {
      text-decoration: none !important
    }

    #search-page .suggestions {
      z-index: 999;
      top: unset;
      position: relative;
      padding: 20px
    }

    #search-page .suggestions .novel__item .novel__item-inner {
      padding: 10px 0
    }

    @media (max-width: 768px) {
      #search-page .suggestions {
        padding: 10px
      }
    }

    #search.loading .spinner2 {
      display: block
    }

    .notifications-badge {
      position: absolute;
      top: 10px;
      right: 10px;
      font-size: 13px;
      color: red;
      line-height: 13px
    }

    .footer {
      width: 100%;
      margin: auto
    }

    #footer {
      background: #06121e;
      margin-top: auto
    }

    #footer .content {
      position: relative;
      padding: 20px 0
    }

    #footer .azlist {
      display: block;
      overflow: hidden;
      position: relative;
      margin-bottom: 10px
    }

    #footer .azlist .heading {
      color: #8a7da2
    }

    #footer .azlist .heading {
      font-family: "Nunito Sans", sans-serif;
      color: #aeaeae;
      margin-bottom: 15px
    }

    #footer .azlist .heading b {
      font-size: 1.5rem;
      display: inline-block;
      vertical-align: middle;
      margin-right: 15px;
      padding-right: 15px;
      position: relative;
      font-weight: 700
    }

    #footer .azlist ul {
      list-style: none;
      margin: 0;
      padding: 0
    }

    #footer .azlist ul li {
      float: left;
      margin-right: 8px;
      list-style: none;
      padding: 0
    }

    #footer .azlist ul li a {
      background: #3A6073;
      color: #ddd
    }

    #footer .azlist ul li a {
      display: block;
      text-align: center;
      margin-bottom: 5px;
      border-radius: 2px;
      width: 32px;
      padding-top: 1px
    }

    #footer .main {
      color: #888
    }

    #footer .main {
      font-family: "Nunito Sans", sans-serif;
      color: #ac85ef;
      margin-top: 25px;
      overflow: hidden
    }

    #footer .main .mainc {
      float: right;
      text-align: center
    }

    #footer div {
      color: #aeaeae
    }

    #footer .main a {
      color: #9687b1
    }

    .share-button {
      display: block;
      z-index: 9999;
      position: fixed;
      bottom: 16px;
      right: 16px;
      border: none;
      -moz-border-radius: 50%;
      -webkit-border-radius: 50%;
      animation-duration: 0.5s;
      cursor: pointer;
      height: 40px;
      width: 40px;
      background: #3A6073;
      background-image: url(data:image/svg+xml,%3Csvg%20width%3D%2232px%22%20height%3D%2232px%22%20viewBox%3D%220%200%2032%2032%22%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Ctitle%3Eshare%3C%2Ftitle%3E%3Cg%20stroke%3D%22none%22%20stroke-width%3D%221%22%20fill%3D%22none%22%20fill-rule%3D%22evenodd%22%3E%3Cg%20fill%3D%22%23FFFFFF%22%3E%3Cpath%20d%3D%22M26%2C13.4285714%20C26%2C13.6220248%2025.9293162%2C13.7894338%2025.7879464%2C13.9308036%20L20.0736607%2C19.6450893%20C19.932291%2C19.786459%2019.7648819%2C19.8571429%2019.5714286%2C19.8571429%20C19.3779752%2C19.8571429%2019.2105662%2C19.786459%2019.0691964%2C19.6450893%20C18.9278267%2C19.5037195%2018.8571429%2C19.3363105%2018.8571429%2C19.1428571%20L18.8571429%2C16.2857143%20L16.3571429%2C16.2857143%20C15.6279725%2C16.2857143%2014.9750773%2C16.3080355%2014.3984375%2C16.3526786%20C13.8217977%2C16.3973217%2013.2488868%2C16.477306%2012.6796875%2C16.5926339%20C12.1104882%2C16.7079619%2011.6157015%2C16.8660704%2011.1953125%2C17.0669643%20C10.7749235%2C17.2678581%2010.3824423%2C17.5264121%2010.0178571%2C17.8426339%20C9.65327199%2C18.1588557%209.35565592%2C18.534596%209.125%2C18.9698661%20C8.89434408%2C19.4051361%208.71391434%2C19.9203839%208.58370536%2C20.515625%20C8.45349637%2C21.1108661%208.38839286%2C21.7842224%208.38839286%2C22.5357143%20C8.38839286%2C22.9449425%208.40699386%2C23.4025272%208.44419643%2C23.9084821%20C8.44419643%2C23.9531252%208.45349693%2C24.0405499%208.47209821%2C24.1707589%20C8.4906995%2C24.3009679%208.5%2C24.3995532%208.5%2C24.4665179%20C8.5%2C24.5781256%208.46837829%2C24.6711306%208.40513393%2C24.7455357%20C8.34188956%2C24.8199408%208.25446484%2C24.8571429%208.14285714%2C24.8571429%20C8.02380893%2C24.8571429%207.9196433%2C24.7938994%207.83035714%2C24.6674107%20C7.77827355%2C24.6004461%207.72991094%2C24.5186017%207.68526786%2C24.421875%20C7.64062478%2C24.3251483%207.59040206%2C24.2135423%207.53459821%2C24.0870536%20C7.47879436%2C23.9605648%207.43973225%2C23.87128%207.41741071%2C23.8191964%20C6.47246551%2C21.6986501%206%2C20.0208395%206%2C18.7857143%20C6%2C17.3050521%206.19717065%2C16.0662252%206.59151786%2C15.0691964%20C7.79688103%2C12.0706695%2011.0520568%2C10.5714286%2016.3571429%2C10.5714286%20L18.8571429%2C10.5714286%20L18.8571429%2C7.71428571%20C18.8571429%2C7.52083237%2018.9278267%2C7.35342333%2019.0691964%2C7.21205357%20C19.2105662%2C7.07068382%2019.3779752%2C7%2019.5714286%2C7%20C19.7648819%2C7%2019.932291%2C7.07068382%2020.0736607%2C7.21205357%20L25.7879464%2C12.9263393%20C25.9293162%2C13.067709%2026%2C13.2351181%2026%2C13.4285714%20L26%2C13.4285714%20Z%22%3E%3C%2Fpath%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E);
      background-position: center;
      border-radius: 50%;
      box-shadow: 0 2px 10px 0 rgba(0, 0, 0, 0.35);
      text-align: center
    }

    .back-top {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      color: rgba(0, 0, 0, 0.65);
      font-size: 14px;
      line-height: 1.5;
      list-style: none;
      position: fixed;
      right: 20px;
      bottom: 20px;
      z-index: 10;
      width: 40px;
      height: 40px;
      cursor: pointer;
      display: none
    }

    .back-top.visible {
      display: block
    }

    .back-top-content {
      width: 40px;
      height: 40px;
      overflow: hidden;
      color: #fff;
      text-align: center;
      border-radius: 20px;
      transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
      background: #3A6073 !important;
      border: 1px solid #3A6073 !important
    }

    .back-top-icon {
      width: 14px;
      height: 16px;
      margin: 12px auto;
      background: url(data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAACQAAAAoCAYAAACWwljjAAAABGdBTUEAALGPC/xhBQAAAbtJREFUWAntmMtKw0AUhhMvS5cuxILgQlRUpIggIoKIIoigG1eC+AA+jo+i6FIXBfeuXIgoeKVeitVWJX5HWhhDksnUpp3FDPyZk3Nm5nycmZKkXhAEOXSA3lG7muTeRzmfy6HneUvIhnYkQK+Q9NhAA0Opg0vBEhjBKHiyb8iGMyQMOYuK41BcBSypAL+MYXSKjtFAW7EAGEO3qN4uMQbbAkXiSfRQJ1H6a+yhlkKRcAoVFYiweYNjtCVQJJpBz2GCiPt7fBOZQpFgDpUikse5HgnkM4Fi4QX0Fpc5wf9EbLqpUCy4jMoJSXWhFwbMNgWKhVbRhy5jirhs9fy/oFhgHVVTJEs7RLZ8sSEoJm6iz7SZDMbJ+/OKERQTttCXQRLToRUmrKWCYuA2+jbN0MB4OQobYShfdTCgn/sL1K36M7TLrN3n+758aPy2rrpR6+/od5E8tf/A1uLS9aId5T7J3CNYihkQ4D9PiMdMC7mp4rjB9kjFjZp8BlnVHJBuO1yFXIV0FdDF3RlyFdJVQBdv5AxVdIsq8apiZ2PyYO1EVykesGfZEESsCkweyR8MUW+V8uJ1gkYipmpdP1pm2aJVPEGzAAAAAElFTkSuQmCC) 100%/100% no-repeat
    }

    #mobile__sidebar-overlay {
      width: 100%;
      height: 100%;
      z-index: 997;
      top: 0;
      left: 0;
      position: fixed;
      background: rgba(0, 0, 0, 0.7);
      transition: all 0.5s
    }

    .fadeOut {
      opacity: 0;
      display: none
    }

    .fadeIn {
      opacity: 1;
      display: block
    }

    .mobile__sidebar {
      position: fixed;
      top: 0;
      bottom: 0;
      left: -60vw;
      width: 60vw;
      height: 100vh;
      overflow: auto;
      -webkit-overflow-scrolling: touch;
      transition: all 0.4s;
      z-index: 1000;
      display: none;
      background: #06121e
    }

    .mobile__sidebar.active {
      left: 0
    }

    @media (max-width: 992px) {
      .mobile__sidebar {
        display: flex;
        flex-direction: column
      }
    }

    @media (max-width: 576px) {
      .mobile__sidebar {
        width: 80vw;
        left: -80vw
      }
    }

    .sidebar__header {
      width: 100%;
      z-index: 11;
      background-color: #020d18;
      border-bottom: solid 2px #2d3033
    }

    .sidebar__header-logo {
      background-size: 80px 18px;
      display: block;
      padding: 20px 0 20px 20px
    }

    .sidebar__header-logo img {
      height: 40px
    }

    .sidebar__header-close {
      font-size: 15px;
      position: absolute;
      right: 0;
      color: #fff !important;
      height: 80px;
      line-height: 80px;
      width: 59px;
      text-align: center;
      transition: all 200ms ease;
      top: 0
    }

    .sidebar__header-close:hover {
      color: #60656a
    }

    .sidebar-breadcrumb {
      background-color: #020d18;
      color: #60656a;
      font-size: 10px;
      font-weight: 800;
      text-transform: uppercase;
      padding-left: 20px;
      padding-right: 20px;
      line-height: 45px;
      border-bottom: solid 1px #26292b;
      border-top: solid 1px #26262b
    }

    .sidebar-breadcrumb .dark-mode-settings {
      float: right
    }

    .sidebar__menu {
      margin-bottom: 0
    }

    .sidebar__menu li {
      font-weight: 400;
      list-style: none;
      line-height: 60px;
      font-size: 15px;
      margin-bottom: 0
    }

    .sidebar__sub-menu {
      max-height: 0;
      overflow: hidden;
      margin-bottom: 0;
      padding-left: 35px
    }

    .sidebar__sub-menu.active {
      max-height: 100%
    }

    .show-submenu .fa-plus {
      font-size: 11px !important
    }

    .sidebar__sub-menu .fa-last {
      margin-top: 23px;
      font-size: 11px !important;
      -ms-transform: rotate(45deg);
      -webkit-transform: rotate(45deg);
      transform: rotate(45deg);
      color: #c0392b;
      opacity: 1
    }

    .show-submenu-active {
      background-color: rgba(255, 255, 255, 0.05)
    }

    .submenu-item-active {
      opacity: 14 !important;
      font-weight: 400;
      font-size: 12px
    }

    .sidebar__sub-menu .fa-circle {
      position: absolute;
      left: 217px !important
    }

    .sidebar__sub-menu li {
      line-height: 35px;
      text-indent: 18px;
      font-size: 13px;
      padding: 3px 0
    }

    .sidebar__sub-menu li a {
      opacity: .7
    }

    .sidebar__sub-menu li i:first-child {
      padding-right: 30px
    }

    .sidebar__menu li a:hover {
      background-color: rgba(255, 255, 255, 0.05)
    }

    .sidebar__menu li a i:first-child {
      width: 13px;
      margin-right: 20px;
      font-size: 14px;
      text-align: center
    }

    .fa-last {
      width: 13px;
      position: absolute;
      text-align: center;
      margin-top: 25px;
      color: #fff;
      opacity: .5;
      right: 25px
    }

    .sidebar__menu li a {
      color: #fff !important;
      padding-left: 20px;
      padding-right: 30px;
      width: 100%;
      right: 0;
      display: block
    }

    .auth-content {
      flex-grow: 1;
      background: #fff
    }

    body.dark-mode .auth-content {
      background: #06121e
    }

    .auth-header {
      border: none;
      padding: 25px 40px 0;
      text-align: center;
      position: relative
    }

    .auth-header .auth-title {
      width: 100%
    }

    .auth-header .title {
      position: relative;
      font-weight: 600;
      font-size: 1.5rem;
      margin-bottom: 20px;
      text-align: center;
      display: inline-block;
      text-transform: uppercase;
      background: -webkit-gradient(linear, left top, right top, from(#ff8a00), to(#da1b60));
      background: linear-gradient(linear, left top, right top, from(#ff8a00), to(#da1b60));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      -webkit-box-decoration-break: clone
    }

    .auth-header p {
      color: #ccc
    }

    body.dark-mode .auth-header .close {
      color: #cccc
    }

    body.dark-mode .auth-header p {
      color: #ccc
    }

    .form-group {
      position: relative;
      margin-bottom: 15px
    }

    .form-group .fa {
      position: absolute;
      text-align: center;
      color: #8c8c8c;
      top: 8px;
      left: 7px;
      width: 12px;
      height: 12px
    }

    .auth-footer {
      display: flex;
      -ms-flex-wrap: wrap;
      flex-wrap: wrap;
      -ms-flex-align: center;
      align-items: center;
      -ms-flex-pack: end;
      justify-content: flex-end;
      padding: 0.75rem;
      border-top: 1px solid #dee2e6;
      border-bottom-right-radius: calc(0.3rem - 1px);
      border-bottom-left-radius: calc(0.3rem - 1px)
    }

    .auth-footer a {
      cursor: pointer
    }

    body.dark-mode .auth-footer {
      border-top: 1px solid #333
    }

    body.dark-mode .auth-footer a {
      color: #ccc !important
    }

    .form-control {
      display: block;
      width: 100%;
      height: 32px;
      padding: 6px 30px;
      font-size: 13px;
      line-height: 1.42857;
      color: #555;
      background-color: #eee;
      border: 1px solid #eee;
      border-radius: 3px;
      transition: border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s
    }

    body.dark-mode .form-control {
      background: #121117;
      border-color: #333;
      color: #888
    }

    .social-login {
      display: flex;
      justify-content: center;
      flex-direction: column;
      align-items: center;
      text-transform: uppercase
    }

    body.dark-mode .social-login p {
      color: #ccc !important
    }

    .social-buttons {
      padding: 5px 0
    }

    .social-buttons .main__button {
      display: inline;
      margin: 0 3px;
      -webkit-appearance: none !important
    }

    .social-buttons .main__button svg {
      height: 16px
    }

    .social-buttons .main__button.fb {
      background: #2d4486
    }

    .social-buttons .main__button.gg {
      background: #be2b1b
    }

    .social-buttons .main__button.twitter {
      background: #1d8def
    }

    .social-buttons .main__button.reddit {
      background: #FF5700
    }

    .reset-password {
      padding: 20px
    }

    .reset-password label {
      display: inline-block;
      text-transform: uppercase
    }

    #success-box {
      display: none;
      padding: 20px
    }

    #success-box h4 {
      font-size: 20px
    }

    #success-box .inner-box {
      padding: 20px;
      border: 1px solid #3A6073;
      font-size: 16px
    }

    #success-box.show {
      display: block
    }

    .overlay {
      position: fixed;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
      background: rgba(0, 0, 0, 0.7);
      transition: opacity 500ms;
      visibility: visible;
      opacity: 1
    }

    .overlay:target {
      visibility: visible;
      opacity: 1
    }

    .popup {
      margin: 70px auto;
      padding: 20px;
      background: #fff;
      border-radius: 5px;
      width: 30%;
      position: relative;
      transition: all 5s ease-in-out;
      z-index: 10000
    }

    .popup h2 {
      margin-top: 0;
      color: #333;
      font-family: Tahoma, Arial, sans-serif
    }

    .popup .close {
      position: absolute;
      top: 20px;
      right: 30px;
      transition: all 200ms;
      font-size: 30px;
      font-weight: bold;
      text-decoration: none;
      color: #333
    }

    .popup .close:hover {
      color: #06D85F
    }

    .popup .content {
      max-height: 30%;
      overflow: auto
    }

    #breadcrumbs-container {
      background: transparent;
      padding: 5px 0
    }

    #breadcrumbs-container::after {
      display: table
    }

    .breadcrumbs-wrapper {
      display: flex;
      flex-wrap: wrap;
      overflow: hidden;
      background: #fff;
      border-bottom: 1px solid #f5f5f5;
      padding: 7px 10px;
      text-transform: uppercase;
      font-weight: 700;
      -webkit-box-shadow: 0 1px 5px 0 rgba(0, 0, 0, 0.22);
      box-shadow: 0 1px 5px 0 rgba(0, 0, 0, 0.22);
      font-size: 13px;
      line-height: 24px
    }

    .breadcrumbs-wrapper .breadcrumbs-item {
      display: flex;
      line-height: 2;
      padding: 0;
      white-space: nowrap
    }

    .breadcrumbs-wrapper .breadcrumbs-item a {
      color: #666;
      height: 100%;
      overflow: hidden
    }

    .breadcrumbs-wrapper .breadcrumbs-item a i {
      position: relative;
      top: -1px;
      font-size: 11px
    }

    .breadcrumbs-wrapper .breadcrumbs-item a svg {
      padding: 0 2px;
      width: 17px !important
    }

    .breadcrumbs-wrapper .breadcrumbs-item a:hover {
      color: #3A6073;
      text-decoration: underline
    }

    body.dark-mode .breadcrumbs-wrapper {
      background: #06121e;
      border-bottom: none
    }

    body.dark-mode .breadcrumbs-wrapper a {
      color: #999
    }

    .breadcrumbs-wrapper .breadcrumbs-item:last-child span {
      text-overflow: ellipsis;
      overflow: hidden;
      display: block;
      white-space: nowrap;
      height: 100%;
      color: #888
    }

    body.dark-mode .breadcrumbs-wrapper .breadcrumbs-item:last-child span {
      color: #ccc
    }

    @media (max-width: 576px) {
      .breadcrumbs-wrapper {
        font-size: 12px
      }

      .book-details .breadcrumbs-item:not(:last-child):not(:first-child) {
        display: none
      }
    }

    html>iframe {
      margin-bottom: 45px
    }

    .qc-cmp2-container,
    #qc-cmp2-container {
      display: none !important
    }

    .section-body #protag-header {
      overflow: hidden !important;
      padding: 0 !important
    }

    .ads-mobile,
    .ads-desk {
      display: flex;
      justify-content: center;
      align-items: center
    }

    #protag-in_content,
    #protag-after_content,
    #protag-header,
    #protag-before_content {
      padding-top: 5px !important;
      padding-bottom: 5px !important
    }

    #protag-sticky-bottom .ps-absolute.ps-z-1000000.fill-current {
      background-color: #fff;
      top: -24px !important;
      left: -23px !important
    }

    #protag-sticky-bottom .ps-absolute.ps-z-1000000.fill-current svg {
      width: 23px !important;
      height: 23px !important
    }

    .ads-banner {
      max-width: 100%;
      align-items: center;
      display: flex;
      overflow: hidden;
      justify-content: center;
      padding-top: 10px;
      margin-bottom: 25px
    }

    .ads-banner #ads-banner-50,
    .ads-banner #ads-banner-250,
    .ads-banner #ads-banner-728 {
      max-width: 100%
    }

    .ads-iab {
      overflow: hidden
    }

    .ads-sidebar {
      max-width: 100%;
      overflow: hidden;
      padding: 5px 0
    }

    .ads-in-article {
      padding: 10px 0 20px 0
    }

    .adskeeper-header-banner {
      min-height: 254px
    }

    .ads-box {
      padding: 5px;
      width: 100%
    }

    .dark-mode .ads-box,
    .dark-mode .ads-banner-top,
    .dark-mode .ads-box {
      background: #06121e
    }

    .dark-mode #chapter-images .ads-box {
      background: #020d18 !important
    }

    #chapter-images .box {
      box-shadow: unset !important
    }

    @media (max-width: 576px) {
      .adskeeper-header-banner {
        min-height: 200px
      }
    }

    .ad-sidebar {
      position: fixed;
      z-index: 9;
      top: 235px
    }

    .ad-sidebar.right {
      right: calc((100% - 1130px)/2);
      right: -webkit-calc((100% - 1130px)/2);
      right: -ms-calc((100% - 1130px)/2);
      right: -moz-calc((100% - 1130px)/2);
      transform: translateX(100%);
      -webkit-transform: translateX(100%);
      -ms-transform: translateX(100%)
    }

    .ad-sidebar.left {
      left: calc((100% - 1130px)/2);
      left: -webkit-calc((100% - 1130px)/2);
      left: -ms-calc((100% - 1130px)/2);
      left: -moz-calc((100% - 1130px)/2);
      transform: translateX(-100%);
      -webkit-transform: translateX(-100%);
      -ms-transform: translateX(-100%);
      top: 120px
    }

    @media (max-width: 1280px) {
      .ad-sidebar {
        display: none
      }
    }

    .ads-sticky {
      position: fixed;
      bottom: 0px;
      left: 50%;
      text-align: center;
      margin: 0px 0px 0px -364px;
      z-index: 9999999;
      transition: bottom 0.75s ease 0s;
      background-color: #fff;
      border-top: 1px solid rgba(0, 0, 0, 0.8);
      border-right: none;
      border-bottom: none;
      border-left: none;
      border-image: initial;
      width: 728px;
      height: 90px
    }

    .ads-sticky .btn-close {
      background-color: rgba(0, 0, 0, 0.6);
      color: #fff;
      display: block;
      width: 20px;
      text-align: center;
      font-size: 14px;
      line-height: 20px;
      border-radius: 10%;
      font-family: sans-serif;
      position: absolute;
      top: -25px;
      right: 0px;
      cursor: pointer
    }

    .ads-sticky.hide {
      bottom: -110px
    }

    @media (max-width: 768px) {
      .ads-sticky {
        margin: 0px 0px 0px -160px;
        border: 1px solid rgba(0, 0, 0, 0.8);
        width: 320px;
        height: 50px
      }
    }

    body.tox-dialog__disable-scroll {
      overflow: unset !important
    }

    button:focus {
      outline: none;
      box-shadow: none
    }

    .tox-icon.tox-tbtn__icon-wrap img {
      width: 34px
    }

    .comment-box .btn {
      background: #3A6073;
      color: #fff;
      padding: 2px 10px
    }

    .comment-box .btn:hover {
      background: #3A6073
    }

    .comment-box .btn.cancel {
      background: #eaab0c
    }

    .comment-box .btn.cancel:hover {
      background: red
    }

    .comment-box .comment-error {
      display: none
    }

    .comment-box .comment-error.show {
      padding-top: 10px;
      color: red;
      display: block
    }

    .comment-box textarea {
      background: #fff !important;
      border-color: #fff !important
    }

    .comment-list {
      background: #fff !important;
      margin: 0 10px
    }

    .comment-item {
      padding: 5px 0 5px;
      position: relative;
      padding-left: 45px
    }

    .comment-item:after {
      clear: both;
      content: ' ';
      display: block
    }

    .comment-item .comment-summary {
      padding: 5px;
      border: 1px solid #d8d8d8;
      position: relative;
      color: #333
    }

    .comment-item .summary img {
      max-width: 100px !important
    }

    .comment-item div.author {
      overflow: hidden;
      display: flex;
      flex-direction: column;
      min-width: 50px;
      align-items: center;
      position: absolute;
      left: 0;
      top: 5px
    }

    .comment-item div.author span.avatar-letter {
      width: 40px;
      height: 40px;
      border-radius: 20px;
      text-align: center;
      line-height: 40px;
      font: 300 1.2em/110% Impact;
      text-transform: uppercase;
      color: #fff;
      display: flex;
      justify-content: center;
      align-items: center
    }

    .comment-item div.author>img {
      height: 40px;
      width: 40px;
      object-fit: cover;
      border-radius: 50%
    }

    .comment-item div.comment-info {
      margin-left: 5px;
      padding: 0 5px
    }

    .comment-replies .comment-item div.comment-info {
      padding-right: 0
    }

    .author-name {
      font-weight: 600;
      color: #03f;
      font-size: 13px
    }

    .comment-item .anonymous,
    .comment-item .member,
    .comment-item .mod {
      background: #f93;
      padding: 1px 4px;
      color: #fff;
      font-size: 11px;
      font-weight: 400;
      border-radius: 3px;
      display: inline-block
    }

    .comment-item.my-comment .comment-summary {
      background: #ddd !important
    }

    .comment-item .author-type {
      font-size: 9px;
      margin-top: 5px
    }

    .comment-item .member {
      background: 0 0;
      border: 1px solid #3A6073;
      color: #3A6073
    }

    .comment-item .mod {
      background: 0 0;
      border: 1px solid #fb434a;
      color: #fb434a;
      font-size: 11px
    }

    .comment-item .anonymous {
      background: 0 0;
      border: 1px solid #999;
      color: #999
    }

    .comment-item abbr {
      border-style: none;
      font-size: 11px;
      border: none;
      color: #999;
      margin: 4px 0 3px 0;
      padding: 4px 0 0 5px;
      white-space: nowrap
    }

    .comment-box .user-info {
      padding: 10px 0;
      display: flex;
      align-items: center;
      flex-wrap: wrap
    }

    .comment-box .user-info .main__button {
      height: 32px
    }

    .comment-box input[type=text],
    .comment-box input[type=email] {
      margin: 5px 5px 5px 0;
      width: 38%;
      padding: 7px 2%;
      border: 1px solid #bbb !important;
      border-radius: 3px;
      -moz-border-radius: 3px;
      -webkit-border-radius: 3px;
      -webkit-box-shadow: 0 1px 1px #fff;
      text-shadow: 0 0 1px #fff;
      overflow: visible;
      -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
      box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
      -webkit-transition: border-color ease-in-out .15s, -webkit-box-shadow ease-in-out .15s;
      -o-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
      transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
      background: #f8f8f8 !important;
      color: #0f161a !important
    }

    .comment-summary div {
      word-wrap: break-word
    }

    .comment-summary .summary {
      padding-top: 7px
    }

    .comment-summary .summary p {
      overflow-wrap: break-word
    }

    .comment-summary .summary a {
      color: #007bff !important
    }

    .reaction-btn {
      background: 0 0;
      padding: 2px 2px;
      font-size: 10px;
      color: #209cee;
      display: inline-block;
      cursor: pointer
    }

    .reaction-btn img {
      width: 30px;
      border-radius: 50%
    }

    .reaction-btn {
      display: flex !important;
      justify-content: center;
      align-items: center
    }

    .reaction-btn span {
      display: block;
      width: 24px;
      height: 24px;
      background-repeat: no-repeat !important;
      background-size: 100% 100% !important;
      -webkit-background-size: 100% 100% !important;
      -khtml-background-size: 100% 100% !important;
      -moz-background-size: 100% 100% !important
    }

    .reaction-btn.like span {
      background: url("/static/common/images/kiss_icon.png")
    }

    .reaction-btn.dislike span {
      background: url("/static/common/images/angry_icon.png")
    }

    .reaction-btn.liked span {
      background: url("/static/common/images/kiss_icon_active.png")
    }

    .reaction-btn.disliked span {
      background: url("/static/common/images/angry_icon_active.png")
    }

    .reaction-btn:hover img,
    .reaction-btn:hover span {
      animation: spinner .8s ease infinite
    }

    .reaction-btn.dislike .reaction-count {
      color: red
    }

    .comment-tools {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0 !important
    }

    .comment-tools .comment-reactions {
      float: right;
      display: flex;
      justify-content: end;
      align-items: center
    }

    .reply-btn {
      margin: 5px 0;
      background: 0 0;
      padding: 2px 10px;
      border: 1px solid #209cee;
      color: #209cee !important;
      font-size: 11px;
      display: inline-block;
      cursor: pointer
    }

    .reply-btn:hover {
      background: #3A6073;
      border: 1px solid #3A6073;
      color: #fff
    }

    .reply-tools {
      display: flex;
      flex-direction: column
    }

    .comment-reply {
      display: block;
      padding: 3px 4px;
      background: green;
      color: #fff;
      margin: 5px 0 0;
      -moz-border-radius: 3px;
      -webkit-border-radius: 3px;
      -khtml-border-radius: 3px;
      border-radius: 3px;
      font-weight: 700;
      font-size: 10px;
      cursor: pointer
    }

    .comment-reply:hover {
      background: #00f
    }

    .mention {
      font-weight: bold;
      color: #03f
    }

    .invisible {
      display: none;
      pointer-events: none
    }

    .reply-tools .btn {
      padding: 7px 10px
    }

    .reply-list {
      height: 100%;
      transition: all 0.3s
    }

    .reply-list.show {
      height: 100%;
      display: block
    }

    .reply-list.hide {
      height: 0;
      display: none
    }

    .reply-box-visible .comment-info {
      overflow: hidden
    }

    .comment-report {
      display: none;
      color: #ee2c74;
      font-size: 12px;
      cursor: pointer;
      margin-left: 7px
    }

    .comment-chapter {
      color: #4e7af3;
      font-style: italic;
      font-size: 12px;
      margin-left: 7px
    }

    a.comment-chapter {
      text-decoration: underline
    }

    a.comment-chapter:hover {
      text-decoration: none
    }

    .comment-info:active>.comment-summary>.comment-report,
    .comment-info:hover>.comment-summary>.comment-report {
      display: inline-block
    }

    .comment-item .shortened.shortened {
      max-height: 150px;
      position: relative
    }

    .comment-item .shortened.shortened:before {
      position: absolute;
      content: '';
      display: block;
      left: 0;
      right: 0;
      bottom: 0;
      height: 20px;
      background: linear-gradient(rgba(255, 255, 255, 0), #fff)
    }

    @media (max-width: 576px) {
      .comment-item div.comment-info {
        margin-left: 0
      }

      .comment-item div.author {
        padding-left: 3px
      }

      .comment-item div.author span.avatar-letter {
        width: 30px;
        height: 30px;
        border-radius: 15px;
        line-height: 30px
      }

      .comment-item .author-type {
        font-size: 7px
      }
    }

    .spoiler {
      border-radius: 5px;
      margin-top: 5px;
      margin-bottom: 5px
    }

    .spoiler-toggle {
      font-weight: bold;
      padding: 5px;
      font-size: 12px;
      color: #ff0000;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      text-decoration: none;
      cursor: pointer;
      border: 1px solid transparent;
      border-top-color: transparent;
      border-right-color: transparent;
      border-bottom-color: transparent;
      border-left-color: transparent;
      white-space: nowrap;
      -webkit-transition: background-color .125s ease, border-color .125s ease, color .125s ease;
      transition: background-color .125s ease, border-color .125s ease, color .125s ease;
      font-size: 0.875rem;
      border-radius: 4px;
      padding-top: 5px;
      padding-right: 10px;
      padding-bottom: 5px;
      padding-left: 10px;
      text-align: center;
      color: #dce7f5;
      background: #23497c;
      border-color: #295590 #1d3d68 #1d3d68 #295590
    }

    .spoiler-text {
      margin-top: 5px;
      padding: 15px;
      display: none;
      border-left: 3px solid #ff944d;
      background: #e2e3e5
    }

    .show-spoiler .spoiler-text {
      display: block !important
    }

    .signature {
      font-size: 0.80rem;
      color: #8f9193;
      margin-top: 10px;
      border-top: 1px solid #cbcdd0;
      padding-top: 3px
    }

    .signature img {
      max-width: 50px !important
    }

    .signature p {
      margin-bottom: unset !important
    }

    .msgbox-area {
      max-height: 100%;
      position: fixed;
      bottom: 15px;
      left: 20px;
      right: 20px;
      z-index: 10000003
    }

    .msgbox-area .msgbox-box {
      font-size: inherit;
      color: #fff;
      background-color: rgba(40, 167, 69, 0.9);
      padding: 18px 20px;
      margin: 0 0 15px;
      display: flex;
      align-items: center;
      position: relative;
      border-radius: 12px;
      box-shadow: 0 10px 15px rgba(0, 0, 0, 0.65);
      transition: opacity 300ms ease-in
    }

    .msgbox-area .msgbox-box.msgbox-box-hide {
      opacity: 0
    }

    .msgbox-area .msgbox-box:last-child {
      margin: 0
    }

    .msgbox-area .msgbox-box.error {
      background-color: rgba(220, 58, 69, 0.9)
    }

    .msgbox-area .msgbox-content {
      flex-shrink: 1
    }

    .msgbox-area .msgbox-close {
      color: #fff;
      font-weight: bold;
      text-decoration: none;
      margin: 0 0 0 20px;
      flex-grow: 0;
      flex-shrink: 0;
      position: relative;
      transition: text-shadow 225ms ease-out
    }

    .msgbox-area .msgbox-close:hover {
      text-shadow: 0 0 3px #efefef
    }

    @media (min-width: 481px) and (max-width: 767px) {
      .msgbox-area {
        left: 80px;
        right: 80px
      }
    }

    @media (min-width: 768px) {
      .msgbox-area {
        width: 480px;
        height: 0;
        top: 15px;
        left: auto;
        right: 15px
      }
    }

    .msgbox-area {
      font-size: 16px
    }

    .msgbox-message-container {
      text-align: center;
      width: 100vw;
      height: 100vh;
      padding: 20px;
      box-sizing: border-box;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column
    }

    .msgbox-message-container h1,
    .msgbox-message-container h3 {
      margin: 10px 20px
    }

    .msgbox-message-container p {
      margin: 5px 20px
    }

    .msgbox-message-button {
      font-size: 18px;
      font-weight: bold;
      font-family: inherit;
      color: white;
      background-color: #1476ff;
      width: 250px;
      border: solid 2px #005de0;
      padding: 10px 20px;
      cursor: pointer;
      outline: none;
      box-shadow: 0 5px #005de0;
      transition: background-color 100ms ease-out, box-shadow 100ms ease-out, transform 100ms ease-out
    }

    .msgbox-message-button:hover,
    .msgbox-message-button:focus,
    .msgbox-message-button:active {
      background-color: #2e85ff
    }

    .msgbox-message-button:active {
      background-color: #0068fa;
      box-shadow: 0 0 #005de0;
      transform: translateY(5px)
    }

    .paginator {
      align-items: center;
      display: block;
      padding: 15px 0
    }

    .link {
      display: inline-flex;
      border: 1px solid #aaa;
      border-radius: 4px;
      font-size: 14px;
      padding: 5px .75em;
      cursor: pointer;
      justify-content: center;
      text-align: center;
      vertical-align: top;
      align-items: center;
      -webkit-appearance: none;
      white-space: nowrap;
      background-color: #fff
    }

    body.dark-mode .link {
      color: #222
    }

    .paginator .link {
      display: inline-block
    }

    .link[disabled] {
      background-color: #d6d6d6;
      border-color: #d6d6d6;
      box-shadow: none;
      color: #7a7a7a !important;
      cursor: not-allowed
    }

    .paginator .link:not(:last-child):not(.is-fullwidth) {
      margin-right: .5rem
    }

    .link:hover,
    .link.active {
      background-color: #3A6073;
      color: #fff !important;
      border-color: transparent;
      box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12)
    }

    .tabs {
      position: relative;
      display: flex
    }

    .tabs .tab {
      height: 30px;
      padding-top: 10px;
      margin-bottom: 5px;
      cursor: pointer;
      overflow: hidden;
      font-weight: bold;
      font-size: 11px;
      *padding-top: 0
    }

    .tabs .tab .name {
      background: #3A6073;
      display: block;
      padding: 2px 10px;
      line-height: 10px;
      position: relative;
      font-size: 11px;
      height: 20px;
      transition: all .1s;
      transition-delay: 0s;
      transition-timing-function: linear;
      -moz-transition: all .1s;
      -moz-transition-delay: 0s;
      -moz-transition-timing-function: linear;
      -webkit-transition: all .1s;
      transition-timing-function: ease;
      transition-delay: 0s;
      -webkit-transition-delay: 0s;
      -webkit-transition-timing-function: linear;
      *padding: 10px;
      color: #ccc;
      text-align: center
    }

    .tabs .tab.active .name {
      background: #eaab0c;
      color: #1d1b26
    }

    .tabs .tab.active .name::before {
      border-bottom-color: #eaab0c
    }

    .tabs .tab .name::before {
      border-bottom: 10px solid #3A6073;
      border-bottom-color: #3A6073;
      border-left: 10px solid transparent;
      top: -19px;
      left: -1px
    }

    .tabs .tab .name::before,
    .tabs .tab .name::after {
      transition: all .1s;
      transition-delay: 0s;
      transition-timing-function: linear;
      -moz-transition: all .1s;
      -moz-transition-delay: 0s;
      -moz-transition-timing-function: linear;
      -webkit-transition: all .1s;
      transition-timing-function: ease;
      transition-delay: 0s;
      -webkit-transition-delay: 0s;
      -webkit-transition-timing-function: linear;
      content: "";
      display: block;
      width: 100%;
      height: 10px;
      position: absolute;
      box-sizing: initial
    }

    .tabs .tab+.tab {
      margin-left: 10px
    }

    .tab-panel {
      display: none;
      visibility: hidden
    }

    .tab-panel.active {
      display: block;
      visibility: visible
    }

    .top-list .tabs .tab .name {
      width: 60px
    }

    .nav-link {
      margin: 5px 0;
      border: solid 1px #333;
      width: 100%
    }

    body.dark-mode .nav-link {
      border-color: #777;
      color: #777
    }

    .nav-link:hover {
      background: #3A6073;
      color: #fff !important;
      border: 1px solid #3A6073 !important
    }

    .nav-link.active {
      background: #3A6073 !important;
      border-color: #3A6073 !important
    }

    body.dark-mode .nav-link.active {
      color: #fff
    }

    .tab-content {
      padding: 20px
    }

    body.dark-mode .tab-content .section-title h2 {
      color: #ccc
    }

    @media (max-width: 768px) {
      .tab-content {
        padding: 10px
      }
    }

    .sort-view {
      display: flex;
      justify-content: flex-end;
      padding: 20px 10px
    }

    .sort-options {
      display: flex;
      flex-wrap: wrap
    }

    .sort-options a {
      color: #ccc;
      background-color: #3A6073;
      border-color: #3A6073;
      padding: 7px 10px;
      font-weight: bold;
      text-transform: uppercase;
      font-size: 11px;
      margin: 2px
    }

    .sort-options a.active {
      background: #eaab0c;
      color: #1d1b26;
      pointer-events: none
    }

    @media (max-width: 576px) {
      .sort-view {
        padding: 20px 7px;
        flex-wrap: wrap
      }

      .sort-options a {
        padding: 7px 5px;
        font-size: 10px
      }
    }

    .section-header {
      width: 100%;
      background: #fbfbfb;
      border-bottom: 1px solid #e4e9f0;
      display: flex;
      justify-content: space-between;
      padding: 10px 0;
      align-items: center
    }

    .section-header .title {
      height: 100%;
      display: flex;
      align-items: center;
      color: #ccc
    }

    .section-header .title span {
      font-size: 17px;
      font-weight: 700;
      padding-left: 10px;
      margin-bottom: 0;
      display: block;
      overflow: hidden;
      text-overflow: ellipsis;
      text-transform: uppercase;
      background: -webkit-gradient(linear, left top, right top, from(#ff8a00), to(#da1b60));
      background: linear-gradient(linear, left top, right top, from(#ff8a00), to(#da1b60));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      -webkit-box-decoration-break: clone
    }

    .section-header .right-icon {
      color: #ccc;
      float: right;
      right: 2px;
      font-style: italic;
      padding-right: 5px;
      font-size: 12px
    }

    .section-header .right-icon i svg {
      margin-bottom: 3px
    }

    .section-header .right-icon:hover {
      color: #3A6073
    }

    .section-header .btn {
      margin-right: 10px;
      background-color: #3A6073
    }

    .section-header .filter {
      cursor: pointer;
      padding: 3px 20px
    }

    .section-header .filter i {
      font-size: 18px
    }

    .section-header .filter:hover i {
      color: #0c5460
    }

    .section-header .sorting {
      display: flex;
      align-items: center;
      padding: 0 5px
    }

    .section-header .sorting ul {
      float: right;
      border-left: 1px solid #3A6073
    }

    .section-header .sorting ul li {
      float: left;
      border: 1px solid #3A6073;
      border-left-color: #24cd77;
      border-left-style: solid;
      border-left-width: 1px;
      border-left: none;
      line-height: 25px
    }

    .section-header .sorting ul li a {
      padding: 0 13px;
      color: #666;
      font-size: 13px;
      display: block;
      transition: all 0.2s ease-in-out
    }

    .section-header .sorting ul li a:hover {
      background: #3A6073;
      color: #fff !important
    }

    .section-header .sorting ul li .selected {
      background: #3A6073;
      color: #fff
    }

    .section-header .title h1,
    .section-header .title h2 {
      font-size: 20px;
      background: -webkit-gradient(linear, left top, right top, from(#ff8a00), to(#da1b60));
      background: linear-gradient(linear, left top, right top, from(#ff8a00), to(#da1b60));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      -webkit-box-decoration-break: clone;
      padding-left: 10px
    }

    @media (max-width: 576px) {

      .section-header .title h1,
      .section-header .title h2 {
        font-size: 17px
      }
    }

    .dark-mode .section-header {
      border-bottom: 1px solid #020d18
    }

    #breadcrumbs-container {
      background: transparent;
      padding: 5px 0
    }

    #breadcrumbs-container::after {
      display: table
    }

    .breadcrumbs-wrapper {
      display: flex;
      flex-wrap: wrap;
      overflow: hidden;
      background: #fff;
      border-bottom: 1px solid #f5f5f5;
      padding: 7px 10px;
      text-transform: uppercase;
      font-weight: 700;
      -webkit-box-shadow: 0 1px 5px 0 rgba(0, 0, 0, 0.22);
      box-shadow: 0 1px 5px 0 rgba(0, 0, 0, 0.22);
      font-size: 13px;
      line-height: 24px
    }

    .breadcrumbs-wrapper .breadcrumbs-item {
      display: flex;
      line-height: 2;
      padding: 0;
      white-space: nowrap
    }

    .breadcrumbs-wrapper .breadcrumbs-item a {
      color: #666;
      height: 100%;
      overflow: hidden
    }

    .breadcrumbs-wrapper .breadcrumbs-item a i {
      position: relative;
      top: -1px;
      font-size: 11px
    }

    .breadcrumbs-wrapper .breadcrumbs-item a svg {
      padding: 0 2px;
      width: 17px !important
    }

    .breadcrumbs-wrapper .breadcrumbs-item a:hover {
      color: #3A6073;
      text-decoration: underline
    }

    body.dark-mode .breadcrumbs-wrapper {
      background: #06121e;
      border-bottom: none
    }

    body.dark-mode .breadcrumbs-wrapper a {
      color: #999
    }

    .breadcrumbs-wrapper .breadcrumbs-item:last-child span {
      text-overflow: ellipsis;
      overflow: hidden;
      display: block;
      white-space: nowrap;
      height: 100%;
      color: #888
    }

    body.dark-mode .breadcrumbs-wrapper .breadcrumbs-item:last-child span {
      color: #ccc
    }

    @media (max-width: 576px) {
      .breadcrumbs-wrapper {
        font-size: 12px
      }

      .book-details .breadcrumbs-item:not(:last-child):not(:first-child) {
        display: none
      }
    }

    .paginator {
      align-items: center;
      display: block;
      padding: 15px 0
    }

    .link {
      display: inline-flex;
      border: 1px solid #aaa;
      border-radius: 4px;
      font-size: 14px;
      padding: 5px .75em;
      cursor: pointer;
      justify-content: center;
      text-align: center;
      vertical-align: top;
      align-items: center;
      -webkit-appearance: none;
      white-space: nowrap;
      background-color: #fff
    }

    body.dark-mode .link {
      color: #222
    }

    .paginator .link {
      display: inline-block
    }

    .link[disabled] {
      background-color: #d6d6d6;
      border-color: #d6d6d6;
      box-shadow: none;
      color: #7a7a7a !important;
      cursor: not-allowed
    }

    .paginator .link:not(:last-child):not(.is-fullwidth) {
      margin-right: .5rem
    }

    .link:hover,
    .link.active {
      background-color: #3A6073;
      color: #fff !important;
      border-color: transparent;
      box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12)
    }

    .rating-view {
      padding: 3px 0
    }

    body.dark-mode .rating-view * {
      color: #e43603 !important;
      height: 16px
    }

    .rating-view .fa,
    .rating-view .far,
    .rating-view .fas {
      color: #e43603;
      display: flex;
      font-size: 11px
    }

    .rating-view svg {
      vertical-align: unset
    }

    .rating-view span {
      margin-right: 5px
    }

    .rating-view.rateable a {
      cursor: pointer
    }

    .rating-view.rateable i {
      width: 24px;
      height: 24px
    }

    .rating-popup-wrapper {
      position: fixed;
      width: 100%;
      height: 100%;
      opacity: 1;
      z-index: 9999;
      text-align: center;
      overflow: hidden;
      overflow-y: auto;
      margin: 0;
      top: 0;
      scroll-behavior: smooth
    }

    .rating-popup-wrapper .close-popup {
      display: block;
      width: 30px;
      height: 30px;
      cursor: pointer;
      position: absolute;
      right: 12px;
      top: 12px;
      color: #fff;
      z-index: 999999;
      -webkit-border-radius: 50%;
      border-radius: 50%;
      background-color: #3A6073;
      padding: 3px;
      -webkit-transition: all .3s ease-in-out;
      transition: all .3s ease-in-out
    }

    .rating-popup-wrapper .close-popup:hover {
      -webkit-transform: rotate(180deg);
      transform: rotate(180deg)
    }

    .rating-popup-wrapper .inner {
      width: 70%;
      max-width: 500px;
      height: 200px;
      position: relative;
      display: inline-block;
      align-items: center;
      background-color: #fff;
      min-height: 0;
      border-radius: 10px;
      top: -100px
    }

    .rating-popup-wrapper::before {
      content: '';
      position: relative;
      display: inline-block;
      width: auto;
      height: 100%;
      vertical-align: middle
    }

    @media screen and (max-width: 1100px) {
      .rating-popup-wrapper .inner {
        margin: 30px 0 50px
      }
    }

    .rating-popup-wrapper .close-popup {
      top: -12px;
      right: -12px;
      color: #3A6073;
      background-color: #fff
    }

    @media screen and (min-width: 1100px) {
      .popup-content .close-popup:hover {
        background-color: #3A6073;
        color: #fff !important
      }
    }

    @media screen and (max-width: 1100px) {
      .rating-popup-wrapper .close-popup {
        top: -15px;
        right: -10px;
        padding: 5px;
        border-radius: 50%
      }
    }

    .rating-popup-wrapper span {
      width: 100%;
      height: 100%;
      position: fixed;
      left: 0;
      top: 0;
      z-index: 1
    }

    .rating-popup-wrapper::after,
    .rating-popup-wrapper::before {
      content: '';
      position: relative;
      display: inline-block;
      width: auto;
      height: 100%;
      vertical-align: middle
    }

    .rating-container {
      height: 100%;
      width: 100%;
      display: none
    }

    .rating-overlay-dark {
      background-color: rgba(21, 22, 26, 0.8);
      height: 100%;
      width: 100%;
      position: fixed;
      left: 0;
      bottom: 0;
      -webkit-transition: all .5s ease-in-out;
      transition: all .5s ease-in-out;
      z-index: 999;
      opacity: 0
    }

    .rating-container.show {
      display: block
    }

    .rating-container.show .rating-overlay-dark {
      opacity: 1
    }

    .rating-container.show .rating-popup-wrapper .inner {
      -webkit-animation-name: fadeInUp;
      animation-name: fadeInUp;
      animation-duration: 1s;
      animation-fill-mode: forwards
    }

    .rating-overlay-dark {
      overflow: hidden
    }

    .close-popup svg {
      width: 100%;
      height: 100%;
      display: block
    }

    @-webkit-keyframes fadeInUp {
      0% {
        opacity: 0;
        -webkit-transform: translate3d(0, 100px, 0);
        transform: translate3d(0, 100px, 0)
      }

      100% {
        opacity: 1;
        -webkit-transform: translate3d(0, 0, 0);
        transform: translate3d(0, 0, 0)
      }
    }

    @keyframes fadeInUp {
      0% {
        opacity: 0;
        -webkit-transform: translate3d(0, 100px, 0);
        transform: translate3d(0, 100px, 0)
      }

      100% {
        opacity: 1;
        -webkit-transform: translate3d(0, 0, 0);
        transform: translate3d(0, 0, 0)
      }
    }

    @-webkit-keyframes fadeInDown {
      0% {
        opacity: 0;
        -webkit-transform: translate3d(0, -100px, 0);
        transform: translate3d(0, -100px, 0)
      }

      100% {
        opacity: 1;
        -webkit-transform: translate3d(0, 0, 0);
        transform: translate3d(0, 0, 0)
      }
    }

    @keyframes fadeInDown {
      0% {
        opacity: 0;
        -webkit-transform: translate3d(0, -100px, 0);
        transform: translate3d(0, -100px, 0)
      }

      100% {
        opacity: 1;
        -webkit-transform: translate3d(0, 0, 0);
        transform: translate3d(0, 0, 0)
      }
    }

    .rating-popup .rating {
      float: left
    }

    .rating-popup .rating:not(:checked)>input {
      clip: rect(0, 0, 0, 0);
      opacity: 0;
      height: 0;
      width: 0;
      margin: 0;
      padding: 0;
      position: fixed;
      top: 0
    }

    .rating-popup .rating:not(:checked)>label {
      float: right;
      width: 1.3em;
      padding: 0 0.1em;
      overflow: hidden;
      white-space: nowrap;
      cursor: pointer;
      font-size: 200%;
      line-height: 1.2;
      color: #ddd;
      text-shadow: 1px 1px #bbb, 2px 2px #666, 0.1em 0.1em 0.2em rgba(0, 0, 0, 0.5)
    }

    .rating-popup .rating:not(:checked)>label:before {
      content: "★ "
    }

    .rating-popup .rating>input:checked~label {
      color: #f70;
      text-shadow: 1px 1px #c60, 2px 2px #940, 0.1em 0.1em 0.2em rgba(0, 0, 0, 0.5)
    }

    .rating-popup .rating:not(:checked)>label:hover,
    .rating-popup .rating:not(:checked)>label:hover~label {
      color: gold;
      text-shadow: 1px 1px goldenrod, 2px 2px #b57340, 0.1em 0.1em 0.2em rgba(0, 0, 0, 0.5)
    }

    .rating-popup .rating>input:checked+label:hover,
    .rating-popup .rating>input:checked+label:hover~label,
    .rating-popup .rating>input:checked~label:hover,
    .rating-popup .rating>input:checked~label:hover~label,
    .rating-popup .rating>label:hover~input:checked~label {
      color: #ea0;
      text-shadow: 1px 1px goldenrod, 2px 2px #b57340, 0.1em 0.1em 0.2em rgba(0, 0, 0, 0.5)
    }

    .rating-popup .rating>label:active {
      position: relative;
      top: 2px;
      left: 2px
    }

    .rating-popup .clearfix:before,
    .rating-popup .clearfix:after {
      content: " ";
      display: table
    }

    .rating-popup .clearfix:after {
      clear: both
    }

    .rating-popup .clearfix {
      *zoom: 1
    }

    .rating-popup #status,
    .rating-popup button {
      margin: 10px 0
    }

    .rating-popup button {
      margin-top: 10px;
      padding: 5px;
      border: none;
      background-color: #3A6073;
      color: #fff
    }

    .rating-popup #rating-form {
      display: flex;
      align-items: center;
      flex-direction: column;
      margin-top: 25px
    }

    .top-list {
      padding: 0 5px 10px 5px
    }

    .top-list .tabs .tab .name {
      width: 80px
    }

    .top-list ._hr {
      display: inline-block;
      width: 0;
      height: 1em;
      margin: 0;
      vertical-align: middle;
      border-left: 2px solid #b7b7b7
    }

    .top-list .nav-tabs .nav-item {
      width: 32% !important
    }

    .top-list .nav-tabs .nav-item .nav-link {
      width: 100%
    }

    .top-item {
      position: relative;
      overflow: hidden;
      padding: 5px 5px
    }

    .top-item h3 {
      margin-bottom: 0;
      overflow: hidden
    }

    .top-item h3 a {
      display: block;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap
    }

    .top-item h3:hover a {
      text-decoration: underline !important
    }

    .top-item .inner {
      position: relative;
      height: 100%;
      display: flex;
      flex-direction: row;
      align-items: center
    }

    .top-item .inner .rank {
      width: 40px;
      text-align: center;
      font-size: 18px;
      padding-right: 7px
    }

    .top-item .inner .rank.r1 {
      color: #e74c3c;
      font-size: 20px
    }

    .top-item .inner .rank.r2 {
      color: #5eb949;
      font-size: 20px
    }

    .top-item .inner .rank.r3 {
      color: #5cabb8;
      font-size: 20px
    }

    .top-item .inner .thumb {
      display: inline-block;
      position: relative;
      width: 40px;
      height: 60px;
      min-width: 40px;
      border-radius: 2px;
      overflow: hidden
    }

    .top-item .inner .thumb img {
      display: block;
      width: 100%;
      height: 100%;
      transition: all .3s ease-in-out;
      object-fit: cover
    }

    .top-item .inner .meta {
      padding: 5px 5px 5px 10px;
      width: 100%;
      display: flex;
      flex-direction: column;
      overflow: hidden
    }

    .top-item .inner .meta .title {
      margin-bottom: 5px
    }

    .top-item .inner .meta .title a {
      font-size: 14px;
      color: #3A6073
    }

    body.dark-mode .top-item .inner .meta .title a {
      color: #ccc
    }

    .top-item .inner .meta .chap-item {
      display: flex;
      flex-direction: row;
      align-items: center;
      font-size: 9px;
      font-weight: 500;
      margin: 0;
      text-transform: uppercase
    }

    .top-item .inner .meta .chap-item i {
      width: 10px !important
    }

    .top-item .inner .meta .chap-item svg {
      width: 5px;
      margin-bottom: 2px
    }

    .top-item .inner .meta .chap-item a {
      color: #003555;
      font-size: 11px
    }

    body.dark-mode .top-item .inner .meta .chap-item a {
      color: #777
    }

    .top-item {
      width: 100%
    }

    @media (max-width: 768px) {
      .top-list {
        padding: 0 10px
      }
    }

    .social_share_wrapper {
      width: 100%;
      padding: 10px;
      display: inline-block
    }

    .social_share_wrapper a {
      display: inline-block;
      overflow: hidden;
      border-radius: 3px;
      float: left;
      margin-right: 5px;
      margin-bottom: 10px
    }

    .social_share_wrapper .count_facebook {
      background: #334c88 none
    }

    .social_share_wrapper .count_twitter {
      background: #0092cc none
    }

    .social_share_wrapper .count_linkin {
      background: #0f699b none
    }

    .social_share_wrapper .count_reddit {
      background-color: #ff7b00
    }

    .social_share_wrapper .count_linkin {
      background: #0f699b none
    }

    .social_share_wrapper .count_facebook .fab {
      background: #3a579a none
    }

    .social_share_wrapper .count_twitter .fab {
      background: #00abf0 none
    }

    .social_share_wrapper .count_linkin .fab {
      background: #127bb6 none
    }

    .social_share_wrapper .count_reddit .fab {
      background: #ff4500 none
    }

    .social_share_wrapper .count_linkin .fab {
      background: #127bb6 none
    }

    .social_share_wrapper .fab {
      width: 30px;
      height: 30px;
      line-height: 30px;
      color: #fff;
      font-size: 14px;
      text-align: center
    }

    .social_share_wrapper a>span {
      width: 85px;
      display: inline-block;
      color: #fff;
      text-align: center
    }

    @media screen and (max-width: 576px) {
      .social_share_wrapper a>span {
        display: none
      }

      .social_share_wrapper .fab {
        width: 40px;
        height: 40px;
        line-height: 40px
      }
    }

    .main-container.details {
      margin-top: 0 !important
    }

    .box-info {
      padding: 10px;
      background: #1c1c1c
    }

    .book-info {
      display: flex
    }

    .book-details .cover {
      width: 30%;
      margin-right: 5px;
      display: flex;
      flex-direction: column;
      padding: 0;
      position: relative
    }

    .book-details .cover .img-cover {
      padding: 10px 10px 10px 10px;
      position: absolute;
      top: 0;
      right: 0;
      left: 0;
      height: 100%;
      max-height: 430px
    }

    .book-details .cover img {
      border-radius: 5px;
      object-fit: cover;
      width: 100%;
      min-height: 267px;
      height: 100%
    }

    .book-details .cover .read-box {
      position: absolute;
      justify-content: space-between;
      display: flex;
      width: 100%;
      padding: 10px 15px;
      bottom: 5px;
      right: 0;
      left: 0;
      min-height: 50px
    }

    .book-details .cover .read-box .btn-read {
      width: 75%;
      background: #eaab0c;
      color: #fff
    }

    .book-details .cover .read-box .btn-bookmark {
      background: #c24229
    }

    .book-details .cover .read-box .btn-bookmark:hover i {
      color: #fff
    }

    .book-details .cover .read-box a:hover {
      background-position: 100% 0;
      moz-transition: all .4s ease-in-out;
      -o-transition: all .4s ease-in-out;
      -webkit-transition: all .4s ease-in-out;
      transition: all .4s ease-in-out
    }

    .book-details .detail {
      align-self: baseline;
      width: 70%;
      min-height: 287px
    }

    .book-details .detail .name {
      padding: 10px
    }

    .book-details .detail h1 {
      font-size: 20px;
      margin-bottom: 10px;
      color: #ccc;
      font-weight: 700;
      background: -webkit-gradient(linear, left top, right top, from(#ff8a00), to(#da1b60));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      -webkit-box-decoration-break: clone
    }

    .book-details .detail h2 {
      font-size: 12px
    }

    .book-details .detail a {
      text-decoration: none;
      border-bottom: none;
      color: #25aae1 !important;
      padding-right: 5px
    }

    .book-details .detail .meta p {
      margin-bottom: 7px
    }

    .book-details .detail .meta p strong {
      font-size: 15px
    }

    .book-details .detail .rating i {
      color: #fdae01;
      margin-right: 10px;
      font-size: 22px
    }

    .book-details .detail .rating .score {
      cursor: pointer;
      font-size: 18px
    }

    .book-details .summary .content {
      max-height: 100px;
      overflow: hidden
    }

    .book-details .summary .readmore {
      display: none
    }

    .latest-chapters {
      display: flex;
      flex-direction: column
    }

    .latest-chapters a {
      color: #25aae1 !important;
      padding: 7px 10px
    }

    .chapters-wrapper {
      display: flex;
      flex-direction: column
    }

    .chapters-wrapper .tab {
      width: 100px
    }

    .left-sidebar {
      padding-left: 5px
    }

    .left-sidebar .tab-content {
      margin-top: 15px !important
    }

    @media (max-width: 576px) {
      .book-info {
        flex-wrap: wrap
      }

      .book-info .cover,
      .book-info .detail {
        width: 100%
      }

      .book-info .cover {
        margin-right: 0
      }

      .book-info .cover .img-cover {
        position: relative
      }

      .book-info .cover img {
        border-radius: 0
      }

      .left-sidebar {
        padding-left: 0
      }
    }

    .details {
      background: #fff
    }

    body.dark-mode .details {
      background: #121212
    }

    .details .details-inner {
      padding-top: 50px
    }

    .readmore {
      text-transform: uppercase;
      text-align: center;
      width: 100%;
      font-weight: 600;
      padding: 10px;
      transition: max-height 0.25s ease-in
    }

    .readmore span {
      display: inline-block;
      line-height: 40px;
      cursor: pointer
    }

    .readmore span:hover {
      color: #0c5460
    }

    #chapters {
      padding: 10px;
      position: relative
    }

    #chapters.loading:after {
      content: '\A';
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      background: rgba(0, 0, 0, 0.4);
      opacity: 1;
      transition: opacity 0.5s;
      -webkit-transition: opacity 0.5s;
      -moz-transition: opacity 0.5s
    }

    #chapters.loading .spinner2 {
      display: block
    }

    #chapter-list {
      max-height: 260px;
      overflow: hidden
    }

    #chapters.loaded #chapter-list {
      max-height: 410px;
      overflow-y: auto;
      width: 100%
    }

    #chapters.loaded .readmore {
      display: none
    }

    #chapters.loaded .spinner2 {
      display: none
    }

    #chapters .chapter-list .chapter-new {
      position: absolute;
      top: 7px;
      right: 7px;
      font-size: 8px !important
    }

    #chapters .chapter-list li {
      padding: 12px 7px;
      position: relative;
      background-color: #f5f5f5
    }

    #chapters .chapter-list a {
      display: flex;
      text-decoration: none;
      font-size: 12px;
      align-items: center;
      color: #111319
    }

    #chapters .chapter-list a div {
      display: flex;
      flex-direction: column;
      width: 95%
    }

    #chapters .chapter-list a .chapter-no {
      -ms-flex-preferred-size: 15%;
      flex-basis: 15%;
      -ms-flex-negative: 0;
      flex-shrink: 0
    }

    #chapters .chapter-list a .chapter-title {
      font-weight: 600;
      -o-text-overflow: ellipsis;
      text-overflow: ellipsis;
      white-space: nowrap;
      overflow: hidden;
      text-transform: uppercase
    }

    #chapters .chapter-list a .chapter-update {
      font-size: 0.675rem;
      color: #868686;
      margin-top: 5px
    }

    .jump-index {
      display: flex;
      padding: 10px 0;
      align-items: center;
      flex-wrap: wrap
    }

    .jump-index .index-list {
      display: flex;
      padding: 10px 0;
      align-items: center;
      flex-wrap: wrap;
      text-align: center
    }

    .jump-index .index-list span {
      width: 51px;
      height: 38px;
      margin: 2.5px;
      font-weight: 600;
      font-size: 12px;
      cursor: pointer;
      text-align: center;
      line-height: 38px;
      background-color: #c5c5c5;
      color: #444
    }

    body.dark-mode .jump-index .index-list span {
      background-color: #020d18;
      color: #ccc
    }

    #chapter-list::-webkit-scrollbar {
      width: 16px
    }

    #chapter-list::-webkit-scrollbar-track {
      background-color: #dddd
    }

    #chapter-list::-webkit-scrollbar-thumb {
      background-color: #0f2133
    }

    body.dark-mode #chapters .chapter-list li {
      background-color: #020d18
    }

    body.dark-mode #chapters .chapter-list li a {
      color: #aaa
    }

    body.dark-mode #chapters .chapter-list li:nth-child(4n),
    body.dark-mode #chapters .chapter-list li:nth-child(4n-1) {
      background-color: #020d18
    }

    body.dark-mode #novel #chapter {
      -webkit-box-shadow: none;
      box-shadow: none
    }

    #chapters .chapter-list li:hover {
      background-color: rgba(0, 0, 0, 0.1);
      cursor: pointer
    }

    body.dark-mode #chapters .chapter-list li:hover {
      background-color: rgba(255, 255, 255, 0.1)
    }

    #chapters .chapter-list {
      display: grid;
      grid-template-columns: repeat(2, minmax(0, 1fr));
      grid-column-gap: 5px;
      grid-row-gap: 5px;
      flex-shrink: 1;
      flex-grow: 1;
      flex-basis: auto
    }

    @media screen and (min-width: 768px) {
      #chapters .chapter-list {
        grid-template-columns: repeat(3, minmax(0, 1fr))
      }

      #chapters .chapter-list a {
        font-size: 12px;
        position: relative
      }

      #chapters .chapter-list a:hover .chapter-title {
        text-decoration: underline
      }

      .chapter-content {
        padding: 40px 30px 50px;
        position: relative
      }
    }

    @media (max-width: 365px) {
      #chapters .chapter-list a {
        font-size: 10px
      }
    }

    @media (max-width: 576px) {
      #chapters .chapter-list a .chapter-no {
        -ms-flex-preferred-size: 12%;
        flex-basis: 12%
      }
    }

    .score-board {
      display: flex
    }

    .score-board .rate-view {
      margin-right: 10px;
      display: flex;
      align-items: center;
      flex-direction: column
    }

    .score-board .rate-view span.rating {
      font-size: 2.5rem;
      font-weight: 900;
      color: yellow
    }

    .score-board .art-item {
      display: flex;
      align-items: center
    }

    .score-board .art-item div {
      opacity: .8
    }

    .score-board .art-item progress {
      margin: 0 5px
    }
  </style>
  <link href="//cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.2/css/all.min.css" rel="stylesheet" type="text/css">
  <script async="" src="https://accounts.google.com/gsi/client"></script>
  <script async="" src="/static/dist/js/bundle.min.js?v=8.2"></script>
  <meta http-equiv="origin-trial"
    content="A+N5HpM5gDAUeupaWw3J2yuMrpgH0IC7KtFHAqtmHkW8Vr+dPpJWuOpMNIRh3ybxyoIUKlvDQs7+VGPfYdQ/qQUAAABxeyJvcmlnaW4iOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb206NDQzIiwiZmVhdHVyZSI6IkZlZENtQXV0b1JlYXV0aG4iLCJleHBpcnkiOjE2OTE1MzkxOTksImlzVGhpcmRQYXJ0eSI6dHJ1ZX0=">
  <link id="googleidentityservice" type="text/css" media="all" rel="stylesheet"
    href="https://accounts.google.com/gsi/style">
  <style id="googleidentityservice_button_styles">
    .qJTHM {
      -webkit-user-select: none;
      color: #202124;
      direction: ltr;
      -webkit-touch-callout: none;
      font-family: "Roboto-Regular", arial, sans-serif;
      -webkit-font-smoothing: antialiased;
      font-weight: 400;
      margin: 0;
      overflow: hidden;
      -webkit-text-size-adjust: 100%
    }

    .ynRLnc {
      left: -9999px;
      position: absolute;
      top: -9999px
    }

    .L6cTce {
      display: none
    }

    .bltWBb {
      word-break: break-all
    }

    .hSRGPd {
      color: #1a73e8;
      cursor: pointer;
      font-weight: 500;
      text-decoration: none
    }

    .Bz112c-W3lGp {
      height: 16px;
      width: 16px
    }

    .Bz112c-E3DyYd {
      height: 20px;
      width: 20px
    }

    .Bz112c-r9oPif {
      height: 24px;
      width: 24px
    }

    .Bz112c-uaxL4e {
      -webkit-border-radius: 10px;
      border-radius: 10px
    }

    .LgbsSe-Bz112c {
      display: block
    }

    .S9gUrf-YoZ4jf,
    .S9gUrf-YoZ4jf * {
      border: none;
      margin: 0;
      padding: 0
    }

    .fFW7wc-ibnC6b>.aZ2wEe>div {
      border-color: #4285f4
    }

    .P1ekSe-ZMv3u>div:nth-child(1) {
      background-color: #1a73e8 !important
    }

    .P1ekSe-ZMv3u>div:nth-child(2),
    .P1ekSe-ZMv3u>div:nth-child(3) {
      background-image: linear-gradient(to right, rgba(255, 255, 255, .7), rgba(255, 255, 255, .7)), linear-gradient(to right, #1a73e8, #1a73e8) !important
    }

    .haAclf {
      display: inline-block
    }

    .nsm7Bb-HzV7m-LgbsSe {
      -webkit-border-radius: 4px;
      border-radius: 4px;
      -webkit-box-sizing: border-box;
      box-sizing: border-box;
      -webkit-transition: background-color .218s, border-color .218s;
      transition: background-color .218s, border-color .218s;
      -webkit-user-select: none;
      -webkit-appearance: none;
      background-color: #fff;
      background-image: none;
      border: 1px solid #dadce0;
      color: #3c4043;
      cursor: pointer;
      font-family: "Google Sans", arial, sans-serif;
      font-size: 14px;
      height: 40px;
      letter-spacing: 0.25px;
      outline: none;
      overflow: hidden;
      padding: 0 12px;
      position: relative;
      text-align: center;
      vertical-align: middle;
      white-space: nowrap;
      width: auto
    }

    @media screen and (-ms-high-contrast:active) {
      .nsm7Bb-HzV7m-LgbsSe {
        border: 2px solid windowText;
        color: windowText
      }
    }

    .nsm7Bb-HzV7m-LgbsSe.pSzOP-SxQuSe {
      font-size: 14px;
      height: 32px;
      letter-spacing: 0.25px;
      padding: 0 10px
    }

    .nsm7Bb-HzV7m-LgbsSe.purZT-SxQuSe {
      font-size: 11px;
      height: 20px;
      letter-spacing: 0.3px;
      padding: 0 8px
    }

    .nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe {
      padding: 0;
      width: 40px
    }

    .nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe.pSzOP-SxQuSe {
      width: 32px
    }

    .nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe.purZT-SxQuSe {
      width: 20px
    }

    .nsm7Bb-HzV7m-LgbsSe.JGcpL-RbRzK {
      -webkit-border-radius: 20px;
      border-radius: 20px
    }

    .nsm7Bb-HzV7m-LgbsSe.JGcpL-RbRzK.pSzOP-SxQuSe {
      -webkit-border-radius: 16px;
      border-radius: 16px
    }

    .nsm7Bb-HzV7m-LgbsSe.JGcpL-RbRzK.purZT-SxQuSe {
      -webkit-border-radius: 10px;
      border-radius: 10px
    }

    .nsm7Bb-HzV7m-LgbsSe.MFS4be-Ia7Qfc {
      border: none;
      color: #fff
    }

    .nsm7Bb-HzV7m-LgbsSe.MFS4be-v3pZbf-Ia7Qfc {
      background-color: #1a73e8
    }

    .nsm7Bb-HzV7m-LgbsSe.MFS4be-JaPV2b-Ia7Qfc {
      background-color: #202124;
      color: #e8eaed
    }

    .nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c {
      height: 18px;
      margin-right: 8px;
      min-width: 18px;
      width: 18px
    }

    .nsm7Bb-HzV7m-LgbsSe.pSzOP-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c {
      height: 14px;
      min-width: 14px;
      width: 14px
    }

    .nsm7Bb-HzV7m-LgbsSe.purZT-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c {
      height: 10px;
      min-width: 10px;
      width: 10px
    }

    .nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-Bz112c {
      margin-left: 8px;
      margin-right: -4px
    }

    .nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c {
      margin: 0;
      padding: 10px
    }

    .nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe.pSzOP-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c {
      padding: 8px
    }

    .nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe.purZT-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c {
      padding: 4px
    }

    .nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf {
      -webkit-border-top-left-radius: 3px;
      border-top-left-radius: 3px;
      -webkit-border-bottom-left-radius: 3px;
      border-bottom-left-radius: 3px;
      display: -webkit-box;
      display: -webkit-flex;
      display: flex;
      justify-content: center;
      -webkit-align-items: center;
      align-items: center;
      background-color: #fff;
      height: 36px;
      margin-left: -10px;
      margin-right: 12px;
      min-width: 36px;
      width: 36px
    }

    .nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf .nsm7Bb-HzV7m-LgbsSe-Bz112c,
    .nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf .nsm7Bb-HzV7m-LgbsSe-Bz112c {
      margin: 0;
      padding: 0
    }

    .nsm7Bb-HzV7m-LgbsSe.pSzOP-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf {
      height: 28px;
      margin-left: -8px;
      margin-right: 10px;
      min-width: 28px;
      width: 28px
    }

    .nsm7Bb-HzV7m-LgbsSe.purZT-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf {
      height: 16px;
      margin-left: -6px;
      margin-right: 8px;
      min-width: 16px;
      width: 16px
    }

    .nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf {
      -webkit-border-radius: 3px;
      border-radius: 3px;
      margin-left: 2px;
      margin-right: 0;
      padding: 0
    }

    .nsm7Bb-HzV7m-LgbsSe.JGcpL-RbRzK .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf {
      -webkit-border-radius: 18px;
      border-radius: 18px
    }

    .nsm7Bb-HzV7m-LgbsSe.pSzOP-SxQuSe.JGcpL-RbRzK .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf {
      -webkit-border-radius: 14px;
      border-radius: 14px
    }

    .nsm7Bb-HzV7m-LgbsSe.purZT-SxQuSe.JGcpL-RbRzK .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf {
      -webkit-border-radius: 8px;
      border-radius: 8px
    }

    .nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-bN97Pc-sM5MNb {
      display: -webkit-box;
      display: -webkit-flex;
      display: flex;
      -webkit-align-items: center;
      align-items: center;
      -webkit-flex-direction: row;
      flex-direction: row;
      justify-content: space-between;
      -webkit-flex-wrap: nowrap;
      flex-wrap: nowrap;
      height: 100%;
      position: relative;
      width: 100%
    }

    .nsm7Bb-HzV7m-LgbsSe .oXtfBe-l4eHX {
      justify-content: center
    }

    .nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-BPrWId {
      -webkit-flex-grow: 1;
      flex-grow: 1;
      font-family: "Google Sans", arial, sans-serif;
      font-weight: 500;
      overflow: hidden;
      text-overflow: ellipsis;
      vertical-align: top
    }

    .nsm7Bb-HzV7m-LgbsSe.purZT-SxQuSe .nsm7Bb-HzV7m-LgbsSe-BPrWId {
      font-weight: 300
    }

    .nsm7Bb-HzV7m-LgbsSe .oXtfBe-l4eHX .nsm7Bb-HzV7m-LgbsSe-BPrWId {
      -webkit-flex-grow: 0;
      flex-grow: 0
    }

    .nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-MJoBVe {
      -webkit-transition: background-color .218s;
      transition: background-color .218s;
      bottom: 0;
      left: 0;
      position: absolute;
      right: 0;
      top: 0
    }

    .nsm7Bb-HzV7m-LgbsSe:hover,
    .nsm7Bb-HzV7m-LgbsSe:focus {
      -webkit-box-shadow: none;
      box-shadow: none;
      border-color: #d2e3fc;
      outline: none
    }

    .nsm7Bb-HzV7m-LgbsSe:hover .nsm7Bb-HzV7m-LgbsSe-MJoBVe,
    .nsm7Bb-HzV7m-LgbsSe:focus .nsm7Bb-HzV7m-LgbsSe-MJoBVe {
      background: rgba(66, 133, 244, .04)
    }

    .nsm7Bb-HzV7m-LgbsSe:active .nsm7Bb-HzV7m-LgbsSe-MJoBVe {
      background: rgba(66, 133, 244, .1)
    }

    .nsm7Bb-HzV7m-LgbsSe.MFS4be-Ia7Qfc:hover .nsm7Bb-HzV7m-LgbsSe-MJoBVe,
    .nsm7Bb-HzV7m-LgbsSe.MFS4be-Ia7Qfc:focus .nsm7Bb-HzV7m-LgbsSe-MJoBVe {
      background: rgba(255, 255, 255, .24)
    }

    .nsm7Bb-HzV7m-LgbsSe.MFS4be-Ia7Qfc:active .nsm7Bb-HzV7m-LgbsSe-MJoBVe {
      background: rgba(255, 255, 255, .32)
    }

    .nsm7Bb-HzV7m-LgbsSe .n1UuX-DkfjY {
      -webkit-border-radius: 50%;
      border-radius: 50%;
      display: -webkit-box;
      display: -webkit-flex;
      display: flex;
      height: 20px;
      margin-left: -4px;
      margin-right: 8px;
      min-width: 20px;
      width: 20px
    }

    .nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-BPrWId {
      font-family: "Roboto";
      font-size: 12px;
      text-align: left
    }

    .nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-BPrWId .ssJRIf,
    .nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-BPrWId .K4efff .fmcmS {
      overflow: hidden;
      text-overflow: ellipsis
    }

    .nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-BPrWId .K4efff {
      display: -webkit-box;
      display: -webkit-flex;
      display: flex;
      -webkit-align-items: center;
      align-items: center;
      color: #5f6368;
      fill: #5f6368;
      font-size: 11px;
      font-weight: 400
    }

    .nsm7Bb-HzV7m-LgbsSe.jVeSEe.MFS4be-Ia7Qfc .nsm7Bb-HzV7m-LgbsSe-BPrWId .K4efff {
      color: #e8eaed;
      fill: #e8eaed
    }

    .nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-BPrWId .K4efff .Bz112c {
      height: 18px;
      margin: -3px -3px -3px 2px;
      min-width: 18px;
      width: 18px
    }

    .nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf {
      -webkit-border-top-left-radius: 0;
      border-top-left-radius: 0;
      -webkit-border-bottom-left-radius: 0;
      border-bottom-left-radius: 0;
      -webkit-border-top-right-radius: 3px;
      border-top-right-radius: 3px;
      -webkit-border-bottom-right-radius: 3px;
      border-bottom-right-radius: 3px;
      margin-left: 12px;
      margin-right: -10px
    }

    .nsm7Bb-HzV7m-LgbsSe.jVeSEe.JGcpL-RbRzK .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf {
      -webkit-border-radius: 18px;
      border-radius: 18px
    }

    .L5Fo6c-sM5MNb {
      border: 0;
      display: block;
      left: 0;
      position: relative;
      top: 0
    }

    .L5Fo6c-bF1uUb {
      -webkit-border-radius: 4px;
      border-radius: 4px;
      bottom: 0;
      cursor: pointer;
      left: 0;
      position: absolute;
      right: 0;
      top: 0
    }

    .L5Fo6c-bF1uUb:focus {
      border: none;
      outline: none
    }

    sentinel {}
  </style>
  <script async="" src="https://cdnjs.cloudflare.com/ajax/libs/tinymce/5.8.1/tinymce.min.js"></script>
  <link rel="stylesheet" type="text/css" id="mce-u0"
    href="https://cdnjs.cloudflare.com/ajax/libs/tinymce/5.8.1/skins/ui/oxide/skin.min.css">
  <link rel="prefetch" href="https://mangabuddy.com/solo-bug-player/chapter-118">
  <link rel="prefetch" href="https://mangabuddy.com/solo-bug-player/chapter-119">
</head>

<body class="dark-mode">
  <div class="layout">

    <script>
      var bookId = 23574;
      var bookSlug = "solo-bug-player";
      var chapterId = null;
      var pageTitle = "Solo Bug Player";
      var pageSubTitle = "";
    </script>
    <header id="header" class="header">
      <script>
        var commentServer = "https://comments.mangabuddy.com/";
      </script>
      <div class="top-bar">
        <div class="container">
          <div class="d-flex align-items-center"><a class="navbar-item logo" href="/official" title="HOME PAGE">
              <div class="hub"><strong>MangaBuddy</strong></div>
            </a>
            <form id="search" autocomplete="off" action="/search" method="GET">
              <div class="inner"><input id="input-header-search" type="text" name="q" placeholder="Search..."
                  autocomplete="off" value="">
                <style>
                  .spinner2 {
                    margin: 100px auto;
                    width: 50px;
                    height: 40px;
                    text-align: center;
                    font-size: 10px;
                    position: absolute;
                    top: -20px;
                    left: 46%;
                    display: none;
                  }

                  .spinner2>div {
                    background-color: #27ae60;
                    height: 100%;
                    width: 6px;
                    display: inline-block;

                    -webkit-animation: sk-stretchdelay 1.2s infinite ease-in-out;
                    animation: sk-stretchdelay 1.2s infinite ease-in-out;
                  }

                  #search-form-large .spinner2,
                  #search .spinner2 {
                    margin: unset;
                    width: 40px;
                    height: 25px;
                    top: 3px;
                    right: 30px;
                    left: unset;
                  }

                  #search-form-large .spinner2 {
                    top: 5px;
                  }

                  #search-form-large .spinner2>div,
                  #search .spinner2>div {
                    width: 4px;
                  }

                  .spinner2 .rect2 {
                    -webkit-animation-delay: -1.1s;
                    animation-delay: -1.1s;
                  }

                  .spinner2 .rect3 {
                    -webkit-animation-delay: -1.0s;
                    animation-delay: -1.0s;
                  }

                  .spinner2 .rect4 {
                    -webkit-animation-delay: -0.9s;
                    animation-delay: -0.9s;
                  }

                  .spinner2 .rect5 {
                    -webkit-animation-delay: -0.8s;
                    animation-delay: -0.8s;
                  }

                  #search-form-large.loading .spinner2 {
                    display: block;
                  }

                  @-webkit-keyframes sk-stretchdelay {

                    0%,
                    40%,
                    100% {
                      -webkit-transform: scaleY(0.4)
                    }

                    20% {
                      -webkit-transform: scaleY(1.0)
                    }
                  }

                  @keyframes sk-stretchdelay {

                    0%,
                    40%,
                    100% {
                      transform: scaleY(0.4);
                      -webkit-transform: scaleY(0.4);
                    }

                    20% {
                      transform: scaleY(1.0);
                      -webkit-transform: scaleY(1.0);
                    }
                  }
                </style>

                <div class="spinner2">
                  <div class="rect1"></div>
                  <div class="rect2"></div>
                  <div class="rect3"></div>
                  <div class="rect4"></div>
                  <div class="rect5"></div>
                </div>
              </div>
              <div class="suggestions" id="header-autocomplete-list"></div><a href="/search" title="Advance search"
                class="advance-search"><i class="fa fa-search"></i></a>
            </form>
          </div>
          <div class="d-flex justify-content-center">
            <ul class="header__links-list top-list">
              <li class="header__links-item notifications"><a style="display: none;" title="Notifications"
                  href="/users/notifications"><i class="fa fa-bell"></i><span class="notifications-badge">12</span></a>
              </li>
              <li class="header__links-item"><a title="Bookmark" href="/users/bookmark"><i
                    class="fa fa-bookmark"></i></a></li>
              <li class="header__links-item"><a title="Reading history" href="/users/history"><i
                    class="fa fa-history"></i></a></li>
            </ul>
            <ul class="m-bars">
              <li class="header__links-item search"><a href="/search"><i class="fa fa-search"></i></a></li>
              <li class="header__links-item hamburger"><a onclick="toggleMobileMenu()"><i class="fa fa-bars"></i></a>
              </li>
              <li class="header__links-item  notifications"><a style="display: none;" href="/users/notifications"><i
                    class="fa fa-bell"></i><span class="notifications-badge">12</span></a></li>
              <li class="header__links-item user"><a id="profile-button" class="user-avatar" title="My Profile"
                  href="/users/profile" style="display: none;"><i class="fa fa-user"></i></a><a id="login-button"
                  class="user-avatar" onclick="showLoginModal()" title="Login/signup" style="display: flex;"><i
                    class="fa fa-user"></i></a></li>
            </ul>
          </div>
        </div>
      </div>
      <div class="bottom-bar">
        <div class="container">
          <ul class="header__links-list">
            <li class="header__links-item"><a title="Popular Manga" href="/popular">POPULAR</a></li>
            <li class="header__links-item"><a title="Latest Updates" href="/latest">LATEST</a></li>
            <li class="header__links-item has-menu"><a aria-expanded="false">TOP</a>
              <ul class="genres__wrapper clearfix top">
                <li><a href="/top/day" title="Top of the day">DAY</a></li>
                <li><a href="/top/week" title="Top of the week">WEEK</a></li>
                <li><a href="/top/month" title="Top of the month">MONTH</a></li>
              </ul>
            </li>
            <li class="header__links-item has-menu"><a aria-expanded="false">GENRES</a>
              <ul class="genres__wrapper clearfix">
                <li><a href="/genres/action">Action</a></li>
                <li><a href="/genres/adaptation">Adaptation</a></li>
                <li><a href="/genres/adult">Adult</a></li>
                <li><a href="/genres/adventure">Adventure</a></li>
                <li><a href="/genres/animal">Animal</a></li>
                <li><a href="/genres/anthology">Anthology</a></li>
                <li><a href="/genres/cartoon">Cartoon</a></li>
                <li><a href="/genres/comedy">Comedy</a></li>
                <li><a href="/genres/comic">Comic</a></li>
                <li><a href="/genres/cooking">Cooking</a></li>
                <li><a href="/genres/demons">Demons</a></li>
                <li><a href="/genres/doujinshi">Doujinshi</a></li>
                <li><a href="/genres/drama">Drama</a></li>
                <li><a href="/genres/ecchi">Ecchi</a></li>
                <li><a href="/genres/fantasy">Fantasy</a></li>
                <li><a href="/genres/full-color">Full Color</a></li>
                <li><a href="/genres/game">Game</a></li>
                <li><a href="/genres/gender-bender">Gender bender</a></li>
                <li><a href="/genres/ghosts">Ghosts</a></li>
                <li><a href="/genres/harem">Harem</a></li>
                <li><a href="/genres/historical">Historical</a></li>
                <li><a href="/genres/horror">Horror</a></li>
                <li><a href="/genres/isekai">Isekai</a></li>
                <li><a href="/genres/josei">Josei</a></li>
                <li><a href="/genres/long-strip">Long strip</a></li>
                <li><a href="/genres/mafia">Mafia</a></li>
                <li><a href="/genres/magic">Magic</a></li>
                <li><a href="/genres/manga">Manga</a></li>
                <li><a href="/genres/manhua">Manhua</a></li>
                <li><a href="/genres/manhwa">Manhwa</a></li>
                <li><a href="/genres/martial-arts">Martial arts</a></li>
                <li><a href="/genres/mature">Mature</a></li>
                <li><a href="/genres/mecha">Mecha</a></li>
                <li><a href="/genres/medical">Medical</a></li>
                <li><a href="/genres/military">Military</a></li>
                <li><a href="/genres/monster">Monster</a></li>
                <li><a href="/genres/monster-girls">Monster girls</a></li>
                <li><a href="/genres/monsters">Monsters</a></li>
                <li><a href="/genres/music">Music</a></li>
                <li><a href="/genres/mystery">Mystery</a></li>
                <li><a href="/genres/office">Office</a></li>
                <li><a href="/genres/office-workers">Office workers</a></li>
                <li><a href="/genres/one-shot">One shot</a></li>
                <li><a href="/genres/police">Police</a></li>
                <li><a href="/genres/psychological">Psychological</a></li>
                <li><a href="/genres/reincarnation">Reincarnation</a></li>
                <li><a href="/genres/romance">Romance</a></li>
                <li><a href="/genres/school-life">School life</a></li>
                <li><a href="/genres/sci-fi">Sci fi</a></li>
                <li><a href="/genres/science-fiction">Science fiction</a></li>
                <li><a href="/genres/seinen">Seinen</a></li>
                <li><a href="/genres/shoujo">Shoujo</a></li>
                <li><a href="/genres/shoujo-ai">Shoujo ai</a></li>
                <li><a href="/genres/shounen">Shounen</a></li>
                <li><a href="/genres/shounen-ai">Shounen ai</a></li>
                <li><a href="/genres/slice-of-life">Slice of life</a></li>
                <li><a href="/genres/smut">Smut</a></li>
                <li><a href="/genres/soft-yaoi">Soft Yaoi</a></li>
                <li><a href="/genres/sports">Sports</a></li>
                <li><a href="/genres/super-power">Super Power</a></li>
                <li><a href="/genres/superhero">Superhero</a></li>
                <li><a href="/genres/supernatural">Supernatural</a></li>
                <li><a href="/genres/thriller">Thriller</a></li>
                <li><a href="/genres/time-travel">Time travel</a></li>
                <li><a href="/genres/tragedy">Tragedy</a></li>
                <li><a href="/genres/vampire">Vampire</a></li>
                <li><a href="/genres/vampires">Vampires</a></li>
                <li><a href="/genres/video-games">Video games</a></li>
                <li><a href="/genres/villainess">Villainess</a></li>
                <li><a href="/genres/web-comic">Web comic</a></li>
                <li><a href="/genres/webtoons">Webtoons</a></li>
                <li><a href="/genres/yaoi">Yaoi</a></li>
                <li><a href="/genres/yuri">Yuri</a></li>
                <li><a href="/genres/zombies">Zombies</a></li>
              </ul>
            </li>
            <li class="header__links-item has-menu"><a aria-expanded="false">STATUS</a>
              <ul class="genres__wrapper clearfix status">
                <li><a href="/status/Ongoing">Ongoing</a></li>
                <li><a href="/status/Completed">Completed</a></li>
              </ul>
            </li>
            <li class="header__links-item"><a title="Best manga lists" href="/manga-list">MANGA LIST</a></li>
            <li class="header__links-item"><a title="Discussions" href="/discussions">DISCUSSIONS</a></li>
            <li class="header__links-item"><a title="Read Light Novels" target="_blank"
                href="https://novelbuddy.com">READ NOVEL</a></li>
          </ul>
          <ul class="header__links-list">
            <li class="header__links-item dark-mode-settings"><span class="text"><i class="fas fa-sun"></i>-<i
                  class="fas fa-moon"></i></span>
              <div class="switch-container"><label><input id="darkmode-cb" type="checkbox" class="switch darkmode-cb"
                    onchange="darkModeChange()" checked="true">
                  <div>
                    <div></div>
                  </div>
                </label></div>
            </li>
          </ul>
        </div>
      </div>
      <script>
        function getFormData(e) { var t = new FormData(e), n = {}; return t.forEach(function (e, t) { n[t] = e }), n } function sendAJAXRequest(e, t) { var n = e.method, o = e.url, a = e.data, d = void 0 === a ? null : a, i = e.isJson, s = void 0 === i || i, r = new XMLHttpRequest; return r.responseType = !0 === s ? "json" : "text", r.onreadystatechange = function () { 4 === this.readyState && t && t(this) }, r.open(n, o), !0 === s && r.setRequestHeader("Content-Type", "application/json"), r.withCredentials = !0, r.send(d), !1 } !function () { checkLoginStatus(), getCookie("dark-mode") ? darkModeChange(!1) : (setCookie("dark-mode", "0"), darkModeChange(!0)); var e = document.getElementById("submit-btn"); e && e.addEventListener("click", function (e) { this.classList.add("spinner") }) }(); var menuShow = !1; function toggleMobileMenu() { menuShow = !menuShow; var e = document.getElementById("mobile-sidebar"); menuShow ? (e.classList.add("active"), document.getElementById("mobile__sidebar-overlay").className = "fadeIn") : (e.classList.remove("active"), document.getElementById("mobile__sidebar-overlay").className = "fadeOut") } function darkModeChange() { var e = !(0 < arguments.length && void 0 !== arguments[0]) || arguments[0], t = "1" === getCookie("dark-mode"), n = document.getElementsByClassName("darkmode-cb"); e && (t = !t), document.body.className = t ? "dark-mode" : ""; for (var o = 0; o < n.length; o++) { var a = n[o]; t ? a.setAttribute("checked", !0) : a.removeAttribute("checked") } setCookie("dark-mode", t ? "1" : "0") } function isUserLogged() { return !(!getCookie("user-x") || "" === getCookie("user-x")) || !(!getCookie("user-name") || "" === getCookie("user-name")) } function checkLoginStatus() { isUserLogged() ? (document.getElementById("login-button") && (document.getElementById("login-button").style.display = "none"), document.getElementById("profile-button") && (document.getElementById("profile-button").style.display = "flex")) : (document.getElementById("profile-button") && (document.getElementById("profile-button").style.display = "none"), document.getElementById("login-button") && (document.getElementById("login-button").style.display = "flex")) } function searchManga(e, t) { var n = "q=".concat(e.q); e.sort && (n += "&sort=".concat(e.sort)), e.genre && (n += "&genre=".concat(e.genre)), e.status && (n += "&status=".concat(e.status)), sendAJAXRequest({ method: "GET", url: "/api/manga/search?" + n, isJson: !1 }, function (e) { 200 === e.status ? t(e.responseText) : t("") }) } function debounced(o, a) { var d; return function () { for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)t[n] = arguments[n]; d && clearTimeout(d), d = setTimeout(function () { a.apply(void 0, t), d = null }, o) } } var headerSearchHandler = debounced(400, handleAutocomplete); function handleAutocomplete() { var t, e = document.getElementById("input-header-search").value; e ? 3 <= e.length && ((t = document.querySelector("#header #search")) && t.classList.add("loading"), searchManga({ q: e }, function (e) { document.getElementById("header-autocomplete-list").innerHTML = e, t && t.classList.remove("loading") })) : document.getElementById("header-autocomplete-list").innerHTML = "" } function setCookie(e, t, n) { var o, a = ""; n && ((o = new Date).setTime(o.getTime() + 24 * n * 60 * 60 * 1e3), a = "; expires=" + o.toUTCString()), document.cookie = e + "=" + (t || "") + a + "; path=/" } function getCookie(e) { var t = "; ".concat(document.cookie).split("; ".concat(e, "=")); return 2 === t.length ? t.pop().split(";").shift() : null } function setAttribute(e, t, n) { for (var o = document.getElementsByClassName(e), a = 0; a < o.length; a++)o[a].setAttribute(t, n) } document.getElementById("input-header-search").addEventListener("input", headerSearchHandler), window.addEventListener("click", function (e) { document.getElementById("header-autocomplete-list").contains(e.target) || (document.getElementById("header-autocomplete-list").innerHTML = "") }), Element.prototype.showSpinner = function () { this.classList.add("spinner") }, Element.prototype.hideSpinner = function () { this.classList.remove("spinner") };
      </script>
      <div class="mobile__sidebar snap-drawer-left" id="mobile-sidebar">
        <div class="sidebar__header">
          <div class="sidebar__header-logo"><a href="/official"
              style="color: #fff; font-size: 20px; font-weight: 700; text-transform: uppercase;">MangaBuddy</a></div><a
            onclick="toggleMobileMenu()" class="sidebar__header-close"><i class="fa fa-times"></i></a>
        </div>
        <div class="sidebar-breadcrumb">Navigation<li class="header__links-item dark-mode-settings"><span
              class="text"><i class="fas fa-sun"></i>-<i class="fas fa-moon"></i></span>
            <div class="switch-container"><label><input id="darkmode-cb" type="checkbox" class="switch darkmode-cb"
                  onchange="darkModeChange()">
                <div>
                  <div></div>
                </div>
              </label></div>
          </li>
        </div>
        <ul class="sidebar__menu">
          <li><a href="/official"><i class="fa fa-home"></i>HOME</a></li>
          <li style="width: 100%;" class="has-sub-menu"><a aria-expanded="false"><i class="fa fa-caret-down"></i>TOP</a>
            <ul class="sidebar__sub-menu">
              <li><a href="/top/day" title="Top of the day">DAY</a></li>
              <li><a href="/top/week" title="Top of the week">WEEK</a></li>
              <li><a href="/top/month" title="Top of the month">MONTH</a></li>
            </ul>
          </li>
          <li><a href="/discussions"><i class="fa fa-comments"></i>DISCUSSIONS</a></li>
          <li style="width: 100%;" class="has-sub-menu"><a aria-expanded="false"><i class="fa fa-caret-down"></i>MANGA
              LIST</a>
            <ul class="sidebar__sub-menu">
              <li><a href="/latest" title="LATEST MANGA UPDATE">LATEST</a></li>
              <li><a href="/popular" title="POPULAR MANGA">POPULAR</a></li>
              <li><a href="/status/Ongoing" title="ON-GOING MANGA">ON-GOING</a></li>
              <li><a href="/status/Completed" title=">COMPLETED MANGA">COMPLETED</a></li>
              <li><a href="/manga-list" title=">Recommended manga list">RECOMMENDED LISTs</a></li>
            </ul>
          </li>
          <li style="width: 100%;" class="has-sub-menu"><a aria-expanded="false"><i
                class="fa fa-caret-down"></i>PROFILE</a>
            <ul class="sidebar__sub-menu">
              <li><a href="/users/bookmark" title="BOOKMARK">BOOKMARK</a></li>
              <li><a href="/users/history" title="HISTORY">READING HISTORY</a></li>
              <li><a href="/users/manga-list" title="MY MANGA LISTs">MY LISTs</a></li>
              <li><a href="/users/comments" title="MY Comments">MY COMMENTS</a></li>
              <li><a href="/users/reviews" title="MY Comments">MY REVIEWS</a></li>
              <li><a href="/users/notifications" title="Notifications">NOTIFICATIONS</a></li>
              <li><a href="/users/settings" title="MY MANGA LISTs">SETTINGS</a></li>
            </ul>
          </li>
          <li><a href="/genres"><i class="fa fa-th-list"></i>GENRES</a></li>
          <li><a href="https://novelbuddy.com" target="_blank" title="Read Novel Online"><i class="fas fa-book"></i>READ
              NOVEL</a></li>
          <li><a style="color: red !important;" href="/users/logout" target="_blank" title="Logout"><i
                class="fas fa-sign-out-alt"></i>LOGOUT</a></li>
        </ul>
        <div class="sidebar-breadcrumb" style="bottom:0;margin-top:auto">Copyright 2022.</div>
      </div>
      <div id="mobile__sidebar-overlay" class="fadeOut"></div>
      <script>
        var subMenu = document.querySelectorAll('.has-sub-menu > a')
        for (var i = 0; i < subMenu.length; i++) {
          subMenu[i].addEventListener('click', function () {
            var ul = this.parentNode.querySelector('.sidebar__sub-menu')
            if (ul.classList.contains('active')) {
              ul.classList.remove('active')
            }
            else {
              ul.classList.add('active')
            }
          })
        }

      </script>
      <script>
        function getModal(id) {
          if (document.getElementById(id)) {
            return bootstrap.Modal.getOrCreateInstance(document.getElementById(id))
          }
        }
      </script>
    </header>
    <div class="container">
      <div class="notice-box">We're re-building nove site. Please support us on: 👉<a href="https://novelbuddy.com"
          style="text-decoration: underline; font-size: 17px; color: wheat;">https://novelbuddy.com</a><br>You can login
        with MangaBuddy account. Many novels will be updated. Hope you enjoy it!!!</div>
    </div>
    <div class="main-container book-details">
      <div class="container">
        <div id="breadcrumbs-container">
          <div class="breadcrumbs-wrapper">
            <div class="breadcrumbs-item"><a title="Home" href="/">HOME<i class="fa fa-angle-right"></i></a></div>
            <div class="breadcrumbs-item"><a title="Action" href="/genres/action"><span>Action</span><i
                  class="fa fa-angle-right"></i></a></div>
            <div class="breadcrumbs-item"><a title="Adventure" href="/genres/adventure"><span>Adventure</span><i
                  class="fa fa-angle-right"></i></a></div>
            <div class="breadcrumbs-item"><a title="Fantasy" href="/genres/fantasy"><span>Fantasy</span><i
                  class="fa fa-angle-right"></i></a></div>
            <div class="breadcrumbs-item"><a title="Comedy" href="/genres/comedy"><span>Comedy</span><i
                  class="fa fa-angle-right"></i></a></div>
            <div class="breadcrumbs-item" style="overflow: hidden"><span>Solo Bug Player</span></div>
          </div>
        </div>
        <div class="row no-gutters">
          <div class="col-70 container__left">
            <div class="book-info">
              <div id="cover" class="cover box">
                <div class="img-cover">
                  <img class="" src="https://thumb.youmadcdn.xyz/thumb/solo-bug-player.png"
                    data-src="https://thumb.youmadcdn.xyz/thumb/solo-bug-player.png" alt="Solo Bug Player">
                </div>
                <div class="read-box">
                  <a class="btn btn-read" id="readchapterbtn" href="/solo-bug-player/chapter-0-25" title="Read 25">Read
                    Now
                  </a>

                  <div id="bookmark-btn-holder" style="width: 20%;">
                    <div class="dropdown reading-list-dropdown"><a class="btn btn-bookmark" href="javascript:;"
                        role="button" id="btn-dropdown-bookmark" data-bs-toggle="dropdown" aria-expanded="false"><i
                          class="far fa-bookmark" style="color: gray;"></i></a>
                      <ul class="dropdown-menu" aria-labelledby="btn-dropdown-bookmark" style="background: #343a40;">
                        <h6 class="dropdown-header">Bookmark as:</h6>
                        <li>
                          <hr class="dropdown-divider">
                        </li>
                        <li><a class="dropdown-item" data-type="0" onclick="showLoginModal()"
                            href="javascript:;">Reading</a></li>
                        <li><a class="dropdown-item" onclick="showLoginModal()" href="javascript:;">Plan to read</a>
                        </li>
                        <li><a class="dropdown-item" onclick="showLoginModal()" href="javascript:;">Completed</a></li>
                        <li><a class="dropdown-item" onclick="showLoginModal()" href="javascript:;">Dropped</a></li>
                      </ul>
                    </div>
                  </div>
                </div>
              </div>
              <div class="detail">
                <div class="name box">
                  <h1>Solo Bug Player</h1>
                  <h2>Solo Glitch Player / Bug Player / Solo Bug Player / 나 홀로 버그로 꿀빠는 플레이어</h2>
                </div>
                <div class="meta box mt-1 p-10">
                  <p><strong>Authors :</strong>
                    <a href="/authors/cheongcho" title="Cheongcho">
                      <span>Cheongcho</span>
                    </a>
                  </p>
                  <p><strong>Status :</strong> <a href="/status/Ongoing" title="Read Ongoing Manga">
                      <span>Ongoing</span></a>
                  </p>
                  <p><strong>Genres :</strong>
                    <a href="/genres/action" title="Read Action Manga">
                      Action
                      ,
                    </a>
                    <a href="/genres/adventure" title="Read Adventure Manga">
                      Adventure
                      ,
                    </a>
                    <a href="/genres/fantasy" title="Read Fantasy Manga">
                      Fantasy
                      ,
                    </a>
                    <a href="/genres/comedy" title="Read Comedy Manga">
                      Comedy
                    </a>
                  </p>
                  <p><strong>Chapters: </strong> <span>124</span></p>
                  <p><strong>Last update: </strong>
                    <span>10 months ago</span>
                  </p>

                  <div id="score-board">
                    <div class="score-board">
                      <div class="rate-view">
                        <span class="rating">5.0</span>
                        <div class="inline-flex">
                          <div class="rating-view d-flex flex-wrap align-items-center ">
                            <span> <i class="fa fa-star"></i></span>
                            <span> <i class="fa fa-star"></i></span>
                            <span> <i class="fa fa-star"></i></span>
                            <span> <i class="fa fa-star"></i></span>
                            <span> <i class="fa fa-star"></i></span>
                          </div>
                        </div>
                        <div class="text-sm">3&nbsp;votes</div>
                      </div>
                      <div class="art-board">
                        <div class="art-item">
                          <div class="flex items-center text-sm"><span>5</span><i name="star" class="fa fa-star"></i>
                          </div>
                          <progress class="progress progress-primary" value="100.0" max="100"></progress><span
                            class="text-sm">100.0%</span>
                        </div>
                        <div class="art-item">
                          <div class="flex items-center text-sm"><span>4</span><i name="star" class="fa fa-star"></i>
                          </div>
                          <progress class="progress progress-primary" value="0.0" max="100"></progress><span
                            class="text-sm">0.0%</span>
                        </div>
                        <div class="art-item">
                          <div class="flex items-center text-sm"><span>3</span><i name="star" class="fa fa-star"></i>
                          </div>
                          <progress class="progress progress-primary" value="0.0" max="100"></progress><span
                            class="text-sm">0.0%</span>
                        </div>
                        <div class="art-item">
                          <div class="flex items-center text-sm"><span>2</span><i name="star" class="fa fa-star"></i>
                          </div>
                          <progress class="progress progress-primary" value="0.0" max="100"></progress><span
                            class="text-sm">0.0%</span>
                        </div>
                        <div class="art-item">
                          <div class="flex items-center text-sm"><span>1</span><i name="star" class="fa fa-star"></i>
                          </div>
                          <progress class="progress progress-primary" value="0.0" max="100"></progress><span
                            class="text-sm">0.0%</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div class="mt-1">
              <div class="section box history" style="display: none;">
                <div class="section-header">
                  <div class="title"><span>HISTORY</span></div>
                </div>
                <div id="history-chap" style="padding: 20px;">
                </div>
              </div>

              <div class="section box mt-1">
                <div class="section-header">
                  <div class="title"><span>LATEST CHAPTERS</span></div>
                </div>
                <div class="section-body">
                  <div class="latest-chapters">
                    <a href="/solo-bug-player/chapter-120" title="Solo Bug Player - Chapter 120">
                      <strong class="chapter-title">Chapter 120</strong>
                    </a>
                    <a href="/solo-bug-player/chapter-119" title="Solo Bug Player - Chapter 119">
                      <strong class="chapter-title">Chapter 119</strong>
                    </a>
                    <a href="/solo-bug-player/chapter-118" title="Solo Bug Player - Chapter 118">
                      <strong class="chapter-title">Chapter 118</strong>
                    </a>
                  </div>
                </div>
              </div>

              <div class="section box mt-1">
                <div align="center" style="padding: 3px 0;">
                  <div id="pf-1337-1">
                    <script>window.pubfuturetag = window.pubfuturetag || []; window.pubfuturetag.push({ unit: "625ee58552051801f5d96fa4", id: "pf-1337-1" })</script>
                  </div>
                </div>
              </div>
              <div id="review-btn-holder" class="section box mt-1"
                style="display: flex; align-items: center; justify-content: center; flex-direction: column;">
                <div class="notice-box">
                  We need your help. We are re-building the ranking system, so please write a review for the manga you
                  know.
                  It helps others easily decide to read this manga or not. Thanks.
                </div>
                <a style="width:200px; margin: 10px 0;" class="btn btn-danger" onclick="showLoginModal();">WRITE A
                  REVIEW</a>
              </div>
              <div class="section box mt-1" style="padding: 10px;">
                <div class="tabs">
                  <div class="tab active" data-target="summary">
                    <div class="name">SUMMARY
                    </div>
                  </div>
                  <div class="tab review-tab" data-target="reviews">
                    <div class="name">REVIEWS (1)</div>
                  </div>
                </div>

                <div class="tab-content mt-2">
                  <div data-target="summary" class="tab-panel active">
                    <div class="section-body summary">
                      <p style="margin-bottom: unset; font-size: 13px; color: #4c4c4c; padding: 5px 10px;">You are
                        reading <strong>Solo Bug Player</strong> manga, one of the most popular manga covering in
                        Action, Adventure, Fantasy, Comedy genres, written by Cheongcho at <strong>MangaBuddy</strong>,
                        a top manga site to offering for <strong><a
                            style="border-bottom: unset; text-decoration: none; color: #4c4c4c !important;" href="/"
                            title="MangaBuddy - Read manga online">read manga online</a> </strong> free. Solo Bug Player
                        has 124 translated chapters and translations of other chapters are in progress. Lets enjoy.<br>
                        If you want to get the updates about latest chapters, lets create an account and add Solo Bug
                        Player to your bookmark.<br></p>

                      <p class="content" style="margin-bottom: unset;line-height: 1.8; padding: 10px;">
                        .Description :If I can succeed it's OK to use bugs or any possible way! A story of reincarnated
                        ultra-high obesity young lord.BRASIL: Se eu tiver sucesso, no h problema em usar bugs ou
                        qualquer coisa possvel! Uma histria do jovem lorde da obesidade ultra-alta reencarnado.
                      </p>
                      <div class="readmore" id="show-more-summary" style="display: block;">
                        <span onclick="showMoreSummary()">SHOW MORE<i class="fa fa-caret-down"></i></span>
                      </div>
                    </div>
                  </div>
                  <div data-target="reviews" class="tab-panel">
                    <style>
                      #review-holder img {
                        max-width: 50px !important;
                      }

                      .rating-view span {
                        margin-right: unset;
                      }
                    </style>
                    <div id="review-holder" style="background: #fff;">
                      <div id="review-count" value="1"></div>
                      <div class="comment-item " id="rv-15015">
                        <div class="author">
                          <span class="avatar-letter" style="background: rgb(95, 35, 217);">I</span>
                        </div>
                        <div class="comment-info">
                          <div class="comment-summary">
                            <span style="margin-right: 7px;" class="author-name">I'm An Asshole</span>
                            <abbr class="comment-date" title="2/1/2023 01:53" value="1672620800">
                              <span>9 months ago</span></abbr>
                            <span class="comment-chapter" style="color: #dc3545;margin-right: 7px;">Rocks</span>

                            <div class="rating-view d-flex flex-wrap align-items-center ">
                              <span> <i class="fa fa-star"></i></span>
                              <span> <i class="fa fa-star"></i></span>
                              <span> <i class="fa fa-star"></i></span>
                              <span> <i class="fa fa-star"></i></span>
                              <span> <i class="fa fa-star"></i></span>
                            </div>
                            <div class="summary">
                              kasanatkasanat
                            </div>
                            <div class="comment-tools" style="justify-content: space-between; margin-top: 10px;">
                              <span r-id="15015" class="btn reply-btn" onclick="replyReview(this);">Reply</span>
                              <div class="comment-reactions" id="reactions-15015">
                                <span title="Like" class="reaction-btn like" action-type="like"
                                  onclick="reactReviewClick(this);">
                                  <span></span>
                                  <i class="reaction-count"></i>
                                </span>
                                <span title="Dislike" class="reaction-btn dislike" action-type="dislike"
                                  onclick="reactReviewClick(this);">
                                  <span></span>
                                  <i class="reaction-count"></i>
                                </span>
                              </div>
                            </div>
                            <div class="comment-replies" id="comments-15015">
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class="">
                        <style>
                          select {
                            -webkit-appearance: menulist;
                            border: 1px solid #BFD8DF;
                            -moz-border-radius: 2px;
                            -webkit-border-radius: 2px;
                            border-radius: 2px;
                            padding-left: 5px;
                          }
                        </style>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <div class="section box mt-1">
                <div class="section-header">
                  <div class="title"><span>CHAPTERS (124)</span></div><span onclick="return changeChaptersOrder()"
                    class="filter"><i class="fas fa-arrows-alt-v"></i></span>
                </div>
                <div class="section-body loaded" id="chapters" data-sort="desc">
                  <div id="chapter-list-inner">
                    <ul class="chapter-list" id="chapter-list">
                      <li id="c-124"><a href="/solo-bug-player/chapter-120" title="Solo Bug Player - Chapter 120">
                          <div><strong class="chapter-title">Chapter 120</strong><time class="chapter-update">Dec 28,
                              2022</time></div>
                        </a></li>
                      <li id="c-123"><a href="/solo-bug-player/chapter-119" title="Solo Bug Player - Chapter 119">
                          <div><strong class="chapter-title">Chapter 119</strong><time class="chapter-update">Dec 18,
                              2022</time></div>
                        </a></li>
                      <li id="c-122"><a href="/solo-bug-player/chapter-118" title="Solo Bug Player - Chapter 118">
                          <div><strong class="chapter-title">Chapter 118</strong><time class="chapter-update">Dec 06,
                              2022</time></div>
                        </a></li>
                      <li id="c-121"><a href="/solo-bug-player/chapter-117" title="Solo Bug Player - Chapter 117">
                          <div><strong class="chapter-title">Chapter 117</strong><time class="chapter-update">Nov 30,
                              2022</time></div>
                        </a></li>
                      <li id="c-120"><a href="/solo-bug-player/chapter-116" title="Solo Bug Player - Chapter 116">
                          <div><strong class="chapter-title">Chapter 116</strong><time class="chapter-update">Nov 30,
                              2022</time></div>
                        </a></li>
                      <li id="c-119"><a href="/solo-bug-player/chapter-115" title="Solo Bug Player - Chapter 115">
                          <div><strong class="chapter-title">Chapter 115</strong><time class="chapter-update">Nov 14,
                              2022</time></div>
                        </a></li>
                      <li id="c-118"><a href="/solo-bug-player/chapter-114" title="Solo Bug Player - Chapter 114">
                          <div><strong class="chapter-title">Chapter 114</strong><time class="chapter-update">Nov 10,
                              2022</time></div>
                        </a></li>
                      <li id="c-117"><a href="/solo-bug-player/chapter-113" title="Solo Bug Player - Chapter 113">
                          <div><strong class="chapter-title">Chapter 113</strong><time class="chapter-update">Nov 04,
                              2022</time></div>
                        </a></li>
                      <li id="c-116"><a href="/solo-bug-player/chapter-112" title="Solo Bug Player - Chapter 112">
                          <div><strong class="chapter-title">Chapter 112</strong><time class="chapter-update">Oct 25,
                              2022</time></div>
                        </a></li>
                      <li id="c-115"><a href="/solo-bug-player/chapter-111" title="Solo Bug Player - Chapter 111">
                          <div><strong class="chapter-title">Chapter 111</strong><time class="chapter-update">Oct 25,
                              2022</time></div>
                        </a></li>
                      <li id="c-114"><a href="/solo-bug-player/chapter-110" title="Solo Bug Player - Chapter 110">
                          <div><strong class="chapter-title">Chapter 110</strong><time class="chapter-update">Oct 25,
                              2022</time></div>
                        </a></li>
                      <li id="c-113"><a href="/solo-bug-player/chapter-109" title="Solo Bug Player - Chapter 109">
                          <div><strong class="chapter-title">Chapter 109</strong><time class="chapter-update">Oct 25,
                              2022</time></div>
                        </a></li>
                      <li id="c-112"><a href="/solo-bug-player/chapter-108" title="Solo Bug Player - Chapter 108">
                          <div><strong class="chapter-title">Chapter 108</strong><time class="chapter-update">Oct 25,
                              2022</time></div>
                        </a></li>
                      <li id="c-111"><a href="/solo-bug-player/chapter-107" title="Solo Bug Player - Chapter 107">
                          <div><strong class="chapter-title">Chapter 107</strong><time class="chapter-update">Sep 21,
                              2022</time></div>
                        </a></li>
                      <li id="c-110"><a href="/solo-bug-player/chapter-106" title="Solo Bug Player - Chapter 106">
                          <div><strong class="chapter-title">Chapter 106</strong><time class="chapter-update">Sep 21,
                              2022</time></div>
                        </a></li>
                      <li id="c-109"><a href="/solo-bug-player/chapter-105" title="Solo Bug Player - Chapter 105">
                          <div><strong class="chapter-title">Chapter 105</strong><time class="chapter-update">Aug 27,
                              2022</time></div>
                        </a></li>
                      <li id="c-108"><a href="/solo-bug-player/chapter-104" title="Solo Bug Player - Chapter 104">
                          <div><strong class="chapter-title">Chapter 104</strong><time class="chapter-update">Aug 27,
                              2022</time></div>
                        </a></li>
                      <li id="c-107"><a href="/solo-bug-player/chapter-103" title="Solo Bug Player - Chapter 103">
                          <div><strong class="chapter-title">Chapter 103</strong><time class="chapter-update">Aug 13,
                              2022</time></div>
                        </a></li>
                      <li id="c-106"><a href="/solo-bug-player/chapter-102" title="Solo Bug Player - Chapter 102">
                          <div><strong class="chapter-title">Chapter 102</strong><time class="chapter-update">Aug 06,
                              2022</time></div>
                        </a></li>
                      <li id="c-105"><a href="/solo-bug-player/chapter-101" title="Solo Bug Player - Chapter 101">
                          <div><strong class="chapter-title">Chapter 101</strong><time class="chapter-update">Jul 30,
                              2022</time></div>
                        </a></li>
                      <li id="c-104"><a href="/solo-bug-player/chapter-100" title="Solo Bug Player - Chapter 100">
                          <div><strong class="chapter-title">Chapter 100</strong><time class="chapter-update">Jul 23,
                              2022</time></div>
                        </a></li>
                      <li id="c-103"><a href="/solo-bug-player/chapter-99" title="Solo Bug Player - Chapter 99">
                          <div><strong class="chapter-title">Chapter 99</strong><time class="chapter-update">Jul 10,
                              2022</time></div>
                        </a></li>
                      <li id="c-102"><a href="/solo-bug-player/chapter-98" title="Solo Bug Player - Chapter 98">
                          <div><strong class="chapter-title">Chapter 98</strong><time class="chapter-update">Jul 10,
                              2022</time></div>
                        </a></li>
                      <li id="c-101"><a href="/solo-bug-player/chapter-97" title="Solo Bug Player - Chapter 97">
                          <div><strong class="chapter-title">Chapter 97</strong><time class="chapter-update">Jul 10,
                              2022</time></div>
                        </a></li>
                      <li id="c-100"><a href="/solo-bug-player/chapter-96" title="Solo Bug Player - Chapter 96">
                          <div><strong class="chapter-title">Chapter 96</strong><time class="chapter-update">Jun 19,
                              2022</time></div>
                        </a></li>
                      <li id="c-99"><a href="/solo-bug-player/chapter-95" title="Solo Bug Player - Chapter 95">
                          <div><strong class="chapter-title">Chapter 95</strong><time class="chapter-update">Jun 11,
                              2022</time></div>
                        </a></li>
                      <li id="c-98"><a href="/solo-bug-player/chapter-94" title="Solo Bug Player - Chapter 94">
                          <div><strong class="chapter-title">Chapter 94</strong><time class="chapter-update">Jun 06,
                              2022</time></div>
                        </a></li>
                      <li id="c-97"><a href="/solo-bug-player/chapter-93" title="Solo Bug Player - Chapter 93">
                          <div><strong class="chapter-title">Chapter 93</strong><time class="chapter-update">May 28,
                              2022</time></div>
                        </a></li>
                      <li id="c-96"><a href="/solo-bug-player/chapter-92-6" title="Solo Bug Player - Chapter 92.6">
                          <div><strong class="chapter-title">Chapter 92.6</strong><time class="chapter-update">May 21,
                              2022</time></div>
                        </a></li>
                      <li id="c-95"><a href="/solo-bug-player/chapter-92-5" title="Solo Bug Player - Chapter 92.5">
                          <div><strong class="chapter-title">Chapter 92.5</strong><time class="chapter-update">May 14,
                              2022</time></div>
                        </a></li>
                      <li id="c-94"><a href="/solo-bug-player/chapter-92" title="Solo Bug Player - Chapter 92">
                          <div><strong class="chapter-title">Chapter 92</strong><time class="chapter-update">May 08,
                              2022</time></div>
                        </a></li>
                      <li id="c-93"><a href="/solo-bug-player/chapter-91" title="Solo Bug Player - Chapter 91">
                          <div><strong class="chapter-title">Chapter 91</strong><time class="chapter-update">Apr 30,
                              2022</time></div>
                        </a></li>
                      <li id="c-92"><a href="/solo-bug-player/chapter-90" title="Solo Bug Player - Chapter 90">
                          <div><strong class="chapter-title">Chapter 90</strong><time class="chapter-update">Apr 24,
                              2022</time></div>
                        </a></li>
                      <li id="c-91"><a href="/solo-bug-player/chapter-89" title="Solo Bug Player - Chapter 89">
                          <div><strong class="chapter-title">Chapter 89</strong><time class="chapter-update">Apr 17,
                              2022</time></div>
                        </a></li>
                      <li id="c-90"><a href="/solo-bug-player/chapter-88" title="Solo Bug Player - Chapter 88">
                          <div><strong class="chapter-title">Chapter 88</strong><time class="chapter-update">Apr 10,
                              2022</time></div>
                        </a></li>
                      <li id="c-89"><a href="/solo-bug-player/chapter-87" title="Solo Bug Player - Chapter 87">
                          <div><strong class="chapter-title">Chapter 87</strong><time class="chapter-update">Apr 05,
                              2022</time></div>
                        </a></li>
                      <li id="c-88"><a href="/solo-bug-player/chapter-86" title="Solo Bug Player - Chapter 86">
                          <div><strong class="chapter-title">Chapter 86</strong><time class="chapter-update">Apr 04,
                              2022</time></div>
                        </a></li>
                      <li id="c-87"><a href="/solo-bug-player/chapter-85" title="Solo Bug Player - Chapter 85">
                          <div><strong class="chapter-title">Chapter 85</strong><time class="chapter-update">Apr 04,
                              2022</time></div>
                        </a></li>
                      <li id="c-86"><a href="/solo-bug-player/chapter-84" title="Solo Bug Player - Chapter 84">
                          <div><strong class="chapter-title">Chapter 84</strong><time class="chapter-update">Apr 03,
                              2022</time></div>
                        </a></li>
                      <li id="c-85"><a href="/solo-bug-player/chapter-83" title="Solo Bug Player - Chapter 83">
                          <div><strong class="chapter-title">Chapter 83</strong><time class="chapter-update">Apr 02,
                              2022</time></div>
                        </a></li>
                      <li id="c-84"><a href="/solo-bug-player/chapter-82" title="Solo Bug Player - Chapter 82">
                          <div><strong class="chapter-title">Chapter 82</strong><time class="chapter-update">Apr 02,
                              2022</time></div>
                        </a></li>
                      <li id="c-83"><a href="/solo-bug-player/chapter-81" title="Solo Bug Player - Chapter 81">
                          <div><strong class="chapter-title">Chapter 81</strong><time class="chapter-update">Apr 02,
                              2022</time></div>
                        </a></li>
                      <li id="c-82"><a href="/solo-bug-player/chapter-80" title="Solo Bug Player - Chapter 80">
                          <div><strong class="chapter-title">Chapter 80</strong><time class="chapter-update">Oct 03,
                              2021</time></div>
                        </a></li>
                      <li id="c-81"><a href="/solo-bug-player/chapter-79" title="Solo Bug Player - Chapter 79">
                          <div><strong class="chapter-title">Chapter 79</strong><time class="chapter-update">Sep 25,
                              2021</time></div>
                        </a></li>
                      <li id="c-80"><a href="/solo-bug-player/chapter-78" title="Solo Bug Player - Chapter 78">
                          <div><strong class="chapter-title">Chapter 78</strong><time class="chapter-update">Sep 19,
                              2021</time></div>
                        </a></li>
                      <li id="c-79"><a href="/solo-bug-player/chapter-77" title="Solo Bug Player - Chapter 77">
                          <div><strong class="chapter-title">Chapter 77</strong><time class="chapter-update">Sep 07,
                              2021</time></div>
                        </a></li>
                      <li id="c-78"><a href="/solo-bug-player/chapter-76" title="Solo Bug Player - Chapter 76">
                          <div><strong class="chapter-title">Chapter 76</strong><time class="chapter-update">Sep 06,
                              2021</time></div>
                        </a></li>
                      <li id="c-77"><a href="/solo-bug-player/chapter-75" title="Solo Bug Player - Chapter 75">
                          <div><strong class="chapter-title">Chapter 75</strong><time class="chapter-update">Aug 30,
                              2021</time></div>
                        </a></li>
                      <li id="c-76"><a href="/solo-bug-player/chapter-74" title="Solo Bug Player - Chapter 74">
                          <div><strong class="chapter-title">Chapter 74</strong><time class="chapter-update">Aug 21,
                              2021</time></div>
                        </a></li>
                      <li id="c-75"><a href="/solo-bug-player/chapter-73" title="Solo Bug Player - Chapter 73">
                          <div><strong class="chapter-title">Chapter 73</strong><time class="chapter-update">Aug 11,
                              2021</time></div>
                        </a></li>
                      <li id="c-74"><a href="/solo-bug-player/chapter-72" title="Solo Bug Player - Chapter 72">
                          <div><strong class="chapter-title">Chapter 72</strong><time class="chapter-update">Aug 11,
                              2021</time></div>
                        </a></li>
                      <li id="c-73"><a href="/solo-bug-player/chapter-71" title="Solo Bug Player - Chapter 71">
                          <div><strong class="chapter-title">Chapter 71</strong><time class="chapter-update">Jul 27,
                              2021</time></div>
                        </a></li>
                      <li id="c-72"><a href="/solo-bug-player/chapter-70" title="Solo Bug Player - Chapter 70">
                          <div><strong class="chapter-title">Chapter 70</strong><time class="chapter-update">Jul 27,
                              2021</time></div>
                        </a></li>
                      <li id="c-71"><a href="/solo-bug-player/chapter-69" title="Solo Bug Player - Chapter 69">
                          <div><strong class="chapter-title">Chapter 69</strong><time class="chapter-update">Jul 15,
                              2021</time></div>
                        </a></li>
                      <li id="c-70"><a href="/solo-bug-player/chapter-68" title="Solo Bug Player - Chapter 68">
                          <div><strong class="chapter-title">Chapter 68</strong><time class="chapter-update">Jul 11,
                              2021</time></div>
                        </a></li>
                      <li id="c-69"><a href="/solo-bug-player/chapter-67" title="Solo Bug Player - Chapter 67">
                          <div><strong class="chapter-title">Chapter 67</strong><time class="chapter-update">Jun 29,
                              2021</time></div>
                        </a></li>
                      <li id="c-68"><a href="/solo-bug-player/chapter-66" title="Solo Bug Player - Chapter 66">
                          <div><strong class="chapter-title">Chapter 66</strong><time class="chapter-update">Jun 17,
                              2021</time></div>
                        </a></li>
                      <li id="c-67"><a href="/solo-bug-player/chapter-65" title="Solo Bug Player - Chapter 65">
                          <div><strong class="chapter-title">Chapter 65</strong><time class="chapter-update">Jun 12,
                              2021</time></div>
                        </a></li>
                      <li id="c-66"><a href="/solo-bug-player/chapter-64" title="Solo Bug Player - Chapter 64">
                          <div><strong class="chapter-title">Chapter 64</strong><time class="chapter-update">Jun 05,
                              2021</time></div>
                        </a></li>
                      <li id="c-65"><a href="/solo-bug-player/chapter-63" title="Solo Bug Player - Chapter 63">
                          <div><strong class="chapter-title">Chapter 63</strong><time class="chapter-update">May 29,
                              2021</time></div>
                        </a></li>
                      <li id="c-64"><a href="/solo-bug-player/chapter-62" title="Solo Bug Player - Chapter 62">
                          <div><strong class="chapter-title">Chapter 62</strong><time class="chapter-update">May 21,
                              2021</time></div>
                        </a></li>
                      <li id="c-63"><a href="/solo-bug-player/chapter-61" title="Solo Bug Player - Chapter 61">
                          <div><strong class="chapter-title">Chapter 61</strong><time class="chapter-update">May 14,
                              2021</time></div>
                        </a></li>
                      <li id="c-62"><a href="/solo-bug-player/chapter-60" title="Solo Bug Player - Chapter 60">
                          <div><strong class="chapter-title">Chapter 60</strong><time class="chapter-update">May 07,
                              2021</time></div>
                        </a></li>
                      <li id="c-61"><a href="/solo-bug-player/chapter-59" title="Solo Bug Player - Chapter 59">
                          <div><strong class="chapter-title">Chapter 59</strong><time class="chapter-update">Apr 29,
                              2021</time></div>
                        </a></li>
                      <li id="c-60"><a href="/solo-bug-player/chapter-58" title="Solo Bug Player - Chapter 58">
                          <div><strong class="chapter-title">Chapter 58</strong><time class="chapter-update">Apr 19,
                              2021</time></div>
                        </a></li>
                      <li id="c-59"><a href="/solo-bug-player/chapter-57" title="Solo Bug Player - Chapter 57">
                          <div><strong class="chapter-title">Chapter 57</strong><time class="chapter-update">Apr 14,
                              2021</time></div>
                        </a></li>
                      <li id="c-58"><a href="/solo-bug-player/chapter-56" title="Solo Bug Player - Chapter 56">
                          <div><strong class="chapter-title">Chapter 56</strong><time class="chapter-update">Apr 06,
                              2021</time></div>
                        </a></li>
                      <li id="c-57"><a href="/solo-bug-player/chapter-55" title="Solo Bug Player - Chapter 55">
                          <div><strong class="chapter-title">Chapter 55</strong><time class="chapter-update">Apr 02,
                              2021</time></div>
                        </a></li>
                      <li id="c-56"><a href="/solo-bug-player/chapter-54" title="Solo Bug Player - Chapter 54">
                          <div><strong class="chapter-title">Chapter 54</strong><time class="chapter-update">Mar 24,
                              2021</time></div>
                        </a></li>
                      <li id="c-55"><a href="/solo-bug-player/chapter-53" title="Solo Bug Player - Chapter 53">
                          <div><strong class="chapter-title">Chapter 53</strong><time class="chapter-update">Mar 20,
                              2021</time></div>
                        </a></li>
                      <li id="c-54"><a href="/solo-bug-player/chapter-52" title="Solo Bug Player - Chapter 52">
                          <div><strong class="chapter-title">Chapter 52</strong><time class="chapter-update">Mar 11,
                              2021</time></div>
                        </a></li>
                      <li id="c-53"><a href="/solo-bug-player/chapter-51" title="Solo Bug Player - Chapter 51">
                          <div><strong class="chapter-title">Chapter 51</strong><time class="chapter-update">Mar 03,
                              2021</time></div>
                        </a></li>
                      <li id="c-52"><a href="/solo-bug-player/chapter-50" title="Solo Bug Player - Chapter 50">
                          <div><strong class="chapter-title">Chapter 50</strong><time class="chapter-update">Mar 04,
                              2021</time></div>
                        </a></li>
                      <li id="c-51"><a href="/solo-bug-player/chapter-49" title="Solo Bug Player - Chapter 49">
                          <div><strong class="chapter-title">Chapter 49</strong><time class="chapter-update">Mar 04,
                              2021</time></div>
                        </a></li>
                      <li id="c-50"><a href="/solo-bug-player/chapter-48" title="Solo Bug Player - Chapter 48">
                          <div><strong class="chapter-title">Chapter 48</strong><time class="chapter-update">Mar 04,
                              2021</time></div>
                        </a></li>
                      <li id="c-49"><a href="/solo-bug-player/chapter-47" title="Solo Bug Player - Chapter 47">
                          <div><strong class="chapter-title">Chapter 47</strong><time class="chapter-update">Mar 04,
                              2021</time></div>
                        </a></li>
                      <li id="c-48"><a href="/solo-bug-player/chapter-46" title="Solo Bug Player - Chapter 46">
                          <div><strong class="chapter-title">Chapter 46</strong><time class="chapter-update">Feb 22,
                              2021</time></div>
                        </a></li>
                      <li id="c-47"><a href="/solo-bug-player/chapter-45" title="Solo Bug Player - Chapter 45">
                          <div><strong class="chapter-title">Chapter 45</strong><time class="chapter-update">Feb 21,
                              2021</time></div>
                        </a></li>
                      <li id="c-46"><a href="/solo-bug-player/chapter-44" title="Solo Bug Player - Chapter 44">
                          <div><strong class="chapter-title">Chapter 44</strong><time class="chapter-update">Feb 21,
                              2021</time></div>
                        </a></li>
                      <li id="c-45"><a href="/solo-bug-player/chapter-43" title="Solo Bug Player - Chapter 43">
                          <div><strong class="chapter-title">Chapter 43</strong><time class="chapter-update">Feb 15,
                              2021</time></div>
                        </a></li>
                      <li id="c-44"><a href="/solo-bug-player/chapter-42" title="Solo Bug Player - Chapter 42">
                          <div><strong class="chapter-title">Chapter 42</strong><time class="chapter-update">Feb 15,
                              2021</time></div>
                        </a></li>
                      <li id="c-43"><a href="/solo-bug-player/chapter-41" title="Solo Bug Player - Chapter 41">
                          <div><strong class="chapter-title">Chapter 41</strong><time class="chapter-update">Feb 13,
                              2021</time></div>
                        </a></li>
                      <li id="c-42"><a href="/solo-bug-player/chapter-40" title="Solo Bug Player - Chapter 40">
                          <div><strong class="chapter-title">Chapter 40</strong><time class="chapter-update">Dec 01,
                              2020</time></div>
                        </a></li>
                      <li id="c-41"><a href="/solo-bug-player/chapter-39" title="Solo Bug Player - Chapter 39">
                          <div><strong class="chapter-title">Chapter 39</strong><time class="chapter-update">Nov 24,
                              2020</time></div>
                        </a></li>
                      <li id="c-40"><a href="/solo-bug-player/chapter-38" title="Solo Bug Player - Chapter 38">
                          <div><strong class="chapter-title">Chapter 38</strong><time class="chapter-update">Nov 24,
                              2020</time></div>
                        </a></li>
                      <li id="c-39"><a href="/solo-bug-player/chapter-37" title="Solo Bug Player - Chapter 37">
                          <div><strong class="chapter-title">Chapter 37</strong><time class="chapter-update">Nov 24,
                              2020</time></div>
                        </a></li>
                      <li id="c-38"><a href="/solo-bug-player/chapter-36" title="Solo Bug Player - Chapter 36">
                          <div><strong class="chapter-title">Chapter 36</strong><time class="chapter-update">Oct 21,
                              2020</time></div>
                        </a></li>
                      <li id="c-37"><a href="/solo-bug-player/chapter-35" title="Solo Bug Player - Chapter 35">
                          <div><strong class="chapter-title">Chapter 35</strong><time class="chapter-update">Oct 17,
                              2020</time></div>
                        </a></li>
                      <li id="c-36"><a href="/solo-bug-player/chapter-34" title="Solo Bug Player - Chapter 34">
                          <div><strong class="chapter-title">Chapter 34</strong><time class="chapter-update">Oct 17,
                              2020</time></div>
                        </a></li>
                      <li id="c-35"><a href="/solo-bug-player/chapter-33" title="Solo Bug Player - Chapter 33">
                          <div><strong class="chapter-title">Chapter 33</strong><time class="chapter-update">Oct 03,
                              2020</time></div>
                        </a></li>
                      <li id="c-34"><a href="/solo-bug-player/chapter-32" title="Solo Bug Player - Chapter 32">
                          <div><strong class="chapter-title">Chapter 32</strong><time class="chapter-update">Oct 03,
                              2020</time></div>
                        </a></li>
                      <li id="c-33"><a href="/solo-bug-player/chapter-31" title="Solo Bug Player - Chapter 31">
                          <div><strong class="chapter-title">Chapter 31</strong><time class="chapter-update">Sep 11,
                              2020</time></div>
                        </a></li>
                      <li id="c-32"><a href="/solo-bug-player/chapter-30" title="Solo Bug Player - Chapter 30">
                          <div><strong class="chapter-title">Chapter 30</strong><time class="chapter-update">Sep 02,
                              2020</time></div>
                        </a></li>
                      <li id="c-31"><a href="/solo-bug-player/chapter-29" title="Solo Bug Player - Chapter 29">
                          <div><strong class="chapter-title">Chapter 29</strong><time class="chapter-update">Sep 02,
                              2020</time></div>
                        </a></li>
                      <li id="c-30"><a href="/solo-bug-player/chapter-28" title="Solo Bug Player - Chapter 28">
                          <div><strong class="chapter-title">Chapter 28</strong><time class="chapter-update">Aug 15,
                              2020</time></div>
                        </a></li>
                      <li id="c-29"><a href="/solo-bug-player/chapter-27" title="Solo Bug Player - Chapter 27">
                          <div><strong class="chapter-title">Chapter 27</strong><time class="chapter-update">Aug 08,
                              2020</time></div>
                        </a></li>
                      <li id="c-28"><a href="/solo-bug-player/chapter-26" title="Solo Bug Player - Chapter 26">
                          <div><strong class="chapter-title">Chapter 26</strong><time class="chapter-update">Aug 03,
                              2020</time></div>
                        </a></li>
                      <li id="c-27"><a href="/solo-bug-player/chapter-25" title="Solo Bug Player - Chapter 25">
                          <div><strong class="chapter-title">Chapter 25</strong><time class="chapter-update">Jul 20,
                              2020</time></div>
                        </a></li>
                      <li id="c-26"><a href="/solo-bug-player/25" title="Solo Bug Player - 25">
                          <div><strong class="chapter-title">25</strong><time class="chapter-update">Jul 10, 2022</time>
                          </div>
                        </a></li>
                      <li id="c-25"><a href="/solo-bug-player/chapter-24" title="Solo Bug Player - Chapter 24">
                          <div><strong class="chapter-title">Chapter 24</strong><time class="chapter-update">Jul 19,
                              2020</time></div>
                        </a></li>
                      <li id="c-24"><a href="/solo-bug-player/chapter-23" title="Solo Bug Player - Chapter 23">
                          <div><strong class="chapter-title">Chapter 23</strong><time class="chapter-update">Jul 15,
                              2020</time></div>
                        </a></li>
                      <li id="c-23"><a href="/solo-bug-player/chapter-22" title="Solo Bug Player - Chapter 22">
                          <div><strong class="chapter-title">Chapter 22</strong><time class="chapter-update">Jul 10,
                              2020</time></div>
                        </a></li>
                      <li id="c-22"><a href="/solo-bug-player/chapter-21" title="Solo Bug Player - Chapter 21">
                          <div><strong class="chapter-title">Chapter 21</strong><time class="chapter-update">Jul 03,
                              2020</time></div>
                        </a></li>
                      <li id="c-21"><a href="/solo-bug-player/chapter-20" title="Solo Bug Player - Chapter 20">
                          <div><strong class="chapter-title">Chapter 20</strong><time class="chapter-update">Jul 03,
                              2020</time></div>
                        </a></li>
                      <li id="c-20"><a href="/solo-bug-player/chapter-19" title="Solo Bug Player - Chapter 19">
                          <div><strong class="chapter-title">Chapter 19</strong><time class="chapter-update">Jun 16,
                              2020</time></div>
                        </a></li>
                      <li id="c-19"><a href="/solo-bug-player/chapter-18" title="Solo Bug Player - Chapter 18">
                          <div><strong class="chapter-title">Chapter 18</strong><time class="chapter-update">Jun 02,
                              2020</time></div>
                        </a></li>
                      <li id="c-18"><a href="/solo-bug-player/chapter-17" title="Solo Bug Player - Chapter 17">
                          <div><strong class="chapter-title">Chapter 17</strong><time class="chapter-update">Jun 02,
                              2020</time></div>
                        </a></li>
                      <li id="c-17"><a href="/solo-bug-player/chapter-16" title="Solo Bug Player - Chapter 16">
                          <div><strong class="chapter-title">Chapter 16</strong><time class="chapter-update">May 21,
                              2020</time></div>
                        </a></li>
                      <li id="c-16"><a href="/solo-bug-player/chapter-15" title="Solo Bug Player - Chapter 15">
                          <div><strong class="chapter-title">Chapter 15</strong><time class="chapter-update">May 18,
                              2020</time></div>
                        </a></li>
                      <li id="c-15"><a href="/solo-bug-player/chapter-14" title="Solo Bug Player - Chapter 14">
                          <div><strong class="chapter-title">Chapter 14</strong><time class="chapter-update">May 05,
                              2020</time></div>
                        </a></li>
                      <li id="c-14"><a href="/solo-bug-player/chapter-13" title="Solo Bug Player - Chapter 13">
                          <div><strong class="chapter-title">Chapter 13</strong><time class="chapter-update">May 05,
                              2020</time></div>
                        </a></li>
                      <li id="c-13"><a href="/solo-bug-player/chapter-12" title="Solo Bug Player - Chapter 12">
                          <div><strong class="chapter-title">Chapter 12</strong><time class="chapter-update">May 05,
                              2020</time></div>
                        </a></li>
                      <li id="c-12"><a href="/solo-bug-player/chapter-11" title="Solo Bug Player - Chapter 11">
                          <div><strong class="chapter-title">Chapter 11</strong><time class="chapter-update">May 05,
                              2020</time></div>
                        </a></li>
                      <li id="c-11"><a href="/solo-bug-player/chapter-10" title="Solo Bug Player - Chapter 10">
                          <div><strong class="chapter-title">Chapter 10</strong><time class="chapter-update">May 05,
                              2020</time></div>
                        </a></li>
                      <li id="c-10"><a href="/solo-bug-player/chapter-9" title="Solo Bug Player - Chapter 9">
                          <div><strong class="chapter-title">Chapter 9</strong><time class="chapter-update">May 05,
                              2020</time></div>
                        </a></li>
                      <li id="c-9"><a href="/solo-bug-player/chapter-8" title="Solo Bug Player - Chapter 8">
                          <div><strong class="chapter-title">Chapter 8</strong><time class="chapter-update">May 05,
                              2020</time></div>
                        </a></li>
                      <li id="c-8"><a href="/solo-bug-player/chapter-7" title="Solo Bug Player - Chapter 7">
                          <div><strong class="chapter-title">Chapter 7</strong><time class="chapter-update">May 05,
                              2020</time></div>
                        </a></li>
                      <li id="c-7"><a href="/solo-bug-player/chapter-6" title="Solo Bug Player - Chapter 6">
                          <div><strong class="chapter-title">Chapter 6</strong><time class="chapter-update">May 05,
                              2020</time></div>
                        </a></li>
                      <li id="c-6"><a href="/solo-bug-player/chapter-5" title="Solo Bug Player - Chapter 5">
                          <div><strong class="chapter-title">Chapter 5</strong><time class="chapter-update">May 05,
                              2020</time></div>
                        </a></li>
                      <li id="c-5"><a href="/solo-bug-player/chapter-4" title="Solo Bug Player - Chapter 4">
                          <div><strong class="chapter-title">Chapter 4</strong><time class="chapter-update">May 05,
                              2020</time></div>
                        </a></li>
                      <li id="c-4"><a href="/solo-bug-player/chapter-3" title="Solo Bug Player - Chapter 3">
                          <div><strong class="chapter-title">Chapter 3</strong><time class="chapter-update">May 05,
                              2020</time></div>
                        </a></li>
                      <li id="c-3"><a href="/solo-bug-player/chapter-2" title="Solo Bug Player - Chapter 2">
                          <div><strong class="chapter-title">Chapter 2</strong><time class="chapter-update">May 05,
                              2020</time></div>
                        </a></li>
                      <li id="c-2"><a href="/solo-bug-player/chapter-1" title="Solo Bug Player - Chapter 1">
                          <div><strong class="chapter-title">Chapter 1</strong><time class="chapter-update">May 05,
                              2020</time></div>
                        </a></li>
                      <li id="c-1"><a href="/solo-bug-player/chapter-0-25" title="Solo Bug Player - 25">
                          <div><strong class="chapter-title">25</strong><time class="chapter-update">Jul 19, 2020</time>
                          </div>
                        </a></li>
                    </ul>
                    <div class="jump-index"><i style="margin-right: 10px;">Jump to :</i>
                      <div class="index-list"><span onclick="jumpToChapter(this)" data-idx="c-100">100</span></div>
                    </div>
                  </div>
                  <div class="readmore" id="show-more-chapters">
                    <span onclick="getChapters()">SHOW MORE<i class="fa fa-caret-down"></i></span>
                  </div>
                  <style>
                    .spinner2 {
                      margin: 100px auto;
                      width: 50px;
                      height: 40px;
                      text-align: center;
                      font-size: 10px;
                      position: absolute;
                      top: -20px;
                      left: 46%;
                      display: none;
                    }

                    .spinner2>div {
                      background-color: #27ae60;
                      height: 100%;
                      width: 6px;
                      display: inline-block;

                      -webkit-animation: sk-stretchdelay 1.2s infinite ease-in-out;
                      animation: sk-stretchdelay 1.2s infinite ease-in-out;
                    }

                    #search-form-large .spinner2,
                    #search .spinner2 {
                      margin: unset;
                      width: 40px;
                      height: 25px;
                      top: 3px;
                      right: 30px;
                      left: unset;
                    }

                    #search-form-large .spinner2 {
                      top: 5px;
                    }

                    #search-form-large .spinner2>div,
                    #search .spinner2>div {
                      width: 4px;
                    }

                    .spinner2 .rect2 {
                      -webkit-animation-delay: -1.1s;
                      animation-delay: -1.1s;
                    }

                    .spinner2 .rect3 {
                      -webkit-animation-delay: -1.0s;
                      animation-delay: -1.0s;
                    }

                    .spinner2 .rect4 {
                      -webkit-animation-delay: -0.9s;
                      animation-delay: -0.9s;
                    }

                    .spinner2 .rect5 {
                      -webkit-animation-delay: -0.8s;
                      animation-delay: -0.8s;
                    }

                    #search-form-large.loading .spinner2 {
                      display: block;
                    }

                    @-webkit-keyframes sk-stretchdelay {

                      0%,
                      40%,
                      100% {
                        -webkit-transform: scaleY(0.4)
                      }

                      20% {
                        -webkit-transform: scaleY(1.0)
                      }
                    }

                    @keyframes sk-stretchdelay {

                      0%,
                      40%,
                      100% {
                        transform: scaleY(0.4);
                        -webkit-transform: scaleY(0.4);
                      }

                      20% {
                        transform: scaleY(1.0);
                        -webkit-transform: scaleY(1.0);
                      }
                    }
                  </style>

                  <div class="spinner2">
                    <div class="rect1"></div>
                    <div class="rect2"></div>
                    <div class="rect3"></div>
                    <div class="rect4"></div>
                    <div class="rect5"></div>
                  </div>
                </div>
              </div>
              <div class="section box mt-1">
                <div class="section-header">
                  <div class="title"><span>SHARE THIS MANGA</span></div>
                </div>
                <div class="social_share_wrapper"><a class="count_facebook" rel="nofollow" target="_blank"
                    href="https://www.facebook.com/sharer.php?u=https://mangabuddy.com/solo-bug-player"><i
                      class="fab fa-facebook" aria-hidden="true"></i><span>Facebook</span></a><a class="count_twitter"
                    rel="nofollow" target="_blank"
                    href="https://twitter.com/share?url=https://mangabuddy.com/solo-bug-player&amp;text=Solo Bug Player"><i
                      class="fab fa-twitter" aria-hidden="true"></i><span>Twitter</span></a><a class="count_linkin"
                    rel="nofollow" target="_blank"
                    href="https://www.linkedin.com/shareArticle?mini=true&amp;title=Solo Bug Player&amp;url=https://mangabuddy.com/solo-bug-player"><i
                      class="fab fa-linkedin" aria-hidden="true"></i><span>LinkedIn</span></a><a class="count_reddit"
                    rel="nofollow" target="_blank"
                    href="https://www.reddit.com/submit?url=https://mangabuddy.com/solo-bug-player&amp;title=Solo Bug Player"><i
                      class="fab fa-reddit" aria-hidden="true"></i><span>Reddit</span></a><a class="count_linkin"
                    rel="nofollow" target="_blank"
                    href="https://vk.com/share.php?url=https://mangabuddy.com/solo-bug-player&amp;title=Solo Bug Player"><i
                      class="fab fa-vk" aria-hidden="true"></i><span>VK</span></a></div>
              </div>
              <div class="section box mt-1 total-comments">
                <div class="section-header">
                  <div class="title"><span>COMMENTS (323)</span></div>
                </div>
              </div>
              <style>
                .fb_iframe_widget_fluid_desktop,
                .fb_iframe_widget_fluid_desktop span,
                .fb_iframe_widget_fluid_desktop iframe {
                  max-width: 100% !important;
                  width: 100% !important;
                }

                .comments {
                  flex-direction: column;
                }
              </style>
              <div id="comment-section" class="section-box box comments" style="display: flex;">
                <style>
                  .tox-dialog {
                    align-self: unset !important;
                  }

                  .tox svg {
                    width: unset !important;
                    height: unset !important;
                  }

                  .tox .tox-dialog-wrap__backdrop,
                  .tox .tox-dialog-wrap__backdrop--opaque {
                    background-color: rgba(0, 0, 0, .35);
                  }
                </style>
                <div class="comment-box" style="padding: 10px;">
                  <form method="post" id="comment-form" data-mg-id="23574">
                    <textarea class="comment-content hidden" name="content" placeholder="Comment here" id="mce_0"
                      style="display: none;" aria-hidden="true"></textarea>
                    <div role="application" class="tox tox-tinymce" aria-disabled="false"
                      style="visibility: hidden; height: 250px;">
                      <div class="tox-editor-container">
                        <div data-alloy-vertical-dir="toptobottom" class="tox-editor-header">
                          <div role="menubar" data-alloy-tabstop="true" class="tox-menubar"></div>
                          <div class="tox-toolbar-overlord">
                            <div role="group" class="tox-toolbar" aria-disabled="false">
                              <div title="" role="toolbar" data-alloy-tabstop="true" tabindex="-1"
                                class="tox-toolbar__group"><button type="button" tabindex="-1" class="tox-tbtn"
                                  aria-disabled="false"><span class="tox-icon tox-tbtn__icon-wrap"><img
                                      class=" lazyloaded" data-src="https://stickers.mgcdn.xyz/manga-anime/2.gif"
                                      src="https://stickers.mgcdn.xyz/manga-anime/2.gif"></span></button></div>
                              <div title="" role="toolbar" data-alloy-tabstop="true" tabindex="-1"
                                class="tox-toolbar__group"><button type="button" tabindex="-1" class="tox-tbtn"
                                  aria-disabled="false"><span class="tox-icon tox-tbtn__icon-wrap"><img
                                      class=" lazyloaded"
                                      data-src="https://1.bp.blogspot.com/-DFdQ1q2SaUs/WtuC0Utob9I/AAAAAAABiEc/rRQ9PtVAFVwNPT5zcebGqOzsr_jXV8hwACKgBGAs/h120/14-yaoming.gif"
                                      src="https://1.bp.blogspot.com/-DFdQ1q2SaUs/WtuC0Utob9I/AAAAAAABiEc/rRQ9PtVAFVwNPT5zcebGqOzsr_jXV8hwACKgBGAs/h120/14-yaoming.gif"></span></button>
                              </div>
                              <div title="" role="toolbar" data-alloy-tabstop="true" tabindex="-1"
                                class="tox-toolbar__group"><button type="button" tabindex="-1" class="tox-tbtn"
                                  aria-disabled="false"><span class="tox-icon tox-tbtn__icon-wrap"><img
                                      class=" lazyloaded" data-src="https://stickers.mgcdn.xyz/poco/0.webp"
                                      src="https://stickers.mgcdn.xyz/poco/0.webp"></span></button></div>
                              <div title="" role="toolbar" data-alloy-tabstop="true" tabindex="-1"
                                class="tox-toolbar__group"><button type="button" tabindex="-1" class="tox-tbtn"
                                  aria-disabled="false"><span class="tox-icon tox-tbtn__icon-wrap"><img
                                      class=" lazyloaded"
                                      data-src="https://4.bp.blogspot.com/-6FolfhJO86k/WtuEMsXHwhI/AAAAAAABiFU/A26Oy7CZGxonyhcDJT8aLIalNuLrv3-4gCKgBGAs/s200/omg.gif"
                                      src="https://4.bp.blogspot.com/-6FolfhJO86k/WtuEMsXHwhI/AAAAAAABiFU/A26Oy7CZGxonyhcDJT8aLIalNuLrv3-4gCKgBGAs/s200/omg.gif"></span></button>
                              </div>
                              <div title="" role="toolbar" data-alloy-tabstop="true" tabindex="-1"
                                class="tox-toolbar__group"><button type="button" tabindex="-1" class="tox-tbtn"
                                  aria-disabled="false"><span class="tox-icon tox-tbtn__icon-wrap"><img
                                      class=" lazyloaded" data-src="https://stickers.mgcdn.xyz/pepe/79.gif"
                                      src="https://stickers.mgcdn.xyz/pepe/79.gif"></span></button></div>
                              <div title="" role="toolbar" data-alloy-tabstop="true" tabindex="-1"
                                class="tox-toolbar__group"><button type="button" tabindex="-1" class="tox-tbtn"
                                  aria-disabled="false"><span class="tox-icon tox-tbtn__icon-wrap"><img
                                      class=" lazyloaded" data-src="https://stickers.mgcdn.xyz/pepe-2/18.png"
                                      src="https://stickers.mgcdn.xyz/pepe-2/18.png"></span></button></div>
                              <div title="" role="toolbar" data-alloy-tabstop="true" tabindex="-1"
                                class="tox-toolbar__group"><button type="button" tabindex="-1" class="tox-tbtn"
                                  aria-disabled="false"><span class="tox-icon tox-tbtn__icon-wrap"><img
                                      class=" lazyloaded" data-src="https://stickers.mgcdn.xyz/bananos/8.gif"
                                      src="https://stickers.mgcdn.xyz/bananos/8.gif"></span></button></div>
                              <div title="" role="toolbar" data-alloy-tabstop="true" tabindex="-1"
                                class="tox-toolbar__group"><button type="button" tabindex="-1" class="tox-tbtn"
                                  aria-disabled="false"><span class="tox-icon tox-tbtn__icon-wrap"><img
                                      class=" lazyloaded" data-src="https://stickers.mgcdn.xyz/senya/1.gif"
                                      src="https://stickers.mgcdn.xyz/senya/1.gif"></span></button></div>
                              <div title="" role="toolbar" data-alloy-tabstop="true" tabindex="-1"
                                class="tox-toolbar__group"><button type="button" tabindex="-1" class="tox-tbtn"
                                  aria-disabled="false"><span class="tox-icon tox-tbtn__icon-wrap"><img
                                      class=" lazyloaded" data-src="https://stickers.mgcdn.xyz/coin/2.gif"
                                      src="https://stickers.mgcdn.xyz/coin/2.gif"></span></button></div>
                              <div title="" role="toolbar" data-alloy-tabstop="true" tabindex="-1"
                                class="tox-toolbar__group"><button type="button" tabindex="-1" class="tox-tbtn"
                                  aria-disabled="false"><span class="tox-icon tox-tbtn__icon-wrap"><img
                                      class=" lazyloaded"
                                      data-src="https://4.bp.blogspot.com/_1Jw2fzSntT0/TZC7pj3PEEI/AAAAAAAABJU/Kv_h-jA_rHQ/w1600/001.gif"
                                      src="https://4.bp.blogspot.com/_1Jw2fzSntT0/TZC7pj3PEEI/AAAAAAAABJU/Kv_h-jA_rHQ/w1600/001.gif"></span></button>
                              </div>
                              <div title="" role="toolbar" data-alloy-tabstop="true" tabindex="-1"
                                class="tox-toolbar__group"><button aria-label="Emoticons" title="Emoticons"
                                  type="button" tabindex="-1" class="tox-tbtn" aria-disabled="false"><span
                                    class="tox-icon tox-tbtn__icon-wrap"><svg width="24" height="24">
                                      <path
                                        d="M9 11c.6 0 1-.4 1-1s-.4-1-1-1a1 1 0 00-1 1c0 .6.4 1 1 1zm6 0c.6 0 1-.4 1-1s-.4-1-1-1a1 1 0 00-1 1c0 .6.4 1 1 1zm-3 5.5c2.1 0 4-1.5 4.4-3.5H7.6c.5 2 2.3 3.5 4.4 3.5zM12 4a8 8 0 100 16 8 8 0 000-16zm0 14.5a6.5 6.5 0 110-13 6.5 6.5 0 010 13z"
                                        fill-rule="nonzero"></path>
                                    </svg></span></button></div>
                            </div>
                            <div role="group" class="tox-toolbar" aria-disabled="false">
                              <div title="" role="toolbar" data-alloy-tabstop="true" tabindex="-1"
                                class="tox-toolbar__group"><button aria-label="Add spoiler" title="Add spoiler"
                                  type="button" tabindex="-1" class="tox-tbtn" aria-disabled="false"><span
                                    class="tox-icon tox-tbtn__icon-wrap"><svg width="24" height="24">
                                      <use
                                        xlink:href="/static/res/comments/plugins/spoiler/img/spoiler_icons.svg#addspoiler">
                                      </use>
                                    </svg></span></button></div>
                              <div title="" role="toolbar" data-alloy-tabstop="true" tabindex="-1"
                                class="tox-toolbar__group"><button aria-label="Remove spoiler" title="Remove spoiler"
                                  type="button" tabindex="-1" class="tox-tbtn" aria-disabled="false"><span
                                    class="tox-icon tox-tbtn__icon-wrap"><svg width="24" height="24">
                                      <use
                                        xlink:href="/static/res/comments/plugins/spoiler/img/spoiler_icons.svg#removespoiler">
                                      </use>
                                    </svg></span></button></div>
                              <div title="" role="toolbar" data-alloy-tabstop="true" tabindex="-1"
                                class="tox-toolbar__group"><button aria-label="Strikethrough" title="Strikethrough"
                                  type="button" tabindex="-1" class="tox-tbtn" aria-disabled="false"
                                  aria-pressed="false"><span class="tox-icon tox-tbtn__icon-wrap"><svg width="24"
                                      height="24">
                                      <g fill-rule="evenodd">
                                        <path
                                          d="M15.6 8.5c-.5-.7-1-1.1-1.3-1.3-.6-.4-1.3-.6-2-.6-2.7 0-2.8 1.7-2.8 2.1 0 1.6 1.8 2 3.2 2.3 4.4.9 4.6 2.8 4.6 3.9 0 1.4-.7 4.1-5 4.1A6.2 6.2 0 017 16.4l1.5-1.1c.4.6 1.6 2 3.7 2 1.6 0 2.5-.4 3-1.2.4-.8.3-2-.8-2.6-.7-.4-1.6-.7-2.9-1-1-.2-3.9-.8-3.9-3.6C7.6 6 10.3 5 12.4 5c2.9 0 4.2 1.6 4.7 2.4l-1.5 1.1z">
                                        </path>
                                        <path d="M5 11h14a1 1 0 010 2H5a1 1 0 010-2z" fill-rule="nonzero"></path>
                                      </g>
                                    </svg></span></button></div>
                              <div title="" role="toolbar" data-alloy-tabstop="true" tabindex="-1"
                                class="tox-toolbar__group"><button aria-label="Bold" title="Bold" type="button"
                                  tabindex="-1" class="tox-tbtn" aria-disabled="false" aria-pressed="false"><span
                                    class="tox-icon tox-tbtn__icon-wrap"><svg width="24" height="24">
                                      <path
                                        d="M7.8 19c-.3 0-.5 0-.6-.2l-.2-.5V5.7c0-.2 0-.4.2-.5l.6-.2h5c1.5 0 2.7.3 3.5 1 .7.6 1.1 1.4 1.1 2.5a3 3 0 01-.6 1.9c-.4.6-1 1-1.6 1.2.4.1.9.3 1.3.6s.8.7 1 1.2c.4.4.5 1 .5 1.6 0 1.3-.4 2.3-1.3 3-.8.7-2.1 1-3.8 1H7.8zm5-8.3c.6 0 1.2-.1 1.6-.5.4-.3.6-.7.6-1.3 0-1.1-.8-1.7-2.3-1.7H9.3v3.5h3.4zm.5 6c.7 0 1.3-.1 1.7-.4.4-.4.6-.9.6-1.5s-.2-1-.7-1.4c-.4-.3-1-.4-2-.4H9.4v3.8h4z"
                                        fill-rule="evenodd"></path>
                                    </svg></span></button></div>
                              <div title="" role="toolbar" data-alloy-tabstop="true" tabindex="-1"
                                class="tox-toolbar__group"><button aria-label="Italic" title="Italic" type="button"
                                  tabindex="-1" class="tox-tbtn" aria-disabled="false" aria-pressed="false"><span
                                    class="tox-icon tox-tbtn__icon-wrap"><svg width="24" height="24">
                                      <path
                                        d="M16.7 4.7l-.1.9h-.3c-.6 0-1 0-1.4.3-.3.3-.4.6-.5 1.1l-2.1 9.8v.6c0 .5.4.8 1.4.8h.2l-.2.8H8l.2-.8h.2c1.1 0 1.8-.5 2-1.5l2-9.8.1-.5c0-.6-.4-.8-1.4-.8h-.3l.2-.9h5.8z"
                                        fill-rule="evenodd"></path>
                                    </svg></span></button></div>
                              <div title="" role="toolbar" data-alloy-tabstop="true" tabindex="-1"
                                class="tox-toolbar__group">
                                <div aria-pressed="false" aria-label="Text color" title="Text color" role="button"
                                  aria-haspopup="true" unselectable="on" tabindex="-1" class="tox-split-button"
                                  aria-disabled="false" aria-expanded="false"
                                  aria-describedby="aria_4051616291701697466970011" style="user-select: none;"><span
                                    role="presentation" tabindex="-1" class="tox-tbtn" aria-disabled="false"><span
                                      class="tox-icon tox-tbtn__icon-wrap"><svg width="24" height="24">
                                        <g fill-rule="evenodd">
                                          <path id="tox-icon-text-color__color" d="M3 18h18v3H3z"></path>
                                          <path
                                            d="M8.7 16h-.8a.5.5 0 01-.5-.6l2.7-9c.1-.3.3-.4.5-.4h2.8c.2 0 .4.1.5.4l2.7 9a.5.5 0 01-.5.6h-.8a.5.5 0 01-.4-.4l-.7-2.2c0-.3-.3-.4-.5-.4h-3.4c-.2 0-.4.1-.5.4l-.7 2.2c0 .3-.2.4-.4.4zm2.6-7.6l-.6 2a.5.5 0 00.5.6h1.6a.5.5 0 00.5-.6l-.6-2c0-.3-.3-.4-.5-.4h-.4c-.2 0-.4.1-.5.4z">
                                          </path>
                                        </g>
                                      </svg></span></span><span role="presentation" tabindex="-1"
                                    class="tox-tbtn tox-split-button__chevron" aria-disabled="false"><svg width="10"
                                      height="10">
                                      <path
                                        d="M8.7 2.2c.3-.3.8-.3 1 0 .4.4.4.9 0 1.2L5.7 7.8c-.3.3-.9.3-1.2 0L.2 3.4a.8.8 0 010-1.2c.3-.3.8-.3 1.1 0L5 6l3.7-3.8z"
                                        fill-rule="nonzero"></path>
                                    </svg></span><span aria-hidden="true" id="aria_4051616291701697466970011"
                                    style="display: none;">To open the popup, press Shift+Enter</span></div>
                              </div>
                              <div title="" role="toolbar" data-alloy-tabstop="true" tabindex="-1"
                                class="tox-toolbar__group">
                                <div aria-pressed="false" aria-label="Background color" title="Background color"
                                  role="button" aria-haspopup="true" unselectable="on" tabindex="-1"
                                  class="tox-split-button" aria-disabled="false" aria-expanded="false"
                                  aria-describedby="aria_5499728871721697466970012" style="user-select: none;"><span
                                    role="presentation" tabindex="-1" class="tox-tbtn" aria-disabled="false"><span
                                      class="tox-icon tox-tbtn__icon-wrap"><svg width="24" height="24">
                                        <g fill-rule="evenodd">
                                          <path id="tox-icon-highlight-bg-color__color" d="M3 18h18v3H3z"></path>
                                          <path fill-rule="nonzero"
                                            d="M7.7 16.7H3l3.3-3.3-.7-.8L10.2 8l4 4.1-4 4.2c-.2.2-.6.2-.8 0l-.6-.7-1.1 1.1zm5-7.5L11 7.4l3-2.9a2 2 0 012.6 0L18 6c.7.7.7 2 0 2.7l-2.9 2.9-1.8-1.8-.5-.6">
                                          </path>
                                        </g>
                                      </svg></span></span><span role="presentation" tabindex="-1"
                                    class="tox-tbtn tox-split-button__chevron" aria-disabled="false"><svg width="10"
                                      height="10">
                                      <path
                                        d="M8.7 2.2c.3-.3.8-.3 1 0 .4.4.4.9 0 1.2L5.7 7.8c-.3.3-.9.3-1.2 0L.2 3.4a.8.8 0 010-1.2c.3-.3.8-.3 1.1 0L5 6l3.7-3.8z"
                                        fill-rule="nonzero"></path>
                                    </svg></span><span aria-hidden="true" id="aria_5499728871721697466970012"
                                    style="display: none;">To open the popup, press Shift+Enter</span></div>
                              </div>
                            </div>
                          </div>
                          <div class="tox-anchorbar"></div>
                        </div>
                        <div class="tox-sidebar-wrap">
                          <div class="tox-edit-area"><iframe id="mce_0_ifr" frameborder="0" allowtransparency="true"
                              title="Rich Text Area. Press ALT-0 for help." class="tox-edit-area__iframe"></iframe>
                          </div>
                          <div role="complementary" class="tox-sidebar">
                            <div data-alloy-tabstop="true" tabindex="-1"
                              class="tox-sidebar__slider tox-sidebar--sliding-closed" style="width: 0px;">
                              <div class="tox-sidebar__pane-container"></div>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class="tox-statusbar">
                        <div class="tox-statusbar__text-container">
                          <div role="navigation" data-alloy-tabstop="true" class="tox-statusbar__path"
                            aria-disabled="false"></div>
                        </div>
                        <div title="Resize" data-alloy-tabstop="true" tabindex="-1"
                          class="tox-statusbar__resize-handle"><svg width="10" height="10">
                            <g fill-rule="nonzero">
                              <path
                                d="M8.1 1.1A.5.5 0 119 2l-7 7A.5.5 0 111 8l7-7zM8.1 5.1A.5.5 0 119 6l-3 3A.5.5 0 115 8l3-3z">
                              </path>
                            </g>
                          </svg></div>
                      </div>
                      <div aria-hidden="true" class="tox-throbber" style="display: none;"></div>
                    </div>
                    <div class="comment-error">
                    </div>
                    <div class="user-info" id="comment-user-info">
                      <div class="" id="anonymous-form">
                        <input maxlength="20" placeholder="Name (required)" required="" type="text"
                          name="anonymous_name">
                        <input maxlength="50" placeholder="Email (optional)" type="email" name="anonymous_email">
                      </div>
                      <button class="submit-btn button main__button" type="submit"
                        style="padding: 0 30px;">Send</button>
                      <span id="user-name" style="padding-left: 10px;"></span>
                    </div>
                  </form>
                </div>
                <div align="center" style="padding: 3px 0;width: 100%; max-width: 100%; overflow: hidden;">
                  <div id="pf-1114-1">
                    <script>window.pubfuturetag = window.pubfuturetag || []; window.pubfuturetag.push({ unit: "6205e2bda9ec980774bd0a89", id: "pf-1114-1" })</script>
                  </div>
                </div>
                <div class="section box" style="display: block;">
                  <div class="sort-view">
                    <i style="margin-right: 10px;">Sort by :</i>
                    <div class="sort-options sort-comments">
                      <a href="javascript:;" sort-type="newest" onclick="return reloadComments(this);"
                        class="active">NEWEST</a>
                      <a href="javascript:;" sort-type="replies" onclick="return reloadComments(this);"
                        class="">REPLIES</a>
                      <a href="javascript:;" sort-type="oldest" onclick="return reloadComments(this);"
                        class="">OLDEST</a>
                    </div>
                  </div>
                </div>
                <div id="comment-list" class="comment-list">
                  <div id="comment-count" value="323"></div>
                  <div id="comment-page-data" data-page="1" data-type="manga"></div>
                  <div class="comment-item" id="cm-13792450">
                    <div class="author">
                      <span class="avatar-letter" style="background: rgb(80, 0, 0);">P</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">ProveYourself</span>
                        <abbr class="comment-date" value="1695676119" title="25/9/2023 23:08">
                          <span>20 days ago</span></abbr>
                        <a href="/solo-bug-player/chapter-58"><span class="comment-chapter">Chapter 58</span></a>
                        <div class="summary">
                          How much will he get if he finds the other 4 lost relics
                        </div>
                        <div class="comment-tools">
                          <span p-id="13792450" c-id="13792450" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-13792450">
                            <span title="Like" class="reaction-btn like" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <span title="Dislike" class="reaction-btn dislike" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-13792450"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-13792450"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="13792450"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="13792450"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="comment-item" id="cm-13705838">
                    <div class="author">
                      <span class="avatar-letter" style="background: rgb(90, 0, 0);">Z</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">Za weeb</span>
                        <abbr class="comment-date" value="1695275516" title="21/9/2023 07:51">
                          <span>25 days ago</span></abbr>
                        <a href="/solo-bug-player/chapter-23"><span class="comment-chapter">Chapter 23</span></a>
                        <div class="summary">
                          <img data-src="https://stickers.mgcdn.xyz/trollface/43.gif" style="max-width:150px"
                            class=" lazyloaded" src="https://stickers.mgcdn.xyz/trollface/43.gif">
                        </div>
                        <div class="comment-tools">
                          <span p-id="13705838" c-id="13705838" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-13705838">
                            <span title="Like" class="reaction-btn like" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <span title="Dislike" class="reaction-btn dislike" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-13705838"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-13705838"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="13705838"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="13705838"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="comment-item" id="cm-13704777">
                    <div class="author">
                      <span class="avatar-letter" style="background: rgb(90, 0, 0);">Z</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">Za weeb</span>
                        <abbr class="comment-date" value="1695269564" title="21/9/2023 06:12">
                          <span>25 days ago</span></abbr>
                        <a href="/solo-bug-player/chapter-14"><span class="comment-chapter">Chapter 14</span></a>
                        <div class="summary">
                          <img data-src="https://stickers.mgcdn.xyz/bunny/91.gif" class=" lazyloaded"
                            src="https://stickers.mgcdn.xyz/bunny/91.gif">
                        </div>
                        <div class="comment-tools">
                          <span p-id="13704777" c-id="13704777" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-13704777">
                            <span title="Like" class="reaction-btn like" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <span title="Dislike" class="reaction-btn dislike" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-13704777"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-13704777"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="13704777"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="13704777"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="comment-item" id="cm-13697093">
                    <div class="author">
                      <span class="avatar-letter" style="background: rgb(90, 0, 0);">Z</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">Za weeb</span>
                        <abbr class="comment-date" value="1695227019" title="20/9/2023 18:23">
                          <span>25 days ago</span></abbr>
                        <a href="/solo-bug-player/chapter-6"><span class="comment-chapter">Chapter 6</span></a>
                        <div class="summary">
                          <img data-src="https://stickers.mgcdn.xyz/senya/2.gif" style="max-width:100px"
                            class=" lazyloaded" src="https://stickers.mgcdn.xyz/senya/2.gif">
                        </div>
                        <div class="comment-tools">
                          <span p-id="13697093" c-id="13697093" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-13697093">
                            <span title="Like" class="reaction-btn like" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <span title="Dislike" class="reaction-btn dislike" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-13697093"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-13697093"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="13697093"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="13697093"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="comment-item" id="cm-13697089">
                    <div class="author">
                      <span class="avatar-letter" style="background: rgb(90, 0, 0);">Z</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">Za weeb</span>
                        <abbr class="comment-date" value="1695227011" title="20/9/2023 18:23">
                          <span>25 days ago</span></abbr>
                        <a href="/solo-bug-player/chapter-6"><span class="comment-chapter">Chapter 6</span></a>
                        <div class="summary">
                          <img data-src="https://stickers.mgcdn.xyz/poco/7.webp" width="50" class=" lazyloaded"
                            src="https://stickers.mgcdn.xyz/poco/7.webp">
                        </div>
                        <div class="comment-tools">
                          <span p-id="13697089" c-id="13697089" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-13697089">
                            <span title="Like" class="reaction-btn like" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <span title="Dislike" class="reaction-btn dislike" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-13697089"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-13697089"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="13697089"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="13697089"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="comment-item" id="cm-13697032">
                    <div class="author">
                      <span class="avatar-letter" style="background: rgb(90, 0, 0);">Z</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">Za weeb</span>
                        <abbr class="comment-date" value="1695226789" title="20/9/2023 18:19">
                          <span>25 days ago</span></abbr>
                        <a href="/solo-bug-player/chapter-5"><span class="comment-chapter">Chapter 5</span></a>
                        <div class="summary">
                          <img data-src="https://stickers.mgcdn.xyz/pepe-2/9.png" style="max-width:100px"
                            class=" lazyloaded" src="https://stickers.mgcdn.xyz/pepe-2/9.png"><img
                            data-src="https://stickers.mgcdn.xyz/pepe/98.png" style="max-width:150px"
                            class=" lazyloaded" src="https://stickers.mgcdn.xyz/pepe/98.png">
                        </div>
                        <div class="comment-tools">
                          <span p-id="13697032" c-id="13697032" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-13697032">
                            <span title="Like" class="reaction-btn like" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <span title="Dislike" class="reaction-btn dislike" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-13697032"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-13697032"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="13697032"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="13697032"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="comment-item" id="cm-13696889">
                    <div class="author">
                      <span class="avatar-letter" style="background: rgb(90, 0, 0);">Z</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">Za weeb</span>
                        <abbr class="comment-date" value="1695226233" title="20/9/2023 18:10">
                          <span>25 days ago</span></abbr>
                        <a href="/solo-bug-player/chapter-3"><span class="comment-chapter">Chapter 3</span></a>
                        <div class="summary">
                          <img data-src="https://stickers.mgcdn.xyz/manga-anime/1.gif" style="max-width:150px"
                            class=" lazyloaded" src="https://stickers.mgcdn.xyz/manga-anime/1.gif">bo***
                        </div>
                        <div class="comment-tools">
                          <span p-id="13696889" c-id="13696889" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-13696889">
                            <span title="Like" class="reaction-btn like" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <span title="Dislike" class="reaction-btn dislike" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-13696889"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-13696889"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="13696889"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="13696889"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="comment-item" id="cm-13696887">
                    <div class="author">
                      <span class="avatar-letter" style="background: rgb(90, 0, 0);">Z</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">Za weeb</span>
                        <abbr class="comment-date" value="1695226219" title="20/9/2023 18:10">
                          <span>25 days ago</span></abbr>
                        <a href="/solo-bug-player/chapter-3"><span class="comment-chapter">Chapter 3</span></a>
                        <div class="summary">
                          <img data-src="https://stickers.mgcdn.xyz/trollface/1.png" style="max-width:150px"
                            class=" lazyloaded" src="https://stickers.mgcdn.xyz/trollface/1.png">
                        </div>
                        <div class="comment-tools">
                          <span p-id="13696887" c-id="13696887" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-13696887">
                            <span title="Like" class="reaction-btn like" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <span title="Dislike" class="reaction-btn dislike" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-13696887"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-13696887"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="13696887"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="13696887"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="comment-item" id="cm-13696882">
                    <div class="author">
                      <span class="avatar-letter" style="background: rgb(90, 0, 0);">Z</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">Za weeb</span>
                        <abbr class="comment-date" value="1695226184" title="20/9/2023 18:09">
                          <span>25 days ago</span></abbr>
                        <a href="/solo-bug-player/chapter-3"><span class="comment-chapter">Chapter 3</span></a>
                        <div class="summary">
                          <img data-src="https://stickers.mgcdn.xyz/pepe/73.webp" style="max-width:150px"
                            class=" lazyloaded" src="https://stickers.mgcdn.xyz/pepe/73.webp"><img
                            data-src="https://stickers.mgcdn.xyz/pepe/0.webp" style="max-width:150px"
                            class=" lazyloaded" src="https://stickers.mgcdn.xyz/pepe/0.webp">
                        </div>
                        <div class="comment-tools">
                          <span p-id="13696882" c-id="13696882" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-13696882">
                            <span title="Like" class="reaction-btn like" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <span title="Dislike" class="reaction-btn dislike" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-13696882"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-13696882"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="13696882"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="13696882"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="comment-item" id="cm-13063091">
                    <div class="author">
                      <img src="https://thumb.youmadcdn.xyz/users/b7ce65aa-01bf-48e7-acfc-6fd4fcab21d7.jpg"
                        class=" lazyloaded"
                        data-src="https://thumb.youmadcdn.xyz/users/b7ce65aa-01bf-48e7-acfc-6fd4fcab21d7.jpg"
                        style="display: inline;">
                      <span class="author-type member">Member</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">JIKOOKKINDER</span>
                        <abbr class="comment-date" value="1692498579" title="20/8/2023 04:29">
                          <span>a month ago</span></abbr>
                        <a href="/solo-bug-player/chapter-30"><span class="comment-chapter">Chapter 30</span></a>
                        <div class="summary">
                          What's the translator problem with gay people hum? Are you flustered? You so imature like
                          everything is "gay" are you 11 or something? Like? Been gay is not weird ir anything like
                          that, but been homophobic is just dumb and shows how flustraded your life is that you have to
                          take care of people you don't know sexually. Like? Only you and your weird friends circle
                          thinks that saying uts "gay" is cool lol grown u
                        </div>
                        <div class="comment-tools">
                          <span p-id="13063091" c-id="13063091" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-13063091">
                            <span title="Like" class="reaction-btn liked" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count">(1)</i>
                            </span>
                            <span title="Dislike" class="reaction-btn disliked" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count">(1)</i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-13063091"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-13063091"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="13063091"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="13063091"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="comment-item" id="cm-12881604">
                    <div class="author">
                      <img src="https://thumb.youmadcdn.xyz/users/5ede6876-4c48-4944-a8b0-a18253afd6ac.jpg"
                        class=" lazyloaded"
                        data-src="https://thumb.youmadcdn.xyz/users/5ede6876-4c48-4944-a8b0-a18253afd6ac.jpg"
                        style="display: inline;">
                      <span class="author-type member">Member</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">Dokja</span>
                        <abbr class="comment-date" value="1691848177" title="12/8/2023 15:49">
                          <span>2 months ago</span></abbr>
                        <a href="/solo-bug-player/chapter-2"><span class="comment-chapter">Chapter 2</span></a>
                        <div class="summary">
                          Oml Isabelle gonna haunt him and me
                        </div>
                        <div class="comment-tools">
                          <span p-id="12881604" c-id="12881604" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-12881604">
                            <span title="Like" class="reaction-btn like" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <span title="Dislike" class="reaction-btn dislike" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-12881604"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-12881604"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="12881604"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="12881604"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="comment-item" id="cm-12881407">
                    <div class="author">
                      <img src="https://thumb.youmadcdn.xyz/users/5ede6876-4c48-4944-a8b0-a18253afd6ac.jpg"
                        class=" lazyloaded"
                        data-src="https://thumb.youmadcdn.xyz/users/5ede6876-4c48-4944-a8b0-a18253afd6ac.jpg"
                        style="display: inline;">
                      <span class="author-type member">Member</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">Dokja</span>
                        <abbr class="comment-date" value="1691847666" title="12/8/2023 15:41">
                          <span>2 months ago</span></abbr>
                        <a href="/solo-bug-player/chapter-1"><span class="comment-chapter">Chapter 1</span></a>
                        <div class="summary">
                          Omfg that's scary
                        </div>
                        <div class="comment-tools">
                          <span p-id="12881407" c-id="12881407" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-12881407">
                            <span title="Like" class="reaction-btn like" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <span title="Dislike" class="reaction-btn dislike" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-12881407"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-12881407"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="12881407"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="12881407"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="comment-item" id="cm-12749361">
                    <div class="author">
                      <img src="https://thumb.youmadcdn.xyz/users/e5c84496-653d-4c1a-8d6c-70698c77eec7.png"
                        class=" lazyloaded"
                        data-src="https://thumb.youmadcdn.xyz/users/e5c84496-653d-4c1a-8d6c-70698c77eec7.png"
                        style="display: inline;">
                      <span class="author-type member">Member</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">WAt</span>
                        <abbr class="comment-date" value="1691360565" title="7/8/2023 00:22">
                          <span>2 months ago</span></abbr>
                        <a href="/solo-bug-player/chapter-45"><span class="comment-chapter">Chapter 45</span></a>
                        <div class="summary">
                          rakis can sweet talk
                        </div>
                        <div class="signature">
                          <p>im always half asleep<br>
                          </p>
                          <div class="spoiler">
                            <div class="spoiler-toggle">Spoiler!</div>
                            <div class="spoiler-text">berserker class mangas are the best fight me</div>
                          </div>
                          &nbsp;<br>ㅤㅤㅤㅤㅤㅤㅤ<p></p>
                        </div>
                        <div class="comment-tools">
                          <span p-id="12749361" c-id="12749361" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-12749361">
                            <span title="Like" class="reaction-btn like" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <span title="Dislike" class="reaction-btn dislike" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-12749361"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-12749361"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="12749361"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="12749361"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="comment-item" id="cm-12739245">
                    <div class="author">
                      <img src="https://thumb.youmadcdn.xyz/users/e5c84496-653d-4c1a-8d6c-70698c77eec7.png"
                        class=" lazyloaded"
                        data-src="https://thumb.youmadcdn.xyz/users/e5c84496-653d-4c1a-8d6c-70698c77eec7.png"
                        style="display: inline;">
                      <span class="author-type member">Member</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">WAt</span>
                        <abbr class="comment-date" value="1691326189" title="6/8/2023 14:49">
                          <span>2 months ago</span></abbr>
                        <a href="/solo-bug-player/chapter-37"><span class="comment-chapter">Chapter 37</span></a>
                        <div class="summary">
                          dont worry sir you will find yourself a beautiful one in your later days
                        </div>
                        <div class="signature">
                          <p>im always half asleep<br>
                          </p>
                          <div class="spoiler">
                            <div class="spoiler-toggle">Spoiler!</div>
                            <div class="spoiler-text">berserker class mangas are the best fight me</div>
                          </div>
                          &nbsp;<br>ㅤㅤㅤㅤㅤㅤㅤ<p></p>
                        </div>
                        <div class="comment-tools">
                          <span p-id="12739245" c-id="12739245" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-12739245">
                            <span title="Like" class="reaction-btn liked" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count">(1)</i>
                            </span>
                            <span title="Dislike" class="reaction-btn disliked" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count">(2)</i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-12739245"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-12739245"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="12739245"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="12739245"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="comment-item" id="cm-12738851">
                    <div class="author">
                      <img src="https://thumb.youmadcdn.xyz/users/e5c84496-653d-4c1a-8d6c-70698c77eec7.png"
                        class=" lazyloaded"
                        data-src="https://thumb.youmadcdn.xyz/users/e5c84496-653d-4c1a-8d6c-70698c77eec7.png"
                        style="display: inline;">
                      <span class="author-type member">Member</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">WAt</span>
                        <abbr class="comment-date" value="1691324753" title="6/8/2023 14:25">
                          <span>2 months ago</span></abbr>
                        <a href="/solo-bug-player/chapter-34"><span class="comment-chapter">Chapter 34</span></a>
                        <div class="summary">
                          even elden ring cant hold a candle on the goat named mahart
                        </div>
                        <div class="signature">
                          <p>im always half asleep<br>
                          </p>
                          <div class="spoiler">
                            <div class="spoiler-toggle">Spoiler!</div>
                            <div class="spoiler-text">berserker class mangas are the best fight me</div>
                          </div>
                          &nbsp;<br>ㅤㅤㅤㅤㅤㅤㅤ<p></p>
                        </div>
                        <div class="comment-tools">
                          <span p-id="12738851" c-id="12738851" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-12738851">
                            <span title="Like" class="reaction-btn like" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <span title="Dislike" class="reaction-btn dislike" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-12738851"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-12738851"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="12738851"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="12738851"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="comment-item" id="cm-12738650">
                    <div class="author">
                      <img src="/static/common/x.gif" class="lazy-img"
                        data-src="https://thumb.youmadcdn.xyz/users/e5c84496-653d-4c1a-8d6c-70698c77eec7.png"
                        style="display: inline;">
                      <span class="author-type member">Member</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">WAt</span>
                        <abbr class="comment-date" value="1691323981" title="6/8/2023 14:13">
                          <span>2 months ago</span></abbr>
                        <a href="/solo-bug-player/chapter-31"><span class="comment-chapter">Chapter 31</span></a>
                        <div class="summary">
                          SUN PRIEST WHY DID YOU TURN INTO A SIMP
                        </div>
                        <div class="signature">
                          <p>im always half asleep<br>
                          </p>
                          <div class="spoiler">
                            <div class="spoiler-toggle">Spoiler!</div>
                            <div class="spoiler-text">berserker class mangas are the best fight me</div>
                          </div>
                          &nbsp;<br>ㅤㅤㅤㅤㅤㅤㅤ<p></p>
                        </div>
                        <div class="comment-tools">
                          <span p-id="12738650" c-id="12738650" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-12738650">
                            <span title="Like" class="reaction-btn like" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <span title="Dislike" class="reaction-btn dislike" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-12738650"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-12738650"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="12738650"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="12738650"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="comment-item" id="cm-12738417">
                    <div class="author">
                      <img src="/static/common/x.gif" class="lazy-img"
                        data-src="https://thumb.youmadcdn.xyz/users/e5c84496-653d-4c1a-8d6c-70698c77eec7.png"
                        style="display: inline;">
                      <span class="author-type member">Member</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">WAt</span>
                        <abbr class="comment-date" value="1691323155" title="6/8/2023 13:59">
                          <span>2 months ago</span></abbr>
                        <a href="/solo-bug-player/chapter-27"><span class="comment-chapter">Chapter 27</span></a>
                        <div class="summary">
                          cant believe the former jared hit this girl
                        </div>
                        <div class="signature">
                          <p>im always half asleep<br>
                          </p>
                          <div class="spoiler">
                            <div class="spoiler-toggle">Spoiler!</div>
                            <div class="spoiler-text">berserker class mangas are the best fight me</div>
                          </div>
                          &nbsp;<br>ㅤㅤㅤㅤㅤㅤㅤ<p></p>
                        </div>
                        <div class="comment-tools">
                          <span p-id="12738417" c-id="12738417" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-12738417">
                            <span title="Like" class="reaction-btn liked" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count">(1)</i>
                            </span>
                            <span title="Dislike" class="reaction-btn dislike" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-12738417"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-12738417"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="12738417"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="12738417"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="comment-item" id="cm-12738034">
                    <div class="author">
                      <img src="/static/common/x.gif" class="lazy-img"
                        data-src="https://thumb.youmadcdn.xyz/users/e5c84496-653d-4c1a-8d6c-70698c77eec7.png"
                        style="display: inline;">
                      <span class="author-type member">Member</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">WAt</span>
                        <abbr class="comment-date" value="1691321682" title="6/8/2023 13:34">
                          <span>2 months ago</span></abbr>
                        <a href="/solo-bug-player/chapter-17"><span class="comment-chapter">Chapter 17</span></a>
                        <div class="summary">
                          this fella cant even be called a rat its too wasted on him
                        </div>
                        <div class="signature">
                          <p>im always half asleep<br>
                          </p>
                          <div class="spoiler">
                            <div class="spoiler-toggle">Spoiler!</div>
                            <div class="spoiler-text">berserker class mangas are the best fight me</div>
                          </div>
                          &nbsp;<br>ㅤㅤㅤㅤㅤㅤㅤ<p></p>
                        </div>
                        <div class="comment-tools">
                          <span p-id="12738034" c-id="12738034" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-12738034">
                            <span title="Like" class="reaction-btn like" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <span title="Dislike" class="reaction-btn dislike" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-12738034"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-12738034"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="12738034"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="12738034"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="comment-item" id="cm-12737478">
                    <div class="author">
                      <img src="/static/common/x.gif" class="lazy-img"
                        data-src="https://thumb.youmadcdn.xyz/users/e5c84496-653d-4c1a-8d6c-70698c77eec7.png"
                        style="display: inline;">
                      <span class="author-type member">Member</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">WAt</span>
                        <abbr class="comment-date" value="1691319388" title="6/8/2023 12:56">
                          <span>2 months ago</span></abbr>
                        <a href="/solo-bug-player/chapter-9"><span class="comment-chapter">Chapter 9</span></a>
                        <div class="summary">
                          JARED TURN BACK INTO THE FLUFFY BIG FELLA
                        </div>
                        <div class="signature">
                          <p>im always half asleep<br>
                          </p>
                          <div class="spoiler">
                            <div class="spoiler-toggle">Spoiler!</div>
                            <div class="spoiler-text">berserker class mangas are the best fight me</div>
                          </div>
                          &nbsp;<br>ㅤㅤㅤㅤㅤㅤㅤ<p></p>
                        </div>
                        <div class="comment-tools">
                          <span p-id="12737478" c-id="12737478" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-12737478">
                            <span title="Like" class="reaction-btn like" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <span title="Dislike" class="reaction-btn dislike" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-12737478"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-12737478"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="12737478"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="12737478"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="comment-item" id="cm-12737408">
                    <div class="author">
                      <img src="/static/common/x.gif" class="lazy-img"
                        data-src="https://thumb.youmadcdn.xyz/users/e5c84496-653d-4c1a-8d6c-70698c77eec7.png"
                        style="display: inline;">
                      <span class="author-type member">Member</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">WAt</span>
                        <abbr class="comment-date" value="1691319136" title="6/8/2023 12:52">
                          <span>2 months ago</span></abbr>
                        <a href="/solo-bug-player/chapter-7"><span class="comment-chapter">Chapter 7</span></a>
                        <div class="summary">
                          artist nim why are you making the end panel a grave
                        </div>
                        <div class="signature">
                          <p>im always half asleep<br>
                          </p>
                          <div class="spoiler">
                            <div class="spoiler-toggle">Spoiler!</div>
                            <div class="spoiler-text">berserker class mangas are the best fight me</div>
                          </div>
                          &nbsp;<br>ㅤㅤㅤㅤㅤㅤㅤ<p></p>
                        </div>
                        <div class="comment-tools">
                          <span p-id="12737408" c-id="12737408" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-12737408">
                            <span title="Like" class="reaction-btn like" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <span title="Dislike" class="reaction-btn dislike" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-12737408"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-12737408"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="12737408"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="12737408"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="comment-item" id="cm-12736237">
                    <div class="author">
                      <img src="/static/common/x.gif" class="lazy-img"
                        data-src="https://thumb.youmadcdn.xyz/users/e5c84496-653d-4c1a-8d6c-70698c77eec7.png"
                        style="display: inline;">
                      <span class="author-type member">Member</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">WAt</span>
                        <abbr class="comment-date" value="1691314389" title="6/8/2023 11:33">
                          <span>2 months ago</span></abbr>
                        <a href="/solo-bug-player/chapter-5"><span class="comment-chapter">Chapter 5</span></a>
                        <div class="summary">
                          a good friend
                        </div>
                        <div class="signature">
                          <p>im always half asleep<br>
                          </p>
                          <div class="spoiler">
                            <div class="spoiler-toggle">Spoiler!</div>
                            <div class="spoiler-text">berserker class mangas are the best fight me</div>
                          </div>
                          &nbsp;<br>ㅤㅤㅤㅤㅤㅤㅤ<p></p>
                        </div>
                        <div class="comment-tools">
                          <span p-id="12736237" c-id="12736237" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-12736237">
                            <span title="Like" class="reaction-btn like" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <span title="Dislike" class="reaction-btn dislike" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-12736237"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-12736237"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="12736237"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="12736237"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="comment-item" id="cm-12736138">
                    <div class="author">
                      <img src="/static/common/x.gif" class="lazy-img"
                        data-src="https://thumb.youmadcdn.xyz/users/e5c84496-653d-4c1a-8d6c-70698c77eec7.png"
                        style="display: inline;">
                      <span class="author-type member">Member</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">WAt</span>
                        <abbr class="comment-date" value="1691314004" title="6/8/2023 11:26">
                          <span>2 months ago</span></abbr>
                        <a href="/solo-bug-player/chapter-4"><span class="comment-chapter">Chapter 4</span></a>
                        <div class="summary">
                          gaslighting to the extreme holy sh**
                        </div>
                        <div class="signature">
                          <p>im always half asleep<br>
                          </p>
                          <div class="spoiler">
                            <div class="spoiler-toggle">Spoiler!</div>
                            <div class="spoiler-text">berserker class mangas are the best fight me</div>
                          </div>
                          &nbsp;<br>ㅤㅤㅤㅤㅤㅤㅤ<p></p>
                        </div>
                        <div class="comment-tools">
                          <span p-id="12736138" c-id="12736138" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-12736138">
                            <span title="Like" class="reaction-btn like" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <span title="Dislike" class="reaction-btn dislike" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-12736138"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-12736138"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="12736138"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="12736138"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="comment-item" id="cm-12735948">
                    <div class="author">
                      <img src="/static/common/x.gif" class="lazy-img"
                        data-src="https://thumb.youmadcdn.xyz/users/e5c84496-653d-4c1a-8d6c-70698c77eec7.png"
                        style="display: inline;">
                      <span class="author-type member">Member</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">WAt</span>
                        <abbr class="comment-date" value="1691313295" title="6/8/2023 11:14">
                          <span>2 months ago</span></abbr>
                        <a href="/solo-bug-player/chapter-2"><span class="comment-chapter">Chapter 2</span></a>
                        <div class="summary">
                          isabella, you must give jared his true love's kiss
                        </div>
                        <div class="signature">
                          <p>im always half asleep<br>
                          </p>
                          <div class="spoiler">
                            <div class="spoiler-toggle">Spoiler!</div>
                            <div class="spoiler-text">berserker class mangas are the best fight me</div>
                          </div>
                          &nbsp;<br>ㅤㅤㅤㅤㅤㅤㅤ<p></p>
                        </div>
                        <div class="comment-tools">
                          <span p-id="12735948" c-id="12735948" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-12735948">
                            <span title="Like" class="reaction-btn liked" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count">(2)</i>
                            </span>
                            <span title="Dislike" class="reaction-btn dislike" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-12735948"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-12735948"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="12735948"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="12735948"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="comment-item" id="cm-12731445">
                    <div class="author">
                      <img src="/static/common/x.gif" class="lazy-img"
                        data-src="https://thumb.youmadcdn.xyz/users/7863d96a-f9be-4fa8-80d0-c7e5b85b19db.jpg"
                        style="display: inline;">
                      <span class="author-type member">Member</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">swordsmastah</span>
                        <abbr class="comment-date" value="1691297646" title="6/8/2023 06:54">
                          <span>2 months ago</span></abbr>
                        <a href="/solo-bug-player/chapter-93"><span class="comment-chapter">Chapter 93</span></a>
                        <div class="summary">
                          this manhwa is sooooo good the best building kingdom manhwa I read so far
                        </div>
                        <div class="signature">
                          <p><img src="https://stickers.mgcdn.xyz/manga-anime/2.gif" style="max-width:150px"></p>
                        </div>
                        <div class="comment-tools">
                          <span p-id="12731445" c-id="12731445" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-12731445">
                            <span title="Like" class="reaction-btn like" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <span title="Dislike" class="reaction-btn dislike" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-12731445"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-12731445"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="12731445"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="12731445"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="comment-item" id="cm-12729723">
                    <div class="author">
                      <img src="/static/common/x.gif" class="lazy-img"
                        data-src="https://thumb.youmadcdn.xyz/users/7863d96a-f9be-4fa8-80d0-c7e5b85b19db.jpg"
                        style="display: inline;">
                      <span class="author-type member">Member</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">swordsmastah</span>
                        <abbr class="comment-date" value="1691290966" title="6/8/2023 05:02">
                          <span>2 months ago</span></abbr>
                        <a href="/solo-bug-player/chapter-66"><span class="comment-chapter">Chapter 66</span></a>
                        <div class="summary">
                          wat he is she?
                        </div>
                        <div class="signature">
                          <p><img src="https://stickers.mgcdn.xyz/manga-anime/2.gif" style="max-width:150px"></p>
                        </div>
                        <div class="comment-tools">
                          <span p-id="12729723" c-id="12729723" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-12729723">
                            <span title="Like" class="reaction-btn like" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <span title="Dislike" class="reaction-btn dislike" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-12729723"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-12729723"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="12729723"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="12729723"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="comment-item" id="cm-12494657">
                    <div class="author">
                      <img src="/static/common/x.gif" class="lazy-img"
                        data-src="https://thumb.youmadcdn.xyz/users/3bf6aeb0-c9e6-4406-8268-0867e24741ce.jpg"
                        style="display: inline;">
                      <span class="author-type member">Member</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">Callie</span>
                        <abbr class="comment-date" value="1690427947" title="27/7/2023 05:19">
                          <span>2 months ago</span></abbr>
                        <a href="/solo-bug-player/chapter-3"><span class="comment-chapter">Chapter 3</span></a>
                        <div class="summary">
                          tbh, he is so cute.
                        </div>
                        <div class="signature">
                          <p>No matter how innocent I try to look at it. Most readers are ho*** as fu**.</p>
                        </div>
                        <div class="comment-tools">
                          <span p-id="12494657" c-id="12494657" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-12494657">
                            <span title="Like" class="reaction-btn like" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <span title="Dislike" class="reaction-btn dislike" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-12494657"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-12494657"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="12494657"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="12494657"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="comment-item" id="cm-12348635">
                    <div class="author">
                      <img src="/static/common/x.gif" class="lazy-img"
                        data-src="https://thumb.youmadcdn.xyz/users/b62aeabf-2829-4d8c-bc74-c16e4b0bc0a9.png"
                        style="display: inline;">
                      <span class="author-type member">Member</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">Daver John</span>
                        <abbr class="comment-date" value="1689910421" title="21/7/2023 05:33">
                          <span>2 months ago</span></abbr>
                        <a href="/solo-bug-player/chapter-11"><span class="comment-chapter">Chapter 11</span></a>
                        <div class="summary">
                          That necklace, i need it 0_0
                        </div>
                        <div class="comment-tools">
                          <span p-id="12348635" c-id="12348635" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-12348635">
                            <span title="Like" class="reaction-btn like" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <span title="Dislike" class="reaction-btn dislike" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-12348635"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-12348635"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="12348635"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="12348635"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="comment-item" id="cm-12217665">
                    <div class="author">
                      <img src="/static/common/x.gif" class="lazy-img"
                        data-src="https://thumb.youmadcdn.xyz/users/6e2caf38-1184-4dea-8411-ced0fd3ccfda.png"
                        style="display: inline;">
                      <span class="author-type member">Member</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">Kaguya Chan</span>
                        <abbr class="comment-date" value="1689420574" title="15/7/2023 13:29">
                          <span>3 months ago</span></abbr>
                        <a href="/solo-bug-player/chapter-35"><span class="comment-chapter">Chapter 35</span></a>
                        <div class="summary">
                          I'm Sorry guys but this little bas**** is disgusting who do you think you are OUR MC IS NOT
                          GAY
                        </div>
                        <div class="comment-tools">
                          <span p-id="12217665" c-id="12217665" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-12217665">
                            <span title="Like" class="reaction-btn liked" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count">(1)</i>
                            </span>
                            <span title="Dislike" class="reaction-btn disliked" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count">(2)</i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-12217665"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-12217665"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="12217665"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="12217665"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="comment-item" id="cm-12202407">
                    <div class="author">
                      <img src="/static/common/x.gif" class="lazy-img"
                        data-src="https://thumb.youmadcdn.xyz/users/6e2caf38-1184-4dea-8411-ced0fd3ccfda.png"
                        style="display: inline;">
                      <span class="author-type member">Member</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">Kaguya Chan</span>
                        <abbr class="comment-date" value="1689358393" title="14/7/2023 20:13">
                          <span>3 months ago</span></abbr>
                        <a href="/solo-bug-player/chapter-10"><span class="comment-chapter">Chapter 10</span></a>
                        <div class="summary">
                          Im sorry but its disgusting bro please don't make wrong choice no matter what choose a girl
                          not gay guy
                        </div>
                        <div class="comment-tools">
                          <span p-id="12202407" c-id="12202407" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-12202407">
                            <span title="Like" class="reaction-btn like" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <span title="Dislike" class="reaction-btn disliked" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count">(2)</i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-12202407"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-12202407"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="12202407"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="12202407"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                      <div class="comment-replies" id="replies-12202407">
                        <div class="reply-list show">
                          <div class="comment-item reply-item" id="cm-12348339">
                            <div class="author">
                              <img src="/static/common/x.gif" class="lazy-img"
                                data-src="https://thumb.youmadcdn.xyz/users/b62aeabf-2829-4d8c-bc74-c16e4b0bc0a9.png"
                                style="display: inline;">
                              <span class="author-type member">Member</span>
                            </div>
                            <div class="comment-info">
                              <div class="comment-summary">
                                <span class="author-name">Daver John</span>
                                <abbr class="comment-date" value="1689909075" title="21/7/2023 05:11">
                                  <i class="fa fa-clock-o">
                                  </i><span>2 months ago</span></abbr>
                                <a href="/solo-bug-player/chapter-10"><span class="comment-chapter">Chapter
                                    10</span></a>
                                <div class="summary">
                                  <img data-src="https://stickers.mgcdn.xyz/bananos/8.gif" class="lazy-img">
                                </div>
                                <div class="comment-tools">
                                  <span p-id="12202407" c-id="12348339" class="btn reply-btn"
                                    onclick="replyClick(this);">Reply</span>
                                  <div class="comment-reactions" id="reactions-12348339">
                                    <span title="Like" class="reaction-btn like" action-type="like"
                                      onclick="reactionClick(this);">
                                      <span></span>
                                      <i class="reaction-count"></i>
                                    </span>
                                    <span title="Dislike" class="reaction-btn disliked" action-type="dislike"
                                      onclick="reactionClick(this);">
                                      <span></span>
                                      <i class="reaction-count">(1)</i>
                                    </span>
                                    <div class="dropdown">
                                      <a class="btn-dropdown" href="#" role="button" id="dropdown-12348339"
                                        data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="fas fa-ellipsis-v"></i>
                                      </a>
                                      <ul class="dropdown-menu" aria-labelledby="dropdown-12348339"
                                        style="background: #343a40;">
                                        <li><a class="dropdown-item" data-type="8" data-id="12348339"
                                            onclick="return reportComment(this);" href="javascript:">Report Spam</a>
                                        </li>
                                        <li><a class="dropdown-item" data-type="9" data-id="12348339"
                                            onclick="return reportComment(this);" href="javascript:">Report Spoil</a>
                                        </li>
                                      </ul>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>



                      </div>
                    </div>
                  </div>
                  <div class="comment-item" id="cm-12092192">
                    <div class="author">
                      <span class="avatar-letter" style="background: rgb(79, 0, 0);">O</span>
                    </div>
                    <div class="comment-info">
                      <div class="comment-summary">
                        <span style="margin-right: 7px;" class="author-name">O</span>
                        <abbr class="comment-date" value="1688931998" title="9/7/2023 21:46">
                          <span>3 months ago</span></abbr>
                        <a href="/solo-bug-player/chapter-119"><span class="comment-chapter">Chapter 119</span></a>
                        <div class="summary">
                          Harem time
                        </div>
                        <div class="comment-tools">
                          <span p-id="12092192" c-id="12092192" class="btn reply-btn"
                            onclick="replyClick(this);">Reply</span>
                          <div class="comment-reactions" id="reactions-12092192">
                            <span title="Like" class="reaction-btn like" action-type="like"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <span title="Dislike" class="reaction-btn dislike" action-type="dislike"
                              onclick="reactionClick(this);">
                              <span></span>
                              <i class="reaction-count"></i>
                            </span>
                            <div class="dropdown">
                              <a class="btn-dropdown" href="#" role="button" id="dropdown-12092192"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </a>
                              <ul class="dropdown-menu" aria-labelledby="dropdown-12092192"
                                style="background: #343a40;">
                                <li><a class="dropdown-item" data-type="8" data-id="12092192"
                                    onclick="return reportComment(this);" href="javascript:">Report Spam</a></li>
                                <li><a class="dropdown-item" data-type="9" data-id="12092192"
                                    onclick="return reportComment(this);" href="javascript:">Report Spoil</a></li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="">
                    <style>
                      select {
                        -webkit-appearance: menulist;
                        border: 1px solid #BFD8DF;
                        -moz-border-radius: 2px;
                        -webkit-border-radius: 2px;
                        border-radius: 2px;
                        padding-left: 5px;
                      }
                    </style>
                    <div class="paginator" style="display: block; text-align: center;">
                      <a id="1" onclick="getComments()" class="btn link active">
                        1
                      </a>
                      <a id="2" onclick="getComments()" class="btn link ">
                        2
                      </a>
                      <a id="3" onclick="getComments()" class="btn link ">
                        3
                      </a>
                      <a id="4" onclick="getComments()" class="btn link ">
                        4
                      </a>
                      <span style="margin-right: 0.5rem;">..</span>
                      <a id="11" onclick="getComments()" class="btn link ">
                        11
                      </a>
                    </div>
                  </div>
                </div>
              </div>
              <script>
                function toggleCommentList() {
                  if (document.body.classList.contains("show-comment")) {
                    document.body.classList.remove("show-comment")
                  }
                  else {
                    document.body.classList.add("show-comment")
                  }
                }
                updateSortView()
                function updateSortView() {
                  let type = localStorage.getItem("comment_list_sort") || 'newest'
                  let els = document.querySelectorAll(".sort-comments a")
                  for (var i = 0; i < els.length; i++) {
                    if (els[i].getAttribute("sort-type") == type) {
                      els[i].classList.add("active")
                    }
                    else {
                      els[i].classList.remove("active")
                    }
                  }
                }

                function reloadComments(el) {
                  let type = el.getAttribute("sort-type")
                  localStorage.setItem("comment_list_sort", type)
                  updateSortView()
                  getComments(1)
                }
              </script>
            </div>
          </div>
          <div class="col-30 container__right">
            <div class="left-sidebar">
              <div class="section box">
                <div class="section-header">
                  <div class="title"><span>RANKING</span></div>
                </div>
                <div class="top-list">
                  <div class="tabs">
                    <div class="tab active" data-target="day">
                      <div class="name">TRENDING</div>
                    </div>
                    <div class="tab" data-target="week">
                      <div class="name">TOP WEEK</div>
                    </div>
                    <div class="tab" data-target="reviews">
                      <div class="name">REVIEWS</div>
                    </div>
                    <div class="tab" data-target="comments">
                      <div class="name">COMMENTS</div>
                    </div>
                  </div>
                  <div class="tab-content mt-2">
                    <div data-target="day" class="tab-panel active">
                      <div class="top-item">
                        <div class="inner"><span class="rank r1">1</span>
                          <div class="thumb"><a href="/roses-and-champagne"><img class=""
                                src="https://thumb.youmadcdn.xyz/thumb/roses-and-champagne.png"
                                data-src="https://thumb.youmadcdn.xyz/thumb/roses-and-champagne.png"
                                alt="Roses and Champagne"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="Roses and Champagne" href="/roses-and-champagne">Roses and
                                Champagne</a></h3>
                            <h4 class="chap-item"><a title="Roses and Champagne - Notice."
                                href="/roses-and-champagne/notice">Notice.</a></h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r2">2</span>
                          <div class="thumb"><a href="/19-days"><img class=""
                                src="https://thumb.youmadcdn.xyz/thumb/19-days.png"
                                data-src="https://thumb.youmadcdn.xyz/thumb/19-days.png" alt="19 Days"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="19 Days" href="/19-days">19 Days</a></h3>
                            <h4 class="chap-item"><a title="19 Days - Chapter 434.5"
                                href="/19-days/chapter-434-5">Chapter 434.5</a></h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r3">3</span>
                          <div class="thumb"><a href="/dark-fall"><img class=""
                                src="https://thumb.youmadcdn.xyz/thumb/dark-fall.png"
                                data-src="https://thumb.youmadcdn.xyz/thumb/dark-fall.png" alt="Dark Fall"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="Dark Fall" href="/dark-fall">Dark Fall</a></h3>
                            <h4 class="chap-item"><a title="Dark Fall - Season.2  Chapter 44"
                                href="/dark-fall/season-2-chapter-44">Season.2 Chapter 44</a></h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r4">4</span>
                          <div class="thumb"><a href="/limited-run"><img class=""
                                src="https://thumb.youmadcdn.xyz/thumb/limited-run.png"
                                data-src="https://thumb.youmadcdn.xyz/thumb/limited-run.png" alt="Limited Run"></a>
                          </div>
                          <div class="meta">
                            <h3 class="title"><a title="Limited Run" href="/limited-run">Limited Run</a></h3>
                            <h4 class="chap-item"><a title="Limited Run - Chapter 70"
                                href="/limited-run/chapter-70">Chapter 70</a></h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r5">5</span>
                          <div class="thumb"><a href="/lost-in-the-cloud"><img class=""
                                src="https://thumb.youmadcdn.xyz/thumb/lost-in-the-cloud.png"
                                data-src="https://thumb.youmadcdn.xyz/thumb/lost-in-the-cloud.png"
                                alt="Lost in the Cloud"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="Lost in the Cloud" href="/lost-in-the-cloud">Lost in the
                                Cloud</a></h3>
                            <h4 class="chap-item"><a title="Lost in the Cloud - Season 2  Chapter 91"
                                href="/lost-in-the-cloud/season-2-chapter-91">Season 2 Chapter 91</a></h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r6">6</span>
                          <div class="thumb"><a href="/passion"><img class=""
                                src="https://thumb.youmadcdn.xyz/thumb/passion.png"
                                data-src="https://thumb.youmadcdn.xyz/thumb/passion.png" alt="PASSION"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="PASSION" href="/passion">PASSION</a></h3>
                            <h4 class="chap-item"><a title="PASSION - Chapter 79" href="/passion/chapter-79">Chapter
                                79</a></h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r7">7</span>
                          <div class="thumb"><a href="/love-shuttle"><img class=""
                                src="https://thumb.youmadcdn.xyz/thumb/love-shuttle.png"
                                data-src="https://thumb.youmadcdn.xyz/thumb/love-shuttle.png" alt="Love Shuttle"></a>
                          </div>
                          <div class="meta">
                            <h3 class="title"><a title="Love Shuttle" href="/love-shuttle">Love Shuttle</a></h3>
                            <h4 class="chap-item"><a title="Love Shuttle - Chapter 98"
                                href="/love-shuttle/chapter-98">Chapter 98</a></h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r8">8</span>
                          <div class="thumb"><a href="/smyrna-and-capri"><img class=""
                                src="https://thumb.youmadcdn.xyz/thumb/smyrna-and-capri.png"
                                data-src="https://thumb.youmadcdn.xyz/thumb/smyrna-and-capri.png"
                                alt="Smyrna &amp; Capri"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="Smyrna &amp; Capri" href="/smyrna-and-capri">Smyrna &amp;
                                Capri</a></h3>
                            <h4 class="chap-item"><a title="Smyrna &amp; Capri - Chapter 48"
                                href="/smyrna-and-capri/chapter-48">Chapter 48</a></h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r9">9</span>
                          <div class="thumb"><a href="/bad-thinking-diary"><img class=""
                                src="https://thumb.youmadcdn.xyz/thumb/bad-thinking-diary.png"
                                data-src="https://thumb.youmadcdn.xyz/thumb/bad-thinking-diary.png"
                                alt="Bad Thinking Diary"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="Bad Thinking Diary" href="/bad-thinking-diary">Bad Thinking
                                Diary</a></h3>
                            <h4 class="chap-item"><a title="Bad Thinking Diary - Chapter 61"
                                href="/bad-thinking-diary/chapter-61">Chapter 61</a></h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r10">10</span>
                          <div class="thumb"><a href="/seashell-boy"><img class=""
                                src="https://thumb.youmadcdn.xyz/thumb/seashell-boy.png"
                                data-src="https://thumb.youmadcdn.xyz/thumb/seashell-boy.png" alt="Seashell boy"></a>
                          </div>
                          <div class="meta">
                            <h3 class="title"><a title="Seashell boy" href="/seashell-boy">Seashell boy</a></h3>
                            <h4 class="chap-item"><a title="Seashell boy - Chapter 92.5"
                                href="/seashell-boy/chapter-92-5">Chapter 92.5</a></h4>
                          </div>
                        </div>
                      </div>
                      <div align="center"><a style="padding: 7px 0; display: inline-block; width: 100%;" href="/top/day"
                          title="VIEW ALL TOP MANGA OF THE DAY">VIEW ALL</a></div>
                    </div>
                    <div data-target="week" class="tab-panel">
                      <div class="top-item">
                        <div class="inner"><span class="rank r1">1</span>
                          <div class="thumb"><a href="/roses-and-champagne"><img class="lazy" src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/roses-and-champagne.png"
                                alt="Roses and Champagne"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="Roses and Champagne" href="/roses-and-champagne">Roses and
                                Champagne</a></h3>
                            <h4 class="chap-item"><a title="Roses and Champagne - Notice."
                                href="/roses-and-champagne/notice">Notice.</a></h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r2">2</span>
                          <div class="thumb"><a href="/boy-girlfriend"><img class="lazy" src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/boy-girlfriend.png"
                                alt="Boy Girlfriend"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="Boy Girlfriend" href="/boy-girlfriend">Boy Girlfriend</a></h3>
                            <h4 class="chap-item"><a title="Boy Girlfriend - Special. : P*rn Herb: EP. 3"
                                href="/boy-girlfriend/special-p-rn-herb-ep-3">Special. : P*rn Herb: EP. 3</a></h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r3">3</span>
                          <div class="thumb"><a href="/the-pizza-delivery-man-and-the-gold-palace"><img class="lazy"
                                src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/the-pizza-delivery-man-and-the-gold-palace.png"
                                alt="The Pizza Delivery Man and The Gold Palace"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="The Pizza Delivery Man and The Gold Palace"
                                href="/the-pizza-delivery-man-and-the-gold-palace">The Pizza Delivery Man and The Gold
                                Palace</a></h3>
                            <h4 class="chap-item"><a title="The Pizza Delivery Man and The Gold Palace - Chapter 52"
                                href="/the-pizza-delivery-man-and-the-gold-palace/chapter-52">Chapter 52</a></h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r4">4</span>
                          <div class="thumb"><a href="/love-jinx"><img class="lazy" src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/love-jinx.png" alt="Love Jinx"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="Love Jinx" href="/love-jinx">Love Jinx</a></h3>
                            <h4 class="chap-item"><a title="Love Jinx - Chapter 74" href="/love-jinx/chapter-74">Chapter
                                74</a></h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r5">5</span>
                          <div class="thumb"><a href="/love-shuttle"><img class="lazy" src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/love-shuttle.png" alt="Love Shuttle"></a>
                          </div>
                          <div class="meta">
                            <h3 class="title"><a title="Love Shuttle" href="/love-shuttle">Love Shuttle</a></h3>
                            <h4 class="chap-item"><a title="Love Shuttle - Chapter 98"
                                href="/love-shuttle/chapter-98">Chapter 98</a></h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r6">6</span>
                          <div class="thumb"><a href="/cherry-blossoms-after-winter"><img class="lazy"
                                src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/cherry-blossoms-after-winter.png"
                                alt="Cherry Blossoms After Winter"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="Cherry Blossoms After Winter"
                                href="/cherry-blossoms-after-winter">Cherry Blossoms After Winter</a></h3>
                            <h4 class="chap-item"><a title="Cherry Blossoms After Winter - Bounus.2 : Children's day"
                                href="/cherry-blossoms-after-winter/bounus-2-childrens-day">Bounus.2 : Children's
                                day</a></h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r7">7</span>
                          <div class="thumb"><a href="/dark-fall"><img class="lazy" src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/dark-fall.png" alt="Dark Fall"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="Dark Fall" href="/dark-fall">Dark Fall</a></h3>
                            <h4 class="chap-item"><a title="Dark Fall - Season.2  Chapter 44"
                                href="/dark-fall/season-2-chapter-44">Season.2 Chapter 44</a></h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r8">8</span>
                          <div class="thumb"><a href="/lucky-paradise"><img class="lazy" src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/lucky-paradise.png"
                                alt="Lucky Paradise"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="Lucky Paradise" href="/lucky-paradise">Lucky Paradise</a></h3>
                            <h4 class="chap-item"><a title="Lucky Paradise - Side.100"
                                href="/lucky-paradise/side-100">Side.100</a></h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r9">9</span>
                          <div class="thumb"><a href="/omega-complex-yaoi"><img class="lazy" src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/omega-complex-yaoi.png"
                                alt="Omega Complex(Yaoi)"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="Omega Complex(Yaoi)" href="/omega-complex-yaoi">Omega
                                Complex(Yaoi)</a></h3>
                            <h4 class="chap-item"><a title="Omega Complex(Yaoi) - Chapter 49"
                                href="/omega-complex-yaoi/chapter-49">Chapter 49</a></h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r10">10</span>
                          <div class="thumb"><a href="/crossing-the-line"><img class="lazy" src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/crossing-the-line.png"
                                alt="Crossing the Line"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="Crossing the Line" href="/crossing-the-line">Crossing the
                                Line</a></h3>
                            <h4 class="chap-item"><a title="Crossing the Line - Chapter 32"
                                href="/crossing-the-line/chapter-32">Chapter 32</a></h4>
                          </div>
                        </div>
                      </div>
                      <div align="center"><a style="padding: 7px 0; display: inline-block; width: 100%;"
                          href="/top/week" title="VIEW ALL TOP MANGA OF THE WEEK">VIEW ALL</a></div>
                    </div>
                    <div data-target="reviews" class="tab-panel">
                      <div class="top-item">
                        <div class="inner"><span class="rank r1">1</span>
                          <div class="thumb"><a href="/jinx"><img class="lazy" src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/jinx.png" alt="Jinx"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="Jinx" href="/jinx">Jinx</a></h3>
                            <h4 class="chap-item"><a href="javascript:;" style="color: #5eb949;">994&nbsp;reviews</a>
                            </h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r2">2</span>
                          <div class="thumb"><a href="/dangerous-convenience-store"><img class="lazy"
                                src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/dangerous-convenience-store.png"
                                alt="Dangerous Convenience Store"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="Dangerous Convenience Store"
                                href="/dangerous-convenience-store">Dangerous Convenience Store</a></h3>
                            <h4 class="chap-item"><a href="javascript:;" style="color: #5eb949;">425&nbsp;reviews</a>
                            </h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r3">3</span>
                          <div class="thumb"><a href="/bj-alex"><img class="lazy" src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/bj-alex.png" alt="BJ alex"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="BJ alex" href="/bj-alex">BJ alex</a></h3>
                            <h4 class="chap-item"><a href="javascript:;" style="color: #5eb949;">370&nbsp;reviews</a>
                            </h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r4">4</span>
                          <div class="thumb"><a href="/sign"><img class="lazy" src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/sign.png" alt="Sign"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="Sign" href="/sign">Sign</a></h3>
                            <h4 class="chap-item"><a href="javascript:;" style="color: #5eb949;">360&nbsp;reviews</a>
                            </h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r5">5</span>
                          <div class="thumb"><a href="/painter-of-the-night"><img class="lazy"
                                src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/painter-of-the-night.png"
                                alt="Painter Of The Night"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="Painter Of The Night" href="/painter-of-the-night">Painter Of
                                The Night</a></h3>
                            <h4 class="chap-item"><a href="javascript:;" style="color: #5eb949;">283&nbsp;reviews</a>
                            </h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r6">6</span>
                          <div class="thumb"><a href="/cherry-blossoms-after-winter"><img class="lazy"
                                src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/cherry-blossoms-after-winter.png"
                                alt="Cherry Blossoms After Winter"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="Cherry Blossoms After Winter"
                                href="/cherry-blossoms-after-winter">Cherry Blossoms After Winter</a></h3>
                            <h4 class="chap-item"><a href="javascript:;" style="color: #5eb949;">242&nbsp;reviews</a>
                            </h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r7">7</span>
                          <div class="thumb"><a href="/dear-door"><img class="lazy" src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/dear-door.png" alt="Dear Door"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="Dear Door" href="/dear-door">Dear Door</a></h3>
                            <h4 class="chap-item"><a href="javascript:;" style="color: #5eb949;">228&nbsp;reviews</a>
                            </h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r8">8</span>
                          <div class="thumb"><a href="/i-can-hear-it-without-a-microphone"><img class="lazy"
                                src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/i-can-hear-it-without-a-microphone.png"
                                alt="I can hear it without a microphone"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="I can hear it without a microphone"
                                href="/i-can-hear-it-without-a-microphone">I can hear it without a microphone</a></h3>
                            <h4 class="chap-item"><a href="javascript:;" style="color: #5eb949;">222&nbsp;reviews</a>
                            </h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r9">9</span>
                          <div class="thumb"><a href="/eyes-clouded-by-the-tiger"><img class="lazy"
                                src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/eyes-clouded-by-the-tiger.png"
                                alt="Eyes clouded by the tiger"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="Eyes clouded by the tiger"
                                href="/eyes-clouded-by-the-tiger">Eyes clouded by the tiger</a></h3>
                            <h4 class="chap-item"><a href="javascript:;" style="color: #5eb949;">212&nbsp;reviews</a>
                            </h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r10">10</span>
                          <div class="thumb"><a href="/love-shuttle"><img class="lazy" src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/love-shuttle.png" alt="Love Shuttle"></a>
                          </div>
                          <div class="meta">
                            <h3 class="title"><a title="Love Shuttle" href="/love-shuttle">Love Shuttle</a></h3>
                            <h4 class="chap-item"><a href="javascript:;" style="color: #5eb949;">205&nbsp;reviews</a>
                            </h4>
                          </div>
                        </div>
                      </div>
                      <div align="center"><a style="padding: 7px 0; display: inline-block; width: 100%;"
                          href="/top/reviews" title="VIEW ALL TOP REVIEWS">VIEW ALL</a></div>
                    </div>
                    <div data-target="comments" class="tab-panel">
                      <div class="top-item">
                        <div class="inner"><span class="rank r1">1</span>
                          <div class="thumb"><a href="/painter-of-the-night"><img class="lazy"
                                src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/painter-of-the-night.png"
                                alt="Painter Of The Night"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="Painter Of The Night" href="/painter-of-the-night">Painter Of
                                The Night</a></h3>
                            <h4 class="chap-item"><a href="javascript:;"
                                style="color: #e74c3c;">227.8K&nbsp;comments</a></h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r2">2</span>
                          <div class="thumb"><a href="/jinx"><img class="lazy" src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/jinx.png" alt="Jinx"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="Jinx" href="/jinx">Jinx</a></h3>
                            <h4 class="chap-item"><a href="javascript:;"
                                style="color: #e74c3c;">213.5K&nbsp;comments</a></h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r3">3</span>
                          <div class="thumb"><a href="/bj-alex"><img class="lazy" src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/bj-alex.png" alt="BJ alex"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="BJ alex" href="/bj-alex">BJ alex</a></h3>
                            <h4 class="chap-item"><a href="javascript:;"
                                style="color: #e74c3c;">200.4K&nbsp;comments</a></h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r4">4</span>
                          <div class="thumb"><a href="/sign"><img class="lazy" src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/sign.png" alt="Sign"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="Sign" href="/sign">Sign</a></h3>
                            <h4 class="chap-item"><a href="javascript:;"
                                style="color: #e74c3c;">197.1K&nbsp;comments</a></h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r5">5</span>
                          <div class="thumb"><a href="/cherry-blossoms-after-winter"><img class="lazy"
                                src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/cherry-blossoms-after-winter.png"
                                alt="Cherry Blossoms After Winter"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="Cherry Blossoms After Winter"
                                href="/cherry-blossoms-after-winter">Cherry Blossoms After Winter</a></h3>
                            <h4 class="chap-item"><a href="javascript:;"
                                style="color: #e74c3c;">172.7K&nbsp;comments</a></h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r6">6</span>
                          <div class="thumb"><a href="/19-days"><img class="lazy" src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/19-days.png" alt="19 Days"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="19 Days" href="/19-days">19 Days</a></h3>
                            <h4 class="chap-item"><a href="javascript:;"
                                style="color: #e74c3c;">153.9K&nbsp;comments</a></h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r7">7</span>
                          <div class="thumb"><a href="/dangerous-convenience-store"><img class="lazy"
                                src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/dangerous-convenience-store.png"
                                alt="Dangerous Convenience Store"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="Dangerous Convenience Store"
                                href="/dangerous-convenience-store">Dangerous Convenience Store</a></h3>
                            <h4 class="chap-item"><a href="javascript:;"
                                style="color: #e74c3c;">143.1K&nbsp;comments</a></h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r8">8</span>
                          <div class="thumb"><a href="/i-can-hear-it-without-a-microphone"><img class="lazy"
                                src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/i-can-hear-it-without-a-microphone.png"
                                alt="I can hear it without a microphone"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="I can hear it without a microphone"
                                href="/i-can-hear-it-without-a-microphone">I can hear it without a microphone</a></h3>
                            <h4 class="chap-item"><a href="javascript:;" style="color: #e74c3c;">127K&nbsp;comments</a>
                            </h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r9">9</span>
                          <div class="thumb"><a href="/dear-door"><img class="lazy" src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/dear-door.png" alt="Dear Door"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="Dear Door" href="/dear-door">Dear Door</a></h3>
                            <h4 class="chap-item"><a href="javascript:;"
                                style="color: #e74c3c;">117.5K&nbsp;comments</a></h4>
                          </div>
                        </div>
                      </div>
                      <div class="top-item">
                        <div class="inner"><span class="rank r10">10</span>
                          <div class="thumb"><a href="/roses-and-champagne"><img class="lazy" src="/static/common/x.gif"
                                data-src="https://thumb.youmadcdn.xyz/thumb/roses-and-champagne.png"
                                alt="Roses and Champagne"></a></div>
                          <div class="meta">
                            <h3 class="title"><a title="Roses and Champagne" href="/roses-and-champagne">Roses and
                                Champagne</a></h3>
                            <h4 class="chap-item"><a href="javascript:;"
                                style="color: #e74c3c;">112.7K&nbsp;comments</a></h4>
                          </div>
                        </div>
                      </div>
                      <div align="center"><a style="padding: 7px 0; display: inline-block; width: 100%;"
                          href="/top/comments" title="VIEW ALL TOP COMMENTS">VIEW ALL</a></div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="section box">
                <div align="center" style="padding: 3px 0;">
                  <div id="pf-1058-1">
                    <script>window.pubfuturetag = window.pubfuturetag || []; window.pubfuturetag.push({ unit: "61d663312354d50027d564a5", id: "pf-1058-1" })</script>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <style>
      #show-comment-modal .modal-content {
        padding: unset !important;
      }
    </style>
    <div class="modal fade" id="write-review-modal">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">WRITE A REVIEW</h5>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close">
            </button>
          </div>
          <div class="modal-body" id="review-form">
            <form method="POST" style="padding:10px 20px;">
              <div class="rating-popup">
                <fieldset class="rating">
                  <input type="radio" id="star5" name="rating" value="5" text="Rocks!"><label for="star5"
                    title="Rocks!"></label>
                  <input type="radio" id="star4" name="rating" value="4" text="Pretty good"><label for="star4"
                    title="Pretty good"></label>
                  <input type="radio" id="star3" name="rating" value="3" text="Meh"><label for="star3"
                    title="Meh"></label>
                  <input type="radio" id="star2" name="rating" value="2" text="Kinda bad"><label for="star2"
                    title="Kinda bad"></label>
                  <input type="radio" id="star1" name="rating" value="1" text="Sucks big time"><label for="star1"
                    title="Sucks big time"></label>
                </fieldset>
                <br>
                <legend id="rate-text"></legend>
              </div>

              <div class="form-group" style="margin-top: 5px;">
                <textarea id="review-content" class="form-control" style="height: 300px; margin-top: 5px;"
                  placeholder="Description" name="content"></textarea>
              </div>
              <div class="form-message" style="color: green;">
                1. Do not link or mention other websites.<br>
                2. Do not use harsh words, insults others.<br>
                3. Review that are not related to the manga will be deleted.<br>
              </div>

              <div style="display: flex;">
                <button class="btn main__button" style="width: 150px; margin-right: 5px;" type="submit">ADD REVIEW
                </button>
                <button class="btn main__button" style="width: 150px;" type="submit">RATE ONLY
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>

    <script>
      function showWriteReviewModal() {
        getModal('write-review-modal').show()
        loadEditor('textarea#review-content', 400)
      }

      var reviewForm = document.querySelector('#write-review-modal form')
      reviewForm.onsubmit = function () {
        let form = this
        let object = getFormData(form)
        object.manga_id = bookId

        if (!object.rating) {
          showAlert("Rating is required.")
          return false
        }

        form.querySelector('button.btn').showSpinner()
        sendAJAXRequest({
          method: 'POST',
          // isJson: false,
          url: `/api/reviews`,
          data: JSON.stringify(object)
        }, function (request) {
          form.querySelector('button.btn').hideSpinner()
          if (request.status === 200) {
            showMessage(request.response.message)
            setTimeout(function () {
              window.location.reload()
            }, 300)
          } else {
            showErrorMessage(request.response.message)
          }
        })
        return false
      };

    </script>
    <div id="footer">
      <div class="container">
        <div class="content">
          <div class="azlist hidden-sm hidden-xs">
            <div class="heading"><b>A-Z List</b><span>Searching Manga order by alphabet name A to Z.</span></div>
            <ul>
              <li><a title="All" href="/az-list">All</a></li>
              <li><a title="0-9" href="/az-list/0-9">0-9</a></li>
              <li><a title="A" href="/az-list/A">A</a></li>
              <li><a title="B" href="/az-list/B">B</a></li>
              <li><a title="C" href="/az-list/C">C</a></li>
              <li><a title="D" href="/az-list/D">D</a></li>
              <li><a title="E" href="/az-list/E">E</a></li>
              <li><a title="F" href="/az-list/F">F</a></li>
              <li><a title="G" href="/az-list/G">G</a></li>
              <li><a title="H" href="/az-list/H">H</a></li>
              <li><a title="I" href="/az-list/I">I</a></li>
              <li><a title="J" href="/az-list/J">J</a></li>
              <li><a title="K" href="/az-list/K">K</a></li>
              <li><a title="L" href="/az-list/L">L</a></li>
              <li><a title="M" href="/az-list/M">M</a></li>
              <li><a title="N" href="/az-list/N">N</a></li>
              <li><a title="O" href="/az-list/O">O</a></li>
              <li><a title="P" href="/az-list/P">P</a></li>
              <li><a title="Q" href="/az-list/Q">Q</a></li>
              <li><a title="R" href="/az-list/R">R</a></li>
              <li><a title="S" href="/az-list/S">S</a></li>
              <li><a title="T" href="/az-list/T">T</a></li>
              <li><a title="U" href="/az-list/U">U</a></li>
              <li><a title="V" href="/az-list/V">V</a></li>
              <li><a title="W" href="/az-list/W">W</a></li>
              <li><a title="X" href="/az-list/X">X</a></li>
              <li><a title="Y" href="/az-list/Y">Y</a></li>
              <li><a title="Z" href="/az-list/Z">Z</a></li>
            </ul>
          </div>
          <div class="main row no-gutters">
            <div class="col-sm-12 col-md-4">
              <div class="row">
                <div class="links col-md-3 col-sm-12">
                  <div class="heading">Help</div>
                  <ul>
                    <li><a rel="nofollow" href="/contact">Contact</a></li>
                    <li><a rel="nofollow" href="/privacy-policy">Privacy Policy</a></li>
                    <li><a rel="nofollow" href="/terms-of-service">TOS</a></li>
                    <li><a rel="nofollow" href="/dmca">DMCA</a></li>
                  </ul>
                </div>
                <div class="links col-md-3 col-sm-12">
                  <div class="heading">Links</div>
                  <ul>
                    <li><a title="Newest Novels Added" href="/newest">Newest</a></li>
                    <li><a title="Recently Novels Updated" href="/latest">Recently Updated</a></li>
                    <li><a title="Popular Novels" href="/popular">Popular</a></li>
                    <li><a title="A-Z List" href="/az-list">A-Z List</a></li>
                    <li><a title="Genres" href="/genres">Genres</a></li>
                  </ul>
                </div>
                <div class="links col-md-6 col-sm-12">
                  <div class="heading">Partners</div>
                  <ul>
                    <li><a href="https://novelbuddy.com" target="_blank" title="Read novel online">Read novel online</a>
                    </li>
                  </ul>
                </div>
              </div>
            </div>
            <div class="col-md-4 mainc">
              <div class="logo"></div>
              <p class="mt-4">All Manga, Character Designs and Logos are © to their respective copyright holders.</p>
            </div>
            <div class="col-md-4 mainc"></div>
          </div>
          <div class="clearfix"></div>
        </div>
      </div>
    </div>
    <div class="modal fade" id="login-modal">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">LOGIN</h5><button type="button" class="btn-close btn-close-white"
              data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form class="content login-form">
              <div class="hide-on-success">
                <div class="form-group"><i class="fa fa-envelope"></i><input type="email" name="email"
                    class="form-control" required="" placeholder="Email"></div>
                <div class="form-group"><i class="fa fa-lock"></i><input type="password" name="password"
                    class="form-control" required="" placeholder="Password"></div>
                <div class="form-group text-center">
                  <div id="login-recaptcha" class="g-recaptcha" data-sitekey="6LfmBvcUAAAAAAvkkFjUWGOxmypmMIMRQo8T9bK8">
                    <div style="width: 304px; height: 78px;">
                      <div><iframe title="reCAPTCHA" width="304" height="78" role="presentation" name="a-z1u47qc83ol"
                          frameborder="0" scrolling="no"
                          sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation"
                          src="https://www.google.com/recaptcha/api2/anchor?ar=1&amp;k=6LfmBvcUAAAAAAvkkFjUWGOxmypmMIMRQo8T9bK8&amp;co=aHR0cHM6Ly9tYW5nYWJ1ZGR5LmNvbTo0NDM.&amp;hl=de&amp;v=MydHw_zggsxIJuhSbyOmPv5R&amp;size=normal&amp;cb=op2bnds1l6v0"></iframe>
                      </div><textarea id="g-recaptcha-response" name="g-recaptcha-response" class="g-recaptcha-response"
                        style="width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;"></textarea>
                    </div>
                  </div>
                </div>
                <div class="form-error"></div>
                <div class="form-group"><button class="submit-btn button main__button " type="submit"
                    style="padding: 10px 50px; width: 100%;">LOGIN</button></div>
                <div class="social-login">
                  <p>OR LOGIN WITH</p>
                  <div class="social-buttons"><a data-no-instant="" href="/auth/facebook" type="button"
                      class="main__button fb" title="Login with Facebook" rel="nofollow"><i
                        class="fab fa-facebook"></i></a><a data-no-instant="" class="main__button twitter"
                      href="/auth/twitter" title="Login with Twitter" rel="nofollow"><i
                        class="fab fa-twitter"></i></a><a data-no-instant="" class="main__button gg" href="/auth/google"
                      title="Login with Google" rel="nofollow"><i class="fab fa-google"></i></a></div>
                </div>
              </div>
            </form>
          </div>
          <div class="modal-footer"><a title="Recovery your password" href="/users/forgot-password"><i
                class="fa fa-angle-right"></i>Forgot password &emsp;</a><a href="javascript:;"
              onclick="return showSignupModal(this);"><i class="fa fa-angle-right"></i>Create an account</a></div>
        </div>
      </div>
    </div>
    <div class="modal fade" id="signup-modal">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">SIGNUP</h5><button type="button" class="btn-close btn-close-white"
              data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form class="content signup-form">
              <div class="hide-on-success">
                <div class="form-group"><i class="fa fa-user-alt"></i><input type="text" required="" name="name"
                    class="form-control" placeholder="Display name"></div>
                <div class="form-group"><i class="fa fa-envelope"></i><input type="email" required="" name="email"
                    class="form-control" placeholder="Email"></div>
                <div class="form-group"><i class="fa fa-lock"></i><input type="password" required="" name="password"
                    class="form-control" placeholder="Password"></div>
                <div class="form-group"><i class="fa fa-lock"></i><input type="password" required=""
                    name="confirm_password" class="form-control" placeholder="Confirm password"></div>
                <div class="form-group text-center">
                  <div class="g-recaptcha" data-sitekey="6LfmBvcUAAAAAAvkkFjUWGOxmypmMIMRQo8T9bK8">
                    <div style="width: 304px; height: 78px;">
                      <div><iframe title="reCAPTCHA" width="304" height="78" role="presentation" name="a-xijobdw6g52r"
                          frameborder="0" scrolling="no"
                          sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation"
                          src="https://www.google.com/recaptcha/api2/anchor?ar=1&amp;k=6LfmBvcUAAAAAAvkkFjUWGOxmypmMIMRQo8T9bK8&amp;co=aHR0cHM6Ly9tYW5nYWJ1ZGR5LmNvbTo0NDM.&amp;hl=de&amp;v=MydHw_zggsxIJuhSbyOmPv5R&amp;size=normal&amp;cb=1yb4a12cskp1"></iframe>
                      </div><textarea id="g-recaptcha-response-1" name="g-recaptcha-response"
                        class="g-recaptcha-response"
                        style="width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;"></textarea>
                    </div><iframe style="display: none;"></iframe>
                  </div>
                </div>
                <div class="form-error"></div>
                <div class="form-group"><button class="submit-btn button main__button " type="submit"
                    style="padding: 10px 50px; width: 100%;">REGISTER</button></div>
              </div>
            </form>
          </div>
          <div class="modal-footer"><a title="Back to login" href="javascript:;" onclick="return showLoginModal();"><i
                class="fa fa-angle-left"></i>Back to login</a></div>
        </div>
      </div>
    </div>
    <div id="msgbox-area" class="msgbox-area"></div>
    <script src="https://www.google.com/recaptcha/api.js" async="" defer=""></script>
    <div align="center" id="pf-sticky-2">
      <div align="center" style="padding: 3px 0;">
        <div id="pf-1060-1">
          <script>window.pubfuturetag = window.pubfuturetag || []; window.pubfuturetag.push({ unit: "61d66416079d420027d56c33", id: "pf-1060-1" })</script>
        </div>
      </div>
    </div>
    <div class="go-to-top active" id="scroll-to-top"><i class="fas fa-arrow-up"></i></div>
    <style>
      #cookie-notice {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        background: rgb(0, 0, 0);
        color: rgb(255, 255, 255);
        z-index: 999;
        padding: 10px 5px;
        text-align: center;
        font-size: 12px;
        line-height: 28px;
      }
    </style>

    <div id="cookie-notice">
      We use cookies to make sure you can have the best experience on our website.
      If you continue to use this site we assume that you will be happy with it.&nbsp;<a href="#"
        onclick="return acceptCookies()" class="confirm"
        style="background: rgb(211, 84, 0); color: rgb(255, 255, 255); text-decoration: none; display: inline-block; padding: 0px 15px; margin: 0px 0px 0px 10px;">OK</a>
    </div>

    <script>    function loadCSS(e) { var t = document.createElement("link"); t.href = e, t.rel = "stylesheet", t.type = "text/css", document.getElementsByTagName("head")[0].appendChild(t) } function hideModals() { for (var e = document.getElementsByClassName("modal"), t = 0; t < e.length; t++)e[t].style.display = "none" } loadCSS("//cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.2/css/all.min.css"), document.addEventListener("DOMContentLoaded", lazyImage("lazy")), document.addEventListener("DOMContentLoaded", function () { if (isMobile.any()) for (var e = document.getElementsByClassName("ads-desk"); 0 < e.length;)e[0].parentNode.removeChild(e[0]); else for (var t = document.getElementsByClassName("ads-mobile"); 0 < t.length;)t[0].parentNode.removeChild(t[0]); for (var o = document.getElementsByClassName("close-modal"), n = 0; n < o.length; n++)o[n].onclick = function () { this.parentElement.parentElement.style.display = "none" }; for (var l = document.querySelectorAll('head link[x-rel="prefetch"]'), a = 0; a < l.length; a++)sendAJAXRequest({ method: "get", url: l[a].getAttribute("href"), isJson: !1 }); for (var c = document.querySelectorAll(".tabs .tab"), r = 0; r < c.length; r++)c[r].addEventListener("click", function (e) { for (var t = this.parentNode.querySelectorAll(".tab"), o = 0; o < t.length; o++)t[o].className = "tab"; for (var n = this.parentNode.parentNode.querySelectorAll(".tab-content>.tab-panel"), l = 0; l < n.length; l++)n[l].className = "tab-panel"; try { this.className = "tab active", this.parentNode.parentNode.querySelectorAll('.tab-content > [data-target="'.concat(this.getAttribute("data-target"), '"]'))[0].className = "tab-panel active", e.preventDefault(), e.stopImmediatePropagation() } catch (e) { } }); for (var s = document.querySelectorAll("iframe") || [], d = 0; d < s.length; d++) { var m = s[d], i = m.getAttribute("data-src"); i && (m.src = i) } }), setTimeout(function () { function e() { !0 !== e && (document.removeEventListener("scroll", e), document.removeEventListener("mousemove", e), document.removeEventListener("mousedown", e), document.removeEventListener("touchstart", e), function () { for (var e = document.querySelectorAll("script"), t = 0; t < e.length; t++) { var o = e[t], n = o.getAttribute("data-src"); n && (o.async = !0, o.src = n) } }()) } document.addEventListener("scroll", e), document.addEventListener("mousemove", e), document.addEventListener("mousedown", e), document.addEventListener("touchstart", e), document.addEventListener("load", function () { document.body.clientHeight != document.documentElement.clientHeight && 0 == document.documentElement.scrollTop && 0 == document.body.scrollTop || e() }) }, 1); var cookies_accepted_key = "cookies_accepted"; function acceptCookies() { return localStorage.setItem(cookies_accepted_key, "1"), document.getElementById("cookie-notice").remove(), !1 } localStorage.getItem(cookies_accepted_key) && document.getElementById("cookie-notice").remove(); var rootElement = document.documentElement, scrollToTopBtn = document.getElementById("scroll-to-top"); function handleScroll() { rootElement.scrollTop >= .5 * rootElement.clientHeight ? scrollToTopBtn.classList.add("active") : scrollToTopBtn.classList.remove("active") } scrollToTopBtn.onclick = function () { rootElement.scrollTo({ top: 0, behavior: "smooth" }) }, document.addEventListener("scroll", handleScroll);
    </script>
    <script>
      const _0x2ca0 = ['unobserve', 'rel', '545aKGxdX', '93320ucZaAo', 'click', 'link', 'origin', 'clientWidth', 'documentElement', 'effectiveType', 'now', 'detail', 'dataset', 'substr', '181299VyhfYA', 'metaKey', 'relList', 'includes', 'touchstart', 'length', 'ctrlKey', 'saveData', 'protocol', 'search', 'prototype', 'instantMousedownShortcut', 'noInstant', 'clientHeight', 'instant', 'closest', '305105dYFhkr', 'http:', 'mousedown-only', 'supports', 'prefetch', '185865zutWOv', 'target', 'body', 'hash', 'forEach', 'createElement', 'instantWhitelist', 'instantIntensity', 'IntersectionObserver', 'isIntersecting', 'which', 'observe', 'mouseout', '386YtWIaV', 'mouseover', 'dispatchEvent', 'appendChild', 'connection', 'href', 'pathname', '1YJgtvy', 'mousedown', 'instantAllowQueryString', 'preventDefault', 'https:', '612147KsKQeT', 'relatedTarget', 'has', 'head', '250121kAJUxZ', 'addEventListener', 'viewport']; const _0x4b8a1b = _0x4aa1; function _0x4aa1(_0x7d8c56, _0x4be8f4) { return _0x4aa1 = function (_0x2ca070, _0x4aa107) { _0x2ca070 = _0x2ca070 - 0xe0; let _0x10aec0 = _0x2ca0[_0x2ca070]; return _0x10aec0; }, _0x4aa1(_0x7d8c56, _0x4be8f4); } (function (_0x4ec277, _0x5b2e78) { const _0x44c9ce = _0x4aa1; while (!![]) { try { const _0x2223ef = -parseInt(_0x44c9ce(0xef)) * -parseInt(_0x44c9ce(0x11d)) + parseInt(_0x44c9ce(0x110)) + -parseInt(_0x44c9ce(0xfb)) + -parseInt(_0x44c9ce(0x10b)) + -parseInt(_0x44c9ce(0xea)) + -parseInt(_0x44c9ce(0xf0)) + -parseInt(_0x44c9ce(0xe1)) * -parseInt(_0x44c9ce(0xe6)); if (_0x2223ef === _0x5b2e78) break; else _0x4ec277['push'](_0x4ec277['shift']()); } catch (_0x2d9172) { _0x4ec277['push'](_0x4ec277['shift']()); } } }(_0x2ca0, 0x2b969)); let mouseoverTimer, lastTouchTimestamp; const prefetches = new Set(), prefetchElement = document[_0x4b8a1b(0x115)](_0x4b8a1b(0xf2)), isSupported = prefetchElement[_0x4b8a1b(0xfd)] && prefetchElement[_0x4b8a1b(0xfd)][_0x4b8a1b(0x10e)] && prefetchElement[_0x4b8a1b(0xfd)][_0x4b8a1b(0x10e)](_0x4b8a1b(0x10f)) && window[_0x4b8a1b(0x118)] && _0x4b8a1b(0x119) in IntersectionObserverEntry[_0x4b8a1b(0x105)], allowQueryString = _0x4b8a1b(0xe3) in document['body'][_0x4b8a1b(0xf9)], allowExternalLinks = 'instantAllowExternalLinks' in document[_0x4b8a1b(0x112)][_0x4b8a1b(0xf9)], useWhitelist = _0x4b8a1b(0x116) in document[_0x4b8a1b(0x112)][_0x4b8a1b(0xf9)], mousedownShortcut = _0x4b8a1b(0x106) in document[_0x4b8a1b(0x112)]['dataset'], DELAY_TO_NOT_BE_CONSIDERED_A_TOUCH_INITIATED_ACTION = 0x457; let delayOnHover = 0x41, useMousedown = ![], useMousedownOnly = ![], useViewport = ![]; if (_0x4b8a1b(0x117) in document['body'][_0x4b8a1b(0xf9)]) { const intensity = document[_0x4b8a1b(0x112)]['dataset']['instantIntensity']; if (intensity[_0x4b8a1b(0xfa)](0x0, _0x4b8a1b(0xe2)['length']) == _0x4b8a1b(0xe2)) useMousedown = !![], intensity == _0x4b8a1b(0x10d) && (useMousedownOnly = !![]); else { if (intensity[_0x4b8a1b(0xfa)](0x0, _0x4b8a1b(0xec)[_0x4b8a1b(0x100)]) == _0x4b8a1b(0xec)) { if (!(navigator['connection'] && (navigator[_0x4b8a1b(0x121)][_0x4b8a1b(0x102)] || navigator[_0x4b8a1b(0x121)][_0x4b8a1b(0xf6)] && navigator[_0x4b8a1b(0x121)][_0x4b8a1b(0xf6)][_0x4b8a1b(0xfe)]('2g')))) { if (intensity == _0x4b8a1b(0xec)) document[_0x4b8a1b(0xf5)][_0x4b8a1b(0xf4)] * document[_0x4b8a1b(0xf5)][_0x4b8a1b(0x108)] < 0x6ddd0 && (useViewport = !![]); else intensity == 'viewport-all' && (useViewport = !![]); } } else { const milliseconds = parseInt(intensity); !isNaN(milliseconds) && (delayOnHover = milliseconds); } } } if (isSupported) { const eventListenersOptions = { 'capture': !![], 'passive': !![] }; !useMousedownOnly && document[_0x4b8a1b(0xeb)](_0x4b8a1b(0xff), touchstartListener, eventListenersOptions); if (!useMousedown) document[_0x4b8a1b(0xeb)](_0x4b8a1b(0x11e), mouseoverListener, eventListenersOptions); else !mousedownShortcut && document[_0x4b8a1b(0xeb)](_0x4b8a1b(0xe2), mousedownListener, eventListenersOptions); mousedownShortcut && document['addEventListener'](_0x4b8a1b(0xe2), mousedownShortcutListener, eventListenersOptions); if (useViewport) { let triggeringFunction; window['requestIdleCallback'] ? triggeringFunction = _0x1cbd49 => { requestIdleCallback(_0x1cbd49, { 'timeout': 0x5dc }); } : triggeringFunction = _0x27c902 => { _0x27c902(); }, triggeringFunction(() => { const _0x407d3d = _0x4b8a1b, _0x19b352 = new IntersectionObserver(_0x1cd097 => { const _0x5b6e3b = _0x4aa1; _0x1cd097[_0x5b6e3b(0x114)](_0x15a6f4 => { const _0x56b4c8 = _0x5b6e3b; if (_0x15a6f4[_0x56b4c8(0x119)]) { const _0x15c771 = _0x15a6f4[_0x56b4c8(0x111)]; _0x19b352[_0x56b4c8(0xed)](_0x15c771), preload(_0x15c771[_0x56b4c8(0x122)]); } }); }); document['querySelectorAll']('a')[_0x407d3d(0x114)](_0x3ba72b => { const _0x36a3b9 = _0x407d3d; isPreloadable(_0x3ba72b) && _0x19b352[_0x36a3b9(0x11b)](_0x3ba72b); }); }); } } function touchstartListener(_0x1bf167) { const _0x13365a = _0x4b8a1b; lastTouchTimestamp = performance[_0x13365a(0xf7)](); const _0x4a095d = _0x1bf167[_0x13365a(0x111)][_0x13365a(0x10a)]('a'); if (!isPreloadable(_0x4a095d)) return; preload(_0x4a095d[_0x13365a(0x122)]); } function mouseoverListener(_0x3dfd1e) { const _0x390bd0 = _0x4b8a1b; if (performance[_0x390bd0(0xf7)]() - lastTouchTimestamp < DELAY_TO_NOT_BE_CONSIDERED_A_TOUCH_INITIATED_ACTION) return; const _0x9faa02 = _0x3dfd1e[_0x390bd0(0x111)]['closest']('a'); if (!isPreloadable(_0x9faa02)) return; _0x9faa02['addEventListener'](_0x390bd0(0x11c), mouseoutListener, { 'passive': !![] }), mouseoverTimer = setTimeout(() => { const _0x20b8ec = _0x390bd0; preload(_0x9faa02[_0x20b8ec(0x122)]), clearTimeout(mouseoverTimer), mouseoverTimer = undefined; }, delayOnHover); } function mousedownListener(_0x1aafd0) { const _0x1ac226 = _0x4b8a1b, _0x252cc4 = _0x1aafd0[_0x1ac226(0x111)][_0x1ac226(0x10a)]('a'); if (!isPreloadable(_0x252cc4)) return; preload(_0x252cc4[_0x1ac226(0x122)]); } function mouseoutListener(_0x575312) { const _0x4ef401 = _0x4b8a1b; if (_0x575312[_0x4ef401(0xe7)] && _0x575312[_0x4ef401(0x111)][_0x4ef401(0x10a)]('a') == _0x575312[_0x4ef401(0xe7)][_0x4ef401(0x10a)]('a')) return; mouseoverTimer && (clearTimeout(mouseoverTimer), mouseoverTimer = undefined); } function mousedownShortcutListener(_0xf12649) { const _0x3743f3 = _0x4b8a1b; if (performance['now']() - lastTouchTimestamp < DELAY_TO_NOT_BE_CONSIDERED_A_TOUCH_INITIATED_ACTION) return; const _0x21b45d = _0xf12649[_0x3743f3(0x111)][_0x3743f3(0x10a)]('a'); if (_0xf12649[_0x3743f3(0x11a)] > 0x1 || _0xf12649[_0x3743f3(0xfc)] || _0xf12649[_0x3743f3(0x101)]) return; if (!_0x21b45d) return; _0x21b45d[_0x3743f3(0xeb)](_0x3743f3(0xf1), function (_0x2ce075) { const _0x50b0ce = _0x3743f3; if (_0x2ce075[_0x50b0ce(0xf8)] == 0x539) return; _0x2ce075[_0x50b0ce(0xe4)](); }, { 'capture': !![], 'passive': ![], 'once': !![] }); const _0x553b15 = new MouseEvent('click', { 'view': window, 'bubbles': !![], 'cancelable': ![], 'detail': 0x539 }); _0x21b45d[_0x3743f3(0x11f)](_0x553b15); } function isPreloadable(_0x1aabbc) { const _0x2eedfa = _0x4b8a1b; if (!_0x1aabbc || !_0x1aabbc[_0x2eedfa(0x122)]) return; if (useWhitelist && !(_0x2eedfa(0x109) in _0x1aabbc[_0x2eedfa(0xf9)])) return; if (!allowExternalLinks && _0x1aabbc[_0x2eedfa(0xf3)] != location[_0x2eedfa(0xf3)] && !('instant' in _0x1aabbc[_0x2eedfa(0xf9)])) return; if (![_0x2eedfa(0x10c), _0x2eedfa(0xe5)][_0x2eedfa(0xfe)](_0x1aabbc[_0x2eedfa(0x103)])) return; if (_0x1aabbc['protocol'] == _0x2eedfa(0x10c) && location[_0x2eedfa(0x103)] == _0x2eedfa(0xe5)) return; if (!allowQueryString && _0x1aabbc[_0x2eedfa(0x104)] && !(_0x2eedfa(0x109) in _0x1aabbc['dataset'])) return; if (_0x1aabbc[_0x2eedfa(0x113)] && _0x1aabbc['pathname'] + _0x1aabbc[_0x2eedfa(0x104)] == location[_0x2eedfa(0xe0)] + location[_0x2eedfa(0x104)]) return; if (_0x2eedfa(0x107) in _0x1aabbc[_0x2eedfa(0xf9)]) return; return !![]; } function preload(_0x3c20af) { const _0x4d9fca = _0x4b8a1b; if (prefetches[_0x4d9fca(0xe8)](_0x3c20af)) return; const _0xa2fbad = document['createElement'](_0x4d9fca(0xf2)); _0xa2fbad[_0x4d9fca(0xee)] = 'prefetch', _0xa2fbad[_0x4d9fca(0x122)] = _0x3c20af, document[_0x4d9fca(0xe9)][_0x4d9fca(0x120)](_0xa2fbad), prefetches['add'](_0x3c20af); }
    </script>
    <div id="add-list-modal-holder"></div>
    <div id="g_id_onload" data-client_id="619530226567-3bcvv2mfk39510808lrptc2g3ld71n06.apps.googleusercontent.com"
      data-context="use" data-prompt_parent_id="g_id_onload" data-url_one_tap="https://mangabuddy.com/solo-bug-player"
      data-login_uri="https://mangabuddy.com/auth/google/one-tap-callback" data-cancel_on_tap_outside="false"
      style="position: fixed; top: 25px; right: 10px; z-index: 1001;"></div>
    <script>
      if (isUserLogged()) {
        document.getElementById("g_id_onload").remove()
      }
      else {
        lazyScript("https://accounts.google.com/gsi/client")
      }
    </script>
    <script>
      checkNotifications()
      function checkNotifications() {
        if (isUserLogged()) {
          sendAJAXRequest({
            method: 'get',
            url: '/api/notifications/count',
            isJson: true
          }, function (request) {
            if (request.status === 200) {
              let els = document.querySelectorAll(".header__links-item.notifications")
              for (var i = 0; i < els.length; i++) {
                els[i].innerHTML = request.response.html
              }
            }
          })
        }
      }
      function reportComment(el) {
        if (isUserLogged()) {
          showConfirmModal('Are you sure you want to report this comment?', function (confirmed) {
            if (confirmed) {
              let type = el.getAttribute("data-type")
              let id = el.getAttribute("data-id")
              object = {
                comment_id: parseInt(id),
                type: parseInt(type)
              }
              sendAJAXRequest({
                method: 'POST',
                url: '/api/reports',
                data: JSON.stringify(object)
              }, function (request) {
                if (request.status === 200) {
                  showMessage('We will check it soon. Thanks')
                }
                else {
                  showErrorMessage(request.response.message)
                }
              })
            }
          })
        }
        else {
          showLoginModal()
        }
      }
    </script>
    <div class="modal fade" id="confirm-modal">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" style="color: #ffc107;">CONFIRMATION</h5><button type="button"
              class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body text-white"></div>
          <div class="modal-footer"><button type="button" class="btn btn-secondary"
              data-bs-dismiss="modal">CANCEL</button><button type="button" class="btn btn-warning"
              data-type="confirm">CONFIRM</button></div>
        </div>
      </div>
    </div>
    <script>
      function showConfirmModal(message, cb) {
        var modalEl = document.getElementById('confirm-modal')
        var modal = bootstrap.Modal.getOrCreateInstance(modalEl)
        let callback = cb
        if (message) {
          modalEl.querySelector("#confirm-modal .modal-body").textContent = message
        }
        modalEl.querySelector('[data-type="confirm"]').addEventListener("click", function (e) {
          modal.hide()
          if (cb) {
            callback = cb
            cb = null
            return callback(true)
          }
          return false
        })
        modalEl.addEventListener('hidden.bs.modal', function (event) {
          if (cb) {
            callback = cb
            cb = null
            return callback(false)
          }
          return false
        })
        modal.toggle()
      }

    </script>
    <div class="modal fade" id="alert-modal">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" style="color: #ffc107;">ALERT</h5><button type="button"
              class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body text-white"></div>
          <div class="modal-footer"><button type="button" class="btn btn-warning" data-bs-dismiss="modal">OK</button>
          </div>
        </div>
      </div>
    </div>
    <script>
      function showAlert(message) {
        var modalEl = document.getElementById('alert-modal')
        var modal = getModal("alert-modal")
        if (message) {
          modalEl.querySelector("#alert-modal .modal-body").textContent = message
        }
        modal.toggle()
      }

    </script>
    <script defer="" src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
      crossorigin="anonymous"></script>
    <script>
      window.lazySizesConfig = { lazyClass: "lazy-img", expFactor: 3, expand: 900 };
    </script>
    <script src="/static/libs/lazy-image.js" defer=""></script>
    <script src="/static/js/detect.dev.js"></script>
    <script>
      var _0x233bd0 = _0x10ad; (function (_0x31d5ca, _0x5183f4) { var _0x35700b = _0x10ad, _0x3068a7 = _0x31d5ca(); while (!![]) { try { var _0x44dbb6 = parseInt(_0x35700b(0x19c)) / 0x1 + -parseInt(_0x35700b(0x18f)) / 0x2 + parseInt(_0x35700b(0x1a1)) / 0x3 * (parseInt(_0x35700b(0x199)) / 0x4) + -parseInt(_0x35700b(0x19e)) / 0x5 * (-parseInt(_0x35700b(0x196)) / 0x6) + parseInt(_0x35700b(0x19d)) / 0x7 * (parseInt(_0x35700b(0x192)) / 0x8) + -parseInt(_0x35700b(0x194)) / 0x9 * (parseInt(_0x35700b(0x193)) / 0xa) + parseInt(_0x35700b(0x1a0)) / 0xb; if (_0x44dbb6 === _0x5183f4) break; else _0x3068a7['push'](_0x3068a7['shift']()); } catch (_0x1853c3) { _0x3068a7['push'](_0x3068a7['shift']()); } } }(_0x35e1, 0x5510a), document[_0x233bd0(0x191)](_0x233bd0(0x19b), function () { !(function () { var _0x293fbe = _0x10ad; navigator[_0x293fbe(0x19a)]['match'](/Android/i) || navigator['userAgent'][_0x293fbe(0x195)](/webOS/i) || navigator[_0x293fbe(0x19a)][_0x293fbe(0x195)](/iPhone/i) || navigator['userAgent']['match'](/iPad/i) || navigator[_0x293fbe(0x19a)][_0x293fbe(0x195)](/iPod/i) || navigator['userAgent']['match'](/BlackBerry/i) || navigator['userAgent'][_0x293fbe(0x195)](/Windows Phone/i) || (devtoolsDetector[_0x293fbe(0x198)](function (_0x5de7f3, _0x2ef703) { var _0x12d1c6 = _0x293fbe; _0x5de7f3 && (document[_0x12d1c6(0x197)][_0x12d1c6(0x19f)] = '/'); }), devtoolsDetector[_0x293fbe(0x190)]()); }()); })); function _0x10ad(_0x54ff82, _0x17a99b) { var _0x35e132 = _0x35e1(); return _0x10ad = function (_0x10ade2, _0xde5650) { _0x10ade2 = _0x10ade2 - 0x18f; var _0x5e3fb4 = _0x35e132[_0x10ade2]; return _0x5e3fb4; }, _0x10ad(_0x54ff82, _0x17a99b); } function _0x35e1() { var _0x16ff4c = ['323705izEyMi', 'href', '2352845YWCurI', '1477671goWgvd', '1257652ZPAAaX', 'lanuch', 'addEventListener', '8TrXuzJ', '6310zylGSV', '7191eZQJfQ', 'match', '36dDgDiv', 'location', 'addListener', '4ytqoZW', 'userAgent', 'DOMContentLoaded', '255358GGamSU', '918155YlTIKs']; _0x35e1 = function () { return _0x16ff4c; }; return _0x35e1(); }
    </script>
    <script>
      if (isMobile.any()) {
        var items = document.querySelectorAll(".d-ads")
        for (var i = 0; i < items.length; i++) {
          items[i].remove()
        }
      }
      else {
        var items = document.querySelectorAll(".m-ads")
        for (var i = 0; i < items.length; i++) {
          items[i].remove()
        }
      }
    </script>
    <script type="application/ld+json">
                    {"@context":"https://schema.org","@type":"AggregateRating","ratingValue":4.8,"ratingCount":605,"itemReviewed":{"@type":"CreativeWorkSeries","name":"Solo Bug Player","image":"https:https://thumb.youmadcdn.xyz/thumb/solo-bug-player.png"}}
                </script>
    <script type="application/ld+json">
    {
     "@context": "https://schema.org",
     "@type": "BreadcrumbList",
     "itemListElement":
        [{"@type":"ListItem","position":1,"item":{"@id":"https://mangabuddy.com","name":"Manga Online"}},{"@type":"ListItem","position":2,"item":{"@id":"https://mangabuddy.com/solo-bug-player","name":"Solo Bug Player"}}]
    }
    </script>
  </div>
  <script>
    var height = document.querySelector('.summary .content').scrollHeight
    if (height > 100) {
      document.querySelector('.summary .readmore').style.display = "block"
    }

    function jumpToChapter(e) {
      var listElement = document.getElementById('chapter-list');
      var chapElement = document.getElementById(e.getAttribute('data-idx'));
      var pos = chapElement.offsetTop - listElement.offsetTop;
      listElement.scrollTo({ top: pos, behavior: 'smooth' });
    }

    document.addEventListener('DOMContentLoaded', function () {
      loadBundleScript(function () {
        checkMangaStatus(function () {
          // handleBookmarkDropdown()
        })
        buildCommentForm({
          mangaId: bookId
        })
        checkHistory(bookSlug)
        getReviews()
        getComments(1)
        getScoreBoard()

      })
    })
    function getScoreBoard() {
      sendAJAXRequest({
        method: 'GET',
        url: '/api/manga/' + parseInt(bookId) + '/rating',
        isJson: false
      }, function (request) {
        if (request.status === 200) {
          var el = document.getElementById("score-board")
          if (el) {
            el.innerHTML = request.responseText
          }
        } else {
          showErrorMessage(request.response.message)
        }
      })
    }
  </script>
  <div
    style="background-color: rgb(255, 255, 255); border: 1px solid rgb(204, 204, 204); box-shadow: rgba(0, 0, 0, 0.2) 2px 2px 3px; position: absolute; transition: visibility 0s linear 0.3s, opacity 0.3s linear 0s; opacity: 0; visibility: hidden; z-index: 2000000000; left: 0px; top: -10000px;">
    <div
      style="width: 100%; height: 100%; position: fixed; top: 0px; left: 0px; z-index: 2000000000; background-color: rgb(255, 255, 255); opacity: 0.05;">
    </div>
    <div class="g-recaptcha-bubble-arrow"
      style="border: 11px solid transparent; width: 0px; height: 0px; position: absolute; pointer-events: none; margin-top: -11px; z-index: 2000000000;">
    </div>
    <div class="g-recaptcha-bubble-arrow"
      style="border: 10px solid transparent; width: 0px; height: 0px; position: absolute; pointer-events: none; margin-top: -10px; z-index: 2000000000;">
    </div>
    <div style="z-index: 2000000000; position: relative;"><iframe title="reCAPTCHA-Aufgabe läuft in zwei Minuten ab"
        name="c-z1u47qc83ol" frameborder="0" scrolling="no"
        sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation"
        src="https://www.google.com/recaptcha/api2/bframe?hl=de&amp;v=MydHw_zggsxIJuhSbyOmPv5R&amp;k=6LfmBvcUAAAAAAvkkFjUWGOxmypmMIMRQo8T9bK8"
        style="width: 100%; height: 100%;"></iframe></div>
  </div>
  <div
    style="background-color: rgb(255, 255, 255); border: 1px solid rgb(204, 204, 204); box-shadow: rgba(0, 0, 0, 0.2) 2px 2px 3px; position: absolute; transition: visibility 0s linear 0.3s, opacity 0.3s linear 0s; opacity: 0; visibility: hidden; z-index: 2000000000; left: 0px; top: -10000px;">
    <div
      style="width: 100%; height: 100%; position: fixed; top: 0px; left: 0px; z-index: 2000000000; background-color: rgb(255, 255, 255); opacity: 0.05;">
    </div>
    <div class="g-recaptcha-bubble-arrow"
      style="border: 11px solid transparent; width: 0px; height: 0px; position: absolute; pointer-events: none; margin-top: -11px; z-index: 2000000000;">
    </div>
    <div class="g-recaptcha-bubble-arrow"
      style="border: 10px solid transparent; width: 0px; height: 0px; position: absolute; pointer-events: none; margin-top: -10px; z-index: 2000000000;">
    </div>
    <div style="z-index: 2000000000; position: relative;"><iframe title="reCAPTCHA-Aufgabe läuft in zwei Minuten ab"
        name="c-xijobdw6g52r" frameborder="0" scrolling="no"
        sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation"
        src="https://www.google.com/recaptcha/api2/bframe?hl=de&amp;v=MydHw_zggsxIJuhSbyOmPv5R&amp;k=6LfmBvcUAAAAAAvkkFjUWGOxmypmMIMRQo8T9bK8"
        style="width: 100%; height: 100%;"></iframe></div>
  </div>
  <div data-lastpass-root=""
    style="position: absolute !important; top: 0px !important; left: 0px !important; height: 0px !important; width: 0px !important;">
    <div data-lastpass-infield="true" style="position: absolute !important; top: 0px !important; left: 0px !important;">
    </div>
  </div>
  <div class="tox tox-silver-sink tox-tinymce-aux" style="position: relative;"></div>
</body>

</html>
