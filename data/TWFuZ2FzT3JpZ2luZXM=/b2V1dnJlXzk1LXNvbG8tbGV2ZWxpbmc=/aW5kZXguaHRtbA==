<html lang="fr-FR">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="profile" href="https://gmpg.org/xfn/11">
  <title>Solo Leveling – Mangas Origines</title>
  <meta name="robots" content="max-image-preview:large">
  <link rel="dns-prefetch" href="//www.googletagmanager.com">
  <link rel="dns-prefetch" href="//pagead2.googlesyndication.com">
  <link rel="stylesheet" id="ct-shortcode-css"
    href="https://mangas-origines.fr/wp-content/plugins/madara-shortcodes/shortcodes/css/shortcodes.css?ver=6.3.2"
    type="text/css" media="all">
  <link rel="stylesheet" id="wpdiscuz-frontend-css-css"
    href="https://mangas-origines.fr/wp-content/plugins/wpdiscuz/themes/default/style.css?ver=7.6.10" type="text/css"
    media="all">
  <style id="wpdiscuz-frontend-css-inline-css" type="text/css">
    #wpdcom .wpd-blog-administrator .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-administrator .wpd-comment-author,
    #wpdcom .wpd-blog-administrator .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-1 .wpd-comment .wpd-blog-administrator .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment.wpd-reply .wpd-comment-wrap.wpd-blog-administrator {
      border-left: 3px solid #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-administrator .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-administrator .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-reply .wpd-blog-administrator .wpd-comment-right {
      border-left: 1px solid #00B38F
    }

    #wpdcom .wpd-blog-editor .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-editor .wpd-comment-author,
    #wpdcom .wpd-blog-editor .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-1 .wpd-comment .wpd-blog-editor .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment.wpd-reply .wpd-comment-wrap.wpd-blog-editor {
      border-left: 3px solid #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-editor .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-editor .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-reply .wpd-blog-editor .wpd-comment-right {
      border-left: 1px solid #00B38F
    }

    #wpdcom .wpd-blog-author .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-author .wpd-comment-author,
    #wpdcom .wpd-blog-author .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-1 .wpd-comment .wpd-blog-author .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-author .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-author .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-reply .wpd-blog-author .wpd-comment-right {
      border-left: 1px solid #00B38F
    }

    #wpdcom .wpd-blog-contributor .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-contributor .wpd-comment-author,
    #wpdcom .wpd-blog-contributor .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-1 .wpd-comment .wpd-blog-contributor .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-contributor .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-contributor .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-reply .wpd-blog-contributor .wpd-comment-right {
      border-left: 1px solid #00B38F
    }

    #wpdcom .wpd-blog-subscriber .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-subscriber .wpd-comment-author,
    #wpdcom .wpd-blog-subscriber .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-subscriber .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-subscriber .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom .wpd-blog-translator .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-translator .wpd-comment-author,
    #wpdcom .wpd-blog-translator .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-1 .wpd-comment .wpd-blog-translator .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-translator .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-translator .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-reply .wpd-blog-translator .wpd-comment-right {
      border-left: 1px solid #00B38F
    }

    #wpdcom .wpd-blog-post_author .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-post_author .wpd-comment-author,
    #wpdcom .wpd-blog-post_author .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom .wpd-blog-post_author .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-1 .wpd-comment .wpd-blog-post_author .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment.wpd-reply .wpd-comment-wrap.wpd-blog-post_author {
      border-left: 3px solid #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-post_author .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-post_author .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-reply .wpd-blog-post_author .wpd-comment-right {
      border-left: 1px solid #00B38F
    }

    #wpdcom .wpd-blog-guest .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-guest .wpd-comment-author,
    #wpdcom .wpd-blog-guest .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-guest .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #comments,
    #respond,
    .comments-area,
    #wpdcom.wpd-dark {
      background: #14161c;
      color: #CCCCCC
    }

    #wpdcom .ql-editor>* {
      color: #000000
    }

    #wpdcom .ql-editor::before {
      opacity: 1;
      color: #DDDDDD
    }

    #wpdcom .ql-toolbar {
      border: 1px solid #D1D1D1;
      border-top: none
    }

    #wpdcom .ql-container {
      background: #999999;
      border: 1px solid #D1D1D1;
      border-bottom: none
    }

    #wpdcom .wpd-form-row .wpdiscuz-item input[type="text"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="email"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="url"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="color"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="date"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="datetime"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="datetime-local"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="month"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="number"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="time"],
    #wpdcom textarea,
    #wpdcom select {
      background: #999999;
      border: 1px solid #D1D1D1;
      color: #000000
    }

    #wpdcom.wpd-dark .wpdiscuz-item.wpd-field-select select.wpdiscuz_select,
    #wpdcom.wpd-dark select {
      background: #999999 !important;
      border: 1px solid #D1D1D1 !important;
      color: #000000 !important
    }

    #wpdcom .wpd-form-row .wpdiscuz-item textarea {
      border: 1px solid #D1D1D1
    }

    #wpdcom input::placeholder,
    #wpdcom textarea::placeholder,
    #wpdcom input::-moz-placeholder,
    #wpdcom textarea::-webkit-input-placeholder {
      opacity: 1;
      color: #DDDDDD
    }

    #wpdcom .wpd-comment-text {
      color: #CCCCCC
    }

    .lity-wrap .wpd-item a {
      color: #666
    }

    .lity-wrap .wpd-item a:hover {
      color: #222
    }

    .wpd-inline-shortcode.wpd-active {
      background-color: #666
    }

    #wpdcom .wpd-thread-head .wpd-thread-info {
      border-bottom: 2px solid #00B38F
    }

    #wpdcom .wpd-thread-head .wpd-thread-info.wpd-reviews-tab svg {
      fill: #00B38F
    }

    #wpdcom .wpd-thread-head .wpdiscuz-user-settings {
      border-bottom: 2px solid #00B38F
    }

    #wpdcom .wpd-thread-head .wpdiscuz-user-settings:hover {
      color: #00B38F
    }

    #wpdcom .wpd-comment .wpd-follow-link:hover {
      color: #00B38F
    }

    #wpdcom .wpd-comment-status .wpd-sticky {
      color: #00B38F
    }

    #wpdcom .wpd-thread-filter .wpdf-active {
      color: #00B38F;
      border-bottom-color: #00B38F
    }

    #wpdcom .wpd-comment-info-bar {
      border: 1px dashed #33c3a6;
      background: #e6f8f4
    }

    #wpdcom .wpd-comment-info-bar .wpd-current-view i {
      color: #00B38F
    }

    #wpdcom .wpd-filter-view-all:hover {
      background: #00B38F
    }

    #wpdcom .wpdiscuz-item .wpdiscuz-rating>label {
      color: #DDDDDD
    }

    #wpdcom .wpdiscuz-item .wpdiscuz-rating:not(:checked)>label:hover,
    .wpdiscuz-rating:not(:checked)>label:hover~label {}

    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input~label:hover,
    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input:not(:checked)~label:hover~label,
    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input:not(:checked)~label:hover~label {
      color: #FFED85
    }

    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input:checked~label:hover,
    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input:checked~label:hover,
    #wpdcom .wpdiscuz-item .wpdiscuz-rating>label:hover~input:checked~label,
    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input:checked+label:hover~label,
    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input:checked~label:hover~label,
    .wpd-custom-field .wcf-active-star,
    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input:checked~label {
      color: #FFD700
    }

    #wpd-post-rating .wpd-rating-wrap .wpd-rating-stars svg .wpd-star {
      fill: #DDDDDD
    }

    #wpd-post-rating .wpd-rating-wrap .wpd-rating-stars svg .wpd-active {
      fill: #FFD700
    }

    #wpd-post-rating .wpd-rating-wrap .wpd-rate-starts svg .wpd-star {
      fill: #DDDDDD
    }

    #wpd-post-rating .wpd-rating-wrap .wpd-rate-starts:hover svg .wpd-star {
      fill: #FFED85
    }

    #wpd-post-rating.wpd-not-rated .wpd-rating-wrap .wpd-rate-starts svg:hover~svg .wpd-star {
      fill: #DDDDDD
    }

    .wpdiscuz-post-rating-wrap .wpd-rating .wpd-rating-wrap .wpd-rating-stars svg .wpd-star {
      fill: #DDDDDD
    }

    .wpdiscuz-post-rating-wrap .wpd-rating .wpd-rating-wrap .wpd-rating-stars svg .wpd-active {
      fill: #FFD700
    }

    #wpdcom .wpd-comment .wpd-follow-active {
      color: #ff7a00
    }

    #wpdcom .page-numbers {
      color: #555;
      border: #555 1px solid
    }

    #wpdcom span.current {
      background: #555
    }

    #wpdcom.wpd-layout-1 .wpd-new-loaded-comment>.wpd-comment-wrap>.wpd-comment-right {
      background: #FFFAD6
    }

    #wpdcom.wpd-layout-2 .wpd-new-loaded-comment.wpd-comment>.wpd-comment-wrap>.wpd-comment-right {
      background: #FFFAD6
    }

    #wpdcom.wpd-layout-2 .wpd-new-loaded-comment.wpd-comment.wpd-reply>.wpd-comment-wrap>.wpd-comment-right {
      background: transparent
    }

    #wpdcom.wpd-layout-2 .wpd-new-loaded-comment.wpd-comment.wpd-reply>.wpd-comment-wrap {
      background: #FFFAD6
    }

    #wpdcom.wpd-layout-3 .wpd-new-loaded-comment.wpd-comment>.wpd-comment-wrap>.wpd-comment-right {
      background: #FFFAD6
    }

    #wpdcom .wpd-follow:hover i,
    #wpdcom .wpd-unfollow:hover i,
    #wpdcom .wpd-comment .wpd-follow-active:hover i {
      color: #00B38F
    }

    #wpdcom .wpdiscuz-readmore {
      cursor: pointer;
      color: #00B38F
    }

    .wpd-custom-field .wcf-pasiv-star,
    #wpcomm .wpdiscuz-item .wpdiscuz-rating>label {
      color: #DDDDDD
    }

    .wpd-wrapper .wpd-list-item.wpd-active {
      border-top: 3px solid #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment.wpd-reply.wpd-unapproved-comment .wpd-comment-wrap {
      border-left: 3px solid #FFFAD6
    }

    #wpdcom.wpd-layout-3 .wpd-comment.wpd-reply.wpd-unapproved-comment .wpd-comment-right {
      border-left: 1px solid #FFFAD6
    }

    #wpdcom .wpd-prim-button {
      background-color: #07B290;
      color: #FFFFFF
    }

    #wpdcom .wpd_label__check i.wpdicon-on {
      color: #07B290;
      border: 1px solid #83d9c8
    }

    #wpd-bubble-wrapper #wpd-bubble-all-comments-count {
      color: #1DB99A
    }

    #wpd-bubble-wrapper>div {
      background-color: #1DB99A
    }

    #wpd-bubble-wrapper>#wpd-bubble #wpd-bubble-add-message {
      background-color: #1DB99A
    }

    #wpd-bubble-wrapper>#wpd-bubble #wpd-bubble-add-message::before {
      border-left-color: #1DB99A;
      border-right-color: #1DB99A
    }

    #wpd-bubble-wrapper.wpd-right-corner>#wpd-bubble #wpd-bubble-add-message::before {
      border-left-color: #1DB99A;
      border-right-color: #1DB99A
    }

    .wpd-inline-icon-wrapper path.wpd-inline-icon-first {
      fill: #1DB99A
    }

    .wpd-inline-icon-count {
      background-color: #1DB99A
    }

    .wpd-inline-icon-count::before {
      border-right-color: #1DB99A
    }

    .wpd-inline-form-wrapper::before {
      border-bottom-color: #1DB99A
    }

    .wpd-inline-form-question {
      background-color: #1DB99A
    }

    .wpd-inline-form {
      background-color: #1DB99A
    }

    .wpd-last-inline-comments-wrapper {
      border-color: #1DB99A
    }

    .wpd-last-inline-comments-wrapper::before {
      border-bottom-color: #1DB99A
    }

    .wpd-last-inline-comments-wrapper .wpd-view-all-inline-comments {
      background: #1DB99A
    }

    .wpd-last-inline-comments-wrapper .wpd-view-all-inline-comments:hover,
    .wpd-last-inline-comments-wrapper .wpd-view-all-inline-comments:active,
    .wpd-last-inline-comments-wrapper .wpd-view-all-inline-comments:focus {
      background-color: #1DB99A
    }

    #wpdcom .ql-snow .ql-tooltip[data-mode="link"]::before {
      content: "Enter link:"
    }

    #wpdcom .ql-snow .ql-tooltip.ql-editing a.ql-action::after {
      content: "Enregistrer"
    }

    .comments-area {
      width: auto
    }
  </style>
  <link rel="stylesheet" id="wpdiscuz-fa-css"
    href="https://mangas-origines.fr/wp-content/plugins/wpdiscuz/assets/third-party/font-awesome-5.13.0/css/fa.min.css?ver=7.6.10"
    type="text/css" media="all">
  <link rel="stylesheet" id="quill-css-css"
    href="https://mangas-origines.fr/wp-content/plugins/wpdiscuz/assets/third-party/quill/quill.snow.css?ver=1.3.6"
    type="text/css" media="all">
  <link rel="stylesheet" id="wpdiscuz-mu-css-css"
    href="https://mangas-origines.fr/wp-content/plugins/wpdiscuz/assets/css/wpdiscuz-mu-frontend.css?ver=6.3.2"
    type="text/css" media="all">
  <link rel="stylesheet" id="wpdiscuz-user-content-css-css"
    href="https://mangas-origines.fr/wp-content/plugins/wpdiscuz/assets/css/wpdiscuz-user-content.css?ver=7.6.10"
    type="text/css" media="all">
  <link rel="stylesheet" id="bootstrap-css"
    href="https://mangas-origines.fr/wp-content/themes/madara/css/bootstrap.min.css?ver=4.3.1" type="text/css"
    media="all">
  <link rel="stylesheet" id="slick-css"
    href="https://mangas-origines.fr/wp-content/themes/madara/js/slick/slick.css?ver=1.9.0" type="text/css" media="all">
  <link rel="stylesheet" id="slick-theme-css"
    href="https://mangas-origines.fr/wp-content/themes/madara/js/slick/slick-theme.css?ver=6.3.2" type="text/css"
    media="all">
  <link rel="stylesheet" id="madara-css-child-css"
    href="https://mangas-origines.fr/wp-content/themes/madara/style.css?ver=1.0.2" type="text/css" media="all">
  <link rel="stylesheet" id="fontawesome-css"
    href="https://mangas-origines.fr/wp-content/themes/madara/app/lib/fontawesome/web-fonts-with-css/css/all.min.css?ver=5.15.3"
    type="text/css" media="all">
  <link rel="stylesheet" id="ionicons-css"
    href="https://mangas-origines.fr/wp-content/themes/madara/css/fonts/ionicons/css/ionicons.min.css?ver=4.5.10"
    type="text/css" media="all">
  <link rel="stylesheet" id="madara-icons-css"
    href="https://mangas-origines.fr/wp-content/themes/madara/css/fonts/ct-icon/ct-icon.css?ver=6.3.2" type="text/css"
    media="all">
  <link rel="stylesheet" id="loaders-css"
    href="https://mangas-origines.fr/wp-content/themes/madara/css/loaders.min.css?ver=6.3.2" type="text/css"
    media="all">
  <link rel="stylesheet" id="madara-css-css"
    href="https://mangas-origines.fr/wp-content/themes/madara-child-tp/style.css?ver=1.6.6" type="text/css" media="all">
  <style id="madara-css-inline-css" type="text/css">
    :root {
      --madara-main-color: #eb3349;
    }

    #pageloader.spinners {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 99999;
      background: #222
    }

    p.madara-unyson {
      color: #FF0000;
    }

    .table.table-hover.list-bookmark tr:last-child td {
      text-align: center;
    }

    #adminmenu .wp-submenu li.current {
      display: none !important;
    }

    .show_tgmpa_version {
      float: right;
      padding: 0em 1.5em 0.5em 0;
    }

    .tgmpa>h2 {
      font-size: 23px;
      font-weight: 400;
      line-height: 29px;
      margin: 0;
      padding: 9px 15px 4px 0;
    }

    .update-php {
      width: 100%;
      height: 98%;
      min-height: 850px;
      padding-top: 1px;
    }

    @media only screen and (-webkit-min-device-pixel-ratio: 2),
    (min-resolution: 192dpi) {

      /* Retina Logo */
      .site-header .c-header__top .wrap_branding a {
        background: url(https://mangas-origines.fr/wp-content/uploads/2023/06/logos_oritest.png) no-repeat center;
        background-size: contain;
        display: block;
        max-width: 100%
      }

      .site-header .c-header__top .wrap_branding a img {
        opacity: 0;
        visibility: hidden;
      }
    }

    .c-blog-post .entry-content .entry-content_wrap .read-container img.alignleft {
      margin: 10px 30px 10px 0 !important;
    }

    .c-blog-post .entry-content .entry-content_wrap .read-container img.alignright {
      margin: 10px 0px 10px 30px !important;
    }

    .read-container i.fas.fa-spinner.fa-spin {
      font-size: 31px;
      color: #888;
    }

    .c-blog-post .entry-content .entry-content_wrap .read-container img {
      cursor: pointer;
    }

    .choose-avatar .loading-overlay {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.72);
      z-index: 1;
      display: none;
    }

    .choose-avatar .loading-overlay i.fas.fa-spinner {
      font-size: 40px;
      color: #ec3348;
    }

    .choose-avatar .loading-overlay .loading-icon {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }

    .choose-avatar.uploading .loading-overlay {
      display: block;
    }

    .site-header .c-sub-header-nav .entry-header {
      display: none;
      margin-bottom: 15px;
    }

    .site-header .c-sub-header-nav.sticky .entry-header {
      display: block;
    }

    .site-header .c-sub-header-nav.hide-sticky-menu.sticky .c-sub-nav_wrap {
      display: none;
    }

    .site-header .c-sub-header-nav.hide-sticky-menu .entry-header {
      margin-top: 15px;
    }

    body.page .c-page-content .c-page .c-page__content .page-content-listing .page-listing-item .page-item-detail .item-summary .list-chapter .chapter-item span.vol.font-meta {
      display: none
    }

    .chapter-type-manga .c-blog-post .entry-content .entry-content_wrap .reading-content::before {
      content: ' ';
      display: block;
      width: 100%;
      height: 100%;
      position: absolute;
    }

    body.modal-open .modal .modal-dialog,
    body.modal-open .modal .modal-content .modal-loading-screen {
      background-image: none;
      background-color: #161616;
      background-image: url(https://mangas-origines.fr/wp-content/uploads/2023/06/login-mo.jpg);
      background-repeat: no-repeat;
    }

    @media (max-width: 480px) {
      .c-blog-post .entry-content .entry-content_wrap .reading-content {
        margin-left: -15px;
        margin-right: -15px
      }
    }

    .page-listing-item .post-title h3,
    .slider__content_item h4 {
      -webkit-line-clamp: 1;
    }

    .settings-page table.list-bookmark>tbody tr td>div.mange-name:before {
      content: "Nom de l’œuvre ";
    }

    .settings-page table.list-bookmark>tbody tr td>div.action:before {
      content: "Modifier";
    }

    .settings-page table.list-bookmark>tbody tr td>div.post-on:before {
      content: "Mis à jour";
    }
  </style>
  <script async="" src="https://mangas-origines.fr/wp-content/plugins/perfmatters/js/analytics.js"></script>
  <script type="text/javascript" src="https://mangas-origines.fr/wp-includes/js/jquery/jquery.min.js?ver=3.7.0"
    id="jquery-core-js"></script>
  <script type="text/javascript" src="https://mangas-origines.fr/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.4.1"
    id="jquery-migrate-js"></script>
  <script type="text/javascript" src="https://mangas-origines.fr/wp-content/themes/madara/js/bootstrap.min.js?ver=4.6.0"
    id="bootstrap-js"></script>
  <script type="text/javascript" src="https://mangas-origines.fr/wp-content/themes/madara/js/shuffle.min.js?ver=5.3.0"
    id="shuffle-js"></script>
  <script type="text/javascript" id="madara-js-js-extra">
    /* <![CDATA[ */
    var madara = { "ajaxurl": "https:\/\/mangas-origines.fr\/wp-admin\/admin-ajax.php", "query_vars": { "page": 0, "manga-core": "95-solo-leveling", "post_type": "wp-manga", "name": "95-solo-leveling", "error": "", "m": "", "p": 0, "post_parent": "", "subpost": "", "subpost_id": "", "attachment": "", "attachment_id": 0, "pagename": "", "page_id": 0, "second": "", "minute": "", "hour": "", "day": 0, "monthnum": 0, "year": 0, "w": 0, "category_name": "", "tag": "", "cat": "", "tag_id": "", "author": "", "author_name": "", "feed": "", "tb": "", "paged": 0, "meta_key": "", "meta_value": "", "preview": "", "s": "", "sentence": "", "title": "", "fields": "", "menu_order": "", "embed": "", "category__in": [], "category__not_in": [], "category__and": [], "post__in": [], "post__not_in": [], "post_name__in": [], "tag__in": [], "tag__not_in": [], "tag__and": [], "tag_slug__in": [], "tag_slug__and": [], "post_parent__in": [], "post_parent__not_in": [], "author__in": [], "author__not_in": [], "search_columns": [], "ignore_sticky_posts": false, "suppress_filters": false, "cache_results": true, "update_post_term_cache": true, "update_menu_item_cache": false, "lazy_load_term_meta": true, "update_post_meta_cache": true, "posts_per_page": 12, "nopaging": false, "comments_per_page": "50", "no_found_rows": false, "order": "DESC" }, "current_url": "https:\/\/mangas-origines.fr\/oeuvre\/95-solo-leveling" };
    var single_manga_show_more = { "show_more": "Voir plus", "show_less": "Voir moins" };
    /* ]]> */
  </script>
  <script type="text/javascript" src="https://mangas-origines.fr/wp-content/themes/madara/js/template.js?ver=1.7.3"
    id="madara-js-js"></script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-content/themes/madara-child-tp/assets/js/child.js?ver=6.3.2"
    id="madara-child-js-js"></script>

  <script type="text/javascript" src="https://www.googletagmanager.com/gtag/js?id=UA-177067753-1" id="google_gtagjs-js"
    async=""></script>
  <script id="google_gtagjs-js-after" type="text/javascript">
    window.dataLayer = window.dataLayer || []; function gtag() { dataLayer.push(arguments); }
    gtag('set', 'linker', { "domains": ["mangas-origines.fr"] });
    gtag("js", new Date());
    gtag("set", "developer_id.dZTNiMT", true);
    gtag("config", "UA-177067753-1", { "anonymize_ip": true });
    gtag("config", "G-DPGCMVGV83");
  </script>

  <link rel="canonical" href="https://mangas-origines.fr/oeuvre/95-solo-leveling/">
  <link rel="shortlink" href="https://mangas-origines.fr/?p=253">
  <meta name="generator" content="Site Kit by Google 1.111.0">
  <script>(function (i, s, o, g, r, a, m) {
      i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
        (i[r].q = i[r].q || []).push(arguments)
      }, i[r].l = 1 * new Date(); a = s.createElement(o),
        m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
    })(window, document, 'script', 'https://mangas-origines.fr/wp-content/plugins/perfmatters/js/analytics.js', 'ga'); ga('create', '279036660', 'auto'); ga('set', 'allowAdFeatures', false); ga('send', 'pageview');</script>

  <meta name="google-adsense-platform-account" content="ca-host-pub-2644536267352236">
  <meta name="google-adsense-platform-domain" content="sitekit.withgoogle.com">


  <script async="async"
    src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7918463289472920&amp;host=ca-host-pub-2644536267352236"
    crossorigin="anonymous" type="text/javascript"></script>

  <link rel="icon" href="https://mangas-origines.fr/wp-content/uploads/2023/07/cropped-favmo3-32x32.png" sizes="32x32">
  <link rel="icon" href="https://mangas-origines.fr/wp-content/uploads/2023/07/cropped-favmo3-192x192.png"
    sizes="192x192">
  <link rel="apple-touch-icon" href="https://mangas-origines.fr/wp-content/uploads/2023/07/cropped-favmo3-180x180.png">
  <meta name="msapplication-TileImage"
    content="https://mangas-origines.fr/wp-content/uploads/2023/07/cropped-favmo3-270x270.png">
  <style type="text/css" id="wp-custom-css">
    site-header .main-navigation.style-1,
    .widget-heading,
    .widget.background::after,
    .c-blog__heading.style-2 i,
    .tab-wrap .c-nav-tabs ul.c-tabs-content li.active a::after,
    .tab-wrap .c-nav-tabs ul.c-tabs-content li:hover a::after,
    .tab-wrap .c-nav-tabs ul.c-tabs-content li a::after,
    .related-heading.font-nav,
    .c-blog__heading.style-3,
    .settings-page .nav-tabs-wrap ul.nav-tabs li.active a,
    .off-canvas {
      background: #191919 !important;
    }

    body.text-ui-light .body-wrap {
      background-color: #14161c;
    }

    h5,
    .h5 {
      font-size: 14px !important;
    }

    .manga-rate-view-comment {
      border: 2px solid grey;
      padding: 8px 10px;
      display: inline-block;
      margin: 0 0 16px 0;
      border-radius: 8px;
    }

    .manga-rate-view-comment .fa-thumbs-up {
      color: #009fe3;
    }

    body.manga-page .profile-manga .tab-summary .summary_image img {
      border-radius: 0.5em;
      box-shadow: rgba(0, 0, 0, 0.56) 0px 8px 24px;
    }

    body.text-ui-light .widget.c-popular .popular-item-wrap,
    body.text-ui-light .c-blog__heading.style-2,
    body.text-ui-light .c-blog__heading.style-2 {
      border-bottom-width: 0px;
    }

    #manga-chapters-holder .c-blog__heading.style-2 {
      border-bottom-width: 0px;
    }

    body.manga-page .profile-manga .post-title h1 {
      margin-top: 14px;
      font-size: 30px;
      font-weight: bolder;
      color: white;
    }

    .site-header .main-navigation.style-1 .wrap_branding a img {
      max-width: 200px;
    }

    .c-top-sidebar {
      background: #14161c !important;
    }

    .c-top-second-sidebar {
      background: #14161c !important;
    }

    .manga-slider.style-3 .slider__container {
      -webkit-box-shadow: 0px 5px 15px 0px rgba(0, 0, 0, 0);
      -moz-box-shadow: 0px 5px 15px 0px rgba(0, 0, 0, 0);
      box-shadow: 0px 5px 15px 0px rgba(0, 0, 0, 0);
    }

    h4,
    .h4 {
      font-size: 24px;
    }

    .font-heading {
      text-transform: inherit;
    }

    body.page .c-page-content .c-page .c-page__content .page-content-listing .page-listing-item {
      border-bottom: 0px solid #ebebeb;
    }

    .site-header .search-main-menu form input[type="text"] {
      border-radius: 9px;
    }

    .site-header .search-main-menu form input[type="submit"] {
      background: #009fe3;
      border-radius: 7px;
    }

    body.text-ui-light .site-header .c-header__top .search-main-menu {
      background-color: #14161c !important;
    }

    body.text-ui-light .navigation-ajax .load-ajax {
      background-color: #cccccc0d;
      color: #FFF;
      border-color: transparent;
      border-radius: 0.5em;
    }

    body.text-ui-light .navigation-ajax .load-ajax:hover {
      background-color: #009fe36b;
    }

    body.page.text-ui-light .c-page-content .c-page .c-page__content .page-content-listing .page-listing-item .page-item-detail .item-summary .list-chapter .chapter-item .chapter a:hover,
    .text-ui-light .widget.c-popular .popular-item-wrap .popular-content .chapter-item .chapter a:hover,
    body.text-ui-light .settings-page .list-chapter .chapter-item .chapter a:hover,
    body.search.text-ui-light .search-wrap .tab-content-wrap .c-tabs-item .c-tabs-item__content .tab-meta .latest-chap .chapter a:hover {
      color: #009fe3;
    }

    body.page .manga-tp-slider .related__container .related__item .related__content a:hover {
      color: #009fe3;
    }

    a:hover {
      color: #009fe3 !important;
    }

    .c-new-tag {
      background: url('https://mangas-origines.fr/wp-content/themes/madara/images/new-icon.png') center center no-repeat !important;
    }

    body.manga-page .page-content-listing.single-page .listing-chapters_wrap>ul.main.version-chap li::after,
    .shortcode-manga-chapters .listing-chapters_wrap>ul.main.version-chap li::after {
      height: 0px !important;
    }

    body.manga-page .profile-manga .tab-summary .post-content_item .summary-content .genres-content {
      margin-bottom: 45px !important;
      display: flex !important;
      flex-wrap: wrap !important;
      column-gap: 6px;

    }

    body.manga-page .page-content-listing.single-page .listing-chapters_wrap>ul.version-chap>li>a,
    body.manga-page .page-content-listing.single-page .listing-chapters_wrap>ul.vol-chap>li>a,
    .shortcode-manga-chapters .listing-chapters_wrap>ul.version-chap>li>a,
    .shortcode-manga-chapters .listing-chapters_wrap>ul.vol-chap>li>a {
      font-weight: 400 !important;
    }

    body.manga-page.text-ui-light .listing-chapters_wrap.show-more .version-chap::after {
      background: -webkit-linear-gradient(top, rgba(0, 0, 0, 0), #14161c) !important;
      background: -moz-linear-gradient(top, rgba(0, 0, 0, 0), #14161c) !important;
    }

    .manga-tp-slider .slider__container .slick-dots li.slick-active button::before {
      color: #009fe3 !important;
    }

    .manga-title-badges.custom {
      float: left;
      border-radius: 0.5em;
      width: 60px;
      height: 24px;
      text-align: center;
      padding-left: 5px;
      margin-top: 2px;
      backdrop-filter: blur(10px) !important;
      box-shadow: rgba(0, 0, 0, 0.76) 0px 3px 4px 0px !important;
      background-color: #0000008c;
    }

    .manga-title-badges.manhwa {
      background: #2493ba73 !important;
    }

    .manga-title-badges.hot {
      background: #ff60008c !important;
    }

    .manga-title-badges.manga {
      background-color: #ffeb9e8c !important;
    }

    .manga-title-badges.manhua {
      background: #36af7d87 !important;
    }

    .related__content_item .manga-title-badges {
      margin-right: 2px;
      display: none !important;
    }

    #manga-chapters-sidebar {
      width: 242px !important;
      background: #000000ad;
      padding-left: 2em !important;
      box-shadow: rgba(0, 0, 0, 0.2) 0px 7px 29px 0px !important;
      backdrop-filter: blur(20px);
    }

    .text-ui-light .tp-heroslider .slider_item_inner {
      border-color: #575960 !important;
      background: #181a20 !important;
    }

    .c-btn.c-btn_style-1 {
      background-color: #39738c !important;
      color: white;
    }

    .c-btn.c-btn_style-1:hover {
      color: white !important;
      background-color: black !important;
    }

    #init-links .c-btn.c-btn_style-1,
    .c-btn.c-btn_style-1 {
      border-radius: 0.5em !important;
    }

    body.text-ui-light.search .search-wrap .tab-content-wrap .c-tabs-item .c-tabs-item__content .tab-summary .post-content {
      background-color: rgba(235, 235, 235, 0.06) !important;
      border-radius: 0.5em !important;
    }

    .manga-title-badges {
      left: 7px !important;
      top: 4px !important;
    }

    body.text-ui-light .site-footer {
      background-color: #272a31 !important;
      border: none !important;
    }

    site-header .main-navigation.style-1,
    .widget-heading,
    .widget.background::after,
    .c-blog__heading.style-2 i,
    .tab-wrap .c-nav-tabs ul.c-tabs-content li.active a::after,
    .tab-wrap .c-nav-tabs ul.c-tabs-content li:hover a::after,
    .tab-wrap .c-nav-tabs ul.c-tabs-content li a::after,
    .related-heading.font-nav,
    .c-blog__heading.style-3,
    .settings-page .nav-tabs-wrap ul.nav-tabs li.active a,
    .off-canvas {
      background: #0a0b0e !important;
    }

    .off-canvas ul.main-navbar>li {
      border: none !important;
    }

    .off-canvas ul.main-navbar li a {
      font-weight: bolder !important;
    }

    .listing-chapters_wrap .wp-manga-chapter a,
    body.text-ui-light .listing-chapters_wrap .wp-manga-chapter a:not(:hover) {
      font-size: 16px !important;
    }

    .site-header .c-header__top .manga-autocomplete.ui-autocomplete,
    .c-search-header__wrapper .manga-autocomplete.ui-autocomplete {
      box-shadow: 1px 1px 3px #0f0f0f;
      background-color: #14161c3d;
      border: none !important;
      backdrop-filter: blur(30px);
      margin-top: 10px;
      border-radius: 10px !important;
    }

    .site-header .c-header__top .manga-autocomplete.ui-autocomplete>li:not(.last-child),
    .c-search-header__wrapper .manga-autocomplete.ui-autocomplete>li:not(.last-child) {
      border-bottom: none !important;
    }

    body.text-ui-light,
    #wpdcom,
    #wpdcom .wpd-comment-text {
      color: #f5f5f5 !important;
    }

    .site-header .c-header__top .manga-autocomplete.ui-autocomplete>li:hover,
    .c-search-header__wrapper .manga-autocomplete.ui-autocomplete>li:hover {
      background-color: rgb(20, 22, 28) !important;
      font-size: 15px !important;
      transition: font-size .2s !important;
      transition: all .2s ease-in-out;
    }

    .site-header .c-header__top .manga-autocomplete.ui-autocomplete>li:not(:hover),
    .c-search-header__wrapper .manga-autocomplete.ui-autocomplete>li:not(:hover) {
      font-size: 14px !important;
      transition: font-size .2s !important;
      transition: all .2s ease-in-out;
    }

    body.page .manga-tp-slider .related__container .related__item .related__thumb .related__thumb_item:not(:hover) {
      transform: scale(1.0);
      transition: all .2s;
    }

    body.page .manga-tp-slider .related__container .related__item .related__thumb .related__thumb_item:hover {
      transform: scale(1.05);
      transition: all .2s;
    }

    .site-header .main-navigation .search-navigation .menu-search .open-search-main-menu {
      width: 50px;
      height: 30px;
      font-size: 20px;
      line-height: 31px;
      margin-top: 7px;
    }

    .site-header .main-navigation .search-navigation .menu-search .open-search-main-menu {
      border-radius: 8px;
    }

    body.manga-page .profile-manga .tab-summary .manga-rate-view-comment .post-rating {
      backdrop-filter: blur(10px);
      padding: 0.5em;
      background: #00000038 !important;
      border-radius: 10px;
    }

    body.manga-page.text-ui-light .summary__content.show-more::after {
      background: -moz-linear-gradient(top, rgba(0, 0, 0, 0), #14161c) !important;
    }

    @media (max-width: 480px) {

      .manga-title-badges,
      .manga-title-badges.custom {
        line-height: 2em !important;
      }

      .tp-heroslider .slick-slide img {
        min-width: 300px !important;
      }

      body.reading-manga .entry-header .select-pagination .nav-links,
      body.reading-manga .c-select-bottom .select-pagination .nav-links {
        margin: 4px 30px !important;
      }

      .reading-manga .reading-content {
        padding: 0 0px;
      }
    }

    #hover-infor .infor_items {
      backdrop-filter: blur(20px) !important;
      box-shadow: rgba(41, 41, 41, 0.76) 0px 3px 4px 0px !important;
      background-color: none;
      border-radius: 1em !important;

    }

    body.text-ui-light #hover-infor {
      background-color: #00000091 !important;
      border-radius: 1em !important;
    }

    .manga-tp-slider .slick-slide img {
      aspect-ratio: 3/4.5;
      object-fit: cover;
    }

    .view {
      color: grey;
    }

    .listing-chapters_wrap .view {
      margin-left: 1rem;
    }

    .manga-slider.style-3 .slider__container {
      margin-bottom: 0px;
      padding: 0px;
    }

    .manga-slider .slider__container .slick-list .slick-track .slider__item .slider__content .slider__content_item .post-title h4 {
      font-size: 17px;
    }

    picture {
      padding-top: 0px !important;
    }

    .ranking .page-listing-item .page-item-detail .item-thumb::before {
      left: 75% !important;
      background: #2f353e !important;
      border-radius: 0em 0em 0.3em 0.3em;
    }

    .modal-footer {
      border: 0px solid white;
    }

    body.modal-open .modal .modal-content {
      border: 0px solid white;
    }

    body.modal-open .modal .modal-dialog,
    body.modal-open .modal .modal-content .modal-loading-screen {
      border-radius: 0.5em;
    }

    body.modal-open .modal .modal-content .modal-body .login label {
      color: white;
    }

    body.modal-open .modal .modal-content .modal-body .login .submit .wp-submit {
      background-color: #418da4;
    }

    .text-ui-light .main-navigation .main-menu ul.main-navbar>li.menu-item-login,
    .text-ui-light .main-navigation .main-menu ul.main-navbar>li.menu-item-register {
      display: none;
    }
  </style>
  <script type="application/ld+json">
						{
							"@context": "http://schema.org",
							"@type": "Article",
							"mainEntityOfPage": {
								"@type": "WebPage",
								"@id": "https://google.com/article"
							},
							"headline": "Solo Leveling",
							"image": {
								"@type": "ImageObject",
								"url": "https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic.jpg",
								"height": 391,
								"width": 696							},
							"datePublished": "2023-06-19 14:22:53",
							"dateModified": "2023-10-14 21:40:08",
							"author": {
								"@type": "Person",
								"name": "admin"
							},
							"publisher": {
								"@type": "Organization",
								"name": "Mangas Origines",
								"logo": {
									"@type": "ImageObject",
									"url": "https://mangas-origines.fr/wp-content/uploads/2023/06/logos_oritest.png"
								}
							},
							"description": "Depuis qu&#039;un portail connectant notre monde à un monde peuplé de monstres et de créatures en tout genre est apparu, des personnes &quot;ordinaires&quot; ont acquis la capac"
						}
					</script>
  <meta property="og:type" content="article">
  <meta property="og:image"
    content="https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-1200x630.jpg">
  <meta property="og:site_name" content="Mangas Origines">
  <meta property="fb:app_id" content="">
  <meta property="og:title" content="Solo Leveling">
  <meta property="og:url" content="https://mangas-origines.fr/oeuvre/95-solo-leveling/">
  <meta property="og:description"
    content="Depuis qu'un portail connectant notre monde à un monde peuplé de monstres et de créatures en tout genre est apparu, des personnes &quot;ordinaires&quot; ont acquis la capac">
  <meta name="twitter:card" content="summary">
  <meta name="twitter:site" content="@Mangas Origines">
  <meta name="twitter:title" content="Solo Leveling">
  <meta name="twitter:description"
    content="Depuis qu'un portail connectant notre monde à un monde peuplé de monstres et de créatures en tout genre est apparu, des personnes &quot;ordinaires&quot; ont acquis la capac">
  <meta name="twitter:url" content="https://mangas-origines.fr/oeuvre/95-solo-leveling/">
  <meta name="twitter:image"
    content="https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-1200x630.jpg">
  <meta name="description"
    content="Depuis qu'un portail connectant notre monde à un monde peuplé de monstres et de créatures en tout genre est apparu, des personnes &quot;ordinaires&quot; ont acquis la capac">
  <meta name="generator" content="Powered by Madara - A powerful manga, novel theme from Mangabooth.com">
  <noscript>
    <style>
      .perfmatters-lazy[data-src] {
        display: none !important;
      }
    </style>
  </noscript>
  <style>
    .perfmatters-lazy.pmloaded,
    .perfmatters-lazy.pmloaded>img,
    .perfmatters-lazy>img.pmloaded,
    .perfmatters-lazy[data-ll-status=entered] {
      animation: 500ms pmFadeIn
    }

    @keyframes pmFadeIn {
      0% {
        opacity: 0
      }

      100% {
        opacity: 1
      }
    }
  </style>
</head>

<body
  class="wp-manga-template-default single single-wp-manga postid-253 wp-embed-responsive wp-manga-page manga-page page header-style-1 sticky-enabled sticky-style-1 is-sidebar text-ui-light wpdiscuz_7.6.10 sticky__active">
  <div class="wrap">
    <div class="body-wrap">
      <header class="site-header">
        <div class="c-header__top">
          <ul class="search-main-menu">
            <li>
              <form id="blog-post-search" class="ajax manga-search-form" action="https://mangas-origines.fr/"
                method="get">
                <input type="text" placeholder="Rechercher..." name="s" value=""
                  class="manga-search-field ui-autocomplete-input" autocomplete="off">
                <input type="submit" value="Rechercher">
                <div class="loader-inner line-scale">
                  <div></div>
                  <div></div>
                  <div></div>
                  <div></div>
                  <div></div>
                </div>
                <input type="hidden" name="post_type" value="wp-manga">
                <ul id="ui-id-1" tabindex="0" class="ui-menu ui-widget ui-widget-content ui-autocomplete ui-front"
                  unselectable="on" style="display: none;"></ul>
              </form>
            </li>
          </ul>
          <div class="main-navigation style-1 ">
            <div class="container ">
              <div class="row">
                <div class="col-md-12">
                  <div class="main-navigation_wrap">
                    <div class="wrap_branding">
                      <a class="logo" href="https://mangas-origines.fr/" title="Mangas Origines">
                        <img width="591" height="143" class="img-responsive"
                          src="https://mangas-origines.fr/wp-content/uploads/2023/06/logos_oritest.png"
                          alt="Mangas Origines">
                      </a>
                    </div>
                    <div class="main-menu">
                      <ul class="nav navbar-nav main-navbar">
                        <li id="menu-item-1953"
                          class="menu-item-login menu-item menu-item-type-custom menu-item-object-custom menu-item-1953">
                          <a href="https://mangas-origines.fr/wp-login.php"><i class="fa fa-sign-in"
                              aria-hidden="true"></i> Connexion</a></li>
                        <li id="menu-item-1954"
                          class="menu-item-register menu-item menu-item-type-custom menu-item-object-custom menu-item-1954">
                          <a href="https://mangas-origines.fr/wp-login.php?action=register">S’inscrire</a></li>
                        <li id="menu-item-193"
                          class="menu-item menu-item-type-post_type menu-item-object-page menu-item-home menu-item-193">
                          <a href="https://mangas-origines.fr/">Accueil</a></li>
                        <li id="menu-item-194"
                          class="menu-item menu-item-type-post_type menu-item-object-page menu-item-194"><a
                            href="https://mangas-origines.fr/new/">Nouveautés</a></li>
                        <li id="menu-item-195"
                          class="menu-item menu-item-type-post_type menu-item-object-page menu-item-195"><a
                            href="https://mangas-origines.fr/catalogues/">Catalogue</a></li>
                        <li id="menu-item-196"
                          class="menu-item menu-item-type-post_type menu-item-object-page menu-item-196"><a
                            href="https://mangas-origines.fr/ranking/">Classement</a></li>
                      </ul>
                    </div>
                    <div class="search-navigation search-sidebar">
                      <div id="manga-search-2"
                        class="widget col-12 col-md-12   default  no-icon heading-style-1 manga-widget widget-manga-search">
                        <div class="widget__inner manga-widget widget-manga-search__inner c-widget-wrap">
                          <div class="widget-content">
                            <div class="search-navigation__wrap">
                              <script>
                                jQuery(document).ready(function ($) {
                                  if ($('.c-header__top .manga-search-form').length !== 0 && $('.c-header__top .manga-search-form.search-form').length !== 0) {

                                    $('form#blog-post-search').append('<input type="hidden" name="post_type" value="wp-manga">');

                                    $('form#blog-post-search').addClass("manga-search-form");

                                    $('form#blog-post-search input[name="s"]').addClass("manga-search-field");

                                    $('form.manga-search-form.ajax input.manga-search-field').each(function () {

                                      var searchIcon = $(this).parent().children('.ion-ios-search-strong');

                                      var append = $(this).parent();

                                      $(this).autocomplete({
                                        appendTo: append,
                                        source: function (request, resp) {
                                          $.ajax({
                                            url: manga.ajax_url,
                                            type: 'POST',
                                            dataType: 'json',
                                            data: {
                                              action: 'wp-manga-search-manga',
                                              title: request.term,
                                            },
                                            success: function (data) {
                                              resp($.map(data.data, function (item) {
                                                if (true == data.success) {
                                                  return {
                                                    label: item.title,
                                                    value: item.title,
                                                    url: item.url,
                                                    type: item.type
                                                  }
                                                } else {
                                                  return {
                                                    label: item.message,
                                                    value: item.message,
                                                    type: item.type,
                                                    click: false
                                                  }
                                                }
                                              }))
                                            }
                                          });
                                        },
                                        select: function (e, ui) {
                                          if (ui.item.url) {
                                            window.location.href = ui.item.url;
                                          } else {
                                            if (ui.item.click) {
                                              return true;
                                            } else {
                                              return false;
                                            }
                                          }
                                        },
                                        open: function (e, ui) {
                                          var acData = $(this).data('uiAutocomplete');
                                          acData.menu.element.addClass('manga-autocomplete').find('li div').each(function () {
                                            var $self = $(this),
                                              keyword = $.trim(acData.term).split(' ').join('|');
                                            $self.html($self.text().replace(new RegExp("(" + keyword + ")", "gi"), '<span class="manga-text-highlight">$1</span>'));
                                          });
                                        }
                                      }).autocomplete("instance")._renderItem = function (ul, item) {
                                        return $("<li class='search-item'>")
                                          .append("<div class='manga-type-" + item.type + "'>" + item.label + "</div>")
                                          .appendTo(ul);
                                      };
                                    });
                                  }
                                });
                              </script>
                              <ul class="main-menu-search nav-menu">
                                <li class="menu-search">
                                  <a href="javascript:;" class="open-search-main-menu"> <i
                                      class="icon ion-ios-search"></i>
                                    <i class="icon ion-android-close"></i> </a>
                                  <ul class="search-main-menu">
                                    <li>
                                      <form class="manga-search-form search-form ajax"
                                        action="https://mangas-origines.fr/" method="get">
                                        <input class="manga-search-field ui-autocomplete-input" type="text"
                                          placeholder="Search..." name="s" value="" autocomplete="off">
                                        <input type="hidden" name="post_type" value="wp-manga"> <i
                                          class="icon ion-ios-search"></i>
                                        <div class="loader-inner ball-clip-rotate-multiple">
                                          <div></div>
                                          <div></div>
                                        </div>
                                        <input type="submit" value="Search">
                                        <ul id="ui-id-2" tabindex="0"
                                          class="ui-menu ui-widget ui-widget-content ui-autocomplete ui-front"
                                          unselectable="on" style="display: none;"></ul>
                                      </form>
                                    </li>
                                  </ul>
                                </li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class="c-togle__menu">
                        <button type="button" class="menu_icon__open">
                          <span></span> <span></span> <span></span>
                        </button>
                        <span class="title">Menu</span>
                      </div>
                      <ul id="secondary-menu" class="">
                        <li id="menu-item-286"
                          class="menu-item menu-item-type-post_type menu-item-object-page menu-item-286"><a
                            href="https://mangas-origines.fr/parametres/"><i class="fa fa-bookmark"
                              aria-hidden="true"></i><span>Favoris</span></a></li>
                      </ul>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="mobile-menu menu-collapse off-canvas">
          <div class="close-nav">
            <button class="menu_icon__close">
              <span></span> <span></span>
            </button>
          </div>
          <nav class="off-menu">
            <ul id="menu-primary-menu-798" class="nav navbar-nav main-navbar">
              <li id="nav-menu-item-1953"
                class="main-menu-item menu-item-depth-0 menu-item-login menu-item menu-item-type-custom menu-item-object-custom">
                <a href="https://mangas-origines.fr/wp-login.php" class="menu-link  main-menu-link"><i
                    class="fa fa-sign-in" aria-hidden="true"></i> Connexion </a></li>
              <li id="nav-menu-item-1954"
                class="main-menu-item menu-item-depth-0 menu-item-register menu-item menu-item-type-custom menu-item-object-custom">
                <a href="https://mangas-origines.fr/wp-login.php?action=register"
                  class="menu-link  main-menu-link">S’inscrire </a></li>
              <li id="nav-menu-item-193"
                class="main-menu-item menu-item-depth-0 menu-item menu-item-type-post_type menu-item-object-page menu-item-home">
                <a href="https://mangas-origines.fr/" class="menu-link  main-menu-link">Accueil </a></li>
              <li id="nav-menu-item-194"
                class="main-menu-item menu-item-depth-0 menu-item menu-item-type-post_type menu-item-object-page"><a
                  href="https://mangas-origines.fr/new/" class="menu-link  main-menu-link">Nouveautés </a></li>
              <li id="nav-menu-item-195"
                class="main-menu-item menu-item-depth-0 menu-item menu-item-type-post_type menu-item-object-page"><a
                  href="https://mangas-origines.fr/catalogues/" class="menu-link  main-menu-link">Catalogue </a></li>
              <li id="nav-menu-item-196"
                class="main-menu-item menu-item-depth-0 menu-item menu-item-type-post_type menu-item-object-page"><a
                  href="https://mangas-origines.fr/ranking/" class="menu-link  main-menu-link">Classement </a></li>
            </ul>
          </nav>
          <div class="center"></div>
        </div>
      </header>
      <div class="site-content">
        <div
          class="post-253 wp-manga type-wp-manga status-publish has-post-thumbnail hentry wp-manga-tag-phenix-scans wp-manga-release-17 wp-manga-author-chugong wp-manga-artist-dubu wp-manga-genre-action wp-manga-genre-aventure wp-manga-genre-combat wp-manga-genre-comedie wp-manga-genre-drame wp-manga-genre-ecchi wp-manga-genre-manhwa">
          <div class="profile-manga summary-layout-1 perfmatters-lazy entered pmloaded"
            style="background-repeat: no-repeat; background-position: center top; background-image: url(&quot;https://mangas-origines.fr/wp-content/uploads/2023/06/background2.jpg&quot;);"
            data-bg="https://mangas-origines.fr/wp-content/uploads/2023/06/background2.jpg" data-ll-status="loaded">
            <div class="container">
              <div class="row">
                <div class="col-12 col-sm-12 col-md-12">
                  <div class="c-breadcrumb-wrapper">
                    <div class="c-breadcrumb">
                      <ol class="breadcrumb">
                        <li>
                          <a href="https://mangas-origines.fr/">
                            Accueil </a>
                        </li>
                        <li>
                          <a href="https://mangas-origines.fr/catalogues/">
                            Catalogue </a>
                        </li>
                        <li>
                          <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/">
                            Solo Leveling </a>
                        </li>
                      </ol>
                    </div>
                  </div>
                  <div class="tab-summary ">
                    <div class="summary_image">
                      <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/">
                        <picture class="img-responsive" style="">
                          <source type="image/webp"
                            data-srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-193x278.jpg.webp 193w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-209x300.jpg.webp 209w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-714x1024.jpg.webp 714w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-768x1102.jpg.webp 768w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-1070x1536.jpg.webp 1070w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-125x180.jpg.webp 125w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic.jpg.webp 1200w"
                            data-sizes="(max-width: 193px) 100vw, 193px" sizes="(max-width: 193px) 100vw, 193px"
                            srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-193x278.jpg.webp 193w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-209x300.jpg.webp 209w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-714x1024.jpg.webp 714w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-768x1102.jpg.webp 768w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-1070x1536.jpg.webp 1070w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-125x180.jpg.webp 125w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic.jpg.webp 1200w">
                          <img width="193" height="278"
                            src="https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-193x278.jpg"
                            alt="solo-leveling-vol-3-comic" class="perfmatters-lazy entered pmloaded"
                            data-src="https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-193x278.jpg"
                            data-srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-193x278.jpg 193w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-209x300.jpg 209w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-714x1024.jpg 714w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-768x1102.jpg 768w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-1070x1536.jpg 1070w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-125x180.jpg 125w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic.jpg 1200w"
                            data-sizes="(max-width: 193px) 100vw, 193px" data-ll-status="loaded"
                            sizes="(max-width: 193px) 100vw, 193px"
                            srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-193x278.jpg 193w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-209x300.jpg 209w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-714x1024.jpg 714w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-768x1102.jpg 768w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-1070x1536.jpg 1070w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-125x180.jpg 125w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic.jpg 1200w"><noscript><img
                              width="193" height="278"
                              src="https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-193x278.jpg"
                              srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-193x278.jpg 193w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-209x300.jpg 209w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-714x1024.jpg 714w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-768x1102.jpg 768w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-1070x1536.jpg 1070w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-125x180.jpg 125w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic.jpg 1200w"
                              sizes="(max-width: 193px) 100vw, 193px" alt="solo-leveling-vol-3-comic" /></noscript>
                        </picture>
                      </a>
                    </div>
                    <div class="summary_content_wrap">
                      <div class="summary_content">
                        <div class="post-content">
                          <div class="post-title">
                            <span class="manga-title-badges custom manhwa">MANHWA</span>
                            <h1>
                              Solo Leveling </h1>
                          </div>
                          <div class="manga-authors">
                            <a href="https://mangas-origines.fr/manga-auteurs/chugong/" rel="tag">Chugong</a> | <a
                              href="https://mangas-origines.fr/manga-artistes/dubu/" rel="tag">DUBU</a>
                          </div>
                          <div class="manga-info-row">
                            <div class="manga-rate-view-comment">
                              <div class="post-rating">
                                <div class="post-total-rating "><i
                                    class="ion-ios-star ratings_stars rating_current"></i><i
                                    class="ion-ios-star ratings_stars rating_current"></i><i
                                    class="ion-ios-star ratings_stars rating_current"></i><i
                                    class="ion-ios-star ratings_stars rating_current"></i><i
                                    class="ion-ios-star ratings_stars rating_current"></i><span
                                    class="score font-meta total_votes">4.9</span></div>
                                <div class="user-rating "><i class="ion-ios-star-outline ratings_stars"></i><i
                                    class="ion-ios-star-outline ratings_stars"></i><i
                                    class="ion-ios-star-outline ratings_stars"></i><i
                                    class="ion-ios-star-outline ratings_stars"></i><i
                                    class="ion-ios-star-outline ratings_stars"></i><span
                                    class="score font-meta total_votes">Your Rating</span></div><input type="hidden"
                                  class="rating-post-id" value="253">
                              </div>
                              <div class="item">
                                <span property="itemReviewed" typeof="Book"><span class="rate-title" property="name"
                                    title="Solo Leveling">Solo Leveling</span></span><i class="fa fa-thumbs-up"
                                  aria-hidden="true"></i> <span> <span><span property="ratingValue"
                                      id="averagerate">4.9</span><span property="bestRating" class="hidden">5</span>
                                  </span> </span> (<span property="ratingCount" id="countrate">48</span>)
                              </div>
                              <div class="item"><i class="fa fa-eye"></i> 69.8K</div>
                              <div class="item">
                                <span><i class="fa fa-comment"></i> 0 commentaires </span>
                              </div>
                            </div>
                            <div class="add-bookmark">
                              <div class="action_icon">
                                <script type="text/javascript"> var requireLogin2BookMark = true; </script><a href="#"
                                  class="wp-manga-action-button" data-action="bookmark" data-post="253" data-chapter=""
                                  data-page="1" title="Favoris"><i class="icon ion-ios-bookmark"></i></a>
                              </div>
                              <div class="action_detail"><span>707 Favoris</span></div>
                            </div>
                          </div>
                          <div class="loader-inner ball-pulse">
                            <div></div>
                            <div></div>
                            <div></div>
                          </div>
                          <div class="post-content_item">
                            <div class="summary-content vote-details" vocab="https://schema.org/"
                              typeof="AggregateRating">
                              <span property="itemReviewed" typeof="Book"><span class="rate-title" property="name"
                                  title="Solo Leveling">Solo Leveling</span></span><i class="fa fa-thumbs-up"
                                aria-hidden="true"></i> <span> <span><span property="ratingValue"
                                    id="averagerate">4.9</span><span property="bestRating" class="hidden">5</span>
                                </span> </span> (<span property="ratingCount" id="countrate">48</span>) <i
                                class="fa fa-eye"></i> 69.8K
                            </div>
                          </div>
                          <div class="post-content_item">
                            <div class="summary-content">
                              <div class="genres-content">
                                <a href="https://mangas-origines.fr/manga-genres/action/" rel="tag">Action</a> <a
                                  href="https://mangas-origines.fr/manga-genres/aventure/" rel="tag">Aventure</a> <a
                                  href="https://mangas-origines.fr/manga-genres/combat/" rel="tag">Combat</a> <a
                                  href="https://mangas-origines.fr/manga-genres/comedie/" rel="tag">Comédie</a> <a
                                  href="https://mangas-origines.fr/manga-genres/drame/" rel="tag">Drame</a> <a
                                  href="https://mangas-origines.fr/manga-genres/ecchi/" rel="tag">Ecchi</a> <a
                                  href="https://mangas-origines.fr/manga-genres/manhwa/" rel="tag">Manhwa</a>
                              </div>
                            </div>
                          </div>
                          <div class="post-content_item">
                            <div class="summary-heading">
                              <h5>
                                Team(s) </h5>
                            </div>
                            <div class="summary-content">
                              <div class="tags-content">
                                <a href="https://mangas-origines.fr/manga-team/phenix-scans/" rel="tag">Phénix scans</a>
                              </div>
                            </div>
                          </div>
                        </div>
                        <div id="init-links" class="nav-links">
                          <a href="#" id="btn-read-last" class="c-btn c-btn_style-1">
                            Commencer la lecture</a>
                          <a href="#" id="btn-read-first" class="c-btn c-btn_style-1">Dernier chapitre</a>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="c-page-content style-1">
            <div class="content-area">
              <div class="container">
                <div class="row ">
                  <div class="main-col  col-md-8 col-sm-8">

                    <div class="main-col-inner">
                      <div class="c-page">

                        <div class="c-page__content">
                          <div class="c-blog__heading style-2 font-heading">
                            <h2 class="h4">
                              <i class="icon ion-ios-star"></i>
                              Synopsis
                            </h2>
                          </div>
                          <div class="summary__content show-more">
                            <p>Depuis qu’un portail connectant notre monde à un monde peuplé de monstres et de créatures
                              en tout genre est apparu, des personnes «&nbsp;ordinaires&nbsp;» ont acquis la capacité de
                              chasser ces derniers. On les appelle les chasseurs. Vous pensez qu’ils sont tous balaises
                              ? Qu’ils sont des héros, des aventuriers comme on en voit dans les mangas ? Eh bien
                              malheureusement pas tous. Sung Jin-Woo est le plus faible des chasseurs de rang E,
                              autrement dit, le plus faible parmi les faibles. Il est donc surnommé par ses confrères
                              chasseurs «&nbsp;le faible&nbsp;». En tout cas il l’était, jusqu’à ce qu’il se retrouve
                              piégé dans un donjon et y acquière une capacité… étrange. Il peut désormais voir une
                              interface lui montrant des quêtes. Va-t-il réussir à devenir le plus puissant des
                              chasseurs ?</p>
                          </div>
                          <div class="c-content-readmore">
                            <span class="btn btn-link content-readmore less" style="display: inline-block;">
                              Voir plus </span>
                            <div class="description-summary">
                              <ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-7918463289472920"
                                data-ad-slot="1944585959" data-ad-format="auto"><iframe id="aswift_0"
                                  style="height: 1px !important; max-height: 1px !important; max-width: 1px !important; width: 1px !important;"><iframe
                                    id="google_ads_frame0"></iframe></iframe></ins>
                              <script>
                                (adsbygoogle = window.adsbygoogle || []).push({});
                              </script>
                            </div>
                          </div>
                          <div class="c-blog__heading style-2 font-heading">
                            <h2 class="h4">
                              <i class="icon ion-ios-star"></i>
                              Chapitres
                            </h2>
                            <a href="#" title="Change Order" class="btn-reverse-order"><i
                                class="icon ion-md-swap"></i></a>
                          </div>
                          <div class="page-content-listing single-page">
                            <div class="listing-chapters_wrap cols-1 show-more">
                              <ul class="main version-chap no-volumn active loaded" style="max-height: 100%;">
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-200/">
                                    Chapitre 200 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 7732</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-199/">
                                    Chapitre 199 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 3123</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-198/">
                                    Chapitre 198 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2722</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-197/">
                                    Chapitre 197 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2667</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-196/">
                                    Chapitre 196 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2622</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-195/">
                                    Chapitre 195 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2567</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-194/">
                                    Chapitre 194 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2493</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-193/">
                                    Chapitre 193 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2587</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-192/">
                                    Chapitre 192 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2938</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-191/">
                                    Chapitre 191 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2727</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-190/">
                                    Chapitre 190 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2881</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-189/">
                                    Chapitre 189 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2594</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-188/">
                                    Chapitre 188 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2762</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-187/">
                                    Chapitre 187 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2769</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-186/">
                                    Chapitre 186 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2615</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-185/">
                                    Chapitre 185 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2437</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-184/">
                                    Chapitre 184 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2538</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-183/">
                                    Chapitre 183 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2326</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-182/">
                                    Chapitre 182 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2486</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-181/">
                                    Chapitre 181 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2390</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-180/">
                                    Chapitre 180 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2849</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-179-5/">
                                    Chapitre 179.5 - Un Petit Spoiler </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2138</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-179/">
                                    Chapitre 179 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2316</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-178/">
                                    Chapitre 178 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 1894</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-177/">
                                    Chapitre 177 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 1919</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-176/">
                                    Chapitre 176 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 1904</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-175/">
                                    Chapitre 175 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2040</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-174/">
                                    Chapitre 174 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 1908</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-173/">
                                    Chapitre 173 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 1956</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-172/">
                                    Chapitre 172 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2101</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-171/">
                                    Chapitre 171 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2126</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-170/">
                                    Chapitre 170 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2257</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-169/">
                                    Chapitre 169 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2246</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-168/">
                                    Chapitre 168 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2559</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-167/">
                                    Chapitre 167 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2613</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-166/">
                                    Chapitre 166 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2431</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-165/">
                                    Chapitre 165 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2353</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-164/">
                                    Chapitre 164 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2360</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-163/">
                                    Chapitre 163 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2375</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-162/">
                                    Chapitre 162 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2263</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-161/">
                                    Chapitre 161 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2256</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-160/">
                                    Chapitre 160 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2367</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-159/">
                                    Chapitre 159 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2183</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-158/">
                                    Chapitre 158 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2140</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-157/">
                                    Chapitre 157 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2242</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-156/">
                                    Chapitre 156 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2299</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-155/">
                                    Chapitre 155 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2311</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-154/">
                                    Chapitre 154 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2217</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-153/">
                                    Chapitre 153 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2306</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-152/">
                                    Chapitre 152 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2549</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-151/">
                                    Chapitre 151 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2503</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-150/">
                                    Chapitre 150 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2558</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-149/">
                                    Chapitre 149 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2558</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-148/">
                                    Chapitre 148 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2634</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-147/">
                                    Chapitre 147 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2549</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-146/">
                                    Chapitre 146 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2475</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-145/">
                                    Chapitre 145 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2428</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-144/">
                                    Chapitre 144 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2417</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-143/">
                                    Chapitre 143 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2385</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-142/">
                                    Chapitre 142 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2413</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-141/">
                                    Chapitre 141 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2446</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-140/">
                                    Chapitre 140 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2586</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-139/">
                                    Chapitre 139 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2411</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-138/">
                                    Chapitre 138 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2418</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-137/">
                                    Chapitre 137 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2342</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-136/">
                                    Chapitre 136 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2382</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-135/">
                                    Chapitre 135 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2463</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-134/">
                                    Chapitre 134 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2429</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-133/">
                                    Chapitre 133 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2418</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-132/">
                                    Chapitre 132 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2579</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-131/">
                                    Chapitre 131 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2596</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-130/">
                                    Chapitre 130 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2467</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-129/">
                                    Chapitre 129 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2264</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-128/">
                                    Chapitre 128 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2340</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-127/">
                                    Chapitre 127 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2290</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-126/">
                                    Chapitre 126 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2355</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-125/">
                                    Chapitre 125 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2409</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-124/">
                                    Chapitre 124 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2331</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-123/">
                                    Chapitre 123 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2751</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-122/">
                                    Chapitre 122 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2696</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-121/">
                                    Chapitre 121 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2670</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-120/">
                                    Chapitre 120 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2556</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-119/">
                                    Chapitre 119 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2373</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-118/">
                                    Chapitre 118 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2365</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-117/">
                                    Chapitre 117 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2299</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-116/">
                                    Chapitre 116 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2541</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-115/">
                                    Chapitre 115 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2576</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-114/">
                                    Chapitre 114 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2429</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-113/">
                                    Chapitre 113 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2370</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-112/">
                                    Chapitre 112 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2561</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-111/">
                                    Chapitre 111 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2605</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-110/">
                                    Chapitre 110 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2570</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-109/">
                                    Chapitre 109 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2357</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-108/">
                                    Chapitre 108 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2566</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-107/">
                                    Chapitre 107 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2679</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-106/">
                                    Chapitre 106 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2636</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-105/">
                                    Chapitre 105 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2717</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-104/">
                                    Chapitre 104 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2622</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-103/">
                                    Chapitre 103 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2677</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-102/">
                                    Chapitre 102 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2644</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-101/">
                                    Chapitre 101 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2576</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-100/">
                                    Chapitre 100 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2574</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-99/">
                                    Chapitre 99 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2228</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-98/">
                                    Chapitre 98 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2235</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-97/">
                                    Chapitre 97 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2189</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-96/">
                                    Chapitre 96 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2234</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-95/">
                                    Chapitre 95 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2484</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-94/">
                                    Chapitre 94 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2558</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-93/">
                                    Chapitre 93 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2463</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-92/">
                                    Chapitre 92 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2430</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-91/">
                                    Chapitre 91 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2366</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-90-2-va/">
                                    Chapitre 90.2 (VA) </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2316</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-90/">
                                    Chapitre 90 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2455</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-89/">
                                    Chapitre 89 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2297</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-88/">
                                    Chapitre 88 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2293</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-87/">
                                    Chapitre 87 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2275</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-86/">
                                    Chapitre 86 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2287</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-85/">
                                    Chapitre 85 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2268</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-84/">
                                    Chapitre 84 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2212</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-83/">
                                    Chapitre 83 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2233</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-82/">
                                    Chapitre 82 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2246</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-81/">
                                    Chapitre 81 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2324</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-80/">
                                    Chapitre 80 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2502</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-79/">
                                    Chapitre 79 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2452</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-78/">
                                    Chapitre 78 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2427</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-77/">
                                    Chapitre 77 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2363</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-76/">
                                    Chapitre 76 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2519</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-75/">
                                    Chapitre 75 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2435</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-74/">
                                    Chapitre 74 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2360</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-73/">
                                    Chapitre 73 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2377</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-72/">
                                    Chapitre 72 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2315</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-71/">
                                    Chapitre 71 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2305</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-70/">
                                    Chapitre 70 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2374</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-69/">
                                    Chapitre 69 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2353</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-68/">
                                    Chapitre 68 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2395</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-67/">
                                    Chapitre 67 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2329</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-66/">
                                    Chapitre 66 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2358</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-65/">
                                    Chapitre 65 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2475</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-64/">
                                    Chapitre 64 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2431</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-63/">
                                    Chapitre 63 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2417</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-62/">
                                    Chapitre 62 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2306</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-61/">
                                    Chapitre 61 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2331</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-60/">
                                    Chapitre 60 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2377</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-59/">
                                    Chapitre 59 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2223</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-58/">
                                    Chapitre 58 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2303</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-57/">
                                    Chapitre 57 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2400</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-56/">
                                    Chapitre 56 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2487</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-55/">
                                    Chapitre 55 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2339</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-54/">
                                    Chapitre 54 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2246</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-53/">
                                    Chapitre 53 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2241</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-52/">
                                    Chapitre 52 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2261</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-51/">
                                    Chapitre 51 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2310</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-50/">
                                    Chapitre 50 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2335</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-49/">
                                    Chapitre 49 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2201</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-48/">
                                    Chapitre 48 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2303</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-47/">
                                    Chapitre 47 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2284</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-46/">
                                    Chapitre 46 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2266</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-45/">
                                    Chapitre 45 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2305</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-44/">
                                    Chapitre 44 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2123</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-43/">
                                    Chapitre 43 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2118</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-42/">
                                    Chapitre 42 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2092</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-41/">
                                    Chapitre 41 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2072</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-40/">
                                    Chapitre 40 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2212</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-39/">
                                    Chapitre 39 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2065</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-38/">
                                    Chapitre 38 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2261</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-37/">
                                    Chapitre 37 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2246</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-36/">
                                    Chapitre 36 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2238</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-35/">
                                    Chapitre 35 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2402</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-34/">
                                    Chapitre 34 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2384</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-33/">
                                    Chapitre 33 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2164</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-32/">
                                    Chapitre 32 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2164</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-31/">
                                    Chapitre 31 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2104</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-30/">
                                    Chapitre 30 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2240</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-29/">
                                    Chapitre 29 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2139</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-28/">
                                    Chapitre 28 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2263</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-27/">
                                    Chapitre 27 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2362</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-26/">
                                    Chapitre 26 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2389</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-25/">
                                    Chapitre 25 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2533</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-24/">
                                    Chapitre 24 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2260</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-23/">
                                    Chapitre 23 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2178</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-22/">
                                    Chapitre 22 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2210</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-21/">
                                    Chapitre 21 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2241</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-20/">
                                    Chapitre 20 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2335</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-19/">
                                    Chapitre 19 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2240</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-18/">
                                    Chapitre 18 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2344</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-17/">
                                    Chapitre 17 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2235</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-16/">
                                    Chapitre 16 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2188</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-15/">
                                    Chapitre 15 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2251</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-14/">
                                    Chapitre 14 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2209</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-13/">
                                    Chapitre 13 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2289</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-12/">
                                    Chapitre 12 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2275</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-11/">
                                    Chapitre 11 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2292</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-10/">
                                    Chapitre 10 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2294</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-9/">
                                    Chapitre 9 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2017</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-8/">
                                    Chapitre 8 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2013</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-7/">
                                    Chapitre 7 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2026</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-6/">
                                    Chapitre 6 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2067</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-5/">
                                    Chapitre 5 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2172</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-4/">
                                    Chapitre 4 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2133</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-3/">
                                    Chapitre 3 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2185</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-2/">
                                    Chapitre 2 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 2281</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-1/">
                                    Chapitre 1 </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 3344</span>
                                </li>
                                <li class="wp-manga-chapter    ">
                                  <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-0/">
                                    Chapitre 0 - Prologue </a>
                                  <span class="chapter-release-date">
                                    <i>21/06/2023</i> </span>
                                  <span class="view"><i class="fa fa-eye"></i> 5089</span>
                                </li>
                              </ul>
                              <div class="c-chapter-readmore">

                              </div>
                            </div>
                          </div>
                        </div>

                      </div>

                      <div id="manga-discussion" class="manga-discussion wrapper">
                        <div class="wpdiscuz_top_clearing"></div>
                        <div id="comments" class="comments-area">
                          <div id="respond" style="width: 0;height: 0;clear: both;margin: 0;padding: 0;"></div>
                          <div id="wpdcom" class="wpdiscuz_unauth wpd-dark wpd-layout-1 wpd-comments-open">
                            <div class="wc_social_plugin_wrapper">
                            </div>
                            <div class="wpd-form-wrap">
                              <div class="wpd-form-head">
                                <div class="wpd-sbs-toggle">
                                  <i class="far fa-envelope"></i> <span class="wpd-sbs-title">S’abonner</span>
                                  <i class="fas fa-caret-down"></i>
                                </div>
                                <div class="wpd-auth">
                                  <div class="wpd-login">
                                    <a href="https://mangas-origines.fr/"><i class="fas fa-sign-in-alt"></i>
                                      Connexion</a>
                                  </div>
                                </div>
                              </div>
                              <div class="wpdiscuz-subscribe-bar wpdiscuz-hidden">
                                <form
                                  action="https://mangas-origines.fr/wp-admin/admin-ajax.php?action=wpdAddSubscription"
                                  method="post" id="wpdiscuz-subscribe-form">
                                  <div class="wpdiscuz-subscribe-form-intro">Notification pour </div>
                                  <div class="wpdiscuz-subscribe-form-option" style="width:40%;">
                                    <select class="wpdiscuz_select" name="wpdiscuzSubscriptionType">
                                      <option value="post">nouveaux commentaires de suivi</option>
                                      <option value="all_comment">nouvelles réponses à mes commentaires</option>
                                    </select>
                                  </div>
                                  <div class="wpdiscuz-item wpdiscuz-subscribe-form-email">
                                    <input class="email" type="email" name="wpdiscuzSubscriptionEmail"
                                      required="required" value="" placeholder="E-mail">
                                  </div>
                                  <div class="wpdiscuz-subscribe-form-button">
                                    <input id="wpdiscuz_subscription_button" class="wpd-prim-button wpd_not_clicked"
                                      type="submit" value="›" name="wpdiscuz_subscription_button">
                                  </div>
                                  <input type="hidden" id="wpdiscuz_subscribe_form_nonce"
                                    name="wpdiscuz_subscribe_form_nonce" value="f06ac86277"><input type="hidden"
                                    name="_wp_http_referer" value="/oeuvre/95-solo-leveling/">
                                </form>
                              </div>
                              <div class="wpd-form wpd-form-wrapper wpd-main-form-wrapper"
                                id="wpd-main-form-wrapper-0_0">
                              </div>
                              <div id="wpdiscuz_hidden_secondary_form" style="display: none;">
                                <div class="wpd-form wpd-form-wrapper wpd-secondary-form-wrapper"
                                  id="wpd-secondary-form-wrapper-wpdiscuzuniqueid" style="display: none;">
                                  <div class="wpd-secondary-forms-social-content"></div>
                                  <div class="clearfix"></div>
                                </div>
                              </div>
                              <div class="wpd-login-to-comment">Veuillez vous connecter pour commenter</div>
                            </div>
                            <div id="wpd-threads" class="wpd-thread-wrapper">
                              <div class="wpd-thread-head">
                                <div class="wpd-thread-info " data-comments-count="4">
                                  <span class="wpdtc" title="4">4</span> Commentaires
                                </div>
                                <div class="wpd-space"></div>
                                <div class="wpd-thread-filter">
                                  <div class="wpd-filter wpdf-reacted wpd_not_clicked"
                                    wpd-tooltip="Commentaire avec le plus de réactions">
                                    <i class="fas fa-bolt"></i>
                                  </div>
                                  <div class="wpd-filter wpdf-hottest wpd_not_clicked"
                                    wpd-tooltip="Fil de commentaire le plus chaud">
                                    <i class="fas fa-fire"></i>
                                  </div>
                                  <div class="wpd-filter wpdf-sorting">
                                    <span
                                      class="wpdiscuz-sort-button wpdiscuz-date-sort-desc wpdiscuz-sort-button-active"
                                      data-sorting="newest">Le plus récent</span>
                                    <i class="fas fa-sort-down"></i>
                                    <div class="wpdiscuz-sort-buttons" style="display: none;">
                                      <span class="wpdiscuz-sort-button wpdiscuz-date-sort-asc" data-sorting="oldest">Le
                                        plus ancien</span>
                                      <span class="wpdiscuz-sort-button wpdiscuz-vote-sort-up" data-sorting="by_vote">Le
                                        plus populaire</span>
                                    </div>
                                  </div>
                                </div>
                              </div>
                              <div class="wpd-comment-info-bar">
                                <div class="wpd-current-view"><i class="fas fa-quote-left"></i> Commentaires en ligne
                                </div>
                                <div class="wpd-filter-view-all">Afficher tous les commentaires</div>
                              </div>
                              <div class="wpd-thread-list">
                                <div class="wpdiscuz-comment-pagination">
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                        <div id="wpdiscuz-loading-bar" class="wpdiscuz-loading-bar-unauth"></div>
                        <div id="wpdiscuz-comment-message" class="wpdiscuz-comment-message-unauth"></div>
                      </div>

                      <div class="row c-row related-manga">
                        <div class="col-12 col-sm-12 col-md-12 col-lg-12">
                          <div class="c-blog__heading style-2 font-heading">
                            <h4>
                              <i class="icon ion-ios-star"></i>
                              Vous aimerez sûrement
                            </h4>
                          </div>
                        </div>
                        <div class="col-6 col-sm-6 col-md-2">
                          <div class="related-reading-wrap related-style-2">
                            <div class="related-reading-img widget-thumbnail c-image-hover">
                              <a title="Hajimete no Gal" href="https://mangas-origines.fr/oeuvre/hajimete-no-gal/">
                                <img width="175" height="238"
                                  src="https://mangas-origines.fr/wp-content/uploads/2023/06/71lsC1FjzmL-175x238.webp"
                                  class="img-responsive perfmatters-lazy entered pmloaded" style="" alt="71lsC1FjzmL"
                                  data-src="https://mangas-origines.fr/wp-content/uploads/2023/06/71lsC1FjzmL-175x238.webp"
                                  data-srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/71lsC1FjzmL-175x238.webp 175w, https://mangas-origines.fr/wp-content/uploads/2023/06/71lsC1FjzmL-110x150.webp 110w, https://mangas-origines.fr/wp-content/uploads/2023/06/71lsC1FjzmL-350x476.webp 350w"
                                  data-sizes="(max-width: 175px) 100vw, 175px" data-ll-status="loaded"
                                  sizes="(max-width: 175px) 100vw, 175px"
                                  srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/71lsC1FjzmL-175x238.webp 175w, https://mangas-origines.fr/wp-content/uploads/2023/06/71lsC1FjzmL-110x150.webp 110w, https://mangas-origines.fr/wp-content/uploads/2023/06/71lsC1FjzmL-350x476.webp 350w"><noscript><img
                                    width="175" height="238"
                                    src="https://mangas-origines.fr/wp-content/uploads/2023/06/71lsC1FjzmL-175x238.webp"
                                    srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/71lsC1FjzmL-175x238.webp 175w, https://mangas-origines.fr/wp-content/uploads/2023/06/71lsC1FjzmL-110x150.webp 110w, https://mangas-origines.fr/wp-content/uploads/2023/06/71lsC1FjzmL-350x476.webp 350w"
                                    sizes="(max-width: 175px) 100vw, 175px" class="img-responsive" style=""
                                    alt="71lsC1FjzmL" /></noscript> </a>
                            </div>
                            <div class="related-reading-content">
                              <h5 class="widget-title">
                                <a href="https://mangas-origines.fr/oeuvre/hajimete-no-gal/" title="Hajimete no Gal">
                                  Hajimete no Gal </a>
                              </h5>
                            </div>
                            <div class="post-on font-meta">
                              <span>
                                30/06/2023 </span>
                            </div>
                          </div>
                        </div>
                        <div class="col-6 col-sm-6 col-md-2">
                          <div class="related-reading-wrap related-style-2">
                            <div class="related-reading-img widget-thumbnail c-image-hover">
                              <a title="Prisonnier Riku" href="https://mangas-origines.fr/oeuvre/prisonnier-riku/">
                                <picture class="img-responsive" style="">
                                  <source type="image/webp"
                                    data-srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/prisonnier-riku-1-175x238.jpg.webp 175w, https://mangas-origines.fr/wp-content/uploads/2023/06/prisonnier-riku-1-110x150.jpg.webp 110w"
                                    data-sizes="(max-width: 175px) 100vw, 175px" sizes="(max-width: 175px) 100vw, 175px"
                                    srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/prisonnier-riku-1-175x238.jpg.webp 175w, https://mangas-origines.fr/wp-content/uploads/2023/06/prisonnier-riku-1-110x150.jpg.webp 110w">
                                  <img width="175" height="238"
                                    src="https://mangas-origines.fr/wp-content/uploads/2023/06/prisonnier-riku-1-175x238.jpg"
                                    alt="prisonnier-riku-1" class="perfmatters-lazy entered pmloaded"
                                    data-src="https://mangas-origines.fr/wp-content/uploads/2023/06/prisonnier-riku-1-175x238.jpg"
                                    data-srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/prisonnier-riku-1-175x238.jpg 175w, https://mangas-origines.fr/wp-content/uploads/2023/06/prisonnier-riku-1-110x150.jpg 110w"
                                    data-sizes="(max-width: 175px) 100vw, 175px" data-ll-status="loaded"
                                    sizes="(max-width: 175px) 100vw, 175px"
                                    srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/prisonnier-riku-1-175x238.jpg 175w, https://mangas-origines.fr/wp-content/uploads/2023/06/prisonnier-riku-1-110x150.jpg 110w"><noscript><img
                                      width="175" height="238"
                                      src="https://mangas-origines.fr/wp-content/uploads/2023/06/prisonnier-riku-1-175x238.jpg"
                                      srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/prisonnier-riku-1-175x238.jpg 175w, https://mangas-origines.fr/wp-content/uploads/2023/06/prisonnier-riku-1-110x150.jpg 110w"
                                      sizes="(max-width: 175px) 100vw, 175px" alt="prisonnier-riku-1" /></noscript>
                                </picture>
                              </a>
                            </div>
                            <div class="related-reading-content">
                              <h5 class="widget-title">
                                <a href="https://mangas-origines.fr/oeuvre/prisonnier-riku/" title="Prisonnier Riku">
                                  Prisonnier Riku </a>
                              </h5>
                            </div>
                            <div class="post-on font-meta">
                              <span>
                                29/06/2023 </span>
                            </div>
                          </div>
                        </div>
                        <div class="col-6 col-sm-6 col-md-2">
                          <div class="related-reading-wrap related-style-2">
                            <div class="related-reading-img widget-thumbnail c-image-hover">
                              <a title="Re:Life Player" href="https://mangas-origines.fr/oeuvre/relife-player/">
                                <picture class="img-responsive" style="">
                                  <source type="image/webp"
                                    data-srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/relife-175x238.png.webp 175w, https://mangas-origines.fr/wp-content/uploads/2023/06/relife-110x150.png.webp 110w, https://mangas-origines.fr/wp-content/uploads/2023/06/relife-350x476.png.webp 350w"
                                    data-sizes="(max-width: 175px) 100vw, 175px" sizes="(max-width: 175px) 100vw, 175px"
                                    srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/relife-175x238.png.webp 175w, https://mangas-origines.fr/wp-content/uploads/2023/06/relife-110x150.png.webp 110w, https://mangas-origines.fr/wp-content/uploads/2023/06/relife-350x476.png.webp 350w">
                                  <img width="175" height="238"
                                    src="https://mangas-origines.fr/wp-content/uploads/2023/06/relife-175x238.png"
                                    alt="relife" class="perfmatters-lazy entered pmloaded"
                                    data-src="https://mangas-origines.fr/wp-content/uploads/2023/06/relife-175x238.png"
                                    data-srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/relife-175x238.png 175w, https://mangas-origines.fr/wp-content/uploads/2023/06/relife-110x150.png 110w, https://mangas-origines.fr/wp-content/uploads/2023/06/relife-350x476.png 350w"
                                    data-sizes="(max-width: 175px) 100vw, 175px" data-ll-status="loaded"
                                    sizes="(max-width: 175px) 100vw, 175px"
                                    srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/relife-175x238.png 175w, https://mangas-origines.fr/wp-content/uploads/2023/06/relife-110x150.png 110w, https://mangas-origines.fr/wp-content/uploads/2023/06/relife-350x476.png 350w"><noscript><img
                                      width="175" height="238"
                                      src="https://mangas-origines.fr/wp-content/uploads/2023/06/relife-175x238.png"
                                      srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/relife-175x238.png 175w, https://mangas-origines.fr/wp-content/uploads/2023/06/relife-110x150.png 110w, https://mangas-origines.fr/wp-content/uploads/2023/06/relife-350x476.png 350w"
                                      sizes="(max-width: 175px) 100vw, 175px" alt="relife" /></noscript>
                                </picture>
                              </a>
                            </div>
                            <div class="related-reading-content">
                              <h5 class="widget-title">
                                <a href="https://mangas-origines.fr/oeuvre/relife-player/" title="Re:Life Player">
                                  Re:Life Player </a>
                              </h5>
                            </div>
                            <div class="post-on font-meta">
                              <span>
                                18/07/2023 </span>
                            </div>
                          </div>
                        </div>
                        <div class="col-6 col-sm-6 col-md-2">
                          <div class="related-reading-wrap related-style-2">
                            <div class="related-reading-img widget-thumbnail c-image-hover">
                              <a title="Une servante de rêve"
                                href="https://mangas-origines.fr/oeuvre/une-servante-de-reve/">
                                <picture class="img-responsive" style="">
                                  <source type="image/webp"
                                    data-srcset="https://mangas-origines.fr/wp-content/uploads/2023/07/Une-servante-de-reve-webtoon-visual-175x238.jpg.webp 175w, https://mangas-origines.fr/wp-content/uploads/2023/07/Une-servante-de-reve-webtoon-visual-110x150.jpg.webp 110w, https://mangas-origines.fr/wp-content/uploads/2023/07/Une-servante-de-reve-webtoon-visual-350x476.jpg.webp 350w"
                                    data-sizes="(max-width: 175px) 100vw, 175px" sizes="(max-width: 175px) 100vw, 175px"
                                    srcset="https://mangas-origines.fr/wp-content/uploads/2023/07/Une-servante-de-reve-webtoon-visual-175x238.jpg.webp 175w, https://mangas-origines.fr/wp-content/uploads/2023/07/Une-servante-de-reve-webtoon-visual-110x150.jpg.webp 110w, https://mangas-origines.fr/wp-content/uploads/2023/07/Une-servante-de-reve-webtoon-visual-350x476.jpg.webp 350w">
                                  <img width="175" height="238"
                                    src="https://mangas-origines.fr/wp-content/uploads/2023/07/Une-servante-de-reve-webtoon-visual-175x238.jpg"
                                    alt="Une-servante-de-reve-webtoon-visual" class="perfmatters-lazy entered pmloaded"
                                    data-src="https://mangas-origines.fr/wp-content/uploads/2023/07/Une-servante-de-reve-webtoon-visual-175x238.jpg"
                                    data-srcset="https://mangas-origines.fr/wp-content/uploads/2023/07/Une-servante-de-reve-webtoon-visual-175x238.jpg 175w, https://mangas-origines.fr/wp-content/uploads/2023/07/Une-servante-de-reve-webtoon-visual-110x150.jpg 110w, https://mangas-origines.fr/wp-content/uploads/2023/07/Une-servante-de-reve-webtoon-visual-350x476.jpg 350w"
                                    data-sizes="(max-width: 175px) 100vw, 175px" data-ll-status="loaded"
                                    sizes="(max-width: 175px) 100vw, 175px"
                                    srcset="https://mangas-origines.fr/wp-content/uploads/2023/07/Une-servante-de-reve-webtoon-visual-175x238.jpg 175w, https://mangas-origines.fr/wp-content/uploads/2023/07/Une-servante-de-reve-webtoon-visual-110x150.jpg 110w, https://mangas-origines.fr/wp-content/uploads/2023/07/Une-servante-de-reve-webtoon-visual-350x476.jpg 350w"><noscript><img
                                      width="175" height="238"
                                      src="https://mangas-origines.fr/wp-content/uploads/2023/07/Une-servante-de-reve-webtoon-visual-175x238.jpg"
                                      srcset="https://mangas-origines.fr/wp-content/uploads/2023/07/Une-servante-de-reve-webtoon-visual-175x238.jpg 175w, https://mangas-origines.fr/wp-content/uploads/2023/07/Une-servante-de-reve-webtoon-visual-110x150.jpg 110w, https://mangas-origines.fr/wp-content/uploads/2023/07/Une-servante-de-reve-webtoon-visual-350x476.jpg 350w"
                                      sizes="(max-width: 175px) 100vw, 175px"
                                      alt="Une-servante-de-reve-webtoon-visual" /></noscript>
                                </picture>
                              </a>
                            </div>
                            <div class="related-reading-content">
                              <h5 class="widget-title">
                                <a href="https://mangas-origines.fr/oeuvre/une-servante-de-reve/"
                                  title="Une servante de rêve">
                                  Une servante de rêve </a>
                              </h5>
                            </div>
                            <div class="post-on font-meta">
                              <span>
                                04/07/2023 </span>
                            </div>
                          </div>
                        </div>
                        <div class="col-6 col-sm-6 col-md-2">
                          <div class="related-reading-wrap related-style-2">
                            <div class="related-reading-img widget-thumbnail c-image-hover">
                              <a title="Sono Ossan, Isekai de Nishuume Play wo Mankitsu Chuu"
                                href="https://mangas-origines.fr/oeuvre/sono-ossan-isekai-de-nishuume-play-wo-mankitsu-chuu/">
                                <picture class="img-responsive" style="">
                                  <source type="image/webp"
                                    data-srcset="https://mangas-origines.fr/wp-content/uploads/2023/07/NEOBK-2324138-175x238.jpg.webp 175w, https://mangas-origines.fr/wp-content/uploads/2023/07/NEOBK-2324138-110x150.jpg.webp 110w"
                                    data-sizes="(max-width: 175px) 100vw, 175px" sizes="(max-width: 175px) 100vw, 175px"
                                    srcset="https://mangas-origines.fr/wp-content/uploads/2023/07/NEOBK-2324138-175x238.jpg.webp 175w, https://mangas-origines.fr/wp-content/uploads/2023/07/NEOBK-2324138-110x150.jpg.webp 110w">
                                  <img width="175" height="238"
                                    src="https://mangas-origines.fr/wp-content/uploads/2023/07/NEOBK-2324138-175x238.jpg"
                                    alt="NEOBK-2324138" class="perfmatters-lazy entered pmloaded"
                                    data-src="https://mangas-origines.fr/wp-content/uploads/2023/07/NEOBK-2324138-175x238.jpg"
                                    data-srcset="https://mangas-origines.fr/wp-content/uploads/2023/07/NEOBK-2324138-175x238.jpg 175w, https://mangas-origines.fr/wp-content/uploads/2023/07/NEOBK-2324138-110x150.jpg 110w"
                                    data-sizes="(max-width: 175px) 100vw, 175px" data-ll-status="loaded"
                                    sizes="(max-width: 175px) 100vw, 175px"
                                    srcset="https://mangas-origines.fr/wp-content/uploads/2023/07/NEOBK-2324138-175x238.jpg 175w, https://mangas-origines.fr/wp-content/uploads/2023/07/NEOBK-2324138-110x150.jpg 110w"><noscript><img
                                      width="175" height="238"
                                      src="https://mangas-origines.fr/wp-content/uploads/2023/07/NEOBK-2324138-175x238.jpg"
                                      srcset="https://mangas-origines.fr/wp-content/uploads/2023/07/NEOBK-2324138-175x238.jpg 175w, https://mangas-origines.fr/wp-content/uploads/2023/07/NEOBK-2324138-110x150.jpg 110w"
                                      sizes="(max-width: 175px) 100vw, 175px" alt="NEOBK-2324138" /></noscript>
                                </picture>
                              </a>
                            </div>
                            <div class="related-reading-content">
                              <h5 class="widget-title">
                                <a href="https://mangas-origines.fr/oeuvre/sono-ossan-isekai-de-nishuume-play-wo-mankitsu-chuu/"
                                  title="Sono Ossan, Isekai de Nishuume Play wo Mankitsu Chuu">
                                  Sono Ossan, Isekai de Nishuume Play wo Mankitsu Chuu </a>
                              </h5>
                            </div>
                            <div class="post-on font-meta">
                              <span>
                                02/07/2023 </span>
                            </div>
                          </div>
                        </div>
                        <div class="col-6 col-sm-6 col-md-2">
                          <div class="related-reading-wrap related-style-2">
                            <div class="related-reading-img widget-thumbnail c-image-hover">
                              <a title="Maou no Ore ga Dorei Elf wo Yome ni Shitanda ga, Dou Medereba Ii?"
                                href="https://mangas-origines.fr/oeuvre/maou-no-ore-ga-dorei-elf-wo-yome-ni-shitanda-ga-dou-medereba-ii/">
                                <picture class="img-responsive" style="">
                                  <source type="image/webp"
                                    data-srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/Maou_no_Ore_ga_Dorei_Elf_wo_Yome_ni_Shitanda_ga_Dou_Medereba_Ii-_V2_cover-175x238.jpg.webp 175w, https://mangas-origines.fr/wp-content/uploads/2023/06/Maou_no_Ore_ga_Dorei_Elf_wo_Yome_ni_Shitanda_ga_Dou_Medereba_Ii-_V2_cover-110x150.jpg.webp 110w, https://mangas-origines.fr/wp-content/uploads/2023/06/Maou_no_Ore_ga_Dorei_Elf_wo_Yome_ni_Shitanda_ga_Dou_Medereba_Ii-_V2_cover-350x476.jpg.webp 350w"
                                    data-sizes="(max-width: 175px) 100vw, 175px" sizes="(max-width: 175px) 100vw, 175px"
                                    srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/Maou_no_Ore_ga_Dorei_Elf_wo_Yome_ni_Shitanda_ga_Dou_Medereba_Ii-_V2_cover-175x238.jpg.webp 175w, https://mangas-origines.fr/wp-content/uploads/2023/06/Maou_no_Ore_ga_Dorei_Elf_wo_Yome_ni_Shitanda_ga_Dou_Medereba_Ii-_V2_cover-110x150.jpg.webp 110w, https://mangas-origines.fr/wp-content/uploads/2023/06/Maou_no_Ore_ga_Dorei_Elf_wo_Yome_ni_Shitanda_ga_Dou_Medereba_Ii-_V2_cover-350x476.jpg.webp 350w">
                                  <img width="175" height="238"
                                    src="https://mangas-origines.fr/wp-content/uploads/2023/06/Maou_no_Ore_ga_Dorei_Elf_wo_Yome_ni_Shitanda_ga_Dou_Medereba_Ii-_V2_cover-175x238.jpg"
                                    alt="Maou_no_Ore_ga_Dorei_Elf_wo_Yome_ni_Shitanda_ga,_Dou_Medereba_Ii _V2_cover"
                                    class="perfmatters-lazy entered pmloaded"
                                    data-src="https://mangas-origines.fr/wp-content/uploads/2023/06/Maou_no_Ore_ga_Dorei_Elf_wo_Yome_ni_Shitanda_ga_Dou_Medereba_Ii-_V2_cover-175x238.jpg"
                                    data-srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/Maou_no_Ore_ga_Dorei_Elf_wo_Yome_ni_Shitanda_ga_Dou_Medereba_Ii-_V2_cover-175x238.jpg 175w, https://mangas-origines.fr/wp-content/uploads/2023/06/Maou_no_Ore_ga_Dorei_Elf_wo_Yome_ni_Shitanda_ga_Dou_Medereba_Ii-_V2_cover-110x150.jpg 110w, https://mangas-origines.fr/wp-content/uploads/2023/06/Maou_no_Ore_ga_Dorei_Elf_wo_Yome_ni_Shitanda_ga_Dou_Medereba_Ii-_V2_cover-350x476.jpg 350w"
                                    data-sizes="(max-width: 175px) 100vw, 175px" data-ll-status="loaded"
                                    sizes="(max-width: 175px) 100vw, 175px"
                                    srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/Maou_no_Ore_ga_Dorei_Elf_wo_Yome_ni_Shitanda_ga_Dou_Medereba_Ii-_V2_cover-175x238.jpg 175w, https://mangas-origines.fr/wp-content/uploads/2023/06/Maou_no_Ore_ga_Dorei_Elf_wo_Yome_ni_Shitanda_ga_Dou_Medereba_Ii-_V2_cover-110x150.jpg 110w, https://mangas-origines.fr/wp-content/uploads/2023/06/Maou_no_Ore_ga_Dorei_Elf_wo_Yome_ni_Shitanda_ga_Dou_Medereba_Ii-_V2_cover-350x476.jpg 350w"><noscript><img
                                      width="175" height="238"
                                      src="https://mangas-origines.fr/wp-content/uploads/2023/06/Maou_no_Ore_ga_Dorei_Elf_wo_Yome_ni_Shitanda_ga_Dou_Medereba_Ii-_V2_cover-175x238.jpg"
                                      srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/Maou_no_Ore_ga_Dorei_Elf_wo_Yome_ni_Shitanda_ga_Dou_Medereba_Ii-_V2_cover-175x238.jpg 175w, https://mangas-origines.fr/wp-content/uploads/2023/06/Maou_no_Ore_ga_Dorei_Elf_wo_Yome_ni_Shitanda_ga_Dou_Medereba_Ii-_V2_cover-110x150.jpg 110w, https://mangas-origines.fr/wp-content/uploads/2023/06/Maou_no_Ore_ga_Dorei_Elf_wo_Yome_ni_Shitanda_ga_Dou_Medereba_Ii-_V2_cover-350x476.jpg 350w"
                                      sizes="(max-width: 175px) 100vw, 175px"
                                      alt="Maou_no_Ore_ga_Dorei_Elf_wo_Yome_ni_Shitanda_ga,_Dou_Medereba_Ii _V2_cover" /></noscript>
                                </picture>
                              </a>
                            </div>
                            <div class="related-reading-content">
                              <h5 class="widget-title">
                                <a href="https://mangas-origines.fr/oeuvre/maou-no-ore-ga-dorei-elf-wo-yome-ni-shitanda-ga-dou-medereba-ii/"
                                  title="Maou no Ore ga Dorei Elf wo Yome ni Shitanda ga, Dou Medereba Ii?">
                                  Maou no Ore ga Dorei Elf wo Yome ni Shitanda ga, Dou Medereba Ii? </a>
                              </h5>
                            </div>
                            <div class="post-on font-meta">
                              <span>
                                28/06/2023 </span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="sidebar-col col-md-4 col-sm-4">
                    <div id="main-sidebar" class="main-sidebar" role="complementary">
                      <div class="row">
                        <div id="manga-recent-2"
                          class="widget col-12 col-md-12   default  no-icon heading-style-2 c-popular manga-widget widget-manga-recent">
                          <div class="widget__inner c-popular manga-widget widget-manga-recent__inner c-widget-wrap">
                            <div class="c-widget-content style-1 ">
                              <div class="c-blog__heading style-2 font-heading">
                                <h4>Oeuvres populaires</h4>
                              </div>
                              <div class="widget-content">
                                <div class="popular-item-wrap">
                                  <div class="popular-img widget-thumbnail c-image-hover">
                                    <a title="Solo Leveling" href="https://mangas-origines.fr/oeuvre/95-solo-leveling/">
                                      <picture class="img-responsive" style="">
                                        <source type="image/webp"
                                          data-srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-75x106.jpg.webp 75w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-300x420.jpg.webp 300w"
                                          data-sizes="(max-width: 75px) 100vw, 75px"
                                          sizes="(max-width: 75px) 100vw, 75px"
                                          srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-75x106.jpg.webp 75w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-300x420.jpg.webp 300w">
                                        <img width="75" height="106"
                                          src="https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-75x106.jpg"
                                          alt="solo-leveling-vol-3-comic" class="perfmatters-lazy entered pmloaded"
                                          data-src="https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-75x106.jpg"
                                          data-srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-75x106.jpg 75w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-300x420.jpg 300w"
                                          data-sizes="(max-width: 75px) 100vw, 75px" data-ll-status="loaded"
                                          sizes="(max-width: 75px) 100vw, 75px"
                                          srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-75x106.jpg 75w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-300x420.jpg 300w"><noscript><img
                                            width="75" height="106"
                                            src="https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-75x106.jpg"
                                            srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-75x106.jpg 75w, https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-300x420.jpg 300w"
                                            sizes="(max-width: 75px) 100vw, 75px"
                                            alt="solo-leveling-vol-3-comic" /></noscript>
                                      </picture>
                                    </a>
                                  </div>
                                  <div class="popular-content">
                                    <h5 class="widget-title">
                                      <a title="Solo Leveling"
                                        href="https://mangas-origines.fr/oeuvre/95-solo-leveling/">Solo Leveling</a>
                                    </h5>
                                    <div class="list-chapter">
                                      <div class="chapter-item ">
                                        <span class="chapter font-meta">
                                          <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-200/"
                                            class="btn-link"> Chapitre 200 </a>
                                        </span>
                                        <span class="post-on font-meta">
                                          21/06/2023 </span>
                                      </div>
                                      <div class="chapter-item ">
                                        <span class="chapter font-meta">
                                          <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-199/"
                                            class="btn-link"> Chapitre 199 </a>
                                        </span>
                                        <span class="post-on font-meta">
                                          21/06/2023 </span>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                                <div class="popular-item-wrap">
                                  <div class="popular-img widget-thumbnail c-image-hover">
                                    <a title="The Beginning After the End"
                                      href="https://mangas-origines.fr/oeuvre/95-the-beginning-after-the-end/">
                                      <picture class="img-responsive" style="">
                                        <source type="image/webp"
                                          data-srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/webtoon-the-beginning-after-the-end-visuel-2-75x106.jpeg.webp 75w, https://mangas-origines.fr/wp-content/uploads/2023/06/webtoon-the-beginning-after-the-end-visuel-2-300x420.jpeg.webp 300w"
                                          data-sizes="(max-width: 75px) 100vw, 75px"
                                          sizes="(max-width: 75px) 100vw, 75px"
                                          srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/webtoon-the-beginning-after-the-end-visuel-2-75x106.jpeg.webp 75w, https://mangas-origines.fr/wp-content/uploads/2023/06/webtoon-the-beginning-after-the-end-visuel-2-300x420.jpeg.webp 300w">
                                        <img width="75" height="106"
                                          src="https://mangas-origines.fr/wp-content/uploads/2023/06/webtoon-the-beginning-after-the-end-visuel-2-75x106.jpeg"
                                          alt="webtoon-the-beginning-after-the-end-visuel-2"
                                          class="perfmatters-lazy entered pmloaded"
                                          data-src="https://mangas-origines.fr/wp-content/uploads/2023/06/webtoon-the-beginning-after-the-end-visuel-2-75x106.jpeg"
                                          data-srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/webtoon-the-beginning-after-the-end-visuel-2-75x106.jpeg 75w, https://mangas-origines.fr/wp-content/uploads/2023/06/webtoon-the-beginning-after-the-end-visuel-2-300x420.jpeg 300w"
                                          data-sizes="(max-width: 75px) 100vw, 75px" data-ll-status="loaded"
                                          sizes="(max-width: 75px) 100vw, 75px"
                                          srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/webtoon-the-beginning-after-the-end-visuel-2-75x106.jpeg 75w, https://mangas-origines.fr/wp-content/uploads/2023/06/webtoon-the-beginning-after-the-end-visuel-2-300x420.jpeg 300w"><noscript><img
                                            width="75" height="106"
                                            src="https://mangas-origines.fr/wp-content/uploads/2023/06/webtoon-the-beginning-after-the-end-visuel-2-75x106.jpeg"
                                            srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/webtoon-the-beginning-after-the-end-visuel-2-75x106.jpeg 75w, https://mangas-origines.fr/wp-content/uploads/2023/06/webtoon-the-beginning-after-the-end-visuel-2-300x420.jpeg 300w"
                                            sizes="(max-width: 75px) 100vw, 75px"
                                            alt="webtoon-the-beginning-after-the-end-visuel-2" /></noscript>
                                      </picture>
                                    </a>
                                  </div>
                                  <div class="popular-content">
                                    <h5 class="widget-title">
                                      <a title="The Beginning After the End"
                                        href="https://mangas-origines.fr/oeuvre/95-the-beginning-after-the-end/">The
                                        Beginning After the End</a>
                                    </h5>
                                    <div class="list-chapter">
                                      <div class="chapter-item ">
                                        <span class="chapter font-meta">
                                          <a href="https://mangas-origines.fr/oeuvre/95-the-beginning-after-the-end/chapitre-175-8/"
                                            class="btn-link"> Chapitre 175.8 </a>
                                        </span>
                                        <span class="post-on font-meta">
                                          04/07/2023 </span>
                                      </div>
                                      <div class="chapter-item ">
                                        <span class="chapter font-meta">
                                          <a href="https://mangas-origines.fr/oeuvre/95-the-beginning-after-the-end/chapitre-175-7/"
                                            class="btn-link"> Chapitre 175.7 </a>
                                        </span>
                                        <span class="post-on font-meta">
                                          22/06/2023 </span>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                                <div class="popular-item-wrap">
                                  <div class="popular-img widget-thumbnail c-image-hover">
                                    <a title="A Returner’s Magic Should Be Special"
                                      href="https://mangas-origines.fr/oeuvre/90-a-returners-magic-should-be-special/">
                                      <picture class="img-responsive" style="">
                                        <source type="image/webp"
                                          data-srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/a-returners-magic-should-be-special-30886-75x106.jpg.webp 75w, https://mangas-origines.fr/wp-content/uploads/2023/06/a-returners-magic-should-be-special-30886-214x300.jpg.webp 214w, https://mangas-origines.fr/wp-content/uploads/2023/06/a-returners-magic-should-be-special-30886-300x420.jpg.webp 300w, https://mangas-origines.fr/wp-content/uploads/2023/06/a-returners-magic-should-be-special-30886.jpg.webp 350w"
                                          data-sizes="(max-width: 75px) 100vw, 75px"
                                          sizes="(max-width: 75px) 100vw, 75px"
                                          srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/a-returners-magic-should-be-special-30886-75x106.jpg.webp 75w, https://mangas-origines.fr/wp-content/uploads/2023/06/a-returners-magic-should-be-special-30886-214x300.jpg.webp 214w, https://mangas-origines.fr/wp-content/uploads/2023/06/a-returners-magic-should-be-special-30886-300x420.jpg.webp 300w, https://mangas-origines.fr/wp-content/uploads/2023/06/a-returners-magic-should-be-special-30886.jpg.webp 350w">
                                        <img width="75" height="106"
                                          src="https://mangas-origines.fr/wp-content/uploads/2023/06/a-returners-magic-should-be-special-30886-75x106.jpg"
                                          alt="a-returners-magic-should-be-special-30886"
                                          class="perfmatters-lazy entered pmloaded"
                                          data-src="https://mangas-origines.fr/wp-content/uploads/2023/06/a-returners-magic-should-be-special-30886-75x106.jpg"
                                          data-srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/a-returners-magic-should-be-special-30886-75x106.jpg 75w, https://mangas-origines.fr/wp-content/uploads/2023/06/a-returners-magic-should-be-special-30886-214x300.jpg 214w, https://mangas-origines.fr/wp-content/uploads/2023/06/a-returners-magic-should-be-special-30886-300x420.jpg 300w, https://mangas-origines.fr/wp-content/uploads/2023/06/a-returners-magic-should-be-special-30886.jpg 350w"
                                          data-sizes="(max-width: 75px) 100vw, 75px" data-ll-status="loaded"
                                          sizes="(max-width: 75px) 100vw, 75px"
                                          srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/a-returners-magic-should-be-special-30886-75x106.jpg 75w, https://mangas-origines.fr/wp-content/uploads/2023/06/a-returners-magic-should-be-special-30886-214x300.jpg 214w, https://mangas-origines.fr/wp-content/uploads/2023/06/a-returners-magic-should-be-special-30886-300x420.jpg 300w, https://mangas-origines.fr/wp-content/uploads/2023/06/a-returners-magic-should-be-special-30886.jpg 350w"><noscript><img
                                            width="75" height="106"
                                            src="https://mangas-origines.fr/wp-content/uploads/2023/06/a-returners-magic-should-be-special-30886-75x106.jpg"
                                            srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/a-returners-magic-should-be-special-30886-75x106.jpg 75w, https://mangas-origines.fr/wp-content/uploads/2023/06/a-returners-magic-should-be-special-30886-214x300.jpg 214w, https://mangas-origines.fr/wp-content/uploads/2023/06/a-returners-magic-should-be-special-30886-300x420.jpg 300w, https://mangas-origines.fr/wp-content/uploads/2023/06/a-returners-magic-should-be-special-30886.jpg 350w"
                                            sizes="(max-width: 75px) 100vw, 75px"
                                            alt="a-returners-magic-should-be-special-30886" /></noscript>
                                      </picture>
                                    </a>
                                  </div>
                                  <div class="popular-content">
                                    <h5 class="widget-title">
                                      <a title="A Returner’s Magic Should Be Special"
                                        href="https://mangas-origines.fr/oeuvre/90-a-returners-magic-should-be-special/">A
                                        Returner’s Magic Should Be Special</a>
                                    </h5>
                                    <div class="list-chapter">
                                      <div class="chapter-item ">
                                        <span class="chapter font-meta">
                                          <a href="https://mangas-origines.fr/oeuvre/90-a-returners-magic-should-be-special/chapitre-225/"
                                            class="btn-link"> Chapitre 225 </a>
                                        </span>
                                        <span class="post-on font-meta">
                                          18/07/2023 </span>
                                      </div>
                                      <div class="chapter-item ">
                                        <span class="chapter font-meta">
                                          <a href="https://mangas-origines.fr/oeuvre/90-a-returners-magic-should-be-special/chapitre-224/"
                                            class="btn-link"> Chapitre 224 </a>
                                        </span>
                                        <span class="post-on font-meta">
                                          12/07/2023 </span>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                                <div class="popular-item-wrap">
                                  <div class="popular-img widget-thumbnail c-image-hover">
                                    <a title="Wind Breaker" href="https://mangas-origines.fr/oeuvre/wind-breaker/">
                                      <picture class="img-responsive" style="">
                                        <source type="image/webp"
                                          data-srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/7963f2d0b3b2dda235a383c2d9453803-75x106.jpg.webp 75w, https://mangas-origines.fr/wp-content/uploads/2023/06/7963f2d0b3b2dda235a383c2d9453803-300x420.jpg.webp 300w"
                                          data-sizes="(max-width: 75px) 100vw, 75px"
                                          sizes="(max-width: 75px) 100vw, 75px"
                                          srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/7963f2d0b3b2dda235a383c2d9453803-75x106.jpg.webp 75w, https://mangas-origines.fr/wp-content/uploads/2023/06/7963f2d0b3b2dda235a383c2d9453803-300x420.jpg.webp 300w">
                                        <img width="75" height="106"
                                          src="https://mangas-origines.fr/wp-content/uploads/2023/06/7963f2d0b3b2dda235a383c2d9453803-75x106.jpg"
                                          alt="7963f2d0b3b2dda235a383c2d9453803"
                                          class="perfmatters-lazy entered pmloaded"
                                          data-src="https://mangas-origines.fr/wp-content/uploads/2023/06/7963f2d0b3b2dda235a383c2d9453803-75x106.jpg"
                                          data-srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/7963f2d0b3b2dda235a383c2d9453803-75x106.jpg 75w, https://mangas-origines.fr/wp-content/uploads/2023/06/7963f2d0b3b2dda235a383c2d9453803-300x420.jpg 300w"
                                          data-sizes="(max-width: 75px) 100vw, 75px" data-ll-status="loaded"
                                          sizes="(max-width: 75px) 100vw, 75px"
                                          srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/7963f2d0b3b2dda235a383c2d9453803-75x106.jpg 75w, https://mangas-origines.fr/wp-content/uploads/2023/06/7963f2d0b3b2dda235a383c2d9453803-300x420.jpg 300w"><noscript><img
                                            width="75" height="106"
                                            src="https://mangas-origines.fr/wp-content/uploads/2023/06/7963f2d0b3b2dda235a383c2d9453803-75x106.jpg"
                                            srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/7963f2d0b3b2dda235a383c2d9453803-75x106.jpg 75w, https://mangas-origines.fr/wp-content/uploads/2023/06/7963f2d0b3b2dda235a383c2d9453803-300x420.jpg 300w"
                                            sizes="(max-width: 75px) 100vw, 75px"
                                            alt="7963f2d0b3b2dda235a383c2d9453803" /></noscript>
                                      </picture>
                                    </a>
                                  </div>
                                  <div class="popular-content">
                                    <h5 class="widget-title">
                                      <a title="Wind Breaker"
                                        href="https://mangas-origines.fr/oeuvre/wind-breaker/">Wind Breaker</a>
                                    </h5>
                                    <div class="list-chapter">
                                      <div class="chapter-item ">
                                        <span class="chapter font-meta">
                                          <a href="https://mangas-origines.fr/oeuvre/wind-breaker/chapitre-435/"
                                            class="btn-link"> Chapitre 435 </a>
                                        </span>
                                        <span class="post-on font-meta">
                                          16/07/2023 </span>
                                      </div>
                                      <div class="chapter-item ">
                                        <span class="chapter font-meta">
                                          <a href="https://mangas-origines.fr/oeuvre/wind-breaker/chapitre-434/"
                                            class="btn-link"> Chapitre 434 </a>
                                        </span>
                                        <span class="post-on font-meta">
                                          16/07/2023 </span>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                                <div class="popular-item-wrap">
                                  <div class="popular-img widget-thumbnail c-image-hover">
                                    <a title="The Player That Can’t Level Up"
                                      href="https://mangas-origines.fr/oeuvre/the-player-that-cant-level-up/">
                                      <img width="75" height="106"
                                        src="https://mangas-origines.fr/wp-content/uploads/2023/06/the_player_who_can_t_level_up_18064-75x106.webp"
                                        class="img-responsive perfmatters-lazy entered pmloaded" style=""
                                        alt="the_player_who_can_t_level_up_18064"
                                        data-src="https://mangas-origines.fr/wp-content/uploads/2023/06/the_player_who_can_t_level_up_18064-75x106.webp"
                                        data-srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/the_player_who_can_t_level_up_18064-75x106.webp 75w, https://mangas-origines.fr/wp-content/uploads/2023/06/the_player_who_can_t_level_up_18064-300x420.webp 300w, https://mangas-origines.fr/wp-content/uploads/2023/06/the_player_who_can_t_level_up_18064.webp 698w"
                                        data-sizes="(max-width: 75px) 100vw, 75px" data-ll-status="loaded"
                                        sizes="(max-width: 75px) 100vw, 75px"
                                        srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/the_player_who_can_t_level_up_18064-75x106.webp 75w, https://mangas-origines.fr/wp-content/uploads/2023/06/the_player_who_can_t_level_up_18064-300x420.webp 300w, https://mangas-origines.fr/wp-content/uploads/2023/06/the_player_who_can_t_level_up_18064.webp 698w"><noscript><img
                                          width="75" height="106"
                                          src="https://mangas-origines.fr/wp-content/uploads/2023/06/the_player_who_can_t_level_up_18064-75x106.webp"
                                          srcset="https://mangas-origines.fr/wp-content/uploads/2023/06/the_player_who_can_t_level_up_18064-75x106.webp 75w, https://mangas-origines.fr/wp-content/uploads/2023/06/the_player_who_can_t_level_up_18064-300x420.webp 300w, https://mangas-origines.fr/wp-content/uploads/2023/06/the_player_who_can_t_level_up_18064.webp 698w"
                                          sizes="(max-width: 75px) 100vw, 75px" class="img-responsive" style=""
                                          alt="the_player_who_can_t_level_up_18064" /></noscript> </a>
                                  </div>
                                  <div class="popular-content">
                                    <h5 class="widget-title">
                                      <a title="The Player That Can’t Level Up"
                                        href="https://mangas-origines.fr/oeuvre/the-player-that-cant-level-up/">The
                                        Player That Can’t Level Up</a>
                                    </h5>
                                    <div class="list-chapter">
                                      <div class="chapter-item ">
                                        <span class="chapter font-meta">
                                          <a href="https://mangas-origines.fr/oeuvre/the-player-that-cant-level-up/chapitre-105/"
                                            class="btn-link"> Chapitre 105 </a>
                                        </span>
                                        <span class="post-on font-meta">
                                          20/07/2023 </span>
                                      </div>
                                      <div class="chapter-item ">
                                        <span class="chapter font-meta">
                                          <a href="https://mangas-origines.fr/oeuvre/the-player-that-cant-level-up/chapitre-104/"
                                            class="btn-link"> Chapitre 104 </a>
                                        </span>
                                        <span class="post-on font-meta">
                                          20/07/2023 </span>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                      <style type="text/css">
                        #manga-recent-2 .vol.font-meta {
                          display: none
                        }

                        #manga-recent-2.widget.c-popular .popular-item-wrap .popular-content .chapter-item .vol+.post-on {
                          display: inline
                        }
                      </style>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <footer class="site-footer">
        <div class="c-footer-sidebar">
          <div class="container">
            <div class="row c-row">
              <div id="custom_html-5"
                class="widget_text widget col-12 col-md-12   default  no-icon heading-style-1 widget_custom_html">
                <div class="widget_text widget__inner widget_custom_html__inner c-widget-wrap">
                  <div class="widget_text widget-content">
                    <div class="textwidget custom-html-widget">
                      <div style="text-align: center;">
                        <p>
                          © 2023 Mangas Origines Inc., tous droits réservés. Tous les comics sur ce site ne sont que des
                          aperçus des comics originaux, il peut y avoir de nombreuses erreurs de langue, de noms de
                          personnages et de scénarios. Pour la version originale, nous vous recommandons fortement de
                          vous procurer le webcomics/mangas s'il est disponible dans votre pays.
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="bottom-footer">
          <div class="container">
            <div class="row">
              <div class="col-md-12">
                <div class="copyright">
                  <p> </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </footer>
      <div id="hover-infor" style="display: none;"></div>
    </div>
  </div>

  <div class="wp-manga-section">
    <input type="hidden" name="bookmarking" value="0">
    <div class="modal fade" id="form-login" tabindex="-1" role="dialog">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">×</span></button>
          </div>
          <div class="modal-body">
            <div id="login" class="login">
              <h3>
                <a href="https://mangas-origines.fr/" title="Mangas Origines" tabindex="-1">Connexion</a>
              </h3>
              <p class="message login"></p>
              <meta name="robots" content="max-image-preview:large">
              <link rel="dns-prefetch" href="//www.googletagmanager.com">
              <link rel="dns-prefetch" href="//challenges.cloudflare.com">
              <link rel="dns-prefetch" href="//pagead2.googlesyndication.com">
              <script type="text/javascript" data-cfasync="false"
                src="https://challenges.cloudflare.com/turnstile/v0/api.js?render=explicit" id="cfturnstile-js" defer=""
                data-wp-strategy="defer"></script>
              <link rel="stylesheet" id="cfturnstile-css-css"
                href="https://mangas-origines.fr/wp-content/plugins/simple-cloudflare-turnstile/css/cfturnstile.css?ver=1.2"
                type="text/css" media="all">
              <meta name="generator" content="Site Kit by Google 1.111.0">
              <style media="screen" id="loginpress-style-wp-5-3">
                .login form .input,
                .login input[type=text],
                .login form input[type=checkbox] {
                  border-radius: 0;
                }

                input[type=checkbox]:checked:before {
                  content: url('data:image/svg+xml;utf8,<svg%20xmlns%3D%27http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%27%20viewBox%3D%270%200%2020%2020%27><path%20d%3D%27M14.83%204.89l1.34.94-5.81%208.38H9.02L5.78%209.67l1.34-1.25%202.57%202.4z%27%20fill%3D%27%231e8cbe%27%2F><%2Fsvg>');
                  margin: -0.25rem 0 0 -0.275rem !important;
                }

                body .language-switcher {
                  margin-top: 10px;
                  clear: both;
                  z-index: 1;
                  position: absolute;
                  top: 100%;
                }

                body #login {
                  position: relative;
                }

                .wp-core-ui #login .button-primary {
                  margin-left: 0;
                }

                .admin-email__actions-primary .button:first-child {
                  font: 400 15px "Roboto", sans-serif;
                  color: #fff;
                  height: auto;
                  line-height: 20px !important;
                  padding: 13px;
                  padding-top: 13px;
                  padding-bottom: 13px;
                  width: 100%;
                  text-align: center;
                  background-color: #008ec2;
                  border: 0;
                  margin-bottom: 8px;
                  border-radius: 5px;
                }

                .admin-email__actions-primary .button:first-child:hover {
                  background-color: #008ec2;
                }

                .login form.admin-email-confirm-form {
                  max-width: 360px;
                  margin: 0 auto;
                }

                .login-action-confirm_admin_email #backtoblog a {
                  color: #008ec2 !important;
                }
              </style>
              <style media="screen" id="loginpress-style">
                /*************************************************************
     * Plugin:      LoginPress - Customizing the WordPress Login.*
     * Description: LoginPress is the best Login Page Customizer *
     *              in WordPress which allows you to completely  *
     *              change the layout of login, register and     *
     *              forgot password forms.                       *
     * Author:      WPBrigade                                    *
     * visit:       https://wordpress.org/plugins/loginpress/    *
     *************************************************************/
                body.login {
                  background-image: url(https://mangas-origines.fr/wp-content/plugins/loginpress/img/bg.jpg);
                  /*background-color: #ddd5c3;*/
                  background-repeat: no-repeat;
                  background-position: center;
                  background-size: cover;
                  background-attachment: fixed;
                  display: table;
                  min-height: 100vh;
                  width: 100%;
                  padding: 0;
                }

                .header-wrapper {
                  /* display: table-row; */
                }

                #login {
                  margin-top: 2%;
                  background: #fff;
                  position: relative;
                  -webkit-border-radius: 5px;
                  -moz-border-radius: 5px;
                  -ms-border-radius: 5px;
                  -o-border-radius: 5px;
                  border-radius: 5px;
                  -webkit-box-shadow: 0 0 15px rgba(0, 0, 0, .8);
                  box-shadow: 0 0 15px rgba(0, 0, 0, .8);
                  max-width: 350px;
                  padding: 26px 26px 6px 26px;
                  width: 100%;
                }

                .login form {
                  margin-top: 20px;
                  margin-left: 0;
                  padding: 0 24px 12px;
                  background: #fff;
                  -webkit-box-shadow: none;
                  box-shadow: none;
                }

                .login form .input,
                .login input[type="text"] {
                  height: 48px;
                  background: #fff;
                  -webkit-border-radius: 5px;
                  -moz-border-radius: 5px;
                  -ms-border-radius: 5px;
                  border-radius: 5px;
                  margin-bottom: 18px;
                  font: normal 15px "Roboto", sans-serif;
                  color: #7f7f7f;
                  border-color: #bdbdbd;
                  padding-left: 27px;
                  font-weight: normal;
                }

                #jetpack_protect_answer {
                  padding-left: 0;
                  text-align: center;
                }

                .login input[type="submit"] {
                  background: #fff;
                  color: #fff;
                  margin: 7px 0 7px;
                  height: 46px;
                  -webkit-border-radius: 5px;
                  -moz-border-radius: 5px;
                  -ms-border-radius: 5px;
                  border-radius: 5px;
                  font: normal 15px "Roboto", sans-serif;
                  color: #fff;
                  width: 100%;
                }

                .wp-core-ui.login .button-group.button-large .button,
                .wp-core-ui.login .button.button-large,
                .wp-core-ui.login .button-primary {
                  height: 46px;
                  line-height: 0;
                  background: #008ec2;
                }

                .wp-core-ui.login .two-factor-email-resend .button {
                  color: #444;
                }

                .login #nav {
                  text-align: center;
                }

                #login_error {
                  display: block;
                }

                /*.message { display:none; }*/
                /*.custom-message {
    	-moz-border-radius:3px 3px 3px 3px;
    	border-style:solid;
    	border-width:1px;
    	margin:0 0 16px 8px;
    	padding:12px;
    }*/

                #backtoblog {
                  text-align: center;
                }

                .header-cell {
                  /* display: table-cell; */
                  height: 100px;
                }

                .loginHeaderMenu {
                  text-align: center;
                  position: relative;
                  z-index: 10;
                  list-style: none;
                  background: #333;

                }

                .loginHeaderMenu>ul>li {
                  display: inline-block;
                  vertical-align: top;
                  position: relative;
                  list-style: none;
                }

                .loginHeaderMenu>ul>li>a {
                  color: #fff;
                  text-transform: uppercase;
                  text-decoration: none;
                  font-size: 16px;
                  padding: 17px 20px;
                  display: inline-block;
                }

                .loginHeaderMenu>ul>li:hover>a {
                  background: #4CAF50;
                  color: #fff;
                }

                .loginHeaderMenu>ul>li>ul {
                  position: absolute;
                  width: 200px;
                  padding: 0;
                  top: 100%;
                  left: 0;
                  background: #fff;
                  list-style: none;
                  text-align: left;
                  border-radius: 0 0 5px 5px;
                  -webkit-box-shadow: 0px 5px 10px -1px rgba(0, 0, 0, 0.31);
                  -moz-box-shadow: 0px 5px 10px -1px rgba(0, 0, 0, 0.31);
                  box-shadow: 0px 5px 10px -1px rgba(0, 0, 0, 0.31);
                  overflow: hidden;
                  opacity: 0;
                  visibility: hidden;
                }

                .loginHeaderMenu>ul>li:hover>ul {
                  opacity: 1;
                  visibility: visible;
                }

                .loginHeaderMenu>ul>li>ul>li {
                  font-size: 15px;
                  color: #333;
                }

                .loginHeaderMenu>ul>li>ul>li>a {
                  color: #333;
                  padding: 10px;
                  display: block;
                  text-decoration: none;
                }

                .loginHeaderMenu>ul>li>ul>li>a:hover {
                  background: rgba(51, 51, 51, 0.35);
                  color: #fff;
                }

                .login-wrapper {
                  display: table-row;
                }

                .login-cell {
                  display: table-cell;
                  vertical-align: middle;
                }

                .clear {
                  display: none;
                }

                .footer-wrapper {
                  /* display: table-footer-group; */
                  position: -webkit-sticky;
                  position: sticky;
                  top: 100vh;
                }

                .footer-cont {

                  right: 0;
                  bottom: 0;
                  left: 0;
                  text-align: center;
                  /* display: table-cell; */
                  vertical-align: bottom;
                  /* height: 100px; */
                }

                .loginFooterMenu {
                  text-align: center;
                  background-color: rgba(0, 0, 0, .7);
                }

                .loginFooterMenu>ul {
                  display: inline-flex;
                }

                .loginFooterMenu>ul>li {
                  display: inline-block;
                  padding: 18px;
                }

                /* style two factor plugin */
                .login .backup-methods-wrap a,
                #login form p:not([class]) {
                  color: #555d66;
                }

                .login .backup-methods-wrap a:hover {
                  color: #00a0d2;
                }

                /*End style two factor plugin */
                .loginFooterMenu>ul>li:focus {
                  outline: none;
                  border: 0;
                }

                .loginFooterMenu>ul>li>a:focus {
                  outline: none;
                  border: 0;
                }

                .loginFooterMenu>ul>li>a {
                  color: #fff;
                  text-transform: uppercase;
                  text-decoration: none;
                  font-size: 14px;
                }

                .loginHead {
                  width: 100%;
                  text-align: center;
                  margin-top: 0;
                  margin-bottom: 20px;
                  padding: 13px 0 0;
                  position: relative;
                  margin: 0;
                }

                .loginHead p a {
                  text-decoration: none;
                }

                .loginFooter {
                  display: table-footer-group;
                }

                .loginFooter p a {
                  display: inline-block;
                  margin: 0 5px;
                }

                .loginInner {
                  margin: 0 auto;
                  text-align: center;
                  margin-top: 20px;
                  margin-bottom: 0;
                  padding: 13px 0;
                  position: relative;
                }

                .copyRight {
                  text-align: center;
                  padding: 12px;
                  background-color: #efefef;
                }

                .loginpress-show-love {
                  color: #222;
                }

                .loginpress-show-love a {
                  color: #263466;
                }

                .loginpress-show-love a:hover {
                  color: #4d5d95;
                }

                @media screen and (max-width: 767px) {
                  #login {
                    width: 300px;
                  }

                  .login form {
                    padding-right: 0;
                    padding-left: 0;
                  }

                  .login .loginpress-show-love {
                    position: static;
                    text-align: center;
                    float: none;
                    background: rgba(255, 255, 255, .5);
                    margin-top: 11px;
                    padding-bottom: 0;
                    padding: 3px;
                  }
                }
              </style>
              <style type="text/css">
                * {
                  box-sizing: border-box;
                }

                .footer-cont {
                  height: 0 !important;
                }

                .login form input[type=checkbox]:focus {
                  box-shadow: none;
                  outline: none;
                }

                .login form .forgetmenot {
                  float: none;
                }

                .login form .forgetmenot label {
                  display: inline-block;
                  margin: 0;
                }

                #login::after {}

                #login {

                  background-color: #14161c;
                }

                html[dir="rtl"] .login form .input,
                html[dir="rtl"] .login input[type="text"] {
                  margin-right: 0;
                }

                body.login #loginpress_video-background-wrapper {}

                body.login #loginpress_video-background {

                  object-fit: cover;

                }

                body.login:after {}

                body.login {

                  background-image: url(https://mangas-origines.fr/wp-content/uploads/2023/07/solo-leveling-manhwa-uhdpaper.com-4K-4.2345-scaled.jpg);

                  background-position: center;
                  background-size: cover;
                  position: relative;
                }

                .login h1 {}

                .interim-login.login h1 a {
                  width: 100px;
                }

                .login h1 a {
                  background-image: url(https://mangas-origines.fr/wp-content/uploads/2023/07/smallori.png ) !important;
                  width: 100px !important;
                  height: 100px !important;
                  background-size: contain !important;


                }

                .wp-core-ui #login .button-primary {}

                .wp-core-ui #login .button-primary:hover {}

                .wp-core-ui #login .button-primary,
                .wp-core-ui #login .two-factor-email-resend .button,
                .wp-core-ui #login .wp-generate-pw {

                  box-shadow: 0 0 0px rgba(0, 0, 0, 0.8);
                  /* box-shadow: none; */
                  height: auto;
                  line-height: 20px;
                  padding: 13px;
                  float: none;
                  width: 100%;
                }

                .wp-core-ui #login .wp-generate-pw {
                  margin-bottom: 6px;
                  margin-top: 10px;
                  font: inherit;
                }

                #loginform {
                  background-color: #14161c;
                  min-height: 229px;
                  padding: 0 24px 12px;
                }

                #loginform input[type="text"],
                #loginform input[type="password"] {

                  box-shadow: 0 0 0px rgba(0, 0, 0, 0.8);
                }

                #registerform input[type="text"],
                #registerform input[type="password"],
                #registerform input[type="number"],
                #registerform input[type="email"] {
                  box-shadow: 0 0 0px rgba(0, 0, 0, 0.8);
                }

                #lostpasswordform input[type="text"] {
                  box-shadow: 0 0 0px rgba(0, 0, 0, 0.8);
                }

                #login {
                  max-width: 525px !important;
                }

                .login form .forgetmenot label {
                  color: #ffffff !important;
                }

                .login label {
                  color: #ffffff;
                }

                .login form .input,
                .login input[type="text"] {
                  background: #ffffff;
                }

                #lostpasswordform {
                  padding: 0 24px 12px;
                  background-color: #14161c;
                }

                #registerform {
                  padding: 0 24px 12px;
                  background-color: #14161c;
                }

                #wfls-prompt-overlay {
                  background-color: #14161c;
                }

                .login .custom-message {

                  border-left: 4px solid #00a0d2;

                  background-color: #020000;

                  padding: 12px;
                  margin-left: 0;
                  margin-bottom: 20px;
                  -webkit-box-shadow: 0 1px 1px 0 rgba(0, 0, 0, .1);
                  box-shadow: 0 1px 1px 0 rgba(0, 0, 0, .1);
                }

                .login #nav {}

                .login #nav a,
                .login #nav {}

                .login form .forgetmenot label {}

                .login input[type="submit"] {}

                .login #nav a:hover {}

                .login #backtoblog {}

                .login .copyRight {}

                /* .loginpress-show-love, .loginpress-show-love a{
		color: ;
	} */

                .login .copyRight {}

                .login #backtoblog a {
                  text-decoration: none;
                }

                .login #backtoblog {}

                .login #backtoblog a:hover {}

                .loginHead {}

                .loginHead p a {}

                .loginHead p a:hover {}

                .loginFooter p a {
                  margin: 0 5px;
                }

                .loginFooter p a:hover {}

                .loginInner {}

                #login {
                  margin: auto !important;
                }

                .wp-core-ui .button-primary {
                  text-shadow: none;
                }

                /*input:-webkit-autofill{
  transition: all 100000s ease-in-out 0s !important;
  transition-property: background-color, color !important;
}*/
                .copyRight {
                  padding: 12px 170px;
                }

                .loginpress-show-love {
                  float: right;
                  font-style: italic;
                  padding-right: 20px;
                  padding-bottom: 10px;
                  position: absolute;
                  bottom: 3px;
                  right: 0;
                  z-index: 10;
                }

                .loginpress-show-love a {
                  text-decoration: none;
                }

                .love-position {
                  left: 0;
                  padding-left: 20px;
                }

                .header-cell {
                  /* display: table-cell; */
                  height: 100px;
                }

                .loginHeaderMenu {
                  text-align: center;
                  position: relative;
                  z-index: 10;
                  list-style: none;
                  background: #333;

                }

                .loginHeaderMenu>ul>li {
                  display: inline-block;
                  vertical-align: top;
                  position: relative;
                  list-style: none;
                }

                .loginHeaderMenu>ul>li>a {
                  color: #fff;
                  text-transform: uppercase;
                  text-decoration: none;
                  font-size: 16px;
                  padding: 17px 20px;
                  display: inline-block;
                }

                .loginHeaderMenu>ul>li:hover>a {
                  background: #4CAF50;
                  color: #fff;
                }

                .loginHeaderMenu>ul>li>ul {
                  position: absolute;
                  width: 200px;
                  padding: 0;
                  top: 100%;
                  left: 0;
                  background: #fff;
                  list-style: none;
                  text-align: left;
                  border-radius: 0 0 5px 5px;
                  -webkit-box-shadow: 0px 5px 10px -1px rgba(0, 0, 0, 0.31);
                  -moz-box-shadow: 0px 5px 10px -1px rgba(0, 0, 0, 0.31);
                  box-shadow: 0px 5px 10px -1px rgba(0, 0, 0, 0.31);
                  overflow: hidden;
                  opacity: 0;
                  visibility: hidden;
                }

                .loginHeaderMenu>ul>li:hover>ul {
                  opacity: 1;
                  visibility: visible;
                }

                .loginHeaderMenu>ul>li>ul>li {
                  font-size: 15px;
                  color: #333;
                }

                .loginHeaderMenu>ul>li>ul>li>a {
                  color: #333;
                  padding: 10px;
                  display: block;
                  text-decoration: none;
                }

                .loginHeaderMenu>ul>li>ul>li>a:hover {
                  background: rgba(51, 51, 51, 0.35);
                  color: #fff;
                }

                .loginHeaderMenu>ul {
                  flex-wrap: wrap;
                  display: flex;
                  justify-content: center;
                }

                .loginFooterMenu {
                  text-align: center;
                  background-color: rgba(0, 0, 0, .7);
                }

                .loginFooterMenu>ul {
                  display: inline-flex;
                }

                .loginFooterMenu>ul>li {
                  display: inline-block;
                  padding: 18px;
                }

                .loginFooterMenu>ul>li:focus {
                  outline: none;
                  border: 0;
                }

                .loginFooterMenu>ul>li>a:focus {
                  outline: none;
                  border: 0;
                }

                .loginFooterMenu>ul>li>a {
                  color: #fff;
                  text-transform: uppercase;
                  text-decoration: none;
                  font-size: 14px;
                }

                .loginFooterMenu>ul {
                  flex-wrap: wrap;
                  display: flex;
                  justify-content: center;
                }

                .loginpress-caps-lock {
                  background: rgba(51, 56, 61, 0.9);
                  color: #fff;
                  display: none;
                  font-size: 14px;
                  width: 120px;
                  padding: 5px 10px;
                  line-height: 20px;
                  position: absolute;
                  left: calc(100% + 10px);
                  top: 50%;
                  transform: translateY(-50%);
                  border-radius: 5px;
                  -webkit-transition: all 0.3s ease-in-out;
                  transition: all 0.3s ease-in-out;
                  text-align: center;
                  -webkit-box-shadow: 0 0 9px 0px rgba(0, 0, 0, 0.20);
                  box-shadow: 0 0 9px 0px rgba(0, 0, 0, 0.20);
                  margin-left: 5px;
                  font-weight: normal;
                  margin: 0;
                  display: none;
                }

                .loginpress-caps-lock:before {
                  content: '';
                  width: 0;
                  height: 0;
                  border-style: solid;
                  border-width: 5px 5px 5px 0;
                  border-color: transparent rgba(51, 56, 61, 0.9) transparent transparent;
                  position: absolute;
                  top: 50%;
                  right: 100%;
                  margin-left: 0;
                  margin-top: -5px;
                  -webkit-transition: all 0.3s ease-in-out;
                  transition: all 0.3s ease-in-out;
                  z-index: 1;
                }

                .login form {
                  overflow: visible;
                  border: none;
                }

                #loginform .user-pass-fields input {
                  margin-bottom: 0;
                }

                #loginform .user-pass-fields {
                  margin-bottom: 18px;
                  position: relative;
                }

                #login form p.submit {
                  position: relative;
                  clear: both;
                }

                input[type=checkbox]:checked::before {
                  margin: -.35rem 0 0 -.375rem;
                }

                /* LoginPress input field since 1.1.20 */
                /* .loginpress-input-wrap{
	 position: relative;
 }
.loginpres-input-field {
	transition: 0.4s;
}
.loginpres-input-field ~ .focus-border:before, .loginpres-input-field ~ .focus-border:after{
	content: "";
	position: absolute;
	top: 0;
	left: 50%;
	width: 0;
	height: 2px;
	background-color: #3399FF;
	transition: 0.4s;
	z-index: 999;
}
.loginpres-input-field ~ .focus-border:after{
	top: auto; bottom: 0;
}
.loginpres-input-field ~ .focus-border i:before, .loginpres-input-field ~ .focus-border i:after{
	content: "";
	position: absolute;
	top: 50%;
	left: 0;
	width: 2px;
	height: 0;
	background-color: #3399FF;
	transition: 0.6s;
}
.loginpres-input-field ~ .focus-border i:after{
	left: auto; right: 0;
}
.loginpres-input-field:focus ~ .focus-border:before, .loginpres-input-field:focus ~ .focus-border:after{
	left: 0;
	width: 100%;
	transition: 0.4s;
}
.loginpres-input-field:focus ~ .focus-border i:before, .loginpres-input-field:focus ~ .focus-border i:after{
	top: 0;
	height: 100%;
	transition: 0.6s;
} */
                /* ! LoginPress input field since 1.1.20 */
                @media screen and (max-width: 1239px) and (min-width: 768px) {
                  body.login #loginpress_video-background-wrapper {}
                }

                @media screen and (max-width: 767px) {
                  .login h1 a {
                    max-width: 100%;
                    background-size: contain !important;
                  }

                  .copyRight {
                    padding: 12px;
                  }

                  .loginpress-caps-lock {
                    left: auto;
                    right: 0;
                    top: 149%;
                  }

                  .loginpress-caps-lock:before {
                    content: '';
                    width: 0;
                    height: 0;
                    border-style: solid;
                    border-width: 0 5px 5px 5px;
                    border-color: transparent transparent rgba(51, 56, 61, 0.9) transparent;
                    position: absolute;
                    top: 0px;
                    left: 5px;
                    right: auto;
                  }

                  .loginpress-show-love {
                    display: none !important;
                  }

                  body.login #loginpress_video-background-wrapper {}
                }

                @media screen and (max-height: 700px) {
                  .loginpress-show-love {
                    display: none !important;
                  }
                }

                /* The only rule that matters */
                #loginpress_video-background {
                  /*  making the video fullscreen  */
                  position: fixed !important;
                  right: 0 !important;
                  bottom: 0 !important;
                  width: 100% !important;
                  height: 100% !important;
                  z-index: -100 !important;
                }

                body.login #login.login_tranparent,
                body.login #login.login_tranparent #loginform {
                  background: none !important;
                }

                body.login {
                  display: flex;
                  flex-direction: column;
                }

                body #login {
                  margin-bottom: 0;
                }

                body.login label[for="authcode"]:after {
                  display: none;
                }

                body.login label[for="authcode"]+input {
                  padding-left: 15px;
                }

                /* Default Login Popup styling */

                .interim-login.login form {
                  margin: 30px !important;
                }

                .interim-login #login_error,
                .interim-login.login .message {
                  margin: 0 20px 16px !important;
                }

                .interim-login.login {
                  min-height: 520px;
                  height: 100vh;
                }

                .interim-login #login {
                  width: 100%;
                  max-width: 380px;
                  margin-top: 0;
                  margin-bottom: 0;
                  height: 100%;
                  border-radius: 0;
                  display: flex;
                  flex-direction: column;
                  justify-content: center;
                  padding: 20px 0;
                }

                .interim-login #login .submit {
                  margin-top: 10px;
                }

                [for="language-switcher-locales"]:after {
                  display: none;
                }

                .language-switcher {
                  clear: both;
                  padding-top: 1px;
                }

                .login #language-switcher input[type="submit"] {
                  margin: 0;
                  color: #2271b1;
                  border-color: #2271b1;
                  background: #f6f7f7;
                  vertical-align: top;
                  height: inherit;
                  width: inherit;
                  font-size: inherit;
                }
              </style>
              <link rel="icon" href="https://mangas-origines.fr/wp-content/uploads/2023/07/cropped-favmo3-32x32.png"
                sizes="32x32">
              <link rel="icon" href="https://mangas-origines.fr/wp-content/uploads/2023/07/cropped-favmo3-192x192.png"
                sizes="192x192">
              <link rel="apple-touch-icon"
                href="https://mangas-origines.fr/wp-content/uploads/2023/07/cropped-favmo3-180x180.png">
              <meta name="msapplication-TileImage"
                content="https://mangas-origines.fr/wp-content/uploads/2023/07/cropped-favmo3-270x270.png">
              <style type="text/css">
                body.login div#login h1 a {
                  background-image: url(https://mangas-origines.fr/wp-content/uploads/2023/07/cropped-favmo.png);
                  width: 320px;
                  height: 120px;
                  background-size: auto;
                  background-position: center;
                }
              </style>
              <form name="loginform" id="loginform" method="post">
                <p>
                  <label>Nom d'utilisateur ou adresse mail * <br> <input type="text" name="log" class="input user_login"
                      value="" size="20">
                  </label>
                </p>
                <p>
                  <label>Mot de passe * <br> <input type="password" autocomplete="" name="pwd" class="input user_pass"
                      value="" size="20">
                  </label>
                </p>
                <p>
                </p>
                <div id="cf-turnstile-3916860930" class="cf-turnstile" data-sitekey="0x4AAAAAAAG2lxHacvIkeOZf"
                  data-theme="dark" data-language="auto" data-retry="auto" data-retry-interval="1000"
                  data-action="wordpress-login" data-appearance="always"><iframe
                    src="https://challenges.cloudflare.com/cdn-cgi/challenge-platform/h/b/turnstile/if/ov2/av0/rcv0/0/rlepy/0x4AAAAAAAG2lxHacvIkeOZf/dark/normal"
                    allow="cross-origin-isolated; fullscreen" sandbox="allow-same-origin allow-scripts allow-popups"
                    id="cf-chl-widget-rlepy" tabindex="0"
                    title="Widget, das eine Cloudflare-Sicherheitsherausforderung enthält"
                    style="border: none; overflow: hidden; width: 300px; height: 65px;"></iframe><input type="hidden"
                    name="cf-turnstile-response" id="cf-chl-widget-rlepy_response"
                    value="0.2mQBzmjCQYjmAloTUNbGDDh5ry-un8zSJhENG9SGDZqYY4RJc4p_Ffsg7efjE0V8XU3yiZ86H_h1SJ7qn1U5KFPTO_HaXSHXT84F53GlG8m1u7waX1mg4dm6eSfIUvVBsibyaBFicJPBkDGurLDG9Sb8RHyLvIBCY0Yi5WOJ10DoA4PaOIeaUVfhCro2lJgT0bb9ZeT8sWerJR6tp28BJ66UkqOqjBBuXXbQk9Xo3iUvxN8u0mO8VKwsFYSgTPUNdTTbZ6ay7suYl2lnhjsIpQNO-WDmBZRCUWgH7T5zlHoUylR13bPVx-KwYLDf6xCwM-g9QG9RhlIuY_-RaGuE9tLBXl1gR4u1Wq6k8xS35U4wRcCg2OnwEq2WdMgPn2-kAMLSnyA4S_cgb0OUQp-NxJUEd45Yahzz0ulKbhPlckmLufQ73oh7EWpVB9McgIW1rmwjrBkLYRUqng-ksCZVnCQCw1qH1EufQRco234nfAk.mzsgeLN5_WvH7bjNvendaA.7ae81f0b9daa481a758733b0c1838b08062938ca939df5c3e2dd918502a8a9a7">
                </div>
                <br class="cf-turnstile-br cf-turnstile-br-3916860930">
                <script>document.addEventListener("DOMContentLoaded", (function () { var e = document.getElementById("cf-turnstile-3916860930"); setTimeout((function () { e && (turnstile.render("#cf-turnstile-3916860930", { sitekey: "0x4AAAAAAAG2lxHacvIkeOZf" })) }), 100) }));</script>
                <p></p>
                <p class="forgetmenot">
                  <label>
                    <input name="rememberme" type="checkbox" id="rememberme" value="forever">Se souvenir de moi </label>
                </p>
                <p class="submit">
                  <input type="submit" name="wp-submit" class="button button-primary button-large wp-submit"
                    value="Connexion"> <input type="hidden" name="redirect_to"
                    value="https://mangas-origines.fr/wp-admin/">
                  <input type="hidden" name="testcookie" value="1">
                </p>
              </form>
              <p class="nav">
                <a href="javascript:avoid(0)" class="to-reset">Mot de passe oublié ?</a>
              </p>
              <p class="backtoblog">
                <a href="javascript:void(0)">← Retourner surMangas Origines</a>
              </p>
            </div>
          </div>
          <div class="modal-footer"></div>
        </div>
      </div>
    </div>
    <div class="modal fade" id="form-sign-up" tabindex="-1" role="dialog">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">×</span></button>
          </div>
          <div class="modal-body">
            <div id="sign-up" class="login">
              <h3>
                <a href="https://mangas-origines.fr/" title="Mangas Origines" tabindex="-1">S'inscrire</a>
              </h3>
              <p class="message register">Créer un compte sur le site</p>
              <form name="registerform" id="registerform" novalidate="novalidate">
                <p>
                  <label>Nom d'utilisateur * <br>
                    <input type="text" name="user_sign-up" class="input user_login" value="" size="20">
                  </label>
                </p>
                <p>
                  <label>Adresse mail * <br>
                    <input type="email" name="email_sign-up" class="input user_email" value="" size="20">
                  </label>
                </p>
                <p>
                  <label>Mot de passe *<br>
                    <input type="password" name="pass_sign-up" autocomplete="" class="input user_pass" value=""
                      size="25">
                  </label>
                </p>
                <p class="action">
                </p>
                <div id="cf-turnstile-3889276574" class="cf-turnstile" data-sitekey="0x4AAAAAAAG2lxHacvIkeOZf"
                  data-theme="dark" data-language="auto" data-retry="auto" data-retry-interval="1000"
                  data-action="wordpress-register" data-appearance="always"><iframe
                    src="https://challenges.cloudflare.com/cdn-cgi/challenge-platform/h/b/turnstile/if/ov2/av0/rcv0/0/7xxsg/0x4AAAAAAAG2lxHacvIkeOZf/dark/normal"
                    allow="cross-origin-isolated; fullscreen" sandbox="allow-same-origin allow-scripts allow-popups"
                    id="cf-chl-widget-7xxsg" tabindex="0"
                    title="Widget, das eine Cloudflare-Sicherheitsherausforderung enthält"
                    style="border: none; overflow: hidden; width: 300px; height: 65px;"></iframe><input type="hidden"
                    name="cf-turnstile-response" id="cf-chl-widget-7xxsg_response"
                    value="0.yxK1v3YvrWYOus_YWiwsyhfYyUfP7laYGPfmt0dVzC7_a2q92_N1W_IjZl2TJ41S1ER2QBbU28v1enaY0eQgIMlrX6lDczJFVvkvnl57EXrQ1q0n1x8IB-pvK2gL9O9SvedwYdouRNKM_2Naq8AGX35ICWCFwstC5-DM-8xXvVyuldzmETqjEeuvVTPsWtgp7ezmh4FOM4UxDHU5sEZWeJEPLl_SD5K3BrraRxLOuqwCG1t1JgH5IfKQXJA1K7-A4I1F6FqOPHO9oH3S9P4MjwXlB4wVlBr4cJXmnMJI3t9bc4miu5uZbTUXJUSwdRlULsEqced5l5cufW14nklz8Gbqzlh7yrWFFCJBfn-g96eG2AI1iFRJ7LuEhQW1jpt_nYLJDU07SlKV7e25bbSxkBTvVXNKmILHRl9YAfnnzern0XwG2-raIQTBohmnj1eVxi-nGXX6P6EbEsoVT9YnMRPQQSBPvthp967jSpSABk7WlBdjlflKRXclrgi0U0fQ.K--84AhEjWPm8bhec_1K9A.19141670a303ee7ff267c0c67f7d54b4523522d28d211f388dd6bb4686a21b97">
                </div>
                <br class="cf-turnstile-br cf-turnstile-br-3889276574">
                <script>document.addEventListener("DOMContentLoaded", (function () { var e = document.getElementById("cf-turnstile-3889276574"); setTimeout((function () { e && (turnstile.render("#cf-turnstile-3889276574", { sitekey: "0x4AAAAAAAG2lxHacvIkeOZf" })) }), 100) }));</script>
                <p></p>
                <input type="hidden" name="redirect_to" value="">
                <p class="submit">
                  <input type="submit" name="wp-submit" class="button button-primary button-large wp-submit"
                    value="S'inscrire">
                </p>
              </form>
              <p class="nav">
                <a href="javascript:void(0)" class="to-login">Connexion</a>
                |
                <a href="javascript:void(0)" class="to-reset">Mot de passe oublié ?</a>
              </p>
              <p class="backtoblog">
                <a href="javascript:void(0)">← Retourner surMangas Origines</a>
              </p>
            </div>
          </div>
          <div class="modal-footer"></div>
        </div>
      </div>
    </div>
    <div class="modal fade" id="form-reset" tabindex="-1" role="dialog">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">×</span></button>
          </div>
          <div class="modal-body">
            <div id="reset" class="login">
              <h3>
                <a href="javascript:void(0)" class="to-reset">Mot de passe oublié ?</a>
              </h3>
              <p class="message reset">Entrez votre nom d'utilisateur ou mail. Vous recevrez un lien pour recréer un
                nouveau mot de passe par mail.</p>
              <form name="resetform" id="resetform" method="post">
                <p>
                  <label>Nom d'utilisateur ou adresse mail <br>
                    <input type="text" name="user_reset" id="user_reset" class="input" value="" size="20">
                  </label>
                </p>
                <div id="cf-turnstile-2892882055" class="cf-turnstile" data-sitekey="0x4AAAAAAAG2lxHacvIkeOZf"
                  data-theme="dark" data-language="auto" data-retry="auto" data-retry-interval="1000"
                  data-action="wordpress-reset" data-appearance="always"><iframe
                    src="https://challenges.cloudflare.com/cdn-cgi/challenge-platform/h/b/turnstile/if/ov2/av0/rcv0/0/q4tjd/0x4AAAAAAAG2lxHacvIkeOZf/dark/normal"
                    allow="cross-origin-isolated; fullscreen" sandbox="allow-same-origin allow-scripts allow-popups"
                    id="cf-chl-widget-q4tjd" tabindex="0"
                    title="Widget, das eine Cloudflare-Sicherheitsherausforderung enthält"
                    style="border: none; overflow: hidden; width: 300px; height: 65px;"></iframe><input type="hidden"
                    name="cf-turnstile-response" id="cf-chl-widget-q4tjd_response" value=""></div>
                <br class="cf-turnstile-br cf-turnstile-br-2892882055">
                <script>document.addEventListener("DOMContentLoaded", (function () { var e = document.getElementById("cf-turnstile-2892882055"); setTimeout((function () { e && (turnstile.render("#cf-turnstile-2892882055", { sitekey: "0x4AAAAAAAG2lxHacvIkeOZf" })) }), 100) }));</script>
                <p class="submit">
                  <input type="submit" name="wp-submit" class="button button-primary button-large wp-submit"
                    value="Get New Password">
                  <input type="hidden" name="testcookie" value="1">
                </p>
              </form>
              <p>
                <a class="backtoblog" href="javascript:void(0)">← Retourner surMangas Origines</a>
              </p>
            </div>
          </div>
          <div class="modal-footer"></div>
        </div>
      </div>
    </div>
  </div>
  <a nofollow="" noindex="" href="javascript:void(0);" id="wpdUserContentInfoAnchor" style="display:none;"
    rel="#wpdUserContentInfo" data-wpd-lity="">wpDiscuz</a>
  <div id="wpdUserContentInfo"
    style="overflow:auto;background:#FDFDF6;padding:20px;width:600px;max-width:100%;border-radius:6px;"
    class="lity-hide"></div>
  <div id="wpd-editor-source-code-wrapper-bg"></div>
  <div id="wpd-editor-source-code-wrapper"><textarea id="wpd-editor-source-code"></textarea><button
      id="wpd-insert-source-code">Insert</button><input type="hidden" id="wpd-editor-uid"></div>
  <div class="go-to-top active">
    <i class="icon ion-md-arrow-up"></i>
  </div>
  <script type="text/javascript" id="wp-manga-single-js-js-extra">
    /* <![CDATA[ */
    var wpMangaSingle = { "ajax_url": "https:\/\/mangas-origines.fr\/wp-admin\/admin-ajax.php", "home_url": "https:\/\/mangas-origines.fr" };
    /* ]]> */
  </script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-content/plugins/madara-core/assets/js/manga-single.js?ver=6.3.2"
    id="wp-manga-single-js-js"></script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-content/plugins/wpdiscuz/assets/third-party/wpdccjs/wpdcc.js?ver=7.6.10"
    id="wpdiscuz-cookie-js-js"></script>
  <script id="quill-js-before" type="text/javascript">
    var wpdiscuzEditorOptions = {
      modules: {
        toolbar: "",
        counter: {
          uniqueID: "",
          commentmaxcount: 0,
          replymaxcount: 0,
          commentmincount: 1,
          replymincount: 1,
        },
      },
      wc_be_the_first_text: "Soyez le premier \u00e0 commenter\u00a0!",
      wc_comment_join_text: "Rejoindre la discussion",
      theme: 'snow',
      debug: 'warn'
    };
  </script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-content/plugins/wpdiscuz/assets/third-party/quill/quill.js?ver=1.3.6"
    id="quill-js"></script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-content/plugins/wpdiscuz/assets/js/wpd-editor.js?ver=1.3.6"
    id="wpd-editor-js"></script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-content/plugins/wpdiscuz/assets/third-party/autogrow/jquery.autogrowtextarea.min.js?ver=1.3.6"
    id="autogrowtextarea-js-js"></script>
  <script type="text/javascript" id="wpdiscuz-ajax-js-js-extra">
    /* <![CDATA[ */
    var wpdiscuzAjaxObj = { "wc_hide_replies_text": "Masquer les r\u00e9ponses", "wc_show_replies_text": "Voir les r\u00e9ponses", "wc_msg_required_fields": "Veuillez remplir les champs obligatoires", "wc_invalid_field": "Une partie du champ est invalide", "wc_error_empty_text": "merci de compl\u00e9ter ce champ pour commenter", "wc_error_url_text": "URL invalide", "wc_error_email_text": "Adresse email invalide", "wc_invalid_captcha": "Code Captcha invalide", "wc_login_to_vote": "Vous devez \u00eatre connect\u00e9 pour voter", "wc_deny_voting_from_same_ip": "Vous n\u2019\u00eates pas autoris\u00e9 \u00e0 voter pour ce commentaire", "wc_self_vote": "Vous ne pouvez pas voter sur vos propres commentaires", "wc_vote_only_one_time": "Vous avez d\u00e9j\u00e0 vot\u00e9 pour ce commentaire", "wc_voting_error": "Erreur sur vote", "wc_comment_edit_not_possible": "D\u00e9sol\u00e9, il n\u2019est plus possible de modifier ce commentaire", "wc_comment_not_updated": "D\u00e9sol\u00e9, le commentaire n\u2019a pas \u00e9t\u00e9 mis \u00e0 jour", "wc_comment_not_edited": "Vous n\u2019avez fait aucune modification", "wc_msg_input_min_length": "L\u2019entr\u00e9e est trop courte", "wc_msg_input_max_length": "L\u2019entr\u00e9e est trop longue", "wc_spoiler_title": "Titre spoiler", "wc_cannot_rate_again": "Vous ne pouvez pas \u00e9valuer \u00e0 nouveau", "wc_not_allowed_to_rate": "Vous n\u2019\u00eates pas autoris\u00e9 \u00e0 voter ici", "wc_follow_user": "Suivre cet utilisateur", "wc_unfollow_user": "Ne plus suivre cet utilisateur", "wc_follow_success": "Vous avez commenc\u00e9 \u00e0 suivre cet auteur de commentaires", "wc_follow_canceled": "Vous avez cess\u00e9 de suivre cet auteur de commentaire.", "wc_follow_email_confirm": "Veuillez v\u00e9rifier vos e-mail et confirmer la demande de l\u2019utilisateur.", "wc_follow_email_confirm_fail": "D\u00e9sol\u00e9, nous n\u2019avons pas pu envoyer l\u2019e-mail de confirmation.", "wc_follow_login_to_follow": "Veuillez vous connecter pour suivre les utilisateurs.", "wc_follow_impossible": "Nous sommes d\u00e9sol\u00e9s, mais vous ne pouvez pas suivre cet utilisateur.", "wc_follow_not_added": "Le suivi a \u00e9chou\u00e9. Veuillez r\u00e9essayer plus tard.", "is_user_logged_in": "", "commentListLoadType": "0", "commentListUpdateType": "0", "commentListUpdateTimer": "60", "liveUpdateGuests": "0", "wordpressThreadCommentsDepth": "5", "wordpressIsPaginate": "", "commentTextMaxLength": "0", "replyTextMaxLength": "0", "commentTextMinLength": "1", "replyTextMinLength": "1", "storeCommenterData": "100000", "socialLoginAgreementCheckbox": "1", "enableFbLogin": "0", "fbUseOAuth2": "0", "enableFbShare": "0", "facebookAppID": "", "facebookUseOAuth2": "0", "enableGoogleLogin": "0", "googleClientID": "", "googleClientSecret": "", "cookiehash": "b538cb9389137779264b11b02ba344fc", "isLoadOnlyParentComments": "0", "scrollToComment": "1", "commentFormView": "collapsed", "enableDropAnimation": "1", "isNativeAjaxEnabled": "0", "enableBubble": "0", "bubbleLiveUpdate": "0", "bubbleHintTimeout": "45", "bubbleHintHideTimeout": "10", "cookieHideBubbleHint": "wpdiscuz_hide_bubble_hint", "bubbleShowNewCommentMessage": "1", "bubbleLocation": "content_left", "firstLoadWithAjax": "0", "wc_copied_to_clipboard": "Copied to clipboard!", "inlineFeedbackAttractionType": "blink", "loadRichEditor": "1", "wpDiscuzReCaptchaSK": "", "wpDiscuzReCaptchaTheme": "light", "wpDiscuzReCaptchaVersion": "2.0", "wc_captcha_show_for_guest": "0", "wc_captcha_show_for_members": "0", "wpDiscuzIsShowOnSubscribeForm": "0", "wmuEnabled": "1", "wmuInput": "wmu_files", "wmuMaxFileCount": "1", "wmuMaxFileSize": "2097152", "wmuPostMaxSize": "1048576000", "wmuIsLightbox": "0", "wmuMimeTypes": { "jpg": "image\/jpeg", "jpeg": "image\/jpeg", "jpe": "image\/jpeg", "gif": "image\/gif", "png": "image\/png", "bmp": "image\/bmp", "tiff": "image\/tiff", "tif": "image\/tiff", "ico": "image\/x-icon" }, "wmuPhraseConfirmDelete": "Are you sure you want to delete this attachment?", "wmuPhraseNotAllowedFile": "Type de fichier non autoris\u00e9", "wmuPhraseMaxFileCount": "Le nombre maximum de fichiers qui peuvent \u00eatre upload\u00e9s est 1", "wmuPhraseMaxFileSize": "La taille maximale du fichier qui peut \u00eatre upload\u00e9 est 2MB", "wmuPhrasePostMaxSize": "La taille maximale de la publication est 1000MB", "wmuPhraseDoingUpload": "Uploading in progress! Please wait.", "msgEmptyFile": "File is empty. Please upload something more substantial. This error could also be caused by uploads being disabled in your php.ini or by post_max_size being defined as smaller than upload_max_filesize in php.ini.", "msgPostIdNotExists": "ID de publication inexistante", "msgUploadingNotAllowed": "Sorry, uploading not allowed for this post", "msgPermissionDenied": "Vous n\u2019avez pas les droits suffisants pour effectuer cette action", "wmuKeyImages": "images", "wmuSingleImageWidth": "auto", "wmuSingleImageHeight": "200", "version": "7.6.10", "wc_post_id": "253", "isCookiesEnabled": "1", "loadLastCommentId": "0", "dataFilterCallbacks": { "wpdLoadMoreComments": ["wp_manga_chapter_comment"] }, "phraseFilters": [], "scrollSize": "32", "is_email_field_required": "1", "url": "https:\/\/mangas-origines.fr\/wp-admin\/admin-ajax.php", "customAjaxUrl": "https:\/\/mangas-origines.fr\/wp-content\/plugins\/wpdiscuz\/utils\/ajax\/wpdiscuz-ajax.php", "bubbleUpdateUrl": "https:\/\/mangas-origines.fr\/wp-json\/wpdiscuz\/v1\/update", "restNonce": "1bee99ee18" };
    /* ]]> */
  </script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-content/plugins/wpdiscuz/assets/js/wpdiscuz.js?ver=7.6.10"
    id="wpdiscuz-ajax-js-js"></script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-content/plugins/wpdiscuz/assets/js/wpdiscuz-mu-frontend.js?ver=7.6.10"
    id="wpdiscuz-mu-js-js"></script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-content/plugins/wpdiscuz/assets/third-party/lity/lity.js?ver=7.6.10"
    id="wpdiscuz-lity-js-js"></script>
  <script type="text/javascript" id="wpdiscuz-user-content-js-js-extra">
    /* <![CDATA[ */
    var wpdiscuzUCObj = { "msgConfirmDeleteComment": "\u00cates-vous s\u00fbr de vouloir supprimer ce commentaire\u00a0?", "msgConfirmCancelSubscription": "\u00cates-vous s\u00fbr de vouloir annuler cet abonnement\u00a0?", "msgConfirmCancelFollow": "Confirmez-vous vouloir annuler ce suivi\u00a0?", "additionalTab": "0" };
    /* ]]> */
  </script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-content/plugins/wpdiscuz/assets/js/wpdiscuz-user-content.js?ver=7.6.10"
    id="wpdiscuz-user-content-js-js"></script>
  <script type="text/javascript" src="https://mangas-origines.fr/wp-includes/js/comment-reply.min.js?ver=6.3.2"
    id="comment-reply-js"></script>
  <script type="text/javascript" src="https://mangas-origines.fr/wp-content/themes/madara/js/core.js?ver=6.3.2"
    id="madara-core-js"></script>
  <script type="text/javascript" src="https://mangas-origines.fr/wp-content/themes/madara/js/smoothscroll.js?ver=1.4.10"
    id="smoothscroll-js"></script>
  <script type="text/javascript" src="https://mangas-origines.fr/wp-includes/js/imagesloaded.min.js?ver=4.1.4"
    id="imagesloaded-js"></script>
  <script type="text/javascript" src="https://mangas-origines.fr/wp-content/themes/madara/js/aos.js?ver=6.3.2"
    id="aos-js"></script>
  <script type="text/javascript" src="https://mangas-origines.fr/wp-content/themes/madara/js/ajax.js?ver=6.3.2"
    id="madara-ajax-js"></script>
  <script id="perfmatters-lazy-load-js-before" type="text/javascript">
    window.lazyLoadOptions = { elements_selector: "img[data-src],.perfmatters-lazy,.perfmatters-lazy-css-bg", thresholds: "0px 0px", class_loading: "pmloading", class_loaded: "pmloaded", callback_loaded: function (element) { if (element.tagName === "IFRAME") { if (element.classList.contains("pmloaded")) { if (typeof window.jQuery != "undefined") { if (jQuery.fn.fitVids) { jQuery(element).parent().fitVids() } } } } } }; window.addEventListener("LazyLoad::Initialized", function (e) { var lazyLoadInstance = e.detail.instance; var target = document.querySelector("body"); var observer = new MutationObserver(function (mutations) { lazyLoadInstance.update() }); var config = { childList: !0, subtree: !0 }; observer.observe(target, config); });
  </script>
  <script type="text/javascript" async=""
    src="https://mangas-origines.fr/wp-content/plugins/perfmatters/js/lazyload.min.js?ver=2.1.7"
    id="perfmatters-lazy-load-js"></script>
  <script type="text/javascript" id="wp-manga-login-ajax-js-extra">
    /* <![CDATA[ */
    var wpMangaLogin = { "admin_ajax": "https:\/\/mangas-origines.fr\/wp-admin\/admin-ajax.php", "home_url": "https:\/\/mangas-origines.fr", "nonce": "49764ba9a3", "messages": { "please_enter_username": "Entrez un nom d&#039;utilisateur", "please_enter_password": "Please enter password", "invalid_username_or_password": "Nom d&#039;utilisateur ou mot de passe incorrect", "server_error": "Server Error!", "username_or_email_cannot_be_empty": "Le nom d&#039;utilisateur ou l&#039;adresse mail ne peut pas \u00eatre vide ", "please_fill_all_fields": "Please fill in all password fields.", "password_cannot_less_than_12": "Password cannot have less than 12 characters", "password_doesnot_match": "Password does not match. Please try again.", "username_cannot_empty": "Le nom d&#039;utilisateur ne peut pas \u00eatre vide", "email_cannot_empty": "Email cannot be empty", "password_cannot_empty": "Password cannot be empty" } };
    /* ]]> */
  </script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-content/plugins/madara-core/assets/js/login.js?ver=1.7.2"
    id="wp-manga-login-ajax-js"></script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-content/plugins/madara-core/assets/slick/slick.min.js?ver=6.3.2"
    id="wp-manga-slick-js-js"></script>
  <script type="text/javascript" src="https://mangas-origines.fr/wp-includes/js/jquery/ui/core.min.js?ver=1.13.2"
    id="jquery-ui-core-js"></script>
  <script type="text/javascript" src="https://mangas-origines.fr/wp-includes/js/jquery/ui/menu.min.js?ver=1.13.2"
    id="jquery-ui-menu-js"></script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-includes/js/dist/vendor/wp-polyfill-inert.min.js?ver=3.1.2"
    id="wp-polyfill-inert-js"></script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-includes/js/dist/vendor/regenerator-runtime.min.js?ver=0.13.11"
    id="regenerator-runtime-js"></script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-includes/js/dist/vendor/wp-polyfill.min.js?ver=3.15.0"
    id="wp-polyfill-js"></script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-includes/js/dist/dom-ready.min.js?ver=392bdd43726760d1f3ca"
    id="wp-dom-ready-js"></script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-includes/js/dist/hooks.min.js?ver=c6aec9a8d4e5a5d543a1"
    id="wp-hooks-js"></script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-includes/js/dist/i18n.min.js?ver=7701b0c3857f914212ef" id="wp-i18n-js"></script>
  <script id="wp-i18n-js-after" type="text/javascript">
    wp.i18n.setLocaleData({ 'text direction\u0004ltr': ['ltr'] });
  </script>
  <script type="text/javascript" id="wp-a11y-js-translations">
    (function (domain, translations) {
      var localeData = translations.locale_data[domain] || translations.locale_data.messages;
      localeData[""].domain = domain;
      wp.i18n.setLocaleData(localeData, domain);
    })("default", { "translation-revision-date": "2023-10-12 12:16:45+0000", "generator": "GlotPress\/4.0.0-alpha.9", "domain": "messages", "locale_data": { "messages": { "": { "domain": "messages", "plural-forms": "nplurals=2; plural=n > 1;", "lang": "fr" }, "Notifications": ["Notifications"] } }, "comment": { "reference": "wp-includes\/js\/dist\/a11y.js" } });
  </script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-includes/js/dist/a11y.min.js?ver=7032343a947cfccf5608" id="wp-a11y-js"></script>
  <script type="text/javascript" id="jquery-ui-autocomplete-js-extra">
    /* <![CDATA[ */
    var uiAutocompleteL10n = { "noResults": "Aucun r\u00e9sultat.", "oneResult": "Un r\u00e9sultat trouv\u00e9. Utilisez les fl\u00e8ches haut et bas du clavier pour les parcourir.", "manyResults": "%d r\u00e9sultats trouv\u00e9s. Utilisez les fl\u00e8ches haut et bas du clavier pour les parcourir.", "itemSelected": "\u00c9l\u00e9ment s\u00e9lectionn\u00e9." };
    /* ]]> */
  </script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-includes/js/jquery/ui/autocomplete.min.js?ver=1.13.2"
    id="jquery-ui-autocomplete-js"></script>
  <script type="text/javascript" id="wp-manga-js-extra">
    /* <![CDATA[ */
    var manga = { "ajax_url": "https:\/\/mangas-origines.fr\/wp-admin\/admin-ajax.php", "home_url": "https:\/\/mangas-origines.fr", "base_url": "https:\/\/mangas-origines.fr\/oeuvre\/95-solo-leveling\/", "manga_paged_var": "manga-page", "enable_manga_view": "1", "manga_id": "253" };
    /* ]]> */
  </script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-content/plugins/madara-core/assets/js/script.js?ver=1.7.1"
    id="wp-manga-js"></script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-content/themes/madara/js/slick/slick.min.js?ver=1.9.0" id="slick-js"></script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-content/plugins/madara-shortcodes/shortcodes/js/ct-shortcodes.js?ver=1.5.2.1"
    id="ct-shortcode-js-js"></script>
  <script defer=""
    src="https://static.cloudflareinsights.com/beacon.min.js/v8b253dfea2ab4077af8c6f58422dfbfd1689876627854"
    integrity="sha512-bjgnUKX4azu3dLTVtie9u6TKqgx29RBwfj3QXYt5EKfWM/9hPSAI/4qcV5NACjwAo8UtTeWefx6Zq5PHcMm7Tg=="
    data-cf-beacon="{&quot;rayId&quot;:&quot;816a8e1d7da3bbc8&quot;,&quot;token&quot;:&quot;ee882d1c00c746b4aeadab5ffa54282e&quot;,&quot;version&quot;:&quot;2023.8.0&quot;,&quot;si&quot;:100}"
    crossorigin="anonymous"></script>
  <p id="a11y-speak-intro-text" class="a11y-speak-intro-text"
    style="position: absolute;margin: -1px;padding: 0;height: 1px;width: 1px;overflow: hidden;clip: rect(1px, 1px, 1px, 1px);-webkit-clip-path: inset(50%);clip-path: inset(50%);border: 0;word-wrap: normal !important;"
    hidden="hidden">Notifications</p>
  <div id="a11y-speak-assertive" class="a11y-speak-region"
    style="position: absolute;margin: -1px;padding: 0;height: 1px;width: 1px;overflow: hidden;clip: rect(1px, 1px, 1px, 1px);-webkit-clip-path: inset(50%);clip-path: inset(50%);border: 0;word-wrap: normal !important;"
    aria-live="assertive" aria-relevant="additions text" aria-atomic="true"></div>
  <div id="a11y-speak-polite" class="a11y-speak-region"
    style="position: absolute;margin: -1px;padding: 0;height: 1px;width: 1px;overflow: hidden;clip: rect(1px, 1px, 1px, 1px);-webkit-clip-path: inset(50%);clip-path: inset(50%);border: 0;word-wrap: normal !important;"
    aria-live="polite" aria-relevant="additions text" aria-atomic="true"></div>
  <div role="status" aria-live="assertive" aria-relevant="additions" class="ui-helper-hidden-accessible"></div>
  <div role="status" aria-live="assertive" aria-relevant="additions" class="ui-helper-hidden-accessible"></div>
</body>

</html>
