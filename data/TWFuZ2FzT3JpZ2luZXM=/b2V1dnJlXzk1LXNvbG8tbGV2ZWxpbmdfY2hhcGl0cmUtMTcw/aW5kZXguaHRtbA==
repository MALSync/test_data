<html lang="fr-FR">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="profile" href="https://gmpg.org/xfn/11">
  <title>Solo Leveling - Chapitre 170 - Mangas Origines</title>
  <meta name="robots" content="max-image-preview:large">
  <link rel="dns-prefetch" href="//www.googletagmanager.com">
  <link rel="dns-prefetch" href="//pagead2.googlesyndication.com">
  <link rel="stylesheet" id="ct-shortcode-css"
    href="https://mangas-origines.fr/wp-content/plugins/madara-shortcodes/shortcodes/css/shortcodes.css?ver=6.3.2"
    type="text/css" media="all">
  <link rel="stylesheet" id="wpdiscuz-frontend-css-css"
    href="https://mangas-origines.fr/wp-content/plugins/wpdiscuz/themes/default/style.css?ver=7.6.10" type="text/css"
    media="all">
  <style id="wpdiscuz-frontend-css-inline-css" type="text/css">
    #wpdcom .wpd-blog-administrator .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-administrator .wpd-comment-author,
    #wpdcom .wpd-blog-administrator .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-1 .wpd-comment .wpd-blog-administrator .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment.wpd-reply .wpd-comment-wrap.wpd-blog-administrator {
      border-left: 3px solid #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-administrator .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-administrator .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-reply .wpd-blog-administrator .wpd-comment-right {
      border-left: 1px solid #00B38F
    }

    #wpdcom .wpd-blog-editor .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-editor .wpd-comment-author,
    #wpdcom .wpd-blog-editor .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-1 .wpd-comment .wpd-blog-editor .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment.wpd-reply .wpd-comment-wrap.wpd-blog-editor {
      border-left: 3px solid #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-editor .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-editor .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-reply .wpd-blog-editor .wpd-comment-right {
      border-left: 1px solid #00B38F
    }

    #wpdcom .wpd-blog-author .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-author .wpd-comment-author,
    #wpdcom .wpd-blog-author .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-1 .wpd-comment .wpd-blog-author .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-author .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-author .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-reply .wpd-blog-author .wpd-comment-right {
      border-left: 1px solid #00B38F
    }

    #wpdcom .wpd-blog-contributor .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-contributor .wpd-comment-author,
    #wpdcom .wpd-blog-contributor .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-1 .wpd-comment .wpd-blog-contributor .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-contributor .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-contributor .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-reply .wpd-blog-contributor .wpd-comment-right {
      border-left: 1px solid #00B38F
    }

    #wpdcom .wpd-blog-subscriber .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-subscriber .wpd-comment-author,
    #wpdcom .wpd-blog-subscriber .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-subscriber .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-subscriber .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom .wpd-blog-translator .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-translator .wpd-comment-author,
    #wpdcom .wpd-blog-translator .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-1 .wpd-comment .wpd-blog-translator .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-translator .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-translator .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-reply .wpd-blog-translator .wpd-comment-right {
      border-left: 1px solid #00B38F
    }

    #wpdcom .wpd-blog-post_author .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-post_author .wpd-comment-author,
    #wpdcom .wpd-blog-post_author .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom .wpd-blog-post_author .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-1 .wpd-comment .wpd-blog-post_author .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment.wpd-reply .wpd-comment-wrap.wpd-blog-post_author {
      border-left: 3px solid #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-post_author .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-post_author .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-reply .wpd-blog-post_author .wpd-comment-right {
      border-left: 1px solid #00B38F
    }

    #wpdcom .wpd-blog-guest .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-guest .wpd-comment-author,
    #wpdcom .wpd-blog-guest .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-guest .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #comments,
    #respond,
    .comments-area,
    #wpdcom.wpd-dark {
      background: #14161c;
      color: #CCCCCC
    }

    #wpdcom .ql-editor>* {
      color: #000000
    }

    #wpdcom .ql-editor::before {
      opacity: 1;
      color: #DDDDDD
    }

    #wpdcom .ql-toolbar {
      border: 1px solid #D1D1D1;
      border-top: none
    }

    #wpdcom .ql-container {
      background: #999999;
      border: 1px solid #D1D1D1;
      border-bottom: none
    }

    #wpdcom .wpd-form-row .wpdiscuz-item input[type="text"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="email"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="url"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="color"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="date"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="datetime"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="datetime-local"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="month"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="number"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="time"],
    #wpdcom textarea,
    #wpdcom select {
      background: #999999;
      border: 1px solid #D1D1D1;
      color: #000000
    }

    #wpdcom.wpd-dark .wpdiscuz-item.wpd-field-select select.wpdiscuz_select,
    #wpdcom.wpd-dark select {
      background: #999999 !important;
      border: 1px solid #D1D1D1 !important;
      color: #000000 !important
    }

    #wpdcom .wpd-form-row .wpdiscuz-item textarea {
      border: 1px solid #D1D1D1
    }

    #wpdcom input::placeholder,
    #wpdcom textarea::placeholder,
    #wpdcom input::-moz-placeholder,
    #wpdcom textarea::-webkit-input-placeholder {
      opacity: 1;
      color: #DDDDDD
    }

    #wpdcom .wpd-comment-text {
      color: #CCCCCC
    }

    .lity-wrap .wpd-item a {
      color: #666
    }

    .lity-wrap .wpd-item a:hover {
      color: #222
    }

    .wpd-inline-shortcode.wpd-active {
      background-color: #666
    }

    #wpdcom .wpd-thread-head .wpd-thread-info {
      border-bottom: 2px solid #00B38F
    }

    #wpdcom .wpd-thread-head .wpd-thread-info.wpd-reviews-tab svg {
      fill: #00B38F
    }

    #wpdcom .wpd-thread-head .wpdiscuz-user-settings {
      border-bottom: 2px solid #00B38F
    }

    #wpdcom .wpd-thread-head .wpdiscuz-user-settings:hover {
      color: #00B38F
    }

    #wpdcom .wpd-comment .wpd-follow-link:hover {
      color: #00B38F
    }

    #wpdcom .wpd-comment-status .wpd-sticky {
      color: #00B38F
    }

    #wpdcom .wpd-thread-filter .wpdf-active {
      color: #00B38F;
      border-bottom-color: #00B38F
    }

    #wpdcom .wpd-comment-info-bar {
      border: 1px dashed #33c3a6;
      background: #e6f8f4
    }

    #wpdcom .wpd-comment-info-bar .wpd-current-view i {
      color: #00B38F
    }

    #wpdcom .wpd-filter-view-all:hover {
      background: #00B38F
    }

    #wpdcom .wpdiscuz-item .wpdiscuz-rating>label {
      color: #DDDDDD
    }

    #wpdcom .wpdiscuz-item .wpdiscuz-rating:not(:checked)>label:hover,
    .wpdiscuz-rating:not(:checked)>label:hover~label {}

    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input~label:hover,
    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input:not(:checked)~label:hover~label,
    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input:not(:checked)~label:hover~label {
      color: #FFED85
    }

    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input:checked~label:hover,
    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input:checked~label:hover,
    #wpdcom .wpdiscuz-item .wpdiscuz-rating>label:hover~input:checked~label,
    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input:checked+label:hover~label,
    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input:checked~label:hover~label,
    .wpd-custom-field .wcf-active-star,
    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input:checked~label {
      color: #FFD700
    }

    #wpd-post-rating .wpd-rating-wrap .wpd-rating-stars svg .wpd-star {
      fill: #DDDDDD
    }

    #wpd-post-rating .wpd-rating-wrap .wpd-rating-stars svg .wpd-active {
      fill: #FFD700
    }

    #wpd-post-rating .wpd-rating-wrap .wpd-rate-starts svg .wpd-star {
      fill: #DDDDDD
    }

    #wpd-post-rating .wpd-rating-wrap .wpd-rate-starts:hover svg .wpd-star {
      fill: #FFED85
    }

    #wpd-post-rating.wpd-not-rated .wpd-rating-wrap .wpd-rate-starts svg:hover~svg .wpd-star {
      fill: #DDDDDD
    }

    .wpdiscuz-post-rating-wrap .wpd-rating .wpd-rating-wrap .wpd-rating-stars svg .wpd-star {
      fill: #DDDDDD
    }

    .wpdiscuz-post-rating-wrap .wpd-rating .wpd-rating-wrap .wpd-rating-stars svg .wpd-active {
      fill: #FFD700
    }

    #wpdcom .wpd-comment .wpd-follow-active {
      color: #ff7a00
    }

    #wpdcom .page-numbers {
      color: #555;
      border: #555 1px solid
    }

    #wpdcom span.current {
      background: #555
    }

    #wpdcom.wpd-layout-1 .wpd-new-loaded-comment>.wpd-comment-wrap>.wpd-comment-right {
      background: #FFFAD6
    }

    #wpdcom.wpd-layout-2 .wpd-new-loaded-comment.wpd-comment>.wpd-comment-wrap>.wpd-comment-right {
      background: #FFFAD6
    }

    #wpdcom.wpd-layout-2 .wpd-new-loaded-comment.wpd-comment.wpd-reply>.wpd-comment-wrap>.wpd-comment-right {
      background: transparent
    }

    #wpdcom.wpd-layout-2 .wpd-new-loaded-comment.wpd-comment.wpd-reply>.wpd-comment-wrap {
      background: #FFFAD6
    }

    #wpdcom.wpd-layout-3 .wpd-new-loaded-comment.wpd-comment>.wpd-comment-wrap>.wpd-comment-right {
      background: #FFFAD6
    }

    #wpdcom .wpd-follow:hover i,
    #wpdcom .wpd-unfollow:hover i,
    #wpdcom .wpd-comment .wpd-follow-active:hover i {
      color: #00B38F
    }

    #wpdcom .wpdiscuz-readmore {
      cursor: pointer;
      color: #00B38F
    }

    .wpd-custom-field .wcf-pasiv-star,
    #wpcomm .wpdiscuz-item .wpdiscuz-rating>label {
      color: #DDDDDD
    }

    .wpd-wrapper .wpd-list-item.wpd-active {
      border-top: 3px solid #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment.wpd-reply.wpd-unapproved-comment .wpd-comment-wrap {
      border-left: 3px solid #FFFAD6
    }

    #wpdcom.wpd-layout-3 .wpd-comment.wpd-reply.wpd-unapproved-comment .wpd-comment-right {
      border-left: 1px solid #FFFAD6
    }

    #wpdcom .wpd-prim-button {
      background-color: #07B290;
      color: #FFFFFF
    }

    #wpdcom .wpd_label__check i.wpdicon-on {
      color: #07B290;
      border: 1px solid #83d9c8
    }

    #wpd-bubble-wrapper #wpd-bubble-all-comments-count {
      color: #1DB99A
    }

    #wpd-bubble-wrapper>div {
      background-color: #1DB99A
    }

    #wpd-bubble-wrapper>#wpd-bubble #wpd-bubble-add-message {
      background-color: #1DB99A
    }

    #wpd-bubble-wrapper>#wpd-bubble #wpd-bubble-add-message::before {
      border-left-color: #1DB99A;
      border-right-color: #1DB99A
    }

    #wpd-bubble-wrapper.wpd-right-corner>#wpd-bubble #wpd-bubble-add-message::before {
      border-left-color: #1DB99A;
      border-right-color: #1DB99A
    }

    .wpd-inline-icon-wrapper path.wpd-inline-icon-first {
      fill: #1DB99A
    }

    .wpd-inline-icon-count {
      background-color: #1DB99A
    }

    .wpd-inline-icon-count::before {
      border-right-color: #1DB99A
    }

    .wpd-inline-form-wrapper::before {
      border-bottom-color: #1DB99A
    }

    .wpd-inline-form-question {
      background-color: #1DB99A
    }

    .wpd-inline-form {
      background-color: #1DB99A
    }

    .wpd-last-inline-comments-wrapper {
      border-color: #1DB99A
    }

    .wpd-last-inline-comments-wrapper::before {
      border-bottom-color: #1DB99A
    }

    .wpd-last-inline-comments-wrapper .wpd-view-all-inline-comments {
      background: #1DB99A
    }

    .wpd-last-inline-comments-wrapper .wpd-view-all-inline-comments:hover,
    .wpd-last-inline-comments-wrapper .wpd-view-all-inline-comments:active,
    .wpd-last-inline-comments-wrapper .wpd-view-all-inline-comments:focus {
      background-color: #1DB99A
    }

    #wpdcom .ql-snow .ql-tooltip[data-mode="link"]::before {
      content: "Enter link:"
    }

    #wpdcom .ql-snow .ql-tooltip.ql-editing a.ql-action::after {
      content: "Enregistrer"
    }

    .comments-area {
      width: auto
    }
  </style>
  <link rel="stylesheet" id="wpdiscuz-fa-css"
    href="https://mangas-origines.fr/wp-content/plugins/wpdiscuz/assets/third-party/font-awesome-5.13.0/css/fa.min.css?ver=7.6.10"
    type="text/css" media="all">
  <link rel="stylesheet" id="quill-css-css"
    href="https://mangas-origines.fr/wp-content/plugins/wpdiscuz/assets/third-party/quill/quill.snow.css?ver=1.3.6"
    type="text/css" media="all">
  <link rel="stylesheet" id="wpdiscuz-mu-css-css"
    href="https://mangas-origines.fr/wp-content/plugins/wpdiscuz/assets/css/wpdiscuz-mu-frontend.css?ver=6.3.2"
    type="text/css" media="all">
  <link rel="stylesheet" id="wpdiscuz-user-content-css-css"
    href="https://mangas-origines.fr/wp-content/plugins/wpdiscuz/assets/css/wpdiscuz-user-content.css?ver=7.6.10"
    type="text/css" media="all">
  <link rel="stylesheet" id="bootstrap-css"
    href="https://mangas-origines.fr/wp-content/themes/madara/css/bootstrap.min.css?ver=4.3.1" type="text/css"
    media="all">
  <link rel="stylesheet" id="slick-css"
    href="https://mangas-origines.fr/wp-content/themes/madara/js/slick/slick.css?ver=1.9.0" type="text/css" media="all">
  <link rel="stylesheet" id="slick-theme-css"
    href="https://mangas-origines.fr/wp-content/themes/madara/js/slick/slick-theme.css?ver=6.3.2" type="text/css"
    media="all">
  <link rel="stylesheet" id="madara-css-child-css"
    href="https://mangas-origines.fr/wp-content/themes/madara/style.css?ver=1.0.2" type="text/css" media="all">
  <link rel="stylesheet" id="fontawesome-css"
    href="https://mangas-origines.fr/wp-content/themes/madara/app/lib/fontawesome/web-fonts-with-css/css/all.min.css?ver=5.15.3"
    type="text/css" media="all">
  <link rel="stylesheet" id="ionicons-css"
    href="https://mangas-origines.fr/wp-content/themes/madara/css/fonts/ionicons/css/ionicons.min.css?ver=4.5.10"
    type="text/css" media="all">
  <link rel="stylesheet" id="madara-icons-css"
    href="https://mangas-origines.fr/wp-content/themes/madara/css/fonts/ct-icon/ct-icon.css?ver=6.3.2" type="text/css"
    media="all">
  <link rel="stylesheet" id="loaders-css"
    href="https://mangas-origines.fr/wp-content/themes/madara/css/loaders.min.css?ver=6.3.2" type="text/css"
    media="all">
  <link rel="stylesheet" id="madara-css-css"
    href="https://mangas-origines.fr/wp-content/themes/madara-child-tp/style.css?ver=1.6.6" type="text/css" media="all">
  <style id="madara-css-inline-css" type="text/css">
    :root {
      --madara-main-color: #eb3349;
    }

    #pageloader.spinners {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 99999;
      background: #222
    }

    p.madara-unyson {
      color: #FF0000;
    }

    .table.table-hover.list-bookmark tr:last-child td {
      text-align: center;
    }

    #adminmenu .wp-submenu li.current {
      display: none !important;
    }

    .show_tgmpa_version {
      float: right;
      padding: 0em 1.5em 0.5em 0;
    }

    .tgmpa>h2 {
      font-size: 23px;
      font-weight: 400;
      line-height: 29px;
      margin: 0;
      padding: 9px 15px 4px 0;
    }

    .update-php {
      width: 100%;
      height: 98%;
      min-height: 850px;
      padding-top: 1px;
    }

    @media only screen and (-webkit-min-device-pixel-ratio: 2),
    (min-resolution: 192dpi) {

      /* Retina Logo */
      .site-header .c-header__top .wrap_branding a {
        background: url(https://mangas-origines.fr/wp-content/uploads/2023/06/logos_oritest.png) no-repeat center;
        background-size: contain;
        display: block;
        max-width: 100%
      }

      .site-header .c-header__top .wrap_branding a img {
        opacity: 0;
        visibility: hidden;
      }
    }

    .c-blog-post .entry-content .entry-content_wrap .read-container img.alignleft {
      margin: 10px 30px 10px 0 !important;
    }

    .c-blog-post .entry-content .entry-content_wrap .read-container img.alignright {
      margin: 10px 0px 10px 30px !important;
    }

    .read-container i.fas.fa-spinner.fa-spin {
      font-size: 31px;
      color: #888;
    }

    .c-blog-post .entry-content .entry-content_wrap .read-container img {
      cursor: pointer;
    }

    .choose-avatar .loading-overlay {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.72);
      z-index: 1;
      display: none;
    }

    .choose-avatar .loading-overlay i.fas.fa-spinner {
      font-size: 40px;
      color: #ec3348;
    }

    .choose-avatar .loading-overlay .loading-icon {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }

    .choose-avatar.uploading .loading-overlay {
      display: block;
    }

    .site-header .c-sub-header-nav .entry-header {
      display: none;
      margin-bottom: 15px;
    }

    .site-header .c-sub-header-nav.sticky .entry-header {
      display: block;
    }

    .site-header .c-sub-header-nav.hide-sticky-menu.sticky .c-sub-nav_wrap {
      display: none;
    }

    .site-header .c-sub-header-nav.hide-sticky-menu .entry-header {
      margin-top: 15px;
    }

    body.page .c-page-content .c-page .c-page__content .page-content-listing .page-listing-item .page-item-detail .item-summary .list-chapter .chapter-item span.vol.font-meta {
      display: none
    }

    .chapter-type-manga .c-blog-post .entry-content .entry-content_wrap .reading-content::before {
      content: ' ';
      display: block;
      width: 100%;
      height: 100%;
      position: absolute;
    }

    body.modal-open .modal .modal-dialog,
    body.modal-open .modal .modal-content .modal-loading-screen {
      background-image: none;
      background-color: #161616;
      background-image: url(https://mangas-origines.fr/wp-content/uploads/2023/06/login-mo.jpg);
      background-repeat: no-repeat;
    }

    @media (max-width: 480px) {
      .c-blog-post .entry-content .entry-content_wrap .reading-content {
        margin-left: -15px;
        margin-right: -15px
      }
    }

    .page-listing-item .post-title h3,
    .slider__content_item h4 {
      -webkit-line-clamp: 1;
    }

    .settings-page table.list-bookmark>tbody tr td>div.mange-name:before {
      content: "Nom de l’œuvre ";
    }

    .settings-page table.list-bookmark>tbody tr td>div.action:before {
      content: "Modifier";
    }

    .settings-page table.list-bookmark>tbody tr td>div.post-on:before {
      content: "Mis à jour";
    }
  </style>
  <script async="" src="https://mangas-origines.fr/wp-content/plugins/perfmatters/js/analytics.js"></script>
  <script type="text/javascript" src="https://mangas-origines.fr/wp-includes/js/jquery/jquery.min.js?ver=3.7.0"
    id="jquery-core-js"></script>
  <script type="text/javascript" src="https://mangas-origines.fr/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.4.1"
    id="jquery-migrate-js"></script>
  <script type="text/javascript" src="https://mangas-origines.fr/wp-content/themes/madara/js/bootstrap.min.js?ver=4.6.0"
    id="bootstrap-js"></script>
  <script type="text/javascript" src="https://mangas-origines.fr/wp-content/themes/madara/js/shuffle.min.js?ver=5.3.0"
    id="shuffle-js"></script>
  <script type="text/javascript" id="madara-js-js-extra">
    /* <![CDATA[ */
    var madara = { "ajaxurl": "https:\/\/mangas-origines.fr\/wp-admin\/admin-ajax.php", "query_vars": { "manga-core": "95-solo-leveling", "post_type": "wp-manga", "name": "95-solo-leveling", "chapter": "chapitre-170", "error": "", "m": "", "p": 0, "post_parent": "", "subpost": "", "subpost_id": "", "attachment": "", "attachment_id": 0, "pagename": "", "page_id": 0, "second": "", "minute": "", "hour": "", "day": 0, "monthnum": 0, "year": 0, "w": 0, "category_name": "", "tag": "", "cat": "", "tag_id": "", "author": "", "author_name": "", "feed": "", "tb": "", "paged": 0, "meta_key": "", "meta_value": "", "preview": "", "s": "", "sentence": "", "title": "", "fields": "", "menu_order": "", "embed": "", "category__in": [], "category__not_in": [], "category__and": [], "post__in": [], "post__not_in": [], "post_name__in": [], "tag__in": [], "tag__not_in": [], "tag__and": [], "tag_slug__in": [], "tag_slug__and": [], "post_parent__in": [], "post_parent__not_in": [], "author__in": [], "author__not_in": [], "search_columns": [], "ignore_sticky_posts": false, "suppress_filters": false, "cache_results": true, "update_post_term_cache": true, "update_menu_item_cache": false, "lazy_load_term_meta": true, "update_post_meta_cache": true, "posts_per_page": 12, "nopaging": false, "comments_per_page": "50", "no_found_rows": false, "order": "DESC" }, "current_url": "https:\/\/mangas-origines.fr\/oeuvre\/95-solo-leveling\/chapitre-170", "cursorPrev": "https:\/\/mangas-origines.fr\/wp-content\/themes\/madara\/images\/cursorLeft.png", "cursorNext": "https:\/\/mangas-origines.fr\/wp-content\/themes\/madara\/images\/cursorRight.png" };
    /* ]]> */
  </script>
  <script type="text/javascript" src="https://mangas-origines.fr/wp-content/themes/madara/js/template.js?ver=1.7.3"
    id="madara-js-js"></script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-content/themes/madara-child-tp/assets/js/child.js?ver=6.3.2"
    id="madara-child-js-js"></script>

  <script type="text/javascript" src="https://www.googletagmanager.com/gtag/js?id=UA-177067753-1" id="google_gtagjs-js"
    async=""></script>
  <script id="google_gtagjs-js-after" type="text/javascript">
    window.dataLayer = window.dataLayer || []; function gtag() { dataLayer.push(arguments); }
    gtag('set', 'linker', { "domains": ["mangas-origines.fr"] });
    gtag("js", new Date());
    gtag("set", "developer_id.dZTNiMT", true);
    gtag("config", "UA-177067753-1", { "anonymize_ip": true });
    gtag("config", "G-DPGCMVGV83");
  </script>

  <link rel="canonical" href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-170/">
  <link rel="shortlink" href="https://mangas-origines.fr/?p=253">
  <meta name="generator" content="Site Kit by Google 1.111.0">
  <script>(function (i, s, o, g, r, a, m) {
      i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
        (i[r].q = i[r].q || []).push(arguments)
      }, i[r].l = 1 * new Date(); a = s.createElement(o),
        m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
    })(window, document, 'script', 'https://mangas-origines.fr/wp-content/plugins/perfmatters/js/analytics.js', 'ga'); ga('create', '279036660', 'auto'); ga('set', 'allowAdFeatures', false); ga('send', 'pageview');</script>

  <meta name="google-adsense-platform-account" content="ca-host-pub-2644536267352236">
  <meta name="google-adsense-platform-domain" content="sitekit.withgoogle.com">


  <script async="async"
    src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7918463289472920&amp;host=ca-host-pub-2644536267352236"
    crossorigin="anonymous" type="text/javascript"></script>

  <link rel="icon" href="https://mangas-origines.fr/wp-content/uploads/2023/07/cropped-favmo3-32x32.png" sizes="32x32">
  <link rel="icon" href="https://mangas-origines.fr/wp-content/uploads/2023/07/cropped-favmo3-192x192.png"
    sizes="192x192">
  <link rel="apple-touch-icon" href="https://mangas-origines.fr/wp-content/uploads/2023/07/cropped-favmo3-180x180.png">
  <meta name="msapplication-TileImage"
    content="https://mangas-origines.fr/wp-content/uploads/2023/07/cropped-favmo3-270x270.png">
  <style type="text/css" id="wp-custom-css">
    site-header .main-navigation.style-1,
    .widget-heading,
    .widget.background::after,
    .c-blog__heading.style-2 i,
    .tab-wrap .c-nav-tabs ul.c-tabs-content li.active a::after,
    .tab-wrap .c-nav-tabs ul.c-tabs-content li:hover a::after,
    .tab-wrap .c-nav-tabs ul.c-tabs-content li a::after,
    .related-heading.font-nav,
    .c-blog__heading.style-3,
    .settings-page .nav-tabs-wrap ul.nav-tabs li.active a,
    .off-canvas {
      background: #191919 !important;
    }

    body.text-ui-light .body-wrap {
      background-color: #14161c;
    }

    h5,
    .h5 {
      font-size: 14px !important;
    }

    .manga-rate-view-comment {
      border: 2px solid grey;
      padding: 8px 10px;
      display: inline-block;
      margin: 0 0 16px 0;
      border-radius: 8px;
    }

    .manga-rate-view-comment .fa-thumbs-up {
      color: #009fe3;
    }

    body.manga-page .profile-manga .tab-summary .summary_image img {
      border-radius: 0.5em;
      box-shadow: rgba(0, 0, 0, 0.56) 0px 8px 24px;
    }

    body.text-ui-light .widget.c-popular .popular-item-wrap,
    body.text-ui-light .c-blog__heading.style-2,
    body.text-ui-light .c-blog__heading.style-2 {
      border-bottom-width: 0px;
    }

    #manga-chapters-holder .c-blog__heading.style-2 {
      border-bottom-width: 0px;
    }

    body.manga-page .profile-manga .post-title h1 {
      margin-top: 14px;
      font-size: 30px;
      font-weight: bolder;
      color: white;
    }

    .site-header .main-navigation.style-1 .wrap_branding a img {
      max-width: 200px;
    }

    .c-top-sidebar {
      background: #14161c !important;
    }

    .c-top-second-sidebar {
      background: #14161c !important;
    }

    .manga-slider.style-3 .slider__container {
      -webkit-box-shadow: 0px 5px 15px 0px rgba(0, 0, 0, 0);
      -moz-box-shadow: 0px 5px 15px 0px rgba(0, 0, 0, 0);
      box-shadow: 0px 5px 15px 0px rgba(0, 0, 0, 0);
    }

    h4,
    .h4 {
      font-size: 24px;
    }

    .font-heading {
      text-transform: inherit;
    }

    body.page .c-page-content .c-page .c-page__content .page-content-listing .page-listing-item {
      border-bottom: 0px solid #ebebeb;
    }

    .site-header .search-main-menu form input[type="text"] {
      border-radius: 9px;
    }

    .site-header .search-main-menu form input[type="submit"] {
      background: #009fe3;
      border-radius: 7px;
    }

    body.text-ui-light .site-header .c-header__top .search-main-menu {
      background-color: #14161c !important;
    }

    body.text-ui-light .navigation-ajax .load-ajax {
      background-color: #cccccc0d;
      color: #FFF;
      border-color: transparent;
      border-radius: 0.5em;
    }

    body.text-ui-light .navigation-ajax .load-ajax:hover {
      background-color: #009fe36b;
    }

    body.page.text-ui-light .c-page-content .c-page .c-page__content .page-content-listing .page-listing-item .page-item-detail .item-summary .list-chapter .chapter-item .chapter a:hover,
    .text-ui-light .widget.c-popular .popular-item-wrap .popular-content .chapter-item .chapter a:hover,
    body.text-ui-light .settings-page .list-chapter .chapter-item .chapter a:hover,
    body.search.text-ui-light .search-wrap .tab-content-wrap .c-tabs-item .c-tabs-item__content .tab-meta .latest-chap .chapter a:hover {
      color: #009fe3;
    }

    body.page .manga-tp-slider .related__container .related__item .related__content a:hover {
      color: #009fe3;
    }

    a:hover {
      color: #009fe3 !important;
    }

    .c-new-tag {
      background: url('https://mangas-origines.fr/wp-content/themes/madara/images/new-icon.png') center center no-repeat !important;
    }

    body.manga-page .page-content-listing.single-page .listing-chapters_wrap>ul.main.version-chap li::after,
    .shortcode-manga-chapters .listing-chapters_wrap>ul.main.version-chap li::after {
      height: 0px !important;
    }

    body.manga-page .profile-manga .tab-summary .post-content_item .summary-content .genres-content {
      margin-bottom: 45px !important;
      display: flex !important;
      flex-wrap: wrap !important;
      column-gap: 6px;

    }

    body.manga-page .page-content-listing.single-page .listing-chapters_wrap>ul.version-chap>li>a,
    body.manga-page .page-content-listing.single-page .listing-chapters_wrap>ul.vol-chap>li>a,
    .shortcode-manga-chapters .listing-chapters_wrap>ul.version-chap>li>a,
    .shortcode-manga-chapters .listing-chapters_wrap>ul.vol-chap>li>a {
      font-weight: 400 !important;
    }

    body.manga-page.text-ui-light .listing-chapters_wrap.show-more .version-chap::after {
      background: -webkit-linear-gradient(top, rgba(0, 0, 0, 0), #14161c) !important;
      background: -moz-linear-gradient(top, rgba(0, 0, 0, 0), #14161c) !important;
    }

    .manga-tp-slider .slider__container .slick-dots li.slick-active button::before {
      color: #009fe3 !important;
    }

    .manga-title-badges.custom {
      float: left;
      border-radius: 0.5em;
      width: 60px;
      height: 24px;
      text-align: center;
      padding-left: 5px;
      margin-top: 2px;
      backdrop-filter: blur(10px) !important;
      box-shadow: rgba(0, 0, 0, 0.76) 0px 3px 4px 0px !important;
      background-color: #0000008c;
    }

    .manga-title-badges.manhwa {
      background: #2493ba73 !important;
    }

    .manga-title-badges.hot {
      background: #ff60008c !important;
    }

    .manga-title-badges.manga {
      background-color: #ffeb9e8c !important;
    }

    .manga-title-badges.manhua {
      background: #36af7d87 !important;
    }

    .related__content_item .manga-title-badges {
      margin-right: 2px;
      display: none !important;
    }

    #manga-chapters-sidebar {
      width: 242px !important;
      background: #000000ad;
      padding-left: 2em !important;
      box-shadow: rgba(0, 0, 0, 0.2) 0px 7px 29px 0px !important;
      backdrop-filter: blur(20px);
    }

    .text-ui-light .tp-heroslider .slider_item_inner {
      border-color: #575960 !important;
      background: #181a20 !important;
    }

    .c-btn.c-btn_style-1 {
      background-color: #39738c !important;
      color: white;
    }

    .c-btn.c-btn_style-1:hover {
      color: white !important;
      background-color: black !important;
    }

    #init-links .c-btn.c-btn_style-1,
    .c-btn.c-btn_style-1 {
      border-radius: 0.5em !important;
    }

    body.text-ui-light.search .search-wrap .tab-content-wrap .c-tabs-item .c-tabs-item__content .tab-summary .post-content {
      background-color: rgba(235, 235, 235, 0.06) !important;
      border-radius: 0.5em !important;
    }

    .manga-title-badges {
      left: 7px !important;
      top: 4px !important;
    }

    body.text-ui-light .site-footer {
      background-color: #272a31 !important;
      border: none !important;
    }

    site-header .main-navigation.style-1,
    .widget-heading,
    .widget.background::after,
    .c-blog__heading.style-2 i,
    .tab-wrap .c-nav-tabs ul.c-tabs-content li.active a::after,
    .tab-wrap .c-nav-tabs ul.c-tabs-content li:hover a::after,
    .tab-wrap .c-nav-tabs ul.c-tabs-content li a::after,
    .related-heading.font-nav,
    .c-blog__heading.style-3,
    .settings-page .nav-tabs-wrap ul.nav-tabs li.active a,
    .off-canvas {
      background: #0a0b0e !important;
    }

    .off-canvas ul.main-navbar>li {
      border: none !important;
    }

    .off-canvas ul.main-navbar li a {
      font-weight: bolder !important;
    }

    .listing-chapters_wrap .wp-manga-chapter a,
    body.text-ui-light .listing-chapters_wrap .wp-manga-chapter a:not(:hover) {
      font-size: 16px !important;
    }

    .site-header .c-header__top .manga-autocomplete.ui-autocomplete,
    .c-search-header__wrapper .manga-autocomplete.ui-autocomplete {
      box-shadow: 1px 1px 3px #0f0f0f;
      background-color: #14161c3d;
      border: none !important;
      backdrop-filter: blur(30px);
      margin-top: 10px;
      border-radius: 10px !important;
    }

    .site-header .c-header__top .manga-autocomplete.ui-autocomplete>li:not(.last-child),
    .c-search-header__wrapper .manga-autocomplete.ui-autocomplete>li:not(.last-child) {
      border-bottom: none !important;
    }

    body.text-ui-light,
    #wpdcom,
    #wpdcom .wpd-comment-text {
      color: #f5f5f5 !important;
    }

    .site-header .c-header__top .manga-autocomplete.ui-autocomplete>li:hover,
    .c-search-header__wrapper .manga-autocomplete.ui-autocomplete>li:hover {
      background-color: rgb(20, 22, 28) !important;
      font-size: 15px !important;
      transition: font-size .2s !important;
      transition: all .2s ease-in-out;
    }

    .site-header .c-header__top .manga-autocomplete.ui-autocomplete>li:not(:hover),
    .c-search-header__wrapper .manga-autocomplete.ui-autocomplete>li:not(:hover) {
      font-size: 14px !important;
      transition: font-size .2s !important;
      transition: all .2s ease-in-out;
    }

    body.page .manga-tp-slider .related__container .related__item .related__thumb .related__thumb_item:not(:hover) {
      transform: scale(1.0);
      transition: all .2s;
    }

    body.page .manga-tp-slider .related__container .related__item .related__thumb .related__thumb_item:hover {
      transform: scale(1.05);
      transition: all .2s;
    }

    .site-header .main-navigation .search-navigation .menu-search .open-search-main-menu {
      width: 50px;
      height: 30px;
      font-size: 20px;
      line-height: 31px;
      margin-top: 7px;
    }

    .site-header .main-navigation .search-navigation .menu-search .open-search-main-menu {
      border-radius: 8px;
    }

    body.manga-page .profile-manga .tab-summary .manga-rate-view-comment .post-rating {
      backdrop-filter: blur(10px);
      padding: 0.5em;
      background: #00000038 !important;
      border-radius: 10px;
    }

    body.manga-page.text-ui-light .summary__content.show-more::after {
      background: -moz-linear-gradient(top, rgba(0, 0, 0, 0), #14161c) !important;
    }

    @media (max-width: 480px) {

      .manga-title-badges,
      .manga-title-badges.custom {
        line-height: 2em !important;
      }

      .tp-heroslider .slick-slide img {
        min-width: 300px !important;
      }

      body.reading-manga .entry-header .select-pagination .nav-links,
      body.reading-manga .c-select-bottom .select-pagination .nav-links {
        margin: 4px 30px !important;
      }

      .reading-manga .reading-content {
        padding: 0 0px;
      }
    }

    #hover-infor .infor_items {
      backdrop-filter: blur(20px) !important;
      box-shadow: rgba(41, 41, 41, 0.76) 0px 3px 4px 0px !important;
      background-color: none;
      border-radius: 1em !important;

    }

    body.text-ui-light #hover-infor {
      background-color: #00000091 !important;
      border-radius: 1em !important;
    }

    .manga-tp-slider .slick-slide img {
      aspect-ratio: 3/4.5;
      object-fit: cover;
    }

    .view {
      color: grey;
    }

    .listing-chapters_wrap .view {
      margin-left: 1rem;
    }

    .manga-slider.style-3 .slider__container {
      margin-bottom: 0px;
      padding: 0px;
    }

    .manga-slider .slider__container .slick-list .slick-track .slider__item .slider__content .slider__content_item .post-title h4 {
      font-size: 17px;
    }

    picture {
      padding-top: 0px !important;
    }

    .ranking .page-listing-item .page-item-detail .item-thumb::before {
      left: 75% !important;
      background: #2f353e !important;
      border-radius: 0em 0em 0.3em 0.3em;
    }

    .modal-footer {
      border: 0px solid white;
    }

    body.modal-open .modal .modal-content {
      border: 0px solid white;
    }

    body.modal-open .modal .modal-dialog,
    body.modal-open .modal .modal-content .modal-loading-screen {
      border-radius: 0.5em;
    }

    body.modal-open .modal .modal-content .modal-body .login label {
      color: white;
    }

    body.modal-open .modal .modal-content .modal-body .login .submit .wp-submit {
      background-color: #418da4;
    }

    .text-ui-light .main-navigation .main-menu ul.main-navbar>li.menu-item-login,
    .text-ui-light .main-navigation .main-menu ul.main-navbar>li.menu-item-register {
      display: none;
    }
  </style>
  <script type="application/ld+json">
						{
							"@context": "http://schema.org",
							"@type": "Article",
							"mainEntityOfPage": {
								"@type": "WebPage",
								"@id": "https://google.com/article"
							},
							"headline": "Solo Leveling",
							"image": {
								"@type": "ImageObject",
								"url": "https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic.jpg",
								"height": 391,
								"width": 696							},
							"datePublished": "2023-06-19 14:22:53",
							"dateModified": "2023-10-14 21:40:08",
							"author": {
								"@type": "Person",
								"name": "admin"
							},
							"publisher": {
								"@type": "Organization",
								"name": "Mangas Origines",
								"logo": {
									"@type": "ImageObject",
									"url": "https://mangas-origines.fr/wp-content/uploads/2023/06/logos_oritest.png"
								}
							},
							"description": "Solo Leveling. Chapitre 170. Depuis qu&#039;un portail connectant notre monde à un monde peuplé de monstres et de créatures en tout genre est apparu, des personnes &quot;ordinaires&quot; ont acquis la capac"
						}
					</script>
  <meta property="og:type" content="article">
  <meta property="og:image"
    content="https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-1200x630.jpg">
  <meta property="og:site_name" content="Mangas Origines">
  <meta property="fb:app_id" content="">
  <meta property="og:title" content="Solo Leveling - Chapitre 170 - Mangas Origines">
  <meta property="og:url" content="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-170/">
  <meta property="og:description"
    content="Solo Leveling. Chapitre 170. Depuis qu'un portail connectant notre monde à un monde peuplé de monstres et de créatures en tout genre est apparu, des personnes &quot;ordinaires&quot; ont acquis la capac">
  <meta name="twitter:card" content="summary">
  <meta name="twitter:site" content="@Mangas Origines">
  <meta name="twitter:title" content="Solo Leveling - Chapitre 170 - Mangas Origines">
  <meta name="twitter:description"
    content="Solo Leveling. Chapitre 170. Depuis qu'un portail connectant notre monde à un monde peuplé de monstres et de créatures en tout genre est apparu, des personnes &quot;ordinaires&quot; ont acquis la capac">
  <meta name="twitter:url" content="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-170/">
  <meta name="twitter:image"
    content="https://mangas-origines.fr/wp-content/uploads/2023/06/solo-leveling-vol-3-comic-1200x630.jpg">
  <meta name="description"
    content="Solo Leveling. Chapitre 170. Depuis qu'un portail connectant notre monde à un monde peuplé de monstres et de créatures en tout genre est apparu, des personnes &quot;ordinaires&quot; ont acquis la capac">
  <meta name="generator" content="Powered by Madara - A powerful manga, novel theme from Mangabooth.com">
  <noscript>
    <style>
      .perfmatters-lazy[data-src] {
        display: none !important;
      }
    </style>
  </noscript>
  <style>
    .perfmatters-lazy.pmloaded,
    .perfmatters-lazy.pmloaded>img,
    .perfmatters-lazy>img.pmloaded,
    .perfmatters-lazy[data-ll-status=entered] {
      animation: 500ms pmFadeIn
    }

    @keyframes pmFadeIn {
      0% {
        opacity: 0
      }

      100% {
        opacity: 1
      }
    }
  </style>
</head>

<body
  class="wp-manga-template-default single single-wp-manga postid-253 wp-embed-responsive wp-manga-page reading-manga click-to-scroll keyboard-navigate page header-style-1 text-ui-light manga-reading-list-style wpdiscuz_7.6.10">
  <div class="wrap">
    <div class="body-wrap">
      <header class="site-header">
        <div class="c-header__top">
          <ul class="search-main-menu">
            <li>
              <form id="blog-post-search" class="ajax manga-search-form" action="https://mangas-origines.fr/"
                method="get">
                <input type="text" placeholder="Rechercher..." name="s" value=""
                  class="manga-search-field ui-autocomplete-input" autocomplete="off">
                <input type="submit" value="Rechercher">
                <div class="loader-inner line-scale">
                  <div></div>
                  <div></div>
                  <div></div>
                  <div></div>
                  <div></div>
                </div>
                <input type="hidden" name="post_type" value="wp-manga">
                <ul id="ui-id-1" tabindex="0" class="ui-menu ui-widget ui-widget-content ui-autocomplete ui-front"
                  unselectable="on" style="display: none;"></ul>
              </form>
            </li>
          </ul>
          <div class="main-navigation style-1 ">
            <div class="container ">
              <div class="row">
                <div class="col-md-12">
                  <div class="main-navigation_wrap">
                    <div class="wrap_branding">
                      <a class="logo" href="https://mangas-origines.fr/" title="Mangas Origines">
                        <img width="591" height="143" class="img-responsive"
                          src="https://mangas-origines.fr/wp-content/uploads/2023/06/logos_oritest.png"
                          alt="Mangas Origines">
                      </a>
                    </div>
                    <div class="main-menu">
                      <ul class="nav navbar-nav main-navbar">
                        <li id="menu-item-1953"
                          class="menu-item-login menu-item menu-item-type-custom menu-item-object-custom menu-item-1953">
                          <a href="https://mangas-origines.fr/wp-login.php"><i class="fa fa-sign-in"
                              aria-hidden="true"></i> Connexion</a></li>
                        <li id="menu-item-1954"
                          class="menu-item-register menu-item menu-item-type-custom menu-item-object-custom menu-item-1954">
                          <a href="https://mangas-origines.fr/wp-login.php?action=register">S’inscrire</a></li>
                        <li id="menu-item-193"
                          class="menu-item menu-item-type-post_type menu-item-object-page menu-item-home menu-item-193">
                          <a href="https://mangas-origines.fr/">Accueil</a></li>
                        <li id="menu-item-194"
                          class="menu-item menu-item-type-post_type menu-item-object-page menu-item-194"><a
                            href="https://mangas-origines.fr/new/">Nouveautés</a></li>
                        <li id="menu-item-195"
                          class="menu-item menu-item-type-post_type menu-item-object-page menu-item-195"><a
                            href="https://mangas-origines.fr/catalogues/">Catalogue</a></li>
                        <li id="menu-item-196"
                          class="menu-item menu-item-type-post_type menu-item-object-page menu-item-196"><a
                            href="https://mangas-origines.fr/ranking/">Classement</a></li>
                      </ul>
                    </div>
                    <div class="search-navigation search-sidebar">
                      <div id="manga-search-2"
                        class="widget col-12 col-md-12   default  no-icon heading-style-1 manga-widget widget-manga-search">
                        <div class="widget__inner manga-widget widget-manga-search__inner c-widget-wrap">
                          <div class="widget-content">
                            <div class="search-navigation__wrap">
                              <script>
                                jQuery(document).ready(function ($) {
                                  if ($('.c-header__top .manga-search-form').length !== 0 && $('.c-header__top .manga-search-form.search-form').length !== 0) {

                                    $('form#blog-post-search').append('<input type="hidden" name="post_type" value="wp-manga">');

                                    $('form#blog-post-search').addClass("manga-search-form");

                                    $('form#blog-post-search input[name="s"]').addClass("manga-search-field");

                                    $('form.manga-search-form.ajax input.manga-search-field').each(function () {

                                      var searchIcon = $(this).parent().children('.ion-ios-search-strong');

                                      var append = $(this).parent();

                                      $(this).autocomplete({
                                        appendTo: append,
                                        source: function (request, resp) {
                                          $.ajax({
                                            url: manga.ajax_url,
                                            type: 'POST',
                                            dataType: 'json',
                                            data: {
                                              action: 'wp-manga-search-manga',
                                              title: request.term,
                                            },
                                            success: function (data) {
                                              resp($.map(data.data, function (item) {
                                                if (true == data.success) {
                                                  return {
                                                    label: item.title,
                                                    value: item.title,
                                                    url: item.url,
                                                    type: item.type
                                                  }
                                                } else {
                                                  return {
                                                    label: item.message,
                                                    value: item.message,
                                                    type: item.type,
                                                    click: false
                                                  }
                                                }
                                              }))
                                            }
                                          });
                                        },
                                        select: function (e, ui) {
                                          if (ui.item.url) {
                                            window.location.href = ui.item.url;
                                          } else {
                                            if (ui.item.click) {
                                              return true;
                                            } else {
                                              return false;
                                            }
                                          }
                                        },
                                        open: function (e, ui) {
                                          var acData = $(this).data('uiAutocomplete');
                                          acData.menu.element.addClass('manga-autocomplete').find('li div').each(function () {
                                            var $self = $(this),
                                              keyword = $.trim(acData.term).split(' ').join('|');
                                            $self.html($self.text().replace(new RegExp("(" + keyword + ")", "gi"), '<span class="manga-text-highlight">$1</span>'));
                                          });
                                        }
                                      }).autocomplete("instance")._renderItem = function (ul, item) {
                                        return $("<li class='search-item'>")
                                          .append("<div class='manga-type-" + item.type + "'>" + item.label + "</div>")
                                          .appendTo(ul);
                                      };
                                    });
                                  }
                                });
                              </script>
                              <ul class="main-menu-search nav-menu">
                                <li class="menu-search">
                                  <a href="javascript:;" class="open-search-main-menu"> <i
                                      class="icon ion-ios-search"></i>
                                    <i class="icon ion-android-close"></i> </a>
                                  <ul class="search-main-menu">
                                    <li>
                                      <form class="manga-search-form search-form ajax"
                                        action="https://mangas-origines.fr/" method="get">
                                        <input class="manga-search-field ui-autocomplete-input" type="text"
                                          placeholder="Search..." name="s" value="" autocomplete="off">
                                        <input type="hidden" name="post_type" value="wp-manga"> <i
                                          class="icon ion-ios-search"></i>
                                        <div class="loader-inner ball-clip-rotate-multiple">
                                          <div></div>
                                          <div></div>
                                        </div>
                                        <input type="submit" value="Search">
                                        <ul id="ui-id-2" tabindex="0"
                                          class="ui-menu ui-widget ui-widget-content ui-autocomplete ui-front"
                                          unselectable="on" style="display: none;"></ul>
                                      </form>
                                    </li>
                                  </ul>
                                </li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class="c-togle__menu">
                        <button type="button" class="menu_icon__open">
                          <span></span> <span></span> <span></span>
                        </button>
                        <span class="title">Menu</span>
                      </div>
                      <ul id="secondary-menu" class="">
                        <li id="menu-item-286"
                          class="menu-item menu-item-type-post_type menu-item-object-page menu-item-286"><a
                            href="https://mangas-origines.fr/parametres/"><i class="fa fa-bookmark"
                              aria-hidden="true"></i><span>Favoris</span></a></li>
                      </ul>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="mobile-menu menu-collapse off-canvas">
          <div class="close-nav">
            <button class="menu_icon__close">
              <span></span> <span></span>
            </button>
          </div>
          <nav class="off-menu">
            <ul id="menu-primary-menu-798" class="nav navbar-nav main-navbar">
              <li id="nav-menu-item-1953"
                class="main-menu-item menu-item-depth-0 menu-item-login menu-item menu-item-type-custom menu-item-object-custom">
                <a href="https://mangas-origines.fr/wp-login.php" class="menu-link  main-menu-link"><i
                    class="fa fa-sign-in" aria-hidden="true"></i> Connexion </a></li>
              <li id="nav-menu-item-1954"
                class="main-menu-item menu-item-depth-0 menu-item-register menu-item menu-item-type-custom menu-item-object-custom">
                <a href="https://mangas-origines.fr/wp-login.php?action=register"
                  class="menu-link  main-menu-link">S’inscrire </a></li>
              <li id="nav-menu-item-193"
                class="main-menu-item menu-item-depth-0 menu-item menu-item-type-post_type menu-item-object-page menu-item-home">
                <a href="https://mangas-origines.fr/" class="menu-link  main-menu-link">Accueil </a></li>
              <li id="nav-menu-item-194"
                class="main-menu-item menu-item-depth-0 menu-item menu-item-type-post_type menu-item-object-page"><a
                  href="https://mangas-origines.fr/new/" class="menu-link  main-menu-link">Nouveautés </a></li>
              <li id="nav-menu-item-195"
                class="main-menu-item menu-item-depth-0 menu-item menu-item-type-post_type menu-item-object-page"><a
                  href="https://mangas-origines.fr/catalogues/" class="menu-link  main-menu-link">Catalogue </a></li>
              <li id="nav-menu-item-196"
                class="main-menu-item menu-item-depth-0 menu-item menu-item-type-post_type menu-item-object-page"><a
                  href="https://mangas-origines.fr/ranking/" class="menu-link  main-menu-link">Classement </a></li>
            </ul>
          </nav>
          <div class="center"></div>
        </div>
      </header>
      <div class="site-content">
        <div class="c-page-content style-1 reading-content-wrap chapter-type-manga"
          data-site-url="https://mangas-origines.fr/">
          <div class="content-area">
            <div class="container">
              <div class="row">
                <div class="main-col col-md-12 col-sm-12 sidebar-hidden">
                  <h1 id="chapter-heading">
                    <a class="back" href="https://mangas-origines.fr/oeuvre/95-solo-leveling/"><i
                        class="fa fa-chevron-left"></i></a>
                    Chapitre 170 <a href="#" id="view-chapters"><span class="chapters"><i class="fa fa-bars"
                          aria-hidden="true"></i></span></a>
                    <a class="home" href="https://mangas-origines.fr/"><i class="fa fa-home"></i></a>
                  </h1>

                  <div class="main-col-inner">
                    <div class="c-blog-post">
                      <div class="entry-header header" id="manga-reading-nav-head" data-position="header"
                        data-chapter="chapitre-170" data-id="253">
                        <div class="wp-manga-nav">
                          <div class="entry-header_wrap">
                            <div class="c-breadcrumb-wrapper">
                              <div class="c-breadcrumb">
                                <ol class="breadcrumb">
                                  <li>
                                    <a href="https://mangas-origines.fr/">
                                      Accueil </a>
                                  </li>
                                  <li>
                                    <a href="https://mangas-origines.fr/catalogues/">
                                      Catalogue </a>
                                  </li>
                                  <li>
                                    <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/">
                                      Solo Leveling </a>
                                  </li>
                                  <li class="active">
                                    Chapitre 170 </li>
                                </ol>
                              </div>
                              <div class="action-icon">
                                <ul class="action_list_icon list-inline">
                                  <li>
                                    <script type="text/javascript"> var requireLogin2BookMark = true; </script><a
                                      href="#" class="wp-manga-action-button" data-action="bookmark" data-post="253"
                                      data-chapter="365" data-page="1" title="Favoris"><i
                                        class="icon ion-ios-bookmark"></i></a>
                                  </li>
                                  <li><a href="#" class="wp-manga-action-button" data-action="toggle-contrast"
                                      title="Toggle Dark/Light Mode"><i class="icon ion-md-contrast"></i></a></li>
                                </ul>
                              </div>
                            </div>
                          </div>
                          <div class="select-view">


                            <div class="chapters_selectbox_holder" data-manga="253" data-chapter="chapitre-170"
                              data-vol="0" data-type="manga" data-style="list">

                              <div class="c-selectpicker selectpicker_chapter" for="volume-id-0">
                                <label>
                                  <select class="selectpicker single-chapter-select">
                                    <option class="short " data-limit="40" value="chapitre-200"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-200/"
                                      data-navigation="">
                                      Chapitre 200 </option>
                                    <option class="short " data-limit="40" value="chapitre-199"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-199/"
                                      data-navigation="">
                                      Chapitre 199 </option>
                                    <option class="short " data-limit="40" value="chapitre-198"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-198/"
                                      data-navigation="">
                                      Chapitre 198 </option>
                                    <option class="short " data-limit="40" value="chapitre-197"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-197/"
                                      data-navigation="">
                                      Chapitre 197 </option>
                                    <option class="short " data-limit="40" value="chapitre-196"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-196/"
                                      data-navigation="">
                                      Chapitre 196 </option>
                                    <option class="short " data-limit="40" value="chapitre-195"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-195/"
                                      data-navigation="">
                                      Chapitre 195 </option>
                                    <option class="short " data-limit="40" value="chapitre-194"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-194/"
                                      data-navigation="">
                                      Chapitre 194 </option>
                                    <option class="short " data-limit="40" value="chapitre-193"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-193/"
                                      data-navigation="">
                                      Chapitre 193 </option>
                                    <option class="short " data-limit="40" value="chapitre-192"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-192/"
                                      data-navigation="">
                                      Chapitre 192 </option>
                                    <option class="short " data-limit="40" value="chapitre-191"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-191/"
                                      data-navigation="">
                                      Chapitre 191 </option>
                                    <option class="short " data-limit="40" value="chapitre-190"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-190/"
                                      data-navigation="">
                                      Chapitre 190 </option>
                                    <option class="short " data-limit="40" value="chapitre-189"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-189/"
                                      data-navigation="">
                                      Chapitre 189 </option>
                                    <option class="short " data-limit="40" value="chapitre-188"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-188/"
                                      data-navigation="">
                                      Chapitre 188 </option>
                                    <option class="short " data-limit="40" value="chapitre-187"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-187/"
                                      data-navigation="">
                                      Chapitre 187 </option>
                                    <option class="short " data-limit="40" value="chapitre-186"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-186/"
                                      data-navigation="">
                                      Chapitre 186 </option>
                                    <option class="short " data-limit="40" value="chapitre-185"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-185/"
                                      data-navigation="">
                                      Chapitre 185 </option>
                                    <option class="short " data-limit="40" value="chapitre-184"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-184/"
                                      data-navigation="">
                                      Chapitre 184 </option>
                                    <option class="short " data-limit="40" value="chapitre-183"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-183/"
                                      data-navigation="">
                                      Chapitre 183 </option>
                                    <option class="short " data-limit="40" value="chapitre-182"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-182/"
                                      data-navigation="">
                                      Chapitre 182 </option>
                                    <option class="short " data-limit="40" value="chapitre-181"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-181/"
                                      data-navigation="">
                                      Chapitre 181 </option>
                                    <option class="short " data-limit="40" value="chapitre-180"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-180/"
                                      data-navigation="">
                                      Chapitre 180 </option>
                                    <option class="short " data-limit="40" value="chapitre-179-5"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-179-5/"
                                      data-navigation="">
                                      Chapitre 179.5 - Un Petit Spoiler </option>
                                    <option class="short " data-limit="40" value="chapitre-179"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-179/"
                                      data-navigation="">
                                      Chapitre 179 </option>
                                    <option class="short " data-limit="40" value="chapitre-178"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-178/"
                                      data-navigation="">
                                      Chapitre 178 </option>
                                    <option class="short " data-limit="40" value="chapitre-177"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-177/"
                                      data-navigation="">
                                      Chapitre 177 </option>
                                    <option class="short " data-limit="40" value="chapitre-176"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-176/"
                                      data-navigation="">
                                      Chapitre 176 </option>
                                    <option class="short " data-limit="40" value="chapitre-175"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-175/"
                                      data-navigation="">
                                      Chapitre 175 </option>
                                    <option class="short " data-limit="40" value="chapitre-174"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-174/"
                                      data-navigation="">
                                      Chapitre 174 </option>
                                    <option class="short " data-limit="40" value="chapitre-173"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-173/"
                                      data-navigation="">
                                      Chapitre 173 </option>
                                    <option class="short " data-limit="40" value="chapitre-172"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-172/"
                                      data-navigation="">
                                      Chapitre 172 </option>
                                    <option class="short " data-limit="40" value="chapitre-171"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-171/"
                                      data-navigation="">
                                      Chapitre 171 </option>
                                    <option class="short " data-limit="40" value="chapitre-170"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-170/"
                                      data-navigation="" selected="selected">
                                      Chapitre 170 </option>
                                    <option class="short " data-limit="40" value="chapitre-169"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-169/"
                                      data-navigation="">
                                      Chapitre 169 </option>
                                    <option class="short " data-limit="40" value="chapitre-168"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-168/"
                                      data-navigation="">
                                      Chapitre 168 </option>
                                    <option class="short " data-limit="40" value="chapitre-167"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-167/"
                                      data-navigation="">
                                      Chapitre 167 </option>
                                    <option class="short " data-limit="40" value="chapitre-166"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-166/"
                                      data-navigation="">
                                      Chapitre 166 </option>
                                    <option class="short " data-limit="40" value="chapitre-165"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-165/"
                                      data-navigation="">
                                      Chapitre 165 </option>
                                    <option class="short " data-limit="40" value="chapitre-164"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-164/"
                                      data-navigation="">
                                      Chapitre 164 </option>
                                    <option class="short " data-limit="40" value="chapitre-163"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-163/"
                                      data-navigation="">
                                      Chapitre 163 </option>
                                    <option class="short " data-limit="40" value="chapitre-162"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-162/"
                                      data-navigation="">
                                      Chapitre 162 </option>
                                    <option class="short " data-limit="40" value="chapitre-161"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-161/"
                                      data-navigation="">
                                      Chapitre 161 </option>
                                    <option class="short " data-limit="40" value="chapitre-160"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-160/"
                                      data-navigation="">
                                      Chapitre 160 </option>
                                    <option class="short " data-limit="40" value="chapitre-159"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-159/"
                                      data-navigation="">
                                      Chapitre 159 </option>
                                    <option class="short " data-limit="40" value="chapitre-158"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-158/"
                                      data-navigation="">
                                      Chapitre 158 </option>
                                    <option class="short " data-limit="40" value="chapitre-157"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-157/"
                                      data-navigation="">
                                      Chapitre 157 </option>
                                    <option class="short " data-limit="40" value="chapitre-156"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-156/"
                                      data-navigation="">
                                      Chapitre 156 </option>
                                    <option class="short " data-limit="40" value="chapitre-155"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-155/"
                                      data-navigation="">
                                      Chapitre 155 </option>
                                    <option class="short " data-limit="40" value="chapitre-154"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-154/"
                                      data-navigation="">
                                      Chapitre 154 </option>
                                    <option class="short " data-limit="40" value="chapitre-153"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-153/"
                                      data-navigation="">
                                      Chapitre 153 </option>
                                    <option class="short " data-limit="40" value="chapitre-152"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-152/"
                                      data-navigation="">
                                      Chapitre 152 </option>
                                    <option class="short " data-limit="40" value="chapitre-151"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-151/"
                                      data-navigation="">
                                      Chapitre 151 </option>
                                    <option class="short " data-limit="40" value="chapitre-150"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-150/"
                                      data-navigation="">
                                      Chapitre 150 </option>
                                    <option class="short " data-limit="40" value="chapitre-149"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-149/"
                                      data-navigation="">
                                      Chapitre 149 </option>
                                    <option class="short " data-limit="40" value="chapitre-148"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-148/"
                                      data-navigation="">
                                      Chapitre 148 </option>
                                    <option class="short " data-limit="40" value="chapitre-147"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-147/"
                                      data-navigation="">
                                      Chapitre 147 </option>
                                    <option class="short " data-limit="40" value="chapitre-146"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-146/"
                                      data-navigation="">
                                      Chapitre 146 </option>
                                    <option class="short " data-limit="40" value="chapitre-145"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-145/"
                                      data-navigation="">
                                      Chapitre 145 </option>
                                    <option class="short " data-limit="40" value="chapitre-144"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-144/"
                                      data-navigation="">
                                      Chapitre 144 </option>
                                    <option class="short " data-limit="40" value="chapitre-143"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-143/"
                                      data-navigation="">
                                      Chapitre 143 </option>
                                    <option class="short " data-limit="40" value="chapitre-142"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-142/"
                                      data-navigation="">
                                      Chapitre 142 </option>
                                    <option class="short " data-limit="40" value="chapitre-141"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-141/"
                                      data-navigation="">
                                      Chapitre 141 </option>
                                    <option class="short " data-limit="40" value="chapitre-140"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-140/"
                                      data-navigation="">
                                      Chapitre 140 </option>
                                    <option class="short " data-limit="40" value="chapitre-139"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-139/"
                                      data-navigation="">
                                      Chapitre 139 </option>
                                    <option class="short " data-limit="40" value="chapitre-138"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-138/"
                                      data-navigation="">
                                      Chapitre 138 </option>
                                    <option class="short " data-limit="40" value="chapitre-137"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-137/"
                                      data-navigation="">
                                      Chapitre 137 </option>
                                    <option class="short " data-limit="40" value="chapitre-136"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-136/"
                                      data-navigation="">
                                      Chapitre 136 </option>
                                    <option class="short " data-limit="40" value="chapitre-135"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-135/"
                                      data-navigation="">
                                      Chapitre 135 </option>
                                    <option class="short " data-limit="40" value="chapitre-134"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-134/"
                                      data-navigation="">
                                      Chapitre 134 </option>
                                    <option class="short " data-limit="40" value="chapitre-133"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-133/"
                                      data-navigation="">
                                      Chapitre 133 </option>
                                    <option class="short " data-limit="40" value="chapitre-132"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-132/"
                                      data-navigation="">
                                      Chapitre 132 </option>
                                    <option class="short " data-limit="40" value="chapitre-131"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-131/"
                                      data-navigation="">
                                      Chapitre 131 </option>
                                    <option class="short " data-limit="40" value="chapitre-130"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-130/"
                                      data-navigation="">
                                      Chapitre 130 </option>
                                    <option class="short " data-limit="40" value="chapitre-129"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-129/"
                                      data-navigation="">
                                      Chapitre 129 </option>
                                    <option class="short " data-limit="40" value="chapitre-128"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-128/"
                                      data-navigation="">
                                      Chapitre 128 </option>
                                    <option class="short " data-limit="40" value="chapitre-127"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-127/"
                                      data-navigation="">
                                      Chapitre 127 </option>
                                    <option class="short " data-limit="40" value="chapitre-126"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-126/"
                                      data-navigation="">
                                      Chapitre 126 </option>
                                    <option class="short " data-limit="40" value="chapitre-125"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-125/"
                                      data-navigation="">
                                      Chapitre 125 </option>
                                    <option class="short " data-limit="40" value="chapitre-124"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-124/"
                                      data-navigation="">
                                      Chapitre 124 </option>
                                    <option class="short " data-limit="40" value="chapitre-123"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-123/"
                                      data-navigation="">
                                      Chapitre 123 </option>
                                    <option class="short " data-limit="40" value="chapitre-122"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-122/"
                                      data-navigation="">
                                      Chapitre 122 </option>
                                    <option class="short " data-limit="40" value="chapitre-121"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-121/"
                                      data-navigation="">
                                      Chapitre 121 </option>
                                    <option class="short " data-limit="40" value="chapitre-120"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-120/"
                                      data-navigation="">
                                      Chapitre 120 </option>
                                    <option class="short " data-limit="40" value="chapitre-119"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-119/"
                                      data-navigation="">
                                      Chapitre 119 </option>
                                    <option class="short " data-limit="40" value="chapitre-118"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-118/"
                                      data-navigation="">
                                      Chapitre 118 </option>
                                    <option class="short " data-limit="40" value="chapitre-117"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-117/"
                                      data-navigation="">
                                      Chapitre 117 </option>
                                    <option class="short " data-limit="40" value="chapitre-116"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-116/"
                                      data-navigation="">
                                      Chapitre 116 </option>
                                    <option class="short " data-limit="40" value="chapitre-115"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-115/"
                                      data-navigation="">
                                      Chapitre 115 </option>
                                    <option class="short " data-limit="40" value="chapitre-114"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-114/"
                                      data-navigation="">
                                      Chapitre 114 </option>
                                    <option class="short " data-limit="40" value="chapitre-113"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-113/"
                                      data-navigation="">
                                      Chapitre 113 </option>
                                    <option class="short " data-limit="40" value="chapitre-112"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-112/"
                                      data-navigation="">
                                      Chapitre 112 </option>
                                    <option class="short " data-limit="40" value="chapitre-111"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-111/"
                                      data-navigation="">
                                      Chapitre 111 </option>
                                    <option class="short " data-limit="40" value="chapitre-110"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-110/"
                                      data-navigation="">
                                      Chapitre 110 </option>
                                    <option class="short " data-limit="40" value="chapitre-109"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-109/"
                                      data-navigation="">
                                      Chapitre 109 </option>
                                    <option class="short " data-limit="40" value="chapitre-108"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-108/"
                                      data-navigation="">
                                      Chapitre 108 </option>
                                    <option class="short " data-limit="40" value="chapitre-107"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-107/"
                                      data-navigation="">
                                      Chapitre 107 </option>
                                    <option class="short " data-limit="40" value="chapitre-106"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-106/"
                                      data-navigation="">
                                      Chapitre 106 </option>
                                    <option class="short " data-limit="40" value="chapitre-105"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-105/"
                                      data-navigation="">
                                      Chapitre 105 </option>
                                    <option class="short " data-limit="40" value="chapitre-104"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-104/"
                                      data-navigation="">
                                      Chapitre 104 </option>
                                    <option class="short " data-limit="40" value="chapitre-103"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-103/"
                                      data-navigation="">
                                      Chapitre 103 </option>
                                    <option class="short " data-limit="40" value="chapitre-102"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-102/"
                                      data-navigation="">
                                      Chapitre 102 </option>
                                    <option class="short " data-limit="40" value="chapitre-101"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-101/"
                                      data-navigation="">
                                      Chapitre 101 </option>
                                    <option class="short " data-limit="40" value="chapitre-100"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-100/"
                                      data-navigation="">
                                      Chapitre 100 </option>
                                    <option class="short " data-limit="40" value="chapitre-99"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-99/"
                                      data-navigation="">
                                      Chapitre 99 </option>
                                    <option class="short " data-limit="40" value="chapitre-98"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-98/"
                                      data-navigation="">
                                      Chapitre 98 </option>
                                    <option class="short " data-limit="40" value="chapitre-97"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-97/"
                                      data-navigation="">
                                      Chapitre 97 </option>
                                    <option class="short " data-limit="40" value="chapitre-96"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-96/"
                                      data-navigation="">
                                      Chapitre 96 </option>
                                    <option class="short " data-limit="40" value="chapitre-95"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-95/"
                                      data-navigation="">
                                      Chapitre 95 </option>
                                    <option class="short " data-limit="40" value="chapitre-94"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-94/"
                                      data-navigation="">
                                      Chapitre 94 </option>
                                    <option class="short " data-limit="40" value="chapitre-93"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-93/"
                                      data-navigation="">
                                      Chapitre 93 </option>
                                    <option class="short " data-limit="40" value="chapitre-92"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-92/"
                                      data-navigation="">
                                      Chapitre 92 </option>
                                    <option class="short " data-limit="40" value="chapitre-91"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-91/"
                                      data-navigation="">
                                      Chapitre 91 </option>
                                    <option class="short " data-limit="40" value="chapitre-90-2-va"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-90-2-va/"
                                      data-navigation="">
                                      Chapitre 90.2 (VA) </option>
                                    <option class="short " data-limit="40" value="chapitre-90"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-90/"
                                      data-navigation="">
                                      Chapitre 90 </option>
                                    <option class="short " data-limit="40" value="chapitre-89"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-89/"
                                      data-navigation="">
                                      Chapitre 89 </option>
                                    <option class="short " data-limit="40" value="chapitre-88"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-88/"
                                      data-navigation="">
                                      Chapitre 88 </option>
                                    <option class="short " data-limit="40" value="chapitre-87"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-87/"
                                      data-navigation="">
                                      Chapitre 87 </option>
                                    <option class="short " data-limit="40" value="chapitre-86"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-86/"
                                      data-navigation="">
                                      Chapitre 86 </option>
                                    <option class="short " data-limit="40" value="chapitre-85"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-85/"
                                      data-navigation="">
                                      Chapitre 85 </option>
                                    <option class="short " data-limit="40" value="chapitre-84"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-84/"
                                      data-navigation="">
                                      Chapitre 84 </option>
                                    <option class="short " data-limit="40" value="chapitre-83"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-83/"
                                      data-navigation="">
                                      Chapitre 83 </option>
                                    <option class="short " data-limit="40" value="chapitre-82"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-82/"
                                      data-navigation="">
                                      Chapitre 82 </option>
                                    <option class="short " data-limit="40" value="chapitre-81"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-81/"
                                      data-navigation="">
                                      Chapitre 81 </option>
                                    <option class="short " data-limit="40" value="chapitre-80"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-80/"
                                      data-navigation="">
                                      Chapitre 80 </option>
                                    <option class="short " data-limit="40" value="chapitre-79"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-79/"
                                      data-navigation="">
                                      Chapitre 79 </option>
                                    <option class="short " data-limit="40" value="chapitre-78"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-78/"
                                      data-navigation="">
                                      Chapitre 78 </option>
                                    <option class="short " data-limit="40" value="chapitre-77"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-77/"
                                      data-navigation="">
                                      Chapitre 77 </option>
                                    <option class="short " data-limit="40" value="chapitre-76"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-76/"
                                      data-navigation="">
                                      Chapitre 76 </option>
                                    <option class="short " data-limit="40" value="chapitre-75"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-75/"
                                      data-navigation="">
                                      Chapitre 75 </option>
                                    <option class="short " data-limit="40" value="chapitre-74"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-74/"
                                      data-navigation="">
                                      Chapitre 74 </option>
                                    <option class="short " data-limit="40" value="chapitre-73"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-73/"
                                      data-navigation="">
                                      Chapitre 73 </option>
                                    <option class="short " data-limit="40" value="chapitre-72"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-72/"
                                      data-navigation="">
                                      Chapitre 72 </option>
                                    <option class="short " data-limit="40" value="chapitre-71"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-71/"
                                      data-navigation="">
                                      Chapitre 71 </option>
                                    <option class="short " data-limit="40" value="chapitre-70"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-70/"
                                      data-navigation="">
                                      Chapitre 70 </option>
                                    <option class="short " data-limit="40" value="chapitre-69"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-69/"
                                      data-navigation="">
                                      Chapitre 69 </option>
                                    <option class="short " data-limit="40" value="chapitre-68"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-68/"
                                      data-navigation="">
                                      Chapitre 68 </option>
                                    <option class="short " data-limit="40" value="chapitre-67"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-67/"
                                      data-navigation="">
                                      Chapitre 67 </option>
                                    <option class="short " data-limit="40" value="chapitre-66"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-66/"
                                      data-navigation="">
                                      Chapitre 66 </option>
                                    <option class="short " data-limit="40" value="chapitre-65"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-65/"
                                      data-navigation="">
                                      Chapitre 65 </option>
                                    <option class="short " data-limit="40" value="chapitre-64"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-64/"
                                      data-navigation="">
                                      Chapitre 64 </option>
                                    <option class="short " data-limit="40" value="chapitre-63"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-63/"
                                      data-navigation="">
                                      Chapitre 63 </option>
                                    <option class="short " data-limit="40" value="chapitre-62"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-62/"
                                      data-navigation="">
                                      Chapitre 62 </option>
                                    <option class="short " data-limit="40" value="chapitre-61"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-61/"
                                      data-navigation="">
                                      Chapitre 61 </option>
                                    <option class="short " data-limit="40" value="chapitre-60"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-60/"
                                      data-navigation="">
                                      Chapitre 60 </option>
                                    <option class="short " data-limit="40" value="chapitre-59"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-59/"
                                      data-navigation="">
                                      Chapitre 59 </option>
                                    <option class="short " data-limit="40" value="chapitre-58"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-58/"
                                      data-navigation="">
                                      Chapitre 58 </option>
                                    <option class="short " data-limit="40" value="chapitre-57"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-57/"
                                      data-navigation="">
                                      Chapitre 57 </option>
                                    <option class="short " data-limit="40" value="chapitre-56"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-56/"
                                      data-navigation="">
                                      Chapitre 56 </option>
                                    <option class="short " data-limit="40" value="chapitre-55"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-55/"
                                      data-navigation="">
                                      Chapitre 55 </option>
                                    <option class="short " data-limit="40" value="chapitre-54"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-54/"
                                      data-navigation="">
                                      Chapitre 54 </option>
                                    <option class="short " data-limit="40" value="chapitre-53"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-53/"
                                      data-navigation="">
                                      Chapitre 53 </option>
                                    <option class="short " data-limit="40" value="chapitre-52"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-52/"
                                      data-navigation="">
                                      Chapitre 52 </option>
                                    <option class="short " data-limit="40" value="chapitre-51"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-51/"
                                      data-navigation="">
                                      Chapitre 51 </option>
                                    <option class="short " data-limit="40" value="chapitre-50"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-50/"
                                      data-navigation="">
                                      Chapitre 50 </option>
                                    <option class="short " data-limit="40" value="chapitre-49"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-49/"
                                      data-navigation="">
                                      Chapitre 49 </option>
                                    <option class="short " data-limit="40" value="chapitre-48"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-48/"
                                      data-navigation="">
                                      Chapitre 48 </option>
                                    <option class="short " data-limit="40" value="chapitre-47"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-47/"
                                      data-navigation="">
                                      Chapitre 47 </option>
                                    <option class="short " data-limit="40" value="chapitre-46"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-46/"
                                      data-navigation="">
                                      Chapitre 46 </option>
                                    <option class="short " data-limit="40" value="chapitre-45"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-45/"
                                      data-navigation="">
                                      Chapitre 45 </option>
                                    <option class="short " data-limit="40" value="chapitre-44"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-44/"
                                      data-navigation="">
                                      Chapitre 44 </option>
                                    <option class="short " data-limit="40" value="chapitre-43"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-43/"
                                      data-navigation="">
                                      Chapitre 43 </option>
                                    <option class="short " data-limit="40" value="chapitre-42"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-42/"
                                      data-navigation="">
                                      Chapitre 42 </option>
                                    <option class="short " data-limit="40" value="chapitre-41"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-41/"
                                      data-navigation="">
                                      Chapitre 41 </option>
                                    <option class="short " data-limit="40" value="chapitre-40"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-40/"
                                      data-navigation="">
                                      Chapitre 40 </option>
                                    <option class="short " data-limit="40" value="chapitre-39"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-39/"
                                      data-navigation="">
                                      Chapitre 39 </option>
                                    <option class="short " data-limit="40" value="chapitre-38"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-38/"
                                      data-navigation="">
                                      Chapitre 38 </option>
                                    <option class="short " data-limit="40" value="chapitre-37"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-37/"
                                      data-navigation="">
                                      Chapitre 37 </option>
                                    <option class="short " data-limit="40" value="chapitre-36"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-36/"
                                      data-navigation="">
                                      Chapitre 36 </option>
                                    <option class="short " data-limit="40" value="chapitre-35"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-35/"
                                      data-navigation="">
                                      Chapitre 35 </option>
                                    <option class="short " data-limit="40" value="chapitre-34"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-34/"
                                      data-navigation="">
                                      Chapitre 34 </option>
                                    <option class="short " data-limit="40" value="chapitre-33"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-33/"
                                      data-navigation="">
                                      Chapitre 33 </option>
                                    <option class="short " data-limit="40" value="chapitre-32"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-32/"
                                      data-navigation="">
                                      Chapitre 32 </option>
                                    <option class="short " data-limit="40" value="chapitre-31"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-31/"
                                      data-navigation="">
                                      Chapitre 31 </option>
                                    <option class="short " data-limit="40" value="chapitre-30"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-30/"
                                      data-navigation="">
                                      Chapitre 30 </option>
                                    <option class="short " data-limit="40" value="chapitre-29"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-29/"
                                      data-navigation="">
                                      Chapitre 29 </option>
                                    <option class="short " data-limit="40" value="chapitre-28"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-28/"
                                      data-navigation="">
                                      Chapitre 28 </option>
                                    <option class="short " data-limit="40" value="chapitre-27"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-27/"
                                      data-navigation="">
                                      Chapitre 27 </option>
                                    <option class="short " data-limit="40" value="chapitre-26"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-26/"
                                      data-navigation="">
                                      Chapitre 26 </option>
                                    <option class="short " data-limit="40" value="chapitre-25"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-25/"
                                      data-navigation="">
                                      Chapitre 25 </option>
                                    <option class="short " data-limit="40" value="chapitre-24"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-24/"
                                      data-navigation="">
                                      Chapitre 24 </option>
                                    <option class="short " data-limit="40" value="chapitre-23"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-23/"
                                      data-navigation="">
                                      Chapitre 23 </option>
                                    <option class="short " data-limit="40" value="chapitre-22"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-22/"
                                      data-navigation="">
                                      Chapitre 22 </option>
                                    <option class="short " data-limit="40" value="chapitre-21"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-21/"
                                      data-navigation="">
                                      Chapitre 21 </option>
                                    <option class="short " data-limit="40" value="chapitre-20"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-20/"
                                      data-navigation="">
                                      Chapitre 20 </option>
                                    <option class="short " data-limit="40" value="chapitre-19"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-19/"
                                      data-navigation="">
                                      Chapitre 19 </option>
                                    <option class="short " data-limit="40" value="chapitre-18"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-18/"
                                      data-navigation="">
                                      Chapitre 18 </option>
                                    <option class="short " data-limit="40" value="chapitre-17"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-17/"
                                      data-navigation="">
                                      Chapitre 17 </option>
                                    <option class="short " data-limit="40" value="chapitre-16"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-16/"
                                      data-navigation="">
                                      Chapitre 16 </option>
                                    <option class="short " data-limit="40" value="chapitre-15"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-15/"
                                      data-navigation="">
                                      Chapitre 15 </option>
                                    <option class="short " data-limit="40" value="chapitre-14"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-14/"
                                      data-navigation="">
                                      Chapitre 14 </option>
                                    <option class="short " data-limit="40" value="chapitre-13"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-13/"
                                      data-navigation="">
                                      Chapitre 13 </option>
                                    <option class="short " data-limit="40" value="chapitre-12"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-12/"
                                      data-navigation="">
                                      Chapitre 12 </option>
                                    <option class="short " data-limit="40" value="chapitre-11"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-11/"
                                      data-navigation="">
                                      Chapitre 11 </option>
                                    <option class="short " data-limit="40" value="chapitre-10"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-10/"
                                      data-navigation="">
                                      Chapitre 10 </option>
                                    <option class="short " data-limit="40" value="chapitre-9"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-9/"
                                      data-navigation="">
                                      Chapitre 9 </option>
                                    <option class="short " data-limit="40" value="chapitre-8"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-8/"
                                      data-navigation="">
                                      Chapitre 8 </option>
                                    <option class="short " data-limit="40" value="chapitre-7"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-7/"
                                      data-navigation="">
                                      Chapitre 7 </option>
                                    <option class="short " data-limit="40" value="chapitre-6"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-6/"
                                      data-navigation="">
                                      Chapitre 6 </option>
                                    <option class="short " data-limit="40" value="chapitre-5"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-5/"
                                      data-navigation="">
                                      Chapitre 5 </option>
                                    <option class="short " data-limit="40" value="chapitre-4"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-4/"
                                      data-navigation="">
                                      Chapitre 4 </option>
                                    <option class="short " data-limit="40" value="chapitre-3"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-3/"
                                      data-navigation="">
                                      Chapitre 3 </option>
                                    <option class="short " data-limit="40" value="chapitre-2"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-2/"
                                      data-navigation="">
                                      Chapitre 2 </option>
                                    <option class="short " data-limit="40" value="chapitre-1"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-1/"
                                      data-navigation="">
                                      Chapitre 1 </option>
                                    <option class="short " data-limit="40" value="chapitre-0"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-0/"
                                      data-navigation="">
                                      Chapitre 0 - Prologue </option>
                                  </select>
                                </label>
                              </div>
                            </div>

                            <div class="c-selectpicker selectpicker_load">
                              <label> <select class="selectpicker reading-style-select">
                                  <option
                                    data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-170/"
                                    selected="selected">Webcomic</option>
                                  <option
                                    data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-170/?style=paged">
                                    Manga</option>
                                </select> </label>
                            </div>
                          </div>
                          <div class="select-pagination">
                            <div class="nav-links">
                              <i class="mobile-nav-btn icon ion-md-menu"></i>
                              <div class="nav-previous ">
                                <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-169/"
                                  class="btn prev_page">
                                  Précédent </a>
                              </div>
                              <div class="nav-next ">
                                <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-171/"
                                  class="btn next_page">
                                  Suivant </a>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class="entry-content">
                        <div class="entry-content_wrap">
                          <div class="read-container">
                            <div class="ad c-ads custom-code body-top-ads"><ins class="adsbygoogle"
                                style="display:block" data-ad-client="ca-pub-7918463289472920" data-ad-slot="1944585959"
                                data-ad-format="auto"><iframe id="aswift_0"
                                  style="height: 1px !important; max-height: 1px !important; max-width: 1px !important; width: 1px !important;"><iframe
                                    id="google_ads_frame0"></iframe></iframe></ins>
                              <script>
                                (adsbygoogle = window.adsbygoogle || []).push({});
                              </script>
                            </div>
                            <div class="reading-content">
                              <input type="hidden" id="wp-manga-current-chap" data-id="365" value="chapitre-170">
                              <div class="page-break no-gaps">
                                <img width="720" height="30000" id="image-0"
                                  src="https://mangas-origines.fr/wp-content/uploads/WP-manga/data/manga_649064bd0c0db/29c68e2bad92d333656cfaec05610708/1.jpg"
                                  class="wp-manga-chapter-img perfmatters-lazy entered pmloaded"
                                  data-src="https://mangas-origines.fr/wp-content/uploads/WP-manga/data/manga_649064bd0c0db/29c68e2bad92d333656cfaec05610708/1.jpg"
                                  data-ll-status="loaded"><noscript><img width="720" height="30000" id="image-0"
                                    src="
			https://mangas-origines.fr/wp-content/uploads/WP-manga/data/manga_649064bd0c0db/29c68e2bad92d333656cfaec05610708/1.jpg" class="wp-manga-chapter-img"></noscript>
                              </div>
                              <div class="page-break no-gaps">
                                <img width="720" height="30186" id="image-1"
                                  src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='720'%20height='30186'%20viewBox='0%200%20720%2030186'%3E%3C/svg%3E"
                                  class="wp-manga-chapter-img perfmatters-lazy"
                                  data-src="https://mangas-origines.fr/wp-content/uploads/WP-manga/data/manga_649064bd0c0db/29c68e2bad92d333656cfaec05610708/2.jpg"><noscript><img
                                    width="720" height="30186" id="image-1"
                                    src="
			https://mangas-origines.fr/wp-content/uploads/WP-manga/data/manga_649064bd0c0db/29c68e2bad92d333656cfaec05610708/2.jpg"
                                    class="wp-manga-chapter-img"></noscript>
                              </div>
                              <div class="page-break no-gaps">
                                <img width="720" height="30535" id="image-2"
                                  src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='720'%20height='30535'%20viewBox='0%200%20720%2030535'%3E%3C/svg%3E"
                                  class="wp-manga-chapter-img perfmatters-lazy"
                                  data-src="https://mangas-origines.fr/wp-content/uploads/WP-manga/data/manga_649064bd0c0db/29c68e2bad92d333656cfaec05610708/3.jpg"><noscript><img
                                    width="720" height="30535" id="image-2"
                                    src="
			https://mangas-origines.fr/wp-content/uploads/WP-manga/data/manga_649064bd0c0db/29c68e2bad92d333656cfaec05610708/3.jpg"
                                    class="wp-manga-chapter-img"></noscript>
                              </div>
                              <div class="page-break no-gaps">
                                <img width="720" height="30000" id="image-3"
                                  src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='720'%20height='30000'%20viewBox='0%200%20720%2030000'%3E%3C/svg%3E"
                                  class="wp-manga-chapter-img perfmatters-lazy"
                                  data-src="https://mangas-origines.fr/wp-content/uploads/WP-manga/data/manga_649064bd0c0db/29c68e2bad92d333656cfaec05610708/4.jpg"><noscript><img
                                    width="720" height="30000" id="image-3"
                                    src="
			https://mangas-origines.fr/wp-content/uploads/WP-manga/data/manga_649064bd0c0db/29c68e2bad92d333656cfaec05610708/4.jpg"
                                    class="wp-manga-chapter-img"></noscript>
                              </div>
                              <div class="page-break no-gaps">
                                <img width="720" height="15900" id="image-4"
                                  src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='720'%20height='15900'%20viewBox='0%200%20720%2015900'%3E%3C/svg%3E"
                                  class="wp-manga-chapter-img perfmatters-lazy"
                                  data-src="https://mangas-origines.fr/wp-content/uploads/WP-manga/data/manga_649064bd0c0db/29c68e2bad92d333656cfaec05610708/5.jpg"><noscript><img
                                    width="720" height="15900" id="image-4"
                                    src="
			https://mangas-origines.fr/wp-content/uploads/WP-manga/data/manga_649064bd0c0db/29c68e2bad92d333656cfaec05610708/5.jpg"
                                    class="wp-manga-chapter-img"></noscript>
                              </div>
                            </div>
                            <div class="ad c-ads custom-code body-bottom-ads"><ins class="adsbygoogle"
                                style="display:block" data-ad-client="ca-pub-7918463289472920" data-ad-slot="1944585959"
                                data-ad-format="auto"><iframe id="aswift_1"
                                  style="height: 1px !important; max-height: 1px !important; max-width: 1px !important; width: 1px !important;"><iframe
                                    id="google_ads_frame1"></iframe></iframe></ins>
                              <script>
                                (adsbygoogle = window.adsbygoogle || []).push({});
                              </script>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class="entry-header footer" id="manga-reading-nav-foot" data-position="footer" data-id="253">
                        <div class="wp-manga-nav">
                          <div class="select-view">


                            <div class="chapters_selectbox_holder" data-manga="253" data-chapter="chapitre-170"
                              data-vol="0" data-type="manga" data-style="list">

                              <div class="c-selectpicker selectpicker_chapter" for="volume-id-0">
                                <label>
                                  <select class="selectpicker single-chapter-select">
                                    <option class="short " data-limit="40" value="chapitre-200"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-200/"
                                      data-navigation="">
                                      Chapitre 200 </option>
                                    <option class="short " data-limit="40" value="chapitre-199"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-199/"
                                      data-navigation="">
                                      Chapitre 199 </option>
                                    <option class="short " data-limit="40" value="chapitre-198"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-198/"
                                      data-navigation="">
                                      Chapitre 198 </option>
                                    <option class="short " data-limit="40" value="chapitre-197"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-197/"
                                      data-navigation="">
                                      Chapitre 197 </option>
                                    <option class="short " data-limit="40" value="chapitre-196"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-196/"
                                      data-navigation="">
                                      Chapitre 196 </option>
                                    <option class="short " data-limit="40" value="chapitre-195"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-195/"
                                      data-navigation="">
                                      Chapitre 195 </option>
                                    <option class="short " data-limit="40" value="chapitre-194"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-194/"
                                      data-navigation="">
                                      Chapitre 194 </option>
                                    <option class="short " data-limit="40" value="chapitre-193"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-193/"
                                      data-navigation="">
                                      Chapitre 193 </option>
                                    <option class="short " data-limit="40" value="chapitre-192"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-192/"
                                      data-navigation="">
                                      Chapitre 192 </option>
                                    <option class="short " data-limit="40" value="chapitre-191"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-191/"
                                      data-navigation="">
                                      Chapitre 191 </option>
                                    <option class="short " data-limit="40" value="chapitre-190"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-190/"
                                      data-navigation="">
                                      Chapitre 190 </option>
                                    <option class="short " data-limit="40" value="chapitre-189"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-189/"
                                      data-navigation="">
                                      Chapitre 189 </option>
                                    <option class="short " data-limit="40" value="chapitre-188"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-188/"
                                      data-navigation="">
                                      Chapitre 188 </option>
                                    <option class="short " data-limit="40" value="chapitre-187"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-187/"
                                      data-navigation="">
                                      Chapitre 187 </option>
                                    <option class="short " data-limit="40" value="chapitre-186"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-186/"
                                      data-navigation="">
                                      Chapitre 186 </option>
                                    <option class="short " data-limit="40" value="chapitre-185"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-185/"
                                      data-navigation="">
                                      Chapitre 185 </option>
                                    <option class="short " data-limit="40" value="chapitre-184"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-184/"
                                      data-navigation="">
                                      Chapitre 184 </option>
                                    <option class="short " data-limit="40" value="chapitre-183"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-183/"
                                      data-navigation="">
                                      Chapitre 183 </option>
                                    <option class="short " data-limit="40" value="chapitre-182"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-182/"
                                      data-navigation="">
                                      Chapitre 182 </option>
                                    <option class="short " data-limit="40" value="chapitre-181"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-181/"
                                      data-navigation="">
                                      Chapitre 181 </option>
                                    <option class="short " data-limit="40" value="chapitre-180"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-180/"
                                      data-navigation="">
                                      Chapitre 180 </option>
                                    <option class="short " data-limit="40" value="chapitre-179-5"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-179-5/"
                                      data-navigation="">
                                      Chapitre 179.5 - Un Petit Spoiler </option>
                                    <option class="short " data-limit="40" value="chapitre-179"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-179/"
                                      data-navigation="">
                                      Chapitre 179 </option>
                                    <option class="short " data-limit="40" value="chapitre-178"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-178/"
                                      data-navigation="">
                                      Chapitre 178 </option>
                                    <option class="short " data-limit="40" value="chapitre-177"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-177/"
                                      data-navigation="">
                                      Chapitre 177 </option>
                                    <option class="short " data-limit="40" value="chapitre-176"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-176/"
                                      data-navigation="">
                                      Chapitre 176 </option>
                                    <option class="short " data-limit="40" value="chapitre-175"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-175/"
                                      data-navigation="">
                                      Chapitre 175 </option>
                                    <option class="short " data-limit="40" value="chapitre-174"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-174/"
                                      data-navigation="">
                                      Chapitre 174 </option>
                                    <option class="short " data-limit="40" value="chapitre-173"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-173/"
                                      data-navigation="">
                                      Chapitre 173 </option>
                                    <option class="short " data-limit="40" value="chapitre-172"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-172/"
                                      data-navigation="">
                                      Chapitre 172 </option>
                                    <option class="short " data-limit="40" value="chapitre-171"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-171/"
                                      data-navigation="">
                                      Chapitre 171 </option>
                                    <option class="short " data-limit="40" value="chapitre-170"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-170/"
                                      data-navigation="" selected="selected">
                                      Chapitre 170 </option>
                                    <option class="short " data-limit="40" value="chapitre-169"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-169/"
                                      data-navigation="">
                                      Chapitre 169 </option>
                                    <option class="short " data-limit="40" value="chapitre-168"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-168/"
                                      data-navigation="">
                                      Chapitre 168 </option>
                                    <option class="short " data-limit="40" value="chapitre-167"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-167/"
                                      data-navigation="">
                                      Chapitre 167 </option>
                                    <option class="short " data-limit="40" value="chapitre-166"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-166/"
                                      data-navigation="">
                                      Chapitre 166 </option>
                                    <option class="short " data-limit="40" value="chapitre-165"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-165/"
                                      data-navigation="">
                                      Chapitre 165 </option>
                                    <option class="short " data-limit="40" value="chapitre-164"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-164/"
                                      data-navigation="">
                                      Chapitre 164 </option>
                                    <option class="short " data-limit="40" value="chapitre-163"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-163/"
                                      data-navigation="">
                                      Chapitre 163 </option>
                                    <option class="short " data-limit="40" value="chapitre-162"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-162/"
                                      data-navigation="">
                                      Chapitre 162 </option>
                                    <option class="short " data-limit="40" value="chapitre-161"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-161/"
                                      data-navigation="">
                                      Chapitre 161 </option>
                                    <option class="short " data-limit="40" value="chapitre-160"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-160/"
                                      data-navigation="">
                                      Chapitre 160 </option>
                                    <option class="short " data-limit="40" value="chapitre-159"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-159/"
                                      data-navigation="">
                                      Chapitre 159 </option>
                                    <option class="short " data-limit="40" value="chapitre-158"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-158/"
                                      data-navigation="">
                                      Chapitre 158 </option>
                                    <option class="short " data-limit="40" value="chapitre-157"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-157/"
                                      data-navigation="">
                                      Chapitre 157 </option>
                                    <option class="short " data-limit="40" value="chapitre-156"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-156/"
                                      data-navigation="">
                                      Chapitre 156 </option>
                                    <option class="short " data-limit="40" value="chapitre-155"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-155/"
                                      data-navigation="">
                                      Chapitre 155 </option>
                                    <option class="short " data-limit="40" value="chapitre-154"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-154/"
                                      data-navigation="">
                                      Chapitre 154 </option>
                                    <option class="short " data-limit="40" value="chapitre-153"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-153/"
                                      data-navigation="">
                                      Chapitre 153 </option>
                                    <option class="short " data-limit="40" value="chapitre-152"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-152/"
                                      data-navigation="">
                                      Chapitre 152 </option>
                                    <option class="short " data-limit="40" value="chapitre-151"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-151/"
                                      data-navigation="">
                                      Chapitre 151 </option>
                                    <option class="short " data-limit="40" value="chapitre-150"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-150/"
                                      data-navigation="">
                                      Chapitre 150 </option>
                                    <option class="short " data-limit="40" value="chapitre-149"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-149/"
                                      data-navigation="">
                                      Chapitre 149 </option>
                                    <option class="short " data-limit="40" value="chapitre-148"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-148/"
                                      data-navigation="">
                                      Chapitre 148 </option>
                                    <option class="short " data-limit="40" value="chapitre-147"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-147/"
                                      data-navigation="">
                                      Chapitre 147 </option>
                                    <option class="short " data-limit="40" value="chapitre-146"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-146/"
                                      data-navigation="">
                                      Chapitre 146 </option>
                                    <option class="short " data-limit="40" value="chapitre-145"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-145/"
                                      data-navigation="">
                                      Chapitre 145 </option>
                                    <option class="short " data-limit="40" value="chapitre-144"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-144/"
                                      data-navigation="">
                                      Chapitre 144 </option>
                                    <option class="short " data-limit="40" value="chapitre-143"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-143/"
                                      data-navigation="">
                                      Chapitre 143 </option>
                                    <option class="short " data-limit="40" value="chapitre-142"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-142/"
                                      data-navigation="">
                                      Chapitre 142 </option>
                                    <option class="short " data-limit="40" value="chapitre-141"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-141/"
                                      data-navigation="">
                                      Chapitre 141 </option>
                                    <option class="short " data-limit="40" value="chapitre-140"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-140/"
                                      data-navigation="">
                                      Chapitre 140 </option>
                                    <option class="short " data-limit="40" value="chapitre-139"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-139/"
                                      data-navigation="">
                                      Chapitre 139 </option>
                                    <option class="short " data-limit="40" value="chapitre-138"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-138/"
                                      data-navigation="">
                                      Chapitre 138 </option>
                                    <option class="short " data-limit="40" value="chapitre-137"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-137/"
                                      data-navigation="">
                                      Chapitre 137 </option>
                                    <option class="short " data-limit="40" value="chapitre-136"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-136/"
                                      data-navigation="">
                                      Chapitre 136 </option>
                                    <option class="short " data-limit="40" value="chapitre-135"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-135/"
                                      data-navigation="">
                                      Chapitre 135 </option>
                                    <option class="short " data-limit="40" value="chapitre-134"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-134/"
                                      data-navigation="">
                                      Chapitre 134 </option>
                                    <option class="short " data-limit="40" value="chapitre-133"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-133/"
                                      data-navigation="">
                                      Chapitre 133 </option>
                                    <option class="short " data-limit="40" value="chapitre-132"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-132/"
                                      data-navigation="">
                                      Chapitre 132 </option>
                                    <option class="short " data-limit="40" value="chapitre-131"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-131/"
                                      data-navigation="">
                                      Chapitre 131 </option>
                                    <option class="short " data-limit="40" value="chapitre-130"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-130/"
                                      data-navigation="">
                                      Chapitre 130 </option>
                                    <option class="short " data-limit="40" value="chapitre-129"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-129/"
                                      data-navigation="">
                                      Chapitre 129 </option>
                                    <option class="short " data-limit="40" value="chapitre-128"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-128/"
                                      data-navigation="">
                                      Chapitre 128 </option>
                                    <option class="short " data-limit="40" value="chapitre-127"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-127/"
                                      data-navigation="">
                                      Chapitre 127 </option>
                                    <option class="short " data-limit="40" value="chapitre-126"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-126/"
                                      data-navigation="">
                                      Chapitre 126 </option>
                                    <option class="short " data-limit="40" value="chapitre-125"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-125/"
                                      data-navigation="">
                                      Chapitre 125 </option>
                                    <option class="short " data-limit="40" value="chapitre-124"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-124/"
                                      data-navigation="">
                                      Chapitre 124 </option>
                                    <option class="short " data-limit="40" value="chapitre-123"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-123/"
                                      data-navigation="">
                                      Chapitre 123 </option>
                                    <option class="short " data-limit="40" value="chapitre-122"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-122/"
                                      data-navigation="">
                                      Chapitre 122 </option>
                                    <option class="short " data-limit="40" value="chapitre-121"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-121/"
                                      data-navigation="">
                                      Chapitre 121 </option>
                                    <option class="short " data-limit="40" value="chapitre-120"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-120/"
                                      data-navigation="">
                                      Chapitre 120 </option>
                                    <option class="short " data-limit="40" value="chapitre-119"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-119/"
                                      data-navigation="">
                                      Chapitre 119 </option>
                                    <option class="short " data-limit="40" value="chapitre-118"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-118/"
                                      data-navigation="">
                                      Chapitre 118 </option>
                                    <option class="short " data-limit="40" value="chapitre-117"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-117/"
                                      data-navigation="">
                                      Chapitre 117 </option>
                                    <option class="short " data-limit="40" value="chapitre-116"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-116/"
                                      data-navigation="">
                                      Chapitre 116 </option>
                                    <option class="short " data-limit="40" value="chapitre-115"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-115/"
                                      data-navigation="">
                                      Chapitre 115 </option>
                                    <option class="short " data-limit="40" value="chapitre-114"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-114/"
                                      data-navigation="">
                                      Chapitre 114 </option>
                                    <option class="short " data-limit="40" value="chapitre-113"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-113/"
                                      data-navigation="">
                                      Chapitre 113 </option>
                                    <option class="short " data-limit="40" value="chapitre-112"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-112/"
                                      data-navigation="">
                                      Chapitre 112 </option>
                                    <option class="short " data-limit="40" value="chapitre-111"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-111/"
                                      data-navigation="">
                                      Chapitre 111 </option>
                                    <option class="short " data-limit="40" value="chapitre-110"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-110/"
                                      data-navigation="">
                                      Chapitre 110 </option>
                                    <option class="short " data-limit="40" value="chapitre-109"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-109/"
                                      data-navigation="">
                                      Chapitre 109 </option>
                                    <option class="short " data-limit="40" value="chapitre-108"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-108/"
                                      data-navigation="">
                                      Chapitre 108 </option>
                                    <option class="short " data-limit="40" value="chapitre-107"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-107/"
                                      data-navigation="">
                                      Chapitre 107 </option>
                                    <option class="short " data-limit="40" value="chapitre-106"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-106/"
                                      data-navigation="">
                                      Chapitre 106 </option>
                                    <option class="short " data-limit="40" value="chapitre-105"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-105/"
                                      data-navigation="">
                                      Chapitre 105 </option>
                                    <option class="short " data-limit="40" value="chapitre-104"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-104/"
                                      data-navigation="">
                                      Chapitre 104 </option>
                                    <option class="short " data-limit="40" value="chapitre-103"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-103/"
                                      data-navigation="">
                                      Chapitre 103 </option>
                                    <option class="short " data-limit="40" value="chapitre-102"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-102/"
                                      data-navigation="">
                                      Chapitre 102 </option>
                                    <option class="short " data-limit="40" value="chapitre-101"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-101/"
                                      data-navigation="">
                                      Chapitre 101 </option>
                                    <option class="short " data-limit="40" value="chapitre-100"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-100/"
                                      data-navigation="">
                                      Chapitre 100 </option>
                                    <option class="short " data-limit="40" value="chapitre-99"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-99/"
                                      data-navigation="">
                                      Chapitre 99 </option>
                                    <option class="short " data-limit="40" value="chapitre-98"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-98/"
                                      data-navigation="">
                                      Chapitre 98 </option>
                                    <option class="short " data-limit="40" value="chapitre-97"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-97/"
                                      data-navigation="">
                                      Chapitre 97 </option>
                                    <option class="short " data-limit="40" value="chapitre-96"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-96/"
                                      data-navigation="">
                                      Chapitre 96 </option>
                                    <option class="short " data-limit="40" value="chapitre-95"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-95/"
                                      data-navigation="">
                                      Chapitre 95 </option>
                                    <option class="short " data-limit="40" value="chapitre-94"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-94/"
                                      data-navigation="">
                                      Chapitre 94 </option>
                                    <option class="short " data-limit="40" value="chapitre-93"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-93/"
                                      data-navigation="">
                                      Chapitre 93 </option>
                                    <option class="short " data-limit="40" value="chapitre-92"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-92/"
                                      data-navigation="">
                                      Chapitre 92 </option>
                                    <option class="short " data-limit="40" value="chapitre-91"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-91/"
                                      data-navigation="">
                                      Chapitre 91 </option>
                                    <option class="short " data-limit="40" value="chapitre-90-2-va"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-90-2-va/"
                                      data-navigation="">
                                      Chapitre 90.2 (VA) </option>
                                    <option class="short " data-limit="40" value="chapitre-90"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-90/"
                                      data-navigation="">
                                      Chapitre 90 </option>
                                    <option class="short " data-limit="40" value="chapitre-89"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-89/"
                                      data-navigation="">
                                      Chapitre 89 </option>
                                    <option class="short " data-limit="40" value="chapitre-88"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-88/"
                                      data-navigation="">
                                      Chapitre 88 </option>
                                    <option class="short " data-limit="40" value="chapitre-87"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-87/"
                                      data-navigation="">
                                      Chapitre 87 </option>
                                    <option class="short " data-limit="40" value="chapitre-86"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-86/"
                                      data-navigation="">
                                      Chapitre 86 </option>
                                    <option class="short " data-limit="40" value="chapitre-85"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-85/"
                                      data-navigation="">
                                      Chapitre 85 </option>
                                    <option class="short " data-limit="40" value="chapitre-84"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-84/"
                                      data-navigation="">
                                      Chapitre 84 </option>
                                    <option class="short " data-limit="40" value="chapitre-83"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-83/"
                                      data-navigation="">
                                      Chapitre 83 </option>
                                    <option class="short " data-limit="40" value="chapitre-82"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-82/"
                                      data-navigation="">
                                      Chapitre 82 </option>
                                    <option class="short " data-limit="40" value="chapitre-81"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-81/"
                                      data-navigation="">
                                      Chapitre 81 </option>
                                    <option class="short " data-limit="40" value="chapitre-80"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-80/"
                                      data-navigation="">
                                      Chapitre 80 </option>
                                    <option class="short " data-limit="40" value="chapitre-79"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-79/"
                                      data-navigation="">
                                      Chapitre 79 </option>
                                    <option class="short " data-limit="40" value="chapitre-78"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-78/"
                                      data-navigation="">
                                      Chapitre 78 </option>
                                    <option class="short " data-limit="40" value="chapitre-77"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-77/"
                                      data-navigation="">
                                      Chapitre 77 </option>
                                    <option class="short " data-limit="40" value="chapitre-76"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-76/"
                                      data-navigation="">
                                      Chapitre 76 </option>
                                    <option class="short " data-limit="40" value="chapitre-75"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-75/"
                                      data-navigation="">
                                      Chapitre 75 </option>
                                    <option class="short " data-limit="40" value="chapitre-74"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-74/"
                                      data-navigation="">
                                      Chapitre 74 </option>
                                    <option class="short " data-limit="40" value="chapitre-73"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-73/"
                                      data-navigation="">
                                      Chapitre 73 </option>
                                    <option class="short " data-limit="40" value="chapitre-72"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-72/"
                                      data-navigation="">
                                      Chapitre 72 </option>
                                    <option class="short " data-limit="40" value="chapitre-71"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-71/"
                                      data-navigation="">
                                      Chapitre 71 </option>
                                    <option class="short " data-limit="40" value="chapitre-70"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-70/"
                                      data-navigation="">
                                      Chapitre 70 </option>
                                    <option class="short " data-limit="40" value="chapitre-69"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-69/"
                                      data-navigation="">
                                      Chapitre 69 </option>
                                    <option class="short " data-limit="40" value="chapitre-68"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-68/"
                                      data-navigation="">
                                      Chapitre 68 </option>
                                    <option class="short " data-limit="40" value="chapitre-67"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-67/"
                                      data-navigation="">
                                      Chapitre 67 </option>
                                    <option class="short " data-limit="40" value="chapitre-66"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-66/"
                                      data-navigation="">
                                      Chapitre 66 </option>
                                    <option class="short " data-limit="40" value="chapitre-65"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-65/"
                                      data-navigation="">
                                      Chapitre 65 </option>
                                    <option class="short " data-limit="40" value="chapitre-64"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-64/"
                                      data-navigation="">
                                      Chapitre 64 </option>
                                    <option class="short " data-limit="40" value="chapitre-63"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-63/"
                                      data-navigation="">
                                      Chapitre 63 </option>
                                    <option class="short " data-limit="40" value="chapitre-62"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-62/"
                                      data-navigation="">
                                      Chapitre 62 </option>
                                    <option class="short " data-limit="40" value="chapitre-61"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-61/"
                                      data-navigation="">
                                      Chapitre 61 </option>
                                    <option class="short " data-limit="40" value="chapitre-60"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-60/"
                                      data-navigation="">
                                      Chapitre 60 </option>
                                    <option class="short " data-limit="40" value="chapitre-59"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-59/"
                                      data-navigation="">
                                      Chapitre 59 </option>
                                    <option class="short " data-limit="40" value="chapitre-58"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-58/"
                                      data-navigation="">
                                      Chapitre 58 </option>
                                    <option class="short " data-limit="40" value="chapitre-57"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-57/"
                                      data-navigation="">
                                      Chapitre 57 </option>
                                    <option class="short " data-limit="40" value="chapitre-56"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-56/"
                                      data-navigation="">
                                      Chapitre 56 </option>
                                    <option class="short " data-limit="40" value="chapitre-55"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-55/"
                                      data-navigation="">
                                      Chapitre 55 </option>
                                    <option class="short " data-limit="40" value="chapitre-54"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-54/"
                                      data-navigation="">
                                      Chapitre 54 </option>
                                    <option class="short " data-limit="40" value="chapitre-53"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-53/"
                                      data-navigation="">
                                      Chapitre 53 </option>
                                    <option class="short " data-limit="40" value="chapitre-52"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-52/"
                                      data-navigation="">
                                      Chapitre 52 </option>
                                    <option class="short " data-limit="40" value="chapitre-51"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-51/"
                                      data-navigation="">
                                      Chapitre 51 </option>
                                    <option class="short " data-limit="40" value="chapitre-50"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-50/"
                                      data-navigation="">
                                      Chapitre 50 </option>
                                    <option class="short " data-limit="40" value="chapitre-49"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-49/"
                                      data-navigation="">
                                      Chapitre 49 </option>
                                    <option class="short " data-limit="40" value="chapitre-48"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-48/"
                                      data-navigation="">
                                      Chapitre 48 </option>
                                    <option class="short " data-limit="40" value="chapitre-47"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-47/"
                                      data-navigation="">
                                      Chapitre 47 </option>
                                    <option class="short " data-limit="40" value="chapitre-46"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-46/"
                                      data-navigation="">
                                      Chapitre 46 </option>
                                    <option class="short " data-limit="40" value="chapitre-45"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-45/"
                                      data-navigation="">
                                      Chapitre 45 </option>
                                    <option class="short " data-limit="40" value="chapitre-44"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-44/"
                                      data-navigation="">
                                      Chapitre 44 </option>
                                    <option class="short " data-limit="40" value="chapitre-43"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-43/"
                                      data-navigation="">
                                      Chapitre 43 </option>
                                    <option class="short " data-limit="40" value="chapitre-42"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-42/"
                                      data-navigation="">
                                      Chapitre 42 </option>
                                    <option class="short " data-limit="40" value="chapitre-41"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-41/"
                                      data-navigation="">
                                      Chapitre 41 </option>
                                    <option class="short " data-limit="40" value="chapitre-40"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-40/"
                                      data-navigation="">
                                      Chapitre 40 </option>
                                    <option class="short " data-limit="40" value="chapitre-39"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-39/"
                                      data-navigation="">
                                      Chapitre 39 </option>
                                    <option class="short " data-limit="40" value="chapitre-38"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-38/"
                                      data-navigation="">
                                      Chapitre 38 </option>
                                    <option class="short " data-limit="40" value="chapitre-37"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-37/"
                                      data-navigation="">
                                      Chapitre 37 </option>
                                    <option class="short " data-limit="40" value="chapitre-36"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-36/"
                                      data-navigation="">
                                      Chapitre 36 </option>
                                    <option class="short " data-limit="40" value="chapitre-35"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-35/"
                                      data-navigation="">
                                      Chapitre 35 </option>
                                    <option class="short " data-limit="40" value="chapitre-34"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-34/"
                                      data-navigation="">
                                      Chapitre 34 </option>
                                    <option class="short " data-limit="40" value="chapitre-33"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-33/"
                                      data-navigation="">
                                      Chapitre 33 </option>
                                    <option class="short " data-limit="40" value="chapitre-32"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-32/"
                                      data-navigation="">
                                      Chapitre 32 </option>
                                    <option class="short " data-limit="40" value="chapitre-31"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-31/"
                                      data-navigation="">
                                      Chapitre 31 </option>
                                    <option class="short " data-limit="40" value="chapitre-30"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-30/"
                                      data-navigation="">
                                      Chapitre 30 </option>
                                    <option class="short " data-limit="40" value="chapitre-29"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-29/"
                                      data-navigation="">
                                      Chapitre 29 </option>
                                    <option class="short " data-limit="40" value="chapitre-28"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-28/"
                                      data-navigation="">
                                      Chapitre 28 </option>
                                    <option class="short " data-limit="40" value="chapitre-27"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-27/"
                                      data-navigation="">
                                      Chapitre 27 </option>
                                    <option class="short " data-limit="40" value="chapitre-26"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-26/"
                                      data-navigation="">
                                      Chapitre 26 </option>
                                    <option class="short " data-limit="40" value="chapitre-25"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-25/"
                                      data-navigation="">
                                      Chapitre 25 </option>
                                    <option class="short " data-limit="40" value="chapitre-24"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-24/"
                                      data-navigation="">
                                      Chapitre 24 </option>
                                    <option class="short " data-limit="40" value="chapitre-23"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-23/"
                                      data-navigation="">
                                      Chapitre 23 </option>
                                    <option class="short " data-limit="40" value="chapitre-22"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-22/"
                                      data-navigation="">
                                      Chapitre 22 </option>
                                    <option class="short " data-limit="40" value="chapitre-21"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-21/"
                                      data-navigation="">
                                      Chapitre 21 </option>
                                    <option class="short " data-limit="40" value="chapitre-20"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-20/"
                                      data-navigation="">
                                      Chapitre 20 </option>
                                    <option class="short " data-limit="40" value="chapitre-19"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-19/"
                                      data-navigation="">
                                      Chapitre 19 </option>
                                    <option class="short " data-limit="40" value="chapitre-18"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-18/"
                                      data-navigation="">
                                      Chapitre 18 </option>
                                    <option class="short " data-limit="40" value="chapitre-17"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-17/"
                                      data-navigation="">
                                      Chapitre 17 </option>
                                    <option class="short " data-limit="40" value="chapitre-16"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-16/"
                                      data-navigation="">
                                      Chapitre 16 </option>
                                    <option class="short " data-limit="40" value="chapitre-15"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-15/"
                                      data-navigation="">
                                      Chapitre 15 </option>
                                    <option class="short " data-limit="40" value="chapitre-14"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-14/"
                                      data-navigation="">
                                      Chapitre 14 </option>
                                    <option class="short " data-limit="40" value="chapitre-13"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-13/"
                                      data-navigation="">
                                      Chapitre 13 </option>
                                    <option class="short " data-limit="40" value="chapitre-12"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-12/"
                                      data-navigation="">
                                      Chapitre 12 </option>
                                    <option class="short " data-limit="40" value="chapitre-11"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-11/"
                                      data-navigation="">
                                      Chapitre 11 </option>
                                    <option class="short " data-limit="40" value="chapitre-10"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-10/"
                                      data-navigation="">
                                      Chapitre 10 </option>
                                    <option class="short " data-limit="40" value="chapitre-9"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-9/"
                                      data-navigation="">
                                      Chapitre 9 </option>
                                    <option class="short " data-limit="40" value="chapitre-8"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-8/"
                                      data-navigation="">
                                      Chapitre 8 </option>
                                    <option class="short " data-limit="40" value="chapitre-7"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-7/"
                                      data-navigation="">
                                      Chapitre 7 </option>
                                    <option class="short " data-limit="40" value="chapitre-6"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-6/"
                                      data-navigation="">
                                      Chapitre 6 </option>
                                    <option class="short " data-limit="40" value="chapitre-5"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-5/"
                                      data-navigation="">
                                      Chapitre 5 </option>
                                    <option class="short " data-limit="40" value="chapitre-4"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-4/"
                                      data-navigation="">
                                      Chapitre 4 </option>
                                    <option class="short " data-limit="40" value="chapitre-3"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-3/"
                                      data-navigation="">
                                      Chapitre 3 </option>
                                    <option class="short " data-limit="40" value="chapitre-2"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-2/"
                                      data-navigation="">
                                      Chapitre 2 </option>
                                    <option class="short " data-limit="40" value="chapitre-1"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-1/"
                                      data-navigation="">
                                      Chapitre 1 </option>
                                    <option class="short " data-limit="40" value="chapitre-0"
                                      data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-0/"
                                      data-navigation="">
                                      Chapitre 0 - Prologue </option>
                                  </select>
                                </label>
                              </div>
                            </div>

                            <div class="c-selectpicker selectpicker_load">
                              <label> <select class="selectpicker reading-style-select">
                                  <option
                                    data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-170/"
                                    selected="selected">Webcomic</option>
                                  <option
                                    data-redirect="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-170/?style=paged">
                                    Manga</option>
                                </select> </label>
                            </div>
                          </div>
                          <div class="select-pagination">
                            <div class="nav-links">
                              <i class="mobile-nav-btn icon ion-md-menu"></i>
                              <div class="nav-previous ">
                                <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-169/"
                                  class="btn prev_page">
                                  Précédent </a>
                              </div>
                              <div class="nav-next ">
                                <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-171/"
                                  class="btn next_page">
                                  Suivant </a>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>

                    <h4>Commentaires pour le chapitre "Chapitre 170"</h4>
                    <div id="manga-discussion" class="manga-discussion wrapper">
                      <div class="wpdiscuz_top_clearing"></div>
                      <div id="comments" class="comments-area">
                        <div id="respond" style="width: 0;height: 0;clear: both;margin: 0;padding: 0;"></div>
                        <div id="wpdcom" class="wpdiscuz_unauth wpd-dark wpd-layout-1 wpd-comments-open">
                          <div class="wc_social_plugin_wrapper">
                          </div>
                          <div class="wpd-form-wrap">
                            <div class="wpd-form-head">
                              <div class="wpd-sbs-toggle">
                                <i class="far fa-envelope"></i> <span class="wpd-sbs-title">S’abonner</span>
                                <i class="fas fa-caret-down"></i>
                              </div>
                              <div class="wpd-auth">
                                <div class="wpd-login">
                                  <a href="https://mangas-origines.fr/"><i class="fas fa-sign-in-alt"></i> Connexion</a>
                                </div>
                              </div>
                            </div>
                            <div class="wpdiscuz-subscribe-bar wpdiscuz-hidden">
                              <form
                                action="https://mangas-origines.fr/wp-admin/admin-ajax.php?action=wpdAddSubscription"
                                method="post" id="wpdiscuz-subscribe-form">
                                <div class="wpdiscuz-subscribe-form-intro">Notification pour </div>
                                <div class="wpdiscuz-subscribe-form-option" style="width:40%;">
                                  <select class="wpdiscuz_select" name="wpdiscuzSubscriptionType">
                                    <option value="post">nouveaux commentaires de suivi</option>
                                    <option value="all_comment">nouvelles réponses à mes commentaires</option>
                                  </select>
                                </div>
                                <div class="wpdiscuz-item wpdiscuz-subscribe-form-email">
                                  <input class="email" type="email" name="wpdiscuzSubscriptionEmail" required="required"
                                    value="" placeholder="E-mail">
                                </div>
                                <div class="wpdiscuz-subscribe-form-button">
                                  <input id="wpdiscuz_subscription_button" class="wpd-prim-button wpd_not_clicked"
                                    type="submit" value="›" name="wpdiscuz_subscription_button">
                                </div>
                                <input type="hidden" id="wpdiscuz_subscribe_form_nonce"
                                  name="wpdiscuz_subscribe_form_nonce" value="8f7a48a015"><input type="hidden"
                                  name="_wp_http_referer" value="/oeuvre/95-solo-leveling/chapitre-170/">
                              </form>
                            </div>
                            <div class="wpd-form wpd-form-wrapper wpd-main-form-wrapper" id="wpd-main-form-wrapper-0_0">
                            </div>
                            <div id="wpdiscuz_hidden_secondary_form" style="display: none;">
                              <div class="wpd-form wpd-form-wrapper wpd-secondary-form-wrapper"
                                id="wpd-secondary-form-wrapper-wpdiscuzuniqueid" style="display: none;">
                                <div class="wpd-secondary-forms-social-content"></div>
                                <div class="clearfix"></div>
                              </div>
                            </div>
                            <div class="wpd-login-to-comment">Veuillez vous connecter pour commenter</div>
                          </div>
                          <div id="wpd-threads" class="wpd-thread-wrapper">
                            <div class="wpd-thread-head">
                              <div class="wpd-thread-info " data-comments-count="0">
                                <span class="wpdtc" title="0">0</span> Commentaires
                              </div>
                              <div class="wpd-space"></div>
                              <div class="wpd-thread-filter">
                                <div class="wpd-filter wpdf-reacted wpd_not_clicked"
                                  wpd-tooltip="Commentaire avec le plus de réactions">
                                  <i class="fas fa-bolt"></i>
                                </div>
                                <div class="wpd-filter wpdf-hottest wpd_not_clicked"
                                  wpd-tooltip="Fil de commentaire le plus chaud">
                                  <i class="fas fa-fire"></i>
                                </div>
                              </div>
                            </div>
                            <div class="wpd-comment-info-bar">
                              <div class="wpd-current-view"><i class="fas fa-quote-left"></i> Commentaires en ligne
                              </div>
                              <div class="wpd-filter-view-all">Afficher tous les commentaires</div>
                            </div>
                            <div class="wpd-thread-list">
                              <div class="wpdiscuz-comment-pagination">
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div id="wpdiscuz-loading-bar" class="wpdiscuz-loading-bar-unauth"></div>
                      <div id="wpdiscuz-comment-message" class="wpdiscuz-comment-message-unauth"></div>
                    </div>

                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <footer class="site-footer">
        <div class="c-footer-sidebar">
          <div class="container">
            <div class="row c-row">
              <div id="custom_html-5"
                class="widget_text widget col-12 col-md-12   default  no-icon heading-style-1 widget_custom_html">
                <div class="widget_text widget__inner widget_custom_html__inner c-widget-wrap">
                  <div class="widget_text widget-content">
                    <div class="textwidget custom-html-widget">
                      <div style="text-align: center;">
                        <p>
                          © 2023 Mangas Origines Inc., tous droits réservés. Tous les comics sur ce site ne sont que des
                          aperçus des comics originaux, il peut y avoir de nombreuses erreurs de langue, de noms de
                          personnages et de scénarios. Pour la version originale, nous vous recommandons fortement de
                          vous procurer le webcomics/mangas s'il est disponible dans votre pays.
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="bottom-footer">
          <div class="container">
            <div class="row">
              <div class="col-md-12">
                <div class="copyright">
                  <p> </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </footer>
      <div id="hover-infor" style="display: none;"></div>
    </div>
  </div>

  <div class="wp-manga-section">
    <input type="hidden" name="bookmarking" value="0">
    <div class="modal fade" id="form-login" tabindex="-1" role="dialog">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">×</span></button>
          </div>
          <div class="modal-body">
            <div id="login" class="login">
              <h3>
                <a href="https://mangas-origines.fr/" title="Mangas Origines" tabindex="-1">Connexion</a>
              </h3>
              <p class="message login"></p>
              <meta name="robots" content="max-image-preview:large">
              <link rel="dns-prefetch" href="//www.googletagmanager.com">
              <link rel="dns-prefetch" href="//challenges.cloudflare.com">
              <link rel="dns-prefetch" href="//pagead2.googlesyndication.com">
              <script type="text/javascript" data-cfasync="false"
                src="https://challenges.cloudflare.com/turnstile/v0/api.js?render=explicit" id="cfturnstile-js" defer=""
                data-wp-strategy="defer"></script>
              <link rel="stylesheet" id="cfturnstile-css-css"
                href="https://mangas-origines.fr/wp-content/plugins/simple-cloudflare-turnstile/css/cfturnstile.css?ver=1.2"
                type="text/css" media="all">
              <meta name="generator" content="Site Kit by Google 1.111.0">
              <style media="screen" id="loginpress-style-wp-5-3">
                .login form .input,
                .login input[type=text],
                .login form input[type=checkbox] {
                  border-radius: 0;
                }

                input[type=checkbox]:checked:before {
                  content: url('data:image/svg+xml;utf8,<svg%20xmlns%3D%27http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%27%20viewBox%3D%270%200%2020%2020%27><path%20d%3D%27M14.83%204.89l1.34.94-5.81%208.38H9.02L5.78%209.67l1.34-1.25%202.57%202.4z%27%20fill%3D%27%231e8cbe%27%2F><%2Fsvg>');
                  margin: -0.25rem 0 0 -0.275rem !important;
                }

                body .language-switcher {
                  margin-top: 10px;
                  clear: both;
                  z-index: 1;
                  position: absolute;
                  top: 100%;
                }

                body #login {
                  position: relative;
                }

                .wp-core-ui #login .button-primary {
                  margin-left: 0;
                }

                .admin-email__actions-primary .button:first-child {
                  font: 400 15px "Roboto", sans-serif;
                  color: #fff;
                  height: auto;
                  line-height: 20px !important;
                  padding: 13px;
                  padding-top: 13px;
                  padding-bottom: 13px;
                  width: 100%;
                  text-align: center;
                  background-color: #008ec2;
                  border: 0;
                  margin-bottom: 8px;
                  border-radius: 5px;
                }

                .admin-email__actions-primary .button:first-child:hover {
                  background-color: #008ec2;
                }

                .login form.admin-email-confirm-form {
                  max-width: 360px;
                  margin: 0 auto;
                }

                .login-action-confirm_admin_email #backtoblog a {
                  color: #008ec2 !important;
                }
              </style>
              <style media="screen" id="loginpress-style">
                /*************************************************************
     * Plugin:      LoginPress - Customizing the WordPress Login.*
     * Description: LoginPress is the best Login Page Customizer *
     *              in WordPress which allows you to completely  *
     *              change the layout of login, register and     *
     *              forgot password forms.                       *
     * Author:      WPBrigade                                    *
     * visit:       https://wordpress.org/plugins/loginpress/    *
     *************************************************************/
                body.login {
                  background-image: url(https://mangas-origines.fr/wp-content/plugins/loginpress/img/bg.jpg);
                  /*background-color: #ddd5c3;*/
                  background-repeat: no-repeat;
                  background-position: center;
                  background-size: cover;
                  background-attachment: fixed;
                  display: table;
                  min-height: 100vh;
                  width: 100%;
                  padding: 0;
                }

                .header-wrapper {
                  /* display: table-row; */
                }

                #login {
                  margin-top: 2%;
                  background: #fff;
                  position: relative;
                  -webkit-border-radius: 5px;
                  -moz-border-radius: 5px;
                  -ms-border-radius: 5px;
                  -o-border-radius: 5px;
                  border-radius: 5px;
                  -webkit-box-shadow: 0 0 15px rgba(0, 0, 0, .8);
                  box-shadow: 0 0 15px rgba(0, 0, 0, .8);
                  max-width: 350px;
                  padding: 26px 26px 6px 26px;
                  width: 100%;
                }

                .login form {
                  margin-top: 20px;
                  margin-left: 0;
                  padding: 0 24px 12px;
                  background: #fff;
                  -webkit-box-shadow: none;
                  box-shadow: none;
                }

                .login form .input,
                .login input[type="text"] {
                  height: 48px;
                  background: #fff;
                  -webkit-border-radius: 5px;
                  -moz-border-radius: 5px;
                  -ms-border-radius: 5px;
                  border-radius: 5px;
                  margin-bottom: 18px;
                  font: normal 15px "Roboto", sans-serif;
                  color: #7f7f7f;
                  border-color: #bdbdbd;
                  padding-left: 27px;
                  font-weight: normal;
                }

                #jetpack_protect_answer {
                  padding-left: 0;
                  text-align: center;
                }

                .login input[type="submit"] {
                  background: #fff;
                  color: #fff;
                  margin: 7px 0 7px;
                  height: 46px;
                  -webkit-border-radius: 5px;
                  -moz-border-radius: 5px;
                  -ms-border-radius: 5px;
                  border-radius: 5px;
                  font: normal 15px "Roboto", sans-serif;
                  color: #fff;
                  width: 100%;
                }

                .wp-core-ui.login .button-group.button-large .button,
                .wp-core-ui.login .button.button-large,
                .wp-core-ui.login .button-primary {
                  height: 46px;
                  line-height: 0;
                  background: #008ec2;
                }

                .wp-core-ui.login .two-factor-email-resend .button {
                  color: #444;
                }

                .login #nav {
                  text-align: center;
                }

                #login_error {
                  display: block;
                }

                /*.message { display:none; }*/
                /*.custom-message {
    	-moz-border-radius:3px 3px 3px 3px;
    	border-style:solid;
    	border-width:1px;
    	margin:0 0 16px 8px;
    	padding:12px;
    }*/

                #backtoblog {
                  text-align: center;
                }

                .header-cell {
                  /* display: table-cell; */
                  height: 100px;
                }

                .loginHeaderMenu {
                  text-align: center;
                  position: relative;
                  z-index: 10;
                  list-style: none;
                  background: #333;

                }

                .loginHeaderMenu>ul>li {
                  display: inline-block;
                  vertical-align: top;
                  position: relative;
                  list-style: none;
                }

                .loginHeaderMenu>ul>li>a {
                  color: #fff;
                  text-transform: uppercase;
                  text-decoration: none;
                  font-size: 16px;
                  padding: 17px 20px;
                  display: inline-block;
                }

                .loginHeaderMenu>ul>li:hover>a {
                  background: #4CAF50;
                  color: #fff;
                }

                .loginHeaderMenu>ul>li>ul {
                  position: absolute;
                  width: 200px;
                  padding: 0;
                  top: 100%;
                  left: 0;
                  background: #fff;
                  list-style: none;
                  text-align: left;
                  border-radius: 0 0 5px 5px;
                  -webkit-box-shadow: 0px 5px 10px -1px rgba(0, 0, 0, 0.31);
                  -moz-box-shadow: 0px 5px 10px -1px rgba(0, 0, 0, 0.31);
                  box-shadow: 0px 5px 10px -1px rgba(0, 0, 0, 0.31);
                  overflow: hidden;
                  opacity: 0;
                  visibility: hidden;
                }

                .loginHeaderMenu>ul>li:hover>ul {
                  opacity: 1;
                  visibility: visible;
                }

                .loginHeaderMenu>ul>li>ul>li {
                  font-size: 15px;
                  color: #333;
                }

                .loginHeaderMenu>ul>li>ul>li>a {
                  color: #333;
                  padding: 10px;
                  display: block;
                  text-decoration: none;
                }

                .loginHeaderMenu>ul>li>ul>li>a:hover {
                  background: rgba(51, 51, 51, 0.35);
                  color: #fff;
                }

                .login-wrapper {
                  display: table-row;
                }

                .login-cell {
                  display: table-cell;
                  vertical-align: middle;
                }

                .clear {
                  display: none;
                }

                .footer-wrapper {
                  /* display: table-footer-group; */
                  position: -webkit-sticky;
                  position: sticky;
                  top: 100vh;
                }

                .footer-cont {

                  right: 0;
                  bottom: 0;
                  left: 0;
                  text-align: center;
                  /* display: table-cell; */
                  vertical-align: bottom;
                  /* height: 100px; */
                }

                .loginFooterMenu {
                  text-align: center;
                  background-color: rgba(0, 0, 0, .7);
                }

                .loginFooterMenu>ul {
                  display: inline-flex;
                }

                .loginFooterMenu>ul>li {
                  display: inline-block;
                  padding: 18px;
                }

                /* style two factor plugin */
                .login .backup-methods-wrap a,
                #login form p:not([class]) {
                  color: #555d66;
                }

                .login .backup-methods-wrap a:hover {
                  color: #00a0d2;
                }

                /*End style two factor plugin */
                .loginFooterMenu>ul>li:focus {
                  outline: none;
                  border: 0;
                }

                .loginFooterMenu>ul>li>a:focus {
                  outline: none;
                  border: 0;
                }

                .loginFooterMenu>ul>li>a {
                  color: #fff;
                  text-transform: uppercase;
                  text-decoration: none;
                  font-size: 14px;
                }

                .loginHead {
                  width: 100%;
                  text-align: center;
                  margin-top: 0;
                  margin-bottom: 20px;
                  padding: 13px 0 0;
                  position: relative;
                  margin: 0;
                }

                .loginHead p a {
                  text-decoration: none;
                }

                .loginFooter {
                  display: table-footer-group;
                }

                .loginFooter p a {
                  display: inline-block;
                  margin: 0 5px;
                }

                .loginInner {
                  margin: 0 auto;
                  text-align: center;
                  margin-top: 20px;
                  margin-bottom: 0;
                  padding: 13px 0;
                  position: relative;
                }

                .copyRight {
                  text-align: center;
                  padding: 12px;
                  background-color: #efefef;
                }

                .loginpress-show-love {
                  color: #222;
                }

                .loginpress-show-love a {
                  color: #263466;
                }

                .loginpress-show-love a:hover {
                  color: #4d5d95;
                }

                @media screen and (max-width: 767px) {
                  #login {
                    width: 300px;
                  }

                  .login form {
                    padding-right: 0;
                    padding-left: 0;
                  }

                  .login .loginpress-show-love {
                    position: static;
                    text-align: center;
                    float: none;
                    background: rgba(255, 255, 255, .5);
                    margin-top: 11px;
                    padding-bottom: 0;
                    padding: 3px;
                  }
                }
              </style>
              <style type="text/css">
                * {
                  box-sizing: border-box;
                }

                .footer-cont {
                  height: 0 !important;
                }

                .login form input[type=checkbox]:focus {
                  box-shadow: none;
                  outline: none;
                }

                .login form .forgetmenot {
                  float: none;
                }

                .login form .forgetmenot label {
                  display: inline-block;
                  margin: 0;
                }

                #login::after {}

                #login {

                  background-color: #14161c;
                }

                html[dir="rtl"] .login form .input,
                html[dir="rtl"] .login input[type="text"] {
                  margin-right: 0;
                }

                body.login #loginpress_video-background-wrapper {}

                body.login #loginpress_video-background {

                  object-fit: cover;

                }

                body.login:after {}

                body.login {

                  background-image: url(https://mangas-origines.fr/wp-content/uploads/2023/07/solo-leveling-manhwa-uhdpaper.com-4K-4.2345-scaled.jpg);

                  background-position: center;
                  background-size: cover;
                  position: relative;
                }

                .login h1 {}

                .interim-login.login h1 a {
                  width: 100px;
                }

                .login h1 a {
                  background-image: url(https://mangas-origines.fr/wp-content/uploads/2023/07/smallori.png ) !important;
                  width: 100px !important;
                  height: 100px !important;
                  background-size: contain !important;


                }

                .wp-core-ui #login .button-primary {}

                .wp-core-ui #login .button-primary:hover {}

                .wp-core-ui #login .button-primary,
                .wp-core-ui #login .two-factor-email-resend .button,
                .wp-core-ui #login .wp-generate-pw {

                  box-shadow: 0 0 0px rgba(0, 0, 0, 0.8);
                  /* box-shadow: none; */
                  height: auto;
                  line-height: 20px;
                  padding: 13px;
                  float: none;
                  width: 100%;
                }

                .wp-core-ui #login .wp-generate-pw {
                  margin-bottom: 6px;
                  margin-top: 10px;
                  font: inherit;
                }

                #loginform {
                  background-color: #14161c;
                  min-height: 229px;
                  padding: 0 24px 12px;
                }

                #loginform input[type="text"],
                #loginform input[type="password"] {

                  box-shadow: 0 0 0px rgba(0, 0, 0, 0.8);
                }

                #registerform input[type="text"],
                #registerform input[type="password"],
                #registerform input[type="number"],
                #registerform input[type="email"] {
                  box-shadow: 0 0 0px rgba(0, 0, 0, 0.8);
                }

                #lostpasswordform input[type="text"] {
                  box-shadow: 0 0 0px rgba(0, 0, 0, 0.8);
                }

                #login {
                  max-width: 525px !important;
                }

                .login form .forgetmenot label {
                  color: #ffffff !important;
                }

                .login label {
                  color: #ffffff;
                }

                .login form .input,
                .login input[type="text"] {
                  background: #ffffff;
                }

                #lostpasswordform {
                  padding: 0 24px 12px;
                  background-color: #14161c;
                }

                #registerform {
                  padding: 0 24px 12px;
                  background-color: #14161c;
                }

                #wfls-prompt-overlay {
                  background-color: #14161c;
                }

                .login .custom-message {

                  border-left: 4px solid #00a0d2;

                  background-color: #020000;

                  padding: 12px;
                  margin-left: 0;
                  margin-bottom: 20px;
                  -webkit-box-shadow: 0 1px 1px 0 rgba(0, 0, 0, .1);
                  box-shadow: 0 1px 1px 0 rgba(0, 0, 0, .1);
                }

                .login #nav {}

                .login #nav a,
                .login #nav {}

                .login form .forgetmenot label {}

                .login input[type="submit"] {}

                .login #nav a:hover {}

                .login #backtoblog {}

                .login .copyRight {}

                /* .loginpress-show-love, .loginpress-show-love a{
		color: ;
	} */

                .login .copyRight {}

                .login #backtoblog a {
                  text-decoration: none;
                }

                .login #backtoblog {}

                .login #backtoblog a:hover {}

                .loginHead {}

                .loginHead p a {}

                .loginHead p a:hover {}

                .loginFooter p a {
                  margin: 0 5px;
                }

                .loginFooter p a:hover {}

                .loginInner {}

                #login {
                  margin: auto !important;
                }

                .wp-core-ui .button-primary {
                  text-shadow: none;
                }

                /*input:-webkit-autofill{
  transition: all 100000s ease-in-out 0s !important;
  transition-property: background-color, color !important;
}*/
                .copyRight {
                  padding: 12px 170px;
                }

                .loginpress-show-love {
                  float: right;
                  font-style: italic;
                  padding-right: 20px;
                  padding-bottom: 10px;
                  position: absolute;
                  bottom: 3px;
                  right: 0;
                  z-index: 10;
                }

                .loginpress-show-love a {
                  text-decoration: none;
                }

                .love-position {
                  left: 0;
                  padding-left: 20px;
                }

                .header-cell {
                  /* display: table-cell; */
                  height: 100px;
                }

                .loginHeaderMenu {
                  text-align: center;
                  position: relative;
                  z-index: 10;
                  list-style: none;
                  background: #333;

                }

                .loginHeaderMenu>ul>li {
                  display: inline-block;
                  vertical-align: top;
                  position: relative;
                  list-style: none;
                }

                .loginHeaderMenu>ul>li>a {
                  color: #fff;
                  text-transform: uppercase;
                  text-decoration: none;
                  font-size: 16px;
                  padding: 17px 20px;
                  display: inline-block;
                }

                .loginHeaderMenu>ul>li:hover>a {
                  background: #4CAF50;
                  color: #fff;
                }

                .loginHeaderMenu>ul>li>ul {
                  position: absolute;
                  width: 200px;
                  padding: 0;
                  top: 100%;
                  left: 0;
                  background: #fff;
                  list-style: none;
                  text-align: left;
                  border-radius: 0 0 5px 5px;
                  -webkit-box-shadow: 0px 5px 10px -1px rgba(0, 0, 0, 0.31);
                  -moz-box-shadow: 0px 5px 10px -1px rgba(0, 0, 0, 0.31);
                  box-shadow: 0px 5px 10px -1px rgba(0, 0, 0, 0.31);
                  overflow: hidden;
                  opacity: 0;
                  visibility: hidden;
                }

                .loginHeaderMenu>ul>li:hover>ul {
                  opacity: 1;
                  visibility: visible;
                }

                .loginHeaderMenu>ul>li>ul>li {
                  font-size: 15px;
                  color: #333;
                }

                .loginHeaderMenu>ul>li>ul>li>a {
                  color: #333;
                  padding: 10px;
                  display: block;
                  text-decoration: none;
                }

                .loginHeaderMenu>ul>li>ul>li>a:hover {
                  background: rgba(51, 51, 51, 0.35);
                  color: #fff;
                }

                .loginHeaderMenu>ul {
                  flex-wrap: wrap;
                  display: flex;
                  justify-content: center;
                }

                .loginFooterMenu {
                  text-align: center;
                  background-color: rgba(0, 0, 0, .7);
                }

                .loginFooterMenu>ul {
                  display: inline-flex;
                }

                .loginFooterMenu>ul>li {
                  display: inline-block;
                  padding: 18px;
                }

                .loginFooterMenu>ul>li:focus {
                  outline: none;
                  border: 0;
                }

                .loginFooterMenu>ul>li>a:focus {
                  outline: none;
                  border: 0;
                }

                .loginFooterMenu>ul>li>a {
                  color: #fff;
                  text-transform: uppercase;
                  text-decoration: none;
                  font-size: 14px;
                }

                .loginFooterMenu>ul {
                  flex-wrap: wrap;
                  display: flex;
                  justify-content: center;
                }

                .loginpress-caps-lock {
                  background: rgba(51, 56, 61, 0.9);
                  color: #fff;
                  display: none;
                  font-size: 14px;
                  width: 120px;
                  padding: 5px 10px;
                  line-height: 20px;
                  position: absolute;
                  left: calc(100% + 10px);
                  top: 50%;
                  transform: translateY(-50%);
                  border-radius: 5px;
                  -webkit-transition: all 0.3s ease-in-out;
                  transition: all 0.3s ease-in-out;
                  text-align: center;
                  -webkit-box-shadow: 0 0 9px 0px rgba(0, 0, 0, 0.20);
                  box-shadow: 0 0 9px 0px rgba(0, 0, 0, 0.20);
                  margin-left: 5px;
                  font-weight: normal;
                  margin: 0;
                  display: none;
                }

                .loginpress-caps-lock:before {
                  content: '';
                  width: 0;
                  height: 0;
                  border-style: solid;
                  border-width: 5px 5px 5px 0;
                  border-color: transparent rgba(51, 56, 61, 0.9) transparent transparent;
                  position: absolute;
                  top: 50%;
                  right: 100%;
                  margin-left: 0;
                  margin-top: -5px;
                  -webkit-transition: all 0.3s ease-in-out;
                  transition: all 0.3s ease-in-out;
                  z-index: 1;
                }

                .login form {
                  overflow: visible;
                  border: none;
                }

                #loginform .user-pass-fields input {
                  margin-bottom: 0;
                }

                #loginform .user-pass-fields {
                  margin-bottom: 18px;
                  position: relative;
                }

                #login form p.submit {
                  position: relative;
                  clear: both;
                }

                input[type=checkbox]:checked::before {
                  margin: -.35rem 0 0 -.375rem;
                }

                /* LoginPress input field since 1.1.20 */
                /* .loginpress-input-wrap{
	 position: relative;
 }
.loginpres-input-field {
	transition: 0.4s;
}
.loginpres-input-field ~ .focus-border:before, .loginpres-input-field ~ .focus-border:after{
	content: "";
	position: absolute;
	top: 0;
	left: 50%;
	width: 0;
	height: 2px;
	background-color: #3399FF;
	transition: 0.4s;
	z-index: 999;
}
.loginpres-input-field ~ .focus-border:after{
	top: auto; bottom: 0;
}
.loginpres-input-field ~ .focus-border i:before, .loginpres-input-field ~ .focus-border i:after{
	content: "";
	position: absolute;
	top: 50%;
	left: 0;
	width: 2px;
	height: 0;
	background-color: #3399FF;
	transition: 0.6s;
}
.loginpres-input-field ~ .focus-border i:after{
	left: auto; right: 0;
}
.loginpres-input-field:focus ~ .focus-border:before, .loginpres-input-field:focus ~ .focus-border:after{
	left: 0;
	width: 100%;
	transition: 0.4s;
}
.loginpres-input-field:focus ~ .focus-border i:before, .loginpres-input-field:focus ~ .focus-border i:after{
	top: 0;
	height: 100%;
	transition: 0.6s;
} */
                /* ! LoginPress input field since 1.1.20 */
                @media screen and (max-width: 1239px) and (min-width: 768px) {
                  body.login #loginpress_video-background-wrapper {}
                }

                @media screen and (max-width: 767px) {
                  .login h1 a {
                    max-width: 100%;
                    background-size: contain !important;
                  }

                  .copyRight {
                    padding: 12px;
                  }

                  .loginpress-caps-lock {
                    left: auto;
                    right: 0;
                    top: 149%;
                  }

                  .loginpress-caps-lock:before {
                    content: '';
                    width: 0;
                    height: 0;
                    border-style: solid;
                    border-width: 0 5px 5px 5px;
                    border-color: transparent transparent rgba(51, 56, 61, 0.9) transparent;
                    position: absolute;
                    top: 0px;
                    left: 5px;
                    right: auto;
                  }

                  .loginpress-show-love {
                    display: none !important;
                  }

                  body.login #loginpress_video-background-wrapper {}
                }

                @media screen and (max-height: 700px) {
                  .loginpress-show-love {
                    display: none !important;
                  }
                }

                /* The only rule that matters */
                #loginpress_video-background {
                  /*  making the video fullscreen  */
                  position: fixed !important;
                  right: 0 !important;
                  bottom: 0 !important;
                  width: 100% !important;
                  height: 100% !important;
                  z-index: -100 !important;
                }

                body.login #login.login_tranparent,
                body.login #login.login_tranparent #loginform {
                  background: none !important;
                }

                body.login {
                  display: flex;
                  flex-direction: column;
                }

                body #login {
                  margin-bottom: 0;
                }

                body.login label[for="authcode"]:after {
                  display: none;
                }

                body.login label[for="authcode"]+input {
                  padding-left: 15px;
                }

                /* Default Login Popup styling */

                .interim-login.login form {
                  margin: 30px !important;
                }

                .interim-login #login_error,
                .interim-login.login .message {
                  margin: 0 20px 16px !important;
                }

                .interim-login.login {
                  min-height: 520px;
                  height: 100vh;
                }

                .interim-login #login {
                  width: 100%;
                  max-width: 380px;
                  margin-top: 0;
                  margin-bottom: 0;
                  height: 100%;
                  border-radius: 0;
                  display: flex;
                  flex-direction: column;
                  justify-content: center;
                  padding: 20px 0;
                }

                .interim-login #login .submit {
                  margin-top: 10px;
                }

                [for="language-switcher-locales"]:after {
                  display: none;
                }

                .language-switcher {
                  clear: both;
                  padding-top: 1px;
                }

                .login #language-switcher input[type="submit"] {
                  margin: 0;
                  color: #2271b1;
                  border-color: #2271b1;
                  background: #f6f7f7;
                  vertical-align: top;
                  height: inherit;
                  width: inherit;
                  font-size: inherit;
                }
              </style>
              <link rel="icon" href="https://mangas-origines.fr/wp-content/uploads/2023/07/cropped-favmo3-32x32.png"
                sizes="32x32">
              <link rel="icon" href="https://mangas-origines.fr/wp-content/uploads/2023/07/cropped-favmo3-192x192.png"
                sizes="192x192">
              <link rel="apple-touch-icon"
                href="https://mangas-origines.fr/wp-content/uploads/2023/07/cropped-favmo3-180x180.png">
              <meta name="msapplication-TileImage"
                content="https://mangas-origines.fr/wp-content/uploads/2023/07/cropped-favmo3-270x270.png">
              <style type="text/css">
                body.login div#login h1 a {
                  background-image: url(https://mangas-origines.fr/wp-content/uploads/2023/07/cropped-favmo.png);
                  width: 320px;
                  height: 120px;
                  background-size: auto;
                  background-position: center;
                }
              </style>
              <form name="loginform" id="loginform" method="post">
                <p>
                  <label>Nom d'utilisateur ou adresse mail * <br> <input type="text" name="log" class="input user_login"
                      value="" size="20">
                  </label>
                </p>
                <p>
                  <label>Mot de passe * <br> <input type="password" autocomplete="" name="pwd" class="input user_pass"
                      value="" size="20">
                  </label>
                </p>
                <p>
                </p>
                <div id="cf-turnstile-3730363301" class="cf-turnstile" data-sitekey="0x4AAAAAAAG2lxHacvIkeOZf"
                  data-theme="dark" data-language="auto" data-retry="auto" data-retry-interval="1000"
                  data-action="wordpress-login" data-appearance="always"><iframe
                    src="https://challenges.cloudflare.com/cdn-cgi/challenge-platform/h/b/turnstile/if/ov2/av0/rcv0/0/34j6j/0x4AAAAAAAG2lxHacvIkeOZf/dark/normal"
                    allow="cross-origin-isolated; fullscreen" sandbox="allow-same-origin allow-scripts allow-popups"
                    id="cf-chl-widget-34j6j" tabindex="0"
                    title="Widget, das eine Cloudflare-Sicherheitsherausforderung enthält"
                    style="border: none; overflow: hidden; width: 300px; height: 65px;"></iframe><input type="hidden"
                    name="cf-turnstile-response" id="cf-chl-widget-34j6j_response"
                    value="0.skUlLT4YmPKQ0ceho_yRrSbai20bLt92nzPENSnxuPGTvflLrTdfFr1R8yTt1jDnshkBEL0U_sNZjTDU-0oYeARZbJIC5elASWlTOQSMfOFrD-UU-FjVKLPTc2cUr1cfQDIP--ELtoya6c4E7XwR3tRbssydcBNjom3bleiaSMw7JBoUqE8PmSE_SglUiEW_BMdApgDOR1PraRSAb3ClMQ3KWqshcz82hFFsE3_zTu0pEGaS3nkCpc0k71Tiu-MsdK_59OQMOkK9IooczDT7b__Rk-6HBNU4Hf_UuopnxSYwCungrRIO59t_-MegzVXa-oaAKjKf45b6x2WrDfwuhYsx_gmpbUdKaQg_P4IHThwXGTGqavc5AwqjR7EvcODJq0Zf--_Pz-cjc6xg4EBUJ_6vqy7xyjFLmDzj9jEmHy6PUQ2EyoHfWOu3o3cZH-w8aHTIJTykL16RUdt8W-UkLY_Hyb0b4dxlvjSl-71vzXs.YCvTqDwk7YaQ2mBtHVv3DA.a586bc13ae5d4437b5b6607a2f799c7d49640af4aa0064b52893beb2813e4d7f">
                </div>
                <br class="cf-turnstile-br cf-turnstile-br-3730363301">
                <script>document.addEventListener("DOMContentLoaded", (function () { var e = document.getElementById("cf-turnstile-3730363301"); setTimeout((function () { e && (turnstile.render("#cf-turnstile-3730363301", { sitekey: "0x4AAAAAAAG2lxHacvIkeOZf" })) }), 100) }));</script>
                <p></p>
                <p class="forgetmenot">
                  <label>
                    <input name="rememberme" type="checkbox" id="rememberme" value="forever">Se souvenir de moi </label>
                </p>
                <p class="submit">
                  <input type="submit" name="wp-submit" class="button button-primary button-large wp-submit"
                    value="Connexion"> <input type="hidden" name="redirect_to"
                    value="https://mangas-origines.fr/wp-admin/">
                  <input type="hidden" name="testcookie" value="1">
                </p>
              </form>
              <p class="nav">
                <a href="javascript:avoid(0)" class="to-reset">Mot de passe oublié ?</a>
              </p>
              <p class="backtoblog">
                <a href="javascript:void(0)">← Retourner surMangas Origines</a>
              </p>
            </div>
          </div>
          <div class="modal-footer"></div>
        </div>
      </div>
    </div>
    <div class="modal fade" id="form-sign-up" tabindex="-1" role="dialog">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">×</span></button>
          </div>
          <div class="modal-body">
            <div id="sign-up" class="login">
              <h3>
                <a href="https://mangas-origines.fr/" title="Mangas Origines" tabindex="-1">S'inscrire</a>
              </h3>
              <p class="message register">Créer un compte sur le site</p>
              <form name="registerform" id="registerform" novalidate="novalidate">
                <p>
                  <label>Nom d'utilisateur * <br>
                    <input type="text" name="user_sign-up" class="input user_login" value="" size="20">
                  </label>
                </p>
                <p>
                  <label>Adresse mail * <br>
                    <input type="email" name="email_sign-up" class="input user_email" value="" size="20">
                  </label>
                </p>
                <p>
                  <label>Mot de passe *<br>
                    <input type="password" name="pass_sign-up" autocomplete="" class="input user_pass" value=""
                      size="25">
                  </label>
                </p>
                <p class="action">
                </p>
                <div id="cf-turnstile-1593989085" class="cf-turnstile" data-sitekey="0x4AAAAAAAG2lxHacvIkeOZf"
                  data-theme="dark" data-language="auto" data-retry="auto" data-retry-interval="1000"
                  data-action="wordpress-register" data-appearance="always"><iframe
                    src="https://challenges.cloudflare.com/cdn-cgi/challenge-platform/h/b/turnstile/if/ov2/av0/rcv0/0/9n7ew/0x4AAAAAAAG2lxHacvIkeOZf/dark/normal"
                    allow="cross-origin-isolated; fullscreen" sandbox="allow-same-origin allow-scripts allow-popups"
                    id="cf-chl-widget-9n7ew" tabindex="0"
                    title="Widget, das eine Cloudflare-Sicherheitsherausforderung enthält"
                    style="border: none; overflow: hidden; width: 300px; height: 65px;"></iframe><input type="hidden"
                    name="cf-turnstile-response" id="cf-chl-widget-9n7ew_response"
                    value="0.TU14xunbapiBP8mye9cP6_TDGuKguLTJUGQ6vy6TgsXw-CUfBNRkJlXWqyebkIcijNHNS0B-1kWBk59QPz2d_nl_kkk2mFSK8eUuxu1Se9fPLpH_YrzVK2s9BoNv5URUIGHgTGQTJNe_ShCBr0uQ0Go6l1uR4ulXt3lHgvdUyNn0RqLT1uDcgALSobvNy2fZQL5w1EzSmyrZ_Co959mTUBnC8Ye1CLrjI_TXlLK_SGnkZjjC77mzTH2V1UXVVUShDJphAfAdb_ZvwGw2BkA8N9wIJb6say2VBF5PsgCqdHY8_1xX5btv6S3WoGtoqzikZMCFrSXDtN1WVqU9j84hwiaofjA3JCclW-kt7scus85TSSAZbs4LSUevGe7bm45g64VAGNaJbQdX-cfQhjbf-1VIgDXQRNs5Gm7tOm1FUWOnQgmhQYRytmuibMlPzCv3b-KwGPt7CMQvM5WvfudOxp5vUAXVzbIUDigNwQtfz8S-casQ2YWVMgfyLCYrNcV3.M1DJR_MXgPSOZOgPMGxvow.b4b164b121602b7d5b1343d615e6c004cae5e62164f460b7a1fbc5e87001805e">
                </div>
                <br class="cf-turnstile-br cf-turnstile-br-1593989085">
                <script>document.addEventListener("DOMContentLoaded", (function () { var e = document.getElementById("cf-turnstile-1593989085"); setTimeout((function () { e && (turnstile.render("#cf-turnstile-1593989085", { sitekey: "0x4AAAAAAAG2lxHacvIkeOZf" })) }), 100) }));</script>
                <p></p>
                <input type="hidden" name="redirect_to" value="">
                <p class="submit">
                  <input type="submit" name="wp-submit" class="button button-primary button-large wp-submit"
                    value="S'inscrire">
                </p>
              </form>
              <p class="nav">
                <a href="javascript:void(0)" class="to-login">Connexion</a>
                |
                <a href="javascript:void(0)" class="to-reset">Mot de passe oublié ?</a>
              </p>
              <p class="backtoblog">
                <a href="javascript:void(0)">← Retourner surMangas Origines</a>
              </p>
            </div>
          </div>
          <div class="modal-footer"></div>
        </div>
      </div>
    </div>
    <div class="modal fade" id="form-reset" tabindex="-1" role="dialog">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">×</span></button>
          </div>
          <div class="modal-body">
            <div id="reset" class="login">
              <h3>
                <a href="javascript:void(0)" class="to-reset">Mot de passe oublié ?</a>
              </h3>
              <p class="message reset">Entrez votre nom d'utilisateur ou mail. Vous recevrez un lien pour recréer un
                nouveau mot de passe par mail.</p>
              <form name="resetform" id="resetform" method="post">
                <p>
                  <label>Nom d'utilisateur ou adresse mail <br>
                    <input type="text" name="user_reset" id="user_reset" class="input" value="" size="20">
                  </label>
                </p>
                <div id="cf-turnstile-4122336401" class="cf-turnstile" data-sitekey="0x4AAAAAAAG2lxHacvIkeOZf"
                  data-theme="dark" data-language="auto" data-retry="auto" data-retry-interval="1000"
                  data-action="wordpress-reset" data-appearance="always"><iframe
                    src="https://challenges.cloudflare.com/cdn-cgi/challenge-platform/h/b/turnstile/if/ov2/av0/rcv0/0/fgw8b/0x4AAAAAAAG2lxHacvIkeOZf/dark/normal"
                    allow="cross-origin-isolated; fullscreen" sandbox="allow-same-origin allow-scripts allow-popups"
                    id="cf-chl-widget-fgw8b" tabindex="0"
                    title="Widget, das eine Cloudflare-Sicherheitsherausforderung enthält"
                    style="border: none; overflow: hidden; width: 300px; height: 65px;"></iframe><input type="hidden"
                    name="cf-turnstile-response" id="cf-chl-widget-fgw8b_response"
                    value="0.dUJHsJWMiexh1m86a0j-_5IFOi2deiO5gvoP0PCnlr2iAtSTmmq8foikhHRnhAtup5gtCxHKvvrXZe4r2qUMREdWTRfWm1q0FC227QPgOas6R8OHdXdc8pnGFc-pzCk3ZDh6aj2RsDKoZq6rP_JPJKFEFYgWRqVylfDJY7FywLPRY0EUQycVTo-M1eVAjVvEYebY1Xg1ymh927dfhjd5Yk96MWLqTRwVi40ekN06YBS1tsvrsl0ERzw_mzgy1FbwV1rJ6HmybIFhli_wnqG5lDLoG_jiVGw_M-WnXYtb-Km6JbfveW5en3VFztaMh41MqRmzifDAemrpg98ddBIf_rvL_Wplf8-f8eivJ45FdZJkBYa-SXdMzy_QUdoZcitA7vBTEqX10U9M4Sv81eU3jx2Ynjcl6-v5TlpFGZXPNdDmGI3p_qMOiETuvMcKoCB6rrrqUWT5GUQF5dwyDeSIx-xy9hdN508If1Rt_xRQkEc.3fOXCgURkndVokyBewD6Dw.28061325dc4aeea0617c86d47af064885fe7c88264cfb6908160ced817b477e3">
                </div>
                <br class="cf-turnstile-br cf-turnstile-br-4122336401">
                <script>document.addEventListener("DOMContentLoaded", (function () { var e = document.getElementById("cf-turnstile-4122336401"); setTimeout((function () { e && (turnstile.render("#cf-turnstile-4122336401", { sitekey: "0x4AAAAAAAG2lxHacvIkeOZf" })) }), 100) }));</script>
                <p class="submit">
                  <input type="submit" name="wp-submit" class="button button-primary button-large wp-submit"
                    value="Get New Password">
                  <input type="hidden" name="testcookie" value="1">
                </p>
              </form>
              <p>
                <a class="backtoblog" href="javascript:void(0)">← Retourner surMangas Origines</a>
              </p>
            </div>
          </div>
          <div class="modal-footer"></div>
        </div>
      </div>
    </div>
  </div>
  <a nofollow="" noindex="" href="javascript:void(0);" id="wpdUserContentInfoAnchor" style="display:none;"
    rel="#wpdUserContentInfo" data-wpd-lity="">wpDiscuz</a>
  <div id="wpdUserContentInfo"
    style="overflow:auto;background:#FDFDF6;padding:20px;width:600px;max-width:100%;border-radius:6px;"
    class="lity-hide"></div>
  <div id="wpd-editor-source-code-wrapper-bg"></div>
  <div id="wpd-editor-source-code-wrapper"><textarea id="wpd-editor-source-code"></textarea><button
      id="wpd-insert-source-code">Insert</button><input type="hidden" id="wpd-editor-uid"></div>
  <div class="go-to-top active">
    <i class="icon ion-md-arrow-up"></i>
  </div>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-content/plugins/wpdiscuz/assets/third-party/wpdccjs/wpdcc.js?ver=7.6.10"
    id="wpdiscuz-cookie-js-js"></script>
  <script id="quill-js-before" type="text/javascript">
    var wpdiscuzEditorOptions = {
      modules: {
        toolbar: "",
        counter: {
          uniqueID: "",
          commentmaxcount: 0,
          replymaxcount: 0,
          commentmincount: 1,
          replymincount: 1,
        },
      },
      wc_be_the_first_text: "Soyez le premier \u00e0 commenter\u00a0!",
      wc_comment_join_text: "Rejoindre la discussion",
      theme: 'snow',
      debug: 'warn'
    };
  </script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-content/plugins/wpdiscuz/assets/third-party/quill/quill.js?ver=1.3.6"
    id="quill-js"></script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-content/plugins/wpdiscuz/assets/js/wpd-editor.js?ver=1.3.6"
    id="wpd-editor-js"></script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-content/plugins/wpdiscuz/assets/third-party/autogrow/jquery.autogrowtextarea.min.js?ver=1.3.6"
    id="autogrowtextarea-js-js"></script>
  <script type="text/javascript" id="wpdiscuz-ajax-js-js-extra">
    /* <![CDATA[ */
    var wpdiscuzAjaxObj = { "wc_hide_replies_text": "Masquer les r\u00e9ponses", "wc_show_replies_text": "Voir les r\u00e9ponses", "wc_msg_required_fields": "Veuillez remplir les champs obligatoires", "wc_invalid_field": "Une partie du champ est invalide", "wc_error_empty_text": "merci de compl\u00e9ter ce champ pour commenter", "wc_error_url_text": "URL invalide", "wc_error_email_text": "Adresse email invalide", "wc_invalid_captcha": "Code Captcha invalide", "wc_login_to_vote": "Vous devez \u00eatre connect\u00e9 pour voter", "wc_deny_voting_from_same_ip": "Vous n\u2019\u00eates pas autoris\u00e9 \u00e0 voter pour ce commentaire", "wc_self_vote": "Vous ne pouvez pas voter sur vos propres commentaires", "wc_vote_only_one_time": "Vous avez d\u00e9j\u00e0 vot\u00e9 pour ce commentaire", "wc_voting_error": "Erreur sur vote", "wc_comment_edit_not_possible": "D\u00e9sol\u00e9, il n\u2019est plus possible de modifier ce commentaire", "wc_comment_not_updated": "D\u00e9sol\u00e9, le commentaire n\u2019a pas \u00e9t\u00e9 mis \u00e0 jour", "wc_comment_not_edited": "Vous n\u2019avez fait aucune modification", "wc_msg_input_min_length": "L\u2019entr\u00e9e est trop courte", "wc_msg_input_max_length": "L\u2019entr\u00e9e est trop longue", "wc_spoiler_title": "Titre spoiler", "wc_cannot_rate_again": "Vous ne pouvez pas \u00e9valuer \u00e0 nouveau", "wc_not_allowed_to_rate": "Vous n\u2019\u00eates pas autoris\u00e9 \u00e0 voter ici", "wc_follow_user": "Suivre cet utilisateur", "wc_unfollow_user": "Ne plus suivre cet utilisateur", "wc_follow_success": "Vous avez commenc\u00e9 \u00e0 suivre cet auteur de commentaires", "wc_follow_canceled": "Vous avez cess\u00e9 de suivre cet auteur de commentaire.", "wc_follow_email_confirm": "Veuillez v\u00e9rifier vos e-mail et confirmer la demande de l\u2019utilisateur.", "wc_follow_email_confirm_fail": "D\u00e9sol\u00e9, nous n\u2019avons pas pu envoyer l\u2019e-mail de confirmation.", "wc_follow_login_to_follow": "Veuillez vous connecter pour suivre les utilisateurs.", "wc_follow_impossible": "Nous sommes d\u00e9sol\u00e9s, mais vous ne pouvez pas suivre cet utilisateur.", "wc_follow_not_added": "Le suivi a \u00e9chou\u00e9. Veuillez r\u00e9essayer plus tard.", "is_user_logged_in": "", "commentListLoadType": "0", "commentListUpdateType": "0", "commentListUpdateTimer": "60", "liveUpdateGuests": "0", "wordpressThreadCommentsDepth": "5", "wordpressIsPaginate": "", "commentTextMaxLength": "0", "replyTextMaxLength": "0", "commentTextMinLength": "1", "replyTextMinLength": "1", "storeCommenterData": "100000", "socialLoginAgreementCheckbox": "1", "enableFbLogin": "0", "fbUseOAuth2": "0", "enableFbShare": "0", "facebookAppID": "", "facebookUseOAuth2": "0", "enableGoogleLogin": "0", "googleClientID": "", "googleClientSecret": "", "cookiehash": "b538cb9389137779264b11b02ba344fc", "isLoadOnlyParentComments": "0", "scrollToComment": "1", "commentFormView": "collapsed", "enableDropAnimation": "1", "isNativeAjaxEnabled": "0", "enableBubble": "0", "bubbleLiveUpdate": "0", "bubbleHintTimeout": "45", "bubbleHintHideTimeout": "10", "cookieHideBubbleHint": "wpdiscuz_hide_bubble_hint", "bubbleShowNewCommentMessage": "1", "bubbleLocation": "content_left", "firstLoadWithAjax": "0", "wc_copied_to_clipboard": "Copied to clipboard!", "inlineFeedbackAttractionType": "blink", "loadRichEditor": "1", "wpDiscuzReCaptchaSK": "", "wpDiscuzReCaptchaTheme": "light", "wpDiscuzReCaptchaVersion": "2.0", "wc_captcha_show_for_guest": "0", "wc_captcha_show_for_members": "0", "wpDiscuzIsShowOnSubscribeForm": "0", "wmuEnabled": "1", "wmuInput": "wmu_files", "wmuMaxFileCount": "1", "wmuMaxFileSize": "2097152", "wmuPostMaxSize": "1048576000", "wmuIsLightbox": "0", "wmuMimeTypes": { "jpg": "image\/jpeg", "jpeg": "image\/jpeg", "jpe": "image\/jpeg", "gif": "image\/gif", "png": "image\/png", "bmp": "image\/bmp", "tiff": "image\/tiff", "tif": "image\/tiff", "ico": "image\/x-icon" }, "wmuPhraseConfirmDelete": "Are you sure you want to delete this attachment?", "wmuPhraseNotAllowedFile": "Type de fichier non autoris\u00e9", "wmuPhraseMaxFileCount": "Le nombre maximum de fichiers qui peuvent \u00eatre upload\u00e9s est 1", "wmuPhraseMaxFileSize": "La taille maximale du fichier qui peut \u00eatre upload\u00e9 est 2MB", "wmuPhrasePostMaxSize": "La taille maximale de la publication est 1000MB", "wmuPhraseDoingUpload": "Uploading in progress! Please wait.", "msgEmptyFile": "File is empty. Please upload something more substantial. This error could also be caused by uploads being disabled in your php.ini or by post_max_size being defined as smaller than upload_max_filesize in php.ini.", "msgPostIdNotExists": "ID de publication inexistante", "msgUploadingNotAllowed": "Sorry, uploading not allowed for this post", "msgPermissionDenied": "Vous n\u2019avez pas les droits suffisants pour effectuer cette action", "wmuKeyImages": "images", "wmuSingleImageWidth": "auto", "wmuSingleImageHeight": "200", "version": "7.6.10", "wc_post_id": "253", "isCookiesEnabled": "1", "loadLastCommentId": "0", "dataFilterCallbacks": { "wpdLoadMoreComments": ["wp_manga_chapter_comment"] }, "phraseFilters": [], "scrollSize": "32", "is_email_field_required": "1", "url": "https:\/\/mangas-origines.fr\/wp-admin\/admin-ajax.php", "customAjaxUrl": "https:\/\/mangas-origines.fr\/wp-content\/plugins\/wpdiscuz\/utils\/ajax\/wpdiscuz-ajax.php", "bubbleUpdateUrl": "https:\/\/mangas-origines.fr\/wp-json\/wpdiscuz\/v1\/update", "restNonce": "ed0a9d6e04" };
    /* ]]> */
  </script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-content/plugins/wpdiscuz/assets/js/wpdiscuz.js?ver=7.6.10"
    id="wpdiscuz-ajax-js-js"></script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-content/plugins/wpdiscuz/assets/js/wpdiscuz-mu-frontend.js?ver=7.6.10"
    id="wpdiscuz-mu-js-js"></script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-content/plugins/wpdiscuz/assets/third-party/lity/lity.js?ver=7.6.10"
    id="wpdiscuz-lity-js-js"></script>
  <script type="text/javascript" id="wpdiscuz-user-content-js-js-extra">
    /* <![CDATA[ */
    var wpdiscuzUCObj = { "msgConfirmDeleteComment": "\u00cates-vous s\u00fbr de vouloir supprimer ce commentaire\u00a0?", "msgConfirmCancelSubscription": "\u00cates-vous s\u00fbr de vouloir annuler cet abonnement\u00a0?", "msgConfirmCancelFollow": "Confirmez-vous vouloir annuler ce suivi\u00a0?", "additionalTab": "0" };
    /* ]]> */
  </script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-content/plugins/wpdiscuz/assets/js/wpdiscuz-user-content.js?ver=7.6.10"
    id="wpdiscuz-user-content-js-js"></script>
  <script type="text/javascript" src="https://mangas-origines.fr/wp-includes/js/comment-reply.min.js?ver=6.3.2"
    id="comment-reply-js"></script>
  <script type="text/javascript" src="https://mangas-origines.fr/wp-content/themes/madara/js/core.js?ver=6.3.2"
    id="madara-core-js"></script>
  <script type="text/javascript" src="https://mangas-origines.fr/wp-content/themes/madara/js/smoothscroll.js?ver=1.4.10"
    id="smoothscroll-js"></script>
  <script type="text/javascript" src="https://mangas-origines.fr/wp-includes/js/imagesloaded.min.js?ver=4.1.4"
    id="imagesloaded-js"></script>
  <script type="text/javascript" src="https://mangas-origines.fr/wp-content/themes/madara/js/aos.js?ver=6.3.2"
    id="aos-js"></script>
  <script type="text/javascript" src="https://mangas-origines.fr/wp-content/themes/madara/js/ajax.js?ver=6.3.2"
    id="madara-ajax-js"></script>
  <script id="perfmatters-lazy-load-js-before" type="text/javascript">
    window.lazyLoadOptions = { elements_selector: "img[data-src],.perfmatters-lazy,.perfmatters-lazy-css-bg", thresholds: "0px 0px", class_loading: "pmloading", class_loaded: "pmloaded", callback_loaded: function (element) { if (element.tagName === "IFRAME") { if (element.classList.contains("pmloaded")) { if (typeof window.jQuery != "undefined") { if (jQuery.fn.fitVids) { jQuery(element).parent().fitVids() } } } } } }; window.addEventListener("LazyLoad::Initialized", function (e) { var lazyLoadInstance = e.detail.instance; var target = document.querySelector("body"); var observer = new MutationObserver(function (mutations) { lazyLoadInstance.update() }); var config = { childList: !0, subtree: !0 }; observer.observe(target, config); });
  </script>
  <script type="text/javascript" async=""
    src="https://mangas-origines.fr/wp-content/plugins/perfmatters/js/lazyload.min.js?ver=2.1.7"
    id="perfmatters-lazy-load-js"></script>
  <script type="text/javascript" id="wp-manga-login-ajax-js-extra">
    /* <![CDATA[ */
    var wpMangaLogin = { "admin_ajax": "https:\/\/mangas-origines.fr\/wp-admin\/admin-ajax.php", "home_url": "https:\/\/mangas-origines.fr", "nonce": "265bea2967", "messages": { "please_enter_username": "Entrez un nom d&#039;utilisateur", "please_enter_password": "Please enter password", "invalid_username_or_password": "Nom d&#039;utilisateur ou mot de passe incorrect", "server_error": "Server Error!", "username_or_email_cannot_be_empty": "Le nom d&#039;utilisateur ou l&#039;adresse mail ne peut pas \u00eatre vide ", "please_fill_all_fields": "Please fill in all password fields.", "password_cannot_less_than_12": "Password cannot have less than 12 characters", "password_doesnot_match": "Password does not match. Please try again.", "username_cannot_empty": "Le nom d&#039;utilisateur ne peut pas \u00eatre vide", "email_cannot_empty": "Email cannot be empty", "password_cannot_empty": "Password cannot be empty" } };
    /* ]]> */
  </script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-content/plugins/madara-core/assets/js/login.js?ver=1.7.2"
    id="wp-manga-login-ajax-js"></script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-content/plugins/madara-core/assets/slick/slick.min.js?ver=6.3.2"
    id="wp-manga-slick-js-js"></script>
  <script type="text/javascript" src="https://mangas-origines.fr/wp-includes/js/jquery/ui/core.min.js?ver=1.13.2"
    id="jquery-ui-core-js"></script>
  <script type="text/javascript" src="https://mangas-origines.fr/wp-includes/js/jquery/ui/menu.min.js?ver=1.13.2"
    id="jquery-ui-menu-js"></script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-includes/js/dist/vendor/wp-polyfill-inert.min.js?ver=3.1.2"
    id="wp-polyfill-inert-js"></script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-includes/js/dist/vendor/regenerator-runtime.min.js?ver=0.13.11"
    id="regenerator-runtime-js"></script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-includes/js/dist/vendor/wp-polyfill.min.js?ver=3.15.0"
    id="wp-polyfill-js"></script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-includes/js/dist/dom-ready.min.js?ver=392bdd43726760d1f3ca"
    id="wp-dom-ready-js"></script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-includes/js/dist/hooks.min.js?ver=c6aec9a8d4e5a5d543a1"
    id="wp-hooks-js"></script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-includes/js/dist/i18n.min.js?ver=7701b0c3857f914212ef" id="wp-i18n-js"></script>
  <script id="wp-i18n-js-after" type="text/javascript">
    wp.i18n.setLocaleData({ 'text direction\u0004ltr': ['ltr'] });
  </script>
  <script type="text/javascript" id="wp-a11y-js-translations">
    (function (domain, translations) {
      var localeData = translations.locale_data[domain] || translations.locale_data.messages;
      localeData[""].domain = domain;
      wp.i18n.setLocaleData(localeData, domain);
    })("default", { "translation-revision-date": "2023-10-12 12:16:45+0000", "generator": "GlotPress\/4.0.0-alpha.9", "domain": "messages", "locale_data": { "messages": { "": { "domain": "messages", "plural-forms": "nplurals=2; plural=n > 1;", "lang": "fr" }, "Notifications": ["Notifications"] } }, "comment": { "reference": "wp-includes\/js\/dist\/a11y.js" } });
  </script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-includes/js/dist/a11y.min.js?ver=7032343a947cfccf5608" id="wp-a11y-js"></script>
  <script type="text/javascript" id="jquery-ui-autocomplete-js-extra">
    /* <![CDATA[ */
    var uiAutocompleteL10n = { "noResults": "Aucun r\u00e9sultat.", "oneResult": "Un r\u00e9sultat trouv\u00e9. Utilisez les fl\u00e8ches haut et bas du clavier pour les parcourir.", "manyResults": "%d r\u00e9sultats trouv\u00e9s. Utilisez les fl\u00e8ches haut et bas du clavier pour les parcourir.", "itemSelected": "\u00c9l\u00e9ment s\u00e9lectionn\u00e9." };
    /* ]]> */
  </script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-includes/js/jquery/ui/autocomplete.min.js?ver=1.13.2"
    id="jquery-ui-autocomplete-js"></script>
  <script type="text/javascript" id="wp-manga-js-extra">
    /* <![CDATA[ */
    var mangaNav = { "mangaUrl": "https:\/\/mangas-origines.fr\/oeuvre\/95-solo-leveling\/", "backInfoPage": "on", "text": { "backInfoPage": "Page de l\u2019\u0153uvre ", "prev": "Pr\u00e9c\u00e9dent", "next": "Suivant" } };
    var manga = { "ajax_url": "https:\/\/mangas-origines.fr\/wp-admin\/admin-ajax.php", "home_url": "https:\/\/mangas-origines.fr", "base_url": "https:\/\/mangas-origines.fr\/oeuvre\/95-solo-leveling\/", "manga_paged_var": "manga-page", "enable_manga_view": "1", "manga_id": "253", "chapter_slug": "chapitre-170" };
    /* ]]> */
  </script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-content/plugins/madara-core/assets/js/script.js?ver=1.7.1"
    id="wp-manga-js"></script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-content/themes/madara/js/slick/slick.min.js?ver=1.9.0" id="slick-js"></script>
  <script type="text/javascript"
    src="https://mangas-origines.fr/wp-content/plugins/madara-shortcodes/shortcodes/js/ct-shortcodes.js?ver=1.5.2.1"
    id="ct-shortcode-js-js"></script>
  <script defer=""
    src="https://static.cloudflareinsights.com/beacon.min.js/v8b253dfea2ab4077af8c6f58422dfbfd1689876627854"
    integrity="sha512-bjgnUKX4azu3dLTVtie9u6TKqgx29RBwfj3QXYt5EKfWM/9hPSAI/4qcV5NACjwAo8UtTeWefx6Zq5PHcMm7Tg=="
    data-cf-beacon="{&quot;rayId&quot;:&quot;816a9111b83e927f&quot;,&quot;token&quot;:&quot;ee882d1c00c746b4aeadab5ffa54282e&quot;,&quot;version&quot;:&quot;2023.8.0&quot;,&quot;si&quot;:100}"
    crossorigin="anonymous"></script>
  <div id="manga-chapters-sidebar">
    <div class="c-blog__heading style-2 font-heading">
      <h2 class="h4">
        <i class="icon ion-ios-star"></i>
        Chapitres
      </h2>
      <a href="#" title="Change Order" class="btn-reverse-order"><i class="icon ion-md-swap"></i></a>
    </div>
    <div class="page-content-listing single-page">
      <div class="listing-chapters_wrap cols-1 show-more show">
        <ul class="main version-chap no-volumn active">
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-200/">
              Chapitre 200 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 7760</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-199/">
              Chapitre 199 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 3138</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-198/">
              Chapitre 198 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2733</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-197/">
              Chapitre 197 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2683</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-196/">
              Chapitre 196 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2637</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-195/">
              Chapitre 195 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2579</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-194/">
              Chapitre 194 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2506</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-193/">
              Chapitre 193 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2604</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-192/">
              Chapitre 192 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2953</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-191/">
              Chapitre 191 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2739</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-190/">
              Chapitre 190 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2895</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-189/">
              Chapitre 189 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2608</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-188/">
              Chapitre 188 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2778</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-187/">
              Chapitre 187 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2786</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-186/">
              Chapitre 186 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2628</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-185/">
              Chapitre 185 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2447</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-184/">
              Chapitre 184 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2547</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-183/">
              Chapitre 183 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2334</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-182/">
              Chapitre 182 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2494</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-181/">
              Chapitre 181 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2399</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-180/">
              Chapitre 180 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2859</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-179-5/">
              Chapitre 179.5 - Un Petit Spoiler </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2145</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-179/">
              Chapitre 179 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2324</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-178/">
              Chapitre 178 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 1904</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-177/">
              Chapitre 177 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 1932</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-176/">
              Chapitre 176 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 1913</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-175/">
              Chapitre 175 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2045</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-174/">
              Chapitre 174 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 1915</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-173/">
              Chapitre 173 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 1962</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-172/">
              Chapitre 172 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2108</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-171/">
              Chapitre 171 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2132</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-170/">
              Chapitre 170 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2262</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-169/">
              Chapitre 169 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2254</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-168/">
              Chapitre 168 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2569</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-167/">
              Chapitre 167 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2625</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-166/">
              Chapitre 166 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2441</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-165/">
              Chapitre 165 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2365</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-164/">
              Chapitre 164 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2372</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-163/">
              Chapitre 163 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2393</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-162/">
              Chapitre 162 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2281</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-161/">
              Chapitre 161 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2269</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-160/">
              Chapitre 160 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2381</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-159/">
              Chapitre 159 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2193</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-158/">
              Chapitre 158 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2154</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-157/">
              Chapitre 157 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2256</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-156/">
              Chapitre 156 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2308</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-155/">
              Chapitre 155 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2318</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-154/">
              Chapitre 154 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2224</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-153/">
              Chapitre 153 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2315</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-152/">
              Chapitre 152 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2557</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-151/">
              Chapitre 151 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2511</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-150/">
              Chapitre 150 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2569</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-149/">
              Chapitre 149 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2566</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-148/">
              Chapitre 148 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2642</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-147/">
              Chapitre 147 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2561</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-146/">
              Chapitre 146 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2486</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-145/">
              Chapitre 145 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2438</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-144/">
              Chapitre 144 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2428</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-143/">
              Chapitre 143 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2395</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-142/">
              Chapitre 142 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2424</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-141/">
              Chapitre 141 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2454</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-140/">
              Chapitre 140 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2595</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-139/">
              Chapitre 139 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2419</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-138/">
              Chapitre 138 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2427</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-137/">
              Chapitre 137 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2351</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-136/">
              Chapitre 136 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2391</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-135/">
              Chapitre 135 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2473</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-134/">
              Chapitre 134 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2438</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-133/">
              Chapitre 133 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2427</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-132/">
              Chapitre 132 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2592</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-131/">
              Chapitre 131 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2606</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-130/">
              Chapitre 130 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2476</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-129/">
              Chapitre 129 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2273</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-128/">
              Chapitre 128 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2348</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-127/">
              Chapitre 127 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2298</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-126/">
              Chapitre 126 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2365</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-125/">
              Chapitre 125 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2418</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-124/">
              Chapitre 124 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2339</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-123/">
              Chapitre 123 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2760</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-122/">
              Chapitre 122 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2708</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-121/">
              Chapitre 121 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2682</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-120/">
              Chapitre 120 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2566</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-119/">
              Chapitre 119 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2383</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-118/">
              Chapitre 118 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2374</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-117/">
              Chapitre 117 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2308</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-116/">
              Chapitre 116 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2554</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-115/">
              Chapitre 115 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2586</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-114/">
              Chapitre 114 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2438</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-113/">
              Chapitre 113 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2379</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-112/">
              Chapitre 112 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2575</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-111/">
              Chapitre 111 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2617</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-110/">
              Chapitre 110 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2581</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-109/">
              Chapitre 109 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2366</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-108/">
              Chapitre 108 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2574</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-107/">
              Chapitre 107 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2694</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-106/">
              Chapitre 106 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2645</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-105/">
              Chapitre 105 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2726</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-104/">
              Chapitre 104 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2632</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-103/">
              Chapitre 103 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2686</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-102/">
              Chapitre 102 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2653</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-101/">
              Chapitre 101 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2584</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-100/">
              Chapitre 100 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2582</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-99/">
              Chapitre 99 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2236</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-98/">
              Chapitre 98 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2244</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-97/">
              Chapitre 97 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2197</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-96/">
              Chapitre 96 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2243</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-95/">
              Chapitre 95 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2492</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-94/">
              Chapitre 94 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2564</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-93/">
              Chapitre 93 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2470</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-92/">
              Chapitre 92 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2439</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-91/">
              Chapitre 91 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2372</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-90-2-va/">
              Chapitre 90.2 (VA) </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2322</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-90/">
              Chapitre 90 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2460</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-89/">
              Chapitre 89 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2302</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-88/">
              Chapitre 88 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2298</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-87/">
              Chapitre 87 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2282</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-86/">
              Chapitre 86 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2295</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-85/">
              Chapitre 85 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2274</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-84/">
              Chapitre 84 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2219</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-83/">
              Chapitre 83 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2240</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-82/">
              Chapitre 82 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2253</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-81/">
              Chapitre 81 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2332</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-80/">
              Chapitre 80 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2510</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-79/">
              Chapitre 79 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2463</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-78/">
              Chapitre 78 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2437</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-77/">
              Chapitre 77 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2374</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-76/">
              Chapitre 76 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2530</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-75/">
              Chapitre 75 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2445</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-74/">
              Chapitre 74 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2372</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-73/">
              Chapitre 73 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2390</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-72/">
              Chapitre 72 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2325</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-71/">
              Chapitre 71 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2317</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-70/">
              Chapitre 70 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2386</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-69/">
              Chapitre 69 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2363</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-68/">
              Chapitre 68 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2403</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-67/">
              Chapitre 67 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2338</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-66/">
              Chapitre 66 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2366</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-65/">
              Chapitre 65 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2483</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-64/">
              Chapitre 64 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2440</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-63/">
              Chapitre 63 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2426</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-62/">
              Chapitre 62 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2315</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-61/">
              Chapitre 61 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2339</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-60/">
              Chapitre 60 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2383</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-59/">
              Chapitre 59 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2229</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-58/">
              Chapitre 58 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2313</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-57/">
              Chapitre 57 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2408</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-56/">
              Chapitre 56 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2496</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-55/">
              Chapitre 55 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2346</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-54/">
              Chapitre 54 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2252</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-53/">
              Chapitre 53 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2248</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-52/">
              Chapitre 52 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2266</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-51/">
              Chapitre 51 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2315</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-50/">
              Chapitre 50 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2341</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-49/">
              Chapitre 49 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2205</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-48/">
              Chapitre 48 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2308</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-47/">
              Chapitre 47 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2288</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-46/">
              Chapitre 46 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2271</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-45/">
              Chapitre 45 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2311</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-44/">
              Chapitre 44 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2129</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-43/">
              Chapitre 43 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2127</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-42/">
              Chapitre 42 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2103</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-41/">
              Chapitre 41 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2078</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-40/">
              Chapitre 40 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2216</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-39/">
              Chapitre 39 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2071</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-38/">
              Chapitre 38 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2267</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-37/">
              Chapitre 37 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2251</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-36/">
              Chapitre 36 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2243</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-35/">
              Chapitre 35 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2408</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-34/">
              Chapitre 34 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2392</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-33/">
              Chapitre 33 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2168</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-32/">
              Chapitre 32 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2172</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-31/">
              Chapitre 31 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2108</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-30/">
              Chapitre 30 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2244</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-29/">
              Chapitre 29 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2145</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-28/">
              Chapitre 28 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2269</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-27/">
              Chapitre 27 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2367</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-26/">
              Chapitre 26 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2397</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-25/">
              Chapitre 25 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2542</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-24/">
              Chapitre 24 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2268</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-23/">
              Chapitre 23 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2184</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-22/">
              Chapitre 22 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2219</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-21/">
              Chapitre 21 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2248</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-20/">
              Chapitre 20 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2343</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-19/">
              Chapitre 19 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2245</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-18/">
              Chapitre 18 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2352</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-17/">
              Chapitre 17 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2243</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-16/">
              Chapitre 16 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2196</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-15/">
              Chapitre 15 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2259</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-14/">
              Chapitre 14 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2218</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-13/">
              Chapitre 13 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2298</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-12/">
              Chapitre 12 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2283</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-11/">
              Chapitre 11 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2296</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-10/">
              Chapitre 10 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2299</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-9/">
              Chapitre 9 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2020</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-8/">
              Chapitre 8 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2016</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-7/">
              Chapitre 7 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2030</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-6/">
              Chapitre 6 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2071</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-5/">
              Chapitre 5 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2178</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-4/">
              Chapitre 4 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2138</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-3/">
              Chapitre 3 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2189</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-2/">
              Chapitre 2 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 2286</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-1/">
              Chapitre 1 </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 3355</span>
          </li>
          <li class="wp-manga-chapter    ">
            <a href="https://mangas-origines.fr/oeuvre/95-solo-leveling/chapitre-0/">
              Chapitre 0 - Prologue </a>
            <span class="chapter-release-date">
              <i>21/06/2023</i> </span>
            <span class="view"><i class="fa fa-eye"></i> 5119</span>
          </li>
        </ul>
        <div class="c-chapter-readmore">
          <span class="btn btn-link chapter-readmore less-chap">
            Voir plus </span>
        </div>
      </div>
    </div>
  </div>
  <p id="a11y-speak-intro-text" class="a11y-speak-intro-text"
    style="position: absolute;margin: -1px;padding: 0;height: 1px;width: 1px;overflow: hidden;clip: rect(1px, 1px, 1px, 1px);-webkit-clip-path: inset(50%);clip-path: inset(50%);border: 0;word-wrap: normal !important;"
    hidden="hidden">Notifications</p>
  <div id="a11y-speak-assertive" class="a11y-speak-region"
    style="position: absolute;margin: -1px;padding: 0;height: 1px;width: 1px;overflow: hidden;clip: rect(1px, 1px, 1px, 1px);-webkit-clip-path: inset(50%);clip-path: inset(50%);border: 0;word-wrap: normal !important;"
    aria-live="assertive" aria-relevant="additions text" aria-atomic="true"></div>
  <div id="a11y-speak-polite" class="a11y-speak-region"
    style="position: absolute;margin: -1px;padding: 0;height: 1px;width: 1px;overflow: hidden;clip: rect(1px, 1px, 1px, 1px);-webkit-clip-path: inset(50%);clip-path: inset(50%);border: 0;word-wrap: normal !important;"
    aria-live="polite" aria-relevant="additions text" aria-atomic="true"></div>
  <div role="status" aria-live="assertive" aria-relevant="additions" class="ui-helper-hidden-accessible"></div>
  <div role="status" aria-live="assertive" aria-relevant="additions" class="ui-helper-hidden-accessible"></div>
</body>

</html>
