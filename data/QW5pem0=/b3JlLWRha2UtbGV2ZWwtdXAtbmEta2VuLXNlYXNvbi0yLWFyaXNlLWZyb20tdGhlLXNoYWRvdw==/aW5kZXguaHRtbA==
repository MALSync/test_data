<html lang="tr" data-fp="grvq07bqyt"><head><style>
[v-cloak] {
    display: none;
}
</style>





<script>(function(w,i,g){w[g]=w[g]||[];if(typeof w[g].push=='function')w[g].push(i)})
(window,'G-5WNZ0X5Y8B','google_tags_first_party');</script><script async="" src="/metrics/"></script>
			<script>
				window.dataLayer = window.dataLayer || [];
				function gtag(){dataLayer.push(arguments);}
				gtag('js', new Date());
				gtag('set', 'developer_id.dYzg1YT', true);
				gtag('config', 'G-5WNZ0X5Y8B');
			</script>
			
    <meta name="theme-color" content="#f4a506">
    
    <!-- Critical CSS ve Header LCP Optimizasyonu -->
    <style>
        /* Header için optimizasyon - hızlı render için */
        body { margin: 0; padding: 0; font-family: 'Rajdhani', sans-serif; background: #111; color: #fff; }
        header.puf01 { width: 100%; position: relative; background: #222; min-height: 60px; display: flex; flex-direction: column; }
        .content { position: relative; z-index: 2; }
        .menuHeader { display: flex; align-items: center; justify-content: space-between; padding: 0.5rem 0; }
        .pt-2 { padding-top: 0.5rem; }
        .mt-3 { margin-top: 0.75rem; }
        .anizm_positionRelative { position: relative; }
        .ui.container { width: 1127px; margin-left: auto !important; margin-right: auto !important; }
        @media (max-width:1199px) { .ui.container { width: auto; margin-left: 1em !important; margin-right: 1em !important; } }
        .hamburger { cursor: pointer; position: relative; display: none; }
        .hamburger #hamburger-bar { position: relative; }
        @media (max-width:767px) { .hamburger { display: block; } }

        /* Logo ve menü stilleri - LCP elementi için optimize */
        img.logo { max-height: 40px; width: auto; display: block; }
        .menuHeader a { color: #fff; text-decoration: none; font-weight: bold; padding: 5px 10px; }
        #ham-toggler { display: none; }

        /* Üst bildirim stili */
        .topmessage { padding: 12px; background: #f4a506; color: #000; text-align: center; position: relative; }

        /* UI öğeleri için temel stiller */
        .dropdown { position: relative; display: inline-block; }
        .dropdown .menu { display: none; position: absolute; background: #333; min-width: 160px; z-index: 10; padding: 0.5em 0; border-radius: 3px; }
        .dropdown:hover .menu { display: block; }
        .dropdown .item { display: block; color: white; padding: 8px 12px; text-decoration: none; }
        .dropdown .item:hover { background: #444; }

        /* Düzen Yapısı */
        .ui.dropdown .menu { background: #222; border: 1px solid #444; }
        .ui.dropdown .item { color: #fff; padding: 0.5em 1em; }
        .ui.dropdown .item:hover { background: rgba(255,255,255,0.1); }
        .ui.dropdown .header { border-bottom: 1px solid #444; padding: 0.5em 1em; font-weight: bold; color: #aaa; }
    </style>

    <!-- TTFB ve ilk render için gereken meta -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="icon" type="image/x-icon" href="https://anizm.net/upload/assets/favicon.ico">
    <meta name="csrf-token" content="CCSmdfmLQCOF5GuPJSf94xEof89Jvr4sUO1RYiVZ">

    <!-- Page -->
<title>Ore dake Level Up na Ken Season 2: Arise from the Shadow izle...</title>
<meta name="googlebot" content="index, follow">
<meta name="revisit-after" content="1 Days">
<meta name="robots" content="index, follow">
<meta name="distribution" content="global">
<meta name="rating" content="all">
<meta name="author" content="Anizm TV - info@anizm.tv">
<meta http-equiv="content-language" content="tr_TR">
<meta http-equiv="copyright" content="Copyright © 2025 Anizm TV">

<meta name="description" itemprop="description" content="Ore dake Level Up na Ken Season 2: Arise from the Shadow dizisini Anizm farkı ile tamamen reklamsız olan sitemizden FULL HD bir şekilde izleyebilirsiniz.Ore dake Level Up na Ken Season 2: Arise from t...">
	<meta name="keywords" itemprop="keywords" content="Ore dake Level Up na Ken Season 2: Arise from the Shadow izle, Ore dake Level Up na Ken Season 2: Arise from the Shadow türkçe altyazılı izle">
<!-- Facebook -->
<meta name="og:locale" content="tr_TR">
<meta name="og:type" content="video.movie">
<meta name="og:title" content="Ore dake Level Up na Ken Season 2: Arise from the Shadow izle...">
<meta name="og:description" content="Ore dake Level Up na Ken Season 2: Arise from the Shadow dizisini Anizm farkı ile tamamen reklamsız olan sitemizden FULL HD bir şekilde izleyebilirsiniz.Ore dake Level Up na Ken Season 2: Arise from t...">
<meta name="og:url" content="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow">
<meta name="og:site_name" content="Anizm | En Güncel Türkçe Altyazılı Anime İzleme Portalı">


<!-- Twitter -->
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:description" content="Ore dake Level Up na Ken Season 2: Arise from the Shadow dizisini Anizm farkı ile tamamen reklamsız olan sitemizden FULL HD bir şekilde izleyebilirsiniz.Ore dake Level Up na Ken Season 2: Arise from t...">
<meta name="twitter:title" content="Ore dake Level Up na Ken Season 2: Arise from the Shadow izle...">



    <!-- DNS Prefetch ve Preconnect Optimizasyonları -->
    <link rel="dns-prefetch" href="//cdnjs.cloudflare.com">
    <link rel="dns-prefetch" href="//anizm.net">
    <link rel="dns-prefetch" href="//www.googletagmanager.com">
    <link rel="dns-prefetch" href="//www.gstatic.com">
    <link rel="preconnect" href="https://cdnjs.cloudflare.com" crossorigin="">
    <link rel="preconnect" href="https://anizm.net" crossorigin="">

    <!-- Global değişkenleri tanımla - script hatalarını önlemek için -->
    <script data-cfasync="false">
        // episodea.js için gerekli global değişkenleri ve nesneleri tanımla
        var site_js = site_js || {};
        site_js.baseUrl = 'https://anizm.net';
        site_js.isLoggedIn = false;

        // Controller nesnesi ve register metodunu tanımla - episodea.js için kritik
        site_js.controller = site_js.controller || {};
        site_js.controller.register = function(name, component) {
            // Register işlemini güvenli bir şekilde yap
            if (!site_js.controllers) site_js.controllers = {};
            site_js.controllers[name] = component;

            // jQuery ile olay dinleme fonksiyonu ekle - episodea.js için gerekli
            component.on = function(eventName, selector, handlerName) {
                // Olay dinleyicilerini temizle ve yeniden ekle
                $(document).off(eventName, selector).on(eventName, selector, function(event) {
                    if (typeof component[handlerName] === 'function') {
                        return component[handlerName].call(component, event);
                    }
                });
                return component; // Method chaining için
            };

            // Olay dinleyicilerini kaldırma metodu
            component.off = function(eventName, selector) {
                $(document).off(eventName, selector);
                return component;
            };

            // init metodunu çağır - otomatik başlatma
            if (component && typeof component.init === 'function') {
                // jQuery ready olayına bağla - sayfa tamamen hazır olduğunda çağrılır
                $(document).ready(function() {
                    try {
                        component.init();
                    } catch(e) {
                        console.error("Controller init error:", e);
                    }
                });
            }

            return component; // Method chaining için
        };

        // Request yardımcı nesnesi - AJAX istekleri için
        site_js.request = site_js.request || {
            send: function(url, callback) {
                // Basit AJAX wrapper - jQuery Ajax kullanarak
                if (typeof callback !== 'function') callback = function() {};

                // jQuery AJAX ile istek gönder - fetch yerine $.ajax kullan
                $.ajax({
                    url: url,
                    type: 'GET',
                    dataType: 'json',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'Accept': 'application/json',
                        'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content') || ''
                    },
                    success: function(data) {
                        callback(data);
                    },
                    error: function(error) {
                        console.error("Request error:", error);
                    }
                });

                return this;
            }
        };

        // Loader yardımcı nesnesi
        site_js.loader = site_js.loader || {
            set: function(selector) {
                const target = document.querySelector(selector);
                if (target) {
                    // Önce mevcut içeriği temizle
                    target.innerHTML = '';

                    // Tam ekran kapsayıcı oluştur
                    const loaderContainer = document.createElement('div');
                    loaderContainer.className = 'anizm-loader-container';
                    loaderContainer.style.cssText = 'position: absolute; top: 0; left: 0; width: 100%; height: 100%; display: flex; justify-content: center; align-items: center; background-color: rgba(0,0,0,0.8); z-index: 1000;';

                    // Loader animasyonu oluştur
                    const loader = document.createElement('div');
                    loader.className = 'ui active big loader';

                    // Loader'ı kapsayıcıya ekle
                    loaderContainer.appendChild(loader);

                    // Kapsayıcıyı hedefe ekle
                    target.appendChild(loaderContainer);

                    // Hedef elementin position özelliğini kontrol et ve düzenle
                    const targetStyle = window.getComputedStyle(target);
                    if (targetStyle.position === 'static') {
                        target.style.position = 'relative';
                    }
                }
                return this;
            },
            remove: function(selector) {
                const target = document.querySelector(selector);
                if (target) {
                    // Loader kapsayıcısını kaldır
                    const loaderContainer = target.querySelector('.anizm-loader-container');
                    if (loaderContainer) loaderContainer.remove();
                }
                return this;
            }
        };

        // Helpers yardımcı nesnesi
        site_js.helpers = site_js.helpers || {
            delay: function(func, wait) {
                // Debounce işlevi - art arda çağrıları optimize eder
                let timeout;
                return function() {
                    const context = this;
                    const args = arguments;
                    clearTimeout(timeout);
                    timeout = setTimeout(function() {
                        func.apply(context, args);
                    }, wait);
                };
            }
        };

        // Geriye dönük uyumluluk için diğer nesneler
        site_js.episode = site_js.episode || {};
        site_js.episode.register = site_js.controller.register;
        site_js.register = site_js.controller.register;

        // Ek olarak yaygın global nesneleri tanımla
        window.app = window.app || {
            register: site_js.controller.register
        };
    </script>

    <!-- Ana JQuery kütüphanesi - dropdown menüler için kritik -->
    <script data-cfasync="false" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js" integrity="sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <!-- Semantic UI - dropdown menülerin çalışması için inline -->
    <script data-cfasync="false" src="https://anizm.net/semantic/semantic.min.js?date=2542025"></script>
    <script src="https://anizm.net/js/custom/searchOverlayOnce.js?date=2542025&amp;a=2"></script>
    <!-- Dropdown ve UI aktivasyonu -->
    <script data-cfasync="false">
        // Header elementinin hızlı yüklenmesi için öncelikli aktivasyon
        document.addEventListener('DOMContentLoaded', function() {
            // Dropdown'ları hemen aktifleştir
            if (typeof $.fn.dropdown === 'function') {
                $('.ui.dropdown').dropdown();
            }

            // Diğer UI elementlerini aktifleştir
            if (typeof $.fn.popup === 'function') {
                $('.ui.popup').popup();
            }
        });
    </script>

    <!-- Core stiller - header render sonrası yükle -->
    <link rel="stylesheet" href="https://anizm.net/semantic/semantic.min.css?date=2542025">

    <!-- Kritik olmayan stilleri gecikmeli yükle -->
    <link rel="stylesheet" href="https://anizm.net/css/reset.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <link rel="stylesheet" href="https://anizm.net/css/framework.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <link rel="stylesheet" href="https://anizm.net/css/theme.css?date=25420252" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <link rel="stylesheet" href="https://anizm.net/css/swiper-bundle.min.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <link rel="stylesheet" href="https://anizm.net/css/episodeAdminPanel.css?date=25420251a" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <link rel="stylesheet" href="https://anizm.net/css/toast.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <link rel="stylesheet" href="https://anizm.net/css/customScroll.css?date=25420251aaaaa" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <link rel="stylesheet" href="https://anizm.net/semantic/components/button.min.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <link rel="stylesheet" href="/css/discordInvite.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <link rel="stylesheet" href="/css/discordInvite2.css?v=10" as="style" onload="this.onload=null;this.rel='stylesheet'">

    <!-- Cookie consent CSS - hemen yüklenmeli -->
    <link rel="stylesheet" href="https://anizm.net/css/cookie-consent.css?date=25420251">

    <!-- Fallback stil yükleme için noscript -->
    <noscript>
        <link rel="stylesheet" href="https://anizm.net/css/reset.css">
        <link rel="stylesheet" href="https://anizm.net/css/framework.css">
        <link rel="stylesheet" href="https://anizm.net/css/theme.css?date=25420252">
        <link rel="stylesheet" href="https://anizm.net/css/swiper-bundle.min.css">
    </noscript>

    <link rel="manifest" href="/manifest.json">

    <!-- Diğer JavaScript yükleme işlemleri - header render sonrası -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Framework ve temel işlevsellik
            loadScript("https://anizm.net/js/framework.js", function() {
                // Gerekli scriptleri header render sonrası yükle
                loadScript("https://anizm.net/js/controllers.js?date=2542025");
                loadScript("https://anizm.net/js/custom.js?date=25420251111");

                // Cookie Consent JS'i yükle - önemli!
                loadScript("https://anizm.net/js/cookie-consent.js?date=25420251");

                // Diğer scriptleri ihtiyaç oldukça yükle
                setTimeout(function() {
                    loadScript("https://anizm.net/js/swiper-bundle.min.js", function() {
                        loadScript("https://anizm.net/js/custom/swipeCarousel.js?date=25420259");
                    });
                    loadScript("https://anizm.net/js/lazysizes.min.js?date=254202511");
                }, 200);
            });
        });

        // Script yükleme yardımcı fonksiyonu
        function loadScript(src, callback) {
            const script = document.createElement('script');
            script.src = src;
            script.defer = true;
            if (callback) script.onload = callback;
            document.head.appendChild(script);
        }
    </script>

    <!-- Service Worker Kayıt -->
    <script>
    // Service Worker kaydını Cloudflare ile uyumlu hale getir
    window.addEventListener('load', () => {
        if ('serviceWorker' in navigator) {
            setTimeout(() => {
                navigator.serviceWorker.register('/sw2.js', {
                    updateViaCache: 'none' // Cloudflare cache ile çakışmaları önle
                }).catch(() => {});
            }, 5000);
        }
    });
    </script>

    <!-- Google Analytics - performans optimizasyonu ile -->
    <script>
    // GA çok gecikmeli yükle - kullanıcı deneyimini etkilemesin
    window.addEventListener('load', function() {
        setTimeout(function() {
            const gaScript = document.createElement('script');
            gaScript.async = true;
            gaScript.src = "https://www.googletagmanager.com/gtag/js?id=G-5WNZ0X5Y8B";
            document.head.appendChild(gaScript);

            gaScript.onload = function() {
                window.dataLayer = window.dataLayer || [];
                function gtag(){dataLayer.push(arguments);}
                gtag('js', new Date());
                gtag('config', 'G-5WNZ0X5Y8B', {
                    'send_page_view': true,
                    'transport_type': 'beacon'  // Beacon API kullanarak performans etkisini azalt
                });
            };
        }, 3000);
    });
    </script>

    <!-- Firebase bildirim işlemleri - tamamen gecikmeli -->
    <script>
    // Sayfa tamamen yüklendikten ve kullanıcı etkileşimden sonra Firebase modülleri yüklensin
    document.addEventListener('DOMContentLoaded', function() {
        // Kullanıcı etkileşimi bekleme - scroll, tıklama veya 5 saniye bekleme
        let firebaseLoaded = false;

        function loadFirebaseModules() {
            if (firebaseLoaded) return;
            firebaseLoaded = true;

            // Module türünde dinamik import ile yükleme
            import("https://www.gstatic.com/firebasejs/11.2.0/firebase-app.js").then(firebaseApp => {
                const { initializeApp } = firebaseApp;

                // Notification API kontrolü
                if ('Notification' in window && Notification.permission !== 'denied') {
                    import("https://www.gstatic.com/firebasejs/11.2.0/firebase-messaging.js").then(firebaseMsg => {
                        const { getMessaging, getToken } = firebaseMsg;

                        try {
                            // Mümkün olduğunca minify edilmiş config
                            const app = initializeApp({
                                apiKey: "AIzaSyC2150reOPSti_5pkNTPDhXE5z0S-iIQOE",
                                projectId: "anizm-tv",
                                messagingSenderId: "320469467233",
                                appId: "1:320469467233:web:33fcfae1c5d0cdf566aa20"
                            });

                            // Bildirim izni kontrolü
                            if (Notification.permission === 'granted') {
                                getToken(getMessaging(app)).then(token => {
                                    if (token) sendTokenToServer(token);
                                }).catch(() => {});
                            } else {
                                Notification.requestPermission().then(permission => {
                                    if (permission === 'granted') {
                                        getToken(getMessaging(app)).then(token => {
                                            if (token) sendTokenToServer(token);
                                        }).catch(() => {});
                                    }
                                });
                            }
                        } catch (e) {}
                    });
                }
            });
        }

        // İzleyiciler aracılığıyla gecikmeli yükleme
        if ('requestIdleCallback' in window) {
            requestIdleCallback(() => {
                loadFirebaseModules();
            }, { timeout: 5000 });
        } else {
            setTimeout(loadFirebaseModules, 5000);
        }

        // Kullanıcı etkileşimi olduğunda yükle
        window.addEventListener('scroll', () => {
            loadFirebaseModules();
        }, { passive: true, once: true });

        document.addEventListener('click', () => {
            loadFirebaseModules();
        }, { once: true });
    });

    // Token gönderimi - minimal veri paketli
    function sendTokenToServer(token) {
                fetch(`https://${window.location.host}/token-ekle`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || ''
            },
            body: JSON.stringify({
                token: token,
                userId: 0,
                platform: navigator.platform
            }),
            keepalive: true // Sayfa ayrılsa bile tamamlanmasını sağla
        }).catch(() => {});
    }
    </script>



    <!-- Custom JS and CSS -->
	<script src="https://anizm.net/js/custom/info.js"></script>
	<link href="https://anizm.net/css/custom/info.css" rel="stylesheet">

<script src="https://anizm.net/js/framework.js" defer=""></script><script src="https://anizm.net/js/controllers.js?date=2542025" defer=""></script><script src="https://anizm.net/js/custom.js?date=25420251111" defer=""></script><script src="https://anizm.net/js/cookie-consent.js?date=25420251" defer=""></script><script src="https://anizm.net/js/swiper-bundle.min.js" defer=""></script><script src="https://anizm.net/js/lazysizes.min.js?date=254202511" defer=""></script><script src="https://anizm.net/js/custom/swipeCarousel.js?date=25420259" defer=""></script><script async="" src="https://www.googletagmanager.com/gtag/js?id=G-5WNZ0X5Y8B"></script></head>

<body><iframe frameborder="0" width="200px" height="28px" id="1b19940020000406439640430" allow="autoplay" src="https://st.chatango.com/h5/gz/r0424250857/id.html" style="z-index: 2147483647; position: fixed; inset: auto 0px 0px auto;"></iframe>
    <noscript>
        <div><img src="https://mc.yandex.ru/watch/89655860" style="position:absolute; left:-9999px;" alt="" />
        </div>
    </noscript>
        <main>
                        <header class="mt-3 puf01" data-menutype="cover" data-divider="">
                    <div class="cover blurred" style="background: url('/storage/pcovers/183840001736516084l.webp' ) no-repeat center center; background-size: cover;">
                        <div class="divider"></div>
                    </div>
                <div class="content anizm_positionRelative">
            <div class="ui container menuHeader">
                <div class="anizm_displayTable anizm_positionRelative anizm_fullWidth menuWrapper">
								<div class="logo anizm_displayCell anizm_alignMiddle anizm_s50">
					<a href="/">
						<img alt="Logo" width="140px" height="35px" src="https://anizm.net/upload/assets/logo.webp">
					</a>
				</div>
			</div>
            </div>

            <input type="checkbox" id="ham-toggler">
            <div class="hamburger">
                <div id="hamburger-bar"></div>
            </div>


            <div id="menuContent" class="anizm_displayCell">
    <input type="checkbox" id="ham-toggler">
    <label for="ham-toggler" class="hamburger">
        <div id="hamburger-bar"></div>
    </label>
    <div id="scale0id" class="menu anizm_floatLeft anizm_displayCell anizm_alignMiddle">
        <ul>
            <li><a title="TAKVİM" href="https://anizm.net/takvim">TAKVİM</a>
            </li><li><a title="Tavsiye Robotu" href="https://anizm.net/tavsiyeRobotu">Tavsiye Robotu</a>
            </li>
            <li><a title="Fansublar" href="https://anizm.net/fansublar">Fansublar</a></li>
            <!--<li><a title="Ekibe Başvur" href="https://anizm.net/ekibekatil">Ekibe Katıl</a></li>-->
            <li><a target="_blank" href="https://serimangas.com/">Manga</a></li>
            <li><a target="_blank" href="https://yeppuu.com/">Anime Haber</a></li>
            <!--<li><a title="EKİBE KATIL" href="https://anizm.net/ekibekatil">EKİBE KATIL</a></li>-->
            <li>

                <a target="_blank" href="https://discord.com/invite/Tq83x6VZQf"><i class="discord icon"></i> Discord</a>
            </li>
            <li class="headerSearchContainer">
                <i class="search icon headerSearchIcon" id="searchTrigger"></i>
            </li>
        </ul>
        <div id="scale0id" class="userIcons anizm_floatRight anizm_displayCell anizm_alignMiddle">
            <ul class="userUnorderedList">
                                                    <li class="anizm_noXPadding uyeOlButtonContainer"><a href="https://anizm.net/uyeol" class="anizm_button dark mini mr-1"><i class="icon sign-in"></i> Üye Ol</a></li>
                    <li class="anizm_noXPadding uyeOlButtonContainer"><a href="https://anizm.net/girisyap" class="anizm_button default mini"><i class="icon user circle"></i> Giriş Yap</a>
                    </li>
                            </ul>
        </div>
    </div>

</div>

<!-- Dropdown menülerin çalışması için yedek kod - sayfa sonuna ekledik -->
<script>
    // Sayfa yüklendikten sonra dropdown'ları aktifleştir - çift kontrol
    document.addEventListener('DOMContentLoaded', function() {
        setTimeout(function() {
            if (typeof $ === 'function' && typeof $.fn.dropdown === 'function') {
                $('.ui.dropdown, [data-dropdown]').dropdown();
            }
        }, 500); // Biraz bekleyerek jQuery ve Semantic UI'ın yüklenmesini garanti et
    });
</script>
            
        </div>
        <!-- Anime slider bileşenini doğrudan include -->
                </header>
        <div id="searchOverlay">
	<div class="searchView">
		<div class="searchBarContainer">
			<input autocomplete="off" id="fullViewSearchInput" class="searchBarInput" placeholder="Anime ara...">
			<button class="searchBarButton">Kapat</button>
			<div class="searchTypeSelection">
				<button class="fastSearch searchTypeOption" data-type="fast">Hızlı Arama</button>
				<button class="detailedSearch searchTypeOption active" data-type="detailed">Detaylı Arama</button>
			</div>
		</div>
		<div class="searchResults">
			<div class="searchLoaderContainer">
				<span class="loaderText">Anime yükleniyor...</span>
				<div class="loaderItem"></div>
			</div>
			<div id="fullViewSearchResults"></div>
			<button id="loadMoreSearch" class="ui button anizm_fullWidth inverted orange">Daha Fazla Göster</button>
		</div>
	</div>
</div>        <div id="pageContent" class="homePageContent anizm_positionRelative">

        <!-- Başlık bölümünde slider görselleri için performans optimizasyonu -->
        <link rel="preconnect" href="https://anizm.net" crossorigin="">
        <style>
            /* Anime Slider Performans İyileştirmeleri */
            .popularAnimeSlideSection {
                contain: layout style paint;  /* CSS containment ile güçlü performans artışı */
            }
            .slideImageContainer {
                background-color: #222; /* Görsel yüklenene kadar arkaplan */
                aspect-ratio: 2/3;    /* Boyut oranını koruyarak reflow önleme */
                overflow: hidden;     /* Taşan içeriği gizle */
            }
            .slideImage {
                opacity: 0;           /* Görsel hazır olana kadar gizle */
                transition: opacity 0.3s ease; /* Yüklendiğinde yumuşak geçiş */
                will-change: opacity; /* Tarayıcıya optimizasyon ipucu ver */
                object-fit: cover;    /* Görüntü oranını koruyarak kapla */
            }
            .slideImage.loaded {
                opacity: 1;           /* Yüklenen görseli göster */
            }
            /* Görsel yüklenene kadar placeholder göster */
            .ui.loader.active {
                display: block;
                z-index: 1;
            }
        </style>

        <script>
            // Anime slider görsellerin yüklenmesini optimize et
            document.addEventListener('DOMContentLoaded', function() {
                // En fazla 6 görsel için öncelikli yükleme yap, diğerleri için gecikmeli
                setTimeout(function() {
                    const slideImages = document.querySelectorAll('.slideImage');

                    // IntersectionObserver ile görünen görselleri yükle
                    const imageObserver = new IntersectionObserver((entries) => {
                        entries.forEach(entry => {
                            if (entry.isIntersecting) {
                                const img = entry.target;

                                // Görsel yüklendiğinde loaded sınıfı ekle ve loader'ı gizle
                                img.onload = function() {
                                    img.classList.add('loaded');
                                    const loader = img.closest('.swiper-slide').querySelector('.ui.loader');
                                    if (loader) loader.classList.remove('active');
                                };

                                // Safari için fallback yükleme tamamlanma kontrolü
                                if (img.complete) {
                                    img.classList.add('loaded');
                                    const loader = img.closest('.swiper-slide').querySelector('.ui.loader');
                                    if (loader) loader.classList.remove('active');
                                }

                                // Görsel yüklendikten sonra gözlemlemeyi bırak
                                imageObserver.unobserve(img);
                            }
                        });
                    }, {
                        rootMargin: '200px 0px', // Görsel 200px yaklaşınca yüklemeye başla
                        threshold: 0.01 // Çok az görünür olduğunda bile yüklemeye başla
                    });

                    // Tüm görselleri gözlemle
                    slideImages.forEach(img => {
                        imageObserver.observe(img);
                    });
                }, 100); // Çok kısa bir gecikme ile çalıştır - LCP'yi etkilemesin
            });
        </script>

  
    <meta charset="UTF-8">
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:image" content="/storage/pcovers/183840001736516084.webp">
    <meta name="og:type" content="video.movie">
    <meta name="og:image" content="/storage/pcovers/183840001736516084.webp">
  

    <div class="ui container animeDetayContainer" js-controller="infopage">
          <div class="info_otherTitle">Solo Leveling Season 2: Arise from the Shadow</div>
        <h2 class="anizm_pageTitle">
            <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow" class="anizm_colorDefault">Ore dake Level Up na Ken Season 2: Arise from the Shadow</a>
    </h2>
    <div class="infoSta mt-2">
      <ul class="anizm_verticalList space divider anizm_textUpper">
        <li>2025</li>
        <li>13 Bölüm</li>
      </ul>
    </div>
    <div class="anizm_columns anizm_fullWidth mt-5 anizm_mobile animeDetayInnerContainer">
      <div class="anizm_column animeDetayInfoWrapper">
        <div class="anizm_box anizm_shadow">
          <div class="anizm_boxTitle">Özet</div>
          <div class="anizm_boxContent">
            <div class="infoDesc">
              
            </div>
            <div class="infoPoints mt-9 anizm_textUpper anizm_colorWhite">
              <div class="info_downArrow">
                                                                  <div>
                  <div class="circleProgressBar anizm_alignCenter">
	<section>
		<div class="mb-2 fsmall"><img alt="logo" src="https://anizm.net/upload/assets/anizm-logo.png"></div>
		<svg class="circle-chart" viewBox="0 0 33.83098862 33.83098862" width="100" height="100" xmlns="http://www.w3.org/2000/svg">
			<circle class="circle-chart__background" stroke="#2f2c2c" stroke-width="2" fill="none" cx="16.91549431" cy="16.91549431" r="15.91549431"></circle>
			<circle class="circle-chart__circle" stroke="#0baeffeb" stroke-width="2" stroke-dasharray="100,100" stroke-linecap="round" fill="none" cx="16.91549431" cy="16.91549431" r="15.91549431"></circle>
			<g class="circle-chart__info">
				<text class="circle-chart__percent" x="16.91549431" y="15.5" alignment-baseline="central" text-anchor="middle" font-size="12">10</text>
			</g>
		</svg>
	</section>
</div>
                </div>
                <div class="votedUsers">
                  <i class="icon user"></i> 0
                </div>
              </div>
            </div>
            <div class="infoExtraData mt-9">
              <h2 class="anizm_miniTitle"><span>Anime</span> Bilgileri</h2>
              <div>
                <ul class="dataRows">
                                      <li class="dataRow">
                      <span class="dataTitle">Diğer adlar</span>
                      <span class="dataValue animeDetailOtherNames">
                                              Solo Leveling Season 2: Arise from the Shadow,
                                                Solo Leveling Second Season
                  </span>
                    </li>
                                                        <li class="dataRow">
                      <span class="dataTitle">Japonca İsmi</span>
                      <span class="dataValue">俺だけレベルアップな件 Season 2 -Arise from the Shadow-</span>
                    </li>
                                    <li class="dataRow">
                    <span class="dataTitle">Stüdyo</span>
                    <span class="dataValue">A-1 Pictures</span>

                  </li>
                  <li class="dataRow">
                    <span class="dataTitle">Türler</span>
                    <span class="dataValue">
                    <span class="ui tag labels tiny">
                                                                        <a href="https://anizm.net/kategoriler/2" class="ui label">Aksiyon</a>
                                                  <a href="https://anizm.net/kategoriler/1" class="ui label">Macera</a>
                                                  <a href="https://anizm.net/kategoriler/13" class="ui label">Fantastik</a>
                                                                  </span>
                  </span>
                  </li>
                  <li class="dataRow">
                    <span class="dataTitle">Verdiğiniz puan</span>
                    <span class="dataValue" data-inforating="" data-link="https://anizm.net/puanver/18384">
                                            <div class="ui star rating" data-default="0" js-widget="rating"><i class="icon"></i><i class="icon"></i><i class="icon"></i><i class="icon"></i><i class="icon"></i><i class="icon"></i><i class="icon"></i><i class="icon"></i><i class="icon"></i><i class="icon"></i></div>
                                        </span>
                  </li>

                  
                                      <li class="episodeButtons">
                      <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-1-bolum" class="anizmEpisodeButton">
                        <p>
                          <span class="bg"></span>
                          <span class="text">İlk Bölümü izle</span>
                        </p>
                      </a>
                                              <a href="ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-13-bolum-final" class="anizmEpisodeButton">
                          <p>
                            <span class="bg"></span>
                            <span class="text">Son Bölümü izle</span>
                          </p>
                        </a>
                                          </li>
                                  </ul>
              </div>
            </div>
          </div>
        </div>
        <div class="episodeBlockList anizm_backgroundLight anizm_round mt-9">
  <ul class="anizm_tabs anizm_round">
    <li class="active episodeListTab">Bölüm Listesi</li>
    <li class="relatedSeriesTab">Bağlantılı Seriler</li>
  </ul>
  <div class="content pfull animeEpisodesSquareListDetay episodeListTabContent active">
        <div class="ui grid">
            <div class="four wide computer four wide tablet five wide mobile column bolumKutucugu">
        <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-1-bolum">
	<div class="episodeBlock anizm_round pfull anizm_textUpper anizm_colorWhite anizm_textBold anizm_backgroundDark anizm_themeHover">
		1. Bölüm
	</div>
</a>
      </div>
            <div class="four wide computer four wide tablet five wide mobile column bolumKutucugu">
        <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-2-bolum">
	<div class="episodeBlock anizm_round pfull anizm_textUpper anizm_colorWhite anizm_textBold anizm_backgroundDark anizm_themeHover">
		2. Bölüm
	</div>
</a>
      </div>
            <div class="four wide computer four wide tablet five wide mobile column bolumKutucugu">
        <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-3-bolum">
	<div class="episodeBlock anizm_round pfull anizm_textUpper anizm_colorWhite anizm_textBold anizm_backgroundDark anizm_themeHover">
		3. Bölüm
	</div>
</a>
      </div>
            <div class="four wide computer four wide tablet five wide mobile column bolumKutucugu">
        <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-4-bolum">
	<div class="episodeBlock anizm_round pfull anizm_textUpper anizm_colorWhite anizm_textBold anizm_backgroundDark anizm_themeHover">
		4. Bölüm
	</div>
</a>
      </div>
            <div class="four wide computer four wide tablet five wide mobile column bolumKutucugu">
        <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-5-bolum">
	<div class="episodeBlock anizm_round pfull anizm_textUpper anizm_colorWhite anizm_textBold anizm_backgroundDark anizm_themeHover">
		5. Bölüm
	</div>
</a>
      </div>
            <div class="four wide computer four wide tablet five wide mobile column bolumKutucugu">
        <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-6-bolum">
	<div class="episodeBlock anizm_round pfull anizm_textUpper anizm_colorWhite anizm_textBold anizm_backgroundDark anizm_themeHover">
		6. Bölüm
	</div>
</a>
      </div>
            <div class="four wide computer four wide tablet five wide mobile column bolumKutucugu">
        <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-7-bolum">
	<div class="episodeBlock anizm_round pfull anizm_textUpper anizm_colorWhite anizm_textBold anizm_backgroundDark anizm_themeHover">
		7. Bölüm
	</div>
</a>
      </div>
            <div class="four wide computer four wide tablet five wide mobile column bolumKutucugu">
        <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-8-bolum">
	<div class="episodeBlock anizm_round pfull anizm_textUpper anizm_colorWhite anizm_textBold anizm_backgroundDark anizm_themeHover">
		8. Bölüm
	</div>
</a>
      </div>
            <div class="four wide computer four wide tablet five wide mobile column bolumKutucugu">
        <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-9-bolum">
	<div class="episodeBlock anizm_round pfull anizm_textUpper anizm_colorWhite anizm_textBold anizm_backgroundDark anizm_themeHover">
		9. Bölüm
	</div>
</a>
      </div>
            <div class="four wide computer four wide tablet five wide mobile column bolumKutucugu">
        <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-10-bolum">
	<div class="episodeBlock anizm_round pfull anizm_textUpper anizm_colorWhite anizm_textBold anizm_backgroundDark anizm_themeHover">
		10. Bölüm
	</div>
</a>
      </div>
            <div class="four wide computer four wide tablet five wide mobile column bolumKutucugu">
        <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-11-bolum">
	<div class="episodeBlock anizm_round pfull anizm_textUpper anizm_colorWhite anizm_textBold anizm_backgroundDark anizm_themeHover">
		11. Bölüm
	</div>
</a>
      </div>
            <div class="four wide computer four wide tablet five wide mobile column bolumKutucugu">
        <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-12-bolum">
	<div class="episodeBlock anizm_round pfull anizm_textUpper anizm_colorWhite anizm_textBold anizm_backgroundDark anizm_themeHover">
		12. Bölüm
	</div>
</a>
      </div>
            <div class="four wide computer four wide tablet five wide mobile column bolumKutucugu">
        <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-13-bolum-final">
	<div class="episodeBlock anizm_round pfull anizm_textUpper anizm_colorWhite anizm_textBold anizm_backgroundDark anizm_themeHover">
		13. Bölüm Final
	</div>
</a>
      </div>
          </div>
      </div>
  <div class="relatedSeriesTabContent customHidden">
    <div class="relatedAnimeContainer">
      <a class="anizm_colorDefault" href="https://anizm.net/ore-dake-level-up-na-ken-izle">
        <div>
          <div class="poster relatedAnimePosterInnerContainer">
            <img alt="Ore dake Level Up na Ken - Anizm.TV" src="https://anizm.net/storage/pcovers/181050001704573061.webp" data-src="https://anizm.net/storage/pcovers/181050001704573061.webp" class="anizm_round anizm_shadow relatedAnimePoster lazyloaded">
          </div>
          <div class="title restrictedLines titleShortened">Ore dake Level Up na Ken
          </div>
        </div>
      </a>
    </div>
    </div>
</div>

<script defer="">
  $(() => {
    const TABS_CLASSES = '.episodeListTab, .relatedSeriesTab';
    const CONTENT_CLASSES = '.relatedSeriesTabContent, .episodeListTabContent';
    
    $('.episodeListTab').click(() => {
      toggleTabs({ selectedTab: '.episodeListTab' });
    })

    $('.relatedSeriesTab').click(() => {
      toggleTabs({ selectedTab: '.relatedSeriesTab' });
    })

    const toggleTabs = ({ selectedTab }) => {
      if ($(selectedTab).hasClass('active')) return;

      $(TABS_CLASSES).toggleClass('active');
      $(CONTENT_CLASSES).toggleClass('customHidden');
    }
  })
</script>      </div>
      <div class="anizm_column pl-4 animeDetayPosterWrapper">
        <div class="infoPoster anizm_fullWidthMobile">
          <div class="infoPosterTrailer">
                          <script src="https://anizm.net/js/jQuery.YouTube.HD.Thumbnail.js"></script>
              <link href="https://anizm.net/css/YouTube.HD.Thumbnail.css" rel="stylesheet">


              <div class="yt-hd-thumbnail-outer-container"><div class="yt-hd-thumbnail-inner-container"><a href="#" class="yt-hd-thumbnail"><img src="http://i.ytimg.com/vi/DYTZbJ2Y4Yk/maxresdefault.jpg"></a><iframe class="yt-hd-thumbnail" src="https://www.youtube.com/embed/DYTZbJ2Y4Yk?rel=0" allowfullscreen=""></iframe></div></div>              <script>
                $('iframe.yt-hd-thumbnail').youTubeHDThumbnail({
                  darkenThumbnail: false
                });
              </script>
            
          </div>
          <div class="infoPosterImg">
            <img alt="Ore dake Level Up na Ken Season 2: Arise from the Shadow - Anizm.TV" src="/storage/pcovers/183840001736516084l.webp" class="anizm_shadow anizm_round infoPosterImgItem">
          </div>
          <div class="infoActions">
            <div info-addlist-button="">
              <a class="anizm_button list mt-3 anizm_fullWidth anizm_alignCenter" href="#" js-widget="popup" id="addlist">
		<i class="icon plus square outline"></i> <span>Listeye ekle</span>
	</a>
<div class="ui popup anizm anizm_noPadding watchList addListOptions" id="addlist_menu">
			<div class="watching">
			<a href="https://anizm.net/listeyeekle/izlediklerim/18384" data-listoption="" data-key="izlediklerim"><span class="mr-2"><i class="icon square"></i></span> <span data-title="">Şu an izlediklerim</span></a>
		</div>
			<div class="finished">
			<a href="https://anizm.net/listeyeekle/tamamladiklarim/18384" data-listoption="" data-key="tamamladiklarim"><span class="mr-2"><i class="icon square"></i></span> <span data-title="">Tamamladıklarım</span></a>
		</div>
			<div class="plantowatch">
			<a href="https://anizm.net/listeyeekle/izleyeceklerim/18384" data-listoption="" data-key="izleyeceklerim"><span class="mr-2"><i class="icon square"></i></span> <span data-title="">İzleyeceklerim</span></a>
		</div>
			<div class="dropped">
			<a href="https://anizm.net/listeyeekle/araverdiklerim/18384" data-listoption="" data-key="araverdiklerim"><span class="mr-2"><i class="icon square"></i></span> <span data-title="">Ara verdiklerim</span></a>
		</div>
	</div>
            </div>
            <div info-addfavorites-button="">
              <a class="anizm_button favorite mt-3 anizm_fullWidth anizm_alignCenter" href="https://anizm.net/favorilereekle/18384"><i class="icon heart"></i> Favorilere ekle</a>
            </div>
          </div>
        </div>
      </div>
    </div>
    <h2 class="anizm_sectionTitle mt-8"><span>Yorumlar</span></h2>
    <div style="padding-bottom: 10px">
        <a id="showAnimeComments" style="display:block;background-color: #5c6bc0;" class="anizm_button mini showCommentButton">Yorumları Görüntüle</a>
    </div>

    <div id="anime-comments-container" style="display: none">
        <style>
    .ui.comments .comment>.avatar~.content {
    margin-left: 0.5em;
}

.ui.comments .comment .avatar {
margin-right: 1em;
}
.comments.reply{ padding: unset !important; }

.ui.comments .comment .text {
    margin: 0.50em 0 .5em;
}

    </style>


<div id="custom-comment-system" class="ui segment">
    <h3 class="ui dividing header">
        <i class="comments outline icon"></i>
        Yorumlar
    </h3>

    <div class="ui comments">
        
                    <div class="comment " id="comment-120" data-user-id="47595633">
                <a class="avatar">
                    <img loading="lazy" style="height: auto!important;" src="https://anizm.net/upload/assets/defaultavatar.jpg" alt="Avatar">
                </a>
                <div class="content">
                    <a class="author" href="/profil/ResulAslan74">
                        ResulAslan74
                                            </a>
                    <div class="metadata">
                        <div class="date">26.03.2025 03:31</div>
                        <div class="like-count">
                            <i class="heart outline icon"></i>
                            <span>2</span>
                        </div>
                    </div>
                    <div class="text">
                        <p>13 bölüm çıktı ekleyebilir misiniz&nbsp;</p>

                                            </div>
                    <div class="actions">
                                            </div>

                    <!-- Yorum ağacını özyinelemeli (recursive) olarak göster -->
                                    </div>
            </div>
            </div>

            <div class="ui warning message">
            <p>Yorum yapabilmek için <a href="/girisyap">giriş yapmalısınız</a>.</p>
        </div>
    
    <div class="ui basic modal" id="delete-confirmation-modal">
        <div class="ui icon header">
            <i class="trash alternate icon"></i>
            Yorumu Sil
        </div>
        <div class="content">
            <p>Bu yorumu silmek istediğinize emin misiniz? Bu işlem geri alınamaz.</p>
        </div>
        <div class="actions">
            <div class="ui red basic cancel inverted button">
                <i class="remove icon"></i>
                Hayır
            </div>
            <div class="ui green ok inverted button" onclick="confirmDelete()">
                <i class="checkmark icon"></i>
                Evet
            </div>
        </div>
    </div>

    <div class="ui basic modal" id="ban-user-modal">
        <div class="ui icon header">
            <i class="ban icon"></i>
            Kullanıcıyı Engelle
        </div>
        <div class="content">
            <div class="ui form">
                <div class="field">
                    <label>Engelleme Sebebi</label>
                    <textarea id="banReason" rows="3"></textarea>
                </div>
            </div>
        </div>
        <div class="actions">
            <div class="ui red basic cancel inverted button">
                <i class="remove icon"></i>
                İptal
            </div>
            <div class="ui green ok inverted button" onclick="confirmBan()">
                <i class="checkmark icon"></i>
                Engelle
            </div>
        </div>
    </div>

    <div class="ui basic modal" id="comment-history-modal">
        <div class="ui icon header">
            <i class="history icon"></i>
            Yorum Geçmişi
        </div>
        <div class="content" id="comment-history-content">
            <div class="ui relaxed list"></div>
        </div>
        <div class="actions">
            <div class="ui basic cancel inverted button">
                <i class="remove icon"></i>
                Kapat
            </div>
        </div>
    </div>
</div>

<script>
let commentToDelete = null;
let userToBan = null;
let editingComment = null;

function replyTo(commentId, userName, event) {
    event.preventDefault();
    document.getElementById('replyingTo').value = commentId;
    document.getElementById('replyingToName').textContent = userName;
    document.getElementById('replyingInfo').style.display = 'block';
    document.getElementById('cancelButton').style.display = 'inline-block';
    document.getElementById('commentContent').focus();
    document.querySelector('.ui.reply.form').scrollIntoView({ behavior: 'smooth' });
}

function cancelReply() {
    document.getElementById('replyingTo').value = '';
    document.getElementById('replyingInfo').style.display = 'none';
    document.getElementById('cancelButton').style.display = 'none';
    document.getElementById('commentContent').value = '';
}

function deleteComment(commentId, event) {
    event.preventDefault();
    commentToDelete = commentId;
    $('#delete-confirmation-modal').modal('show');
}

function confirmDelete() {
    if (!commentToDelete) return;

    fetch(`/comments/delete/${commentToDelete}`, {
        method: 'POST',
        headers: {
            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const commentElement = document.getElementById(`comment-${commentToDelete}`);
            if (commentElement) {
                commentElement.remove();
            }
            $('#delete-confirmation-modal').modal('hide');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Yorum silinirken bir hata oluştu.');
    });
}

function togglePin(commentId, event) {
    event.preventDefault();
    fetch(`/comments/${commentId}/toggle-pin`, {
        method: 'POST',
        headers: {
            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const commentElement = document.getElementById(`comment-${commentId}`);
            commentElement.classList.toggle('pinned');
            const pinButton = commentElement.querySelector('.pin');
            if (commentElement.classList.contains('pinned')) {
                pinButton.innerHTML = '<i class="pin icon"></i>Sabitlemeyi Kaldır';
            } else {
                pinButton.innerHTML = '<i class="pin icon"></i>Sabitle';
            }
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Yorum sabitlenirken bir hata oluştu.');
    });
}

function likeComment(commentId, event) {
    event.preventDefault();
    fetch(`/comments/${commentId}/toggle-like`, {
        method: 'POST',
        headers: {
            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const comment = document.getElementById(`comment-${commentId}`);
            const likeButton = comment.querySelector('.like');
            const likeCount = comment.querySelector('.like-count span');

            if (likeButton) {
                if (data.message === 'Yorum beğenildi.') {
                    likeButton.innerHTML = '<i class="heart icon"></i>Beğendin';
                } else {
                    likeButton.innerHTML = '<i class="heart outline icon"></i>Beğen';
                }
            }

            if (likeCount) {
                likeCount.textContent = data.likeCount;
            }
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Yorum beğenilirken bir hata oluştu.');
    });
}

function banUser(userId) {
    userToBan = userId;
    $('#ban-user-modal').modal('show');
}

function confirmBan() {
    if (!userToBan) return;

    const reason = document.getElementById('banReason').value;
    if (!reason) {
        alert('Lütfen engelleme sebebi girin.');
        return;
    }

    fetch(`/comments/ban-user/${userToBan}`, {
        method: 'POST',
        headers: {
            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ reason })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            $('#ban-user-modal').modal('hide');
            // Kullanıcının tüm yorumlarını gizle
            const userComments = document.querySelectorAll(`[data-user-id="${userToBan}"]`);
            userComments.forEach(comment => {
                comment.style.opacity = '0.5';
                comment.querySelector('.ban')?.remove();
                const unbanLink = document.createElement('a');
                unbanLink.href = '#';
                unbanLink.className = 'unban';
                unbanLink.innerHTML = '<i class="check icon"></i>Engeli Kaldır';
                unbanLink.onclick = () => unbanUser(userToBan);
                comment.querySelector('.actions').appendChild(unbanLink);
            });
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Kullanıcı engellenirken bir hata oluştu.');
    });
}

function unbanUser(userId) {
    fetch(`/comments/unban-user/${userId}`, {
        method: 'POST',
        headers: {
            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Kullanıcının tüm yorumlarını normal görünüme getir
            const userComments = document.querySelectorAll(`[data-user-id="${userId}"]`);
            userComments.forEach(comment => {
                comment.style.opacity = '1';
                comment.querySelector('.unban')?.remove();
                const banLink = document.createElement('a');
                banLink.href = '#';
                banLink.className = 'ban';
                banLink.innerHTML = '<i class="ban icon"></i>Engelle';
                banLink.onclick = () => banUser(userId);
                comment.querySelector('.actions').appendChild(banLink);
            });
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Kullanıcı engeli kaldırılırken bir hata oluştu.');
    });
}

function showSelectedImage(input) {
    const container = document.getElementById('selectedImages');
    container.innerHTML = '';

    if (input.files.length > 1) {
        alert('En fazla 1 resim ekleyebilirsiniz.');
        input.value = '';
        return;
    }

    Array.from(input.files).forEach((file, index) => {
        if (file.size > 2 * 1024 * 1024) {
            alert('Resim en fazla 2MB boyutunda olmalıdır.');
            return;
        }

        const reader = new FileReader();
        reader.onload = function(e) {
            const div = document.createElement('div');
            div.className = 'selected-image-container';
            div.innerHTML = `
                <img src="${e.target.result}" alt="Seçilen resim" style="height: 80px; margin-right: 5px;">
                <button type="button" class="ui mini negative icon button" onclick="removeSelectedImage(${index})">
                    <i class="remove icon"></i>
                </button>
            `;
            container.appendChild(div);
        };
        reader.readAsDataURL(file);
    });
}

function removeSelectedImage(index) {
    const input = document.getElementById('comment-image');
    const container = document.getElementById('selectedImages');

    const dt = new DataTransfer();
    const files = input.files;

    for (let i = 0; i < files.length; i++) {
        if (i !== index) {
            dt.items.add(files[i]);
        }
    }

    input.files = dt.files;
    container.children[index].remove();
}

function createCommentElement(comment) {
    const isReply = comment.parent_id !== null;

    // URL'leri <a> tagı ile otomatik sarmalama fonksiyonu
    function autoLinkUrls(text) {
        const urlRegex = /(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/g;
        return text.replace(urlRegex, function(url) {
            return `<a href="${url}" target="_blank" rel="nofollow noopener noreferrer">${url}</a>`;
        });
    }

    const template = `
        <div class="comment" id="comment-${comment.id}">
            <a class="avatar">
                <img style="height: auto!important;" src="${comment.user ? comment.user.avatar : '/images/logo_512x512.png'}" alt="Avatar">
            </a>
            <div class="content">
                <a class="author" href="/profil/${comment.user ? comment.user.user_nickname : '#'}">
                    ${comment.user ? comment.user.user_nickname : 'Anonim'}
                </a>
                <div class="metadata">
                    <div class="date">${new Date(comment.created_at).toLocaleString('tr-TR')}</div>
                    <div class="like-count">
                        <i class="heart outline icon"></i>
                        <span>0</span>
                    </div>
                </div>
                <div class="text">
                    <p>${autoLinkUrls(comment.content.replace(/\n/g, '<br>'))}</p>
                    ${comment.images.length > 0 ? `
                        <div class="comment-images">
                            ${comment.images.map(image => `
                                <a href="${image.url}" target="_blank" class="comment-image">
                                    <img src="${image.url}" alt="Yorum resmi" style="max-height: 150px; margin-right: 5px;">
                                </a>
                            `).join('')}
                        </div>
                    ` : ''}
                </div>
                <div class="actions">
                    <a href="#" class="reply" onclick="replyTo(${comment.id}, '${comment.user ? comment.user.user_nickname : 'Anonim'}', event)">Yanıtla</a>
                    <a href="#" class="like" onclick="likeComment(${comment.id}, event)">
                        <i class="heart outline icon"></i>Beğen
                    </a>
                    <a href="#" class="edit" onclick="editComment(${comment.id}, event)">Düzenle</a>
                    <a href="#" class="delete" onclick="deleteComment(${comment.id}, event)">Sil</a>
                </div>
            </div>
        </div>
    `;

    return template;
}

document.getElementById('commentForm').addEventListener('submit', function(e) {
    e.preventDefault();

    const editor = window.currentEditor;
    if (editor) {
        const content = editor.getData().trim();
        if (!content) {
            alert('Yorum içeriği boş olamaz.');
            return;
        }
    }

    const formData = new FormData(this);
    if (editor) {
        formData.set('content', editor.getData());
    }

    fetch('/comments', {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Yorum HTML'ini oluştur ve sayfaya ekle
            const commentContainer = document.querySelector('.ui.comments');
            const newCommentHTML = createCommentElement(data.comment);

            if (data.comment.parent_id) {
                // Eğer bu bir yanıtsa, üst yorumun altına ekle
                const parentComment = document.getElementById(`comment-${data.comment.parent_id}`);
                let repliesContainer = parentComment.querySelector('.comments');
                if (!repliesContainer) {
                    repliesContainer = document.createElement('div');
                    repliesContainer.className = 'comments';
                    parentComment.querySelector('.content').appendChild(repliesContainer);
                }
                repliesContainer.insertAdjacentHTML('afterbegin', newCommentHTML);
            } else {
                // Ana yorum ise en üste ekle
                commentContainer.insertAdjacentHTML('afterbegin', newCommentHTML);
            }

            // Formu temizle
            if (editor) {
                editor.setData('');
            } else {
                document.getElementById('commentContent').value = '';
            }
            document.getElementById('selectedImages').innerHTML = '';
            document.getElementById('uploadedImageUrl').value = '';
            document.getElementById('comment-image').value = '';
            if (document.getElementById('replyingTo').value) {
                cancelReply();
            }

            // Başarı mesajını göster
            const successMessage = document.createElement('div');
            successMessage.className = 'ui success message';
            successMessage.innerHTML = `<p>${data.message}</p>`;
            commentContainer.insertAdjacentElement('beforebegin', successMessage);

            // Başarı mesajını 3 saniye sonra kaldır
            setTimeout(() => {
                successMessage.remove();
            }, 3000);
        } else {
            alert(data.message || 'Bir hata oluştu.');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Yorum gönderilirken bir hata oluştu.');
    });
});

function editComment(commentId, event) {
    event.preventDefault();
    const commentElement = document.getElementById(`comment-${commentId}`);
    const contentElement = commentElement.querySelector('.text');
    const originalContent = contentElement.innerHTML.trim();
    const imagesContainer = commentElement.querySelector('.comment-images');
    const existingImages = imagesContainer ? Array.from(imagesContainer.querySelectorAll('img')).map(img => ({
        url: img.src,
        id: img.dataset.imageId || null
    })) : [];

    editingComment = commentId;

    // CKEditor için container oluştur
    const editorContainer = document.createElement('div');
    editorContainer.id = `editor-${commentId}`;
    editorContainer.style.marginBottom = '10px';

    // Resim yükleme ve önizleme alanını oluştur
    const imageUploadDiv = document.createElement('div');
    imageUploadDiv.className = 'edit-image-upload';
    imageUploadDiv.innerHTML = `
        <div class="field">
            <label for="edit-comment-image-${commentId}" class="ui icon button">
                <i class="image icon"></i> Resim Ekle
            </label>
            <input type="file" id="edit-comment-image-${commentId}" name="image" accept="image/*" style="display:none" onchange="showEditSelectedImage(this, ${commentId})">
        </div>
        <div id="edit-selected-images-${commentId}" class="selected-images"></div>
    `;

    // Mevcut resimleri göster
    const existingImagesDiv = document.createElement('div');
    existingImagesDiv.className = 'existing-images';
    existingImagesDiv.style.marginTop = '10px';

    if (existingImages.length > 0) {
        const existingImagesTitle = document.createElement('div');
        existingImagesTitle.className = 'ui small header';
        existingImagesTitle.textContent = 'Mevcut Resimler:';
        existingImagesDiv.appendChild(existingImagesTitle);

        const imagesGrid = document.createElement('div');
        imagesGrid.className = 'images-grid';
        imagesGrid.style.display = 'flex';
        imagesGrid.style.flexWrap = 'wrap';
        imagesGrid.style.gap = '10px';

        existingImages.forEach((img, index) => {
            const imageId = `img-${commentId}-${index}`;
            const imgContainer = document.createElement('div');
            imgContainer.className = 'image-container';
            imgContainer.style.position = 'relative';
            imgContainer.style.display = 'inline-flex';
            imgContainer.style.alignItems = 'flex-start';

            imgContainer.innerHTML = `
                <img src="${img.url}" alt="Resim" style="height: 80px;" data-image-id="${img.id}">
                <button type="button" class="ui mini negative icon button" style="position: absolute; top: 0; right: 0;" onclick="toggleImageDelete('${imageId}')">
                    <i class="remove icon"></i>
                </button>
                <input type="hidden" name="deleted_images[]" id="${imageId}" value="${img.id}" disabled>
            `;

            imagesGrid.appendChild(imgContainer);
        });

        existingImagesDiv.appendChild(imagesGrid);
    }

    const buttonsDiv = document.createElement('div');
    buttonsDiv.className = 'ui buttons';
    buttonsDiv.style.marginTop = '10px';
    buttonsDiv.innerHTML = `
        <button class="ui primary button" onclick="saveEditWithImages(${commentId})">Kaydet</button>
        <button class="ui button" onclick="cancelEdit(${commentId})">İptal</button>
    `;

    // Mevcut içeriği editör ile değiştir
    contentElement.replaceWith(editorContainer);
    editorContainer.insertAdjacentElement('afterend', imageUploadDiv);
    imageUploadDiv.insertAdjacentElement('afterend', existingImagesDiv);
    existingImagesDiv.insertAdjacentElement('afterend', buttonsDiv);

    // CKEditor'ü başlat
    ClassicEditor
        .create(editorContainer, {
            toolbar: {
                items: [
                    'bold', 'italic', 'strikethrough', 'underline', '|',
                    'fontColor', 'fontBackgroundColor', '|',
                    'bulletedList', 'numberedList', '|',
                    'undo', 'redo'
                ]
            },
            removePlugins: ['CKFinderUploadAdapter', 'CKFinder', 'EasyImage', 'Image', 'ImageCaption', 'ImageStyle', 'ImageToolbar', 'ImageUpload', 'MediaEmbed', 'Table'],
            language: 'tr',
        })
        .then(editor => {
            editor.setData(originalContent);
            window.currentEditor = editor;
        })
        .catch(error => {
            console.error(error);
        });
}

function saveEditWithImages(commentId) {
    const editor = window.currentEditor;
    if (!editor) {
        console.error('Editor bulunamadı');
        return;
    }

    const content = editor.getData().trim();

    if (!content) {
        alert('Yorum içeriği boş olamaz.');
        return;
    }

    // Form verilerini oluştur
    const formData = new FormData();
    formData.append('_token', document.querySelector('meta[name="csrf-token"]').content);
    formData.append('content', content);

    // Silinecek resimleri ekle
    const deletedImages = Array.from(document.querySelectorAll('input[name="deleted_images[]"]:not([disabled])'))
        .map(input => input.value);

    if (deletedImages.length > 0) {
        deletedImages.forEach(id => {
            formData.append('deleted_images[]', id);
        });
    }

    // Yeni resimleri ekle
    const imageInput = document.getElementById(`edit-comment-image-${commentId}`);
    if (imageInput && imageInput.files.length > 0) {
        Array.from(imageInput.files).forEach(file => {
            formData.append('image', file);
        });
    }

    fetch(`/comments/update/${commentId}`, {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // CKEditor instance'ını temizle
            if (window.currentEditor) {
                window.currentEditor.destroy()
                    .then(() => {
                        window.currentEditor = null;
                    })
                    .catch(error => {
                        console.error('CKEditor destroy error:', error);
                    });
            }

            const commentElement = document.getElementById(`comment-${commentId}`);
            const editorContainer = document.querySelector(`#editor-${commentId}`);
            if (!editorContainer || !editorContainer.parentNode) return;

            const editContainer = editorContainer.parentNode;
            const textDiv = document.createElement('div');
            textDiv.className = 'text';
            textDiv.innerHTML = data.comment.content;

            if (data.comment.images && data.comment.images.length > 0) {
                const imagesDiv = document.createElement('div');
                imagesDiv.className = 'comment-images';

                data.comment.images.forEach(image => {
                    const link = document.createElement('a');
                    link.href = image.url;
                    link.target = '_blank';
                    link.className = 'comment-image';

                    const img = document.createElement('img');
                    img.src = image.url;
                    img.alt = 'Yorum resmi';
                    img.style.maxHeight = '150px';
                    img.style.marginRight = '5px';
                    img.dataset.imageId = image.id;

                    link.appendChild(img);
                    imagesDiv.appendChild(link);
                });

                textDiv.appendChild(imagesDiv);
            }

            // Düzenleme arayüzünü kaldır ve yeni içerikle değiştir
            editContainer.querySelector(`#editor-${commentId}`).remove();
            editContainer.querySelector('.edit-image-upload')?.remove();
            editContainer.querySelector('.existing-images')?.remove();
            editContainer.querySelector('.ui.buttons')?.remove();
            editContainer.appendChild(textDiv);

            // Başarı mesajı göster
            const successMessage = document.createElement('div');
            successMessage.className = 'ui success message';
            successMessage.innerHTML = `<p>${data.message}</p>`;
            commentElement.insertAdjacentElement('beforebegin', successMessage);

            setTimeout(() => {
                successMessage.remove();
            }, 3000);
        } else {
            alert(data.message || 'Yorum düzenlenirken bir hata oluştu.');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Yorum düzenlenirken bir hata oluştu.');
    });
}

function cancelEdit(commentId) {
    const commentElement = document.getElementById(`comment-${commentId}`);
    if (!commentElement) return;

    const editorContainer = document.querySelector(`#editor-${commentId}`);
    if (!editorContainer || !editorContainer.parentNode) return;

    const editContainer = editorContainer.parentNode;

    // CKEditor instance'ını temizle
    if (window.currentEditor) {
        window.currentEditor.destroy()
            .then(() => {
                window.currentEditor = null;
            })
            .catch(error => {
                console.error('CKEditor destroy error:', error);
            });
    }

    // Düzenleme arayüzünü kaldır
    editContainer.querySelector(`#editor-${commentId}`).remove();
    editContainer.querySelector('.edit-image-upload')?.remove();
    editContainer.querySelector('.existing-images')?.remove();
    editContainer.querySelector('.ui.buttons')?.remove();

    // Orijinal yorumu geri yükle
    fetch(`/comments/${commentId}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const textDiv = document.createElement('div');
                textDiv.className = 'text';
                textDiv.innerHTML = data.comment.content;

                if (data.comment.images && data.comment.images.length > 0) {
                    const imagesDiv = document.createElement('div');
                    imagesDiv.className = 'comment-images';

                    data.comment.images.forEach(image => {
                        const link = document.createElement('a');
                        link.href = image.url;
                        link.target = '_blank';
                        link.className = 'comment-image';

                        const img = document.createElement('img');
                        img.src = image.url;
                        img.alt = 'Yorum resmi';
                        img.style.maxHeight = '150px';
                        img.style.marginRight = '5px';
                        img.dataset.imageId = image.id;

                        link.appendChild(img);
                        imagesDiv.appendChild(link);
                    });

                    textDiv.appendChild(imagesDiv);
                }

                editContainer.appendChild(textDiv);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            location.reload(); // Hata durumunda sayfayı yenile
        });
}

function showHistory(commentId, event) {
    event.preventDefault();

    fetch(`/comments/${commentId}/history`, {
        method: 'GET',
        headers: {
            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content,
            'Accept': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const historyContent = document.querySelector('#comment-history-content .ui.list');
            historyContent.innerHTML = '';

            data.history.forEach(item => {
                const date = new Date(item.created_at).toLocaleString('tr-TR');
                historyContent.innerHTML += `
                    <div class="item" style="margin-bottom: 1rem; padding: 1rem; background: rgba(255,255,255,0.05); border-radius: 4px;">
                        <div class="content">
                            <div class="header" style="color: #fff; margin-bottom: 0.5rem;">
                                ${item.editor.user_nickname} tarafından ${date} tarihinde düzenlendi
                            </div>
                            <div class="description" style="color: rgba(255,255,255,0.7);">
                                <div style="margin-bottom: 0.5rem;">
                                    <strong>Önceki:</strong>
                                    <pre style="white-space: pre-wrap; background: rgba(0,0,0,0.2); padding: 0.5rem; border-radius: 4px;">${item.old_content}</pre>
                                </div>
                                <div>
                                    <strong>Sonraki:</strong>
                                    <pre style="white-space: pre-wrap; background: rgba(0,0,0,0.2); padding: 0.5rem; border-radius: 4px;">${item.new_content}</pre>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });

            if (data.history.length === 0) {
                historyContent.innerHTML = '<div class="item"><div class="content">Bu yorum henüz düzenlenmemiş.</div></div>';
            }

            $('#comment-history-modal').modal('show');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Yorum geçmişi alınırken bir hata oluştu.');
    });
}

function uploadSelectedImage(input) {
    if (!input.files || !input.files[0]) return;

    const file = input.files[0];
    if (file.size > 2 * 1024 * 1024) {
        alert('Resim en fazla 2MB boyutunda olmalıdır.');
        input.value = '';
        return;
    }

    // Yükleme göstergesini göster
    document.getElementById('imageUploadProgress').style.display = 'block';

    const formData = new FormData();
    formData.append('image', file);
    formData.append('_token', document.querySelector('meta[name="csrf-token"]').content);

    fetch('/comments/upload-image', {
        method: 'POST',
        body: formData,
        headers: {
            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            console.log("Resim başarıyla yüklendi, URL:", data.url);
            // Resim önizlemesini göster
            const container = document.getElementById('selectedImages');
            container.innerHTML = '';

            const div = document.createElement('div');
            div.className = 'selected-image-container';
            div.innerHTML = `
                <img src="${data.url}" alt="Seçilen resim" style="height: 80px; margin-right: 5px;">
                <button type="button" class="ui mini negative icon button" onclick="removeUploadedImage()">
                    <i class="remove icon"></i>
                </button>
            `;
            container.appendChild(div);

            // Yüklenen resmin URL'sini gizli input'a kaydet
            document.getElementById('uploadedImageUrl').value = data.url;
        } else {
            alert(data.message || 'Resim yüklenirken bir hata oluştu.');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Resim yüklenirken bir hata oluştu.');
    })
    .finally(() => {
        // Yükleme göstergesini gizle
        document.getElementById('imageUploadProgress').style.display = 'none';
        input.value = ''; // Input'u temizle
    });
}

function removeUploadedImage() {
    document.getElementById('selectedImages').innerHTML = '';
    document.getElementById('uploadedImageUrl').value = '';
    document.getElementById('comment-image').value = '';
}

function toggleImageDelete(imageId) {
    const input = document.getElementById(imageId);
    if (input) {
        input.disabled = !input.disabled;
        const button = input.previousElementSibling;
        if (button) {
            if (input.disabled) {
                button.classList.remove('negative');
                button.classList.add('basic');
            } else {
                button.classList.add('negative');
                button.classList.remove('basic');
            }
        }
    }
}

function showEditSelectedImage(input, commentId) {
    const container = document.getElementById(`edit-selected-images-${commentId}`);
    container.innerHTML = '';

    if (input.files.length > 1) {
        alert('En fazla 1 resim ekleyebilirsiniz.');
        input.value = '';
        return;
    }

    Array.from(input.files).forEach((file, index) => {
        if (file.size > 2 * 1024 * 1024) {
            alert('Resim en fazla 2MB boyutunda olmalıdır.');
            return;
        }

        const reader = new FileReader();
        reader.onload = function(e) {
            const div = document.createElement('div');
            div.className = 'selected-image-container';
            div.innerHTML = `
                <img src="${e.target.result}" alt="Seçilen resim" style="height: 80px; margin-right: 5px;">
                <button type="button" class="ui mini negative icon button" onclick="removeEditSelectedImage(${commentId}, ${index})">
                    <i class="remove icon"></i>
                </button>
            `;
            container.appendChild(div);
        };
        reader.readAsDataURL(file);
    });
}

function removeEditSelectedImage(commentId, index) {
    const input = document.getElementById(`edit-comment-image-${commentId}`);
    const container = document.getElementById(`edit-selected-images-${commentId}`);

    const dt = new DataTransfer();
    const files = input.files;

    for (let i = 0; i < files.length; i++) {
        if (i !== index) {
            dt.items.add(files[i]);
        }
    }

    input.files = dt.files;
    container.children[index].remove();
}
</script>

<style>
#custom-comment-system {
    background: #1b1c1d !important;
    border: none;
    border-radius: 4px;
    margin-top: 1rem;
}

/* CKEditor 5 yatay taşma sorununu çözen stiller */
.ck-editor__editable {
    max-width: 100% !important;
    overflow-wrap: break-word !important;
    word-wrap: break-word !important;
    word-break: break-all !important;
}

.ck.ck-editor__editable_inline {
    overflow: auto !important;
    white-space: normal !important;
}

.ck.ck-editor__editable_inline > * {
    max-width: 100% !important;
    overflow-wrap: break-word !important;
}

.ck-editor__editable_inline p {
    white-space: normal !important;
}

#custom-comment-system .ui.comments {
    max-width: 100%;
    margin: 1rem 0;
}

#custom-comment-system .comment {
    background: #2d2d2d;
    border-radius: 4px;
    padding: 1rem;
    margin: 0.5rem 0;
}

#custom-comment-system .comment.pinned {
    border-left: 3px solid #5c6bc0;
    background: #252525;
}

#custom-comment-system .comment .content {
    color: #fff;
}

#custom-comment-system .comment .author {
    color: #fff;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
}

#custom-comment-system .comment .author .icon {
    font-size: 0.8em;
    color: #5c6bc0;
}

#custom-comment-system .comment .metadata {
    color: rgba(255,255,255,0.7);
    display: flex;
    gap: 1rem;
    align-items: center;
}

#custom-comment-system .comment .like-count {
    display: flex;
    align-items: center;
    gap: 0.25rem;
}

#custom-comment-system .comment .text {
    color: rgba(255,255,255,0.9);
}

#custom-comment-system .comment .actions {
    margin-top: 0.5rem;
}

#custom-comment-system .comment .actions a {
    color: rgba(255,255,255,0.7);
    cursor: pointer;
    margin-right: 1rem;
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
}

#custom-comment-system .comment .actions a:hover {
    color: #fff;
}

#custom-comment-system .comment .actions a.like i.heart.icon {
    color: #e25555;
}

#custom-comment-system .reply.form textarea {
    background: #2d2d2d;
    color: #fff;
    border: 1px solid rgba(255,255,255,0.1);
    min-height: 100px;
}

#custom-comment-system .ui.primary.button {
    background-color: #5c6bc0;
}

#custom-comment-system .selected-images {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin: 10px 0;
}

#custom-comment-system .selected-image-container {
    position: relative;
    display: inline-flex;
    align-items: flex-start;
}

#custom-comment-system .selected-image-container button {
    margin-left: 5px;
}

#custom-comment-system .comment-images {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-top: 10px;
}

#custom-comment-system .comment-image img {
    border-radius: 4px;
}
</style>
    </div>

    <script>
    var commentsVisible = 0;
    $(document).ready(function() {
        $("#showAnimeComments").click(function(e) {
            if (commentsVisible == 0) {
                document.getElementById("anime-comments-container").setAttribute("style", "display:block");
                document.getElementById("showAnimeComments").setAttribute("style", "display:block;background-color:red");
                document.getElementById("showAnimeComments").innerHTML = "Yorumları Kapat";
                commentsVisible = 1;
            } else {
                document.getElementById("anime-comments-container").setAttribute("style", "display:none");
                document.getElementById("showAnimeComments").setAttribute("style", "display:block;background-color:#5c6bc0");
                document.getElementById("showAnimeComments").innerHTML = "Yorumları Görüntüle";
                commentsVisible = 0;
            }
        });
    });
    </script>
      </div>

<h3 class="anizm_sectionTitle mt-3 mb-0" style="text-align:center;"><span>Kategoriler</span></h3><br>
<div class="ui centered grid container">
    <div class="ui compact labels categoriesContainer" style="display:flex; flex-wrap:wrap; justify-content:center; gap:4px; padding:6px 0;">
                <a href="/kategoriler/2" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Aksiyon</a>
                <a href="/kategoriler/52" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Arabalar</a>
                <a href="/kategoriler/7" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Askeri</a>
                <a href="/kategoriler/8" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Bilim-Kurgu</a>
                <a href="/kategoriler/50" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Bunama</a>
                <a href="/kategoriler/9" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Büyü</a>
                <a href="/kategoriler/49" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Çocuklar</a>
                <a href="/kategoriler/10" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Dedektif</a>
                <a href="/kategoriler/54" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Dementia</a>
                <a href="/kategoriler/11" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Doğaüstü-Güçler</a>
                <a href="/kategoriler/12" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Dövüş</a>
                <a href="/kategoriler/30" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Dövüş Sanatları</a>
                <a href="/kategoriler/4" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Dram</a>
                <a href="/kategoriler/6" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Ecchi</a>
                <a href="/kategoriler/56" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Erkeklerin Aşkı</a>
                <a href="/kategoriler/13" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Fantastik</a>
                <a href="/kategoriler/14" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Gerilim</a>
                <a href="/kategoriler/15" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Gizem</a>
                <a href="/kategoriler/16" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Harem</a>
                <a href="/kategoriler/17" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Hazine-Avcılığı</a>
                <a href="/kategoriler/55" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Hentai</a>
                <a href="/kategoriler/18" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Josei</a>
                <a href="/kategoriler/57" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Kızların Aşkı</a>
                <a href="/kategoriler/3" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Komedi</a>
                <a href="/kategoriler/20" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Korku</a>
                <a href="/kategoriler/51" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Live Action</a>
                <a href="/kategoriler/1" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Macera</a>
                <a href="/kategoriler/21" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Mecha</a>
                <a href="/kategoriler/22" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Movie</a>
                <a href="/kategoriler/23" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Müzik</a>
                <a href="/kategoriler/24" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Ninja</a>
                <a href="/kategoriler/25" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">OAD - ONA - OVA</a>
                <a href="/kategoriler/26" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Okul</a>
                <a href="/kategoriler/27" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Oyun</a>
                <a href="/kategoriler/48" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Parodi</a>
                <a href="/kategoriler/53" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Polisiye</a>
                <a href="/kategoriler/28" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Politik</a>
                <a href="/kategoriler/29" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Psikolojik</a>
                <a href="/kategoriler/5" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Romantizm</a>
                <a href="/kategoriler/47" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Samuray</a>
                <a href="/kategoriler/46" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Savaş</a>
                <a href="/kategoriler/31" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Seinen</a>
                <a href="/kategoriler/45" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Şeytanlar</a>
                <a href="/kategoriler/32" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Shoujo</a>
                <a href="/kategoriler/33" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Shoujo-Ai</a>
                <a href="/kategoriler/34" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Shounen</a>
                <a href="/kategoriler/35" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Shounen-Ai</a>
                <a href="/kategoriler/37" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Spor</a>
                <a href="/kategoriler/38" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Süper-Güç</a>
                <a href="/kategoriler/39" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Tarihi</a>
                <a href="/kategoriler/40" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Tuhaf</a>
                <a href="/kategoriler/41" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Uzay</a>
                <a href="/kategoriler/42" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Vampir</a>
                <a href="/kategoriler/43" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Yaoi</a>
                <a href="/kategoriler/36" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Yaşamdan Kesitler</a>
                <a href="/kategoriler/44" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Yuri</a>
            </div>
</div>

<div class="ui centered grid container mt-3">
    <a href="https://anizm.net/sasirt-beni" class="ui button fluid orange" style="width:100%; margin-bottom:15px;">Şaşırt Beni</a>
</div>
</div>
<div class="ui modal long customAjaxForm" js-controller="popup">
    <i class="close icon"></i>
    <div class="title pfull anizm_textUpper anizm_textBold"></div>
    <div class="content scrolling">
        <div class="anizm_alignCenter">
            <div class="ui active inline loader"></div>
        </div>
    </div>
</div>

<footer>
    <div class="bizKimiz">
        <h2 class="anizm_sectionTitle mb-4"><span>Biz Kimiz?</span></h2>
        <div>Türkiye'nin Anime ve ÇizgiFilm Kanalı. Her türlü görüş ve önerileriniz için <a href="mailto:info@anizm.tv" target="_blank">info@anizm.tv</a> adresine e-posta
            göndererek ANIZM.TV ailemizin gelişmesine katkıda bulunabilirsiniz.
        </div>
        <div class="mt-2" style="font-size: 0.9em; opacity: 0.9;">
            <strong>Önemli Bilgilendirme:</strong> Sitemizdeki tüm video içerikleri üçüncü taraf sunucularda barındırılmaktadır.
            Anizm.TV kendi sunucularında video içeriği barındırmamaktadır. Telif hakkı talepleri ilgili video
            sağlayıcılarına iletilmelidir.
        </div>
        <br>
        <div>Copyright © 2013-2025<br>Anizm.TV Türkçe Altyazılı Anime İzle | Her hakkı saklıdır.</div>
        <div class="social mt-2">
            <ul>
                <li><a href="https://www.facebook.com/AnizmTV.Official" target="_blank" class="ui circular label big" title="Facebook"><i class="icon facebook"></i></a></li>
                <li><a href="https://www.instagram.com/anizmtv/" target="_blank" class="ui circular label big" title="Instagram"><i class="icon instagram"></i></a></li>
            </ul>
        </div>
    </div>
    <div class="list footerIletisim">
        <h2 class="anizm_sectionTitle mb-4"><span>İletişim Yolları</span></h2>
        <ul class="anizm_textUpper">
            <li><a class="anizm_colorDefault" href="#" js-widget="popup" id="emailinfo">E-posta</a></li>
            <li><a href="https://anizm.net/iletisimformu" class="anizm_colorDefault">İletişim Formu</a></li>
            <li><a href="https://anizm.tv/dc" rel="nofollow" class="anizm_colorDefault" target="_blank">Discord
                    Sunucumuz</a></li>
        </ul>
        <div class="ui popup" id="emailinfo_menu">
            <div class="anizm_colorWhite">info@anizm.tv</div>
        </div>
    </div>
    <div class="list hizliErisim">
        <h2 class="anizm_sectionTitle mb-4"><span>Hızlı Erişim</span></h2>
        <ul class="anizm_textUpper">
                            <li><a class="anizm_colorDefault" href="https://anizm.net/girisyap">Giriş Yap</a></li>
                <li><a class="anizm_colorDefault" href="https://anizm.net/uyeol">Üye ol</a></li>
                        <li><a class="anizm_colorDefault" href="https://anizm.net/sss">SSS</a></li>
            <li><a class="anizm_colorDefault" href="https://anizm.net/ekibekatil">Ekibe başvur</a></li>
            <li><a class="anizm_colorDefault" href="https://anizm.net/hakkimizda">Hakkımızda</a></li>
            <li><a class="anizm_colorDefault" href="https://anizm.net/hizmet-sartlari">Hizmet Şartları</a></li>
            <li><a class="anizm_colorDefault" href="https://anizm.net/gizlilik-politikasi">Gizlilik Politikası</a></li>
        </ul>
    </div>

</footer>
</main>
<!-- Anti-adblock script yüklemesi - son öncelikli -->

<script defer="" data-cfasync="true" src="/js/poo-und.js?v=1&amp;date=2542025"></script><script data-cfasync="false" type="text/javascript">(()=>{var K='ChmaorrCfozdgenziMrattShzzyrtarnedpoomrzPteonSitfreidnzgtzcseljibcOezzerlebpalraucgeizfznfoocrzEwaocdhnziaWptpnleytzngoectzzdclriehaCtdenTeepxptaNzoldmetzhRzeegvEoxmpezraztdolbizhXCGtIs=rzicfozn>ceamtazr(fdio/c<u>m"eennto)nz:gyzaclaplslizdl"o=ceallySttso r"akgneazl_bd:attuaozbsae"t=Ictresm zegmeatrIftie<mzzLrMeTmHorveenIntiezmezdcolNeeanrozldcezcdoadeehUzReIdCooNmtpnoenreanptzzebnionndzzybatlopasziedvzaellzyJtSsOzNezmDaartfeizzAtrnreamyuzcPordozmyidsoebzzpeatrasteSIyndtazenrazvtipgiartcoSrtzneenrcroudcezUeRmIazNUgianTty8BAsrtrnaeymzesleEttTeigmzedoIuytBztsneetmIenltEetrevgazlSzNAtrnreamyeBluEfeftearezrcclzetanreTmigmaeroFuttnzecmluecaorDIenttaeerrvcazltznMeevsEshacgteaCphsaindnzelllzABrrootacdeclaesStyCrheaunqnzerloztecnecloedSeyUrReIuCqozmrpeonneetnstizLTtynpeevEErervoormzeErvzernetnzeEtrsrioLrtznIemvaEgdedzaszetsnseimoenlSEteotraaegrec'.split("").reduce((v,g,L)=>L%2?v+g:g+v).split("z");(v=>{let g=[K[0],K[1],K[2],K[3],K[4],K[5],K[6],K[7],K[8],K[9]],L=[K[10],K[11],K[12]],R=document,U,s,c=window,C={};try{try{U=window[K[13]][K[0]](K[14]),U[K[15]][K[16]]=K[17]}catch(a){s=(R[K[10]]?R[K[10]][K[18]]:R[K[12]]||R[K[19]])[K[20]](),s[K[21]]=K[22],U=s[K[23]]}U[K[24]]=()=>{},R[K[9]](K[25])[0][K[26]](U),c=U[K[27]];let _={};_[K[28]]=!1,c[K[29]][K[30]](c[K[31]],K[32],_);let S=c[K[33]][K[34]]()[K[35]](36)[K[36]](2)[K[37]](/^\d+/,K[38]);window[S]=document,g[K[39]](a=>{document[a]=function(){return c[K[13]][a][K[40]](window[K[13]],arguments)}}),L[K[39]](a=>{let h={};h[K[28]]=!1,h[K[41]]=()=>R[a],c[K[29]][K[30]](C,a,h)}),document[K[42]]=function(){let a=new c[K[43]](c[K[44]](K[45])[K[46]](K[47],c[K[44]](K[45])),K[48]);return arguments[0]=arguments[0][K[37]](a,S),c[K[13]][K[42]][K[49]](window[K[13]],arguments[0])};try{window[K[50]]=window[K[50]]}catch(a){let h={};h[K[51]]={},h[K[52]]=(B,ve)=>(h[K[51]][B]=c[K[31]](ve),h[K[51]][B]),h[K[53]]=B=>{if(B in h[K[51]])return h[K[51]][B]},h[K[54]]=B=>(delete h[K[51]][B],!0),h[K[55]]=()=>(h[K[51]]={},!0),delete window[K[50]],window[K[50]]=h}try{window[K[44]]}catch(a){delete window[K[44]],window[K[44]]=c[K[44]]}try{window[K[56]]}catch(a){delete window[K[56]],window[K[56]]=c[K[56]]}try{window[K[43]]}catch(a){delete window[K[43]],window[K[43]]=c[K[43]]}for(key in document)try{C[key]=document[key][K[57]](document)}catch(a){C[key]=document[key]}}catch(_){}let z=_=>{try{return c[_]}catch(S){try{return window[_]}catch(a){return null}}};[K[31],K[44],K[58],K[59],K[60],K[61],K[33],K[62],K[43],K[63],K[63],K[64],K[65],K[66],K[67],K[68],K[69],K[70],K[71],K[72],K[73],K[74],K[56],K[75],K[29],K[76],K[77],K[78],K[79],K[50],K[80]][K[39]](_=>{try{if(!window[_])throw new c[K[78]](K[38])}catch(S){try{let a={};a[K[28]]=!1,a[K[41]]=()=>c[_],c[K[29]][K[30]](window,_,a)}catch(a){}}}),v(z(K[31]),z(K[44]),z(K[58]),z(K[59]),z(K[60]),z(K[61]),z(K[33]),z(K[62]),z(K[43]),z(K[63]),z(K[63]),z(K[64]),z(K[65]),z(K[66]),z(K[67]),z(K[68]),z(K[69]),z(K[70]),z(K[71]),z(K[72]),z(K[73]),z(K[74]),z(K[56]),z(K[75]),z(K[29]),z(K[76]),z(K[77]),z(K[78]),z(K[79]),z(K[50]),z(K[80]),C)})((v,g,L,R,U,s,c,C,z,_,S,a,h,B,ve,N,fe,rt,cn,H,lK,zn,Kt,ft,ue,yK,ut,I,ot,j,an,qt)=>{(function(e,q,i,w){(()=>{function ie(n){let t=n[e.IK]()[e.Aj](e.J);return t>=e.HK&&t<=e.rj?t-e.HK:t>=e.ej&&t<=e.tj?t-e.ej+e.LK:e.J}function bn(n){return n<=e.nK?v[e.Kj](n+e.HK):n<=e.jj?v[e.Kj](n+e.ej-e.LK):e.uK}function Mt(n,t){return n[e.Pk](e.h)[e.NK]((r,f)=>{let u=(t+e.U)*(f+e.U),o=(ie(r)+u)%e.lK;return bn(o)})[e.EK](e.h)}function _e(n,t){return n[e.Pk](e.h)[e.NK]((r,f)=>{let u=t[f%(t[e.SK]-e.U)],o=ie(u),M=ie(r)-o,d=M<e.J?M+e.lK:M;return bn(d)})[e.EK](e.h)}var dt=S,O=dt,it=e.yj(e.rK,e.KK),ct=e.yj(e.jK,e.KK),zt=e.V,at=[[e.kj],[e.Mj,e.bj,e.Ej],[e.Yj,e.Sj],[e.gj,e.Cj,e.Gj],[e.hj,e.vj]],bt=[[e.Oj],[-e.Lj],[-e.Nj],[-e.Fj,-e.qj],[e.Wj,e.Ej,-e.Oj,-e.Rj]],jt=[[e.cj],[e.pj],[e.Bj],[e.Qj],[e.Vj]];function Ce(n,t){try{let r=n[e.FK](f=>f[e.LM](t)>-e.U)[e.vM]();return n[e.LM](r)+zt}catch(r){return e.J}}function mt(n){return it[e.hK](n)?e.i:ct[e.hK](n)?e.V:e.U}function Et(n){return Ce(at,n)}function lt(n){return Ce(bt,n[e.mj]())}function yt(n){return Ce(jt,n)}function pt(n){return n[e.Pk](e.iK)[e.kK](e.U)[e.FK](t=>t)[e.vM]()[e.Pk](e.DK)[e.kK](-e.V)[e.EK](e.DK)[e.eM]()[e.Pk](e.h)[e.sK]((t,r)=>t+ie(r),e.J)%e.w+e.U}var Be=[];function xt(){return Be}function X(n){Be[e.kK](-e.U)[e.oj]()!==n&&Be[e.Hj](n)}var oe=typeof i<e.l?i[e.qr]:e.v,Ne=e.H,Te=e.n,ce=c[e.A]()[e.IK](e.lK)[e.kK](e.V),st=c[e.A]()[e.IK](e.lK)[e.kK](e.V),Fe=c[e.A]()[e.IK](e.lK)[e.kK](e.V),pK=c[e.A]()[e.IK](e.lK)[e.kK](e.V);function jn(n){oe[e.zK](Ne,jn),[mt(w[e.fr]),Et(q[e.uj][e.JK]),lt(new s),pt(q[e.nj][e.xb]),yt(w[e.yb]||w[e.Lb])][e.X](t=>{let r=a(c[e.A]()*e.LK,e.LK);N(()=>{let f=e.MK();f[e.aK]=n[e.XK],f[e.ob]=t,q[e.PK](f,e.fK),X(e.LE[e.CK](t))},r)})}function mn(n){oe[e.zK](Te,mn);let t=e.MK();t[e.aK]=n[e.XK];let{href:r}=q[e.nj],f=new q[e.Tj];f[e.Pj](e.gr,r),f[e.fj]=()=>{t[e.Nr]=f[e.bE](),q[e.PK](t,e.fK)},f[e.Rr]=()=>{t[e.Nr]=e.Fb,q[e.PK](t,e.fK)},f[e.xk]()}oe&&(oe[e.T](Ne,jn),oe[e.T](Te,mn));var ht=e.u,wt=e.z,V=e.a,ze=i[e.qr],T=[q],Jt=[],gt=()=>{};ze&&ze[e.Rr]&&(gt=ze[e.Rr]);try{let n=T[e.kK](-e.U)[e.oj]();for(;n&&n!==n[e.rk]&&n[e.rk][e.uj][e.JK];)T[e.Hj](n[e.rk]),n=n[e.rk]}catch(n){}T[e.X](n=>{n[e.Ub][e.PM][e.NM][e.aM]||(n[e.Ub][e.PM][e.NM][e.aM]=c[e.A]()[e.IK](e.lK)[e.kK](e.V));let t=n[e.Ub][e.PM][e.NM][e.aM];n[t]=n[t]||[];try{n[V]=n[V]||[]}catch(r){}});function Ut(n,t,r,f=e.J,u=e.J,o){let M;try{M=ze[e.Ek][e.Pk](e.iK)[e.V]}catch(d){}try{let d=q[e.Ub][e.PM][e.NM][e.aM]||V,b=q[d][e.FK](l=>l[e.Kk]===r&&l[e.bb])[e.vM](),p=e.MK();p[e.jk]=n,p[e.Mb]=t,p[e.Kk]=r,p[e.bb]=b?b[e.bb]:u,p[e.Eb]=M,p[e.Yb]=f,p[e.Sb]=o,o&&o[e.db]&&(p[e.db]=o[e.db]),Jt[e.Hj](p),T[e.X](l=>{let J=l[e.Ub][e.PM][e.NM][e.aM]||V;l[J][e.Hj](p);try{l[V][e.Hj](p)}catch(E){}})}catch(d){}}function Ae(n,t){let r=Pt();for(let f=e.J;f<r[e.SK];f++)if(r[f][e.Kk]===t&&r[f][e.jk]===n)return!e.J;return!e.U}function Pt(){let n=[];for(let t=e.J;t<T[e.SK];t++){let r=T[t][e.Ub][e.PM][e.NM][e.aM],f=T[t][r]||[];for(let u=e.J;u<f[e.SK];u++)n[e.FK](({format:o,zoneId:M})=>{let d=o===f[u][e.jk],b=M===f[u][e.Kk];return d&&b})[e.SK]>e.J||n[e.Hj](f[u])}try{for(let t=e.J;t<T[e.SK];t++){let r=T[t][V]||[];for(let f=e.J;f<r[e.SK];f++)n[e.FK](({format:u,zoneId:o})=>{let M=u===r[f][e.jk],d=o===r[f][e.Kk];return M&&d})[e.SK]>e.J||n[e.Hj](r[f])}}catch(t){}return n}function En(n,t){T[e.NK](r=>{let f=r[e.Ub][e.PM][e.NM][e.aM]||V;return(r[f]||[])[e.FK](u=>n[e.LM](u[e.Kk])>-e.U)})[e.sK]((r,f)=>r[e.CK](f),[])[e.X](r=>{try{r[e.Sb][e.ek](t)}catch(f){}})}var Y=e.MK();Y[e.U]=e.x,Y[e.d]=e.r,Y[e.Z]=e.K,Y[e.i]=e.j,Y[e.w]=e.k,Y[e.I]=e.M,Y[e.V]=e.b;var W=e.MK();W[e.U]=e.E,W[e.I]=e.Y,W[e.i]=e.S,W[e.V]=e.b;var k=e.MK();k[e.U]=e.g,k[e.V]=e.C,k[e.d]=e.G,k[e.Z]=e.G,k[e.i]=e.G;var m=5206246,F=5206245,xK=3,vt=1,_t=30,Ct=1,sK=true,hK=U[e.bK](g('eyJhZGJsb2NrIjp7fSwiZXhjbHVkZXMiOiIifQ==')),A=1,ln='Ly9tYWR1cmlyZC5jb20vNS81MjA2MjQ2',yn='bWFkdXJpcmQuY29t',Bt=2,Nt=1745077936*e.mr,Tt='V2@%YSU2B]G~',Ft='ycz',At='modgytb0oc0',pn='bmwhou8k',xn='aof',sn='m8jv72d2i65',Lt='_usaliod',Xt='_izrenyph',Zt=true,x=e.MK(),Dt=e.XM[e.Pk](e.h)[e.zj]()[e.EK](e.h);typeof q<e.l&&(x[e.UK]=q,typeof q[e.uj]<e.l&&(x[e.aj]=q[e.uj])),typeof i<e.l&&(x[e.dK]=i,x[e.ZK]=i[Dt]),typeof w<e.l&&(x[e.or]=w);function hn(){let{doc:n}=x;try{x[e.pK]=n[e.pK]}catch(t){let r=[][e.eb][e.Sk](n[e.qb](e.kk),f=>f[e.Ek]===e.Jj);x[e.pK]=r&&r[e.Zb][e.pK]}}hn(),x[e.s]=()=>{if(!q[e.rk])return e.v;try{let n=q[e.rk][e.Ub],t=n[e.pK](e.zM);return n[e.ib][e.Yk](t),t[e.JM]!==n[e.ib]?!e.U:(t[e.JM][e.gk](t),x[e.UK]=q[e.rk],x[e.dK]=x[e.UK][e.Ub],hn(),!e.J)}catch(n){return!e.U}},x[e.D]=()=>{try{return x[e.dK][e.qr][e.JM]!==x[e.dK][e.ib]?(x[e.Rb]=x[e.dK][e.qr][e.JM],(!x[e.Rb][e.xK][e.iM]||x[e.Rb][e.xK][e.iM]===e.Zk)&&(x[e.Rb][e.xK][e.iM]=e.mb),!e.J):!e.U}catch(n){return!e.U}};var ae=x;function Rt(n,t,r){let f=ae[e.dK][e.pK](e.kk);f[e.xK][e.Mk]=e.Xj,f[e.xK][e.JK]=e.Xj,f[e.xK][e.bk]=e.J,f[e.Ek]=e.Jj,(ae[e.dK][e.BM]||ae[e.ZK])[e.Yk](f);let u=f[e.FM][e.Pj][e.Sk](ae[e.UK],n,t,r);return f[e.JM][e.gk](f),u}var be,Yt=[];function Qt(){let n=[e.Ck,e.Gk,e.hk,e.vk,e.Ok,e.Wk,e.ck,e.pk],t=[e.uK,e.Bk,e.Qk,e.Vk,e.Hk],r=[e.nk,e.uk,e.zk,e.ak,e.Xk,e.Jk,e.Uk,e.dk,e.Zk,e.ik,e.wk,e.Ik],f=c[e.lk](c[e.A]()*n[e.SK]),u=n[f][e.sk](e.yj(e.Ck,e.qM),()=>{let o=c[e.lk](c[e.A]()*r[e.SK]);return r[o]})[e.sk](e.yj(e.Gk,e.qM),()=>{let o=c[e.lk](c[e.A]()*t[e.SK]),M=t[o],d=c[e.EE](e.LK,M[e.SK]),b=c[e.lk](c[e.A]()*d);return e.h[e.CK](M)[e.CK](b)[e.kK](M[e.SK]*-e.U)});return e.Dk[e.CK](be,e.iK)[e.CK](u,e.iK)}function Ht(){return e.h[e.CK](Qt()[e.kK](e.J,-e.U),e.wK)}function Ot(n){return n[e.Pk](e.iK)[e.kK](e.i)[e.EK](e.iK)[e.Pk](e.h)[e.sK]((t,r,f)=>{let u=c[e.EE](f+e.U,e.I);return t+r[e.Aj](e.J)*u},e.Ak)[e.IK](e.lK)}function Vt(){let n=i[e.pK](e.kk);return n[e.xK][e.Mk]=e.Xj,n[e.xK][e.JK]=e.Xj,n[e.xK][e.bk]=e.J,n}function wn(n){n&&(be=n,Gt())}function Gt(){be&&Yt[e.X](n=>n(be))}function St(n){try{let t=i[e.pK](e.cr);t[e.aK]=e.RM,(i[e.BM]||i[e.PM])[e.Yk](t),N(()=>{try{n(getComputedStyle(t,e.v)[e.wE]!==e.XE)}catch(r){n(!e.J)}},e.ok)}catch(t){n(!e.J)}}function It(){let n=Bt===e.U?e.Uj:e.dj,t=e.mM[e.CK](n,e.oM)[e.CK](Y[A]),r=e.MK();r[e.ek]=wn,r[e.tk]=xt,r[e.yk]=sn,r[e.Lk]=pn,r[e.Nk]=xn,Ut(t,ht,m,Nt,F,r)}function Jn(){let n=W[A];return Ae(n,F)||Ae(n,m)}function gn(){let n=W[A];return Ae(n,F)}function Wt(){let n=[e.Fk,e.qk,e.Rk,e.mk],t=i[e.pK](e.kk);t[e.xK][e.bk]=e.J,t[e.xK][e.JK]=e.Xj,t[e.xK][e.Mk]=e.Xj,t[e.Ek]=e.Jj;try{i[e.PM][e.Yk](t),n[e.X](r=>{try{q[r]}catch(f){delete q[r],q[r]=t[e.FM][r]}}),i[e.PM][e.gk](t)}catch(r){}}var Le=e.MK(),je=e.MK(),Xe=e.MK(),$t=e.U,ee=e.h,me=e.h;Ze();function Ze(){if(ee)return;let n=fe(()=>{if(gn()){H(n);return}if(me){try{let t=me[e.Pk](le)[e.FK](M=>!le[e.hK](M)),[r,f,u]=t;me=e.h,Xe[e.o]=f,Le[e.o]=r,je[e.o]=Nn(u,e.Tr),[Le,je,Xe][e.X](M=>{ye(M,st,$t)});let o=[_e(Le[e.t],je[e.t]),_e(Xe[e.t],je[e.t])][e.EK](e.DK);ee!==o&&(ee=o,En([m,F],ee))}catch(t){}H(n)}},e.ok)}function Un(){return ee}function kt(){ee=e.h}function Ee(n){n&&(me=n)}var y=e.MK();y[e.A]=e.h,y[e.e]=e.h,y[e.t]=e.h,y[e.y]=void e.J,y[e.L]=e.v,y[e.N]=_e(Ft,At);var Pn=new s,vn=!e.U;_n();function _n(){y[e.y]=!e.U,Pn=new s;let n=Mr(y,Fe),t=fe(()=>{if(y[e.t]!==e.h){if(H(t),q[e.zK](e.P,n),y[e.t]===e.Fb){y[e.y]=!e.J;return}try{if(C(y[e.e])[e.NE](e.J)[e.X](f=>{y[e.A]=e.h;let u=Cn(e.KY,e.uE);C(u)[e.NE](e.J)[e.X](o=>{y[e.A]+=v[e.Kj](Cn(e.ej,e.tj))})}),gn())return;let r=e.IE*e.Lj*e.mr;N(()=>{if(vn)return;let f=new s()[e.xM]()-Pn[e.xM]();y[e.L]+=f,_n(),Ze(),hr()},r)}catch(r){}y[e.y]=!e.J,y[e.t]=e.h}},e.ok);q[e.T](e.P,n)}function er(){return y[e.t]=y[e.t]*e.UM%e.Tk,y[e.t]}function Cn(n,t){return n+er()%(t-n)}function nr(n){return n[e.Pk](e.h)[e.sK]((t,r)=>(t<<e.Z)-t+r[e.Aj](e.J)&e.Tk,e.J)}function tr(){return[y[e.A],y[e.N]][e.EK](e.DK)}function De(){let n=[...e.dM],t=(c[e.A]()*e.ZM|e.J)+e.d;return[...C(t)][e.NK](r=>n[c[e.A]()*n[e.SK]|e.J])[e.EK](e.h)}function Re(){return y[e.y]}function rr(){vn=!e.J}var le=e.yj(e.YK,e.h),Kr=typeof i<e.l?i[e.qr]:e.v,fr=e.F,ur=e.q,or=e.R,qr=e.m;function ye(n,t,r){let f=n[e.o][e.Pk](le)[e.FK](o=>!le[e.hK](o)),u=e.J;return n[e.t]=f[u],n[e.SK]=f[e.SK],o=>{let M=o&&o[e.tM]&&o[e.tM][e.aK],d=o&&o[e.tM]&&o[e.tM][e.ob];if(M===t)for(;d--;)u+=r,u=u>=f[e.SK]?e.J:u,n[e.t]=f[u]}}function Mr(n,t){return r=>{let f=r&&r[e.tM]&&r[e.tM][e.aK],u=r&&r[e.tM]&&r[e.tM][e.Nr];if(f===t)try{let o=(n[e.L]?new s(n[e.L])[e.IK]():u[e.Pk](fr)[e.eb](p=>p[e.DM](e.FE)))[e.Pk](ur)[e.oj](),M=new s(o)[e.cE]()[e.Pk](or),d=M[e.vM](),b=M[e.vM]()[e.Pk](qr)[e.vM]();n[e.e]=a(b/Ct,e.LK)+e.U,n[e.L]=n[e.L]?n[e.L]:new s(o)[e.xM](),n[e.t]=nr(d+Tt)}catch(o){n[e.t]=e.Fb}}}function Bn(n,t){let r=new ut(t);r[e.XK]=n,Kr[e.fk](r)}function Nn(n,t){return C[e.TM](e.v,e.MK(e.SK,t))[e.NK]((r,f)=>Mt(n,f))[e.EK](e.AK)}var Tn=e.U,Ye=e.MK(),Fn=e.MK(),An=e.MK();Ye[e.o]=pn,q[e.T](e.P,ye(Ye,ce,Tn));var dr=Ye[e.SK]*e.Tr;Fn[e.o]=Nn(sn,dr),An[e.o]=xn,q[e.T](e.P,ye(Fn,ce,e.Tr)),q[e.T](e.P,ye(An,ce,Tn));var Ln=e.f,pe=e.xr,ir=e.W,cr=e.l;function Xn(n){let t=a(n,e.LK)[e.IK](e.lK),r=[Ln,t][e.EK](cr),f=[Ln,t][e.EK](ir);return[r,f]}function zr(n,t){let[r,f]=Xn(n);j[r]=e.J,j[f]=t}function ar(n){let[t,r]=Xn(n),f=a(j[t],e.LK)||e.J,u=j[r];return f>=e.i?(delete j[t],delete j[r],e.v):u?(j[t]=f+e.U,u):e.v}function br(n){let t=new s()[e.xM]();try{j[pe]=e.h[e.CK](t,e.gb)[e.CK](n)}catch(r){}}function jr(){try{if(!j[pe])return e.h;let[n,t]=j[pe][e.Pk](e.gb);return a(n,e.LK)+e.Zj<new s()[e.xM]()?(delete j[pe],e.h):t}catch(n){return e.h}}var mr=e.rr,Er=e.Kr,Qe=e.jr,lr=e.kr,Zn=e.Mr,He=e.br,xe=e.Er,se=e.Yr,Dn=e.Sr,yr=e.gr,pr=e.Cr,xr=e.Gr,Oe=e.hr,Rn=e.vr,he=!e.U;function sr(){return e.eK[e.CK](m,e.tK)}function ne(){return Un()}function hr(){let n=e.MK(),t=fe(()=>{Re()&&(H(t),Ve())},e.ok);n[e.aK]=Fe,q[e.PK](n,e.fK)}function Ve(n){let t=new q[e.Tj];t[e.Pj](yr,e.Dk[e.CK](tr())),n&&t[e.rM](Qe,lr),t[e.rM](xr,k[A]),t[e.fj]=()=>{if(t[e.lb]===e.wb){let r=t[e.bE]()[e.VE]()[e.Pk](e.yj(e.HE,e.h)),f=e.MK();r[e.X](u=>{let o=u[e.Pk](e.oE),M=o[e.vM]()[e.eM](),d=o[e.EK](e.oE);f[M]=d}),f[Oe]?(he=!e.J,Ee(f[Oe]),n&&br(f[Oe])):f[Rn]&&Ee(f[Rn]),n||Ze()}},t[e.Rr]=()=>{n&&(he=!e.J,Ee(e.YE))},kt(),t[e.xk]()}function Yn(n){return new O((t,r)=>{let f=new s()[e.xM](),u=fe(()=>{let o=Un();o?(H(u),o===e.tE&&r(new I(e.tr)),he&&(n||rr(),t(o)),t()):f+e.lE<new s()[e.xM]()&&(H(u),r(new I(e.TE)))},e.ok)})}function wr(){let n=jr();if(n)he=!e.J,Ee(n);else{let t=fe(()=>{Re()&&(H(t),Ve(!e.J))},e.ok)}}var Qn=e.Or,wK=e.gK[e.CK](m,e.GK),Ge=e.Wr,JK=vt*e.Pr,gK=_t*e.mr;q[Ge]||(q[Ge]=e.MK());function Jr(n){try{let t=e.h[e.CK](Qn)[e.CK](n),r=an[t]||j[t];if(r)return new s()[e.xM]()>a(r,e.LK)}catch(t){}return!e.J}function Hn(n){let t=new s()[e.xM]()+e.Zj,r=e.h[e.CK](Qn)[e.CK](n);q[Ge][n]=!e.J;try{j[r]=t}catch(f){}try{an[r]=t}catch(f){}}var Q=w[e.fr],gr=Q[e.yK](e.yj(e.KM,e.h))||[],Ur=Q[e.yK](e.yj(e.jM,e.h))||[],On=a(gr[e.U],e.LK)||a(Ur[e.U],e.LK),we=e.yj(e.ij,e.h)[e.hK](Q),Pr=e.yj(e.rK,e.KK)[e.hK](Q),Vn=we||Pr,vr=e.yj(e.wj,e.h)[e.hK](Q),_r=e.yj(e.Ij,e.lj)[e.hK](Q),Cr=e.yj(e.kM,e.KK)[e.hK](Q)&&e.yj(e.MM,e.KK)[e.hK](Q),P,te,Se=!e.U,Gn=!e.U,Sn=g(yn),Br=[e.vK,e.H,e.OK,e.WK,e.cK];function Nr(n,t){let r=!Cr&&On<e.bM;n[e.T]?(we||(On&&!Vn?n[e.T](e.vK,t,!e.J):(_r||vr)&&!Vn?n[e.T](e.H,t,!e.J):(n[e.T](e.H,t,!e.J),n[e.T](e.OK,t,!e.J))),r?we?n[e.T](e.WK,t,!e.J):n[e.T](e.cK,t,!e.J):we&&n[e.T](e.H,t,!e.J)):i[e.sj]&&n[e.sj](e.E,t)}function Ie(n){!Jr(n)||Gn||(Gn=n===m,P=i[e.pK](e.cr),P[e.xK][e.iM]=e.EM,P[e.xK][e.rk]=e.J,P[e.xK][e.wM]=e.J,P[e.xK][e.IM]=e.J,P[e.xK][e.lM]=e.J,P[e.xK][e.ur]=e.Tk,P[e.xK][e.sM]=e.YM,te=t=>{if(Se)return;t[e.SE](),t[e.gE](),qe();let r=Rt(e.Dk[e.CK](Sn,e.nE)[e.CK](n,e.pE));r&&n===F?Hn(n):r&&n===m&&N(()=>{r[e.sE]||Hn(n)},e.mr)},Nr(P,te),i[e.PM][e.Yk](P),Se=!e.U)}function qe(){try{Br[e.X](n=>{q[e.zK](n,te,!e.J),q[e.zK](n,te,!e.U)}),P&&i[e.PM][e.gk](P),te=void e.J}catch(n){}Se=!e.J}function We(){return te===void e.J}function In(n){Sn=n}var Tr=e.cr,Wn=i[e.pK](Tr),Fr=e.pr,Ar=e.Br,Lr=e.Qr,Xr=e.Vr,Zr=e.Hr,Dr=e.nr;Wn[e.xK][e.ur]=Fr,Wn[e.xK][e.zr]=Ar;function Rr(n){let t=C[e.KE][e.kK][e.Sk](i[e.Tb])[e.FK](r=>r[e.xb]===n)[e.oj]()[e.Dj];return(t[e.J][e.fM][e.DM](e.AM)?t[e.J][e.xK][e.SM]:t[e.V][e.xK][e.SM])[e.kK](e.U,-e.U)}function $e(n){return Kt(g(n)[e.Pk](e.h)[e.NK](function(t){return e.jE+(e.Bk+t[e.Aj](e.J)[e.IK](e.uE))[e.kK](-e.V)})[e.EK](e.h))}function ke(n){let t=g(n),r=new rt(t[e.SK]);return new ve(r)[e.NK]((f,u)=>t[e.Aj](u))}function Yr(n,t){return new O((r,f)=>{let u=i[e.pK](Lr);u[e.xb]=n,u[e.Pb]=Xr,u[e.pM]=Dr,u[e.fb]=Zr,i[e.ib][e.xE](u,i[e.ib][e.kE]),u[e.fj]=()=>{try{let o=Rr(u[e.xb]);u[e.JM][e.gk](u),r(t===xe?ke(o):$e(o))}catch(o){f()}},u[e.Rr]=()=>{u[e.JM][e.gk](u),f()}})}function Qr(n,t){return new O((r,f)=>{let u=new ot;u[e.fb]=e.tb,u[e.Ek]=n,u[e.fj]=()=>{let o=i[e.pK](e.JE);o[e.Mk]=u[e.Mk],o[e.JK]=u[e.JK];let M=o[e.UE](e.dE);M[e.QE](u,e.J,e.J);let{data:d}=M[e.ZE](e.J,e.J,u[e.Mk],u[e.JK]),b=d[e.kK](e.J,e.zE)[e.FK]((E,Z)=>(Z+e.U)%e.d)[e.zj]()[e.sK]((E,Z,Ke)=>E+Z*c[e.EE](e.PE,Ke),e.J),p=[];for(let E=e.zE;E<d[e.SK];E++)if((E+e.U)%e.d){let Z=d[E];(t===xe||Z>=e.qE)&&p[e.Hj](v[e.Kj](Z))}let l=L(p[e.EK](e.h)[e.yE](e.J,b)),J=t===xe?ke(l):$e(l);return r(J)},u[e.Rr]=()=>f()})}function Hr(n,t,r=He,f=se,u=e.MK()){return new O((o,M)=>{let d=new q[e.Tj];if(d[e.Pj](f,n),d[e.nM]=r,d[e.rE]=!e.J,d[e.rM](mr,L(B(t))),d[e.fj]=()=>{let b=e.MK();b[e.lb]=d[e.lb],b[e.Nr]=r===He?U[e.BE](d[e.Nr]):d[e.Nr],[e.wb,e.RE][e.LM](d[e.lb])>=e.J?o(b):M(new I(e.rY[e.CK](d[e.lb],e.oM)[e.CK](d[e.fE],e.mE)[e.CK](t)))},d[e.Rr]=()=>{M(new I(e.rY[e.CK](d[e.lb],e.oM)[e.CK](d[e.fE],e.mE)[e.CK](t)))},f===Dn){let b=typeof u==e.GE?U[e.BE](u):u;d[e.rM](Qe,Zn),d[e.xk](b)}else d[e.xk]()})}function Or(n,t,r=He,f=se,u=e.MK()){return new O((o,M)=>{let d=Ot(n),b=Vt(),p=!e.U,l,J,E=()=>{try{b[e.JM][e.gk](b),q[e.zK](e.P,Z),p||M(new I(e.xY))}catch(Ke){}};function Z(Ke){let de=ue[e.rb](Ke[e.tM])[e.oj]();if(de===d)if(cn(J),Ke[e.tM][de]===e.v){let D=e.MK();D[de]=e.MK(e.DE,e.AE,e.cM,L(B(t)),e.QM,f,e.BM,typeof u==e.GE?U[e.BE](u):u),f===Dn&&(D[de][e.eE]=U[e.BE](e.MK(e.jr,Zn))),b[e.FM][e.PK](D,e.fK)}else{p=!e.J,E(),cn(l);let D=e.MK(),dn=U[e.bK](g(Ke[e.tM][de]));D[e.lb]=dn[e.iE],D[e.Nr]=r===xe?ke(dn[e.BM]):$e(dn[e.BM]),[e.wb,e.RE][e.LM](D[e.lb])>=e.J?o(D):M(new I(e.rY[e.CK](D[e.lb],e.mE)[e.CK](t)))}}q[e.T](e.P,Z),b[e.Ek]=n,(i[e.BM]||i[e.PM])[e.Yk](b),J=N(E,e.ME),l=N(E,e.Fr)})}function Je(n){try{return n[e.Pk](e.iK)[e.V][e.Pk](e.DK)[e.kK](-e.V)[e.EK](e.DK)[e.eM]()}catch(t){return e.h}}var Me=e.ar,Vr=e.Xr,Gr=e.O,Sr=e.l,Ir=e.Jr,G=e.MK();G[e.Ur]=e.O,G[e.dr]=e.W,G[e.Zr]=e.c,G[e.ir]=e.p,G[e.wr]=e.B,G[e.Ir]=e.Q;function $n(n,t){let r=G[t]||Sr,f=a(n,e.LK)[e.IK](e.lK),u=[Me,f][e.EK](r),o=[Me,f,Vr][e.EK](r),M=[Me,f,Gr][e.EK](r);return[u,o,M]}function Wr(){let n=j[Me];if(n)return n;let t=c[e.A]()[e.IK](e.lK)[e.kK](e.V);return j[Me]=t,t}function $r(n){let t=e.gM[e.CK](ne(),e.CM),r=ue[e.rb](n)[e.NK](u=>{let o=ft(n[u]);return[u,o][e.EK](e.CE)})[e.EK](e.GM),f=new q[e.Tj];f[e.Pj](e.Sr,t,!e.J),f[e.rM](Qe,pr),f[e.xk](r)}function ge(n,t){let[r,f,u]=$n(n,t),o=a(j[u],e.LK)||e.J;j[u]=o+e.U,j[r]=new s()[e.xM](),j[f]=e.h}function Ue(n,t,r){let[f,u,o]=$n(n,t);if(j[f]&&!j[u]){let M=a(j[o],e.LK)||e.J,d=a(j[f],e.LK),b=new s()[e.xM](),p=b-d,{referrer:l}=i,J=q[e.nj][e.xb];j[u]=b,j[o]=e.J;let E=e.MK(e.Cb,n,e.Gb,l,e.hb,p,e.vb,r,e.Ob,b,e.Wb,Wr(),e.cb,J,e.pb,d,e.Bb,M,e.Qb,w[e.fr],e.Vb,q[e.uj][e.Mk],e.Hb,q[e.uj][e.JK],e.QM,t||Ir,e.nb,new s()[e.mj](),e.ub,Je(r),e.zb,Je(l),e.ab,Je(J),e.Xb,w[e.yb]||w[e.Lb]);$r(E)}}var kr=e.yj(e.BK,e.KK),eK=e.yj(e.QK),nK=e.yj(e.VK),tK=e.lr,kn=[tK,m[e.IK](e.lK)][e.EK](e.h),re=e.MK();re[e.W]=oK,re[e.B]=qK,re[e.Q]=nn,re[e.Xr]=et;var rK=[nn,et];function KK(n){return kr[e.hK](n)?n:eK[e.hK](n)?e.hM[e.CK](n):nK[e.hK](n)?e.Dk[e.CK](q[e.nj][e.Ib])[e.CK](n):q[e.nj][e.xb][e.Pk](e.iK)[e.kK](e.J,-e.U)[e.CK](n)[e.EK](e.iK)}function fK(){let n=[j[kn]][e.CK](ue[e.rb](re));return n[e.FK]((t,r)=>t&&n[e.LM](t)===r)}function uK(){return[...rK]}function en(n,t,r,f,u){let o=n[e.vM]();return f&&f!==se?o?o(t,r,f,u)[e.xj](M=>M)[e.RK](()=>en(n,t,r,f,u)):nn(t,r,f,u):o?re[o](t,r||e.Nb)[e.xj](M=>(j[kn]=o,M))[e.RK](()=>en(n,t,r,f,u)):new O((M,d)=>d())}function oK(n,t){X(e.qK);let r=e.ir,f=De(),u=e.Dk[e.CK](ne(),e.iK)[e.CK](f,e.Kb)[e.CK](L(n));return Yr(u,t)[e.xj](o=>(ge(m,r),o))[e.RK](o=>{throw Ue(m,r,u),o})}function qK(n,t){X(e.mK);let r=e.wr,f=De(),u=e.Dk[e.CK](ne(),e.iK)[e.CK](f,e.jb)[e.CK](L(n));return Qr(u,t)[e.xj](o=>(ge(m,r),o))[e.RK](o=>{throw Ue(m,r,u),o})}function nn(n,t,r,f){X(e.oK);let u=e.Ir,o=De(),M=e.Dk[e.CK](ne(),e.iK)[e.CK](o,e.OM);return Hr(M,n,t,r,f)[e.xj](d=>(ge(m,u),d))[e.RK](d=>{throw Ue(m,u,M),d})}function et(n,t,r,f){X(e.WM),wn(ne());let u=e.TK,o=Ht();return Or(o,n,t,r,f)[e.xj](M=>(ge(m,u),M))[e.RK](M=>{throw Ue(m,u,o),M})}function tn(n,t,r,f){n=KK(n),r=r?r[e.kb]():e.h;let u=r&&r!==se?uK():fK();return X(e.h[e.CK](r,e.m)[e.CK](n)),en(u,n,t,r,f)[e.xj](o=>o&&o[e.Nr]?o:e.MK(e.lb,e.wb,e.Nr,o))}var rn=e.sr,Kn=e.Dr,MK=e.Ar,dK=e.er,iK=e.tr,cK=e.yr,zK=e.Lr,aK=e.Nr,fn,un;function on(n){let t=n&&n[e.tM]&&n[e.tM][e.cM],r=n&&n[e.tM]&&n[e.tM][e.pM],f=n&&n[e.tM]&&n[e.tM][e.BM],u=n&&n[e.tM]&&n[e.tM][e.QM],o=n&&n[e.tM]&&n[e.tM][e.VM],M=n&&n[e.tM]&&n[e.tM][e.HM],d=n&&n[e.tM]&&n[e.tM][e.nM],b=n&&n[e.tM]&&n[e.tM][e.uM],p=b===m||b===F,l=e.MK();o!==rn&&o!==Kn||(r===MK?(l[e.pM]=dK,l[e.sb]=A,l[e.uM]=m,l[e.Db]=F):r===iK&&M&&(!b||p)&&(l[e.pM]=cK,l[e.HM]=M,tn(t,d,u,f)[e.xj](J=>{let E=e.MK();E[e.pM]=aK,E[e.cM]=t,E[e.HM]=M,E[e.tM]=J,qn(o,E)})[e.RK](J=>{let E=e.MK();E[e.pM]=zK,E[e.cM]=t,E[e.HM]=M,E[e.Fb]=J&&J[e.P],qn(o,E)})),l[e.pM]&&qn(o,l))}function qn(n,t){switch(t[e.VM]=n,n){case Kn:un[e.PK](t);break;case rn:default:fn[e.PK](t);break}q[e.PK](t,e.fK)}function bK(){try{fn=new zn(rn),fn[e.T](e.P,on),un=new zn(Kn),un[e.T](e.P,on)}catch(n){}q[e.T](e.P,on)}var nt=i[e.qr];function jK(n,t,r){return new O((f,u)=>{X(e.Ab);let o;if([e.d,e.i,e.Z][e.LM](A)>-e.U){o=i[e.pK](e.zM);let M=i[e.hE](n);o[e.fj]=r,o[e.Yk](M),o[e.vE](e.OE,m),o[e.vE](e.WE,Je(g(ln)));try{nt[e.JM][e.xE](o,nt)}catch(d){(i[e.BM]||i[e.PM])[e.Yk](o)}}else R(n);N(()=>(o!==void e.J&&o[e.JM][e.gk](o),Jn(t)?(X(e.aE),f()):u()))})}function mK(n,t){let r=n===e.U?sr():g(ln);return tn(r,e.v,e.v,e.v)[e.xj](f=>(f=f&&e.Nr in f?f[e.Nr]:f,f&&zr(m,f),f))[e.RK](()=>ar(m))[e.xj](f=>{f&&jK(f,n,t)})}It();function Pe(n){return Jn()?e.v:(X(e.yM),Wt(),tt(n))}function tt(n){return A===e.U&&We()&&Ie(m),Re()?(Ve(),q[wt]=tn,Yn()[e.xj](t=>{if(t&&A===e.U){let r=new q[e.Tj];r[e.Pj](e.Yr,e.Dk[e.CK](t)),r[e.rM](Er,m),In(t),r[e.fj]=()=>{let f=i[e.pK](e.zM),u=i[e.hE](r[e.Nr][e.sk](e.yj(e.kY,e.qM),o()));f[e.fj]=n;function o(){let M=e.jY[e.CK](c[e.A]()[e.IK](e.lK)[e.kK](e.V));return q[M]=q[e.Ub],M}f[e.Yk](u),(i[e.BM]||i[e.PM])[e.Yk](f),N(()=>{f!==void e.J&&(f[e.JM][e.gk](f),qe())})},r[e.xk]();return}mK(A,n)[e.xj](()=>{En([m,F],ne())})})):N(tt,e.ok)}function EK(){We()&&Ie(F),St(n=>{try{return n&&We()&&(qe(),Ie(m)),wr(),Yn(!e.J)[e.xj](t=>{Mn(n,t)})[e.RK](()=>{Mn(n)})}catch(t){return Mn(n)}})}function Mn(n,t){let r=t||g(yn);In(r);let f=i[e.pK](e.zM);f[e.Rr]=()=>{qe(),Pe()},f[e.fj]=()=>{qe()},f[e.Ek]=e.gM[e.CK](r,e.Jb)[e.CK](n?m:F),(i[e.BM]||i[e.PM])[e.Yk](f)}q[Lt]=Pe,q[Xt]=Pe,N(Pe,e.Fr),Bn(Fe,Te),Bn(ce,Ne),bK(),Zt&&A===e.U&&EK();try{$}catch(n){}})()})(ue.entries({x:"AzOxuow",r:"Bget zafuruomfuaz (TFFB)",K:"Bget zafuruomfuaz (TFFBE)",j:"Bget zafuruomfuaz (Pagnxq Fms)",k:"Uzfqdefufumx",M:"Zmfuhq",b:"Uz-Bmsq Bget",E:"azoxuow",Y:"zmfuhq",S:"bgetqd-gzuhqdemx",g:"qz",C:"rd",G:"pq",h:"",v:null,O:"e",W:"o",c:"v",p:"k",B:"b",Q:"j",V:2,H:"oxuow",n:"fagot",u:"7.0.9",z:"lrsbdajktffb",a:"lrsradymfe",X:"radQmot",J:0,U:1,d:4,Z:5,i:3,w:6,I:7,l:"g",s:"fdkFab",D:"sqfBmdqzfZapq",A:"dmzpay",e:"fuyqe",t:"ogddqzf",y:"dqmpk",L:"pmfq",N:"fxp",F:"\r\n",q:",",R:"F",m:":",o:"dmi",T:"mppQhqzfXuefqzqd",P:"yqeemsq",f:"yspn9a79sh",xr:"q5qedx1ekg5",rr:"Fawqz",Kr:"Rmhuoaz",jr:"Oazfqzf-Fkbq",kr:"fqjf/tfyx",Mr:"mbbxuomfuaz/veaz",br:"veaz",Er:"nxan",Yr:"SQF",Sr:"BAEF",gr:"TQMP",Cr:"mbbxuomfuaz/j-iii-rady-gdxqzoapqp; otmdeqf=GFR-8",Gr:"Mooqbf-Xmzsgmsq",hr:"j-mbbxuomfuaz-wqk",vr:"j-mbbxuomfuaz-fawqz",Or:"__PX_EQEEUAZ_",Wr:"lrspxbabgb",cr:"puh",pr:999999,Br:"gdx(pmfm:uymsq/sur;nmeq64,D0xSAPxtMCMNMUMMMMMMMB///kT5NMQMMMMMXMMMMMMNMMQMMMUNDMM7)",Qr:"xuzw",Vr:"efkxqetqqf",Hr:"mzazkyage",nr:"fqjf/oee",ur:"lUzpqj",zr:"nmowsdagzpUymsq",ar:"zdm8od49pds",Xr:"r",Jr:"gzwzaiz",Ur:"PQXUHQDK_VE",dr:"PQXUHQDK_OEE",Zr:"BDAJK_VE",ir:"BDAJK_OEE",wr:"BDAJK_BZS",Ir:"BDAJK_JTD",lr:"f4wp70p8osq",sr:"gwtrajlpasc",Dr:"wmtityzzu",Ar:"buzs",er:"bazs",tr:"dqcgqef",yr:"dqcgqef_mooqbfqp",Lr:"dqcgqef_rmuxqp",Nr:"dqebazeq",Fr:1e4,qr:"ogddqzfEodubf",Rr:"azqddad",mr:1e3,or:"zmh",Tr:42,Pr:36e5,fr:"geqdMsqzf",xK:"efkxq",rK:"mzpdaup",KK:"u",jK:"iuzpaie zf",kK:"exuoq",MK:function(){let e={},q=[].slice.call(arguments);for(let i=0;i<q.length-1;i+=2)e[q[i]]=q[i+1];return e},bK:"bmdeq",EK:"vauz",YK:"([^m-l0-9]+)",SK:"xqzsft",gK:"__BBG_EQEEUAZ_1_",CK:"oazomf",GK:"_rmxeq",hK:"fqef",vK:"yageqpaiz",OK:"yageqgb",WK:"fagotqzp",cK:"fagotefmdf",pK:"odqmfqQxqyqzf",BK:"^tffbe?:",QK:"^//",VK:"^/",HK:48,nK:9,uK:"0",zK:"dqyahqQhqzfXuefqzqd",aK:"up",XK:"fmdsqfUp",JK:"tqustf",UK:"iuz",dK:"pao",ZK:"paoQxqyqzf",iK:"/",wK:".tfyx",IK:"faEfduzs",lK:36,sK:"dqpgoq",DK:".",AK:"!",eK:"//vayfuzsu.zqf/mbg.btb?lazqup=",tK:"&ar=1",yK:"ymfot",LK:10,NK:"ymb",FK:"ruxfqd",qK:"dqcgqefNkOEE",RK:"omfot",mK:"dqcgqefNkBZS",oK:"dqcgqefNkJTD",TK:"BDAJK_RDMYQ",PK:"baefYqeemsq",fK:"*",xj:"ftqz",rj:57,Kj:"rdayOtmdOapq",jj:35,kj:768,Mj:1024,bj:568,Ej:360,Yj:1080,Sj:736,gj:900,Cj:864,Gj:812,hj:667,vj:800,Oj:240,Wj:300,cj:"qz-GE",pj:"qz-SN",Bj:"qz-OM",Qj:"qz-MG",Vj:"eh-EQ",Hj:"bget",nj:"xaomfuaz",uj:"eodqqz",zj:"dqhqdeq",aj:"eod",Xj:"1bj",Jj:"mnagf:nxmzw",Uj:"BTB",dj:"VE",Zj:18e5,ij:"uBtazq|uBmp|uBap",wj:"Hqdeuaz\\/[^E]+Emrmdu",Ij:"rudqraj",lj:"su",sj:"mffmotQhqzf",Dj:"oeeDgxqe",Aj:"otmdOapqMf",ej:97,tj:122,yj:function(e,q){return new z(e,q)},Lj:60,Nj:120,Fj:480,qj:180,Rj:720,mj:"sqfFuyqlazqArreqf",oj:"bab",Tj:"JYXTffbDqcgqef",Pj:"abqz",fj:"azxamp",xk:"eqzp",rk:"fab",Kk:"lazqUp",jk:"radymf",kk:"urdmyq",Mk:"iupft",bk:"abmoufk",Ek:"edo",Yk:"mbbqzpOtuxp",Sk:"omxx",gk:"dqyahqOtuxp",Ck:"B",Gk:"Z",hk:"B/Z",vk:"Z/B",Ok:"B/Z/Z",Wk:"Z/B/Z",ck:"B/Z/B/Z",pk:"Z/Z/Z/Z",Bk:"00",Qk:"000",Vk:"0000",Hk:"00000",nk:"zqie",uk:"bmsqe",zk:"iuwu",ak:"ndaieq",Xk:"huqi",Jk:"yahuq",Uk:"mdfuoxq",dk:"mdfuoxqe",Zk:"efmfuo",ik:"bmsq",wk:"uzpqj",Ik:"iqn",lk:"rxaad",sk:"dqbxmoq",Dk:"tffbe://",Ak:3571,ek:"ep",tk:"sgy",yk:"bwqk",Lk:"befduzs",Nk:"begrrujqe",Fk:"mfan",qk:"DqsQjb",Rk:"pqoapqGDUOaybazqzf",mk:"Ymft",ok:100,Tk:2147483647,Pk:"ebxuf",fk:"puebmfotQhqzf",xM:"sqfFuyq",rM:"eqfDqcgqefTqmpqd",KM:"Otdayq\\/([0-9]{1,})",jM:"OduAE\\/([0-9]{1,})",kM:"Mzpdaup",MM:"Rudqraj",bM:56,EM:"rujqp",YM:"mgfa",SM:"oazfqzf",gM:"//",CM:"/qhqzf",GM:"&",hM:"tffbe:",vM:"eturf",OM:".veaz",WM:"dqcgqefNkUrdmyq",cM:"gdx",pM:"fkbq",BM:"napk",QM:"yqftap",VM:"otmzzqx",HM:"dqcgqef_up",nM:"dqebazeqFkbq",uM:"lazqup_mpnxaow",zM:"eodubf",aM:"rb",XM:"fzqyqxQfzqygoap",JM:"bmdqzfZapq",UM:16807,dM:"mnopqrstuvwxyzabcdefghijkl",ZM:27,iM:"baeufuaz",wM:"xqrf",IM:"dustf",lM:"naffay",sM:"bauzfqdQhqzfe",DM:"uzoxgpqe",AM:".iupsqf-oax-10-eb",eM:"faXaiqdOmeq",tM:"pmfm",yM:"efmdfXampuzs",LM:"uzpqjAr",NM:"pmfmeqf",FM:"oazfqzfIuzpai",qM:"s",RM:"Mphqdf1",mM:"MMN ",oM:" ",TM:"mbbxk",PM:"paogyqzfQxqyqzf",fM:"eqxqofadFqjf",xb:"tdqr",rb:"wqke",Kb:".oee?",jb:".bzs?",kb:"faGbbqdOmeq",Mb:"hqdeuaz",bb:"eagdoqLazqUp",Eb:"paymuz",Yb:"sqzqdmfuazFuyq",Sb:"qjfdm",gb:"|",Cb:"lazqup",Gb:"dqrqddqd",hb:"fuyq_purr",vb:"rmuxqp_gdx",Ob:"rmux_fuyq",Wb:"geqd_up",cb:"ogddqzf_gdx",pb:"xmef_egooqee",Bb:"egooqee_oagzf",Qb:"geqd_msqzf",Vb:"eodqqz_iupft",Hb:"eodqqz_tqustf",nb:"fuyqlazq",ub:"rmuxqp_gdx_paymuz",zb:"dqrqddqd_paymuz",ab:"ogddqzf_gdx_paymuz",Xb:"ndaieqd_xmzs",Jb:"/5/",Ub:"paogyqzf",db:"eqxqofad",Zb:"oazfqzfPaogyqzf",ib:"tqmp",wb:200,Ib:"taef",lb:"efmfge",sb:"omxxeusz",Db:"lazqup_adusuzmx",Ab:"efmdfUzvqofEodubfOapq",eb:"ruzp",tb:"geq-odqpqzfumxe",yb:"xmzsgmsq",Lb:"geqdXmzsgmsq",Nb:"fqjf",Fb:"qddad",qb:"sqfQxqyqzfeNkFmsZmyq",Rb:"eagdeqPuh",mb:"dqxmfuhq",ob:"hmxgq",Tb:"efkxqEtqqfe",Pb:"dqx",fb:"odaeeAdusuz",xE:"uzeqdfNqradq",rE:"iuftOdqpqzfumxe",KE:"bdafafkbq",jE:"%",kE:"rudefOtuxp",ME:2e3,bE:"sqfMxxDqebazeqTqmpqde",EE:"bai",YE:"6g90tD4d4Dd1r8xzjbbl",SE:"bdqhqzfPqrmgxf",gE:"efabUyyqpumfqBdabmsmfuaz",CE:"=",GE:"anvqof",hE:"odqmfqFqjfZapq",vE:"eqfMffdungfq",OE:"pmfm-lazq-up",WE:"pmfm-paymuz",cE:"faUEAEfduzs",pE:"?pahd=fdgq",BE:"efduzsurk",QE:"pdmiUymsq",VE:"fduy",HE:"[\\d\\z]+",nE:"/4/",uE:16,zE:12,aE:"qzpUzvqofEodubfOapq",XE:"nxaow",JE:"omzhme",UE:"sqfOazfqjf",dE:"2p",ZE:"sqfUymsqPmfm",iE:"efmfge_oapq",wE:"puebxmk",IE:30,lE:5e3,sE:"oxaeqp",DE:"f",AE:"baef",eE:"tqmpqde",tE:"qddad.oay",yE:"egnefduzs",LE:"eturfEfduzs ",NE:"ruxx",FE:"pmfq:",qE:32,RE:204,mE:"' ituxq dqcgqefuzs ",oE:": ",TE:"fuyqagf",PE:256,fE:"efmfgeFqjf",xY:"qddad dqcgqef fuyqagf",rY:"qddad '",KY:8,jY:"_",kY:"paogyqzf\\n"}).reduce((e,q)=>(ue.defineProperty(e,q[0],{get:()=>typeof q[1]!="string"?q[1]:q[1].split("").map(i=>{let w=i.charCodeAt(0);return w>=65&&w<=90?v.fromCharCode((w-65+26-12)%26+65):w>=97&&w<=122?v.fromCharCode((w-97+26-12)%26+97):i}).join("")}),e),{}),window,qt,h)});})();</script><div id="Advert1"></div>
1
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'935e55548d6d4285',t:'MTc0NTU4OTI3Ny4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script><iframe height="1" width="1" style="position: absolute; top: 0px; left: 0px; border: none; visibility: hidden;"></iframe><script defer="" src="https://static.cloudflareinsights.com/beacon.min.js/vcd15cbe7772f49c399c6a5babf22c1241717689176015" integrity="sha512-ZpsOmlRQV6y907TI0dKBHq9Md29nnaEIPlkf84rnaERnq6zvWvPUqr2ft8M1aS28oN72PdrCzSjY4U6VaAw1EQ==" data-cf-beacon="{&quot;rayId&quot;:&quot;935e55548d6d4285&quot;,&quot;version&quot;:&quot;2025.4.0-1-g37f21b1&quot;,&quot;r&quot;:1,&quot;token&quot;:&quot;cc5357c892364dcdb6e763e3e3fab383&quot;,&quot;serverTiming&quot;:{&quot;name&quot;:{&quot;cfExtPri&quot;:true,&quot;cfL4&quot;:true,&quot;cfSpeedBrain&quot;:true,&quot;cfCacheStatus&quot;:true}}}" crossorigin="anonymous"></script>



<div class="seo-links" style="display: none; text-align: center; opacity: 0; font-size: 10px; padding: 15px; margin-top: 10px; position: absolute; visibility: hidden;">
    <div class="seo-category">
        <div class="seo-title" style="margin-bottom: 5px; font-weight: bold;">Popüler Animeler</div>
        <a target="_blank" rel="dofollow" href="https://onepieceizle.com.tr/one-piece" title="one piece izle">one piece izle</a>
        <a target="_blank" rel="dofollow" href="/naruto" title="naruto izle">naruto izle</a>
        <a target="_blank" rel="dofollow" href="/shingeki-no-kyojin" title="attack on titan izle">attack on titan izle</a>
        <a target="_blank" rel="dofollow" href="/death-note" title="death note tüm bölümler">death note tüm bölümler</a>
        <a target="_blank" rel="dofollow" href="/boku-no-hero-academia" title="my hero academia türkçe altyazılı">my hero academia türkçe altyazılı</a>
    </div>

            <a target="_blank" rel="dofollow" href="https://anizm.net/" title="anizm - türkçe anime izle">anizm - türkçe anime izle</a>
<a target="_blank" rel="dofollow" href="https://anizle.com/" title="anime izle">anime izle</a>
    

    <div class="seo-category" style="margin-top: 10px;"><div class="seo-title" style="margin-bottom: 5px; font-weight: bold;">İlgili Siteler</div><a style="margin: 0 5px;" target="_blank" href="https://fpltoif.com/" title="deneme bonusu veren siteler">deneme bonusu veren siteler</a>
<a style="margin: 0 5px;" target="_blank" href="https://showen4cars.com/" title="deneme bonus veren siteler">deneme bonus veren siteler</a>
<a style="margin: 0 5px;" target="_blank" href="https://www.dovecoteorlando.com/" title="deneme bonus">deneme bonus</a>
<a style="margin: 0 5px;" target="_blank" href="https://www.chocquibtown.com/" title="deneme bonusu veren bahis siteleri">deneme bonusu veren bahis siteleri</a>
<a style="margin: 0 5px;" target="_blank" href="https://www.goldengateparkbikerental.com/" title="deneme bonusu siteleri">deneme bonusu siteleri</a>
<a style="margin: 0 5px;" target="_blank" href="https://lwmainstreet.com/" title="Güvenilir Bahis Siteleri">Güvenilir Bahis Siteleri</a>
<a style="margin: 0 5px;" target="_blank" href="https://oldfashionhamburgers.com/" title="Casino Siteleri">Casino Siteleri</a>
<a style="margin: 0 5px;" target="_blank" href="https://theluxurylabelnashville.com/" title="Canlı casino siteleri">Canlı casino siteleri</a>
<a style="margin: 0 5px;" target="_blank" href="https://www.devyapi-is.org/" title="casino siteleri">casino siteleri</a>
<a style="margin: 0 5px;" target="_blank" href="https://www.empmamanyc.com" title="casino siteleri">casino siteleri</a>
<a style="margin: 0 5px;" target="_blank" href="https://www.currently.app/" title="onwin">onwin</a>
<a style="margin: 0 5px;" target="_blank" href="https://sosyalevin.com/instagram-takipci-hilesi/" title="instagram takipçi hilesi">instagram takipçi hilesi</a>
<a style="margin: 0 5px;" target="_blank" href="https://bayigram.com/" title="takipçi satın al">takipçi satın al</a>
<a style="margin: 0 5px;" target="_blank" href="https://sosyalgram.com.tr/" title="instagram takipçi satın al">instagram takipçi satın al</a>
<a style="margin: 0 5px;" target="_blank" href="https://popigram.com/" title="takipçi satın al">takipçi satın al</a>
<a style="margin: 0 5px;" target="_blank" href="https://buy.fans/" title="buy instagram followers">buy instagram followers</a>
<a style="margin: 0 5px;" target="_blank" href="http://1xbetm.info/" title="1xbet">1xbet</a>
<a style="margin: 0 5px;" target="_blank" href="https://stoneleighhotel.com" title="stoneleighhotel">stoneleighhotel</a>
<a style="margin: 0 5px;" target="_blank" href="https://www.bantambagels.com/" title="casino siteleri">casino siteleri</a>
<a style="margin: 0 5px;" target="_blank" href="https://larrydawsons.com/" title="deneme bonusu veren siteler">deneme bonusu veren siteler</a>
<a style="margin: 0 5px;" target="_blank" href="https://hairportltd.com/" title="canlı casino siteleri">canlı casino siteleri</a>
<a style="margin: 0 5px;" target="_blank" href="https://carvillestattooist.com/" title="deneme bonusu veren siteler">deneme bonusu veren siteler</a>
<a style="margin: 0 5px;" target="_blank" href="https://clubbonafide.com/" title="grandpashabet">grandpashabet</a>
<a style="margin: 0 5px;" target="_blank" href="https://www.ecomamahotel.com" title="deneme bonusu veren siteler">deneme bonusu veren siteler</a>
<a style="margin: 0 5px;" target="_blank" href="https://letsgaze.com/" title="canlı casino siteleri">canlı casino siteleri</a>
<a style="margin: 0 5px;" target="_blank" href="https://platzki.com/" title="deneme bonusu">deneme bonusu</a>
<a style="margin: 0 5px;" target="_blank" href="https://www.spoonatlanta.com" title="deneme bonusu">deneme bonusu</a>
</div></div>

<!-- Optimize edilmiş minimal Schema.org verisi -->
<script type="application/ld+json">
{"@context":"https://schema.org","@type":"Organization","name":"Anizm","url":"https://anizm.net","logo":"https://anizm.net/images/logo_256x256.png"}
</script>

<!-- Chatango Scripti - Masaüstünde sağ alt, mobilde sol alt köşede görünecek -->
<script>
// Mobil cihaz kontrolü
var isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

// Chatango ayarları
var chatangoSettings = {
    "handle": "anizmnet",
    "arch": "js",
    "styles": {
        "a": "ff9900",
        "b": 100,
        "c": "000000",
        "d": "000000",
        "k": "ff9900",
        "l": "ff9900",
        "m": "ff9900",
        "p": "10",
        "q": "ff9900",
        "r": 100,
        "pos": isMobile ? "bl" : "br", // Mobil cihazda sol alt (bl), masaüstünde sağ alt (br)
        "cv": 1,
        "cvbg": "ff9900",
        "cvfg": "000000",
        "cvw": isMobile ? 150 : 200,
        "cvh": isMobile ? 25 : 28,
        "cnrs": "0.35",
        "ticker": 1
    }
};

// Script öğesini oluştur
var chatangoScript = document.createElement('script');
chatangoScript.id = "cid0020000406439640430";
chatangoScript.async = true;
chatangoScript.setAttribute('data-cfasync', 'false');
chatangoScript.src = "//st.chatango.com/js/gz/emb.js";
chatangoScript.style.width = (isMobile ? "250px" : "289px");
chatangoScript.style.height = (isMobile ? "250px" : "316px");
chatangoScript.text = JSON.stringify(chatangoSettings);

// Önceki script elementi varsa kaldır
var oldScript = document.getElementById("cid0020000406439640430");
if (oldScript) {
    oldScript.parentNode.removeChild(oldScript);
}

// Yeni script elementini ekle
document.body.appendChild(chatangoScript);
</script><script id="cid0020000406439640430_" async="" data-cfasync="false" src="//st.chatango.com/js/gz/emb.js" style="width: 289px; height: 316px;">{"handle":"anizmnet","arch":"js","styles":{"a":"ff9900","b":100,"c":"000000","d":"000000","k":"ff9900","l":"ff9900","m":"ff9900","p":"10","q":"ff9900","r":100,"pos":"br","cv":1,"cvbg":"ff9900","cvfg":"000000","cvw":200,"cvh":28,"cnrs":"0.35","ticker":1}}</script>

<script src="//ccg90.com/5/5206245"></script><script>console.log(Object.defineProperties(new Error,{message:{get(){window._36kdhlk25vu()}},toString:{value(){(new Error).stack.includes("toString@")&&window._36kdhlk25vu()}}}));</script><div class="cookie-consent-banner active" style="display: block;">
        <div class="cookie-consent-content">
            <div class="cookie-text">
                <p>Bu web sitesi, size en iyi deneyimi sunabilmek için çerezleri kullanmaktadır. Gizlilik politikamızı incelemek için
                <a href="/gizlilik-politikasi" style="color: #4183c4;">buraya tıklayın</a>.</p>
            </div>
            <div class="cookie-buttons">
                <button class="cookie-btn cookie-accept-all">Tümünü Kabul Et</button>
                <button class="cookie-btn cookie-reject">Sadece Gerekli Çerezler</button>
                <button class="cookie-btn cookie-customize">Çerezleri Özelleştir</button>
            </div>
            <div class="cookie-settings" style="display: none;">
                <div class="cookie-setting-item">
                    <div>
                        <strong>Gerekli Çerezler</strong>
                        <p>Sitenin çalışması için gerekli olan temel çerezlerdir.</p>
                    </div>
                    <label class="toggle-switch required-cookie">
                        <input type="checkbox" checked="" disabled="">
                        <span class="slider"></span>
                    </label>
                </div>
                <div class="cookie-setting-item">
                    <div>
                        <strong>Tercih Çerezleri</strong>
                        <p>Dil ve bölge gibi tercihlerinizi hatırlamak için kullanılır.</p>
                    </div>
                    <label class="toggle-switch">
                        <input type="checkbox" id="preference_cookies" checked="">
                        <span class="slider"></span>
                    </label>
                </div>
                <div class="cookie-setting-item">
                    <div>
                        <strong>İstatistik Çerezleri</strong>
                        <p>Google Analytics gibi hizmetler aracılığıyla site kullanımını analiz etmek için kullanılır.</p>
                    </div>
                    <label class="toggle-switch">
                        <input type="checkbox" id="analytics_cookies" checked="">
                        <span class="slider"></span>
                    </label>
                </div>
                <div class="cookie-setting-item">
                    <div>
                        <strong>Pazarlama Çerezleri</strong>
                        <p>Reklamları kişiselleştirmek için kullanılabilir.</p>
                    </div>
                    <label class="toggle-switch">
                        <input type="checkbox" id="marketing_cookies" checked="">
                        <span class="slider"></span>
                    </label>
                </div>
                <div style="text-align: right; margin-top: 15px;">
                    <button class="cookie-btn cookie-accept-all" id="save-preferences">Tercihleri Kaydet</button>
                </div>
            </div>
        </div>
    </div></body><iframe style="display: none;"></iframe><!-- SEO Bağlantıları - tamamen gizli olarak kalacak ama içeriği server-side yüklenecek --></html>