<html lang="tr"><head><script defer="" src="https://anizm.net/js/custom/episodea.js?date=25420252"></script><script>(function(w,i,g){w[g]=w[g]||[];if(typeof w[g].push=='function')w[g].push(i)})
(window,'G-5WNZ0X5Y8B','google_tags_first_party');</script><script async="" src="/metrics/"></script>
			<script>
				window.dataLayer = window.dataLayer || [];
				function gtag(){dataLayer.push(arguments);}
				gtag('js', new Date());
				gtag('set', 'developer_id.dYzg1YT', true);
				gtag('config', 'G-5WNZ0X5Y8B');
			</script>
			
        <link rel="icon" type="image/x-icon" href="https://anizm.net/upload/assets/favicon.ico">
    <meta charset="UTF-8">
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:image" content="/storage/pcovers/183840001736516084.webp">
    <meta name="og:type" content="video.tv_show">
    <meta name="og:image" content="/storage/pcovers/183840001736516084.webp">
<script>
    window.onload = function() {
        setTimeout(Watched, 120000)
    };

    function Watched() {
        var episodeId = 77449;
        var animeId = 18384;
        var type = 'auto';

        $.ajax({
            type: "POST",
            url: "userWatched",
            data: {
                episodeId,
                animeId,
                type
            },
            dataType: 'text',
            success: function(sonuc) {}
        });
    }
</script><meta name="theme-color" content="#f4a506"><style>
        /* Header için optimizasyon - hızlı render için */
        body { margin: 0; padding: 0; font-family: 'Rajdhani', sans-serif; background: #111; color: #fff; }
        header.puf01 { width: 100%; position: relative; background: #222; min-height: 60px; display: flex; flex-direction: column; }
        .content { position: relative; z-index: 2; }
        .menuHeader { display: flex; align-items: center; justify-content: space-between; padding: 0.5rem 0; }
        .pt-2 { padding-top: 0.5rem; }
        .mt-3 { margin-top: 0.75rem; }
        .anizm_positionRelative { position: relative; }
        .ui.container { width: 1127px; margin-left: auto !important; margin-right: auto !important; }
        @media (max-width:1199px) { .ui.container { width: auto; margin-left: 1em !important; margin-right: 1em !important; } }
        .hamburger { cursor: pointer; position: relative; display: none; }
        .hamburger #hamburger-bar { position: relative; }
        @media (max-width:767px) { .hamburger { display: block; } }

        /* Logo ve menü stilleri - LCP elementi için optimize */
        img.logo { max-height: 40px; width: auto; display: block; }
        .menuHeader a { color: #fff; text-decoration: none; font-weight: bold; padding: 5px 10px; }
        #ham-toggler { display: none; }

        /* Üst bildirim stili */
        .topmessage { padding: 12px; background: #f4a506; color: #000; text-align: center; position: relative; }

        /* UI öğeleri için temel stiller */
        .dropdown { position: relative; display: inline-block; }
        .dropdown .menu { display: none; position: absolute; background: #333; min-width: 160px; z-index: 10; padding: 0.5em 0; border-radius: 3px; }
        .dropdown:hover .menu { display: block; }
        .dropdown .item { display: block; color: white; padding: 8px 12px; text-decoration: none; }
        .dropdown .item:hover { background: #444; }

        /* Düzen Yapısı */
        .ui.dropdown .menu { background: #222; border: 1px solid #444; }
        .ui.dropdown .item { color: #fff; padding: 0.5em 1em; }
        .ui.dropdown .item:hover { background: rgba(255,255,255,0.1); }
        .ui.dropdown .header { border-bottom: 1px solid #444; padding: 0.5em 1em; font-weight: bold; color: #aaa; }
    </style><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5"><link rel="icon" type="image/x-icon" href="https://anizm.net/upload/assets/favicon.ico"><meta name="csrf-token" content="Ddn4uXDE9AhXyfcZCamyXgHXnvx9sxS2HPBWhzSx"><title>Ore dake Level Up na Ken Season 2: Arise from the Shadow 7. B...</title><meta name="googlebot" content="index, follow"><meta name="revisit-after" content="1 Days"><meta name="robots" content="index, follow"><meta name="distribution" content="global"><meta name="rating" content="all"><meta name="author" content="Anizm TV - info@anizm.tv"><meta http-equiv="content-language" content="tr_TR"><meta http-equiv="copyright" content="Copyright © 2025 Anizm TV"><meta name="description" itemprop="description" content="Ore dake Level Up na Ken Season 2: Arise from the Shadow izle - Ore dake Level Up na Ken Season 2: Arise from the Shadow 7. Bölüm Anizm farkı ile tamamen reklamsız olan sitemizden FULL HD bir şekilde ..."><meta name="keywords" itemprop="keywords" content="Ore dake Level Up na Ken Season 2: Arise from the Shadow 7. Bölüm izle, Ore dake Level Up na Ken Season 2: Arise from the Shadow 7. Bölüm türkçe altyazılı izle"><meta name="og:locale" content="tr_TR"><meta name="og:type" content="video.movie"><meta name="og:title" content="Ore dake Level Up na Ken Season 2: Arise from the Shadow 7. B..."><meta name="og:description" content="Ore dake Level Up na Ken Season 2: Arise from the Shadow izle - Ore dake Level Up na Ken Season 2: Arise from the Shadow 7. Bölüm Anizm farkı ile tamamen reklamsız olan sitemizden FULL HD bir şekilde ..."><meta name="og:url" content="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-7-bolum-izle"><meta name="og:site_name" content="Anizm | En Güncel Türkçe Altyazılı Anime İzleme Portalı"><meta name="twitter:card" content="summary_large_image"><meta name="twitter:description" content="Ore dake Level Up na Ken Season 2: Arise from the Shadow izle - Ore dake Level Up na Ken Season 2: Arise from the Shadow 7. Bölüm Anizm farkı ile tamamen reklamsız olan sitemizden FULL HD bir şekilde ..."><meta name="twitter:title" content="Ore dake Level Up na Ken Season 2: Arise from the Shadow 7. B..."><link rel="dns-prefetch" href="//cdnjs.cloudflare.com"><link rel="dns-prefetch" href="//anizm.net"><link rel="dns-prefetch" href="//www.googletagmanager.com"><link rel="dns-prefetch" href="//www.gstatic.com"><link rel="preconnect" href="https://cdnjs.cloudflare.com" crossorigin=""><link rel="preconnect" href="https://anizm.net" crossorigin=""><script data-cfasync="false">
        // episodea.js için gerekli global değişkenleri ve nesneleri tanımla
        var site_js = site_js || {};
        site_js.baseUrl = 'https://anizm.net';
        site_js.isLoggedIn = false;

        // Controller nesnesi ve register metodunu tanımla - episodea.js için kritik
        site_js.controller = site_js.controller || {};
        site_js.controller.register = function(name, component) {
            // Register işlemini güvenli bir şekilde yap
            if (!site_js.controllers) site_js.controllers = {};
            site_js.controllers[name] = component;

            // jQuery ile olay dinleme fonksiyonu ekle - episodea.js için gerekli
            component.on = function(eventName, selector, handlerName) {
                // Olay dinleyicilerini temizle ve yeniden ekle
                $(document).off(eventName, selector).on(eventName, selector, function(event) {
                    if (typeof component[handlerName] === 'function') {
                        return component[handlerName].call(component, event);
                    }
                });
                return component; // Method chaining için
            };

            // Olay dinleyicilerini kaldırma metodu
            component.off = function(eventName, selector) {
                $(document).off(eventName, selector);
                return component;
            };

            // init metodunu çağır - otomatik başlatma
            if (component && typeof component.init === 'function') {
                // jQuery ready olayına bağla - sayfa tamamen hazır olduğunda çağrılır
                $(document).ready(function() {
                    try {
                        component.init();
                    } catch(e) {
                        console.error("Controller init error:", e);
                    }
                });
            }

            return component; // Method chaining için
        };

        // Request yardımcı nesnesi - AJAX istekleri için
        site_js.request = site_js.request || {
            send: function(url, callback) {
                // Basit AJAX wrapper - jQuery Ajax kullanarak
                if (typeof callback !== 'function') callback = function() {};

                // jQuery AJAX ile istek gönder - fetch yerine $.ajax kullan
                $.ajax({
                    url: url,
                    type: 'GET',
                    dataType: 'json',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'Accept': 'application/json',
                        'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content') || ''
                    },
                    success: function(data) {
                        callback(data);
                    },
                    error: function(error) {
                        console.error("Request error:", error);
                    }
                });

                return this;
            }
        };

        // Loader yardımcı nesnesi
        site_js.loader = site_js.loader || {
            set: function(selector) {
                const target = document.querySelector(selector);
                if (target) {
                    // Önce mevcut içeriği temizle
                    target.innerHTML = '';

                    // Tam ekran kapsayıcı oluştur
                    const loaderContainer = document.createElement('div');
                    loaderContainer.className = 'anizm-loader-container';
                    loaderContainer.style.cssText = 'position: absolute; top: 0; left: 0; width: 100%; height: 100%; display: flex; justify-content: center; align-items: center; background-color: rgba(0,0,0,0.8); z-index: 1000;';

                    // Loader animasyonu oluştur
                    const loader = document.createElement('div');
                    loader.className = 'ui active big loader';

                    // Loader'ı kapsayıcıya ekle
                    loaderContainer.appendChild(loader);

                    // Kapsayıcıyı hedefe ekle
                    target.appendChild(loaderContainer);

                    // Hedef elementin position özelliğini kontrol et ve düzenle
                    const targetStyle = window.getComputedStyle(target);
                    if (targetStyle.position === 'static') {
                        target.style.position = 'relative';
                    }
                }
                return this;
            },
            remove: function(selector) {
                const target = document.querySelector(selector);
                if (target) {
                    // Loader kapsayıcısını kaldır
                    const loaderContainer = target.querySelector('.anizm-loader-container');
                    if (loaderContainer) loaderContainer.remove();
                }
                return this;
            }
        };

        // Helpers yardımcı nesnesi
        site_js.helpers = site_js.helpers || {
            delay: function(func, wait) {
                // Debounce işlevi - art arda çağrıları optimize eder
                let timeout;
                return function() {
                    const context = this;
                    const args = arguments;
                    clearTimeout(timeout);
                    timeout = setTimeout(function() {
                        func.apply(context, args);
                    }, wait);
                };
            }
        };

        // Geriye dönük uyumluluk için diğer nesneler
        site_js.episode = site_js.episode || {};
        site_js.episode.register = site_js.controller.register;
        site_js.register = site_js.controller.register;

        // Ek olarak yaygın global nesneleri tanımla
        window.app = window.app || {
            register: site_js.controller.register
        };
    </script><script data-cfasync="false" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js" integrity="sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script><script data-cfasync="false" src="https://anizm.net/semantic/semantic.min.js?date=2542025"></script><script src="https://anizm.net/js/custom/searchOverlayOnce.js?date=2542025&amp;a=2"></script><script data-cfasync="false">
        // Header elementinin hızlı yüklenmesi için öncelikli aktivasyon
        document.addEventListener('DOMContentLoaded', function() {
            // Dropdown'ları hemen aktifleştir
            if (typeof $.fn.dropdown === 'function') {
                $('.ui.dropdown').dropdown();
            }

            // Diğer UI elementlerini aktifleştir
            if (typeof $.fn.popup === 'function') {
                $('.ui.popup').popup();
            }
        });
    </script><link rel="stylesheet" href="https://anizm.net/semantic/semantic.min.css?date=2542025"><link rel="stylesheet" href="https://anizm.net/css/reset.css" as="style" onload="this.onload=null;this.rel='stylesheet'"><link rel="stylesheet" href="https://anizm.net/css/framework.css" as="style" onload="this.onload=null;this.rel='stylesheet'"><link rel="stylesheet" href="https://anizm.net/css/theme.css?date=25420252" as="style" onload="this.onload=null;this.rel='stylesheet'"><link rel="stylesheet" href="https://anizm.net/css/swiper-bundle.min.css" as="style" onload="this.onload=null;this.rel='stylesheet'"><link rel="stylesheet" href="https://anizm.net/css/episodeAdminPanel.css?date=25420251a" as="style" onload="this.onload=null;this.rel='stylesheet'"><link rel="stylesheet" href="https://anizm.net/css/toast.css" as="style" onload="this.onload=null;this.rel='stylesheet'"><link rel="stylesheet" href="https://anizm.net/css/customScroll.css?date=25420251aaaaa" as="style" onload="this.onload=null;this.rel='stylesheet'"><link rel="stylesheet" href="https://anizm.net/semantic/components/button.min.css" as="style" onload="this.onload=null;this.rel='stylesheet'"><link rel="stylesheet" href="/css/discordInvite.css" as="style" onload="this.onload=null;this.rel='stylesheet'"><link rel="stylesheet" href="/css/discordInvite2.css?v=10" as="style" onload="this.onload=null;this.rel='stylesheet'"><link rel="stylesheet" href="https://anizm.net/css/cookie-consent.css?date=25420251"></head>







    
    
    <!-- Critical CSS ve Header LCP Optimizasyonu -->
    

    <!-- TTFB ve ilk render için gereken meta -->
    
    
    
    

    <!-- Page -->











	
<!-- Facebook -->








<!-- Twitter -->






    <!-- DNS Prefetch ve Preconnect Optimizasyonları -->
    
    
    
    
    
    

    <!-- Global değişkenleri tanımla - script hatalarını önlemek için -->
    

    <!-- Ana JQuery kütüphanesi - dropdown menüler için kritik -->
    

    <!-- Semantic UI - dropdown menülerin çalışması için inline -->
    
    
    <!-- Dropdown ve UI aktivasyonu -->
    

    <!-- Core stiller - header render sonrası yükle -->
    

    <!-- Kritik olmayan stilleri gecikmeli yükle -->
    
    
    
    
    
    
    
    
    
    

    <!-- Cookie consent CSS - hemen yüklenmeli -->
    

    <!-- Fallback stil yükleme için noscript -->
    <body><noscript>
        <link rel="stylesheet" href="https://anizm.net/css/reset.css">
        <link rel="stylesheet" href="https://anizm.net/css/framework.css">
        <link rel="stylesheet" href="https://anizm.net/css/theme.css?date=25420252">
        <link rel="stylesheet" href="https://anizm.net/css/swiper-bundle.min.css">
    </noscript>

    <link rel="manifest" href="/manifest.json">

    <!-- Diğer JavaScript yükleme işlemleri - header render sonrası -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Framework ve temel işlevsellik
            loadScript("https://anizm.net/js/framework.js", function() {
                // Gerekli scriptleri header render sonrası yükle
                loadScript("https://anizm.net/js/controllers.js?date=2542025");
                loadScript("https://anizm.net/js/custom.js?date=25420251111");

                // Cookie Consent JS'i yükle - önemli!
                loadScript("https://anizm.net/js/cookie-consent.js?date=25420251");

                // Diğer scriptleri ihtiyaç oldukça yükle
                setTimeout(function() {
                    loadScript("https://anizm.net/js/swiper-bundle.min.js", function() {
                        loadScript("https://anizm.net/js/custom/swipeCarousel.js?date=25420259");
                    });
                    loadScript("https://anizm.net/js/lazysizes.min.js?date=254202511");
                }, 200);
            });
        });

        // Script yükleme yardımcı fonksiyonu
        function loadScript(src, callback) {
            const script = document.createElement('script');
            script.src = src;
            script.defer = true;
            if (callback) script.onload = callback;
            document.head.appendChild(script);
        }
    </script>

    <!-- Service Worker Kayıt -->
    <script>
    // Service Worker kaydını Cloudflare ile uyumlu hale getir
    window.addEventListener('load', () => {
        if ('serviceWorker' in navigator) {
            setTimeout(() => {
                navigator.serviceWorker.register('/sw2.js', {
                    updateViaCache: 'none' // Cloudflare cache ile çakışmaları önle
                }).catch(() => {});
            }, 5000);
        }
    });
    </script>

    <!-- Google Analytics - performans optimizasyonu ile -->
    <script>
    // GA çok gecikmeli yükle - kullanıcı deneyimini etkilemesin
    window.addEventListener('load', function() {
        setTimeout(function() {
            const gaScript = document.createElement('script');
            gaScript.async = true;
            gaScript.src = "https://www.googletagmanager.com/gtag/js?id=G-5WNZ0X5Y8B";
            document.head.appendChild(gaScript);

            gaScript.onload = function() {
                window.dataLayer = window.dataLayer || [];
                function gtag(){dataLayer.push(arguments);}
                gtag('js', new Date());
                gtag('config', 'G-5WNZ0X5Y8B', {
                    'send_page_view': true,
                    'transport_type': 'beacon'  // Beacon API kullanarak performans etkisini azalt
                });
            };
        }, 3000);
    });
    </script>

    <!-- Firebase bildirim işlemleri - tamamen gecikmeli -->
    <script>
    // Sayfa tamamen yüklendikten ve kullanıcı etkileşimden sonra Firebase modülleri yüklensin
    document.addEventListener('DOMContentLoaded', function() {
        // Kullanıcı etkileşimi bekleme - scroll, tıklama veya 5 saniye bekleme
        let firebaseLoaded = false;

        function loadFirebaseModules() {
            if (firebaseLoaded) return;
            firebaseLoaded = true;

            // Module türünde dinamik import ile yükleme
            import("https://www.gstatic.com/firebasejs/11.2.0/firebase-app.js").then(firebaseApp => {
                const { initializeApp } = firebaseApp;

                // Notification API kontrolü
                if ('Notification' in window && Notification.permission !== 'denied') {
                    import("https://www.gstatic.com/firebasejs/11.2.0/firebase-messaging.js").then(firebaseMsg => {
                        const { getMessaging, getToken } = firebaseMsg;

                        try {
                            // Mümkün olduğunca minify edilmiş config
                            const app = initializeApp({
                                apiKey: "AIzaSyC2150reOPSti_5pkNTPDhXE5z0S-iIQOE",
                                projectId: "anizm-tv",
                                messagingSenderId: "320469467233",
                                appId: "1:320469467233:web:33fcfae1c5d0cdf566aa20"
                            });

                            // Bildirim izni kontrolü
                            if (Notification.permission === 'granted') {
                                getToken(getMessaging(app)).then(token => {
                                    if (token) sendTokenToServer(token);
                                }).catch(() => {});
                            } else {
                                Notification.requestPermission().then(permission => {
                                    if (permission === 'granted') {
                                        getToken(getMessaging(app)).then(token => {
                                            if (token) sendTokenToServer(token);
                                        }).catch(() => {});
                                    }
                                });
                            }
                        } catch (e) {}
                    });
                }
            });
        }

        // İzleyiciler aracılığıyla gecikmeli yükleme
        if ('requestIdleCallback' in window) {
            requestIdleCallback(() => {
                loadFirebaseModules();
            }, { timeout: 5000 });
        } else {
            setTimeout(loadFirebaseModules, 5000);
        }

        // Kullanıcı etkileşimi olduğunda yükle
        window.addEventListener('scroll', () => {
            loadFirebaseModules();
        }, { passive: true, once: true });

        document.addEventListener('click', () => {
            loadFirebaseModules();
        }, { once: true });
    });

    // Token gönderimi - minimal veri paketli
    function sendTokenToServer(token) {
                fetch(`https://${window.location.host}/token-ekle`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || ''
            },
            body: JSON.stringify({
                token: token,
                userId: 0,
                platform: navigator.platform
            }),
            keepalive: true // Sayfa ayrılsa bile tamamlanmasını sağla
        }).catch(() => {});
    }
    </script>



    <!-- Custom JS and CSS -->




    <noscript>
        <div><img src="https://mc.yandex.ru/watch/89655860" style="position:absolute; left:-9999px;" alt="" />
        </div>
    </noscript>
        <main>
                        <header class="mt-3 puf01" data-menutype="cover" data-divider="">
                    <div class="cover blurred" style="background: url('/storage/pcovers/183840001736516084.webp' ) no-repeat center center; background-size: cover;">
                        <div class="divider"></div>
                    </div>
                <div class="content anizm_positionRelative">
            <div class="ui container menuHeader">
                <div class="anizm_displayTable anizm_positionRelative anizm_fullWidth menuWrapper">
								<div class="logo anizm_displayCell anizm_alignMiddle anizm_s50">
					<a href="/">
						<img alt="Logo" width="140px" height="35px" src="https://anizm.net/upload/assets/logo.webp">
					</a>
				</div>
			</div>
            </div>

            <input type="checkbox" id="ham-toggler">
            <div class="hamburger">
                <div id="hamburger-bar"></div>
            </div>


            <div id="menuContent" class="anizm_displayCell">
    <input type="checkbox" id="ham-toggler">
    <label for="ham-toggler" class="hamburger">
        <div id="hamburger-bar"></div>
    </label>
    <div id="scale0id" class="menu anizm_floatLeft anizm_displayCell anizm_alignMiddle">
        <ul>
            <li><a title="TAKVİM" href="https://anizm.net/takvim">TAKVİM</a>
            </li><li><a title="Tavsiye Robotu" href="https://anizm.net/tavsiyeRobotu">Tavsiye Robotu</a>
            </li>
            <li><a title="Fansublar" href="https://anizm.net/fansublar">Fansublar</a></li>
            <!--<li><a title="Ekibe Başvur" href="https://anizm.net/ekibekatil">Ekibe Katıl</a></li>-->
            <li><a target="_blank" href="https://serimangas.com/">Manga</a></li>
            <li><a target="_blank" href="https://yeppuu.com/">Anime Haber</a></li>
            <!--<li><a title="EKİBE KATIL" href="https://anizm.net/ekibekatil">EKİBE KATIL</a></li>-->
            <li>

                <a target="_blank" href="https://discord.com/invite/Tq83x6VZQf"><i class="discord icon"></i> Discord</a>
            </li>
            <li class="headerSearchContainer">
                <i class="search icon headerSearchIcon" id="searchTrigger"></i>
            </li>
        </ul>
        <div id="scale0id" class="userIcons anizm_floatRight anizm_displayCell anizm_alignMiddle">
            <ul class="userUnorderedList">
                                                    <li class="anizm_noXPadding uyeOlButtonContainer"><a href="https://anizm.net/uyeol" class="anizm_button dark mini mr-1"><i class="icon sign-in"></i> Üye Ol</a></li>
                    <li class="anizm_noXPadding uyeOlButtonContainer"><a href="https://anizm.net/girisyap" class="anizm_button default mini"><i class="icon user circle"></i> Giriş Yap</a>
                    </li>
                            </ul>
        </div>
    </div>

</div>

<!-- Dropdown menülerin çalışması için yedek kod - sayfa sonuna ekledik -->
<script>
    // Sayfa yüklendikten sonra dropdown'ları aktifleştir - çift kontrol
    document.addEventListener('DOMContentLoaded', function() {
        setTimeout(function() {
            if (typeof $ === 'function' && typeof $.fn.dropdown === 'function') {
                $('.ui.dropdown, [data-dropdown]').dropdown();
            }
        }, 500); // Biraz bekleyerek jQuery ve Semantic UI'ın yüklenmesini garanti et
    });
</script>
            
        </div>
        <!-- Anime slider bileşenini doğrudan include -->
                </header>
        <div id="searchOverlay">
	<div class="searchView">
		<div class="searchBarContainer">
			<input autocomplete="off" id="fullViewSearchInput" class="searchBarInput" placeholder="Anime ara...">
			<button class="searchBarButton">Kapat</button>
			<div class="searchTypeSelection passive">
				<button class="fastSearch searchTypeOption active" data-type="fast">Hızlı Arama</button>
				<button class="detailedSearch searchTypeOption" data-type="detailed">Detaylı Arama</button>
			</div>
		</div>
		<div class="searchResults">
			<div class="searchLoaderContainer">
				<span class="loaderText">Anime yükleniyor...</span>
				<div class="loaderItem"></div>
			</div>
			<div id="fullViewSearchResults"></div>
			<button id="loadMoreSearch" class="ui button anizm_fullWidth inverted orange">Daha Fazla Göster</button>
		</div>
	</div>
</div>        <div id="pageContent" class="homePageContent anizm_positionRelative">

        <!-- Başlık bölümünde slider görselleri için performans optimizasyonu -->
        <link rel="preconnect" href="https://anizm.net" crossorigin="">
        <style>
            /* Anime Slider Performans İyileştirmeleri */
            .popularAnimeSlideSection {
                contain: layout style paint;  /* CSS containment ile güçlü performans artışı */
            }
            .slideImageContainer {
                background-color: #222; /* Görsel yüklenene kadar arkaplan */
                aspect-ratio: 2/3;    /* Boyut oranını koruyarak reflow önleme */
                overflow: hidden;     /* Taşan içeriği gizle */
            }
            .slideImage {
                opacity: 0;           /* Görsel hazır olana kadar gizle */
                transition: opacity 0.3s ease; /* Yüklendiğinde yumuşak geçiş */
                will-change: opacity; /* Tarayıcıya optimizasyon ipucu ver */
                object-fit: cover;    /* Görüntü oranını koruyarak kapla */
            }
            .slideImage.loaded {
                opacity: 1;           /* Yüklenen görseli göster */
            }
            /* Görsel yüklenene kadar placeholder göster */
            .ui.loader.active {
                display: block;
                z-index: 1;
            }
        </style>

        <script>
            // Anime slider görsellerin yüklenmesini optimize et
            document.addEventListener('DOMContentLoaded', function() {
                // En fazla 6 görsel için öncelikli yükleme yap, diğerleri için gecikmeli
                setTimeout(function() {
                    const slideImages = document.querySelectorAll('.slideImage');

                    // IntersectionObserver ile görünen görselleri yükle
                    const imageObserver = new IntersectionObserver((entries) => {
                        entries.forEach(entry => {
                            if (entry.isIntersecting) {
                                const img = entry.target;

                                // Görsel yüklendiğinde loaded sınıfı ekle ve loader'ı gizle
                                img.onload = function() {
                                    img.classList.add('loaded');
                                    const loader = img.closest('.swiper-slide').querySelector('.ui.loader');
                                    if (loader) loader.classList.remove('active');
                                };

                                // Safari için fallback yükleme tamamlanma kontrolü
                                if (img.complete) {
                                    img.classList.add('loaded');
                                    const loader = img.closest('.swiper-slide').querySelector('.ui.loader');
                                    if (loader) loader.classList.remove('active');
                                }

                                // Görsel yüklendikten sonra gözlemlemeyi bırak
                                imageObserver.unobserve(img);
                            }
                        });
                    }, {
                        rootMargin: '200px 0px', // Görsel 200px yaklaşınca yüklemeye başla
                        threshold: 0.01 // Çok az görünür olduğunda bile yüklemeye başla
                    });

                    // Tüm görselleri gözlemle
                    slideImages.forEach(img => {
                        imageObserver.observe(img);
                    });
                }, 100); // Çok kısa bir gecikme ile çalıştır - LCP'yi etkilemesin
            });
        </script>
    <style>
        @media  only screen and (max-width: 767px) {
            .puf01 {
                height: 5em !important;
                min-height: 5em !important;
                max-height: 7em !important;
            }
        }

        [v-cloak] {
            display: none;
        }
    </style>
    
    <div class="ui container episodeContainer" js-controller="episodepage">

                <span class="animeSeoTags">Ore dake Level Up na Ken Season 2: Arise from the Shadow 7. Bölüm türkçe izle, Ore dake Level Up na Ken Season 2: Arise from the Shadow 7. Bölüm türkçe altyazılı
            izle,
            Ore dake Level Up na Ken Season 2: Arise from the Shadow 7. Bölüm 1080p izle </span>


                    <div class="info_otherTitle">Solo Leveling Season 2: Arise from the Shadow</div>
                <h2 class="anizm_pageTitle">
                        <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow" class="anizm_colorDefault anizm_textUnbold anizmTitleLink">Ore dake Level Up na Ken Season 2: Arise from the Shadow</a>
            <span>/ 7. Bölüm</span>
        </h2>
        <div class="infoSta">
            <ul class="anizm_verticalList space divider">
                                <li>Eklenme Tarihi: 15 Şubat 2025</li>
            </ul>
        </div>
        <div class="anizm_columns anizm_fullWidth mt-4 anizm_mobile episodeInfoContainer">
            <div class="anizm_column animeIzleInnerContainer">
                <div class="episodeTranslators mb-3">
                    <div class="ui grid five column stackable">
                                                    <div class="column fansubSecimKutucugu" id="fansec">
                                <a data-translatorclick="" href="#" translator="https://anizm.net/episode/77449/translator/100116" class="anizm_colorDefault">
                                    <div class="translatorBox anizm_backgroundLight anizm_round anizm_fullWidth">
                                        <div class="flagsContainer">
                                                                                            <i class="flag-tr"></i>
                                                                                                                                </div>
                                        <div class="title anizm_colorWhite anizm_textBold">
                                                                                            Benihime
                                                                                                                                </div>
                                        <div class="site fsmall">
                                            Fansub                                        </div>
                                    </div>
                                </a>
                            </div>
                                                    <div class="column fansubSecimKutucugu" id="fansec">
                                <a data-translatorclick="" href="#" translator="https://anizm.net/episode/77449/translator/100123" class="anizm_colorDefault">
                                    <div class="translatorBox anizm_backgroundLight anizm_round anizm_fullWidth">
                                        <div class="flagsContainer">
                                                                                            <i class="flag-tr"></i>
                                                                                                                                </div>
                                        <div class="title anizm_colorWhite anizm_textBold">
                                                                                            RaionSubs
                                                                                                                                </div>
                                        <div class="site fsmall">
                                            Fansub                                        </div>
                                    </div>
                                </a>
                            </div>
                                                    <div class="column fansubSecimKutucugu" id="fansec">
                                <a data-translatorclick="" href="#" translator="https://anizm.net/episode/77449/translator/100200" class="anizm_colorDefault">
                                    <div class="translatorBox anizm_backgroundLight anizm_round anizm_fullWidth">
                                        <div class="flagsContainer">
                                                                                            <i class="flag-tr"></i>
                                                                                                                                </div>
                                        <div class="title anizm_colorWhite anizm_textBold">
                                                                                            Seicode
                                                                                                                                </div>
                                        <div class="site fsmall">
                                            Fansub                                        </div>
                                    </div>
                                </a>
                            </div>
                                                    <div class="column fansubSecimKutucugu" id="fansec">
                                <a data-translatorclick="" href="#" translator="https://anizm.net/episode/77449/translator/100251" class="anizm_colorDefault">
                                    <div class="translatorBox anizm_backgroundLight anizm_round anizm_fullWidth">
                                        <div class="flagsContainer">
                                                                                            <i class="flag-tr"></i>
                                                                                                                                </div>
                                        <div class="title anizm_colorWhite anizm_textBold">
                                                                                            Dantel Entel
                                                                                                                                </div>
                                        <div class="site fsmall">
                                            Fansub                                        </div>
                                    </div>
                                </a>
                            </div>
                                                    <div class="column fansubSecimKutucugu" id="fansec">
                                <a data-translatorclick="" href="#" translator="https://anizm.net/episode/77449/translator/100695" class="anizm_colorDefault">
                                    <div class="translatorBox anizm_backgroundLight anizm_round anizm_fullWidth">
                                        <div class="flagsContainer">
                                                                                            <i class="flag-tr"></i>
                                                                                                                                </div>
                                        <div class="title anizm_colorWhite anizm_textBold">
                                                                                            ShikiSubs
                                                                                                                                </div>
                                        <div class="site fsmall">
                                            Fansub                                        </div>
                                    </div>
                                </a>
                            </div>
                                            </div>
                </div>
                <input style="display:none" type="hidden" name="selectedTranslatorID" id="selectedTranslatorID" value="null">
                                <div class="anizm_alignRight mb-3" style="margin: auto; padding-left: 1em; padding-right: 1em;">
                                            <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-6-bolum" class="anizm_button dark mini mr-2 puf_02"><i class="icon arrow left"></i> Önceki Bölüm</a>
                                        <a href="https://anizm.net/raporver/bolum/77449/video/0" class="anizm_button dark mini mr-2 puf_02" js-widget="window" data-playerreport="" data-title="Sorun bildir" data-size="small">
                        <i class="icon exclamation triangle"></i> Raporla
                    </a>
                                            <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-8-bolum" class="anizm_button default mini puf_02">Sonraki Bölüm
                            <i class="icon arrow right"></i></a>
                                    </div>


                                


                <!--a href="https://bit.ly/anizm-mc-acildi" style="height:50px" title="Anizm MC Açılıyor!" class="text-center center-block" target="_blank">
                                    <img class="img-responsive" style="width:100%" src="/images/anizm-mc-acilis-banner-cropped.webp" alt="Anizm MC Açılıyor!">
                                </a-->



                <div id="videoFrame" class="episodePlayer anizm_round anizm_shadow anizm_backgroundLight pfull" style="position: relative;"><div class="anizm-loader-container" style="position: absolute; top: 0px; left: 0px; width: 100%; height: 100%; display: flex; justify-content: center; align-items: center; background-color: rgba(0, 0, 0, 0.8); z-index: 1000;"><div class="ui active big loader"></div></div>
                                    </div>
                                    <script>
                        $(document).ready(function() {
                            // Sayfa yüklendikten sonra çalışsın
                            setTimeout(function() {
                                // Birden fazla fansub varsa, ilk fansubu otomatik olarak seç
                                if ($('.fansubSecimKutucugu').length > 0) {
                                    // HTML elementine doğrudan erişim kullanarak tıklama işlemi yap
                                    var firstFansubLink = document.querySelector('.fansubSecimKutucugu:first-child a');
                                    if (firstFansubLink) {
                                        // Native JavaScript tıklama olayı tetikleme
                                        var clickEvent = new MouseEvent('click', {
                                            bubbles: true,
                                            cancelable: true,
                                            view: window
                                        });
                                        firstFansubLink.dispatchEvent(clickEvent);
                                    }
                                }
                            }, 1000); // Biraz daha uzun bir gecikme (1 saniye)
                        });
                    </script>
                                <div id="fanList" class="playerActions mt-5 anizm_displayTable anizm_fullWidth passive">
                    <div class="anizm_displayCell episodePlayers"></div>
                </div>
                <div class="playerTranslator passive"></div>
                
                
                <h2 class="anizm_sectionTitle"><span>Yorumlar</span></h2>
                <div style="padding-bottom: 10px">
                    <a id="showComments" style="display:block;background-color: #5c6bc0;" class="anizm_button mini showCommentButton">Yorumları Görüntüle</a>
                </div>

                <div id="comments-container" style="display:none;">
                    <style>
    .ui.comments .comment>.avatar~.content {
    margin-left: 0.5em;
}

.ui.comments .comment .avatar {
margin-right: 1em;
}
.comments.reply{ padding: unset !important; }

.ui.comments .comment .text {
    margin: 0.50em 0 .5em;
}

    </style>


<div id="custom-comment-system" class="ui segment">
    <h3 class="ui dividing header">
        <i class="comments outline icon"></i>
        Yorumlar
    </h3>

    <div class="ui comments">
                    <div class="ui warning message">
                <p>Henüz yorum yapılmamış. İlk yorumu sen yap!</p>
            </div>
        
            </div>

            <div class="ui warning message">
            <p>Yorum yapabilmek için <a href="/girisyap">giriş yapmalısınız</a>.</p>
        </div>
    
    <div class="ui basic modal" id="delete-confirmation-modal">
        <div class="ui icon header">
            <i class="trash alternate icon"></i>
            Yorumu Sil
        </div>
        <div class="content">
            <p>Bu yorumu silmek istediğinize emin misiniz? Bu işlem geri alınamaz.</p>
        </div>
        <div class="actions">
            <div class="ui red basic cancel inverted button">
                <i class="remove icon"></i>
                Hayır
            </div>
            <div class="ui green ok inverted button" onclick="confirmDelete()">
                <i class="checkmark icon"></i>
                Evet
            </div>
        </div>
    </div>

    <div class="ui basic modal" id="ban-user-modal">
        <div class="ui icon header">
            <i class="ban icon"></i>
            Kullanıcıyı Engelle
        </div>
        <div class="content">
            <div class="ui form">
                <div class="field">
                    <label>Engelleme Sebebi</label>
                    <textarea id="banReason" rows="3"></textarea>
                </div>
            </div>
        </div>
        <div class="actions">
            <div class="ui red basic cancel inverted button">
                <i class="remove icon"></i>
                İptal
            </div>
            <div class="ui green ok inverted button" onclick="confirmBan()">
                <i class="checkmark icon"></i>
                Engelle
            </div>
        </div>
    </div>

    <div class="ui basic modal" id="comment-history-modal">
        <div class="ui icon header">
            <i class="history icon"></i>
            Yorum Geçmişi
        </div>
        <div class="content" id="comment-history-content">
            <div class="ui relaxed list"></div>
        </div>
        <div class="actions">
            <div class="ui basic cancel inverted button">
                <i class="remove icon"></i>
                Kapat
            </div>
        </div>
    </div>
</div>

<script>
let commentToDelete = null;
let userToBan = null;
let editingComment = null;

function replyTo(commentId, userName, event) {
    event.preventDefault();
    document.getElementById('replyingTo').value = commentId;
    document.getElementById('replyingToName').textContent = userName;
    document.getElementById('replyingInfo').style.display = 'block';
    document.getElementById('cancelButton').style.display = 'inline-block';
    document.getElementById('commentContent').focus();
    document.querySelector('.ui.reply.form').scrollIntoView({ behavior: 'smooth' });
}

function cancelReply() {
    document.getElementById('replyingTo').value = '';
    document.getElementById('replyingInfo').style.display = 'none';
    document.getElementById('cancelButton').style.display = 'none';
    document.getElementById('commentContent').value = '';
}

function deleteComment(commentId, event) {
    event.preventDefault();
    commentToDelete = commentId;
    $('#delete-confirmation-modal').modal('show');
}

function confirmDelete() {
    if (!commentToDelete) return;

    fetch(`/comments/delete/${commentToDelete}`, {
        method: 'POST',
        headers: {
            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const commentElement = document.getElementById(`comment-${commentToDelete}`);
            if (commentElement) {
                commentElement.remove();
            }
            $('#delete-confirmation-modal').modal('hide');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Yorum silinirken bir hata oluştu.');
    });
}

function togglePin(commentId, event) {
    event.preventDefault();
    fetch(`/comments/${commentId}/toggle-pin`, {
        method: 'POST',
        headers: {
            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const commentElement = document.getElementById(`comment-${commentId}`);
            commentElement.classList.toggle('pinned');
            const pinButton = commentElement.querySelector('.pin');
            if (commentElement.classList.contains('pinned')) {
                pinButton.innerHTML = '<i class="pin icon"></i>Sabitlemeyi Kaldır';
            } else {
                pinButton.innerHTML = '<i class="pin icon"></i>Sabitle';
            }
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Yorum sabitlenirken bir hata oluştu.');
    });
}

function likeComment(commentId, event) {
    event.preventDefault();
    fetch(`/comments/${commentId}/toggle-like`, {
        method: 'POST',
        headers: {
            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const comment = document.getElementById(`comment-${commentId}`);
            const likeButton = comment.querySelector('.like');
            const likeCount = comment.querySelector('.like-count span');

            if (likeButton) {
                if (data.message === 'Yorum beğenildi.') {
                    likeButton.innerHTML = '<i class="heart icon"></i>Beğendin';
                } else {
                    likeButton.innerHTML = '<i class="heart outline icon"></i>Beğen';
                }
            }

            if (likeCount) {
                likeCount.textContent = data.likeCount;
            }
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Yorum beğenilirken bir hata oluştu.');
    });
}

function banUser(userId) {
    userToBan = userId;
    $('#ban-user-modal').modal('show');
}

function confirmBan() {
    if (!userToBan) return;

    const reason = document.getElementById('banReason').value;
    if (!reason) {
        alert('Lütfen engelleme sebebi girin.');
        return;
    }

    fetch(`/comments/ban-user/${userToBan}`, {
        method: 'POST',
        headers: {
            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ reason })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            $('#ban-user-modal').modal('hide');
            // Kullanıcının tüm yorumlarını gizle
            const userComments = document.querySelectorAll(`[data-user-id="${userToBan}"]`);
            userComments.forEach(comment => {
                comment.style.opacity = '0.5';
                comment.querySelector('.ban')?.remove();
                const unbanLink = document.createElement('a');
                unbanLink.href = '#';
                unbanLink.className = 'unban';
                unbanLink.innerHTML = '<i class="check icon"></i>Engeli Kaldır';
                unbanLink.onclick = () => unbanUser(userToBan);
                comment.querySelector('.actions').appendChild(unbanLink);
            });
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Kullanıcı engellenirken bir hata oluştu.');
    });
}

function unbanUser(userId) {
    fetch(`/comments/unban-user/${userId}`, {
        method: 'POST',
        headers: {
            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Kullanıcının tüm yorumlarını normal görünüme getir
            const userComments = document.querySelectorAll(`[data-user-id="${userId}"]`);
            userComments.forEach(comment => {
                comment.style.opacity = '1';
                comment.querySelector('.unban')?.remove();
                const banLink = document.createElement('a');
                banLink.href = '#';
                banLink.className = 'ban';
                banLink.innerHTML = '<i class="ban icon"></i>Engelle';
                banLink.onclick = () => banUser(userId);
                comment.querySelector('.actions').appendChild(banLink);
            });
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Kullanıcı engeli kaldırılırken bir hata oluştu.');
    });
}

function showSelectedImage(input) {
    const container = document.getElementById('selectedImages');
    container.innerHTML = '';

    if (input.files.length > 1) {
        alert('En fazla 1 resim ekleyebilirsiniz.');
        input.value = '';
        return;
    }

    Array.from(input.files).forEach((file, index) => {
        if (file.size > 2 * 1024 * 1024) {
            alert('Resim en fazla 2MB boyutunda olmalıdır.');
            return;
        }

        const reader = new FileReader();
        reader.onload = function(e) {
            const div = document.createElement('div');
            div.className = 'selected-image-container';
            div.innerHTML = `
                <img src="${e.target.result}" alt="Seçilen resim" style="height: 80px; margin-right: 5px;">
                <button type="button" class="ui mini negative icon button" onclick="removeSelectedImage(${index})">
                    <i class="remove icon"></i>
                </button>
            `;
            container.appendChild(div);
        };
        reader.readAsDataURL(file);
    });
}

function removeSelectedImage(index) {
    const input = document.getElementById('comment-image');
    const container = document.getElementById('selectedImages');

    const dt = new DataTransfer();
    const files = input.files;

    for (let i = 0; i < files.length; i++) {
        if (i !== index) {
            dt.items.add(files[i]);
        }
    }

    input.files = dt.files;
    container.children[index].remove();
}

function createCommentElement(comment) {
    const isReply = comment.parent_id !== null;

    // URL'leri <a> tagı ile otomatik sarmalama fonksiyonu
    function autoLinkUrls(text) {
        const urlRegex = /(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/g;
        return text.replace(urlRegex, function(url) {
            return `<a href="${url}" target="_blank" rel="nofollow noopener noreferrer">${url}</a>`;
        });
    }

    const template = `
        <div class="comment" id="comment-${comment.id}">
            <a class="avatar">
                <img style="height: auto!important;" src="${comment.user ? comment.user.avatar : '/images/logo_512x512.png'}" alt="Avatar">
            </a>
            <div class="content">
                <a class="author" href="/profil/${comment.user ? comment.user.user_nickname : '#'}">
                    ${comment.user ? comment.user.user_nickname : 'Anonim'}
                </a>
                <div class="metadata">
                    <div class="date">${new Date(comment.created_at).toLocaleString('tr-TR')}</div>
                    <div class="like-count">
                        <i class="heart outline icon"></i>
                        <span>0</span>
                    </div>
                </div>
                <div class="text">
                    <p>${autoLinkUrls(comment.content.replace(/\n/g, '<br>'))}</p>
                    ${comment.images.length > 0 ? `
                        <div class="comment-images">
                            ${comment.images.map(image => `
                                <a href="${image.url}" target="_blank" class="comment-image">
                                    <img src="${image.url}" alt="Yorum resmi" style="max-height: 150px; margin-right: 5px;">
                                </a>
                            `).join('')}
                        </div>
                    ` : ''}
                </div>
                <div class="actions">
                    <a href="#" class="reply" onclick="replyTo(${comment.id}, '${comment.user ? comment.user.user_nickname : 'Anonim'}', event)">Yanıtla</a>
                    <a href="#" class="like" onclick="likeComment(${comment.id}, event)">
                        <i class="heart outline icon"></i>Beğen
                    </a>
                    <a href="#" class="edit" onclick="editComment(${comment.id}, event)">Düzenle</a>
                    <a href="#" class="delete" onclick="deleteComment(${comment.id}, event)">Sil</a>
                </div>
            </div>
        </div>
    `;

    return template;
}

document.getElementById('commentForm').addEventListener('submit', function(e) {
    e.preventDefault();

    const editor = window.currentEditor;
    if (editor) {
        const content = editor.getData().trim();
        if (!content) {
            alert('Yorum içeriği boş olamaz.');
            return;
        }
    }

    const formData = new FormData(this);
    if (editor) {
        formData.set('content', editor.getData());
    }

    fetch('/comments', {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Yorum HTML'ini oluştur ve sayfaya ekle
            const commentContainer = document.querySelector('.ui.comments');
            const newCommentHTML = createCommentElement(data.comment);

            if (data.comment.parent_id) {
                // Eğer bu bir yanıtsa, üst yorumun altına ekle
                const parentComment = document.getElementById(`comment-${data.comment.parent_id}`);
                let repliesContainer = parentComment.querySelector('.comments');
                if (!repliesContainer) {
                    repliesContainer = document.createElement('div');
                    repliesContainer.className = 'comments';
                    parentComment.querySelector('.content').appendChild(repliesContainer);
                }
                repliesContainer.insertAdjacentHTML('afterbegin', newCommentHTML);
            } else {
                // Ana yorum ise en üste ekle
                commentContainer.insertAdjacentHTML('afterbegin', newCommentHTML);
            }

            // Formu temizle
            if (editor) {
                editor.setData('');
            } else {
                document.getElementById('commentContent').value = '';
            }
            document.getElementById('selectedImages').innerHTML = '';
            document.getElementById('uploadedImageUrl').value = '';
            document.getElementById('comment-image').value = '';
            if (document.getElementById('replyingTo').value) {
                cancelReply();
            }

            // Başarı mesajını göster
            const successMessage = document.createElement('div');
            successMessage.className = 'ui success message';
            successMessage.innerHTML = `<p>${data.message}</p>`;
            commentContainer.insertAdjacentElement('beforebegin', successMessage);

            // Başarı mesajını 3 saniye sonra kaldır
            setTimeout(() => {
                successMessage.remove();
            }, 3000);
        } else {
            alert(data.message || 'Bir hata oluştu.');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Yorum gönderilirken bir hata oluştu.');
    });
});

function editComment(commentId, event) {
    event.preventDefault();
    const commentElement = document.getElementById(`comment-${commentId}`);
    const contentElement = commentElement.querySelector('.text');
    const originalContent = contentElement.innerHTML.trim();
    const imagesContainer = commentElement.querySelector('.comment-images');
    const existingImages = imagesContainer ? Array.from(imagesContainer.querySelectorAll('img')).map(img => ({
        url: img.src,
        id: img.dataset.imageId || null
    })) : [];

    editingComment = commentId;

    // CKEditor için container oluştur
    const editorContainer = document.createElement('div');
    editorContainer.id = `editor-${commentId}`;
    editorContainer.style.marginBottom = '10px';

    // Resim yükleme ve önizleme alanını oluştur
    const imageUploadDiv = document.createElement('div');
    imageUploadDiv.className = 'edit-image-upload';
    imageUploadDiv.innerHTML = `
        <div class="field">
            <label for="edit-comment-image-${commentId}" class="ui icon button">
                <i class="image icon"></i> Resim Ekle
            </label>
            <input type="file" id="edit-comment-image-${commentId}" name="image" accept="image/*" style="display:none" onchange="showEditSelectedImage(this, ${commentId})">
        </div>
        <div id="edit-selected-images-${commentId}" class="selected-images"></div>
    `;

    // Mevcut resimleri göster
    const existingImagesDiv = document.createElement('div');
    existingImagesDiv.className = 'existing-images';
    existingImagesDiv.style.marginTop = '10px';

    if (existingImages.length > 0) {
        const existingImagesTitle = document.createElement('div');
        existingImagesTitle.className = 'ui small header';
        existingImagesTitle.textContent = 'Mevcut Resimler:';
        existingImagesDiv.appendChild(existingImagesTitle);

        const imagesGrid = document.createElement('div');
        imagesGrid.className = 'images-grid';
        imagesGrid.style.display = 'flex';
        imagesGrid.style.flexWrap = 'wrap';
        imagesGrid.style.gap = '10px';

        existingImages.forEach((img, index) => {
            const imageId = `img-${commentId}-${index}`;
            const imgContainer = document.createElement('div');
            imgContainer.className = 'image-container';
            imgContainer.style.position = 'relative';
            imgContainer.style.display = 'inline-flex';
            imgContainer.style.alignItems = 'flex-start';

            imgContainer.innerHTML = `
                <img src="${img.url}" alt="Resim" style="height: 80px;" data-image-id="${img.id}">
                <button type="button" class="ui mini negative icon button" style="position: absolute; top: 0; right: 0;" onclick="toggleImageDelete('${imageId}')">
                    <i class="remove icon"></i>
                </button>
                <input type="hidden" name="deleted_images[]" id="${imageId}" value="${img.id}" disabled>
            `;

            imagesGrid.appendChild(imgContainer);
        });

        existingImagesDiv.appendChild(imagesGrid);
    }

    const buttonsDiv = document.createElement('div');
    buttonsDiv.className = 'ui buttons';
    buttonsDiv.style.marginTop = '10px';
    buttonsDiv.innerHTML = `
        <button class="ui primary button" onclick="saveEditWithImages(${commentId})">Kaydet</button>
        <button class="ui button" onclick="cancelEdit(${commentId})">İptal</button>
    `;

    // Mevcut içeriği editör ile değiştir
    contentElement.replaceWith(editorContainer);
    editorContainer.insertAdjacentElement('afterend', imageUploadDiv);
    imageUploadDiv.insertAdjacentElement('afterend', existingImagesDiv);
    existingImagesDiv.insertAdjacentElement('afterend', buttonsDiv);

    // CKEditor'ü başlat
    ClassicEditor
        .create(editorContainer, {
            toolbar: {
                items: [
                    'bold', 'italic', 'strikethrough', 'underline', '|',
                    'fontColor', 'fontBackgroundColor', '|',
                    'bulletedList', 'numberedList', '|',
                    'undo', 'redo'
                ]
            },
            removePlugins: ['CKFinderUploadAdapter', 'CKFinder', 'EasyImage', 'Image', 'ImageCaption', 'ImageStyle', 'ImageToolbar', 'ImageUpload', 'MediaEmbed', 'Table'],
            language: 'tr',
        })
        .then(editor => {
            editor.setData(originalContent);
            window.currentEditor = editor;
        })
        .catch(error => {
            console.error(error);
        });
}

function saveEditWithImages(commentId) {
    const editor = window.currentEditor;
    if (!editor) {
        console.error('Editor bulunamadı');
        return;
    }

    const content = editor.getData().trim();

    if (!content) {
        alert('Yorum içeriği boş olamaz.');
        return;
    }

    // Form verilerini oluştur
    const formData = new FormData();
    formData.append('_token', document.querySelector('meta[name="csrf-token"]').content);
    formData.append('content', content);

    // Silinecek resimleri ekle
    const deletedImages = Array.from(document.querySelectorAll('input[name="deleted_images[]"]:not([disabled])'))
        .map(input => input.value);

    if (deletedImages.length > 0) {
        deletedImages.forEach(id => {
            formData.append('deleted_images[]', id);
        });
    }

    // Yeni resimleri ekle
    const imageInput = document.getElementById(`edit-comment-image-${commentId}`);
    if (imageInput && imageInput.files.length > 0) {
        Array.from(imageInput.files).forEach(file => {
            formData.append('image', file);
        });
    }

    fetch(`/comments/update/${commentId}`, {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // CKEditor instance'ını temizle
            if (window.currentEditor) {
                window.currentEditor.destroy()
                    .then(() => {
                        window.currentEditor = null;
                    })
                    .catch(error => {
                        console.error('CKEditor destroy error:', error);
                    });
            }

            const commentElement = document.getElementById(`comment-${commentId}`);
            const editorContainer = document.querySelector(`#editor-${commentId}`);
            if (!editorContainer || !editorContainer.parentNode) return;

            const editContainer = editorContainer.parentNode;
            const textDiv = document.createElement('div');
            textDiv.className = 'text';
            textDiv.innerHTML = data.comment.content;

            if (data.comment.images && data.comment.images.length > 0) {
                const imagesDiv = document.createElement('div');
                imagesDiv.className = 'comment-images';

                data.comment.images.forEach(image => {
                    const link = document.createElement('a');
                    link.href = image.url;
                    link.target = '_blank';
                    link.className = 'comment-image';

                    const img = document.createElement('img');
                    img.src = image.url;
                    img.alt = 'Yorum resmi';
                    img.style.maxHeight = '150px';
                    img.style.marginRight = '5px';
                    img.dataset.imageId = image.id;

                    link.appendChild(img);
                    imagesDiv.appendChild(link);
                });

                textDiv.appendChild(imagesDiv);
            }

            // Düzenleme arayüzünü kaldır ve yeni içerikle değiştir
            editContainer.querySelector(`#editor-${commentId}`).remove();
            editContainer.querySelector('.edit-image-upload')?.remove();
            editContainer.querySelector('.existing-images')?.remove();
            editContainer.querySelector('.ui.buttons')?.remove();
            editContainer.appendChild(textDiv);

            // Başarı mesajı göster
            const successMessage = document.createElement('div');
            successMessage.className = 'ui success message';
            successMessage.innerHTML = `<p>${data.message}</p>`;
            commentElement.insertAdjacentElement('beforebegin', successMessage);

            setTimeout(() => {
                successMessage.remove();
            }, 3000);
        } else {
            alert(data.message || 'Yorum düzenlenirken bir hata oluştu.');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Yorum düzenlenirken bir hata oluştu.');
    });
}

function cancelEdit(commentId) {
    const commentElement = document.getElementById(`comment-${commentId}`);
    if (!commentElement) return;

    const editorContainer = document.querySelector(`#editor-${commentId}`);
    if (!editorContainer || !editorContainer.parentNode) return;

    const editContainer = editorContainer.parentNode;

    // CKEditor instance'ını temizle
    if (window.currentEditor) {
        window.currentEditor.destroy()
            .then(() => {
                window.currentEditor = null;
            })
            .catch(error => {
                console.error('CKEditor destroy error:', error);
            });
    }

    // Düzenleme arayüzünü kaldır
    editContainer.querySelector(`#editor-${commentId}`).remove();
    editContainer.querySelector('.edit-image-upload')?.remove();
    editContainer.querySelector('.existing-images')?.remove();
    editContainer.querySelector('.ui.buttons')?.remove();

    // Orijinal yorumu geri yükle
    fetch(`/comments/${commentId}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const textDiv = document.createElement('div');
                textDiv.className = 'text';
                textDiv.innerHTML = data.comment.content;

                if (data.comment.images && data.comment.images.length > 0) {
                    const imagesDiv = document.createElement('div');
                    imagesDiv.className = 'comment-images';

                    data.comment.images.forEach(image => {
                        const link = document.createElement('a');
                        link.href = image.url;
                        link.target = '_blank';
                        link.className = 'comment-image';

                        const img = document.createElement('img');
                        img.src = image.url;
                        img.alt = 'Yorum resmi';
                        img.style.maxHeight = '150px';
                        img.style.marginRight = '5px';
                        img.dataset.imageId = image.id;

                        link.appendChild(img);
                        imagesDiv.appendChild(link);
                    });

                    textDiv.appendChild(imagesDiv);
                }

                editContainer.appendChild(textDiv);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            location.reload(); // Hata durumunda sayfayı yenile
        });
}

function showHistory(commentId, event) {
    event.preventDefault();

    fetch(`/comments/${commentId}/history`, {
        method: 'GET',
        headers: {
            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content,
            'Accept': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const historyContent = document.querySelector('#comment-history-content .ui.list');
            historyContent.innerHTML = '';

            data.history.forEach(item => {
                const date = new Date(item.created_at).toLocaleString('tr-TR');
                historyContent.innerHTML += `
                    <div class="item" style="margin-bottom: 1rem; padding: 1rem; background: rgba(255,255,255,0.05); border-radius: 4px;">
                        <div class="content">
                            <div class="header" style="color: #fff; margin-bottom: 0.5rem;">
                                ${item.editor.user_nickname} tarafından ${date} tarihinde düzenlendi
                            </div>
                            <div class="description" style="color: rgba(255,255,255,0.7);">
                                <div style="margin-bottom: 0.5rem;">
                                    <strong>Önceki:</strong>
                                    <pre style="white-space: pre-wrap; background: rgba(0,0,0,0.2); padding: 0.5rem; border-radius: 4px;">${item.old_content}</pre>
                                </div>
                                <div>
                                    <strong>Sonraki:</strong>
                                    <pre style="white-space: pre-wrap; background: rgba(0,0,0,0.2); padding: 0.5rem; border-radius: 4px;">${item.new_content}</pre>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });

            if (data.history.length === 0) {
                historyContent.innerHTML = '<div class="item"><div class="content">Bu yorum henüz düzenlenmemiş.</div></div>';
            }

            $('#comment-history-modal').modal('show');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Yorum geçmişi alınırken bir hata oluştu.');
    });
}

function uploadSelectedImage(input) {
    if (!input.files || !input.files[0]) return;

    const file = input.files[0];
    if (file.size > 2 * 1024 * 1024) {
        alert('Resim en fazla 2MB boyutunda olmalıdır.');
        input.value = '';
        return;
    }

    // Yükleme göstergesini göster
    document.getElementById('imageUploadProgress').style.display = 'block';

    const formData = new FormData();
    formData.append('image', file);
    formData.append('_token', document.querySelector('meta[name="csrf-token"]').content);

    fetch('/comments/upload-image', {
        method: 'POST',
        body: formData,
        headers: {
            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            console.log("Resim başarıyla yüklendi, URL:", data.url);
            // Resim önizlemesini göster
            const container = document.getElementById('selectedImages');
            container.innerHTML = '';

            const div = document.createElement('div');
            div.className = 'selected-image-container';
            div.innerHTML = `
                <img src="${data.url}" alt="Seçilen resim" style="height: 80px; margin-right: 5px;">
                <button type="button" class="ui mini negative icon button" onclick="removeUploadedImage()">
                    <i class="remove icon"></i>
                </button>
            `;
            container.appendChild(div);

            // Yüklenen resmin URL'sini gizli input'a kaydet
            document.getElementById('uploadedImageUrl').value = data.url;
        } else {
            alert(data.message || 'Resim yüklenirken bir hata oluştu.');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Resim yüklenirken bir hata oluştu.');
    })
    .finally(() => {
        // Yükleme göstergesini gizle
        document.getElementById('imageUploadProgress').style.display = 'none';
        input.value = ''; // Input'u temizle
    });
}

function removeUploadedImage() {
    document.getElementById('selectedImages').innerHTML = '';
    document.getElementById('uploadedImageUrl').value = '';
    document.getElementById('comment-image').value = '';
}

function toggleImageDelete(imageId) {
    const input = document.getElementById(imageId);
    if (input) {
        input.disabled = !input.disabled;
        const button = input.previousElementSibling;
        if (button) {
            if (input.disabled) {
                button.classList.remove('negative');
                button.classList.add('basic');
            } else {
                button.classList.add('negative');
                button.classList.remove('basic');
            }
        }
    }
}

function showEditSelectedImage(input, commentId) {
    const container = document.getElementById(`edit-selected-images-${commentId}`);
    container.innerHTML = '';

    if (input.files.length > 1) {
        alert('En fazla 1 resim ekleyebilirsiniz.');
        input.value = '';
        return;
    }

    Array.from(input.files).forEach((file, index) => {
        if (file.size > 2 * 1024 * 1024) {
            alert('Resim en fazla 2MB boyutunda olmalıdır.');
            return;
        }

        const reader = new FileReader();
        reader.onload = function(e) {
            const div = document.createElement('div');
            div.className = 'selected-image-container';
            div.innerHTML = `
                <img src="${e.target.result}" alt="Seçilen resim" style="height: 80px; margin-right: 5px;">
                <button type="button" class="ui mini negative icon button" onclick="removeEditSelectedImage(${commentId}, ${index})">
                    <i class="remove icon"></i>
                </button>
            `;
            container.appendChild(div);
        };
        reader.readAsDataURL(file);
    });
}

function removeEditSelectedImage(commentId, index) {
    const input = document.getElementById(`edit-comment-image-${commentId}`);
    const container = document.getElementById(`edit-selected-images-${commentId}`);

    const dt = new DataTransfer();
    const files = input.files;

    for (let i = 0; i < files.length; i++) {
        if (i !== index) {
            dt.items.add(files[i]);
        }
    }

    input.files = dt.files;
    container.children[index].remove();
}
</script>

<style>
#custom-comment-system {
    background: #1b1c1d !important;
    border: none;
    border-radius: 4px;
    margin-top: 1rem;
}

/* CKEditor 5 yatay taşma sorununu çözen stiller */
.ck-editor__editable {
    max-width: 100% !important;
    overflow-wrap: break-word !important;
    word-wrap: break-word !important;
    word-break: break-all !important;
}

.ck.ck-editor__editable_inline {
    overflow: auto !important;
    white-space: normal !important;
}

.ck.ck-editor__editable_inline > * {
    max-width: 100% !important;
    overflow-wrap: break-word !important;
}

.ck-editor__editable_inline p {
    white-space: normal !important;
}

#custom-comment-system .ui.comments {
    max-width: 100%;
    margin: 1rem 0;
}

#custom-comment-system .comment {
    background: #2d2d2d;
    border-radius: 4px;
    padding: 1rem;
    margin: 0.5rem 0;
}

#custom-comment-system .comment.pinned {
    border-left: 3px solid #5c6bc0;
    background: #252525;
}

#custom-comment-system .comment .content {
    color: #fff;
}

#custom-comment-system .comment .author {
    color: #fff;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
}

#custom-comment-system .comment .author .icon {
    font-size: 0.8em;
    color: #5c6bc0;
}

#custom-comment-system .comment .metadata {
    color: rgba(255,255,255,0.7);
    display: flex;
    gap: 1rem;
    align-items: center;
}

#custom-comment-system .comment .like-count {
    display: flex;
    align-items: center;
    gap: 0.25rem;
}

#custom-comment-system .comment .text {
    color: rgba(255,255,255,0.9);
}

#custom-comment-system .comment .actions {
    margin-top: 0.5rem;
}

#custom-comment-system .comment .actions a {
    color: rgba(255,255,255,0.7);
    cursor: pointer;
    margin-right: 1rem;
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
}

#custom-comment-system .comment .actions a:hover {
    color: #fff;
}

#custom-comment-system .comment .actions a.like i.heart.icon {
    color: #e25555;
}

#custom-comment-system .reply.form textarea {
    background: #2d2d2d;
    color: #fff;
    border: 1px solid rgba(255,255,255,0.1);
    min-height: 100px;
}

#custom-comment-system .ui.primary.button {
    background-color: #5c6bc0;
}

#custom-comment-system .selected-images {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin: 10px 0;
}

#custom-comment-system .selected-image-container {
    position: relative;
    display: inline-flex;
    align-items: flex-start;
}

#custom-comment-system .selected-image-container button {
    margin-left: 5px;
}

#custom-comment-system .comment-images {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-top: 10px;
}

#custom-comment-system .comment-image img {
    border-radius: 4px;
}
</style>
                </div>

                <script>
                    var commentsVisible = 0;
                    $(document).ready(function() {
                        $("#showComments").click(function(e) {
                            if (commentsVisible == 0) {
                                document.getElementById("comments-container").setAttribute("style", "display:block");
                                document.getElementById("showComments").setAttribute("style", "display:block;background-color:red");
                                document.getElementById("showComments").innerHTML = "Yorumları Kapat";
                                commentsVisible = 1;
                            } else {
                                document.getElementById("comments-container").setAttribute("style", "display:none");
                                document.getElementById("showComments").setAttribute("style", "display:block;background-color:#5c6bc0");
                                document.getElementById("showComments").innerHTML = "Yorumları Görüntüle";
                                commentsVisible = 0;
                            }
                        });
                    });
                </script>

            </div>


            <script>
                var kont = 0;
                $(document).ready(function() {
                    $("#disquis").click(function(e) {
                        if (kont == 0) {
                            document.getElementById("disqus_thread").setAttribute("style", "display:block");
                            document.getElementById("disqus_recommendations").setAttribute("style",
                                "display:block");
                            document.getElementById("disquis").setAttribute("style",
                                "display:block;background-color:red");
                            document.getElementById("disquis").innerHTML = "Yorumları Kapat";
                            kont = 1;
                        } else {
                            document.getElementById("disqus_thread").setAttribute("style", "display:none");
                            document.getElementById("disqus_recommendations").setAttribute("style", "display:none");
                            document.getElementById("disquis").setAttribute("style",
                                "display:block;background-color:#5c6bc0");
                            document.getElementById("disquis").innerHTML = "Yorumları Görüntüle";
                            kont = 0;
                        }
                    })
                })
            </script>
            <script>
                setTimeout(() => {
                    document.getElementById("disqus_recommendations").setAttribute("style", "display:none");
                }, 1500);
            </script>


            <div class="anizm_column anizm_s300 pl-4 animeIzleBolumListesi">
                <div id="discordInviteBox" version="1.0"><div id="discordInvite" style="width: 300px;"><h5 id="introText" class="noselect loadHidden" style="display: block;">Discord Sunucumuza Davetlisin</h5><div id="discordData"><div id="serverImg" class="discordLink loadHidden" style="background: url(&quot;https://cdn.discordapp.com/icons/139759798353657857/a_91aea2dd58861f52a6e3e683a4a51b66.jpg&quot;) 50% 50% / 100% 100% repeat scroll padding-box padding-box rgb(54, 57, 63); display: block;"></div><div id="discordInfo"><div id="serverNameBox" class="discordLink"><span class="noselect" id="serverName">ANIZM TV</span></div><div id="status" class="loadHidden" style="display: block;"><div id="statusIndicators" class="noselect"><i id="onlineInd"></i><span id="numOnline">544 Çevrimiçi</span></div></div></div><button type="button" class="discordLink" id="callToAction"><div id="buttonText" class="noselect">Katıl</div></button></div></div></div>
                <div id="discordInviteBox2" version="1.0"><div id="discordInvite2" style="width: 300px;"><h5 id="introText" class="noselect loadHidden" style="display: block;">Discord Sunucumuza Davetlisin</h5><div id="discordData2"><div id="serverImg2" class="discordLink2 loadHidden" style="background: url(&quot;https://cdn.discordapp.com/icons/1332305151721082890/91aea2dd58861f52a6e3e683a4a51b66.jpg&quot;) 50% 50% / 100% 100% repeat scroll padding-box padding-box rgb(54, 57, 63); display: block;"></div><div id="discordInfo2"><div id="serverNameBox2" class="discordLink2"><span class="noselect" id="serverName2">AnizmMC</span></div><div id="status2" class="loadHidden" style="display: block;"><div id="statusIndicators2" class="noselect"><i id="onlineInd2"></i><span id="numOnline2">35 Çevrimiçi</span></div></div></div><button type="button" class="discordLink2" id="callToAction2"><div id="buttonText2" class="noselect">Katıl</div></button></div></div></div>
                <div class="animeDetayKutu">
                    <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow" class="animeDetayKutuLink">
                        Anime Detayı
                    </a>
                </div>

                <div class="anizm_box anizm_shadow info_episodeList">
                    <div class="anizm_boxTitle">Bölüm Listesi</div>
                    <div class="episode_searchBox">
                        <input type="text" placeholder="Filtreleyin..." data-episodefilter="">
                        <i class="circular search link icon"></i>
                    </div>

                    <!-- Bölüm listesi geniş ekranlarda uzun liste şeklinde gözükecek. -->
                    <div class="anizm_boxContent anizm_noPadding animeEpisodesLongList">
                                                    <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-1-bolum-izle" class="anizm_colorDefault">
	<div class="episodeLine pfull anizm_textUpper anizm_textBold">
		
					
			<span class="truncateText title">1. Bölüm</span>
			</div>
</a>
                                                    <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-2-bolum-izle" class="anizm_colorDefault">
	<div class="episodeLine pfull anizm_textUpper anizm_textBold">
		
					
			<span class="truncateText title">2. Bölüm</span>
			</div>
</a>
                                                    <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-3-bolum-izle" class="anizm_colorDefault">
	<div class="episodeLine pfull anizm_textUpper anizm_textBold">
		
					
			<span class="truncateText title">3. Bölüm</span>
			</div>
</a>
                                                    <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-4-bolum-izle" class="anizm_colorDefault">
	<div class="episodeLine pfull anizm_textUpper anizm_textBold">
		
					
			<span class="truncateText title">4. Bölüm</span>
			</div>
</a>
                                                    <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-5-bolum-izle" class="anizm_colorDefault">
	<div class="episodeLine pfull anizm_textUpper anizm_textBold">
		
					
			<span class="truncateText title">5. Bölüm</span>
			</div>
</a>
                                                    <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-6-bolum-izle" class="anizm_colorDefault">
	<div class="episodeLine pfull anizm_textUpper anizm_textBold">
		
					
			<span class="truncateText title">6. Bölüm</span>
			</div>
</a>
                                                    <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-7-bolum-izle" class="anizm_colorDefault">
	<div class="episodeLine pfull anizm_textUpper anizm_textBold">
		
					<span style="color:yellow" class="truncateText title">7. Bölüm</span>
			</div>
</a>
                                                    <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-8-bolum-izle" class="anizm_colorDefault">
	<div class="episodeLine pfull anizm_textUpper anizm_textBold">
		
					
			<span class="truncateText title">8. Bölüm</span>
			</div>
</a>
                                                    <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-9-bolum-izle" class="anizm_colorDefault">
	<div class="episodeLine pfull anizm_textUpper anizm_textBold">
		
					
			<span class="truncateText title">9. Bölüm</span>
			</div>
</a>
                                                    <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-10-bolum-izle" class="anizm_colorDefault">
	<div class="episodeLine pfull anizm_textUpper anizm_textBold">
		
					
			<span class="truncateText title">10. Bölüm</span>
			</div>
</a>
                                                    <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-11-bolum-izle" class="anizm_colorDefault">
	<div class="episodeLine pfull anizm_textUpper anizm_textBold">
		
					
			<span class="truncateText title">11. Bölüm</span>
			</div>
</a>
                                                    <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-12-bolum-izle" class="anizm_colorDefault">
	<div class="episodeLine pfull anizm_textUpper anizm_textBold">
		
					
			<span class="truncateText title">12. Bölüm</span>
			</div>
</a>
                                                    <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-13-bolum-final-izle" class="anizm_colorDefault">
	<div class="episodeLine pfull anizm_textUpper anizm_textBold">
		
					
			<span class="truncateText title">13. Bölüm Final</span>
			</div>
</a>
                                            </div>


                    <!-- Bölüm listesi küçük ekranlarda anime detaydaki gibi gözükecek. -->
                    <div class="content pfull animeEpisodesSquareList">
                                                    <div class="ui grid">
                                                                    <div class="four wide computer four wide tablet five wide mobile column bolumKutucugu">
                                        <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-1-bolum">
	<div class="episodeBlock anizm_round pfull anizm_textUpper anizm_colorWhite anizm_textBold anizm_backgroundDark anizm_themeHover">
		1. Bölüm
	</div>
</a>
                                    </div>
                                                                    <div class="four wide computer four wide tablet five wide mobile column bolumKutucugu">
                                        <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-2-bolum">
	<div class="episodeBlock anizm_round pfull anizm_textUpper anizm_colorWhite anizm_textBold anizm_backgroundDark anizm_themeHover">
		2. Bölüm
	</div>
</a>
                                    </div>
                                                                    <div class="four wide computer four wide tablet five wide mobile column bolumKutucugu">
                                        <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-3-bolum">
	<div class="episodeBlock anizm_round pfull anizm_textUpper anizm_colorWhite anizm_textBold anizm_backgroundDark anizm_themeHover">
		3. Bölüm
	</div>
</a>
                                    </div>
                                                                    <div class="four wide computer four wide tablet five wide mobile column bolumKutucugu">
                                        <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-4-bolum">
	<div class="episodeBlock anizm_round pfull anizm_textUpper anizm_colorWhite anizm_textBold anizm_backgroundDark anizm_themeHover">
		4. Bölüm
	</div>
</a>
                                    </div>
                                                                    <div class="four wide computer four wide tablet five wide mobile column bolumKutucugu">
                                        <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-5-bolum">
	<div class="episodeBlock anizm_round pfull anizm_textUpper anizm_colorWhite anizm_textBold anizm_backgroundDark anizm_themeHover">
		5. Bölüm
	</div>
</a>
                                    </div>
                                                                    <div class="four wide computer four wide tablet five wide mobile column bolumKutucugu">
                                        <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-6-bolum">
	<div class="episodeBlock anizm_round pfull anizm_textUpper anizm_colorWhite anizm_textBold anizm_backgroundDark anizm_themeHover">
		6. Bölüm
	</div>
</a>
                                    </div>
                                                                    <div class="four wide computer four wide tablet five wide mobile column bolumKutucugu">
                                        <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-7-bolum">
	<div class="episodeBlock anizm_round pfull anizm_textUpper anizm_colorWhite anizm_textBold anizm_backgroundDark anizm_themeHover">
		7. Bölüm
	</div>
</a>
                                    </div>
                                                                    <div class="four wide computer four wide tablet five wide mobile column bolumKutucugu">
                                        <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-8-bolum">
	<div class="episodeBlock anizm_round pfull anizm_textUpper anizm_colorWhite anizm_textBold anizm_backgroundDark anizm_themeHover">
		8. Bölüm
	</div>
</a>
                                    </div>
                                                                    <div class="four wide computer four wide tablet five wide mobile column bolumKutucugu">
                                        <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-9-bolum">
	<div class="episodeBlock anizm_round pfull anizm_textUpper anizm_colorWhite anizm_textBold anizm_backgroundDark anizm_themeHover">
		9. Bölüm
	</div>
</a>
                                    </div>
                                                                    <div class="four wide computer four wide tablet five wide mobile column bolumKutucugu">
                                        <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-10-bolum">
	<div class="episodeBlock anizm_round pfull anizm_textUpper anizm_colorWhite anizm_textBold anizm_backgroundDark anizm_themeHover">
		10. Bölüm
	</div>
</a>
                                    </div>
                                                                    <div class="four wide computer four wide tablet five wide mobile column bolumKutucugu">
                                        <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-11-bolum">
	<div class="episodeBlock anizm_round pfull anizm_textUpper anizm_colorWhite anizm_textBold anizm_backgroundDark anizm_themeHover">
		11. Bölüm
	</div>
</a>
                                    </div>
                                                                    <div class="four wide computer four wide tablet five wide mobile column bolumKutucugu">
                                        <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-12-bolum">
	<div class="episodeBlock anizm_round pfull anizm_textUpper anizm_colorWhite anizm_textBold anizm_backgroundDark anizm_themeHover">
		12. Bölüm
	</div>
</a>
                                    </div>
                                                                    <div class="four wide computer four wide tablet five wide mobile column bolumKutucugu">
                                        <a href="https://anizm.net/ore-dake-level-up-na-ken-season-2-arise-from-the-shadow-13-bolum-final">
	<div class="episodeBlock anizm_round pfull anizm_textUpper anizm_colorWhite anizm_textBold anizm_backgroundDark anizm_themeHover">
		13. Bölüm Final
	</div>
</a>
                                    </div>
                                                            </div>
                                            </div>
                    <script src="/js/discordInvite.js"></script>
                    <script>
                        discordInvite.init({
                            inviteCode: 'Tq83x6VZQf',
                            title: 'Anizm.TV',
                        });
                        discordInvite.render();
                    </script>
                    <script src="/js/discordInvite2.js?v=10"></script>
                    <script>
                        discordInvite2.init({
                            inviteCode: 'JxckAzUa7U',
                            title: 'AnizmMC',
                        });
                        discordInvite2.render();
                    </script>
                </div>
            </div>
        </div>
    </div>
<h3 class="anizm_sectionTitle mt-3 mb-0" style="text-align:center;"><span>Kategoriler</span></h3><br>
<div class="ui centered grid container">
    <div class="ui compact labels categoriesContainer" style="display:flex; flex-wrap:wrap; justify-content:center; gap:4px; padding:6px 0;">
                <a href="/kategoriler/2" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Aksiyon</a>
                <a href="/kategoriler/52" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Arabalar</a>
                <a href="/kategoriler/7" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Askeri</a>
                <a href="/kategoriler/8" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Bilim-Kurgu</a>
                <a href="/kategoriler/50" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Bunama</a>
                <a href="/kategoriler/9" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Büyü</a>
                <a href="/kategoriler/49" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Çocuklar</a>
                <a href="/kategoriler/10" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Dedektif</a>
                <a href="/kategoriler/54" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Dementia</a>
                <a href="/kategoriler/11" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Doğaüstü-Güçler</a>
                <a href="/kategoriler/12" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Dövüş</a>
                <a href="/kategoriler/30" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Dövüş Sanatları</a>
                <a href="/kategoriler/4" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Dram</a>
                <a href="/kategoriler/6" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Ecchi</a>
                <a href="/kategoriler/56" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Erkeklerin Aşkı</a>
                <a href="/kategoriler/13" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Fantastik</a>
                <a href="/kategoriler/14" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Gerilim</a>
                <a href="/kategoriler/15" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Gizem</a>
                <a href="/kategoriler/16" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Harem</a>
                <a href="/kategoriler/17" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Hazine-Avcılığı</a>
                <a href="/kategoriler/55" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Hentai</a>
                <a href="/kategoriler/18" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Josei</a>
                <a href="/kategoriler/57" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Kızların Aşkı</a>
                <a href="/kategoriler/3" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Komedi</a>
                <a href="/kategoriler/20" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Korku</a>
                <a href="/kategoriler/51" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Live Action</a>
                <a href="/kategoriler/1" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Macera</a>
                <a href="/kategoriler/21" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Mecha</a>
                <a href="/kategoriler/22" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Movie</a>
                <a href="/kategoriler/23" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Müzik</a>
                <a href="/kategoriler/24" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Ninja</a>
                <a href="/kategoriler/25" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">OAD - ONA - OVA</a>
                <a href="/kategoriler/26" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Okul</a>
                <a href="/kategoriler/27" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Oyun</a>
                <a href="/kategoriler/48" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Parodi</a>
                <a href="/kategoriler/53" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Polisiye</a>
                <a href="/kategoriler/28" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Politik</a>
                <a href="/kategoriler/29" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Psikolojik</a>
                <a href="/kategoriler/5" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Romantizm</a>
                <a href="/kategoriler/47" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Samuray</a>
                <a href="/kategoriler/46" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Savaş</a>
                <a href="/kategoriler/31" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Seinen</a>
                <a href="/kategoriler/45" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Şeytanlar</a>
                <a href="/kategoriler/32" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Shoujo</a>
                <a href="/kategoriler/33" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Shoujo-Ai</a>
                <a href="/kategoriler/34" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Shounen</a>
                <a href="/kategoriler/35" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Shounen-Ai</a>
                <a href="/kategoriler/37" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Spor</a>
                <a href="/kategoriler/38" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Süper-Güç</a>
                <a href="/kategoriler/39" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Tarihi</a>
                <a href="/kategoriler/40" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Tuhaf</a>
                <a href="/kategoriler/41" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Uzay</a>
                <a href="/kategoriler/42" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Vampir</a>
                <a href="/kategoriler/43" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Yaoi</a>
                <a href="/kategoriler/36" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Yaşamdan Kesitler</a>
                <a href="/kategoriler/44" class="ui small label" style="font-size:0.80rem; margin:1px; display:inline-block; background-color:#202020; color:white; border:1px solid #444;">Yuri</a>
            </div>
</div>

<div class="ui centered grid container mt-3">
    <a href="https://anizm.net/sasirt-beni" class="ui button fluid orange" style="width:100%; margin-bottom:15px;">Şaşırt Beni</a>
</div>
</div>
<div class="ui modal long customAjaxForm" js-controller="popup">
    <i class="close icon"></i>
    <div class="title pfull anizm_textUpper anizm_textBold"></div>
    <div class="content scrolling">
        <div class="anizm_alignCenter">
            <div class="ui active inline loader"></div>
        </div>
    </div>
</div>

<footer>
    <div class="bizKimiz">
        <h2 class="anizm_sectionTitle mb-4"><span>Biz Kimiz?</span></h2>
        <div>Türkiye'nin Anime ve ÇizgiFilm Kanalı. Her türlü görüş ve önerileriniz için <a href="/cdn-cgi/l/email-protection#87eee9e1e8c7e6e9eefdeaa9f3f1" target="_blank"><span class="__cf_email__" data-cfemail="85ecebe3eac5e4ebecffe8abf1f3">[email&nbsp;protected]</span></a> adresine e-posta
            göndererek ANIZM.TV ailemizin gelişmesine katkıda bulunabilirsiniz.
        </div>
        <div class="mt-2" style="font-size: 0.9em; opacity: 0.9;">
            <strong>Önemli Bilgilendirme:</strong> Sitemizdeki tüm video içerikleri üçüncü taraf sunucularda barındırılmaktadır.
            Anizm.TV kendi sunucularında video içeriği barındırmamaktadır. Telif hakkı talepleri ilgili video
            sağlayıcılarına iletilmelidir.
        </div>
        <br>
        <div>Copyright © 2013-2025<br>Anizm.TV Türkçe Altyazılı Anime İzle | Her hakkı saklıdır.</div>
        <div class="social mt-2">
            <ul>
                <li><a href="https://www.facebook.com/AnizmTV.Official" target="_blank" class="ui circular label big" title="Facebook"><i class="icon facebook"></i></a></li>
                <li><a href="https://www.instagram.com/anizmtv/" target="_blank" class="ui circular label big" title="Instagram"><i class="icon instagram"></i></a></li>
            </ul>
        </div>
    </div>
    <div class="list footerIletisim">
        <h2 class="anizm_sectionTitle mb-4"><span>İletişim Yolları</span></h2>
        <ul class="anizm_textUpper">
            <li><a class="anizm_colorDefault" href="#" js-widget="popup" id="emailinfo">E-posta</a></li>
            <li><a href="https://anizm.net/iletisimformu" class="anizm_colorDefault">İletişim Formu</a></li>
            <li><a href="https://anizm.tv/dc" rel="nofollow" class="anizm_colorDefault" target="_blank">Discord
                    Sunucumuz</a></li>
        </ul>
        <div class="ui popup" id="emailinfo_menu">
            <div class="anizm_colorWhite"><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="caa3a4aca58aaba4a3b0a7e4bebc">[email&nbsp;protected]</a></div>
        </div>
    </div>
    <div class="list hizliErisim">
        <h2 class="anizm_sectionTitle mb-4"><span>Hızlı Erişim</span></h2>
        <ul class="anizm_textUpper">
                            <li><a class="anizm_colorDefault" href="https://anizm.net/girisyap">Giriş Yap</a></li>
                <li><a class="anizm_colorDefault" href="https://anizm.net/uyeol">Üye ol</a></li>
                        <li><a class="anizm_colorDefault" href="https://anizm.net/sss">SSS</a></li>
            <li><a class="anizm_colorDefault" href="https://anizm.net/ekibekatil">Ekibe başvur</a></li>
            <li><a class="anizm_colorDefault" href="https://anizm.net/hakkimizda">Hakkımızda</a></li>
            <li><a class="anizm_colorDefault" href="https://anizm.net/hizmet-sartlari">Hizmet Şartları</a></li>
            <li><a class="anizm_colorDefault" href="https://anizm.net/gizlilik-politikasi">Gizlilik Politikası</a></li>
        </ul>
    </div>

</footer>
</main>
<!-- Anti-adblock script yüklemesi - son öncelikli -->

<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script></body></html>