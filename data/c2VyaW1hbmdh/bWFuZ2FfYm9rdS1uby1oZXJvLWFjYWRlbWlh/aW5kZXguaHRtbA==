<!DOCTYPE html><html lang="tr"><head>
	<link rel="icon" type="image/x-icon" href="/images/favicon.ico">
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css">
<link type="text/css" rel="stylesheet" href="/css/style.css?version=55">
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="csrf-token" content="yIuwLxVuGvaYsrwf4CRGYgKqm6k4GqCgNd2nMSo5">
<script>
    var a = 'serimanga';
    var b = '.com';
    if(top.location.host != a + b){
        window.location.href = 'https://' + a + b;
    }
</script>
<!-- IN THE <HEAD> TAG <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> -->
<script data-ad-client="ca-pub-3183243250161254" async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<script async="" src="https://a.spolecznosci.net/core/e27ec572dfb4eb36195442ea33bad712/main.js"></script>
   <script type="text/javascript">

    var spwidth = window.innerWidth || document.documentElement.clientWidth  || document.body.clientWidth;
    var _qasp = _qasp || [];
        _qasp.push('go');

        if(spwidth < 750) {
            _qasp.push(['setFastPAID','sadMOBILE m.serimanga']);
        } else {
            _qasp.push(['setFastPAID','sadSerimanga']);
        }

</script>
<title>Boku no Hero Academia Manga Oku - Seri Manga</title>
<meta name="description" content="Vahim bir günde insanlık çeşitli fiziksel düzensizlikler göstermeye başladı. Bunlara daha sonra &quot;benlik&quot; dendi ve çoğu insanın bedeninin özel eğilimler gösterdiği &quot;insanüstü bir..."><meta property="og:description" content="Vahim bir günde insanlık çeşitli fiziksel düzensizlikler göstermeye başladı. Bunlara daha sonra &quot;benlik&quot; dendi ve çoğu insanın bedeninin özel eğilimler gösterdiği &quot;insanüstü bir..."><meta name="twitter:description" content="Vahim bir günde insanlık çeşitli fiziksel düzensizlikler göstermeye başladı. Bunlara daha sonra &quot;benlik&quot; dendi ve çoğu insanın bedeninin özel eğilimler gösterdiği &quot;insanüstü bir...">
<meta name="keywords" content="boku no hero academia, doğaüstü, aksiyon, komedi, okul yaşamı, shounen">
<meta name="robots" content="all">
<meta name="site_name" content="Seri Manga"><meta property="og:site_name" content="Seri Manga">
<meta name="card" content="summary_large_image"><meta name="twitter:card" content="summary_large_image">
<meta name="type" content="website"><meta property="og:type" content="website">
<meta name="url" content="https://serimanga.com/manga/boku-no-hero-academia"><meta property="og:url" content="https://serimanga.com/manga/boku-no-hero-academia">
<meta name="canonical" content="https://serimanga.com/manga/boku-no-hero-academia">
<meta name="locale" content="tr_TR"><meta property="og:locale" content="tr_TR">
<link rel="image_src" href="https://serimanga.com/uploads/2019/02/04/zgtlgGSvEACVAFx.jpg"><meta name="image" content="https://serimanga.com/uploads/2019/02/04/zgtlgGSvEACVAFx.jpg"><meta property="og:image" content="https://serimanga.com/uploads/2019/02/04/zgtlgGSvEACVAFx.jpg"><meta name="twitter:image" content="https://serimanga.com/uploads/2019/02/04/zgtlgGSvEACVAFx.jpg">

<style>
    .hideDesktop{display:None}
    @media(max-width:420px){
        .hideDesktop{display:block}
    }
    .t10-all{position:relative;z-index:999}
</style>
<script type="text/javascript" src="//static.criteo.net/js/ld/publishertag.js"></script>
    <style>
        .dark-mode .notif-bg .notif-col a:hover{
            background-color:#29246b;
        }
    </style>
<style>AD-SLOT,
AD-TRIPLE-BOX,
DFP-AD,
[class^="adDisplay-module"],
[class^="amp-ad-"],
[data-ad-cls],
[data-adbridg-ad-class],
[data-css-class="dfp-inarticle"],
[data-d-ad-id],
[data-desktop-ad-id],
[data-dynamic-ads],
[data-ez-name],
[data-freestar-ad],
[data-id^="div-gpt-ad"],
[data-m-ad-id],
[data-mobile-ad-id],
[data-name="adaptiveConstructorAd"],
[data-rc-widget],
[data-role="tile-ads-module"],
[data-template-type="nativead"],
[data-testid="ad_testID"],
[data-type="ad-vertical"],
[id^="ad-wrap-"],
[id^="ad_sky"],
[id^="ad_slider"],
[id^="section-ad-banner"],
[onclick^="location.href='http://www.reimageplus.com"],
a-ad,
a[style="width:100%;height:100%;z-index:10000000000000000;position:absolute;top:0;left:0;"],
ad-shield-ads,
app-ad,
app-advertisement,
app-large-ad,
ark-top-ad,
article.ad,
aside[id^="adrotate_widgets-"],
atf-ad-slot,
bottomadblock,
display-ads,
div[class^="Adstyled__AdWrapper-"],
div[class^="Display_displayAd"],
div[class^="kiwi-ad-wrapper"],
div[class^="native-ad-"],
div[data-ad-placeholder],
div[data-ad-wrapper],
div[data-adname],
div[data-adunit-path],
div[data-adunit],
div[data-adzone],
div[data-alias="300x250 Ad 1"],
div[data-alias="300x250 Ad 2"],
div[data-content="Advertisement"],
div[data-contentexchange-widget],
div[data-dfp-id],
div[data-id-advertdfpconf],
div[data-insertion],
div[data-mini-ad-unit],
div[data-native-ad],
div[data-spotim-slot],
div[id^="_vdo_ads_player_ai_"],
div[id^="ad-div-"],
div[id^="ad-position-"],
div[id^="adngin-"],
div[id^="adrotate_widgets-"],
div[id^="ads250_250-widget-"],
div[id^="ads300_100-widget-"],
div[id^="ads300_250-widget-"],
div[id^="adspot-"],
div[id^="advads_ad_"],
div[id^="crt-"][style],
div[id^="div-ads-"],
div[id^="google_dfp_"],
div[id^="gpt_ad_"],
div[id^="lazyad-"],
div[id^="optidigital-adslot"],
div[id^="pa_sticky_ad_box_middle_"],
div[id^="rc-widget-"],
div[id^="sticky_ad_"],
div[id^="vuukle-ad-"],
div[recirculation-ad-container],
gpt-ad,
guj-ad,
hl-adsense,
img[src^="https://images.purevpnaffiliates.com"],
ps-connatix-module,
span[data-ez-ph-id],
span[id^="ezoic-pub-ad-placeholder-"],
topadblock,
zeus-ad,
[class^="tile-picker__CitrusBannerContainer-sc-"],
citrus-ad-wrapper,
[class^="s2nPlayer"],
div[id*="MarketGid"],
[onclick*="content.ad/"],
AMP-AD,
amp-ad,
amp-ad-custom,
amp-connatix-player,
amp-fx-flying-carpet,
a[data-obtrack^="http://paid.outbrain.com/network/redir?"],
a[data-oburl^="https://paid.outbrain.com/network/redir?"],
a[data-redirect^="https://paid.outbrain.com/network/redir?"],
a[data-url^="http://paid.outbrain.com/network/redir?"] + .author,
a[data-widget-outbrain-redirect^="http://paid.outbrain.com/network/redir?"],
a[onmousedown^="this.href='http://paid.outbrain.com/network/redir?"][target="_blank"],
a[onmousedown^="this.href='http://paid.outbrain.com/network/redir?"][target="_blank"] + .ob_source,
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"][target="_blank"] + .ob_source,
a[target="_blank"][onmousedown="this.href^='http://paid.outbrain.com/network/redir?"],
div[id^="taboola-stream-"],
display-ad-component,
div[id^="zergnet-widget"],
a[aria-label="Werbelink"],
[onclick*="window.open('http://deloplen.com/"],
[data-uri^="https://s3.amazonaws.com"],
[data-lnguri^="https://s3.amazonaws.com"],
[onclick*="postlnk.com"],
[class^="DisplayAd"],
div[class*="displayAdRight"],
[data-lnguri*="vipbox"],
[src^="https://aff1xstavka.com"],
[class^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]),
[id^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]),
div[id^="div-gpt-"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]),
.samBannerUnit, .samCodeUnit,
[src^="//dombnrs.com/"],
[src^="https://forum.picbaron.com/Banner"],
div[id][style^="position: fixed; inset: 0px; z-index: 2147483647; background: black"][style*="opacity: 0.01"],
div[class$="player-promo-col"],
div#spot-holder.spot-holder[style="display: block;"],
a[dontfo=""][style$="position: absolute; z-index: 2147483647;"],
[data-ad-module]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-width]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-adblockkey]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(html):not(.adsbygoogle),
[data-advadstrackid]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-manager-id]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
div[style^="z-index: 999999; background-image: url(\"data:image/gif;base64,"][style$="position: absolute;"],
a[onclick="openAuc();"],
div[style="position: fixed; display: block; width: 100%; height: 100%; inset: 0px; background-color: rgba(0, 0, 0, 0); z-index: 300000;"],
div[style^="position:fixed;inset:0px;z-index:2147483647;background:black;opacity:0.01"],
a[id][href="https://chpadblock.com/"][rel^="noopener noreferrer"],
a[id][href="https://toolkitspro.com"][rel^="noopener noreferrer"],
a[id][href="https://hamrocsit.com"][rel^="noopener noreferrer"],
iframe.lazyloaded[data-src^="https://rcm-fe.amazon-adsystem.com/"],
[style="position:absolute;top:0;left:0;width: 100%;height: 100%;z-index:2147483647"],
[style="top: 0px; left: 0px; width: 940px; height: 600px; position: absolute; z-index: 2147483647;"],
div[style="position: fixed;top: 0;left: 0;right: 0;bottom:0;z-index: 99999999;background: rgba(0,0,0,.6);"] { display: none !important; }

[data-ad-name],
[data-revive-zoneid],
[name^="google_ads_iframe"],
div[aria-label="Ads"],
div[data-ad-targeting],
div[data-google-query-id],
div[data-native_ad],
div[id^="ad_position_"],
div[id^="dfp-ad-"],
div[id^="ezoic-pub-ad-"],
div[id^="yandex_ad"],
ins.adsbygoogle,
div[id*="ScriptRoot"],
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"][target="_blank"],
.trc_related_container div[data-item-syndicated="true"],
amp-embed[type="taboola"],
[id^="google_ads_iframe"]:not(.rb-adbanner) { display: none !important; }</style></head>
<body style="padding-bottom:0px" class="">
<header>
	<div class="head-logo">
		<a href="https://serimanga.com" title="Seri Manga Online Manga ve Çizgi Roman"><img style="position:absolute; z-index:9999; left:18px; width:200px; height:auto; top:11px" src="/images/logo.png" alt="Seri Manga Online Manga ve Çizgi Roman"></a>
	</div>
	<div class="head-resp">
		<i class="fas fa-bars"></i>
	</div>
	<nav>
		<ul>
			<li><a target="_blank" href="https://anizm.net" title="anime izle">Anime</a></li>
			<li><a target="_blank" href="https://felisnovel.com" title="novel oku">Novel Oku</a></li>
			<li><a target="_blank" href="https://yeppuu.com/" title="anime haber">Anime Haber</a></li>
			<li><a href="/fansublar" title="Çeviri Grupları">Çeviri Grupları</a></li>
			<li><a href="/sikca-sorulan-sorular" title="Sıkça Sorulan Sorular">S.S.S</a></li>
			<li><a href="/mangalar" title="Mangalar">Manga Listesi</a></li>
			<li><a title="Gece Modu" class="dark-mode__btn">Gece Modu</a></li>
		</ul>
		<div class="head-others">
			<form action="https://serimanga.com/mangalar" method="GET" class="search">
				<input type="text" id="hero-demo" name="search" value="" placeholder="Manga Ara" required="">
				<input type="submit" value="">
			</form>
							<div class="buttons">
					<a href="#login" class="spe-log-but">Giriş Yap</a>
				</div>
					</div>
	</nav>
</header>
<div class="container">
    <div class="m-auto pb-3" style="display:table">
                <script type="text/javascript">
            var spwidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
            if (spwidth > 750) {
                document.write('<div class="spolecznoscinet" id="spolecznosci-6807"></div>');
            }
        </script><div class="spolecznoscinet" id="spolecznosci-6807"></div>
            </div>
    <div class="seri-page-row mt-2">
        <div class="seri-page-col1">
            <div class="seri-points">
                <div class="spo-col">
                    <span id="ratingTotalValue">425</span> oy kullanıldı.
                </div>
                <div class="spo-col">
                    <a href="#" class="ratings__item" data-rating-value="1"><i class="fas fa-star pointed"></i></a>
                    <a href="#" class="ratings__item" data-rating-value="2"><i class="fas fa-star pointed"></i></a>
                    <a href="#" class="ratings__item" data-rating-value="3"><i class="fas fa-star pointed"></i></a>
                    <a href="#" class="ratings__item" data-rating-value="4"><i class="fas fa-star pointed"></i></a>
                    <a href="#" class="ratings__item" data-rating-value="5"><i class="fas fa-star "></i></a>
                </div>
                (<span id="ratingCurrentValue">4.8</span>)
            </div>
            <div class="seri-img" style="background-image:url('https://serimanga.com/uploads/2019/02/04/zgtlgGSvEACVAFx.jpg');">
                <div class="d-table">
                    <div class="d-cell va-bottom">
                        <div class="name">Boku no Hero Academia</div>
                                                <div class="sub-text">僕のヒーローアカデミア, My Hero Academia, Kahramanlık Akademim</div>
                                            </div>
                </div>
            </div>
            <div class="seri-fol-button">
                <a id="mangaFollowing" href="javascript:(0)" class="spe-button1 ">
                    <i class="fas fa-plus mr-2"></i><span>Takip Et (3959)</span>
                </a>
            </div>
            <div class="content-app bg1">
                <span class="check-okay"><i class="fas fa-check"></i></span>
                <p>Sitenin tüm imkanlarından faydalanabilmek için adblock eklentinizi kapatmanız gerekmektedir.</p>
            </div>
            <div class="m-auto pt-3" style="display:table">
                <div id="1365983" style="width:300px;height:600px;"></div>
                <script type="text/javascript">
                    Criteo.DisplayAcceptableAdIfAdblocked({
                        "zoneid": 1365983,
                        "containerid": "1365983",
                        "overrideZoneFloor": false
                    });
                </script>
            </div>
        </div>
        <div class="seri-page-col2">
            <div class="manga-detail">
                <div class="spc2-row">
                    <div class="spc2r-col">
                        <h3>KONUSU</h3>
                        <p data-simplebar="" class="demo1">
                            Vahim bir günde insanlık çeşitli fiziksel düzensizlikler göstermeye başladı. Bunlara daha sonra "benlik" dendi ve çoğu insanın bedeninin özel eğilimler gösterdiği "insanüstü bir toplum" ortaya çıktı. Ancak "fenomenin" gelişiyle suç oranları arttı, dünya ulusları bu duruma yanıt veremez oldu. Halkın içinden bu kötü güçlere karşı çıkmaya cüret edenler çıktı! Ve bu çizgi romanlardan çıkma kahramanlık eylemlerini icra edenler halk tarafından tanındı, böylece barışın resmi koruyucuları oldular. Bu benliksiz doğan bir çocuğun, bir numaralı kahramanla tanışıp en iyi kahramanlığa yükselme hikayesini anlatan bir öykü!

<b>Not: Grubumuz serinin çevirisine 2. Sezonun finalinden başlamıştır. Önceki bölümleri farklı kaynaklardan okuyabilirsiniz. Serinin çevirisi en doğru ve düzgün çeviriye sahip olması için resmî versiyondan yapılmaktadır.</b><br>
<b>3. Sezonu izlemiş kişiler <font color="red">125. bölüm</font>den, 4. sezonu izlemiş olanlar ise <span style="color: rgb(255, 0, 0);">190. bölüm</span>den başlayabilirler.</b>
                        </p>
                    </div>
                    <div class="spc2r-col">
                        <div class="spc2rc-row">
                            <div class="spc2rcr-col">
                                <span>Nedir</span>
                                Manga
                            </div>
                            <div class="spc2rcr-col">
                                <span>Görüntülenme</span>
                                5955569
                            </div>
                            <div class="spc2rcr-col">
                                <span>Yayınlanma Yılı</span>
                                2014
                            </div>
                            <div class="spc2rcr-col">
                                <span>Çeviri Durumu</span>
                                                                <div class="is-status is-status--blue">Devam Ediyor</div>
                                                            </div>
                            <div class="spc2rcr-col">
                                <span>Yayınlanması</span>
                                                                <div class="is-status is-status--blue">Devam Ediyor</div>
                                                            </div>
                            <div class="spc2rcr-col">
                                <span>Kategori</span>
                                <div class="spc2rcrc-links">
                                                                        <a href="https://serimanga.com/kategori/dogaustu" alt="Doğaüstü">Doğaüstü</a>,                                                                        <a href="https://serimanga.com/kategori/aksiyon" alt="Aksiyon">Aksiyon</a>,                                                                        <a href="https://serimanga.com/kategori/komedi" alt="Komedi">Komedi</a>,                                                                        <a href="https://serimanga.com/kategori/okul-yasami" alt="Okul Yaşamı">Okul Yaşamı</a>,                                                                        <a href="https://serimanga.com/kategori/shounen" alt="Shounen">Shounen</a>                                                                    </div>
                            </div>
                            <div class="spc2rcr-col">
                                <span>Çeviri Grubu</span>
                                                                <a href="https://serimanga.com/fansub/seri-manga-ceviri" alt="Seri Manga Çeviri">Seri Manga Çeviri</a>,                                                                <a href="https://serimanga.com/fansub/asura-scans-turkiye" alt="Asura Scans Türkiye">Asura Scans Türkiye</a>,                                                                <a href="https://serimanga.com/fansub/cizgiromanoku-net" alt="ÇizgiRomanOku.Net">ÇizgiRomanOku.Net</a>                                                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="m-auto pt-3" style="display:table">

                <!-- 728x90 -->
                <div id="1365984" style="width:728px;height:90px;"></div>
                <script type="text/javascript">
                    Criteo.DisplayAcceptableAdIfAdblocked({
                        "zoneid": 1365984,
                        "containerid": "1365984",
                        "overrideZoneFloor": false
                    });
                </script>
            </div>
            <div class="seri-page-list">
                <div class="sub-top-text">Boku no Hero Academia Bölümleri</div>
                <ul class="spl-list">
                                        <li class="spl-list-item">
                        <a href="https://serimanga.com/manga/boku-no-hero-academia/316" title="Boku no Hero Academia - Bölüm 316: Sıradaki Manga Oku">
                            <span>316</span>
                            <span>Sıradaki</span>
                            <span><span class="mobileHide">17807 Okunma, </span>10 July 2021</span>
                                                    </a>
                                                <div class="chapter-read" data-id="40886" data-read="0"><i class="fas fa-circle"></i> Okudum
                        </div>
                                            </li>
                                        <li class="spl-list-item">
                        <a href="https://serimanga.com/manga/boku-no-hero-academia/315" title="Boku no Hero Academia - Bölüm 315: Örtbas Manga Oku">
                            <span>315</span>
                            <span>Örtbas</span>
                            <span><span class="mobileHide">12769 Okunma, </span>25 June 2021</span>
                                                    </a>
                                                <div class="chapter-read" data-id="40836" data-read="0"><i class="fas fa-circle"></i> Okudum
                        </div>
                                            </li>
                                        <li class="spl-list-item">
                        <a href="https://serimanga.com/manga/boku-no-hero-academia/314" title="Boku no Hero Academia - Bölüm 314: Güzel Nagant Hanım Manga Oku">
                            <span>314</span>
                            <span>Güzel Nagant Hanım</span>
                            <span><span class="mobileHide">10700 Okunma, </span>22 June 2021</span>
                                                    </a>
                                                <div class="chapter-read" data-id="40748" data-read="0"><i class="fas fa-circle"></i> Okudum
                        </div>
                                            </li>
                                        <li class="spl-list-item">
                        <a href="https://serimanga.com/manga/boku-no-hero-academia/313" title="Boku no Hero Academia - Bölüm 313: Uçan Top Bataryası Manga Oku">
                            <span>313</span>
                            <span>Uçan Top Bataryası</span>
                            <span><span class="mobileHide">13216 Okunma, </span>11 June 2021</span>
                                                    </a>
                                                <div class="chapter-read" data-id="40667" data-read="0"><i class="fas fa-circle"></i> Okudum
                        </div>
                                            </li>
                                        <li class="spl-list-item">
                        <a href="https://serimanga.com/manga/boku-no-hero-academia/312" title="Boku no Hero Academia - Bölüm 312: Suikastçı Manga Oku">
                            <span>312</span>
                            <span>Suikastçı</span>
                            <span><span class="mobileHide">18081 Okunma, </span>29 May 2021</span>
                                                    </a>
                                                <div class="chapter-read" data-id="40363" data-read="0"><i class="fas fa-circle"></i> Okudum
                        </div>
                                            </li>
                                        <li class="spl-list-item">
                        <a href="https://serimanga.com/manga/boku-no-hero-academia/311" title="Boku no Hero Academia - Bölüm 311: Buradalar Manga Oku">
                            <span>311</span>
                            <span>Buradalar</span>
                            <span><span class="mobileHide">19538 Okunma, </span>21 May 2021</span>
                                                    </a>
                                                <div class="chapter-read" data-id="40107" data-read="0"><i class="fas fa-circle"></i> Okudum
                        </div>
                                            </li>
                                        <li class="spl-list-item">
                        <a href="https://serimanga.com/manga/boku-no-hero-academia/310" title="Boku no Hero Academia - Bölüm 310: Ustalar ve Çırak Manga Oku">
                            <span>310</span>
                            <span>Ustalar ve Çırak</span>
                            <span><span class="mobileHide">20800 Okunma, </span>15 May 2021</span>
                                                    </a>
                                                <div class="chapter-read" data-id="39838" data-read="0"><i class="fas fa-circle"></i> Okudum
                        </div>
                                            </li>
                                        <li class="spl-list-item">
                        <a href="https://serimanga.com/manga/boku-no-hero-academia/309" title="Boku no Hero Academia - Bölüm 309: Artık Çocuk Değilim Manga Oku">
                            <span>309</span>
                            <span>Artık Çocuk Değilim</span>
                            <span><span class="mobileHide">21543 Okunma, </span>08 May 2021</span>
                                                    </a>
                                                <div class="chapter-read" data-id="39559" data-read="0"><i class="fas fa-circle"></i> Okudum
                        </div>
                                            </li>
                                        <li class="spl-list-item">
                        <a href="https://serimanga.com/manga/boku-no-hero-academia/308" title="Boku no Hero Academia - Bölüm 308: Tüm Güç Manga Oku">
                            <span>308</span>
                            <span>Tüm Güç</span>
                            <span><span class="mobileHide">24283 Okunma, </span>26 April 2021</span>
                                                    </a>
                                                <div class="chapter-read" data-id="39378" data-read="0"><i class="fas fa-circle"></i> Okudum
                        </div>
                                            </li>
                                        <li class="spl-list-item">
                        <a href="https://serimanga.com/manga/boku-no-hero-academia/307" title="Boku no Hero Academia - Bölüm 307: Görüşmeyeli Çok Oldu! Manga Oku">
                            <span>307</span>
                            <span>Görüşmeyeli Çok Oldu!</span>
                            <span><span class="mobileHide">21487 Okunma, </span>20 April 2021</span>
                                                    </a>
                                                <div class="chapter-read" data-id="39234" data-read="0"><i class="fas fa-circle"></i> Okudum
                        </div>
                                            </li>
                                        <li class="spl-list-item">
                        <a href="https://serimanga.com/manga/boku-no-hero-academia/306" title="Boku no Hero Academia - Bölüm 306: Son Oyun Başlıyor Manga Oku">
                            <span>306</span>
                            <span>Son Oyun Başlıyor</span>
                            <span><span class="mobileHide">25333 Okunma, </span>12 April 2021</span>
                                                    </a>
                                                <div class="chapter-read" data-id="39127" data-read="0"><i class="fas fa-circle"></i> Okudum
                        </div>
                                            </li>
                                        <li class="spl-list-item">
                        <a href="https://serimanga.com/manga/boku-no-hero-academia/305" title="Boku no Hero Academia - Bölüm 305: İzuku Midoriya ve Tomura Shigaraki Manga Oku">
                            <span>305</span>
                            <span>İzuku Midoriya ve Tomura Shigaraki</span>
                            <span><span class="mobileHide">27930 Okunma, </span>29 March 2021</span>
                                                    </a>
                                                <div class="chapter-read" data-id="38848" data-read="0"><i class="fas fa-circle"></i> Okudum
                        </div>
                                            </li>
                                        <li class="spl-list-item">
                        <a href="https://serimanga.com/manga/boku-no-hero-academia/304" title="Boku no Hero Academia - Bölüm 304: İzuku Midoriya ve Yagi Toshinori Manga Oku">
                            <span>304</span>
                            <span>İzuku Midoriya ve Yagi Toshinori</span>
                            <span><span class="mobileHide">24713 Okunma, </span>28 March 2021</span>
                                                    </a>
                                                <div class="chapter-read" data-id="38807" data-read="0"><i class="fas fa-circle"></i> Okudum
                        </div>
                                            </li>
                                        <li class="spl-list-item">
                        <a href="https://serimanga.com/manga/boku-no-hero-academia/303" title="Boku no Hero Academia - Bölüm 303: İlk Üç Manga Oku">
                            <span>303</span>
                            <span>İlk Üç</span>
                            <span><span class="mobileHide">24270 Okunma, </span>27 March 2021</span>
                                                    </a>
                                                <div class="chapter-read" data-id="38806" data-read="0"><i class="fas fa-circle"></i> Okudum
                        </div>
                                            </li>
                                        <li class="spl-list-item">
                        <a href="https://serimanga.com/manga/boku-no-hero-academia/302" title="Boku no Hero Academia - Bölüm 302: Ateşi Söndürmenin En Kötü Yolu (2) Manga Oku">
                            <span>302</span>
                            <span>Ateşi Söndürmenin En Kötü Yolu (2)</span>
                            <span><span class="mobileHide">23030 Okunma, </span>26 March 2021</span>
                                                    </a>
                                                <div class="chapter-read" data-id="38805" data-read="0"><i class="fas fa-circle"></i> Okudum
                        </div>
                                            </li>
                                        <li class="spl-list-item">
                        <a href="https://serimanga.com/manga/boku-no-hero-academia/301" title="Boku no Hero Academia - Bölüm 301: Ateşi Söndürmenin En Kötü Yolu Manga Oku">
                            <span>301</span>
                            <span>Ateşi Söndürmenin En Kötü Yolu</span>
                            <span><span class="mobileHide">22255 Okunma, </span>26 March 2021</span>
                                                    </a>
                                                <div class="chapter-read" data-id="38804" data-read="0"><i class="fas fa-circle"></i> Okudum
                        </div>
                                            </li>
                                        <li class="spl-list-item">
                        <a href="https://serimanga.com/manga/boku-no-hero-academia/300" title="Boku no Hero Academia - Bölüm 300: Todoroki Ailesinin Izdırabı Manga Oku">
                            <span>300</span>
                            <span>Todoroki Ailesinin Izdırabı</span>
                            <span><span class="mobileHide">25874 Okunma, </span>24 March 2021</span>
                                                    </a>
                                                <div class="chapter-read" data-id="38803" data-read="0"><i class="fas fa-circle"></i> Okudum
                        </div>
                                            </li>
                                        <li class="spl-list-item">
                        <a href="https://serimanga.com/manga/boku-no-hero-academia/299" title="Boku no Hero Academia - Bölüm 299: Sorunlu Yetiştirme Manga Oku">
                            <span>299</span>
                            <span>Sorunlu Yetiştirme</span>
                            <span><span class="mobileHide">23192 Okunma, </span>24 March 2021</span>
                                                    </a>
                                                <div class="chapter-read" data-id="38802" data-read="0"><i class="fas fa-circle"></i> Okudum
                        </div>
                                            </li>
                                        <li class="spl-list-item">
                        <a href="https://serimanga.com/manga/boku-no-hero-academia/298" title="Boku no Hero Academia - Bölüm 298: Felaket Tellalları Manga Oku">
                            <span>298</span>
                            <span>Felaket Tellalları</span>
                            <span><span class="mobileHide">23357 Okunma, </span>24 March 2021</span>
                                                    </a>
                                                <div class="chapter-read" data-id="38801" data-read="0"><i class="fas fa-circle"></i> Okudum
                        </div>
                                            </li>
                                        <li class="spl-list-item">
                        <a href="https://serimanga.com/manga/boku-no-hero-academia/297" title="Boku no Hero Academia - Bölüm 297: Tartarus Manga Oku">
                            <span>297</span>
                            <span>Tartarus</span>
                            <span><span class="mobileHide">22565 Okunma, </span>24 March 2021</span>
                                                    </a>
                                                <div class="chapter-read" data-id="38800" data-read="0"><i class="fas fa-circle"></i> Okudum
                        </div>
                                            </li>
                                    </ul>
            </div>
            <div class="m-auto pb-3" style="display:table">
                                <!-- kod w miejscu placementu Serimanga.com_ROS_Doublebillboard4 | TRIPLLEBILLBOARD -->
                <script type="text/javascript">
                    var spwidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
                    if (spwidth > 750) {
                        document.write('<div class="spolecznoscinet" id="spolecznosci-6817"></div>');
                    }
                </script><div class="spolecznoscinet" id="spolecznosci-6817"></div>
            </div>
                        <ul class="pagination" role="navigation">
        
                    <li class="page-item disabled" aria-disabled="true" aria-label="« Önceki">
                <span class="page-link" aria-hidden="true">‹</span>
            </li>
        
        
                    
            
            
                                                                        <li class="page-item active" aria-current="page"><span class="page-link">1</span></li>
                                                                                <li class="page-item"><a class="page-link" href="https://serimanga.com/manga/boku-no-hero-academia?page=2">2</a></li>
                                                                                <li class="page-item"><a class="page-link" href="https://serimanga.com/manga/boku-no-hero-academia?page=3">3</a></li>
                                                                                <li class="page-item"><a class="page-link" href="https://serimanga.com/manga/boku-no-hero-academia?page=4">4</a></li>
                                                                                <li class="page-item"><a class="page-link" href="https://serimanga.com/manga/boku-no-hero-academia?page=5">5</a></li>
                                                                                <li class="page-item"><a class="page-link" href="https://serimanga.com/manga/boku-no-hero-academia?page=6">6</a></li>
                                                                                <li class="page-item"><a class="page-link" href="https://serimanga.com/manga/boku-no-hero-academia?page=7">7</a></li>
                                                                                <li class="page-item"><a class="page-link" href="https://serimanga.com/manga/boku-no-hero-academia?page=8">8</a></li>
                                                                    
                            <li class="page-item disabled" aria-disabled="true"><span class="page-link">...</span></li>
            
            
                                
            
            
                                                                        <li class="page-item"><a class="page-link" href="https://serimanga.com/manga/boku-no-hero-academia?page=12">12</a></li>
                                                                                <li class="page-item"><a class="page-link" href="https://serimanga.com/manga/boku-no-hero-academia?page=13">13</a></li>
                                                        
        
                    <li class="page-item">
                <a class="page-link" href="https://serimanga.com/manga/boku-no-hero-academia?page=2" rel="next" aria-label="Sonraki »">›</a>
            </li>
            </ul>

            <div class="mt-4">
                <div id="comments-show" class="btn btn-block btn-info">Yorumları Görüntüle</div>
                <div class="mt-4 mb-4">
	<div class="disqus" style="width:100%;height:auto;"></div>
</div>            </div>
        </div>
    </div>
</div>
<div class="container">
	<div class="ads mt-4 mb-4 d-table w-auto m-auto">
		<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 970*250 banner -->
<ins class="adsbygoogle" style="display:inline-block;width:970px;height:250px" data-ad-client="ca-pub-5574402035773450" data-ad-slot="1436634125"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
	</div>
</div>
<footer>
	<div class="foot-top">
		<div class="container">
			<div class="f-content">
				<div class="f-socials">
																		<a href="https://www.facebook.com/SeriManga/">Facebook</a>
													<a href="https://twitter.com/serimanga">Twitter</a>
															</div>
				<div class="f-links">
					<a href="/" title="Seri Manga Online Manga ve Çizgi Roman">Anasayfa</a>
					<a target="_blank" href="https://serinovel.com/iletisim" title="İletişim">İletişim</a>
					<a href="https://www.diziasya.com/" title="Kore dizisi izle" target="_blank">Kore dizisi izle</a>
					
					<a href="">@ 2018 - Tüm Hakları Saklıdır</a>
				</div>
			</div>
			<div class="yasal-uyari">
				<div>Yasal Uyarı</div>
				<div>Sitemizde yapılan paylaşımların tamamı gönüllü insanların yaptıkları paylaşımlardandan ibaret olup ticari bir amaç bulunmamaktadır. Sitemiz üzerindeki bulunan mangaların şirketinizin ve/veya şahsınızın yayın haklarını ihlal ettiğimizi düşünüyorsanız lütfen info@serimanga.com adresine mail atarak bildiriniz.</div>
			</div>
		</div>
	</div>
	<div class="foot-bottom">
		<div class="container">
				<a href="https://www.ebahissitesi.com/" title="bonus veren siteler" target="_blank">bonus veren siteler</a>
				<a href="https://mobilodemebahis.co/" title="mobil ödeme bahis" target="_blank">mobil ödeme bahis</a>
				<a href="https://bretmichaelscruise.com/" title="canlı slot siteleri" target="_blank"> canlı slot siteleri</a>
				<a href="https://wmtrail.org/" title="canlı tombala siteleri" target="_blank"> canlı tombala siteleri</a>
				<a href="https://www.smokhome.com/" title="Smok Elektronik Sigara" target="_blank">Smok Elektronik Sigara</a>
				<a href="https://www.smokshop.org/" title="Elektronik Sigara" target="_blank">Elektronik Sigara</a>
				<a href="https://casinositeleri.best/" title="casinositeleri.best" target="_blank">casinositeleri.best</a>
				<a href="https://kingroyal.info/" title="kingroyal" target="_blank"> kingroyal</a>
				<a href="https://buharkeyf1.com/elektronik-sigara-satin-al" title="e sigara" target="_blank">e sigara</a>
				<a href="https://grandpashabetgirisi.net/" title="grandpashabet" target="_blank">grandpashabet</a>
				<a href="https://fiteesports.com/" title="grandpashabet giriş" target="_blank">grandpashabet giriş</a>
				<a href="https://meritking.info/" title="meritking" target="_blank">meritking</a>
				<a href="https://meritking.casino/" title="meritking" target="_blank">meritking</a>
				<a href="https://lucky-mobile.com/" title="grandpashabet" target="_blank">grandpashabet</a>
				<a title="deneme bonusu veren siteler" href="https://ajansturk.net/" target="_blank">ajansturk.net</a>
				<a title="deneme bonusu veren siteler" href="https://selimpasaspor.org/" target="_blank">deneme bonusu veren siteler 2023</a>
				<a title="denemebonusuverensiteler.best" href="https://denemebonusuverensiteler.best/" target="_blank">denemebonusuverensiteler.best</a>
				<!-- 									<a title="twitter takipçi satın al" href="https://bayigram.com/twitter-takipci-satin-al/">twitter takipçi satın al</a>
									<a title="bonus veren siteler" href="https://www.ebahissitesi.com/">bonus veren siteler</a>
									<a title="meritroyalbet" href="https://meritroyalbetz.org/">meritroyalbet</a>
									<a title="pasgol" href="https://dzann.com/">pasgol</a>
									<a title="Smok Elektronik Sigara" href="https://www.smokstore.net/">Smok Elektronik Sigara</a>
									<a title="Elektronik Sigara" href="https://www.smokturk.org/">Elektronik Sigara</a>
									<a title="mobil ödeme bahis" href="https://mobilodemebahis.co/">mobil ödeme bahis</a>
									<a title="e sigara" href="https://buharkeyf1.com/elektronik-sigara-satin-al">e sigara</a>
									<a title="grandpashabet" href="https://grandpashabetgirisi.net/">grandpashabet</a>
									<a title="grandpashabet giriş" href="https://fiteesports.com/">grandpashabet giriş</a>
							 -->
		</div>
	</div>
</footer>

<link href="https://fonts.googleapis.com/css?family=Quicksand:300,400,500,700|Rajdhani:700&amp;subset=latin-ext" rel="stylesheet">
<link type="text/css" rel="stylesheet" href="/css/fontawesome-all.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/js-cookie/2.2.0/js.cookie.min.js"></script>
<script src="/js/disqusloader.js"></script>
<script src="/js/remodal.js"></script>
<script src="/js/slick.js"></script>
<script src="/js/ads.js"></script>
<script>
    var ajaxUrl = 'https://serimanga.com/ajax';
    var darkMode = '0';

    setTimeout(function(){
        var adblock = 0;
        if( window.canRunAds === undefined ){
            adblock = 1;
        }
        $.ajax({
            headers: {
                "X-CSRF-TOKEN": $('meta[name="csrf-token"]').attr("content")
            },
            url: ajaxUrl,
            type: "POST",
            data: {
                type: 'adblock',
                adblock: adblock
            },
            dataType: "json"
        })
    }, 5000);
</script>
<script>
    var setIdentifier = 'manga_772';
    var mangaId = 772;
</script>
<script src="/js/custom8.js"></script>
<script>
    function commentsShow(){
        disqusLoader( '.disqus',
        {
                scriptUrl:		'//serimanga.disqus.com/embed.js',
                disqusConfig:	function()
                {
                    this.page.url = 'https://serimanga.com/manga/boku-no-hero-academia';
                    this.page.title = 'Boku no Hero Academia Manga Oku';
                    if(setIdentifier){
                        this.page.identifier = setIdentifier;
                    }
                }
        });
    }
    $('#comments-show').click(function() {
        $('#comments-show').hide();
        commentsShow()
    })
</script>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async="" src="https://www.googletagmanager.com/gtag/js?id=UA-76417063-2"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'UA-76417063-2');
</script><!-- BEGIN ADVERTSERVE CODE -->
<script>
    $("#desktopNotifications").dialog({
        closeOnEscape: true,
        autoOpen: true,
        width:500,
        show: {
            effect: "fade",
            duration: 600
        },
        hide: {
            effect: "fade",
            duration: 600
        }
    });
    $('#desktopNotifications').dialog("open");
</script>


<div class="remodal-overlay remodal-is-closed" style="display: none;"></div><div class="remodal-wrapper remodal-is-closed" style="display: none;"><div data-remodal-id="login" role="dialog" class="remodal remodal-is-initialized remodal-is-closed" tabindex="-1">
        <div class="modal-container">
            <div data-remodal-action="close" class="remodal-close" aria-label="Close"><i class="fas fa-times"></i></div>
            <form method="POST" action="https://serimanga.com/giris" accept-charset="UTF-8"><input name="_token" type="hidden" value="yIuwLxVuGvaYsrwf4CRGYgKqm6k4GqCgNd2nMSo5">
            <div class="modal-content-x">
                <div class="modal-c-top">Giriş Yap</div>
                <div class="modal-c-con">
                    <div class="mccol">
                        <input placeholder="Kullanıcı Adı" class="spe-input1" name="username" type="text">
                        <div class="spe-icon"><i class="fas fa-user"></i></div>
                        <div class="cle"></div>
                    </div>
                    <div class="mccol">
                        <input placeholder="Şifre" class="spe-input1" name="password" type="password" value="">
                        <div class="spe-icon"><i class="fas fa-unlock"></i></div>
                        <div class="cle"></div>
                    </div>
                    <div class="mccol">
                        <button type="submit" class="btn-block spe-button1">GİRİŞ YAP</button>
                    </div>
                    <div class="mccol">
                        <div class="mc-col2">
                        </div>
                        <div class="mc-col2">
                            <a href="https://serimanga.com/sifremi-unuttum" title="Şifremi Unuttum">Şifremi Unuttum</a>
                        </div>
                        <div class="cle"></div>
                    </div>
                    <div class="mc-col-x">
                        VEYA
                    </div>
                    <div class="mccol">
                        <a href="https://serimanga.com/kayit" class="text-white btn-block spe-button2">HESAP OLUŞTUR</a>
                    </div>
                </div>
            </div>

            </form>
        </div>
    </div></div></body></html>