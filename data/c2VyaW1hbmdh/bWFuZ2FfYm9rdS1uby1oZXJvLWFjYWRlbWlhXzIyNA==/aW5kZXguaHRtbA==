<!DOCTYPE html><html lang="tr"><head>
    <link rel="icon" type="image/x-icon" href="/images/favicon.ico">
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css">
<link type="text/css" rel="stylesheet" href="/css/style.css?version=55">
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="csrf-token" content="yIuwLxVuGvaYsrwf4CRGYgKqm6k4GqCgNd2nMSo5">
<script>
    var a = 'serimanga';
    var b = '.com';
    if(top.location.host != a + b){
        window.location.href = 'https://' + a + b;
    }
</script>
<!-- IN THE <HEAD> TAG <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> -->
<script data-ad-client="ca-pub-3183243250161254" async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<script async="" src="https://a.spolecznosci.net/core/e27ec572dfb4eb36195442ea33bad712/main.js"></script>
   <script type="text/javascript">

    var spwidth = window.innerWidth || document.documentElement.clientWidth  || document.body.clientWidth;
    var _qasp = _qasp || [];
        _qasp.push('go');

        if(spwidth < 750) {
            _qasp.push(['setFastPAID','sadMOBILE m.serimanga']);
        } else {
            _qasp.push(['setFastPAID','sadSerimanga']);
        }

</script>
<title>Boku no Hero Academia - Bölüm 224: Diriliş Festivali Manga Oku - Seri Manga</title>
<meta name="description" content="Boku no Hero Academia 224. Bölüm Diriliş Festivali Türkçe manga oku."><meta property="og:description" content="Boku no Hero Academia 224. Bölüm Diriliş Festivali Türkçe manga oku."><meta name="twitter:description" content="Boku no Hero Academia 224. Bölüm Diriliş Festivali Türkçe manga oku.">
<meta name="keywords" content="boku no hero academia, doğaüstü, aksiyon, komedi, okul yaşamı, shounen">
<meta name="robots" content="all">
<meta name="site_name" content="Seri Manga"><meta property="og:site_name" content="Seri Manga">
<meta name="card" content="summary_large_image"><meta name="twitter:card" content="summary_large_image">
<meta name="type" content="website"><meta property="og:type" content="website">
<meta name="url" content="https://serimanga.com/manga/boku-no-hero-academia/224"><meta property="og:url" content="https://serimanga.com/manga/boku-no-hero-academia/224">
<meta name="canonical" content="https://serimanga.com/manga/boku-no-hero-academia/224">
<meta name="locale" content="tr_TR"><meta property="og:locale" content="tr_TR">
<link rel="image_src" href="https://serimanga.com/uploads/2019/02/04/zgtlgGSvEACVAFx.jpg"><meta name="image" content="https://serimanga.com/uploads/2019/02/04/zgtlgGSvEACVAFx.jpg"><meta property="og:image" content="https://serimanga.com/uploads/2019/02/04/zgtlgGSvEACVAFx.jpg"><meta name="twitter:image" content="https://serimanga.com/uploads/2019/02/04/zgtlgGSvEACVAFx.jpg">

<style>
    .hideDesktop{display:None}
    @media(max-width:420px){
        .hideDesktop{display:block}
    }
    .t10-all{position:relative;z-index:999}
</style>
<script type="text/javascript" src="//static.criteo.net/js/ld/publishertag.js"></script>
<style>AD-SLOT,
AD-TRIPLE-BOX,
DFP-AD,
[class^="adDisplay-module"],
[class^="amp-ad-"],
[data-ad-cls],
[data-adbridg-ad-class],
[data-css-class="dfp-inarticle"],
[data-d-ad-id],
[data-desktop-ad-id],
[data-dynamic-ads],
[data-ez-name],
[data-freestar-ad],
[data-id^="div-gpt-ad"],
[data-m-ad-id],
[data-mobile-ad-id],
[data-name="adaptiveConstructorAd"],
[data-rc-widget],
[data-role="tile-ads-module"],
[data-template-type="nativead"],
[data-testid="ad_testID"],
[data-type="ad-vertical"],
[id^="ad-wrap-"],
[id^="ad_sky"],
[id^="ad_slider"],
[id^="section-ad-banner"],
[onclick^="location.href='http://www.reimageplus.com"],
a-ad,
a[style="width:100%;height:100%;z-index:10000000000000000;position:absolute;top:0;left:0;"],
ad-shield-ads,
app-ad,
app-advertisement,
app-large-ad,
ark-top-ad,
article.ad,
aside[id^="adrotate_widgets-"],
atf-ad-slot,
bottomadblock,
display-ads,
div[class^="Adstyled__AdWrapper-"],
div[class^="Display_displayAd"],
div[class^="kiwi-ad-wrapper"],
div[class^="native-ad-"],
div[data-ad-placeholder],
div[data-ad-wrapper],
div[data-adname],
div[data-adunit-path],
div[data-adunit],
div[data-adzone],
div[data-alias="300x250 Ad 1"],
div[data-alias="300x250 Ad 2"],
div[data-content="Advertisement"],
div[data-contentexchange-widget],
div[data-dfp-id],
div[data-id-advertdfpconf],
div[data-insertion],
div[data-mini-ad-unit],
div[data-native-ad],
div[data-spotim-slot],
div[id^="_vdo_ads_player_ai_"],
div[id^="ad-div-"],
div[id^="ad-position-"],
div[id^="adngin-"],
div[id^="adrotate_widgets-"],
div[id^="ads250_250-widget-"],
div[id^="ads300_100-widget-"],
div[id^="ads300_250-widget-"],
div[id^="adspot-"],
div[id^="advads_ad_"],
div[id^="crt-"][style],
div[id^="div-ads-"],
div[id^="google_dfp_"],
div[id^="gpt_ad_"],
div[id^="lazyad-"],
div[id^="optidigital-adslot"],
div[id^="pa_sticky_ad_box_middle_"],
div[id^="rc-widget-"],
div[id^="sticky_ad_"],
div[id^="vuukle-ad-"],
div[recirculation-ad-container],
gpt-ad,
guj-ad,
hl-adsense,
img[src^="https://images.purevpnaffiliates.com"],
ps-connatix-module,
span[data-ez-ph-id],
span[id^="ezoic-pub-ad-placeholder-"],
topadblock,
zeus-ad,
[class^="tile-picker__CitrusBannerContainer-sc-"],
citrus-ad-wrapper,
[class^="s2nPlayer"],
div[id*="MarketGid"],
[onclick*="content.ad/"],
AMP-AD,
amp-ad,
amp-ad-custom,
amp-connatix-player,
amp-fx-flying-carpet,
a[data-obtrack^="http://paid.outbrain.com/network/redir?"],
a[data-oburl^="https://paid.outbrain.com/network/redir?"],
a[data-redirect^="https://paid.outbrain.com/network/redir?"],
a[data-url^="http://paid.outbrain.com/network/redir?"] + .author,
a[data-widget-outbrain-redirect^="http://paid.outbrain.com/network/redir?"],
a[onmousedown^="this.href='http://paid.outbrain.com/network/redir?"][target="_blank"],
a[onmousedown^="this.href='http://paid.outbrain.com/network/redir?"][target="_blank"] + .ob_source,
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"][target="_blank"] + .ob_source,
a[target="_blank"][onmousedown="this.href^='http://paid.outbrain.com/network/redir?"],
div[id^="taboola-stream-"],
display-ad-component,
div[id^="zergnet-widget"],
a[aria-label="Werbelink"],
[onclick*="window.open('http://deloplen.com/"],
[data-uri^="https://s3.amazonaws.com"],
[data-lnguri^="https://s3.amazonaws.com"],
[onclick*="postlnk.com"],
[class^="DisplayAd"],
div[class*="displayAdRight"],
[data-lnguri*="vipbox"],
[src^="https://aff1xstavka.com"],
[class^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]),
[id^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]),
div[id^="div-gpt-"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]),
.samBannerUnit, .samCodeUnit,
[src^="//dombnrs.com/"],
[src^="https://forum.picbaron.com/Banner"],
div[id][style^="position: fixed; inset: 0px; z-index: 2147483647; background: black"][style*="opacity: 0.01"],
div[class$="player-promo-col"],
div#spot-holder.spot-holder[style="display: block;"],
a[dontfo=""][style$="position: absolute; z-index: 2147483647;"],
[data-ad-module]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-width]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-adblockkey]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(html):not(.adsbygoogle),
[data-advadstrackid]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-manager-id]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
div[style^="z-index: 999999; background-image: url(\"data:image/gif;base64,"][style$="position: absolute;"],
a[onclick="openAuc();"],
div[style="position: fixed; display: block; width: 100%; height: 100%; inset: 0px; background-color: rgba(0, 0, 0, 0); z-index: 300000;"],
div[style^="position:fixed;inset:0px;z-index:2147483647;background:black;opacity:0.01"],
a[id][href="https://chpadblock.com/"][rel^="noopener noreferrer"],
a[id][href="https://toolkitspro.com"][rel^="noopener noreferrer"],
a[id][href="https://hamrocsit.com"][rel^="noopener noreferrer"],
iframe.lazyloaded[data-src^="https://rcm-fe.amazon-adsystem.com/"],
[style="position:absolute;top:0;left:0;width: 100%;height: 100%;z-index:2147483647"],
[style="top: 0px; left: 0px; width: 940px; height: 600px; position: absolute; z-index: 2147483647;"],
div[style="position: fixed;top: 0;left: 0;right: 0;bottom:0;z-index: 99999999;background: rgba(0,0,0,.6);"] { display: none !important; }

[data-ad-name],
[data-revive-zoneid],
[name^="google_ads_iframe"],
div[aria-label="Ads"],
div[data-ad-targeting],
div[data-google-query-id],
div[data-native_ad],
div[id^="ad_position_"],
div[id^="dfp-ad-"],
div[id^="ezoic-pub-ad-"],
div[id^="yandex_ad"],
ins.adsbygoogle,
div[id*="ScriptRoot"],
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"][target="_blank"],
.trc_related_container div[data-item-syndicated="true"],
amp-embed[type="taboola"],
[id^="google_ads_iframe"]:not(.rb-adbanner) { display: none !important; }</style></head>
<body class=" " id="reader">
    <style>
        .reader-manga {
            min-height: 400px;
        }
    </style>
    <div class="read-top-menu">
        <div class="rtm-logo">
            <a href="https://serimanga.com" title="Seri Manga Online Manga ve Çizgi Roman"><img src="/images/logo-white.png" alt="Seri Manga Online Manga ve Çizgi Roman"></a>
            <a class="back text-white" href="https://serimanga.com/manga/boku-no-hero-academia" title="Boku no Hero Academia Manga Oku"><i class="fas fa-arrow-left"></i> Boku no Hero Academia </a>
        </div>
        <div class="rtm-chapter">
            <div class="spe-select2">
                <select id="chapterSelect">
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/69">
                            Bölüm 69: Midoriya'yla Bir Röportaj
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/70">
                            Bölüm 70: Vahşi Kedicikler
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/71">
                            Bölüm 71: Kouta
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/71.5">
                            Bölüm 71.5: Özel Bölüm
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/72">
                            Bölüm 72: İkinci Gün
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/73">
                            Bölüm 73: İyi Akşamlar
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/74">
                            Bölüm 74: Duman İşareti
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/75">
                            Bölüm 75: Hayatını Ortaya Koy Kahraman!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/76">
                            Bölüm 76: Kahramanım
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/77">
                            Bölüm 77: Sorun Yok
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/78">
                            Bölüm 78: Kaos Girdabı
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/79">
                            Bölüm 79: Aklını Başına Topla Demir Yumruk
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/80">
                            Bölüm 80: Bakugou Koruma Gücünün Kuruluşu
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/81">
                            Bölüm 81: Kükreyen Kargaşa
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/82">
                            Bölüm 82: Ne Ters Köşe Ama
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/83">
                            Bölüm 83: Kayıp
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/84">
                            Bölüm 84: İida'dan Midoriya'ya
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/85">
                            Bölüm 85: Aptaldan Başka Bir Şey Değilsiniz
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/86">
                            Bölüm 86: Fırtınadan Önce
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/87">
                            Bölüm 87: Çarpışma
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/88">
                            Bölüm 88: Hepimiz Birimiz İçin
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/89">
                            Bölüm 89: Hepsi Tek Bir Kişi İçin
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/90">
                            Bölüm 90: Ulaşmak
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/91">
                            Bölüm 91: Kahraman Olabilirsin!!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/92">
                            Bölüm 92: Birimiz Hepimiz İçin
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/93">
                            Bölüm 93: Birimiz Hepimiz İçin’in Son Kıvılcımı
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/94">
                            Bölüm 94: Öğretmenden Öğrenciye
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/95">
                            Bölüm 95: Sonun Başlangıcı, Başlangıcın Sonu
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/96">
                            Bölüm 96: Ev Ziyaretleri
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/97">
                            Bölüm 97: Gerçekleri Söyle Anne
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/98">
                            Bölüm 98: Yurtlara Doğru
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/99">
                            Bölüm 99: Elveda İki Basamaklı Sayılar, Merhaba Üç Basamaklılar
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/100">
                            Bölüm 100: Özel Hareketler Oluşturmak
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/101">
                            Bölüm 101: Hatsume Mei Adlı Kız
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/102">
                            Bölüm 102: Son Derece Mutlu
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/103">
                            Bölüm 103: Sınav
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/104">
                            Bölüm 104: Savaş Kızışıyor! Gerçek Güçlerini Herkes Görecek!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/105">
                            Bölüm 105: Shiketsu Lisesi Tuzağı
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/106">
                            Bölüm 106: 1-A Sınıfı
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/107">
                            Bölüm 107: Kaminari Denki’nin Düşünceleri
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/108">
                            Bölüm 108: Acele!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/109">
                            Bölüm 109: Kurtarma Sınavı
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/110">
                            Bölüm 110: Kurtarma Sınavı Devam Ediyor
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/111">
                            Bölüm 111: Ateşli Başlangıç
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/112">
                            Bölüm 112: Derdiniz Ne Lan Sizin?
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/113">
                            Bölüm 113: Sınav Sonrası
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/114">
                            Bölüm 114: Sonuçlardan Sonra
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/115">
                            Bölüm 115: Açığa Çıkış
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/116">
                            Bölüm 116: Tartarus’ta Buluşmak
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/117">
                            Bölüm 117: Benliğin Hakkında Konuşma
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/118">
                            Bölüm 118: Anlamsız Savaş
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/119">
                            Bölüm 119: Deku, Kacchan'a Karşı 2
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/120">
                            Bölüm 120: Üçlü
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/121">
                            Bölüm 121: İkinci Dönemin Açılış Töreni
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/122">
                            Bölüm 122: Karşılaşmalarla Dolu Dönem
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/123">
                            Bölüm 123: Rakipsiz
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/124">
                            Bölüm 124: Yaklaşan Bela!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/125">
                            Bölüm 125: Overhaul
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/126">
                            Bölüm 126: Dünyaya Açılmak
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/127">
                            Bölüm 127: Sör Gece Gözü, Midoriya Izuku, Togata Mirio ve All Might.
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/128">
                            Bölüm 128: Çocuk Tanışıyor...
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/129">
                            Bölüm 129: Eri
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/130">
                            Bölüm 130: Gerçeği Dinlemek
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/131">
                            Bölüm 131: Kaderle Savaşmak
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/132">
                            Bölüm 132: Plan
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/133">
                            Bölüm 133: Arayı Kapat, Kirishima!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/134">
                            Bölüm 134: Yürü, Cesur Kızıl İsyan!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/135">
                            Bölüm 135: Rahatsız Edici Bir Konuşma
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/136">
                            Bölüm 136: Avcumuzun İçinde
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/137">
                            Bölüm 137: Önlerine Geç!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/138">
                            Bölüm 138: Koş!!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/139">
                            Bölüm 139: Ürpertici Yer Altı Labirenti!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/140">
                            Bölüm 140: Büyük Üçlü'den Suneater
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/141">
                            Bölüm 141: Hassai Çetesi'nin Arkaplanı
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/142">
                            Bölüm 142: Kalkan ve Kalkan, Mızrak ve Kalkan
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/143">
                            Bölüm 143: Haydi Ortalığı Dağıtalım, Rappa!!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/144">
                            Bölüm 144: Kızıl İsyan (1)
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/145">
                            Bölüm 145: Kızıl İsyan (2)
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/146">
                            Bölüm 146: Geçici Ekip
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/147">
                            Bölüm 147: Twoga!!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/148">
                            Bölüm 148: Genç Twoga’nın Izdırabı
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/149">
                            Bölüm 149: Sinirlenmesene İrinaka
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/150">
                            Bölüm 150: Togata Mirio
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/151">
                            Bölüm 151: Togata Mirio!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/152">
                            Bölüm 152: Lemillion
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/153">
                            Bölüm 153: Dönüşüm!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/154">
                            Bölüm 154: Öngörülemeyen Gelecek
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/155">
                            Bölüm 155: Kurtarıcılar, Kurtarılanlar ve Bir Kahramanın Yeri
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/156">
                            Bölüm 156: Kurtarılanların Gücü
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/157">
                            Bölüm 157: Sınırsız Yüzde Yüz
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/158">
                            Bölüm 158: Chisaki'nin Çarpık Merhameti
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/159">
                            Bölüm 159: Bitti!!!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/160">
                            Bölüm 160: Otoyol
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/161">
                            Bölüm 161: Parlak Gelecek
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/162">
                            Bölüm 162: Uygun Kişi
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/163">
                            Bölüm 163: İçin İçin Yanan Alevler
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/164">
                            Bölüm 164: Masegaki
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/165">
                            Bölüm 165: Çocukların Kalbini Kazanın!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/166">
                            Bölüm 166: Lisans Öğrencilerinin Gururu
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/167">
                            Bölüm 167: Bir Numaralı Kahramanın Başlangıç Noktası
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/168">
                            Bölüm 168: Aoyama'nın Bir Garip Hikayesi
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/169">
                            Bölüm 169: Okul Festivali
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/170">
                            Bölüm 170: Eri İle Birlikte
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/171">
                            Bölüm 171: Centilmen ve La Brava
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/172">
                            Bölüm 172: İşin En Komik Kısmı Okul Festivaline Hazırlanmak (Bölüm 1)
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/173">
                            Bölüm 173: İşin En Komik Kısmı Okul Festivaline Hazırlanmak (Bölüm 2)
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/174">
                            Bölüm 174: Altın Kraliyet Yaprakları
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/175">
                            Bölüm 175: Festival Sabahı
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/176">
                            Bölüm 176: Deku, Centilmen Suçlu'ya Karşı
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/177">
                            Bölüm 177: İnşaat Alanında
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/178">
                            Bölüm 178: La Brava Adındaki Kadın
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/179">
                            Bölüm 179: Okul Festivali Başlıyor!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/180">
                            Bölüm 180: Tanınmayan
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/181">
                            Bölüm 181: Bir Başkası İçin
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/182">
                            Bölüm 182: Okul Festivali Başlasın!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/183">
                            Bölüm 183: Tüm Gün Okul Festivali!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/184">
                            Bölüm 184: Japonya Kahramanlık Sıralaması
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/185">
                            Bölüm 185: Kanatlı Kahraman: Hawks
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/186">
                            Bölüm 186: Endeavor ve Hawks
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/187">
                            Bölüm 187: Kükreyen Alevler! vs. Nomu: High-End
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/188">
                            Bölüm 188: Senin Baban, Bir Numaralı Kahraman
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/189">
                            Bölüm 189: Neden Doğrulmaya Devam Ediyor?
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/190">
                            Bölüm 190: Onun Başlangıcı
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/191">
                            Bölüm 191: Dabi, Hawks ve Endeavor
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/192">
                            Bölüm 192: Todoroki Ailesi
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/193">
                            Bölüm 193: Kalıntılar
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/193.5">
                            Bölüm 193.5: All Might'ın Yükselişi
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/194">
                            Bölüm 194: Yuuei Lisesi Üstünde Soğuk Rüzgârlar
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/195">
                            Bölüm 195: Çarpışma! A Sınıfı, B Sınıfına Karşı!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/196">
                            Bölüm 196: Yap Bunu, Shinso!!!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/197">
                            Bölüm 197: Kaotik Bentezi
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/198">
                            Bölüm 198: Gerektiğinde Ne Durumda Olduğunuzu Bilin!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/199">
                            Bölüm 199: Operasyon, Yeni Doğaçlama Hareketler!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/200">
                            Bölüm 200: Zeki Kumandan
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/201">
                            Bölüm 201: Öngörü!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/202">
                            Bölüm 202: Üçüncü Maç
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/203">
                            Bölüm 203: Uysal! Honenuki Juzo!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/204">
                            Bölüm 204: Motoru Ayarlamak
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/205">
                            Bölüm 205: Sapak
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/206">
                            Bölüm 206: Üçüncü Maçın Sonucu
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/207">
                            Bölüm 207: Erkenci
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/208">
                            Bölüm 208: Dördüncü Maçın Sonucu
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/209">
                            Bölüm 209: Beşinci Maç
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/210">
                            Bölüm 210: Birimiz Hepimiz İçin Rüyası
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/211">
                            Bölüm 211: Miras Alınmış Şey
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/212">
                            Bölüm 212: Miras Alınmış Şey - Kısım 2
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/213">
                            Bölüm 213: Ruhlar Alemi
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/214">
                            Bölüm 214: Kavgamız
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/215">
                            Bölüm 215: Midoriya vs Shinso'nun Son Bölümü!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/216">
                            Bölüm 216: A Sınıfı vs B Sınıfı'nın Son Sonuçları!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/217">
                            Bölüm 217: Yeni Bir Güç ve Hepimiz Birimiz İçin
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/218">
                            Bölüm 218: Meta-İnsan Kurtuluş Hareketi
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/219">
                            Bölüm 219: Fırlayın! Kay ve Fırla!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/220">
                            Bölüm 220: Kötülük Akademim
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/221">
                            Bölüm 221: Hepimiz Birimiz İçin'in Veda Hediyesi
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/222">
                            Bölüm 222: Shigaraki Tomura: Deformasyon
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/223">
                            Bölüm 223: Hamam Böceği
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/224" selected="">
                            Bölüm 224: Diriliş Festivali
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/225">
                            Bölüm 225: Vampirle Görüşme
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/226">
                            Bölüm 226: Aşk Kanı
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/227">
                            Bölüm 227: Uykulu
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/228">
                            Bölüm 228: Kalp Travması
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/229">
                            Bölüm 229: Tek Gereken Şey Kötü Bir Gün
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/230">
                            Bölüm 230: Kederli Adamın Eseri
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/231">
                            Bölüm 231: Yol
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/232">
                            Bölüm 232: Meta Yetenekler ve Benlikler
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/233">
                            Bölüm 233: Parlak Bir Gelecek
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/234">
                            Bölüm 234: Parçalanan Hatıralar
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/235">
                            Bölüm 235: Shimura Tenko: Geçmiş
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/236">
                            Bölüm 236: Shimura Tenko: Geçmiş, Bölüm 2
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/237">
                            Bölüm 237: Shigaraki Tomura: Köken
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/238">
                            Bölüm 238: Özgürlük
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/239">
                            Bölüm 239: Varis
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/240">
                            Bölüm 240: Güç
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/241">
                            Bölüm 241: Röportajlar!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/242">
                            Bölüm 242: Mutlu Yıllar!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/243">
                            Bölüm 243: Endeavor'un Ajansına Doğru!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/244">
                            Bölüm 244: Önerilen Kitap
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/245">
                            Bölüm 245: Harekete Geçmek
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/246">
                            Bölüm 246: Mesaj
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/247">
                            Bölüm 247: Durum Raporu
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/248">
                            Bölüm 248: Tek Seferde Bir Adım
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/249">
                            Bölüm 249: Izdıraplı Todoroki Ailesi
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/250">
                            Bölüm 250: Son
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/251">
                            Bölüm 251: Yalnızca Bir Haftada
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/252">
                            Bölüm 252: Affedilemeyen
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/253">
                            Bölüm 253: Shirakumo
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/254">
                            Bölüm 254: En Çok da Sen Kahraman Olmak İstiyordun
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/255">
                            Bölüm 255: Umutlu Kahraman
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/256">
                            Bölüm 256: Yüksek, Derin, Mavi Gökler
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/257">
                            Bölüm 257: Kim Olursa Olsun, İlerlet
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/258">
                            Bölüm 258: Dostlar
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/259">
                            Bölüm 259: Sessiz Bir Başlangıç
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/260">
                            Bölüm 260: Hayatının Esiri
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/261">
                            Bölüm 261: High Endler
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/262">
                            Bölüm 262: 5 Numaralı Kahraman, Mirko
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/263">
                            Bölüm 263: Ben de Yanınızda Olmak İstiyorum Çocuklar!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/264">
                            Bölüm 264: Onun Adaleti
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/265">
                            Bölüm 265: Kötüler ve Kahramanlar
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/266">
                            Bölüm 266: Mutlu Hayat
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/267">
                            Bölüm 267: Alevler
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/268">
                            Bölüm 268: Mücadele
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/269">
                            Bölüm 269: Üçümüz
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/270">
                            Bölüm 270: Halef
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/271">
                            Bölüm 271: Kara Bulutlar
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/272">
                            Bölüm 272: Günaydın
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/273">
                            Bölüm 273: Yıkım Heyecanı
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/274">
                            Bölüm 274: Arayış
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/275">
                            Bölüm 275: İkinci Karşılaşma
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/276">
                            Bölüm 276: Hile Yaptın!..
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/277">
                            Bölüm 277: Kim?..
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/278">
                            Bölüm 278: Yürüyen Felaket
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/279">
                            Bölüm 279: Kötüler Birliği X UA Öğrencileri
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/280">
                            Bölüm 280: Kızıl İsyan
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/281">
                            Bölüm 281: Plus Ultra
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/282">
                            Bölüm 282: Yıkımın Ayak Sesleri
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/283">
                            Bölüm 283: 75
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/284">
                            Bölüm 284: Göklerde Yapılan Savaş
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/285">
                            Bölüm 285: Bakugo Katsuki'nin Yükselişi
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/286">
                            Bölüm 286: İçimizdeki Kişiler
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/287">
                            Bölüm 287: Hata
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/288">
                            Bölüm 288: Takeo'yu Kurtar!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/289">
                            Bölüm 289: Bayan Dobra ile Bayan İçine Kapanık
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/290">
                            Bölüm 290: Dabi'nin Dansı
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/291">
                            Bölüm 291: Güçlü Kaldığın İçin Teşekkürler
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/292">
                            Bölüm 292: Umudun İpleri
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/293">
                            Bölüm 293: Kahramanlarla Dolu Toplum
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/294">
                            Bölüm 294: Nihai Gösteri
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/295">
                            Bölüm 295: Kararlı
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/296">
                            Bölüm 296: Şiddetli Facia
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/297">
                            Bölüm 297: Tartarus
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/298">
                            Bölüm 298: Felaket Tellalları
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/299">
                            Bölüm 299: Sorunlu Yetiştirme
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/300">
                            Bölüm 300: Todoroki Ailesinin Izdırabı
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/301">
                            Bölüm 301: Ateşi Söndürmenin En Kötü Yolu
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/302">
                            Bölüm 302: Ateşi Söndürmenin En Kötü Yolu (2)
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/303">
                            Bölüm 303: İlk Üç
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/304">
                            Bölüm 304: İzuku Midoriya ve Yagi Toshinori
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/305">
                            Bölüm 305: İzuku Midoriya ve Tomura Shigaraki
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/306">
                            Bölüm 306: Son Oyun Başlıyor
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/307">
                            Bölüm 307: Görüşmeyeli Çok Oldu!
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/308">
                            Bölüm 308: Tüm Güç
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/309">
                            Bölüm 309: Artık Çocuk Değilim
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/310">
                            Bölüm 310: Ustalar ve Çırak
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/311">
                            Bölüm 311: Buradalar
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/312">
                            Bölüm 312: Suikastçı
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/313">
                            Bölüm 313: Uçan Top Bataryası
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/314">
                            Bölüm 314: Güzel Nagant Hanım
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/315">
                            Bölüm 315: Örtbas
                        </option>
                                            <option value="https://serimanga.com/manga/boku-no-hero-academia/316">
                            Bölüm 316: Sıradaki
                        </option>
                                    </select>
            </div>
        </div>
        <div class="rtm-icons">
                            <a class="chapter-read" data-id="26538" data-read="0"><i class="fas fa-circle"></i> <small>Okudum</small></a>
                        <a href="#report"><i class="fas fa-info-circle"></i> <small><span class="mobileHide">Sorun</span>
                    Bildir</small></a>
            <a href="#option"><i class="fas fa-cogs"></i> <small>Okuma Modu</small></a>
        </div>
    </div>
    <div class="reader-content">

        <div class="m-auto pt-3" style="display:table">
                        <script type="text/javascript">
                    var spwidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
                    if (spwidth > 750) {
                        document.write('<div class="spolecznoscinet" id="spolecznosci-6807"></div>');
                    }
                </script><div class="spolecznoscinet" id="spolecznosci-6807"></div>
                    </div>
        <div class="container" id="chapterButtons2">
            <div class="row mt-2 justify-content-between flex-wrap chapter-buttons">
	<div class="col-md-3">
				<a href="https://serimanga.com/manga/boku-no-hero-academia/223" class="mb-2 btn-block btn btn-info">Önceki Bölüm</a>
		</div>
	<div class="col-md-3">
			<a href="https://serimanga.com/manga/boku-no-hero-academia/225" class="mb-2 btn-block btn btn-info">Sonraki Bölüm</a>
		</div>
</div>        </div>
        <div class="container">
            <div class="d-flex justify-content-center pt-3 pb-3">
                <a href="https://felisnovel.com" target="_blank">
                    <img src="https://serimanga.com/images/FelisNovelWeb1.png" alt="Felis Novel Reklam">
                </a>
            </div>
        </div>
        <div class="reader-manga chapter-pages">
                            <img class="chapter-pages__item mt-1 mb-1 active" data-number="1" style="" src="https://serimanga.com/uploads/2019/04/12/QpTYzqFXJlWlsle.jpg">
                            <img class="chapter-pages__item mt-1 mb-1" data-number="2" style="display:none" data-src="https://serimanga.com/uploads/2019/04/12/ZNePfJhjbFctVkI.jpg">
                            <img class="chapter-pages__item mt-1 mb-1" data-number="3" style="display:none" data-src="https://serimanga.com/uploads/2019/04/12/WYYqMGBNkBzdcLR.jpg">
                            <img class="chapter-pages__item mt-1 mb-1" data-number="4" style="display:none" data-src="https://serimanga.com/uploads/2019/04/12/eROOvfzfPygwAod.jpg">
                            <img class="chapter-pages__item mt-1 mb-1" data-number="5" style="display:none" data-src="https://serimanga.com/uploads/2019/04/12/JPrXXuPoljMTWbM.jpg">
                            <img class="chapter-pages__item mt-1 mb-1" data-number="6" style="display:none" data-src="https://serimanga.com/uploads/2019/04/12/NyxmVQwWfQaDMtl.jpg">
                            <img class="chapter-pages__item mt-1 mb-1" data-number="7" style="display:none" data-src="https://serimanga.com/uploads/2019/04/12/SxcNTrKIRpsRYxE.jpg">
                            <img class="chapter-pages__item mt-1 mb-1" data-number="8" style="display:none" data-src="https://serimanga.com/uploads/2019/04/12/mmMEegjboxBUOWr.jpg">
                            <img class="chapter-pages__item mt-1 mb-1" data-number="9" style="display:none" data-src="https://serimanga.com/uploads/2019/04/12/lraXjNKpcqhtbdg.jpg">
                            <img class="chapter-pages__item mt-1 mb-1" data-number="10" style="display:none" data-src="https://serimanga.com/uploads/2019/04/12/BMQYburySeCWjLs.jpg">
                            <img class="chapter-pages__item mt-1 mb-1" data-number="11" style="display:none" data-src="https://serimanga.com/uploads/2019/04/12/gUuviFTbvLYzkaG.jpg">
                            <img class="chapter-pages__item mt-1 mb-1" data-number="12" style="display:none" data-src="https://serimanga.com/uploads/2019/04/12/eiFxrLtOEFZQBVX.jpg">
                            <img class="chapter-pages__item mt-1 mb-1" data-number="13" style="display:none" data-src="https://serimanga.com/uploads/2019/04/12/xYenxsXumZKTCvO.jpg">
                            <img class="chapter-pages__item mt-1 mb-1" data-number="14" style="display:none" data-src="https://serimanga.com/uploads/2019/04/12/FuznuqtXqoJwbvZ.jpg">
                        <div class="container">
                <div class="d-flex justify-content-center pt-3 pb-3">
                    <a href="https://felisnovel.com" target="_blank">
                        <img src="https://serimanga.com/images/FelisNovelWeb1.png" alt="Felis Novel Reklam">
                    </a>
                </div>
            </div>
            <div class="chapter-pages__item mt-1 mb-1" data-number="comments" style="display:none" data-="">
                <div class="container">
                                        <div class="comments-info card card-body" style="font-size:16px;">
                        <center>
                            <i style="color: #fc2e5a;" class="fa fa-heart red"></i> Lütfen okuduğunuz bölüme yorum
                            yapmayı unutmayınız. Unutmayın ki yaptığınız her yorum çevirmenleri ve editörleri
                            cesaretlendirir, mutlu
                            eder. İyi okumalar.
                        </center>
                    </div>
                                            <div class="mt-4 mb-4">
	<div class="disqus" style="width:100%;height:auto;"></div>
</div>                                    </div>
            </div>
        </div>
                    <div class="container">
                <div class="row mt-2 justify-content-between flex-wrap chapter-buttons">
	<div class="col-md-3">
				<a href="https://serimanga.com/manga/boku-no-hero-academia/223" class="mb-2 btn-block btn btn-info">Önceki Bölüm</a>
		</div>
	<div class="col-md-3">
			<a href="https://serimanga.com/manga/boku-no-hero-academia/225" class="mb-2 btn-block btn btn-info">Sonraki Bölüm</a>
		</div>
</div>            </div>
            </div>
    <div class="left-button">
        <button id="pagePrevious" disabled="">
            <i class="fas fa-chevron-left"></i></button>
    </div>
    <div class="right-button">
        <button id="pageNext"><i class="fas fa-chevron-right"></i></button>
    </div>
    <div class="m-auto pt-3" style="display:table">
            <!-- kod w miejscu placementu Serimanga.com_ROS_Doublebillboard2 | DOUBLEBILLBOARD1-->
            <script type="text/javascript">
                var spwidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
                if (spwidth > 750) {
                    document.write('<div class="spolecznoscinet" id="spolecznosci-6811"></div>');
                }
            </script><div class="spolecznoscinet" id="spolecznosci-6811"></div>
            </div>
    <div class="reader-page-select">
        <div class="spe-select3">
            <select id="pageSelect">
                <option value="comments">YORUMLAR</option>
                                    <option value="1" selected="">
                        SAYFA 1/14
                    </option>
                                    <option value="2">
                        SAYFA 2/14
                    </option>
                                    <option value="3">
                        SAYFA 3/14
                    </option>
                                    <option value="4">
                        SAYFA 4/14
                    </option>
                                    <option value="5">
                        SAYFA 5/14
                    </option>
                                    <option value="6">
                        SAYFA 6/14
                    </option>
                                    <option value="7">
                        SAYFA 7/14
                    </option>
                                    <option value="8">
                        SAYFA 8/14
                    </option>
                                    <option value="9">
                        SAYFA 9/14
                    </option>
                                    <option value="10">
                        SAYFA 10/14
                    </option>
                                    <option value="11">
                        SAYFA 11/14
                    </option>
                                    <option value="12">
                        SAYFA 12/14
                    </option>
                                    <option value="13">
                        SAYFA 13/14
                    </option>
                                    <option value="14">
                        SAYFA 14/14
                    </option>
                                <option value="comments">YORUMLAR</option>
            </select>
        </div>
    </div>
    
    
    <div id="dialog" class="popup" style="display:none">
        <div class="spe-modal-bg">
            <div class="spem-text1">
                İstediğiniz geçiş modunu sayfanın sağ üst bölümünde bulunan ikonları kullanarak seçebilirsiniz.
                <br><br>
                <img src="/images/img6.jpg" alt="">
            </div>
            <div class="spem-button">
                <span class="spe-button7 popup-close">Tamam</span>
            </div>
        </div>
    </div>

<link href="https://fonts.googleapis.com/css?family=Quicksand:300,400,500,700|Rajdhani:700&amp;subset=latin-ext" rel="stylesheet">
<link type="text/css" rel="stylesheet" href="/css/fontawesome-all.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/js-cookie/2.2.0/js.cookie.min.js"></script>
<script src="/js/disqusloader.js"></script>
<script src="/js/remodal.js"></script>
<script src="/js/slick.js"></script>
<script src="/js/ads.js"></script>
<script>
    var ajaxUrl = 'https://serimanga.com/ajax';
    var darkMode = '0';

    setTimeout(function(){
        var adblock = 0;
        if( window.canRunAds === undefined ){
            adblock = 1;
        }
        $.ajax({
            headers: {
                "X-CSRF-TOKEN": $('meta[name="csrf-token"]').attr("content")
            },
            url: ajaxUrl,
            type: "POST",
            data: {
                type: 'adblock',
                adblock: adblock
            },
            dataType: "json"
        })
    }, 5000);
</script>
    <script>
        var setIdentifier = 'chapter_26538';
    </script>
<script src="/js/custom8.js"></script>
<script>
    function commentsShow(){
        disqusLoader( '.disqus',
        {
                scriptUrl:		'//serimanga.disqus.com/embed.js',
                disqusConfig:	function()
                {
                    this.page.url = 'https://serimanga.com/manga/boku-no-hero-academia/224';
                    this.page.title = 'Boku no Hero Academia - Bölüm 224: Diriliş Festivali Manga Oku';
                    if(setIdentifier){
                        this.page.identifier = setIdentifier;
                    }
                }
        });
    }
    $('#comments-show').click(function() {
        $('#comments-show').hide();
        commentsShow()
    })
</script>
    <script>
        var ajaxUrl = 'https://serimanga.com/ajax';
        var pageNumber = 1;
        var okumaModu = 'soldanSaga';

        function keyCheck(e) {
            var ev = e || window.event;
            ev.preventDefault();
            var KeyID = ev.keyCode;
            switch (KeyID) {
                case 36:
                    window.location = "https://serimanga.com/manga/boku-no-hero-academia";
                    break;
                case 33:
                case 37:
                    prevPage();
                    break;
                case 34:
                case 39:
                    nextPage();
                    break;
            }
        }

        function displayItem(item, setHistory = 0) {
            if (okumaModu != 'yukaridanAsagi') {
                if (item.length) {
                    showItem(item)
                    pageItem = item;
                    if (setHistory == 0) {
                        setPageParameter(item.attr('data-number'));
                    }
                    if (item.attr('data-number') == 'comments') {
                        commentsShow();
                    }
                    if (pageItem.prev().length) {
                        pagePrevious.prop("disabled", false)
                    } else {
                        pagePrevious.prop("disabled", true)
                    }
                    if (pageItem.next().length) {
                        pageNext.removeClass('lastPage');
                    } else {
                        pageNext.addClass('lastPage');
                    }
                    page.on("scroll mousedown wheel DOMMouseScroll mousewheel keyup touchmove", function () {
                        page.stop();
                    });
                    page.animate({scrollTop: $(".reader-manga").offset().top}, 500, function () {
                        page.off("scroll mousedown wheel DOMMouseScroll mousewheel keyup touchmove");
                    });
                    return false;
                } else {
                    if ($('.chapter-pages__item.active').index() < 1) {
                                                    window.location = 'https://serimanga.com/manga/boku-no-hero-academia/223';
                                            } else {
                                                    window.location = 'https://serimanga.com/manga/boku-no-hero-academia/225';
                                            }
                }
            } else {
                if (item.length) {
                    pageItem = item;
                    $('.chapter-pages__item').removeClass('active');
                    item.addClass('active');
                    if (setHistory == 0) {
                        setPageParameter(item.attr('data-number'));
                    }
                }
            }
        }

        var pageItem = $('.chapter-pages__item.active');
        var pagePrevious = $('#pagePrevious');
        var pageNext = $('#pageNext');
        var pageSelect = $('#pageSelect');
        var chapterSelect = $('#chapterSelect');
        var lastPage = $('.lastPage');
        var page = $("html, body");
        var getUrlParameter = function getUrlParameter(sParam) {
            var sPageURL = window.location.search.substring(1), sURLVariables = sPageURL.split('&'), sParameterName, i;
            for (i = 0; i < sURLVariables.length; i++) {
                sParameterName = sURLVariables[i].split('=');
                if (sParameterName[0] === sParam) {
                    return sParameterName[1] === undefined ? !0 : decodeURIComponent(sParameterName[1])
                }
            }
        };
        if (okumaModu == 'yukaridanAsagi') {
            if (getUrlParameter('page')) {
                setTimeout(function () {
                    $('html, body').animate({scrollTop: $('.chapter-pages__item[data-number=' + getUrlParameter('page') + ']').offset().top}, 750)
                }, 500)
            }
        }

        function scrollPage() {
            if (okumaModu == 'yukaridanAsagi') {
                var lastScrollTop = 0;
                $(window).scroll(function (event) {
                    var distance = $('.chapter-pages__item.active').offset().top;
                    var st = $(this).scrollTop();
                    if (st > lastScrollTop) {
                        if ($(window).scrollTop() >= distance) {
                            if ($(window).scrollTop() > $('.chapter-pages__item.active').height() + distance) {
                                displayItem(pageItem.next())
                            }
                        }
                    } else {
                        if ($(window).scrollTop() <= distance) {
                            if ($(window).scrollTop() < $('.chapter-pages__item.active').height() + distance) {
                                displayItem(pageItem.prev())
                            }
                        }
                    }
                    lastScrollTop = st
                })
            }
        }

        scrollPage();

        function okumaModuFunction(val) {
            if (val == 'soldanSaga' || val == 'yukaridanAsagi') {
                if (val == 'soldanSaga') {
                    $('.chapter-buttons').hide()
                    pageSelect.show()
                    pageNext.show()
                    pagePrevious.show()
                    $('.chapter-pages__item').not(pageItem).hide();
                    okumaModu = 'soldanSaga'
                } else {
                    $('.chapter-buttons').show()
                    pageSelect.hide()
                    pageNext.hide()
                    pagePrevious.hide()
                    $('.chapter-pages__item').show();
                    $('.chapter-pages__item').each(function () {
                        $(this).attr('src', $(this).attr('data-src'))
                    });
                    okumaModu = 'yukaridanAsagi'
                }
                setTimeout(function () {
                }, 1000)
            }
        }

        function hideItem(item) {
            item.removeClass('active').hide()
        }

        function showItem(item) {
            $('.chapter-pages__item').each(function () {
                if (item != $(this)) {
                    hideItem($(this))
                }
            })
            item.attr('src', item.attr('data-src'));
            pageSelect.val(item.attr('data-number'));
            item.addClass('active').show()
        }

        function setPageParameter(pageNumber) {
            var pageUrl = '?page=' + pageNumber;
            window.history.pushState('', '', pageUrl)
        }

        $(document).on("click", "#okumaModu", function (e) {
            var button = $(this);
            var val = button.val();
            okumaModuFunction(val);
            $.ajax({
                headers: {"X-CSRF-TOKEN": $('meta[name="csrf-token"]').attr("content")},
                url: ajaxUrl,
                type: "POST",
                data: {val: val, type: 'okumaModu'},
                dataType: "json",
                success: function (content) {
                    location.reload()
                },
                error: function (content) {
                    alert(JSON.parse(content.responseText).message)
                }
            })
        })
        $(document).on("click", "#reportSubmit", function (e) {
            var button = $(this);
            var reportMessage = $('#reportMessage').val();
            $.ajax({
                headers: {"X-CSRF-TOKEN": $('meta[name="csrf-token"]').attr("content")},
                url: ajaxUrl,
                type: "POST",
                data: {message: reportMessage, url: 'https://serimanga.com/manga/boku-no-hero-academia/224', type: 'report'},
                dataType: "json"
            })
            alert('Sorun bildiriminiz için teşekkür ederiz. En yakın zamanda ilgileneceğiz!')
        })
        $(document).on({
            keydown: function (e) {
                if (e.which === 39) {
                    displayItem(pageItem.next())
                }
                if (e.which === 37) {
                    displayItem(pageItem.prev())
                }
            }
        });
        pageSelect.change(function () {
            displayItem($('.chapter-pages__item[data-number=' + $(this).val() + ']'))
        })
        jQuery(document).ready(function ($) {
            var PrevPage = getUrlParameter('page');
            if (window.history && window.history.pushState) {
                $(window).on('popstate', function () {
                    if (PrevPage != getUrlParameter('page') && getUrlParameter('page') != 'undefined' && getUrlParameter('page')) {
                        displayItem($('.chapter-pages__item[data-number=' + (getUrlParameter('page')) + ']'), 1)
                    }
                    PrevPage = getUrlParameter('page')
                })
            }
        });
        chapterSelect.change(function () {
            window.location.href = $(this).val()
        })
        $(document).on('click', '.chapter-pages__item:not([data-number="comments"])', function () {
            displayItem($(this).next());
            if ($(this).next().length) {
                if (okumaModu == 'yukaridanAsagi') {
                    page.on("scroll mousedown wheel DOMMouseScroll mousewheel keyup touchmove", function () {
                        page.stop()
                    });
                    page.animate({scrollTop: $(this).next().offset().top}, 500, function () {
                        page.off("scroll mousedown wheel DOMMouseScroll mousewheel keyup touchmove")
                    });
                    return !1
                }
            }
        })
        pagePrevious.bind('click', function () {
            displayItem(pageItem.prev())
        });
        pageNext.bind('click', function () {
            displayItem(pageItem.next())
        });
        $(document).on('keyup', function (e) {
            keyCheck(e)
        });
        setPageParameter(pageNumber);
        displayItem(pageItem);
        $(".popup-open").click(function () {
            $(this).closest('.popup').dialog("open")
        });
        $('.popup-close').on('click', function () {
            $(this).closest('.popup').dialog('close')
        })
    </script>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async="" src="https://www.googletagmanager.com/gtag/js?id=UA-76417063-2"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'UA-76417063-2');
</script>
<div class="remodal-overlay remodal-is-closed" style="display: none;"></div><div class="remodal-wrapper remodal-is-closed" style="display: none;"><div data-remodal-id="report" role="dialog" class="remodal popup remodal-is-initialized remodal-is-closed" tabindex="-1">
        <div class="spe-modal-bg2">
            <h3>SORUN BİLDİR</h3>
            <div class="modal-content-x">
                <div class="modal-con-col">
                    <textarea id="reportMessage" class="form-control" placeholder="Sorunu anlatın.."></textarea>
                </div>
            </div>
            <div data-remodal-action="close" class="btn btn-secondary text-white spe-remodal-close mt-0" id="reportSubmit">SORUN BİLDİR
            </div>
            <div data-remodal-action="close" class="spe-remodal-close">KAPAT</div>
        </div>
    </div></div><div class="remodal-wrapper remodal-is-closed" style="display: none;"><div data-remodal-id="option" role="dialog" class="remodal popup remodal-is-initialized remodal-is-closed" tabindex="-1">
        <div class="spe-modal-bg2">
            <h3>AYARLAR</h3>
            <div class="modal-content-x">
                <div class="modal-text4">Okuma Modu</div>
                <div class="modal-t-con">
                    <label class="spe-label1">
                        <input type="radio" id="okumaModu" name="okumaModu" value="soldanSaga" checked="">
                        <span></span>
                        Soldan Sağa
                    </label>
                    <label class="spe-label1">
                        <input type="radio" id="okumaModu" name="okumaModu" value="yukaridanAsagi">
                        <span></span>
                        Yukarıdan Aşağıya
                    </label>
                </div>
            </div>
            <div class="spe-remodal-close">
                <div data-remodal-action="close" class="spe-remodal-close">TAMAM</div>
            </div>
        </div>
    </div></div><div class="remodal-wrapper remodal-is-closed" style="display: none;"><div data-remodal-id="login" role="dialog" class="remodal remodal-is-initialized remodal-is-closed" tabindex="-1">
        <div class="modal-container">
            <div data-remodal-action="close" class="remodal-close" aria-label="Close"><i class="fas fa-times"></i></div>
            <form method="POST" action="https://serimanga.com/giris" accept-charset="UTF-8"><input name="_token" type="hidden" value="yIuwLxVuGvaYsrwf4CRGYgKqm6k4GqCgNd2nMSo5">
            <div class="modal-content-x">
                <div class="modal-c-top">Giriş Yap</div>
                <div class="modal-c-con">
                    <div class="mccol">
                        <input placeholder="Kullanıcı Adı" class="spe-input1" name="username" type="text">
                        <div class="spe-icon"><i class="fas fa-user"></i></div>
                        <div class="cle"></div>
                    </div>
                    <div class="mccol">
                        <input placeholder="Şifre" class="spe-input1" name="password" type="password" value="">
                        <div class="spe-icon"><i class="fas fa-unlock"></i></div>
                        <div class="cle"></div>
                    </div>
                    <div class="mccol">
                        <button type="submit" class="btn-block spe-button1">GİRİŞ YAP</button>
                    </div>
                    <div class="mccol">
                        <div class="mc-col2">
                        </div>
                        <div class="mc-col2">
                            <a href="https://serimanga.com/sifremi-unuttum" title="Şifremi Unuttum">Şifremi Unuttum</a>
                        </div>
                        <div class="cle"></div>
                    </div>
                    <div class="mc-col-x">
                        VEYA
                    </div>
                    <div class="mccol">
                        <a href="https://serimanga.com/kayit" class="text-white btn-block spe-button2">HESAP OLUŞTUR</a>
                    </div>
                </div>
            </div>

            </form>
        </div>
    </div></div></body></html>