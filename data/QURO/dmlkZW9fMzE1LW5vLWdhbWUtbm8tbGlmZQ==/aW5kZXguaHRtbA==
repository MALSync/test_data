<html lang="fr">

<head>
  <script async=""
    src="https://www.googletagmanager.com/gtm.js?id=GTM-5D6VC2L&amp;gtm_auth=&amp;gtm_preview=&amp;gtm_cookies_win=x"></script>
  <script>
    (function (w, d, s, l, i) {
      w[l] = w[l] || [];
      w[l].push({ 'gtm.start': new Date().getTime(), event: 'gtm.js', });
      var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : '';
      j.async = true; j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl + '&gtm_auth=&gtm_preview=&gtm_cookies_win=x';
      f.parentNode.insertBefore(j, f);
    })(window, document, 'script', 'dataLayer', 'GTM-5D6VC2L');</script>
  <script async=""
    src="https://www.googletagmanager.com/gtm.js?id=GTM-5D6VC2L&amp;gtm_auth=&amp;gtm_preview=&amp;gtm_cookies_win=x"></script>
  <script>
    (function (w, d, s, l, i) {
      w[l] = w[l] || [];
      w[l].push({ 'gtm.start': new Date().getTime(), event: 'gtm.js', });
      var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : '';
      j.async = true; j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl + '&gtm_auth=&gtm_preview=&gtm_cookies_win=x';
      f.parentNode.insertBefore(j, f);
    })(window, document, 'script', 'dataLayer', 'GTM-5D6VC2L');</script>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width">
  <link rel="alternate" hreflang="fr-FR" href="https://animationdigitalnetwork.com/video/315-no-game-no-life"
    data-testid="hreflang-fr-FR">
  <link rel="alternate" hreflang="x-default" href="https://animationdigitalnetwork.com/video/315-no-game-no-life"
    data-testid="hreflang-x-default">
  <link rel="canonical" href="https://animationdigitalnetwork.com/video/315-no-game-no-life">
  <title>No Game No Life - streaming - VOSTFR et VF - ADN</title>
  <meta name="description"
    content="Découvrez en HD tous les épisodes de No Game No Life en streaming VOSTFR et VF disponibles sur Anime Digital Network. En 1 clic, accédez à l'intégralité des épisodes !.">
  <meta name="keywords">
  <meta name="robots" content="index">
  <meta property="og:title" content="No Game No Life">
  <meta property="og:type" content="video.tv_show">
  <meta property="og:image" content="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/affiche_600x856.jpg">
  <meta property="og:description" content="Sora et Shiro, frère et sœur passionnés de jeux vidéo et incroyablement doués, se sont élevés au rang de légende urbaine tant ils restaient invaincus, mais ils ne sont aux yeux du monde extérieur que des NEETs et des Hikikomoris. L’apparition de Teto, un jeune garçon se faisant appelé « Dieu », va changer le cours des choses.
Loin du monde réel considéré comme un « jeu pourri », Teto entraîne nos deux héros dans un univers parallèle où la violence est proscrite et où tout conflit se règle par une partie de jeu.
Des 16 peuples vivant là-bas, les « Humains » sont les plus faibles. Suite à de trop nombreuses parties perdues, leur terre et leur nombre sont presque réduits à néant.
Grâce à leur talent, Sora et Shiro pourront-ils inverser la tendance et sauver les Humains ?">
  <meta property="og:url" content="https://animationdigitalnetwork.com/video/315-no-game-no-life">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:site" content="ADNanime">
  <meta property="twitter:creator" content="ADNanime">
  <meta property="twitter:description" content="Sora et Shiro, frère et sœur passionnés de jeux vidéo et incroyablement doués, se sont élevés au rang de légende urbaine tant ils restaient invaincus, mais ils ne sont aux yeux du monde extérieur que des NEETs et des Hikikomoris. L’apparition de Teto, un jeune garçon se faisant appelé « Dieu », va changer le cours des choses.
Loin du monde réel considéré comme un « jeu pourri », Teto entraîne nos deux héros dans un univers parallèle où la violence est proscrite et où tout conflit se règle par une partie de jeu.
Des 16 peuples vivant là-bas, les « Humains » sont les plus faibles. Suite à de trop nombreuses parties perdues, leur terre et leur nombre sont presque réduits à néant.
Grâce à leur talent, Sora et Shiro pourront-ils inverser la tendance et sauver les Humains ?">
  <meta property="twitter:title" content="No Game No Life">
  <meta property="twitter:image:src"
    content="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/affiche_600x856.jpg">
  <script async="" defer="">
    window.googletag = window.googletag || { cmd: [] };
    googletag.cmd.push(function () {
      // Destroy slots before creating new ones
      googletag.destroySlots();

      // Disabling initial load before enabling service, only if it's not the first route visited by user
      if (false) {
        googletag.pubads().disableInitialLoad();
      }

      // new Google slots

      window.googletag
        .defineSlot('/21835257576/ADN_RECTANGLE_TOP', [[970, 90], [728, 90], [970, 250]], 'div-gpt-ad-1569230740302-0')
        .addService(window.googletag.pubads());


      window.googletag
        .defineSlot('/21835257576/ADN_INTERSTITIAL', [1, 1], 'div-gpt-ad-1627562754480-0')
        .addService(window.googletag.pubads());


      // enable services
      googletag.pubads().enableLazyLoad({
        renderMarginPercent: 0
      });
      googletag.pubads().enableSingleRequest();
      googletag.enableServices();

      // Refresh ads only if it's not the first route visited by user
      if (false) {
        googletag.pubads().refresh();
      }
    });
  </script>
  <meta name="next-head-count" content="21">
  <meta name="theme-color" content="#0096FF">
  <meta name="apple-itunes-app" content="app-id=667935767">
  <link rel="icon" href="/favicon.ico">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon/favicon-32x32.webp">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon/favicon-16x16.webp">
  <link rel="mask-icon" href="/images/favicon/safari-pinned-tab.svg" color="#0096ff">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/favicon/apple-touch-icon.webp">
  <meta name="msapplication-TileColor" content="#04121a">
  <meta name="msapplication-config" content="/browserconfig.xml">
  <link rel="manifest" href="/manifest.json" crossorigin="use-credentials">
  <link rel="stylesheet"
    data-href="https://fonts.googleapis.com/css?family=Poppins:200,400,600,700,800&amp;display=swap">
  <link rel="stylesheet"
    data-href="https://fonts.googleapis.com/css?family=Unbounded:200,400,600,700,800&amp;display=swap">
  <link rel="stylesheet" data-href="https://fonts.googleapis.com/css?family=Inter:200,400,600,700,800&amp;display=swap">
  <link rel="stylesheet" data-href="https://fonts.googleapis.com/css2?family=Bebas+Neue&amp;display=swap">
  <link href="/vendor/ads/interstitiel.min.css" rel="stylesheet">
  <link rel="preload" href="/_next/static/css/bc427d470fe4209b.css" as="style">
  <link rel="stylesheet" href="/_next/static/css/bc427d470fe4209b.css" data-n-g=""><noscript data-n-css=""></noscript>
  <script defer="" nomodule="" src="/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script>
  <script src="/_next/static/chunks/webpack-46c6a5884c5dd2f4.js" defer=""></script>
  <script src="/_next/static/chunks/framework-a667dbba83e63e79.js" defer=""></script>
  <script src="/_next/static/chunks/main-b8a3d3c2da235587.js" defer=""></script>
  <script src="/_next/static/chunks/pages/_app-3ab58f4a11bc6fa3.js" defer=""></script>
  <script src="/_next/static/chunks/5589-10f80fffd3c3fce8.js" defer=""></script>
  <script src="/_next/static/chunks/3542-dad9f0e4c53e3582.js" defer=""></script>
  <script src="/_next/static/chunks/1622-7ae19a9edc64d726.js" defer=""></script>
  <script src="/_next/static/chunks/6327-e8320ac5e0810ca6.js" defer=""></script>
  <script src="/_next/static/chunks/530-6ee41c80621d63cd.js" defer=""></script>
  <script src="/_next/static/chunks/198-d19a3c80e88ab04c.js" defer=""></script>
  <script src="/_next/static/chunks/7183-fa70af9dc01f0d6a.js" defer=""></script>
  <script src="/_next/static/chunks/810-cb10a4ae5a7fa2ae.js" defer=""></script>
  <script src="/_next/static/chunks/871-3ff70bbca48fa17e.js" defer=""></script>
  <script src="/_next/static/chunks/4995-c37805957366adfe.js" defer=""></script>
  <script src="/_next/static/chunks/9267-b53a25c23bab6c91.js" defer=""></script>
  <script src="/_next/static/chunks/8915-e5955a54d5fed2da.js" defer=""></script>
  <script src="/_next/static/chunks/pages/video/%5Bshow%5D-d4cbff5a9a347df6.js" defer=""></script>
  <script src="/_next/static/iyQTl64NN8C5sAy274F3k/_buildManifest.js" defer=""></script>
  <script src="/_next/static/iyQTl64NN8C5sAy274F3k/_ssgManifest.js" defer=""></script>
  <style data-styled="active" data-styled-version="5.3.6"></style>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins:200,400,600,700,800&amp;display=swap">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Unbounded:200,400,600,700,800&amp;display=swap">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Inter:200,400,600,700,800&amp;display=swap">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Bebas+Neue&amp;display=swap">
  <script async="" src="https://static.hotjar.com/c/hotjar-2359970.js?sv=6"></script>
  <link as="script" rel="prefetch" href="/_next/static/chunks/pages/index-5efe5a4036b770bd.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/pages/subscribe-66a9d0ec4ce66d12.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/7536-051d0de4ef9bc9ad.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/9491-6fcde69d78e87c27.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/9674-a92b15f41282fdf3.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/1886-b6708b1ccf514116.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/pages/login-d41f518f3ba65d9f.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/9185-2d23de81aa7b5293.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/338-978e6a66f154811c.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/pages/video/%5Bshow%5D/%5Bvideo%5D-8960e3721917031e.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/1228-876948f3a681bc07.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/1890-1f16143645f13c9a.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/pages/video-8ef36a41d24e13c8.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/pages/new-on-adn-38f18febe4ddacbd.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/4376-283f5664401d0749.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/pages/live-93f49a6cdfeb74c4.js">
  <script src="https://securepubads.g.doubleclick.net/tag/js/gpt.js" async="" defer=""></script>
  <script src="/vendor/ads/interstitiel.min.js" async="" defer=""></script>
  <script src="https://securepubads.g.doubleclick.net/tag/js/gpt.js" async="" defer=""></script>
  <script src="/vendor/ads/interstitiel.min.js" async="" defer=""></script>
  <script type="text/javascript"
    src="https://js.sddan.com/GS.d?pa=27993&amp;c=LrSl1&amp;cmp=0&amp;u=https%3A%2F%2Fanimationdigitalnetwork.com%2Fvideo%2F315-no-game-no-life&amp;r=&amp;rand=1721906329653&amp;gdpr=1&amp;gdpr_consent=CQCT9cAQCT9cABcAKBDEA-FgAP_gAEPgAAqIIzQJwABQAKAAsACoAGQAQAAqABbADQANQAigBNAC3AGEAYgA5QCDAIQAToApABcAD0AIQAR0AzoBoADRAGvANoAjsBHoCXgE_gLzAYuAxkBkgDkwHUAPSAgOBGQCMwIzQEoAFAAWABUAEEANAA1ADEAH4AQgBCACLAEdANEAa8A2gCPQF5gMEAZIA5MAAA&amp;globalscope=false&amp;cookieless_ignore=0&amp;fb_consent=1&amp;tbp=true"
    async="" referrerpolicy="unsafe-url"></script>
  <style type="text/css">
    .sd-cmp-xwtxB {
      overflow: hidden !important
    }

    .sd-cmp-1EpGs {
      /*! normalize.css v7.0.0 | MIT License | github.com/necolas/normalize.css */
      --modal-width: 610px;
      --background-color: #fafafa;
      --main-color: #202942;
      --title-color: #202942;
      --text-color: #8492a6;
      --border-color: #e9ecef;
      --overlay-color: #000;
      --background-color-dark: #121725;
      --main-color-dark: #5a6d90;
      --title-color-dark: #5a6d90;
      --text-color-dark: #8492a6;
      --border-color-dark: #202942;
      --overlay-color-dark: #000;
      --border-radius: 24px;
      --font-family: "Roboto";
      --font-family-title: "Roboto Slab";
      --font-size-base: 13px;
      --font-size-big: calc(var(--font-size-base) + 2px);
      --font-size-small: calc(var(--font-size-base) - 2px);
      --font-size-xsmall: calc(var(--font-size-base) - 4px);
      --font-size-xxsmall: calc(var(--font-size-base) - 6px);
      --logo-size: 80px;
      --logo-offset: -20px;
      --skin-size: 75px;
      --spacing-base: 5px;
      --spacing-sm: var(--spacing-base);
      --spacing-md: calc(var(--spacing-base) + 5px);
      --spacing-lg: calc(var(--spacing-base) + 10px);
      --padding-base: 15px;
      --padding-sm: var(--padding-base);
      --padding-md: calc(var(--padding-base) + 10px)
    }

    .sd-cmp-1EpGs html {
      line-height: 1.15;
      -ms-text-size-adjust: 100%;
      -webkit-text-size-adjust: 100%
    }

    .sd-cmp-1EpGs body {
      margin: 0
    }

    .sd-cmp-1EpGs article,
    .sd-cmp-1EpGs aside,
    .sd-cmp-1EpGs footer,
    .sd-cmp-1EpGs header,
    .sd-cmp-1EpGs nav,
    .sd-cmp-1EpGs section {
      display: block
    }

    .sd-cmp-1EpGs h1 {
      font-size: 2em;
      margin: .67em 0
    }

    .sd-cmp-1EpGs figcaption,
    .sd-cmp-1EpGs figure,
    .sd-cmp-1EpGs main {
      display: block
    }

    .sd-cmp-1EpGs figure {
      margin: 1em 40px
    }

    .sd-cmp-1EpGs hr {
      -webkit-box-sizing: content-box;
      box-sizing: content-box;
      height: 0;
      overflow: visible
    }

    .sd-cmp-1EpGs pre {
      font-family: monospace, monospace;
      font-size: 1em
    }

    .sd-cmp-1EpGs a {
      background-color: transparent;
      -webkit-text-decoration-skip: objects
    }

    .sd-cmp-1EpGs a,
    .sd-cmp-1EpGs span {
      -webkit-touch-callout: none;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none
    }

    .sd-cmp-1EpGs abbr[title] {
      border-bottom: none;
      text-decoration: underline;
      -webkit-text-decoration: underline dotted;
      text-decoration: underline dotted
    }

    .sd-cmp-1EpGs b,
    .sd-cmp-1EpGs strong {
      font-weight: inherit;
      font-weight: bolder
    }

    .sd-cmp-1EpGs code,
    .sd-cmp-1EpGs kbd,
    .sd-cmp-1EpGs samp {
      font-family: monospace, monospace;
      font-size: 1em
    }

    .sd-cmp-1EpGs dfn {
      font-style: italic
    }

    .sd-cmp-1EpGs mark {
      background-color: #ff0;
      color: #000
    }

    .sd-cmp-1EpGs small {
      font-size: 80%
    }

    .sd-cmp-1EpGs sub,
    .sd-cmp-1EpGs sup {
      font-size: 75%;
      line-height: 0;
      position: relative;
      vertical-align: baseline
    }

    .sd-cmp-1EpGs sub {
      bottom: -.25em
    }

    .sd-cmp-1EpGs sup {
      top: -.5em
    }

    .sd-cmp-1EpGs audio,
    .sd-cmp-1EpGs video {
      display: inline-block
    }

    .sd-cmp-1EpGs audio:not([controls]) {
      display: none;
      height: 0
    }

    .sd-cmp-1EpGs img {
      border-style: none
    }

    .sd-cmp-1EpGs svg:not(:root) {
      overflow: hidden
    }

    .sd-cmp-1EpGs button,
    .sd-cmp-1EpGs input,
    .sd-cmp-1EpGs optgroup,
    .sd-cmp-1EpGs select,
    .sd-cmp-1EpGs textarea {
      font-size: 100%;
      line-height: 1.15;
      margin: 0;
      height: auto
    }

    .sd-cmp-1EpGs button,
    .sd-cmp-1EpGs input {
      overflow: visible
    }

    .sd-cmp-1EpGs button,
    .sd-cmp-1EpGs select {
      text-transform: none
    }

    .sd-cmp-1EpGs [type=reset],
    .sd-cmp-1EpGs [type=submit],
    .sd-cmp-1EpGs button,
    .sd-cmp-1EpGs html [type=button] {
      -webkit-appearance: button
    }

    .sd-cmp-1EpGs [type=button]::-moz-focus-inner,
    .sd-cmp-1EpGs [type=reset]::-moz-focus-inner,
    .sd-cmp-1EpGs [type=submit]::-moz-focus-inner,
    .sd-cmp-1EpGs button::-moz-focus-inner {
      border-style: none;
      padding: 0
    }

    .sd-cmp-1EpGs [type=button]:-moz-focusring,
    .sd-cmp-1EpGs [type=reset]:-moz-focusring,
    .sd-cmp-1EpGs [type=submit]:-moz-focusring,
    .sd-cmp-1EpGs button:-moz-focusring {
      outline: 1px dotted ButtonText
    }

    .sd-cmp-1EpGs button {
      white-space: normal
    }

    .sd-cmp-1EpGs fieldset {
      padding: .35em .75em .625em
    }

    .sd-cmp-1EpGs legend {
      -webkit-box-sizing: border-box;
      box-sizing: border-box;
      color: inherit;
      display: table;
      max-width: 100%;
      padding: 0;
      white-space: normal
    }

    .sd-cmp-1EpGs progress {
      display: inline-block;
      vertical-align: baseline
    }

    .sd-cmp-1EpGs textarea {
      overflow: auto
    }

    .sd-cmp-1EpGs [type=checkbox],
    .sd-cmp-1EpGs [type=radio] {
      -webkit-box-sizing: border-box;
      box-sizing: border-box;
      padding: 0
    }

    .sd-cmp-1EpGs [type=number]::-webkit-inner-spin-button,
    .sd-cmp-1EpGs [type=number]::-webkit-outer-spin-button {
      height: auto
    }

    .sd-cmp-1EpGs [type=search] {
      -webkit-appearance: textfield;
      outline-offset: -2px
    }

    .sd-cmp-1EpGs [type=search]::-webkit-search-cancel-button,
    .sd-cmp-1EpGs [type=search]::-webkit-search-decoration {
      -webkit-appearance: none
    }

    .sd-cmp-1EpGs ::-webkit-file-upload-button {
      -webkit-appearance: button;
      font: inherit
    }

    .sd-cmp-1EpGs details,
    .sd-cmp-1EpGs menu {
      display: block
    }

    .sd-cmp-1EpGs summary {
      display: list-item
    }

    .sd-cmp-1EpGs canvas {
      display: inline-block
    }

    .sd-cmp-1EpGs [hidden],
    .sd-cmp-1EpGs template {
      display: none
    }

    .sd-cmp-1EpGs.sd-cmp-1Icfl {
      --modal-width: 560px;
      --font-size-base: 12px;
      --logo-size: 70px;
      --logo-offset: -15px;
      --skin-size: 65px;
      --spacing-base: 3px;
      --padding-base: 13px
    }

    .sd-cmp-1EpGs.sd-cmp-ziEj0 {
      --modal-width: 610px;
      --font-size-base: 13px;
      --logo-size: 80px;
      --logo-offset: -20px;
      --skin-size: 75px;
      --spacing-base: 5px;
      --padding-base: 15px
    }

    .sd-cmp-1EpGs.sd-cmp-qPvsF {
      --modal-width: 660px;
      --font-size-base: 14px;
      --logo-size: 90px;
      --logo-offset: -25px;
      --skin-size: 85px;
      --spacing-base: 7px;
      --padding-base: 17px
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-1EpGs {
        --font-size-base: 13px !important
      }
    }

    .sd-cmp-1EpGs .sd-cmp-1wlYk {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: var(--overlay-color);
      opacity: .7;
      z-index: 2147483646
    }

    .sd-cmp-1EpGs .sd-cmp-2jVB1 {
      font-size: var(--font-size-base);
      font-family: var(--font-family), Helvetica, Arial, sans-serif;
      font-weight: 400;
      -webkit-font-smoothing: antialiased;
      line-height: 1.4;
      text-align: left;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-1EpGs .sd-cmp-2jVB1 {
        line-height: 1.2
      }
    }

    .sd-cmp-1EpGs .sd-cmp-1W1Kb {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      z-index: 2147483647
    }

    .sd-cmp-1EpGs * {
      -webkit-box-sizing: border-box;
      box-sizing: border-box;
      min-width: auto;
      min-height: auto;
      margin: 0;
      padding: 0;
      line-height: unset;
      font-family: unset;
      font-size: unset;
      font-weight: unset;
      letter-spacing: normal
    }

    .sd-cmp-1EpGs a {
      font-size: inherit;
      font-weight: 700;
      cursor: pointer;
      text-decoration: underline !important;
      color: var(--text-color) !important;
      -webkit-tap-highlight-color: transparent
    }

    .sd-cmp-1EpGs a:hover {
      text-decoration: none !important
    }

    .sd-cmp-1EpGs svg {
      display: inline-block;
      vertical-align: middle;
      margin-top: -2px;
      -webkit-transition: .2s ease;
      transition: .2s ease
    }

    .sd-cmp-1EpGs h2,
    .sd-cmp-1EpGs h3 {
      font-family: inherit;
      font-size: inherit;
      background: none !important
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-1EpGs {
        --background-color: var(--background-color-dark) !important;
        --main-color: var(--main-color-dark) !important;
        --title-color: var(--title-color-dark) !important;
        --text-color: var(--text-color-dark) !important;
        --border-color: var(--border-color-dark) !important;
        --overlay-color: var(--overlay-color-dark) !important;
        --provider-logo: var(--provider-logo-dark) !important
      }
    }
  </style>
  <style type="text/css">
    .sd-cmp-1AaTO {
      position: relative;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1;
      -webkit-appearance: none !important;
      -moz-appearance: none !important;
      appearance: none !important;
      background: none !important;
      border: none !important;
      -webkit-box-shadow: none !important;
      box-shadow: none !important;
      outline: none !important;
      text-shadow: none !important;
      font-size: inherit !important;
      padding: 0 !important;
      margin: 0 !important;
      width: auto !important
    }

    .sd-cmp-1AaTO .sd-cmp-3G37o,
    .sd-cmp-1AaTO .sd-cmp-AL7Qz {
      display: block;
      font-family: var(--font-family-title), Helvetica, Arial, sans-serif;
      letter-spacing: .4pt;
      font-weight: 500;
      cursor: pointer;
      white-space: nowrap;
      width: auto;
      outline: 0
    }

    .sd-cmp-1AaTO .sd-cmp-3G37o {
      border-radius: calc(var(--border-radius)/2);
      border: 1px solid var(--main-color);
      -webkit-tap-highlight-color: transparent;
      -webkit-transition: color .1s ease-out, background .1s ease-out;
      transition: color .1s ease-out, background .1s ease-out
    }

    .sd-cmp-1AaTO .sd-cmp-AL7Qz {
      font-size: var(--font-size-base);
      color: var(--main-color);
      text-decoration: underline !important;
      padding: .55em 1.5em
    }

    @media (hover:hover) {
      .sd-cmp-1AaTO .sd-cmp-AL7Qz:hover {
        text-decoration: none !important
      }
    }

    .sd-cmp-1AaTO .sd-cmp-AL7Qz:active {
      text-decoration: none !important
    }

    .sd-cmp-1AaTO:focus {
      outline: 0
    }

    .sd-cmp-1AaTO:focus>.sd-cmp-3G37o {
      outline: 1px auto -webkit-focus-ring-color
    }

    .sd-cmp-1AaTO:hover {
      background: none !important;
      border: none !important
    }

    .sd-cmp-2SVKF {
      padding: .55em 1.5em;
      font-size: var(--font-size-small) !important;
      text-transform: lowercase !important
    }

    .sd-cmp-8Qarf {
      background: var(--main-color);
      color: var(--background-color)
    }

    @media (hover:hover) {
      .sd-cmp-8Qarf:hover {
        background: var(--background-color);
        color: var(--main-color)
      }
    }

    .sd-cmp-37Lg8,
    .sd-cmp-8Qarf:active {
      background: var(--background-color);
      color: var(--main-color)
    }

    @media (hover:hover) {
      .sd-cmp-37Lg8:hover {
        background: var(--main-color);
        color: var(--background-color)
      }

      .sd-cmp-37Lg8:hover svg {
        fill: var(--background-color)
      }
    }

    .sd-cmp-37Lg8:active {
      background: var(--main-color);
      color: var(--background-color)
    }

    .sd-cmp-37Lg8:active svg {
      fill: var(--background-color)
    }

    .sd-cmp-37Lg8 svg {
      fill: var(--main-color)
    }

    .sd-cmp-2QK_B {
      position: fixed;
      width: var(--modal-width);
      height: auto;
      top: 50%;
      left: 50%;
      -webkit-transform: translate3d(-50%, -50%, 0);
      transform: translate3d(-50%, -50%, 0);
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-pack: center;
      -ms-flex-pack: center;
      justify-content: center;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      margin: 0;
      padding: 0;
      -webkit-box-shadow: unset !important;
      box-shadow: unset !important;
      z-index: 2147483647
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-2QK_B {
        width: 100%;
        height: 100%
      }
    }

    .sd-cmp-2QK_B.sd-cmp-2Ltpa {
      top: 0 !important;
      bottom: auto !important
    }

    .sd-cmp-2QK_B.sd-cmp-32o6S,
    .sd-cmp-2QK_B.sd-cmp-2Ltpa {
      left: 0 !important;
      right: 0 !important;
      -webkit-transform: unset !important;
      transform: unset !important
    }

    .sd-cmp-2QK_B.sd-cmp-32o6S {
      top: auto !important;
      bottom: 0 !important
    }

    .sd-cmp-2QK_B.sd-cmp-oL4pt {
      left: 0 !important;
      right: unset !important
    }

    .sd-cmp-2QK_B.sd-cmp-3Pt1U {
      left: unset !important;
      right: 0 !important
    }

    .sd-cmp-2QK_B.sd-cmp-O521Y {
      width: 100%;
      max-width: 1400px;
      margin: auto
    }

    .sd-cmp-2QK_B.sd-cmp-1YoMI {
      display: none !important
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE {
      width: 100%;
      height: fit-content;
      height: -webkit-fit-content;
      height: -moz-fit-content;
      max-height: calc(100vh - 50px);
      margin: 25px;
      background: var(--background-color);
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      position: relative;
      border-radius: var(--border-radius);
      -webkit-box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137);
      box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137)
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE.sd-cmp-3S0AD {
      height: 600px
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-2QK_B .sd-cmp-1ZnvE {
        max-height: calc(var(--vh, 1vh)*100 - 25px);
        margin: 12.5px
      }
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6 {
      display: none;
      width: var(--skin-size);
      background-color: var(--background-color);
      background-position: 50%;
      background-size: cover;
      background-repeat: no-repeat;
      border-radius: var(--border-radius) 0 0 var(--border-radius)
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY {
      display: block;
      background-image: var(--skin)
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY+*+*+*+.sd-cmp-kOZlP,
    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY+*+*+.sd-cmp-kOZlP,
    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY+*+.sd-cmp-kOZlP,
    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY+.sd-cmp-kOZlP {
      border-radius: 0 var(--border-radius) var(--border-radius) 0
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-3EIuH {
      background-image: var(--skin-dark)
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY {
        display: none
      }

      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY+*+*+*+.sd-cmp-kOZlP,
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY+*+*+.sd-cmp-kOZlP,
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY+*+.sd-cmp-kOZlP,
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY+.sd-cmp-kOZlP {
        border-radius: var(--border-radius)
      }

      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-3EIuH {
        display: block
      }

      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-3EIuH+*+*+*+.sd-cmp-kOZlP,
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-3EIuH+*+*+.sd-cmp-kOZlP,
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-3EIuH+*+.sd-cmp-kOZlP,
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-3EIuH+.sd-cmp-kOZlP {
        border-radius: 0 var(--border-radius) var(--border-radius) 0
      }
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6+.sd-cmp-FhVkq {
      left: calc(var(--skin-size) + var(--padding-md))
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6 {
        display: none !important
      }

      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6+.sd-cmp-FhVkq {
        left: calc(var(--padding-md))
      }

      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6+*+*+*+.sd-cmp-kOZlP,
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6+*+*+.sd-cmp-kOZlP,
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6+*+.sd-cmp-kOZlP,
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6+.sd-cmp-kOZlP {
        border-radius: var(--border-radius) !important
      }
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-FhVkq {
      display: none;
      width: var(--logo-size);
      height: var(--logo-size);
      position: absolute;
      top: var(--logo-offset);
      left: var(--padding-md);
      background-color: var(--background-color);
      background-position: 50%;
      background-size: 100%;
      background-repeat: no-repeat;
      -webkit-box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137);
      box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137);
      border-radius: calc(var(--border-radius)/2);
      border: 5px solid var(--background-color);
      z-index: 1
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-FhVkq.sd-cmp-1cljl {
      display: block;
      background-image: var(--logo)
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-FhVkq.sd-cmp-2PpFN {
      background-image: var(--logo-dark)
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-FhVkq.sd-cmp-1cljl {
        display: none
      }

      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-FhVkq.sd-cmp-2PpFN {
        display: block
      }
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-FhVkq {
        left: var(--padding-sm) !important
      }
    }

    @media screen and (max-width:calc(400px - 1px)) {
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-FhVkq {
        display: none !important
      }
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1;
      border-radius: var(--border-radius);
      overflow: hidden
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP:before {
      content: "";
      position: absolute;
      top: 0;
      right: 0;
      width: 50%;
      height: 50%;
      border-top-right-radius: var(--border-radius);
      opacity: .25;
      background: transparent 100% 0/contain no-repeat var(--watermark)
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP:before {
        background: transparent 100% 0/contain no-repeat var(--watermark-dark)
      }
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP .sd-cmp-1FSuG {
      position: relative;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      gap: var(--spacing-sm);
      padding: var(--padding-sm) var(--padding-md)
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP .sd-cmp-1FSuG {
        padding: var(--padding-sm)
      }
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP .sd-cmp-1FSuG>* {
      width: 100%
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP .sd-cmp-3Mcwk {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1;
      position: relative;
      overflow-y: auto;
      overflow-x: hidden;
      -webkit-overflow-scrolling: touch;
      min-height: 60px
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP .sd-cmp-3Mcwk .sd-cmp-NBjy7 {
      overflow: hidden;
      -ms-overflow-y: hidden;
      overflow-y: auto
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP .sd-cmp-3Mcwk .sd-cmp-NBjy7::-webkit-scrollbar {
      width: 5px
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP .sd-cmp-3Mcwk .sd-cmp-NBjy7::-webkit-scrollbar-thumb {
      border: 0 solid transparent;
      -webkit-box-shadow: inset 0 0 0 3px var(--main-color);
      box-shadow: inset 0 0 0 3px var(--main-color)
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP .sd-cmp-3Mcwk .sd-cmp-NBjy7 .sd-cmp-3H8D2 {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      gap: var(--spacing-lg);
      padding: var(--padding-sm) var(--padding-md)
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP .sd-cmp-3Mcwk .sd-cmp-NBjy7 .sd-cmp-3H8D2 {
        gap: var(--spacing-md);
        padding: var(--padding-sm)
      }
    }

    .sd-cmp-NBjy7 .sd-cmp-3nwYC {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-align: start;
      -ms-flex-align: start;
      align-items: flex-start;
      -webkit-box-pack: justify;
      -ms-flex-pack: justify;
      justify-content: space-between
    }

    @media screen and (prefers-color-scheme:light) {
      .sd-cmp-NBjy7 .sd-cmp-3nwYC.sd-cmp-3JuoZ {
        margin-left: calc(var(--logo-size) + var(--spacing-lg));
        min-height: calc(var(--logo-size) + var(--logo-offset) - var(--padding-sm))
      }
    }

    @media (pointer:none),
    screen and (prefers-color-scheme:light) and (pointer:coarse),
    screen and (prefers-color-scheme:light) and screen and (max-width:calc(400px - 1px)),
    screen and (prefers-color-scheme:light) and screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-NBjy7 .sd-cmp-3nwYC.sd-cmp-3JuoZ {
        margin-left: calc(var(--logo-size) + var(--spacing-md))
      }
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-NBjy7 .sd-cmp-3nwYC.sd-cmp-3PMfJ {
        margin-left: calc(var(--logo-size) + var(--spacing-lg));
        min-height: calc(var(--logo-size) + var(--logo-offset) - var(--padding-sm))
      }
    }

    @media (pointer:none),
    screen and (prefers-color-scheme:dark) and (pointer:coarse),
    screen and (prefers-color-scheme:dark) and screen and (max-width:calc(400px - 1px)),
    screen and (prefers-color-scheme:dark) and screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-NBjy7 .sd-cmp-3nwYC.sd-cmp-3PMfJ {
        margin-left: calc(var(--logo-size) + var(--spacing-md))
      }
    }

    @media screen and (max-width:calc(400px - 1px)) {
      .sd-cmp-NBjy7 .sd-cmp-3nwYC {
        margin-left: 0 !important;
        min-height: 0 !important
      }
    }

    .sd-cmp-NBjy7 .sd-cmp-xODGp {
      font-size: calc(var(--font-size-base)*1.5);
      font-weight: 500;
      line-height: 1.2;
      color: var(--title-color);
      outline: 0 !important;
      margin: 0 !important;
      padding: 0 !important;
      border: 0 !important;
      font-family: var(--font-family-title), Helvetica, Arial, sans-serif !important;
      text-transform: none !important;
      text-align: left !important;
      letter-spacing: inherit !important;
      background: none !important
    }

    .sd-cmp-NBjy7 .sd-cmp-xODGp * {
      font-family: inherit;
      font-size: inherit;
      font-weight: inherit
    }

    .sd-cmp-NBjy7 .sd-cmp-1IdBZ {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      gap: var(--spacing-md)
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-NBjy7 .sd-cmp-1IdBZ {
        gap: var(--spacing-sm)
      }
    }

    .sd-cmp-NBjy7 .sd-cmp-1t2yR {
      display: block;
      text-align: justify;
      color: var(--text-color);
      text-shadow: 1pt 0 0 var(--background-color)
    }

    .sd-cmp-NBjy7 .sd-cmp-1t2yR strong {
      font-family: inherit;
      font-size: inherit;
      font-weight: 700 !important;
      color: var(--text-color) !important;
      cursor: pointer;
      text-decoration: underline;
      -webkit-tap-highlight-color: transparent
    }

    @media (hover:hover) {
      .sd-cmp-NBjy7 .sd-cmp-1t2yR strong:hover {
        text-decoration: none !important
      }
    }

    .sd-cmp-NBjy7 .sd-cmp-3TX97 {
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1;
      gap: var(--spacing-md)
    }

    .sd-cmp-NBjy7 .sd-cmp-3TX97,
    .sd-cmp-NBjy7 .sd-cmp-3TX97 .sd-cmp-10mD2 {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex
    }

    .sd-cmp-NBjy7 .sd-cmp-3TX97 .sd-cmp-10mD2 {
      gap: var(--spacing-sm);
      color: var(--title-color);
      border-bottom: 1px solid var(--border-color);
      padding-bottom: var(--spacing-sm);
      -webkit-box-pack: justify;
      -ms-flex-pack: justify;
      justify-content: space-between;
      position: relative
    }

    .sd-cmp-NBjy7 .sd-cmp-3TX97 .sd-cmp-10mD2 .sd-cmp-1Xy8H {
      text-transform: uppercase;
      font-family: var(--font-family-title), Helvetica, Arial, sans-serif;
      font-size: var(--font-size-big);
      font-weight: 700;
      color: var(--title-color)
    }

    .sd-cmp-NBjy7 .sd-cmp-3eQpC {
      position: relative;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      -webkit-box-pack: center;
      -ms-flex-pack: center;
      justify-content: center
    }

    @media screen and (max-width:calc(400px - 1px)) {
      .sd-cmp-NBjy7 .sd-cmp-3eQpC {
        min-height: unset
      }
    }

    .sd-cmp-NBjy7 .sd-cmp-3eQpC .sd-cmp-TOv77 {
      display: inline-block !important
    }
  </style>
  <style type="text/css">
    .sd-cmp-1bquj {
      position: relative;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1;
      -webkit-appearance: none !important;
      -moz-appearance: none !important;
      appearance: none !important;
      background: none !important;
      border: none !important;
      -webkit-box-shadow: none !important;
      box-shadow: none !important;
      outline: none !important;
      text-shadow: none !important;
      font-size: inherit !important;
      padding: 0 !important;
      margin: 0 !important;
      width: auto !important
    }

    .sd-cmp-1bquj .sd-cmp-1jLDJ,
    .sd-cmp-1bquj .sd-cmp-2jmDj {
      display: block;
      font-family: var(--font-family-title), Helvetica, Arial, sans-serif;
      letter-spacing: .4pt;
      font-weight: 500;
      cursor: pointer;
      white-space: nowrap;
      width: auto;
      outline: 0
    }

    .sd-cmp-1bquj .sd-cmp-1jLDJ {
      border-radius: calc(var(--border-radius)/2);
      border: 1px solid var(--main-color);
      -webkit-tap-highlight-color: transparent;
      -webkit-transition: color .1s ease-out, background .1s ease-out;
      transition: color .1s ease-out, background .1s ease-out
    }

    .sd-cmp-1bquj .sd-cmp-2jmDj {
      font-size: var(--font-size-base);
      color: var(--main-color);
      text-decoration: underline !important;
      padding: .55em 1.5em
    }

    @media (hover:hover) {
      .sd-cmp-1bquj .sd-cmp-2jmDj:hover {
        text-decoration: none !important
      }
    }

    .sd-cmp-1bquj .sd-cmp-2jmDj:active {
      text-decoration: none !important
    }

    .sd-cmp-1bquj:focus {
      outline: 0
    }

    .sd-cmp-1bquj:focus>.sd-cmp-1jLDJ {
      outline: 1px auto -webkit-focus-ring-color
    }

    .sd-cmp-1bquj:hover {
      background: none !important;
      border: none !important
    }

    .sd-cmp-3bFVg {
      padding: .55em 1.5em;
      font-size: var(--font-size-small) !important;
      text-transform: lowercase !important
    }

    .sd-cmp-3_LLS {
      background: var(--main-color);
      color: var(--background-color)
    }

    @media (hover:hover) {
      .sd-cmp-3_LLS:hover {
        background: var(--background-color);
        color: var(--main-color)
      }
    }

    .sd-cmp-W8q3F,
    .sd-cmp-3_LLS:active {
      background: var(--background-color);
      color: var(--main-color)
    }

    @media (hover:hover) {
      .sd-cmp-W8q3F:hover {
        background: var(--main-color);
        color: var(--background-color)
      }

      .sd-cmp-W8q3F:hover svg {
        fill: var(--background-color)
      }
    }

    .sd-cmp-W8q3F:active {
      background: var(--main-color);
      color: var(--background-color)
    }

    .sd-cmp-W8q3F:active svg {
      fill: var(--background-color)
    }

    .sd-cmp-W8q3F svg {
      fill: var(--main-color)
    }

    .sd-cmp-1G6aQ {
      width: 1em;
      height: 1em
    }

    .sd-cmp-26rLm {
      display: inline-block;
      outline: 0;
      z-index: 1
    }

    .sd-cmp-26rLm:hover {
      text-decoration: none !important
    }

    .sd-cmp-26rLm:focus {
      outline: 0
    }

    .sd-cmp-26rLm:focus>.sd-cmp-24wCw {
      outline: 1px auto -webkit-focus-ring-color
    }

    .sd-cmp-26rLm .sd-cmp-24wCw {
      position: absolute;
      top: var(--padding-sm);
      right: var(--padding-sm);
      z-index: 1;
      width: calc(var(--font-size-base)*2);
      height: calc(var(--font-size-base)*2);
      border-radius: var(--border-radius);
      background-color: var(--background-color);
      cursor: pointer;
      outline: 0
    }

    @media (hover:hover) {
      .sd-cmp-26rLm .sd-cmp-24wCw:hover {
        -webkit-filter: contrast(95%);
        filter: contrast(95%)
      }
    }

    .sd-cmp-26rLm .sd-cmp-24wCw span {
      display: block;
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      margin: auto;
      width: var(--font-size-base);
      height: 2px;
      background: var(--main-color);
      border-radius: 2px
    }

    .sd-cmp-26rLm .sd-cmp-24wCw span:first-child {
      -webkit-transform: rotate(45deg);
      transform: rotate(45deg)
    }

    .sd-cmp-26rLm .sd-cmp-24wCw span:nth-child(2) {
      -webkit-transform: rotate(-45deg);
      transform: rotate(-45deg)
    }

    .sd-cmp-2yAVI {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: horizontal;
      -webkit-box-direction: normal;
      -ms-flex-direction: row;
      flex-direction: row;
      -ms-flex-wrap: wrap;
      flex-wrap: wrap
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-2yAVI {
        -webkit-box-orient: vertical;
        -webkit-box-direction: reverse;
        -ms-flex-direction: column-reverse;
        flex-direction: column-reverse
      }
    }

    .sd-cmp-2yAVI .sd-cmp-fuQAp {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-pack: center;
      -ms-flex-pack: center;
      justify-content: center;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      height: 100%;
      letter-spacing: .4pt;
      padding: var(--padding-sm);
      font-size: var(--font-size-base) !important;
      border: 1px solid var(--border-color) !important;
      border-left: 0 !important;
      border-bottom: 0 !important;
      border-radius: 0 !important;
      white-space: normal;
      word-break: break-word;
      -webkit-filter: contrast(95%);
      filter: contrast(95%)
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-2yAVI .sd-cmp-fuQAp {
        border-right: 0 !important
      }
    }

    .sd-cmp-2yAVI>:last-child .sd-cmp-fuQAp {
      border-right: 0 !important
    }

    .sd-cmp-UGoNj>a svg {
      width: 1.5em;
      height: 1.5em;
      stroke: var(--title-color);
      stroke-opacity: .5;
      stroke-linecap: round;
      stroke-linejoin: round;
      stroke-width: 1.5;
      fill: none
    }

    .sd-cmp-UGoNj>a svg:hover {
      stroke-opacity: 1
    }

    .sd-cmp-tfDbK {
      position: absolute;
      top: 0;
      right: 0;
      z-index: 2147483647
    }

    .sd-cmp-tfDbK .sd-cmp-3gktw {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      gap: var(--spacing-sm);
      position: relative;
      background: var(--background-color);
      border-radius: var(--border-radius);
      -webkit-box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137);
      box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137);
      color: var(--title-color);
      border: 1px solid var(--border-color);
      padding: var(--padding-md);
      text-align: left
    }

    .sd-cmp-tfDbK .sd-cmp-3gktw .sd-cmp-1Kq_o {
      -webkit-box-orient: horizontal;
      -webkit-box-direction: normal;
      -ms-flex-direction: row;
      flex-direction: row;
      gap: var(--spacing-sm);
      font-size: var(--font-size-small)
    }

    .sd-cmp-tfDbK .sd-cmp-3gktw .sd-cmp-1Kq_o,
    .sd-cmp-Qhb4d {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center
    }

    .sd-cmp-Qhb4d {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: var(--background-color);
      opacity: .6;
      -webkit-box-pack: center;
      -ms-flex-pack: center;
      justify-content: center
    }

    @-webkit-keyframes sd-cmp-1phSD {
      to {
        -webkit-transform: rotate(1turn);
        transform: rotate(1turn)
      }
    }

    @keyframes sd-cmp-1phSD {
      to {
        -webkit-transform: rotate(1turn);
        transform: rotate(1turn)
      }
    }

    .sd-cmp-Qhb4d span {
      display: inline-block;
      width: 2rem;
      height: 2rem;
      vertical-align: text-bottom;
      border: .25em solid var(--main-color);
      border-right: .25em solid transparent;
      border-radius: 50%;
      -webkit-animation: sd-cmp-1phSD .75s linear infinite;
      animation: sd-cmp-1phSD .75s linear infinite
    }

    .sd-cmp-1yrT_.sd-cmp-1DJ9f {
      visibility: hidden
    }

    .sd-cmp-3jRLA {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      padding: 5px 0;
      position: absolute;
      top: var(--padding-sm);
      right: var(--padding-sm);
      z-index: 1
    }

    @media screen and (prefers-color-scheme:light) {
      .sd-cmp-3jRLA.sd-cmp-wJ0o7 {
        padding: 5px 10px !important;
        background-color: var(--background-color);
        border-radius: calc(var(--border-radius)/2)
      }
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-3jRLA.sd-cmp-17lw6 {
        padding: 5px 10px !important;
        background-color: var(--background-color);
        border-radius: calc(var(--border-radius)/2)
      }
    }

    .sd-cmp-3jRLA .sd-cmp-qYrQ7 {
      padding: 0;
      font-size: var(--font-size-base);
      white-space: normal
    }

    .sd-cmp-1l64l {
      margin: 0 5px
    }

    .sd-cmp-2dwYy {
      position: fixed;
      width: var(--modal-width);
      height: auto;
      top: 50%;
      left: 50%;
      -webkit-transform: translate3d(-50%, -50%, 0);
      transform: translate3d(-50%, -50%, 0);
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-pack: center;
      -ms-flex-pack: center;
      justify-content: center;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      margin: 0;
      padding: 0;
      -webkit-box-shadow: unset !important;
      box-shadow: unset !important;
      z-index: 2147483647
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-2dwYy {
        width: 100%;
        height: 100%
      }
    }

    .sd-cmp-2dwYy.sd-cmp-3-xyC {
      display: none !important
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj {
      width: 100%;
      height: fit-content;
      height: -webkit-fit-content;
      height: -moz-fit-content;
      max-width: calc(var(--modal-width) - var(--padding-md)*2 - 50px);
      max-height: calc(100vh - var(--padding-md)*2 - 50px);
      background: var(--background-color);
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      position: relative;
      border-radius: var(--border-radius);
      border: 1px solid var(--border-color);
      -webkit-box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137);
      box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137)
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-2dwYy .sd-cmp-1XaZj {
        max-width: calc(100vw - var(--padding-sm)*2 - 25px);
        max-height: calc(var(--vh, 1vh)*100 - var(--padding-sm)*2 - 25px);
        margin: 12.5px
      }
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC {
      border-radius: var(--border-radius);
      overflow: hidden
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC,
    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 {
      position: relative;
      overflow-y: auto;
      overflow-x: hidden;
      -webkit-overflow-scrolling: touch;
      min-height: 60px
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 .sd-cmp-3ZKc7 {
      overflow: hidden;
      -ms-overflow-y: hidden;
      overflow-y: auto
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 .sd-cmp-3ZKc7:not(:first-child) {
      padding-top: var(--spacing-md)
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 .sd-cmp-3ZKc7:not(:first-child) {
        padding-top: var(--spacing-lg)
      }
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 .sd-cmp-3ZKc7::-webkit-scrollbar {
      width: 5px
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 .sd-cmp-3ZKc7::-webkit-scrollbar-thumb {
      border: 0 solid transparent;
      -webkit-box-shadow: inset 0 0 0 3px var(--main-color);
      box-shadow: inset 0 0 0 3px var(--main-color)
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 .sd-cmp-3ZKc7 .sd-cmp-25O0Z {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      gap: var(--spacing-lg);
      padding: var(--padding-sm) var(--padding-md);
      color: var(--text-color)
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 .sd-cmp-3ZKc7 .sd-cmp-25O0Z {
        gap: var(--spacing-md);
        padding: var(--padding-sm)
      }
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 .sd-cmp-3ZKc7 .sd-cmp-3dOD4 {
      text-transform: uppercase;
      font-family: var(--font-family-title), Helvetica, Arial, sans-serif;
      font-size: var(--font-size-big);
      font-weight: 700;
      color: var(--title-color);
      padding-bottom: var(--spacing-sm);
      border-bottom: 1px solid var(--border-color)
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 .sd-cmp-3ZKc7 .sd-cmp-3x_wI ul.sd-cmp-2SdjI {
      list-style: circle;
      padding: 0 var(--padding-sm);
      margin-inline: var(--padding-sm)
    }

    .sd-cmp-1OY4L:not(:first-child) {
      position: absolute;
      bottom: 0;
      right: 0;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-pack: end;
      -ms-flex-pack: end;
      justify-content: flex-end
    }

    .sd-cmp-1OY4L:not(:first-child)>a {
      -webkit-box-orient: vertical !important;
      -webkit-box-direction: normal !important;
      -ms-flex-direction: column !important;
      flex-direction: column !important
    }

    .sd-cmp-1OY4L>a {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      -webkit-box-orient: horizontal;
      -webkit-box-direction: normal;
      -ms-flex-direction: row;
      flex-direction: row;
      gap: calc(var(--spacing-sm)/2);
      color: var(--text-color) !important;
      text-decoration: none !important;
      white-space: nowrap
    }

    .sd-cmp-1OY4L>a>span {
      letter-spacing: .7pt;
      font-size: var(--font-size-xxsmall);
      font-weight: 400;
      white-space: nowrap
    }

    .sd-cmp-1OY4L>a>span.sd-cmp-dRdUR {
      display: block;
      font-size: var(--font-size-xsmall);
      font-weight: 700;
      content: var(--provider-logo);
      height: 15px;
      -webkit-filter: grayscale(100%);
      filter: grayscale(100%)
    }

    @media screen and (max-width:calc(400px - 1px)) {
      .sd-cmp-1OY4L {
        display: none !important
      }
    }

    .sd-cmp-2sgrL {
      display: -webkit-inline-box;
      display: -ms-inline-flexbox;
      display: inline-flex;
      cursor: pointer;
      -webkit-tap-highlight-color: transparent;
      outline: none
    }

    .sd-cmp-2sgrL:focus {
      outline: 0
    }

    .sd-cmp-2sgrL:focus>.sd-cmp-2ffiy {
      outline: 1px solid -webkit-focus-ring-color
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy {
      display: inline-block;
      width: 3.6666em;
      height: 1.6666em;
      position: relative;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none;
      outline: 0
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy .sd-cmp-3f1b_ {
      visibility: hidden
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy .sd-cmp-3VuB_ {
      border-radius: .8333em;
      width: 100%;
      height: 100%;
      position: absolute;
      top: 0;
      left: 0;
      -webkit-transition: .1s linear;
      transition: .1s linear;
      overflow: hidden
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy .sd-cmp-3VuB_:before {
      display: block;
      content: "";
      width: 100%;
      height: 100%;
      background-color: var(--background-color);
      -webkit-filter: contrast(75%);
      filter: contrast(75%)
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy .sd-cmp-1M8zu {
      border-radius: calc(1.6666em - 4px);
      width: calc(1.6666em - 4px);
      height: calc(1.6666em - 4px);
      position: absolute;
      top: 2px;
      left: 2px;
      -webkit-transition: .1s linear;
      transition: .1s linear;
      -webkit-transform: translate(1em);
      transform: translate(1em);
      background-color: var(--background-color);
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      -webkit-box-pack: center;
      -ms-flex-pack: center;
      justify-content: center
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy .sd-cmp-1M8zu:before {
      display: block;
      content: "";
      width: 100%;
      height: 100%;
      position: absolute;
      top: 0;
      left: 0;
      border: 2px solid var(--background-color);
      -webkit-box-sizing: border-box;
      box-sizing: border-box;
      border-radius: calc(1.6666em - 4px)
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy .sd-cmp-1M8zu svg {
      margin-top: 0;
      fill: var(--background-color)
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-2ww6m .sd-cmp-3VuB_:before {
      background-color: var(--main-color);
      -webkit-filter: brightness(1);
      filter: brightness(1)
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-2ww6m .sd-cmp-1M8zu {
      -webkit-transform: translate(2em);
      transform: translate(2em);
      background-color: var(--background-color)
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-2ww6m .sd-cmp-1M8zu:before {
      border-color: var(--background-color)
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-2ww6m .sd-cmp-1M8zu svg {
      fill: var(--main-color)
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-23LnT .sd-cmp-1M8zu {
      -webkit-transform: none;
      transform: none
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-23LnT .sd-cmp-1M8zu svg {
      fill: #f67262
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-23LnT .sd-cmp-1M8zu {
        background-color: #f67262
      }

      .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-23LnT .sd-cmp-1M8zu:before {
        border-color: #f67262
      }

      .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-23LnT .sd-cmp-1M8zu svg {
        fill: var(--background-color)
      }
    }

    @media (hover:hover) {
      .sd-cmp-2sgrL .sd-cmp-2ffiy:not(.sd-cmp-2FJ_r):hover .sd-cmp-1M8zu {
        width: calc(1.6666em + 4px);
        height: calc(1.6666em + 4px);
        border-radius: calc(.8333em + 2px);
        top: -2px;
        left: -2px
      }
    }

    @media screen and (prefers-color-scheme:dark) and (hover:hover) {
      .sd-cmp-2sgrL .sd-cmp-2ffiy:not(.sd-cmp-2FJ_r):not(.sd-cmp-2ww6m):not(.sd-cmp-23LnT):hover .sd-cmp-1M8zu:before {
        -webkit-filter: contrast(75%);
        filter: contrast(75%)
      }
    }

    @media screen and (prefers-color-scheme:light) and (hover:hover) {
      .sd-cmp-2sgrL .sd-cmp-2ffiy:not(.sd-cmp-2FJ_r):not(.sd-cmp-2ww6m):hover .sd-cmp-1M8zu:before {
        -webkit-filter: contrast(75%);
        filter: contrast(75%)
      }
    }

    @media (hover:hover) {
      .sd-cmp-2sgrL .sd-cmp-2ffiy:not(.sd-cmp-2FJ_r).sd-cmp-2ww6m:hover .sd-cmp-1M8zu:before {
        border-color: var(--main-color)
      }
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-2FJ_r {
      cursor: default
    }
  </style>
  <style type="text/css">
    .sd-cmp-2Rfqb {
      position: relative;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1;
      -webkit-appearance: none !important;
      -moz-appearance: none !important;
      appearance: none !important;
      background: none !important;
      border: none !important;
      -webkit-box-shadow: none !important;
      box-shadow: none !important;
      outline: none !important;
      text-shadow: none !important;
      font-size: inherit !important;
      padding: 0 !important;
      margin: 0 !important;
      width: auto !important
    }

    .sd-cmp-2Rfqb .sd-cmp-P9OsE,
    .sd-cmp-2Rfqb .sd-cmp-4psWo {
      display: block;
      font-family: var(--font-family-title), Helvetica, Arial, sans-serif;
      letter-spacing: .4pt;
      font-weight: 500;
      cursor: pointer;
      white-space: nowrap;
      width: auto;
      outline: 0
    }

    .sd-cmp-2Rfqb .sd-cmp-P9OsE {
      border-radius: calc(var(--border-radius)/2);
      border: 1px solid var(--main-color);
      -webkit-tap-highlight-color: transparent;
      -webkit-transition: color .1s ease-out, background .1s ease-out;
      transition: color .1s ease-out, background .1s ease-out
    }

    .sd-cmp-2Rfqb .sd-cmp-4psWo {
      font-size: var(--font-size-base);
      color: var(--main-color);
      text-decoration: underline !important;
      padding: .55em 1.5em
    }

    @media (hover:hover) {
      .sd-cmp-2Rfqb .sd-cmp-4psWo:hover {
        text-decoration: none !important
      }
    }

    .sd-cmp-2Rfqb .sd-cmp-4psWo:active {
      text-decoration: none !important
    }

    .sd-cmp-2Rfqb:focus {
      outline: 0
    }

    .sd-cmp-2Rfqb:focus>.sd-cmp-P9OsE {
      outline: 1px auto -webkit-focus-ring-color
    }

    .sd-cmp-2Rfqb:hover {
      background: none !important;
      border: none !important
    }

    .sd-cmp-2YQh2 {
      padding: .55em 1.5em;
      font-size: var(--font-size-small) !important;
      text-transform: lowercase !important
    }

    .sd-cmp-3JhOz {
      background: var(--main-color);
      color: var(--background-color)
    }

    @media (hover:hover) {
      .sd-cmp-3JhOz:hover {
        background: var(--background-color);
        color: var(--main-color)
      }
    }

    .sd-cmp-I0Qqz,
    .sd-cmp-3JhOz:active {
      background: var(--background-color);
      color: var(--main-color)
    }

    @media (hover:hover) {
      .sd-cmp-I0Qqz:hover {
        background: var(--main-color);
        color: var(--background-color)
      }

      .sd-cmp-I0Qqz:hover svg {
        fill: var(--background-color)
      }
    }

    .sd-cmp-I0Qqz:active {
      background: var(--main-color);
      color: var(--background-color)
    }

    .sd-cmp-I0Qqz:active svg {
      fill: var(--background-color)
    }

    .sd-cmp-I0Qqz svg {
      fill: var(--main-color)
    }

    .sd-cmp-2fiYx {
      position: fixed;
      width: var(--modal-width);
      height: auto;
      top: 50%;
      left: 50%;
      -webkit-transform: translate3d(-50%, -50%, 0);
      transform: translate3d(-50%, -50%, 0);
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-pack: center;
      -ms-flex-pack: center;
      justify-content: center;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      margin: 0;
      padding: 0;
      -webkit-box-shadow: unset !important;
      box-shadow: unset !important;
      z-index: 2147483647
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-2fiYx {
        width: 100%;
        height: 100%
      }
    }

    .sd-cmp-2fiYx.sd-cmp-3bYHL {
      top: 0 !important;
      bottom: auto !important
    }

    .sd-cmp-2fiYx.sd-cmp-1N-2m,
    .sd-cmp-2fiYx.sd-cmp-3bYHL {
      left: 0 !important;
      right: 0 !important;
      -webkit-transform: unset !important;
      transform: unset !important
    }

    .sd-cmp-2fiYx.sd-cmp-1N-2m {
      top: auto !important;
      bottom: 0 !important
    }

    .sd-cmp-2fiYx.sd-cmp-2B8FG {
      left: 0 !important;
      right: unset !important
    }

    .sd-cmp-2fiYx.sd-cmp-3l9Ca {
      left: unset !important;
      right: 0 !important
    }

    .sd-cmp-2fiYx.sd-cmp-13Tzg {
      width: 100%;
      max-width: 1400px;
      margin: auto
    }

    .sd-cmp-2fiYx.sd-cmp-2DClO {
      display: none !important
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l {
      width: 100%;
      height: fit-content;
      height: -webkit-fit-content;
      height: -moz-fit-content;
      max-height: calc(100vh - 50px);
      margin: 25px;
      background: var(--background-color);
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      position: relative;
      border-radius: var(--border-radius);
      -webkit-box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137);
      box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137)
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l.sd-cmp-JTFSm {
      height: 600px
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-2fiYx .sd-cmp-2Ap2l {
        max-height: calc(var(--vh, 1vh)*100 - 25px);
        margin: 12.5px
      }
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_ {
      display: none;
      width: var(--skin-size);
      background-color: var(--background-color);
      background-position: 50%;
      background-size: cover;
      background-repeat: no-repeat;
      border-radius: var(--border-radius) 0 0 var(--border-radius)
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG {
      display: block;
      background-image: var(--skin)
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG+*+*+*+.sd-cmp-M7o5g,
    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG+*+*+.sd-cmp-M7o5g,
    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG+*+.sd-cmp-M7o5g,
    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG+.sd-cmp-M7o5g {
      border-radius: 0 var(--border-radius) var(--border-radius) 0
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-iiwF5 {
      background-image: var(--skin-dark)
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG {
        display: none
      }

      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG+*+*+*+.sd-cmp-M7o5g,
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG+*+*+.sd-cmp-M7o5g,
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG+*+.sd-cmp-M7o5g,
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG+.sd-cmp-M7o5g {
        border-radius: var(--border-radius)
      }

      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-iiwF5 {
        display: block
      }

      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-iiwF5+*+*+*+.sd-cmp-M7o5g,
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-iiwF5+*+*+.sd-cmp-M7o5g,
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-iiwF5+*+.sd-cmp-M7o5g,
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-iiwF5+.sd-cmp-M7o5g {
        border-radius: 0 var(--border-radius) var(--border-radius) 0
      }
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_+.sd-cmp-3f-nX {
      left: calc(var(--skin-size) + var(--padding-md))
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_ {
        display: none !important
      }

      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_+.sd-cmp-3f-nX {
        left: calc(var(--padding-md))
      }

      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_+*+*+*+.sd-cmp-M7o5g,
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_+*+*+.sd-cmp-M7o5g,
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_+*+.sd-cmp-M7o5g,
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_+.sd-cmp-M7o5g {
        border-radius: var(--border-radius) !important
      }
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3f-nX {
      display: none;
      width: var(--logo-size);
      height: var(--logo-size);
      position: absolute;
      top: var(--logo-offset);
      left: var(--padding-md);
      background-color: var(--background-color);
      background-position: 50%;
      background-size: 100%;
      background-repeat: no-repeat;
      -webkit-box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137);
      box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137);
      border-radius: calc(var(--border-radius)/2);
      border: 5px solid var(--background-color);
      z-index: 1
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3f-nX.sd-cmp-1yUSH {
      display: block;
      background-image: var(--logo)
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3f-nX.sd-cmp-3Vjk0 {
      background-image: var(--logo-dark)
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3f-nX.sd-cmp-1yUSH {
        display: none
      }

      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3f-nX.sd-cmp-3Vjk0 {
        display: block
      }
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3f-nX {
        left: var(--padding-sm) !important
      }
    }

    @media screen and (max-width:calc(400px - 1px)) {
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3f-nX {
        display: none !important
      }
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1;
      border-radius: var(--border-radius);
      overflow: hidden
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g:before {
      content: "";
      position: absolute;
      top: 0;
      right: 0;
      width: 50%;
      height: 50%;
      border-top-right-radius: var(--border-radius);
      opacity: .25;
      background: transparent 100% 0/contain no-repeat var(--watermark)
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g:before {
        background: transparent 100% 0/contain no-repeat var(--watermark-dark)
      }
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g .sd-cmp-3Ob7I {
      position: relative;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      gap: var(--spacing-sm);
      padding: var(--padding-sm) var(--padding-md)
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g .sd-cmp-3Ob7I {
        padding: var(--padding-sm)
      }
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g .sd-cmp-3Ob7I>* {
      width: 100%
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g .sd-cmp-WV_jZ {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1;
      position: relative;
      overflow-y: auto;
      overflow-x: hidden;
      -webkit-overflow-scrolling: touch;
      min-height: 60px
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g .sd-cmp-WV_jZ .sd-cmp-2L7kb {
      overflow: hidden;
      -ms-overflow-y: hidden;
      overflow-y: auto
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g .sd-cmp-WV_jZ .sd-cmp-2L7kb::-webkit-scrollbar {
      width: 5px
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g .sd-cmp-WV_jZ .sd-cmp-2L7kb::-webkit-scrollbar-thumb {
      border: 0 solid transparent;
      -webkit-box-shadow: inset 0 0 0 3px var(--main-color);
      box-shadow: inset 0 0 0 3px var(--main-color)
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g .sd-cmp-WV_jZ .sd-cmp-2L7kb .sd-cmp-2zXBa {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      gap: var(--spacing-lg);
      padding: var(--padding-sm) var(--padding-md)
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g .sd-cmp-WV_jZ .sd-cmp-2L7kb .sd-cmp-2zXBa {
        gap: var(--spacing-md);
        padding: var(--padding-sm)
      }
    }

    .sd-cmp-3CtBh {
      position: fixed;
      z-index: 999999;
      font-size: 100%;
      bottom: 20px
    }

    .sd-cmp-3CtBh.sd-cmp-1eC6j {
      left: 20px
    }

    .sd-cmp-3CtBh.sd-cmp-1eC6j button {
      border-bottom-left-radius: 0 !important
    }

    .sd-cmp-3CtBh.sd-cmp-29k-b {
      right: 20px
    }

    .sd-cmp-3CtBh.sd-cmp-29k-b button {
      border-bottom-right-radius: 0 !important
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-3CtBh {
        bottom: 10px
      }

      .sd-cmp-3CtBh.sd-cmp-1eC6j {
        left: 10px
      }

      .sd-cmp-3CtBh.sd-cmp-29k-b {
        right: 10px
      }
    }

    .sd-cmp-3CtBh .sd-cmp-1jcua {
      display: block;
      position: relative
    }

    .sd-cmp-3CtBh .sd-cmp-1HEM- svg {
      -webkit-filter: drop-shadow(0 -5px 6px rgba(0, 0, 0, .12549019607843137));
      filter: drop-shadow(0 -5px 6px #00000020)
    }

    .sd-cmp-3CtBh .sd-cmp-1HEM-:not(.sd-cmp-1IetA) {
      cursor: pointer
    }

    .sd-cmp-3CtBh .sd-cmp-1HEM-:not(.sd-cmp-1IetA) svg:hover {
      -webkit-transform: translateY(-5px);
      transform: translateY(-5px)
    }

    .sd-cmp-3CtBh button.sd-cmp-eBAM3 {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: horizontal;
      -webkit-box-direction: normal;
      -ms-flex-direction: row;
      flex-direction: row;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      gap: var(--spacing-md);
      outline: 0;
      -webkit-tap-highlight-color: transparent;
      -webkit-transition: color .1s ease-out, background .1s ease-out;
      transition: color .1s ease-out, background .1s ease-out;
      border-radius: var(--border-radius);
      -webkit-box-shadow: 0 -5px 12px -2px rgba(0, 0, 0, .12549019607843137);
      box-shadow: 0 -5px 12px -2px rgba(0, 0, 0, .12549019607843137);
      background: var(--main-color);
      color: var(--background-color);
      border: 1px solid var(--background-color);
      padding: calc(var(--padding-md)/2) var(--padding-md);
      font-family: var(--font-family-title), Helvetica, Arial, sans-serif;
      font-size: var(--font-size-base) !important;
      line-height: 1.4
    }

    .sd-cmp-3CtBh button.sd-cmp-eBAM3.sd-cmp-Dcke7 {
      padding: calc(var(--padding-sm)/2) var(--padding-sm);
      font-size: var(--font-size-small) !important
    }

    .sd-cmp-3CtBh button.sd-cmp-eBAM3.sd-cmp-Dcke7 .sd-cmp-2DMNr svg {
      height: 17px
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-3CtBh button.sd-cmp-eBAM3:not(.sd-cmp-3sfQJ) {
        padding: calc(var(--padding-sm)/2) var(--padding-sm)
      }
    }

    @media (hover:hover) {
      .sd-cmp-3CtBh button.sd-cmp-eBAM3:hover:not([disabled]) {
        background: var(--background-color);
        color: var(--main-color);
        border: 1px solid var(--main-color);
        cursor: pointer
      }
    }

    .sd-cmp-3CtBh button.sd-cmp-eBAM3 .sd-cmp-2DMNr svg {
      width: auto;
      height: 20px
    }
  </style>
  <style type="text/css">
    .sd-cmp-M_ol- {
      position: relative;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1;
      -webkit-appearance: none !important;
      -moz-appearance: none !important;
      appearance: none !important;
      background: none !important;
      border: none !important;
      -webkit-box-shadow: none !important;
      box-shadow: none !important;
      outline: none !important;
      text-shadow: none !important;
      font-size: inherit !important;
      padding: 0 !important;
      margin: 0 !important;
      width: auto !important
    }

    .sd-cmp-M_ol- .sd-cmp-3Ddrw,
    .sd-cmp-M_ol- .sd-cmp-2QkHp {
      display: block;
      font-family: var(--font-family-title), Helvetica, Arial, sans-serif;
      letter-spacing: .4pt;
      font-weight: 500;
      cursor: pointer;
      white-space: nowrap;
      width: auto;
      outline: 0
    }

    .sd-cmp-M_ol- .sd-cmp-3Ddrw {
      border-radius: calc(var(--border-radius)/2);
      border: 1px solid var(--main-color);
      -webkit-tap-highlight-color: transparent;
      -webkit-transition: color .1s ease-out, background .1s ease-out;
      transition: color .1s ease-out, background .1s ease-out
    }

    .sd-cmp-M_ol- .sd-cmp-2QkHp {
      font-size: var(--font-size-base);
      color: var(--main-color);
      text-decoration: underline !important;
      padding: .55em 1.5em
    }

    @media (hover:hover) {
      .sd-cmp-M_ol- .sd-cmp-2QkHp:hover {
        text-decoration: none !important
      }
    }

    .sd-cmp-M_ol- .sd-cmp-2QkHp:active {
      text-decoration: none !important
    }

    .sd-cmp-M_ol-:focus {
      outline: 0
    }

    .sd-cmp-M_ol-:focus>.sd-cmp-3Ddrw {
      outline: 1px auto -webkit-focus-ring-color
    }

    .sd-cmp-M_ol-:hover {
      background: none !important;
      border: none !important
    }

    .sd-cmp-3CVn1 {
      padding: .55em 1.5em;
      font-size: var(--font-size-small) !important;
      text-transform: lowercase !important
    }

    .sd-cmp-qlrqV {
      background: var(--main-color);
      color: var(--background-color)
    }

    @media (hover:hover) {
      .sd-cmp-qlrqV:hover {
        background: var(--background-color);
        color: var(--main-color)
      }
    }

    .sd-cmp-R874O,
    .sd-cmp-qlrqV:active {
      background: var(--background-color);
      color: var(--main-color)
    }

    @media (hover:hover) {
      .sd-cmp-R874O:hover {
        background: var(--main-color);
        color: var(--background-color)
      }

      .sd-cmp-R874O:hover svg {
        fill: var(--background-color)
      }
    }

    .sd-cmp-R874O:active {
      background: var(--main-color);
      color: var(--background-color)
    }

    .sd-cmp-R874O:active svg {
      fill: var(--background-color)
    }

    .sd-cmp-R874O svg {
      fill: var(--main-color)
    }

    .sd-cmp-mgUYY {
      position: relative
    }

    .sd-cmp-mgUYY a.sd-cmp-1eRDs {
      -webkit-text-decoration: underline dashed !important;
      text-decoration: underline dashed !important
    }

    .sd-cmp-3WOME {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      gap: var(--spacing-sm);
      text-align: center
    }
  </style>
</head>

<body><noscript>
    <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-5D6VC2L&gtm_auth=&gtm_preview=&gtm_cookies_win=x"
      height="0" width="0" style="display:none;visibility:hidden" id="tag-manager"></iframe></noscript><noscript>
    <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-5D6VC2L&gtm_auth=&gtm_preview=&gtm_cookies_win=x"
      height="0" width="0" style="display:none;visibility:hidden" id="tag-manager"></iframe></noscript>
  <div id="__next">
    <div data-testid="default-layout" class="sc-9c57b843-0 eRWXBr">
      <div class="sc-ccc62f29-0 isIJWV">
        <div class="sc-de9e3aea-0 jjEEkw">
          <div>
            <div>
              <div class="adn-interstitiel hide" data-time="5">
                <div class="adn-interstitiel-close-button hide"></div><a target="_blank"
                  href="/video/315-no-game-no-life#"> </a>
                <div class="adn-interstitiel-content"></div>
                <div class="adn-interstitiel-video hide"></div>
              </div>
              <div class="adn-interstitiel-background hide"></div>
            </div>
            <div id="div-gpt-ad-1627562754480-0" style="height: 1px; width: 1px;">
              <script>googletag.cmd.push(function () { googletag.display("div-gpt-ad-1627562754480-0"); });</script>
            </div>
          </div>
        </div>
        <div class="sc-621a9100-0 cEUYSz">
          <nav data-testid="menuContent" class="sc-621a9100-1 jIUuTk">
            <ul class="sc-621a9100-2 fGnBpI">
              <li class="sc-621a9100-3 kOoxHx"><a class="sc-621a9100-5 kYMsgx" href="/"><img alt="" loading="lazy"
                    width="84" height="42" decoding="async" data-nimg="1" class="sc-f6c13dea-0 gvKDbT"
                    style="color:transparent" src="/images/logo-adn/adn-logo-fairy-tail.webp"></a></li>
              <li class="sc-621a9100-3 kOoxHx"><a class="sc-621a9100-5 hDImXX" href="/video"><span
                    class="sc-45f49f9-0 kHRvYb icon sc-621a9100-6 hVmpne icon-catalog-page"
                    data-testid="menu-icon"></span><span data-testid="menu-label"
                    class="sc-621a9100-9 iitBlP">Catalogue</span></a>
                <div class="sc-621a9100-10 bTRBOF"></div>
              </li>
              <li class="sc-621a9100-3 kOoxHx"><a class="sc-621a9100-5 hDImXX" href="/new-on-adn"><span
                    class="sc-45f49f9-0 kHRvYb icon sc-621a9100-6 hVmpne icon-hot" data-testid="menu-icon"></span><span
                    data-testid="menu-label" class="sc-621a9100-9 iitBlP">Nouveautés</span></a>
                <div class="sc-621a9100-10 bTRBOF"></div>
              </li>
              <li class="sc-621a9100-3 kOoxHx"><span class="sc-cf524f08-0 fYjySn sc-621a9100-5 hDImXX"><span
                    class="sc-45f49f9-0 kHRvYb icon sc-621a9100-6 hVmpne icon-playlist"
                    data-testid="menu-icon"></span><span data-testid="menu-label"
                    class="sc-621a9100-9 iitBlP">Séries</span></span>
                <div class="sc-621a9100-10 bTRBOF">
                  <ul class="sc-621a9100-11 rtuMC">
                    <li class="sc-621a9100-13 gZSZQC"><a class="sc-621a9100-5 sc-621a9100-14 hDImXX kGDxdr"
                        href="/video?type=EPS&amp;genres=animation_japonaise">Animation japonaise</a></li>
                    <li class="sc-621a9100-13 gZSZQC"><a class="sc-621a9100-5 sc-621a9100-14 hDImXX kGDxdr"
                        href="/video?type=EPS&amp;genres=animation_franco-belge">Animation franco-belge</a></li>
                    <li class="sc-621a9100-13 gZSZQC"><a class="sc-621a9100-5 sc-621a9100-14 hDImXX kGDxdr"
                        href="/video?type=EPS&amp;genres=jeunesse">Jeunesse</a></li>
                    <li class="sc-621a9100-13 gZSZQC"><a class="sc-621a9100-5 sc-621a9100-14 hDImXX kGDxdr"
                        href="/video?type=EPS">Toutes les séries</a></li>
                  </ul>
                </div>
              </li>
              <li class="sc-621a9100-3 kOoxHx"><span class="sc-cf524f08-0 fYjySn sc-621a9100-5 hDImXX"><span
                    class="sc-45f49f9-0 kHRvYb icon sc-621a9100-6 hVmpne icon-movie"
                    data-testid="menu-icon"></span><span data-testid="menu-label"
                    class="sc-621a9100-9 iitBlP">Films</span></span>
                <div class="sc-621a9100-10 bTRBOF">
                  <ul class="sc-621a9100-11 rtuMC">
                    <li class="sc-621a9100-13 gZSZQC"><a class="sc-621a9100-5 sc-621a9100-14 hDImXX kGDxdr"
                        href="/video?type=MOV">Long-métrage</a></li>
                    <li class="sc-621a9100-13 gZSZQC"><a class="sc-621a9100-5 sc-621a9100-14 hDImXX kGDxdr"
                        href="/video?type=SHORT">Court-métrage</a></li>
                    <li class="sc-621a9100-13 gZSZQC"><a class="sc-621a9100-5 sc-621a9100-14 hDImXX kGDxdr"
                        href="/video?type=OAV">Oav</a></li>
                  </ul>
                </div>
              </li>
              <li class="sc-621a9100-3 kOoxHx"><a class="sc-621a9100-5 hDImXX" href="/video?distribution=free"><span
                    class="sc-45f49f9-0 kHRvYb icon sc-621a9100-6 hVmpne icon-free" data-testid="menu-icon"></span><span
                    data-testid="menu-label" class="sc-621a9100-9 iitBlP">Gratuit</span></a>
                <div class="sc-621a9100-10 bTRBOF"></div>
              </li>
              <li class="sc-621a9100-3 kOoxHx"><a class="sc-621a9100-5 kYMsgx" href="/live"><span
                    class="sc-531a95f7-0 TTQcA sc-beaa459b-0 hByTWU"></span><span data-testid="menu-label"
                    class="sc-621a9100-9 iitBlP">ADN TV+</span></a>
                <div class="sc-621a9100-10 bTRBOF"></div>
              </li>
              <li class="sc-621a9100-4 dGQagY"></li>
              <li data-testid="menu-search" class="sc-621a9100-3 kOoxHx"><span
                  class="sc-cf524f08-0 fYjySn sc-621a9100-5 eQdlua"><span
                    class="sc-45f49f9-0 kHRvYb icon sc-621a9100-6 hVmpne icon-search"
                    data-testid="menu-icon"></span></span>
                <div class="sc-621a9100-10 bTRBOF">
                  <ul class="sc-621a9100-11 rtuMC">
                    <li class="sc-621a9100-13 kuGBZB">
                      <form class="sc-81c770ae-0 fJjufR"><span
                          class="sc-45f49f9-0 kHRvYb icon sc-81c770ae-1 iRtQxu icon-search"><label for="nav-search"
                            class="sc-81c770ae-3 fAIOSR"><input id="nav-search" data-testid="nav-search" type="text"
                              autocomplete="off" class="sc-81c770ae-2 BhJuU" value=""></label></span></form>
                    </li>
                  </ul>
                </div>
              </li>
              <li class="sc-621a9100-3 kOoxHx"><span data-testid="menu-offer-button" class="sc-621a9100-8 bLQctB">
                  <div class="sc-621a9100-12 lirrLF"><a data-testid="button" class="sc-af141b2-4-Component bTWwvv"
                      href="/subscribe"><span>S'abonner</span></a></div>
                </span></li>
              <li data-testid="menu-login-link" class="sc-621a9100-3 kOoxHx"><a class="sc-621a9100-5 kYMsgx"
                  href="/login"><span class="sc-45f49f9-0 iLKksz icon sc-621a9100-6 hVmoTu icon-profil-2"></span></a>
              </li>
              <li class="sc-621a9100-15 hxTgvh"><button class="sc-45f49f9-0 kHSHkc icon sc-621a9100-16 irTNQq icon-menu"
                  data-testid="menu-burger" data-toggle="collapse" data-target="#menu-collapse"
                  aria-controls="menu-collapse" aria-expanded="" aria-label="Toggle navigation" type="button"></button>
              </li>
            </ul>
          </nav>
        </div>
        <div data-testid="header-wrapper" class="sc-f885e9ef-0 iNNfIO">
          <div class="sc-5a07385f-0 ijZHww">
            <div class="sc-5a07385f-1 cxbrPD">
              <div>
                <div class="sc-e71849ea-0 cbBkcX">
                  <div data-testid="ads-block">
                    <div id="div-gpt-ad-1569230740302-0" class="ads-block">
                      <script>googletag.cmd.push(function () { googletag.display("div-gpt-ad-1569230740302-0"); });</script>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="sc-60e49a10-0 jUuRqY">
          <div class="sc-60e49a10-1 kMXdzm">
            <div class="sc-9c57b843-0 eRWXBr">
              <div class="sc-60e49a10-0 jUuRqY">
                <div class="sc-60e49a10-1 blomsM">
                  <script
                    type="application/ld+json">{"@context":"http://schema.org","@type":"TVSeries","name":"No Game No Life","url":"https://animationdigitalnetwork.com/video/315-no-game-no-life","thumbnailUrl":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/affiche_175x250.jpg","isFamilyFriendly":true,"description":"Sora et Shiro, frère et sœur passionnés de jeux vidéo et incroyablement doués, se sont élevés au rang de légende urbaine tant ils restaient invaincus, mais ils ne sont aux yeux du monde extérieur que des NEETs et des Hikikomoris. L’apparition de Teto, un jeune garçon se faisant appelé « Dieu », va changer le cours des choses.\nLoin du monde réel considéré comme un « jeu pourri », Teto entraîne nos deux héros dans un univers parallèle où la violence est proscrite et où tout conflit se règle par une partie de jeu.\nDes 16 peuples vivant là-bas, les « Humains » sont les plus faibles. Suite à de trop nombreuses parties perdues, leur terre et leur nombre sont presque réduits à néant. \nGrâce à leur talent, Sora et Shiro pourront-ils inverser la tendance et sauver les Humains ?","genre":"Game, Médieval-Fantastique, Moe, noitaminA, Sexy, Animation japonaise, Action, Aventure, Comédie, Ecchi, Fantastique, Seinen","numberOfEpisodes":12,"datePublished":"2014","alternativeHeadline":"No Game No Life","countryOfOrigin":{"@type":"Country","name":"Japon"},"productionCompany":{"@type":"Organization","name":"Madhouse"},"potentialAction":{"@type":"ViewAction","target":[{"url":"https://animationdigitalnetwork.com/video/315-no-game-no-life","actionPlatform":"https://schema.org/DesktopWebPlatform","inLanguage":"fr"},{"url":"https://animationdigitalnetwork.com/video/315-no-game-no-life","actionPlatform":"https://schema.org/MobileWebPlatform","inLanguage":"fr"},{"url":"https://animationdigitalnetwork.com/video/315-no-game-no-life","actionPlatform":"https://schema.org/IOSPlatform","inLanguage":"fr"},{"url":"https://animationdigitalnetwork.com/video/315-no-game-no-life","actionPlatform":"https://schema.org/AndroidPlatform","inLanguage":"fr"}],"actionAccessibilityRequirement":{"@type":"ActionAccessSpecification","category":"noLoginRequired"}},"aggregateRating":{"@type":"AggregateRating","ratingValue":4.9,"ratingCount":2624},"startDate":"2014-04-11T13:30:00Z","author":{"@type":"Person","name":"Yû Kamiya"},"director":{"@type":"Person","name":"Atsuko Ishizuka"},"musicBy":{"@type":"Person","name":"Shinji Hosoe"}}</script>
                  <script
                    type="application/ld+json">{"@context":"https://schema.org","@type":"BreadcrumbList","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https://animationdigitalnetwork.com"},{"@type":"ListItem","position":2,"name":"No Game No Life","item":"https://animationdigitalnetwork.com/video/315-no-game-no-life"}]}</script>
                  <div class="sc-5a07385f-0 izqJqd">
                    <div class="sc-5a07385f-1 ebyxoh">
                      <div>
                        <div class="sc-c796541e-0 gNMPke">
                          <div class="sc-593aa08f-4 sc-c796541e-1 bPUgjd bFlKON"><img alt="No Game No Life"
                              loading="lazy" width="370" height="530" decoding="async" data-nimg="1"
                              class="sc-593aa08f-5 sc-c796541e-2 hEYays jHVZwX" style="color:transparent"
                              src="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/affiche_500x0.jpg">
                          </div>
                          <div class="sc-c796541e-3 jBemgB">
                            <div class="sc-c796541e-4 evsWNv">
                              <h1 class="sc-593aa08f-2 sc-c796541e-5 ehNjVL dUYsTX">No Game No Life</h1>
                              <div class="sc-c796541e-8 geWVNR">
                                <div data-testid="vod-rating">
                                  <p data-testid="rating-note" class="sc-ebbe6c3b-1 hIdMJL">4.9<span>/5</span></p>
                                  <div class="sc-70923b32-4 cYfyie">
                                    <ul data-testid="empty-list" class="sc-70923b32-5 gQJqQq">
                                      <li class="sc-70923b32-8 ciuxMJ"><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-70923b32-2 kGLNvr icon-star"></span></li>
                                      <li class="sc-70923b32-8 ciuxMJ"><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-70923b32-2 kGLNvr icon-star"></span></li>
                                      <li class="sc-70923b32-8 ciuxMJ"><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-70923b32-2 kGLNvr icon-star"></span></li>
                                      <li class="sc-70923b32-8 ciuxMJ"><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-70923b32-2 kGLNvr icon-star"></span></li>
                                      <li class="sc-70923b32-8 ciuxMJ"><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-70923b32-2 kGLNvr icon-star"></span></li>
                                    </ul>
                                    <ul data-testid="rating-list" class="sc-70923b32-6 bYbUqK">
                                      <li data-testid="rating-list-item" class="sc-70923b32-8 ciuxMJ"><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-70923b32-3 gqlDIE icon-star"></span></li>
                                      <li data-testid="rating-list-item" class="sc-70923b32-8 ciuxMJ"><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-70923b32-3 gqlDIE icon-star"></span></li>
                                      <li data-testid="rating-list-item" class="sc-70923b32-8 ciuxMJ"><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-70923b32-3 gqlDIE icon-star"></span></li>
                                      <li data-testid="rating-list-item" class="sc-70923b32-8 ciuxMJ"><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-70923b32-3 gqlDIE icon-star"></span></li>
                                      <li data-testid="rating-list-item" class="sc-70923b32-8 ciuxMJ"><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-70923b32-3 gqlDIE icon-star"></span></li>
                                    </ul>
                                  </div>
                                </div>
                              </div>
                              <div class="sc-c796541e-9 hDWVCw">
                                <ul class="sc-eae1fc1d-0 iwuZjT">
                                  <li class="sc-eae1fc1d-1 daRhVD"><span>12 vidéos</span></li>
                                  <li class="sc-eae1fc1d-1 daRhVD"><span>HD 1080p</span></li>
                                  <li class="sc-eae1fc1d-1 daRhVD"><span>VOSTFR</span></li>
                                  <li class="sc-eae1fc1d-1 daRhVD"><span>VF</span></li>
                                  <li class="sc-eae1fc1d-1 daRhVD"><span>12+</span></li>
                                  <li class="sc-eae1fc1d-1 daRhVD"><span>1<sup>er</sup> épisode GRATUIT</span></li>
                                </ul>
                              </div>
                              <div class="sc-c796541e-10 gSxnWO"><a href="/video/315-no-game-no-life#comments-panel">173
                                  commentaires</a></div>
                              <div class="sc-c796541e-11 fIDnWL">
                                <div class="sc-c796541e-13 hGLhQG"></div>
                                <p class="sc-c796541e-15 jJipWn">Sora et Shiro, frère et sœur passionnés de jeux vidéo
                                  et incroyablement doués, se sont élevés au rang de légende urbaine tant ils restaient
                                  invaincus, mais ils ne sont aux yeux du monde extérieur que des NEETs et des
                                  Hikikomoris. L’apparition de Teto, un jeune garçon se faisant appelé « Dieu », va
                                  changer le cours des choses.
                                  Loin du monde réel considéré comme un « jeu pourri », Teto entraîne nos deux héros
                                  dans un univers parallèle où la violence est proscrite et où tout conflit se règle par
                                  une partie de jeu.
                                  Des 16 peuples vivant là-bas, les « Humains » sont les plus faibles. Suite à de trop
                                  nombreuses parties perdues, leur terre et leur nombre sont presque réduits à néant.
                                  Grâce à leur talent, Sora et Shiro pourront-ils inverser la tendance et sauver les
                                  Humains ?</p>
                                <p class="sc-c796541e-16 cxTMBq">Sora et Shiro, frère et sœur passionnés de jeux vidéo
                                  et incroyablement doués, se sont élevés au rang de légende urbaine tant ils restaient
                                  invaincus, mais ils ne sont aux yeux du monde extérieur que des NEETs et des
                                  Hikikomoris. L’apparition de Teto, un jeune garçon se faisant appelé « Dieu », va
                                  changer le cours des choses.
                                  Loin du monde réel considéré comme un « jeu pourri », Teto entraîne nos deux héros
                                  dans un univers parallèle où la violence est proscrite et où tout conflit se règle par
                                  une partie de jeu.
                                  Des 16 peuples vivant...</p>
                                <div class="sc-c796541e-17 sgNNx">Voir plus</div>
                              </div>
                              <div class="sc-c796541e-18 fJmrcT">©Yuu Kamiya, PUBLISHED BY KADOKAWA CORPORATION
                                MEDIAFACTORY/NO GAME NO LIFE PARTNERS</div>
                            </div>
                          </div>
                          <div class="sc-c796541e-19 jucjAw">
                            <ul class="sc-c796541e-20 fNOqCh">
                              <li class="sc-c796541e-21 DJuBJ"><span class="sc-c796541e-22 dYOHFM"><button
                                    data-testid="watchlist-button" class="sc-f85a8886-0-button frfnfW"><span>Ma
                                      watchlist</span></button></span></li>
                              <li class="sc-c796541e-21 DJuBJ"><span class="sc-c796541e-22 dYOHFM"><button
                                    class="sc-f85a8886-0-button frfnfW"><span>J'ai vu cette série</span></button></span>
                              </li>
                              <li class="sc-c796541e-21 DJuBJ"><span class="sc-c796541e-22 dYOHFM"><button
                                    class="sc-f85a8886-0-button frfnfW"><span>Coup de coeur</span></button></span></li>
                            </ul>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="sc-5a07385f-0 izqJqd">
                    <div class="sc-5a07385f-1 itDEN">
                      <h2 class="sc-5a07385f-2 gSjyFv"><span class="sc-5a07385f-3 eZfPND">Vidéos</span></h2>
                      <div>
                        <div class="sc-69509e27-0 xmqfv">
                          <div class="sc-1d31806c-0 fFalTP">
                            <div class="sc-1d31806c-1 bwDGCh">
                              <ul class="sc-1d31806c-4 jJpwYb">
                                <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                  <div class="sc-45ef3f75-1 fzJEwM"><a title="Bande Annonce"
                                      class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                      href="/video/315-no-game-no-life/4946-bande-annonce">
                                      <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                          alt="No Game No Life - Bande Annonce" data-testid="img-testid" loading="lazy"
                                          width="154" height="86" decoding="async" data-nimg="1"
                                          class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                          src="https://image.animationdigitalnetwork.fr/license/ngnl/pv/web/pv1_320x180.jpg"><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                        <div class="sc-4c2444b5-0 jwMCU">
                                          <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 ereUTH">
                                        <h3 class="sc-593aa08f-2 ehNjVL">Bande Annonce</h3>
                                        <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq"></h4>
                                      </div>
                                    </a></div>
                                </li>
                                <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                  <div class="sc-45ef3f75-1 fzJEwM"><a title="Débutant"
                                      class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                      href="/video/315-no-game-no-life/5000-episode-1">
                                      <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                          alt="No Game No Life - Épisode 1" data-testid="img-testid" loading="lazy"
                                          width="154" height="86" decoding="async" data-nimg="1"
                                          class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                          src="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps1_320x180.jpg"><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                        <div class="sc-4c2444b5-0 jwMCU">
                                          <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 ereUTH">
                                        <h3 class="sc-593aa08f-2 ehNjVL">Épisode 1</h3>
                                        <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Débutant</h4>
                                      </div>
                                    </a></div>
                                </li>
                                <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                  <div class="sc-45ef3f75-1 fzJEwM"><a title="Challenger"
                                      class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                      href="/video/315-no-game-no-life/5002-episode-2">
                                      <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                          alt="No Game No Life - Épisode 2" data-testid="img-testid" loading="lazy"
                                          width="154" height="86" decoding="async" data-nimg="1"
                                          class="sc-593aa08f-5 sc-45ef3f75-3 hEYays gxJaUY" style="color:transparent"
                                          src="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps2_320x180.jpg"><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-4 gUOYGD gsfPgU icon-lock_adn"></span><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-5 gUOYGD bVGmBP icon-unlock_adn"></span>
                                        <div class="sc-4c2444b5-0 jwMCU">
                                          <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 ereUTH">
                                        <h3 class="sc-593aa08f-2 ehNjVL">Épisode 2</h3>
                                        <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Challenger</h4>
                                      </div>
                                    </a></div>
                                </li>
                                <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                  <div class="sc-45ef3f75-1 fzJEwM"><a title="Expert"
                                      class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                      href="/video/315-no-game-no-life/5005-episode-3">
                                      <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                          alt="No Game No Life - Épisode 3" data-testid="img-testid" loading="lazy"
                                          width="154" height="86" decoding="async" data-nimg="1"
                                          class="sc-593aa08f-5 sc-45ef3f75-3 hEYays gxJaUY" style="color:transparent"
                                          src="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps3_320x180.jpg"><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-4 gUOYGD gsfPgU icon-lock_adn"></span><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-5 gUOYGD bVGmBP icon-unlock_adn"></span>
                                        <div class="sc-4c2444b5-0 jwMCU">
                                          <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 ereUTH">
                                        <h3 class="sc-593aa08f-2 ehNjVL">Épisode 3</h3>
                                        <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Expert</h4>
                                      </div>
                                    </a></div>
                                </li>
                                <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                  <div class="sc-45ef3f75-1 fzJEwM"><a title="Grand master"
                                      class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                      href="/video/315-no-game-no-life/5006-episode-4">
                                      <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                          alt="No Game No Life - Épisode 4" data-testid="img-testid" loading="lazy"
                                          width="154" height="86" decoding="async" data-nimg="1"
                                          class="sc-593aa08f-5 sc-45ef3f75-3 hEYays gxJaUY" style="color:transparent"
                                          src="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps4_320x180.jpg"><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-4 gUOYGD gsfPgU icon-lock_adn"></span><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-5 gUOYGD bVGmBP icon-unlock_adn"></span>
                                        <div class="sc-4c2444b5-0 jwMCU">
                                          <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 ereUTH">
                                        <h3 class="sc-593aa08f-2 ehNjVL">Épisode 4</h3>
                                        <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Grand master</h4>
                                      </div>
                                    </a></div>
                                </li>
                                <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                  <div class="sc-45ef3f75-1 fzJEwM"><a title="Case Faible"
                                      class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                      href="/video/315-no-game-no-life/5007-episode-5">
                                      <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                          alt="No Game No Life - Épisode 5" data-testid="img-testid" loading="lazy"
                                          width="154" height="86" decoding="async" data-nimg="1"
                                          class="sc-593aa08f-5 sc-45ef3f75-3 hEYays gxJaUY" style="color:transparent"
                                          src="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps5_320x180.jpg"><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-4 gUOYGD gsfPgU icon-lock_adn"></span><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-5 gUOYGD bVGmBP icon-unlock_adn"></span>
                                        <div class="sc-4c2444b5-0 jwMCU">
                                          <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 ereUTH">
                                        <h3 class="sc-593aa08f-2 ehNjVL">Épisode 5</h3>
                                        <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Case Faible</h4>
                                      </div>
                                    </a></div>
                                </li>
                                <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                  <div class="sc-45ef3f75-1 fzJEwM"><a title="Un coup interesting"
                                      class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                      href="/video/315-no-game-no-life/5008-episode-6">
                                      <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                          alt="No Game No Life - Épisode 6" data-testid="img-testid" loading="lazy"
                                          width="154" height="86" decoding="async" data-nimg="1"
                                          class="sc-593aa08f-5 sc-45ef3f75-3 hEYays gxJaUY" style="color:transparent"
                                          src="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps6_320x180.jpg"><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-4 gUOYGD gsfPgU icon-lock_adn"></span><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-5 gUOYGD bVGmBP icon-unlock_adn"></span>
                                        <div class="sc-4c2444b5-0 jwMCU">
                                          <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 ereUTH">
                                        <h3 class="sc-593aa08f-2 ehNjVL">Épisode 6</h3>
                                        <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Un coup interesting</h4>
                                      </div>
                                    </a></div>
                                </li>
                                <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                  <div class="sc-45ef3f75-1 fzJEwM"><a title="Sacrifice"
                                      class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                      href="/video/315-no-game-no-life/5009-episode-7">
                                      <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                          alt="No Game No Life - Épisode 7" data-testid="img-testid" loading="lazy"
                                          width="154" height="86" decoding="async" data-nimg="1"
                                          class="sc-593aa08f-5 sc-45ef3f75-3 hEYays gxJaUY" style="color:transparent"
                                          src="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps7_320x180.jpg"><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-4 gUOYGD gsfPgU icon-lock_adn"></span><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-5 gUOYGD bVGmBP icon-unlock_adn"></span>
                                        <div class="sc-4c2444b5-0 jwMCU">
                                          <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 ereUTH">
                                        <h3 class="sc-593aa08f-2 ehNjVL">Épisode 7</h3>
                                        <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Sacrifice</h4>
                                      </div>
                                    </a></div>
                                </li>
                                <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                  <div class="sc-45ef3f75-1 fzJEwM"><a title="Fake end"
                                      class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                      href="/video/315-no-game-no-life/5010-episode-8">
                                      <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                          alt="No Game No Life - Épisode 8" data-testid="img-testid" loading="lazy"
                                          width="154" height="86" decoding="async" data-nimg="1"
                                          class="sc-593aa08f-5 sc-45ef3f75-3 hEYays gxJaUY" style="color:transparent"
                                          src="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps8_320x180.jpg"><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-4 gUOYGD gsfPgU icon-lock_adn"></span><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-5 gUOYGD bVGmBP icon-unlock_adn"></span>
                                        <div class="sc-4c2444b5-0 jwMCU">
                                          <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 ereUTH">
                                        <h3 class="sc-593aa08f-2 ehNjVL">Épisode 8</h3>
                                        <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Fake end</h4>
                                      </div>
                                    </a></div>
                                </li>
                                <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                  <div class="sc-45ef3f75-1 fzJEwM"><a title="Sky Walk"
                                      class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                      href="/video/315-no-game-no-life/5011-episode-9">
                                      <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                          alt="No Game No Life - Épisode 9" data-testid="img-testid" loading="lazy"
                                          width="154" height="86" decoding="async" data-nimg="1"
                                          class="sc-593aa08f-5 sc-45ef3f75-3 hEYays gxJaUY" style="color:transparent"
                                          src="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps9_320x180.jpg"><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-4 gUOYGD gsfPgU icon-lock_adn"></span><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-5 gUOYGD bVGmBP icon-unlock_adn"></span>
                                        <div class="sc-4c2444b5-0 jwMCU">
                                          <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 ereUTH">
                                        <h3 class="sc-593aa08f-2 ehNjVL">Épisode 9</h3>
                                        <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Sky Walk</h4>
                                      </div>
                                    </a></div>
                                </li>
                                <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                  <div class="sc-45ef3f75-1 fzJEwM"><a title="Blue Rose"
                                      class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                      href="/video/315-no-game-no-life/5012-episode-10">
                                      <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                          alt="No Game No Life - Épisode 10" data-testid="img-testid" loading="lazy"
                                          width="154" height="86" decoding="async" data-nimg="1"
                                          class="sc-593aa08f-5 sc-45ef3f75-3 hEYays gxJaUY" style="color:transparent"
                                          src="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps10_320x180.jpg"><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-4 gUOYGD gsfPgU icon-lock_adn"></span><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-5 gUOYGD bVGmBP icon-unlock_adn"></span>
                                        <div class="sc-4c2444b5-0 jwMCU">
                                          <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 ereUTH">
                                        <h3 class="sc-593aa08f-2 ehNjVL">Épisode 10</h3>
                                        <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Blue Rose</h4>
                                      </div>
                                    </a></div>
                                </li>
                                <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                  <div class="sc-45ef3f75-1 fzJEwM"><a title="Killing giant"
                                      class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                      href="/video/315-no-game-no-life/5013-episode-11">
                                      <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                          alt="No Game No Life - Épisode 11" data-testid="img-testid" loading="lazy"
                                          width="154" height="86" decoding="async" data-nimg="1"
                                          class="sc-593aa08f-5 sc-45ef3f75-3 hEYays gxJaUY" style="color:transparent"
                                          src="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps11_320x180.jpg"><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-4 gUOYGD gsfPgU icon-lock_adn"></span><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-5 gUOYGD bVGmBP icon-unlock_adn"></span>
                                        <div class="sc-4c2444b5-0 jwMCU">
                                          <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 ereUTH">
                                        <h3 class="sc-593aa08f-2 ehNjVL">Épisode 11</h3>
                                        <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Killing giant</h4>
                                      </div>
                                    </a></div>
                                </li>
                                <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                  <div class="sc-45ef3f75-1 fzJEwM"><a title="Loi numéro 10"
                                      class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                      href="/video/315-no-game-no-life/5014-episode-12">
                                      <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                          alt="No Game No Life - Épisode 12" data-testid="img-testid" loading="lazy"
                                          width="154" height="86" decoding="async" data-nimg="1"
                                          class="sc-593aa08f-5 sc-45ef3f75-3 hEYays gxJaUY" style="color:transparent"
                                          src="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps12_320x180.jpg"><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-4 gUOYGD gsfPgU icon-lock_adn"></span><span
                                          class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-5 gUOYGD bVGmBP icon-unlock_adn"></span>
                                        <div class="sc-4c2444b5-0 jwMCU">
                                          <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 ereUTH">
                                        <h3 class="sc-593aa08f-2 ehNjVL">Épisode 12</h3>
                                        <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Loi numéro 10</h4>
                                      </div>
                                    </a></div>
                                </li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div data-testid="comments-panel" id="comments-panel">
                    <div class="sc-5a07385f-0 izqJqd">
                      <div class="sc-5a07385f-1 ebyxoh">
                        <h2 class="sc-5a07385f-2 dZbUtq"><span class="sc-5a07385f-3 jXwzJT">Avis sur l'animé No Game No
                            Life</span></h2>
                        <div>
                          <div class="sc-17cd96c1-0 iecioq"><span data-link="L2xvZ2lu" role="link" tabindex="0"
                              class="sc-fb73a479-0 jFWHTR sc-17cd96c1-12 byRsrW"><span>Vous devez <span>être
                                  connecté</span> pour poster un commentaire</span></span></div>
                          <div class="sc-3c8b4bd7-0 eA-dIHC">
                            <div class="sc-3386ffa2-0 doutqj">
                              <div class="sc-d2f319dc-0 iqQKvO">
                                <div data-testid="scrollbars" class="sc-d2f319dc-2 igKZTn">
                                  <ul data-testid="comments" class="sc-3386ffa2-1 kgNIXI">
                                    <li data-testid="comment-item" id="commentaire-15895" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMjY4MjIwLzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Anonymous268220"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMjY4MjIwLzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR">Anonymous268220-1</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 8 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Savez
                                            vous si une saison 2 est prévue ? Si oui quand? Merci</div>
                                        </div>
                                      </div>
                                      <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                        <li data-testid="comment-item" id="commentaire-16237"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMTI5NTM0LzE" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">KissenBlaze</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 8 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                2016, c'est tout ce qu'on sait, y'a pas de date précise, et c'est une
                                                première pour le studio MADHOUSE de produire une deuxième saison (même
                                                si One Punch Man aurait sûrement brisé le mythe)</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTI5NTM0LzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="KissenBlaze"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-31232"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMTQ2MTgyLzE" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">allterminator</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 7 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">Ha
                                                c'est vrai que MADHOUSE n'a jamais fait de suite à ses animes...</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTQ2MTgyLzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="allterminator"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-76900"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMTE3MTA2NS8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">akasaka-kun</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 5 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                moi en 2019 sans suite sortie ni prevue:<br>HAHAHAHAHAHA</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTE3MTA2NS8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="akasaka-kun"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-78480"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvNzI5MjkwLzE" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Groot</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                2019, toujours pas de suite........... XDDDD</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvNzI5MjkwLzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Kaak"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-80032"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMTA2Njk4Ni8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">ZgegInterstellaire</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                2019 on attend toujours snif</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTA2Njk4Ni8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                                alt="ZgegInterstellaire" loading="lazy" width="180" height="180"
                                                decoding="async" data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-83219"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvNTE0OTQ1LzE" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">cal</span> <span
                                                  class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                              </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">il
                                                y as un film de sorti mais pas de suite , enfin toujours pas , l'espoir
                                                fais vivre je sais xD</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvNTE0OTQ1LzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="cal.grd"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/overlord5_bg1_green0_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-85838"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMTE5OTYxMy8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">AshiroZe</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                Ici 2019 toujours rien ^^</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTE5OTYxMy8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="AshiroZe"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-87421"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMTEwMjE1NC8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Delico13</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                eux src sa fait plus de 3 ans que j'attent qui a des info ou esque
                                                quelqun sais si les fan vont faire une suite de eux même <br>?</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTEwMjE1NC8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Delico13"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-90145"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvNjUwMDM4LzE" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">GE3Kz</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                y'en aura malheureusement jamais. Il y a un film qui existe si tu veux
                                                mais il n'étanchera ta soif qu'un temps...</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvNjUwMDM4LzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="GE3Kz"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-91170"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMTIzMTQwNy8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Gustav20</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                ouais mais ils abusent madhouse ils font un super anime et le finissent
                                                meme pas</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTIzMTQwNy8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Gustav20"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-91205"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvOTQ2NjQ1LzE" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Llu</span> <span
                                                  class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                              </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                c'est toujours comme ça.. et c'est pas prêt de changer</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvOTQ2NjQ1LzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Llu"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/ch4_bg11_green0_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-91855"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvNzcyODkwLzE" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Esraka</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                2020 toujours aucune news.....triste :((</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvNzcyODkwLzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Esraka"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-118616"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMTY0MzA1OS8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Shiinamon</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                Pour l'instant, aucune n'est prévue</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTY0MzA1OS8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Shiinamon"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-122983"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvNTU0NzE4LzE" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">frvander</span> <span
                                                  class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                              </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">c
                                                possible rien est sure</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvNTU0NzE4LzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="frvander"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-126146"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMTM3ODYzMi8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Babazy</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                2020 on patiente encore</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTM3ODYzMi8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Babazy"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-140960"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMTExNDE0NC8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Kyza</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">Je
                                                pense que si d'ici début-milieu 2021 y'a même pas une annonce on peut
                                                éteindre nos espoirs</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTExNDE0NC8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                                alt="virgil.fonquernie" loading="lazy" width="180" height="180"
                                                decoding="async" data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-144140"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMTY5NTg4Ni8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">WakoZz</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">0n
                                                en sait toujours rien et on est presque en 2021. Je perds espoir...
                                              </div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTY5NTg4Ni8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="WakoZz"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-151412"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvNzI5NDE0LzE" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Izukend</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">Il
                                                n'y aura jamais de suite car l'oeuvre original na jamais étais continuer
                                                depuis 2018.</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvNzI5NDE0LzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Izukend"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-152312"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMTk1MjUxMy8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">ぼくのぴこ</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">Em
                                                2020 non plus mdrr</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTk1MjUxMy8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="lelabopau"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-154584"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMTkzNTEzMi8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Exaltyluinor</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                2020 on l'a.<br> NON</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTkzNTEzMi8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Exaltyluinor"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-154585"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMTkzNTEzMi8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Exaltyluinor</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                pardon 2021<br></div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTkzNTEzMi8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Exaltyluinor"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-167725"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMTExMDc4OS8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">sofianmerakechi221</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">Nn
                                              </div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTExMDc4OS8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                                alt="sofianmerakechi221" loading="lazy" width="180" height="180"
                                                decoding="async" data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-168394"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMTk2OTk5NS8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">jennifermoreau8640</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">la
                                                saison 2 n'est pas au programme ce qui est bien dommage<br></div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTk2OTk5NS8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                                alt="jennifermoreau8640" loading="lazy" width="180" height="180"
                                                decoding="async" data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-169782"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMjA5NzM3My8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">JoshGOD</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                MARS 2021 TOUJOURS PAS DE S2</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMjA5NzM3My8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="JoshGOD"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-179909"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMTY4NTI0OS8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Eloïse</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">on
                                                est en 2021 et il n'y a toujours pas de saison 2...<br></div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTY4NTI0OS8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="ELOÏSE_FCHR"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-182003"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMTE5Mzg2OS8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Mehdicament</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">yo
                                                on est en 2021 et y'aura qu'un film t'attends pas à autre chose toutes
                                                mes condoléances frérot</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTE5Mzg2OS8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Mehd1cament"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/ch14_bg0_green0_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-190181"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMjI3ODMwOC8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">anakin6036</span> <span
                                                  class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                              </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                Bonjour, en mai 2021 j'ai vu des rumeurs sur des forums comme quoi il y
                                                aurait une saison 2 mais elle n'est malheureusement toujours pas
                                                annoncé.</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMjI3ODMwOC8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="anakinsally"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/ch4_bg0_green0_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-205068"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMjU2ODM4Mi8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Anonymous2568382-1</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                ici 2021 toujours rien.<br></div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMjU2ODM4Mi8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                                alt="Anonymous2568382" loading="lazy" width="180" height="180"
                                                decoding="async" data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-207787"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMjMyMjkwNy8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">camilledobelmann</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                Apparemment, il est prévu qu'elle soit diffusé à un moment donné en
                                                2021, mais la Covid n'arrange rien. Nous n'avons toujours pas de date
                                                précise. </div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMjMyMjkwNy8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                                alt="camilledobelmann" loading="lazy" width="180" height="180"
                                                decoding="async" data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-210724"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMjQ1NzQxMy8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">misterieu51</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">la
                                                covid na effectivement rien arranger mais le mangaka na jamais dit qu'il
                                                aller arrêter surtout avec la fin qu'il nous a donner il faut s'armer de
                                                patience bien que sa fait qlq année que je l'attend mais début 2022 ou
                                                2021 il vas y'avoir une suite si tout se passe bien (si le covid dégage
                                                aussi sa m'arrangerait) le mangaka avais dit une suite mais a ce moment
                                                la il y'a eu le covid et beaucoup d'anime on été retarder donc c'est pas
                                                impossible qu'il y'est une suite </div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMjQ1NzQxMy8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="misterieu51"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-215078"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvNzU0NTM4LzE" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Pask13</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                Les gens a quand la suiiiiiiiite<br></div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvNzU0NTM4LzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Pask13"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-221727"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMjg4ODUwNS8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">LoydM12</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                fin 2021 normalement</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMjg4ODUwNS8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="LoydM12"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-226105"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvNjc2ODY0LzE" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">EcologieRepublicaine</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                source?</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvNjc2ODY0LzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                                alt="EcologieRepublicaine" loading="lazy" width="180" height="180"
                                                decoding="async" data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-229932"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMjk1NDEwNy8y" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Zey</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                2021 toujours pas de suite</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMjk1NDEwNy8y"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="majnight"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/ch2_bg13_green0_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-232487"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvOTczNjg0LzE" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Julienvlh</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                Désolé il n'y aura pas de suite :3 </div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvOTczNjg0LzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Rasta-populos"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-244700"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMjM4NDQ1Ny8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">imène_95</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                <span class="spoiler" tabindex="1">on ai en 2022 et tjrs rien ;-;</span>
                                              </div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMjM4NDQ1Ny8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="imène_95"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/ch4_bg0_green0_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-245709"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMjU2NTEyOS8z" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">AYOUB</span> <span
                                                  class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                              </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">je
                                                vais essayer de regarder pour vous<br></div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMjU2NTEyOS8z"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="momobfn"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/ch14_bg11_green1_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-245723"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMjgwMTk4LzI" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">invité</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                toujours rien de neuf en fin janvier 2022</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMjgwMTk4LzI"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="sasuk7"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-246900"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMjAyNTU0MS8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Tangiorno</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">9
                                                février 2022 et toujours aucune nouvelle...</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMjAyNTU0MS8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Tangiorno"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-250382"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMjcxMjYzNS8y" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Gael</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                16/03/2022 et toujours rien malheureusement :/<br></div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMjcxMjYzNS8y"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="N3cto"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/ch20_bg10_green0_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-266204"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMzQ3NTY4NC8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Prudence</span> <span
                                                  class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                              </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 1 an</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                6/08/2022 toujours pas de suite en vue</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMzQ3NTY4NC8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="pr1cess94"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/ch14_bg0_green0_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-273411"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMjUxMjU5LzE" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">moh2063</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 1 an</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                Comment ça MADHOUSE n'a jamais fait de suite ? Et Overlord, No Guns
                                                Life, et Diamond no Ace ? Pour ne citer que ceux-là.</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMjUxMjU5LzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="moh2063"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/ch4_bg0_green0_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-274188"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvNTQxNjcwLzE" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">gdieu.gd</span> <span
                                                  class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                              </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 1 an</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">ya
                                                aucun spoil mon reuf</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvNTQxNjcwLzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="gdieu.gd"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-279860"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMzcwMTQ1MS8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Keox88</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 1 an</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                Début 2023 rien je vois les mec 2017 je rigole, j'ai commencé l'anime
                                                2020 c'est mon anime préféré, j'ai un seum incommensurable.</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMzcwMTQ1MS8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Keox88"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-280762"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMzMyMDc4Ny8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">speedmerguez </span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 1 an</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                09/01/23 toujours aucune nouvelle </div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMzMyMDc4Ny8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="speedmerguez "
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-292245"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMTk2ODUxMS8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Neutre7</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 1 an</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">☠️
                                              </div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTk2ODUxMS8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                                alt="colin_jesusrevient" loading="lazy" width="180" height="180"
                                                decoding="async" data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-294579"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMjYxNjU4NC8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">jaromanacce2b</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 11 mois</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                27-07-2023 : On peut dire que c'est mort<br></div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMjYxNjU4NC8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                                alt="jaromanacce2b " loading="lazy" width="180" height="180"
                                                decoding="async" data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-298744"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMzM0MDQzNC80" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Anton</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 9 mois</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                ICI 2023 toujours rien<br></div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMzM0MDQzNC80"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Itachi69IQ"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/ch1_bg1_green0_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-299804"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMjUxODU4MS8z" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Invité</span> <span
                                                  class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                              </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 8 mois</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                BAS il est déjà sortie </div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMjUxODU4MS8z"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="johannanguyen"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/ch13_bg12_green0_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-302511"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMjkwMDkzNi8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Wilkalibur70</span> <span
                                                  class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                              </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 6 mois</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                07/01 /2024 toujours rien!</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMjkwMDkzNi8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Wilouf"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/goblin1_bgxdb_green0_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                      </ul>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-16263" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMjY4ODM1LzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="behemoth2B"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMjY4ODM1LzE"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">behemoth2B</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 8 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Très
                                            bonne anime, je le conseille a tous les fans. L'histoire est vraiment
                                            intéressante et sort un peu du lot par rapport a ceux que j'ai vu
                                            auparavant. les personnage sont attachant, l'histoire est ficeler de tel
                                            sorte que l'on veux voir la suite. Une suite serait le bienvenu.</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-16899" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMzA2MDMwLzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Candium38"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMzA2MDMwLzE"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Candium38</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 8 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">je me
                                            demande si ADN a son mot à dire dans la sortie de la saison 2 mais en tout
                                            cas ca rapporterais un max de moneyyyy et sinon un super anime que je
                                            conseil de tout coeur</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-17884" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMjkxMTg4LzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="OscarLiao2003"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMjkxMTg4LzE"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">OscarLiao2003</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 8 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Je me
                                            demande si vous allez licenciée la saison :(</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-21625" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMjMzNDc1LzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Maxcusu"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMjMzNDc1LzE"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Maxcusu</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 8 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Une
                                            saison 2 serais top</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-23665" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvNDY4MTkyLzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="jasonkent31"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvNDY4MTkyLzE"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">jasonkent31</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 7 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Savez
                                            vous si No game no life aura une sortie physique ( dvd et/ou Blu-ray ) ?
                                          </div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-27549" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvNjA0OTAxLzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Naruto-Senpai"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvNjA0OTAxLzE"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Naruto-Senpai</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 7 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Au
                                            malheur de vous décevoir, NGNL n'aura pas de saison 2 en France! Ses
                                            informations sont soutirées de différent site de renseignement! Il est
                                            possible que l'apparition d'un film soit prévu mais rien de tous cela n'est
                                            affirmé ;(</div>
                                        </div>
                                      </div>
                                      <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                        <li data-testid="comment-item" id="commentaire-27827"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvNDk5OTM3LzE" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">c.genois.25</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 7 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">et
                                                a l'étranger? il suffit juste de faire les sous titre non?<br>j'y
                                                connais rien du tout alors pas no flame :3</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvNDk5OTM3LzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="c.genois.25"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-28724"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMTE2MzU0LzE" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Kurenay87</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 7 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">Un
                                                film est en effet prévu pour le moi de juillet au japon, il est annoncé
                                                depuis plusieurs mois d'ailleurs. C'est donc possible qu'une suite voit
                                                le jour si le film fonctionne bien.</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTE2MzU0LzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Kurenay87"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-31231"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMTQ2MTgyLzE" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">allterminator</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 7 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                Woaw le mec le moins renseigné au monde...</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTQ2MTgyLzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="allterminator"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                      </ul>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-29062" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvNjMxMDA1LzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Pandabass"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvNjMxMDA1LzE"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Pandabass</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 7 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Ou
                                            sont les Oav mrc davance</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-32859" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvODc3NzYvMQ"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="kamaika1993"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvODc3NzYvMQ"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">kamaika1993</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 6 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">
                                            Bonjour, il y aurait un film NGNL sorti en Juillet, sera t-il possible de le
                                            voir sur le site prochainement?</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-33290" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvNjgzNjc1LzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="shannongodardtrue"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvNjgzNjc1LzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR">shannongodardtrue</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 6 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">très
                                            bon anime, filez nous la saison 2, PLEASE !!!</div>
                                        </div>
                                      </div>
                                      <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                        <li data-testid="comment-item" id="commentaire-191735"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMjQxOTQxNS8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">jordanhonorefondrose</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                2021 toujours rien༎ຶ‿༎ຶ<br></div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMjQxOTQxNS8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                                alt="jordanhonorefondrose" loading="lazy" width="180" height="180"
                                                decoding="async" data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/ch4_bg0_green0_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                      </ul>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-34580" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvNjk2NjcvMQ"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="maxime.angot"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvNjk2NjcvMQ"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">maxime.angot</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 6 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">2017
                                            toujour pas de suite</div>
                                        </div>
                                      </div>
                                      <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                        <li data-testid="comment-item" id="commentaire-270395"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvNjczNzYyLzE" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">simeonsurfer</span> <span
                                                  class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                              </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 1 an</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">en
                                                2022 toujours pas plus...</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvNjczNzYyLzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="simeonsurfer"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                      </ul>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-35082" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvNjU0NzgxLzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Raind0o"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvNjU0NzgxLzE"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Evan</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 6 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">J'ai
                                            adoré cet animé ! Si vous hésitez foncez le voir vous ne regretterez pas !
                                          </div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-36463" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvNzE5MDc4LzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="SwartyDreamer"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvNzE5MDc4LzE"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">SwartyDreamer</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 6 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Yoooo,
                                            premier commentaire de 2018!!!! J'ai étais me renseigner partout et j'ai vu
                                            que ce n'était pas la première et dernière fois que MADHOUSE ne finissait
                                            jamais un très bonne anime donc dsl de vous décevoir mais plus rien...</div>
                                        </div>
                                      </div>
                                      <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                        <li data-testid="comment-item" id="commentaire-37126"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMzI4MzExLzE" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">xioming</span> <span
                                                  class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                              </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 6 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                une saison 2 de prévue pour 2018</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMzI4MzExLzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="xioming"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/ch1_bg1_green0_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-37431"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvNjc4MDcyLzE" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Khinari</span> <span
                                                  class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                              </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 6 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">Tu
                                                es sûr de tes sources?</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvNjc4MDcyLzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Nekyra"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-37522"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvNjI5NjAxLzE" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">AzenArt</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 6 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                Oui c fort possible</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvNjI5NjAxLzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="AzenArt"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-38120"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span data-link="L3Byb2ZpbGUvOTM5NDQvMQ"
                                                  role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Easley62</span>
                                              </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 6 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                Une source ? parce que je cherche et j'ai pas d'info concrète donc ton
                                                com on dirai juste une supposition ce que tous le monde fait depuis 2016
                                                xD</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvOTM5NDQvMQ"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Easley62"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                      </ul>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-37607" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTc4NDYyLzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Silver Dark"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTc4NDYyLzE"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Silver Dark</span>
                                            <span
                                              class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 6 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Le
                                            film est sorti il a pour nom no game, no life zero ! <br>Sorti en 2017, donc
                                            je pense que la saison 2 devrait pas tarder à sortir !!!<br> Au passage, il
                                            est vraiment pas mal le film et on apprend pas mal de chose !!</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-49458" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvODY0MDI0LzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Dark-guard"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/ch9_bg9_green0_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvODY0MDI0LzE"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Darkguard</span>
                                            <span
                                              class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 5 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Un
                                            anime magnifique je le conseil à tous</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-57438" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvOTU1MTIxLzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Tymapaille"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvOTU1MTIxLzE"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Tymapaille</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 5 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">A
                                            quand la saison deux ? <span class="spoiler" tabindex="1">il faut bien avoir
                                              le jeu entre le dieu et le frères et la sœur </span></div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-57772" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvODE5MzQwLzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Pacifistaaah"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/ch14_bg0_green0_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvODE5MzQwLzE"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Pacifistaaah</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 5 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">
                                            Toujours de pas suite prévue, malgré la quasi unanimité de cet anime
                                            ??<br>Quelle frustration de finir comme ça ...<br>La SUIIIIITEEUUUH
                                            !!!!<br>Merci de faire une saison 2 (et autant qu'il faudra pour finir
                                            l'histoire !) ; l'univers est intéressant, la dimension statégie est
                                            captivante, les graphisme très sympas ...<br>SVP, on veut la suite (au cas
                                            où c'était pas clair jusque là) !</div>
                                        </div>
                                      </div>
                                      <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                        <li data-testid="comment-item" id="commentaire-59489"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvOTcwMDMyLzE" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">adam.declerck21</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 5 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                complètement d'accord avec toi c'est super frustrant de finir la
                                                dessus!!!!!!!!</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvOTcwMDMyLzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                                alt="adam.declerck21" loading="lazy" width="180" height="180"
                                                decoding="async" data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                        <li data-testid="comment-item" id="commentaire-59587"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span data-link="Iw" role="link"
                                                  tabindex="0" class="sc-fb73a479-0 jFWHTR">Anonyme</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 5 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                Déjà 3 ans et toujours pas de nouvelles...</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="" role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Anonyme"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                      </ul>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-60751" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTAxMTcwMS8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Sûgo Tanaka"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTAxMTcwMS8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">S</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 5 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">2019,
                                            et jamais on ne pourra espérer revoir No Game No Life sur nos écrants...
                                          </div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-60760" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvOTI2MTQxLzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="KiraRoot"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvOTI2MTQxLzE"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">KiraRoot</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 5 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">La
                                            suite continue de sortir en manga alors on peut espérer un jour une suite en
                                            animé <span class="spoiler" tabindex="1">le duel avec le Old Deus est déjà
                                              sorti en manga</span></div>
                                        </div>
                                      </div>
                                      <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                        <li data-testid="comment-item" id="commentaire-61075"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvOTE0NjA4LzE" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">AngelNight</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 5 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                Pour l'instant il n'y a que 2 tomes qui sont sortis en France comme au
                                                Japon. Le premier tome au Japon en 2013, et ce n'est qu'en 2018 que le
                                                tome 1 &amp; 2 sort en France avec la sortie du tome 2 au Japon. On
                                                espère un tome 3 très prochainement. Sachant qu'ils se basent sur le
                                                light novel sorti qu'au japon. La saison 2 sortira sans doute, quand le
                                                manga aura raconté toute la saison 1.</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvOTE0NjA4LzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="AngelNight"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                      </ul>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-61743" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvOTk0NjAwLzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="BeaverLTS"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvOTk0NjAwLzE"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">BeaverLTS</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 5 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">On a
                                            eu le droit à une saison 2 de One Punch Man alors que la saison 1 est sortie
                                            y'a quelques années donc j'ai encore un espoir, même s'il est minuscule,
                                            pour cette série :/</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-63837" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTA1NTkwMC8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Cobra-29"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTA1NTkwMC8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">VirtualX</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 5 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Même
                                            après 5 fois.. j'en redemande toujours XD</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-64178" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTA1MDg3Ny8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="jamzorg"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTA1MDg3Ny8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">jamzorg</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 5 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Quand
                                            vient la saison 2 !!!!!!!!!!</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-64884" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvOTY4NzI2LzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Valahian"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/ch1_bg12_green0_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvOTY4NzI2LzE"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Valahian</span>
                                            <span
                                              class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 5 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">
                                            Quelqu'un sait ou voir le film de NGNL ? je ne le trouve nulle part :(</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-66611" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTA4MDMzOC8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="ifred14"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTA4MDMzOC8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">ifred14</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 5 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">un
                                            trés bon animé qui nous laisse sur notre fin... j'espère que nous aurons
                                            droit, un jour, à une saison 2!</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-67003" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTA5MDQ5NS8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Zinonix"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/ch14_bg0_green0_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTA5MDQ5NS8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Zinonix</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 5 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Bon
                                            bah vue les comm jvai commencer ce fameux no game no life dont tout le monde
                                            parle en espérant que ca ne soit pas comme Sword art online car oui je n’est
                                            pas trop kiffé cette anime bon allez jme lance bisou et si j’aime je serai
                                            déçus car j’ai crus comprendre qu’il n’y a pas de saison 2 au bout de
                                            quelque année jvai prendre du plaisir alors bye ^^ !</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-68551" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvOTIwNTczLzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="GeekTeam"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvOTIwNTczLzE"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">GeekTeam</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 5 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">
                                            Vraiment TRISTE !!</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-69775" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTY0MjQ4LzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="ulrich.kikoolol"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTY0MjQ4LzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR">ulrich.kikoolol</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 5 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Après
                                            avoir regarder plusieurs fois la série, j'ai toujours autant de plaisir à le
                                            regarder encore une fois. Je peux vous dire une chose, le film NO GAME NO
                                            LIFE ZERO est du même niveau voir plus. En plus d'être magnifique (à tous
                                            les niveaux), l'histoire est prenante et touchante sur le sort des
                                            humains.Ils sont proche de l'extinction et tentent de survivre à des guerres
                                            de titan. Le thème est dramatique avec un côté fin du monde mais cela permet
                                            de comprendre la série. Si ADN pouvait mettre le film qui est loin très loin
                                            au dessus des films ridicules de naruto/fairytail (j’apprécie les séries
                                            mais les films sont à oublier, désolé).</div>
                                        </div>
                                      </div>
                                      <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                        <li data-testid="comment-item" id="commentaire-70080"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvOTYxNjA1LzE" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">hugomon18</span> <span
                                                  class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                              </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 5 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">je
                                                suis totalement d'accord! ce filme est un pure chef d'oeuvre et ce
                                                serait vraiment bien que ADN puisse nous le proposer!</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvOTYxNjA1LzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="hugomon18"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/oshi4_bg14_green0_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                      </ul>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-69938" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvNTU0MTk4LzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Crodacier"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvNTU0MTk4LzE"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Crodacier</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 5 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Une
                                            super série, bon scénario, personnages attachant et de l'humour vivement la
                                            suite ..</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-71479" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTEyODgwOC8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Stram"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTEyODgwOC8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Stram</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 5 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">L une
                                            des meilleur anime</div>
                                        </div>
                                      </div>
                                      <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                        <li data-testid="comment-item" id="commentaire-284629"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMjE4NDU3Ni8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">TALOULINE°</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 1 an</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                UNE ?!<br>UN ANIME !!!<br></div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMjE4NDU3Ni8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="redatln19"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                      </ul>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-71481" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTEyODgwOC8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Stram"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTEyODgwOC8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Stram</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 5 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">La
                                            saison 2 est prévu pour juillet aout ! ????</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-72672" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvOTM4MzQxLzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="ludo792"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvOTM4MzQxLzE"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">ludo792</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 5 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">y aura
                                            une suite ou pas ?</div>
                                        </div>
                                      </div>
                                      <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                        <li data-testid="comment-item" id="commentaire-73517"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvNzg0NTQxLzE" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Cedrik3324</span> <span
                                                  class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                              </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 5 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">Je
                                                ne pense pas car en France ce manga/animé est vu comme mal sain
                                                malheureusement.</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvNzg0NTQxLzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Cedrik3324"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                      </ul>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-75371" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTEzMTg1OS8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="KRA_ANIME_203"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTEzMTg1OS8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">KRA_ANIME_203</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 5 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">C'est
                                            une série super sympa mais je pense que tout le monde rêve d'une suite</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-82043" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTIyMTIzNi8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="TheShinigaming"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTIyMTIzNi8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR">TheShinigaming</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">
                                            quelqu'un sait si une saison deux est prévue ? Car ça ma semble étrange que
                                            ca se finisse avec <span class="spoiler" tabindex="1">la création de l'union
                                              d'elchia</span></div>
                                        </div>
                                      </div>
                                      <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                        <li data-testid="comment-item" id="commentaire-85844"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvNTEwNDk2LzE" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Baykog</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">Il
                                                y a des années que les gens attendant une suite, on peut toujours rêver
                                                je pense. Il y a le film No Game No Life Zero sur ADN si tu veux.</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvNTEwNDk2LzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Baykog"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                      </ul>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-82747" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvNzYxMDMyLzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="MamanLoutre"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/fruits1_bg6_green0_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvNzYxMDMyLzE"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Maman Loutre</span>
                                            <span
                                              class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">
                                            haaaaaaaaaaan j'aimerais tellement qu'il y ai une saison 2 !! j'ai surkiffer
                                            !</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-87392" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTE2NjkyMy8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Purikyua"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTE2NjkyMy8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Kyoko</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">2019
                                            tjrs pas de saison 2 xc je perd esploir bordel</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-91339" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvODU0MTczLzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Flo92izzi"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvODU0MTczLzE"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Flo92izzi</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">
                                            presque 2020 hein mais toujours rien</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-93591" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTE2NjQyMi8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="fatalis7LT"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTE2NjQyMi8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">fatalis7LT</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">2020
                                            toujours pas</div>
                                        </div>
                                      </div>
                                      <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                        <li data-testid="comment-item" id="commentaire-97219"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMTQwNDgzMy8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">yohan.matheron</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">il
                                                n'y en aura jamais c l’auteur qui la annoncer je ne sais plus trop ou
                                                dsl</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTQwNDgzMy8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                                alt="yohan.matheron" loading="lazy" width="180" height="180"
                                                decoding="async" data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                      </ul>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-99085" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTQyMDA4OC8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="NINIS93"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTQyMDA4OC8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">NINIS93</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Y a un
                                            film de no game no life sur ADN</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-100386" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTEwNDc2My8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="yhaouaz200654"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTEwNDc2My8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR">y.haouaz200654</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">2020
                                            pa de suite XD</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-110004" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTU3NDc1Ny8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="CREEPYMANGA"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTU3NDc1Ny8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">CREEPYMANGA</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">on
                                            attend tous la saison 2 super animé que je conseille</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-113473" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="" role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Anonyme"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="Iw" role="link"
                                              tabindex="0" class="sc-fb73a479-0 jFWHTR">Anonyme</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">J'ai
                                            adore se manga ,mais toujours pas saison 2</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-115603" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTQ2MTkyMy8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="pige00n"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTQ2MTkyMy8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">pige00n</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">sa
                                            fait deja 4 ans ils peuvent pas nous laisser comme sa poiroter en plus ils
                                            ont sortit le 0 sa serai dommage de déçevoir autan de fan</div>
                                        </div>
                                      </div>
                                      <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                        <li data-testid="comment-item" id="commentaire-115920"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMTUwNjA0Ni8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">lilou582</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">il
                                                n'y aura surement pas de saison 2 à cause d'un procés que l'auteur de
                                                jojo bizarre's adventure a lancé il a gagné donc il n'y a qu un film on
                                                y peut rien</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTUwNjA0Ni8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="lilou582"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                      </ul>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-117633" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTUxNDQzOC8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="puresangcamille"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTUxNDQzOC8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR">puresangcamille</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">
                                            dommage qu'on est jamais u de suite l'anime aurait pus avoir encore plus de
                                            succes,<br>j'aprecis cet anime et je trouve dommage de le laisse infini ,
                                            les peso sont pas mal (malgres qu'il paraissent inseste) <br>j'ai bien aimer
                                            le visioner je ne reproche que le fait que je me sois un peu ennuyer et que
                                            je trouve un peu le temps long malgres qu'il n'y est que 12 episodes</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-117634" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTUxNDQzOC8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="puresangcamille"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTUxNDQzOC8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR">puresangcamille</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">enfin
                                            je trouve le temps long*</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-121593" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTY3MDk0NC8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Foxam90"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTY3MDk0NC8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Foxam90</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">a
                                            quand une suite ? :(</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-124581" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTUxMjczMC8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="emilie.grondin17"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTUxMjczMC8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR">emilie.grondin17</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Cette
                                            animes est super je l'ais adoré mais malheureusement on est en 2020 et il
                                            n'y a toujours pas de saison 2. Sa me rend quand même triste car j'adorerais
                                            voir le dieux et le frère et la sœur jouer au échec avec les pièce des
                                            royaume. Je vous le conseil mais si vous êtes un/une accro comme moi et qui
                                            peux pas supporter qu'il n'y a pas de suite je vous le conseil pas????????.
                                          </div>
                                        </div>
                                      </div>
                                      <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                        <li data-testid="comment-item" id="commentaire-124583"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMTUxMjczMC8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">emilie.grondin17</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">Il
                                                y a des point d'interrogation au lieu de smil dsl -_-</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTUxMjczMC8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                                alt="emilie.grondin17" loading="lazy" width="180" height="180"
                                                decoding="async" data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                      </ul>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-125224" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTEyMzI0OC8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Scrap_er_YTB"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTEyMzI0OC8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Scrap_er_YTB</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Je
                                            trouve ça horrible qu'il y ait pas vraiment de fin.... ils ont abandonné
                                            l'animé ou c'est juste que la fin n'est pas ni sur netflix ni sur ADN???
                                          </div>
                                        </div>
                                      </div>
                                      <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                        <li data-testid="comment-item" id="commentaire-133322"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMTc1MjQ0Ny8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">trinity_seven</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">il
                                                y a no game no life zéro si tu est intéresser</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTc1MjQ0Ny8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="trinity_seven"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                      </ul>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-128992" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTY4MjcwMi8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="HiTroZ"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTY4MjcwMi8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">HiTroZ</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">C'est
                                            un super anime dommage qu'il y a pas une saison 2</div>
                                        </div>
                                      </div>
                                      <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                        <li data-testid="comment-item" id="commentaire-130145"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvODYyMDI0LzE" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Sparthades</span> <span
                                                  class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                              </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                C'est vrai qu'il n'y pas de saison 2 mais pas encore officiel avec une
                                                chance d'avoir la saison 2 en 2021 vu le succès pour la saison 1 qui a
                                                très bien marché</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvODYyMDI0LzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Sparthades"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/ch4_bg12_green0_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                      </ul>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-136094" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvNjQwNTM5LzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                            alt="FlemeDeTrouver1Blaz" loading="lazy" width="180" height="180"
                                            decoding="async" data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvNjQwNTM5LzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR">FlemeDeTrouver1Blaz</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">
                                            vraiment domage de pas saison 2 mais quand c'est mort c'est mort</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-143105" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTc2NjgxOS8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Arlequino"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTc2NjgxOS8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Arlequino</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">On
                                            veut une saison 2!<span class="spoiler" tabindex="1">ils ont battut que les
                                              Warbeast</span></div>
                                        </div>
                                      </div>
                                      <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                        <li data-testid="comment-item" id="commentaire-144425"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMTEyMzI0OC8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Scrap_er_YTB</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                regarde le film (si c'est pas déjà fait) tu verras tu le regretteras pas
                                                ;)</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTEyMzI0OC8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Scrap_er_YTB"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                      </ul>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-145031" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvNzEyNzY4LzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="wagrezj"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvNzEyNzY4LzE"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">wagrezj</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Aucune
                                            bande-annonce n’est disponible pour le moment. De plus, cela ne m’étonnerait
                                            pas si No Game No Life Saison 2 sortait l’année prochaine 2021 ou 2022 et
                                            sera diffusé un an plus tard. Le studio Madhouse est occupé à créer un autre
                                            anime ces jours-ci avec d’autres studios d’anime, il est donc certain que
                                            cet anime prendra un certain temps à sortir. Cependant, No Game No Life
                                            Saison 1 a fait un travail remarquable. La production mettrait donc quelques
                                            années à annoncer No Game No Life Saison 2.</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-149452" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTk4NjY0Ny8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="geekraida"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTk4NjY0Ny8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">geekraida</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Très
                                            bonne série , je l'ai toute suite su au début du premier épisode , je
                                            l'avais fini à l'époque , mais je vous la conseille .</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-154147" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMzU1MDgzLzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Tenshenya"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMzU1MDgzLzE"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Tenshenya</span>
                                            <span
                                              class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">2021
                                            aussi xd</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-157899" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMjA4NDExMC8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Lawrooom"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMjA4NDExMC8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Lawrooom</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">2021
                                            Toujours aucune suite a l'horizon...xD</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-158510" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTgxMzI4OS8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="compteprops"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTgxMzI4OS8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">LawfuL12</span>
                                            <span
                                              class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Bon
                                            bah 2021 toujours pas de suite, on peut dire qu'il n'y en aura jamais..
                                          </div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-160603" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTc1MDI2My8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Fakharyr"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTc1MDI2My8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">RyanPouli</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Ici
                                            2021 toujours rien...</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-160685" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTY4NzYzMC8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Yamiasta"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTY4NzYzMC8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">le meilleure anime
                                              ces one piece</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Aucune
                                            saison 2 ne sortira pour le moment.<br>Il y en aura une seulement si un
                                            autre éditeur prends le relais.</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-168287" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvOTg1ODA2LzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Rudy18"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvOTg1ODA2LzE"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Rudy18</span> <span
                                              class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Mais
                                            moi je regarde en 2021 et il y a toujours pas de saison 2 stp r ajoutez une
                                            saison 2 pleese<br></div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-176087" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMjA1MDYxNC8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="amarillof"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMjA1MDYxNC8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">amarillof</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">2021
                                            tjrs rien<br></div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-176295" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMjIyNTE3Ny8y"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="nessa60200"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/ch10_bg14_green0_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMjIyNTE3Ny8y"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Mathmath</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">2021
                                            toujours pas de suite XD</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-178238" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTY2MjcwOS8y"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Mgorio"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/ch1_bg7_green0_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTY2MjcwOS8y"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">keyan</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">2021
                                            on n'a pas la saison 2 <br><br></div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-187490" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTAxMzcyOC8y"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Hpindo"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/ch1_bg11_green0_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTAxMzcyOC8y"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">zebiiii</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">ESKE
                                            YA UNE AUTRE SAISON DE PREVUE PSK DEPUSI 2016 QUE J4ATTENDS<br></div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-188141" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTY1ODY0My8y"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="leon.frengulo"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/ch12_bg8_green0_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTY1ODY0My8y"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Merlin</span> <span
                                              class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">bah on
                                            est en 2021 et y'a toujours pas de saison 2 ahah<br><br></div>
                                        </div>
                                      </div>
                                      <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                        <li data-testid="comment-item" id="commentaire-189298"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMjAzMzk0Mi8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">Gabisparta</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                :-(</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMjAzMzk0Mi8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Gabisparta"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                      </ul>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-196898" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTgyOTczOS8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="tanguy.dms224"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTgyOTczOS8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">tanguy.dms224</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Bon ,
                                            Juin 2021 toujours pas de précision sur une autre saison prévue , c'est
                                            dommage d'avoir couper la s1 comme ça sans suite de prévue sa ruine un puex
                                            la série je trouve , ce qui est bien dommage dans le contexte que la série
                                            et vraiment génial</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-197903" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMjUyMDczMy8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="god man"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMjUyMDczMy8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">god man</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">c
                                            nul<br></div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-201825" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMjE5MTcxNy8y"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Kainos26"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/ch15_bg9_green0_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMjE5MTcxNy8y"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR">Healzz_Raphaste</span> <span
                                              class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">ici
                                            2021 et toujours pas de saison 2 </div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-202029" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMjE3MzI4MS8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="ktarinoura"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMjE3MzI4MS8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Adam</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Peut
                                            être fin 2021 on espère </div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-202278" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTQ1NTgxNy8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Galax_Star"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTQ1NTgxNy8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Mangao</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">lourd
                                          </div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-203493" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMjU2OTgyOC8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Chronosss"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMjU2OTgyOC8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Chronosss</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Ici
                                            lundi 5 juillet est-ce que il y a une deuxième saison please</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-203939" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMjQ0ODIwOS8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="sdefaye01"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMjQ0ODIwOS8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Félix</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Je
                                            crois que l'auteure est malade (gravement malade ) </div>
                                        </div>
                                      </div>
                                      <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                        <li data-testid="comment-item" id="commentaire-213099"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMjY2MTc2Ny8y" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">The_Nageur</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                dommage sniff</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMjY2MTc2Ny8y"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                                alt="nicolaspetitfrere" loading="lazy" width="180" height="180"
                                                decoding="async" data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/ch20_bg12_green1_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                      </ul>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-210095" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTE0MzA5OC80"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Anonymous1143098"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/ch5_bg10_green1_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTE0MzA5OC80"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">le caca c'est
                                              fondant</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">quand
                                            je pense à la saison 2 ... Je pleure ,je meurs</div>
                                        </div>
                                      </div>
                                      <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                        <li data-testid="comment-item" id="commentaire-210727"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMjQ1NzQxMy8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">misterieu51</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">je
                                                souffre je suis en pls help me</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMjQ1NzQxMy8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="misterieu51"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                      </ul>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-221781" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMjg4ODkxMC8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Clc93"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMjg4ODkxMC8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Clc93</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">2021
                                            on att tjr une suite<br></div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-221783" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMjg4ODkxMC8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Clc93"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMjg4ODkxMC8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Clc93</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">pour
                                            ce qui ne serait pas au courant il existe des épisodes spéciaux </div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-225838" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMjcxNTY3NS8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Parzivale"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/ch1_bg1_green0_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMjcxNTY3NS8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Parzivale</span>
                                            <span
                                              class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Salut
                                            les fans d'animé, je vous informe que le saison 2 est bien prévue mais nous
                                            avons encore aucune date. Du au faite que Yū Kamiya souhaite avant tous
                                            terminer ces romans. A la suite les manga sortirons et en dernier l'animé
                                            donc soyez encore très patient.</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-244936" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMjAxNDgzNi8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="emmasteeland"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMjAxNDgzNi8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">emmasteeland</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">2022
                                            toujours aucune nouvelle rip</div>
                                        </div>
                                      </div>
                                      <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                        <li data-testid="comment-item" id="commentaire-244941"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMzE0OTM5NC8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">H_IL</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                ouais<br></div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMzE0OTM5NC8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="H_IL"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                      </ul>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-251128" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTAwODI1Ny8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="harukki"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/eminence1_bg14_green0_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTAwODI1Ny8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">harukki</span> <span
                                              class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">comme
                                            beaucoup de série des suite sont annoncé puis repoussé à des dates ultérieur
                                            sans plus de nouvelles. les raisons son quant à elles diverse (actualités
                                            mondiale ou raison de santé de l'auteur et autre...) pour tout fan il faut
                                            attendre que sa arrive un jour sur nos écrans et s'armé de patience ^_^"<br>
                                          </div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-252895" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMzMwMDM3NC8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="saadelyousfi281"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMzMwMDM3NC8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR">saadelyousfi281</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Avril
                                            2022 est toujours rien<br></div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-256005" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMjE0MTgxMS8y"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="beebo"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/ch10_bg14_green1_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMjE0MTgxMS8y"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Kitty
                                              magicien</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">une
                                            saison 2 a ete anonce et est en cour de production</div>
                                        </div>
                                      </div>
                                      <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                        <li data-testid="comment-item" id="commentaire-256133"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMjgxNTAzMC8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">ANAYO</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                dit nous la source, car il y'a aucune info sur internet</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMjgxNTAzMC8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="ANAYO"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                      </ul>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-258764" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMzQxODkwMC8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="9019012"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMzQxODkwMC8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">9019012</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">
                                            Comment faire pour ouvrir les vidéos<br></div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-259052" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMzE0MTYzNS8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Leny670"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMzE0MTYzNS8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Leny670</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">jour
                                            325645 toujours rien</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-259100" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMjY4NDU0MC8y"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Romane3110"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/ch20_bg12_green1_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMjY4NDU0MC8y"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Nahel</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">2022
                                            rien<br><br></div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-261121" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMzEwMjU2NS8z"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Lefael"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/naruto1_bg8_green0_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMzEwMjU2NS8z"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">BlueTerror</span>
                                            <span
                                              class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">3090
                                            toujours rien lol<br>sinon j'adore l'anime</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-268415" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMzMxMjc5MC8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="nicolasrasse09"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMzMxMjc5MC8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">La Soupe</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 1 an</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">
                                            23/08/2022 15:38 Pas de suite x)</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-268916" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTk3NDY0My8z"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Ridley67"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/ch1_bg14_green0_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTk3NDY0My8z"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Dnr</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 1 an</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Jour
                                            3150 tjr r mdrrr</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-277353" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTg2NTA2Ny8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="sashmod"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/ch10_bg14_green0_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTg2NTA2Ny8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">sashmod</span> <span
                                              class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 1 an</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">
                                            03/12/2022 toujours pas de suite..</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-279064" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTMxODIxNi8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="GalaxyX3nosis"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/ch18_bg12_green0_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTMxODIxNi8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">vatigras</span>
                                            <span
                                              class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 1 an</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">
                                            24/12/2022, demain c'est Noel, toujours pas de seconde saison :°</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-284330" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMzIyODEzMS8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="lescorpion971"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMzIyODEzMS8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Dia</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 1 an</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">2023
                                            toujours pas de saison 2 </div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-284331" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMzIyODEzMS8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="lescorpion971"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMzIyODEzMS8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Dia</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 1 an</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">2023
                                            toujours pas de saison 2 </div>
                                        </div>
                                      </div>
                                      <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                        <li data-testid="comment-item" id="commentaire-284630"
                                          class="sc-f8132342-1 cgwBxx">
                                          <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                            <div class="sc-f8132342-6 hcKLri">
                                              <div class="sc-f8132342-7 giwGoq"><span
                                                  data-link="L3Byb2ZpbGUvMjE4NDU3Ni8x" role="link" tabindex="0"
                                                  class="sc-fb73a479-0 jFWHTR">TALOULINE°</span> </div>
                                              <div class="sc-f8132342-9 ghALZj"> Posté il y a 1 an</div>
                                            </div>
                                            <div class="sc-f8132342-10 GNNRV">
                                              <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                                ouip :')</div>
                                            </div>
                                          </div>
                                          <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMjE4NDU3Ni8x"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="redatln19"
                                                loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                                class="sc-f8132342-4 gpxdqr"
                                                src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                                style="color: transparent;"></span></div>
                                        </li>
                                      </ul>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-285131" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvNjg3MDA2LzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="EssKaaP"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvNjg3MDA2LzE"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">EssKaaP</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 1 an</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">mdr
                                            tjr pas de S2 mais bon apres 7ans je me rapelle plus de rien ....</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-285661" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTcyMzg4Mi8y"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="timo04052003"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/ch21_bg12_green0_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTcyMzg4Mi8y"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Dosko</span> <span
                                              class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 1 an</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">
                                            faudrait vraiment pensais a faire une saison 2 <br></div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-290148" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTUxMTc5Ni8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="alainzoodu93"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTUxMTc5Ni8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">alainzoodu93</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 1 an</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">
                                            j'aurais du prendre ce train plus tôt, gros banger </div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-290319" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvNTcxNjI4LzE"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="KiritoAsunaSao"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvNTcxNjI4LzE"
                                              role="link" tabindex="0"
                                              class="sc-fb73a479-0 jFWHTR">KiritoAsunaSao</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 1 an</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Alors
                                            je suis désolé que casser les rêves de plusieurs lecteurs ici qui espèrent
                                            encore une quelconque saison 2 pour No Game No Life mais elle ne sera jamais
                                            réalisée ! L'auteur de NGNL, Yuu Kamiya aussi connu sous Thiago Furukawa
                                            Lucas (un brésilien) a été contraint de se retirer de la scène du mangaka
                                            pour faute de plagiat. Il aurait utiliser le travail de d'autres artistes
                                            sans leur accord, malgré les excuses émises et les dédommagements, ça finit
                                            au tribunal. Donc Mr Yu Kamiya a du purger une peine de prison. <br>Pour le
                                            film, le design des persos reprends ceux fidèle aux light novel du même
                                            auteur et du manga, dessiné par Mashiro. La S1 reprenait le contenu des 3
                                            premiers LN, jusque là tout était bon mais c'est plus loin dans la série que
                                            certains éléments ont été plagiés. <br><br>Donc une saison 2 ? Je ne pense
                                            pas car Mr Yu Kamiya n'as plus donné de signe de vie depuis sa peine !</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-302510" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMjkwMDkzNi8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Wilouf"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/goblin1_bgxdb_green0_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMjkwMDkzNi8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Wilkalibur70</span>
                                            <span
                                              class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 6 mois</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">
                                            07/01/2024 toujours pas de suite, et d'après le commentaire au dessus du
                                            mien y'en aura pas dommage!<br><br>Merci à toute l'équipe d'adn!!!</div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-308285" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvNDE1Mzg1MC8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="christ063"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvNDE1Mzg1MC8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">christ063</span>
                                          </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 mois</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">2024
                                            tjrs en attente de la saison 2<br></div>
                                        </div>
                                      </div>
                                    </li>
                                    <li data-testid="comment-item" id="commentaire-310316" class="sc-f8132342-1 cgwBxx">
                                      <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvNDIzODQ2NC8x"
                                          role="link" tabindex="0"
                                          class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Zaaka"
                                            loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                            class="sc-f8132342-4 gpxdqr"
                                            src="https://avatar.animationdigitalnetwork.fr/web/ch4_bg0_green0_188.jpg"
                                            style="color: transparent;"></span></div>
                                      <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                        <div class="sc-f8132342-6 hcKLri">
                                          <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvNDIzODQ2NC8x"
                                              role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Zaaka</span> </div>
                                          <div class="sc-f8132342-9 ghALZj"> Posté il y a 20 jours</div>
                                        </div>
                                        <div class="sc-f8132342-10 ceaJdD">
                                          <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">10 ans
                                            de sont écoulés et toujours rien... C'est long mais je suis sur que la
                                            saison va arriver un jour ou l'autre, certe, l'auteur a eu des problèmes de
                                            santé comme son cancer de l'estomac, il a été accusé de plagiat, mais ça l'a
                                            pas fait retirer du monde du manga puisque les light novel sont toujours en
                                            production sachant que la saison 1 c'est les 3 premiers tomes du light
                                            novel, il y a 12 tomes actuellement. A ce qu'il paraît, l'auteur a aussi
                                            annoncé que l'œuvre prendrait "bientôt" fin sans nous dire combien de tomes
                                            il reste... Donc voilà pourquoi je pense qu'il y'aura une saison 2, peut
                                            être demain ou dans quelques années, mais je suis sur qu'il y en aura une...
                                          </div>
                                        </div>
                                      </div>
                                    </li>
                                  </ul>
                                </div>
                                <div class="sc-d2f319dc-1 jreYYe"></div>
                                <div class="sc-d2f319dc-3 kqHagB"></div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div data-testid="relatedshowlist">
                    <div class="sc-5a07385f-0 bjqPKO">
                      <div class="sc-5a07385f-1 djrtre">
                        <h2 class="sc-5a07385f-2 fDafkR"><span class="sc-5a07385f-3 ikPnob">Anime à voir ensuite</span>
                        </h2>
                        <div>
                          <div class="sc-fbb18752-1 kpgeux">
                            <div data-testid="horizontal-list" class="sc-6eec03a9-0 kydjJB">
                              <div class="sc-6eec03a9-1 kLRzJm">
                                <ul class="sc-6eec03a9-2 egmhYp">
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/568-no-game-no-life-zero">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="No Game No Life 0" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/ngnl/film/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">No Game No Life 0</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/529-overlord-saison-3">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img alt="Overlord III"
                                              loading="lazy" width="196" height="280" decoding="async" data-nimg="1"
                                              class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/overlord/tv3/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Overlord III</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/909-overlord-saison-4">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img alt="Overlord IV"
                                              loading="lazy" width="196" height="280" decoding="async" data-nimg="1"
                                              class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/overlord/tv4/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Overlord IV</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor" href="/video/370-overlord">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img alt="Overlord"
                                              loading="lazy" width="196" height="280" decoding="async" data-nimg="1"
                                              class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/overlord/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Overlord</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/505-overlord-saison-2">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img alt="Overlord II"
                                              loading="lazy" width="196" height="280" decoding="async" data-nimg="1"
                                              class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/overlord/tv2/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Overlord II</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/442-sword-art-online">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="Sword Art Online" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/swordartonline/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Sword Art Online</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor" href="/video/670-to-love-ru">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img alt="To Love-Ru"
                                              loading="lazy" width="196" height="280" decoding="async" data-nimg="1"
                                              class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/toloveru/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">To Love-Ru</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/217-to-love-darkness">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="To Love-Ru - Darkness" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/toloveru/tv3/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">To Love-Ru - Darkness</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/973-the-eminence-in-shadow">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="The Eminence in Shadow" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/eminenceshadow/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">The Eminence in Shadow</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/1122-my-instant-death-ability-is-so-overpowered-no-one-in-this-other-world-stands-a-chance-against-me">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="My Instant Death Ability Is So Overpowered, No One in This Other World Stands a Chance Against Me!"
                                              loading="lazy" width="196" height="280" decoding="async" data-nimg="1"
                                              class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/myinstantdeathability/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">My Instant Death Ability Is So
                                            Overpowered, No One in This Other World Stands a Chance Against Me!</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                </ul>
                              </div>
                              <div class="sc-6eec03a9-3 bBfLyW"><span
                                  class="sc-45f49f9-0 kHRvYb icon sc-6eec03a9-4 kaJHtA icon-left"
                                  data-testid="left-arrow"></span></div>
                              <div class="sc-6eec03a9-3 kQfEXv"><span
                                  class="sc-45f49f9-0 kHRvYb icon sc-6eec03a9-4 kaJHtA icon-right"
                                  data-testid="right-arrow"></span></div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div data-testid="pairshowlist">
                    <div data-testid="pairshowlist">
                      <div class="sc-5a07385f-0 bjqPKO">
                        <div class="sc-5a07385f-1 djrtre">
                          <h2 class="sc-5a07385f-2 fDafkR"><span class="sc-5a07385f-3 ikPnob">Fictions fantastiques avec
                              des gags</span></h2>
                          <div>
                            <div class="sc-fbb18752-1 kpgeux">
                              <div data-testid="horizontal-list" class="sc-6eec03a9-0 kydjJB">
                                <div class="sc-6eec03a9-1 kLRzJm">
                                  <ul class="sc-6eec03a9-2 egmhYp">
                                    <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                      data-testid="show-item">
                                      <div class="sc-78652606-1 cjTGPX"><a
                                          class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                          href="/video/398-undefeated-bahamut-chronicles">
                                          <div class="sc-78652606-2 gtTxwn">
                                            <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                                alt="Undefeated Bahamut Chronicles" loading="lazy" width="196"
                                                height="280" decoding="async" data-nimg="1"
                                                class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                                src="https://image.animationdigitalnetwork.fr/license/saibahamut/tv/web/affiche_350x500.jpg">
                                            </div>
                                          </div>
                                          <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                            <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Undefeated Bahamut Chronicles
                                            </h3>
                                          </div>
                                        </a></div>
                                    </li>
                                    <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                      data-testid="show-item">
                                      <div class="sc-78652606-1 cjTGPX"><a
                                          class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                          href="/video/964-immoral-guild">
                                          <div class="sc-78652606-2 gtTxwn">
                                            <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                                alt="Immoral Guild" loading="lazy" width="196" height="280"
                                                decoding="async" data-nimg="1"
                                                class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                                src="https://image.animationdigitalnetwork.fr/license/immoralguild/tv/web/affiche_350x500.jpg">
                                            </div>
                                          </div>
                                          <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                            <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Immoral Guild</h3>
                                          </div>
                                        </a></div>
                                    </li>
                                    <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                      data-testid="show-item">
                                      <div class="sc-78652606-1 cjTGPX"><a
                                          class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                          href="/video/670-to-love-ru">
                                          <div class="sc-78652606-2 gtTxwn">
                                            <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img alt="To Love-Ru"
                                                loading="lazy" width="196" height="280" decoding="async" data-nimg="1"
                                                class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                                src="https://image.animationdigitalnetwork.fr/license/toloveru/tv/web/affiche_350x500.jpg">
                                            </div>
                                          </div>
                                          <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                            <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">To Love-Ru</h3>
                                          </div>
                                        </a></div>
                                    </li>
                                    <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                      data-testid="show-item">
                                      <div class="sc-78652606-1 cjTGPX"><a
                                          class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                          href="/video/684-motto-to-love-ru-saison-2">
                                          <div class="sc-78652606-2 gtTxwn">
                                            <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                                alt="Motto To Love-Ru" loading="lazy" width="196" height="280"
                                                decoding="async" data-nimg="1"
                                                class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                                src="https://image.animationdigitalnetwork.fr/license/toloveru/tv2/web/affiche_350x500.jpg">
                                            </div>
                                          </div>
                                          <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                            <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Motto To Love-Ru</h3>
                                          </div>
                                        </a></div>
                                    </li>
                                    <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                      data-testid="show-item">
                                      <div class="sc-78652606-1 cjTGPX"><a
                                          class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                          href="/video/699-high-school-dxd">
                                          <div class="sc-78652606-2 gtTxwn">
                                            <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                                alt="High School DxD" loading="lazy" width="196" height="280"
                                                decoding="async" data-nimg="1"
                                                class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                                src="https://image.animationdigitalnetwork.fr/license/dxd/tv/web/affiche_350x500.jpg">
                                            </div>
                                          </div>
                                          <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                            <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">High School DxD</h3>
                                          </div>
                                        </a></div>
                                    </li>
                                    <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                      data-testid="show-item">
                                      <div class="sc-78652606-1 cjTGPX"><a
                                          class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                          href="/video/977-immoral-guild-version-non-censuree">
                                          <div class="sc-78652606-2 gtTxwn">
                                            <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                                alt="Immoral Guild (version non censurée)" loading="lazy" width="196"
                                                height="280" decoding="async" data-nimg="1"
                                                class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                                src="https://image.animationdigitalnetwork.fr/license/immoralguildnc/tv/web/affiche_350x500.jpg">
                                            </div>
                                          </div>
                                          <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                            <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Immoral Guild (version non
                                              censurée)</h3>
                                          </div>
                                        </a></div>
                                    </li>
                                    <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                      data-testid="show-item">
                                      <div class="sc-78652606-1 cjTGPX"><a
                                          class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                          href="/video/382-lance-n-masques">
                                          <div class="sc-78652606-2 gtTxwn">
                                            <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                                alt="Lance N' Masques" loading="lazy" width="196" height="280"
                                                decoding="async" data-nimg="1"
                                                class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                                src="https://image.animationdigitalnetwork.fr/license/lnm/tv/web/affiche_350x500.jpg">
                                            </div>
                                          </div>
                                          <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                            <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Lance N' Masques</h3>
                                          </div>
                                        </a></div>
                                    </li>
                                    <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                      data-testid="show-item">
                                      <div class="sc-78652606-1 cjTGPX"><a
                                          class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                          href="/video/463-clockwork-planet">
                                          <div class="sc-78652606-2 gtTxwn">
                                            <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                                alt="Clockwork Planet" loading="lazy" width="196" height="280"
                                                decoding="async" data-nimg="1"
                                                class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                                src="https://image.animationdigitalnetwork.fr/license/clockwork/tv/web/affiche_350x500.jpg">
                                            </div>
                                          </div>
                                          <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                            <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Clockwork Planet</h3>
                                          </div>
                                        </a></div>
                                    </li>
                                    <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                      data-testid="show-item">
                                      <div class="sc-78652606-1 cjTGPX"><a
                                          class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                          href="/video/434-flip-flappers">
                                          <div class="sc-78652606-2 gtTxwn">
                                            <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                                alt="Flip Flappers" loading="lazy" width="196" height="280"
                                                decoding="async" data-nimg="1"
                                                class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                                src="https://image.animationdigitalnetwork.fr/license/flipflap/tv/web/affiche_350x500.jpg">
                                            </div>
                                          </div>
                                          <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                            <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Flip Flappers</h3>
                                          </div>
                                        </a></div>
                                    </li>
                                    <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                      data-testid="show-item">
                                      <div class="sc-78652606-1 cjTGPX"><a
                                          class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                          href="/video/709-full-dive-l-ultime-rpg">
                                          <div class="sc-78652606-2 gtTxwn">
                                            <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                                alt="Full Dive : L'Ultime RPG est encore plus foireux que la réalité !"
                                                loading="lazy" width="196" height="280" decoding="async" data-nimg="1"
                                                class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                                src="https://image.animationdigitalnetwork.fr/license/fulldiverpg/tv/web/affiche_350x500.jpg">
                                            </div>
                                          </div>
                                          <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                            <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Full Dive : L'Ultime RPG est
                                              encore plus foireux que la réalité !</h3>
                                          </div>
                                        </a></div>
                                    </li>
                                  </ul>
                                </div>
                                <div class="sc-6eec03a9-3 bBfLyW"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-6eec03a9-4 kaJHtA icon-left"
                                    data-testid="left-arrow"></span></div>
                                <div class="sc-6eec03a9-3 kQfEXv"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-6eec03a9-4 kaJHtA icon-right"
                                    data-testid="right-arrow"></span></div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class="sc-5a07385f-0 bjqPKO">
                        <div class="sc-5a07385f-1 djrtre">
                          <h2 class="sc-5a07385f-2 fDafkR"><span class="sc-5a07385f-3 ikPnob">Avec des créatures
                              imaginaires et des ados</span></h2>
                          <div>
                            <div class="sc-fbb18752-1 kpgeux">
                              <div data-testid="horizontal-list" class="sc-6eec03a9-0 kydjJB">
                                <div class="sc-6eec03a9-1 kLRzJm">
                                  <ul class="sc-6eec03a9-2 egmhYp">
                                    <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                      data-testid="show-item">
                                      <div class="sc-78652606-1 cjTGPX"><a
                                          class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                          href="/video/652-amagi-brilliant-park">
                                          <div class="sc-78652606-2 gtTxwn">
                                            <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                                alt="Amagi Brilliant Park" loading="lazy" width="196" height="280"
                                                decoding="async" data-nimg="1"
                                                class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                                src="https://image.animationdigitalnetwork.fr/license/amagi/tv/web/affiche_350x500.jpg">
                                            </div>
                                          </div>
                                          <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                            <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Amagi Brilliant Park</h3>
                                          </div>
                                        </a></div>
                                    </li>
                                    <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                      data-testid="show-item">
                                      <div class="sc-78652606-1 cjTGPX"><a
                                          class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                          href="/video/568-no-game-no-life-zero">
                                          <div class="sc-78652606-2 gtTxwn">
                                            <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                                alt="No Game No Life 0" loading="lazy" width="196" height="280"
                                                decoding="async" data-nimg="1"
                                                class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                                src="https://image.animationdigitalnetwork.fr/license/ngnl/film/web/affiche_350x500.jpg">
                                            </div>
                                          </div>
                                          <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                            <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">No Game No Life 0</h3>
                                          </div>
                                        </a></div>
                                    </li>
                                    <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                      data-testid="show-item">
                                      <div class="sc-78652606-1 cjTGPX"><a
                                          class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                          href="/video/217-to-love-darkness">
                                          <div class="sc-78652606-2 gtTxwn">
                                            <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                                alt="To Love-Ru - Darkness" loading="lazy" width="196" height="280"
                                                decoding="async" data-nimg="1"
                                                class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                                src="https://image.animationdigitalnetwork.fr/license/toloveru/tv3/web/affiche_350x500.jpg">
                                            </div>
                                          </div>
                                          <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                            <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">To Love-Ru - Darkness</h3>
                                          </div>
                                        </a></div>
                                    </li>
                                    <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                      data-testid="show-item">
                                      <div class="sc-78652606-1 cjTGPX"><a
                                          class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                          href="/video/973-the-eminence-in-shadow">
                                          <div class="sc-78652606-2 gtTxwn">
                                            <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                                alt="The Eminence in Shadow" loading="lazy" width="196" height="280"
                                                decoding="async" data-nimg="1"
                                                class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                                src="https://image.animationdigitalnetwork.fr/license/eminenceshadow/tv/web/affiche_350x500.jpg">
                                            </div>
                                          </div>
                                          <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                            <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">The Eminence in Shadow</h3>
                                          </div>
                                        </a></div>
                                    </li>
                                    <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                      data-testid="show-item">
                                      <div class="sc-78652606-1 cjTGPX"><a
                                          class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                          href="/video/1122-my-instant-death-ability-is-so-overpowered-no-one-in-this-other-world-stands-a-chance-against-me">
                                          <div class="sc-78652606-2 gtTxwn">
                                            <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                                alt="My Instant Death Ability Is So Overpowered, No One in This Other World Stands a Chance Against Me!"
                                                loading="lazy" width="196" height="280" decoding="async" data-nimg="1"
                                                class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                                src="https://image.animationdigitalnetwork.fr/license/myinstantdeathability/tv/web/affiche_350x500.jpg">
                                            </div>
                                          </div>
                                          <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                            <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">My Instant Death Ability Is
                                              So Overpowered, No One in This Other World Stands a Chance Against Me!
                                            </h3>
                                          </div>
                                        </a></div>
                                    </li>
                                    <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                      data-testid="show-item">
                                      <div class="sc-78652606-1 cjTGPX"><a
                                          class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                          href="/video/790-polyphonica-crimson-s-saison-2">
                                          <div class="sc-78652606-2 gtTxwn">
                                            <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                                alt="Polyphonica - Crimson S" loading="lazy" width="196" height="280"
                                                decoding="async" data-nimg="1"
                                                class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                                src="https://image.animationdigitalnetwork.fr/license/polyphonica/tv2/web/affiche_350x500.jpg">
                                            </div>
                                          </div>
                                          <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                            <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Polyphonica - Crimson S</h3>
                                          </div>
                                        </a></div>
                                    </li>
                                    <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                      data-testid="show-item">
                                      <div class="sc-78652606-1 cjTGPX"><a
                                          class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                          href="/video/1087-gegege-no-kitaro-version-2018">
                                          <div class="sc-78652606-2 gtTxwn">
                                            <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                                alt="GeGeGe no Kitarô (2018)" loading="lazy" width="196" height="280"
                                                decoding="async" data-nimg="1"
                                                class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                                src="https://image.animationdigitalnetwork.fr/license/gegegenokitaro/tv6/web/affiche_350x500.jpg">
                                            </div>
                                          </div>
                                          <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                            <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">GeGeGe no Kitarô (2018)</h3>
                                          </div>
                                        </a></div>
                                    </li>
                                    <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                      data-testid="show-item">
                                      <div class="sc-78652606-1 cjTGPX"><a
                                          class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                          href="/video/1058-strike-the-blood-final">
                                          <div class="sc-78652606-2 gtTxwn">
                                            <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                                alt="Strike the Blood Final" loading="lazy" width="196" height="280"
                                                decoding="async" data-nimg="1"
                                                class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                                src="https://image.animationdigitalnetwork.fr/license/striketb/oav5/web/affiche_350x500.jpg">
                                            </div>
                                          </div>
                                          <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                            <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Strike the Blood Final</h3>
                                          </div>
                                        </a></div>
                                    </li>
                                    <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                      data-testid="show-item">
                                      <div class="sc-78652606-1 cjTGPX"><a
                                          class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                          href="/video/1084-le-college-noir">
                                          <div class="sc-78652606-2 gtTxwn">
                                            <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                                alt="Le Collège Noir" loading="lazy" width="196" height="280"
                                                decoding="async" data-nimg="1"
                                                class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                                src="https://image.animationdigitalnetwork.fr/license/lecollegenoir/tv/web/affiche_350x500.jpg">
                                            </div>
                                          </div>
                                          <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                            <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Le Collège Noir</h3>
                                          </div>
                                        </a></div>
                                    </li>
                                    <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                      data-testid="show-item">
                                      <div class="sc-78652606-1 cjTGPX"><a
                                          class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                          href="/video/754-how-a-realist-hero-rebuilt-the-kingdom">
                                          <div class="sc-78652606-2 gtTxwn">
                                            <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                                alt="How a Realist Hero Rebuilt the Kingdom" loading="lazy" width="196"
                                                height="280" decoding="async" data-nimg="1"
                                                class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                                src="https://image.animationdigitalnetwork.fr/license/realisthero/tv/web/affiche_350x500.jpg">
                                            </div>
                                          </div>
                                          <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                            <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">How a Realist Hero Rebuilt
                                              the Kingdom</h3>
                                          </div>
                                        </a></div>
                                    </li>
                                  </ul>
                                </div>
                                <div class="sc-6eec03a9-3 bBfLyW"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-6eec03a9-4 kaJHtA icon-left"
                                    data-testid="left-arrow"></span></div>
                                <div class="sc-6eec03a9-3 kQfEXv"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-6eec03a9-4 kaJHtA icon-right"
                                    data-testid="right-arrow"></span></div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class="sc-5a07385f-0 bjqPKO">
                        <div class="sc-5a07385f-1 djrtre">
                          <h2 class="sc-5a07385f-2 fDafkR"><span class="sc-5a07385f-3 ikPnob">Sur les relations
                              fraternelles en duo</span></h2>
                          <div>
                            <div class="sc-fbb18752-1 kpgeux">
                              <div data-testid="horizontal-list" class="sc-6eec03a9-0 kydjJB">
                                <div class="sc-6eec03a9-1 kLRzJm">
                                  <ul class="sc-6eec03a9-2 egmhYp">
                                    <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                      data-testid="show-item">
                                      <div class="sc-78652606-1 cjTGPX"><a
                                          class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                          href="/video/1115-night-head-genesis">
                                          <div class="sc-78652606-2 gtTxwn">
                                            <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                                alt="Night Head Genesis" loading="lazy" width="196" height="280"
                                                decoding="async" data-nimg="1"
                                                class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                                src="https://image.animationdigitalnetwork.fr/license/nightheadgenesis/tv/web/affiche_350x500.jpg">
                                            </div>
                                          </div>
                                          <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                            <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Night Head Genesis</h3>
                                          </div>
                                        </a></div>
                                    </li>
                                    <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                      data-testid="show-item">
                                      <div class="sc-78652606-1 cjTGPX"><a
                                          class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                          href="/video/1168-sword-of-the-demon-hunter-kijin-gentosho">
                                          <div class="sc-78652606-2 gtTxwn">
                                            <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                                alt="Sword of the Demon Hunter KIJIN GENTÔSHÔ" loading="lazy"
                                                width="196" height="280" decoding="async" data-nimg="1"
                                                class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                                src="https://image.animationdigitalnetwork.fr/license/sworddemonhunter/tv/web/affiche_350x500.jpg">
                                            </div>
                                          </div>
                                          <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                            <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Sword of the Demon Hunter
                                              KIJIN GENTÔSHÔ</h3>
                                          </div>
                                        </a></div>
                                    </li>
                                    <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                      data-testid="show-item">
                                      <div class="sc-78652606-1 cjTGPX"><a
                                          class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                          href="/video/953-panty-and-stocking-with-gartebelt">
                                          <div class="sc-78652606-2 gtTxwn">
                                            <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                                alt="Panty &amp; Stocking with Garterbelt" loading="lazy" width="196"
                                                height="280" decoding="async" data-nimg="1"
                                                class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                                src="https://image.animationdigitalnetwork.fr/license/pantyandstocking/tv/web/affiche_350x500.jpg">
                                            </div>
                                          </div>
                                          <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                            <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Panty &amp; Stocking with
                                              Garterbelt</h3>
                                          </div>
                                        </a></div>
                                    </li>
                                    <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                      data-testid="show-item">
                                      <div class="sc-78652606-1 cjTGPX"><a
                                          class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                          href="/video/637-kinky-et-cosy">
                                          <div class="sc-78652606-2 gtTxwn">
                                            <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                                alt="Kinky &amp; Cosy" loading="lazy" width="196" height="280"
                                                decoding="async" data-nimg="1"
                                                class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                                src="https://image.animationdigitalnetwork.fr/license/kinkycosy/tv/web/affiche_350x500.jpg">
                                            </div>
                                          </div>
                                          <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                            <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Kinky &amp; Cosy</h3>
                                          </div>
                                        </a></div>
                                    </li>
                                  </ul>
                                </div>
                                <div class="sc-6eec03a9-3 bBfLyW"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-6eec03a9-4 kaJHtA icon-left"
                                    data-testid="left-arrow"></span></div>
                                <div class="sc-6eec03a9-3 hUjNgt"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-6eec03a9-4 kaJHtA icon-right"
                                    data-testid="right-arrow"></span></div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="sc-60e49a10-2 jDXeDK">
                  <div class="sc-1c6b6325-0 hWxcfn">
                    <div class="sc-5a07385f-0 izqJqd">
                      <div class="sc-5a07385f-1 itDEN"><span class="sc-5a07385f-2 ZrsEI"><span
                            class="sc-5a07385f-3 eZfPND">Thèmes</span></span>
                        <div>
                          <ul class="sc-1c6b6325-1 jxmMQa">
                            <div class="sc-1c6b6325-2 hRvOwA">
                              <p class="sc-1c6b6325-3 hWGbpx">Isekai</p>
                            </div>
                            <div class="sc-1c6b6325-2 hRvOwA">
                              <p class="sc-1c6b6325-3 hWGbpx">Geeks</p>
                            </div>
                            <div class="sc-1c6b6325-2 hRvOwA">
                              <p class="sc-1c6b6325-3 hWGbpx">Fantastique</p>
                            </div>
                            <div class="sc-1c6b6325-2 hRvOwA">
                              <p class="sc-1c6b6325-3 hWGbpx">Gags</p>
                            </div>
                            <div class="sc-1c6b6325-2 hRvOwA">
                              <p class="sc-1c6b6325-3 hWGbpx">Ados</p>
                            </div>
                            <div class="sc-1c6b6325-2 hRvOwA">
                              <p class="sc-1c6b6325-3 hWGbpx">En duo</p>
                            </div>
                            <div class="sc-1c6b6325-2 hRvOwA">
                              <p class="sc-1c6b6325-3 hWGbpx">Anime</p>
                            </div>
                            <div class="sc-1c6b6325-2 hRvOwA">
                              <p class="sc-1c6b6325-3 hWGbpx">Dessins animés</p>
                            </div>
                            <div class="sc-1c6b6325-2 hRvOwA">
                              <p class="sc-1c6b6325-3 hWGbpx">Surdoués</p>
                            </div>
                            <div class="sc-1c6b6325-2 hRvOwA">
                              <p class="sc-1c6b6325-3 hWGbpx">Seinen</p>
                            </div>
                          </ul>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="sc-7c8882ca-0 gWKUWh">
                    <div class="sc-7c8882ca-1 gKKoPN">
                      <div class="sc-7c8882ca-2 fzWdFj">
                        <div class="sc-7c8882ca-3 wfQkE"><span class="sc-7c8882ca-4 fMCNZF">+</span></div>
                        <div class="sc-7c8882ca-3 drflDN"><span class="sc-7c8882ca-5 TOQfn">15 000</span><span
                            class="sc-7c8882ca-6 VLWfO">ÉPISODES</span></div>
                      </div>
                      <div class="sc-7c8882ca-2 EPjJx">
                        <div class="sc-7c8882ca-7 dzFMEO"></div><span class="sc-7c8882ca-6 brbqRh">H+1</span>
                      </div>
                      <div class="sc-7c8882ca-2 iuOYfP"><span class="sc-7c8882ca-6 dEVjZE">HD</span></div>
                      <div class="sc-7c8882ca-2 gaABGy">
                        <div class="sc-7c8882ca-8 dyBrOn">
                          <div class="sc-7c8882ca-3 wfQkE"><span class="sc-7c8882ca-4 fMCNZF">+</span></div>
                          <div class="sc-7c8882ca-3 drflDN"><span class="sc-7c8882ca-5 dFPIMb">530</span>
                            <div class="sc-7c8882ca-9 xOogq"><span class="sc-7c8882ca-10 fuxvnZ">SÉRIES</span><span
                                class="sc-7c8882ca-10 fuxvnZ">&amp; <!-- -->FILMS</span></div>
                          </div>
                        </div>
                      </div>
                      <div class="sc-7c8882ca-2 jMetLH"><span
                          class="sc-45f49f9-0 kHRvYb icon sc-7c8882ca-11 donuey icon-screens"></span>
                        <div><span class="sc-7c8882ca-6 fopMPu">MULTIPLATEFORME</span></div>
                      </div>
                      <div class="sc-7c8882ca-2 iyldYe"><span
                          class="sc-45f49f9-0 kHRvYb icon sc-7c8882ca-11 zImyK icon-handmetal"></span>
                        <div><span class="sc-7c8882ca-6 hffVVV">SANS ENGAGEMENT</span></div>
                      </div><a class="sc-7c8882ca-12 iWXHni" href="/subscribe"></a>
                    </div>
                  </div>
                  <div data-testid="downline-content-test-id">
                    <div class="sc-5a07385f-0 izqJqd">
                      <div class="sc-5a07385f-1 itDEN">
                        <h2 class="sc-5a07385f-2 hpTrSF"><span class="sc-5a07385f-3 MBCXO">No Game No Life : Jouer pour
                            survivre</span></h2>
                        <div>
                          <div class="sc-15527565-0 fzFNCg"><span>Retrouvez sur Anime Digital Network l'anime No Game No
                              Life, qui est l'adaptation du light novel du même nom de Yu Kamiya.

                              Dans cette série produite par le studio Madhouse, Sora et Shiro, deux joueurs hors pair,
                              se retrouvent projetés dans un monde où tout est décidé par les jeux. Arriveront-ils à se
                              faire une place dans ce monde particulier ?

                              Pour le savoir, regardez les épisodes de No Game No Life disponible en streaming VOSTFR
                              sur ADN.</span></div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="sc-499ed712-0 hjHByy"><a class="sc-499ed712-1 bVkEhA" href="/"></a>
          <div class="sc-499ed712-2 hSydCm"><a target="_blank" class="sc-499ed712-3 iyvrgK"
              href="https://www.facebook.com/ADN-163110993879311/"><span
                class="sc-45f49f9-0 kHRvYb icon sc-499ed712-4 jVnhGX icon-facebook"></span></a><a target="_blank"
              class="sc-499ed712-3 kZrbNh" href="https://www.instagram.com/animationdigitalnetwork/"><span
                class="sc-45f49f9-0 kHRvYb icon sc-499ed712-4 jVnhGX icon-instagram"></span></a><a target="_blank"
              class="sc-499ed712-3 ekITHO" href="https://twitter.com/adnanime"><span
                class="sc-45f49f9-0 kHRvYb icon sc-499ed712-4 jVnhGX icon-twitter"></span></a><a target="_blank"
              class="sc-499ed712-3 kOvzCS" href="https://www.youtube.com/channel/UCguBmD8D2uN6Sn6Ch-cVk_g"><span
                class="sc-45f49f9-0 kHRvYb icon sc-499ed712-4 jVnhGX icon-youtube"></span></a><a target="_blank"
              class="sc-499ed712-3 ghwxtG" href="https://www.twitch.tv/adnanime"><span
                class="sc-45f49f9-0 kHRvYb icon sc-499ed712-4 eOpmMt icon-twitch"></span></a></div>
        </div>
        <div class="sc-499ed712-5 fRItrR">
          <div class="sc-499ed712-6 bZPxEl">
            <div class="sc-499ed712-7 hXgmlo">
              <h4 class="sc-499ed712-8 YsXXp"><span
                  class="sc-45f49f9-0 kHRvYb icon sc-499ed712-9 epnMSe icon-friends"></span> Vous &amp; nous</h4>
              <ul class="sc-499ed712-10 eqIxxv">
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz"
                    href="/contact-us/create-ticket">Contactez-nous</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/faq">FAQ</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/about-us">Qui sommes-nous
                    ?</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/adn-team">L'équipe ADN</a>
                </li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/jobs">Recrutement</a></li>
              </ul>
            </div>
            <div class="sc-499ed712-7 hXgmlo">
              <h4 class="sc-499ed712-8 YsXXp"><span
                  class="sc-45f49f9-0 kHRvYb icon sc-499ed712-9 epnMSe icon-leader"></span> Séries les plus populaires
              </h4>
              <ul class="sc-499ed712-10 eqIxxv">
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz"
                    href="/video/1003-dragon-ball-z">Dragon Ball Z</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/video/269-fairy-tail">Fairy
                    Tail</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz"
                    href="/video/265-naruto-shippuden">Naruto Shippuden</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz"
                    href="/video/626-one-piece-saga-7-guerre-au-sommet">One Piece : Saga 07 - Guerre au sommet</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz"
                    href="/video/694-one-piece-saga-10-dressrosa">One Piece : Saga 10 - Dressrosa</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz"
                    href="/video/563-one-piece-saga-12-whole-cake-island">One Piece : Saga 12 - Whole Cake Island</a>
                </li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz"
                    href="/video/469-one-piece-saga-14-pays-de-wano">One Piece : Saga 14 - Pays de Wano</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz"
                    href="/video/1116-one-piece-saga-15-egg-head">One Piece : Saga 15 - Egghead</a></li>
              </ul>
            </div>
            <div class="sc-499ed712-7 hXgmlo">
              <h4 class="sc-499ed712-8 YsXXp"><span
                  class="sc-45f49f9-0 kHRvYb icon sc-499ed712-9 epnMSe icon-geography-earth"></span> Navigation</h4>
              <ul class="sc-499ed712-10 eqIxxv">
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/account">Mon profil</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/subscribe">Nos offres</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/video">Catalogue</a></li>
              </ul>
            </div>
            <div class="sc-499ed712-7 hXgmlo">
              <h4 class="sc-499ed712-8 YsXXp"><span
                  class="sc-45f49f9-0 kHRvYb icon sc-499ed712-9 epnMSe icon-compare-balance"></span> Légal</h4>
              <ul class="sc-499ed712-10 eqIxxv">
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/tos">Conditions générales de
                    vente</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/privacy-policy">Charte pour la
                    protection des données personnelles</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/legal-notice">Mentions
                    Légales</a></li>
                <li class="sc-499ed712-11 dlZfBl"><span class="sc-499ed712-13 doErwq">Paramètres des cookies</span></li>
              </ul>
            </div>
          </div>
          <p class="sc-499ed712-14 izWbEj">© 2022 Animationdigitalnetwork.com est un site du groupe Média-Participations
            opéré par ADN - ANIMATION DIGITAL NETWORK.</p>
        </div>
      </div>
    </div>
  </div>
  <div id="pin-code-portal"></div>
  <div id="confirm-popup-portal"></div>
  <script id="__NEXT_DATA__"
    type="application/json">{"props":{"pageProps":{"dehydratedState":{"mutations":[],"queries":[{"state":{"data":{"shows":[{"id":1003,"title":"Dragon Ball Z","type":"EPS","originalTitle":"ドラゴンボールＺ","shortTitle":"Dragon Ball Z","reference":"dbz_tv","age":"10+","languages":["vostf","vf"],"summary":"Depuis leur mariage, Son Goku et Chichi vivent des jours heureux en famille. Seulement, cette apparente tranquillité se retrouve ébranlée par l’arrivée de Radditz, qui lui révèle être son frère ainsi qu’un Saïyen, un guerrier extraterrestre doté d’une force surhumaine. Afin de l’enjoindre à rejoindre sa cause, ce dernier kidnappe Son Gohan. Aidé par Piccolo et ses amis, Son Goku va tout mettre en œuvre afin de libérer son fils.","image":"https://image.animationdigitalnetwork.fr/license/dbz/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/dbz/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/dbz/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/dbz/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/1003-dragon-ball-z","urlPath":"/video/1003-dragon-ball-z","episodeCount":291,"genres":["Animation japonaise","Action","Aventure","Comédie","Fantastique","Nostalgie","Shônen"],"copyright":"©Bird Studio/Shueisha, Toei Animation","rating":4.9,"ratingsCount":1746,"commentsCount":61,"qualities":["sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":"Retrouvez l'exclusivité de « Dragon Ball Z », la série mythique d'Akira Toriyama, sur ADN !","firstReleaseYear":"1986","productionStudio":"Toei Animation","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Daisuke Nishio, Shigeyasu Yamauchi"},{"role":"Mangaka","name":"Akira Toriyama"},{"role":"Compositeur","name":"Shunsuke Kikuchi"},{"role":"Character designer","name":"Minoru Maeda"}],"nextVideoReleaseDate":null,"indexable":true},{"id":269,"title":"Fairy Tail","type":"EPS","originalTitle":"Fairy Tail","shortTitle":"Fairy Tail","reference":"fairytail_tv","age":"12+","languages":["vostf","vf"],"summary":"Le Royaume de Fiore. Ce pays perpétuellement neutre qui compte 17 millions d'habitants, est aussi un monde de magie et de mystères. La magie fait partie du quotidien et son commerce y est entièrement libre. Ainsi, certains, passés maîtres, décident d'en faire leur profession. On les appelle les Mages. Contre rétribution, ils œuvrent pour le bien de la communauté. Leur force est aussi leur nombre, ils se regroupent dans différentes guildes, disséminées un peu partout dans le royaume. Parmi celles-ci, se trouve une guilde toute particulière, qui hier comme aujourd'hui, a fait naître de nombreuses légendes. Elle a pour nom : Fairy Tail.","image":"https://image.animationdigitalnetwork.fr/license/fairytail/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/fairytail/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/fairytail/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/fairytail/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/269-fairy-tail","urlPath":"/video/269-fairy-tail","episodeCount":328,"genres":["Animation japonaise","Jeunesse","Action","Aventure","Comédie","Fantastique","Shônen"],"copyright":"Based on the manga “FAIRY TAIL” by Hiro Mashima originally serialized in the weekly SHONEN MAGAZINE published by KODANSHA Ltd.\n©Hiro Mashima・KODANSHA/Fairy Tail Guild・TV TOKYO. All Rights Reserved.\n©Hiro Mashima･KODANSHA/Fairy Tail project･TV TOKYO.All Rights Reserved.\n©Hiro Mashima, KODANSHA/FAIRY TAIL Committee,TV TOKYO","rating":4.8,"ratingsCount":33140,"commentsCount":586,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":true,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2009","productionStudio":"A-1 Pictures","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Shinji Ishihira"},{"role":"Scénariste","name":"Masashi Sogo"},{"role":"Compositeur","name":"Yasuharu Takanashi"},{"role":"Mangaka","name":"Hiro Mashima"},{"role":"Character designer","name":"Aoi Yamamoto"}],"nextVideoReleaseDate":null,"indexable":true},{"id":265,"title":"Naruto Shippuden","type":"EPS","originalTitle":"Naruto Shippuden","shortTitle":"Naruto Shippuden","reference":"naruto_tv2","age":"10+","languages":["vostf","vf"],"summary":"Naruto est de retour&nbsp;! Après deux ans et demi d’entraînement avec Jiraya, il retrouve ses camarades de l’Académie des ninjas ainsi que ses professeurs de Konoha. Tous ont évolué, y compris les ninjas du village de Suna. Seul Kakashi semble être resté fidèle à lui-même. Hélas, les retrouvailles sont de courte durée. Gaara, devenu depuis peu Kazekage de son village, est menacé. Tout porte à croire que l’Akatsuki soit à l’origine de l’attaque, mais dans quel but&nbsp;?","image":"https://image.animationdigitalnetwork.fr/license/naruto/tv2/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/naruto/tv2/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/naruto/tv2/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/naruto/tv2/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/265-naruto-shippuden","urlPath":"/video/265-naruto-shippuden","episodeCount":503,"genres":["Animation japonaise","Jeunesse","Action","Arts Martiaux","Aventure","Comédie","Fantastique","Shônen"],"copyright":"©2002 MASASHI KISHIMOTO / 2007 SHIPPUDEN All Rights Reserved.","rating":4.7,"ratingsCount":56536,"commentsCount":484,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":true,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2007","productionStudio":"Pierrot","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Hayato Date"},{"role":"Scénariste","name":"Junki Takegami"},{"role":"Compositeur","name":"Yasuharu Takanashi"},{"role":"Auteur","name":"Masashi Kishimoto"},{"role":"Character designer","name":"Tetsuya Nishio"}],"nextVideoReleaseDate":null,"indexable":true},{"id":626,"title":"One Piece : Saga 07 - Guerre au sommet","type":"EPS","originalTitle":"One Piece : Saga 07 - Summit War","shortTitle":null,"reference":"onepiece_arc7","age":"10+","languages":["vostf","vf"],"summary":"Portgas D. Ace, le commandant de la deuxième division de l’équipage de Barbe Blanche sera exécuté à 15h précise à Marine Ford. Pour assurer le bon déroulement de cette exécution, le Gouvernement Mondial mobilise les troupes d’élite de la Marine avec plus de 100 000 soldats et 50 navires de guerre. Il convoque également ses hommes les plus puissants : les Grands Corsaires et les amiraux.\n\nAfin d’empêcher l’exécution, Barbe Blanche réunit son équipage et fait appel aux 43 capitaines pirates qui lui ont juré allégeance dans le Nouveau Monde pour prendre d’assaut Marine Ford.\n\nLa plus grande bataille depuis le début de l’Âge d’Or de la piraterie est sur le point de commencer : les forces du Gouvernement Mondial contre l’homme le plus fort du monde et « ses fils ». Une bataille dont l’issue bouleversera à jamais l’équilibre du monde. Luffy réussira-t-il à se faire une place dans cette bataille au sommet pour sauver son frère ?","image":"https://image.animationdigitalnetwork.fr/license/onepiece/arc7/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/onepiece/arc7/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/onepiece/arc7/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/onepiece/arc7/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/626-one-piece-saga-7-guerre-au-sommet","urlPath":"/video/626-one-piece-saga-7-guerre-au-sommet","episodeCount":126,"genres":["Animation japonaise","Jeunesse","Aventure","Comédie","Fantastique","Shônen"],"copyright":"Film © 1999 Toei Animation Co., Ltd.  © Eiichiro Oda/Shueisha, Toei Animation","rating":4.8,"ratingsCount":22227,"commentsCount":227,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"1999","productionStudio":"Toei Animation","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Konosuke Uda"},{"role":"Scénariste","name":"Ryota Yamaguchi"},{"role":"Compositeur","name":"Kohei Tanaka"},{"role":"Mangaka","name":"Eiichirô Oda"},{"role":"Character designer","name":"Noboru Koizumi"}],"nextVideoReleaseDate":null,"indexable":true},{"id":694,"title":"One Piece : Saga 10 - Dressrosa","type":"EPS","originalTitle":null,"shortTitle":null,"reference":"onepiece_arc10","age":"10+","languages":["vostf","vf"],"summary":"L'alliance de l'équipage au Chapeau de paille et de Trafalgar. Law se dirige maintenant vers Dressrosa, une île gouvernée par l'un des pires Grands Corsaires : Doflamingo. En plus de devoir détruire l'usine de Smiles, Luffy et ses compagnons auront une autre raison d'affronter les dangers de Dressrosa : récupérer le fruit du démon d'Ace aux Poings Ardents...","image":"https://image.animationdigitalnetwork.fr/license/onepiece/arc10/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/onepiece/arc10/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/onepiece/arc10/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/onepiece/arc10/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/694-one-piece-saga-10-dressrosa","urlPath":"/video/694-one-piece-saga-10-dressrosa","episodeCount":118,"genres":["Animation japonaise","Jeunesse","Action","Aventure","Comédie","Fantastique","Shônen"],"copyright":"©Eiichiro Oda/Shueisha, Toei Animation","rating":4.9,"ratingsCount":15195,"commentsCount":207,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"1998","productionStudio":"Toei Animation","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Konosuke Uda"},{"role":"Scénariste","name":"Ryota Yamaguchi"},{"role":"Compositeur","name":"Kohei Tanaka"},{"role":"Mangaka","name":"Eiichirô Oda"},{"role":"Character designer","name":"Noboru Koizumi"}],"nextVideoReleaseDate":null,"indexable":true},{"id":563,"title":"One Piece : Saga 12 - Whole Cake Island","type":"EPS","originalTitle":"One Piece","shortTitle":null,"reference":"onepiece_arc14","age":"10+","languages":["vostf","vf"],"summary":"Oyez ! Oyez ! Pirates de tous bords ! Gol D.Roger, le légendaire Roi des pirates, mort sur l’échafaud, a laissé derrière lui un trésor inestimable : le « One Piece ». Monkey D.Luffy, un garçon naïf et impulsif, rêve de mettre la main sur ce fameux butin et de devenir le nouveau Roi des Pirates.  Parcourant les mers, il rassemble au fil de l’eau un équipage redoutable.\n\nC’est justement le kidnapping de son cuisinier, Sanji, qui pousse nos héros à débarquer en secret sur l’île de Whole Cake Island, le fief de la terrible Big Mom. Bien décidés à sauver leur ami de ce mariage forcé, Monkey D.Luffy et une partie de l’équipage vont devoir faire face à l’immense famille de l’impératrice, tous plus dangereux et puissants les uns que les autres… L’heure du sinistre goûter nuptial approche ! ","image":"https://image.animationdigitalnetwork.fr/license/onepiece/arc14/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/onepiece/arc14/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/onepiece/arc14/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/onepiece/arc14/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/563-one-piece-saga-12-whole-cake-island","urlPath":"/video/563-one-piece-saga-12-whole-cake-island","episodeCount":98,"genres":["Shônen Jump","Animation japonaise","Jeunesse","Action","Aventure","Comédie","Fantastique","Shônen"],"copyright":"Film © 1999 Toei Animation Co., Ltd.  © Eiichiro Oda/Shueisha, Toei Animation","rating":4.8,"ratingsCount":13617,"commentsCount":297,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"1999","productionStudio":"Toei Animation","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Konosuke Uda"},{"role":"Scénariste","name":"Ryota Yamaguchi"},{"role":"Compositeur","name":"Kohei Tanaka"},{"role":"Mangaka","name":"Eiichirô Oda"},{"role":"Character designer","name":"Noboru Koizumi"}],"nextVideoReleaseDate":null,"indexable":true},{"id":469,"title":"One Piece : Saga 14 - Pays de Wano","type":"EPS","originalTitle":"One Piece","shortTitle":"One Piece","reference":"onepiece_tv","age":"10+","languages":["vostf","vf"],"summary":"Oyez ! Oyez ! Pirates de tous bords ! Gol D.Roger, le légendaire Roi des pirates, mort sur l’échafaud, a laissé derrière lui un trésor inestimable : le « One Piece ». Monkey D.Luffy, un garçon naïf et impulsif, rêve de mettre la main sur ce fameux butin et de devenir le nouveau Roi des Pirates. Parcourant les mers, il rassemble au fil de l’eau un équipage redoutable.\nLuffy et ses compagnons débarquent au pays de Wano pour affronter le terrible Kaido, réputé pour être la personne la plus forte du monde. Là-bas, ils y retrouvent Zoro et le reste de l'équipage infiltrés dans tout le pays...","image":"https://image.animationdigitalnetwork.fr/license/onepiece/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/onepiece/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/onepiece/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/onepiece/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/469-one-piece-saga-14-pays-de-wano","urlPath":"/video/469-one-piece-saga-14-pays-de-wano","episodeCount":208,"genres":["Animation japonaise","Jeunesse","Action","Aventure","Comédie","Fantastique","Shônen"],"copyright":"Film © 1999 Toei Animation Co., Ltd. © Eiichiro Oda/Shueisha, Toei Animation","rating":4.7,"ratingsCount":49119,"commentsCount":1588,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"1999","productionStudio":"Toei Animation","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Konosuke Uda"},{"role":"Scénariste","name":"Ryota Yamaguchi"},{"role":"Compositeur","name":"Kohei Tanaka"},{"role":"Mangaka","name":"Eiichirô Oda"},{"role":"Character designer","name":"Noboru Koizumi"}],"nextVideoReleaseDate":null,"indexable":true},{"id":1116,"title":"One Piece : Saga 15 - Egghead","type":"EPS","originalTitle":"ワンピース","shortTitle":"One Piece","reference":"onepiece_tv15","age":"10+","languages":["vostf"],"summary":"Oyez ! Oyez ! Pirates de tous bords ! Gol D. Roger, le légendaire Roi des pirates, mort sur l’échafaud, a laissé derrière lui un trésor inestimable : le « One Piece ». Monkey D. Luffy, un garçon naïf et impulsif, rêve de mettre la main sur ce fameux butin et de devenir le nouveau Roi des Pirates. Parcourant les mers, il rassemble au fil de l’eau un équipage redoutable.\nAprès avoir quitté le pays de Wa, Luffy et son équipage accostent sur l’île de Egg Head où réside le talentueux et mystérieux Dr Vegapunk. Malheureusement pour eux, le Gouvernement Mondial envoie une équipe du CP0 dont la mission est d’assassiner le scientifique.","image":"https://image.animationdigitalnetwork.fr/license/onepiece/tv15/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/onepiece/tv15/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/onepiece/tv15/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/onepiece/tv15/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/1116-one-piece-saga-15-egg-head","urlPath":"/video/1116-one-piece-saga-15-egg-head","episodeCount":27,"genres":["Animation japonaise","Jeunesse","Action","Aventure","Comédie","Fantastique","Shônen"],"copyright":"©Eiichiro Oda / Shueisha, Toei Animation","rating":4.7,"ratingsCount":1832,"commentsCount":59,"qualities":["fhd","hd","sd"],"distributions":"fr,de","simulcast":true,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":"Une nouvelle aventure attend Luffy et son équipage ! Le début de la saga finale commence !","firstReleaseYear":"1999","productionStudio":"Toei Animation","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Fukasawa Toshinori"},{"role":"Scénariste","name":"Shoji Yonemura"},{"role":"Mangaka","name":"Eiichiro Oda"},{"role":"Compositeur","name":"Kohei Tanaka, Shiro Hamaguchi"},{"role":"Directeur de la photographie","name":"Hideki Chiba, Tomoya Hosaka"},{"role":"Directeur de l'animation","name":"Kazuya Hisada, Keiichi Ichikawa"}],"nextVideoReleaseDate":"2024-07-28T07:00:00Z","indexable":true}]},"dataUpdateCount":1,"dataUpdatedAt":1721906327673,"error":null,"errorUpdateCount":0,"errorUpdatedAt":0,"fetchFailureCount":0,"fetchFailureReason":null,"fetchMeta":null,"isInvalidated":false,"status":"success","fetchStatus":"idle"},"queryKey":["topShows",{"limit":8}],"queryHash":"[\"topShows\",{\"limit\":8}]"},{"state":{"data":{"comments":[{"id":310316,"parentId":null,"lft":369,"rgt":370,"depth":1,"text":"10 ans de sont écoulés et toujours rien... C'est long mais je suis sur que la saison va arriver un jour ou l'autre, certe, l'auteur a eu des problèmes de santé comme son cancer de l'estomac, il a été accusé de plagiat, mais ça l'a pas fait retirer du monde du manga puisque les light novel sont toujours en production sachant que la saison 1 c'est les 3 premiers tomes du light novel, il y a 12 tomes actuellement. A ce qu'il paraît, l'auteur a aussi annoncé que l'œuvre prendrait \"bientôt\" fin sans nous dire combien de tomes il reste... Donc voilà pourquoi je pense qu'il y'aura une saison 2, peut être demain ou dans quelques années, mais je suis sur qu'il y en aura une...","postDate":"2024-07-05T11:07:49Z","validated":true,"user":{"id":4238464,"rating":null,"username":"Zaaka","avatar":"https://www.gravatar.com/avatar/612a1840224df6dfc60ad811a6d7fe66?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Zaaka","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch4_bg0_green0_188.jpg"},"comments":[]},{"id":308285,"parentId":null,"lft":367,"rgt":368,"depth":1,"text":"2024 tjrs en attente de la saison 2\n","postDate":"2024-05-05T19:41:14Z","validated":true,"user":{"id":4153850,"rating":null,"username":"christ063","avatar":"https://www.gravatar.com/avatar/6a5a50a2f17bfe673595114c0c962bdd?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"christ063","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":302510,"parentId":null,"lft":365,"rgt":366,"depth":1,"text":"07/01/2024 toujours pas de suite, et d'après le commentaire au dessus du mien y'en aura pas dommage!\n\nMerci à toute l'équipe d'adn!!!","postDate":"2024-01-06T23:02:38Z","validated":true,"user":{"id":2900936,"rating":null,"username":"Wilouf","avatar":"https://www.gravatar.com/avatar/be4daefd21ffc9c137d842fe1d0b9b86?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"Wilkalibur70","avatar":"https://avatar.animationdigitalnetwork.fr/web/goblin1_bgxdb_green0_188.jpg"},"comments":[]},{"id":290319,"parentId":null,"lft":363,"rgt":364,"depth":1,"text":"Alors je suis désolé que casser les rêves de plusieurs lecteurs ici qui espèrent encore une quelconque saison 2 pour No Game No Life mais elle ne sera jamais réalisée ! L'auteur de NGNL, Yuu Kamiya aussi connu sous Thiago Furukawa Lucas (un brésilien) a été contraint de se retirer de la scène du mangaka pour faute de plagiat. Il aurait utiliser le travail de d'autres artistes sans leur accord, malgré les excuses émises et les dédommagements, ça finit au tribunal. Donc Mr Yu Kamiya a du purger une peine de prison. \nPour le film, le design des persos reprends ceux fidèle aux light novel du même auteur et du manga, dessiné par Mashiro. La S1 reprenait le contenu des 3 premiers LN, jusque là tout était bon mais c'est plus loin dans la série que certains éléments ont été plagiés. \n\nDonc une saison 2 ? Je ne pense pas car Mr Yu Kamiya n'as plus donné de signe de vie depuis sa peine !","postDate":"2023-05-18T19:18:09Z","validated":true,"user":{"id":571628,"rating":null,"username":"KiritoAsunaSao","avatar":"https://www.gravatar.com/avatar/ac7a2dcaf0dad70a47c123b9dab1e1d0?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"KiritoAsunaSao","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":290148,"parentId":null,"lft":361,"rgt":362,"depth":1,"text":"j'aurais du prendre ce train plus tôt,  gros banger ","postDate":"2023-05-16T15:58:14Z","validated":true,"user":{"id":1511796,"rating":null,"username":"alainzoodu93","avatar":"https://www.gravatar.com/avatar/532aff73e8e500b92e016b1c9dd600fe?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"alainzoodu93","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":285661,"parentId":null,"lft":359,"rgt":360,"depth":1,"text":"faudrait vraiment pensais a faire une saison 2 \n","postDate":"2023-03-16T02:09:20Z","validated":true,"user":{"id":1723882,"rating":null,"username":"timo04052003","avatar":"https://www.gravatar.com/avatar/3df24077c48ec78a8c426ad044250b78?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":2,"rating":null,"username":"Dosko","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch21_bg12_green0_188.jpg"},"comments":[]},{"id":285131,"parentId":null,"lft":357,"rgt":358,"depth":1,"text":"mdr tjr pas de S2 mais bon apres 7ans je me rapelle plus de rien ....","postDate":"2023-03-07T19:11:23Z","validated":true,"user":{"id":687006,"rating":null,"username":"EssKaaP","avatar":"https://www.gravatar.com/avatar/c070cb32ee472f2f16a88a27ba36144c?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"EssKaaP","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":284331,"parentId":null,"lft":353,"rgt":356,"depth":1,"text":"2023 toujours pas de saison 2 ","postDate":"2023-02-23T12:55:36Z","validated":true,"user":{"id":3228131,"rating":null,"username":"lescorpion971","avatar":"https://www.gravatar.com/avatar/01c7a2e2e0d9416f1dff673d78b11d0f?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Dia","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[{"id":284630,"parentId":284331,"lft":354,"rgt":355,"depth":2,"text":"ouip :')","postDate":"2023-02-27T21:43:20Z","validated":true,"user":{"id":2184576,"rating":5,"username":"redatln19","avatar":"https://www.gravatar.com/avatar/4bbfcd2534b00618c5a36d636ca915e4?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":5,"username":"TALOULINE°","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]}]},{"id":284330,"parentId":null,"lft":351,"rgt":352,"depth":1,"text":"2023 toujours pas de saison 2 ","postDate":"2023-02-23T12:54:30Z","validated":true,"user":{"id":3228131,"rating":null,"username":"lescorpion971","avatar":"https://www.gravatar.com/avatar/01c7a2e2e0d9416f1dff673d78b11d0f?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Dia","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":279064,"parentId":null,"lft":349,"rgt":350,"depth":1,"text":"24/12/2022, demain c'est Noel, toujours pas de seconde saison :°","postDate":"2022-12-24T01:02:13Z","validated":true,"user":{"id":1318216,"rating":null,"username":"GalaxyX3nosis","avatar":"https://www.gravatar.com/avatar/192bfb1c78e5ad87601eb9164be9f228?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"vatigras","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch18_bg12_green0_188.jpg"},"comments":[]},{"id":277353,"parentId":null,"lft":347,"rgt":348,"depth":1,"text":"03/12/2022 toujours pas de suite..","postDate":"2022-12-03T15:06:38Z","validated":true,"user":{"id":1865067,"rating":null,"username":"sashmod","avatar":"https://www.gravatar.com/avatar/50436693085161efd047855dc6bf42cc?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"sashmod","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch10_bg14_green0_188.jpg"},"comments":[]},{"id":268916,"parentId":null,"lft":345,"rgt":346,"depth":1,"text":"Jour 3150 tjr r mdrrr","postDate":"2022-08-27T08:14:24Z","validated":true,"user":{"id":1974643,"rating":null,"username":"Ridley67","avatar":"https://www.gravatar.com/avatar/a0ea7566ad2a039d5c5389d89301f3ac?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":3,"rating":null,"username":"Dnr","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch1_bg14_green0_188.jpg"},"comments":[]},{"id":268415,"parentId":null,"lft":343,"rgt":344,"depth":1,"text":"23/08/2022 15:38 Pas de suite x)","postDate":"2022-08-23T13:38:41Z","validated":true,"user":{"id":3312790,"rating":null,"username":"nicolasrasse09","avatar":"https://www.gravatar.com/avatar/b590ffc4bf7b0452915a900e038e9f56?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"La Soupe","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":261121,"parentId":null,"lft":341,"rgt":342,"depth":1,"text":"3090 toujours rien lol\nsinon j'adore l'anime","postDate":"2022-06-26T10:37:52Z","validated":true,"user":{"id":3102565,"rating":5,"username":"Lefael","avatar":"https://www.gravatar.com/avatar/34f1bcc896e3756e0c8843f6dc25b74a?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":3,"rating":5,"username":"BlueTerror","avatar":"https://avatar.animationdigitalnetwork.fr/web/naruto1_bg8_green0_188.jpg"},"comments":[]},{"id":259100,"parentId":null,"lft":339,"rgt":340,"depth":1,"text":"2022 rien[spoiler][/spoiler]\n\n[spoiler][/spoiler]","postDate":"2022-06-03T16:42:51Z","validated":true,"user":{"id":2684540,"rating":null,"username":"Romane3110","avatar":"https://www.gravatar.com/avatar/9c306b0cb9a2d3744b273b92fdec4182?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":2,"rating":null,"username":"Nahel","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch20_bg12_green1_188.jpg"},"comments":[]},{"id":259052,"parentId":null,"lft":337,"rgt":338,"depth":1,"text":"jour 325645 toujours rien","postDate":"2022-06-02T17:50:20Z","validated":true,"user":{"id":3141635,"rating":null,"username":"Leny670","avatar":"https://www.gravatar.com/avatar/c1e6fa94a9f94754e943c8f4db2ff9ad?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Leny670","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":258764,"parentId":null,"lft":335,"rgt":336,"depth":1,"text":"Comment faire pour ouvrir les vidéos\n","postDate":"2022-05-30T15:39:29Z","validated":true,"user":{"id":3418900,"rating":null,"username":"9019012","avatar":"https://www.gravatar.com/avatar/6f593a5d596fb886614eaee454202e2d?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"9019012","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":256005,"parentId":null,"lft":331,"rgt":334,"depth":1,"text":"une saison 2 a ete anonce et est en cour de production","postDate":"2022-05-04T23:22:27Z","validated":true,"user":{"id":2141811,"rating":null,"username":"beebo","avatar":"https://www.gravatar.com/avatar/24cee716e9b1411d43e6137d7496dc9e?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":2,"rating":null,"username":"Kitty magicien","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch10_bg14_green1_188.jpg"},"comments":[{"id":256133,"parentId":256005,"lft":332,"rgt":333,"depth":2,"text":"dit nous la source, car il y'a aucune info sur internet","postDate":"2022-05-06T20:49:38Z","validated":true,"user":{"id":2815030,"rating":null,"username":"ANAYO","avatar":"https://www.gravatar.com/avatar/aa1498b4bada237bbcc2765238cb8c75?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"ANAYO","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]}]},{"id":252895,"parentId":null,"lft":327,"rgt":328,"depth":1,"text":"Avril 2022 est toujours rien\n","postDate":"2022-04-09T17:21:54Z","validated":true,"user":{"id":3300374,"rating":null,"username":"saadelyousfi281","avatar":"https://www.gravatar.com/avatar/194d4571a76c5135a8510cd948bfcadd?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"saadelyousfi281","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":251128,"parentId":null,"lft":325,"rgt":326,"depth":1,"text":"comme beaucoup de série des suite sont annoncé puis repoussé à des dates ultérieur sans plus de nouvelles. les raisons son quant à elles diverse (actualités mondiale ou raison de santé de l'auteur et autre...) pour tout fan il faut attendre que sa arrive un jour sur nos écrans et s'armé de patience ^_^\"\n","postDate":"2022-03-25T10:05:44Z","validated":true,"user":{"id":1008257,"rating":null,"username":"harukki","avatar":"https://www.gravatar.com/avatar/1172257b24e8b4c1f3634c35a7fa118e?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"harukki","avatar":"https://avatar.animationdigitalnetwork.fr/web/eminence1_bg14_green0_188.jpg"},"comments":[]},{"id":244936,"parentId":null,"lft":321,"rgt":324,"depth":1,"text":"2022 toujours aucune nouvelle rip","postDate":"2022-01-23T03:05:59Z","validated":true,"user":{"id":2014836,"rating":null,"username":"emmasteeland","avatar":"https://www.gravatar.com/avatar/80fae2c608af7d09efef75b0f7b93d2c?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"emmasteeland","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[{"id":244941,"parentId":244936,"lft":322,"rgt":323,"depth":2,"text":"ouais\n","postDate":"2022-01-23T07:45:48Z","validated":true,"user":{"id":3149394,"rating":null,"username":"H_IL","avatar":"https://www.gravatar.com/avatar/51ab614116aee292eaf88e44ea05828f?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"H_IL","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]}]},{"id":225838,"parentId":null,"lft":319,"rgt":320,"depth":1,"text":"Salut les fans d'animé, je vous informe que le saison 2 est bien prévue mais nous avons encore aucune date. Du au faite que Yū Kamiya souhaite avant tous terminer ces romans. A la suite les manga sortirons et en dernier l'animé donc soyez encore très patient.","postDate":"2021-09-27T20:25:17Z","validated":true,"user":{"id":2715675,"rating":null,"username":"Parzivale","avatar":"https://www.gravatar.com/avatar/5698bd09edd49992a06447f001cbd40b?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"Parzivale","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch1_bg1_green0_188.jpg"},"comments":[]},{"id":221783,"parentId":null,"lft":317,"rgt":318,"depth":1,"text":"pour ce qui ne serait pas au courant il existe des épisodes spéciaux ","postDate":"2021-09-13T16:27:37Z","validated":true,"user":{"id":2888910,"rating":null,"username":"Clc93","avatar":"https://www.gravatar.com/avatar/061fde263dfa66e38d45c211a5286432?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Clc93","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":221781,"parentId":null,"lft":315,"rgt":316,"depth":1,"text":"2021 on att tjr une suite\n","postDate":"2021-09-13T16:26:15Z","validated":true,"user":{"id":2888910,"rating":null,"username":"Clc93","avatar":"https://www.gravatar.com/avatar/061fde263dfa66e38d45c211a5286432?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Clc93","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":210095,"parentId":null,"lft":311,"rgt":314,"depth":1,"text":"quand je pense à la saison 2 ... Je pleure ,je meurs","postDate":"2021-07-28T21:10:49Z","validated":true,"user":{"id":1143098,"rating":null,"username":"Anonymous1143098","avatar":"https://www.gravatar.com/avatar/91836b6bfecd3887b1889c546f4e04bb?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":4,"rating":null,"username":"le caca c'est fondant","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch5_bg10_green1_188.jpg"},"comments":[{"id":210727,"parentId":210095,"lft":312,"rgt":313,"depth":2,"text":"je souffre je suis en pls help me","postDate":"2021-07-31T21:42:58Z","validated":true,"user":{"id":2457413,"rating":null,"username":"misterieu51","avatar":"https://www.gravatar.com/avatar/2bd189ba9a4814df052166e16c3cdfd5?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"misterieu51","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]}]},{"id":203939,"parentId":null,"lft":307,"rgt":310,"depth":1,"text":"Je crois que l'auteure est malade (gravement malade ) ","postDate":"2021-07-07T13:55:30Z","validated":true,"user":{"id":2448209,"rating":null,"username":"sdefaye01","avatar":"https://www.gravatar.com/avatar/7076577e7c3d3265dd9553367c66ea7b?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Félix","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[{"id":213099,"parentId":203939,"lft":308,"rgt":309,"depth":2,"text":"dommage sniff","postDate":"2021-08-10T10:29:12Z","validated":true,"user":{"id":2661767,"rating":null,"username":"nicolaspetitfrere","avatar":"https://www.gravatar.com/avatar/c1e3c21d6a960f56d1f7b7b16ad46c00?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":2,"rating":null,"username":"The_Nageur","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch20_bg12_green1_188.jpg"},"comments":[]}]},{"id":203493,"parentId":null,"lft":305,"rgt":306,"depth":1,"text":"Ici lundi 5 juillet est-ce que il y a une deuxième saison please","postDate":"2021-07-05T14:32:12Z","validated":true,"user":{"id":2569828,"rating":null,"username":"Chronosss","avatar":"https://www.gravatar.com/avatar/ecd5d603ea08688f58817890a1ce0b5f?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Chronosss","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":202278,"parentId":null,"lft":303,"rgt":304,"depth":1,"text":"lourd","postDate":"2021-07-01T13:16:32Z","validated":true,"user":{"id":1455817,"rating":null,"username":"Galax_Star","avatar":"https://www.gravatar.com/avatar/f8b18026353b6e9af4b01b4c2c4a152f?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Mangao","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":202029,"parentId":null,"lft":301,"rgt":302,"depth":1,"text":"Peut être  fin 2021 on espère ","postDate":"2021-06-30T12:34:10Z","validated":true,"user":{"id":2173281,"rating":null,"username":"ktarinoura","avatar":"https://www.gravatar.com/avatar/44cbfe8de4df8eb5970abacf4a6e0d28?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Adam","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":201825,"parentId":null,"lft":299,"rgt":300,"depth":1,"text":"ici 2021 et toujours pas de saison 2 ","postDate":"2021-06-29T16:14:09Z","validated":true,"user":{"id":2191717,"rating":null,"username":"Kainos26","avatar":"https://www.gravatar.com/avatar/6d06a153218c93031a29130ca7c66af9?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":2,"rating":null,"username":"Healzz_Raphaste","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch15_bg9_green0_188.jpg"},"comments":[]},{"id":197903,"parentId":null,"lft":295,"rgt":298,"depth":1,"text":"c nul\n[spoiler][/spoiler]","postDate":"2021-06-17T07:33:49Z","validated":true,"user":{"id":2520733,"rating":null,"username":"god man","avatar":"https://www.gravatar.com/avatar/2b065924d37cf5624cee65eb8da0d53e?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"god man","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":196898,"parentId":null,"lft":289,"rgt":294,"depth":1,"text":"Bon , Juin 2021 toujours pas de précision sur une autre saison prévue , c'est dommage d'avoir couper la s1 comme ça sans suite de prévue sa ruine un puex la série je trouve , ce qui est bien dommage dans le contexte que la série et vraiment génial","postDate":"2021-06-13T11:00:22Z","validated":true,"user":{"id":1829739,"rating":null,"username":"tanguy.dms224","avatar":"https://www.gravatar.com/avatar/459500158594875390dd58c3f6dd7a99?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"tanguy.dms224","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":188141,"parentId":null,"lft":285,"rgt":288,"depth":1,"text":"bah on est en 2021 et y'a toujours pas de saison 2 ahah\n\n","postDate":"2021-05-13T22:16:45Z","validated":true,"user":{"id":1658643,"rating":null,"username":"leon.frengulo","avatar":"https://www.gravatar.com/avatar/6f57d6746b7a34d51c4a1117ae1f2b19?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":2,"rating":null,"username":"Merlin","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch12_bg8_green0_188.jpg"},"comments":[{"id":189298,"parentId":188141,"lft":286,"rgt":287,"depth":2,"text":":-(","postDate":"2021-05-16T21:09:13Z","validated":true,"user":{"id":2033942,"rating":null,"username":"Gabisparta","avatar":"https://www.gravatar.com/avatar/36c774e4008a2c8ef2cd33a236e0cb82?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Gabisparta","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]}]},{"id":187490,"parentId":null,"lft":283,"rgt":284,"depth":1,"text":"ESKE YA UNE AUTRE SAISON DE PREVUE PSK DEPUSI 2016 QUE J4ATTENDS\n","postDate":"2021-05-11T13:02:35Z","validated":true,"user":{"id":1013728,"rating":null,"username":"Hpindo","avatar":"https://www.gravatar.com/avatar/1f3f3cc33a3baa10b6cb9b928aec27a5?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":2,"rating":null,"username":"zebiiii","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch1_bg11_green0_188.jpg"},"comments":[]},{"id":178238,"parentId":null,"lft":281,"rgt":282,"depth":1,"text":"2021  on n'a pas la saison 2 \n\n","postDate":"2021-04-14T18:09:29Z","validated":true,"user":{"id":1662709,"rating":null,"username":"Mgorio","avatar":"https://www.gravatar.com/avatar/48eee2705c17817660bd4458c70f26f8?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":2,"rating":null,"username":"keyan","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch1_bg7_green0_188.jpg"},"comments":[]},{"id":176295,"parentId":null,"lft":279,"rgt":280,"depth":1,"text":"2021 toujours pas de suite XD","postDate":"2021-04-10T09:38:36Z","validated":true,"user":{"id":2225177,"rating":null,"username":"nessa60200","avatar":"https://www.gravatar.com/avatar/0c8e68f2509cc80b4266f908f95d63b4?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":2,"rating":null,"username":"Mathmath","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch10_bg14_green0_188.jpg"},"comments":[]},{"id":176087,"parentId":null,"lft":277,"rgt":278,"depth":1,"text":"2021 tjrs rien\n","postDate":"2021-04-09T19:21:24Z","validated":true,"user":{"id":2050614,"rating":null,"username":"amarillof","avatar":"https://www.gravatar.com/avatar/28b24af982d93a3c0aa16470aea19150?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"amarillof","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":168287,"parentId":null,"lft":275,"rgt":276,"depth":1,"text":"Mais moi je regarde en 2021 et il y a toujours pas de saison 2 stp r ajoutez une saison 2 pleese\n","postDate":"2021-03-15T16:25:21Z","validated":true,"user":{"id":985806,"rating":null,"username":"Rudy18","avatar":"https://www.gravatar.com/avatar/10c74f6d52bc3cf359a2b7e8bdb9b430?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"Rudy18","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":160685,"parentId":null,"lft":273,"rgt":274,"depth":1,"text":"Aucune saison 2 ne sortira pour le moment.\nIl y en aura une seulement si un autre éditeur prends le relais.","postDate":"2021-02-07T14:48:55Z","validated":true,"user":{"id":1687630,"rating":null,"username":"Yamiasta","avatar":"https://www.gravatar.com/avatar/9277966e09798b75d02684945dc3fda8?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"le meilleure anime ces one piece","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":160603,"parentId":null,"lft":271,"rgt":272,"depth":1,"text":"Ici 2021 toujours rien...","postDate":"2021-02-07T11:36:53Z","validated":true,"user":{"id":1750263,"rating":null,"username":"Fakharyr","avatar":"https://www.gravatar.com/avatar/ac32403e09988bac271e05a62a7fb665?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"RyanPouli","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":158510,"parentId":null,"lft":269,"rgt":270,"depth":1,"text":"Bon bah 2021 toujours pas de suite, on peut dire qu'il n'y en aura jamais..","postDate":"2021-01-26T01:11:22Z","validated":true,"user":{"id":1813289,"rating":null,"username":"compteprops","avatar":"https://www.gravatar.com/avatar/075c7553e88ee05441b9d46cac87a77c?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"LawfuL12","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":157899,"parentId":null,"lft":267,"rgt":268,"depth":1,"text":"2021 Toujours aucune suite a l'horizon...xD","postDate":"2021-01-23T01:27:43Z","validated":true,"user":{"id":2084110,"rating":null,"username":"Lawrooom","avatar":"https://www.gravatar.com/avatar/d6714d60befa61c7c6f42aa358362c7d?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Lawrooom","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":154147,"parentId":null,"lft":265,"rgt":266,"depth":1,"text":"2021 aussi xd","postDate":"2021-01-03T22:10:46Z","validated":true,"user":{"id":355083,"rating":null,"username":"Tenshenya","avatar":"https://www.gravatar.com/avatar/b53e82107faf7415f09113776ae6b8c2?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"Tenshenya","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":149452,"parentId":null,"lft":263,"rgt":264,"depth":1,"text":"Très bonne série , je l'ai toute suite su au début du premier épisode , je l'avais fini à l'époque , mais je vous la conseille .","postDate":"2020-12-09T02:18:05Z","validated":true,"user":{"id":1986647,"rating":5,"username":"geekraida","avatar":"https://www.gravatar.com/avatar/2d7029b6c31c9e046a3de4019114f8bc?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":5,"username":"geekraida","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":145031,"parentId":null,"lft":261,"rgt":262,"depth":1,"text":"Aucune bande-annonce n’est disponible pour le moment. De plus, cela ne m’étonnerait pas si No Game No Life Saison 2 sortait l’année prochaine 2021 ou 2022 et sera diffusé un an plus tard. Le studio Madhouse est occupé à créer un autre anime ces jours-ci avec d’autres studios d’anime, il est donc certain que cet anime prendra un certain temps à sortir. Cependant, No Game No Life Saison 1 a fait un travail remarquable. La production mettrait donc quelques années à annoncer No Game No Life Saison 2.","postDate":"2020-11-15T15:41:00Z","validated":true,"user":{"id":712768,"rating":null,"username":"wagrezj","avatar":"https://www.gravatar.com/avatar/2d498db0efe1f29fe176885638913388?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"wagrezj","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":143105,"parentId":null,"lft":257,"rgt":260,"depth":1,"text":"On veut une saison 2![spoiler]ils ont battut que les Warbeast[/spoiler]","postDate":"2020-11-04T14:04:29Z","validated":true,"user":{"id":1766819,"rating":null,"username":"Arlequino","avatar":"https://www.gravatar.com/avatar/973325cae3da3e90d5c03bc3edd1f4b3?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Arlequino","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[{"id":144425,"parentId":143105,"lft":258,"rgt":259,"depth":2,"text":"regarde le film (si c'est pas déjà fait) tu verras tu le regretteras pas ;)","postDate":"2020-11-11T17:10:47Z","validated":true,"user":{"id":1123248,"rating":null,"username":"Scrap_er_YTB","avatar":"https://www.gravatar.com/avatar/3f78bfb6008a0faa9be83bf546f49073?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Scrap_er_YTB","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]}]},{"id":136094,"parentId":null,"lft":255,"rgt":256,"depth":1,"text":"vraiment domage de pas saison 2 mais quand c'est mort c'est mort","postDate":"2020-09-14T11:20:15Z","validated":true,"user":{"id":640539,"rating":null,"username":"FlemeDeTrouver1Blaz","avatar":"https://www.gravatar.com/avatar/eee78934f15ccc511ef56b647411a1e5?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"FlemeDeTrouver1Blaz","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":128992,"parentId":null,"lft":249,"rgt":252,"depth":1,"text":"C'est un super anime dommage qu'il y a pas une saison 2","postDate":"2020-07-30T16:00:59Z","validated":true,"user":{"id":1682702,"rating":null,"username":"HiTroZ","avatar":"https://www.gravatar.com/avatar/6031be4177e6d41cc207b6bbb3720439?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"HiTroZ","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[{"id":130145,"parentId":128992,"lft":250,"rgt":251,"depth":2,"text":"C'est vrai qu'il n'y pas de saison 2 mais pas encore officiel avec une chance d'avoir la saison 2 en 2021 vu le succès pour la saison 1 qui a très bien marché","postDate":"2020-08-06T15:22:21Z","validated":true,"user":{"id":862024,"rating":null,"username":"Sparthades","avatar":"https://www.gravatar.com/avatar/b2b2f4438db9327665b973160c6d1a78?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"Sparthades","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch4_bg12_green0_188.jpg"},"comments":[]}]},{"id":125224,"parentId":null,"lft":245,"rgt":248,"depth":1,"text":"[spoiler][/spoiler]Je trouve ça horrible qu'il y ait pas vraiment de fin.... ils ont abandonné l'animé ou c'est juste que la fin n'est pas ni sur netflix ni sur ADN???","postDate":"2020-07-09T20:09:20Z","validated":true,"user":{"id":1123248,"rating":null,"username":"Scrap_er_YTB","avatar":"https://www.gravatar.com/avatar/3f78bfb6008a0faa9be83bf546f49073?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Scrap_er_YTB","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[{"id":133322,"parentId":125224,"lft":246,"rgt":247,"depth":2,"text":"il y a no game no life zéro si tu est intéresser","postDate":"2020-08-25T13:01:57Z","validated":true,"user":{"id":1752447,"rating":null,"username":"trinity_seven","avatar":"https://www.gravatar.com/avatar/9de2dba3ba1cefe9c5917eb0949fc70b?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"trinity_seven","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]}]},{"id":124581,"parentId":null,"lft":241,"rgt":244,"depth":1,"text":"Cette animes est super je l'ais adoré mais malheureusement on est en 2020 et il n'y a toujours pas de saison 2. Sa me rend quand même triste car j'adorerais voir le dieux et le frère et la sœur jouer au échec avec les pièce des royaume. Je vous le conseil mais si vous êtes un/une accro comme moi et qui peux pas supporter qu'il n'y a pas de suite je vous le conseil pas????????.","postDate":"2020-07-05T19:55:47Z","validated":true,"user":{"id":1512730,"rating":null,"username":"emilie.grondin17","avatar":"https://www.gravatar.com/avatar/ec506aa5e6ab682c4a0dd700b67b314d?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"emilie.grondin17","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[{"id":124583,"parentId":124581,"lft":242,"rgt":243,"depth":2,"text":"Il y a des point d'interrogation au lieu de smil dsl -_-","postDate":"2020-07-05T19:59:04Z","validated":true,"user":{"id":1512730,"rating":null,"username":"emilie.grondin17","avatar":"https://www.gravatar.com/avatar/ec506aa5e6ab682c4a0dd700b67b314d?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"emilie.grondin17","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]}]},{"id":121593,"parentId":null,"lft":239,"rgt":240,"depth":1,"text":"a quand une suite ? :(","postDate":"2020-06-16T22:54:55Z","validated":true,"user":{"id":1670944,"rating":null,"username":"Foxam90","avatar":"https://www.gravatar.com/avatar/202d273e9d51c422ecf11d19f5f64888?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Foxam90","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":117634,"parentId":null,"lft":237,"rgt":238,"depth":1,"text":"enfin je trouve le temps long*","postDate":"2020-05-27T15:07:55Z","validated":true,"user":{"id":1514438,"rating":null,"username":"puresangcamille","avatar":"https://www.gravatar.com/avatar/84931597163d940ae1b78f37d05c4eea?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"puresangcamille","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":117633,"parentId":null,"lft":235,"rgt":236,"depth":1,"text":"dommage qu'on est jamais u de suite l'anime aurait pus avoir encore plus de succes,\nj'aprecis cet anime et je trouve dommage de le laisse infini , les peso sont pas mal (malgres qu'il paraissent inseste) \nj'ai bien aimer le visioner je ne reproche que le fait que je me sois un peu ennuyer et que je trouve un peu le temps long malgres qu'il n'y est que 12 episodes","postDate":"2020-05-27T15:06:57Z","validated":true,"user":{"id":1514438,"rating":null,"username":"puresangcamille","avatar":"https://www.gravatar.com/avatar/84931597163d940ae1b78f37d05c4eea?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"puresangcamille","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":115603,"parentId":null,"lft":231,"rgt":234,"depth":1,"text":"sa fait deja 4 ans ils peuvent pas nous laisser comme sa poiroter en plus ils ont sortit le 0 sa serai dommage de déçevoir autan de fan","postDate":"2020-05-17T21:42:32Z","validated":true,"user":{"id":1461923,"rating":null,"username":"pige00n","avatar":"https://www.gravatar.com/avatar/e31763ac294c9e2460b9bb485ecef63f?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"pige00n","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[{"id":115920,"parentId":115603,"lft":232,"rgt":233,"depth":2,"text":"il n'y aura surement pas de saison 2 à cause d'un procés que l'auteur de jojo bizarre's adventure a lancé il a gagné donc il n'y a qu un film on y peut rien","postDate":"2020-05-19T14:37:19Z","validated":true,"user":{"id":1506046,"rating":null,"username":"lilou582","avatar":"https://www.gravatar.com/avatar/c1453110208009244b1a6c49ef3c1902?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"lilou582","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]}]},{"id":113473,"parentId":null,"lft":229,"rgt":230,"depth":1,"text":"J'ai adore se manga ,mais toujours pas saison 2","postDate":"2020-05-09T20:13:33Z","validated":true,"user":{"id":0,"rating":null,"username":"Anonyme","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Anonyme","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":110004,"parentId":null,"lft":227,"rgt":228,"depth":1,"text":"on attend tous la saison 2 super animé que je conseille","postDate":"2020-04-29T15:58:15Z","validated":true,"user":{"id":1574757,"rating":null,"username":"CREEPYMANGA","avatar":"https://www.gravatar.com/avatar/32b769a926f3b2326295bfd66d366900?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"CREEPYMANGA","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":100386,"parentId":null,"lft":225,"rgt":226,"depth":1,"text":"2020 pa de suite XD","postDate":"2020-03-26T02:25:08Z","validated":true,"user":{"id":1104763,"rating":null,"username":"yhaouaz200654","avatar":"https://www.gravatar.com/avatar/7052111c8ae7a59f820af4784d3848f7?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"y.haouaz200654","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":99085,"parentId":null,"lft":223,"rgt":224,"depth":1,"text":"Y a un film de no game no life sur ADN","postDate":"2020-03-17T17:03:25Z","validated":true,"user":{"id":1420088,"rating":null,"username":"NINIS93","avatar":"https://www.gravatar.com/avatar/065aa024fce723db5e8c7834e3da397a?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"NINIS93","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":93591,"parentId":null,"lft":219,"rgt":222,"depth":1,"text":"2020 toujours pas","postDate":"2020-01-14T20:31:28Z","validated":true,"user":{"id":1166422,"rating":null,"username":"fatalis7LT","avatar":"https://www.gravatar.com/avatar/f1e851d9c8281a5c055c714ed539344d?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"fatalis7LT","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[{"id":97219,"parentId":93591,"lft":220,"rgt":221,"depth":2,"text":"il n'y en aura jamais c l’auteur qui la annoncer je ne sais plus trop ou dsl","postDate":"2020-02-24T21:54:48Z","validated":true,"user":{"id":1404833,"rating":null,"username":"yohan.matheron","avatar":"https://www.gravatar.com/avatar/a70e9aad40ad926610477eda179541e2?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"yohan.matheron","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]}]},{"id":91339,"parentId":null,"lft":217,"rgt":218,"depth":1,"text":"presque 2020 hein mais toujours rien","postDate":"2019-12-28T03:57:02Z","validated":true,"user":{"id":854173,"rating":null,"username":"Flo92izzi","avatar":"https://www.gravatar.com/avatar/c92f0d0be2af4c2f987c754f2a75fd2b?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Flo92izzi","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":87392,"parentId":null,"lft":215,"rgt":216,"depth":1,"text":"2019 tjrs pas de saison 2 xc je perd esploir bordel","postDate":"2019-11-11T08:09:49Z","validated":true,"user":{"id":1166923,"rating":null,"username":"Purikyua","avatar":"https://www.gravatar.com/avatar/7f559652b4cdf42cd144bab427465675?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Kyoko","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":82747,"parentId":null,"lft":213,"rgt":214,"depth":1,"text":"haaaaaaaaaaan j'aimerais tellement qu'il y ai une saison 2 !! j'ai surkiffer !","postDate":"2019-09-20T20:07:44Z","validated":true,"user":{"id":761032,"rating":null,"username":"MamanLoutre","avatar":"https://www.gravatar.com/avatar/80ca453f7e14a75a491d91deac99ddd5?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"Maman Loutre","avatar":"https://avatar.animationdigitalnetwork.fr/web/fruits1_bg6_green0_188.jpg"},"comments":[]},{"id":82043,"parentId":null,"lft":209,"rgt":212,"depth":1,"text":"quelqu'un sait si une saison deux est prévue ? Car ça ma semble étrange que ca se finisse avec [spoiler]la création de l'union d'elchia[/spoiler]","postDate":"2019-09-10T19:15:58Z","validated":true,"user":{"id":1221236,"rating":null,"username":"TheShinigaming","avatar":"https://www.gravatar.com/avatar/c81c2d2d6037138b7ca480d094cbbceb?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"TheShinigaming","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[{"id":85844,"parentId":82043,"lft":210,"rgt":211,"depth":2,"text":"Il y a des années que les gens attendant une suite, on peut toujours rêver je pense. Il y a le film No Game No Life Zero sur ADN si tu veux.","postDate":"2019-10-25T13:51:37Z","validated":true,"user":{"id":510496,"rating":null,"username":"Baykog","avatar":"https://www.gravatar.com/avatar/6d292197f4f5f0a6b90d85ce4cce64a1?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Baykog","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]}]},{"id":75371,"parentId":null,"lft":207,"rgt":208,"depth":1,"text":"C'est une série super sympa mais je pense que tout le monde rêve d'une suite","postDate":"2019-07-08T12:05:31Z","validated":true,"user":{"id":1131859,"rating":null,"username":"KRA_ANIME_203","avatar":"https://www.gravatar.com/avatar/844545260771e2e813d0fed0e5a7f689?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"KRA_ANIME_203","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":72672,"parentId":null,"lft":203,"rgt":206,"depth":1,"text":"y aura une suite ou pas ?","postDate":"2019-06-22T09:41:32Z","validated":true,"user":{"id":938341,"rating":null,"username":"ludo792","avatar":"https://www.gravatar.com/avatar/acea75a3f378f964d1088197232fab7e?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"ludo792","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[{"id":73517,"parentId":72672,"lft":204,"rgt":205,"depth":2,"text":"Je ne pense pas car en France ce manga/animé est vu comme mal sain malheureusement.","postDate":"2019-06-28T12:14:45Z","validated":true,"user":{"id":784541,"rating":null,"username":"Cedrik3324","avatar":"https://www.gravatar.com/avatar/e788d615d57932c9b1dfde3ccd6e8b23?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"Cedrik3324","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]}]},{"id":71481,"parentId":null,"lft":201,"rgt":202,"depth":1,"text":"La saison 2 est prévu pour juillet aout ! ????","postDate":"2019-06-11T22:46:28Z","validated":true,"user":{"id":1128808,"rating":null,"username":"Stram","avatar":"https://www.gravatar.com/avatar/754319c0630d872894daf377f113aa14?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Stram","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":71479,"parentId":null,"lft":197,"rgt":200,"depth":1,"text":"L une des meilleur anime","postDate":"2019-06-11T22:45:16Z","validated":true,"user":{"id":1128808,"rating":null,"username":"Stram","avatar":"https://www.gravatar.com/avatar/754319c0630d872894daf377f113aa14?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Stram","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[{"id":284629,"parentId":71479,"lft":198,"rgt":199,"depth":2,"text":"UNE ?!\nUN ANIME !!!\n","postDate":"2023-02-27T21:41:45Z","validated":true,"user":{"id":2184576,"rating":5,"username":"redatln19","avatar":"https://www.gravatar.com/avatar/4bbfcd2534b00618c5a36d636ca915e4?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":5,"username":"TALOULINE°","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]}]},{"id":69938,"parentId":null,"lft":195,"rgt":196,"depth":1,"text":"Une super série, bon scénario, personnages attachant et de l'humour vivement la suite ..","postDate":"2019-06-02T19:28:30Z","validated":true,"user":{"id":554198,"rating":null,"username":"Crodacier","avatar":"https://www.gravatar.com/avatar/3a8018af89611cb4d786b743b56d876f?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Crodacier","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":69775,"parentId":null,"lft":191,"rgt":194,"depth":1,"text":"Après avoir regarder plusieurs fois la série, j'ai toujours autant de plaisir à le regarder encore une fois. Je peux vous dire une chose, le film NO GAME NO LIFE ZERO est du même niveau voir plus. En plus d'être magnifique (à tous les niveaux), l'histoire est prenante et touchante sur le sort des humains.Ils sont proche de l'extinction et tentent de survivre à des guerres de titan. Le thème est dramatique avec un côté fin du monde mais cela permet de comprendre la série. Si ADN pouvait mettre le film qui est loin très loin au dessus des films ridicules de  naruto/fairytail (j’apprécie les séries mais les films sont à oublier, désolé).","postDate":"2019-06-01T12:53:59Z","validated":true,"user":{"id":164248,"rating":null,"username":"ulrich.kikoolol","avatar":"https://www.gravatar.com/avatar/e6efe94e5f7795a1ff9866aab07e6745?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"ulrich.kikoolol","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[{"id":70080,"parentId":69775,"lft":192,"rgt":193,"depth":2,"text":"je suis totalement d'accord! ce filme est un pure chef d'oeuvre et ce serait vraiment bien que ADN puisse nous le proposer!","postDate":"2019-06-03T22:58:26Z","validated":true,"user":{"id":961605,"rating":null,"username":"hugomon18","avatar":"https://www.gravatar.com/avatar/18adee9ff742f0e0324506eac8b595a3?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"hugomon18","avatar":"https://avatar.animationdigitalnetwork.fr/web/oshi4_bg14_green0_188.jpg"},"comments":[]}]},{"id":68551,"parentId":null,"lft":189,"rgt":190,"depth":1,"text":"Vraiment TRISTE !!","postDate":"2019-05-24T00:51:18Z","validated":true,"user":{"id":920573,"rating":null,"username":"GeekTeam","avatar":"https://www.gravatar.com/avatar/b6344d25ce51d9fc032e64cc9b0b4aeb?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"GeekTeam","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":67003,"parentId":null,"lft":187,"rgt":188,"depth":1,"text":"Bon bah vue les comm jvai commencer ce fameux no game no life dont tout le monde parle en espérant que ca ne soit pas comme Sword art online car oui je n’est pas trop kiffé cette anime bon allez jme lance bisou et si j’aime je serai déçus car j’ai crus comprendre qu’il n’y a pas de saison 2 au bout de quelque année jvai prendre du plaisir alors bye ^^ !","postDate":"2019-05-13T18:50:14Z","validated":true,"user":{"id":1090495,"rating":null,"username":"Zinonix","avatar":"https://www.gravatar.com/avatar/34526f06bf5159fe5b30d2047e6c823b?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Zinonix","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch14_bg0_green0_188.jpg"},"comments":[]},{"id":66611,"parentId":null,"lft":185,"rgt":186,"depth":1,"text":"un trés bon animé qui nous laisse sur notre fin... j'espère que nous aurons droit, un jour, à une saison 2!","postDate":"2019-05-09T15:33:51Z","validated":true,"user":{"id":1080338,"rating":null,"username":"ifred14","avatar":"https://www.gravatar.com/avatar/01f96091db548e7841d5553c05891844?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"ifred14","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":64884,"parentId":null,"lft":181,"rgt":184,"depth":1,"text":"Quelqu'un sait ou voir le film de NGNL ? je ne le trouve nulle part :(","postDate":"2019-04-25T16:59:05Z","validated":true,"user":{"id":968726,"rating":null,"username":"Valahian","avatar":"https://www.gravatar.com/avatar/9629e71d6651ebf449457db073ac4cad?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"Valahian","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch1_bg12_green0_188.jpg"},"comments":[]},{"id":64178,"parentId":null,"lft":179,"rgt":180,"depth":1,"text":"Quand vient la saison 2 !!!!!!!!!!","postDate":"2019-04-22T16:51:54Z","validated":true,"user":{"id":1050877,"rating":null,"username":"jamzorg","avatar":"https://www.gravatar.com/avatar/4f544220d852aa27d89df8ca1c63875f?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"jamzorg","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":63837,"parentId":null,"lft":177,"rgt":178,"depth":1,"text":"Même après 5 fois.. j'en redemande toujours XD","postDate":"2019-04-19T02:00:51Z","validated":true,"user":{"id":1055900,"rating":null,"username":"Cobra-29","avatar":"https://www.gravatar.com/avatar/8920acba28c6e2ba69c0b45a5a13f55f?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"VirtualX","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":61743,"parentId":null,"lft":175,"rgt":176,"depth":1,"text":"On a eu le droit à une saison 2 de One Punch Man alors que la saison 1 est sortie y'a quelques années donc j'ai encore un espoir, même s'il est minuscule, pour cette série :/","postDate":"2019-04-07T09:23:40Z","validated":true,"user":{"id":994600,"rating":5,"username":"BeaverLTS","avatar":"https://www.gravatar.com/avatar/fc89acead45b5bb1240dab0e7c6a55c3?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":5,"username":"BeaverLTS","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":60760,"parentId":null,"lft":171,"rgt":174,"depth":1,"text":"La suite continue de sortir en manga alors on peut espérer un jour une suite en animé [spoiler]le duel avec le Old Deus est déjà sorti en manga[/spoiler]","postDate":"2019-03-27T08:05:28Z","validated":true,"user":{"id":926141,"rating":null,"username":"KiraRoot","avatar":"https://www.gravatar.com/avatar/bd57c324527372727260e8baef6b62df?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"KiraRoot","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[{"id":61075,"parentId":60760,"lft":172,"rgt":173,"depth":2,"text":"Pour l'instant il n'y a que 2 tomes qui sont sortis en France comme au Japon. Le premier tome au Japon en 2013, et ce n'est qu'en 2018 que le tome 1 \u0026 2 sort en France avec la sortie du tome 2 au Japon. On espère un tome 3 très prochainement. Sachant qu'ils se basent sur le light novel sorti qu'au japon. La saison 2 sortira sans doute, quand le manga aura raconté toute la saison 1.","postDate":"2019-03-31T09:46:05Z","validated":true,"user":{"id":914608,"rating":null,"username":"AngelNight","avatar":"https://www.gravatar.com/avatar/facade11f4540366bca2358853c2be13?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"AngelNight","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]}]},{"id":60751,"parentId":null,"lft":169,"rgt":170,"depth":1,"text":"2019, et jamais on ne pourra espérer revoir No Game No Life sur nos écrants...","postDate":"2019-03-26T21:42:24Z","validated":true,"user":{"id":1011701,"rating":null,"username":"Sûgo Tanaka","avatar":"https://www.gravatar.com/avatar/d0e4aab64af676a5d67f44d686c9470b?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"S","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":57772,"parentId":null,"lft":163,"rgt":168,"depth":1,"text":"Toujours de pas suite prévue, malgré la quasi unanimité de cet anime ??\nQuelle frustration de finir comme ça ...\nLa SUIIIIITEEUUUH !!!!\nMerci de faire une saison 2 (et autant qu'il faudra pour finir l'histoire !) ; l'univers est intéressant, la dimension statégie est captivante, les graphisme très sympas ...\nSVP, on veut la suite (au cas où c'était pas clair jusque là) !","postDate":"2019-02-14T18:21:50Z","validated":true,"user":{"id":819340,"rating":null,"username":"Pacifistaaah","avatar":"https://www.gravatar.com/avatar/5f29c8c446f8571143e66d72b23bf7b8?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Pacifistaaah","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch14_bg0_green0_188.jpg"},"comments":[{"id":59489,"parentId":57772,"lft":164,"rgt":167,"depth":2,"text":"complètement d'accord avec toi c'est super frustrant de finir la dessus!!!!!!!!","postDate":"2019-03-10T00:01:30Z","validated":true,"user":{"id":970032,"rating":null,"username":"adam.declerck21","avatar":"https://www.gravatar.com/avatar/f548af1f07c13a73381083772aaa6442?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"adam.declerck21","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":59587,"parentId":59489,"lft":165,"rgt":166,"depth":3,"text":"Déjà 3 ans et toujours pas de nouvelles...","postDate":"2019-03-10T22:06:01Z","validated":true,"user":{"id":0,"rating":null,"username":"Anonyme","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Anonyme","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]}]},{"id":57438,"parentId":null,"lft":161,"rgt":162,"depth":1,"text":"A quand la saison deux ? [spoiler]il faut bien avoir le jeu entre le dieu et le frères et la sœur [/spoiler]","postDate":"2019-02-08T12:33:13Z","validated":true,"user":{"id":955121,"rating":null,"username":"Tymapaille","avatar":"https://www.gravatar.com/avatar/bcd044eb69ecb01859eddfaf9a610455?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Tymapaille","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":49458,"parentId":null,"lft":157,"rgt":158,"depth":1,"text":"Un anime magnifique je le conseil à tous","postDate":"2018-09-06T16:47:30Z","validated":true,"user":{"id":864024,"rating":null,"username":"Dark-guard","avatar":"https://www.gravatar.com/avatar/c32143ae15da5ab228b1a777f7fec928?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"Darkguard","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch9_bg9_green0_188.jpg"},"comments":[]},{"id":37607,"parentId":null,"lft":155,"rgt":156,"depth":1,"text":"Le film est sorti il a pour nom no game, no life zero ! \nSorti en 2017, donc je pense que la saison 2 devrait pas tarder à sortir !!!\n Au passage, il est vraiment pas mal le film et on apprend pas mal de chose !!","postDate":"2018-03-06T19:40:58Z","validated":true,"user":{"id":178462,"rating":null,"username":"Silver Dark","avatar":"https://www.gravatar.com/avatar/a98e47b2d9b9530d0c02e0625525c76c?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"Silver Dark","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":36463,"parentId":null,"lft":145,"rgt":154,"depth":1,"text":"Yoooo, premier commentaire de 2018!!!! J'ai étais me renseigner partout et j'ai vu que ce n'était pas la première et dernière fois que MADHOUSE ne finissait jamais un très bonne anime donc dsl de vous décevoir mais plus rien...","postDate":"2018-01-16T20:47:05Z","validated":true,"user":{"id":719078,"rating":null,"username":"SwartyDreamer","avatar":"https://www.gravatar.com/avatar/42bacba92e6464dc26c0d74a62eecfeb?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"SwartyDreamer","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[{"id":37126,"parentId":36463,"lft":146,"rgt":153,"depth":2,"text":"une saison 2 de prévue pour 2018","postDate":"2018-02-13T12:59:52Z","validated":true,"user":{"id":328311,"rating":5,"username":"xioming","avatar":"https://www.gravatar.com/avatar/dfcec8da3220d2ac2e6040443f7a217d?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":5,"username":"xioming","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch1_bg1_green0_188.jpg"},"comments":[]},{"id":37431,"parentId":37126,"lft":147,"rgt":150,"depth":3,"text":"Tu es sûr de tes sources?","postDate":"2018-02-27T16:54:18Z","validated":true,"user":{"id":678072,"rating":null,"username":"Nekyra","avatar":"https://www.gravatar.com/avatar/834432daf28e2c6ec9fe9a4d99c4b7c6?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"Khinari","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":37522,"parentId":37431,"lft":148,"rgt":149,"depth":4,"text":"Oui c fort possible","postDate":"2018-03-02T23:33:21Z","validated":true,"user":{"id":629601,"rating":null,"username":"AzenArt","avatar":"https://www.gravatar.com/avatar/8a866fbd41388c57171e4e22d6ab9b21?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"AzenArt","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":38120,"parentId":37126,"lft":151,"rgt":152,"depth":3,"text":"Une source ? parce que je cherche et j'ai pas d'info concrète donc ton com on dirai juste une supposition ce que tous le monde fait depuis 2016 xD","postDate":"2018-03-23T00:48:03Z","validated":true,"user":{"id":93944,"rating":4,"username":"Easley62","avatar":"https://www.gravatar.com/avatar/4ff3f86a8a538b6caa203ef0f9abf4e7?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":4,"username":"Easley62","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]}]},{"id":35082,"parentId":null,"lft":141,"rgt":142,"depth":1,"text":"J'ai adoré cet animé ! Si vous hésitez foncez le voir vous ne regretterez pas !","postDate":"2017-11-22T19:44:09Z","validated":true,"user":{"id":654781,"rating":null,"username":"Raind0o","avatar":"https://www.gravatar.com/avatar/f8f04ff65718e644cc194b8ec4c9ed7c?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Evan","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":34580,"parentId":null,"lft":137,"rgt":140,"depth":1,"text":"2017 toujour pas de suite","postDate":"2017-10-29T23:28:14Z","validated":true,"user":{"id":69667,"rating":5,"username":"maxime.angot","avatar":"https://www.gravatar.com/avatar/af7d163a136f94780d4f3b0fefa84b1f?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":5,"username":"maxime.angot","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[{"id":270395,"parentId":34580,"lft":138,"rgt":139,"depth":2,"text":"en 2022 toujours pas plus...","postDate":"2022-09-08T17:17:55Z","validated":true,"user":{"id":673762,"rating":null,"username":"simeonsurfer","avatar":"https://www.gravatar.com/avatar/3069988f42a46a168b8f19c93fe9abb1?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"simeonsurfer","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]}]},{"id":33290,"parentId":null,"lft":133,"rgt":136,"depth":1,"text":"très bon anime, filez nous la saison 2, PLEASE !!!","postDate":"2017-09-15T18:43:32Z","validated":true,"user":{"id":683675,"rating":null,"username":"shannongodardtrue","avatar":"https://www.gravatar.com/avatar/a2e88cbee7f5a9b5ad3b41058a81bbe2?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"shannongodardtrue","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[{"id":191735,"parentId":33290,"lft":134,"rgt":135,"depth":2,"text":"2021 toujours rien༎ຶ‿༎ຶ\n","postDate":"2021-05-25T09:08:51Z","validated":true,"user":{"id":2419415,"rating":null,"username":"jordanhonorefondrose","avatar":"https://www.gravatar.com/avatar/b400caf4f48345d0d5171a8049e08e37?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"jordanhonorefondrose","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch4_bg0_green0_188.jpg"},"comments":[]}]},{"id":32859,"parentId":null,"lft":131,"rgt":132,"depth":1,"text":"Bonjour, il y aurait un film NGNL sorti en Juillet, sera t-il possible de le voir sur le site prochainement?","postDate":"2017-09-02T06:51:15Z","validated":true,"user":{"id":87776,"rating":null,"username":"kamaika1993","avatar":"https://www.gravatar.com/avatar/dc6b8ac302778f904ff1b2f28566ca2b?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"kamaika1993","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":29062,"parentId":null,"lft":127,"rgt":130,"depth":1,"text":"Ou sont  les Oav mrc davance","postDate":"2017-05-23T15:50:08Z","validated":true,"user":{"id":631005,"rating":null,"username":"Pandabass","avatar":"https://www.gravatar.com/avatar/87f925d92b77fea8e97556423ec2fb6c?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Pandabass","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":27549,"parentId":null,"lft":119,"rgt":126,"depth":1,"text":"Au malheur de vous décevoir, NGNL n'aura pas de saison 2 en France! Ses informations sont soutirées de différent site de renseignement! Il est possible que l'apparition d'un film soit prévu mais rien de tous cela n'est affirmé ;(","postDate":"2017-04-07T11:32:27Z","validated":true,"user":{"id":604901,"rating":null,"username":"Naruto-Senpai","avatar":"https://www.gravatar.com/avatar/3d480a226408f78cd7074f740e243a39?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Naruto-Senpai","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[{"id":27827,"parentId":27549,"lft":120,"rgt":121,"depth":2,"text":"et a l'étranger? il suffit juste de faire les sous titre non?\nj'y connais rien du tout alors pas no flame :3","postDate":"2017-04-13T16:44:46Z","validated":true,"user":{"id":499937,"rating":null,"username":"c.genois.25","avatar":"https://www.gravatar.com/avatar/5cdf9f0eda754e70e620f8ee964de58b?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"c.genois.25","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":28724,"parentId":27549,"lft":122,"rgt":123,"depth":2,"text":"Un film est en effet prévu pour le moi de juillet au japon, il est annoncé depuis plusieurs mois d'ailleurs. C'est donc possible qu'une suite voit le jour si le film fonctionne bien.","postDate":"2017-05-11T18:32:27Z","validated":true,"user":{"id":116354,"rating":null,"username":"Kurenay87","avatar":"https://www.gravatar.com/avatar/f06a5d48309abc691127fffd59ca8810?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Kurenay87","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":31231,"parentId":27549,"lft":124,"rgt":125,"depth":2,"text":"Woaw le mec le moins renseigné au monde...","postDate":"2017-07-16T00:10:55Z","validated":true,"user":{"id":146182,"rating":5,"username":"allterminator","avatar":"https://www.gravatar.com/avatar/c103d7ebe3693f13f9d5a61c0d2312ea?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":5,"username":"allterminator","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]}]},{"id":23665,"parentId":null,"lft":117,"rgt":118,"depth":1,"text":"Savez vous si No game no life aura une sortie physique ( dvd et/ou Blu-ray ) ?","postDate":"2016-08-16T13:56:42Z","validated":true,"user":{"id":468192,"rating":null,"username":"jasonkent31","avatar":"https://www.gravatar.com/avatar/c396fe7bc311de0e3af73980c0c3f155?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"jasonkent31","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":21625,"parentId":null,"lft":115,"rgt":116,"depth":1,"text":"Une saison 2 serais top","postDate":"2016-06-23T20:57:32Z","validated":true,"user":{"id":233475,"rating":null,"username":"Maxcusu","avatar":"https://www.gravatar.com/avatar/f04751bd35650156af0c0d982cda986c?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Maxcusu","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":17884,"parentId":null,"lft":113,"rgt":114,"depth":1,"text":"Je me demande si vous allez licenciée la saison :(","postDate":"2016-04-04T16:41:34Z","validated":true,"user":{"id":291188,"rating":null,"username":"OscarLiao2003","avatar":"https://www.gravatar.com/avatar/d1cde65001cac5d844eb974d13d6f022?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"OscarLiao2003","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":16899,"parentId":null,"lft":111,"rgt":112,"depth":1,"text":"je me demande si ADN a son mot à dire dans la sortie de la saison 2 mais en tout cas ca rapporterais un max de moneyyyy et sinon un super anime que je conseil de tout coeur","postDate":"2016-03-09T21:48:21Z","validated":true,"user":{"id":306030,"rating":null,"username":"Candium38","avatar":"https://www.gravatar.com/avatar/028bce32d8f898773c421c13a9bfe83e?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Candium38","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":16263,"parentId":null,"lft":109,"rgt":110,"depth":1,"text":"Très bonne anime,  je le conseille a tous les fans. L'histoire est vraiment intéressante et sort un peu du lot par rapport a ceux que j'ai vu auparavant. les personnage sont attachant, l'histoire est ficeler de tel sorte que l'on veux voir la suite. Une suite serait le bienvenu.","postDate":"2016-02-15T22:56:39Z","validated":true,"user":{"id":268835,"rating":null,"username":"behemoth2B","avatar":"https://www.gravatar.com/avatar/accf4aef7d30271c06e68fd3b4aa4058?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"behemoth2B","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":15895,"parentId":null,"lft":1,"rgt":108,"depth":1,"text":"Savez vous si une saison 2 est prévue ? Si oui quand? Merci","postDate":"2016-02-01T21:55:58Z","validated":true,"user":{"id":268220,"rating":4,"username":"Anonymous268220","avatar":"https://www.gravatar.com/avatar/09d3e1f12595b3610697ce8cb6d97a41?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":4,"username":"Anonymous268220-1","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[{"id":16237,"parentId":15895,"lft":2,"rgt":37,"depth":2,"text":"2016, c'est tout ce qu'on sait, y'a pas de date précise, et c'est une première pour le studio MADHOUSE de produire une deuxième saison (même si One Punch Man aurait sûrement brisé le mythe)","postDate":"2016-02-14T18:14:04Z","validated":true,"user":{"id":129534,"rating":5,"username":"KissenBlaze","avatar":"https://www.gravatar.com/avatar/44a32ec3b12d8f2474a5ee9eba7c5320?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":5,"username":"KissenBlaze","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":31232,"parentId":16237,"lft":3,"rgt":6,"depth":3,"text":"Ha c'est vrai que MADHOUSE n'a jamais fait de suite à ses animes...","postDate":"2017-07-16T00:11:50Z","validated":true,"user":{"id":146182,"rating":5,"username":"allterminator","avatar":"https://www.gravatar.com/avatar/c103d7ebe3693f13f9d5a61c0d2312ea?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":5,"username":"allterminator","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":76900,"parentId":16237,"lft":7,"rgt":24,"depth":3,"text":"moi en 2019 sans suite sortie ni prevue:\nHAHAHAHAHAHA","postDate":"2019-07-19T18:05:23Z","validated":true,"user":{"id":1171065,"rating":null,"username":"akasaka-kun","avatar":"https://www.gravatar.com/avatar/d53069cf20913d326a4779ec3496063e?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"akasaka-kun","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":78480,"parentId":76900,"lft":8,"rgt":19,"depth":4,"text":"2019, toujours pas de suite........... XDDDD","postDate":"2019-08-04T22:19:07Z","validated":true,"user":{"id":729290,"rating":null,"username":"Kaak","avatar":"https://www.gravatar.com/avatar/ca56c67287ae4273cbc0610b50a89920?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Groot","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":80032,"parentId":78480,"lft":9,"rgt":18,"depth":5,"text":"2019 on attend toujours snif","postDate":"2019-08-20T16:46:12Z","validated":true,"user":{"id":1066986,"rating":5,"username":"ZgegInterstellaire","avatar":"https://www.gravatar.com/avatar/b7aad98cf73a75535416ff765c23049f?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":5,"username":"ZgegInterstellaire","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":83219,"parentId":15895,"lft":38,"rgt":39,"depth":2,"text":"il y as un film de sorti mais pas de suite , enfin toujours pas , l'espoir fais vivre je sais xD","postDate":"2019-09-26T19:51:35Z","validated":true,"user":{"id":514945,"rating":null,"username":"cal.grd","avatar":"https://www.gravatar.com/avatar/289b8bc098ef9ff29776ee5c5e72bb5d?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"cal","avatar":"https://avatar.animationdigitalnetwork.fr/web/overlord5_bg1_green0_188.jpg"},"comments":[]},{"id":85838,"parentId":16237,"lft":25,"rgt":28,"depth":3,"text":"Ici 2019 toujours rien ^^","postDate":"2019-10-25T11:38:09Z","validated":true,"user":{"id":1199613,"rating":null,"username":"AshiroZe","avatar":"https://www.gravatar.com/avatar/b973e2439d6c4df9c443c14159015b3c?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"AshiroZe","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":87421,"parentId":15895,"lft":40,"rgt":41,"depth":2,"text":"eux src sa fait plus de 3 ans que j'attent qui a des info ou esque quelqun sais si les fan vont faire une suite de eux même \n?","postDate":"2019-11-11T15:49:12Z","validated":true,"user":{"id":1102154,"rating":null,"username":"Delico13","avatar":"https://www.gravatar.com/avatar/a5ed1f4ca71bcec6af4bc869e9c908f3?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Delico13","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":90145,"parentId":15895,"lft":42,"rgt":47,"depth":2,"text":"y'en aura malheureusement jamais. Il y a un film qui existe si tu veux mais il n'étanchera ta soif qu'un temps...","postDate":"2019-12-12T23:56:44Z","validated":true,"user":{"id":650038,"rating":null,"username":"GE3Kz","avatar":"https://www.gravatar.com/avatar/243a6a713e32de1baf2c6333b385981e?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"GE3Kz","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":91170,"parentId":90145,"lft":43,"rgt":46,"depth":3,"text":"ouais mais ils abusent madhouse ils font un super anime et le finissent meme pas","postDate":"2019-12-25T11:07:51Z","validated":true,"user":{"id":1231407,"rating":null,"username":"Gustav20","avatar":"https://www.gravatar.com/avatar/c0983ec9fff64edec1e04d4b70bf9181?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Gustav20","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":91205,"parentId":91170,"lft":44,"rgt":45,"depth":4,"text":"c'est toujours comme ça.. et c'est pas prêt de changer","postDate":"2019-12-25T23:33:38Z","validated":true,"user":{"id":946645,"rating":null,"username":"Llu","avatar":"https://www.gravatar.com/avatar/ee176c7aaba5ba87cc5b14db1519d46a?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"Llu","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch4_bg11_green0_188.jpg"},"comments":[]},{"id":91855,"parentId":16237,"lft":29,"rgt":30,"depth":3,"text":"2020 toujours aucune news.....triste :((","postDate":"2019-12-31T22:40:43Z","validated":true,"user":{"id":772890,"rating":null,"username":"Esraka","avatar":"https://www.gravatar.com/avatar/446560359586dd11a077a8bd576aac89?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Esraka","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":118616,"parentId":15895,"lft":48,"rgt":49,"depth":2,"text":"Pour l'instant, aucune n'est prévue","postDate":"2020-06-01T11:52:35Z","validated":true,"user":{"id":1643059,"rating":null,"username":"Shiinamon","avatar":"https://www.gravatar.com/avatar/4fd5e0743759f9e141b2a8ba3143ccbe?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Shiinamon","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":122983,"parentId":15895,"lft":52,"rgt":53,"depth":2,"text":"c possible rien est sure","postDate":"2020-06-25T21:06:13Z","validated":true,"user":{"id":554718,"rating":null,"username":"frvander","avatar":"https://www.gravatar.com/avatar/2e12b8905d40466085fa81c348067ccd?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"frvander","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":126146,"parentId":80032,"lft":10,"rgt":13,"depth":6,"text":"2020 on patiente encore","postDate":"2020-07-14T18:21:50Z","validated":true,"user":{"id":1378632,"rating":null,"username":"Babazy","avatar":"https://www.gravatar.com/avatar/3cd019ac2b79e3cd791a5b23ac473c17?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Babazy","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":140960,"parentId":126146,"lft":11,"rgt":12,"depth":7,"text":"Je pense que si d'ici début-milieu 2021 y'a même pas une annonce on peut éteindre nos espoirs","postDate":"2020-10-21T12:38:36Z","validated":true,"user":{"id":1114144,"rating":5,"username":"virgil.fonquernie","avatar":"https://www.gravatar.com/avatar/0ee318065e301c0c18e3ff392833d0fa?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":5,"username":"Kyza","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":144140,"parentId":15895,"lft":54,"rgt":55,"depth":2,"text":"0n en sait toujours rien et on est presque en 2021. Je perds espoir...","postDate":"2020-11-09T18:33:23Z","validated":true,"user":{"id":1695886,"rating":null,"username":"WakoZz","avatar":"https://www.gravatar.com/avatar/abe79144ec622294f08f2f2686b89acd?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"WakoZz","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":151412,"parentId":15895,"lft":56,"rgt":57,"depth":2,"text":"Il n'y aura jamais de suite car l'oeuvre original na jamais étais continuer depuis 2018.","postDate":"2020-12-20T22:25:06Z","validated":true,"user":{"id":729414,"rating":null,"username":"Izukend","avatar":"https://www.gravatar.com/avatar/573a35bd8b9670482b6db5f19b435ecf?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Izukend","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":152312,"parentId":80032,"lft":14,"rgt":15,"depth":6,"text":"Em 2020 non plus mdrr","postDate":"2020-12-25T21:47:52Z","validated":true,"user":{"id":1952513,"rating":null,"username":"lelabopau","avatar":"https://www.gravatar.com/avatar/15eb17a19f725e39e5c5944ea49d35c3?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"ぼくのぴこ","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":154584,"parentId":16237,"lft":31,"rgt":32,"depth":3,"text":"2020 on l'a.\n NON","postDate":"2021-01-06T14:31:58Z","validated":true,"user":{"id":1935132,"rating":null,"username":"Exaltyluinor","avatar":"https://www.gravatar.com/avatar/fd4c2a1524ff8aeccf219d2593d064a9?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Exaltyluinor","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":154585,"parentId":16237,"lft":33,"rgt":34,"depth":3,"text":"pardon 2021\n","postDate":"2021-01-06T14:32:29Z","validated":true,"user":{"id":1935132,"rating":null,"username":"Exaltyluinor","avatar":"https://www.gravatar.com/avatar/fd4c2a1524ff8aeccf219d2593d064a9?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Exaltyluinor","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":167725,"parentId":15895,"lft":58,"rgt":59,"depth":2,"text":"Nn","postDate":"2021-03-12T23:42:53Z","validated":true,"user":{"id":1110789,"rating":null,"username":"sofianmerakechi221","avatar":"https://www.gravatar.com/avatar/f7824e7343ab83083e1b777247e74112?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"sofianmerakechi221","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":168394,"parentId":15895,"lft":60,"rgt":61,"depth":2,"text":"la saison 2 n'est pas au programme ce qui est bien dommage\n","postDate":"2021-03-16T14:01:15Z","validated":true,"user":{"id":1969995,"rating":null,"username":"jennifermoreau8640","avatar":"https://www.gravatar.com/avatar/7fe0c6facd96168188232f344b130af3?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"jennifermoreau8640","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":169782,"parentId":15895,"lft":62,"rgt":63,"depth":2,"text":"MARS 2021 TOUJOURS PAS DE S2","postDate":"2021-03-22T20:01:22Z","validated":true,"user":{"id":2097373,"rating":null,"username":"JoshGOD","avatar":"https://www.gravatar.com/avatar/1c577fdc82bb600f44d7e531575e776d?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"JoshGOD","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":179909,"parentId":16237,"lft":35,"rgt":36,"depth":3,"text":"on est en 2021 et il n'y a toujours pas de saison 2...\n","postDate":"2021-04-18T21:08:06Z","validated":true,"user":{"id":1685249,"rating":null,"username":"ELOÏSE_FCHR","avatar":"https://www.gravatar.com/avatar/f7fda90ee9faa52a4ff6efdea48556b9?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Eloïse","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":182003,"parentId":15895,"lft":64,"rgt":65,"depth":2,"text":"yo on est en 2021 et y'aura qu'un film t'attends pas à autre chose toutes mes condoléances frérot","postDate":"2021-04-24T23:37:56Z","validated":true,"user":{"id":1193869,"rating":null,"username":"Mehd1cament","avatar":"https://www.gravatar.com/avatar/743f0bc2c0949072f7a3c96a47e6ef0f?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Mehdicament","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch14_bg0_green0_188.jpg"},"comments":[]},{"id":190181,"parentId":15895,"lft":66,"rgt":67,"depth":2,"text":"Bonjour, en mai 2021 j'ai vu des rumeurs sur des forums comme quoi il y aurait une saison 2 mais elle n'est malheureusement toujours pas annoncé.","postDate":"2021-05-20T20:21:01Z","validated":true,"user":{"id":2278308,"rating":null,"username":"anakinsally","avatar":"https://www.gravatar.com/avatar/6ac27d7a2e4b7db32bc74f799a75afb5?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"anakin6036","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch4_bg0_green0_188.jpg"},"comments":[]},{"id":205068,"parentId":85838,"lft":26,"rgt":27,"depth":4,"text":"ici 2021 toujours rien.\n","postDate":"2021-07-11T15:57:15Z","validated":true,"user":{"id":2568382,"rating":null,"username":"Anonymous2568382","avatar":"https://www.gravatar.com/avatar/4caea572b990be70d4fcfac81d6c79bd?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Anonymous2568382-1","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":207787,"parentId":15895,"lft":68,"rgt":71,"depth":2,"text":"Apparemment, il est prévu qu'elle soit diffusé à un moment donné en 2021, mais la Covid n'arrange rien. Nous n'avons toujours pas de date précise. ","postDate":"2021-07-20T17:51:24Z","validated":true,"user":{"id":2322907,"rating":4,"username":"camilledobelmann","avatar":"https://www.gravatar.com/avatar/8ea32dc6bb48dcb1e76959e64fb87656?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":4,"username":"camilledobelmann","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":210724,"parentId":207787,"lft":69,"rgt":70,"depth":3,"text":"la covid na effectivement rien arranger mais le mangaka na jamais dit qu'il aller arrêter surtout avec la fin qu'il nous a donner il faut s'armer de patience bien que sa fait qlq année que je l'attend mais début 2022 ou 2021 il vas y'avoir une suite si tout se passe bien (si  le covid dégage aussi sa m'arrangerait) le mangaka avais dit une suite mais a ce moment la il y'a eu le covid et beaucoup d'anime on été retarder donc c'est pas impossible qu'il y'est une suite ","postDate":"2021-07-31T21:37:45Z","validated":true,"user":{"id":2457413,"rating":null,"username":"misterieu51","avatar":"https://www.gravatar.com/avatar/2bd189ba9a4814df052166e16c3cdfd5?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"misterieu51","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":215078,"parentId":15895,"lft":72,"rgt":77,"depth":2,"text":"Les gens a quand la suiiiiiiiite\n","postDate":"2021-08-19T22:16:42Z","validated":true,"user":{"id":754538,"rating":null,"username":"Pask13","avatar":"https://www.gravatar.com/avatar/8eb186c2489b3b331e3dff487777d929?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Pask13","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":221727,"parentId":215078,"lft":73,"rgt":76,"depth":3,"text":"[spoiler][/spoiler] fin 2021 normalement","postDate":"2021-09-13T08:45:41Z","validated":true,"user":{"id":2888505,"rating":null,"username":"LoydM12","avatar":"https://www.gravatar.com/avatar/f92ab8ccdfc90cbadf2a6481d56769b2?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"LoydM12","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":226105,"parentId":221727,"lft":74,"rgt":75,"depth":4,"text":"source?","postDate":"2021-09-29T18:30:01Z","validated":true,"user":{"id":676864,"rating":null,"username":"EcologieRepublicaine","avatar":"https://www.gravatar.com/avatar/b6cca561169fc765f2ab954449c2e19c?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"EcologieRepublicaine","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":229932,"parentId":76900,"lft":20,"rgt":21,"depth":4,"text":"2021 toujours pas de suite","postDate":"2021-10-16T21:24:09Z","validated":true,"user":{"id":2954107,"rating":null,"username":"majnight","avatar":"https://www.gravatar.com/avatar/5e4654d475bd5a62d1c06fdca26b16c8?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":2,"rating":null,"username":"Zey","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch2_bg13_green0_188.jpg"},"comments":[]},{"id":232487,"parentId":15895,"lft":78,"rgt":79,"depth":2,"text":"Désolé il n'y aura pas de suite :3 ","postDate":"2021-11-01T21:10:14Z","validated":true,"user":{"id":973684,"rating":null,"username":"Rasta-populos","avatar":"https://www.gravatar.com/avatar/0531da3ac0f3abd4fc06edfade924de4?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Julienvlh","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":244700,"parentId":15895,"lft":80,"rgt":83,"depth":2,"text":"[spoiler]on ai en 2022 et tjrs rien  ;-;[/spoiler]","postDate":"2022-01-21T12:36:24Z","validated":true,"user":{"id":2384457,"rating":null,"username":"imène_95","avatar":"https://www.gravatar.com/avatar/39ae1c718c9394144196eafe2157c218?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"imène_95","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch4_bg0_green0_188.jpg"},"comments":[]},{"id":245709,"parentId":15895,"lft":84,"rgt":87,"depth":2,"text":"je vais essayer de regarder pour vous\n","postDate":"2022-01-29T20:41:27Z","validated":true,"user":{"id":2565129,"rating":null,"username":"momobfn","avatar":"https://www.gravatar.com/avatar/091eb0fde748e554d478c8f8a1043268?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":3,"rating":null,"username":"AYOUB","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch14_bg11_green1_188.jpg"},"comments":[]},{"id":245723,"parentId":245709,"lft":85,"rgt":86,"depth":3,"text":"toujours rien de neuf en fin janvier 2022","postDate":"2022-01-29T22:27:57Z","validated":true,"user":{"id":280198,"rating":null,"username":"sasuk7","avatar":"https://www.gravatar.com/avatar/7ee3cb9af62ad8d0c9acd8781db70abc?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":2,"rating":null,"username":"invité","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":246900,"parentId":15895,"lft":88,"rgt":89,"depth":2,"text":"9 février 2022 et toujours aucune nouvelle...","postDate":"2022-02-09T14:31:05Z","validated":true,"user":{"id":2025541,"rating":null,"username":"Tangiorno","avatar":"https://www.gravatar.com/avatar/84f479a16e49483abd0b81f78db683a3?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Tangiorno","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":250382,"parentId":15895,"lft":90,"rgt":95,"depth":2,"text":"16/03/2022 et toujours rien malheureusement :/\n","postDate":"2022-03-16T17:42:10Z","validated":true,"user":{"id":2712635,"rating":null,"username":"N3cto","avatar":"https://www.gravatar.com/avatar/f6bdea7aee49d0ceda30c85eee2627ec?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":2,"rating":null,"username":"Gael","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch20_bg10_green0_188.jpg"},"comments":[]},{"id":266204,"parentId":250382,"lft":91,"rgt":94,"depth":3,"text":"6/08/2022 toujours pas de suite en vue","postDate":"2022-08-06T17:20:28Z","validated":true,"user":{"id":3475684,"rating":null,"username":"pr1cess94","avatar":"https://www.gravatar.com/avatar/3565e7de31f9fbde4766838ed327c7a1?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"Prudence","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch14_bg0_green0_188.jpg"},"comments":[]},{"id":273411,"parentId":266204,"lft":92,"rgt":93,"depth":4,"text":"Comment ça MADHOUSE n'a jamais fait de suite ? Et Overlord, No Guns Life, et Diamond no Ace ? Pour ne citer que ceux-là.","postDate":"2022-10-13T07:41:09Z","validated":true,"user":{"id":251259,"rating":null,"username":"moh2063","avatar":"https://www.gravatar.com/avatar/c3ae39548ad9bb24ba3b87e19903a2fb?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"moh2063","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch4_bg0_green0_188.jpg"},"comments":[]},{"id":274188,"parentId":244700,"lft":81,"rgt":82,"depth":3,"text":"ya aucun spoil mon reuf","postDate":"2022-10-20T21:23:09Z","validated":true,"user":{"id":541670,"rating":null,"username":"gdieu.gd","avatar":"https://www.gravatar.com/avatar/f837c053f8116aadd48b8dbf2347251d?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"gdieu.gd","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":279860,"parentId":15895,"lft":96,"rgt":97,"depth":2,"text":"Début 2023 rien je vois les mec 2017 je rigole, j'ai commencé l'anime 2020 c'est mon anime préféré, j'ai un seum incommensurable.","postDate":"2023-01-02T06:53:28Z","validated":true,"user":{"id":3701451,"rating":null,"username":"Keox88","avatar":"https://www.gravatar.com/avatar/0e6db9180f2da7c64fa70a7c804b962e?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Keox88","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":280762,"parentId":15895,"lft":98,"rgt":101,"depth":2,"text":"09/01/23 toujours aucune nouvelle ","postDate":"2023-01-09T20:32:49Z","validated":true,"user":{"id":3320787,"rating":null,"username":"speedmerguez ","avatar":"https://www.gravatar.com/avatar/4ef358853bcfa6335b9f0d27101db95c?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"speedmerguez ","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":292245,"parentId":76900,"lft":22,"rgt":23,"depth":4,"text":"☠️","postDate":"2023-06-17T04:58:07Z","validated":true,"user":{"id":1968511,"rating":null,"username":"colin_jesusrevient","avatar":"https://www.gravatar.com/avatar/1fddf0ace318d69081dd0a6324cb3dde?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Neutre7","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":294579,"parentId":280762,"lft":99,"rgt":100,"depth":3,"text":"27-07-2023 : On peut dire que c'est mort\n","postDate":"2023-07-27T18:07:50Z","validated":true,"user":{"id":2616584,"rating":null,"username":"jaromanacce2b ","avatar":"https://www.gravatar.com/avatar/1d3cf40a0a43fd0d45776ac9749f9795?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"jaromanacce2b","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":298744,"parentId":15895,"lft":102,"rgt":103,"depth":2,"text":"ICI 2023 toujours rien\n","postDate":"2023-10-15T18:34:42Z","validated":true,"user":{"id":3340434,"rating":null,"username":"Itachi69IQ","avatar":"https://www.gravatar.com/avatar/d6587fc0404958db393bed8b842b4e1f?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":4,"rating":null,"username":"Anton","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch1_bg1_green0_188.jpg"},"comments":[]},{"id":299804,"parentId":15895,"lft":104,"rgt":107,"depth":2,"text":"BAS il est déjà sortie ","postDate":"2023-11-09T10:35:53Z","validated":true,"user":{"id":2518581,"rating":null,"username":"johannanguyen","avatar":"https://www.gravatar.com/avatar/f91ec045dbd4ae5d121a718d0211938a?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":3,"rating":null,"username":"Invité","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch13_bg12_green0_188.jpg"},"comments":[]},{"id":302511,"parentId":299804,"lft":105,"rgt":106,"depth":3,"text":"07/01 /2024 toujours rien!","postDate":"2024-01-06T23:04:35Z","validated":true,"user":{"id":2900936,"rating":null,"username":"Wilouf","avatar":"https://www.gravatar.com/avatar/be4daefd21ffc9c137d842fe1d0b9b86?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"Wilkalibur70","avatar":"https://avatar.animationdigitalnetwork.fr/web/goblin1_bgxdb_green0_188.jpg"},"comments":[]}]}]},"dataUpdateCount":1,"dataUpdatedAt":1721906327683,"error":null,"errorUpdateCount":0,"errorUpdatedAt":0,"fetchFailureCount":0,"fetchFailureReason":null,"fetchMeta":null,"isInvalidated":false,"status":"success","fetchStatus":"idle"},"queryKey":["comments","/comment/show/315",{"order":"desc","limit":100,"offset":0}],"queryHash":"[\"comments\",\"/comment/show/315\",{\"limit\":100,\"offset\":0,\"order\":\"desc\"}]"},{"state":{"data":{"show":{"id":315,"title":"No Game No Life","type":"EPS","originalTitle":"No Game No Life","shortTitle":null,"reference":"ngnl_tv","age":"12+","languages":["vostf","vf"],"summary":"Sora et Shiro, frère et sœur passionnés de jeux vidéo et incroyablement doués, se sont élevés au rang de légende urbaine tant ils restaient invaincus, mais ils ne sont aux yeux du monde extérieur que des NEETs et des Hikikomoris. L’apparition de Teto, un jeune garçon se faisant appelé « Dieu », va changer le cours des choses.\nLoin du monde réel considéré comme un « jeu pourri », Teto entraîne nos deux héros dans un univers parallèle où la violence est proscrite et où tout conflit se règle par une partie de jeu.\nDes 16 peuples vivant là-bas, les « Humains » sont les plus faibles. Suite à de trop nombreuses parties perdues, leur terre et leur nombre sont presque réduits à néant. \nGrâce à leur talent, Sora et Shiro pourront-ils inverser la tendance et sauver les Humains ?","image":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/315-no-game-no-life","urlPath":"/video/315-no-game-no-life","episodeCount":12,"genres":["Game","Médieval-Fantastique","Moe","noitaminA","Sexy","Animation japonaise","Action","Aventure","Comédie","Ecchi","Fantastique","Seinen"],"copyright":"©Yuu Kamiya, PUBLISHED BY KADOKAWA CORPORATION MEDIAFACTORY/NO GAME NO LIFE PARTNERS","rating":4.9,"ratingsCount":2624,"commentsCount":173,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":true,"nextVideoReleaseDate":null,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2014","productionStudio":"Madhouse","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Atsuko Ishizuka"},{"role":"Scénariste","name":"Jukki Hanada"},{"role":"Compositeur","name":"Shinji Hosoe"},{"role":"Auteur","name":"Yû Kamiya"},{"role":"Character designer","name":"Kouji Oodate"}],"indexable":true,"microdata":{"@context":"http://schema.org","@type":"TVSeries","name":"No Game No Life","url":"https://animationdigitalnetwork.com/video/315-no-game-no-life","thumbnailUrl":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/affiche_175x250.jpg","isFamilyFriendly":true,"description":"Sora et Shiro, frère et sœur passionnés de jeux vidéo et incroyablement doués, se sont élevés au rang de légende urbaine tant ils restaient invaincus, mais ils ne sont aux yeux du monde extérieur que des NEETs et des Hikikomoris. L’apparition de Teto, un jeune garçon se faisant appelé « Dieu », va changer le cours des choses.\nLoin du monde réel considéré comme un « jeu pourri », Teto entraîne nos deux héros dans un univers parallèle où la violence est proscrite et où tout conflit se règle par une partie de jeu.\nDes 16 peuples vivant là-bas, les « Humains » sont les plus faibles. Suite à de trop nombreuses parties perdues, leur terre et leur nombre sont presque réduits à néant. \nGrâce à leur talent, Sora et Shiro pourront-ils inverser la tendance et sauver les Humains ?","genre":"Game, Médieval-Fantastique, Moe, noitaminA, Sexy, Animation japonaise, Action, Aventure, Comédie, Ecchi, Fantastique, Seinen","numberOfEpisodes":12,"datePublished":"2014","alternativeHeadline":"No Game No Life","countryOfOrigin":{"@type":"Country","name":"Japon"},"productionCompany":{"@type":"Organization","name":"Madhouse"},"potentialAction":{"@type":"ViewAction","target":[{"url":"https://animationdigitalnetwork.com/video/315-no-game-no-life","actionPlatform":"https://schema.org/DesktopWebPlatform","inLanguage":"fr"},{"url":"https://animationdigitalnetwork.com/video/315-no-game-no-life","actionPlatform":"https://schema.org/MobileWebPlatform","inLanguage":"fr"},{"url":"https://animationdigitalnetwork.com/video/315-no-game-no-life","actionPlatform":"https://schema.org/IOSPlatform","inLanguage":"fr"},{"url":"https://animationdigitalnetwork.com/video/315-no-game-no-life","actionPlatform":"https://schema.org/AndroidPlatform","inLanguage":"fr"}],"actionAccessibilityRequirement":{"@type":"ActionAccessSpecification","category":"noLoginRequired"}},"aggregateRating":{"@type":"AggregateRating","ratingValue":4.9,"ratingCount":2624},"startDate":"2014-04-11T13:30:00Z","author":{"@type":"Person","name":"Yû Kamiya"},"director":{"@type":"Person","name":"Atsuko Ishizuka"},"musicBy":{"@type":"Person","name":"Shinji Hosoe"}},"seo":{"title":"No Game No Life - streaming - VOSTFR et VF - ADN","description":"Découvrez en HD tous les épisodes de No Game No Life en streaming VOSTFR et VF disponibles sur Anime Digital Network. En 1 clic, accédez à l'intégralité des épisodes !.","downline":{"title":"No Game No Life : Jouer pour survivre","content":"Retrouvez sur Anime Digital Network l'anime No Game No Life, qui est l'adaptation du light novel du même nom de Yu Kamiya.\n\nDans cette série produite par le studio Madhouse, Sora et Shiro, deux joueurs hors pair, se retrouvent projetés dans un monde où tout est décidé par les jeux. Arriveront-ils à se faire une place dans ce monde particulier ?\n\nPour le savoir, regardez les épisodes de No Game No Life disponible en streaming VOSTFR sur ADN."}}}},"dataUpdateCount":1,"dataUpdatedAt":1721906327674,"error":null,"errorUpdateCount":0,"errorUpdatedAt":0,"fetchFailureCount":0,"fetchFailureReason":null,"fetchMeta":null,"isInvalidated":false,"status":"success","fetchStatus":"idle"},"queryKey":["show",{"showIdOrReference":315,"withSeo":true,"withMicrodata":true,"skipDistributionCheck":true}],"queryHash":"[\"show\",{\"showIdOrReference\":315,\"skipDistributionCheck\":true,\"withMicrodata\":true,\"withSeo\":true}]"},{"state":{"data":{"themes":[{"id":13714,"title":"isekai"},{"id":665,"title":"geeks"},{"id":13543,"title":"fantastique"},{"id":734,"title":"gags"},{"id":817,"title":"ados"},{"id":994,"title":"en duo"},{"id":660,"title":"créatures imaginaires"},{"id":758,"title":"relations fraternelles"},{"id":567,"title":"anime"},{"id":686,"title":"dessins animés"},{"id":858,"title":"mondes parallèles"},{"id":989,"title":"surdoués"},{"id":6705,"title":"seinen"}]},"dataUpdateCount":1,"dataUpdatedAt":1721906327710,"error":null,"errorUpdateCount":0,"errorUpdatedAt":0,"fetchFailureCount":0,"fetchFailureReason":null,"fetchMeta":null,"isInvalidated":false,"status":"success","fetchStatus":"idle"},"queryKey":["getThemes",{"showId":315}],"queryHash":"[\"getThemes\",{\"showId\":315}]"},{"state":{"data":{"shows":[{"id":568,"title":"No Game No Life 0","type":"MOV","originalTitle":"No Game No Life 0","shortTitle":"No Game No Life 0","reference":"ngnl_film","age":"12+","languages":["vostf","vf"],"summary":"Bienvenue dans l’ancien Disboard où les dix règles du jeu n’existaient pas encore. La guerre consume le monde, scinde les paradis, détruit les étoiles et menace même la race humaine. Au milieu de ce chaos, un jeune homme du nom de Riku essaye de mener l’humanité vers un lendemain auquel il croit fermement. Un jour, dans les ruines d’une cité Elfique, il trouve Schwi, une androïde « ex-machina » qui souhaite comprendre le cœur des Hommes. Leur rencontre va changer le cours de l’histoire…","image":"https://image.animationdigitalnetwork.fr/license/ngnl/film/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/ngnl/film/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/ngnl/film/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/ngnl/film/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/568-no-game-no-life-zero","urlPath":"/video/568-no-game-no-life-zero","episodeCount":1,"genres":["Animation japonaise","Action","Aventure","Drame","Fantastique","Science-Fiction","Seinen"],"copyright":"©Yuu Kamiya,PUBLISHED BY KADOKAWA CORPORATION /NO GAME NO LIFE ZERO PARTNERS","rating":4.9,"ratingsCount":872,"commentsCount":52,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":"Découvrez les origines de No Game No Life, près de 6 000 ans avant l’arrivée de Sora et Shiro !","firstReleaseYear":"2017","productionStudio":"Madhouse","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Atsuko Ishizuka"},{"role":"Scénariste","name":"Jukki Hanada"},{"role":"Compositeur","name":"Super Sweep"},{"role":"Auteur","name":"Yû Kamiya"},{"role":"Character designer","name":"Satoshi Tasaki"}],"nextVideoReleaseDate":null,"indexable":true},{"id":529,"title":"Overlord III","type":"EPS","originalTitle":"??????? III","shortTitle":"Overlord III","reference":"overlord_tv3","age":"12+","languages":["vostf","vf"],"summary":"Les aventures de Ainz Ooal Gown continuent sur les plaines d’E-Rantel. En tant que grand souverain de Nazarick, Ainz Ooal Gown a étendu son emprise dans les régions proches en contrôlant les autochtones et la pègre locale. \n\nToutefois, ses récents exploits attirent l’attention des puissants de ce monde. Que ce soit en tant que Ainz Ooal Gown, le mystérieux mage, ou Momon, le héros des ténèbres, le seigneur de Nazarick va devoir tout faire pour résoudre cette situation…\n","image":"https://image.animationdigitalnetwork.fr/license/overlord/tv3/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/overlord/tv3/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/overlord/tv3/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/overlord/tv3/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/529-overlord-saison-3","urlPath":"/video/529-overlord-saison-3","episodeCount":13,"genres":["Dark-Fantasy","Médieval-Fantastique","Isekai","Guerre","Jeu","Monde virtuel","Politique","Animation japonaise","Action","Aventure","Seinen"],"copyright":"© Kugane Maruyama,PUBLISHED BY KADOKAWA CORPORATION/OVERLORD3 PARTNERS","rating":4.9,"ratingsCount":5177,"commentsCount":59,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":true,"available":true,"download":true,"basedOn":"Light Novel","tagline":"Retrouvez la suite des aventures de Ainz Ooal Gown dans cette troisième saison !","firstReleaseYear":"2018","productionStudio":"Madhouse","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Naoyuki Itô"},{"role":"Scénariste","name":"Yukie Sugawara"},{"role":"Compositeur","name":"Myth \u0026 Roid"},{"role":"Auteur","name":"Kugane Maruyama"},{"role":"Character designer","name":"Takahiro Yoshimatsu"}],"nextVideoReleaseDate":null,"indexable":true},{"id":909,"title":"Overlord IV","type":"EPS","originalTitle":" ???????IV","shortTitle":"Overlord IV","reference":"overlord_tv4","age":"12+","languages":["vostf","vf"],"summary":"Ainz Ooal Gown, ayant assis sa domination, a pour projet de fonder un royaume où toutes les races pourraient cohabiter en harmonie. Cependant, cette montée en puissance est mal perçue par les autres dirigeants qui surveillent de près l’évolution de Nazarick. Ainz Ooal Gown parviendra-t-il à maintenir son autorité, en dépit des complots fomentés envers sa nation&thinsp;?","image":"https://image.animationdigitalnetwork.fr/license/overlord/tv4/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/overlord/tv4/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/overlord/tv4/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/overlord/tv4/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/909-overlord-saison-4","urlPath":"/video/909-overlord-saison-4","episodeCount":13,"genres":["Dark-Fantasy","Médieval-Fantastique","Isekai","Guerre","Jeu","Monde virtuel","Politique","Animation japonaise","Action","Aventure","Seinen"],"copyright":"©Kugane Maruyama, PUBLISHED BY KADOWAWA CORPORATION/OVERLORD4PARTNERS","rating":4.9,"ratingsCount":2491,"commentsCount":87,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":true,"available":true,"download":false,"basedOn":"Light Novel","tagline":"Retrouvez la suite des aventures de Ainz Ooal Gown dans cette quatrième saison !","firstReleaseYear":"2022","productionStudio":"Madhouse","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Naoyuki Ito"},{"role":"Auteur","name":"Kugane Maruyama"},{"role":"Scénariste","name":"Yukie Sugawara"},{"role":"Character designer original","name":"so-bin"},{"role":"Character designer","name":"Satoshi Tasaki"}],"nextVideoReleaseDate":null,"indexable":true},{"id":370,"title":"Overlord","type":"EPS","originalTitle":"Overlord","shortTitle":"Overlord","reference":"overlord_tv","age":"12+","languages":["vostf","vf"],"summary":"Nous sommes en l’an 2138. Yggdrasil, le célèbre MMORPG à succès est sur le point de fermer. Momonga, le fondateur de la guilde dont la renommée n’est plus à faire attend seul l’arrêt du jeu. Cependant, l’heure de la fermeture passée, Momonga ne se déconnecte pas et les personnages non jouables se retrouvent peu à peu dotés d’une conscience… Un nouveau monde est sur le point de faire son apparition.","image":"https://image.animationdigitalnetwork.fr/license/overlord/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/overlord/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/overlord/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/overlord/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/370-overlord","urlPath":"/video/370-overlord","episodeCount":13,"genres":["Dark-Fantasy","Médieval-Fantastique","Isekai","Guerre","Jeu","Monde virtuel","Politique","Animation japonaise","Action","Aventure","Seinen"],"copyright":"©Kugane Maruyama,PUBLISHED BY KADOKAWA CORPORATION/OVERLORD PARTNERS","rating":4.9,"ratingsCount":3301,"commentsCount":43,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":true,"available":true,"download":false,"basedOn":"Light Novel","tagline":null,"firstReleaseYear":"2015","productionStudio":"Madhouse","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Naoyuki Itô"},{"role":"Scénariste","name":"Yukie Sugawara"},{"role":"Compositeur","name":"Shûji Katayama"},{"role":"Auteur","name":"Kugane Maruyama"},{"role":"Character designer","name":"Takahiro Yoshimatsu"}],"nextVideoReleaseDate":null,"indexable":true},{"id":505,"title":"Overlord II","type":"EPS","originalTitle":"???????? / ??????? 2nd???? / ??????? 2nd season","shortTitle":"Overlord II","reference":"overlord_tv2","age":"12+","languages":["vostf","vf"],"summary":"Depuis son arrivée dans un nouveau monde, Ainz Ooal Gown prend très au sérieux son rôle de dirigeant du grand tombeau de Nazarick. Il bâtit également une solide réputation à son alter-ego Momon en tant que plus fort aventurier d’E-Rantel, tout en recueillant des fonds et des informations. Très vite, il se lance dans les quêtes les plus périlleuses dont seuls les aventuriers de classe Adamantite peuvent survivre. Après la défaite d’un Basilic, Ainz décide de retourner à Nazarick et demande à Albedo un rapport complet de la situation…","image":"https://image.animationdigitalnetwork.fr/license/overlord/tv2/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/overlord/tv2/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/overlord/tv2/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/overlord/tv2/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/505-overlord-saison-2","urlPath":"/video/505-overlord-saison-2","episodeCount":13,"genres":["Dark-Fantasy","Médieval-Fantastique","Isekai","Guerre","Jeu","Monde virtuel","Politique","Animation japonaise","Action","Aventure","Seinen"],"copyright":"© Kugane Maruyama,PUBLISHED BY KADOKAWA CORPORATION/OVERLORD2 PARTNERS","rating":4.9,"ratingsCount":3272,"commentsCount":44,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":true,"available":true,"download":false,"basedOn":"Light Novel","tagline":"Retrouvez la suite des aventures de Ainz Ooal Gown dans cette deuxième saison !","firstReleaseYear":"2018","productionStudio":"Madhouse","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Naoyuki Itô"},{"role":"Scénariste","name":"Yukie Sugawara"},{"role":"Compositeur","name":"OxT"},{"role":"Auteur","name":"Kugane Maruyama"},{"role":"Character designer","name":"Takahiro Yoshimatsu"}],"nextVideoReleaseDate":null,"indexable":true},{"id":442,"title":"Sword Art Online","type":"EPS","originalTitle":"ソードアート・オンライン","shortTitle":"Sword Art Online","reference":"swordartonline_tv","age":"10+","languages":["vostf","vf"],"summary":"Sword&nbsp;Art Online, un MMORPG dont la bêta déchaîne les passions, offre l’opportunité à dix mille privilégiés de s’immerger dans son univers grâce à un casque de réalité virtuelle. Kirito, 14&nbsp;ans, se démarque de ses pairs en déjouant les rouages du jeu. Mais lorsqu’une mystérieuse entité annonce aux joueurs qu’ils ne pourront pas se déconnecter avant d’atteindre le niveau&nbsp;100, la panique s’immisce progressivement. Une seule échappatoire possible&nbsp;: survivre ou mourir.","image":"https://image.animationdigitalnetwork.fr/license/swordartonline/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/swordartonline/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/swordartonline/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/swordartonline/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/442-sword-art-online","urlPath":"/video/442-sword-art-online","episodeCount":49,"genres":["Animation japonaise","Action","Drame","Fantastique","Romance","Isekai"],"copyright":"©REKI KAWAHARA/ASCII MEDIA WORKS/SAO Project.","rating":5,"ratingsCount":331,"commentsCount":19,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":null,"firstReleaseYear":"2012","productionStudio":"A-1 Pictures","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Tomohiko Ito"},{"role":"Scénariste","name":"Yukie Sugawara"},{"role":"Auteur","name":"Reki Kawahara"},{"role":"Character designer original","name":"abec"},{"role":"Compositeur","name":"Yuki Kajiura"},{"role":"Directeur artistique","name":"Yusuke Takeda"}],"nextVideoReleaseDate":null,"indexable":true},{"id":670,"title":"To Love-Ru","type":"EPS","originalTitle":"To Love-Ru","shortTitle":null,"reference":"toloveru_tv","age":"12+","languages":["vostf"],"summary":"Rito Yûki, un banal lycéen de quinze ans, est amoureux depuis longtemps de Haruna Sairenji, une jeune fille de sa classe. Malheureusement, Rito n'a jamais eu le courage de lui parler.","image":"https://image.animationdigitalnetwork.fr/license/toloveru/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/toloveru/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/toloveru/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/toloveru/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/670-to-love-ru","urlPath":"/video/670-to-love-ru","episodeCount":26,"genres":["Animation japonaise","Comédie","Fantastique"],"copyright":"©Kentaro Yabuki, Saki Hasemi/ SHUEISHA, Toloveru Project","rating":4.7,"ratingsCount":404,"commentsCount":22,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":true,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2008","productionStudio":"Xebec","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Takao Kato"},{"role":"Auteur","name":"Saki Hasemi"},{"role":"Character designer","name":"Yûichi Oka"},{"role":"Scénariste","name":"Akatsuki Yamatoya"},{"role":"Compositeur","name":"Takeshi Watanabe"}],"nextVideoReleaseDate":null,"indexable":true},{"id":217,"title":"To Love-Ru - Darkness","type":"EPS","originalTitle":"To Love-Ru: Trouble - Darkness","shortTitle":null,"reference":"toloveru_tv3","age":"16+","languages":["vostf"],"summary":"Le fiasco de la déclaration d’amour de Rito n’en est peut-être pas un finalement… Car lorsque Lala explique à Momo qu’elle veut que Rito l’épouse tout en épousant Haruna, sa petite soeur à une révélation. Elle doit aider Rito à devenir un homme et à se constituer un harem digne du souverain de Deviluke ! Mais elle ignore qu’une ombre plane au-dessus de Rito et ses amies, car l’ancienne “famille” d’Ombre Dorée se rappelle à son bon souvenir et n’apprécie pas particulièrement la nouvelle vie de l’ancienne tueuse à gages...","image":"https://image.animationdigitalnetwork.fr/license/toloveru/tv3/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/toloveru/tv3/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/toloveru/tv3/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/toloveru/tv3/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/217-to-love-darkness","urlPath":"/video/217-to-love-darkness","episodeCount":26,"genres":["Animation japonaise","Comédie","Ecchi","Romance"],"copyright":"©Kentaro Yabuki,Saki Hasemi／SHUEISHA,Toloveru darkness Project","rating":4.9,"ratingsCount":238,"commentsCount":17,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":"To Love Darkness","firstReleaseYear":"2012","productionStudio":"Xebec","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Atsushi Ootsuki"},{"role":"Mangaka","name":"Saki Hasemi, Kentaro Yabuki"},{"role":"Character designer original","name":"Kentaro Yabuki"},{"role":"Character designer","name":"Yûichi Oka"},{"role":"Scénariste","name":"Atsushi Ootsuki"},{"role":"Compositeur","name":"Takeshi Watanabe"}],"nextVideoReleaseDate":null,"indexable":true},{"id":973,"title":"The Eminence in Shadow","type":"EPS","originalTitle":"Kage no Jitsuryokusha ni Naritakute","shortTitle":"The Eminence in Shadow","reference":"eminenceshadow_tv","age":"16+","languages":["vostf","vf"],"summary":"Sous son apparence de lycéen sans histoire, Cid Kagenou aspire pour autant à devenir celui qui tirera les ficelles au sein des plus grandes organisations secrètes. Malheureusement, un tragique accident de la route l’empêche de réaliser son dessein. Pourtant, à son réveil, il découvre qu’il s’est réincarné dans la peau d’un homme dirigeant une véritable société secrète, Shadow Garden, qui lutte contre le culte de Diabolos. Bien décidé à prendre son rôle au sérieux, il est fin prêt à recruter des membres afin mettre à profit son ingéniosité à l'encontre des forces du mal.","image":"https://image.animationdigitalnetwork.fr/license/eminenceshadow/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/eminenceshadow/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/eminenceshadow/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/eminenceshadow/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/973-the-eminence-in-shadow","urlPath":"/video/973-the-eminence-in-shadow","episodeCount":32,"genres":["Isekai","Animation japonaise","Action","Aventure","Ecchi","Fantastique","Shônen"],"copyright":"©Daisuke Aizawa,KADOKAWA/Shadow Garden","rating":4.9,"ratingsCount":5404,"commentsCount":120,"qualities":["fhd","hd","sd"],"distributions":"fr,de","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":null,"firstReleaseYear":"2022","productionStudio":"Nexus","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Kazuya Nakanishi"},{"role":"Mangaka","name":"Daisuke Aizawa"},{"role":"Character designer original","name":"Tozai"},{"role":"Character designer","name":"Makoto Iino"},{"role":"Compositeur","name":"Kenichiro Suehiro"},{"role":"Directeur artistique","name":"Lee Beom Seon"}],"nextVideoReleaseDate":null,"indexable":true},{"id":1122,"title":"My Instant Death Ability Is So Overpowered, No One in This Other World Stands a Chance Against Me!","type":"EPS","originalTitle":"即死チートが最強すぎて、異世界のやつらがまるで相手にならないんですが。","shortTitle":"My Instant Death Ability Is So Overpowered, No One in This Other World Stands a Chance Against Me!","reference":"myinstantdeathability_tv","age":"12+","languages":["vostf"],"summary":"Lors d’un voyage scolaire, des lycéens sont soudainement propulsés dans un monde parallèle, où chacun se voit offrir par un « sage » énigmatique un pouvoir surpuissant. Tous, hormis Tomochika et Takatô qui, ayant été jugés incapables, ont lâchement été abandonnés et laissés comme appât pour distraire le dragon les ayant attaqués. À la merci de tous les dangers, le jeune homme se révèle alors doté d’une capacité dépassant toutes les limites de cet univers. Si bien que ce dernier éveille la curiosité du gouvernement, déterminé à s’en emparer par tous les moyens…","image":"https://image.animationdigitalnetwork.fr/license/myinstantdeathability/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/myinstantdeathability/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/myinstantdeathability/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/myinstantdeathability/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/1122-my-instant-death-ability-is-so-overpowered-no-one-in-this-other-world-stands-a-chance-against-me","urlPath":"/video/1122-my-instant-death-ability-is-so-overpowered-no-one-in-this-other-world-stands-a-chance-against-me","episodeCount":12,"genres":["Isekai","Animation japonaise","Action","Aventure","Comédie","Fantastique"],"copyright":"©Tsuyoshi Fujitaka/ESE/ My Instant Death Ability is So Overpowered","rating":4.4,"ratingsCount":852,"commentsCount":9,"qualities":["fhd","hd","sd"],"distributions":"fr,de","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":"Un pouvoir transcendant toutes les limites de ce monde ? Un isekai à découvrir dès maintenant !","firstReleaseYear":"2024","productionStudio":"Okuruto Noboru","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Masakazu Hishida"},{"role":"Scénariste","name":"Masakazu Hishida"},{"role":"Auteur","name":"Tsuyoshi Fujitaka"},{"role":"Character designer original","name":"Chisato Naruse"},{"role":"Directeur artistique","name":"Scott Macdonald"},{"role":"Directeur de la photographie","name":"Yujirô Yamane"}],"nextVideoReleaseDate":null,"indexable":true}]},"dataUpdateCount":1,"dataUpdatedAt":1721906327708,"error":null,"errorUpdateCount":0,"errorUpdatedAt":0,"fetchFailureCount":0,"fetchFailureReason":null,"fetchMeta":null,"isInvalidated":false,"status":"success","fetchStatus":"idle"},"queryKey":["getRelatedShow",{"showId":315}],"queryHash":"[\"getRelatedShow\",{\"showId\":315}]"},{"state":{"data":{"pairs":[{"title":"Fictions fantastiques avec des gags","shows":[{"id":398,"title":"Undefeated Bahamut Chronicles","type":"EPS","originalTitle":"Undefeated Bahamut Chronicles","shortTitle":null,"reference":"saibahamut_tv","age":"12+","languages":["vostf"],"summary":"Suite au coup d’État qu’a connu l’empire d’Arcadia, Lux, un ancien prince, a été condamné par le nouveau royaume à accomplir les bases besognes du peuple d’Atismata en échange de sa grâce. \n\nUn jour, par un mauvais concours de circonstances, il passe à travers un toit et se retrouve dans la salle de bain d’une école pour filles plutôt spéciale...\n","image":"https://image.animationdigitalnetwork.fr/license/saibahamut/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/saibahamut/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/saibahamut/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/saibahamut/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/398-undefeated-bahamut-chronicles","urlPath":"/video/398-undefeated-bahamut-chronicles","episodeCount":12,"genres":["Sexy","Action","Comédie","Fantastique","Romance","Shônen"],"copyright":"©Senri Akatsuki-SB Creative Corp./Undefeated Bahamut Partners","rating":4.6,"ratingsCount":508,"commentsCount":10,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":null,"firstReleaseYear":"2015","productionStudio":"Lerche","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Masaomi Ando"},{"role":"Scénariste","name":"Yuuko Kakihara"},{"role":"Compositeur","name":"Akito Matsuda"},{"role":"Character designer","name":"Keiko Kurosawa"}],"nextVideoReleaseDate":null,"indexable":true},{"id":964,"title":"Immoral Guild","type":"EPS","originalTitle":"Futoku no Guild","shortTitle":"Immoral Guild","reference":"immoralguild_tv","age":"18+","languages":["vostf"],"summary":"Bien que Kikuru Madan soit le meilleur chasseur de monstres de la guilde, ce dernier, las de cette vie intrépide et sans repos, souhaite profiter comme il se doit de sa jeunesse. Mais poser sa démission n'est pas chose aisée : s'il souhaite partir, il devra accomplir avant une dernière mission : former Hitamu Kyan afin qu'elle lui succède. Mais une ribambelle de jeunes femmes, plus charmantes les unes que les autres, se présentent à lui, fin prêtes à s'améliorer. Malheureusement Kikuru va devoir faire preuve d'une patience infinie s'il souhaite parfaire leur apprentissage…","image":"https://image.animationdigitalnetwork.fr/license/immoralguild/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/immoralguild/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/immoralguild/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/immoralguild/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/964-immoral-guild","urlPath":"/video/964-immoral-guild","episodeCount":12,"genres":["Fantasy","Harem","Monstres","Animation japonaise","Action","Aventure","Comédie","Ecchi","Fantastique"],"copyright":"©Taichi Kawazoe/ SQUARE ENIX, Immoral Guild PARTNERS","rating":3.9,"ratingsCount":119,"commentsCount":10,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2022","productionStudio":"TNK","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Takuya Asaoka"},{"role":"Mangaka","name":"Taichi Kawazoe"},{"role":"Directeur artistique","name":"Satoru Hirayanagi"},{"role":"Directeur de la photographie","name":"Takuya Ogata"},{"role":"Character designer","name":"Hiraku Kaneko"}],"nextVideoReleaseDate":null,"indexable":true},{"id":670,"title":"To Love-Ru","type":"EPS","originalTitle":"To Love-Ru","shortTitle":null,"reference":"toloveru_tv","age":"12+","languages":["vostf"],"summary":"Rito Yûki, un banal lycéen de quinze ans, est amoureux depuis longtemps de Haruna Sairenji, une jeune fille de sa classe. Malheureusement, Rito n'a jamais eu le courage de lui parler.","image":"https://image.animationdigitalnetwork.fr/license/toloveru/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/toloveru/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/toloveru/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/toloveru/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/670-to-love-ru","urlPath":"/video/670-to-love-ru","episodeCount":26,"genres":["Animation japonaise","Comédie","Fantastique"],"copyright":"©Kentaro Yabuki, Saki Hasemi/ SHUEISHA, Toloveru Project","rating":4.7,"ratingsCount":404,"commentsCount":22,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":true,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2008","productionStudio":"Xebec","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Takao Kato"},{"role":"Auteur","name":"Saki Hasemi"},{"role":"Character designer","name":"Yûichi Oka"},{"role":"Scénariste","name":"Akatsuki Yamatoya"},{"role":"Compositeur","name":"Takeshi Watanabe"}],"nextVideoReleaseDate":null,"indexable":true},{"id":684,"title":"Motto To Love-Ru","type":"EPS","originalTitle":"Motto To Love-Ru -Trouble-","shortTitle":"Motto To Love-Ru - Saison 2","reference":"toloveru_tv2","age":"12+","languages":["vostf"],"summary":"La deuxième saison des aventures romantiques de Rito, Lala, Haruna, Mikan, Ombre et des autres !","image":"https://image.animationdigitalnetwork.fr/license/toloveru/tv2/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/toloveru/tv2/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/toloveru/tv2/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/toloveru/tv2/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/684-motto-to-love-ru-saison-2","urlPath":"/video/684-motto-to-love-ru-saison-2","episodeCount":12,"genres":["Animation japonaise","Comédie","Ecchi","Fan service","Fantastique","Romance"],"copyright":"©KENTARO YABUKI, SAKI HASEMI/SHUEISHA, MOTTOTORABURU COMMITTEE","rating":4.9,"ratingsCount":113,"commentsCount":9,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2010","productionStudio":"XEBEC","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Atsushi Ootsuki"},{"role":"Scénariste","name":"Yasunori Yamada"},{"role":"Character designer","name":"Yûichi Oka"},{"role":"Mangaka","name":"Kentaro Yabuki, Saki Hasemi"},{"role":"Compositeur","name":"Takeshi Watanabe"},{"role":"Directeur de la photographie","name":"Yuki Kudo"}],"nextVideoReleaseDate":null,"indexable":true},{"id":699,"title":"High School DxD","type":"EPS","originalTitle":"High School DxD","shortTitle":"High School DxD","reference":"dxd_tv","age":"16+","languages":["vostf"],"summary":"Issei Hyôdô est un lycéen inscrit à l’académie Kuô, un établissement qui n’accueillait que des filles jusqu’à récemment. Bien que la gent féminine constitue l’écrasante majorité de ce lieu d’études, Issei se désespère de n’avoir toujours pas de petite amie. C’est alors qu’il fait la connaissance de Yûma, qui va lui demander de sortir avec lui...","image":"https://image.animationdigitalnetwork.fr/license/dxd/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/dxd/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/dxd/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/dxd/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/699-high-school-dxd","urlPath":"/video/699-high-school-dxd","episodeCount":12,"genres":["Animation japonaise","Action","Comédie","Ecchi","Fan service","Fantastique","Romance","Science-Fiction"],"copyright":"©2012 Ichiei Ishibumi-Miyama-ZERO/PUBLISHED BY KADOKAWA CORPORATION FUJIMISHOBO/HighschoolDD PARTNERS","rating":4.9,"ratingsCount":653,"commentsCount":52,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":true,"available":true,"download":false,"basedOn":"Light Novel","tagline":null,"firstReleaseYear":"2012","productionStudio":"TNK","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Tetsuya Yanagisawa"},{"role":"Auteur","name":"Ichiei Ishibumi"},{"role":"Scénariste","name":"Takao Yoshioka"},{"role":"Character designer original","name":"Miyama-Zero"},{"role":"Character designer","name":"Junji Gotô"},{"role":"Compositeur","name":"Ryosuke Nakanishi"}],"nextVideoReleaseDate":null,"indexable":true},{"id":977,"title":"Immoral Guild (version non censurée)","type":"EPS","originalTitle":"Futoku no Guild","shortTitle":"Immoral Guild","reference":"immoralguildnc_tv","age":"18+","languages":["vostf"],"summary":"Bien que Kikuru Madan soit le meilleur chasseur de monstres de la guilde, ce dernier, las de cette vie intrépide et sans repos, souhaite profiter comme il se doit de sa jeunesse. Mais poser sa démission n'est pas chose aisée : s'il souhaite partir, il devra accomplir avant une dernière mission : former Hitamu Kyan afin qu'elle lui succède. Mais une ribambelle de jeunes femmes, plus charmantes les unes que les autres, se présentent à lui, fin prêtes à s'améliorer. Malheureusement Kikuru va devoir faire preuve d'une patience infinie s'il souhaite parfaire leur apprentissage…","image":"https://image.animationdigitalnetwork.fr/license/immoralguildnc/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/immoralguildnc/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/immoralguildnc/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/immoralguildnc/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/977-immoral-guild-version-non-censuree","urlPath":"/video/977-immoral-guild-version-non-censuree","episodeCount":12,"genres":["Fantasy","Harem","Monstres","Animation japonaise","Action","Aventure","Comédie","Ecchi","Fantastique"],"copyright":"©Taichi Kawazoe/ SQUARE ENIX, Immoral Guild PARTNERS","rating":4.4,"ratingsCount":512,"commentsCount":17,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2022","productionStudio":"TNK","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Takuya Asaoka"},{"role":"Mangaka","name":"Taichi Kawazoe"},{"role":"Directeur artistique","name":"Satoru Hirayanagi"},{"role":"Directeur de la photographie","name":"Takuya Ogata"},{"role":"Character designer","name":"Hiraku Kaneko"}],"nextVideoReleaseDate":null,"indexable":true},{"id":382,"title":"Lance N' Masques","type":"EPS","originalTitle":"Lance N' Masques","shortTitle":"LNM","reference":"lnm_tv","age":"10+","languages":["vostf"],"summary":"Yôtarô Hanafusa est un jeune homme du XXIe siècle, descendant d'un ancien ordre de chevaliers, Les Chevaliers du Monde. Lorsqu'il se bat sous l’identité du mystérieux Knight Lancer, il cache aussi son visage sous un masque. Il rencontre un jour, une  petite fille, Makio Kidôin, et découvrant qu'elle vit seule, il décide de la protéger.","image":"https://image.animationdigitalnetwork.fr/license/lnm/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/lnm/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/lnm/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/lnm/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/382-lance-n-masques","urlPath":"/video/382-lance-n-masques","episodeCount":12,"genres":["Animation japonaise","Action","Ecchi","Shônen","Fantastique","Tranches de vie"],"copyright":"©Hideaki Koyasu/Pony Canyon, ProjectLNM","rating":4.4,"ratingsCount":281,"commentsCount":4,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":null,"firstReleaseYear":"2015","productionStudio":"Studio Gokumi","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Kyouhei Ishiguro"},{"role":"Auteur","name":"Hideaki Koyasu"},{"role":"Scénariste","name":"Hideaki Koyasu"},{"role":"Character designer original","name":"Shino"},{"role":"Character designer","name":"Kenji Ota"},{"role":"Directeur artistique","name":"Hiromichi Itô"}],"nextVideoReleaseDate":null,"indexable":true},{"id":463,"title":"Clockwork Planet","type":"EPS","originalTitle":"ClockWork Planet","shortTitle":"ClockWork Planet","reference":"clockwork_tv","age":"12+","languages":["vostf","vf"],"summary":"Il y a environ mille ans, la Terre était condamnée à embrasser sa fin. Une mystérieuse personne reproduisit et recréa tout ce qui existait sur Terre avec d’innombrables mécanismes avant ce jour final, ce qui permit finalement aux êtres humains de survivre. Un jour, une boîte tomba soudainement dans l’appartement de Naoto Miura, un garçon qui possède un certain talent concernant les méchanismes. Dans la boîte, il y avait un automate féminin nommé RyuZU. La rencontre entre Naoto et RyuZU amorce le mouvement des roues de la destinée…","image":"https://image.animationdigitalnetwork.fr/license/clockwork/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/clockwork/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/clockwork/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/clockwork/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/463-clockwork-planet","urlPath":"/video/463-clockwork-planet","episodeCount":12,"genres":["Animation japonaise","Action","Science-Fiction","Shônen"],"copyright":"©Yuu Kamiya,Tsubaki Himana,KODANSHA/CLOCKWORK PLANET Production Committee. All Rights Reserved.  \n©YTK/CP","rating":4.7,"ratingsCount":806,"commentsCount":6,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":null,"firstReleaseYear":"2017","productionStudio":"Xebec","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Tsuyoshi Nagasawa"},{"role":"Scénariste","name":"Kenji Sugihara"},{"role":"Compositeur","name":"Shû anematsu"},{"role":"Compositeur","name":"Hanae Nakamura"},{"role":"Character designer","name":"Shuichi Shimamura"},{"role":"Auteur","name":"Yû Kamiya"}],"nextVideoReleaseDate":null,"indexable":true},{"id":434,"title":"Flip Flappers","type":"EPS","originalTitle":"FLIP FLAPPERS","shortTitle":null,"reference":"flipflap_tv","age":"12+","languages":["vostf"],"summary":"“Pure Illusion” est une dimension qui contient un mystérieux Crystal appelé « Eclat de Mimi ». Ce Crystal permettrait de réaliser n’importe quel vœu… Papika et Cocona sont deux adolescentes dont la vie a changé, le jour où elles se sont rencontrées et retrouvées dans la dimension « Pure Illusion ». Et dès qu’elles sont en danger, le crystal scintille et elles se métamorphosent en « Magical Girls » ","image":"https://image.animationdigitalnetwork.fr/license/flipflap/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/flipflap/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/flipflap/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/flipflap/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/434-flip-flappers","urlPath":"/video/434-flip-flappers","episodeCount":13,"genres":["Animation japonaise","Aventure","Comédie","Drame","Fantastique","Science-Fiction","Scolaire"],"copyright":"©FliFla Project\n","rating":4.8,"ratingsCount":246,"commentsCount":1,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Oeuvre Originale","tagline":null,"firstReleaseYear":"2016","productionStudio":"Studio 3Hz","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Kiyotaka Oshiyama"},{"role":"Scénariste","name":"Yuniko Ayana"},{"role":"Compositeur","name":"TO-MAS"},{"role":"Auteur","name":"Iryûjonisuto Pyua"},{"role":"Character designer","name":"Takashi Kojima"}],"nextVideoReleaseDate":null,"indexable":true},{"id":709,"title":"Full Dive : L'Ultime RPG est encore plus foireux que la réalité !","type":"EPS","originalTitle":"Kyuukyoku Shinka Shita Full Dive RPG ga Genjitsu Yori mo Kuso Game Dattara","shortTitle":"Full Dive","reference":"fulldiverpg_tv","age":"12+","languages":["vostf"],"summary":"Hiroshi a passé une journée pourrie, et il est bien décidé à acheter le nouvel opus de sa série favorite de MMORPG en réalité virtuelle. Malheureusement, tout ne se passe pas comme prévu, et il se retrouve avec un jeu rétro... mais pourtant bien avancé !","image":"https://image.animationdigitalnetwork.fr/license/fulldiverpg/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/fulldiverpg/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/fulldiverpg/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/fulldiverpg/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/709-full-dive-l-ultime-rpg","urlPath":"/video/709-full-dive-l-ultime-rpg","episodeCount":12,"genres":["Animation japonaise","Action","Comédie","Ecchi","Romance"],"copyright":"©Light Tuchiki, PUBLISHED BY KADOKAWA CORPORATION/Ultimate Evolution PARTNERS","rating":4.5,"ratingsCount":1148,"commentsCount":65,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":true,"available":true,"download":false,"basedOn":"Light Novel","tagline":null,"firstReleaseYear":"2021","productionStudio":"Engi","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Kazuya Miura"},{"role":"Auteur","name":"Light Tuchihi"},{"role":"Character designer original","name":"Youta"},{"role":"Scénariste","name":"Kenta Ihara"},{"role":"Character designer","name":"Kevin Yuta Kenmotsu "}],"nextVideoReleaseDate":null,"indexable":true}]},{"title":"Avec des créatures imaginaires et des ados","shows":[{"id":652,"title":"Amagi Brilliant Park","type":"EPS","originalTitle":"Amagi Brilliant Park","shortTitle":"Amagi Brilliant Park","reference":"amagi_tv","age":"12+","languages":["vostf"],"summary":"Seiya Kanie est élève en première au lycée d'Amagi. Une nouvelle élève, Isuzu Sento, l'emmène dans un parc d'attractions vétuste et lui révèle ses intentions : elle souhaite qu'il en devienne le nouveau directeur avec un objectif, le sauver de la faillite avant le 31 juillet. C'est une tâche dantesque qui attend Seiya, car les attractions tombent en ruine et les employés du parc forment un véritable club de bras cassés, entre la mascotte qui boxe les visiteurs, celle qui harcèle tout ce qui ressemble à une femme ou la chanteuse qui chante faux.","image":"https://image.animationdigitalnetwork.fr/license/amagi/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/amagi/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/amagi/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/amagi/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/652-amagi-brilliant-park","urlPath":"/video/652-amagi-brilliant-park","episodeCount":14,"genres":["Animation japonaise","Comédie","Ecchi","Fan service","Fantastique"],"copyright":"©Shouji Gatou • Yuka Nakajima/Amaburi Restoration Committee","rating":4.6,"ratingsCount":334,"commentsCount":10,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":null,"firstReleaseYear":"2014","productionStudio":"Kyoto Animation","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Yasuhiro Takemoto"},{"role":"Auteur","name":"Shoji Gatoh"},{"role":"Scénariste","name":"Fumihiko Shimo"},{"role":"Character designer original","name":"Yuka Nakajima"},{"role":"Character designer","name":"Miku Kadowaki"},{"role":"Compositeur","name":"Shinkichi Mitsumune"}],"nextVideoReleaseDate":null,"indexable":true},{"id":568,"title":"No Game No Life 0","type":"MOV","originalTitle":"No Game No Life 0","shortTitle":"No Game No Life 0","reference":"ngnl_film","age":"12+","languages":["vostf","vf"],"summary":"Bienvenue dans l’ancien Disboard où les dix règles du jeu n’existaient pas encore. La guerre consume le monde, scinde les paradis, détruit les étoiles et menace même la race humaine. Au milieu de ce chaos, un jeune homme du nom de Riku essaye de mener l’humanité vers un lendemain auquel il croit fermement. Un jour, dans les ruines d’une cité Elfique, il trouve Schwi, une androïde « ex-machina » qui souhaite comprendre le cœur des Hommes. Leur rencontre va changer le cours de l’histoire…","image":"https://image.animationdigitalnetwork.fr/license/ngnl/film/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/ngnl/film/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/ngnl/film/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/ngnl/film/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/568-no-game-no-life-zero","urlPath":"/video/568-no-game-no-life-zero","episodeCount":1,"genres":["Animation japonaise","Action","Aventure","Drame","Fantastique","Science-Fiction","Seinen"],"copyright":"©Yuu Kamiya,PUBLISHED BY KADOKAWA CORPORATION /NO GAME NO LIFE ZERO PARTNERS","rating":4.9,"ratingsCount":872,"commentsCount":52,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":"Découvrez les origines de No Game No Life, près de 6 000 ans avant l’arrivée de Sora et Shiro !","firstReleaseYear":"2017","productionStudio":"Madhouse","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Atsuko Ishizuka"},{"role":"Scénariste","name":"Jukki Hanada"},{"role":"Compositeur","name":"Super Sweep"},{"role":"Auteur","name":"Yû Kamiya"},{"role":"Character designer","name":"Satoshi Tasaki"}],"nextVideoReleaseDate":null,"indexable":true},{"id":217,"title":"To Love-Ru - Darkness","type":"EPS","originalTitle":"To Love-Ru: Trouble - Darkness","shortTitle":null,"reference":"toloveru_tv3","age":"16+","languages":["vostf"],"summary":"Le fiasco de la déclaration d’amour de Rito n’en est peut-être pas un finalement… Car lorsque Lala explique à Momo qu’elle veut que Rito l’épouse tout en épousant Haruna, sa petite soeur à une révélation. Elle doit aider Rito à devenir un homme et à se constituer un harem digne du souverain de Deviluke ! Mais elle ignore qu’une ombre plane au-dessus de Rito et ses amies, car l’ancienne “famille” d’Ombre Dorée se rappelle à son bon souvenir et n’apprécie pas particulièrement la nouvelle vie de l’ancienne tueuse à gages...","image":"https://image.animationdigitalnetwork.fr/license/toloveru/tv3/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/toloveru/tv3/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/toloveru/tv3/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/toloveru/tv3/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/217-to-love-darkness","urlPath":"/video/217-to-love-darkness","episodeCount":26,"genres":["Animation japonaise","Comédie","Ecchi","Romance"],"copyright":"©Kentaro Yabuki,Saki Hasemi／SHUEISHA,Toloveru darkness Project","rating":4.9,"ratingsCount":238,"commentsCount":17,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":"To Love Darkness","firstReleaseYear":"2012","productionStudio":"Xebec","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Atsushi Ootsuki"},{"role":"Mangaka","name":"Saki Hasemi, Kentaro Yabuki"},{"role":"Character designer original","name":"Kentaro Yabuki"},{"role":"Character designer","name":"Yûichi Oka"},{"role":"Scénariste","name":"Atsushi Ootsuki"},{"role":"Compositeur","name":"Takeshi Watanabe"}],"nextVideoReleaseDate":null,"indexable":true},{"id":973,"title":"The Eminence in Shadow","type":"EPS","originalTitle":"Kage no Jitsuryokusha ni Naritakute","shortTitle":"The Eminence in Shadow","reference":"eminenceshadow_tv","age":"16+","languages":["vostf","vf"],"summary":"Sous son apparence de lycéen sans histoire, Cid Kagenou aspire pour autant à devenir celui qui tirera les ficelles au sein des plus grandes organisations secrètes. Malheureusement, un tragique accident de la route l’empêche de réaliser son dessein. Pourtant, à son réveil, il découvre qu’il s’est réincarné dans la peau d’un homme dirigeant une véritable société secrète, Shadow Garden, qui lutte contre le culte de Diabolos. Bien décidé à prendre son rôle au sérieux, il est fin prêt à recruter des membres afin mettre à profit son ingéniosité à l'encontre des forces du mal.","image":"https://image.animationdigitalnetwork.fr/license/eminenceshadow/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/eminenceshadow/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/eminenceshadow/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/eminenceshadow/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/973-the-eminence-in-shadow","urlPath":"/video/973-the-eminence-in-shadow","episodeCount":32,"genres":["Isekai","Animation japonaise","Action","Aventure","Ecchi","Fantastique","Shônen"],"copyright":"©Daisuke Aizawa,KADOKAWA/Shadow Garden","rating":4.9,"ratingsCount":5404,"commentsCount":120,"qualities":["fhd","hd","sd"],"distributions":"fr,de","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":null,"firstReleaseYear":"2022","productionStudio":"Nexus","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Kazuya Nakanishi"},{"role":"Mangaka","name":"Daisuke Aizawa"},{"role":"Character designer original","name":"Tozai"},{"role":"Character designer","name":"Makoto Iino"},{"role":"Compositeur","name":"Kenichiro Suehiro"},{"role":"Directeur artistique","name":"Lee Beom Seon"}],"nextVideoReleaseDate":null,"indexable":true},{"id":1122,"title":"My Instant Death Ability Is So Overpowered, No One in This Other World Stands a Chance Against Me!","type":"EPS","originalTitle":"即死チートが最強すぎて、異世界のやつらがまるで相手にならないんですが。","shortTitle":"My Instant Death Ability Is So Overpowered, No One in This Other World Stands a Chance Against Me!","reference":"myinstantdeathability_tv","age":"12+","languages":["vostf"],"summary":"Lors d’un voyage scolaire, des lycéens sont soudainement propulsés dans un monde parallèle, où chacun se voit offrir par un « sage » énigmatique un pouvoir surpuissant. Tous, hormis Tomochika et Takatô qui, ayant été jugés incapables, ont lâchement été abandonnés et laissés comme appât pour distraire le dragon les ayant attaqués. À la merci de tous les dangers, le jeune homme se révèle alors doté d’une capacité dépassant toutes les limites de cet univers. Si bien que ce dernier éveille la curiosité du gouvernement, déterminé à s’en emparer par tous les moyens…","image":"https://image.animationdigitalnetwork.fr/license/myinstantdeathability/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/myinstantdeathability/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/myinstantdeathability/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/myinstantdeathability/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/1122-my-instant-death-ability-is-so-overpowered-no-one-in-this-other-world-stands-a-chance-against-me","urlPath":"/video/1122-my-instant-death-ability-is-so-overpowered-no-one-in-this-other-world-stands-a-chance-against-me","episodeCount":12,"genres":["Isekai","Animation japonaise","Action","Aventure","Comédie","Fantastique"],"copyright":"©Tsuyoshi Fujitaka/ESE/ My Instant Death Ability is So Overpowered","rating":4.4,"ratingsCount":852,"commentsCount":9,"qualities":["fhd","hd","sd"],"distributions":"fr,de","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":"Un pouvoir transcendant toutes les limites de ce monde ? Un isekai à découvrir dès maintenant !","firstReleaseYear":"2024","productionStudio":"Okuruto Noboru","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Masakazu Hishida"},{"role":"Scénariste","name":"Masakazu Hishida"},{"role":"Auteur","name":"Tsuyoshi Fujitaka"},{"role":"Character designer original","name":"Chisato Naruse"},{"role":"Directeur artistique","name":"Scott Macdonald"},{"role":"Directeur de la photographie","name":"Yujirô Yamane"}],"nextVideoReleaseDate":null,"indexable":true},{"id":790,"title":"Polyphonica - Crimson S","type":"EPS","originalTitle":"Shinkyoku Soukai Polyphonica Crimson S","shortTitle":"Polyphonica Crimson S","reference":"polyphonica_tv2","age":"12+","languages":["vostf"],"summary":"Alors qu’une jeune Corticarte est poursuivie par des esprits maléfiques, elle croise la route de Phoron, qui n’est encore qu’un enfant...","image":"https://image.animationdigitalnetwork.fr/license/polyphonica/tv2/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/polyphonica/tv2/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/polyphonica/tv2/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/polyphonica/tv2/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/790-polyphonica-crimson-s-saison-2","urlPath":"/video/790-polyphonica-crimson-s-saison-2","episodeCount":12,"genres":["Surnaturel","Musique","Magie","Animation japonaise","Aventure","Comédie","Fantastique","Romance","Scolaire"],"copyright":"© 2009 Ichiro Sakaki/Torvas Divine Song Players Academy","rating":4.7,"ratingsCount":18,"commentsCount":1,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":null,"firstReleaseYear":"2009","productionStudio":"Diomedea","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Toshimasa Suzuki"},{"role":"Auteur","name":"Ichiro Sakaki"},{"role":"Scénariste","name":"Kenichi Kanemaki, Hiroyuki Kawasaki, Mayori Sekijima"},{"role":"Character designer","name":"Mitsuru Ohara"},{"role":"Compositeur","name":"Hikaru Nanase"}],"nextVideoReleaseDate":null,"indexable":true},{"id":1087,"title":"GeGeGe no Kitarô (2018)","type":"EPS","originalTitle":"Gegege no Kitarô (2018)","shortTitle":"Gegege no Kitarô (2018)","reference":"gegegenokitaro_tv6","age":"10+","languages":["vostf"],"summary":"Relégués au simple statut de mythes et légendes, les yôkai ont progressivement sombré dans l’oubli. Mais lorsque des phénomènes inexplicables commencent à se produire, semant le trouble parmi la population, Mana, 13&nbsp;ans, est résolue à dissiper le voile entourant ces mystères. Sa rencontre fortuite avec Kitarô, un jeune yôkai, l’amène à découvrir un monde jusqu’alors insoupçonné.","image":"https://image.animationdigitalnetwork.fr/license/gegegenokitaro/tv6/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/gegegenokitaro/tv6/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/gegegenokitaro/tv6/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/gegegenokitaro/tv6/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/1087-gegege-no-kitaro-version-2018","urlPath":"/video/1087-gegege-no-kitaro-version-2018","episodeCount":97,"genres":["Horreur / Épouvante","Animation japonaise","Action","Comédie","Psychologique"],"copyright":"ⒸMizuki Production, Toei Animation","rating":4.9,"ratingsCount":88,"commentsCount":2,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2018","productionStudio":"Toei Animation","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Kôji Ogawa"},{"role":"Scénariste","name":"Hiroshi Ohnogi"},{"role":"Mangaka","name":"Shigeru Mizuki"},{"role":"Compositeur","name":"Yasuharu Takanashi"},{"role":"Character designer","name":"Tsubasa Shimizu"}],"nextVideoReleaseDate":null,"indexable":true},{"id":1058,"title":"Strike the Blood Final","type":"OAV","originalTitle":"????????????FINAL","shortTitle":"Strike the Blood Final","reference":"striketb_oav5","age":"12+","languages":["vostf"],"summary":"Shahryar Ren, le président de MAR, a acquis une arme antique, menaçant, dès lors, l’équilibre du monde. Face à cette menace imminente, l’Organisation du Roi Lion, soutenue par le Bureau d’Astrologie, décide de fermer le portail situé sur l’île d’Itogami, avec l’intention de contrer ses terribles desseins. Kojô, Yukina et leurs camarades pourront-ils s’opposer à cette décision&nbsp;?","image":"https://image.animationdigitalnetwork.fr/license/striketb/oav5/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/striketb/oav5/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/striketb/oav5/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/striketb/oav5/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/1058-strike-the-blood-final","urlPath":"/video/1058-strike-the-blood-final","episodeCount":4,"genres":["Animation japonaise","Action","Comédie","Ecchi","Fan service","Fantastique","Romance"],"copyright":"©2019 Gakuto Mikumo/KADOKAWA /PROJECT STB OVA","rating":4.9,"ratingsCount":40,"commentsCount":3,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":null,"firstReleaseYear":"2022","productionStudio":"CONNECT","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Hideyo Yamamoto"},{"role":"Scénariste","name":"Hiroyuki Yoshino"},{"role":"Auteur","name":"Gakuto Mikumo"},{"role":"Character designer original","name":"Manyako"},{"role":"Compositeur","name":"Assumed Sounds"},{"role":"Character designer","name":"Keiichi Sano, Hideki Furukawa"}],"nextVideoReleaseDate":null,"indexable":true},{"id":1084,"title":"Le Collège Noir","type":"EPS","originalTitle":"Le Collège Noir - Complainte d'Auvergne","shortTitle":"Le Collège Noir","reference":"lecollegenoir_tv","age":"12+","languages":["vf"],"summary":"Dans un collège perdu au milieu des montagnes du Cantal, cinq jeunes collégiens passent les vacances de la Toussaint sous la surveillance de Léna, une pionne mal lunée. Mais lorsque l’âme de leur camarade disparu leur apparaît en pleine nuit, les ados se retrouvent confrontés à la malédiction d’une terrible sorcière et aux créatures les plus terrifiantes du folklore français…","image":"https://image.animationdigitalnetwork.fr/license/lecollegenoir/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/lecollegenoir/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/lecollegenoir/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/lecollegenoir/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/1084-le-college-noir","urlPath":"/video/1084-le-college-noir","episodeCount":6,"genres":["Animation franco-belge","Aventure","Comédie","Fantastique"],"copyright":"© 2023 Studio La Cachette - ADN - TOEI Animation Co., Ltd.","rating":4.9,"ratingsCount":409,"commentsCount":33,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":true,"available":true,"download":false,"basedOn":"Oeuvre Originale","tagline":"Plongez dans le folkore du Cantal à travers la nouvelle coproduction entre ADN, le Studio La Cachette et Toei Animation.","firstReleaseYear":"2023","productionStudio":"La Cachette","countryOfOrigin":"France","productionTeam":[{"role":"Réalisateur","name":"Ulysse Malassagne"}],"nextVideoReleaseDate":null,"indexable":true},{"id":754,"title":"How a Realist Hero Rebuilt the Kingdom","type":"EPS","originalTitle":"Genjitsu Shugi Yuusha no Oukoku Saikenki","shortTitle":"How a Realist Hero Rebuilt the Kingdom","reference":"realisthero_tv","age":"12+","languages":["vostf"],"summary":"Kazuya Sôma est un jeune homme sans histoire aspirant à une vie tranquille. Peu après avoir perdu son grand-père, la seule famille qu’il lui restait, il se retrouve propulsé dans un autre monde. Là-bas, il apprend qu’il est le héros invoqué par le royaume d’Elfrieden pour venir en aide au pays. Hélas, il va vite s’apercevoir que son destin de héros s’annonce tout sauf héroïque…","image":"https://image.animationdigitalnetwork.fr/license/realisthero/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/realisthero/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/realisthero/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/realisthero/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/754-how-a-realist-hero-rebuilt-the-kingdom","urlPath":"/video/754-how-a-realist-hero-rebuilt-the-kingdom","episodeCount":13,"genres":["Animation japonaise","Action","Comédie","Drame","Fantastique","Heroic Fantasy"],"copyright":"© Dozeumaru, OVER-LAP / Realist Hero Production Committee","rating":4.8,"ratingsCount":1361,"commentsCount":47,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":null,"firstReleaseYear":"2021","productionStudio":"J.C. Staff","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Takashi Watanabe"},{"role":"Auteur","name":"Dozeumaru"},{"role":"Character designer original","name":"Fuyuyuki"},{"role":"Character designer","name":"Mai Otsuka"},{"role":"Compositeur","name":"Akiyuki Tateyama"}],"nextVideoReleaseDate":null,"indexable":true}]},{"title":"Sur les relations fraternelles en duo","shows":[{"id":1115,"title":"Night Head Genesis","type":"EPS","originalTitle":"ナイトヘッドジェネシス","shortTitle":"Night Head Genesis","reference":"nightheadgenesis_tv","age":"16+","languages":["vostf"],"summary":"Dans une société oscillant entre progrès technologique et mysticisme latent, deux frères, Naoto et Naoya Kirihara, dotés de capacités psychiques extraordinaires, sont confiés à une organisation gouvernementale après que leurs pouvoirs ont été découverts. Des années plus tard, ils parviennent à s’échapper, mais se retrouvent confrontés à un univers qu’ils connaissent à peine, où leurs dons exceptionnels sont à la fois une bénédiction et une malédiction. C’est alors qu’il croise la route de Shôko, une femme énigmatique semblant détenir les réponses à leurs questions…","image":"https://image.animationdigitalnetwork.fr/license/nightheadgenesis/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/nightheadgenesis/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/nightheadgenesis/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/nightheadgenesis/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/1115-night-head-genesis","urlPath":"/video/1115-night-head-genesis","episodeCount":24,"genres":["Drame","Psychologique","Violence","Horreur"],"copyright":"© 2006 “Night Head : Genesis” Production Partners","rating":3.4,"ratingsCount":25,"commentsCount":0,"qualities":["fhd","hd","sd"],"distributions":"fr,de","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Oeuvre Originale","tagline":"Un thriller implacable où deux frères à l'intelligence surdéveloppée devront affronter un monde hostile à leurs capacités.","firstReleaseYear":"2006","productionStudio":"Bee Media","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Yoshio Takeuchi"},{"role":"Scénariste","name":"Joji Iida"},{"role":"Auteur","name":"Joji Iida"},{"role":"Character designer original","name":"You Higuri"},{"role":"Directeur artistique","name":"Hiroshi Kato, Toshihiro Kohama"},{"role":"Directeur de la photographie","name":"Yasuhiko Abe"}],"nextVideoReleaseDate":null,"indexable":true},{"id":1168,"title":"Sword of the Demon Hunter KIJIN GENTÔSHÔ","type":"EPS","originalTitle":"鬼人幻燈抄","shortTitle":"Sword of the Demon Hunter KIJIN GENTÔSHÔ","reference":"sworddemonhunter_tv","age":"16+","languages":["vostf"],"summary":"(Diffusion du simulcast à compter de 2025) - Aux confins des montagnes, le village de Kadono bénéficie d’une apparente tranquillité grâce à la dévotion de sa prêtresse. Pour préserver ce fragile équilibre, Jinta, un enfant autrefois vagabond qui, avec sa jeune sœur Suzune, a rejoint le village dont il est devenu le gardien, est envoyé à la lisière de la forêt pour traquer des créatures démoniaques. Au terme d’un duel acharné, celle-ci lui révèle une effroyable prophétie… Pour le chasseur de démons en quête de réponses, cette rencontre marque le début d’une errance à travers les âges, guidée par le fil de son épée.","image":"https://image.animationdigitalnetwork.fr/license/sworddemonhunter/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/sworddemonhunter/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/sworddemonhunter/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/sworddemonhunter/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/1168-sword-of-the-demon-hunter-kijin-gentosho","urlPath":"/video/1168-sword-of-the-demon-hunter-kijin-gentosho","episodeCount":0,"genres":["Animation japonaise","Action","Aventure","Fantastique","Historique","Psychologique","Violence"],"copyright":"©Motoo Nakanishi/Futabasha,KIJIN GENTOSHO Project","rating":3,"ratingsCount":1,"commentsCount":10,"qualities":["sd"],"distributions":"fr,de","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Roman","tagline":"Diffusion du simulcast à compter de 2025","firstReleaseYear":"2024","productionStudio":"Yokohama Animation Lab","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Kazuya Aiura"},{"role":"Scénariste","name":"Hitomi Mieno"},{"role":"Auteur","name":"Motoo Nakanishi"},{"role":"Compositeur","name":"Ryuichi Takada, Keiichi Hirokawa, Kuniyuki Takahashi"},{"role":"Character designer","name":"Taro Ikegami"}],"nextVideoReleaseDate":null,"indexable":true},{"id":953,"title":"Panty \u0026 Stocking with Garterbelt","type":"EPS","originalTitle":"Panty \u0026 Stocking with Garterbelt","shortTitle":"Panty \u0026 Stocking with Garterbelt","reference":"pantyandstocking_tv","age":"16+","languages":["vostf"],"summary":"Sous la tutelle du pasteur Garterbelt, Panty et Stocking, deux anges et sœurs déchus du Paradis en raison de leur comportement outrancier, ont pour mission de chasser les âmes humaines qui, n’ayant pas trouvé le repos éternel, troublent Daten City. Afin de retrouver leur statut et de retourner au Ciel, elles doivent récolter les «&nbsp;écus du Paradis&nbsp;». Grâce à leurs vêtements, véritables armes en série, elles espèrent faire régner l’ordre et la paix… mais leur intervention semble causer davantage de dégâts que de venir en aide aux habitants de la ville…","image":"https://image.animationdigitalnetwork.fr/license/pantyandstocking/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/pantyandstocking/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/pantyandstocking/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/pantyandstocking/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/953-panty-and-stocking-with-gartebelt","urlPath":"/video/953-panty-and-stocking-with-gartebelt","episodeCount":13,"genres":["Anges","Parodie","Animation japonaise","Action","Comédie","Ecchi","Violence"],"copyright":"©2010 GAINAX/GEEKS","rating":4.6,"ratingsCount":53,"commentsCount":7,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Oeuvre Originale","tagline":null,"firstReleaseYear":"2010","productionStudio":"GAINAX, SANZIGEN Animation Studio","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Hiroyuki Imaishi, Mashiko Otsuka"},{"role":"Scénariste","name":"Hiroyuki Imaishi, Shin Itagaki, Shigeto Koyama, Atsushi Nishigori, Mashiko Otsuka, Hiroshi Seko Hiromi Wakabayashi"},{"role":"Auteur","name":"GAINAX"},{"role":"Compositeur","name":"Taku [m-flo]"},{"role":"Directeur artistique","name":"Masanobu Nomura"}],"nextVideoReleaseDate":null,"indexable":true},{"id":637,"title":"Kinky \u0026 Cosy","type":"EPS","originalTitle":"Kinky \u0026 Cosy","shortTitle":"Kinky \u0026 Cosy","reference":"kinkycosy_tv","age":"12+","languages":["vf"],"summary":"Kinky et Cosy sont deux jumelles sans peur et sans gêne. Elles posent des regards ravageurs sur les inconsistances de leur parents, les vibromasseurs, les faiblesses du système scolaire... Trash, perspicaces, curieuses, méchantes, moqueuses, elles sont tellement drôles qu'on leur pardonnerait presque tout !\n\n","image":"https://image.animationdigitalnetwork.fr/license/kinkycosy/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/kinkycosy/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/kinkycosy/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/kinkycosy/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/637-kinky-et-cosy","urlPath":"/video/637-kinky-et-cosy","episodeCount":100,"genres":["International","Comédie"],"copyright":"D'après Kinky \u0026 Cosy - Nix © le Lombard\n© 2014 - Nix / Ellipsanime Productions / Belvision. Tous droits réservés","rating":4.6,"ratingsCount":231,"commentsCount":24,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":null,"tagline":"Attention, jumelles déjantées ! ","firstReleaseYear":"2014","productionStudio":"Ellipse Animation","countryOfOrigin":"France","productionTeam":[{"role":"Réalisateur","name":"Marnix Verduyn"}],"nextVideoReleaseDate":null,"indexable":true}]}]},"dataUpdateCount":1,"dataUpdatedAt":1721906327677,"error":null,"errorUpdateCount":0,"errorUpdatedAt":0,"fetchFailureCount":0,"fetchFailureReason":null,"fetchMeta":null,"isInvalidated":false,"status":"success","fetchStatus":"idle"},"queryKey":["pairsShow",{"showId":315,"minPairSize":3}],"queryHash":"[\"pairsShow\",{\"minPairSize\":3,\"showId\":315}]"},{"state":{"data":{"hreflang":{"fr":"https://animationdigitalnetwork.com/video/315-no-game-no-life","de":null}},"dataUpdateCount":1,"dataUpdatedAt":1721906327674,"error":null,"errorUpdateCount":0,"errorUpdatedAt":0,"fetchFailureCount":0,"fetchFailureReason":null,"fetchMeta":null,"isInvalidated":false,"status":"success","fetchStatus":"idle"},"queryKey":["showHreflang",315],"queryHash":"[\"showHreflang\",315]"},{"state":{"data":{"seasons":[{"season":null,"title":"Vidéos","videos":[{"id":4946,"title":"No Game No Life - Bande Annonce","name":null,"number":"Bande Annonce","image":"https://image.animationdigitalnetwork.fr/license/ngnl/pv/web/pv1_320x180.jpg","duration":1440,"urlPath":"/video/315-no-game-no-life/4946-bande-annonce","free":false,"freeWithAds":true},{"id":5000,"title":"No Game No Life - Épisode 1","name":"Débutant","number":"Épisode 1","image":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps1_320x180.jpg","duration":1440,"urlPath":"/video/315-no-game-no-life/5000-episode-1","free":false,"freeWithAds":true},{"id":5002,"title":"No Game No Life - Épisode 2","name":"Challenger","number":"Épisode 2","image":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps2_320x180.jpg","duration":1440,"urlPath":"/video/315-no-game-no-life/5002-episode-2","free":false,"freeWithAds":false},{"id":5005,"title":"No Game No Life - Épisode 3","name":"Expert","number":"Épisode 3","image":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps3_320x180.jpg","duration":1440,"urlPath":"/video/315-no-game-no-life/5005-episode-3","free":false,"freeWithAds":false},{"id":5006,"title":"No Game No Life - Épisode 4","name":"Grand master","number":"Épisode 4","image":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps4_320x180.jpg","duration":1440,"urlPath":"/video/315-no-game-no-life/5006-episode-4","free":false,"freeWithAds":false},{"id":5007,"title":"No Game No Life - Épisode 5","name":"Case Faible","number":"Épisode 5","image":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps5_320x180.jpg","duration":1440,"urlPath":"/video/315-no-game-no-life/5007-episode-5","free":false,"freeWithAds":false},{"id":5008,"title":"No Game No Life - Épisode 6","name":"Un coup interesting","number":"Épisode 6","image":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps6_320x180.jpg","duration":1440,"urlPath":"/video/315-no-game-no-life/5008-episode-6","free":false,"freeWithAds":false},{"id":5009,"title":"No Game No Life - Épisode 7","name":"Sacrifice","number":"Épisode 7","image":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps7_320x180.jpg","duration":1440,"urlPath":"/video/315-no-game-no-life/5009-episode-7","free":false,"freeWithAds":false},{"id":5010,"title":"No Game No Life - Épisode 8","name":"Fake end","number":"Épisode 8","image":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps8_320x180.jpg","duration":1440,"urlPath":"/video/315-no-game-no-life/5010-episode-8","free":false,"freeWithAds":false},{"id":5011,"title":"No Game No Life - Épisode 9","name":"Sky Walk","number":"Épisode 9","image":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps9_320x180.jpg","duration":1440,"urlPath":"/video/315-no-game-no-life/5011-episode-9","free":false,"freeWithAds":false},{"id":5012,"title":"No Game No Life - Épisode 10","name":"Blue Rose","number":"Épisode 10","image":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps10_320x180.jpg","duration":1440,"urlPath":"/video/315-no-game-no-life/5012-episode-10","free":false,"freeWithAds":false},{"id":5013,"title":"No Game No Life - Épisode 11","name":"Killing giant","number":"Épisode 11","image":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps11_320x180.jpg","duration":1440,"urlPath":"/video/315-no-game-no-life/5013-episode-11","free":false,"freeWithAds":false},{"id":5014,"title":"No Game No Life - Épisode 12","name":"Loi numéro 10","number":"Épisode 12","image":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps12_320x180.jpg","duration":1440,"urlPath":"/video/315-no-game-no-life/5014-episode-12","free":false,"freeWithAds":false}]}]},"dataUpdateCount":1,"dataUpdatedAt":1721906327690,"error":null,"errorUpdateCount":0,"errorUpdatedAt":0,"fetchFailureCount":0,"fetchFailureReason":null,"fetchMeta":null,"isInvalidated":false,"status":"success","fetchStatus":"idle"},"queryKey":["videosSeasons",{"showId":315,"order":"asc"}],"queryHash":"[\"videosSeasons\",{\"order\":\"asc\",\"showId\":315}]"}]},"_nextI18Next":{"initialI18nStore":{"fr":{"common":{"title":"ADN","learn":"Learn React","hello_button":"Hello Button","are_you_sure":"Êtes-vous sur ?","cancel":"Annuler","ok":"OK","yes":"Oui","no":"Non","loading":" Chargement...","loading_video":" Chargement du lecteur...","click_here":"cliquez ici !","next_release":"PROCHAINE SORTIE","adn_news":"ADN news","last_videos":"Derniers ajouts","themes":"Thèmes","recommendations":"Recommandations","yatta_link":"Plus de news","yatta_posted":"Posté il y a","more_results":"Plus de résultats","no_releases":"Pas de sorties.","watch_EPS":"Regarder la série","watch_MOV":"Regarder le film","watch_OAV":"Regarder l'OAV","first_episode_free":"1\u003csup\u003eer\u003c/sup\u003e épisode GRATUIT","and":"ET","hours":"Heures","minutes":"Minutes","resume_episode":"Résumé de l'épisode","summary_title":"Résumé : {{videoTitle}} {{videoNumber}} en {{videoLanguages}}","seo_title":"ADN | Anime streaming en VOSTFR et VF","seo_description":"Animation Digital Network c'est le meilleur de l'animé en direct du Japon ! Découvrez en streaming tout Naruto Shippuden, Fairy Tail, Hunter x Hunter, Blue Exorcist, Code Geass, Vampire Knight, etc.","seo_author":"ADN","errors":{"required":"Ce champ est obligatoire.","required_number":"Le code doit contenir 6 chiffres.","min_length":"Le mot de passe doit faire plus de 8 caractères.","min_age":"La création de compte est réservée aux personnes ayant 12 ans révolus.","password_must_match":"La vérification et le mot de passe sont différents.","gcu_required":"Vous devez accepter les conditions d'utilisation pour créer un compte.","email_invalid":"Cette adresse email n'est pas valide.","email_validation_error":"${value} doit être un email valide.","captcha":"Captcha Incorrect","page":"Page introuvable","logout_failed":"La déconnexion de votre compte n'a pas pu se faire correctement. Veuillez réessayer.","message_with_context":"{{message}} Erreur: {{context}}","relogin_to_apply_changes":"La session d'actualisation a échoué. Veuillez vous déconnecter et vous reconnecter pour appliquer un nouvel abonnement","something_went_wrong":"Une erreur est survenue.","profiles_general_error":"Nous avons rencontré un problème avec les profils, temporairement le profil principal a été défini pour permettre la navigation sur le site","viewing_limitation_invalid":"La limitation de durée de visionnage doit être de 30 minutes au minimum.","subscription_group_invalid":"L'offre découverte est uniquement disponible pour les nouveaux utilisateurs","ogone_errors":{"20001004":"We have received an unknown status for the transaction. We shall contact your acquirer and update the transaction status within one working day. Please check the : us later.","20001111":"A technical problem has occurred. Please contact the helpdesk.","20001998":"We received an unknown status for the transaction. We will contact your acquirer and update the status of the transaction. Please check the status later.","30001011":"A technical problem has occurred. Please contact the helpdesk.","30031001":"Invalid merchant number","30041001":"Retain card.","30051001":"Authorisation declined","30071001":"Retain card - special conditions.","30121001":"Invalid transaction","30131001":"Invalid amount","30141001":"Invalid card number","30201001":"A technical problem has occurred. Please contact the helpdesk.","30301001":"Invalid format","30341001":"Suspicion of fraud.","30381001":"A technical problem has occurred. Please contact the helpdesk.","30411001":"Lost card","30431001":"Stolen card. Pick up.","30511001":"Insufficient funds","30541001":"Card expired","30561001":"Card not in authoriser's database.","30591001":"Suspicion of fraud","30611001":"Amount exceeds card limit","30751001":"Incorrect PIN entered too many times","50001054":"Card number incorrect or incompatible","50001111":"Data validation error","50001113":"This order has already been processed.","50001123":"Card type not active"}},"actions":{"save":"Enregistrer","enter":"Valider","cancel":"Annuler"},"messages":{"general_error":"Une erreur est survenue.","session_expired":"Votre session a expiré. Veuillez vous reconnecter.","empty_password":"Un mot de passe vide n'est pas autorisé"},"languages":{"vostf":{"name":"VOSTFR","title":"Japonais sous-titré français"},"vf":{"name":"VF","title":"Français"},"and":" et ","title_video_tab":" {{title}} - streaming - {{languages}} - ADN"},"time_codes":{"title":"Page d'administration du timecodes","error_details":"Détails de l'erreur:","is_uploading":"Téléchargement","submit_file":"Ajouter le fichier CSV"},"multi_profile":{"add_new":"Ajouter un nouveau profil","edit":"Modification du profil","fields":{"name":"Entrer votre nom","act_green":"J'agis pour la planète en ayant une consommation responsable.","act_green_explanation":"Qu'est-ce que c'est ?","green":"Vous pouvez modifier ces paramètres dans vos préférences de lecture.","age_group":"Catégorie d'âge :"},"age_group":{"zero":"0+","ten":"10+","twelve":"12+","sixteen":"16+","eighteen":"18+","no_restriction":"Sans restriction d'âge","hint":"Les contenus à partir de {{age}} ne sont pas autorisés.","hint_no_limit":"Pas de restriction de contenu."},"subscription":{"registered":"Inscrit","subscriber":"Abonné"},"who_is_it":{"title":"Qui est-ce ?","add":"Nouveau profil","edit":"Modifier mon profil","cta_text":"Pour réactiver vos profils secondaires,","cta_link":"ré-abonnez vous."},"who_is_it_edit":{"title_singular":"Modifier le profil","title_plural":"Modifier les profils","subtitle":"Sélectionner un profil à modifier","end":"Terminé","cta_text":"Vous souhaitez ajouter de nouveaux profils ?","cta_disabled_text":"Pour modifier vos profils secondaires,","cta_link":"Abonnez-vous !","cta_disabled_link":"ré-abonnez vous."},"messages":{"profile_created":"Profil créé avec succès","profile_updated":"Profil mis à jour","profile_create_error":"Erreur lors de la création du profil, veuillez réessayer plus tard","profile_update_error":"Erreur lors de la modification du profil, veuillez réessayer plus tard","profile_update_avatar_distribution_error":"Cet avatar n'est pas disponible dans votre distribution, veuillez en choisir un autre"}},"pin_code":{"title":"Entrez votre code pin","forgot_pin_code":"Code pin oublié ?","forgot_pin_code_received":"Veuillez vérifier votre boîte de réception !"},"twitch":{"follow":"Suivez nos émissions"},"player":{"vote":"Notez !","thanks_for_voting":"Merci :)","no_comments":"Aucun commentaire","comments":"{{count}} commentaires","commentSingular":"{{count}} commentaire","comment":"commentaires","my_watchlist":"Ma watchlist","already_seen_show":"J'ai vu cette série","favorite":"Coup de coeur","download":"Télécharger","broadcast":"En cours de diffusion.","see_more":"Voir plus","summary":"Résumé de la série :","season":"Saison {{season}} ","source":"Source :","in":"en","on_adn":"sur ADN","and_lowercase":"et","integrate_video":"Intégrer la vidéo","no_access":"Vous devez être abonné pour accéder à ce contenu.","show_offer":"Découvrir les offres","return_to_home":"Retour à l'accueil","report_issue":"Veuillez réessayer plus tard. si le problème persiste, n'hésitez pas à contacter ","go_to_sav":"notre SAV","go_to_catalog":"Accéder au catalogue","video_not_found":"Vidéo non trouvée !","already_subscriber":"Déjà abonné(e) à ADN ? ","click_here":"Cliquez ici !","to_sign_in":"pour vous connecter à votre compte et visionner l'épisode","age_restriction_message":"Ce contenu n'est pas accessible pour votre catégorie d'âge.\u003cbr /\u003eC'est pour votre bien !","distribution_restriction_message":"Ce contenu n'est pas accessible dans votre pays.","duration_restriction_message":"Vous avez atteint la limite de visionnage quotidienne définie pour votre profil.","select_video":"Veuillez sélectionner une autre vidéo !"},"download_overlay":{"unlimited_credits":"Vos crédits de téléchargement sont \u003cstrong\u003eillimités\u003c/strong","no_credits":"Vous n'avez plus/pas de crédits de téléchargement","credits_after_one":"Il vous reste maintenant \u003cstrong\u003e1 crédit\u003c/strong\u003e de téléchargement à utiliser.","credits_after_other":"Il vous reste actuellement \u003cstrong\u003e{{count}} crédits\u003c/strong\u003e de téléchargement à utiliser.","credits_before_one":"Il vous reste actuellement \u003cstrong\u003e1 crédit\u003c/strong\u003e de téléchargement à utiliser.","credits_before_other":"Il vous reste actuellement \u003cstrong\u003e{{count}} crédits\u003c/strong\u003e de téléchargement à utiliser.","you_will_use_credits_one":"Vous utiliserez \u003cstrong\u003e1 crédit\u003c/strong\u003e de téléchargement","you_will_use_credits_other":"Vous utiliserez \u003cstrong\u003e{{count}} crédits\u003c/strong\u003e de téléchargement","download_warning":"Attention : Les fichiers téléchargés sont marqués et nous permettent d'identifier leur propriétaire. Toute tentative de partage de fichier entrainera le blocage du compte ainsi que des poursuites judiciaires. (cf. Article 9 des CGU)","download_max_reached":"\u003cstrong\u003eVous avez déjà téléchargé ce fichier plus de 8 fois !\u003c/strong\u003e\u003cbr/\u003eN'hésitez pas à contacter le SAV si vous rencontrez des problèmes pour télécharger une vidéo.","validate_email_warning":"\u003cstrong\u003eAttention !\u003c/strong\u003e Pour télécharger un épisode, veuillez d'abord valider votre adresse email.","video_not_available":"Cette vidéo n'est pas encore disponible en téléchargement.","video_not_available_message":"Nous travaillons pour la rendre disponible au plus vite. Merci de votre compréhension.","no_download":"Vous ne pouvez pas télécharger cette vidéo.","no_main_profile":"Les téléchargements sont réservés au détenteur du compte ADN. Si vous désirez télécharger une vidéo, contactez-le.","choose_version":"Choisissez la version que vous voulez télécharger :","country_ip":"\u003cspan class=\"geomessage\"\u003ePour des raisons légales, nous ne sommes pas autorisés à diffuser nos vidéos dans ce territoire.\u003cbr/\u003e Si vous vous trouvez dans un pays européen francophone, un territoire d'outre mer ou au Maghreb et que ce message apparaît, contactez-nous en utilisant le formulaire de contact du site.\u003cbr/\u003e\u003cbr/\u003eFor legal reasons, we are not allowed to broadcast our videos in this territory.\u003cbr/\u003eIf this message appears, when you are in a french speaking country, an overseas territory or in the maghreb, please contact us by using our website contact form.\u003c/span\u003e\u003cbr/\u003e\u003cstrong\u003eVotre pays : {{country}} (IP : {{ip}})\u003c/strong\u003e","blacklisted_ip":"l'IP {{ip}} est bloquée.\u003cbr/\u003eL'utilisation de VPN ou Proxy pour accéder aux vidéos n'est pas autorisé. Cette IP peut aussi avoir été bloquée si elle a été utilisée à des fins ne respectant pas nos conditions d’utilisations.","download_available":"Votre épisode est téléchargeable","download_available_for":"Votre épisode est téléchargeable pendant {{time}}","download_button":"Télécharger","download_version":"Télécharger en ","view_our_offers":" Voir les offres","validate_email_button":"Valider mon adresse mail","you_download":"Vous télécharger :","you_want_to_download":"Vous allez télécharger :","warn_already_downloaded":"\u003cstrong\u003eAttention :\u003c/strong\u003e Vous avez déjà téléchargé cet épisode.","in_language_vf":" en \u003cacronym title=\"Version Française\"\u003eVF\u003c/acronym\u003e","in_language_vostf":" en \u003cacronym title='Version Originale Sous-Titrée Français'\u003eVOSTFR\u003c/acronym\u003e","progress_bar":{"start":"Préparation...","done":"Téléchargement...","all_done":"Téléchargement terminé !"},"language_titles":{"vf":"Version Française","vostf":"Version Originale Sous-Titrée Français"}},"main_carrousel":{"watch_show":"Regarder","free":"Gratuit"},"versus_battle_page":{"title":"BIENVENUE SUR ADN !","header":"Aidez-nous a vous proposer les meilleurs contenus","sub_header":"Quel anime préférez vous ?","button":"PASSER"},"user_account_survey_page":{"header":"QUI SUIS-JE ?","pass_button":"PASSER","submit_button":"VALIDER","notification_message":"Votre compte a été créé avec succès. N'hésitez pas à compléter votre profil pour profiter pleinement de tous nos services !"},"versus_battle":{"title":"VERSUS BATTLE","i_like_both":"J'aime les 2 !","i_like_none":"Aucun"},"account":{"user_info":{"member_since":"Membre depuis {{since}}","change_avatar":"Changer mon avatar","edit_profile":"Éditer mon profil","view_profile":"Voir mon profil public","logout":"Se déconnecter","male_letter":"H","female_letter":"F","age":"{{age}} ans","subscription_male":"Abonné {{subscription}} ","subscription_female":"Abonnée {{subscription}} ","no_subscription_male":"Non abonné","no_subscription_female":"Non abonnée"},"menu_categories":{"my_account":"Mon compte","my_profile":"Mon profil","my_recommendations":"Mes recommandations"},"account_management":{"title":"Informations du compte","save_button":"Enregistrer"},"profile_management":{"title":"Gestion des profils","age_restriction_title":"Restriction d'accés","delete_title":"Suppression du profil","save":"Enregistrer","delete":"Supprimer","confirm":"Voulez-vous vraiment supprimer ce profil?","field_by_age_category":"• Par catégorie d'âge :","field_by_blacklist":"• Par titres interdits (5 maximum) :","watch_time_restriction":"Limitation de durée de visionnage"},"playback_preferences":{"title":"Mes préférences de lecture","language":"Langue","resolution":"Résolution","auto_play":"Lecture automatique\u0026nbsp;:","night_mode":"Mode nuit","auto_play_message":"Les épisodes s'enchaîneront automatiquement.","green":"J'agis pour la planète en ayant une consommation responsable."},"myinformation":{"title":" Mes informations"},"myprofile":{"title":" Mon profil","username":"Pseudo :","birthdate":"Date de naissance :","last_name":"Nom :","first_name":"Prénom :","email":"Email :","email_address":"Adresse mail du compte :","validate_email":"Valider son email","change_email":"Changer d'email","fake_password":"Mot de passe :","address":"Numéro et rue :","company":"Société :","city":"Ville :","zip_code":"Code postal :","country":"Pays :","change_password":"Modifier mon mot de passe","email_change_subprofile_only":"Pour modifier votre adresse mail, rendez-vous dans l'espace \"Informations du compte\"","sex":"Mon genre :","sex_male":"Homme","sex_female":"Femme","newsletter_label":"J’accepte de recevoir par e-mail les offres et newsletters d'informations de ADN","newsletter_partners_label":"Je souhaite également recevoir par e-mail les offres et newsletters d’informations des partenaires de ADN","animeormanga_label":"Je suis fan de :","dvdperyear_label":"Nombre de DVD/Blu-ray que j'achète par an ?","mangaperyear_label":"Nombre de manga que j'achète par an ?","alreadysubscriber_label":"J'ai déjà souscrit à une offre légale de VOD (Vidéo à la demande) :","whichsubscription_label":"Si oui, lesquelles ?","whichsubscription_placeholder":"noms des services...","submit_button":"VALIDER","animeormanga_manga":"Manga essentiellement","animeormanga_animation":"Animation japonaise essentiellement","animeormanga_both":"Les deux","peryear_none":"Aucun","peryear_minus":"Moins de {{number}}","peryear_plus":"Plus de {{number}}","alreadysubscriber_yes":"oui","alreadysubscriber_no":"non","invalid_birthdate_message":"Le format de la date de naissance n'est pas bon.","not_old_enough":"La création de compte est réservée aux personnes de plus de 12 ans.","update_profile_error":"Certains champs ne sont pas valides. Veuillez les vérifier et réessayez.","update_profile_success":"Votre compte a été sauvegardé","email_change_need_validation":"Vous devez d'abord valider la modification du profil, afin d'enregister le changement d'email."},"mypublicprofile":{"title":" Mon profil public","visible":"Status du profil :","module1":"Module 1 :","module2":"Module 2 :","module3":"Module 3 :","age":"Affichage de l'age :","sex":"Affichage du genre :","private":"privé","public":"public","info":"Vous avez réglé la visibilité de votre profil sur 'privé' ! Il n'est visible que par vous même.","no_module":"Aucun module","video_viewed":"Dernières vidéos vues","video_rated":"Dernières vidéos notées","video_commented":"Dernières vidéos commentées","background_fake":"Choisir une image","background_label":"Background du profil :","error":"Certains champs ne sont pas valides. Veuillez les vérifier et réessayez.","background_empty":"Vous devez séléctionner un background dans la liste déroulante.","success":"Votre profil est sauvegardé !","save":"sauvegarder"},"myaddresses":{"title":" Mes adresses","no_address":"Aucune Adresse Renseignée","delivery_address":"Adresse de livraison","billing_address":"Adresse de facturation","add_new_address":"Ajouter une adresse","create_new_address":"Créer une nouvelle adresse","edit_address":"Modifier une adresse","choose_address":"Choisir une autre adresse","choose_address_title":"Choisissez une adresse","modify_address":"Modifier","use_delivery_address":"Utiliser l'adresse de livraison","remove_address":"Supprimer","confirm_address":"Valider","update_address_success":"Votre adresse a été sauvegardé","phone":"Tél : ","form":{"firstname":"Prénom","lastname":"Nom","company":"Société","street":"Rue et voie","street_placeholder":"Rue, voie...","city":"Ville","zipcode":"Code postal","country":"Pays","phoneNumber":"Téléphone","more_info":"Plus d'informations","more_info_placeholder":"n° porte, batiment, code, etc...","countries":{"empty":"-","dz":"Algérie","ad":"Andorre","be":"Belgique","fr":"France","de":"Allemagne","at":"Autriche","gp":"Guadeloupe","gy":"Guyane","lu":"Luxembourg","ma":"Maroc","mq":"Martinique","yt":"Mayotte","md":"Monaco","nc":"Nouvelle Calédonie","pf":"Polynésie Française","re":"Réunion","bl":"Saint-Barthélemy","mf":"Saint-Martin","pm":"Saint-Pierre-et-Miquelon","ch":"Suisse","tn":"Tunisie","wf":"Wallis-et-Futuna"}}},"mynotifications":{"title":" Mes notifications","header":"J'aimerais recevoir une alerte par e-mail pour:","submit_button":"SAUVEGARDER"},"mydevices":{"title":"Appareils","application":"Application","device_count":"Nombre d'appareils","last_activity":"Dernière connexion","action":"Action","disconnect":"Déconnecter","disconnect_devices":"Déconnecter les appareils","disconnect_all_devices":"Déconnecter tous les appareils","no_devices":"Aucun appareil connecté"},"mysubscription":{"title":" Mon abonnement","confirm_unsubscribe_title":"Êtes-vous sûr de vouloir vous désabonner ?","confirm_unsubscribe_standard_subscription_content":"En annulant le renouvellement automatique, vous renoncez aux avantages de votre abonnement.","confirm_unsubscribe_loyality_discount_content":"En annulant le renouvellement de votre abonnement, vous renoncez à l'avantage que vous apporte le tarif dégressif.","no_subscription_title":"Aucun abonnement","no_subscription_desc":"Vous n'avez pas d'abonnement ADN en cours.","period":{"monthly":"Par mois","yearly":"Par an"},"current_sub":{"header":"Abonnement en cours","subscriber_since":"Vous êtes abonné depuis {{since}}","name_partners":"Partenaires","renewal_cancelled":"Renouvellement automatique annulé.","end_date":"Votre abonnement actuel est valide jusqu'au","renewal_date":"Cet abonnement sera renouvelé automatiquement le","sub_buttons":{"new_subscription":"Souscrire à un nouvel abonnement ADN","subscribe":"S'abonner à ADN","modify_sub":"Mettre à jour mon abonnement","cancel_sub":"Annuler le renouvellement automatique"}},"loyality_discount":{"popup_cta":"Tarif dégressif ?","popup_title":"Qu'est-ce que c'est ?","popup_content":"Votre fidélité est récompensée !\u003cbr /\u003e Plus vous restez abonné, plus le prix de votre abonnement diminue. Pour en savoir plus, rendez-vous sur la page de \u003ca href='/terms-of-use'\u003enos CGU\u003c/a\u003e.","popup_close":"J'ai compris !"},"next_sub":{"header":"Prochain abonnement","start_date":"Cet abonnement débutera le"},"coupon":{"header":"code promo","button":"ok"},"paybox":{"header":"Mode de paiement","invalid_payment_data":"Carte Bancaire non/plus valide!","creditcard":"Carte Bancaire •••• •••• •••• ","see_paypal":"Voir mon compte Paypal","update_card":"Mettre à jour"},"payments":{"header":"Mes achats","table":{"date":"date","price":"prix","method":"methode de paiement","type":"achat","start_date":"debut de validite","end_date":"fin de validite","invoices":"factures"}},"invoice":{"title":"FACTURE","order_date":"Date d'achat : ","payment_date":"Date de paiement : ","billing_address":"Adresse de facturation","product_header":"Produit","subscription":"Abonnement","monthly_subscription":"mensuel","yearly_subscription":"annuel","price_ht":"Prix HT","price_ttc":"Prix TTC","delivery_price":"Frais de Port","total_ht":"Total (HT)","total_ttc":"Total (TTC)","total":"Total ","payment_method":"Mode de paiement : ","vat_directive":" Application de la TVA du pays du consommateur : directive européenne 2008/8/EC – article 5","company_tel":"Tél","company_fax":"Fax","tva_number":"TVA Intracommunautaire","male":"M.","female":"Mme.","error_message":"Un problème est survenu si ça se reproduit n'hésitez pas à contacter le SAV"}},"subscription":{"title":"Abonnement","confirm_unsubscribe":"Êtes-vous sur de vouloir vous désabonner ?","no_subscription_title":"Aucun abonnement","no_subscription_desc":"Vous n'avez pas d'abonnement ADN en cours.","period":{"monthly":"Par mois","yearly":"Par an"},"current_sub":{"header":"Abonnement en cours","name_partners":"Partenaires","renewal_cancelled":"Renouvellement automatique annulé.","end_date":"Votre abonnement actuel est valide jusqu'au","renewal_date":"Cet abonnement sera renouvelé automatiquement le","sub_buttons":{"new_subscription":"Souscrire à un nouvel abonnement ADN","subscribe":"S'abonner à ADN","modify_sub":"Mettre à jour mon abonnement","cancel_sub":"Annuler le renouvellement automatique"}},"next_sub":{"header":"Prochain abonnement","start_date":"Cet abonnement débutera le"},"coupon":{"header":"code promo","button":"ok"},"paybox":{"header":"Mode de paiement","invalid_payment_data":"Carte Bancaire non/plus valide!","creditcard":"Carte Bancaire •••• •••• •••• ","see_paypal":"Voir mon compte Paypal","update_card":"Mettre à jour"},"payments":{"header":"Mes achats","table":{"date":"date","price":"prix","method":"methode de paiement","type":"achat","start_date":"debut de validite","end_date":"fin de validite","invoices":"factures"}},"invoice":{"title":"FACTURE","order_date":"Date d'achat : ","payment_date":"Date de paiement : ","billing_address":"Adresse de facturation","product_header":"Produit","price_ht":"Prix HT","price_ttc":"Prix TTC","delivery_price":"Frais de Port","total_ht":"Total (HT)","total_ttc":"Total (TTC)","total":"Total ","payment_method":"Mode de paiement : ","vat_directive":" Application de la TVA du pays du consommateur : directive européenne 2008/8/EC – article 5","company_tel":"Tél","company_fax":"Fax","male":"M.","female":"Mme.","error_message":"Un problème est survenu si ça se reproduit n'hésitez pas à contacter le SAV"}},"mydownloads":{"title":" Mes téléchargements","credit_download_link":"Choisir un fichier","credits":"Crédits","credit_number":"Crédit n","download_button":"Télécharger","available":"Disponible : ","no_results":"Vous n'avez pas de crédit de téléchargement. \u003ca href=\"/faq-download\" target=\"_blank\"\u003eEn savoir +\u003c/a\u003e","valid_through":"Valide encore"},"myhistoric":{"title":" Mon historique"},"mywatchlist":{"title":" Ma watchlist"},"security":{"title":"Sécurité du compte","not_subscribed":"Vous devez être abonné pour pouvoir profiter de cette fonctionnalité.","save":"Enregistrer","enable_security":"Sécurité du compte :","enable_security_description":"Le code pin sera demandé pour accéder à votre profil, afin de protéger les données du compte, et pour créer un nouveau profil.","enable_parental_control":"Contrôle parental :","enable_parental_control_description":"Le code pin sera demandé pour changer la catégorie d'âge d'un profil.","info_age_category":"Renseignez le code pin du compte pour modifier la catégorie d’âge du profil.","info_main_profile":"Renseignez le code pin du compte pour accéder à ce profil.","info_new_profile":"Renseignez le code pin du compte pour créer un nouveau profil.","title_two_factor":"Double authentification","secure_account":"Sécurisez davantage votre compte avec la double authentification. Un code à usage unique vous sera envoyé, selon la méthode choisie, par SMS ou par email à chaque tentative de nouvelle connexion sur votre compte ADN.","enable_two_factor_auth":"Activer la double authentification\u0026nbsp;:","sms":"Par SMS","email":"Par email","account_phone":"Numéro de téléphone du compte :","change_phone":"Changer de numéro de téléphone","account_email":"Email du compte :","change_email":"Pour changer d'email, rendez-vous dans l'espace ","change_email_link":"Gestion du compte","2fa_popup_cancel":"Annuler","2fa_popup_next":"Suivant","2fa_popup_header_step1":"Double authentification 1/3","2fa_popup_header_step2":"Double authentification 2/3","2fa_popup_header_step3":"Double authentification 3/3","2fa_popup_step1_message_password":"Pour paramétrer la double authentification sur votre compte, renseignez le mot de passe du compte ADN :","2fa_popup_step1_message_sms":"Renseignez votre n° de téléphone :","2fa_popup_step2_message_sms":"Afin de valider votre numéro, renseignez le code de vérification reçu par SMS :","2fa_popup_step2_message_email":"Afin de valider votre adresse mail, renseignez le code de vérification reçu sur l'email {{email}} :","2fa_popup_step3_message":"Double authentification activée avec succès !","2fa_popup_deactivate":"Pour désactiver la double authentification,\u003cbr/\u003e renseignez le mot de passe du compte ADN :"},"deleteaccount":{"title":" Supprimer mon compte","before_delete":"Avant de supprimer votre compte, \u003cbr /\u003e\u003cbr /\u003e \u003cstrong\u003eAssurez-vous que le renouvellement automatique de votre abonnement est bien annulé.\u003c/strong\u003e","once_deleted":"Une fois supprimé, vous ne pourrez plus accéder à votre \u003cbr /\u003e compte et toutes ses données seront supprimées.","confirm_delete":"Pour confirmer la suppression de votre compte, merci de renseigner votre mot de passe.","old_password":"Mot de passe actuel : ","confirm":"Valider"},"accountdeleted":{"deleted_account":"Suppression de votre compte","account_delete_confirm":"Votre compte a bien été supprimé. ","see_you_adn":"On espère vite vous revoir sur ADN !"},"changepassword":{"change_password":"Modifier mon mot de passe","use_form":"Utilisez le formulaire ci-dessous pour modifier votre mot de passe de votre compte ADN.","new_password":"Nouveau mot de passe : ","confirm_new_password":"Saisissez une seconde fois votre nouveau mot de passe : "},"validatemail":{"header":"VALIDATION DE VOTRE EMAIL","text_p01":"Un email vous a été envoyé à l'adresse ","text_p02":"Suivez les instructions de ce dernier pour valider votre adresse électronique.","button":"J'AI VALIDÉ MON EMAIL","not_validated_yet":"Vous n'avez pas encore validé votre adresse email. Veuillez vérifier votre boite mail et suivre les instructions de l'email envoyé avant de continuer.","resend_button":"Renvoyer l'email de validation"},"emailvalidated":{"header":"VOTRE EMAIL EST MAINTENANT VALIDÉ !","button":"CONTINUER"},"editmail":{"header":"MODIFIER MON ADRESSE EMAIL","text_account":"Utilisez le formulaire ci-dessous pour modifier l'adresse email de votre compte ADN.","text_profile":"Utilisez le formulaire ci-dessous pour modifier l'adresse email de votre profil ADN.","new_email_label":"Nouvelle adresse email :","current_password_label":"Mot de passe actuel :","button":"VALIDER"},"multilists":{"title":" Sélectionnées pour vous"},"moodboard":{"title":" Moodboard"},"surprises":{"title":" Surprises"},"banlist":{"title":"Titres bannis"},"contact_us":{"title":" Nous Contacter"},"logout":{"title":" Déconnexion"},"validatecoupon":{"title":"Ce coupon vous donne accès à :","period":"Durée","activate":"Activer"},"gdpr":{"par_01":"Les informations recueillies sur ce formulaire sont enregistrées par ADN Animation Digital Network pour permettre la création d'un compte. Vous pouvez exercer votre droit d'accès aux données vous concernant et les faire rectifier en vous adressant à ","par_02":"Pour plus d’informations, merci d’accéder à la Charte pour la ","contact_link":"nous contacter","personnal_data_link":"protection des données personnelles","must_accept_to_watch":"Pour accéder au contenu vous devez accepter les cookies du site"}},"profile":{"profile":"Profil de","profile_simple":"Profil","private_profile":"Ce profil est privé.","unauthenticated_profile":"Vous devez être \u003ca href='/login'\u003econnecté\u003c/a\u003e ou \u003ca href='/signup'\u003ecréer un compte\u003c/a\u003e pour voir ce profil.","viewingTime":"Heures \u003cbr /\u003e de visionnage","videoViewed":"Vidéos \u003cbr /\u003e vues","showStarted":"Séries commencées","videoRated":"Vidéos \u003cbr /\u003e notées","averageRating":"Note \u003cbr /\u003e moyenne","comment":"Commentaires","lastVisit":"Dernière visite il y a","video_viewed_list_title":"DERNIÈRES VIDÉOS VUES","video_rated_list_title":"DERNIÈRES VIDÉOS NOTÉES","video_commented_list_title":"DERNIÈRES VIDÉOS COMMENTÉES","video_status_timestamp":"il y a {{date}}","video_list_empty":"Aucune vidéo"},"catalog":{"order":{"title":"Tri : ","new":"les + récents","popular":"les + populaires","alpha":"ordre alphabétique"},"page":{"search_placeholder":"Recherche","content_title":"Catalogue : Animes, Films, OAV et Dramas","content_title_genre":"Animes, Films, OAV et Dramas du genre :","filter_toggle_button":"Filtres","loading_message":"Chargement...","empty_message":"Il n'y a aucun résultat correspondant à vos critères.","load_more":"Afficher plus"},"distribution":{"title":"ANIME EN","label_simulcast":"Simulcast","label_download":"Téléchargement","label_free":"Gratuit"},"type":{"title":"TYPES","label_eps":"Séries","label_mov":"Films","label_long":"Long-métrage","label_short":"Court-métrage","label_oav":"Oav"},"language":{"title":"LANGUES","label_vostfr":"VOSTFR","label_vf":"VF"},"quality":{"title":"QUALITÉ","label_fhd":"HD 1080P","label_hd":"HD 720P"},"age":{"title":"AGES","label_0":"Pour tous","label_10":"10 ans","label_12":"12 ans","label_16":"16 ans","label_18":"18 ans","label_no_restrictions":"Sans restriction"},"sections":{"label_japanese":"Animation japonaise","label_french_belgian":"Animation franco-belge","label_international":"International","label_youth":"Jeunesse"},"genres":{"title":"GENRES","label_arts_martiaux":"Arts Martiaux","label_aventure_action":"Aventure / Action","label_comedie":"Comédie","label_drame":"Drame","label_ecchi_fan_service":"Ecchi / Fan service","label_fantastique_science_fiction":"Fantastique / Science-Fiction","label_heroic_fantasy":"Heroic fantasy","label_historique":"Historique","label_jeunesse":"Jeunesse","label_josei":"Jôsei","label_mecha":"Mecha","label_musical":"Musical","label_nostalgie":"Nostalgie","label_policier_thriller":"Policier / Thriller","label_psychologie":"Psychologie","label_romance":"Romance","label_scolaire":"Scolaire","label_seinen":"Seinen","label_shojo":"Shôjo","label_shonen":"Shônen","label_sport":"Sport","label_violence":"Violence"}},"subscription_page_final":{"header":"Validation de votre commande","felicitation":"Félicitations\u0026nbsp;!","now_subscribe":"Vous êtes maintenant abonné(e) à ADN.","text":"Vous pouvez dès à présent profiter pleinement du catalogue ADN\u0026nbsp;!","title_survey":"Vous avez 30 secondes pour un petit questionnaire ? C’est par ici !","first_question":"Connaissiez-vous ADN ?","second_question":"Aviez-vous déjà pensé à vous abonner ?","third_question":"Quels en ont été les freins ?","four_question":"Quelles autres plateformes de streaming connaissez-vous ?","five_question":"Êtes-vous abonné à une autre plateforme de streaming ?","yes":"Oui","no":"Non","price":"Prix","catalog":"Catalogue","ergonomy":"Ergonomie","nothing":"Aucun","other":"Autre","redirect":"Accéder au site","which":"Laquelle ?"},"subscription_page_payment":{"gcu_label":" En finalisant votre achat, vous vous soumettez aux \u003ca href=\"https://animationdigitalnetwork.com/terms-of-use\" target=\"_blank\"\u003econditions générales d'utilisation\u003c/a\u003e et acceptez l'accès au contenu numérique de la plateforme en renonçant à votre droit de rétractation de 14 jours.","gcu_validation":"Vous devez accepter les Conditions Générales d'Utilisation pour continuer.","subscription_payment_header":"Récapitulatif de votre commande","subscription_payment_title":"Vérifiez que les informations sont exactes et choisissez votre mode de paiement.","commande_title":" Ma commande","button_continue":"Continuer","payments_title":" Mode de paiement","i_have_promo_code":"J'ai un code coupon","valider_coupon":"Valider","payments":{"by_credit_card":"Payez par carte bancaire","by_paypal":"Payez avec Paypal","redirect_info":" Vous serez redirigé vers les serveurs sécurisés de Paypal","pay_price_text":" Payer {{price}}"},"first_period":{"year_zero":"la première année","year_one":"la première année","year_other":"les {{count}} premières années","month_zero":"le premier mois","month_one":"le premier mois","month_other":"les {{count}} premiers mois","day_zero":"le premier jour","day_one":"le premier jour","day_other":"les {{count}} premiers jours"},"subscription_period":{"year_zero":"an","year_one":"an","year_other":"{{count}} ans","month_zero":"mois","month_one":"mois","month_other":"{{count}} mois","week_zero":"semaine","week_one":"semaine","week_other":"{{count}} semaines","day_zero":"jour","day_one":"jour","day_other":"{{count}} jours"},"subscription":{"title_mobile":"Abo. ","title_desktop":"Abonnement ","details":"Détails : ","coupon":"Coupon :","new_subscription_price":"Prix nouvel abonnement","discount":"Réduction ancien abonnement \u003csmall\u003e(au prorata des jours déjà consommés)\u003c/small\u003e","toPay":"Prix de la mise à jour","startDate":"Date d'application de la mise à jour","startDateNow":"Aujourd'hui","total":"Total","free_offer":"offert ","cancel_coupon":"Supprimer","recurring_info":"Puis {{price}} tous les {{period}} à partir du {{date}}.","trial_info":"Période d'essai :","cancel_info":"Vous pouvez annuler le renouvellement automatique à tout moment depuis votre compte ADN. Si vous choisissez Paypal, votre abonnement sera renouvelé 24h avant la fin de la période en cours.","cancel_info_trial":"Vous pouvez annuler le renouvellement automatique à tout moment depuis votre compte ADN. Si vous choisissez Paypal, votre abonnement sera renouvelé 24h avant la fin de la période d'essai."}},"subscription_page_validate_paypal":{"header":"Validation Paypal en cours...","please_wait":"Vérification en cours...","error":"Une erreur pendant la validation de votre paiement s'est produite. Veuillez contacter le service après-vente.","sav_button":"contacter le SAV"},"subscription_page_validate_credit_card":{"header":"Validation carte de crédit en cours...","please_wait":"Vérification en cours...","error":"Une erreur pendant la validation de votre paiement s'est produite. Veuillez contacter le service après-vente.","sav_button":"contacter le SAV"},"vod":{"shareText":"Partager :","insert":"Insérer","by_email":"Par mail","send":"Envoyer"},"send_email":{"title":"Partagez à un ami {{episodeTitle}}","email_label":"Destinataire","email_placeholder":"Adresse email du destinataire","message_label":"Message additionnel (facultatif)","email_incorrect":"Formulaire invalide : Veuillez vérifier les champs du formulaire"},"popup":{"close":"Fermer","send":"Envoyer"},"menu":{"videos":"Vidéos","videos_lowercase":"vidéos","heroes":"Héros","catalogue":"Catalogue","sub_new":"Nouveauté","our_offer":"Notre offre","home":"Accueil","interviews":"Interviews","participate":"Participer","forum":"Forum","suggestions":"Boite à idées","store":"Store","series":"Séries","sub_news":"Nouveautés","news":"News","twitch":"ADN TV+","sabonner":"S'abonner","my_profile":"Mon profil","downloads":"Téléchargement","my_history":"Mon Historique","my_watchlist":"Ma Watchlist","my_subscription":"Mon Abonnement","logout":"Déconnexion","all_shows":"Toutes les séries","change_profile":"Changer de profil","manage_account":"Gérer le compte","manage_profile":"Gérer mon profil","leave_youth_section":"Quitter la section jeunesse","free":"Gratuit"},"history":{"no_results":"Aucun historique"},"ban":{"no_results":"Aucun titre banni"},"footer":{"who_we_are":"Qui sommes-nous ?","you_and_me":" Vous \u0026 nous","faq":"FAQ","contact_us":"Contactez-nous","adn_team":"L'équipe ADN","recruitment":"Recrutement","most_popular_serie":" Séries les plus populaires","most_popular_show":" Anime les plus populaires","navigation":" Navigation","our_offers":"Nos offres","legal":" Légal","terms_of_service":"Conditions générales de vente","legal_notice":"Mentions Légales","privacy":"Charte pour la protection des données personnelles","gdpr_settings":"Paramètres des cookies","copyright":"© 2022 Animationdigitalnetwork.com est un site du groupe Média-Participations opéré par ADN - ANIMATION DIGITAL NETWORK."},"badges":{"episodes":{"text":"ÉPISODES","number":"15 000"},"shows":{"text":"SÉRIES","number":"530"},"films":"FILMS","multisupport":"MULTIPLATEFORME","no_engage":"SANS ENGAGEMENT"},"character_list":{"title":"Personnages clés de"},"show_advanced_metadata":{"title":"Fiche de l'anime : {{title}}","originalTitle":"Titre VO : ","direction":"Réalisation : ","originalWork":"Œuvre originale : ","scriptwriter":"Scénariste : ","music":"Musique : ","production":"Production de la série : ","opening":"Générique d’ouverture : ","ending":"Générique de fin : ","category":"Thèmes principaux : ","release":"Date de 1ère diffusion : ","audience":"Public : ","website":"Site officiel : "},"show_list":{"title":"Anime à voir ensuite","arrow_prev_title":"précédent","arrow_next_title":"suivant","winter":"Hiver","autumn":"Automne","summer":"Été","spring":"Printemps","available_at":"Disponible dans","free":"Gratuit"},"product_list":{"title":" DISPONIBLE SUR LE STORE","buy":"ACHETER","arrow_prev_title":"précédent","arrow_next_title":"suivant"},"comments":{"title":"Avis sur l'animé {{title}}","reply":"Répondre","remove":"Supprimer","anonymous":"Anonyme","validate":"Valider le message","moderate":"Modérer le message","comment_placeholder":"Il n'y a aucun commentaire actuellement. Soyez-le premier à réagir !","adn_team":"L'équipe ADN","confirm_remove":"Voulez-vous vraiment supprimer ce commentaire ?","confirm_moderate":"Raison de la modération (laisser vide pour annuler) ?","confirm_validate":"Raison de la validation (laisser vide pour annuler) ?","no_access":"Vous devez \u003cspan\u003eêtre connecté\u003c/span\u003e pour poster un commentaire","not_available":"Vous ne pouvez pas commenter une série/vidéo non publiée","posted_ago":" Posté il y a {{date}}","post_comment":"Poster un commentaire","reply_comment":"Répondre à {{username}}","write_message":"Rédiger un message :","add_spoiler_tag":"Ajouter une balise spoiler","spoiler_info":"Lors de l'utilisation de la balise spoiler, écrire le commentaire comme suivant : \u003cstrong\u003e[spoiler] votre texte ici [/spoiler]\u003c/strong\u003e","preview_message":"Prévisualisation de votre réponse :","accept_terms":"En postant, vous acceptez de respecter {{link}} .","regulations":"le réglement des commentaires d'ADN","button_cancel":"ANNULER","button_reply":"RÉPONDRE","button_post":"POSTER","load_more":"Charger plus de commentaires"},"time_conversion":{"today":"Aujourd'hui","yesterday":"Hier","tomorrow":"Demain","years":"ans","year":"an","months":"mois","month":"mois","weeks":"semaines","week":"semaine","days":"jours","day":"jour","hours":"H","hour":"H","hourMin":"h","minutes":"min","minute":"min","seconds":"s","second":"s"},"dates":{"mondays":"Lundis","tuesdays":"Mardis","wednesdays":"Mercredis","thursdays":"Jeudis","fridays":"Vendredis","saturdays":"Samedis","sundays":"Dimanches","every":"Tous les","at":"À"},"showlist":{"recommended":"Rien que pour vous","recently_watched":"Reprendre mes séries en cours","manga":"Séries adaptées de manga","simulcast":"Les simulcasts","movie":"Les films","youth_videos":"Top vidéos jeunesses"},"error_page":{"404":"404","500":"500","page_title":"404 - Erreur: 404","page_title500":"500 - Erreur: 500","no_chance":"Pas de chance...","internal_error":"Une erreur s'est produite","return_to_home":"Retour à l'accueil","contact_our_team":"Contacter notre équipe","check_catalogue":"Découvrir notre catalogue","page_unavailable":"Cette page n'est pas disponible dans votre pays","content_unavailable":"Ce contenu n'est pas disponible dans votre pays"},"embedded_page":{"not_available":"Cette vidéo n'est pas/plus disponible.\u003cbr /\u003eRetrouvez toutes nos vidéos \u003ca href='/video'\u003esur notre catalogue\u003c/a\u003e."},"surprise":{"title":"Surprises","first_p":"Vous ne savez pas quoi regarder ?","second_p":"Cliquez sur « GO » et laissez faire le hasard\u0026nbsp;!","go":"GO"},"moodboard":{"first_p":"Sélectionnez 3 humeurs parmi les choix ci-dessous","result":"Résultats :"},"recommendation":{"title":"Sélectionnées pour vous","first_p":"Vous trouverez ici des séries qui pourraient vous plaire.\u003cbr /\u003eNous nous sommes basés sur ce que vous avez déjà visionné pour vous les présenter.","ban":"Supprimer de mes recommandations"},"seo":{"title":"Le site français au service du stream d’animation et anime en vostfr et vf.","description_page":"Animation Digital Network, c’est le meilleur de l’animé en direct du Japon! Découvrez en streaming en VO ou VF : One Piece, Dragon Ball, Naruto, Fairy Tail, Oshi No Ko, Yu-Gi-Oh, L’Attaque des Titans, etc.","keywords":"streaming, VOD, animé, japonais, anime, alternative légale, vidéo à la demande, ADN, vostfr, vostf, vf, vo, replay, manga, version française, version originale, version doublée, dessin animé, gratuit, abonnement","description_homepage":"\u003cb\u003eQuels genres d'animés propose ADN ?\u003c/b\u003e\u003cbr /\u003eADN propose un très large choix d’animés en ligne, disponible en quelques clics seulement. Le manga s’étant aujourd’hui largement démocratisé, c’est ainsi que coexiste une multitude de genres et de sous-genres. Retrouvez, par exemple, le shônen, le fer de lance de l’animation japonaise. Le shôjo quant à lui, vise un public plus féminin. Vous retrouverez également les indémodables mangas de sport, comme \u003ca href='/video/885-hajime-no-ippo-the-fighting'\u003eHajime no Ippo\u003c/a\u003e ou \u003ca href='/video/952-ashita-no-joe'\u003eAshita no Joe 2\u003c/a\u003e, dont le côté initiatique fonctionne toujours à merveille. Mais les animes, c’est aussi une bonne dose d’humour et de bonne humeur, avec le très original \u003ca href='/video/344-assassination-classroom'\u003eAssassination Classroom\u003c/a\u003e, par exemple.\u003cbr /\u003eIl existe aussi des animes orientés pour les plus jeunes. Ils représentent une très bonne porte d’entrée dans le monde des animes en streaming. Vous l’aurez compris, il y en a pour tous les goûts sur ADN.\u003cbr /\u003e\u003cbr /\u003e\u003cb\u003eQuelles sont les possibilités de paramétrage qu'offrent ADN pour les séries et les films disponibles en streaming ?\u003c/b\u003e\u003cbr /\u003ePour une expérience réussie, vous pouvez paramétrer précisément de nombreux critères.  Vous retrouverez vos animés répartis en 3 catégories : simulcast, téléchargement ou visionnage gratuit.\u003cbr /\u003eChoisissez la langue qui vous convient entre animés en VOSTFR ou en VF. Ceux-ci sont disponibles en HD, avec comme qualité 720p et 1080p.\u003cbr /\u003eÉvidemment, l’expérience ADN est complètement personnalisable. Créez ainsi vos propres watchlist, séries coups de cœur et déposez votre avis ou commentaire concernant les séries de votre choix. Plusieurs types d’abonnements sont disponibles selon vos envies, chacun multi-supports.\u003cbr /\u003e\u003cbr /\u003e\u003cb\u003eQuelles sont les têtes d’affiche d'animés en streaming sur ADN ? \u003c/b\u003e\u003cbr /\u003eADN propose quelques-uns des animes incontournables de notre époque et d’avant. Quel que soit le genre, vous retrouverez un certain nombre de classiques. Envie d’un shônen de qualité ? \u003ca href='/video/265-naruto-shippuden'\u003eNaruto Shippuden\u003c/a\u003e, \u003ca href='/video/457-boruto-naruto-next-generations'\u003eBoruto\u003c/a\u003e et \u003ca href='/video?search=One%20piece'\u003eOne piece\u003c/a\u003e en streaming vous attendent sur notre site. ADN, ce sont aussi des oeuvres certes plus anciennes, mais toujours aussi indémodables telles que \u003ca href='/video/851-akira'\u003eAkira\u003c/a\u003e, \u003ca href='/video/582-albator'\u003eAlbator\u003c/a\u003e, \u003ca href='/video/946-cobra'\u003eCobra\u003c/a\u003e, \u003ca href='/video/957-lady-oscar'\u003eLady Oscar\u003c/a\u003e et bien d’autres...\u003cbr /\u003eADN propose également des nouveautés incontournables telles que \u003ca href='/video/912-call-of-the-night'\u003eCall of the Night\u003c/a\u003e, \u003ca href='/video/973-the-eminence-in-shadow'\u003eEminence in Shadow\u003c/a\u003e ou encore \u003ca href='/video/908-my-isekai-life'\u003eMy Isekai Life\u003c/a\u003e.\u003cbr /\u003eSi vous avez une question concernant notre offre, n’hésitez pas à prendre contact avec nous via notre site web, nous nous ferons un plaisir de vous répondre.","description_onboarding":"\u003cb\u003eQuels animes en VF ou en VOSTFR propose ADN ?\u003c/b\u003e\u003cbr /\u003e\u003cbr /\u003eUne multitude de thématiques et d’animes vous attendent sur ADN ! C’est bien simple il y’en a pas tous les goûts, tous les âges, toutes les envies. En premier lieu, retrouvez les incontournables shonen, ces animés avec un fort côté initiatique où le héros progresse en compétence au fur et à mesure de l’aventure. L’amitié, le courage, le dépassement de soi sont des thèmes majeurs de ce type d’animé. Retrouvez donc les grands classiques tels que \u003cb\u003eOne Piece\u003c/b\u003e, L’Attaque des Titans, \u003cb\u003eNaruto\u003c/b\u003e, Death Note, Boruto, Fairy Tail et bien d’autres encore !\u003cbr /\u003eMais ADN, c’est aussi des mangas plus légers, pour passer un bon moment, seul ou avec des amis. Quelques exemples ? Docteur Slump, Tom Sawyer, ou le très original Assassination Classroom sont à dévorer sans attendre.\u003cbr /\u003eÀ l’inverse, vous souhaitez embarquer pour un univers plus sombre, violent voire dérangeant ? The Promised Neverland, Claymore, The Garden of Sinners, Tokyo Ghoul, Goblin Slayer ou Ken le Survivant sont faits pour vous.\u003cbr /\u003eLes animes sont aussi particulièrement développés sur la thématique du sport. Dans cette rubrique, il y en a pour tous les goûts ! Voiture, football américain, volley et bien sûr les incontournables Kuroko's Basket, Captain Tsubasa, Slam Dunk.\u003cbr /\u003eSouvent destinés aux filles (mais pas que !), les shojo nous racontent des histoires d’adolescentes, souvent pleines de rebondissements et de dialogues passionnants. Vous l’avez compris, il y en a littéralement pour tous les goûts sur le site ADN.\u003cbr /\u003e\u003cbr /\u003e\u003cb\u003eComment trouver facilement les mangas Vostfr ou VF ?\u003c/b\u003e\u003cbr /\u003e\u003cbr /\u003eVous souhaitez plonger dans le monde du manga, mais vous n’avez pas de titres précis en tête ? Aucun souci, ADN vous accompagne pour trouver LA perle qui occupera vos soirées. Notre système de filtre vous aide à choisir l’animé idéal.\u003cbr /\u003e\u003cul\u003e\u003cli\u003eAnime en simulcast, téléchargement ou bien gratuit\u003c/li\u003e\u003cli\u003eLes séries, films ou OAV\u003c/li\u003e\u003cli\u003eLa langue de votre animé (VF ou VOSTFR)\u003c/li\u003e\u003cli\u003eLa qualité (720p, 1080p)\u003c/li\u003e\u003cli\u003eLa tranche d’âge ciblé\u003c/li\u003e\u003cli\u003eLe genre (shonen, shojo, seinen,  aventure, comédie, drame...)\u003c/li\u003e\u003c/ul\u003e\u003cbr /\u003eVous l’avez compris, vous avez toutes les cartes en main pour parfaitement choisir l’œuvre qui vous convient. Pour les plus curieux, notre onglet nouveautés vous attend avec les dernières grosses sorties. Au fur et à mesure de vos visionnages, des recommandations personnalisées vous seront proposées, entièrement basées sur vos goûts et vos préférences.\u003cbr /\u003eQue vous soyez friand de \u003cb\u003emanga en vostfr\u003c/b\u003e ou en vf, vous retrouverez l’anime idéal pour vous. Multisupport, le site ADN est tout aussi bien disponible sur tablette, sur ordinateur ou sur votre mobile.","description_catalog_genre":"Animation Digital Network c'est le meilleur de l'animé en direct du Japon ! Découvrez en streaming les animés, films, OAV et dramas dans le genre"},"forum_page":{"forum":"Forum","welcome":"Bienvenue sur le forum d'ADN !","new_topics":"Sujets récents","forum_topics":"Sujets du forum","ago":"Il y a","the":"Le"},"subscription_page":{"page_title":"Anime Japonais - Toutes les offres d'abonnement de  streaming légal manga | ADN","monthly":"Mensuel","yearly":"Annuel","pick_monthly_subscription":"Choisissez votre forfait mensuel !","pick_annual_subscription":"Choisissez votre forfait annuel !","change_anytime":"Sans engagement, il est modifiable à tout moment.","save_money":"Faites des économies sur le total en payant l'année en une fois.","streaming":"Streaming","download":"Download","current_subscription":"Actuellement","month":"mois","year":"an","equal_to":"Équivalent à ","pay_once":"Paiement en une fois","no_limit":"illimités","month_credits":"Crédits de téléchargement par mois\u003csup\u003e1 \u003c/sup\u003e","collection":"Pour collectionner vos séries préférées ou profiter de vos contenus vraiment partout !","loyalty_discount":"Tarif dégressif","loyalty_discount_description":"Le prix de votre abonnement diminue en fonction de votre ancienneté !","multiprofile":"Multiprofil","multiple_devices":"Jusqu'à 4 écrans simultanés","screens":"Accès multi-écrans\u003csup\u003e2 \u003c/sup\u003e","catalog":"Accès à tout le catalogue et aux films","quality":"Haute définition (qualité 1080p)\u003csup\u003e3 \u003c/sup\u003e","language":"Langues : VOSTFR / VF\u003csup\u003e4 \u003c/sup\u003e","adFree":"Pas de publicité","continue":"Continuer","better_than_monthly":"Vous économisez par rapport à l'abonnement mensuel","download_credit":"\u003csup\u003e1 \u003c/sup\u003eLes crédits de téléchargement sont valables sur les séries du catalogue en fonction des droits disponibles. Il n'est pas possible de télécharger à partir des applications.","screens_credit":"\u003csup\u003e2 \u003c/sup\u003eADN est disponible sur la télévision via les applications Android TV, Chromecast et Apple TV, les smartphones et tablettes via les applications Android et iOS et les ordinateurs via internet.","quality_credit":"\u003csup\u003e3 \u003c/sup\u003eLa disponibilité des vidéos en HD dépend de votre FAI (fournisseur d'accès internet) et des capacités de vos appareils. Les contenus ne sont pas tous disponibles en haute définition.","language_credit":"\u003csup\u003e4 \u003c/sup\u003eLes contenus ne sont pas tous disponibles en version française.","learn_more":"Pour en savoir plus, veuillez consulter les \u003ca href='/terms-of-use'\u003econditions d'utilisation.\u003c/a\u003e","coupon_only_available_with_subscription":"Vous ne pourrez pas bénéficier de ce coupon avec cet abonnement. Êtes-vous sur ?","christmas_offer_subtitle":"OFFRE DÉCOUVERTE : 1 MOIS D’ABONNEMENT GRATUIT ! Partageons ensemble l’esprit des fêtes de fin d’année ! Profitez de petits moments de bonheur et de complicité devant vos titres préférés."},"notification_popup":{"header":"S'inscrire aux notifications ?","accept_button":"Oui","decline_button":"Non"},"landing_pages":{"watch_show":"Voir l'anime","show_suggestions":"Si vous aimez visionner les animes en streaming, n’hésitez pas à consulter \u003ca href = '/video'\u003ele catalogue d’ADN\u003c/a\u003e dans lequel nous vous proposons une large sélection de séries."},"forgot_password":{"enter_email":"Veuillez saisir l'adresse e-mail associée à votre compte d'utilisateur. Un code de vérification vous sera adressé. Lorsque vous le recevrez, vous pourrez choisir un nouveau mot de passe","title":"Adresse e-mail : *"},"subscription_auth_page":{"header":"IDENTIFICATION","subheader":"Rejoignez-nous en vous connectant ou en créant un compte ADN","login_header":"Déjà inscrit","login_subheader":"Identifiez-vous ci-dessous","registration_header":"Pas encore inscrit","registration_subheader":"N'attendez plus ! Rejoignez la communauté ADN","registration_button":"Créer un compte","email_validation_subheader":"VOTRE EMAIL DOIT ÊTRE VÉRIFIÉ AVANT TOUT ABONNEMENT"},"subscription_payment_method_updated":{"header":"Mise à jour de votre moyen de paiement","sub_header":"Félicitations","sub_header_box":"Votre moyen de paiement est maintenant à jour.","text":"Vous pouvez dès à présent profiter pleinement du catalogue ADN","button":"Accéder au site"},"forgot_username":{"enter_email":"Veuillez saisir l'adresse e-mail associée à votre compte d'utilisateur. Votre Pseudo vous sera envoyé à cette adresse."},"update_credit_card":{"title":"Mise à jour de votre moyen de paiement","update":"Mettez à jour votre carte bancaire.","fill_new_cc":"Renseignez votre nouvelle carte bancaire","confirm":"Valider","cardholder_name":"Titulaire de la carte","cardholder_placeholder":"Nom Prénom","card_number":"Numéro de carte","card_number_lowercase":"numéro de carte","expiration_date":"Date d'expiration","security_code":"Code de sécurité","secure_page":"Page 100% sécurisée","secure_payment":"Paiement 100% sécurisé","months":"Mois","years":"Année","invalid_cvc":"Le code de sécurité est invalide.","invalid_date":"La date est invalide.","invalid_cc":"Votre numéro de carte de paiement est invalide.","invalid_cardholder":"Le titulaire de la carte est invalide.","authorized_cc":"Seules les cartes VISA, Mastercard et Maestro sont acceptées."},"dummy_page":{"forum_will_comeback_soon":"Le forum sera bientôt de retour...","maintenance":"Maintenance","subscription_maintenance":"Nous sommes désolés mais notre service abonnement est indisponible temporairement. Il sera de nouveau opérationnel ce mardi 27 octobre en début d'après-midi. Merci de votre compréhension et de votre patience."},"avatar_editor":{"avatar_selection":"Sélection de l'avatar","background_not_select":"* Attention, les fonds ne sont\u003cbr /\u003epas sélectionnables avec\u003cbr /\u003eles avatars exclusifs.","background_not_select_mobile":"* Attention, les fonds ne sont pas sélectionnables avec les avatars exclusifs.","available":"Série disponible sur"},"commercial_operation":{"title":"Du 16 au 30 mars\u003cbr /\u003e\u003cspan\u003eL'abonnement streaming mensuel passe à \u003cstrong\u003e1€\u003c/strong\u003e\u003csup\u003e*\u003c/sup\u003e\u003c/span\u003e","subtitle":"* Promotion applicable uniquement sur le 1er mois d'abonnement. Non valable pour les abonnements en cours.","button_title":"J'en profite","currently":"En ce moment*","currentlybis":"En ce moment","period":"* Opération en cours du 14 décembre au 4 janvier","periodbis":"Opération en cours du 16 au 30 mars"},"alert_message":{"tickets_alert":"Suite à un très grand nombre de tickets reçus, des retards dans le traitement des demandes sont à prévoir. Nous faisons notre maximum pour répondre à tous dans les meilleurs délais. Nous vous remercions de votre compréhension."},"registration_success":{"success_message":"Votre création de compte est maintenant finalisée !\u003cbr /\u003eGrâce à votre compte, vous pouvez :","services_message":"Regarder des centaines de vidéos disponibles gratuitement, créer une watchlist, accéder à votre historique, poster des commentaires sur vos séries et vidéos favorites.","access_to":"Accéder au service","experience_message":"Pour une expérience illimitée, avec accès aux applications,\u003cbr /\u003eaux VF et à la HD sans publicités, jetez un coup d'oeil à nos abonnements !"},"what_is_it":{"title":"Qu'est-ce que c'est ?","responsible":"La consommation responsable signifie que :","quality":"La qualité de vos vidéos est configurée en 480p.","auto_read":"La lecture automatique est désactivée.","profile":"Dans votre profil, ces 2 éléments sont donc pré-paramétrés sur ces modes écologiques et un signe distinctif apparaît dans votre avatar.\u003cbr /\u003eNotre planète vous dit merci !","button":"OK"},"watchlist":{"released_ago":"Ajouté il y a {{date}}","video_not_available":"Pas encore disponible","show_not_available":"Cette série n'est plus disponible sur le site","distribution_not_available":"Cette série n'est pas disponible dans votre pays","error":"Connectez-vous !","add":"Ajouter à la watchlist","remove":"Retirer de la watchlist","share_disable":"Ne plus partager","share_enable":"Activez le partage de watchlist","watch":"À voir: ","next":" Prochain: ","next_video_number":"Episode n°  {{number}} ","last":" Dernière sortie: ","view_button":"Voir","no_results":"Ajouter des séries, des films ou des OAV à votre watchlist, pour suivre et partager vos animes favoris.","delete_button":"Supprimer"},"formula":{"title":"Choisissez la formule qui vous plaît !","description":"Mensuel ou annuel ? Avec ou sans option téléchargement ? À vous de choisir !","conditions":"Pour en savoir plus, veuillez consulter les \u003ca href='/terms-of-use'\u003econditions d'utilisation\u003c/a\u003e.","free":{"title":"Gratuit","free_episodes":"Des centaines d'épisodes gratuits","free_episodes_asterisk":"Liste des séries gratuites dispnonible ici :","access_history":"Accès à votre historique et votre watchlist","ads_presence":"Présence de publicités","quality_limit":"Accès limité au 480p","create_account":"Je créé un compte gratuit"},"premium":{"title":"Premium","full_catalog_access":"Accès à tout le catalogue sans restriction","access_full":"Accès à votre historique, votre watchlist et vos recommandations","no_ads":"Aucune publicité","hd_access":"Accès à la HD","hd_access_asterisk":"Les contenus ne sont pas tous disponibles en haute définition.","download_option":"Option téléchargement","download_option_description":"(13 vidéos téléchargeables/mois ou téléchargement illimité/an)","download_option_asterisk":"Les contenus ne sont pas tous disponibles en téléchargement."},"common":{"comments_feature":"Participation aux commentaires","mutiple_devices":"Multi-supports","multiple_devices_description":" (ADN est disponible sur la télévision via les applications Android TV, Apple TV, Chromecast, PS4 et Xbox, les smartphones et tablettes via les applications Android et iOS et les ordinateurs via internet.)","multiprofiles":"Multiprofil","multiple_devices":"Jusqu'à 4 écrans simultanés","language":"VOSTFR/VF","language_asterisk":"En fonction de leur disponibilité.","loyalty_discount":"Tarif dégressif","loyalty_discount_description":"\u003cbr /\u003eLe prix de votre abonnement diminue en fonction de votre ancienneté !"},"price":{"per_month":"{{price}}€/mois","per_year":"{{price}}€/an","economy":"Soit {{price}}€ d'économie","no_engagement":"Sans engagement"},"action":{"create_account":"JE CRÉE UN COMPTE GRATUIT"}},"heroes":{"title":"Les héros","page_title":"ADN | Les Héros des dessin-animés | Anime en streaming VF et VOSTFR"},"banlist":{"text":"Retrouvez ici les titres que vous avez bannis de vos recommandations. Vous pouvez changer d'avis en les supprimant de cette liste.\u003cbr /\u003e\u003cbr /\u003eLes recommandations que vous verrez sur le site seront en partie basées sur cette liste.","remove_button":"Supprimer de la liste"},"livestream":{"ottera":{"header":"Épisodes suivants"}},"new_domain":{"announcement":"Anime Digital Network se transforme en \u003cspan\u003eAnimation Digital Network\u003c/span\u003e !!\u003cbr /\u003ePensez à mettre à jour votre URL.\u003cbr /\u003eNous mettons tout en œuvre pour que vous n'ayez aucun ralentissement ! Merci de votre soutien."},"sondage_popup":{"content":"Parlez-nous de votre relation avec l’univers des anime et tentez de gagner","reward":"1 an d’abonnement","participate":"Je participe !"},"page_title":{"title":"ADN | Anime streaming en VOSTFR et VF"}}}},"initialLocale":"fr","ns":["common"],"userConfig":{"i18n":{"defaultLocale":"fr","locales":["fr","de"],"localeDetection":false},"fallbackLng":{"default":["fr"]},"localePath":"/var/task/i18n/locales","reloadOnPrerender":true,"default":{"i18n":{"defaultLocale":"fr","locales":["fr","de"],"localeDetection":false},"fallbackLng":{"default":["fr"]},"localePath":"/var/task/i18n/locales","reloadOnPrerender":true}}}},"__N_SSP":true},"page":"/video/[show]","query":{"show":"315-no-game-no-life"},"buildId":"iyQTl64NN8C5sAy274F3k","isFallback":false,"isExperimentalCompile":false,"gssp":true,"locale":"fr","locales":["fr","de"],"defaultLocale":"fr","scriptLoader":[]}</script>
  <script id="hotjar" data-nscript="afterInteractive">(function (h, o, t, j, a, r) {
      h.hj = h.hj || function () { (h.hj.q = h.hj.q || []).push(arguments) }
      h._hjSettings = { hjid: 2359970, hjsv: 6 };
      a = o.getElementsByTagName('head')[0];
      r = o.createElement('script');
      r.async = 1;
      r.src = t + h._hjSettings.hjid + j + h._hjSettings.hjsv;
      a.appendChild(r)
    })(window, document, 'https://static.hotjar.com/c/hotjar-', '.js?sv=');</script>
  <script id="bcs"
    data-nscript="afterInteractive">window.__symbol_bcs_sirdata_overwrites_it_and_it_breaks_react = window.Symbol</script>
  <script src="https://cache.consentframework.com/js/pa/27993/c/LrSl1/stub" data-cfasync="false"
    referrerpolicy="unsafe-url" type="text/javascript" data-nscript="afterInteractive"></script>
  <script src="https://choices.consentframework.com/js/pa/27993/c/LrSl1/cmp" data-cfasync="false"
    referrerpolicy="unsafe-url" type="text/javascript" data-nscript="afterInteractive"></script>
  <script type="text/javascript" data-cmp-src="" data-nscript="afterInteractive"></script>
  <script src="https://www.google-analytics.com/analytics.js" async="true" data-nscript="afterInteractive"></script>
  <next-route-announcer>
    <p aria-live="assertive" id="__next-route-announcer__" role="alert"
      style="border: 0px; clip: rect(0px, 0px, 0px, 0px); height: 1px; margin: -1px; overflow: hidden; padding: 0px; position: absolute; top: 0px; width: 1px; white-space: nowrap; overflow-wrap: normal;">
    </p>
  </next-route-announcer>
  <script src="//cdn-a.yieldlove.com/yieldlove-bidder.js?animedigitalnetwork.fr" async="true" defer="true"
    type="text/javascript" data-nscript="afterInteractive"></script><iframe name="__sdcmpapiLocator"
    style="display: none;"></iframe><iframe name="__tcfapiLocator" style="display: none;"></iframe>
  <script data-cmp-src="https://securepubads.g.doubleclick.net/tag/js/gpt.js" data-cmp-vendor="755"
    data-cmp-purpose="1,3,4" data-cmp-purposes-li="2,7,9,10"
    data-cmp-fallback-src="https://pagead2.googlesyndication.com/tag/js/gpt.js" data-cmp-fallback-vendor="755"
    data-cmp-fallback-purposes-li="2,7,9,10" async="" defer="" data-cmp-handled="1"></script>
  <script data-cmp-src="/vendor/ads/interstitiel.min.js" async="" defer="" data-cmp-handled="1"></script><iframe
    id="Bpm6lM3w" frameborder="0"
    src="chrome-extension://ekhagklcjbdpajgpjgmbionohlpdbjgc/translateSandbox/translateSandbox.html"
    style="width: 0px; height: 0px; display: none;"></iframe>
  <script src="/_next/static/chunks/7536-051d0de4ef9bc9ad.js"></script>
  <script src="/_next/static/chunks/9491-6fcde69d78e87c27.js"></script>
  <script src="/_next/static/chunks/9185-2d23de81aa7b5293.js"></script>
  <script src="/_next/static/chunks/338-978e6a66f154811c.js"></script>
  <script src="/_next/static/chunks/pages/video/%5Bshow%5D/%5Bvideo%5D-8960e3721917031e.js"></script>
  <div id="sd-cmp" class="sd-cmp-1EpGs sd-cmp-ziEj0"
    style="--background-color: #FFFFFF; --main-color: #202942; --title-color: #202942; --text-color: #8492A6; --border-color: #F0F0F0; --overlay-color: #F9F9F9; --background-color-dark: #FFFFFF; --main-color-dark: #202942; --title-color-dark: #202942; --text-color-dark: #8492A6; --border-color-dark: #F0F0F0; --overlay-color-dark: #F9F9F9; --border-radius: 24px; --font-family: Helvetica; --font-family-title: Helvetica; --provider-logo: url(data:image/svg+xml;base64,PHN2ZyBpZD0iTE9HT19CTFVFIiBkYXRhLW5hbWU9IkxPR08gQkxVRSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgdmlld0JveD0iMCAwIDQwMTkuODkgMTc3NS43NiI+PGRlZnM+PHN0eWxlPi5jbHMtMXtmaWxsOm5vbmU7fS5jbHMtMntmaWxsOiM2ZWQyMTY7fS5jbHMtM3tjbGlwLXBhdGg6dXJsKCNjbGlwLXBhdGgpO30uY2xzLTR7ZmlsbDojMjAyOTQyO308L3N0eWxlPjxjbGlwUGF0aCBpZD0iY2xpcC1wYXRoIj48cGF0aCBpZD0iTUFTUVVFIiBjbGFzcz0iY2xzLTEiIGQ9Ik00MDM4LjQyLDE0OCwxNDg4LjcsMTQyLjQyczM1NC4zMiwyNzAuNywzMjkuMzgsODA1YzAsMCwyLjY5LDMxMS42OC0yNTIuNTUsNTgwLjU0bDI0NzIuODktMTQuNzVaIi8+PC9jbGlwUGF0aD48L2RlZnM+PGcgaWQ9IlBBU1RJTExFIj48cGF0aCBjbGFzcz0iY2xzLTIiIGQ9Ik02OS4yNSwxMjE3LjY1YzEyLjkzLDAsMjgsNC40Myw0NS4yNSwxMyw4LjYyLDMuMjQsMTcsNi44LDI1LjA3LDEwLjUyczE3LjQ5LDguMzgsMjguMjksMTMuNzZBNzYwLjQ3LDc2MC40NywwLDAsMCwyNDMsMTI4MHE0Mi43NSwxMiwxMDQuMzQsMTYuOTJjNC4yNywxLjE5LDEwLjIsMS41OSwxNy43NSwxLjU5cTU0LjkzLDMuMzMsOTUuMzYtOS42NnQ2OC0zMi4zNWMxOC4zMS0xNCwzMi41OS0yOS41OCw0Mi43OS00Ni45MWExMzQuNywxMzQuNywwLDAsMCwxOC42Mi01My4zMSw0OC40OSw0OC40OSwwLDAsMSwuNzktOC4xNSw1Miw1MiwwLDAsMCwuODMtOC4wN3EwLTQzLjU0LTI0LjI5LTgwLjg0UTU0MywxMDIzLjc1LDQ5Ny42OSw5OTQuNnEtNDUuMTktMzAuNzItMTA0LjIxLTU1Ljc3VDI3MS40LDg4OS41MXEtNTkuODgtMjIuNjUtMTAzLjUtNTQuMTFUOTUuMTIsNzY1LjA4Yy0zMy4xOC00NC01MS4xOC05MS42OC01NC41NC0xNDMuMTdhODg5LjUxLDg4OS41MSwwLDAsMCwyMy4zLDU5Ni42QTQyLjI4LDQyLjI4LDAsMCwxLDY5LjI1LDEyMTcuNjVaIi8+PHBhdGggY2xhc3M9ImNscy0yIiBkPSJNMTczNi4xNiw3OTAuOWExOTUuNDUsMTk1LjQ1LDAsMCwxLTQ2LjA4LDEwLjQ0LDQzNi40MSw0MzYuNDEsMCwwLDEtNDYsMi40NmMtNy42LDAtMTQuMzYtLjI1LTIwLjI1LS44cy0xMS41OS0uNzktMTctLjc5YTIwNS4yNywyMDUuMjcsMCwwLDAtMzIuMzUsMy4xN2MtMTIuOSwyLjEzLTI3LDctNDIsMTQuNjMtMTQsNy41MS0yOC4wOCwxOC00MiwzMS41NnEtMjEsMjAtMzUuNjEsNTUuNzdjLTYuNDQsMTUtMTEuNjIsMzIuODMtMTUuMzQsNTMuMzFzLTUuNjgsNDMuNTktNS42OCw2OS41M1YxMjA4YTMwMi4xOSwzMDIuMTksMCwwLDEtOS43LDc1LjIzLDE5Ny4yMiwxOTcuMjIsMCwwLDEtMzIuMzEsNjguNjZxLTIyLjY4LDMwLjc1LTYwLjYzLDQ5LjM1dC05MywxOC41OVYxMTY0LjI5bC0xLjU4LTExMS41MnEwLTgwLjkxLDIzLjQyLTE1MS4xN1QxMzMwLjM3LDc3OGEzNTIuMzQsMzUyLjM0LDAsMCwxLDExMS41Ny04Mi41OHE2NC43MS0zMC43MSwxNDcuMTMtMzAuNjlBNDAyLjQ4LDQwMi40OCwwLDAsMSwxNjY3LjUsNjcycTM2LjM4LDcuMzgsNjMuODcsMTUuMzVjNy44OCwyLjM3LDE1LjQ3LDQuOSwyMy4xMSw3LjQzQzE2NjYuMTksMjk3LjI5LDEzMTEuOSwwLDg4Ny44MywwLDYwMy40MywwLDM1MC41LDEzMy44OCwxODgsMzQxLjg0YzI5LjI2LTE3LjA5LDU5LjkxLTI5LjI3LDkyLjE5LTM2LDM2LjE1LTcuNTIsNzAuODMtMTAuNzYsMTA0LjM0LTkuNjksOC41NywwLDE0LjUxLjU1LDE3Ljc1LDEuNThRNTA5LDMwNS44Niw1ODEsMzMyLjUxdDExNS42MSw1Ny4zNHEyMi42NSwxNC42NywzNy4xOCwyOC4zMkEzNDguNzIsMzQ4LjcyLDAsMCwxLDc1OCw0NDMuMjhjNy41Niw4LjYyLDE0LDE2LjEzLDE5LjQyLDIyLjYybDMuMjQsNi40OS0zLjI0LDQuODJjLTEwLjc2LDE0LTIyLjExLDI0LjI0LTMzLjkzLDMwLjczYTM3LjgxLDM3LjgxLDAsMCwxLTE3LDguMDcsMTAwLDEwMCwwLDAsMS0xOC41OSwxLjU5LDY1LjA2LDY1LjA2LDAsMCwxLTIxLTMuMjFxLTkuNjktMy4xNS0yMi42Mi04LjA3Yy0xOC40LTguNjItMzYuNjctMTYuNjktNTUtMjQuMjRRNTc3LDQ2OS4xNCw1MzQuMTMsNDU2LjIxdC0xMDQuMy0xNy44YTI1LDI1LDAsMCwxLTYuNDUtLjc5LDI5LjM0LDI5LjM0LDAsMCwwLTYuNTItLjgzcS03MS4xNi0zLjIxLTExNy45NSwyOS4xMS00OC42LDMwLjc1LTU4LjI5LDgwLjg0LTMuMjEsMTYuMi0zLjIsMjIuNjIsMCwzNy4yNywxOS40MSw2M2MxMi45MywxNy4xOSwzMS43MiwzMy40Niw1Ni42LDQ4LjU3cTM1LjQ2LDIxLDgwLDM4LDQ0LjM4LDE3LDg5LjY3LDM0LjhhODY0LjY1LDg2NC42NSwwLDAsMSwxMTkuNjksNTYuNTFxNTYuNTIsMzIuMzIsMTAwLjI0LDc0LjRhMzQyLDM0MiwwLDAsMSw2Ny4wNyw5NC42MXEyNSw1Mi41NiwyMS44MywxMTguODF2MTIuMjNhNzUuNzcsNzUuNzcsMCwwLDEtMS41OCwxMy42OHEtOS43NSw4Mi40Ni00Ny43NywxNDMuMDl0LTkzLDk5LjQzYTM1OC42NiwzNTguNjYsMCwwLDEtMTIwLjQzLDU4LjIycS02NS40NCwxNy42OC0xMjguNTQsMTYuMjJhNTIsNTIsMCwwLDAtMTIuODktMS42NmgtMTNRMjY4LDE0MjgsMTk2LjkyLDE0MDAuNDNjLTE3LjQtNi42NC0zMy4xNC0xMy41My00OC4xMy0yMC40MSwxNTkuMTksMjM4LjU3LDQzMC43MSwzOTUuNzQsNzM5LDM5NS43NCw0OTAuMzUsMCw4ODcuODQtMzk3LjQ4LDg4Ny44NC04ODcuODRhOTAzLjYsOTAzLjYsMCwwLDAtNy43MS0xMTZBMTQ0LDE0NCwwLDAsMSwxNzM2LjE2LDc5MC45Wm0tNjM3Ljc5LDQ5NS42MXEuNzcsMzQuNzcsMi40LDY5LjQ1YzEsMjMuMjYsMi42Niw0NC40Niw0LjgzLDYzLjkxaC05LjdxLTU0LjkzLDAtOTEuMzYtMTguNTl0LTU5LTQ5LjM1YTIwMC41MSwyMDAuNTEsMCwwLDEtMzEuNTEtNjkuNSwzMTkuNjEsMzE5LjYxLDAsMCwxLTguOS03NC40M1Y4NzYuNTdhMzI5Ljc4LDMyOS43OCwwLDAsMSw4LjktNzUuMjMsMTg0LjEzLDE4NC4xMywwLDAsMSwzMS41Mi02OC42NnEyMi41OS0zMC43Miw1OS00OS4yOHQ5MS4zNi0xOC42Nmg5LjY5Yy0yLjE3LDE5LjM3LTMuOCw0MC43My00LjgzLDYzLjgycy0xLjg5LDQ2LjIxLTIuNCw2OC44My0uODQsNDMuODItLjg0LDYzLjgzdjM2MC40NmMwLDIwLC4yOSw0MS41My44NSw2NC43OVptLTUuNy03OTYuMzFhMTIzLjUsMTIzLjUsMCwwLDEtNDIuOCw0My42MlExMDIzLjE5LDU1MCw5OTQuMDcsNTUwcS0yNC4yNywwLTUwLjE1LTEzUTkxOCw1MjIuNDMsOTA0LjM3LDQ5Ny40MWExMDkuOTMsMTA5LjkzLDAsMCwxLTEzLjgyLTU0LjE4YzAtMTkuNDMsNC45Mi0zOC43NiwxNC41Ny01OC4yMkExMjIuODUsMTIyLjg1LDAsMCwxLDk0OCwzNDEuMzVhMTA5LDEwOSwwLDAsMSw1Ny40My0xNi4xOCw5Ni40Miw5Ni40MiwwLDAsMSw0OC40NSwxM2MxOC4zMSw5LjY1LDMxLjgsMjMuMjEsNDAuNDIsNDAuMzlhMTE4LjM3LDExOC4zNywwLDAsMSwxMyw1My4zNHEtLjA3LDI5LjE0LTE0LjY2LDU4LjI2WiIvPjwvZz48ZyBpZD0iREFUQSI+PGcgY2xhc3M9ImNscy0zIj48ZyBpZD0iTEVUVFJFUyI+PHBhdGggY2xhc3M9ImNscy00IiBkPSJNMTcxNS42LDE0NDkuNzRxLTk4LjQ2LDAtMTcwLjA2LTQ1LjV0LTExMS4xMy0xMjkuNzhxLTM5LjU2LTg0LjI3LTM5LjUzLTE5OS4xNSwwLTE3MS41NCw4Ni41Mi0yNzN0MjM0LjItMTAxLjQzcTg2LjUyLDAsMTUyLjkxLDM5LjUzdDk5LjIsMTA4LjE0VjQyMy40MnEwLTQ2LjI1LDQ0Ljc1LTQ2LjI0LDQ2LjI0LDAsNDYuMjQsNDYuMjRWMTQwMC41cTAsNDYuMjYtNDQuNzUsNDYuMjYtNDYuMjMsMC00Ni4yNC00Ni4yNnYtOTguNDVxLTMyLjgyLDY4LjYzLTk5LjIsMTA4LjE2VDE3MTUuNiwxNDQ5Ljc0Wm0xMS45NC03Ni4wOXExMTAuNCwwLDE3Ni03OC4zMXQ2NS42NS0yMjBxMC0xNDEuNy02NS42NS0yMTkuMjh0LTE3Ni03Ny41N3EtMTEwLjM4LDAtMTc1LjI4LDc3LjU3dC02NC44OSwyMTkuMjhxMCwxNDEuNzIsNjQuODksMjIwVDE3MjcuNTQsMTM3My42NVoiLz48cGF0aCBjbGFzcz0iY2xzLTQiIGQ9Ik0yNDM1LjEzLDE0NDcuNTlxLTczLjExLDAtMTMwLjU0LTI4LjM0dC05MS03Ny41N3EtMzMuNTYtNDkuMjUtMzMuNTYtMTEwLjM5LDAtODAuNTcsNDAuMjctMTI2LjA2dDEzNS43NS02NC44OXE5NS40Ny0xOS4zNiwyNjIuNTQtMTkuMzloNDYuMjR2LTUzLjdxMC05OS45NC00MC4yNy0xNDUuNDRUMjQ5Ni4zLDc3Ni4zYTQxMC42NCw0MTAuNjQsMCwwLDAtMTEwLjQsMTQuOTNRMjMzMi4yLDgwNi4xNiwyMjc0LDgzOXEtMjYuODYsMTQuOTQtNDIuNTIuNzV0LTE0LjkyLTM3LjI4cS43NS0yMy4xMywyNC42Mi0zNS4wN0E1MzQuNDgsNTM0LjQ4LDAsMCwxLDIzNjgsNzE1Ljg5cTY1LjY0LTE3LjE2LDEyNi44MS0xNy4xNSwxMzEuMjgsMCwxOTQuNjcsNjcuMTN0NjMuNCwyMDUuODR2NDI2LjY0cTAsNDYuMjYtNDEuNzYsNDYuMjUtNDQuNzksMC00NC43Ny00Ni4yNXYtOTIuNDhxLTI5Ljg0LDY3LjEzLTkwLjI1LDEwNC40MlQyNDM1LjEzLDE0NDcuNTlabTExLjk0LTczLjExcTY0LjEzLDAsMTEyLjYyLTMwLjU3dDc2LjgyLTg0LjI4cTI4LjMyLTUzLjY5LDI4LjM0LTEyMi4zM3YtNDkuMjNIMjYyMC4xcS0xMzQuMjYsMC0yMDkuNTksMTEuOTR0LTEwNS4xNiw0MS43NnEtMjkuODMsMjkuODUtMjkuODQsODIsMCw2Ny4xMyw0Ni4yNCwxMDguOVQyNDQ3LjA3LDEzNzQuNDhaIi8+PHBhdGggY2xhc3M9ImNscy00IiBkPSJNMzIyNC4wOSwxNDQ3LjE5cS0xMjAuODQsMC0xODEuMjYtNjUuNjV0LTYwLjQxLTE4OFY3ODQuODRIMjg3MnEtNDMuMjgsMC00My4yNS0zNy4yOCwwLTM1LjgsNDMuMjUtMzUuODFoMTEwLjM5VjUyNS4yOHEwLTQ2LjI0LDQ2LjI2LTQ2LjI0LDQ0LjczLDAsNDQuNzUsNDYuMjRWNzExLjc1SDMyNzQuOHE0MS43NiwwLDQxLjc4LDM1LjgxLDAsMzcuMjgtNDEuNzgsMzcuMjhIMzA3My40M3YzOTYuODJxMCw5MSwzNy4yOCwxMzguNzN0MTIzLjgzLDQ3LjczcTI5Ljg0LDAsNDkuMjItNi43dDM0LjMyLTYuNzNxMjYuODQsMCwyNi44NSwzNy4zYTUzLjg5LDUzLjg5LDAsMCwxLTUuMjQsMjMuMTFxLTUuMjQsMTEuMTktMTguNjMsMTUuNjdjLTEwLjk1LDQtMjUuODgsNy42OS00NC43NiwxMS4yQTI5MSwyOTEsMCwwLDEsMzIyNC4wOSwxNDQ3LjE5WiIvPjxwYXRoIGNsYXNzPSJjbHMtNCIgZD0iTTM3MDIuMTUsMTQ0Ny41OXEtNzMuMTEsMC0xMzAuNTMtMjguMzR0LTkxLTc3LjU3cS0zMy41NS00OS4yNS0zMy41Ni0xMTAuMzksMC04MC41Nyw0MC4yNy0xMjYuMDZ0MTM1Ljc1LTY0Ljg5cTk1LjQ3LTE5LjM2LDI2Mi41NC0xOS4zOWg0Ni4yNHYtNTMuN3EwLTk5Ljk0LTQwLjI3LTE0NS40NFQzNzYzLjMyLDc3Ni4zYTQxMC41Nyw0MTAuNTcsMCwwLDAtMTEwLjM5LDE0LjkzUTM1OTkuMjIsODA2LjE2LDM1NDEsODM5cS0yNi44NiwxNC45NC00Mi41MS43NXQtMTQuOTMtMzcuMjhxLjc1LTIzLjEzLDI0LjYyLTM1LjA3QTUzNC42NSw1MzQuNjUsMCwwLDEsMzYzNSw3MTUuODlxNjUuNjQtMTcuMTYsMTI2LjgxLTE3LjE1LDEzMS4yOCwwLDE5NC42Nyw2Ny4xM3Q2My40LDIwNS44NHY0MjYuNjRxMCw0Ni4yNi00MS43Niw0Ni4yNS00NC43OSwwLTQ0Ljc3LTQ2LjI1di05Mi40OHEtMjkuODQsNjcuMTMtOTAuMjQsMTA0LjQyVDM3MDIuMTUsMTQ0Ny41OVptMTEuOTQtNzMuMTFxNjQuMTMsMCwxMTIuNjItMzAuNTd0NzYuODItODQuMjhxMjguMzItNTMuNjksMjguMzQtMTIyLjMzdi00OS4yM2gtNDQuNzRxLTEzNC4yOCwwLTIwOS42LDExLjk0dC0xMDUuMTYsNDEuNzZxLTI5Ljg0LDI5Ljg1LTI5LjgzLDgyLDAsNjcuMTMsNDYuMjMsMTA4LjlUMzcxNC4wOSwxMzc0LjQ4WiIvPjwvZz48L2c+PC9nPjwvc3ZnPg==); --provider-logo-dark: url(data:image/svg+xml;base64,PHN2ZyBpZD0iTE9HT19CTFVFIiBkYXRhLW5hbWU9IkxPR08gQkxVRSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgdmlld0JveD0iMCAwIDQwMTkuODkgMTc3NS43NiI+PGRlZnM+PHN0eWxlPi5jbHMtMXtmaWxsOm5vbmU7fS5jbHMtMntmaWxsOiM2ZWQyMTY7fS5jbHMtM3tjbGlwLXBhdGg6dXJsKCNjbGlwLXBhdGgpO30uY2xzLTR7ZmlsbDojMjAyOTQyO308L3N0eWxlPjxjbGlwUGF0aCBpZD0iY2xpcC1wYXRoIj48cGF0aCBpZD0iTUFTUVVFIiBjbGFzcz0iY2xzLTEiIGQ9Ik00MDM4LjQyLDE0OCwxNDg4LjcsMTQyLjQyczM1NC4zMiwyNzAuNywzMjkuMzgsODA1YzAsMCwyLjY5LDMxMS42OC0yNTIuNTUsNTgwLjU0bDI0NzIuODktMTQuNzVaIi8+PC9jbGlwUGF0aD48L2RlZnM+PGcgaWQ9IlBBU1RJTExFIj48cGF0aCBjbGFzcz0iY2xzLTIiIGQ9Ik02OS4yNSwxMjE3LjY1YzEyLjkzLDAsMjgsNC40Myw0NS4yNSwxMyw4LjYyLDMuMjQsMTcsNi44LDI1LjA3LDEwLjUyczE3LjQ5LDguMzgsMjguMjksMTMuNzZBNzYwLjQ3LDc2MC40NywwLDAsMCwyNDMsMTI4MHE0Mi43NSwxMiwxMDQuMzQsMTYuOTJjNC4yNywxLjE5LDEwLjIsMS41OSwxNy43NSwxLjU5cTU0LjkzLDMuMzMsOTUuMzYtOS42NnQ2OC0zMi4zNWMxOC4zMS0xNCwzMi41OS0yOS41OCw0Mi43OS00Ni45MWExMzQuNywxMzQuNywwLDAsMCwxOC42Mi01My4zMSw0OC40OSw0OC40OSwwLDAsMSwuNzktOC4xNSw1Miw1MiwwLDAsMCwuODMtOC4wN3EwLTQzLjU0LTI0LjI5LTgwLjg0UTU0MywxMDIzLjc1LDQ5Ny42OSw5OTQuNnEtNDUuMTktMzAuNzItMTA0LjIxLTU1Ljc3VDI3MS40LDg4OS41MXEtNTkuODgtMjIuNjUtMTAzLjUtNTQuMTFUOTUuMTIsNzY1LjA4Yy0zMy4xOC00NC01MS4xOC05MS42OC01NC41NC0xNDMuMTdhODg5LjUxLDg4OS41MSwwLDAsMCwyMy4zLDU5Ni42QTQyLjI4LDQyLjI4LDAsMCwxLDY5LjI1LDEyMTcuNjVaIi8+PHBhdGggY2xhc3M9ImNscy0yIiBkPSJNMTczNi4xNiw3OTAuOWExOTUuNDUsMTk1LjQ1LDAsMCwxLTQ2LjA4LDEwLjQ0LDQzNi40MSw0MzYuNDEsMCwwLDEtNDYsMi40NmMtNy42LDAtMTQuMzYtLjI1LTIwLjI1LS44cy0xMS41OS0uNzktMTctLjc5YTIwNS4yNywyMDUuMjcsMCwwLDAtMzIuMzUsMy4xN2MtMTIuOSwyLjEzLTI3LDctNDIsMTQuNjMtMTQsNy41MS0yOC4wOCwxOC00MiwzMS41NnEtMjEsMjAtMzUuNjEsNTUuNzdjLTYuNDQsMTUtMTEuNjIsMzIuODMtMTUuMzQsNTMuMzFzLTUuNjgsNDMuNTktNS42OCw2OS41M1YxMjA4YTMwMi4xOSwzMDIuMTksMCwwLDEtOS43LDc1LjIzLDE5Ny4yMiwxOTcuMjIsMCwwLDEtMzIuMzEsNjguNjZxLTIyLjY4LDMwLjc1LTYwLjYzLDQ5LjM1dC05MywxOC41OVYxMTY0LjI5bC0xLjU4LTExMS41MnEwLTgwLjkxLDIzLjQyLTE1MS4xN1QxMzMwLjM3LDc3OGEzNTIuMzQsMzUyLjM0LDAsMCwxLDExMS41Ny04Mi41OHE2NC43MS0zMC43MSwxNDcuMTMtMzAuNjlBNDAyLjQ4LDQwMi40OCwwLDAsMSwxNjY3LjUsNjcycTM2LjM4LDcuMzgsNjMuODcsMTUuMzVjNy44OCwyLjM3LDE1LjQ3LDQuOSwyMy4xMSw3LjQzQzE2NjYuMTksMjk3LjI5LDEzMTEuOSwwLDg4Ny44MywwLDYwMy40MywwLDM1MC41LDEzMy44OCwxODgsMzQxLjg0YzI5LjI2LTE3LjA5LDU5LjkxLTI5LjI3LDkyLjE5LTM2LDM2LjE1LTcuNTIsNzAuODMtMTAuNzYsMTA0LjM0LTkuNjksOC41NywwLDE0LjUxLjU1LDE3Ljc1LDEuNThRNTA5LDMwNS44Niw1ODEsMzMyLjUxdDExNS42MSw1Ny4zNHEyMi42NSwxNC42NywzNy4xOCwyOC4zMkEzNDguNzIsMzQ4LjcyLDAsMCwxLDc1OCw0NDMuMjhjNy41Niw4LjYyLDE0LDE2LjEzLDE5LjQyLDIyLjYybDMuMjQsNi40OS0zLjI0LDQuODJjLTEwLjc2LDE0LTIyLjExLDI0LjI0LTMzLjkzLDMwLjczYTM3LjgxLDM3LjgxLDAsMCwxLTE3LDguMDcsMTAwLDEwMCwwLDAsMS0xOC41OSwxLjU5LDY1LjA2LDY1LjA2LDAsMCwxLTIxLTMuMjFxLTkuNjktMy4xNS0yMi42Mi04LjA3Yy0xOC40LTguNjItMzYuNjctMTYuNjktNTUtMjQuMjRRNTc3LDQ2OS4xNCw1MzQuMTMsNDU2LjIxdC0xMDQuMy0xNy44YTI1LDI1LDAsMCwxLTYuNDUtLjc5LDI5LjM0LDI5LjM0LDAsMCwwLTYuNTItLjgzcS03MS4xNi0zLjIxLTExNy45NSwyOS4xMS00OC42LDMwLjc1LTU4LjI5LDgwLjg0LTMuMjEsMTYuMi0zLjIsMjIuNjIsMCwzNy4yNywxOS40MSw2M2MxMi45MywxNy4xOSwzMS43MiwzMy40Niw1Ni42LDQ4LjU3cTM1LjQ2LDIxLDgwLDM4LDQ0LjM4LDE3LDg5LjY3LDM0LjhhODY0LjY1LDg2NC42NSwwLDAsMSwxMTkuNjksNTYuNTFxNTYuNTIsMzIuMzIsMTAwLjI0LDc0LjRhMzQyLDM0MiwwLDAsMSw2Ny4wNyw5NC42MXEyNSw1Mi41NiwyMS44MywxMTguODF2MTIuMjNhNzUuNzcsNzUuNzcsMCwwLDEtMS41OCwxMy42OHEtOS43NSw4Mi40Ni00Ny43NywxNDMuMDl0LTkzLDk5LjQzYTM1OC42NiwzNTguNjYsMCwwLDEtMTIwLjQzLDU4LjIycS02NS40NCwxNy42OC0xMjguNTQsMTYuMjJhNTIsNTIsMCwwLDAtMTIuODktMS42NmgtMTNRMjY4LDE0MjgsMTk2LjkyLDE0MDAuNDNjLTE3LjQtNi42NC0zMy4xNC0xMy41My00OC4xMy0yMC40MSwxNTkuMTksMjM4LjU3LDQzMC43MSwzOTUuNzQsNzM5LDM5NS43NCw0OTAuMzUsMCw4ODcuODQtMzk3LjQ4LDg4Ny44NC04ODcuODRhOTAzLjYsOTAzLjYsMCwwLDAtNy43MS0xMTZBMTQ0LDE0NCwwLDAsMSwxNzM2LjE2LDc5MC45Wm0tNjM3Ljc5LDQ5NS42MXEuNzcsMzQuNzcsMi40LDY5LjQ1YzEsMjMuMjYsMi42Niw0NC40Niw0LjgzLDYzLjkxaC05LjdxLTU0LjkzLDAtOTEuMzYtMTguNTl0LTU5LTQ5LjM1YTIwMC41MSwyMDAuNTEsMCwwLDEtMzEuNTEtNjkuNSwzMTkuNjEsMzE5LjYxLDAsMCwxLTguOS03NC40M1Y4NzYuNTdhMzI5Ljc4LDMyOS43OCwwLDAsMSw4LjktNzUuMjMsMTg0LjEzLDE4NC4xMywwLDAsMSwzMS41Mi02OC42NnEyMi41OS0zMC43Miw1OS00OS4yOHQ5MS4zNi0xOC42Nmg5LjY5Yy0yLjE3LDE5LjM3LTMuOCw0MC43My00LjgzLDYzLjgycy0xLjg5LDQ2LjIxLTIuNCw2OC44My0uODQsNDMuODItLjg0LDYzLjgzdjM2MC40NmMwLDIwLC4yOSw0MS41My44NSw2NC43OVptLTUuNy03OTYuMzFhMTIzLjUsMTIzLjUsMCwwLDEtNDIuOCw0My42MlExMDIzLjE5LDU1MCw5OTQuMDcsNTUwcS0yNC4yNywwLTUwLjE1LTEzUTkxOCw1MjIuNDMsOTA0LjM3LDQ5Ny40MWExMDkuOTMsMTA5LjkzLDAsMCwxLTEzLjgyLTU0LjE4YzAtMTkuNDMsNC45Mi0zOC43NiwxNC41Ny01OC4yMkExMjIuODUsMTIyLjg1LDAsMCwxLDk0OCwzNDEuMzVhMTA5LDEwOSwwLDAsMSw1Ny40My0xNi4xOCw5Ni40Miw5Ni40MiwwLDAsMSw0OC40NSwxM2MxOC4zMSw5LjY1LDMxLjgsMjMuMjEsNDAuNDIsNDAuMzlhMTE4LjM3LDExOC4zNywwLDAsMSwxMyw1My4zNHEtLjA3LDI5LjE0LTE0LjY2LDU4LjI2WiIvPjwvZz48ZyBpZD0iREFUQSI+PGcgY2xhc3M9ImNscy0zIj48ZyBpZD0iTEVUVFJFUyI+PHBhdGggY2xhc3M9ImNscy00IiBkPSJNMTcxNS42LDE0NDkuNzRxLTk4LjQ2LDAtMTcwLjA2LTQ1LjV0LTExMS4xMy0xMjkuNzhxLTM5LjU2LTg0LjI3LTM5LjUzLTE5OS4xNSwwLTE3MS41NCw4Ni41Mi0yNzN0MjM0LjItMTAxLjQzcTg2LjUyLDAsMTUyLjkxLDM5LjUzdDk5LjIsMTA4LjE0VjQyMy40MnEwLTQ2LjI1LDQ0Ljc1LTQ2LjI0LDQ2LjI0LDAsNDYuMjQsNDYuMjRWMTQwMC41cTAsNDYuMjYtNDQuNzUsNDYuMjYtNDYuMjMsMC00Ni4yNC00Ni4yNnYtOTguNDVxLTMyLjgyLDY4LjYzLTk5LjIsMTA4LjE2VDE3MTUuNiwxNDQ5Ljc0Wm0xMS45NC03Ni4wOXExMTAuNCwwLDE3Ni03OC4zMXQ2NS42NS0yMjBxMC0xNDEuNy02NS42NS0yMTkuMjh0LTE3Ni03Ny41N3EtMTEwLjM4LDAtMTc1LjI4LDc3LjU3dC02NC44OSwyMTkuMjhxMCwxNDEuNzIsNjQuODksMjIwVDE3MjcuNTQsMTM3My42NVoiLz48cGF0aCBjbGFzcz0iY2xzLTQiIGQ9Ik0yNDM1LjEzLDE0NDcuNTlxLTczLjExLDAtMTMwLjU0LTI4LjM0dC05MS03Ny41N3EtMzMuNTYtNDkuMjUtMzMuNTYtMTEwLjM5LDAtODAuNTcsNDAuMjctMTI2LjA2dDEzNS43NS02NC44OXE5NS40Ny0xOS4zNiwyNjIuNTQtMTkuMzloNDYuMjR2LTUzLjdxMC05OS45NC00MC4yNy0xNDUuNDRUMjQ5Ni4zLDc3Ni4zYTQxMC42NCw0MTAuNjQsMCwwLDAtMTEwLjQsMTQuOTNRMjMzMi4yLDgwNi4xNiwyMjc0LDgzOXEtMjYuODYsMTQuOTQtNDIuNTIuNzV0LTE0LjkyLTM3LjI4cS43NS0yMy4xMywyNC42Mi0zNS4wN0E1MzQuNDgsNTM0LjQ4LDAsMCwxLDIzNjgsNzE1Ljg5cTY1LjY0LTE3LjE2LDEyNi44MS0xNy4xNSwxMzEuMjgsMCwxOTQuNjcsNjcuMTN0NjMuNCwyMDUuODR2NDI2LjY0cTAsNDYuMjYtNDEuNzYsNDYuMjUtNDQuNzksMC00NC43Ny00Ni4yNXYtOTIuNDhxLTI5Ljg0LDY3LjEzLTkwLjI1LDEwNC40MlQyNDM1LjEzLDE0NDcuNTlabTExLjk0LTczLjExcTY0LjEzLDAsMTEyLjYyLTMwLjU3dDc2LjgyLTg0LjI4cTI4LjMyLTUzLjY5LDI4LjM0LTEyMi4zM3YtNDkuMjNIMjYyMC4xcS0xMzQuMjYsMC0yMDkuNTksMTEuOTR0LTEwNS4xNiw0MS43NnEtMjkuODMsMjkuODUtMjkuODQsODIsMCw2Ny4xMyw0Ni4yNCwxMDguOVQyNDQ3LjA3LDEzNzQuNDhaIi8+PHBhdGggY2xhc3M9ImNscy00IiBkPSJNMzIyNC4wOSwxNDQ3LjE5cS0xMjAuODQsMC0xODEuMjYtNjUuNjV0LTYwLjQxLTE4OFY3ODQuODRIMjg3MnEtNDMuMjgsMC00My4yNS0zNy4yOCwwLTM1LjgsNDMuMjUtMzUuODFoMTEwLjM5VjUyNS4yOHEwLTQ2LjI0LDQ2LjI2LTQ2LjI0LDQ0LjczLDAsNDQuNzUsNDYuMjRWNzExLjc1SDMyNzQuOHE0MS43NiwwLDQxLjc4LDM1LjgxLDAsMzcuMjgtNDEuNzgsMzcuMjhIMzA3My40M3YzOTYuODJxMCw5MSwzNy4yOCwxMzguNzN0MTIzLjgzLDQ3LjczcTI5Ljg0LDAsNDkuMjItNi43dDM0LjMyLTYuNzNxMjYuODQsMCwyNi44NSwzNy4zYTUzLjg5LDUzLjg5LDAsMCwxLTUuMjQsMjMuMTFxLTUuMjQsMTEuMTktMTguNjMsMTUuNjdjLTEwLjk1LDQtMjUuODgsNy42OS00NC43NiwxMS4yQTI5MSwyOTEsMCwwLDEsMzIyNC4wOSwxNDQ3LjE5WiIvPjxwYXRoIGNsYXNzPSJjbHMtNCIgZD0iTTM3MDIuMTUsMTQ0Ny41OXEtNzMuMTEsMC0xMzAuNTMtMjguMzR0LTkxLTc3LjU3cS0zMy41NS00OS4yNS0zMy41Ni0xMTAuMzksMC04MC41Nyw0MC4yNy0xMjYuMDZ0MTM1Ljc1LTY0Ljg5cTk1LjQ3LTE5LjM2LDI2Mi41NC0xOS4zOWg0Ni4yNHYtNTMuN3EwLTk5Ljk0LTQwLjI3LTE0NS40NFQzNzYzLjMyLDc3Ni4zYTQxMC41Nyw0MTAuNTcsMCwwLDAtMTEwLjM5LDE0LjkzUTM1OTkuMjIsODA2LjE2LDM1NDEsODM5cS0yNi44NiwxNC45NC00Mi41MS43NXQtMTQuOTMtMzcuMjhxLjc1LTIzLjEzLDI0LjYyLTM1LjA3QTUzNC42NSw1MzQuNjUsMCwwLDEsMzYzNSw3MTUuODlxNjUuNjQtMTcuMTYsMTI2LjgxLTE3LjE1LDEzMS4yOCwwLDE5NC42Nyw2Ny4xM3Q2My40LDIwNS44NHY0MjYuNjRxMCw0Ni4yNi00MS43Niw0Ni4yNS00NC43OSwwLTQ0Ljc3LTQ2LjI1di05Mi40OHEtMjkuODQsNjcuMTMtOTAuMjQsMTA0LjQyVDM3MDIuMTUsMTQ0Ny41OVptMTEuOTQtNzMuMTFxNjQuMTMsMCwxMTIuNjItMzAuNTd0NzYuODItODQuMjhxMjguMzItNTMuNjksMjguMzQtMTIyLjMzdi00OS4yM2gtNDQuNzRxLTEzNC4yOCwwLTIwOS42LDExLjk0dC0xMDUuMTYsNDEuNzZxLTI5Ljg0LDI5Ljg1LTI5LjgzLDgyLDAsNjcuMTMsNDYuMjMsMTA4LjlUMzcxNC4wOSwxMzc0LjQ4WiIvPjwvZz48L2c+PC9nPjwvc3ZnPg==); --vh: 10.18px;">
    <div class="sd-cmp-2jVB1"></div>
  </div>
  <script src="/_next/static/chunks/1228-876948f3a681bc07.js"></script>
  <script src="/_next/static/chunks/1890-1f16143645f13c9a.js"></script>
  <script src="/_next/static/chunks/pages/video-8ef36a41d24e13c8.js"></script>
  <script src="/_next/static/chunks/pages/index-5efe5a4036b770bd.js"></script>
  <script src="/_next/static/chunks/pages/subscribe-66a9d0ec4ce66d12.js"></script>
  <script src="/_next/static/chunks/9674-a92b15f41282fdf3.js"></script>
  <script src="/_next/static/chunks/1886-b6708b1ccf514116.js"></script>
  <script src="/_next/static/chunks/pages/login-d41f518f3ba65d9f.js"></script>
  <script src="/_next/static/chunks/pages/new-on-adn-38f18febe4ddacbd.js"></script>
  <script src="/_next/static/chunks/4376-283f5664401d0749.js"></script>
  <script src="/_next/static/chunks/pages/live-93f49a6cdfeb74c4.js"></script>
</body>

</html>
