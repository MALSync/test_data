<html lang="fr">

<head>
  <script async=""
    src="https://www.googletagmanager.com/gtm.js?id=GTM-5D6VC2L&amp;gtm_auth=&amp;gtm_preview=&amp;gtm_cookies_win=x"></script>
  <script>
    (function (w, d, s, l, i) {
      w[l] = w[l] || [];
      w[l].push({ 'gtm.start': new Date().getTime(), event: 'gtm.js', });
      var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : '';
      j.async = true; j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl + '&gtm_auth=&gtm_preview=&gtm_cookies_win=x';
      f.parentNode.insertBefore(j, f);
    })(window, document, 'script', 'dataLayer', 'GTM-5D6VC2L');</script>
  <style class="vjs-styles-defaults">
    .video-js {
      width: 300px;
      height: 150px;
    }

    .vjs-fluid {
      padding-top: 56.25%
    }
  </style>
  <script async=""
    src="https://www.googletagmanager.com/gtm.js?id=GTM-5D6VC2L&amp;gtm_auth=&amp;gtm_preview=&amp;gtm_cookies_win=x"></script>
  <script>
    (function (w, d, s, l, i) {
      w[l] = w[l] || [];
      w[l].push({ 'gtm.start': new Date().getTime(), event: 'gtm.js', });
      var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : '';
      j.async = true; j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl + '&gtm_auth=&gtm_preview=&gtm_cookies_win=x';
      f.parentNode.insertBefore(j, f);
    })(window, document, 'script', 'dataLayer', 'GTM-5D6VC2L');</script>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width">
  <link rel="alternate" hreflang="fr-FR"
    href="https://animationdigitalnetwork.com/video/315-no-game-no-life/5008-episode-6" data-testid="hreflang-fr-FR">
  <link rel="alternate" hreflang="x-default"
    href="https://animationdigitalnetwork.com/video/315-no-game-no-life/5008-episode-6"
    data-testid="hreflang-x-default">
  <link rel="canonical" href="https://animationdigitalnetwork.com/video/315-no-game-no-life/5008-episode-6">
  <title>No Game No Life - 1 Épisode 6 : Un coup interesting - streaming - VF et VOSTFR - ADN</title>
  <meta name="description"
    content="Retrouvez No Game No Life - Épisode 6 en streaming VF et VOSTFR sur Animation Digital Network ! Qualité HD 1080p, HD 720p et SD 480p.">
  <meta name="keywords"
    content="streaming, VOD, animé, japonais, anime, alternative légale, vidéo à la demande, ADN, vostfr, vostf, vf, vo, replay, manga, version française, version originale, version doublée, dessin animé, gratuit, abonnement">
  <meta name="robots" content="index">
  <meta property="og:title"
    content="No Game No Life - 1 Épisode 6 : Un coup interesting - streaming - VF et VOSTFR - ADN">
  <meta property="og:type" content="video.episode">
  <meta property="og:image" content="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps6_640x360.jpg">
  <meta property="og:description"
    content="Retrouvez No Game No Life - Épisode 6 en streaming VF et VOSTFR sur Animation Digital Network ! Qualité HD 1080p, HD 720p et SD 480p.">
  <meta property="og:url" content="https://animationdigitalnetwork.com/video/315-no-game-no-life/5008-episode-6">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:site" content="ADNanime">
  <meta property="twitter:creator" content="ADNanime">
  <meta property="twitter:description"
    content="Retrouvez No Game No Life - Épisode 6 en streaming VF et VOSTFR sur Animation Digital Network ! Qualité HD 1080p, HD 720p et SD 480p.">
  <meta property="twitter:title"
    content="No Game No Life - 1 Épisode 6 : Un coup interesting - streaming - VF et VOSTFR - ADN">
  <meta property="twitter:image:src"
    content="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps6_640x360.jpg">
  <script async="" defer="">
    window.googletag = window.googletag || { cmd: [] };
    googletag.cmd.push(function () {
      // Destroy slots before creating new ones
      googletag.destroySlots();

      // Disabling initial load before enabling service, only if it's not the first route visited by user
      if (false) {
        googletag.pubads().disableInitialLoad();
      }

      // new Google slots

      window.googletag
        .defineSlot('/21835257576/ADN_RECTANGLE_TOP', [[970, 90], [728, 90], [970, 250]], 'div-gpt-ad-1569230740302-0')
        .addService(window.googletag.pubads());


      window.googletag
        .defineSlot('/21835257576/ADN_INTERSTITIAL', [1, 1], 'div-gpt-ad-1627562754480-0')
        .addService(window.googletag.pubads());


      // enable services
      googletag.pubads().enableLazyLoad({
        renderMarginPercent: 0
      });

      googletag.pubads().enableSingleRequest();
      googletag.enableServices();

      // Refresh ads only if it's not the first route visited by user
      if (false) {
        googletag.pubads().refresh();
      }
    });
  </script>
  <meta name="next-head-count" content="21">
  <meta name="theme-color" content="#0096FF">
  <meta name="apple-itunes-app" content="app-id=667935767">
  <link rel="icon" href="/favicon.ico">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon/favicon-32x32.webp">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon/favicon-16x16.webp">
  <link rel="mask-icon" href="/images/favicon/safari-pinned-tab.svg" color="#0096ff">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/favicon/apple-touch-icon.webp">
  <meta name="msapplication-TileColor" content="#04121a">
  <meta name="msapplication-config" content="/browserconfig.xml">
  <link rel="manifest" href="/manifest.json" crossorigin="use-credentials">
  <link rel="stylesheet"
    data-href="https://fonts.googleapis.com/css?family=Poppins:200,400,600,700,800&amp;display=swap">
  <link rel="stylesheet"
    data-href="https://fonts.googleapis.com/css?family=Unbounded:200,400,600,700,800&amp;display=swap">
  <link rel="stylesheet" data-href="https://fonts.googleapis.com/css?family=Inter:200,400,600,700,800&amp;display=swap">
  <link rel="stylesheet" data-href="https://fonts.googleapis.com/css2?family=Bebas+Neue&amp;display=swap">
  <link href="/vendor/ads/interstitiel.min.css" rel="stylesheet">
  <link rel="preload" href="/_next/static/css/bc427d470fe4209b.css" as="style">
  <link rel="stylesheet" href="/_next/static/css/bc427d470fe4209b.css" data-n-g=""><noscript data-n-css=""></noscript>
  <script defer="" nomodule="" src="/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script>
  <script src="/_next/static/chunks/webpack-46c6a5884c5dd2f4.js" defer=""></script>
  <script src="/_next/static/chunks/framework-a667dbba83e63e79.js" defer=""></script>
  <script src="/_next/static/chunks/main-b8a3d3c2da235587.js" defer=""></script>
  <script src="/_next/static/chunks/pages/_app-3ab58f4a11bc6fa3.js" defer=""></script>
  <script src="/_next/static/chunks/7536-051d0de4ef9bc9ad.js" defer=""></script>
  <script src="/_next/static/chunks/9491-6fcde69d78e87c27.js" defer=""></script>
  <script src="/_next/static/chunks/5589-10f80fffd3c3fce8.js" defer=""></script>
  <script src="/_next/static/chunks/9185-2d23de81aa7b5293.js" defer=""></script>
  <script src="/_next/static/chunks/1622-7ae19a9edc64d726.js" defer=""></script>
  <script src="/_next/static/chunks/6327-e8320ac5e0810ca6.js" defer=""></script>
  <script src="/_next/static/chunks/530-6ee41c80621d63cd.js" defer=""></script>
  <script src="/_next/static/chunks/198-d19a3c80e88ab04c.js" defer=""></script>
  <script src="/_next/static/chunks/7183-fa70af9dc01f0d6a.js" defer=""></script>
  <script src="/_next/static/chunks/871-3ff70bbca48fa17e.js" defer=""></script>
  <script src="/_next/static/chunks/4995-c37805957366adfe.js" defer=""></script>
  <script src="/_next/static/chunks/9267-b53a25c23bab6c91.js" defer=""></script>
  <script src="/_next/static/chunks/338-978e6a66f154811c.js" defer=""></script>
  <script src="/_next/static/chunks/pages/video/%5Bshow%5D/%5Bvideo%5D-8960e3721917031e.js" defer=""></script>
  <script src="/_next/static/iyQTl64NN8C5sAy274F3k/_buildManifest.js" defer=""></script>
  <script src="/_next/static/iyQTl64NN8C5sAy274F3k/_ssgManifest.js" defer=""></script>
  <style data-styled="active" data-styled-version="5.3.6"></style>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins:200,400,600,700,800&amp;display=swap">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Unbounded:200,400,600,700,800&amp;display=swap">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Inter:200,400,600,700,800&amp;display=swap">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Bebas+Neue&amp;display=swap">
  <script async="" src="https://static.hotjar.com/c/hotjar-2359970.js?sv=6"></script>
  <script src="/vendor/player/cryptojs.min.js"></script>
  <script src="/vendor/player/jsencrypt.min.js"></script>
  <script src="/vendor/player/videojs.min.js"></script>
  <script src="//imasdk.googleapis.com/js/sdkloader/ima3.js"></script>
  <link as="script" rel="prefetch" href="/_next/static/chunks/810-cb10a4ae5a7fa2ae.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/8915-e5955a54d5fed2da.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/pages/index-5efe5a4036b770bd.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/pages/subscribe-66a9d0ec4ce66d12.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/9674-a92b15f41282fdf3.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/1886-b6708b1ccf514116.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/pages/login-d41f518f3ba65d9f.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/3542-dad9f0e4c53e3582.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/pages/video/%5Bshow%5D-d4cbff5a9a347df6.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/1228-876948f3a681bc07.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/1890-1f16143645f13c9a.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/pages/video-8ef36a41d24e13c8.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/pages/new-on-adn-38f18febe4ddacbd.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/4376-283f5664401d0749.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/pages/live-93f49a6cdfeb74c4.js">
  <script src="/vendor/player/adn-vjs.052a92d454d450241c225b1e727d2a977cd7c483.min.js" async=""></script>
  <script src="https://securepubads.g.doubleclick.net/tag/js/gpt.js" async="" defer=""></script>
  <script src="/vendor/ads/interstitiel.min.js" async="" defer=""></script>
  <script src="https://securepubads.g.doubleclick.net/tag/js/gpt.js" async="" defer=""></script>
  <script src="/vendor/ads/interstitiel.min.js" async="" defer=""></script>
  <script type="text/javascript"
    src="https://js.sddan.com/GS.d?pa=27993&amp;c=LrSl1&amp;cmp=0&amp;u=https%3A%2F%2Fanimationdigitalnetwork.com%2Fvideo%2F315-no-game-no-life%2F5008-episode-6&amp;r=&amp;rand=1721906285037&amp;gdpr=1&amp;gdpr_consent=CQCT9cAQCT9cABcAKBDEA-FgAP_gAEPgAAqIIzQJwABQAKAAsACoAGQAQAAqABbADQANQAigBNAC3AGEAYgA5QCDAIQAToApABcAD0AIQAR0AzoBoADRAGvANoAjsBHoCXgE_gLzAYuAxkBkgDkwHUAPSAgOBGQCMwIzQEoAFAAWABUAEEANAA1ADEAH4AQgBCACLAEdANEAa8A2gCPQF5gMEAZIA5MAAA&amp;globalscope=false&amp;cookieless_ignore=0&amp;fb_consent=1&amp;tbp=true"
    async="" referrerpolicy="unsafe-url"></script>
  <style type="text/css">
    .sd-cmp-xwtxB {
      overflow: hidden !important
    }

    .sd-cmp-1EpGs {
      /*! normalize.css v7.0.0 | MIT License | github.com/necolas/normalize.css */
      --modal-width: 610px;
      --background-color: #fafafa;
      --main-color: #202942;
      --title-color: #202942;
      --text-color: #8492a6;
      --border-color: #e9ecef;
      --overlay-color: #000;
      --background-color-dark: #121725;
      --main-color-dark: #5a6d90;
      --title-color-dark: #5a6d90;
      --text-color-dark: #8492a6;
      --border-color-dark: #202942;
      --overlay-color-dark: #000;
      --border-radius: 24px;
      --font-family: "Roboto";
      --font-family-title: "Roboto Slab";
      --font-size-base: 13px;
      --font-size-big: calc(var(--font-size-base) + 2px);
      --font-size-small: calc(var(--font-size-base) - 2px);
      --font-size-xsmall: calc(var(--font-size-base) - 4px);
      --font-size-xxsmall: calc(var(--font-size-base) - 6px);
      --logo-size: 80px;
      --logo-offset: -20px;
      --skin-size: 75px;
      --spacing-base: 5px;
      --spacing-sm: var(--spacing-base);
      --spacing-md: calc(var(--spacing-base) + 5px);
      --spacing-lg: calc(var(--spacing-base) + 10px);
      --padding-base: 15px;
      --padding-sm: var(--padding-base);
      --padding-md: calc(var(--padding-base) + 10px)
    }

    .sd-cmp-1EpGs html {
      line-height: 1.15;
      -ms-text-size-adjust: 100%;
      -webkit-text-size-adjust: 100%
    }

    .sd-cmp-1EpGs body {
      margin: 0
    }

    .sd-cmp-1EpGs article,
    .sd-cmp-1EpGs aside,
    .sd-cmp-1EpGs footer,
    .sd-cmp-1EpGs header,
    .sd-cmp-1EpGs nav,
    .sd-cmp-1EpGs section {
      display: block
    }

    .sd-cmp-1EpGs h1 {
      font-size: 2em;
      margin: .67em 0
    }

    .sd-cmp-1EpGs figcaption,
    .sd-cmp-1EpGs figure,
    .sd-cmp-1EpGs main {
      display: block
    }

    .sd-cmp-1EpGs figure {
      margin: 1em 40px
    }

    .sd-cmp-1EpGs hr {
      -webkit-box-sizing: content-box;
      box-sizing: content-box;
      height: 0;
      overflow: visible
    }

    .sd-cmp-1EpGs pre {
      font-family: monospace, monospace;
      font-size: 1em
    }

    .sd-cmp-1EpGs a {
      background-color: transparent;
      -webkit-text-decoration-skip: objects
    }

    .sd-cmp-1EpGs a,
    .sd-cmp-1EpGs span {
      -webkit-touch-callout: none;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none
    }

    .sd-cmp-1EpGs abbr[title] {
      border-bottom: none;
      text-decoration: underline;
      -webkit-text-decoration: underline dotted;
      text-decoration: underline dotted
    }

    .sd-cmp-1EpGs b,
    .sd-cmp-1EpGs strong {
      font-weight: inherit;
      font-weight: bolder
    }

    .sd-cmp-1EpGs code,
    .sd-cmp-1EpGs kbd,
    .sd-cmp-1EpGs samp {
      font-family: monospace, monospace;
      font-size: 1em
    }

    .sd-cmp-1EpGs dfn {
      font-style: italic
    }

    .sd-cmp-1EpGs mark {
      background-color: #ff0;
      color: #000
    }

    .sd-cmp-1EpGs small {
      font-size: 80%
    }

    .sd-cmp-1EpGs sub,
    .sd-cmp-1EpGs sup {
      font-size: 75%;
      line-height: 0;
      position: relative;
      vertical-align: baseline
    }

    .sd-cmp-1EpGs sub {
      bottom: -.25em
    }

    .sd-cmp-1EpGs sup {
      top: -.5em
    }

    .sd-cmp-1EpGs audio,
    .sd-cmp-1EpGs video {
      display: inline-block
    }

    .sd-cmp-1EpGs audio:not([controls]) {
      display: none;
      height: 0
    }

    .sd-cmp-1EpGs img {
      border-style: none
    }

    .sd-cmp-1EpGs svg:not(:root) {
      overflow: hidden
    }

    .sd-cmp-1EpGs button,
    .sd-cmp-1EpGs input,
    .sd-cmp-1EpGs optgroup,
    .sd-cmp-1EpGs select,
    .sd-cmp-1EpGs textarea {
      font-size: 100%;
      line-height: 1.15;
      margin: 0;
      height: auto
    }

    .sd-cmp-1EpGs button,
    .sd-cmp-1EpGs input {
      overflow: visible
    }

    .sd-cmp-1EpGs button,
    .sd-cmp-1EpGs select {
      text-transform: none
    }

    .sd-cmp-1EpGs [type=reset],
    .sd-cmp-1EpGs [type=submit],
    .sd-cmp-1EpGs button,
    .sd-cmp-1EpGs html [type=button] {
      -webkit-appearance: button
    }

    .sd-cmp-1EpGs [type=button]::-moz-focus-inner,
    .sd-cmp-1EpGs [type=reset]::-moz-focus-inner,
    .sd-cmp-1EpGs [type=submit]::-moz-focus-inner,
    .sd-cmp-1EpGs button::-moz-focus-inner {
      border-style: none;
      padding: 0
    }

    .sd-cmp-1EpGs [type=button]:-moz-focusring,
    .sd-cmp-1EpGs [type=reset]:-moz-focusring,
    .sd-cmp-1EpGs [type=submit]:-moz-focusring,
    .sd-cmp-1EpGs button:-moz-focusring {
      outline: 1px dotted ButtonText
    }

    .sd-cmp-1EpGs button {
      white-space: normal
    }

    .sd-cmp-1EpGs fieldset {
      padding: .35em .75em .625em
    }

    .sd-cmp-1EpGs legend {
      -webkit-box-sizing: border-box;
      box-sizing: border-box;
      color: inherit;
      display: table;
      max-width: 100%;
      padding: 0;
      white-space: normal
    }

    .sd-cmp-1EpGs progress {
      display: inline-block;
      vertical-align: baseline
    }

    .sd-cmp-1EpGs textarea {
      overflow: auto
    }

    .sd-cmp-1EpGs [type=checkbox],
    .sd-cmp-1EpGs [type=radio] {
      -webkit-box-sizing: border-box;
      box-sizing: border-box;
      padding: 0
    }

    .sd-cmp-1EpGs [type=number]::-webkit-inner-spin-button,
    .sd-cmp-1EpGs [type=number]::-webkit-outer-spin-button {
      height: auto
    }

    .sd-cmp-1EpGs [type=search] {
      -webkit-appearance: textfield;
      outline-offset: -2px
    }

    .sd-cmp-1EpGs [type=search]::-webkit-search-cancel-button,
    .sd-cmp-1EpGs [type=search]::-webkit-search-decoration {
      -webkit-appearance: none
    }

    .sd-cmp-1EpGs ::-webkit-file-upload-button {
      -webkit-appearance: button;
      font: inherit
    }

    .sd-cmp-1EpGs details,
    .sd-cmp-1EpGs menu {
      display: block
    }

    .sd-cmp-1EpGs summary {
      display: list-item
    }

    .sd-cmp-1EpGs canvas {
      display: inline-block
    }

    .sd-cmp-1EpGs [hidden],
    .sd-cmp-1EpGs template {
      display: none
    }

    .sd-cmp-1EpGs.sd-cmp-1Icfl {
      --modal-width: 560px;
      --font-size-base: 12px;
      --logo-size: 70px;
      --logo-offset: -15px;
      --skin-size: 65px;
      --spacing-base: 3px;
      --padding-base: 13px
    }

    .sd-cmp-1EpGs.sd-cmp-ziEj0 {
      --modal-width: 610px;
      --font-size-base: 13px;
      --logo-size: 80px;
      --logo-offset: -20px;
      --skin-size: 75px;
      --spacing-base: 5px;
      --padding-base: 15px
    }

    .sd-cmp-1EpGs.sd-cmp-qPvsF {
      --modal-width: 660px;
      --font-size-base: 14px;
      --logo-size: 90px;
      --logo-offset: -25px;
      --skin-size: 85px;
      --spacing-base: 7px;
      --padding-base: 17px
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-1EpGs {
        --font-size-base: 13px !important
      }
    }

    .sd-cmp-1EpGs .sd-cmp-1wlYk {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: var(--overlay-color);
      opacity: .7;
      z-index: 2147483646
    }

    .sd-cmp-1EpGs .sd-cmp-2jVB1 {
      font-size: var(--font-size-base);
      font-family: var(--font-family), Helvetica, Arial, sans-serif;
      font-weight: 400;
      -webkit-font-smoothing: antialiased;
      line-height: 1.4;
      text-align: left;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-1EpGs .sd-cmp-2jVB1 {
        line-height: 1.2
      }
    }

    .sd-cmp-1EpGs .sd-cmp-1W1Kb {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      z-index: 2147483647
    }

    .sd-cmp-1EpGs * {
      -webkit-box-sizing: border-box;
      box-sizing: border-box;
      min-width: auto;
      min-height: auto;
      margin: 0;
      padding: 0;
      line-height: unset;
      font-family: unset;
      font-size: unset;
      font-weight: unset;
      letter-spacing: normal
    }

    .sd-cmp-1EpGs a {
      font-size: inherit;
      font-weight: 700;
      cursor: pointer;
      text-decoration: underline !important;
      color: var(--text-color) !important;
      -webkit-tap-highlight-color: transparent
    }

    .sd-cmp-1EpGs a:hover {
      text-decoration: none !important
    }

    .sd-cmp-1EpGs svg {
      display: inline-block;
      vertical-align: middle;
      margin-top: -2px;
      -webkit-transition: .2s ease;
      transition: .2s ease
    }

    .sd-cmp-1EpGs h2,
    .sd-cmp-1EpGs h3 {
      font-family: inherit;
      font-size: inherit;
      background: none !important
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-1EpGs {
        --background-color: var(--background-color-dark) !important;
        --main-color: var(--main-color-dark) !important;
        --title-color: var(--title-color-dark) !important;
        --text-color: var(--text-color-dark) !important;
        --border-color: var(--border-color-dark) !important;
        --overlay-color: var(--overlay-color-dark) !important;
        --provider-logo: var(--provider-logo-dark) !important
      }
    }
  </style>
  <style type="text/css">
    .sd-cmp-1AaTO {
      position: relative;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1;
      -webkit-appearance: none !important;
      -moz-appearance: none !important;
      appearance: none !important;
      background: none !important;
      border: none !important;
      -webkit-box-shadow: none !important;
      box-shadow: none !important;
      outline: none !important;
      text-shadow: none !important;
      font-size: inherit !important;
      padding: 0 !important;
      margin: 0 !important;
      width: auto !important
    }

    .sd-cmp-1AaTO .sd-cmp-3G37o,
    .sd-cmp-1AaTO .sd-cmp-AL7Qz {
      display: block;
      font-family: var(--font-family-title), Helvetica, Arial, sans-serif;
      letter-spacing: .4pt;
      font-weight: 500;
      cursor: pointer;
      white-space: nowrap;
      width: auto;
      outline: 0
    }

    .sd-cmp-1AaTO .sd-cmp-3G37o {
      border-radius: calc(var(--border-radius)/2);
      border: 1px solid var(--main-color);
      -webkit-tap-highlight-color: transparent;
      -webkit-transition: color .1s ease-out, background .1s ease-out;
      transition: color .1s ease-out, background .1s ease-out
    }

    .sd-cmp-1AaTO .sd-cmp-AL7Qz {
      font-size: var(--font-size-base);
      color: var(--main-color);
      text-decoration: underline !important;
      padding: .55em 1.5em
    }

    @media (hover:hover) {
      .sd-cmp-1AaTO .sd-cmp-AL7Qz:hover {
        text-decoration: none !important
      }
    }

    .sd-cmp-1AaTO .sd-cmp-AL7Qz:active {
      text-decoration: none !important
    }

    .sd-cmp-1AaTO:focus {
      outline: 0
    }

    .sd-cmp-1AaTO:focus>.sd-cmp-3G37o {
      outline: 1px auto -webkit-focus-ring-color
    }

    .sd-cmp-1AaTO:hover {
      background: none !important;
      border: none !important
    }

    .sd-cmp-2SVKF {
      padding: .55em 1.5em;
      font-size: var(--font-size-small) !important;
      text-transform: lowercase !important
    }

    .sd-cmp-8Qarf {
      background: var(--main-color);
      color: var(--background-color)
    }

    @media (hover:hover) {
      .sd-cmp-8Qarf:hover {
        background: var(--background-color);
        color: var(--main-color)
      }
    }

    .sd-cmp-37Lg8,
    .sd-cmp-8Qarf:active {
      background: var(--background-color);
      color: var(--main-color)
    }

    @media (hover:hover) {
      .sd-cmp-37Lg8:hover {
        background: var(--main-color);
        color: var(--background-color)
      }

      .sd-cmp-37Lg8:hover svg {
        fill: var(--background-color)
      }
    }

    .sd-cmp-37Lg8:active {
      background: var(--main-color);
      color: var(--background-color)
    }

    .sd-cmp-37Lg8:active svg {
      fill: var(--background-color)
    }

    .sd-cmp-37Lg8 svg {
      fill: var(--main-color)
    }

    .sd-cmp-2QK_B {
      position: fixed;
      width: var(--modal-width);
      height: auto;
      top: 50%;
      left: 50%;
      -webkit-transform: translate3d(-50%, -50%, 0);
      transform: translate3d(-50%, -50%, 0);
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-pack: center;
      -ms-flex-pack: center;
      justify-content: center;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      margin: 0;
      padding: 0;
      -webkit-box-shadow: unset !important;
      box-shadow: unset !important;
      z-index: 2147483647
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-2QK_B {
        width: 100%;
        height: 100%
      }
    }

    .sd-cmp-2QK_B.sd-cmp-2Ltpa {
      top: 0 !important;
      bottom: auto !important
    }

    .sd-cmp-2QK_B.sd-cmp-32o6S,
    .sd-cmp-2QK_B.sd-cmp-2Ltpa {
      left: 0 !important;
      right: 0 !important;
      -webkit-transform: unset !important;
      transform: unset !important
    }

    .sd-cmp-2QK_B.sd-cmp-32o6S {
      top: auto !important;
      bottom: 0 !important
    }

    .sd-cmp-2QK_B.sd-cmp-oL4pt {
      left: 0 !important;
      right: unset !important
    }

    .sd-cmp-2QK_B.sd-cmp-3Pt1U {
      left: unset !important;
      right: 0 !important
    }

    .sd-cmp-2QK_B.sd-cmp-O521Y {
      width: 100%;
      max-width: 1400px;
      margin: auto
    }

    .sd-cmp-2QK_B.sd-cmp-1YoMI {
      display: none !important
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE {
      width: 100%;
      height: fit-content;
      height: -webkit-fit-content;
      height: -moz-fit-content;
      max-height: calc(100vh - 50px);
      margin: 25px;
      background: var(--background-color);
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      position: relative;
      border-radius: var(--border-radius);
      -webkit-box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137);
      box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137)
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE.sd-cmp-3S0AD {
      height: 600px
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-2QK_B .sd-cmp-1ZnvE {
        max-height: calc(var(--vh, 1vh)*100 - 25px);
        margin: 12.5px
      }
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6 {
      display: none;
      width: var(--skin-size);
      background-color: var(--background-color);
      background-position: 50%;
      background-size: cover;
      background-repeat: no-repeat;
      border-radius: var(--border-radius) 0 0 var(--border-radius)
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY {
      display: block;
      background-image: var(--skin)
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY+*+*+*+.sd-cmp-kOZlP,
    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY+*+*+.sd-cmp-kOZlP,
    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY+*+.sd-cmp-kOZlP,
    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY+.sd-cmp-kOZlP {
      border-radius: 0 var(--border-radius) var(--border-radius) 0
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-3EIuH {
      background-image: var(--skin-dark)
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY {
        display: none
      }

      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY+*+*+*+.sd-cmp-kOZlP,
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY+*+*+.sd-cmp-kOZlP,
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY+*+.sd-cmp-kOZlP,
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY+.sd-cmp-kOZlP {
        border-radius: var(--border-radius)
      }

      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-3EIuH {
        display: block
      }

      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-3EIuH+*+*+*+.sd-cmp-kOZlP,
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-3EIuH+*+*+.sd-cmp-kOZlP,
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-3EIuH+*+.sd-cmp-kOZlP,
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-3EIuH+.sd-cmp-kOZlP {
        border-radius: 0 var(--border-radius) var(--border-radius) 0
      }
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6+.sd-cmp-FhVkq {
      left: calc(var(--skin-size) + var(--padding-md))
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6 {
        display: none !important
      }

      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6+.sd-cmp-FhVkq {
        left: calc(var(--padding-md))
      }

      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6+*+*+*+.sd-cmp-kOZlP,
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6+*+*+.sd-cmp-kOZlP,
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6+*+.sd-cmp-kOZlP,
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6+.sd-cmp-kOZlP {
        border-radius: var(--border-radius) !important
      }
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-FhVkq {
      display: none;
      width: var(--logo-size);
      height: var(--logo-size);
      position: absolute;
      top: var(--logo-offset);
      left: var(--padding-md);
      background-color: var(--background-color);
      background-position: 50%;
      background-size: 100%;
      background-repeat: no-repeat;
      -webkit-box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137);
      box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137);
      border-radius: calc(var(--border-radius)/2);
      border: 5px solid var(--background-color);
      z-index: 1
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-FhVkq.sd-cmp-1cljl {
      display: block;
      background-image: var(--logo)
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-FhVkq.sd-cmp-2PpFN {
      background-image: var(--logo-dark)
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-FhVkq.sd-cmp-1cljl {
        display: none
      }

      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-FhVkq.sd-cmp-2PpFN {
        display: block
      }
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-FhVkq {
        left: var(--padding-sm) !important
      }
    }

    @media screen and (max-width:calc(400px - 1px)) {
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-FhVkq {
        display: none !important
      }
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1;
      border-radius: var(--border-radius);
      overflow: hidden
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP:before {
      content: "";
      position: absolute;
      top: 0;
      right: 0;
      width: 50%;
      height: 50%;
      border-top-right-radius: var(--border-radius);
      opacity: .25;
      background: transparent 100% 0/contain no-repeat var(--watermark)
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP:before {
        background: transparent 100% 0/contain no-repeat var(--watermark-dark)
      }
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP .sd-cmp-1FSuG {
      position: relative;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      gap: var(--spacing-sm);
      padding: var(--padding-sm) var(--padding-md)
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP .sd-cmp-1FSuG {
        padding: var(--padding-sm)
      }
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP .sd-cmp-1FSuG>* {
      width: 100%
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP .sd-cmp-3Mcwk {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1;
      position: relative;
      overflow-y: auto;
      overflow-x: hidden;
      -webkit-overflow-scrolling: touch;
      min-height: 60px
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP .sd-cmp-3Mcwk .sd-cmp-NBjy7 {
      overflow: hidden;
      -ms-overflow-y: hidden;
      overflow-y: auto
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP .sd-cmp-3Mcwk .sd-cmp-NBjy7::-webkit-scrollbar {
      width: 5px
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP .sd-cmp-3Mcwk .sd-cmp-NBjy7::-webkit-scrollbar-thumb {
      border: 0 solid transparent;
      -webkit-box-shadow: inset 0 0 0 3px var(--main-color);
      box-shadow: inset 0 0 0 3px var(--main-color)
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP .sd-cmp-3Mcwk .sd-cmp-NBjy7 .sd-cmp-3H8D2 {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      gap: var(--spacing-lg);
      padding: var(--padding-sm) var(--padding-md)
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP .sd-cmp-3Mcwk .sd-cmp-NBjy7 .sd-cmp-3H8D2 {
        gap: var(--spacing-md);
        padding: var(--padding-sm)
      }
    }

    .sd-cmp-NBjy7 .sd-cmp-3nwYC {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-align: start;
      -ms-flex-align: start;
      align-items: flex-start;
      -webkit-box-pack: justify;
      -ms-flex-pack: justify;
      justify-content: space-between
    }

    @media screen and (prefers-color-scheme:light) {
      .sd-cmp-NBjy7 .sd-cmp-3nwYC.sd-cmp-3JuoZ {
        margin-left: calc(var(--logo-size) + var(--spacing-lg));
        min-height: calc(var(--logo-size) + var(--logo-offset) - var(--padding-sm))
      }
    }

    @media (pointer:none),
    screen and (prefers-color-scheme:light) and (pointer:coarse),
    screen and (prefers-color-scheme:light) and screen and (max-width:calc(400px - 1px)),
    screen and (prefers-color-scheme:light) and screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-NBjy7 .sd-cmp-3nwYC.sd-cmp-3JuoZ {
        margin-left: calc(var(--logo-size) + var(--spacing-md))
      }
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-NBjy7 .sd-cmp-3nwYC.sd-cmp-3PMfJ {
        margin-left: calc(var(--logo-size) + var(--spacing-lg));
        min-height: calc(var(--logo-size) + var(--logo-offset) - var(--padding-sm))
      }
    }

    @media (pointer:none),
    screen and (prefers-color-scheme:dark) and (pointer:coarse),
    screen and (prefers-color-scheme:dark) and screen and (max-width:calc(400px - 1px)),
    screen and (prefers-color-scheme:dark) and screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-NBjy7 .sd-cmp-3nwYC.sd-cmp-3PMfJ {
        margin-left: calc(var(--logo-size) + var(--spacing-md))
      }
    }

    @media screen and (max-width:calc(400px - 1px)) {
      .sd-cmp-NBjy7 .sd-cmp-3nwYC {
        margin-left: 0 !important;
        min-height: 0 !important
      }
    }

    .sd-cmp-NBjy7 .sd-cmp-xODGp {
      font-size: calc(var(--font-size-base)*1.5);
      font-weight: 500;
      line-height: 1.2;
      color: var(--title-color);
      outline: 0 !important;
      margin: 0 !important;
      padding: 0 !important;
      border: 0 !important;
      font-family: var(--font-family-title), Helvetica, Arial, sans-serif !important;
      text-transform: none !important;
      text-align: left !important;
      letter-spacing: inherit !important;
      background: none !important
    }

    .sd-cmp-NBjy7 .sd-cmp-xODGp * {
      font-family: inherit;
      font-size: inherit;
      font-weight: inherit
    }

    .sd-cmp-NBjy7 .sd-cmp-1IdBZ {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      gap: var(--spacing-md)
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-NBjy7 .sd-cmp-1IdBZ {
        gap: var(--spacing-sm)
      }
    }

    .sd-cmp-NBjy7 .sd-cmp-1t2yR {
      display: block;
      text-align: justify;
      color: var(--text-color);
      text-shadow: 1pt 0 0 var(--background-color)
    }

    .sd-cmp-NBjy7 .sd-cmp-1t2yR strong {
      font-family: inherit;
      font-size: inherit;
      font-weight: 700 !important;
      color: var(--text-color) !important;
      cursor: pointer;
      text-decoration: underline;
      -webkit-tap-highlight-color: transparent
    }

    @media (hover:hover) {
      .sd-cmp-NBjy7 .sd-cmp-1t2yR strong:hover {
        text-decoration: none !important
      }
    }

    .sd-cmp-NBjy7 .sd-cmp-3TX97 {
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1;
      gap: var(--spacing-md)
    }

    .sd-cmp-NBjy7 .sd-cmp-3TX97,
    .sd-cmp-NBjy7 .sd-cmp-3TX97 .sd-cmp-10mD2 {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex
    }

    .sd-cmp-NBjy7 .sd-cmp-3TX97 .sd-cmp-10mD2 {
      gap: var(--spacing-sm);
      color: var(--title-color);
      border-bottom: 1px solid var(--border-color);
      padding-bottom: var(--spacing-sm);
      -webkit-box-pack: justify;
      -ms-flex-pack: justify;
      justify-content: space-between;
      position: relative
    }

    .sd-cmp-NBjy7 .sd-cmp-3TX97 .sd-cmp-10mD2 .sd-cmp-1Xy8H {
      text-transform: uppercase;
      font-family: var(--font-family-title), Helvetica, Arial, sans-serif;
      font-size: var(--font-size-big);
      font-weight: 700;
      color: var(--title-color)
    }

    .sd-cmp-NBjy7 .sd-cmp-3eQpC {
      position: relative;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      -webkit-box-pack: center;
      -ms-flex-pack: center;
      justify-content: center
    }

    @media screen and (max-width:calc(400px - 1px)) {
      .sd-cmp-NBjy7 .sd-cmp-3eQpC {
        min-height: unset
      }
    }

    .sd-cmp-NBjy7 .sd-cmp-3eQpC .sd-cmp-TOv77 {
      display: inline-block !important
    }
  </style>
  <style type="text/css">
    .sd-cmp-1bquj {
      position: relative;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1;
      -webkit-appearance: none !important;
      -moz-appearance: none !important;
      appearance: none !important;
      background: none !important;
      border: none !important;
      -webkit-box-shadow: none !important;
      box-shadow: none !important;
      outline: none !important;
      text-shadow: none !important;
      font-size: inherit !important;
      padding: 0 !important;
      margin: 0 !important;
      width: auto !important
    }

    .sd-cmp-1bquj .sd-cmp-1jLDJ,
    .sd-cmp-1bquj .sd-cmp-2jmDj {
      display: block;
      font-family: var(--font-family-title), Helvetica, Arial, sans-serif;
      letter-spacing: .4pt;
      font-weight: 500;
      cursor: pointer;
      white-space: nowrap;
      width: auto;
      outline: 0
    }

    .sd-cmp-1bquj .sd-cmp-1jLDJ {
      border-radius: calc(var(--border-radius)/2);
      border: 1px solid var(--main-color);
      -webkit-tap-highlight-color: transparent;
      -webkit-transition: color .1s ease-out, background .1s ease-out;
      transition: color .1s ease-out, background .1s ease-out
    }

    .sd-cmp-1bquj .sd-cmp-2jmDj {
      font-size: var(--font-size-base);
      color: var(--main-color);
      text-decoration: underline !important;
      padding: .55em 1.5em
    }

    @media (hover:hover) {
      .sd-cmp-1bquj .sd-cmp-2jmDj:hover {
        text-decoration: none !important
      }
    }

    .sd-cmp-1bquj .sd-cmp-2jmDj:active {
      text-decoration: none !important
    }

    .sd-cmp-1bquj:focus {
      outline: 0
    }

    .sd-cmp-1bquj:focus>.sd-cmp-1jLDJ {
      outline: 1px auto -webkit-focus-ring-color
    }

    .sd-cmp-1bquj:hover {
      background: none !important;
      border: none !important
    }

    .sd-cmp-3bFVg {
      padding: .55em 1.5em;
      font-size: var(--font-size-small) !important;
      text-transform: lowercase !important
    }

    .sd-cmp-3_LLS {
      background: var(--main-color);
      color: var(--background-color)
    }

    @media (hover:hover) {
      .sd-cmp-3_LLS:hover {
        background: var(--background-color);
        color: var(--main-color)
      }
    }

    .sd-cmp-W8q3F,
    .sd-cmp-3_LLS:active {
      background: var(--background-color);
      color: var(--main-color)
    }

    @media (hover:hover) {
      .sd-cmp-W8q3F:hover {
        background: var(--main-color);
        color: var(--background-color)
      }

      .sd-cmp-W8q3F:hover svg {
        fill: var(--background-color)
      }
    }

    .sd-cmp-W8q3F:active {
      background: var(--main-color);
      color: var(--background-color)
    }

    .sd-cmp-W8q3F:active svg {
      fill: var(--background-color)
    }

    .sd-cmp-W8q3F svg {
      fill: var(--main-color)
    }

    .sd-cmp-1G6aQ {
      width: 1em;
      height: 1em
    }

    .sd-cmp-26rLm {
      display: inline-block;
      outline: 0;
      z-index: 1
    }

    .sd-cmp-26rLm:hover {
      text-decoration: none !important
    }

    .sd-cmp-26rLm:focus {
      outline: 0
    }

    .sd-cmp-26rLm:focus>.sd-cmp-24wCw {
      outline: 1px auto -webkit-focus-ring-color
    }

    .sd-cmp-26rLm .sd-cmp-24wCw {
      position: absolute;
      top: var(--padding-sm);
      right: var(--padding-sm);
      z-index: 1;
      width: calc(var(--font-size-base)*2);
      height: calc(var(--font-size-base)*2);
      border-radius: var(--border-radius);
      background-color: var(--background-color);
      cursor: pointer;
      outline: 0
    }

    @media (hover:hover) {
      .sd-cmp-26rLm .sd-cmp-24wCw:hover {
        -webkit-filter: contrast(95%);
        filter: contrast(95%)
      }
    }

    .sd-cmp-26rLm .sd-cmp-24wCw span {
      display: block;
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      margin: auto;
      width: var(--font-size-base);
      height: 2px;
      background: var(--main-color);
      border-radius: 2px
    }

    .sd-cmp-26rLm .sd-cmp-24wCw span:first-child {
      -webkit-transform: rotate(45deg);
      transform: rotate(45deg)
    }

    .sd-cmp-26rLm .sd-cmp-24wCw span:nth-child(2) {
      -webkit-transform: rotate(-45deg);
      transform: rotate(-45deg)
    }

    .sd-cmp-2yAVI {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: horizontal;
      -webkit-box-direction: normal;
      -ms-flex-direction: row;
      flex-direction: row;
      -ms-flex-wrap: wrap;
      flex-wrap: wrap
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-2yAVI {
        -webkit-box-orient: vertical;
        -webkit-box-direction: reverse;
        -ms-flex-direction: column-reverse;
        flex-direction: column-reverse
      }
    }

    .sd-cmp-2yAVI .sd-cmp-fuQAp {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-pack: center;
      -ms-flex-pack: center;
      justify-content: center;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      height: 100%;
      letter-spacing: .4pt;
      padding: var(--padding-sm);
      font-size: var(--font-size-base) !important;
      border: 1px solid var(--border-color) !important;
      border-left: 0 !important;
      border-bottom: 0 !important;
      border-radius: 0 !important;
      white-space: normal;
      word-break: break-word;
      -webkit-filter: contrast(95%);
      filter: contrast(95%)
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-2yAVI .sd-cmp-fuQAp {
        border-right: 0 !important
      }
    }

    .sd-cmp-2yAVI>:last-child .sd-cmp-fuQAp {
      border-right: 0 !important
    }

    .sd-cmp-UGoNj>a svg {
      width: 1.5em;
      height: 1.5em;
      stroke: var(--title-color);
      stroke-opacity: .5;
      stroke-linecap: round;
      stroke-linejoin: round;
      stroke-width: 1.5;
      fill: none
    }

    .sd-cmp-UGoNj>a svg:hover {
      stroke-opacity: 1
    }

    .sd-cmp-tfDbK {
      position: absolute;
      top: 0;
      right: 0;
      z-index: 2147483647
    }

    .sd-cmp-tfDbK .sd-cmp-3gktw {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      gap: var(--spacing-sm);
      position: relative;
      background: var(--background-color);
      border-radius: var(--border-radius);
      -webkit-box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137);
      box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137);
      color: var(--title-color);
      border: 1px solid var(--border-color);
      padding: var(--padding-md);
      text-align: left
    }

    .sd-cmp-tfDbK .sd-cmp-3gktw .sd-cmp-1Kq_o {
      -webkit-box-orient: horizontal;
      -webkit-box-direction: normal;
      -ms-flex-direction: row;
      flex-direction: row;
      gap: var(--spacing-sm);
      font-size: var(--font-size-small)
    }

    .sd-cmp-tfDbK .sd-cmp-3gktw .sd-cmp-1Kq_o,
    .sd-cmp-Qhb4d {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center
    }

    .sd-cmp-Qhb4d {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: var(--background-color);
      opacity: .6;
      -webkit-box-pack: center;
      -ms-flex-pack: center;
      justify-content: center
    }

    @-webkit-keyframes sd-cmp-1phSD {
      to {
        -webkit-transform: rotate(1turn);
        transform: rotate(1turn)
      }
    }

    @keyframes sd-cmp-1phSD {
      to {
        -webkit-transform: rotate(1turn);
        transform: rotate(1turn)
      }
    }

    .sd-cmp-Qhb4d span {
      display: inline-block;
      width: 2rem;
      height: 2rem;
      vertical-align: text-bottom;
      border: .25em solid var(--main-color);
      border-right: .25em solid transparent;
      border-radius: 50%;
      -webkit-animation: sd-cmp-1phSD .75s linear infinite;
      animation: sd-cmp-1phSD .75s linear infinite
    }

    .sd-cmp-1yrT_.sd-cmp-1DJ9f {
      visibility: hidden
    }

    .sd-cmp-3jRLA {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      padding: 5px 0;
      position: absolute;
      top: var(--padding-sm);
      right: var(--padding-sm);
      z-index: 1
    }

    @media screen and (prefers-color-scheme:light) {
      .sd-cmp-3jRLA.sd-cmp-wJ0o7 {
        padding: 5px 10px !important;
        background-color: var(--background-color);
        border-radius: calc(var(--border-radius)/2)
      }
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-3jRLA.sd-cmp-17lw6 {
        padding: 5px 10px !important;
        background-color: var(--background-color);
        border-radius: calc(var(--border-radius)/2)
      }
    }

    .sd-cmp-3jRLA .sd-cmp-qYrQ7 {
      padding: 0;
      font-size: var(--font-size-base);
      white-space: normal
    }

    .sd-cmp-1l64l {
      margin: 0 5px
    }

    .sd-cmp-2dwYy {
      position: fixed;
      width: var(--modal-width);
      height: auto;
      top: 50%;
      left: 50%;
      -webkit-transform: translate3d(-50%, -50%, 0);
      transform: translate3d(-50%, -50%, 0);
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-pack: center;
      -ms-flex-pack: center;
      justify-content: center;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      margin: 0;
      padding: 0;
      -webkit-box-shadow: unset !important;
      box-shadow: unset !important;
      z-index: 2147483647
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-2dwYy {
        width: 100%;
        height: 100%
      }
    }

    .sd-cmp-2dwYy.sd-cmp-3-xyC {
      display: none !important
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj {
      width: 100%;
      height: fit-content;
      height: -webkit-fit-content;
      height: -moz-fit-content;
      max-width: calc(var(--modal-width) - var(--padding-md)*2 - 50px);
      max-height: calc(100vh - var(--padding-md)*2 - 50px);
      background: var(--background-color);
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      position: relative;
      border-radius: var(--border-radius);
      border: 1px solid var(--border-color);
      -webkit-box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137);
      box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137)
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-2dwYy .sd-cmp-1XaZj {
        max-width: calc(100vw - var(--padding-sm)*2 - 25px);
        max-height: calc(var(--vh, 1vh)*100 - var(--padding-sm)*2 - 25px);
        margin: 12.5px
      }
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC {
      border-radius: var(--border-radius);
      overflow: hidden
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC,
    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 {
      position: relative;
      overflow-y: auto;
      overflow-x: hidden;
      -webkit-overflow-scrolling: touch;
      min-height: 60px
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 .sd-cmp-3ZKc7 {
      overflow: hidden;
      -ms-overflow-y: hidden;
      overflow-y: auto
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 .sd-cmp-3ZKc7:not(:first-child) {
      padding-top: var(--spacing-md)
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 .sd-cmp-3ZKc7:not(:first-child) {
        padding-top: var(--spacing-lg)
      }
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 .sd-cmp-3ZKc7::-webkit-scrollbar {
      width: 5px
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 .sd-cmp-3ZKc7::-webkit-scrollbar-thumb {
      border: 0 solid transparent;
      -webkit-box-shadow: inset 0 0 0 3px var(--main-color);
      box-shadow: inset 0 0 0 3px var(--main-color)
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 .sd-cmp-3ZKc7 .sd-cmp-25O0Z {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      gap: var(--spacing-lg);
      padding: var(--padding-sm) var(--padding-md);
      color: var(--text-color)
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 .sd-cmp-3ZKc7 .sd-cmp-25O0Z {
        gap: var(--spacing-md);
        padding: var(--padding-sm)
      }
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 .sd-cmp-3ZKc7 .sd-cmp-3dOD4 {
      text-transform: uppercase;
      font-family: var(--font-family-title), Helvetica, Arial, sans-serif;
      font-size: var(--font-size-big);
      font-weight: 700;
      color: var(--title-color);
      padding-bottom: var(--spacing-sm);
      border-bottom: 1px solid var(--border-color)
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 .sd-cmp-3ZKc7 .sd-cmp-3x_wI ul.sd-cmp-2SdjI {
      list-style: circle;
      padding: 0 var(--padding-sm);
      margin-inline: var(--padding-sm)
    }

    .sd-cmp-1OY4L:not(:first-child) {
      position: absolute;
      bottom: 0;
      right: 0;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-pack: end;
      -ms-flex-pack: end;
      justify-content: flex-end
    }

    .sd-cmp-1OY4L:not(:first-child)>a {
      -webkit-box-orient: vertical !important;
      -webkit-box-direction: normal !important;
      -ms-flex-direction: column !important;
      flex-direction: column !important
    }

    .sd-cmp-1OY4L>a {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      -webkit-box-orient: horizontal;
      -webkit-box-direction: normal;
      -ms-flex-direction: row;
      flex-direction: row;
      gap: calc(var(--spacing-sm)/2);
      color: var(--text-color) !important;
      text-decoration: none !important;
      white-space: nowrap
    }

    .sd-cmp-1OY4L>a>span {
      letter-spacing: .7pt;
      font-size: var(--font-size-xxsmall);
      font-weight: 400;
      white-space: nowrap
    }

    .sd-cmp-1OY4L>a>span.sd-cmp-dRdUR {
      display: block;
      font-size: var(--font-size-xsmall);
      font-weight: 700;
      content: var(--provider-logo);
      height: 15px;
      -webkit-filter: grayscale(100%);
      filter: grayscale(100%)
    }

    @media screen and (max-width:calc(400px - 1px)) {
      .sd-cmp-1OY4L {
        display: none !important
      }
    }

    .sd-cmp-2sgrL {
      display: -webkit-inline-box;
      display: -ms-inline-flexbox;
      display: inline-flex;
      cursor: pointer;
      -webkit-tap-highlight-color: transparent;
      outline: none
    }

    .sd-cmp-2sgrL:focus {
      outline: 0
    }

    .sd-cmp-2sgrL:focus>.sd-cmp-2ffiy {
      outline: 1px solid -webkit-focus-ring-color
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy {
      display: inline-block;
      width: 3.6666em;
      height: 1.6666em;
      position: relative;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none;
      outline: 0
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy .sd-cmp-3f1b_ {
      visibility: hidden
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy .sd-cmp-3VuB_ {
      border-radius: .8333em;
      width: 100%;
      height: 100%;
      position: absolute;
      top: 0;
      left: 0;
      -webkit-transition: .1s linear;
      transition: .1s linear;
      overflow: hidden
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy .sd-cmp-3VuB_:before {
      display: block;
      content: "";
      width: 100%;
      height: 100%;
      background-color: var(--background-color);
      -webkit-filter: contrast(75%);
      filter: contrast(75%)
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy .sd-cmp-1M8zu {
      border-radius: calc(1.6666em - 4px);
      width: calc(1.6666em - 4px);
      height: calc(1.6666em - 4px);
      position: absolute;
      top: 2px;
      left: 2px;
      -webkit-transition: .1s linear;
      transition: .1s linear;
      -webkit-transform: translate(1em);
      transform: translate(1em);
      background-color: var(--background-color);
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      -webkit-box-pack: center;
      -ms-flex-pack: center;
      justify-content: center
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy .sd-cmp-1M8zu:before {
      display: block;
      content: "";
      width: 100%;
      height: 100%;
      position: absolute;
      top: 0;
      left: 0;
      border: 2px solid var(--background-color);
      -webkit-box-sizing: border-box;
      box-sizing: border-box;
      border-radius: calc(1.6666em - 4px)
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy .sd-cmp-1M8zu svg {
      margin-top: 0;
      fill: var(--background-color)
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-2ww6m .sd-cmp-3VuB_:before {
      background-color: var(--main-color);
      -webkit-filter: brightness(1);
      filter: brightness(1)
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-2ww6m .sd-cmp-1M8zu {
      -webkit-transform: translate(2em);
      transform: translate(2em);
      background-color: var(--background-color)
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-2ww6m .sd-cmp-1M8zu:before {
      border-color: var(--background-color)
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-2ww6m .sd-cmp-1M8zu svg {
      fill: var(--main-color)
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-23LnT .sd-cmp-1M8zu {
      -webkit-transform: none;
      transform: none
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-23LnT .sd-cmp-1M8zu svg {
      fill: #f67262
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-23LnT .sd-cmp-1M8zu {
        background-color: #f67262
      }

      .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-23LnT .sd-cmp-1M8zu:before {
        border-color: #f67262
      }

      .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-23LnT .sd-cmp-1M8zu svg {
        fill: var(--background-color)
      }
    }

    @media (hover:hover) {
      .sd-cmp-2sgrL .sd-cmp-2ffiy:not(.sd-cmp-2FJ_r):hover .sd-cmp-1M8zu {
        width: calc(1.6666em + 4px);
        height: calc(1.6666em + 4px);
        border-radius: calc(.8333em + 2px);
        top: -2px;
        left: -2px
      }
    }

    @media screen and (prefers-color-scheme:dark) and (hover:hover) {
      .sd-cmp-2sgrL .sd-cmp-2ffiy:not(.sd-cmp-2FJ_r):not(.sd-cmp-2ww6m):not(.sd-cmp-23LnT):hover .sd-cmp-1M8zu:before {
        -webkit-filter: contrast(75%);
        filter: contrast(75%)
      }
    }

    @media screen and (prefers-color-scheme:light) and (hover:hover) {
      .sd-cmp-2sgrL .sd-cmp-2ffiy:not(.sd-cmp-2FJ_r):not(.sd-cmp-2ww6m):hover .sd-cmp-1M8zu:before {
        -webkit-filter: contrast(75%);
        filter: contrast(75%)
      }
    }

    @media (hover:hover) {
      .sd-cmp-2sgrL .sd-cmp-2ffiy:not(.sd-cmp-2FJ_r).sd-cmp-2ww6m:hover .sd-cmp-1M8zu:before {
        border-color: var(--main-color)
      }
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-2FJ_r {
      cursor: default
    }
  </style>
  <style type="text/css">
    .sd-cmp-2Rfqb {
      position: relative;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1;
      -webkit-appearance: none !important;
      -moz-appearance: none !important;
      appearance: none !important;
      background: none !important;
      border: none !important;
      -webkit-box-shadow: none !important;
      box-shadow: none !important;
      outline: none !important;
      text-shadow: none !important;
      font-size: inherit !important;
      padding: 0 !important;
      margin: 0 !important;
      width: auto !important
    }

    .sd-cmp-2Rfqb .sd-cmp-P9OsE,
    .sd-cmp-2Rfqb .sd-cmp-4psWo {
      display: block;
      font-family: var(--font-family-title), Helvetica, Arial, sans-serif;
      letter-spacing: .4pt;
      font-weight: 500;
      cursor: pointer;
      white-space: nowrap;
      width: auto;
      outline: 0
    }

    .sd-cmp-2Rfqb .sd-cmp-P9OsE {
      border-radius: calc(var(--border-radius)/2);
      border: 1px solid var(--main-color);
      -webkit-tap-highlight-color: transparent;
      -webkit-transition: color .1s ease-out, background .1s ease-out;
      transition: color .1s ease-out, background .1s ease-out
    }

    .sd-cmp-2Rfqb .sd-cmp-4psWo {
      font-size: var(--font-size-base);
      color: var(--main-color);
      text-decoration: underline !important;
      padding: .55em 1.5em
    }

    @media (hover:hover) {
      .sd-cmp-2Rfqb .sd-cmp-4psWo:hover {
        text-decoration: none !important
      }
    }

    .sd-cmp-2Rfqb .sd-cmp-4psWo:active {
      text-decoration: none !important
    }

    .sd-cmp-2Rfqb:focus {
      outline: 0
    }

    .sd-cmp-2Rfqb:focus>.sd-cmp-P9OsE {
      outline: 1px auto -webkit-focus-ring-color
    }

    .sd-cmp-2Rfqb:hover {
      background: none !important;
      border: none !important
    }

    .sd-cmp-2YQh2 {
      padding: .55em 1.5em;
      font-size: var(--font-size-small) !important;
      text-transform: lowercase !important
    }

    .sd-cmp-3JhOz {
      background: var(--main-color);
      color: var(--background-color)
    }

    @media (hover:hover) {
      .sd-cmp-3JhOz:hover {
        background: var(--background-color);
        color: var(--main-color)
      }
    }

    .sd-cmp-I0Qqz,
    .sd-cmp-3JhOz:active {
      background: var(--background-color);
      color: var(--main-color)
    }

    @media (hover:hover) {
      .sd-cmp-I0Qqz:hover {
        background: var(--main-color);
        color: var(--background-color)
      }

      .sd-cmp-I0Qqz:hover svg {
        fill: var(--background-color)
      }
    }

    .sd-cmp-I0Qqz:active {
      background: var(--main-color);
      color: var(--background-color)
    }

    .sd-cmp-I0Qqz:active svg {
      fill: var(--background-color)
    }

    .sd-cmp-I0Qqz svg {
      fill: var(--main-color)
    }

    .sd-cmp-2fiYx {
      position: fixed;
      width: var(--modal-width);
      height: auto;
      top: 50%;
      left: 50%;
      -webkit-transform: translate3d(-50%, -50%, 0);
      transform: translate3d(-50%, -50%, 0);
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-pack: center;
      -ms-flex-pack: center;
      justify-content: center;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      margin: 0;
      padding: 0;
      -webkit-box-shadow: unset !important;
      box-shadow: unset !important;
      z-index: 2147483647
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-2fiYx {
        width: 100%;
        height: 100%
      }
    }

    .sd-cmp-2fiYx.sd-cmp-3bYHL {
      top: 0 !important;
      bottom: auto !important
    }

    .sd-cmp-2fiYx.sd-cmp-1N-2m,
    .sd-cmp-2fiYx.sd-cmp-3bYHL {
      left: 0 !important;
      right: 0 !important;
      -webkit-transform: unset !important;
      transform: unset !important
    }

    .sd-cmp-2fiYx.sd-cmp-1N-2m {
      top: auto !important;
      bottom: 0 !important
    }

    .sd-cmp-2fiYx.sd-cmp-2B8FG {
      left: 0 !important;
      right: unset !important
    }

    .sd-cmp-2fiYx.sd-cmp-3l9Ca {
      left: unset !important;
      right: 0 !important
    }

    .sd-cmp-2fiYx.sd-cmp-13Tzg {
      width: 100%;
      max-width: 1400px;
      margin: auto
    }

    .sd-cmp-2fiYx.sd-cmp-2DClO {
      display: none !important
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l {
      width: 100%;
      height: fit-content;
      height: -webkit-fit-content;
      height: -moz-fit-content;
      max-height: calc(100vh - 50px);
      margin: 25px;
      background: var(--background-color);
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      position: relative;
      border-radius: var(--border-radius);
      -webkit-box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137);
      box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137)
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l.sd-cmp-JTFSm {
      height: 600px
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-2fiYx .sd-cmp-2Ap2l {
        max-height: calc(var(--vh, 1vh)*100 - 25px);
        margin: 12.5px
      }
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_ {
      display: none;
      width: var(--skin-size);
      background-color: var(--background-color);
      background-position: 50%;
      background-size: cover;
      background-repeat: no-repeat;
      border-radius: var(--border-radius) 0 0 var(--border-radius)
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG {
      display: block;
      background-image: var(--skin)
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG+*+*+*+.sd-cmp-M7o5g,
    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG+*+*+.sd-cmp-M7o5g,
    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG+*+.sd-cmp-M7o5g,
    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG+.sd-cmp-M7o5g {
      border-radius: 0 var(--border-radius) var(--border-radius) 0
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-iiwF5 {
      background-image: var(--skin-dark)
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG {
        display: none
      }

      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG+*+*+*+.sd-cmp-M7o5g,
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG+*+*+.sd-cmp-M7o5g,
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG+*+.sd-cmp-M7o5g,
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG+.sd-cmp-M7o5g {
        border-radius: var(--border-radius)
      }

      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-iiwF5 {
        display: block
      }

      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-iiwF5+*+*+*+.sd-cmp-M7o5g,
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-iiwF5+*+*+.sd-cmp-M7o5g,
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-iiwF5+*+.sd-cmp-M7o5g,
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-iiwF5+.sd-cmp-M7o5g {
        border-radius: 0 var(--border-radius) var(--border-radius) 0
      }
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_+.sd-cmp-3f-nX {
      left: calc(var(--skin-size) + var(--padding-md))
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_ {
        display: none !important
      }

      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_+.sd-cmp-3f-nX {
        left: calc(var(--padding-md))
      }

      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_+*+*+*+.sd-cmp-M7o5g,
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_+*+*+.sd-cmp-M7o5g,
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_+*+.sd-cmp-M7o5g,
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_+.sd-cmp-M7o5g {
        border-radius: var(--border-radius) !important
      }
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3f-nX {
      display: none;
      width: var(--logo-size);
      height: var(--logo-size);
      position: absolute;
      top: var(--logo-offset);
      left: var(--padding-md);
      background-color: var(--background-color);
      background-position: 50%;
      background-size: 100%;
      background-repeat: no-repeat;
      -webkit-box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137);
      box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137);
      border-radius: calc(var(--border-radius)/2);
      border: 5px solid var(--background-color);
      z-index: 1
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3f-nX.sd-cmp-1yUSH {
      display: block;
      background-image: var(--logo)
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3f-nX.sd-cmp-3Vjk0 {
      background-image: var(--logo-dark)
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3f-nX.sd-cmp-1yUSH {
        display: none
      }

      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3f-nX.sd-cmp-3Vjk0 {
        display: block
      }
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3f-nX {
        left: var(--padding-sm) !important
      }
    }

    @media screen and (max-width:calc(400px - 1px)) {
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3f-nX {
        display: none !important
      }
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1;
      border-radius: var(--border-radius);
      overflow: hidden
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g:before {
      content: "";
      position: absolute;
      top: 0;
      right: 0;
      width: 50%;
      height: 50%;
      border-top-right-radius: var(--border-radius);
      opacity: .25;
      background: transparent 100% 0/contain no-repeat var(--watermark)
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g:before {
        background: transparent 100% 0/contain no-repeat var(--watermark-dark)
      }
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g .sd-cmp-3Ob7I {
      position: relative;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      gap: var(--spacing-sm);
      padding: var(--padding-sm) var(--padding-md)
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g .sd-cmp-3Ob7I {
        padding: var(--padding-sm)
      }
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g .sd-cmp-3Ob7I>* {
      width: 100%
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g .sd-cmp-WV_jZ {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1;
      position: relative;
      overflow-y: auto;
      overflow-x: hidden;
      -webkit-overflow-scrolling: touch;
      min-height: 60px
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g .sd-cmp-WV_jZ .sd-cmp-2L7kb {
      overflow: hidden;
      -ms-overflow-y: hidden;
      overflow-y: auto
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g .sd-cmp-WV_jZ .sd-cmp-2L7kb::-webkit-scrollbar {
      width: 5px
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g .sd-cmp-WV_jZ .sd-cmp-2L7kb::-webkit-scrollbar-thumb {
      border: 0 solid transparent;
      -webkit-box-shadow: inset 0 0 0 3px var(--main-color);
      box-shadow: inset 0 0 0 3px var(--main-color)
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g .sd-cmp-WV_jZ .sd-cmp-2L7kb .sd-cmp-2zXBa {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      gap: var(--spacing-lg);
      padding: var(--padding-sm) var(--padding-md)
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g .sd-cmp-WV_jZ .sd-cmp-2L7kb .sd-cmp-2zXBa {
        gap: var(--spacing-md);
        padding: var(--padding-sm)
      }
    }

    .sd-cmp-3CtBh {
      position: fixed;
      z-index: 999999;
      font-size: 100%;
      bottom: 20px
    }

    .sd-cmp-3CtBh.sd-cmp-1eC6j {
      left: 20px
    }

    .sd-cmp-3CtBh.sd-cmp-1eC6j button {
      border-bottom-left-radius: 0 !important
    }

    .sd-cmp-3CtBh.sd-cmp-29k-b {
      right: 20px
    }

    .sd-cmp-3CtBh.sd-cmp-29k-b button {
      border-bottom-right-radius: 0 !important
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-3CtBh {
        bottom: 10px
      }

      .sd-cmp-3CtBh.sd-cmp-1eC6j {
        left: 10px
      }

      .sd-cmp-3CtBh.sd-cmp-29k-b {
        right: 10px
      }
    }

    .sd-cmp-3CtBh .sd-cmp-1jcua {
      display: block;
      position: relative
    }

    .sd-cmp-3CtBh .sd-cmp-1HEM- svg {
      -webkit-filter: drop-shadow(0 -5px 6px rgba(0, 0, 0, .12549019607843137));
      filter: drop-shadow(0 -5px 6px #00000020)
    }

    .sd-cmp-3CtBh .sd-cmp-1HEM-:not(.sd-cmp-1IetA) {
      cursor: pointer
    }

    .sd-cmp-3CtBh .sd-cmp-1HEM-:not(.sd-cmp-1IetA) svg:hover {
      -webkit-transform: translateY(-5px);
      transform: translateY(-5px)
    }

    .sd-cmp-3CtBh button.sd-cmp-eBAM3 {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: horizontal;
      -webkit-box-direction: normal;
      -ms-flex-direction: row;
      flex-direction: row;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      gap: var(--spacing-md);
      outline: 0;
      -webkit-tap-highlight-color: transparent;
      -webkit-transition: color .1s ease-out, background .1s ease-out;
      transition: color .1s ease-out, background .1s ease-out;
      border-radius: var(--border-radius);
      -webkit-box-shadow: 0 -5px 12px -2px rgba(0, 0, 0, .12549019607843137);
      box-shadow: 0 -5px 12px -2px rgba(0, 0, 0, .12549019607843137);
      background: var(--main-color);
      color: var(--background-color);
      border: 1px solid var(--background-color);
      padding: calc(var(--padding-md)/2) var(--padding-md);
      font-family: var(--font-family-title), Helvetica, Arial, sans-serif;
      font-size: var(--font-size-base) !important;
      line-height: 1.4
    }

    .sd-cmp-3CtBh button.sd-cmp-eBAM3.sd-cmp-Dcke7 {
      padding: calc(var(--padding-sm)/2) var(--padding-sm);
      font-size: var(--font-size-small) !important
    }

    .sd-cmp-3CtBh button.sd-cmp-eBAM3.sd-cmp-Dcke7 .sd-cmp-2DMNr svg {
      height: 17px
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-3CtBh button.sd-cmp-eBAM3:not(.sd-cmp-3sfQJ) {
        padding: calc(var(--padding-sm)/2) var(--padding-sm)
      }
    }

    @media (hover:hover) {
      .sd-cmp-3CtBh button.sd-cmp-eBAM3:hover:not([disabled]) {
        background: var(--background-color);
        color: var(--main-color);
        border: 1px solid var(--main-color);
        cursor: pointer
      }
    }

    .sd-cmp-3CtBh button.sd-cmp-eBAM3 .sd-cmp-2DMNr svg {
      width: auto;
      height: 20px
    }
  </style>
  <style type="text/css">
    .sd-cmp-M_ol- {
      position: relative;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1;
      -webkit-appearance: none !important;
      -moz-appearance: none !important;
      appearance: none !important;
      background: none !important;
      border: none !important;
      -webkit-box-shadow: none !important;
      box-shadow: none !important;
      outline: none !important;
      text-shadow: none !important;
      font-size: inherit !important;
      padding: 0 !important;
      margin: 0 !important;
      width: auto !important
    }

    .sd-cmp-M_ol- .sd-cmp-3Ddrw,
    .sd-cmp-M_ol- .sd-cmp-2QkHp {
      display: block;
      font-family: var(--font-family-title), Helvetica, Arial, sans-serif;
      letter-spacing: .4pt;
      font-weight: 500;
      cursor: pointer;
      white-space: nowrap;
      width: auto;
      outline: 0
    }

    .sd-cmp-M_ol- .sd-cmp-3Ddrw {
      border-radius: calc(var(--border-radius)/2);
      border: 1px solid var(--main-color);
      -webkit-tap-highlight-color: transparent;
      -webkit-transition: color .1s ease-out, background .1s ease-out;
      transition: color .1s ease-out, background .1s ease-out
    }

    .sd-cmp-M_ol- .sd-cmp-2QkHp {
      font-size: var(--font-size-base);
      color: var(--main-color);
      text-decoration: underline !important;
      padding: .55em 1.5em
    }

    @media (hover:hover) {
      .sd-cmp-M_ol- .sd-cmp-2QkHp:hover {
        text-decoration: none !important
      }
    }

    .sd-cmp-M_ol- .sd-cmp-2QkHp:active {
      text-decoration: none !important
    }

    .sd-cmp-M_ol-:focus {
      outline: 0
    }

    .sd-cmp-M_ol-:focus>.sd-cmp-3Ddrw {
      outline: 1px auto -webkit-focus-ring-color
    }

    .sd-cmp-M_ol-:hover {
      background: none !important;
      border: none !important
    }

    .sd-cmp-3CVn1 {
      padding: .55em 1.5em;
      font-size: var(--font-size-small) !important;
      text-transform: lowercase !important
    }

    .sd-cmp-qlrqV {
      background: var(--main-color);
      color: var(--background-color)
    }

    @media (hover:hover) {
      .sd-cmp-qlrqV:hover {
        background: var(--background-color);
        color: var(--main-color)
      }
    }

    .sd-cmp-R874O,
    .sd-cmp-qlrqV:active {
      background: var(--background-color);
      color: var(--main-color)
    }

    @media (hover:hover) {
      .sd-cmp-R874O:hover {
        background: var(--main-color);
        color: var(--background-color)
      }

      .sd-cmp-R874O:hover svg {
        fill: var(--background-color)
      }
    }

    .sd-cmp-R874O:active {
      background: var(--main-color);
      color: var(--background-color)
    }

    .sd-cmp-R874O:active svg {
      fill: var(--background-color)
    }

    .sd-cmp-R874O svg {
      fill: var(--main-color)
    }

    .sd-cmp-mgUYY {
      position: relative
    }

    .sd-cmp-mgUYY a.sd-cmp-1eRDs {
      -webkit-text-decoration: underline dashed !important;
      text-decoration: underline dashed !important
    }

    .sd-cmp-3WOME {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      gap: var(--spacing-sm);
      text-align: center
    }
  </style>
</head>

<body><noscript>
    <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-5D6VC2L&gtm_auth=&gtm_preview=&gtm_cookies_win=x"
      height="0" width="0" style="display:none;visibility:hidden" id="tag-manager"></iframe></noscript><noscript>
    <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-5D6VC2L&gtm_auth=&gtm_preview=&gtm_cookies_win=x"
      height="0" width="0" style="display:none;visibility:hidden" id="tag-manager"></iframe></noscript>
  <div id="__next">
    <div data-testid="default-layout" class="sc-9c57b843-0 eRWXBr">
      <div class="sc-ccc62f29-0 isIJWV">
        <div class="sc-de9e3aea-0 jjEEkw">
          <div>
            <div>
              <div class="adn-interstitiel hide" data-time="5">
                <div class="adn-interstitiel-close-button hide"></div><a target="_blank"
                  href="/video/315-no-game-no-life/5008-episode-6#"> </a>
                <div class="adn-interstitiel-content"></div>
                <div class="adn-interstitiel-video hide"></div>
              </div>
              <div class="adn-interstitiel-background hide"></div>
            </div>
            <div id="div-gpt-ad-1627562754480-0" style="height: 1px; width: 1px;">
              <script>googletag.cmd.push(function () { googletag.display("div-gpt-ad-1627562754480-0"); });</script>
            </div>
          </div>
        </div>
        <div class="sc-621a9100-0 cEUYSz">
          <nav data-testid="menuContent" class="sc-621a9100-1 jIUuTk">
            <ul class="sc-621a9100-2 fGnBpI">
              <li class="sc-621a9100-3 kOoxHx"><a class="sc-621a9100-5 kYMsgx" href="/"><img alt="" loading="lazy"
                    width="84" height="42" decoding="async" data-nimg="1" class="sc-f6c13dea-0 gvKDbT"
                    style="color:transparent" src="/images/logo-adn/adn-logo-fairy-tail.webp"></a></li>
              <li class="sc-621a9100-3 kOoxHx"><a class="sc-621a9100-5 hDImXX" href="/video"><span
                    class="sc-45f49f9-0 kHRvYb icon sc-621a9100-6 hVmpne icon-catalog-page"
                    data-testid="menu-icon"></span><span data-testid="menu-label"
                    class="sc-621a9100-9 iitBlP">Catalogue</span></a>
                <div class="sc-621a9100-10 bTRBOF"></div>
              </li>
              <li class="sc-621a9100-3 kOoxHx"><a class="sc-621a9100-5 hDImXX" href="/new-on-adn"><span
                    class="sc-45f49f9-0 kHRvYb icon sc-621a9100-6 hVmpne icon-hot" data-testid="menu-icon"></span><span
                    data-testid="menu-label" class="sc-621a9100-9 iitBlP">Nouveautés</span></a>
                <div class="sc-621a9100-10 bTRBOF"></div>
              </li>
              <li class="sc-621a9100-3 kOoxHx"><span class="sc-cf524f08-0 fYjySn sc-621a9100-5 hDImXX"><span
                    class="sc-45f49f9-0 kHRvYb icon sc-621a9100-6 hVmpne icon-playlist"
                    data-testid="menu-icon"></span><span data-testid="menu-label"
                    class="sc-621a9100-9 iitBlP">Séries</span></span>
                <div class="sc-621a9100-10 bTRBOF">
                  <ul class="sc-621a9100-11 rtuMC">
                    <li class="sc-621a9100-13 gZSZQC"><a class="sc-621a9100-5 sc-621a9100-14 hDImXX kGDxdr"
                        href="/video?type=EPS&amp;genres=animation_japonaise">Animation japonaise</a></li>
                    <li class="sc-621a9100-13 gZSZQC"><a class="sc-621a9100-5 sc-621a9100-14 hDImXX kGDxdr"
                        href="/video?type=EPS&amp;genres=animation_franco-belge">Animation franco-belge</a></li>
                    <li class="sc-621a9100-13 gZSZQC"><a class="sc-621a9100-5 sc-621a9100-14 hDImXX kGDxdr"
                        href="/video?type=EPS&amp;genres=jeunesse">Jeunesse</a></li>
                    <li class="sc-621a9100-13 gZSZQC"><a class="sc-621a9100-5 sc-621a9100-14 hDImXX kGDxdr"
                        href="/video?type=EPS">Toutes les séries</a></li>
                  </ul>
                </div>
              </li>
              <li class="sc-621a9100-3 kOoxHx"><span class="sc-cf524f08-0 fYjySn sc-621a9100-5 hDImXX"><span
                    class="sc-45f49f9-0 kHRvYb icon sc-621a9100-6 hVmpne icon-movie"
                    data-testid="menu-icon"></span><span data-testid="menu-label"
                    class="sc-621a9100-9 iitBlP">Films</span></span>
                <div class="sc-621a9100-10 bTRBOF">
                  <ul class="sc-621a9100-11 rtuMC">
                    <li class="sc-621a9100-13 gZSZQC"><a class="sc-621a9100-5 sc-621a9100-14 hDImXX kGDxdr"
                        href="/video?type=MOV">Long-métrage</a></li>
                    <li class="sc-621a9100-13 gZSZQC"><a class="sc-621a9100-5 sc-621a9100-14 hDImXX kGDxdr"
                        href="/video?type=SHORT">Court-métrage</a></li>
                    <li class="sc-621a9100-13 gZSZQC"><a class="sc-621a9100-5 sc-621a9100-14 hDImXX kGDxdr"
                        href="/video?type=OAV">Oav</a></li>
                  </ul>
                </div>
              </li>
              <li class="sc-621a9100-3 kOoxHx"><a class="sc-621a9100-5 hDImXX" href="/video?distribution=free"><span
                    class="sc-45f49f9-0 kHRvYb icon sc-621a9100-6 hVmpne icon-free" data-testid="menu-icon"></span><span
                    data-testid="menu-label" class="sc-621a9100-9 iitBlP">Gratuit</span></a>
                <div class="sc-621a9100-10 bTRBOF"></div>
              </li>
              <li class="sc-621a9100-3 kOoxHx"><a class="sc-621a9100-5 kYMsgx" href="/live"><span
                    class="sc-531a95f7-0 TTQcA sc-beaa459b-0 hByTWU"></span><span data-testid="menu-label"
                    class="sc-621a9100-9 iitBlP">ADN TV+</span></a>
                <div class="sc-621a9100-10 bTRBOF"></div>
              </li>
              <li class="sc-621a9100-4 dGQagY"></li>
              <li data-testid="menu-search" class="sc-621a9100-3 kOoxHx"><span
                  class="sc-cf524f08-0 fYjySn sc-621a9100-5 eQdlua"><span
                    class="sc-45f49f9-0 kHRvYb icon sc-621a9100-6 hVmpne icon-search"
                    data-testid="menu-icon"></span></span>
                <div class="sc-621a9100-10 bTRBOF">
                  <ul class="sc-621a9100-11 rtuMC">
                    <li class="sc-621a9100-13 kuGBZB">
                      <form class="sc-81c770ae-0 fJjufR"><span
                          class="sc-45f49f9-0 kHRvYb icon sc-81c770ae-1 iRtQxu icon-search"><label for="nav-search"
                            class="sc-81c770ae-3 fAIOSR"><input id="nav-search" data-testid="nav-search" type="text"
                              autocomplete="off" class="sc-81c770ae-2 BhJuU" value=""></label></span></form>
                    </li>
                  </ul>
                </div>
              </li>
              <li class="sc-621a9100-3 kOoxHx"><span data-testid="menu-offer-button" class="sc-621a9100-8 bLQctB">
                  <div class="sc-621a9100-12 lirrLF"><a data-testid="button" class="sc-af141b2-4-Component bTWwvv"
                      href="/subscribe"><span>S'abonner</span></a></div>
                </span></li>
              <li data-testid="menu-login-link" class="sc-621a9100-3 kOoxHx"><a class="sc-621a9100-5 kYMsgx"
                  href="/login"><span class="sc-45f49f9-0 iLKksz icon sc-621a9100-6 hVmoTu icon-profil-2"></span></a>
              </li>
              <li class="sc-621a9100-15 hxTgvh"><button class="sc-45f49f9-0 kHSHkc icon sc-621a9100-16 irTNQq icon-menu"
                  data-testid="menu-burger" data-toggle="collapse" data-target="#menu-collapse"
                  aria-controls="menu-collapse" aria-expanded="" aria-label="Toggle navigation" type="button"></button>
              </li>
            </ul>
          </nav>
        </div>
        <div data-testid="header-wrapper" class="sc-f885e9ef-0 iNNfIO">
          <div class="sc-5a07385f-0 ijZHww">
            <div class="sc-5a07385f-1 cxbrPD">
              <div>
                <div class="sc-e71849ea-0 cbBkcX">
                  <div data-testid="ads-block">
                    <div id="div-gpt-ad-1569230740302-0" class="ads-block">
                      <script>googletag.cmd.push(function () { googletag.display("div-gpt-ad-1569230740302-0"); });</script>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="sc-60e49a10-0 jUuRqY">
          <div class="sc-60e49a10-1 kMXdzm">
            <div data-testid="player-content">
              <script
                type="application/ld+json">{"@context":"http://schema.org","@type":"TVEpisode","name":"No Game No Life - Épisode 6 : Un coup interesting","description":"Sora et Shiro défient Jibril et lui demandent la bibliothèque. De leur côté ils mettent leur tablette en jeu. Appâtée par la somme folle de connaissances venant d'un autre mode que recèle la tablette, Jibril accepte et surenchérit en proposant sa vie à la place de la bibliothèque. Elle propose donc de jouer au jeu de la dernière syllabe. Seulement, son jeu est un peu spécial. Lorsque la chose que désigne le mot prononcé existe là où on se trouve, elle disparaît et, à l'inverse, lorsqu'elle n'existe pas, elle apparaît. S'enchaîne une suite de mot et d'apparitions/disparitions qui mèneront presque à la fin du monde...","episodeNumber":"6","thumbnailUrl":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps6_640x360.jpg","video":{"@type":"VideoObject","name":"No Game No Life - Épisode 6 : Un coup interesting","url":"https://animationdigitalnetwork.com/video/315-no-game-no-life/5008-episode-6","description":"Retrouvez No Game No Life - Épisode 6 en streaming VF et VOSTFR sur Animation Digital Network ! Qualité HD 1080p, HD 720p et SD 480p.","caption":"Retrouvez No Game No Life - Épisode 6 en streaming VF et VOSTFR sur Animation Digital Network ! Qualité HD 1080p, HD 720p et SD 480p.","encodingFormat":"mp4","videoQuality":"HD 1080p","requiresSubscription":true,"thumbnailUrl":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps6_1920x1080.jpg","duration":"PT24M1S","width":1920,"height":1080,"playerType":"HTML5","isFamilyFriendly":true,"datePublished":"2014-05-29T15:00:00Z","uploadDate":"2014-05-29T15:00:00Z","genre":"Game, Médieval-Fantastique, Moe, noitaminA, Sexy, Animation japonaise, Action, Aventure, Comédie, Ecchi, Fantastique, Seinen","embedUrl":"https://animationdigitalnetwork.com/embedded/315-no-game-no-life/5008","interactionStatistic":{"@type":"InteractionCounter","interactionType":"http://schema.org/CommentAction","userInteractionCount":42},"author":[{"@type":"Person","name":"ADN","url":"https://animationdigitalnetwork.com"}],"inLanguage":["jp","fr"],"potentialAction":{"@type":"WatchAction","target":[{"url":"https://animationdigitalnetwork.com/video/315-no-game-no-life/5008-episode-6","actionPlatform":"https://schema.org/DesktopWebPlatform","inLanguage":["jp","fr"]},{"url":"https://animationdigitalnetwork.com/video/315-no-game-no-life/5008-episode-6","actionPlatform":"https://schema.org/MobileWebPlatform","inLanguage":["jp","fr"]},{"url":"https://animationdigitalnetwork.com/video/315-no-game-no-life/5008-episode-6","actionPlatform":"https://schema.org/IOSPlatform","inLanguage":["jp","fr"]},{"url":"https://animationdigitalnetwork.com/video/315-no-game-no-life/5008-episode-6","actionPlatform":"https://schema.org/AndroidPlatform","inLanguage":["jp","fr"]}],"actionAccessibilityRequirement":{"@type":"ActionAccessSpecification","category":"subscriptionRequired","availabilityStarts":"2014-05-29T15:00:00Z","availabilityEnds":"2032-03-31T00:00:00Z"}}},"subtitleLanguage":"fr","partOfSeries":{"@type":"TVSeries","name":"No Game No Life","url":"https://animationdigitalnetwork.com/video/315-no-game-no-life"},"partOfSeason":{"@type":"CreativeWorkSeason","name":"Saison 1","seasonNumber":"1"},"aggregateRating":{"@type":"AggregateRating","ratingValue":4.8,"ratingCount":193}}</script>
              <script
                type="application/ld+json">{"@context":"https://schema.org","@type":"BreadcrumbList","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https://animationdigitalnetwork.com"},{"@type":"ListItem","position":2,"name":"No Game No Life","item":"https://animationdigitalnetwork.com/video/315-no-game-no-life"},{"@type":"ListItem","position":3,"name":"No Game No Life - Épisode 6","item":"https://animationdigitalnetwork.com/video/315-no-game-no-life/5008-episode-6"}]}</script>
              <div class="sc-3b794bf1-0 sc-3b794bf1-1 fccbjH gYcEtV">
                <div class="sc-5a07385f-0 izqJqd">
                  <div class="sc-5a07385f-1 itDEN">
                    <div>
                      <h1 title="No Game No Life - Épisode 6 : Un coup interesting" class="sc-ca75078d-3 iNSNnU"><span
                          class="sc-ca75078d-5 dIbhyE"> <!-- -->Épisode 6 : Un coup interesting</span><a
                          class="sc-ca75078d-4 bHdkA-d" href="/video/315-no-game-no-life">No Game No Life</a></h1>
                      <ul class="sc-ca75078d-0 bbVXwQ">
                        <li class="sc-ca75078d-1 gDGYcG">HD 1080p</li>
                        <li title="Japonais sous-titré français" class="sc-ca75078d-1 gDGYcG">VOSTFR</li>
                        <li title="Français" class="sc-ca75078d-1 gDGYcG">VF</li>
                        <li class="sc-ca75078d-1 gDGYcG">12+</li>
                        <li class="sc-ca75078d-1 dYAgBK">
                          <div data-testid="vod-rating">
                            <p data-testid="rating-note" class="sc-ebbe6c3b-1 hIdMJL">4.8<span>/5</span></p>
                            <div class="sc-70923b32-4 cYfyie">
                              <ul data-testid="empty-list" class="sc-70923b32-5 gQJqQq">
                                <li class="sc-70923b32-8 ciuxMJ"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-70923b32-2 kGLNvr icon-star"></span></li>
                                <li class="sc-70923b32-8 ciuxMJ"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-70923b32-2 kGLNvr icon-star"></span></li>
                                <li class="sc-70923b32-8 ciuxMJ"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-70923b32-2 kGLNvr icon-star"></span></li>
                                <li class="sc-70923b32-8 ciuxMJ"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-70923b32-2 kGLNvr icon-star"></span></li>
                                <li class="sc-70923b32-8 ciuxMJ"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-70923b32-2 kGLNvr icon-star"></span></li>
                              </ul>
                              <ul data-testid="rating-list" class="sc-70923b32-6 bYbUqK">
                                <li data-testid="rating-list-item" class="sc-70923b32-8 ciuxMJ"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-70923b32-3 gqlDIE icon-star"></span></li>
                                <li data-testid="rating-list-item" class="sc-70923b32-8 ciuxMJ"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-70923b32-3 gqlDIE icon-star"></span></li>
                                <li data-testid="rating-list-item" class="sc-70923b32-8 ciuxMJ"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-70923b32-3 gqlDIE icon-star"></span></li>
                                <li data-testid="rating-list-item" class="sc-70923b32-8 ciuxMJ"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-70923b32-3 gqlDIE icon-star"></span></li>
                                <li data-testid="rating-list-item" class="sc-70923b32-8 ciuxMJ"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-70923b32-3 gqlDIE icon-star"></span></li>
                              </ul>
                            </div>
                          </div>
                        </li>
                        <li class="sc-ca75078d-1 gDGYcG"><span
                            data-link="L2NvbW1lbnRzLzMxNS1uby1nYW1lLW5vLWxpZmUvNTAwOC1lcGlzb2RlLTY" role="link"
                            tabindex="0" class="sc-fb73a479-0 jFWHTR sc-ca75078d-2 bCDgiI">42 commentaires</span></li>
                      </ul>
                      <ul class="sc-3b794bf1-3 dvWoSm">
                        <li class="sc-3b794bf1-4 fHvaOF"><button data-testid="watchlist-button"
                            class="sc-f85a8886-0-button frfnfW"><span>Ma watchlist</span></button></li>
                        <li class="sc-3b794bf1-4 fHvaOF">
                          <div class="sc-6891cc6-0 euwFRO">
                            <ul class="sc-6891cc6-1 bGvGLN">
                              <li data-testid="share-text" class="sc-6891cc6-2 gzLlDv">Partager :</li>
                              <li class="sc-6891cc6-2 iBwdDI"><button title="Partager sur Facebook"
                                  class="sc-f85a8886-0-button VQVPS sc-6891cc6-4 TNaFK"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-6891cc6-3 cEsLVB icon-facebook"></span></button>
                              </li>
                              <li class="sc-6891cc6-2 iBwdDI"><button
                                  class="sc-f85a8886-0-button VQVPS sc-6891cc6-4 TNaFK"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-6891cc6-3 cEsLVB icon-twitter"></span></button>
                              </li>
                              <li class="sc-6891cc6-2 iBwdDI"><button
                                  class="sc-f85a8886-0-button VQVPS sc-6891cc6-4 TNaFK">&lt;/&gt;
                                  <!-- -->Insérer</button></li>
                            </ul>
                          </div>
                        </li>
                      </ul>
                      <div class="sc-fbe71df2-0 hwBOkU">
                        <div class="sc-fbe71df2-1 kGKfVM video" data-testid="video-player">
                          <div class="sc-fbe71df2-2 hTmTQb">
                            <div data-testid="loading-wrapper" class="sc-676ec17d-0 gpzqJY"><span
                                class="sc-45f49f9-0 kHRvYb icon sc-676ec17d-1 iMIEea icon-spinner"
                                data-testid="loading-spinner"></span> Chargement du lecteur...</div>
                          </div>
                        </div>
                        <div data-testid="player-popup" class="sc-c2fe7676-0 NhmDc"><span
                            class="sc-45f49f9-0 kHRvYb icon sc-c2fe7676-1 ikOGYP icon-close"></span>
                          <div class="sc-c2fe7676-2 bQUcrT">
                            <div class="sc-c2fe7676-3 cPVckH">
                              <p class="sc-c2fe7676-4 cRDLyX">Vous devez être abonné pour accéder à ce contenu.</p>
                              <div class="sc-fbe71df2-7 grgwvI"><a class="sc-f85a8886-0 lmZBdA sc-fbe71df2-8 gmwdCu"
                                  href="/subscribe">Découvrir les offres</a><a
                                  class="sc-f85a8886-0 lmZBdA sc-fbe71df2-8 gmwdCu" href="/video">Accéder au
                                  catalogue</a></div>
                              <div class="sc-fbe71df2-9 erEUgA">Déjà abonné(e) à ADN ? <a
                                  href="/login?return=L3ZpZGVvLzMxNS1uby1nYW1lLW5vLWxpZmUvNTAwOC1lcGlzb2RlLTY">Cliquez
                                  ici !</a><br>pour vous connecter à votre compte et visionner l'épisode</div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="sc-5a07385f-0 izqJqd">
                  <div class="sc-5a07385f-1 itDEN">
                    <div>
                      <div class="sc-69509e27-0 xmqfv">
                        <div class="sc-e372fe5f-0 bWeCQq"><span
                            class="sc-45f49f9-0 kHRvYb icon sc-e372fe5f-5 jIsogc icon-left"></span><span
                            class="sc-e372fe5f-1 geipsu">Vidéos<span
                              class="sc-45f49f9-0 kHRvYb icon sc-e372fe5f-2 iCgmRw icon-bottom"></span></span><span
                            class="sc-e372fe5f-3 eRhNyR"><select class="sc-e372fe5f-4 jmlDxw">
                              <option value="0" selected="">Vidéos</option>
                            </select></span><span
                            class="sc-45f49f9-0 kHRvYb icon sc-e372fe5f-6 jBDJAb icon-right"></span></div>
                        <div class="sc-1d31806c-0 fFalTP">
                          <div class="sc-1d31806c-1 bwDGCh">
                            <ul class="sc-1d31806c-4 jJpwYb">
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Bande Annonce"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/315-no-game-no-life/4946-bande-annonce">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="No Game No Life - Bande Annonce" data-testid="img-testid" loading="lazy"
                                        width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/ngnl/pv/web/pv1_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Bande Annonce</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq"></h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Débutant"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/315-no-game-no-life/5000-episode-1">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="No Game No Life - Épisode 1" data-testid="img-testid" loading="lazy"
                                        width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps1_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 1</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Débutant</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Challenger"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/315-no-game-no-life/5002-episode-2">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="No Game No Life - Épisode 2" data-testid="img-testid" loading="lazy"
                                        width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays gxJaUY" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps2_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-4 gUOYGD gsfPgU icon-lock_adn"></span><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-5 gUOYGD bVGmBP icon-unlock_adn"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 2</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Challenger</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Expert"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/315-no-game-no-life/5005-episode-3">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="No Game No Life - Épisode 3" data-testid="img-testid" loading="lazy"
                                        width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays gxJaUY" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps3_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-4 gUOYGD gsfPgU icon-lock_adn"></span><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-5 gUOYGD bVGmBP icon-unlock_adn"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 3</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Expert</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Grand master"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/315-no-game-no-life/5006-episode-4">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="No Game No Life - Épisode 4" data-testid="img-testid" loading="lazy"
                                        width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays gxJaUY" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps4_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-4 gUOYGD gsfPgU icon-lock_adn"></span><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-5 gUOYGD bVGmBP icon-unlock_adn"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 4</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Grand master</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Case Faible"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/315-no-game-no-life/5007-episode-5">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="No Game No Life - Épisode 5" data-testid="img-testid" loading="lazy"
                                        width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays gxJaUY" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps5_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-4 gUOYGD gsfPgU icon-lock_adn"></span><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-5 gUOYGD bVGmBP icon-unlock_adn"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 5</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Case Faible</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Un coup interesting"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/315-no-game-no-life/5008-episode-6">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="No Game No Life - Épisode 6" data-testid="img-testid" loading="lazy"
                                        width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 enSttT gxJaUY" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps6_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-4 gUOYGD gsfPgU icon-lock_adn"></span><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-5 gUOYGD bVGmBP icon-unlock_adn"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 6</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Un coup interesting</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Sacrifice"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/315-no-game-no-life/5009-episode-7">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="No Game No Life - Épisode 7" data-testid="img-testid" loading="lazy"
                                        width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays gxJaUY" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps7_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-4 gUOYGD gsfPgU icon-lock_adn"></span><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-5 gUOYGD bVGmBP icon-unlock_adn"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 7</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Sacrifice</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Fake end"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/315-no-game-no-life/5010-episode-8">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="No Game No Life - Épisode 8" data-testid="img-testid" loading="lazy"
                                        width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays gxJaUY" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps8_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-4 gUOYGD gsfPgU icon-lock_adn"></span><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-5 gUOYGD bVGmBP icon-unlock_adn"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 8</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Fake end</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Sky Walk"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/315-no-game-no-life/5011-episode-9">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="No Game No Life - Épisode 9" data-testid="img-testid" loading="lazy"
                                        width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays gxJaUY" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps9_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-4 gUOYGD gsfPgU icon-lock_adn"></span><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-5 gUOYGD bVGmBP icon-unlock_adn"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 9</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Sky Walk</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Blue Rose"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/315-no-game-no-life/5012-episode-10">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="No Game No Life - Épisode 10" data-testid="img-testid" loading="lazy"
                                        width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays gxJaUY" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps10_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-4 gUOYGD gsfPgU icon-lock_adn"></span><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-5 gUOYGD bVGmBP icon-unlock_adn"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 10</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Blue Rose</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Killing giant"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/315-no-game-no-life/5013-episode-11">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="No Game No Life - Épisode 11" data-testid="img-testid" loading="lazy"
                                        width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays gxJaUY" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps11_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-4 gUOYGD gsfPgU icon-lock_adn"></span><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-5 gUOYGD bVGmBP icon-unlock_adn"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 11</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Killing giant</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Loi numéro 10"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/315-no-game-no-life/5014-episode-12">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="No Game No Life - Épisode 12" data-testid="img-testid" loading="lazy"
                                        width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays gxJaUY" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps12_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-4 gUOYGD gsfPgU icon-lock_adn"></span><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 sc-45ef3f75-5 gUOYGD bVGmBP icon-unlock_adn"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 12</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Loi numéro 10</h4>
                                    </div>
                                  </a></div>
                              </li>
                            </ul>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="sc-5a07385f-0 ilFYUV">
                  <div class="sc-5a07385f-1 dBZhfz">
                    <div>
                      <div class="sc-e71849ea-0 cbBkcX">
                        <div>
                          <script type="text/javascript">
                            var w_yahoo = (top == self) ? window : window.top, d_yahoo = w_yahoo.document;

                            w_yahoo.adUnitCode = w_yahoo.adUnitCode || [];
                            w_yahoo.adUnitCode.push("86b0cbcc-b2a1-4cf9-97c8-2aa88d81ba28");
                            w_yahoo.apiKey = "YRXW2QHX5V87X37994NN";

                            (function () {
                              var script = d_yahoo.createElement("script");
                              script.async = true;
                              script.src = "https://s.yimg.com/av/yap/ga/yap.js";
                              d_yahoo.body.appendChild(script);
                            })();
                          </script>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div data-testid="comments-panel" id="comments-panel">
                  <div class="sc-5a07385f-0 izqJqd">
                    <div class="sc-5a07385f-1 ebyxoh">
                      <h2 class="sc-5a07385f-2 dZbUtq"><span class="sc-5a07385f-3 jXwzJT">Avis sur l'animé No Game No
                          Life - Épisode 6</span></h2>
                      <div>
                        <div class="sc-17cd96c1-0 iecioq"><span data-link="L2xvZ2lu" role="link" tabindex="0"
                            class="sc-fb73a479-0 jFWHTR sc-17cd96c1-12 byRsrW"><span>Vous devez <span>être
                                connecté</span> pour poster un commentaire</span></span></div>
                        <div class="sc-3c8b4bd7-0 eA-dIHC">
                          <div class="sc-3386ffa2-0 doutqj">
                            <div class="sc-d2f319dc-0 iqQKvO">
                              <div data-testid="scrollbars" class="sc-d2f319dc-2 igKZTn">
                                <ul data-testid="comments" class="sc-3386ffa2-1 kgNIXI">
                                  <li data-testid="comment-item" id="commentaire-333" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvNzE0ODEvMQ"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="ftrnt" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/ch19_bg12_green0_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvNzE0ODEvMQ"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">ftrnt</span> <span
                                            class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                        </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 10 ans</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">mais il
                                          on fumé quoi pour cet épisode ? plus ca va plus ça tombe dans le délire
                                          complet ! trop bon !<br>ps : ce serai sympa de traduire les textes, ça casse
                                          pas mal les blagues sans la traduction.</div>
                                      </div>
                                    </div>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-348" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvODI1NTQvMQ"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="Gerard" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/ch16_bg2_green0_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvODI1NTQvMQ"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Fabien</span> <span
                                            class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                        </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 10 ans</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">
                                          Grandiose !!!</div>
                                      </div>
                                    </div>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-351" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTAyODgvMQ"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="Eldaddict" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTAyODgvMQ"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Eldaddict</span>
                                        </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 10 ans</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">EXCELENT
                                          !!! Chaque episodes surpasse le precedent !!! S il vous plait KAZE , sortez
                                          nous les blue ray !!</div>
                                      </div>
                                    </div>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-353" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvOTM0NzQvMQ"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="Lightlinks" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvOTM0NzQvMQ"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Lightlinks</span>
                                        </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 10 ans</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Salut
                                          j'ai une petite question, comment enlever le lien qui s'affiche en bas à
                                          droite de ma vidéo quand je regarde en plein écran?<br>sinon merci pour
                                          l'épisode!!</div>
                                      </div>
                                    </div>
                                    <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                      <li data-testid="comment-item" id="commentaire-357" class="sc-f8132342-1 cgwBxx">
                                        <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                          <div class="sc-f8132342-6 hcKLri">
                                            <div class="sc-f8132342-7 giwGoq"><span data-link="L3Byb2ZpbGUvNzMvMQ"
                                                role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Quentin</span>
                                            </div>
                                            <div class="sc-f8132342-9 ghALZj"> Posté il y a 10 ans</div>
                                          </div>
                                          <div class="sc-f8132342-10 GNNRV">
                                            <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">Ça
                                              semble être un bug de Chrome sous Windows 7 sur la dernière version. On a
                                              prévenu Google et on cherche une solution de notre coté.<br>En attendant,
                                              pour éviter le problème, j'ai trouvé une astuce : Passe la page en plein
                                              écran (F11) avant de passer le lecteur en plein écran.</div>
                                          </div>
                                        </div>
                                        <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvNzMvMQ"
                                            role="link" tabindex="0"
                                            class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Quentin32a211f6"
                                              loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                              class="sc-f8132342-4 gpxdqr"
                                              src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                              style="color: transparent;"></span></div>
                                      </li>
                                    </ul>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-359" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvOTM0NzQvMQ"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="Lightlinks" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvOTM0NzQvMQ"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Lightlinks</span>
                                        </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 10 ans</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Merci
                                          beaucoup pour cette réponse, cette technique fonctionne très bien! Chez, par
                                          contre je tenais à préciser que ce bug n'est pas que sur les pc qui ont
                                          Windows 7 en système d'exploitation mais aussi ceux qui sont sur Windows 8
                                          comme moi!</div>
                                      </div>
                                    </div>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-360" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvNzMwMzYvMQ"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="mokona" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvNzMwMzYvMQ"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">mokona</span> </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 10 ans</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Petit
                                          problème pour la version iOS : les sous-titres prennent tout l'écran ! A part
                                          ça, super épisode ! <br>C'est la méthode la plus originale pour justifier
                                          l'absence de tétons que j'ai jamais vu :p</div>
                                      </div>
                                    </div>
                                    <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                      <li data-testid="comment-item" id="commentaire-361" class="sc-f8132342-1 cgwBxx">
                                        <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                          <div class="sc-f8132342-6 hcKLri">
                                            <div class="sc-f8132342-7 giwGoq"><span data-link="L3Byb2ZpbGUvNzMvMQ"
                                                role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Quentin</span>
                                            </div>
                                            <div class="sc-f8132342-9 ghALZj"> Posté il y a 10 ans</div>
                                          </div>
                                          <div class="sc-f8132342-10 GNNRV">
                                            <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">La
                                              vidéo iOS a été corrigée il y a quelques minutes normalement.<br>Merci.
                                            </div>
                                          </div>
                                        </div>
                                        <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvNzMvMQ"
                                            role="link" tabindex="0"
                                            class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Quentin32a211f6"
                                              loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                              class="sc-f8132342-4 gpxdqr"
                                              src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                              style="color: transparent;"></span></div>
                                      </li>
                                      <li data-testid="comment-item" id="commentaire-390" class="sc-f8132342-1 cgwBxx">
                                        <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                          <div class="sc-f8132342-6 hcKLri">
                                            <div class="sc-f8132342-7 giwGoq"><span data-link="L3Byb2ZpbGUvNzE0ODEvMQ"
                                                role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">ftrnt</span> <span
                                                class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                            </div>
                                            <div class="sc-f8132342-9 ghALZj"> Posté il y a 10 ans</div>
                                          </div>
                                          <div class="sc-f8132342-10 GNNRV">
                                            <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                              c'est clair comment ils on détournée la censure !! ..</div>
                                          </div>
                                        </div>
                                        <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvNzE0ODEvMQ"
                                            role="link" tabindex="0"
                                            class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="ftrnt"
                                              loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                              class="sc-f8132342-4 gpxdqr"
                                              src="https://avatar.animationdigitalnetwork.fr/web/ch19_bg12_green0_188.jpg"
                                              style="color: transparent;"></span></div>
                                      </li>
                                    </ul>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-364" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvNzMwMzYvMQ"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="mokona" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvNzMwMzYvMQ"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">mokona</span> </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 10 ans</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">oui
                                          c'est bon, merci !</div>
                                      </div>
                                    </div>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-375" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvNzYyMzQvMQ"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="MaryTDA" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvNzYyMzQvMQ"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">MaryTDA</span> <span
                                            class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                        </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 10 ans</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">
                                          Décidément on s'en lasse pas :) , chapeau pour les scénaristes qui nous ont
                                          pondu un truc farfelu et sérieux en même temps, faut quand même savoir les
                                          question d'atomes et compagnie ... vivement la semaine prochaine. Et j'adore
                                          le générique de début.</div>
                                      </div>
                                    </div>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-391" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvNzE0ODEvMQ"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="ftrnt" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/ch19_bg12_green0_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvNzE0ODEvMQ"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">ftrnt</span> <span
                                            class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                        </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 10 ans</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">autre
                                          choses, il y pas mal de texte dans cet épisode ! meme si la plupart ce sont
                                          les mots qu'ils disent, les panneaux avec les flèche eux ne sont pas traduit !
                                          du coup ca casse les blagues en rapport avec eux. cf ma suggestion dans la
                                          boite a idée.</div>
                                      </div>
                                    </div>
                                    <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                      <li data-testid="comment-item" id="commentaire-418" class="sc-f8132342-1 cgwBxx">
                                        <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                          <div class="sc-f8132342-6 hcKLri">
                                            <div class="sc-f8132342-7 giwGoq"><span data-link="L3Byb2ZpbGUvNzE0ODEvMQ"
                                                role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">ftrnt</span> <span
                                                class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                            </div>
                                            <div class="sc-f8132342-9 ghALZj"> Posté il y a 10 ans</div>
                                          </div>
                                          <div class="sc-f8132342-10 GNNRV">
                                            <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                              plutôt dur de traduire avec exactitude un jeu baser sur une suite de mots
                                              ! surtout quand les choses dite apparaisse et ou disparaisse.<br>apres il
                                              y un timer a respecter (explique dans parlon vf dans wakanim).</div>
                                          </div>
                                        </div>
                                        <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvNzE0ODEvMQ"
                                            role="link" tabindex="0"
                                            class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="ftrnt"
                                              loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                              class="sc-f8132342-4 gpxdqr"
                                              src="https://avatar.animationdigitalnetwork.fr/web/ch19_bg12_green0_188.jpg"
                                              style="color: transparent;"></span></div>
                                      </li>
                                      <li data-testid="comment-item" id="commentaire-419" class="sc-f8132342-1 cgwBxx">
                                        <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                          <div class="sc-f8132342-6 hcKLri">
                                            <div class="sc-f8132342-7 giwGoq"><span data-link="L3Byb2ZpbGUvNzkwODUvMQ"
                                                role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Yumekun </span>
                                            </div>
                                            <div class="sc-f8132342-9 ghALZj"> Posté il y a 10 ans</div>
                                          </div>
                                          <div class="sc-f8132342-10 GNNRV">
                                            <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                              Toujours prouver ses dires en apportant des éléments confirmant ce qu'on
                                              avance. Je ne dis pas que tu as tort mais j'aimerais voir ces passages de
                                              la traduction anglaise professionnelle comparés à ceux en français. Il
                                              faut aussi être certain que la traduction depuis le japonais vers
                                              l'anglais ne comporte pas d'erreurs en premier lieu. Si les grosses
                                              erreurs sont avérées, je pense qu'ils en tiendront compte et que ton
                                              commentaire aura été très utile.<br>Sinon, très bon épisode. Une série
                                              agréable.</div>
                                          </div>
                                        </div>
                                        <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvNzkwODUvMQ"
                                            role="link" tabindex="0"
                                            class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Yumekun "
                                              loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                              class="sc-f8132342-4 gpxdqr"
                                              src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                              style="color: transparent;"></span></div>
                                      </li>
                                      <li data-testid="comment-item" id="commentaire-420" class="sc-f8132342-1 cgwBxx">
                                        <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                          <div class="sc-f8132342-6 hcKLri">
                                            <div class="sc-f8132342-7 giwGoq"><span data-link="L3Byb2ZpbGUvNzE0ODEvMQ"
                                                role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">ftrnt</span> <span
                                                class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                            </div>
                                            <div class="sc-f8132342-9 ghALZj"> Posté il y a 10 ans</div>
                                          </div>
                                          <div class="sc-f8132342-10 GNNRV">
                                            <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">en
                                              efet, des personne qui dise que la traduction pro est fausse, doivent
                                              avoir une bonne connaissance de japonais, de ce fait peuvent normallement
                                              se passer de la dite traduction, enfin, plutôt que de le dire en
                                              commentaire, on fait un ticket au support avec : le texte fautif, le
                                              timer, l épisode et la correction supposé. le sav est tout a l écoute ,
                                              pour cause je l est deja fait, même si c est de par mon ignorance je me
                                              suis fourvoyer. : "déplacement : 6000 tonnes" dans arpegio of blue steel,
                                              je vous laisse cherche pourquoi au final c'est pas une erreur.</div>
                                          </div>
                                        </div>
                                        <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvNzE0ODEvMQ"
                                            role="link" tabindex="0"
                                            class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="ftrnt"
                                              loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                              class="sc-f8132342-4 gpxdqr"
                                              src="https://avatar.animationdigitalnetwork.fr/web/ch19_bg12_green0_188.jpg"
                                              style="color: transparent;"></span></div>
                                      </li>
                                    </ul>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-463" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="" role="link" tabindex="0"
                                        class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Anonyme"
                                          loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                          class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="Iw" role="link" tabindex="0"
                                            class="sc-fb73a479-0 jFWHTR">Anonyme</span> </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 10 ans</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Et le
                                          quebec lui il a pas droit a sa !!!!!!!!!!!!!</div>
                                      </div>
                                    </div>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-485" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvODIwOTUvMQ"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="Shala" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvODIwOTUvMQ"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Shala</span> </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 10 ans</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">N'y
                                          a-t-il pas une petite erreur de traduction dans cet épisode lorsque Jibril dit
                                          "à l'instar des Imanitiens, les Flugels n'ont pas besoin de se nourir."
                                          (13:22) "À l'instar" signifie qu'il y a une ressemblance ("tout comme"), or
                                          ici il semblerait plutôt que ce soit l'inverse ? ("contrairement aux
                                          Imanitiens" ?)<br>Excellent épisode sinon ! Cet anime est de loin mon préféré
                                          du moment !</div>
                                      </div>
                                    </div>
                                    <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                      <li data-testid="comment-item" id="commentaire-486" class="sc-f8132342-1 cgwBxx">
                                        <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                          <div class="sc-f8132342-6 hcKLri">
                                            <div class="sc-f8132342-7 giwGoq"><span data-link="L3Byb2ZpbGUvOTIzNTQvMQ"
                                                role="link" tabindex="0"
                                                class="sc-fb73a479-0 jFWHTR">Anonymous92354-1</span> </div>
                                            <div class="sc-f8132342-9 ghALZj"> Posté il y a 10 ans</div>
                                          </div>
                                          <div class="sc-f8132342-10 GNNRV">
                                            <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                              Merci Pierre, nous regarderons ça au plus vite :)</div>
                                          </div>
                                        </div>
                                        <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvOTIzNTQvMQ"
                                            role="link" tabindex="0"
                                            class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Anonymous92354"
                                              loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                              class="sc-f8132342-4 gpxdqr"
                                              src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                              style="color: transparent;"></span></div>
                                      </li>
                                    </ul>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-613" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvNzI1NzYvMQ"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="Balt" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvNzI1NzYvMQ"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Balt</span> </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 10 ans</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">+1
                                          excellent épisode</div>
                                      </div>
                                    </div>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-914" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvODA2MTYvMQ"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="ereden" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvODA2MTYvMQ"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">ereden</span> </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 10 ans</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Vous
                                          êtes VRAIMENT sûr que cette série est - 12 ans? (j'en ai trouvé des séries
                                          déclarés -16 pour moins que ça dans ce site...)</div>
                                      </div>
                                    </div>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-1106" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvODA0NTIvMQ"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="Aki no Niji" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvODA0NTIvMQ"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Aki no Niji</span>
                                        </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 10 ans</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Cette
                                          série est un grand n'importe quoi maîtrisé !! Juste génial =)</div>
                                      </div>
                                    </div>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-2787" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTI4MjA3LzE"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="rezerator" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/ch14_bg0_green0_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTI4MjA3LzE"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">rezerator</span>
                                        </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 9 ans</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">la
                                          traduction est merd*que............... Les Fan Sub qui font ca pour le plaisir
                                          vont plus vite et se raproche plus des termes exacts (et dire que je suis
                                          oblige de prendre 1abonnement a l'annee pour profiter tranquillement des
                                          anims)<br>Faites des efforts ADN, SVP, SVP, SVP sinon on va vous prendre pour
                                          des machines a sous</div>
                                      </div>
                                    </div>
                                    <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                      <li data-testid="comment-item" id="commentaire-2788" class="sc-f8132342-1 cgwBxx">
                                        <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                          <div class="sc-f8132342-6 hcKLri">
                                            <div class="sc-f8132342-7 giwGoq"><span data-link="L3Byb2ZpbGUvMTI4MjA3LzE"
                                                role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">rezerator</span>
                                            </div>
                                            <div class="sc-f8132342-9 ghALZj"> Posté il y a 9 ans</div>
                                          </div>
                                          <div class="sc-f8132342-10 GNNRV">
                                            <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">en
                                              plus les kanji dessines (ou les ecritaux ne sont pas traduits) tout comme
                                              il y a certaines choses qui ne sont meme pas expliquees : genre des
                                              references typiques japonaises que nous europeen ne pouvons comprendre
                                            </div>
                                          </div>
                                        </div>
                                        <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTI4MjA3LzE"
                                            role="link" tabindex="0"
                                            class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="rezerator"
                                              loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                              class="sc-f8132342-4 gpxdqr"
                                              src="https://avatar.animationdigitalnetwork.fr/web/ch14_bg0_green0_188.jpg"
                                              style="color: transparent;"></span></div>
                                      </li>
                                      <li data-testid="comment-item" id="commentaire-2794" class="sc-f8132342-1 cgwBxx">
                                        <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                          <div class="sc-f8132342-6 hcKLri">
                                            <div class="sc-f8132342-7 giwGoq"><span data-link="L3Byb2ZpbGUvOTIzNTQvMQ"
                                                role="link" tabindex="0"
                                                class="sc-fb73a479-0 jFWHTR">Anonymous92354-1</span> </div>
                                            <div class="sc-f8132342-9 ghALZj"> Posté il y a 9 ans</div>
                                          </div>
                                          <div class="sc-f8132342-10 GNNRV">
                                            <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">On
                                              ne vous oblige à rien, si ce n'est vous donner le choix de soutenir
                                              légalement et financièrement les auteurs et séries qui vous
                                              plaisent.<br>Pour ce qui est de la qualité de nos traductions, nous ne
                                              travaillons qu'avec des professionnels et nous souhaitons avoir un travail
                                              d'adaptation, fait dans les délais du simulcast... On peut être d'accord
                                              avec les choix effectués par chaque traducteur.<br>Si vous souhaitez nous
                                              faire part de vos compétences, nous sommes tout à fait ouvert à recevoir
                                              des CV et lettres de motivations.<br>Merci d'utiliser "nous contacter" en
                                              bas de page.</div>
                                          </div>
                                        </div>
                                        <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvOTIzNTQvMQ"
                                            role="link" tabindex="0"
                                            class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Anonymous92354"
                                              loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                              class="sc-f8132342-4 gpxdqr"
                                              src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                              style="color: transparent;"></span></div>
                                      </li>
                                      <li data-testid="comment-item" id="commentaire-2806" class="sc-f8132342-1 cgwBxx">
                                        <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                          <div class="sc-f8132342-6 hcKLri">
                                            <div class="sc-f8132342-7 giwGoq"><span data-link="L3Byb2ZpbGUvMTI4MjA3LzE"
                                                role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">rezerator</span>
                                            </div>
                                            <div class="sc-f8132342-9 ghALZj"> Posté il y a 9 ans</div>
                                          </div>
                                          <div class="sc-f8132342-10 GNNRV">
                                            <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">dsl
                                              mais j'ai un taff qui me prend bcp de temps (ce qui me permet de payer un
                                              abonnement) et ma situation m'interdit le double emploi (d'ailleurs mes
                                              connaissances de la langue japonaise et sa culture sont trop faibles pour
                                              etre traducteur par contre je remarque certaines choses qui clochent...).
                                              Ensuite sur les copyright ou protection des droits je suis d'accord car
                                              toute peine merite salaire mais j'ai l'impression que vous passez plus de
                                              temps a faire la chasse aux sorcieres (tout a fait normal c'est votre
                                              gagne pain) au detriment d'un service de qualite.</div>
                                          </div>
                                        </div>
                                        <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTI4MjA3LzE"
                                            role="link" tabindex="0"
                                            class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="rezerator"
                                              loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                              class="sc-f8132342-4 gpxdqr"
                                              src="https://avatar.animationdigitalnetwork.fr/web/ch14_bg0_green0_188.jpg"
                                              style="color: transparent;"></span></div>
                                      </li>
                                      <li data-testid="comment-item" id="commentaire-2807" class="sc-f8132342-1 cgwBxx">
                                        <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                          <div class="sc-f8132342-6 hcKLri">
                                            <div class="sc-f8132342-7 giwGoq"><span data-link="L3Byb2ZpbGUvMTI4MjA3LzE"
                                                role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">rezerator</span>
                                            </div>
                                            <div class="sc-f8132342-9 ghALZj"> Posté il y a 9 ans</div>
                                          </div>
                                          <div class="sc-f8132342-10 GNNRV">
                                            <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">Et
                                              c'est vrai qu'on nous oblige a rien mais on est pris en otage car vous
                                              etes les seuls habilites a mettre en streaming certaines animes donc si on
                                              veut se faire plaiz apres 13h de taf sur une journee on n'a pas le choix
                                              du "distributeur" alors j'estime avoir le droit de mettre le doigt sur
                                              certains points qui m'agacent. Dans mon 1er mail je vous demande de faire
                                              des efforts pour que moi en tant que CLIENT je prenne du plaisir et ne me
                                              sente pas etre un portefeuille ambulant...</div>
                                          </div>
                                        </div>
                                        <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTI4MjA3LzE"
                                            role="link" tabindex="0"
                                            class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="rezerator"
                                              loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                              class="sc-f8132342-4 gpxdqr"
                                              src="https://avatar.animationdigitalnetwork.fr/web/ch14_bg0_green0_188.jpg"
                                              style="color: transparent;"></span></div>
                                      </li>
                                      <li data-testid="comment-item" id="commentaire-2814" class="sc-f8132342-1 cgwBxx">
                                        <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                          <div class="sc-f8132342-6 hcKLri">
                                            <div class="sc-f8132342-7 giwGoq"><span data-link="L3Byb2ZpbGUvNzE0ODEvMQ"
                                                role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">ftrnt</span> <span
                                                class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                            </div>
                                            <div class="sc-f8132342-9 ghALZj"> Posté il y a 9 ans</div>
                                          </div>
                                          <div class="sc-f8132342-10 GNNRV">
                                            <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                              normal qu il est des différences ! il faut bien traduire les expressions
                                              par celle qui s en rapproche le plus en français exemple : pour elle les
                                              garcon ont autant d importance que les patates ( en japonais) double en fr
                                              par : pour elle les garçons la transparence de l air."<br>donc normal qu
                                              il y est des différences ! même entre différent fan sub, les dialogue
                                              traduit ne sont pas les mêmes, mais la sémantique est respecté.<br>mais
                                              dire que les fan sub font du meilleur boulot que de vrais pros, la c est
                                              abusé ! comme dit le modo, envoyer vos cv.<br>il est vrais que les textes
                                              ne sont pas traduit, j ai sous la sigestion dans la boite a idée .va donc
                                              voir.</div>
                                          </div>
                                        </div>
                                        <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvNzE0ODEvMQ"
                                            role="link" tabindex="0"
                                            class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="ftrnt"
                                              loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                              class="sc-f8132342-4 gpxdqr"
                                              src="https://avatar.animationdigitalnetwork.fr/web/ch19_bg12_green0_188.jpg"
                                              style="color: transparent;"></span></div>
                                      </li>
                                      <li data-testid="comment-item" id="commentaire-2819" class="sc-f8132342-1 cgwBxx">
                                        <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                          <div class="sc-f8132342-6 hcKLri">
                                            <div class="sc-f8132342-7 giwGoq"><span data-link="L3Byb2ZpbGUvMTI4MjA3LzE"
                                                role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">rezerator</span>
                                            </div>
                                            <div class="sc-f8132342-9 ghALZj"> Posté il y a 9 ans</div>
                                          </div>
                                          <div class="sc-f8132342-10 GNNRV">
                                            <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">Des
                                              pros ? Une preuve , des diplomes ? Une raison autre que d'avoir acheter le
                                              marche pour avoir l'exclu (bon c'est trop facile d'attaquer la dessus mais
                                              on ne peut pas me contre-dire sur le manque de serieux).<br>J'ai jamais
                                              dit que les fan sub faisaient du meilleur boulot mais j'ai dit qu'il le
                                              faisaient consciemment et rapidement.</div>
                                          </div>
                                        </div>
                                        <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTI4MjA3LzE"
                                            role="link" tabindex="0"
                                            class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="rezerator"
                                              loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                              class="sc-f8132342-4 gpxdqr"
                                              src="https://avatar.animationdigitalnetwork.fr/web/ch14_bg0_green0_188.jpg"
                                              style="color: transparent;"></span></div>
                                      </li>
                                      <li data-testid="comment-item" id="commentaire-2821" class="sc-f8132342-1 cgwBxx">
                                        <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                          <div class="sc-f8132342-6 hcKLri">
                                            <div class="sc-f8132342-7 giwGoq"><span data-link="L3Byb2ZpbGUvNzE0ODEvMQ"
                                                role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">ftrnt</span> <span
                                                class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                            </div>
                                            <div class="sc-f8132342-9 ghALZj"> Posté il y a 9 ans</div>
                                          </div>
                                          <div class="sc-f8132342-10 GNNRV">
                                            <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">des
                                              pros ? desd iplome ? oui sinon il serai pas embauche pour faire des
                                              traductions ! quand au sérieux et la vitesse ! ca depend de moult facteurs
                                              comme : choix des mots, tournure de phrase, et autre , la ou les fan sub
                                              se contente de faire du "littéral" les pros, adapte la sémantique et les
                                              jeux de mots, leqs blagues etc.. quand a la vitesse, vous savez a quels
                                              vitesse est fait la traduction par les pros ? je ne pense pas !! enfin, ca
                                              fait déjà un moment que l oav "anzio" de gup est sorti, mais toujours pas
                                              de sub fr ...<br>la ou des fan sb passe par l englais, les pro traduise
                                              directement du japonais.<br>quand au speed sub, hum comment dire ... je
                                              préfère pas en voir c est un massacre.</div>
                                          </div>
                                        </div>
                                        <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvNzE0ODEvMQ"
                                            role="link" tabindex="0"
                                            class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="ftrnt"
                                              loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                              class="sc-f8132342-4 gpxdqr"
                                              src="https://avatar.animationdigitalnetwork.fr/web/ch19_bg12_green0_188.jpg"
                                              style="color: transparent;"></span></div>
                                      </li>
                                      <li data-testid="comment-item" id="commentaire-2823" class="sc-f8132342-1 cgwBxx">
                                        <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                          <div class="sc-f8132342-6 hcKLri">
                                            <div class="sc-f8132342-7 giwGoq"><span data-link="L3Byb2ZpbGUvNzE0ODEvMQ"
                                                role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">ftrnt</span> <span
                                                class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                            </div>
                                            <div class="sc-f8132342-9 ghALZj"> Posté il y a 9 ans</div>
                                          </div>
                                          <div class="sc-f8132342-10 GNNRV">
                                            <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">j
                                              aime bien les amateurs qui croivent savoir la vérité et qui contredise et
                                              conteste le travail de professionnel.<br>on attend les résultats de vos
                                              propres traductions, ça peut etre drôle. j en est vu des trad foireuse
                                              avec des commentaires comme "ouah cool c est la meilleur que j ai vu !!".
                                            </div>
                                          </div>
                                        </div>
                                        <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvNzE0ODEvMQ"
                                            role="link" tabindex="0"
                                            class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="ftrnt"
                                              loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                              class="sc-f8132342-4 gpxdqr"
                                              src="https://avatar.animationdigitalnetwork.fr/web/ch19_bg12_green0_188.jpg"
                                              style="color: transparent;"></span></div>
                                      </li>
                                    </ul>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-6790" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMjAwNTQxLzE"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="Ainku" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMjAwNTQxLzE"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Ainku</span> </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 9 ans</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">C'est
                                          ridicule comme à la fois sérieux. NGLF me surprend d'épisode en épisode !
                                        </div>
                                      </div>
                                    </div>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-26161" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMzkzNzg3LzE"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="PacPac_-" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMzkzNzg3LzE"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">PacPac_-</span> </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 7 ans</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Vraiment
                                          vraiment ouf ! que ce soit dans les délires ou dans les jeux qu'ils donnent
                                          c'est magnifique j’espère qu'ils vont faire une saison 2 !</div>
                                      </div>
                                    </div>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-35071" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvNjU0NzgxLzE"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="Raind0o" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvNjU0NzgxLzE"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Evan</span> </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 6 ans</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Euh...
                                          Ouais... :')</div>
                                      </div>
                                    </div>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-38459" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvNjc5MTQxLzE"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="Codewarrior4" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/oshi6_bg1_green0_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvNjc5MTQxLzE"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Warrior4</span> <span
                                            class="sc-45f49f9-0 kHRvYb icon sc-f8132342-8 fPiQVm icon-premium"></span>
                                        </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 6 ans</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Super
                                          épisode</div>
                                      </div>
                                    </div>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-44508" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvNjA3NjQ3LzE"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="Khin Desu" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvNjA3NjQ3LzE"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Khin</span> </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 6 ans</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">une
                                          tueeeriiiiiiiiie, mais je suis tellement deg putain qu'il n'y ai pas de saison
                                          2 de prévue, comment un animé pareil peut rester comme ça ? Sur une fin comme
                                          ça ? ! j'veux la suite ! ! !</div>
                                      </div>
                                    </div>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-82224" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMzAxMzEyLzE"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="zalgearsofficial" loading="lazy" width="180" height="180"
                                          decoding="async" data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMzAxMzEyLzE"
                                            role="link" tabindex="0"
                                            class="sc-fb73a479-0 jFWHTR">zalgearsofficial</span> </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">je suis
                                          le seul à trouver cette traduction, absolument, dégueulasse ? entre les
                                          phrases qui ne sont pas correcte en français et les approximations j'ai trouvé
                                          cet épisode particulièrement pénible à suivre</div>
                                      </div>
                                    </div>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-166366" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMjE1OTcxOS8x"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="yaceflilia" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMjE1OTcxOS8x"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">yaceflilia</span>
                                        </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">c moi ou
                                          bien sora a 200 000QI</div>
                                      </div>
                                    </div>
                                    <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                      <li data-testid="comment-item" id="commentaire-237751"
                                        class="sc-f8132342-1 cgwBxx">
                                        <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                          <div class="sc-f8132342-6 hcKLri">
                                            <div class="sc-f8132342-7 giwGoq"><span data-link="L3Byb2ZpbGUvNjQwMTk3LzI"
                                                role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Les Bruns</span>
                                            </div>
                                            <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                          </div>
                                          <div class="sc-f8132342-10 GNNRV">
                                            <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">non
                                              seulement 200 000 000 000 000 000 000 000 000 000 t'inquiète</div>
                                          </div>
                                        </div>
                                        <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvNjQwMTk3LzI"
                                            role="link" tabindex="0"
                                            class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Owllogramme"
                                              loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                              class="sc-f8132342-4 gpxdqr"
                                              src="https://avatar.animationdigitalnetwork.fr/web/ch10_bg14_green1_188.jpg"
                                              style="color: transparent;"></span></div>
                                      </li>
                                    </ul>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-201379" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMjA5NzI0MC8z"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="Lucasmercier" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/ch20_bg11_green0_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMjA5NzI0MC8z"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Minh</span> </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 3 ans</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">je viens
                                          de commencer cet animé il y a quelques instants et je ne regrette pas</div>
                                      </div>
                                    </div>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-267771" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTUyNDkxLzE"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="doberman85" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTUyNDkxLzE"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">doberman85</span>
                                        </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 1 an</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">la ref a
                                          SKYRIM </div>
                                      </div>
                                    </div>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-274340" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvNDA4NTk5LzE"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="laurie.mes" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvNDA4NTk5LzE"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">xxbioutyxx</span>
                                        </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 1 an</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">J'ai un
                                          peu de mal avec la relation frère soeur là Et la manière dont les femmes mais
                                          surtout les enfants sont affichés comme objet... C'est vraiment dommage. Ca
                                          enlève de la légèreté à l'anime.</div>
                                      </div>
                                    </div>
                                  </li>
                                </ul>
                              </div>
                              <div class="sc-d2f319dc-1 jreYYe"></div>
                              <div class="sc-d2f319dc-3 kqHagB"></div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div data-testid="relatedshowlist">
                  <div class="sc-5a07385f-0 bjqPKO">
                    <div class="sc-5a07385f-1 djrtre">
                      <h2 class="sc-5a07385f-2 fDafkR"><span class="sc-5a07385f-3 ikPnob">Anime à voir ensuite</span>
                      </h2>
                      <div>
                        <div class="sc-fbb18752-1 kpgeux">
                          <div data-testid="horizontal-list" class="sc-6eec03a9-0 kydjJB">
                            <div class="sc-6eec03a9-1 kLRzJm">
                              <ul class="sc-6eec03a9-2 egmhYp">
                                <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                  data-testid="show-item">
                                  <div class="sc-78652606-1 cjTGPX"><a class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                      href="/video/568-no-game-no-life-zero">
                                      <div class="sc-78652606-2 gtTxwn">
                                        <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                            alt="No Game No Life 0" loading="lazy" width="196" height="280"
                                            decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                            style="color:transparent"
                                            src="https://image.animationdigitalnetwork.fr/license/ngnl/film/web/affiche_350x500.jpg">
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                        <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">No Game No Life 0</h3>
                                      </div>
                                    </a></div>
                                </li>
                                <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                  data-testid="show-item">
                                  <div class="sc-78652606-1 cjTGPX"><a class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                      href="/video/529-overlord-saison-3">
                                      <div class="sc-78652606-2 gtTxwn">
                                        <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img alt="Overlord III"
                                            loading="lazy" width="196" height="280" decoding="async" data-nimg="1"
                                            class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                            src="https://image.animationdigitalnetwork.fr/license/overlord/tv3/web/affiche_350x500.jpg">
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                        <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Overlord III</h3>
                                      </div>
                                    </a></div>
                                </li>
                                <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                  data-testid="show-item">
                                  <div class="sc-78652606-1 cjTGPX"><a class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                      href="/video/909-overlord-saison-4">
                                      <div class="sc-78652606-2 gtTxwn">
                                        <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img alt="Overlord IV"
                                            loading="lazy" width="196" height="280" decoding="async" data-nimg="1"
                                            class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                            src="https://image.animationdigitalnetwork.fr/license/overlord/tv4/web/affiche_350x500.jpg">
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                        <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Overlord IV</h3>
                                      </div>
                                    </a></div>
                                </li>
                                <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                  data-testid="show-item">
                                  <div class="sc-78652606-1 cjTGPX"><a class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                      href="/video/370-overlord">
                                      <div class="sc-78652606-2 gtTxwn">
                                        <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img alt="Overlord"
                                            loading="lazy" width="196" height="280" decoding="async" data-nimg="1"
                                            class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                            src="https://image.animationdigitalnetwork.fr/license/overlord/tv/web/affiche_350x500.jpg">
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                        <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Overlord</h3>
                                      </div>
                                    </a></div>
                                </li>
                                <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                  data-testid="show-item">
                                  <div class="sc-78652606-1 cjTGPX"><a class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                      href="/video/505-overlord-saison-2">
                                      <div class="sc-78652606-2 gtTxwn">
                                        <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img alt="Overlord II"
                                            loading="lazy" width="196" height="280" decoding="async" data-nimg="1"
                                            class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                            src="https://image.animationdigitalnetwork.fr/license/overlord/tv2/web/affiche_350x500.jpg">
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                        <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Overlord II</h3>
                                      </div>
                                    </a></div>
                                </li>
                                <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                  data-testid="show-item">
                                  <div class="sc-78652606-1 cjTGPX"><a class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                      href="/video/442-sword-art-online">
                                      <div class="sc-78652606-2 gtTxwn">
                                        <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                            alt="Sword Art Online" loading="lazy" width="196" height="280"
                                            decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                            style="color:transparent"
                                            src="https://image.animationdigitalnetwork.fr/license/swordartonline/tv/web/affiche_350x500.jpg">
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                        <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Sword Art Online</h3>
                                      </div>
                                    </a></div>
                                </li>
                                <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                  data-testid="show-item">
                                  <div class="sc-78652606-1 cjTGPX"><a class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                      href="/video/670-to-love-ru">
                                      <div class="sc-78652606-2 gtTxwn">
                                        <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img alt="To Love-Ru"
                                            loading="lazy" width="196" height="280" decoding="async" data-nimg="1"
                                            class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                            src="https://image.animationdigitalnetwork.fr/license/toloveru/tv/web/affiche_350x500.jpg">
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                        <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">To Love-Ru</h3>
                                      </div>
                                    </a></div>
                                </li>
                                <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                  data-testid="show-item">
                                  <div class="sc-78652606-1 cjTGPX"><a class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                      href="/video/217-to-love-darkness">
                                      <div class="sc-78652606-2 gtTxwn">
                                        <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                            alt="To Love-Ru - Darkness" loading="lazy" width="196" height="280"
                                            decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                            style="color:transparent"
                                            src="https://image.animationdigitalnetwork.fr/license/toloveru/tv3/web/affiche_350x500.jpg">
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                        <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">To Love-Ru - Darkness</h3>
                                      </div>
                                    </a></div>
                                </li>
                                <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                  data-testid="show-item">
                                  <div class="sc-78652606-1 cjTGPX"><a class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                      href="/video/973-the-eminence-in-shadow">
                                      <div class="sc-78652606-2 gtTxwn">
                                        <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                            alt="The Eminence in Shadow" loading="lazy" width="196" height="280"
                                            decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                            style="color:transparent"
                                            src="https://image.animationdigitalnetwork.fr/license/eminenceshadow/tv/web/affiche_350x500.jpg">
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                        <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">The Eminence in Shadow</h3>
                                      </div>
                                    </a></div>
                                </li>
                                <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                  data-testid="show-item">
                                  <div class="sc-78652606-1 cjTGPX"><a class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                      href="/video/1122-my-instant-death-ability-is-so-overpowered-no-one-in-this-other-world-stands-a-chance-against-me">
                                      <div class="sc-78652606-2 gtTxwn">
                                        <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                            alt="My Instant Death Ability Is So Overpowered, No One in This Other World Stands a Chance Against Me!"
                                            loading="lazy" width="196" height="280" decoding="async" data-nimg="1"
                                            class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                            src="https://image.animationdigitalnetwork.fr/license/myinstantdeathability/tv/web/affiche_350x500.jpg">
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                        <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">My Instant Death Ability Is So
                                          Overpowered, No One in This Other World Stands a Chance Against Me!</h3>
                                      </div>
                                    </a></div>
                                </li>
                              </ul>
                            </div>
                            <div class="sc-6eec03a9-3 bBfLyW"><span
                                class="sc-45f49f9-0 kHRvYb icon sc-6eec03a9-4 kaJHtA icon-left"
                                data-testid="left-arrow"></span></div>
                            <div class="sc-6eec03a9-3 kQfEXv"><span
                                class="sc-45f49f9-0 kHRvYb icon sc-6eec03a9-4 kaJHtA icon-right"
                                data-testid="right-arrow"></span></div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div data-testid="pairshowlist">
                  <div data-testid="pairshowlist">
                    <div class="sc-5a07385f-0 bjqPKO">
                      <div class="sc-5a07385f-1 djrtre">
                        <h2 class="sc-5a07385f-2 fDafkR"><span class="sc-5a07385f-3 ikPnob">Fictions fantastiques avec
                            des gags</span></h2>
                        <div>
                          <div class="sc-fbb18752-1 kpgeux">
                            <div data-testid="horizontal-list" class="sc-6eec03a9-0 kydjJB">
                              <div class="sc-6eec03a9-1 kLRzJm">
                                <ul class="sc-6eec03a9-2 egmhYp">
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/398-undefeated-bahamut-chronicles">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="Undefeated Bahamut Chronicles" loading="lazy" width="196"
                                              height="280" decoding="async" data-nimg="1"
                                              class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/saibahamut/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Undefeated Bahamut Chronicles
                                          </h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/964-immoral-guild">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="Immoral Guild" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/immoralguild/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Immoral Guild</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor" href="/video/670-to-love-ru">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img alt="To Love-Ru"
                                              loading="lazy" width="196" height="280" decoding="async" data-nimg="1"
                                              class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/toloveru/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">To Love-Ru</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/684-motto-to-love-ru-saison-2">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="Motto To Love-Ru" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/toloveru/tv2/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Motto To Love-Ru</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/699-high-school-dxd">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="High School DxD" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/dxd/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">High School DxD</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/977-immoral-guild-version-non-censuree">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="Immoral Guild (version non censurée)" loading="lazy" width="196"
                                              height="280" decoding="async" data-nimg="1"
                                              class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/immoralguildnc/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Immoral Guild (version non
                                            censurée)</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/382-lance-n-masques">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="Lance N' Masques" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/lnm/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Lance N' Masques</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/463-clockwork-planet">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="Clockwork Planet" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/clockwork/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Clockwork Planet</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/434-flip-flappers">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="Flip Flappers" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/flipflap/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Flip Flappers</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/709-full-dive-l-ultime-rpg">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="Full Dive : L'Ultime RPG est encore plus foireux que la réalité !"
                                              loading="lazy" width="196" height="280" decoding="async" data-nimg="1"
                                              class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/fulldiverpg/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Full Dive : L'Ultime RPG est
                                            encore plus foireux que la réalité !</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                </ul>
                              </div>
                              <div class="sc-6eec03a9-3 bBfLyW"><span
                                  class="sc-45f49f9-0 kHRvYb icon sc-6eec03a9-4 kaJHtA icon-left"
                                  data-testid="left-arrow"></span></div>
                              <div class="sc-6eec03a9-3 kQfEXv"><span
                                  class="sc-45f49f9-0 kHRvYb icon sc-6eec03a9-4 kaJHtA icon-right"
                                  data-testid="right-arrow"></span></div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div class="sc-5a07385f-0 bjqPKO">
                      <div class="sc-5a07385f-1 djrtre">
                        <h2 class="sc-5a07385f-2 fDafkR"><span class="sc-5a07385f-3 ikPnob">Avec des créatures
                            imaginaires et des ados</span></h2>
                        <div>
                          <div class="sc-fbb18752-1 kpgeux">
                            <div data-testid="horizontal-list" class="sc-6eec03a9-0 kydjJB">
                              <div class="sc-6eec03a9-1 kLRzJm">
                                <ul class="sc-6eec03a9-2 egmhYp">
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/652-amagi-brilliant-park">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="Amagi Brilliant Park" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/amagi/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Amagi Brilliant Park</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/568-no-game-no-life-zero">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="No Game No Life 0" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/ngnl/film/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">No Game No Life 0</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/217-to-love-darkness">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="To Love-Ru - Darkness" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/toloveru/tv3/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">To Love-Ru - Darkness</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/973-the-eminence-in-shadow">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="The Eminence in Shadow" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/eminenceshadow/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">The Eminence in Shadow</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/1122-my-instant-death-ability-is-so-overpowered-no-one-in-this-other-world-stands-a-chance-against-me">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="My Instant Death Ability Is So Overpowered, No One in This Other World Stands a Chance Against Me!"
                                              loading="lazy" width="196" height="280" decoding="async" data-nimg="1"
                                              class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/myinstantdeathability/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">My Instant Death Ability Is So
                                            Overpowered, No One in This Other World Stands a Chance Against Me!</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/790-polyphonica-crimson-s-saison-2">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="Polyphonica - Crimson S" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/polyphonica/tv2/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Polyphonica - Crimson S</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/1087-gegege-no-kitaro-version-2018">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="GeGeGe no Kitarô (2018)" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/gegegenokitaro/tv6/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">GeGeGe no Kitarô (2018)</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/1058-strike-the-blood-final">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="Strike the Blood Final" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/striketb/oav5/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Strike the Blood Final</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/1084-le-college-noir">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="Le Collège Noir" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/lecollegenoir/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Le Collège Noir</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/754-how-a-realist-hero-rebuilt-the-kingdom">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="How a Realist Hero Rebuilt the Kingdom" loading="lazy" width="196"
                                              height="280" decoding="async" data-nimg="1"
                                              class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/realisthero/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">How a Realist Hero Rebuilt the
                                            Kingdom</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                </ul>
                              </div>
                              <div class="sc-6eec03a9-3 bBfLyW"><span
                                  class="sc-45f49f9-0 kHRvYb icon sc-6eec03a9-4 kaJHtA icon-left"
                                  data-testid="left-arrow"></span></div>
                              <div class="sc-6eec03a9-3 kQfEXv"><span
                                  class="sc-45f49f9-0 kHRvYb icon sc-6eec03a9-4 kaJHtA icon-right"
                                  data-testid="right-arrow"></span></div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div class="sc-5a07385f-0 bjqPKO">
                      <div class="sc-5a07385f-1 djrtre">
                        <h2 class="sc-5a07385f-2 fDafkR"><span class="sc-5a07385f-3 ikPnob">Sur les relations
                            fraternelles en duo</span></h2>
                        <div>
                          <div class="sc-fbb18752-1 kpgeux">
                            <div data-testid="horizontal-list" class="sc-6eec03a9-0 kydjJB">
                              <div class="sc-6eec03a9-1 kLRzJm">
                                <ul class="sc-6eec03a9-2 egmhYp">
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/1115-night-head-genesis">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="Night Head Genesis" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/nightheadgenesis/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Night Head Genesis</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/1168-sword-of-the-demon-hunter-kijin-gentosho">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="Sword of the Demon Hunter KIJIN GENTÔSHÔ" loading="lazy" width="196"
                                              height="280" decoding="async" data-nimg="1"
                                              class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/sworddemonhunter/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Sword of the Demon Hunter KIJIN
                                            GENTÔSHÔ</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/953-panty-and-stocking-with-gartebelt">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="Panty &amp; Stocking with Garterbelt" loading="lazy" width="196"
                                              height="280" decoding="async" data-nimg="1"
                                              class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/pantyandstocking/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Panty &amp; Stocking with
                                            Garterbelt</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/637-kinky-et-cosy">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="Kinky &amp; Cosy" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/kinkycosy/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Kinky &amp; Cosy</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                </ul>
                              </div>
                              <div class="sc-6eec03a9-3 bBfLyW"><span
                                  class="sc-45f49f9-0 kHRvYb icon sc-6eec03a9-4 kaJHtA icon-left"
                                  data-testid="left-arrow"></span></div>
                              <div class="sc-6eec03a9-3 hUjNgt"><span
                                  class="sc-45f49f9-0 kHRvYb icon sc-6eec03a9-4 kaJHtA icon-right"
                                  data-testid="right-arrow"></span></div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="sc-3b794bf1-0 sc-3b794bf1-2 fccbjH iUguuT">
                <div class="sc-7c8882ca-0 gWKUWh">
                  <div class="sc-7c8882ca-1 gKKoPN">
                    <div class="sc-7c8882ca-2 fzWdFj">
                      <div class="sc-7c8882ca-3 wfQkE"><span class="sc-7c8882ca-4 fMCNZF">+</span></div>
                      <div class="sc-7c8882ca-3 drflDN"><span class="sc-7c8882ca-5 TOQfn">15 000</span><span
                          class="sc-7c8882ca-6 VLWfO">ÉPISODES</span></div>
                    </div>
                    <div class="sc-7c8882ca-2 EPjJx">
                      <div class="sc-7c8882ca-7 dzFMEO"></div><span class="sc-7c8882ca-6 brbqRh">H+1</span>
                    </div>
                    <div class="sc-7c8882ca-2 iuOYfP"><span class="sc-7c8882ca-6 dEVjZE">HD</span></div>
                    <div class="sc-7c8882ca-2 gaABGy">
                      <div class="sc-7c8882ca-8 dyBrOn">
                        <div class="sc-7c8882ca-3 wfQkE"><span class="sc-7c8882ca-4 fMCNZF">+</span></div>
                        <div class="sc-7c8882ca-3 drflDN"><span class="sc-7c8882ca-5 dFPIMb">530</span>
                          <div class="sc-7c8882ca-9 xOogq"><span class="sc-7c8882ca-10 fuxvnZ">SÉRIES</span><span
                              class="sc-7c8882ca-10 fuxvnZ">&amp; <!-- -->FILMS</span></div>
                        </div>
                      </div>
                    </div>
                    <div class="sc-7c8882ca-2 jMetLH"><span
                        class="sc-45f49f9-0 kHRvYb icon sc-7c8882ca-11 donuey icon-screens"></span>
                      <div><span class="sc-7c8882ca-6 fopMPu">MULTIPLATEFORME</span></div>
                    </div>
                    <div class="sc-7c8882ca-2 iyldYe"><span
                        class="sc-45f49f9-0 kHRvYb icon sc-7c8882ca-11 zImyK icon-handmetal"></span>
                      <div><span class="sc-7c8882ca-6 hffVVV">SANS ENGAGEMENT</span></div>
                    </div><a class="sc-7c8882ca-12 iWXHni" href="/subscribe"></a>
                  </div>
                </div>
                <div class="sc-5a07385f-0 izqJqd">
                  <div class="sc-5a07385f-1 itDEN">
                    <h2 class="sc-5a07385f-2 gSjyFv"><span class="sc-5a07385f-3 eZfPND">Résumé de l'épisode</span></h2>
                    <div>
                      <div class="sc-a801f5c4-0 dvmutC">
                        <div class="sc-a801f5c4-1 jjgIst"><img
                            summary="Sora et Shiro défient Jibril et lui demandent la bibliothèque. De leur côté ils mettent leur tablette en jeu. Appâtée par la somme folle de connaissances venant d'un autre mode que recèle la tablette, Jibril accepte et surenchérit en proposant sa vie à la place de la bibliothèque. Elle propose donc de jouer au jeu de la dernière syllabe. Seulement, son jeu est un peu spécial. Lorsque la chose que désigne le mot prononcé existe là où on se trouve, elle disparaît et, à l'inverse, lorsqu'elle n'existe pas, elle apparaît. S'enchaîne une suite de mot et d'apparitions/disparitions qui mèneront presque à la fin du monde..."
                            class="sc-10eb2f-0 ijAnXs"
                            src="https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps6_640x360.jpg"
                            alt="Sora et Shiro défient Jibril et lui demandent la bibliothèque. De leur côté ils mettent leur tablette en jeu. Appâtée par la somme folle de connaissances venant d'un autre mode que recèle la tablette, Jibril accepte et surenchérit en proposant sa vie à la place de la bibliothèque. Elle propose donc de jouer au jeu de la dernière syllabe. Seulement, son jeu est un peu spécial. Lorsque la chose que désigne le mot prononcé existe là où on se trouve, elle disparaît et, à l'inverse, lorsqu'elle n'existe pas, elle apparaît. S'enchaîne une suite de mot et d'apparitions/disparitions qui mèneront presque à la fin du monde..."
                            data-testid="img-resume-episode"></div>
                        <p class="sc-a801f5c4-2 azCef">Sora et Shiro défient Jibril et lui demandent la bibliothèque. De
                          leur côté ils mettent leur tablette en jeu. Appâtée par la somme folle de connaissances venant
                          d'un autre mode que recèle la tablette, Jibril accepte et surenchérit en proposant sa vie à la
                          place de la bibliothèque. Elle propose donc de jouer au jeu de la dernière syllabe. Seulement,
                          son jeu est un peu spécial. Lorsque la chose que désigne le mot prononcé existe là où on se
                          trouve, elle disparaît et, à l'inverse, lorsqu'elle n'existe pas, elle apparaît. S'enchaîne
                          une suite de mot et d'apparitions/disparitions qui mèneront presque à la fin du monde...</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="sc-5a07385f-0 ilFYUV">
              <div class="sc-5a07385f-1 dBZhfz">
                <div>
                  <div class="sc-e71849ea-1 drbmWY"></div>
                  <div class="sc-e71849ea-0 cbBkcX">
                    <script defer="" type="text/javascript">
                      {
                        (function () {
                          const e = document.createElement('script');
                          const f = document.getElementsByTagName('script')[0];
                          e.src = //player.pepsia.com/sdk.js?d=190e99cc7cc;
                            e.type = 'text/javascript';
                          e.async = !0;
                          f.parentNode.insertBefore(e, f);
                        })()
                      }
                    </script>
                    <div class="pepsia_player" data-token="00ea" data-popup="bottom-left" data-logo="0"></div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="sc-499ed712-0 hjHByy"><a class="sc-499ed712-1 bVkEhA" href="/"></a>
          <div class="sc-499ed712-2 hSydCm"><a target="_blank" class="sc-499ed712-3 iyvrgK"
              href="https://www.facebook.com/ADN-163110993879311/"><span
                class="sc-45f49f9-0 kHRvYb icon sc-499ed712-4 jVnhGX icon-facebook"></span></a><a target="_blank"
              class="sc-499ed712-3 kZrbNh" href="https://www.instagram.com/animationdigitalnetwork/"><span
                class="sc-45f49f9-0 kHRvYb icon sc-499ed712-4 jVnhGX icon-instagram"></span></a><a target="_blank"
              class="sc-499ed712-3 ekITHO" href="https://twitter.com/adnanime"><span
                class="sc-45f49f9-0 kHRvYb icon sc-499ed712-4 jVnhGX icon-twitter"></span></a><a target="_blank"
              class="sc-499ed712-3 kOvzCS" href="https://www.youtube.com/channel/UCguBmD8D2uN6Sn6Ch-cVk_g"><span
                class="sc-45f49f9-0 kHRvYb icon sc-499ed712-4 jVnhGX icon-youtube"></span></a><a target="_blank"
              class="sc-499ed712-3 ghwxtG" href="https://www.twitch.tv/adnanime"><span
                class="sc-45f49f9-0 kHRvYb icon sc-499ed712-4 eOpmMt icon-twitch"></span></a></div>
        </div>
        <div class="sc-499ed712-5 fRItrR">
          <div class="sc-499ed712-6 bZPxEl">
            <div class="sc-499ed712-7 hXgmlo">
              <h4 class="sc-499ed712-8 YsXXp"><span
                  class="sc-45f49f9-0 kHRvYb icon sc-499ed712-9 epnMSe icon-friends"></span> Vous &amp; nous</h4>
              <ul class="sc-499ed712-10 eqIxxv">
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz"
                    href="/contact-us/create-ticket">Contactez-nous</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/faq">FAQ</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/about-us">Qui sommes-nous
                    ?</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/adn-team">L'équipe ADN</a>
                </li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/jobs">Recrutement</a></li>
              </ul>
            </div>
            <div class="sc-499ed712-7 hXgmlo">
              <h4 class="sc-499ed712-8 YsXXp"><span
                  class="sc-45f49f9-0 kHRvYb icon sc-499ed712-9 epnMSe icon-leader"></span> Séries les plus populaires
              </h4>
              <ul class="sc-499ed712-10 eqIxxv">
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz"
                    href="/video/1003-dragon-ball-z">Dragon Ball Z</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/video/269-fairy-tail">Fairy
                    Tail</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz"
                    href="/video/265-naruto-shippuden">Naruto Shippuden</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz"
                    href="/video/626-one-piece-saga-7-guerre-au-sommet">One Piece : Saga 07 - Guerre au sommet</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz"
                    href="/video/694-one-piece-saga-10-dressrosa">One Piece : Saga 10 - Dressrosa</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz"
                    href="/video/563-one-piece-saga-12-whole-cake-island">One Piece : Saga 12 - Whole Cake Island</a>
                </li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz"
                    href="/video/469-one-piece-saga-14-pays-de-wano">One Piece : Saga 14 - Pays de Wano</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz"
                    href="/video/1116-one-piece-saga-15-egg-head">One Piece : Saga 15 - Egghead</a></li>
              </ul>
            </div>
            <div class="sc-499ed712-7 hXgmlo">
              <h4 class="sc-499ed712-8 YsXXp"><span
                  class="sc-45f49f9-0 kHRvYb icon sc-499ed712-9 epnMSe icon-geography-earth"></span> Navigation</h4>
              <ul class="sc-499ed712-10 eqIxxv">
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/account">Mon profil</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/subscribe">Nos offres</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/video">Catalogue</a></li>
              </ul>
            </div>
            <div class="sc-499ed712-7 hXgmlo">
              <h4 class="sc-499ed712-8 YsXXp"><span
                  class="sc-45f49f9-0 kHRvYb icon sc-499ed712-9 epnMSe icon-compare-balance"></span> Légal</h4>
              <ul class="sc-499ed712-10 eqIxxv">
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/tos">Conditions générales de
                    vente</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/privacy-policy">Charte pour la
                    protection des données personnelles</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/legal-notice">Mentions
                    Légales</a></li>
                <li class="sc-499ed712-11 dlZfBl"><span class="sc-499ed712-13 doErwq">Paramètres des cookies</span></li>
              </ul>
            </div>
          </div>
          <p class="sc-499ed712-14 izWbEj">© 2022 Animationdigitalnetwork.com est un site du groupe Média-Participations
            opéré par ADN - ANIMATION DIGITAL NETWORK.</p>
        </div>
      </div>
    </div>
  </div>
  <div id="pin-code-portal"></div>
  <div id="confirm-popup-portal"></div>
  <script id="__NEXT_DATA__"
    type="application/json">{"props":{"pageProps":{"dehydratedState":{"mutations":[],"queries":[{"state":{"data":{"shows":[{"id":1003,"title":"Dragon Ball Z","type":"EPS","originalTitle":"ドラゴンボールＺ","shortTitle":"Dragon Ball Z","reference":"dbz_tv","age":"10+","languages":["vostf","vf"],"summary":"Depuis leur mariage, Son Goku et Chichi vivent des jours heureux en famille. Seulement, cette apparente tranquillité se retrouve ébranlée par l’arrivée de Radditz, qui lui révèle être son frère ainsi qu’un Saïyen, un guerrier extraterrestre doté d’une force surhumaine. Afin de l’enjoindre à rejoindre sa cause, ce dernier kidnappe Son Gohan. Aidé par Piccolo et ses amis, Son Goku va tout mettre en œuvre afin de libérer son fils.","image":"https://image.animationdigitalnetwork.fr/license/dbz/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/dbz/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/dbz/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/dbz/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/1003-dragon-ball-z","urlPath":"/video/1003-dragon-ball-z","episodeCount":291,"genres":["Animation japonaise","Action","Aventure","Comédie","Fantastique","Nostalgie","Shônen"],"copyright":"©Bird Studio/Shueisha, Toei Animation","rating":4.9,"ratingsCount":1746,"commentsCount":61,"qualities":["sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":"Retrouvez l'exclusivité de « Dragon Ball Z », la série mythique d'Akira Toriyama, sur ADN !","firstReleaseYear":"1986","productionStudio":"Toei Animation","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Daisuke Nishio, Shigeyasu Yamauchi"},{"role":"Mangaka","name":"Akira Toriyama"},{"role":"Compositeur","name":"Shunsuke Kikuchi"},{"role":"Character designer","name":"Minoru Maeda"}],"nextVideoReleaseDate":null,"indexable":true},{"id":269,"title":"Fairy Tail","type":"EPS","originalTitle":"Fairy Tail","shortTitle":"Fairy Tail","reference":"fairytail_tv","age":"12+","languages":["vostf","vf"],"summary":"Le Royaume de Fiore. Ce pays perpétuellement neutre qui compte 17 millions d'habitants, est aussi un monde de magie et de mystères. La magie fait partie du quotidien et son commerce y est entièrement libre. Ainsi, certains, passés maîtres, décident d'en faire leur profession. On les appelle les Mages. Contre rétribution, ils œuvrent pour le bien de la communauté. Leur force est aussi leur nombre, ils se regroupent dans différentes guildes, disséminées un peu partout dans le royaume. Parmi celles-ci, se trouve une guilde toute particulière, qui hier comme aujourd'hui, a fait naître de nombreuses légendes. Elle a pour nom : Fairy Tail.","image":"https://image.animationdigitalnetwork.fr/license/fairytail/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/fairytail/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/fairytail/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/fairytail/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/269-fairy-tail","urlPath":"/video/269-fairy-tail","episodeCount":328,"genres":["Animation japonaise","Jeunesse","Action","Aventure","Comédie","Fantastique","Shônen"],"copyright":"Based on the manga “FAIRY TAIL” by Hiro Mashima originally serialized in the weekly SHONEN MAGAZINE published by KODANSHA Ltd.\n©Hiro Mashima・KODANSHA/Fairy Tail Guild・TV TOKYO. All Rights Reserved.\n©Hiro Mashima･KODANSHA/Fairy Tail project･TV TOKYO.All Rights Reserved.\n©Hiro Mashima, KODANSHA/FAIRY TAIL Committee,TV TOKYO","rating":4.8,"ratingsCount":33140,"commentsCount":586,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":true,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2009","productionStudio":"A-1 Pictures","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Shinji Ishihira"},{"role":"Scénariste","name":"Masashi Sogo"},{"role":"Compositeur","name":"Yasuharu Takanashi"},{"role":"Mangaka","name":"Hiro Mashima"},{"role":"Character designer","name":"Aoi Yamamoto"}],"nextVideoReleaseDate":null,"indexable":true},{"id":265,"title":"Naruto Shippuden","type":"EPS","originalTitle":"Naruto Shippuden","shortTitle":"Naruto Shippuden","reference":"naruto_tv2","age":"10+","languages":["vostf","vf"],"summary":"Naruto est de retour&nbsp;! Après deux ans et demi d’entraînement avec Jiraya, il retrouve ses camarades de l’Académie des ninjas ainsi que ses professeurs de Konoha. Tous ont évolué, y compris les ninjas du village de Suna. Seul Kakashi semble être resté fidèle à lui-même. Hélas, les retrouvailles sont de courte durée. Gaara, devenu depuis peu Kazekage de son village, est menacé. Tout porte à croire que l’Akatsuki soit à l’origine de l’attaque, mais dans quel but&nbsp;?","image":"https://image.animationdigitalnetwork.fr/license/naruto/tv2/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/naruto/tv2/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/naruto/tv2/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/naruto/tv2/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/265-naruto-shippuden","urlPath":"/video/265-naruto-shippuden","episodeCount":503,"genres":["Animation japonaise","Jeunesse","Action","Arts Martiaux","Aventure","Comédie","Fantastique","Shônen"],"copyright":"©2002 MASASHI KISHIMOTO / 2007 SHIPPUDEN All Rights Reserved.","rating":4.7,"ratingsCount":56536,"commentsCount":484,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":true,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2007","productionStudio":"Pierrot","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Hayato Date"},{"role":"Scénariste","name":"Junki Takegami"},{"role":"Compositeur","name":"Yasuharu Takanashi"},{"role":"Auteur","name":"Masashi Kishimoto"},{"role":"Character designer","name":"Tetsuya Nishio"}],"nextVideoReleaseDate":null,"indexable":true},{"id":626,"title":"One Piece : Saga 07 - Guerre au sommet","type":"EPS","originalTitle":"One Piece : Saga 07 - Summit War","shortTitle":null,"reference":"onepiece_arc7","age":"10+","languages":["vostf","vf"],"summary":"Portgas D. Ace, le commandant de la deuxième division de l’équipage de Barbe Blanche sera exécuté à 15h précise à Marine Ford. Pour assurer le bon déroulement de cette exécution, le Gouvernement Mondial mobilise les troupes d’élite de la Marine avec plus de 100 000 soldats et 50 navires de guerre. Il convoque également ses hommes les plus puissants : les Grands Corsaires et les amiraux.\n\nAfin d’empêcher l’exécution, Barbe Blanche réunit son équipage et fait appel aux 43 capitaines pirates qui lui ont juré allégeance dans le Nouveau Monde pour prendre d’assaut Marine Ford.\n\nLa plus grande bataille depuis le début de l’Âge d’Or de la piraterie est sur le point de commencer : les forces du Gouvernement Mondial contre l’homme le plus fort du monde et « ses fils ». Une bataille dont l’issue bouleversera à jamais l’équilibre du monde. Luffy réussira-t-il à se faire une place dans cette bataille au sommet pour sauver son frère ?","image":"https://image.animationdigitalnetwork.fr/license/onepiece/arc7/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/onepiece/arc7/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/onepiece/arc7/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/onepiece/arc7/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/626-one-piece-saga-7-guerre-au-sommet","urlPath":"/video/626-one-piece-saga-7-guerre-au-sommet","episodeCount":126,"genres":["Animation japonaise","Jeunesse","Aventure","Comédie","Fantastique","Shônen"],"copyright":"Film © 1999 Toei Animation Co., Ltd.  © Eiichiro Oda/Shueisha, Toei Animation","rating":4.8,"ratingsCount":22227,"commentsCount":227,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"1999","productionStudio":"Toei Animation","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Konosuke Uda"},{"role":"Scénariste","name":"Ryota Yamaguchi"},{"role":"Compositeur","name":"Kohei Tanaka"},{"role":"Mangaka","name":"Eiichirô Oda"},{"role":"Character designer","name":"Noboru Koizumi"}],"nextVideoReleaseDate":null,"indexable":true},{"id":694,"title":"One Piece : Saga 10 - Dressrosa","type":"EPS","originalTitle":null,"shortTitle":null,"reference":"onepiece_arc10","age":"10+","languages":["vostf","vf"],"summary":"L'alliance de l'équipage au Chapeau de paille et de Trafalgar. Law se dirige maintenant vers Dressrosa, une île gouvernée par l'un des pires Grands Corsaires : Doflamingo. En plus de devoir détruire l'usine de Smiles, Luffy et ses compagnons auront une autre raison d'affronter les dangers de Dressrosa : récupérer le fruit du démon d'Ace aux Poings Ardents...","image":"https://image.animationdigitalnetwork.fr/license/onepiece/arc10/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/onepiece/arc10/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/onepiece/arc10/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/onepiece/arc10/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/694-one-piece-saga-10-dressrosa","urlPath":"/video/694-one-piece-saga-10-dressrosa","episodeCount":118,"genres":["Animation japonaise","Jeunesse","Action","Aventure","Comédie","Fantastique","Shônen"],"copyright":"©Eiichiro Oda/Shueisha, Toei Animation","rating":4.9,"ratingsCount":15195,"commentsCount":207,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"1998","productionStudio":"Toei Animation","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Konosuke Uda"},{"role":"Scénariste","name":"Ryota Yamaguchi"},{"role":"Compositeur","name":"Kohei Tanaka"},{"role":"Mangaka","name":"Eiichirô Oda"},{"role":"Character designer","name":"Noboru Koizumi"}],"nextVideoReleaseDate":null,"indexable":true},{"id":563,"title":"One Piece : Saga 12 - Whole Cake Island","type":"EPS","originalTitle":"One Piece","shortTitle":null,"reference":"onepiece_arc14","age":"10+","languages":["vostf","vf"],"summary":"Oyez ! Oyez ! Pirates de tous bords ! Gol D.Roger, le légendaire Roi des pirates, mort sur l’échafaud, a laissé derrière lui un trésor inestimable : le « One Piece ». Monkey D.Luffy, un garçon naïf et impulsif, rêve de mettre la main sur ce fameux butin et de devenir le nouveau Roi des Pirates.  Parcourant les mers, il rassemble au fil de l’eau un équipage redoutable.\n\nC’est justement le kidnapping de son cuisinier, Sanji, qui pousse nos héros à débarquer en secret sur l’île de Whole Cake Island, le fief de la terrible Big Mom. Bien décidés à sauver leur ami de ce mariage forcé, Monkey D.Luffy et une partie de l’équipage vont devoir faire face à l’immense famille de l’impératrice, tous plus dangereux et puissants les uns que les autres… L’heure du sinistre goûter nuptial approche ! ","image":"https://image.animationdigitalnetwork.fr/license/onepiece/arc14/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/onepiece/arc14/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/onepiece/arc14/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/onepiece/arc14/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/563-one-piece-saga-12-whole-cake-island","urlPath":"/video/563-one-piece-saga-12-whole-cake-island","episodeCount":98,"genres":["Shônen Jump","Animation japonaise","Jeunesse","Action","Aventure","Comédie","Fantastique","Shônen"],"copyright":"Film © 1999 Toei Animation Co., Ltd.  © Eiichiro Oda/Shueisha, Toei Animation","rating":4.8,"ratingsCount":13617,"commentsCount":297,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"1999","productionStudio":"Toei Animation","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Konosuke Uda"},{"role":"Scénariste","name":"Ryota Yamaguchi"},{"role":"Compositeur","name":"Kohei Tanaka"},{"role":"Mangaka","name":"Eiichirô Oda"},{"role":"Character designer","name":"Noboru Koizumi"}],"nextVideoReleaseDate":null,"indexable":true},{"id":469,"title":"One Piece : Saga 14 - Pays de Wano","type":"EPS","originalTitle":"One Piece","shortTitle":"One Piece","reference":"onepiece_tv","age":"10+","languages":["vostf","vf"],"summary":"Oyez ! Oyez ! Pirates de tous bords ! Gol D.Roger, le légendaire Roi des pirates, mort sur l’échafaud, a laissé derrière lui un trésor inestimable : le « One Piece ». Monkey D.Luffy, un garçon naïf et impulsif, rêve de mettre la main sur ce fameux butin et de devenir le nouveau Roi des Pirates. Parcourant les mers, il rassemble au fil de l’eau un équipage redoutable.\nLuffy et ses compagnons débarquent au pays de Wano pour affronter le terrible Kaido, réputé pour être la personne la plus forte du monde. Là-bas, ils y retrouvent Zoro et le reste de l'équipage infiltrés dans tout le pays...","image":"https://image.animationdigitalnetwork.fr/license/onepiece/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/onepiece/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/onepiece/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/onepiece/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/469-one-piece-saga-14-pays-de-wano","urlPath":"/video/469-one-piece-saga-14-pays-de-wano","episodeCount":208,"genres":["Animation japonaise","Jeunesse","Action","Aventure","Comédie","Fantastique","Shônen"],"copyright":"Film © 1999 Toei Animation Co., Ltd. © Eiichiro Oda/Shueisha, Toei Animation","rating":4.7,"ratingsCount":49119,"commentsCount":1588,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"1999","productionStudio":"Toei Animation","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Konosuke Uda"},{"role":"Scénariste","name":"Ryota Yamaguchi"},{"role":"Compositeur","name":"Kohei Tanaka"},{"role":"Mangaka","name":"Eiichirô Oda"},{"role":"Character designer","name":"Noboru Koizumi"}],"nextVideoReleaseDate":null,"indexable":true},{"id":1116,"title":"One Piece : Saga 15 - Egghead","type":"EPS","originalTitle":"ワンピース","shortTitle":"One Piece","reference":"onepiece_tv15","age":"10+","languages":["vostf"],"summary":"Oyez ! Oyez ! Pirates de tous bords ! Gol D. Roger, le légendaire Roi des pirates, mort sur l’échafaud, a laissé derrière lui un trésor inestimable : le « One Piece ». Monkey D. Luffy, un garçon naïf et impulsif, rêve de mettre la main sur ce fameux butin et de devenir le nouveau Roi des Pirates. Parcourant les mers, il rassemble au fil de l’eau un équipage redoutable.\nAprès avoir quitté le pays de Wa, Luffy et son équipage accostent sur l’île de Egg Head où réside le talentueux et mystérieux Dr Vegapunk. Malheureusement pour eux, le Gouvernement Mondial envoie une équipe du CP0 dont la mission est d’assassiner le scientifique.","image":"https://image.animationdigitalnetwork.fr/license/onepiece/tv15/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/onepiece/tv15/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/onepiece/tv15/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/onepiece/tv15/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/1116-one-piece-saga-15-egg-head","urlPath":"/video/1116-one-piece-saga-15-egg-head","episodeCount":27,"genres":["Animation japonaise","Jeunesse","Action","Aventure","Comédie","Fantastique","Shônen"],"copyright":"©Eiichiro Oda / Shueisha, Toei Animation","rating":4.7,"ratingsCount":1832,"commentsCount":59,"qualities":["fhd","hd","sd"],"distributions":"fr,de","simulcast":true,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":"Une nouvelle aventure attend Luffy et son équipage ! Le début de la saga finale commence !","firstReleaseYear":"1999","productionStudio":"Toei Animation","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Fukasawa Toshinori"},{"role":"Scénariste","name":"Shoji Yonemura"},{"role":"Mangaka","name":"Eiichiro Oda"},{"role":"Compositeur","name":"Kohei Tanaka, Shiro Hamaguchi"},{"role":"Directeur de la photographie","name":"Hideki Chiba, Tomoya Hosaka"},{"role":"Directeur de l'animation","name":"Kazuya Hisada, Keiichi Ichikawa"}],"nextVideoReleaseDate":"2024-07-28T07:00:00Z","indexable":true}]},"dataUpdateCount":1,"dataUpdatedAt":1721906283136,"error":null,"errorUpdateCount":0,"errorUpdatedAt":0,"fetchFailureCount":0,"fetchFailureReason":null,"fetchMeta":null,"isInvalidated":false,"status":"success","fetchStatus":"idle"},"queryKey":["topShows",{"limit":8}],"queryHash":"[\"topShows\",{\"limit\":8}]"},{"state":{"data":{"video":{"id":5008,"title":"No Game No Life - Épisode 6","name":"Un coup interesting","number":"Épisode 6","shortNumber":"6","season":"1","reference":"ngnl_tv_0006","type":"EPS","order":7,"image":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps6_320x180.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps6_640x360.jpg","summary":"Sora et Shiro défient Jibril et lui demandent la bibliothèque. De leur côté ils mettent leur tablette en jeu. Appâtée par la somme folle de connaissances venant d'un autre mode que recèle la tablette, Jibril accepte et surenchérit en proposant sa vie à la place de la bibliothèque. Elle propose donc de jouer au jeu de la dernière syllabe. Seulement, son jeu est un peu spécial. Lorsque la chose que désigne le mot prononcé existe là où on se trouve, elle disparaît et, à l'inverse, lorsqu'elle n'existe pas, elle apparaît. S'enchaîne une suite de mot et d'apparitions/disparitions qui mèneront presque à la fin du monde...","releaseDate":"2014-05-29T15:00:00Z","duration":1441,"url":"https://animationdigitalnetwork.com/video/315-no-game-no-life/5008-episode-6","urlPath":"/video/315-no-game-no-life/5008-episode-6","embeddedUrl":"https://animationdigitalnetwork.com/embedded/315-no-game-no-life/5008","languages":["vostf","vf"],"qualities":["fhd","hd","sd","mobile"],"rating":4.8,"ratingsCount":193,"commentsCount":42,"available":true,"download":true,"free":false,"freeWithAds":false,"show":{"id":315,"title":"No Game No Life","type":"EPS","originalTitle":"No Game No Life","shortTitle":null,"reference":"ngnl_tv","age":"12+","languages":["vostf","vf"],"summary":"Sora et Shiro, frère et sœur passionnés de jeux vidéo et incroyablement doués, se sont élevés au rang de légende urbaine tant ils restaient invaincus, mais ils ne sont aux yeux du monde extérieur que des NEETs et des Hikikomoris. L’apparition de Teto, un jeune garçon se faisant appelé « Dieu », va changer le cours des choses.\nLoin du monde réel considéré comme un « jeu pourri », Teto entraîne nos deux héros dans un univers parallèle où la violence est proscrite et où tout conflit se règle par une partie de jeu.\nDes 16 peuples vivant là-bas, les « Humains » sont les plus faibles. Suite à de trop nombreuses parties perdues, leur terre et leur nombre sont presque réduits à néant. \nGrâce à leur talent, Sora et Shiro pourront-ils inverser la tendance et sauver les Humains ?","image":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/315-no-game-no-life","urlPath":"/video/315-no-game-no-life","episodeCount":12,"genres":["Game","Médieval-Fantastique","Moe","noitaminA","Sexy","Animation japonaise","Action","Aventure","Comédie","Ecchi","Fantastique","Seinen"],"copyright":"©Yuu Kamiya, PUBLISHED BY KADOKAWA CORPORATION MEDIAFACTORY/NO GAME NO LIFE PARTNERS","rating":4.9,"ratingsCount":2624,"commentsCount":173,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":true,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2014","productionStudio":"Madhouse","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Atsuko Ishizuka"},{"role":"Scénariste","name":"Jukki Hanada"},{"role":"Compositeur","name":"Shinji Hosoe"},{"role":"Auteur","name":"Yû Kamiya"},{"role":"Character designer","name":"Kouji Oodate"}],"nextVideoReleaseDate":null,"indexable":true},"microdata":{"@context":"http://schema.org","@type":"TVEpisode","name":"No Game No Life - Épisode 6 : Un coup interesting","description":"Sora et Shiro défient Jibril et lui demandent la bibliothèque. De leur côté ils mettent leur tablette en jeu. Appâtée par la somme folle de connaissances venant d'un autre mode que recèle la tablette, Jibril accepte et surenchérit en proposant sa vie à la place de la bibliothèque. Elle propose donc de jouer au jeu de la dernière syllabe. Seulement, son jeu est un peu spécial. Lorsque la chose que désigne le mot prononcé existe là où on se trouve, elle disparaît et, à l'inverse, lorsqu'elle n'existe pas, elle apparaît. S'enchaîne une suite de mot et d'apparitions/disparitions qui mèneront presque à la fin du monde...","episodeNumber":"6","thumbnailUrl":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps6_640x360.jpg","video":{"@type":"VideoObject","name":"No Game No Life - Épisode 6 : Un coup interesting","url":"https://animationdigitalnetwork.com/video/315-no-game-no-life/5008-episode-6","description":"Retrouvez No Game No Life - Épisode 6 en streaming VF et VOSTFR sur Animation Digital Network ! Qualité HD 1080p, HD 720p et SD 480p.","caption":"Retrouvez No Game No Life - Épisode 6 en streaming VF et VOSTFR sur Animation Digital Network ! Qualité HD 1080p, HD 720p et SD 480p.","encodingFormat":"mp4","videoQuality":"HD 1080p","requiresSubscription":true,"thumbnailUrl":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps6_1920x1080.jpg","duration":"PT24M1S","width":1920,"height":1080,"playerType":"HTML5","isFamilyFriendly":true,"datePublished":"2014-05-29T15:00:00Z","uploadDate":"2014-05-29T15:00:00Z","genre":"Game, Médieval-Fantastique, Moe, noitaminA, Sexy, Animation japonaise, Action, Aventure, Comédie, Ecchi, Fantastique, Seinen","embedUrl":"https://animationdigitalnetwork.com/embedded/315-no-game-no-life/5008","interactionStatistic":{"@type":"InteractionCounter","interactionType":"http://schema.org/CommentAction","userInteractionCount":42},"author":[{"@type":"Person","name":"ADN","url":"https://animationdigitalnetwork.com"}],"inLanguage":["jp","fr"],"potentialAction":{"@type":"WatchAction","target":[{"url":"https://animationdigitalnetwork.com/video/315-no-game-no-life/5008-episode-6","actionPlatform":"https://schema.org/DesktopWebPlatform","inLanguage":["jp","fr"]},{"url":"https://animationdigitalnetwork.com/video/315-no-game-no-life/5008-episode-6","actionPlatform":"https://schema.org/MobileWebPlatform","inLanguage":["jp","fr"]},{"url":"https://animationdigitalnetwork.com/video/315-no-game-no-life/5008-episode-6","actionPlatform":"https://schema.org/IOSPlatform","inLanguage":["jp","fr"]},{"url":"https://animationdigitalnetwork.com/video/315-no-game-no-life/5008-episode-6","actionPlatform":"https://schema.org/AndroidPlatform","inLanguage":["jp","fr"]}],"actionAccessibilityRequirement":{"@type":"ActionAccessSpecification","category":"subscriptionRequired","availabilityStarts":"2014-05-29T15:00:00Z","availabilityEnds":"2032-03-31T00:00:00Z"}}},"subtitleLanguage":"fr","partOfSeries":{"@type":"TVSeries","name":"No Game No Life","url":"https://animationdigitalnetwork.com/video/315-no-game-no-life"},"partOfSeason":{"@type":"CreativeWorkSeason","name":"Saison 1","seasonNumber":"1"},"aggregateRating":{"@type":"AggregateRating","ratingValue":4.8,"ratingCount":193}},"seo":{"title":"No Game No Life - 1 Épisode 6 : Un coup interesting - streaming - VF et VOSTFR - ADN","description":"Retrouvez No Game No Life - Épisode 6 en streaming VF et VOSTFR sur Animation Digital Network ! Qualité HD 1080p, HD 720p et SD 480p."},"indexable":true}},"dataUpdateCount":1,"dataUpdatedAt":1721906283141,"error":null,"errorUpdateCount":0,"errorUpdatedAt":0,"fetchFailureCount":0,"fetchFailureReason":null,"fetchMeta":null,"isInvalidated":false,"status":"success","fetchStatus":"idle"},"queryKey":["video ",{"videoId":5008,"withMicrodata":true,"withSeo":true,"skipDistributionCheck":true}],"queryHash":"[\"video \",{\"skipDistributionCheck\":true,\"videoId\":5008,\"withMicrodata\":true,\"withSeo\":true}]"},{"state":{"data":{"seasons":[{"season":null,"title":"Vidéos","videos":[{"id":4946,"title":"No Game No Life - Bande Annonce","name":null,"number":"Bande Annonce","image":"https://image.animationdigitalnetwork.fr/license/ngnl/pv/web/pv1_320x180.jpg","duration":1440,"urlPath":"/video/315-no-game-no-life/4946-bande-annonce","free":false,"freeWithAds":true},{"id":5000,"title":"No Game No Life - Épisode 1","name":"Débutant","number":"Épisode 1","image":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps1_320x180.jpg","duration":1440,"urlPath":"/video/315-no-game-no-life/5000-episode-1","free":false,"freeWithAds":true},{"id":5002,"title":"No Game No Life - Épisode 2","name":"Challenger","number":"Épisode 2","image":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps2_320x180.jpg","duration":1440,"urlPath":"/video/315-no-game-no-life/5002-episode-2","free":false,"freeWithAds":false},{"id":5005,"title":"No Game No Life - Épisode 3","name":"Expert","number":"Épisode 3","image":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps3_320x180.jpg","duration":1440,"urlPath":"/video/315-no-game-no-life/5005-episode-3","free":false,"freeWithAds":false},{"id":5006,"title":"No Game No Life - Épisode 4","name":"Grand master","number":"Épisode 4","image":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps4_320x180.jpg","duration":1440,"urlPath":"/video/315-no-game-no-life/5006-episode-4","free":false,"freeWithAds":false},{"id":5007,"title":"No Game No Life - Épisode 5","name":"Case Faible","number":"Épisode 5","image":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps5_320x180.jpg","duration":1440,"urlPath":"/video/315-no-game-no-life/5007-episode-5","free":false,"freeWithAds":false},{"id":5008,"title":"No Game No Life - Épisode 6","name":"Un coup interesting","number":"Épisode 6","image":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps6_320x180.jpg","duration":1440,"urlPath":"/video/315-no-game-no-life/5008-episode-6","free":false,"freeWithAds":false},{"id":5009,"title":"No Game No Life - Épisode 7","name":"Sacrifice","number":"Épisode 7","image":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps7_320x180.jpg","duration":1440,"urlPath":"/video/315-no-game-no-life/5009-episode-7","free":false,"freeWithAds":false},{"id":5010,"title":"No Game No Life - Épisode 8","name":"Fake end","number":"Épisode 8","image":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps8_320x180.jpg","duration":1440,"urlPath":"/video/315-no-game-no-life/5010-episode-8","free":false,"freeWithAds":false},{"id":5011,"title":"No Game No Life - Épisode 9","name":"Sky Walk","number":"Épisode 9","image":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps9_320x180.jpg","duration":1440,"urlPath":"/video/315-no-game-no-life/5011-episode-9","free":false,"freeWithAds":false},{"id":5012,"title":"No Game No Life - Épisode 10","name":"Blue Rose","number":"Épisode 10","image":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps10_320x180.jpg","duration":1440,"urlPath":"/video/315-no-game-no-life/5012-episode-10","free":false,"freeWithAds":false},{"id":5013,"title":"No Game No Life - Épisode 11","name":"Killing giant","number":"Épisode 11","image":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps11_320x180.jpg","duration":1440,"urlPath":"/video/315-no-game-no-life/5013-episode-11","free":false,"freeWithAds":false},{"id":5014,"title":"No Game No Life - Épisode 12","name":"Loi numéro 10","number":"Épisode 12","image":"https://image.animationdigitalnetwork.fr/license/ngnl/tv/web/eps12_320x180.jpg","duration":1440,"urlPath":"/video/315-no-game-no-life/5014-episode-12","free":false,"freeWithAds":false}]}]},"dataUpdateCount":1,"dataUpdatedAt":1721906283142,"error":null,"errorUpdateCount":0,"errorUpdatedAt":0,"fetchFailureCount":0,"fetchFailureReason":null,"fetchMeta":null,"isInvalidated":false,"status":"success","fetchStatus":"idle"},"queryKey":["videosSeasons",{"showId":315,"order":"asc"}],"queryHash":"[\"videosSeasons\",{\"order\":\"asc\",\"showId\":315}]"},{"state":{"data":{"seasons":[{"season":null,"title":"Vidéos","offset":0,"limit":-1}]},"dataUpdateCount":1,"dataUpdatedAt":1721906283138,"error":null,"errorUpdateCount":0,"errorUpdatedAt":0,"fetchFailureCount":0,"fetchFailureReason":null,"fetchMeta":null,"isInvalidated":false,"status":"success","fetchStatus":"idle"},"queryKey":["seasons",{"showId":315,"order":"asc"}],"queryHash":"[\"seasons\",{\"order\":\"asc\",\"showId\":315}]"},{"state":{"data":{"comments":[{"id":274340,"parentId":null,"lft":96,"rgt":97,"depth":1,"text":"J'ai un peu de mal avec la relation frère soeur là Et la manière dont les femmes mais surtout les enfants sont affichés comme objet... C'est vraiment dommage. Ca enlève de la légèreté à l'anime.","postDate":"2022-10-22T19:02:16Z","validated":true,"user":{"id":408599,"rating":null,"username":"laurie.mes","avatar":"https://www.gravatar.com/avatar/471a6b9ec90ec55bd07abbab7afb19a3?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"xxbioutyxx","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":267771,"parentId":null,"lft":94,"rgt":95,"depth":1,"text":"la ref a SKYRIM ","postDate":"2022-08-17T21:28:13Z","validated":true,"user":{"id":152491,"rating":null,"username":"doberman85","avatar":"https://www.gravatar.com/avatar/56e09ee7c33b89d51f215d3d1676a6de?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"doberman85","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":201379,"parentId":null,"lft":92,"rgt":93,"depth":1,"text":"je viens de commencer cet animé il y a quelques instants et je ne regrette pas","postDate":"2021-06-27T21:19:22Z","validated":true,"user":{"id":2097240,"rating":null,"username":"Lucasmercier","avatar":"https://www.gravatar.com/avatar/5055a9ecd3975fc0624611bc3637bec5?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":3,"rating":null,"username":"Minh","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch20_bg11_green0_188.jpg"},"comments":[]},{"id":166366,"parentId":null,"lft":84,"rgt":87,"depth":1,"text":"c moi ou bien sora a 200 000QI","postDate":"2021-03-06T15:59:37Z","validated":true,"user":{"id":2159719,"rating":null,"username":"yaceflilia","avatar":"https://www.gravatar.com/avatar/75eaa476159761bb10f79fb7afb64e1c?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"yaceflilia","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[{"id":237751,"parentId":166366,"lft":85,"rgt":86,"depth":2,"text":"non seulement 200 000 000 000 000 000 000 000 000 000 t'inquiète","postDate":"2021-12-03T17:43:25Z","validated":true,"user":{"id":640197,"rating":null,"username":"Owllogramme","avatar":"https://www.gravatar.com/avatar/effc63a2b7f56fc4ae67d68740a6ae2c?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":2,"rating":null,"username":"Les Bruns","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch10_bg14_green1_188.jpg"},"comments":[]}]},{"id":82224,"parentId":null,"lft":82,"rgt":83,"depth":1,"text":"je suis le seul à trouver cette traduction, absolument, dégueulasse ? entre les phrases qui ne sont pas correcte en français et les approximations j'ai trouvé cet épisode particulièrement pénible à suivre","postDate":"2019-09-13T19:47:16Z","validated":true,"user":{"id":301312,"rating":null,"username":"zalgearsofficial","avatar":"https://www.gravatar.com/avatar/6f3a4174c17874b14347a8541cf15a03?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"zalgearsofficial","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":44508,"parentId":null,"lft":80,"rgt":81,"depth":1,"text":"une tueeeriiiiiiiiie, mais je suis tellement deg putain qu'il n'y ai pas de saison 2 de prévue, comment un animé pareil peut rester comme ça ? Sur une fin comme ça ? ! j'veux la suite ! ! !","postDate":"2018-06-29T03:38:06Z","validated":true,"user":{"id":607647,"rating":5,"username":"Khin Desu","avatar":"https://www.gravatar.com/avatar/bd54f3aba47b5dd859d8ebb21ba6a902?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":5,"username":"Khin","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":38459,"parentId":null,"lft":78,"rgt":79,"depth":1,"text":"Super épisode","postDate":"2018-04-02T10:41:01Z","validated":true,"user":{"id":679141,"rating":null,"username":"Codewarrior4","avatar":"https://www.gravatar.com/avatar/05e0b02ae7c8d89b594ec7fb0da8d832?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"Warrior4","avatar":"https://avatar.animationdigitalnetwork.fr/web/oshi6_bg1_green0_188.jpg"},"comments":[]},{"id":35071,"parentId":null,"lft":76,"rgt":77,"depth":1,"text":"Euh... Ouais... :')","postDate":"2017-11-22T14:54:48Z","validated":true,"user":{"id":654781,"rating":null,"username":"Raind0o","avatar":"https://www.gravatar.com/avatar/f8f04ff65718e644cc194b8ec4c9ed7c?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Evan","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":26161,"parentId":null,"lft":72,"rgt":73,"depth":1,"text":"Vraiment vraiment ouf ! que ce soit dans les délires ou dans les jeux qu'ils donnent c'est magnifique j’espère qu'ils vont faire une saison 2 !","postDate":"2017-01-19T16:26:48Z","validated":true,"user":{"id":393787,"rating":5,"username":"PacPac_-","avatar":"https://www.gravatar.com/avatar/da834229281133e30888e975460eb48c?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":5,"username":"PacPac_-","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":6790,"parentId":null,"lft":68,"rgt":69,"depth":1,"text":"C'est ridicule comme à la fois sérieux. NGLF me surprend d'épisode en épisode !","postDate":"2015-05-17T20:20:32Z","validated":true,"user":{"id":200541,"rating":5,"username":"Ainku","avatar":"https://www.gravatar.com/avatar/43460e67aaea6430c24eb9d65b3746f6?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":5,"username":"Ainku","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":2787,"parentId":null,"lft":48,"rgt":67,"depth":1,"text":"la traduction est merd*que............... Les Fan Sub qui font ca pour le plaisir vont plus vite et se raproche plus des termes exacts (et dire que je suis oblige de prendre 1abonnement a l'annee pour profiter tranquillement des anims)\nFaites des efforts ADN, SVP, SVP, SVP sinon on va vous prendre pour des machines a sous","postDate":"2014-10-16T23:22:55Z","validated":true,"user":{"id":128207,"rating":null,"username":"rezerator","avatar":"https://www.gravatar.com/avatar/ea491800b1854deb853dfd2abca4d20e?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"rezerator","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch14_bg0_green0_188.jpg"},"comments":[{"id":2788,"parentId":2787,"lft":49,"rgt":52,"depth":2,"text":"en plus les kanji dessines (ou les ecritaux ne sont pas traduits) tout comme il y a certaines choses qui ne sont meme pas expliquees : genre des references typiques japonaises que nous europeen ne pouvons comprendre","postDate":"2014-10-16T23:33:10Z","validated":true,"user":{"id":128207,"rating":null,"username":"rezerator","avatar":"https://www.gravatar.com/avatar/ea491800b1854deb853dfd2abca4d20e?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"rezerator","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch14_bg0_green0_188.jpg"},"comments":[]},{"id":2794,"parentId":2787,"lft":53,"rgt":66,"depth":2,"text":"On ne vous oblige à rien, si ce n'est vous donner le choix de soutenir légalement et financièrement les auteurs et séries qui vous plaisent.\nPour ce qui est de la qualité de nos traductions, nous ne travaillons qu'avec des professionnels et nous souhaitons avoir un travail d'adaptation, fait dans les délais du simulcast... On peut être d'accord avec les choix effectués par chaque traducteur.\nSi vous souhaitez nous faire part de vos compétences, nous sommes tout à fait ouvert à recevoir des CV et lettres de motivations.\nMerci d'utiliser \"nous contacter\" en bas de page.","postDate":"2014-10-17T13:49:32Z","validated":true,"user":{"id":92354,"rating":null,"username":"Anonymous92354","avatar":"https://www.gravatar.com/avatar/37500ba3aaba640c5119eebafa98a2d1?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Anonymous92354-1","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":2806,"parentId":2788,"lft":50,"rgt":51,"depth":3,"text":"dsl mais j'ai un taff qui me prend bcp de temps (ce qui me permet de payer un abonnement) et ma situation m'interdit le double emploi (d'ailleurs mes connaissances de la langue japonaise et sa culture sont trop faibles pour etre traducteur par contre je remarque certaines choses qui clochent...). Ensuite sur les copyright ou protection des droits je suis d'accord car toute peine merite salaire mais j'ai l'impression que vous passez plus de temps a faire la chasse aux sorcieres (tout a fait normal c'est votre gagne pain) au detriment d'un service de qualite.","postDate":"2014-10-17T19:03:00Z","validated":true,"user":{"id":128207,"rating":null,"username":"rezerator","avatar":"https://www.gravatar.com/avatar/ea491800b1854deb853dfd2abca4d20e?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"rezerator","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch14_bg0_green0_188.jpg"},"comments":[]},{"id":2807,"parentId":2794,"lft":54,"rgt":65,"depth":3,"text":"Et c'est vrai qu'on nous oblige a rien mais on est pris en otage car vous etes les seuls habilites a mettre en streaming certaines animes donc si on veut se faire plaiz apres 13h de taf sur une journee  on n'a pas le choix du \"distributeur\" alors j'estime avoir le droit de mettre le doigt sur certains points qui m'agacent. Dans mon 1er mail je vous demande de faire des efforts pour que moi en tant que CLIENT je prenne du plaisir et ne me sente pas etre un portefeuille ambulant...","postDate":"2014-10-17T19:10:59Z","validated":true,"user":{"id":128207,"rating":null,"username":"rezerator","avatar":"https://www.gravatar.com/avatar/ea491800b1854deb853dfd2abca4d20e?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"rezerator","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch14_bg0_green0_188.jpg"},"comments":[]},{"id":2814,"parentId":2807,"lft":55,"rgt":64,"depth":4,"text":"normal qu il est des différences ! il faut bien traduire les expressions par celle qui s en rapproche le plus en français exemple : pour elle les garcon ont autant d importance que les patates ( en japonais) double en fr par : pour elle les garçons la transparence de l air.\"\ndonc normal qu il y est des différences ! même entre différent fan sub, les dialogue traduit ne sont pas les mêmes, mais la sémantique est respecté.\nmais dire que les fan sub font du meilleur boulot que de vrais pros, la c est abusé ! comme dit le modo, envoyer vos cv.\nil est vrais que les textes ne sont pas traduit, j ai sous la sigestion dans la boite a idée .va donc voir.","postDate":"2014-10-17T21:29:21Z","validated":true,"user":{"id":71481,"rating":null,"username":"ftrnt","avatar":"https://www.gravatar.com/avatar/dd2e38502503c01815743d99c7dfd942?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"ftrnt","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch19_bg12_green0_188.jpg"},"comments":[]},{"id":2819,"parentId":2814,"lft":56,"rgt":63,"depth":5,"text":"Des pros ? Une preuve , des diplomes ? Une raison autre que d'avoir acheter le marche pour avoir l'exclu (bon c'est trop facile d'attaquer la dessus mais on ne peut pas me contre-dire sur le manque de serieux).\nJ'ai jamais dit que les fan sub faisaient du meilleur boulot mais j'ai dit qu'il le faisaient consciemment et rapidement.","postDate":"2014-10-17T22:22:51Z","validated":true,"user":{"id":128207,"rating":null,"username":"rezerator","avatar":"https://www.gravatar.com/avatar/ea491800b1854deb853dfd2abca4d20e?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"rezerator","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch14_bg0_green0_188.jpg"},"comments":[]},{"id":2821,"parentId":2819,"lft":59,"rgt":60,"depth":6,"text":"des pros ? desd iplome ? oui sinon il serai pas embauche pour faire des traductions ! quand au sérieux et la vitesse ! ca depend de moult facteurs comme : choix des mots, tournure de phrase, et autre , la ou les fan sub se contente de faire du \"littéral\" les pros, adapte la sémantique et les jeux de mots, leqs blagues etc.. quand a la vitesse, vous savez a quels vitesse est fait la traduction par les pros ? je ne pense pas !! enfin, ca fait déjà un moment que l oav \"anzio\" de gup est sorti, mais toujours pas de sub fr ...\nla ou des fan sb passe par l englais, les pro traduise directement du japonais.\nquand au speed sub, hum comment dire ... je préfère pas en voir c est un massacre.","postDate":"2014-10-17T22:58:31Z","validated":true,"user":{"id":71481,"rating":null,"username":"ftrnt","avatar":"https://www.gravatar.com/avatar/dd2e38502503c01815743d99c7dfd942?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"ftrnt","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch19_bg12_green0_188.jpg"},"comments":[]},{"id":2823,"parentId":2819,"lft":61,"rgt":62,"depth":6,"text":"j aime bien les amateurs qui croivent savoir la vérité et qui contredise et conteste le travail de professionnel.\non attend les résultats de vos propres traductions, ça peut etre drôle. j en est vu des trad foireuse  avec des commentaires  comme \"ouah cool c est la meilleur que j ai vu !!\".","postDate":"2014-10-17T23:02:03Z","validated":true,"user":{"id":71481,"rating":null,"username":"ftrnt","avatar":"https://www.gravatar.com/avatar/dd2e38502503c01815743d99c7dfd942?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"ftrnt","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch19_bg12_green0_188.jpg"},"comments":[]}]},{"id":1106,"parentId":null,"lft":46,"rgt":47,"depth":1,"text":"Cette série est un grand n'importe quoi maîtrisé !! Juste génial =)","postDate":"2014-07-18T09:30:12Z","validated":true,"user":{"id":80452,"rating":null,"username":"Aki no Niji","avatar":"https://www.gravatar.com/avatar/8c9f7e1970750e9656a8b6d2e67e7e85?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Aki no Niji","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":914,"parentId":null,"lft":44,"rgt":45,"depth":1,"text":"Vous êtes VRAIMENT sûr que cette série est - 12 ans? (j'en ai trouvé des séries déclarés -16 pour moins que ça dans ce site...)","postDate":"2014-07-10T11:19:09Z","validated":true,"user":{"id":80616,"rating":null,"username":"ereden","avatar":"https://www.gravatar.com/avatar/d430181184d59c019b165e2993a6080a?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"ereden","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":613,"parentId":null,"lft":40,"rgt":41,"depth":1,"text":"+1 excellent épisode","postDate":"2014-06-17T23:46:04Z","validated":true,"user":{"id":72576,"rating":null,"username":"Balt","avatar":"https://www.gravatar.com/avatar/b136f79434d9c5b40dccad192f47ab5f?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Balt","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":485,"parentId":null,"lft":36,"rgt":39,"depth":1,"text":"N'y a-t-il pas une petite erreur de traduction dans cet épisode lorsque Jibril dit \"à l'instar des Imanitiens, les Flugels n'ont pas besoin de se nourir.\" (13:22) \"À l'instar\" signifie qu'il y a une ressemblance (\"tout comme\"), or ici il semblerait plutôt que ce soit l'inverse ? (\"contrairement aux Imanitiens\" ?)\nExcellent épisode sinon ! Cet anime est de loin mon préféré du moment !","postDate":"2014-06-06T09:08:49Z","validated":true,"user":{"id":82095,"rating":null,"username":"Shala","avatar":"https://www.gravatar.com/avatar/76f8c15999c81af8a7105724ef58ae79?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Shala","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[{"id":486,"parentId":485,"lft":37,"rgt":38,"depth":2,"text":"Merci Pierre, nous regarderons ça au plus vite :)","postDate":"2014-06-06T15:58:24Z","validated":true,"user":{"id":92354,"rating":null,"username":"Anonymous92354","avatar":"https://www.gravatar.com/avatar/37500ba3aaba640c5119eebafa98a2d1?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Anonymous92354-1","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]}]},{"id":463,"parentId":null,"lft":33,"rgt":34,"depth":1,"text":"Et le quebec lui il a pas droit a sa !!!!!!!!!!!!!","postDate":"2014-06-04T19:24:17Z","validated":true,"user":{"id":0,"rating":null,"username":"Anonyme","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Anonyme","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":391,"parentId":null,"lft":23,"rgt":32,"depth":1,"text":"autre choses, il y  pas mal de texte dans cet épisode ! meme si la plupart ce sont les mots qu'ils disent, les panneaux avec les flèche eux ne sont pas traduit ! du coup ca casse les blagues en rapport avec eux. cf ma suggestion dans la boite a idée.","postDate":"2014-05-31T12:04:48Z","validated":true,"user":{"id":71481,"rating":null,"username":"ftrnt","avatar":"https://www.gravatar.com/avatar/dd2e38502503c01815743d99c7dfd942?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"ftrnt","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch19_bg12_green0_188.jpg"},"comments":[{"id":418,"parentId":417,"lft":25,"rgt":26,"depth":3,"text":"plutôt dur de traduire avec exactitude un jeu baser sur une suite de mots ! surtout quand les choses dite apparaisse et ou disparaisse.\napres il y un timer a respecter (explique dans parlon vf dans wakanim).","postDate":"2014-06-01T20:32:28Z","validated":true,"user":{"id":71481,"rating":null,"username":"ftrnt","avatar":"https://www.gravatar.com/avatar/dd2e38502503c01815743d99c7dfd942?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"ftrnt","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch19_bg12_green0_188.jpg"},"comments":[]},{"id":419,"parentId":417,"lft":27,"rgt":30,"depth":3,"text":"Toujours prouver ses dires en apportant des éléments confirmant ce qu'on avance. Je ne dis pas que tu as tort mais j'aimerais voir ces passages de la traduction anglaise professionnelle comparés à ceux en français. Il faut aussi être certain que la traduction depuis le japonais vers l'anglais ne comporte pas d'erreurs en premier lieu. Si les grosses erreurs sont avérées, je pense qu'ils en tiendront compte et que ton commentaire aura été très utile.\nSinon, très bon épisode. Une série agréable.","postDate":"2014-06-01T20:52:16Z","validated":true,"user":{"id":79085,"rating":null,"username":"Yumekun ","avatar":"https://www.gravatar.com/avatar/60fcaf75da804dfe8293fdd46f4ce193?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Yumekun ","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":420,"parentId":419,"lft":28,"rgt":29,"depth":4,"text":"en efet, des personne qui dise que la traduction pro est fausse, doivent avoir une bonne connaissance de japonais, de ce fait peuvent  normallement se passer de la dite traduction, enfin, plutôt que de le dire en commentaire, on fait un ticket au support avec : le texte fautif, le timer, l épisode et la correction supposé. le sav est tout a l écoute , pour cause je l est deja fait, même si c est de par mon ignorance je me suis fourvoyer. : \"déplacement : 6000 tonnes\" dans arpegio of blue steel, je vous laisse cherche pourquoi au final c'est pas une erreur.","postDate":"2014-06-01T21:49:30Z","validated":true,"user":{"id":71481,"rating":null,"username":"ftrnt","avatar":"https://www.gravatar.com/avatar/dd2e38502503c01815743d99c7dfd942?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"ftrnt","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch19_bg12_green0_188.jpg"},"comments":[]}]},{"id":375,"parentId":null,"lft":21,"rgt":22,"depth":1,"text":"Décidément on s'en lasse pas :) , chapeau pour les scénaristes qui nous ont pondu un truc farfelu et sérieux en même temps, faut quand même savoir les question d'atomes et compagnie ... vivement la semaine prochaine. Et j'adore le générique de début.","postDate":"2014-05-30T21:48:32Z","validated":true,"user":{"id":76234,"rating":5,"username":"MaryTDA","avatar":"https://www.gravatar.com/avatar/aeec07bf41b7cc05e2e23ac3aad5a00e?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":5,"username":"MaryTDA","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":364,"parentId":null,"lft":19,"rgt":20,"depth":1,"text":"oui c'est bon, merci !","postDate":"2014-05-30T16:08:35Z","validated":true,"user":{"id":73036,"rating":null,"username":"mokona","avatar":"https://www.gravatar.com/avatar/1f943a7a43a467651da812eab4e068ae?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"mokona","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":360,"parentId":null,"lft":13,"rgt":18,"depth":1,"text":"Petit problème pour la version iOS : les sous-titres prennent tout l'écran !  A part ça, super épisode !   \nC'est la méthode la plus originale pour justifier l'absence de tétons que j'ai jamais vu :p","postDate":"2014-05-30T09:19:33Z","validated":true,"user":{"id":73036,"rating":null,"username":"mokona","avatar":"https://www.gravatar.com/avatar/1f943a7a43a467651da812eab4e068ae?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"mokona","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[{"id":361,"parentId":360,"lft":14,"rgt":15,"depth":2,"text":"La vidéo iOS a été corrigée il y a quelques minutes normalement.\nMerci.","postDate":"2014-05-30T09:21:41Z","validated":true,"user":{"id":73,"rating":null,"username":"Quentin32a211f6","avatar":"https://www.gravatar.com/avatar/0197768032af431e293c018dc77c11ee?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Quentin","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":390,"parentId":360,"lft":16,"rgt":17,"depth":2,"text":"c'est clair comment ils on détournée la censure !! ..","postDate":"2014-05-31T11:41:15Z","validated":true,"user":{"id":71481,"rating":null,"username":"ftrnt","avatar":"https://www.gravatar.com/avatar/dd2e38502503c01815743d99c7dfd942?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"ftrnt","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch19_bg12_green0_188.jpg"},"comments":[]}]},{"id":359,"parentId":null,"lft":11,"rgt":12,"depth":1,"text":"Merci beaucoup pour cette réponse, cette technique fonctionne très bien! Chez, par contre je tenais à préciser que ce bug n'est pas que sur les pc qui ont Windows 7 en système d'exploitation mais aussi ceux qui sont sur Windows 8 comme moi!","postDate":"2014-05-30T08:04:41Z","validated":true,"user":{"id":93474,"rating":null,"username":"Lightlinks","avatar":"https://www.gravatar.com/avatar/9d33413bf08d02c3d350226a492b72fc?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Lightlinks","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":353,"parentId":null,"lft":7,"rgt":10,"depth":1,"text":"Salut j'ai une petite question, comment enlever le lien qui s'affiche en bas à droite de ma vidéo quand je regarde en plein écran?\nsinon merci pour l'épisode!!","postDate":"2014-05-29T22:05:31Z","validated":true,"user":{"id":93474,"rating":null,"username":"Lightlinks","avatar":"https://www.gravatar.com/avatar/9d33413bf08d02c3d350226a492b72fc?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Lightlinks","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[{"id":357,"parentId":353,"lft":8,"rgt":9,"depth":2,"text":"Ça semble être un bug de Chrome sous Windows 7 sur la dernière version. On a prévenu Google et on cherche une solution de notre coté.\nEn attendant, pour éviter le problème, j'ai trouvé une astuce : Passe la page en plein écran (F11) avant de passer le lecteur en plein écran.","postDate":"2014-05-30T05:03:14Z","validated":true,"user":{"id":73,"rating":null,"username":"Quentin32a211f6","avatar":"https://www.gravatar.com/avatar/0197768032af431e293c018dc77c11ee?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Quentin","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]}]},{"id":351,"parentId":null,"lft":5,"rgt":6,"depth":1,"text":"EXCELENT !!!  Chaque episodes surpasse le precedent !!! S il vous plait KAZE , sortez nous les blue ray !!","postDate":"2014-05-29T21:28:19Z","validated":true,"user":{"id":10288,"rating":5,"username":"Eldaddict","avatar":"https://www.gravatar.com/avatar/58f5f5c3bde272477f207e8793a57920?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":5,"username":"Eldaddict","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":348,"parentId":null,"lft":3,"rgt":4,"depth":1,"text":"Grandiose !!!","postDate":"2014-05-29T20:02:06Z","validated":true,"user":{"id":82554,"rating":5,"username":"Gerard","avatar":"https://www.gravatar.com/avatar/de4cee4412ede63fe79cf5b1c1c6e5df?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":5,"username":"Fabien","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch16_bg2_green0_188.jpg"},"comments":[]},{"id":333,"parentId":null,"lft":1,"rgt":2,"depth":1,"text":"mais il on fumé quoi pour cet épisode ? plus ca va plus ça tombe dans le délire complet ! trop bon !\nps : ce serai sympa de traduire les textes, ça casse pas mal les blagues sans la traduction.","postDate":"2014-05-29T19:27:37Z","validated":true,"user":{"id":71481,"rating":null,"username":"ftrnt","avatar":"https://www.gravatar.com/avatar/dd2e38502503c01815743d99c7dfd942?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":true},"profile":{"id":1,"rating":null,"username":"ftrnt","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch19_bg12_green0_188.jpg"},"comments":[]}]},"dataUpdateCount":1,"dataUpdatedAt":1721906283137,"error":null,"errorUpdateCount":0,"errorUpdatedAt":0,"fetchFailureCount":0,"fetchFailureReason":null,"fetchMeta":null,"isInvalidated":false,"status":"success","fetchStatus":"idle"},"queryKey":["comments","/comment/video/5008",{"order":"desc","limit":100,"offset":0}],"queryHash":"[\"comments\",\"/comment/video/5008\",{\"limit\":100,\"offset\":0,\"order\":\"desc\"}]"},{"state":{"data":{"shows":[{"id":568,"title":"No Game No Life 0","type":"MOV","originalTitle":"No Game No Life 0","shortTitle":"No Game No Life 0","reference":"ngnl_film","age":"12+","languages":["vostf","vf"],"summary":"Bienvenue dans l’ancien Disboard où les dix règles du jeu n’existaient pas encore. La guerre consume le monde, scinde les paradis, détruit les étoiles et menace même la race humaine. Au milieu de ce chaos, un jeune homme du nom de Riku essaye de mener l’humanité vers un lendemain auquel il croit fermement. Un jour, dans les ruines d’une cité Elfique, il trouve Schwi, une androïde « ex-machina » qui souhaite comprendre le cœur des Hommes. Leur rencontre va changer le cours de l’histoire…","image":"https://image.animationdigitalnetwork.fr/license/ngnl/film/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/ngnl/film/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/ngnl/film/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/ngnl/film/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/568-no-game-no-life-zero","urlPath":"/video/568-no-game-no-life-zero","episodeCount":1,"genres":["Animation japonaise","Action","Aventure","Drame","Fantastique","Science-Fiction","Seinen"],"copyright":"©Yuu Kamiya,PUBLISHED BY KADOKAWA CORPORATION /NO GAME NO LIFE ZERO PARTNERS","rating":4.9,"ratingsCount":872,"commentsCount":52,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":"Découvrez les origines de No Game No Life, près de 6 000 ans avant l’arrivée de Sora et Shiro !","firstReleaseYear":"2017","productionStudio":"Madhouse","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Atsuko Ishizuka"},{"role":"Scénariste","name":"Jukki Hanada"},{"role":"Compositeur","name":"Super Sweep"},{"role":"Auteur","name":"Yû Kamiya"},{"role":"Character designer","name":"Satoshi Tasaki"}],"nextVideoReleaseDate":null,"indexable":true},{"id":529,"title":"Overlord III","type":"EPS","originalTitle":"??????? III","shortTitle":"Overlord III","reference":"overlord_tv3","age":"12+","languages":["vostf","vf"],"summary":"Les aventures de Ainz Ooal Gown continuent sur les plaines d’E-Rantel. En tant que grand souverain de Nazarick, Ainz Ooal Gown a étendu son emprise dans les régions proches en contrôlant les autochtones et la pègre locale. \n\nToutefois, ses récents exploits attirent l’attention des puissants de ce monde. Que ce soit en tant que Ainz Ooal Gown, le mystérieux mage, ou Momon, le héros des ténèbres, le seigneur de Nazarick va devoir tout faire pour résoudre cette situation…\n","image":"https://image.animationdigitalnetwork.fr/license/overlord/tv3/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/overlord/tv3/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/overlord/tv3/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/overlord/tv3/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/529-overlord-saison-3","urlPath":"/video/529-overlord-saison-3","episodeCount":13,"genres":["Dark-Fantasy","Médieval-Fantastique","Isekai","Guerre","Jeu","Monde virtuel","Politique","Animation japonaise","Action","Aventure","Seinen"],"copyright":"© Kugane Maruyama,PUBLISHED BY KADOKAWA CORPORATION/OVERLORD3 PARTNERS","rating":4.9,"ratingsCount":5177,"commentsCount":59,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":true,"available":true,"download":true,"basedOn":"Light Novel","tagline":"Retrouvez la suite des aventures de Ainz Ooal Gown dans cette troisième saison !","firstReleaseYear":"2018","productionStudio":"Madhouse","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Naoyuki Itô"},{"role":"Scénariste","name":"Yukie Sugawara"},{"role":"Compositeur","name":"Myth \u0026 Roid"},{"role":"Auteur","name":"Kugane Maruyama"},{"role":"Character designer","name":"Takahiro Yoshimatsu"}],"nextVideoReleaseDate":null,"indexable":true},{"id":909,"title":"Overlord IV","type":"EPS","originalTitle":" ???????IV","shortTitle":"Overlord IV","reference":"overlord_tv4","age":"12+","languages":["vostf","vf"],"summary":"Ainz Ooal Gown, ayant assis sa domination, a pour projet de fonder un royaume où toutes les races pourraient cohabiter en harmonie. Cependant, cette montée en puissance est mal perçue par les autres dirigeants qui surveillent de près l’évolution de Nazarick. Ainz Ooal Gown parviendra-t-il à maintenir son autorité, en dépit des complots fomentés envers sa nation&thinsp;?","image":"https://image.animationdigitalnetwork.fr/license/overlord/tv4/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/overlord/tv4/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/overlord/tv4/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/overlord/tv4/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/909-overlord-saison-4","urlPath":"/video/909-overlord-saison-4","episodeCount":13,"genres":["Dark-Fantasy","Médieval-Fantastique","Isekai","Guerre","Jeu","Monde virtuel","Politique","Animation japonaise","Action","Aventure","Seinen"],"copyright":"©Kugane Maruyama, PUBLISHED BY KADOWAWA CORPORATION/OVERLORD4PARTNERS","rating":4.9,"ratingsCount":2491,"commentsCount":87,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":true,"available":true,"download":false,"basedOn":"Light Novel","tagline":"Retrouvez la suite des aventures de Ainz Ooal Gown dans cette quatrième saison !","firstReleaseYear":"2022","productionStudio":"Madhouse","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Naoyuki Ito"},{"role":"Auteur","name":"Kugane Maruyama"},{"role":"Scénariste","name":"Yukie Sugawara"},{"role":"Character designer original","name":"so-bin"},{"role":"Character designer","name":"Satoshi Tasaki"}],"nextVideoReleaseDate":null,"indexable":true},{"id":370,"title":"Overlord","type":"EPS","originalTitle":"Overlord","shortTitle":"Overlord","reference":"overlord_tv","age":"12+","languages":["vostf","vf"],"summary":"Nous sommes en l’an 2138. Yggdrasil, le célèbre MMORPG à succès est sur le point de fermer. Momonga, le fondateur de la guilde dont la renommée n’est plus à faire attend seul l’arrêt du jeu. Cependant, l’heure de la fermeture passée, Momonga ne se déconnecte pas et les personnages non jouables se retrouvent peu à peu dotés d’une conscience… Un nouveau monde est sur le point de faire son apparition.","image":"https://image.animationdigitalnetwork.fr/license/overlord/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/overlord/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/overlord/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/overlord/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/370-overlord","urlPath":"/video/370-overlord","episodeCount":13,"genres":["Dark-Fantasy","Médieval-Fantastique","Isekai","Guerre","Jeu","Monde virtuel","Politique","Animation japonaise","Action","Aventure","Seinen"],"copyright":"©Kugane Maruyama,PUBLISHED BY KADOKAWA CORPORATION/OVERLORD PARTNERS","rating":4.9,"ratingsCount":3301,"commentsCount":43,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":true,"available":true,"download":false,"basedOn":"Light Novel","tagline":null,"firstReleaseYear":"2015","productionStudio":"Madhouse","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Naoyuki Itô"},{"role":"Scénariste","name":"Yukie Sugawara"},{"role":"Compositeur","name":"Shûji Katayama"},{"role":"Auteur","name":"Kugane Maruyama"},{"role":"Character designer","name":"Takahiro Yoshimatsu"}],"nextVideoReleaseDate":null,"indexable":true},{"id":505,"title":"Overlord II","type":"EPS","originalTitle":"???????? / ??????? 2nd???? / ??????? 2nd season","shortTitle":"Overlord II","reference":"overlord_tv2","age":"12+","languages":["vostf","vf"],"summary":"Depuis son arrivée dans un nouveau monde, Ainz Ooal Gown prend très au sérieux son rôle de dirigeant du grand tombeau de Nazarick. Il bâtit également une solide réputation à son alter-ego Momon en tant que plus fort aventurier d’E-Rantel, tout en recueillant des fonds et des informations. Très vite, il se lance dans les quêtes les plus périlleuses dont seuls les aventuriers de classe Adamantite peuvent survivre. Après la défaite d’un Basilic, Ainz décide de retourner à Nazarick et demande à Albedo un rapport complet de la situation…","image":"https://image.animationdigitalnetwork.fr/license/overlord/tv2/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/overlord/tv2/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/overlord/tv2/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/overlord/tv2/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/505-overlord-saison-2","urlPath":"/video/505-overlord-saison-2","episodeCount":13,"genres":["Dark-Fantasy","Médieval-Fantastique","Isekai","Guerre","Jeu","Monde virtuel","Politique","Animation japonaise","Action","Aventure","Seinen"],"copyright":"© Kugane Maruyama,PUBLISHED BY KADOKAWA CORPORATION/OVERLORD2 PARTNERS","rating":4.9,"ratingsCount":3272,"commentsCount":44,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":true,"available":true,"download":false,"basedOn":"Light Novel","tagline":"Retrouvez la suite des aventures de Ainz Ooal Gown dans cette deuxième saison !","firstReleaseYear":"2018","productionStudio":"Madhouse","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Naoyuki Itô"},{"role":"Scénariste","name":"Yukie Sugawara"},{"role":"Compositeur","name":"OxT"},{"role":"Auteur","name":"Kugane Maruyama"},{"role":"Character designer","name":"Takahiro Yoshimatsu"}],"nextVideoReleaseDate":null,"indexable":true},{"id":442,"title":"Sword Art Online","type":"EPS","originalTitle":"ソードアート・オンライン","shortTitle":"Sword Art Online","reference":"swordartonline_tv","age":"10+","languages":["vostf","vf"],"summary":"Sword&nbsp;Art Online, un MMORPG dont la bêta déchaîne les passions, offre l’opportunité à dix mille privilégiés de s’immerger dans son univers grâce à un casque de réalité virtuelle. Kirito, 14&nbsp;ans, se démarque de ses pairs en déjouant les rouages du jeu. Mais lorsqu’une mystérieuse entité annonce aux joueurs qu’ils ne pourront pas se déconnecter avant d’atteindre le niveau&nbsp;100, la panique s’immisce progressivement. Une seule échappatoire possible&nbsp;: survivre ou mourir.","image":"https://image.animationdigitalnetwork.fr/license/swordartonline/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/swordartonline/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/swordartonline/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/swordartonline/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/442-sword-art-online","urlPath":"/video/442-sword-art-online","episodeCount":49,"genres":["Animation japonaise","Action","Drame","Fantastique","Romance","Isekai"],"copyright":"©REKI KAWAHARA/ASCII MEDIA WORKS/SAO Project.","rating":5,"ratingsCount":331,"commentsCount":19,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":null,"firstReleaseYear":"2012","productionStudio":"A-1 Pictures","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Tomohiko Ito"},{"role":"Scénariste","name":"Yukie Sugawara"},{"role":"Auteur","name":"Reki Kawahara"},{"role":"Character designer original","name":"abec"},{"role":"Compositeur","name":"Yuki Kajiura"},{"role":"Directeur artistique","name":"Yusuke Takeda"}],"nextVideoReleaseDate":null,"indexable":true},{"id":670,"title":"To Love-Ru","type":"EPS","originalTitle":"To Love-Ru","shortTitle":null,"reference":"toloveru_tv","age":"12+","languages":["vostf"],"summary":"Rito Yûki, un banal lycéen de quinze ans, est amoureux depuis longtemps de Haruna Sairenji, une jeune fille de sa classe. Malheureusement, Rito n'a jamais eu le courage de lui parler.","image":"https://image.animationdigitalnetwork.fr/license/toloveru/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/toloveru/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/toloveru/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/toloveru/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/670-to-love-ru","urlPath":"/video/670-to-love-ru","episodeCount":26,"genres":["Animation japonaise","Comédie","Fantastique"],"copyright":"©Kentaro Yabuki, Saki Hasemi/ SHUEISHA, Toloveru Project","rating":4.7,"ratingsCount":404,"commentsCount":22,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":true,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2008","productionStudio":"Xebec","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Takao Kato"},{"role":"Auteur","name":"Saki Hasemi"},{"role":"Character designer","name":"Yûichi Oka"},{"role":"Scénariste","name":"Akatsuki Yamatoya"},{"role":"Compositeur","name":"Takeshi Watanabe"}],"nextVideoReleaseDate":null,"indexable":true},{"id":217,"title":"To Love-Ru - Darkness","type":"EPS","originalTitle":"To Love-Ru: Trouble - Darkness","shortTitle":null,"reference":"toloveru_tv3","age":"16+","languages":["vostf"],"summary":"Le fiasco de la déclaration d’amour de Rito n’en est peut-être pas un finalement… Car lorsque Lala explique à Momo qu’elle veut que Rito l’épouse tout en épousant Haruna, sa petite soeur à une révélation. Elle doit aider Rito à devenir un homme et à se constituer un harem digne du souverain de Deviluke ! Mais elle ignore qu’une ombre plane au-dessus de Rito et ses amies, car l’ancienne “famille” d’Ombre Dorée se rappelle à son bon souvenir et n’apprécie pas particulièrement la nouvelle vie de l’ancienne tueuse à gages...","image":"https://image.animationdigitalnetwork.fr/license/toloveru/tv3/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/toloveru/tv3/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/toloveru/tv3/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/toloveru/tv3/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/217-to-love-darkness","urlPath":"/video/217-to-love-darkness","episodeCount":26,"genres":["Animation japonaise","Comédie","Ecchi","Romance"],"copyright":"©Kentaro Yabuki,Saki Hasemi／SHUEISHA,Toloveru darkness Project","rating":4.9,"ratingsCount":238,"commentsCount":17,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":"To Love Darkness","firstReleaseYear":"2012","productionStudio":"Xebec","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Atsushi Ootsuki"},{"role":"Mangaka","name":"Saki Hasemi, Kentaro Yabuki"},{"role":"Character designer original","name":"Kentaro Yabuki"},{"role":"Character designer","name":"Yûichi Oka"},{"role":"Scénariste","name":"Atsushi Ootsuki"},{"role":"Compositeur","name":"Takeshi Watanabe"}],"nextVideoReleaseDate":null,"indexable":true},{"id":973,"title":"The Eminence in Shadow","type":"EPS","originalTitle":"Kage no Jitsuryokusha ni Naritakute","shortTitle":"The Eminence in Shadow","reference":"eminenceshadow_tv","age":"16+","languages":["vostf","vf"],"summary":"Sous son apparence de lycéen sans histoire, Cid Kagenou aspire pour autant à devenir celui qui tirera les ficelles au sein des plus grandes organisations secrètes. Malheureusement, un tragique accident de la route l’empêche de réaliser son dessein. Pourtant, à son réveil, il découvre qu’il s’est réincarné dans la peau d’un homme dirigeant une véritable société secrète, Shadow Garden, qui lutte contre le culte de Diabolos. Bien décidé à prendre son rôle au sérieux, il est fin prêt à recruter des membres afin mettre à profit son ingéniosité à l'encontre des forces du mal.","image":"https://image.animationdigitalnetwork.fr/license/eminenceshadow/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/eminenceshadow/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/eminenceshadow/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/eminenceshadow/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/973-the-eminence-in-shadow","urlPath":"/video/973-the-eminence-in-shadow","episodeCount":32,"genres":["Isekai","Animation japonaise","Action","Aventure","Ecchi","Fantastique","Shônen"],"copyright":"©Daisuke Aizawa,KADOKAWA/Shadow Garden","rating":4.9,"ratingsCount":5404,"commentsCount":120,"qualities":["fhd","hd","sd"],"distributions":"fr,de","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":null,"firstReleaseYear":"2022","productionStudio":"Nexus","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Kazuya Nakanishi"},{"role":"Mangaka","name":"Daisuke Aizawa"},{"role":"Character designer original","name":"Tozai"},{"role":"Character designer","name":"Makoto Iino"},{"role":"Compositeur","name":"Kenichiro Suehiro"},{"role":"Directeur artistique","name":"Lee Beom Seon"}],"nextVideoReleaseDate":null,"indexable":true},{"id":1122,"title":"My Instant Death Ability Is So Overpowered, No One in This Other World Stands a Chance Against Me!","type":"EPS","originalTitle":"即死チートが最強すぎて、異世界のやつらがまるで相手にならないんですが。","shortTitle":"My Instant Death Ability Is So Overpowered, No One in This Other World Stands a Chance Against Me!","reference":"myinstantdeathability_tv","age":"12+","languages":["vostf"],"summary":"Lors d’un voyage scolaire, des lycéens sont soudainement propulsés dans un monde parallèle, où chacun se voit offrir par un « sage » énigmatique un pouvoir surpuissant. Tous, hormis Tomochika et Takatô qui, ayant été jugés incapables, ont lâchement été abandonnés et laissés comme appât pour distraire le dragon les ayant attaqués. À la merci de tous les dangers, le jeune homme se révèle alors doté d’une capacité dépassant toutes les limites de cet univers. Si bien que ce dernier éveille la curiosité du gouvernement, déterminé à s’en emparer par tous les moyens…","image":"https://image.animationdigitalnetwork.fr/license/myinstantdeathability/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/myinstantdeathability/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/myinstantdeathability/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/myinstantdeathability/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/1122-my-instant-death-ability-is-so-overpowered-no-one-in-this-other-world-stands-a-chance-against-me","urlPath":"/video/1122-my-instant-death-ability-is-so-overpowered-no-one-in-this-other-world-stands-a-chance-against-me","episodeCount":12,"genres":["Isekai","Animation japonaise","Action","Aventure","Comédie","Fantastique"],"copyright":"©Tsuyoshi Fujitaka/ESE/ My Instant Death Ability is So Overpowered","rating":4.4,"ratingsCount":852,"commentsCount":9,"qualities":["fhd","hd","sd"],"distributions":"fr,de","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":"Un pouvoir transcendant toutes les limites de ce monde ? Un isekai à découvrir dès maintenant !","firstReleaseYear":"2024","productionStudio":"Okuruto Noboru","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Masakazu Hishida"},{"role":"Scénariste","name":"Masakazu Hishida"},{"role":"Auteur","name":"Tsuyoshi Fujitaka"},{"role":"Character designer original","name":"Chisato Naruse"},{"role":"Directeur artistique","name":"Scott Macdonald"},{"role":"Directeur de la photographie","name":"Yujirô Yamane"}],"nextVideoReleaseDate":null,"indexable":true}]},"dataUpdateCount":1,"dataUpdatedAt":1721906283195,"error":null,"errorUpdateCount":0,"errorUpdatedAt":0,"fetchFailureCount":0,"fetchFailureReason":null,"fetchMeta":null,"isInvalidated":false,"status":"success","fetchStatus":"idle"},"queryKey":["getRelatedShow",{"showId":315}],"queryHash":"[\"getRelatedShow\",{\"showId\":315}]"},{"state":{"data":{"pairs":[{"title":"Fictions fantastiques avec des gags","shows":[{"id":398,"title":"Undefeated Bahamut Chronicles","type":"EPS","originalTitle":"Undefeated Bahamut Chronicles","shortTitle":null,"reference":"saibahamut_tv","age":"12+","languages":["vostf"],"summary":"Suite au coup d’État qu’a connu l’empire d’Arcadia, Lux, un ancien prince, a été condamné par le nouveau royaume à accomplir les bases besognes du peuple d’Atismata en échange de sa grâce. \n\nUn jour, par un mauvais concours de circonstances, il passe à travers un toit et se retrouve dans la salle de bain d’une école pour filles plutôt spéciale...\n","image":"https://image.animationdigitalnetwork.fr/license/saibahamut/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/saibahamut/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/saibahamut/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/saibahamut/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/398-undefeated-bahamut-chronicles","urlPath":"/video/398-undefeated-bahamut-chronicles","episodeCount":12,"genres":["Sexy","Action","Comédie","Fantastique","Romance","Shônen"],"copyright":"©Senri Akatsuki-SB Creative Corp./Undefeated Bahamut Partners","rating":4.6,"ratingsCount":508,"commentsCount":10,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":null,"firstReleaseYear":"2015","productionStudio":"Lerche","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Masaomi Ando"},{"role":"Scénariste","name":"Yuuko Kakihara"},{"role":"Compositeur","name":"Akito Matsuda"},{"role":"Character designer","name":"Keiko Kurosawa"}],"nextVideoReleaseDate":null,"indexable":true},{"id":964,"title":"Immoral Guild","type":"EPS","originalTitle":"Futoku no Guild","shortTitle":"Immoral Guild","reference":"immoralguild_tv","age":"18+","languages":["vostf"],"summary":"Bien que Kikuru Madan soit le meilleur chasseur de monstres de la guilde, ce dernier, las de cette vie intrépide et sans repos, souhaite profiter comme il se doit de sa jeunesse. Mais poser sa démission n'est pas chose aisée : s'il souhaite partir, il devra accomplir avant une dernière mission : former Hitamu Kyan afin qu'elle lui succède. Mais une ribambelle de jeunes femmes, plus charmantes les unes que les autres, se présentent à lui, fin prêtes à s'améliorer. Malheureusement Kikuru va devoir faire preuve d'une patience infinie s'il souhaite parfaire leur apprentissage…","image":"https://image.animationdigitalnetwork.fr/license/immoralguild/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/immoralguild/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/immoralguild/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/immoralguild/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/964-immoral-guild","urlPath":"/video/964-immoral-guild","episodeCount":12,"genres":["Fantasy","Harem","Monstres","Animation japonaise","Action","Aventure","Comédie","Ecchi","Fantastique"],"copyright":"©Taichi Kawazoe/ SQUARE ENIX, Immoral Guild PARTNERS","rating":3.9,"ratingsCount":119,"commentsCount":10,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2022","productionStudio":"TNK","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Takuya Asaoka"},{"role":"Mangaka","name":"Taichi Kawazoe"},{"role":"Directeur artistique","name":"Satoru Hirayanagi"},{"role":"Directeur de la photographie","name":"Takuya Ogata"},{"role":"Character designer","name":"Hiraku Kaneko"}],"nextVideoReleaseDate":null,"indexable":true},{"id":670,"title":"To Love-Ru","type":"EPS","originalTitle":"To Love-Ru","shortTitle":null,"reference":"toloveru_tv","age":"12+","languages":["vostf"],"summary":"Rito Yûki, un banal lycéen de quinze ans, est amoureux depuis longtemps de Haruna Sairenji, une jeune fille de sa classe. Malheureusement, Rito n'a jamais eu le courage de lui parler.","image":"https://image.animationdigitalnetwork.fr/license/toloveru/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/toloveru/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/toloveru/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/toloveru/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/670-to-love-ru","urlPath":"/video/670-to-love-ru","episodeCount":26,"genres":["Animation japonaise","Comédie","Fantastique"],"copyright":"©Kentaro Yabuki, Saki Hasemi/ SHUEISHA, Toloveru Project","rating":4.7,"ratingsCount":404,"commentsCount":22,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":true,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2008","productionStudio":"Xebec","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Takao Kato"},{"role":"Auteur","name":"Saki Hasemi"},{"role":"Character designer","name":"Yûichi Oka"},{"role":"Scénariste","name":"Akatsuki Yamatoya"},{"role":"Compositeur","name":"Takeshi Watanabe"}],"nextVideoReleaseDate":null,"indexable":true},{"id":684,"title":"Motto To Love-Ru","type":"EPS","originalTitle":"Motto To Love-Ru -Trouble-","shortTitle":"Motto To Love-Ru - Saison 2","reference":"toloveru_tv2","age":"12+","languages":["vostf"],"summary":"La deuxième saison des aventures romantiques de Rito, Lala, Haruna, Mikan, Ombre et des autres !","image":"https://image.animationdigitalnetwork.fr/license/toloveru/tv2/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/toloveru/tv2/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/toloveru/tv2/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/toloveru/tv2/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/684-motto-to-love-ru-saison-2","urlPath":"/video/684-motto-to-love-ru-saison-2","episodeCount":12,"genres":["Animation japonaise","Comédie","Ecchi","Fan service","Fantastique","Romance"],"copyright":"©KENTARO YABUKI, SAKI HASEMI/SHUEISHA, MOTTOTORABURU COMMITTEE","rating":4.9,"ratingsCount":113,"commentsCount":9,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2010","productionStudio":"XEBEC","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Atsushi Ootsuki"},{"role":"Scénariste","name":"Yasunori Yamada"},{"role":"Character designer","name":"Yûichi Oka"},{"role":"Mangaka","name":"Kentaro Yabuki, Saki Hasemi"},{"role":"Compositeur","name":"Takeshi Watanabe"},{"role":"Directeur de la photographie","name":"Yuki Kudo"}],"nextVideoReleaseDate":null,"indexable":true},{"id":699,"title":"High School DxD","type":"EPS","originalTitle":"High School DxD","shortTitle":"High School DxD","reference":"dxd_tv","age":"16+","languages":["vostf"],"summary":"Issei Hyôdô est un lycéen inscrit à l’académie Kuô, un établissement qui n’accueillait que des filles jusqu’à récemment. Bien que la gent féminine constitue l’écrasante majorité de ce lieu d’études, Issei se désespère de n’avoir toujours pas de petite amie. C’est alors qu’il fait la connaissance de Yûma, qui va lui demander de sortir avec lui...","image":"https://image.animationdigitalnetwork.fr/license/dxd/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/dxd/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/dxd/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/dxd/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/699-high-school-dxd","urlPath":"/video/699-high-school-dxd","episodeCount":12,"genres":["Animation japonaise","Action","Comédie","Ecchi","Fan service","Fantastique","Romance","Science-Fiction"],"copyright":"©2012 Ichiei Ishibumi-Miyama-ZERO/PUBLISHED BY KADOKAWA CORPORATION FUJIMISHOBO/HighschoolDD PARTNERS","rating":4.9,"ratingsCount":653,"commentsCount":52,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":true,"available":true,"download":false,"basedOn":"Light Novel","tagline":null,"firstReleaseYear":"2012","productionStudio":"TNK","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Tetsuya Yanagisawa"},{"role":"Auteur","name":"Ichiei Ishibumi"},{"role":"Scénariste","name":"Takao Yoshioka"},{"role":"Character designer original","name":"Miyama-Zero"},{"role":"Character designer","name":"Junji Gotô"},{"role":"Compositeur","name":"Ryosuke Nakanishi"}],"nextVideoReleaseDate":null,"indexable":true},{"id":977,"title":"Immoral Guild (version non censurée)","type":"EPS","originalTitle":"Futoku no Guild","shortTitle":"Immoral Guild","reference":"immoralguildnc_tv","age":"18+","languages":["vostf"],"summary":"Bien que Kikuru Madan soit le meilleur chasseur de monstres de la guilde, ce dernier, las de cette vie intrépide et sans repos, souhaite profiter comme il se doit de sa jeunesse. Mais poser sa démission n'est pas chose aisée : s'il souhaite partir, il devra accomplir avant une dernière mission : former Hitamu Kyan afin qu'elle lui succède. Mais une ribambelle de jeunes femmes, plus charmantes les unes que les autres, se présentent à lui, fin prêtes à s'améliorer. Malheureusement Kikuru va devoir faire preuve d'une patience infinie s'il souhaite parfaire leur apprentissage…","image":"https://image.animationdigitalnetwork.fr/license/immoralguildnc/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/immoralguildnc/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/immoralguildnc/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/immoralguildnc/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/977-immoral-guild-version-non-censuree","urlPath":"/video/977-immoral-guild-version-non-censuree","episodeCount":12,"genres":["Fantasy","Harem","Monstres","Animation japonaise","Action","Aventure","Comédie","Ecchi","Fantastique"],"copyright":"©Taichi Kawazoe/ SQUARE ENIX, Immoral Guild PARTNERS","rating":4.4,"ratingsCount":512,"commentsCount":17,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2022","productionStudio":"TNK","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Takuya Asaoka"},{"role":"Mangaka","name":"Taichi Kawazoe"},{"role":"Directeur artistique","name":"Satoru Hirayanagi"},{"role":"Directeur de la photographie","name":"Takuya Ogata"},{"role":"Character designer","name":"Hiraku Kaneko"}],"nextVideoReleaseDate":null,"indexable":true},{"id":382,"title":"Lance N' Masques","type":"EPS","originalTitle":"Lance N' Masques","shortTitle":"LNM","reference":"lnm_tv","age":"10+","languages":["vostf"],"summary":"Yôtarô Hanafusa est un jeune homme du XXIe siècle, descendant d'un ancien ordre de chevaliers, Les Chevaliers du Monde. Lorsqu'il se bat sous l’identité du mystérieux Knight Lancer, il cache aussi son visage sous un masque. Il rencontre un jour, une  petite fille, Makio Kidôin, et découvrant qu'elle vit seule, il décide de la protéger.","image":"https://image.animationdigitalnetwork.fr/license/lnm/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/lnm/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/lnm/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/lnm/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/382-lance-n-masques","urlPath":"/video/382-lance-n-masques","episodeCount":12,"genres":["Animation japonaise","Action","Ecchi","Shônen","Fantastique","Tranches de vie"],"copyright":"©Hideaki Koyasu/Pony Canyon, ProjectLNM","rating":4.4,"ratingsCount":281,"commentsCount":4,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":null,"firstReleaseYear":"2015","productionStudio":"Studio Gokumi","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Kyouhei Ishiguro"},{"role":"Auteur","name":"Hideaki Koyasu"},{"role":"Scénariste","name":"Hideaki Koyasu"},{"role":"Character designer original","name":"Shino"},{"role":"Character designer","name":"Kenji Ota"},{"role":"Directeur artistique","name":"Hiromichi Itô"}],"nextVideoReleaseDate":null,"indexable":true},{"id":463,"title":"Clockwork Planet","type":"EPS","originalTitle":"ClockWork Planet","shortTitle":"ClockWork Planet","reference":"clockwork_tv","age":"12+","languages":["vostf","vf"],"summary":"Il y a environ mille ans, la Terre était condamnée à embrasser sa fin. Une mystérieuse personne reproduisit et recréa tout ce qui existait sur Terre avec d’innombrables mécanismes avant ce jour final, ce qui permit finalement aux êtres humains de survivre. Un jour, une boîte tomba soudainement dans l’appartement de Naoto Miura, un garçon qui possède un certain talent concernant les méchanismes. Dans la boîte, il y avait un automate féminin nommé RyuZU. La rencontre entre Naoto et RyuZU amorce le mouvement des roues de la destinée…","image":"https://image.animationdigitalnetwork.fr/license/clockwork/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/clockwork/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/clockwork/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/clockwork/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/463-clockwork-planet","urlPath":"/video/463-clockwork-planet","episodeCount":12,"genres":["Animation japonaise","Action","Science-Fiction","Shônen"],"copyright":"©Yuu Kamiya,Tsubaki Himana,KODANSHA/CLOCKWORK PLANET Production Committee. All Rights Reserved.  \n©YTK/CP","rating":4.7,"ratingsCount":806,"commentsCount":6,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":null,"firstReleaseYear":"2017","productionStudio":"Xebec","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Tsuyoshi Nagasawa"},{"role":"Scénariste","name":"Kenji Sugihara"},{"role":"Compositeur","name":"Shû anematsu"},{"role":"Compositeur","name":"Hanae Nakamura"},{"role":"Character designer","name":"Shuichi Shimamura"},{"role":"Auteur","name":"Yû Kamiya"}],"nextVideoReleaseDate":null,"indexable":true},{"id":434,"title":"Flip Flappers","type":"EPS","originalTitle":"FLIP FLAPPERS","shortTitle":null,"reference":"flipflap_tv","age":"12+","languages":["vostf"],"summary":"“Pure Illusion” est une dimension qui contient un mystérieux Crystal appelé « Eclat de Mimi ». Ce Crystal permettrait de réaliser n’importe quel vœu… Papika et Cocona sont deux adolescentes dont la vie a changé, le jour où elles se sont rencontrées et retrouvées dans la dimension « Pure Illusion ». Et dès qu’elles sont en danger, le crystal scintille et elles se métamorphosent en « Magical Girls » ","image":"https://image.animationdigitalnetwork.fr/license/flipflap/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/flipflap/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/flipflap/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/flipflap/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/434-flip-flappers","urlPath":"/video/434-flip-flappers","episodeCount":13,"genres":["Animation japonaise","Aventure","Comédie","Drame","Fantastique","Science-Fiction","Scolaire"],"copyright":"©FliFla Project\n","rating":4.8,"ratingsCount":246,"commentsCount":1,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Oeuvre Originale","tagline":null,"firstReleaseYear":"2016","productionStudio":"Studio 3Hz","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Kiyotaka Oshiyama"},{"role":"Scénariste","name":"Yuniko Ayana"},{"role":"Compositeur","name":"TO-MAS"},{"role":"Auteur","name":"Iryûjonisuto Pyua"},{"role":"Character designer","name":"Takashi Kojima"}],"nextVideoReleaseDate":null,"indexable":true},{"id":709,"title":"Full Dive : L'Ultime RPG est encore plus foireux que la réalité !","type":"EPS","originalTitle":"Kyuukyoku Shinka Shita Full Dive RPG ga Genjitsu Yori mo Kuso Game Dattara","shortTitle":"Full Dive","reference":"fulldiverpg_tv","age":"12+","languages":["vostf"],"summary":"Hiroshi a passé une journée pourrie, et il est bien décidé à acheter le nouvel opus de sa série favorite de MMORPG en réalité virtuelle. Malheureusement, tout ne se passe pas comme prévu, et il se retrouve avec un jeu rétro... mais pourtant bien avancé !","image":"https://image.animationdigitalnetwork.fr/license/fulldiverpg/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/fulldiverpg/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/fulldiverpg/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/fulldiverpg/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/709-full-dive-l-ultime-rpg","urlPath":"/video/709-full-dive-l-ultime-rpg","episodeCount":12,"genres":["Animation japonaise","Action","Comédie","Ecchi","Romance"],"copyright":"©Light Tuchiki, PUBLISHED BY KADOKAWA CORPORATION/Ultimate Evolution PARTNERS","rating":4.5,"ratingsCount":1148,"commentsCount":65,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":true,"available":true,"download":false,"basedOn":"Light Novel","tagline":null,"firstReleaseYear":"2021","productionStudio":"Engi","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Kazuya Miura"},{"role":"Auteur","name":"Light Tuchihi"},{"role":"Character designer original","name":"Youta"},{"role":"Scénariste","name":"Kenta Ihara"},{"role":"Character designer","name":"Kevin Yuta Kenmotsu "}],"nextVideoReleaseDate":null,"indexable":true}]},{"title":"Avec des créatures imaginaires et des ados","shows":[{"id":652,"title":"Amagi Brilliant Park","type":"EPS","originalTitle":"Amagi Brilliant Park","shortTitle":"Amagi Brilliant Park","reference":"amagi_tv","age":"12+","languages":["vostf"],"summary":"Seiya Kanie est élève en première au lycée d'Amagi. Une nouvelle élève, Isuzu Sento, l'emmène dans un parc d'attractions vétuste et lui révèle ses intentions : elle souhaite qu'il en devienne le nouveau directeur avec un objectif, le sauver de la faillite avant le 31 juillet. C'est une tâche dantesque qui attend Seiya, car les attractions tombent en ruine et les employés du parc forment un véritable club de bras cassés, entre la mascotte qui boxe les visiteurs, celle qui harcèle tout ce qui ressemble à une femme ou la chanteuse qui chante faux.","image":"https://image.animationdigitalnetwork.fr/license/amagi/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/amagi/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/amagi/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/amagi/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/652-amagi-brilliant-park","urlPath":"/video/652-amagi-brilliant-park","episodeCount":14,"genres":["Animation japonaise","Comédie","Ecchi","Fan service","Fantastique"],"copyright":"©Shouji Gatou • Yuka Nakajima/Amaburi Restoration Committee","rating":4.6,"ratingsCount":334,"commentsCount":10,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":null,"firstReleaseYear":"2014","productionStudio":"Kyoto Animation","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Yasuhiro Takemoto"},{"role":"Auteur","name":"Shoji Gatoh"},{"role":"Scénariste","name":"Fumihiko Shimo"},{"role":"Character designer original","name":"Yuka Nakajima"},{"role":"Character designer","name":"Miku Kadowaki"},{"role":"Compositeur","name":"Shinkichi Mitsumune"}],"nextVideoReleaseDate":null,"indexable":true},{"id":568,"title":"No Game No Life 0","type":"MOV","originalTitle":"No Game No Life 0","shortTitle":"No Game No Life 0","reference":"ngnl_film","age":"12+","languages":["vostf","vf"],"summary":"Bienvenue dans l’ancien Disboard où les dix règles du jeu n’existaient pas encore. La guerre consume le monde, scinde les paradis, détruit les étoiles et menace même la race humaine. Au milieu de ce chaos, un jeune homme du nom de Riku essaye de mener l’humanité vers un lendemain auquel il croit fermement. Un jour, dans les ruines d’une cité Elfique, il trouve Schwi, une androïde « ex-machina » qui souhaite comprendre le cœur des Hommes. Leur rencontre va changer le cours de l’histoire…","image":"https://image.animationdigitalnetwork.fr/license/ngnl/film/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/ngnl/film/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/ngnl/film/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/ngnl/film/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/568-no-game-no-life-zero","urlPath":"/video/568-no-game-no-life-zero","episodeCount":1,"genres":["Animation japonaise","Action","Aventure","Drame","Fantastique","Science-Fiction","Seinen"],"copyright":"©Yuu Kamiya,PUBLISHED BY KADOKAWA CORPORATION /NO GAME NO LIFE ZERO PARTNERS","rating":4.9,"ratingsCount":872,"commentsCount":52,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":"Découvrez les origines de No Game No Life, près de 6 000 ans avant l’arrivée de Sora et Shiro !","firstReleaseYear":"2017","productionStudio":"Madhouse","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Atsuko Ishizuka"},{"role":"Scénariste","name":"Jukki Hanada"},{"role":"Compositeur","name":"Super Sweep"},{"role":"Auteur","name":"Yû Kamiya"},{"role":"Character designer","name":"Satoshi Tasaki"}],"nextVideoReleaseDate":null,"indexable":true},{"id":217,"title":"To Love-Ru - Darkness","type":"EPS","originalTitle":"To Love-Ru: Trouble - Darkness","shortTitle":null,"reference":"toloveru_tv3","age":"16+","languages":["vostf"],"summary":"Le fiasco de la déclaration d’amour de Rito n’en est peut-être pas un finalement… Car lorsque Lala explique à Momo qu’elle veut que Rito l’épouse tout en épousant Haruna, sa petite soeur à une révélation. Elle doit aider Rito à devenir un homme et à se constituer un harem digne du souverain de Deviluke ! Mais elle ignore qu’une ombre plane au-dessus de Rito et ses amies, car l’ancienne “famille” d’Ombre Dorée se rappelle à son bon souvenir et n’apprécie pas particulièrement la nouvelle vie de l’ancienne tueuse à gages...","image":"https://image.animationdigitalnetwork.fr/license/toloveru/tv3/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/toloveru/tv3/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/toloveru/tv3/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/toloveru/tv3/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/217-to-love-darkness","urlPath":"/video/217-to-love-darkness","episodeCount":26,"genres":["Animation japonaise","Comédie","Ecchi","Romance"],"copyright":"©Kentaro Yabuki,Saki Hasemi／SHUEISHA,Toloveru darkness Project","rating":4.9,"ratingsCount":238,"commentsCount":17,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":"To Love Darkness","firstReleaseYear":"2012","productionStudio":"Xebec","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Atsushi Ootsuki"},{"role":"Mangaka","name":"Saki Hasemi, Kentaro Yabuki"},{"role":"Character designer original","name":"Kentaro Yabuki"},{"role":"Character designer","name":"Yûichi Oka"},{"role":"Scénariste","name":"Atsushi Ootsuki"},{"role":"Compositeur","name":"Takeshi Watanabe"}],"nextVideoReleaseDate":null,"indexable":true},{"id":973,"title":"The Eminence in Shadow","type":"EPS","originalTitle":"Kage no Jitsuryokusha ni Naritakute","shortTitle":"The Eminence in Shadow","reference":"eminenceshadow_tv","age":"16+","languages":["vostf","vf"],"summary":"Sous son apparence de lycéen sans histoire, Cid Kagenou aspire pour autant à devenir celui qui tirera les ficelles au sein des plus grandes organisations secrètes. Malheureusement, un tragique accident de la route l’empêche de réaliser son dessein. Pourtant, à son réveil, il découvre qu’il s’est réincarné dans la peau d’un homme dirigeant une véritable société secrète, Shadow Garden, qui lutte contre le culte de Diabolos. Bien décidé à prendre son rôle au sérieux, il est fin prêt à recruter des membres afin mettre à profit son ingéniosité à l'encontre des forces du mal.","image":"https://image.animationdigitalnetwork.fr/license/eminenceshadow/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/eminenceshadow/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/eminenceshadow/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/eminenceshadow/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/973-the-eminence-in-shadow","urlPath":"/video/973-the-eminence-in-shadow","episodeCount":32,"genres":["Isekai","Animation japonaise","Action","Aventure","Ecchi","Fantastique","Shônen"],"copyright":"©Daisuke Aizawa,KADOKAWA/Shadow Garden","rating":4.9,"ratingsCount":5404,"commentsCount":120,"qualities":["fhd","hd","sd"],"distributions":"fr,de","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":null,"firstReleaseYear":"2022","productionStudio":"Nexus","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Kazuya Nakanishi"},{"role":"Mangaka","name":"Daisuke Aizawa"},{"role":"Character designer original","name":"Tozai"},{"role":"Character designer","name":"Makoto Iino"},{"role":"Compositeur","name":"Kenichiro Suehiro"},{"role":"Directeur artistique","name":"Lee Beom Seon"}],"nextVideoReleaseDate":null,"indexable":true},{"id":1122,"title":"My Instant Death Ability Is So Overpowered, No One in This Other World Stands a Chance Against Me!","type":"EPS","originalTitle":"即死チートが最強すぎて、異世界のやつらがまるで相手にならないんですが。","shortTitle":"My Instant Death Ability Is So Overpowered, No One in This Other World Stands a Chance Against Me!","reference":"myinstantdeathability_tv","age":"12+","languages":["vostf"],"summary":"Lors d’un voyage scolaire, des lycéens sont soudainement propulsés dans un monde parallèle, où chacun se voit offrir par un « sage » énigmatique un pouvoir surpuissant. Tous, hormis Tomochika et Takatô qui, ayant été jugés incapables, ont lâchement été abandonnés et laissés comme appât pour distraire le dragon les ayant attaqués. À la merci de tous les dangers, le jeune homme se révèle alors doté d’une capacité dépassant toutes les limites de cet univers. Si bien que ce dernier éveille la curiosité du gouvernement, déterminé à s’en emparer par tous les moyens…","image":"https://image.animationdigitalnetwork.fr/license/myinstantdeathability/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/myinstantdeathability/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/myinstantdeathability/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/myinstantdeathability/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/1122-my-instant-death-ability-is-so-overpowered-no-one-in-this-other-world-stands-a-chance-against-me","urlPath":"/video/1122-my-instant-death-ability-is-so-overpowered-no-one-in-this-other-world-stands-a-chance-against-me","episodeCount":12,"genres":["Isekai","Animation japonaise","Action","Aventure","Comédie","Fantastique"],"copyright":"©Tsuyoshi Fujitaka/ESE/ My Instant Death Ability is So Overpowered","rating":4.4,"ratingsCount":852,"commentsCount":9,"qualities":["fhd","hd","sd"],"distributions":"fr,de","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":"Un pouvoir transcendant toutes les limites de ce monde ? Un isekai à découvrir dès maintenant !","firstReleaseYear":"2024","productionStudio":"Okuruto Noboru","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Masakazu Hishida"},{"role":"Scénariste","name":"Masakazu Hishida"},{"role":"Auteur","name":"Tsuyoshi Fujitaka"},{"role":"Character designer original","name":"Chisato Naruse"},{"role":"Directeur artistique","name":"Scott Macdonald"},{"role":"Directeur de la photographie","name":"Yujirô Yamane"}],"nextVideoReleaseDate":null,"indexable":true},{"id":790,"title":"Polyphonica - Crimson S","type":"EPS","originalTitle":"Shinkyoku Soukai Polyphonica Crimson S","shortTitle":"Polyphonica Crimson S","reference":"polyphonica_tv2","age":"12+","languages":["vostf"],"summary":"Alors qu’une jeune Corticarte est poursuivie par des esprits maléfiques, elle croise la route de Phoron, qui n’est encore qu’un enfant...","image":"https://image.animationdigitalnetwork.fr/license/polyphonica/tv2/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/polyphonica/tv2/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/polyphonica/tv2/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/polyphonica/tv2/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/790-polyphonica-crimson-s-saison-2","urlPath":"/video/790-polyphonica-crimson-s-saison-2","episodeCount":12,"genres":["Surnaturel","Musique","Magie","Animation japonaise","Aventure","Comédie","Fantastique","Romance","Scolaire"],"copyright":"© 2009 Ichiro Sakaki/Torvas Divine Song Players Academy","rating":4.7,"ratingsCount":18,"commentsCount":1,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":null,"firstReleaseYear":"2009","productionStudio":"Diomedea","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Toshimasa Suzuki"},{"role":"Auteur","name":"Ichiro Sakaki"},{"role":"Scénariste","name":"Kenichi Kanemaki, Hiroyuki Kawasaki, Mayori Sekijima"},{"role":"Character designer","name":"Mitsuru Ohara"},{"role":"Compositeur","name":"Hikaru Nanase"}],"nextVideoReleaseDate":null,"indexable":true},{"id":1087,"title":"GeGeGe no Kitarô (2018)","type":"EPS","originalTitle":"Gegege no Kitarô (2018)","shortTitle":"Gegege no Kitarô (2018)","reference":"gegegenokitaro_tv6","age":"10+","languages":["vostf"],"summary":"Relégués au simple statut de mythes et légendes, les yôkai ont progressivement sombré dans l’oubli. Mais lorsque des phénomènes inexplicables commencent à se produire, semant le trouble parmi la population, Mana, 13&nbsp;ans, est résolue à dissiper le voile entourant ces mystères. Sa rencontre fortuite avec Kitarô, un jeune yôkai, l’amène à découvrir un monde jusqu’alors insoupçonné.","image":"https://image.animationdigitalnetwork.fr/license/gegegenokitaro/tv6/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/gegegenokitaro/tv6/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/gegegenokitaro/tv6/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/gegegenokitaro/tv6/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/1087-gegege-no-kitaro-version-2018","urlPath":"/video/1087-gegege-no-kitaro-version-2018","episodeCount":97,"genres":["Horreur / Épouvante","Animation japonaise","Action","Comédie","Psychologique"],"copyright":"ⒸMizuki Production, Toei Animation","rating":4.9,"ratingsCount":88,"commentsCount":2,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2018","productionStudio":"Toei Animation","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Kôji Ogawa"},{"role":"Scénariste","name":"Hiroshi Ohnogi"},{"role":"Mangaka","name":"Shigeru Mizuki"},{"role":"Compositeur","name":"Yasuharu Takanashi"},{"role":"Character designer","name":"Tsubasa Shimizu"}],"nextVideoReleaseDate":null,"indexable":true},{"id":1058,"title":"Strike the Blood Final","type":"OAV","originalTitle":"????????????FINAL","shortTitle":"Strike the Blood Final","reference":"striketb_oav5","age":"12+","languages":["vostf"],"summary":"Shahryar Ren, le président de MAR, a acquis une arme antique, menaçant, dès lors, l’équilibre du monde. Face à cette menace imminente, l’Organisation du Roi Lion, soutenue par le Bureau d’Astrologie, décide de fermer le portail situé sur l’île d’Itogami, avec l’intention de contrer ses terribles desseins. Kojô, Yukina et leurs camarades pourront-ils s’opposer à cette décision&nbsp;?","image":"https://image.animationdigitalnetwork.fr/license/striketb/oav5/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/striketb/oav5/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/striketb/oav5/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/striketb/oav5/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/1058-strike-the-blood-final","urlPath":"/video/1058-strike-the-blood-final","episodeCount":4,"genres":["Animation japonaise","Action","Comédie","Ecchi","Fan service","Fantastique","Romance"],"copyright":"©2019 Gakuto Mikumo/KADOKAWA /PROJECT STB OVA","rating":4.9,"ratingsCount":40,"commentsCount":3,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":null,"firstReleaseYear":"2022","productionStudio":"CONNECT","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Hideyo Yamamoto"},{"role":"Scénariste","name":"Hiroyuki Yoshino"},{"role":"Auteur","name":"Gakuto Mikumo"},{"role":"Character designer original","name":"Manyako"},{"role":"Compositeur","name":"Assumed Sounds"},{"role":"Character designer","name":"Keiichi Sano, Hideki Furukawa"}],"nextVideoReleaseDate":null,"indexable":true},{"id":1084,"title":"Le Collège Noir","type":"EPS","originalTitle":"Le Collège Noir - Complainte d'Auvergne","shortTitle":"Le Collège Noir","reference":"lecollegenoir_tv","age":"12+","languages":["vf"],"summary":"Dans un collège perdu au milieu des montagnes du Cantal, cinq jeunes collégiens passent les vacances de la Toussaint sous la surveillance de Léna, une pionne mal lunée. Mais lorsque l’âme de leur camarade disparu leur apparaît en pleine nuit, les ados se retrouvent confrontés à la malédiction d’une terrible sorcière et aux créatures les plus terrifiantes du folklore français…","image":"https://image.animationdigitalnetwork.fr/license/lecollegenoir/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/lecollegenoir/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/lecollegenoir/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/lecollegenoir/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/1084-le-college-noir","urlPath":"/video/1084-le-college-noir","episodeCount":6,"genres":["Animation franco-belge","Aventure","Comédie","Fantastique"],"copyright":"© 2023 Studio La Cachette - ADN - TOEI Animation Co., Ltd.","rating":4.9,"ratingsCount":409,"commentsCount":33,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":true,"available":true,"download":false,"basedOn":"Oeuvre Originale","tagline":"Plongez dans le folkore du Cantal à travers la nouvelle coproduction entre ADN, le Studio La Cachette et Toei Animation.","firstReleaseYear":"2023","productionStudio":"La Cachette","countryOfOrigin":"France","productionTeam":[{"role":"Réalisateur","name":"Ulysse Malassagne"}],"nextVideoReleaseDate":null,"indexable":true},{"id":754,"title":"How a Realist Hero Rebuilt the Kingdom","type":"EPS","originalTitle":"Genjitsu Shugi Yuusha no Oukoku Saikenki","shortTitle":"How a Realist Hero Rebuilt the Kingdom","reference":"realisthero_tv","age":"12+","languages":["vostf"],"summary":"Kazuya Sôma est un jeune homme sans histoire aspirant à une vie tranquille. Peu après avoir perdu son grand-père, la seule famille qu’il lui restait, il se retrouve propulsé dans un autre monde. Là-bas, il apprend qu’il est le héros invoqué par le royaume d’Elfrieden pour venir en aide au pays. Hélas, il va vite s’apercevoir que son destin de héros s’annonce tout sauf héroïque…","image":"https://image.animationdigitalnetwork.fr/license/realisthero/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/realisthero/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/realisthero/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/realisthero/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/754-how-a-realist-hero-rebuilt-the-kingdom","urlPath":"/video/754-how-a-realist-hero-rebuilt-the-kingdom","episodeCount":13,"genres":["Animation japonaise","Action","Comédie","Drame","Fantastique","Heroic Fantasy"],"copyright":"© Dozeumaru, OVER-LAP / Realist Hero Production Committee","rating":4.8,"ratingsCount":1361,"commentsCount":47,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":null,"firstReleaseYear":"2021","productionStudio":"J.C. Staff","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Takashi Watanabe"},{"role":"Auteur","name":"Dozeumaru"},{"role":"Character designer original","name":"Fuyuyuki"},{"role":"Character designer","name":"Mai Otsuka"},{"role":"Compositeur","name":"Akiyuki Tateyama"}],"nextVideoReleaseDate":null,"indexable":true}]},{"title":"Sur les relations fraternelles en duo","shows":[{"id":1115,"title":"Night Head Genesis","type":"EPS","originalTitle":"ナイトヘッドジェネシス","shortTitle":"Night Head Genesis","reference":"nightheadgenesis_tv","age":"16+","languages":["vostf"],"summary":"Dans une société oscillant entre progrès technologique et mysticisme latent, deux frères, Naoto et Naoya Kirihara, dotés de capacités psychiques extraordinaires, sont confiés à une organisation gouvernementale après que leurs pouvoirs ont été découverts. Des années plus tard, ils parviennent à s’échapper, mais se retrouvent confrontés à un univers qu’ils connaissent à peine, où leurs dons exceptionnels sont à la fois une bénédiction et une malédiction. C’est alors qu’il croise la route de Shôko, une femme énigmatique semblant détenir les réponses à leurs questions…","image":"https://image.animationdigitalnetwork.fr/license/nightheadgenesis/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/nightheadgenesis/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/nightheadgenesis/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/nightheadgenesis/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/1115-night-head-genesis","urlPath":"/video/1115-night-head-genesis","episodeCount":24,"genres":["Drame","Psychologique","Violence","Horreur"],"copyright":"© 2006 “Night Head : Genesis” Production Partners","rating":3.4,"ratingsCount":25,"commentsCount":0,"qualities":["fhd","hd","sd"],"distributions":"fr,de","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Oeuvre Originale","tagline":"Un thriller implacable où deux frères à l'intelligence surdéveloppée devront affronter un monde hostile à leurs capacités.","firstReleaseYear":"2006","productionStudio":"Bee Media","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Yoshio Takeuchi"},{"role":"Scénariste","name":"Joji Iida"},{"role":"Auteur","name":"Joji Iida"},{"role":"Character designer original","name":"You Higuri"},{"role":"Directeur artistique","name":"Hiroshi Kato, Toshihiro Kohama"},{"role":"Directeur de la photographie","name":"Yasuhiko Abe"}],"nextVideoReleaseDate":null,"indexable":true},{"id":1168,"title":"Sword of the Demon Hunter KIJIN GENTÔSHÔ","type":"EPS","originalTitle":"鬼人幻燈抄","shortTitle":"Sword of the Demon Hunter KIJIN GENTÔSHÔ","reference":"sworddemonhunter_tv","age":"16+","languages":["vostf"],"summary":"(Diffusion du simulcast à compter de 2025) - Aux confins des montagnes, le village de Kadono bénéficie d’une apparente tranquillité grâce à la dévotion de sa prêtresse. Pour préserver ce fragile équilibre, Jinta, un enfant autrefois vagabond qui, avec sa jeune sœur Suzune, a rejoint le village dont il est devenu le gardien, est envoyé à la lisière de la forêt pour traquer des créatures démoniaques. Au terme d’un duel acharné, celle-ci lui révèle une effroyable prophétie… Pour le chasseur de démons en quête de réponses, cette rencontre marque le début d’une errance à travers les âges, guidée par le fil de son épée.","image":"https://image.animationdigitalnetwork.fr/license/sworddemonhunter/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/sworddemonhunter/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/sworddemonhunter/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/sworddemonhunter/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/1168-sword-of-the-demon-hunter-kijin-gentosho","urlPath":"/video/1168-sword-of-the-demon-hunter-kijin-gentosho","episodeCount":0,"genres":["Animation japonaise","Action","Aventure","Fantastique","Historique","Psychologique","Violence"],"copyright":"©Motoo Nakanishi/Futabasha,KIJIN GENTOSHO Project","rating":3,"ratingsCount":1,"commentsCount":10,"qualities":["sd"],"distributions":"fr,de","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Roman","tagline":"Diffusion du simulcast à compter de 2025","firstReleaseYear":"2024","productionStudio":"Yokohama Animation Lab","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Kazuya Aiura"},{"role":"Scénariste","name":"Hitomi Mieno"},{"role":"Auteur","name":"Motoo Nakanishi"},{"role":"Compositeur","name":"Ryuichi Takada, Keiichi Hirokawa, Kuniyuki Takahashi"},{"role":"Character designer","name":"Taro Ikegami"}],"nextVideoReleaseDate":null,"indexable":true},{"id":953,"title":"Panty \u0026 Stocking with Garterbelt","type":"EPS","originalTitle":"Panty \u0026 Stocking with Garterbelt","shortTitle":"Panty \u0026 Stocking with Garterbelt","reference":"pantyandstocking_tv","age":"16+","languages":["vostf"],"summary":"Sous la tutelle du pasteur Garterbelt, Panty et Stocking, deux anges et sœurs déchus du Paradis en raison de leur comportement outrancier, ont pour mission de chasser les âmes humaines qui, n’ayant pas trouvé le repos éternel, troublent Daten City. Afin de retrouver leur statut et de retourner au Ciel, elles doivent récolter les «&nbsp;écus du Paradis&nbsp;». Grâce à leurs vêtements, véritables armes en série, elles espèrent faire régner l’ordre et la paix… mais leur intervention semble causer davantage de dégâts que de venir en aide aux habitants de la ville…","image":"https://image.animationdigitalnetwork.fr/license/pantyandstocking/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/pantyandstocking/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/pantyandstocking/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/pantyandstocking/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/953-panty-and-stocking-with-gartebelt","urlPath":"/video/953-panty-and-stocking-with-gartebelt","episodeCount":13,"genres":["Anges","Parodie","Animation japonaise","Action","Comédie","Ecchi","Violence"],"copyright":"©2010 GAINAX/GEEKS","rating":4.6,"ratingsCount":53,"commentsCount":7,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Oeuvre Originale","tagline":null,"firstReleaseYear":"2010","productionStudio":"GAINAX, SANZIGEN Animation Studio","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Hiroyuki Imaishi, Mashiko Otsuka"},{"role":"Scénariste","name":"Hiroyuki Imaishi, Shin Itagaki, Shigeto Koyama, Atsushi Nishigori, Mashiko Otsuka, Hiroshi Seko Hiromi Wakabayashi"},{"role":"Auteur","name":"GAINAX"},{"role":"Compositeur","name":"Taku [m-flo]"},{"role":"Directeur artistique","name":"Masanobu Nomura"}],"nextVideoReleaseDate":null,"indexable":true},{"id":637,"title":"Kinky \u0026 Cosy","type":"EPS","originalTitle":"Kinky \u0026 Cosy","shortTitle":"Kinky \u0026 Cosy","reference":"kinkycosy_tv","age":"12+","languages":["vf"],"summary":"Kinky et Cosy sont deux jumelles sans peur et sans gêne. Elles posent des regards ravageurs sur les inconsistances de leur parents, les vibromasseurs, les faiblesses du système scolaire... Trash, perspicaces, curieuses, méchantes, moqueuses, elles sont tellement drôles qu'on leur pardonnerait presque tout !\n\n","image":"https://image.animationdigitalnetwork.fr/license/kinkycosy/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/kinkycosy/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/kinkycosy/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/kinkycosy/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/637-kinky-et-cosy","urlPath":"/video/637-kinky-et-cosy","episodeCount":100,"genres":["International","Comédie"],"copyright":"D'après Kinky \u0026 Cosy - Nix © le Lombard\n© 2014 - Nix / Ellipsanime Productions / Belvision. Tous droits réservés","rating":4.6,"ratingsCount":231,"commentsCount":24,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":null,"tagline":"Attention, jumelles déjantées ! ","firstReleaseYear":"2014","productionStudio":"Ellipse Animation","countryOfOrigin":"France","productionTeam":[{"role":"Réalisateur","name":"Marnix Verduyn"}],"nextVideoReleaseDate":null,"indexable":true}]}]},"dataUpdateCount":1,"dataUpdatedAt":1721906283140,"error":null,"errorUpdateCount":0,"errorUpdatedAt":0,"fetchFailureCount":0,"fetchFailureReason":null,"fetchMeta":null,"isInvalidated":false,"status":"success","fetchStatus":"idle"},"queryKey":["pairsShow",{"showId":315,"minPairSize":3}],"queryHash":"[\"pairsShow\",{\"minPairSize\":3,\"showId\":315}]"},{"state":{"data":{"hreflang":{"fr":"https://animationdigitalnetwork.com/video/315-no-game-no-life/5008-episode-6","de":null}},"dataUpdateCount":1,"dataUpdatedAt":1721906283196,"error":null,"errorUpdateCount":0,"errorUpdatedAt":0,"fetchFailureCount":0,"fetchFailureReason":null,"fetchMeta":null,"isInvalidated":false,"status":"success","fetchStatus":"idle"},"queryKey":["hreflang",5008],"queryHash":"[\"hreflang\",5008]"}]},"_nextI18Next":{"initialI18nStore":{"fr":{"common":{"title":"ADN","learn":"Learn React","hello_button":"Hello Button","are_you_sure":"Êtes-vous sur ?","cancel":"Annuler","ok":"OK","yes":"Oui","no":"Non","loading":" Chargement...","loading_video":" Chargement du lecteur...","click_here":"cliquez ici !","next_release":"PROCHAINE SORTIE","adn_news":"ADN news","last_videos":"Derniers ajouts","themes":"Thèmes","recommendations":"Recommandations","yatta_link":"Plus de news","yatta_posted":"Posté il y a","more_results":"Plus de résultats","no_releases":"Pas de sorties.","watch_EPS":"Regarder la série","watch_MOV":"Regarder le film","watch_OAV":"Regarder l'OAV","first_episode_free":"1\u003csup\u003eer\u003c/sup\u003e épisode GRATUIT","and":"ET","hours":"Heures","minutes":"Minutes","resume_episode":"Résumé de l'épisode","summary_title":"Résumé : {{videoTitle}} {{videoNumber}} en {{videoLanguages}}","seo_title":"ADN | Anime streaming en VOSTFR et VF","seo_description":"Animation Digital Network c'est le meilleur de l'animé en direct du Japon ! Découvrez en streaming tout Naruto Shippuden, Fairy Tail, Hunter x Hunter, Blue Exorcist, Code Geass, Vampire Knight, etc.","seo_author":"ADN","errors":{"required":"Ce champ est obligatoire.","required_number":"Le code doit contenir 6 chiffres.","min_length":"Le mot de passe doit faire plus de 8 caractères.","min_age":"La création de compte est réservée aux personnes ayant 12 ans révolus.","password_must_match":"La vérification et le mot de passe sont différents.","gcu_required":"Vous devez accepter les conditions d'utilisation pour créer un compte.","email_invalid":"Cette adresse email n'est pas valide.","email_validation_error":"${value} doit être un email valide.","captcha":"Captcha Incorrect","page":"Page introuvable","logout_failed":"La déconnexion de votre compte n'a pas pu se faire correctement. Veuillez réessayer.","message_with_context":"{{message}} Erreur: {{context}}","relogin_to_apply_changes":"La session d'actualisation a échoué. Veuillez vous déconnecter et vous reconnecter pour appliquer un nouvel abonnement","something_went_wrong":"Une erreur est survenue.","profiles_general_error":"Nous avons rencontré un problème avec les profils, temporairement le profil principal a été défini pour permettre la navigation sur le site","viewing_limitation_invalid":"La limitation de durée de visionnage doit être de 30 minutes au minimum.","subscription_group_invalid":"L'offre découverte est uniquement disponible pour les nouveaux utilisateurs","ogone_errors":{"20001004":"We have received an unknown status for the transaction. We shall contact your acquirer and update the transaction status within one working day. Please check the : us later.","20001111":"A technical problem has occurred. Please contact the helpdesk.","20001998":"We received an unknown status for the transaction. We will contact your acquirer and update the status of the transaction. Please check the status later.","30001011":"A technical problem has occurred. Please contact the helpdesk.","30031001":"Invalid merchant number","30041001":"Retain card.","30051001":"Authorisation declined","30071001":"Retain card - special conditions.","30121001":"Invalid transaction","30131001":"Invalid amount","30141001":"Invalid card number","30201001":"A technical problem has occurred. Please contact the helpdesk.","30301001":"Invalid format","30341001":"Suspicion of fraud.","30381001":"A technical problem has occurred. Please contact the helpdesk.","30411001":"Lost card","30431001":"Stolen card. Pick up.","30511001":"Insufficient funds","30541001":"Card expired","30561001":"Card not in authoriser's database.","30591001":"Suspicion of fraud","30611001":"Amount exceeds card limit","30751001":"Incorrect PIN entered too many times","50001054":"Card number incorrect or incompatible","50001111":"Data validation error","50001113":"This order has already been processed.","50001123":"Card type not active"}},"actions":{"save":"Enregistrer","enter":"Valider","cancel":"Annuler"},"messages":{"general_error":"Une erreur est survenue.","session_expired":"Votre session a expiré. Veuillez vous reconnecter.","empty_password":"Un mot de passe vide n'est pas autorisé"},"languages":{"vostf":{"name":"VOSTFR","title":"Japonais sous-titré français"},"vf":{"name":"VF","title":"Français"},"and":" et ","title_video_tab":" {{title}} - streaming - {{languages}} - ADN"},"time_codes":{"title":"Page d'administration du timecodes","error_details":"Détails de l'erreur:","is_uploading":"Téléchargement","submit_file":"Ajouter le fichier CSV"},"multi_profile":{"add_new":"Ajouter un nouveau profil","edit":"Modification du profil","fields":{"name":"Entrer votre nom","act_green":"J'agis pour la planète en ayant une consommation responsable.","act_green_explanation":"Qu'est-ce que c'est ?","green":"Vous pouvez modifier ces paramètres dans vos préférences de lecture.","age_group":"Catégorie d'âge :"},"age_group":{"zero":"0+","ten":"10+","twelve":"12+","sixteen":"16+","eighteen":"18+","no_restriction":"Sans restriction d'âge","hint":"Les contenus à partir de {{age}} ne sont pas autorisés.","hint_no_limit":"Pas de restriction de contenu."},"subscription":{"registered":"Inscrit","subscriber":"Abonné"},"who_is_it":{"title":"Qui est-ce ?","add":"Nouveau profil","edit":"Modifier mon profil","cta_text":"Pour réactiver vos profils secondaires,","cta_link":"ré-abonnez vous."},"who_is_it_edit":{"title_singular":"Modifier le profil","title_plural":"Modifier les profils","subtitle":"Sélectionner un profil à modifier","end":"Terminé","cta_text":"Vous souhaitez ajouter de nouveaux profils ?","cta_disabled_text":"Pour modifier vos profils secondaires,","cta_link":"Abonnez-vous !","cta_disabled_link":"ré-abonnez vous."},"messages":{"profile_created":"Profil créé avec succès","profile_updated":"Profil mis à jour","profile_create_error":"Erreur lors de la création du profil, veuillez réessayer plus tard","profile_update_error":"Erreur lors de la modification du profil, veuillez réessayer plus tard","profile_update_avatar_distribution_error":"Cet avatar n'est pas disponible dans votre distribution, veuillez en choisir un autre"}},"pin_code":{"title":"Entrez votre code pin","forgot_pin_code":"Code pin oublié ?","forgot_pin_code_received":"Veuillez vérifier votre boîte de réception !"},"twitch":{"follow":"Suivez nos émissions"},"player":{"vote":"Notez !","thanks_for_voting":"Merci :)","no_comments":"Aucun commentaire","comments":"{{count}} commentaires","commentSingular":"{{count}} commentaire","comment":"commentaires","my_watchlist":"Ma watchlist","already_seen_show":"J'ai vu cette série","favorite":"Coup de coeur","download":"Télécharger","broadcast":"En cours de diffusion.","see_more":"Voir plus","summary":"Résumé de la série :","season":"Saison {{season}} ","source":"Source :","in":"en","on_adn":"sur ADN","and_lowercase":"et","integrate_video":"Intégrer la vidéo","no_access":"Vous devez être abonné pour accéder à ce contenu.","show_offer":"Découvrir les offres","return_to_home":"Retour à l'accueil","report_issue":"Veuillez réessayer plus tard. si le problème persiste, n'hésitez pas à contacter ","go_to_sav":"notre SAV","go_to_catalog":"Accéder au catalogue","video_not_found":"Vidéo non trouvée !","already_subscriber":"Déjà abonné(e) à ADN ? ","click_here":"Cliquez ici !","to_sign_in":"pour vous connecter à votre compte et visionner l'épisode","age_restriction_message":"Ce contenu n'est pas accessible pour votre catégorie d'âge.\u003cbr /\u003eC'est pour votre bien !","distribution_restriction_message":"Ce contenu n'est pas accessible dans votre pays.","duration_restriction_message":"Vous avez atteint la limite de visionnage quotidienne définie pour votre profil.","select_video":"Veuillez sélectionner une autre vidéo !"},"download_overlay":{"unlimited_credits":"Vos crédits de téléchargement sont \u003cstrong\u003eillimités\u003c/strong","no_credits":"Vous n'avez plus/pas de crédits de téléchargement","credits_after_one":"Il vous reste maintenant \u003cstrong\u003e1 crédit\u003c/strong\u003e de téléchargement à utiliser.","credits_after_other":"Il vous reste actuellement \u003cstrong\u003e{{count}} crédits\u003c/strong\u003e de téléchargement à utiliser.","credits_before_one":"Il vous reste actuellement \u003cstrong\u003e1 crédit\u003c/strong\u003e de téléchargement à utiliser.","credits_before_other":"Il vous reste actuellement \u003cstrong\u003e{{count}} crédits\u003c/strong\u003e de téléchargement à utiliser.","you_will_use_credits_one":"Vous utiliserez \u003cstrong\u003e1 crédit\u003c/strong\u003e de téléchargement","you_will_use_credits_other":"Vous utiliserez \u003cstrong\u003e{{count}} crédits\u003c/strong\u003e de téléchargement","download_warning":"Attention : Les fichiers téléchargés sont marqués et nous permettent d'identifier leur propriétaire. Toute tentative de partage de fichier entrainera le blocage du compte ainsi que des poursuites judiciaires. (cf. Article 9 des CGU)","download_max_reached":"\u003cstrong\u003eVous avez déjà téléchargé ce fichier plus de 8 fois !\u003c/strong\u003e\u003cbr/\u003eN'hésitez pas à contacter le SAV si vous rencontrez des problèmes pour télécharger une vidéo.","validate_email_warning":"\u003cstrong\u003eAttention !\u003c/strong\u003e Pour télécharger un épisode, veuillez d'abord valider votre adresse email.","video_not_available":"Cette vidéo n'est pas encore disponible en téléchargement.","video_not_available_message":"Nous travaillons pour la rendre disponible au plus vite. Merci de votre compréhension.","no_download":"Vous ne pouvez pas télécharger cette vidéo.","no_main_profile":"Les téléchargements sont réservés au détenteur du compte ADN. Si vous désirez télécharger une vidéo, contactez-le.","choose_version":"Choisissez la version que vous voulez télécharger :","country_ip":"\u003cspan class=\"geomessage\"\u003ePour des raisons légales, nous ne sommes pas autorisés à diffuser nos vidéos dans ce territoire.\u003cbr/\u003e Si vous vous trouvez dans un pays européen francophone, un territoire d'outre mer ou au Maghreb et que ce message apparaît, contactez-nous en utilisant le formulaire de contact du site.\u003cbr/\u003e\u003cbr/\u003eFor legal reasons, we are not allowed to broadcast our videos in this territory.\u003cbr/\u003eIf this message appears, when you are in a french speaking country, an overseas territory or in the maghreb, please contact us by using our website contact form.\u003c/span\u003e\u003cbr/\u003e\u003cstrong\u003eVotre pays : {{country}} (IP : {{ip}})\u003c/strong\u003e","blacklisted_ip":"l'IP {{ip}} est bloquée.\u003cbr/\u003eL'utilisation de VPN ou Proxy pour accéder aux vidéos n'est pas autorisé. Cette IP peut aussi avoir été bloquée si elle a été utilisée à des fins ne respectant pas nos conditions d’utilisations.","download_available":"Votre épisode est téléchargeable","download_available_for":"Votre épisode est téléchargeable pendant {{time}}","download_button":"Télécharger","download_version":"Télécharger en ","view_our_offers":" Voir les offres","validate_email_button":"Valider mon adresse mail","you_download":"Vous télécharger :","you_want_to_download":"Vous allez télécharger :","warn_already_downloaded":"\u003cstrong\u003eAttention :\u003c/strong\u003e Vous avez déjà téléchargé cet épisode.","in_language_vf":" en \u003cacronym title=\"Version Française\"\u003eVF\u003c/acronym\u003e","in_language_vostf":" en \u003cacronym title='Version Originale Sous-Titrée Français'\u003eVOSTFR\u003c/acronym\u003e","progress_bar":{"start":"Préparation...","done":"Téléchargement...","all_done":"Téléchargement terminé !"},"language_titles":{"vf":"Version Française","vostf":"Version Originale Sous-Titrée Français"}},"main_carrousel":{"watch_show":"Regarder","free":"Gratuit"},"versus_battle_page":{"title":"BIENVENUE SUR ADN !","header":"Aidez-nous a vous proposer les meilleurs contenus","sub_header":"Quel anime préférez vous ?","button":"PASSER"},"user_account_survey_page":{"header":"QUI SUIS-JE ?","pass_button":"PASSER","submit_button":"VALIDER","notification_message":"Votre compte a été créé avec succès. N'hésitez pas à compléter votre profil pour profiter pleinement de tous nos services !"},"versus_battle":{"title":"VERSUS BATTLE","i_like_both":"J'aime les 2 !","i_like_none":"Aucun"},"account":{"user_info":{"member_since":"Membre depuis {{since}}","change_avatar":"Changer mon avatar","edit_profile":"Éditer mon profil","view_profile":"Voir mon profil public","logout":"Se déconnecter","male_letter":"H","female_letter":"F","age":"{{age}} ans","subscription_male":"Abonné {{subscription}} ","subscription_female":"Abonnée {{subscription}} ","no_subscription_male":"Non abonné","no_subscription_female":"Non abonnée"},"menu_categories":{"my_account":"Mon compte","my_profile":"Mon profil","my_recommendations":"Mes recommandations"},"account_management":{"title":"Informations du compte","save_button":"Enregistrer"},"profile_management":{"title":"Gestion des profils","age_restriction_title":"Restriction d'accés","delete_title":"Suppression du profil","save":"Enregistrer","delete":"Supprimer","confirm":"Voulez-vous vraiment supprimer ce profil?","field_by_age_category":"• Par catégorie d'âge :","field_by_blacklist":"• Par titres interdits (5 maximum) :","watch_time_restriction":"Limitation de durée de visionnage"},"playback_preferences":{"title":"Mes préférences de lecture","language":"Langue","resolution":"Résolution","auto_play":"Lecture automatique\u0026nbsp;:","night_mode":"Mode nuit","auto_play_message":"Les épisodes s'enchaîneront automatiquement.","green":"J'agis pour la planète en ayant une consommation responsable."},"myinformation":{"title":" Mes informations"},"myprofile":{"title":" Mon profil","username":"Pseudo :","birthdate":"Date de naissance :","last_name":"Nom :","first_name":"Prénom :","email":"Email :","email_address":"Adresse mail du compte :","validate_email":"Valider son email","change_email":"Changer d'email","fake_password":"Mot de passe :","address":"Numéro et rue :","company":"Société :","city":"Ville :","zip_code":"Code postal :","country":"Pays :","change_password":"Modifier mon mot de passe","email_change_subprofile_only":"Pour modifier votre adresse mail, rendez-vous dans l'espace \"Informations du compte\"","sex":"Mon genre :","sex_male":"Homme","sex_female":"Femme","newsletter_label":"J’accepte de recevoir par e-mail les offres et newsletters d'informations de ADN","newsletter_partners_label":"Je souhaite également recevoir par e-mail les offres et newsletters d’informations des partenaires de ADN","animeormanga_label":"Je suis fan de :","dvdperyear_label":"Nombre de DVD/Blu-ray que j'achète par an ?","mangaperyear_label":"Nombre de manga que j'achète par an ?","alreadysubscriber_label":"J'ai déjà souscrit à une offre légale de VOD (Vidéo à la demande) :","whichsubscription_label":"Si oui, lesquelles ?","whichsubscription_placeholder":"noms des services...","submit_button":"VALIDER","animeormanga_manga":"Manga essentiellement","animeormanga_animation":"Animation japonaise essentiellement","animeormanga_both":"Les deux","peryear_none":"Aucun","peryear_minus":"Moins de {{number}}","peryear_plus":"Plus de {{number}}","alreadysubscriber_yes":"oui","alreadysubscriber_no":"non","invalid_birthdate_message":"Le format de la date de naissance n'est pas bon.","not_old_enough":"La création de compte est réservée aux personnes de plus de 12 ans.","update_profile_error":"Certains champs ne sont pas valides. Veuillez les vérifier et réessayez.","update_profile_success":"Votre compte a été sauvegardé","email_change_need_validation":"Vous devez d'abord valider la modification du profil, afin d'enregister le changement d'email."},"mypublicprofile":{"title":" Mon profil public","visible":"Status du profil :","module1":"Module 1 :","module2":"Module 2 :","module3":"Module 3 :","age":"Affichage de l'age :","sex":"Affichage du genre :","private":"privé","public":"public","info":"Vous avez réglé la visibilité de votre profil sur 'privé' ! Il n'est visible que par vous même.","no_module":"Aucun module","video_viewed":"Dernières vidéos vues","video_rated":"Dernières vidéos notées","video_commented":"Dernières vidéos commentées","background_fake":"Choisir une image","background_label":"Background du profil :","error":"Certains champs ne sont pas valides. Veuillez les vérifier et réessayez.","background_empty":"Vous devez séléctionner un background dans la liste déroulante.","success":"Votre profil est sauvegardé !","save":"sauvegarder"},"myaddresses":{"title":" Mes adresses","no_address":"Aucune Adresse Renseignée","delivery_address":"Adresse de livraison","billing_address":"Adresse de facturation","add_new_address":"Ajouter une adresse","create_new_address":"Créer une nouvelle adresse","edit_address":"Modifier une adresse","choose_address":"Choisir une autre adresse","choose_address_title":"Choisissez une adresse","modify_address":"Modifier","use_delivery_address":"Utiliser l'adresse de livraison","remove_address":"Supprimer","confirm_address":"Valider","update_address_success":"Votre adresse a été sauvegardé","phone":"Tél : ","form":{"firstname":"Prénom","lastname":"Nom","company":"Société","street":"Rue et voie","street_placeholder":"Rue, voie...","city":"Ville","zipcode":"Code postal","country":"Pays","phoneNumber":"Téléphone","more_info":"Plus d'informations","more_info_placeholder":"n° porte, batiment, code, etc...","countries":{"empty":"-","dz":"Algérie","ad":"Andorre","be":"Belgique","fr":"France","de":"Allemagne","at":"Autriche","gp":"Guadeloupe","gy":"Guyane","lu":"Luxembourg","ma":"Maroc","mq":"Martinique","yt":"Mayotte","md":"Monaco","nc":"Nouvelle Calédonie","pf":"Polynésie Française","re":"Réunion","bl":"Saint-Barthélemy","mf":"Saint-Martin","pm":"Saint-Pierre-et-Miquelon","ch":"Suisse","tn":"Tunisie","wf":"Wallis-et-Futuna"}}},"mynotifications":{"title":" Mes notifications","header":"J'aimerais recevoir une alerte par e-mail pour:","submit_button":"SAUVEGARDER"},"mydevices":{"title":"Appareils","application":"Application","device_count":"Nombre d'appareils","last_activity":"Dernière connexion","action":"Action","disconnect":"Déconnecter","disconnect_devices":"Déconnecter les appareils","disconnect_all_devices":"Déconnecter tous les appareils","no_devices":"Aucun appareil connecté"},"mysubscription":{"title":" Mon abonnement","confirm_unsubscribe_title":"Êtes-vous sûr de vouloir vous désabonner ?","confirm_unsubscribe_standard_subscription_content":"En annulant le renouvellement automatique, vous renoncez aux avantages de votre abonnement.","confirm_unsubscribe_loyality_discount_content":"En annulant le renouvellement de votre abonnement, vous renoncez à l'avantage que vous apporte le tarif dégressif.","no_subscription_title":"Aucun abonnement","no_subscription_desc":"Vous n'avez pas d'abonnement ADN en cours.","period":{"monthly":"Par mois","yearly":"Par an"},"current_sub":{"header":"Abonnement en cours","subscriber_since":"Vous êtes abonné depuis {{since}}","name_partners":"Partenaires","renewal_cancelled":"Renouvellement automatique annulé.","end_date":"Votre abonnement actuel est valide jusqu'au","renewal_date":"Cet abonnement sera renouvelé automatiquement le","sub_buttons":{"new_subscription":"Souscrire à un nouvel abonnement ADN","subscribe":"S'abonner à ADN","modify_sub":"Mettre à jour mon abonnement","cancel_sub":"Annuler le renouvellement automatique"}},"loyality_discount":{"popup_cta":"Tarif dégressif ?","popup_title":"Qu'est-ce que c'est ?","popup_content":"Votre fidélité est récompensée !\u003cbr /\u003e Plus vous restez abonné, plus le prix de votre abonnement diminue. Pour en savoir plus, rendez-vous sur la page de \u003ca href='/terms-of-use'\u003enos CGU\u003c/a\u003e.","popup_close":"J'ai compris !"},"next_sub":{"header":"Prochain abonnement","start_date":"Cet abonnement débutera le"},"coupon":{"header":"code promo","button":"ok"},"paybox":{"header":"Mode de paiement","invalid_payment_data":"Carte Bancaire non/plus valide!","creditcard":"Carte Bancaire •••• •••• •••• ","see_paypal":"Voir mon compte Paypal","update_card":"Mettre à jour"},"payments":{"header":"Mes achats","table":{"date":"date","price":"prix","method":"methode de paiement","type":"achat","start_date":"debut de validite","end_date":"fin de validite","invoices":"factures"}},"invoice":{"title":"FACTURE","order_date":"Date d'achat : ","payment_date":"Date de paiement : ","billing_address":"Adresse de facturation","product_header":"Produit","subscription":"Abonnement","monthly_subscription":"mensuel","yearly_subscription":"annuel","price_ht":"Prix HT","price_ttc":"Prix TTC","delivery_price":"Frais de Port","total_ht":"Total (HT)","total_ttc":"Total (TTC)","total":"Total ","payment_method":"Mode de paiement : ","vat_directive":" Application de la TVA du pays du consommateur : directive européenne 2008/8/EC – article 5","company_tel":"Tél","company_fax":"Fax","tva_number":"TVA Intracommunautaire","male":"M.","female":"Mme.","error_message":"Un problème est survenu si ça se reproduit n'hésitez pas à contacter le SAV"}},"subscription":{"title":"Abonnement","confirm_unsubscribe":"Êtes-vous sur de vouloir vous désabonner ?","no_subscription_title":"Aucun abonnement","no_subscription_desc":"Vous n'avez pas d'abonnement ADN en cours.","period":{"monthly":"Par mois","yearly":"Par an"},"current_sub":{"header":"Abonnement en cours","name_partners":"Partenaires","renewal_cancelled":"Renouvellement automatique annulé.","end_date":"Votre abonnement actuel est valide jusqu'au","renewal_date":"Cet abonnement sera renouvelé automatiquement le","sub_buttons":{"new_subscription":"Souscrire à un nouvel abonnement ADN","subscribe":"S'abonner à ADN","modify_sub":"Mettre à jour mon abonnement","cancel_sub":"Annuler le renouvellement automatique"}},"next_sub":{"header":"Prochain abonnement","start_date":"Cet abonnement débutera le"},"coupon":{"header":"code promo","button":"ok"},"paybox":{"header":"Mode de paiement","invalid_payment_data":"Carte Bancaire non/plus valide!","creditcard":"Carte Bancaire •••• •••• •••• ","see_paypal":"Voir mon compte Paypal","update_card":"Mettre à jour"},"payments":{"header":"Mes achats","table":{"date":"date","price":"prix","method":"methode de paiement","type":"achat","start_date":"debut de validite","end_date":"fin de validite","invoices":"factures"}},"invoice":{"title":"FACTURE","order_date":"Date d'achat : ","payment_date":"Date de paiement : ","billing_address":"Adresse de facturation","product_header":"Produit","price_ht":"Prix HT","price_ttc":"Prix TTC","delivery_price":"Frais de Port","total_ht":"Total (HT)","total_ttc":"Total (TTC)","total":"Total ","payment_method":"Mode de paiement : ","vat_directive":" Application de la TVA du pays du consommateur : directive européenne 2008/8/EC – article 5","company_tel":"Tél","company_fax":"Fax","male":"M.","female":"Mme.","error_message":"Un problème est survenu si ça se reproduit n'hésitez pas à contacter le SAV"}},"mydownloads":{"title":" Mes téléchargements","credit_download_link":"Choisir un fichier","credits":"Crédits","credit_number":"Crédit n","download_button":"Télécharger","available":"Disponible : ","no_results":"Vous n'avez pas de crédit de téléchargement. \u003ca href=\"/faq-download\" target=\"_blank\"\u003eEn savoir +\u003c/a\u003e","valid_through":"Valide encore"},"myhistoric":{"title":" Mon historique"},"mywatchlist":{"title":" Ma watchlist"},"security":{"title":"Sécurité du compte","not_subscribed":"Vous devez être abonné pour pouvoir profiter de cette fonctionnalité.","save":"Enregistrer","enable_security":"Sécurité du compte :","enable_security_description":"Le code pin sera demandé pour accéder à votre profil, afin de protéger les données du compte, et pour créer un nouveau profil.","enable_parental_control":"Contrôle parental :","enable_parental_control_description":"Le code pin sera demandé pour changer la catégorie d'âge d'un profil.","info_age_category":"Renseignez le code pin du compte pour modifier la catégorie d’âge du profil.","info_main_profile":"Renseignez le code pin du compte pour accéder à ce profil.","info_new_profile":"Renseignez le code pin du compte pour créer un nouveau profil.","title_two_factor":"Double authentification","secure_account":"Sécurisez davantage votre compte avec la double authentification. Un code à usage unique vous sera envoyé, selon la méthode choisie, par SMS ou par email à chaque tentative de nouvelle connexion sur votre compte ADN.","enable_two_factor_auth":"Activer la double authentification\u0026nbsp;:","sms":"Par SMS","email":"Par email","account_phone":"Numéro de téléphone du compte :","change_phone":"Changer de numéro de téléphone","account_email":"Email du compte :","change_email":"Pour changer d'email, rendez-vous dans l'espace ","change_email_link":"Gestion du compte","2fa_popup_cancel":"Annuler","2fa_popup_next":"Suivant","2fa_popup_header_step1":"Double authentification 1/3","2fa_popup_header_step2":"Double authentification 2/3","2fa_popup_header_step3":"Double authentification 3/3","2fa_popup_step1_message_password":"Pour paramétrer la double authentification sur votre compte, renseignez le mot de passe du compte ADN :","2fa_popup_step1_message_sms":"Renseignez votre n° de téléphone :","2fa_popup_step2_message_sms":"Afin de valider votre numéro, renseignez le code de vérification reçu par SMS :","2fa_popup_step2_message_email":"Afin de valider votre adresse mail, renseignez le code de vérification reçu sur l'email {{email}} :","2fa_popup_step3_message":"Double authentification activée avec succès !","2fa_popup_deactivate":"Pour désactiver la double authentification,\u003cbr/\u003e renseignez le mot de passe du compte ADN :"},"deleteaccount":{"title":" Supprimer mon compte","before_delete":"Avant de supprimer votre compte, \u003cbr /\u003e\u003cbr /\u003e \u003cstrong\u003eAssurez-vous que le renouvellement automatique de votre abonnement est bien annulé.\u003c/strong\u003e","once_deleted":"Une fois supprimé, vous ne pourrez plus accéder à votre \u003cbr /\u003e compte et toutes ses données seront supprimées.","confirm_delete":"Pour confirmer la suppression de votre compte, merci de renseigner votre mot de passe.","old_password":"Mot de passe actuel : ","confirm":"Valider"},"accountdeleted":{"deleted_account":"Suppression de votre compte","account_delete_confirm":"Votre compte a bien été supprimé. ","see_you_adn":"On espère vite vous revoir sur ADN !"},"changepassword":{"change_password":"Modifier mon mot de passe","use_form":"Utilisez le formulaire ci-dessous pour modifier votre mot de passe de votre compte ADN.","new_password":"Nouveau mot de passe : ","confirm_new_password":"Saisissez une seconde fois votre nouveau mot de passe : "},"validatemail":{"header":"VALIDATION DE VOTRE EMAIL","text_p01":"Un email vous a été envoyé à l'adresse ","text_p02":"Suivez les instructions de ce dernier pour valider votre adresse électronique.","button":"J'AI VALIDÉ MON EMAIL","not_validated_yet":"Vous n'avez pas encore validé votre adresse email. Veuillez vérifier votre boite mail et suivre les instructions de l'email envoyé avant de continuer.","resend_button":"Renvoyer l'email de validation"},"emailvalidated":{"header":"VOTRE EMAIL EST MAINTENANT VALIDÉ !","button":"CONTINUER"},"editmail":{"header":"MODIFIER MON ADRESSE EMAIL","text_account":"Utilisez le formulaire ci-dessous pour modifier l'adresse email de votre compte ADN.","text_profile":"Utilisez le formulaire ci-dessous pour modifier l'adresse email de votre profil ADN.","new_email_label":"Nouvelle adresse email :","current_password_label":"Mot de passe actuel :","button":"VALIDER"},"multilists":{"title":" Sélectionnées pour vous"},"moodboard":{"title":" Moodboard"},"surprises":{"title":" Surprises"},"banlist":{"title":"Titres bannis"},"contact_us":{"title":" Nous Contacter"},"logout":{"title":" Déconnexion"},"validatecoupon":{"title":"Ce coupon vous donne accès à :","period":"Durée","activate":"Activer"},"gdpr":{"par_01":"Les informations recueillies sur ce formulaire sont enregistrées par ADN Animation Digital Network pour permettre la création d'un compte. Vous pouvez exercer votre droit d'accès aux données vous concernant et les faire rectifier en vous adressant à ","par_02":"Pour plus d’informations, merci d’accéder à la Charte pour la ","contact_link":"nous contacter","personnal_data_link":"protection des données personnelles","must_accept_to_watch":"Pour accéder au contenu vous devez accepter les cookies du site"}},"profile":{"profile":"Profil de","profile_simple":"Profil","private_profile":"Ce profil est privé.","unauthenticated_profile":"Vous devez être \u003ca href='/login'\u003econnecté\u003c/a\u003e ou \u003ca href='/signup'\u003ecréer un compte\u003c/a\u003e pour voir ce profil.","viewingTime":"Heures \u003cbr /\u003e de visionnage","videoViewed":"Vidéos \u003cbr /\u003e vues","showStarted":"Séries commencées","videoRated":"Vidéos \u003cbr /\u003e notées","averageRating":"Note \u003cbr /\u003e moyenne","comment":"Commentaires","lastVisit":"Dernière visite il y a","video_viewed_list_title":"DERNIÈRES VIDÉOS VUES","video_rated_list_title":"DERNIÈRES VIDÉOS NOTÉES","video_commented_list_title":"DERNIÈRES VIDÉOS COMMENTÉES","video_status_timestamp":"il y a {{date}}","video_list_empty":"Aucune vidéo"},"catalog":{"order":{"title":"Tri : ","new":"les + récents","popular":"les + populaires","alpha":"ordre alphabétique"},"page":{"search_placeholder":"Recherche","content_title":"Catalogue : Animes, Films, OAV et Dramas","content_title_genre":"Animes, Films, OAV et Dramas du genre :","filter_toggle_button":"Filtres","loading_message":"Chargement...","empty_message":"Il n'y a aucun résultat correspondant à vos critères.","load_more":"Afficher plus"},"distribution":{"title":"ANIME EN","label_simulcast":"Simulcast","label_download":"Téléchargement","label_free":"Gratuit"},"type":{"title":"TYPES","label_eps":"Séries","label_mov":"Films","label_long":"Long-métrage","label_short":"Court-métrage","label_oav":"Oav"},"language":{"title":"LANGUES","label_vostfr":"VOSTFR","label_vf":"VF"},"quality":{"title":"QUALITÉ","label_fhd":"HD 1080P","label_hd":"HD 720P"},"age":{"title":"AGES","label_0":"Pour tous","label_10":"10 ans","label_12":"12 ans","label_16":"16 ans","label_18":"18 ans","label_no_restrictions":"Sans restriction"},"sections":{"label_japanese":"Animation japonaise","label_french_belgian":"Animation franco-belge","label_international":"International","label_youth":"Jeunesse"},"genres":{"title":"GENRES","label_arts_martiaux":"Arts Martiaux","label_aventure_action":"Aventure / Action","label_comedie":"Comédie","label_drame":"Drame","label_ecchi_fan_service":"Ecchi / Fan service","label_fantastique_science_fiction":"Fantastique / Science-Fiction","label_heroic_fantasy":"Heroic fantasy","label_historique":"Historique","label_jeunesse":"Jeunesse","label_josei":"Jôsei","label_mecha":"Mecha","label_musical":"Musical","label_nostalgie":"Nostalgie","label_policier_thriller":"Policier / Thriller","label_psychologie":"Psychologie","label_romance":"Romance","label_scolaire":"Scolaire","label_seinen":"Seinen","label_shojo":"Shôjo","label_shonen":"Shônen","label_sport":"Sport","label_violence":"Violence"}},"subscription_page_final":{"header":"Validation de votre commande","felicitation":"Félicitations\u0026nbsp;!","now_subscribe":"Vous êtes maintenant abonné(e) à ADN.","text":"Vous pouvez dès à présent profiter pleinement du catalogue ADN\u0026nbsp;!","title_survey":"Vous avez 30 secondes pour un petit questionnaire ? C’est par ici !","first_question":"Connaissiez-vous ADN ?","second_question":"Aviez-vous déjà pensé à vous abonner ?","third_question":"Quels en ont été les freins ?","four_question":"Quelles autres plateformes de streaming connaissez-vous ?","five_question":"Êtes-vous abonné à une autre plateforme de streaming ?","yes":"Oui","no":"Non","price":"Prix","catalog":"Catalogue","ergonomy":"Ergonomie","nothing":"Aucun","other":"Autre","redirect":"Accéder au site","which":"Laquelle ?"},"subscription_page_payment":{"gcu_label":" En finalisant votre achat, vous vous soumettez aux \u003ca href=\"https://animationdigitalnetwork.com/terms-of-use\" target=\"_blank\"\u003econditions générales d'utilisation\u003c/a\u003e et acceptez l'accès au contenu numérique de la plateforme en renonçant à votre droit de rétractation de 14 jours.","gcu_validation":"Vous devez accepter les Conditions Générales d'Utilisation pour continuer.","subscription_payment_header":"Récapitulatif de votre commande","subscription_payment_title":"Vérifiez que les informations sont exactes et choisissez votre mode de paiement.","commande_title":" Ma commande","button_continue":"Continuer","payments_title":" Mode de paiement","i_have_promo_code":"J'ai un code coupon","valider_coupon":"Valider","payments":{"by_credit_card":"Payez par carte bancaire","by_paypal":"Payez avec Paypal","redirect_info":" Vous serez redirigé vers les serveurs sécurisés de Paypal","pay_price_text":" Payer {{price}}"},"first_period":{"year_zero":"la première année","year_one":"la première année","year_other":"les {{count}} premières années","month_zero":"le premier mois","month_one":"le premier mois","month_other":"les {{count}} premiers mois","day_zero":"le premier jour","day_one":"le premier jour","day_other":"les {{count}} premiers jours"},"subscription_period":{"year_zero":"an","year_one":"an","year_other":"{{count}} ans","month_zero":"mois","month_one":"mois","month_other":"{{count}} mois","week_zero":"semaine","week_one":"semaine","week_other":"{{count}} semaines","day_zero":"jour","day_one":"jour","day_other":"{{count}} jours"},"subscription":{"title_mobile":"Abo. ","title_desktop":"Abonnement ","details":"Détails : ","coupon":"Coupon :","new_subscription_price":"Prix nouvel abonnement","discount":"Réduction ancien abonnement \u003csmall\u003e(au prorata des jours déjà consommés)\u003c/small\u003e","toPay":"Prix de la mise à jour","startDate":"Date d'application de la mise à jour","startDateNow":"Aujourd'hui","total":"Total","free_offer":"offert ","cancel_coupon":"Supprimer","recurring_info":"Puis {{price}} tous les {{period}} à partir du {{date}}.","trial_info":"Période d'essai :","cancel_info":"Vous pouvez annuler le renouvellement automatique à tout moment depuis votre compte ADN. Si vous choisissez Paypal, votre abonnement sera renouvelé 24h avant la fin de la période en cours.","cancel_info_trial":"Vous pouvez annuler le renouvellement automatique à tout moment depuis votre compte ADN. Si vous choisissez Paypal, votre abonnement sera renouvelé 24h avant la fin de la période d'essai."}},"subscription_page_validate_paypal":{"header":"Validation Paypal en cours...","please_wait":"Vérification en cours...","error":"Une erreur pendant la validation de votre paiement s'est produite. Veuillez contacter le service après-vente.","sav_button":"contacter le SAV"},"subscription_page_validate_credit_card":{"header":"Validation carte de crédit en cours...","please_wait":"Vérification en cours...","error":"Une erreur pendant la validation de votre paiement s'est produite. Veuillez contacter le service après-vente.","sav_button":"contacter le SAV"},"vod":{"shareText":"Partager :","insert":"Insérer","by_email":"Par mail","send":"Envoyer"},"send_email":{"title":"Partagez à un ami {{episodeTitle}}","email_label":"Destinataire","email_placeholder":"Adresse email du destinataire","message_label":"Message additionnel (facultatif)","email_incorrect":"Formulaire invalide : Veuillez vérifier les champs du formulaire"},"popup":{"close":"Fermer","send":"Envoyer"},"menu":{"videos":"Vidéos","videos_lowercase":"vidéos","heroes":"Héros","catalogue":"Catalogue","sub_new":"Nouveauté","our_offer":"Notre offre","home":"Accueil","interviews":"Interviews","participate":"Participer","forum":"Forum","suggestions":"Boite à idées","store":"Store","series":"Séries","sub_news":"Nouveautés","news":"News","twitch":"ADN TV+","sabonner":"S'abonner","my_profile":"Mon profil","downloads":"Téléchargement","my_history":"Mon Historique","my_watchlist":"Ma Watchlist","my_subscription":"Mon Abonnement","logout":"Déconnexion","all_shows":"Toutes les séries","change_profile":"Changer de profil","manage_account":"Gérer le compte","manage_profile":"Gérer mon profil","leave_youth_section":"Quitter la section jeunesse","free":"Gratuit"},"history":{"no_results":"Aucun historique"},"ban":{"no_results":"Aucun titre banni"},"footer":{"who_we_are":"Qui sommes-nous ?","you_and_me":" Vous \u0026 nous","faq":"FAQ","contact_us":"Contactez-nous","adn_team":"L'équipe ADN","recruitment":"Recrutement","most_popular_serie":" Séries les plus populaires","most_popular_show":" Anime les plus populaires","navigation":" Navigation","our_offers":"Nos offres","legal":" Légal","terms_of_service":"Conditions générales de vente","legal_notice":"Mentions Légales","privacy":"Charte pour la protection des données personnelles","gdpr_settings":"Paramètres des cookies","copyright":"© 2022 Animationdigitalnetwork.com est un site du groupe Média-Participations opéré par ADN - ANIMATION DIGITAL NETWORK."},"badges":{"episodes":{"text":"ÉPISODES","number":"15 000"},"shows":{"text":"SÉRIES","number":"530"},"films":"FILMS","multisupport":"MULTIPLATEFORME","no_engage":"SANS ENGAGEMENT"},"character_list":{"title":"Personnages clés de"},"show_advanced_metadata":{"title":"Fiche de l'anime : {{title}}","originalTitle":"Titre VO : ","direction":"Réalisation : ","originalWork":"Œuvre originale : ","scriptwriter":"Scénariste : ","music":"Musique : ","production":"Production de la série : ","opening":"Générique d’ouverture : ","ending":"Générique de fin : ","category":"Thèmes principaux : ","release":"Date de 1ère diffusion : ","audience":"Public : ","website":"Site officiel : "},"show_list":{"title":"Anime à voir ensuite","arrow_prev_title":"précédent","arrow_next_title":"suivant","winter":"Hiver","autumn":"Automne","summer":"Été","spring":"Printemps","available_at":"Disponible dans","free":"Gratuit"},"product_list":{"title":" DISPONIBLE SUR LE STORE","buy":"ACHETER","arrow_prev_title":"précédent","arrow_next_title":"suivant"},"comments":{"title":"Avis sur l'animé {{title}}","reply":"Répondre","remove":"Supprimer","anonymous":"Anonyme","validate":"Valider le message","moderate":"Modérer le message","comment_placeholder":"Il n'y a aucun commentaire actuellement. Soyez-le premier à réagir !","adn_team":"L'équipe ADN","confirm_remove":"Voulez-vous vraiment supprimer ce commentaire ?","confirm_moderate":"Raison de la modération (laisser vide pour annuler) ?","confirm_validate":"Raison de la validation (laisser vide pour annuler) ?","no_access":"Vous devez \u003cspan\u003eêtre connecté\u003c/span\u003e pour poster un commentaire","not_available":"Vous ne pouvez pas commenter une série/vidéo non publiée","posted_ago":" Posté il y a {{date}}","post_comment":"Poster un commentaire","reply_comment":"Répondre à {{username}}","write_message":"Rédiger un message :","add_spoiler_tag":"Ajouter une balise spoiler","spoiler_info":"Lors de l'utilisation de la balise spoiler, écrire le commentaire comme suivant : \u003cstrong\u003e[spoiler] votre texte ici [/spoiler]\u003c/strong\u003e","preview_message":"Prévisualisation de votre réponse :","accept_terms":"En postant, vous acceptez de respecter {{link}} .","regulations":"le réglement des commentaires d'ADN","button_cancel":"ANNULER","button_reply":"RÉPONDRE","button_post":"POSTER","load_more":"Charger plus de commentaires"},"time_conversion":{"today":"Aujourd'hui","yesterday":"Hier","tomorrow":"Demain","years":"ans","year":"an","months":"mois","month":"mois","weeks":"semaines","week":"semaine","days":"jours","day":"jour","hours":"H","hour":"H","hourMin":"h","minutes":"min","minute":"min","seconds":"s","second":"s"},"dates":{"mondays":"Lundis","tuesdays":"Mardis","wednesdays":"Mercredis","thursdays":"Jeudis","fridays":"Vendredis","saturdays":"Samedis","sundays":"Dimanches","every":"Tous les","at":"À"},"showlist":{"recommended":"Rien que pour vous","recently_watched":"Reprendre mes séries en cours","manga":"Séries adaptées de manga","simulcast":"Les simulcasts","movie":"Les films","youth_videos":"Top vidéos jeunesses"},"error_page":{"404":"404","500":"500","page_title":"404 - Erreur: 404","page_title500":"500 - Erreur: 500","no_chance":"Pas de chance...","internal_error":"Une erreur s'est produite","return_to_home":"Retour à l'accueil","contact_our_team":"Contacter notre équipe","check_catalogue":"Découvrir notre catalogue","page_unavailable":"Cette page n'est pas disponible dans votre pays","content_unavailable":"Ce contenu n'est pas disponible dans votre pays"},"embedded_page":{"not_available":"Cette vidéo n'est pas/plus disponible.\u003cbr /\u003eRetrouvez toutes nos vidéos \u003ca href='/video'\u003esur notre catalogue\u003c/a\u003e."},"surprise":{"title":"Surprises","first_p":"Vous ne savez pas quoi regarder ?","second_p":"Cliquez sur « GO » et laissez faire le hasard\u0026nbsp;!","go":"GO"},"moodboard":{"first_p":"Sélectionnez 3 humeurs parmi les choix ci-dessous","result":"Résultats :"},"recommendation":{"title":"Sélectionnées pour vous","first_p":"Vous trouverez ici des séries qui pourraient vous plaire.\u003cbr /\u003eNous nous sommes basés sur ce que vous avez déjà visionné pour vous les présenter.","ban":"Supprimer de mes recommandations"},"seo":{"title":"Le site français au service du stream d’animation et anime en vostfr et vf.","description_page":"Animation Digital Network, c’est le meilleur de l’animé en direct du Japon! Découvrez en streaming en VO ou VF : One Piece, Dragon Ball, Naruto, Fairy Tail, Oshi No Ko, Yu-Gi-Oh, L’Attaque des Titans, etc.","keywords":"streaming, VOD, animé, japonais, anime, alternative légale, vidéo à la demande, ADN, vostfr, vostf, vf, vo, replay, manga, version française, version originale, version doublée, dessin animé, gratuit, abonnement","description_homepage":"\u003cb\u003eQuels genres d'animés propose ADN ?\u003c/b\u003e\u003cbr /\u003eADN propose un très large choix d’animés en ligne, disponible en quelques clics seulement. Le manga s’étant aujourd’hui largement démocratisé, c’est ainsi que coexiste une multitude de genres et de sous-genres. Retrouvez, par exemple, le shônen, le fer de lance de l’animation japonaise. Le shôjo quant à lui, vise un public plus féminin. Vous retrouverez également les indémodables mangas de sport, comme \u003ca href='/video/885-hajime-no-ippo-the-fighting'\u003eHajime no Ippo\u003c/a\u003e ou \u003ca href='/video/952-ashita-no-joe'\u003eAshita no Joe 2\u003c/a\u003e, dont le côté initiatique fonctionne toujours à merveille. Mais les animes, c’est aussi une bonne dose d’humour et de bonne humeur, avec le très original \u003ca href='/video/344-assassination-classroom'\u003eAssassination Classroom\u003c/a\u003e, par exemple.\u003cbr /\u003eIl existe aussi des animes orientés pour les plus jeunes. Ils représentent une très bonne porte d’entrée dans le monde des animes en streaming. Vous l’aurez compris, il y en a pour tous les goûts sur ADN.\u003cbr /\u003e\u003cbr /\u003e\u003cb\u003eQuelles sont les possibilités de paramétrage qu'offrent ADN pour les séries et les films disponibles en streaming ?\u003c/b\u003e\u003cbr /\u003ePour une expérience réussie, vous pouvez paramétrer précisément de nombreux critères.  Vous retrouverez vos animés répartis en 3 catégories : simulcast, téléchargement ou visionnage gratuit.\u003cbr /\u003eChoisissez la langue qui vous convient entre animés en VOSTFR ou en VF. Ceux-ci sont disponibles en HD, avec comme qualité 720p et 1080p.\u003cbr /\u003eÉvidemment, l’expérience ADN est complètement personnalisable. Créez ainsi vos propres watchlist, séries coups de cœur et déposez votre avis ou commentaire concernant les séries de votre choix. Plusieurs types d’abonnements sont disponibles selon vos envies, chacun multi-supports.\u003cbr /\u003e\u003cbr /\u003e\u003cb\u003eQuelles sont les têtes d’affiche d'animés en streaming sur ADN ? \u003c/b\u003e\u003cbr /\u003eADN propose quelques-uns des animes incontournables de notre époque et d’avant. Quel que soit le genre, vous retrouverez un certain nombre de classiques. Envie d’un shônen de qualité ? \u003ca href='/video/265-naruto-shippuden'\u003eNaruto Shippuden\u003c/a\u003e, \u003ca href='/video/457-boruto-naruto-next-generations'\u003eBoruto\u003c/a\u003e et \u003ca href='/video?search=One%20piece'\u003eOne piece\u003c/a\u003e en streaming vous attendent sur notre site. ADN, ce sont aussi des oeuvres certes plus anciennes, mais toujours aussi indémodables telles que \u003ca href='/video/851-akira'\u003eAkira\u003c/a\u003e, \u003ca href='/video/582-albator'\u003eAlbator\u003c/a\u003e, \u003ca href='/video/946-cobra'\u003eCobra\u003c/a\u003e, \u003ca href='/video/957-lady-oscar'\u003eLady Oscar\u003c/a\u003e et bien d’autres...\u003cbr /\u003eADN propose également des nouveautés incontournables telles que \u003ca href='/video/912-call-of-the-night'\u003eCall of the Night\u003c/a\u003e, \u003ca href='/video/973-the-eminence-in-shadow'\u003eEminence in Shadow\u003c/a\u003e ou encore \u003ca href='/video/908-my-isekai-life'\u003eMy Isekai Life\u003c/a\u003e.\u003cbr /\u003eSi vous avez une question concernant notre offre, n’hésitez pas à prendre contact avec nous via notre site web, nous nous ferons un plaisir de vous répondre.","description_onboarding":"\u003cb\u003eQuels animes en VF ou en VOSTFR propose ADN ?\u003c/b\u003e\u003cbr /\u003e\u003cbr /\u003eUne multitude de thématiques et d’animes vous attendent sur ADN ! C’est bien simple il y’en a pas tous les goûts, tous les âges, toutes les envies. En premier lieu, retrouvez les incontournables shonen, ces animés avec un fort côté initiatique où le héros progresse en compétence au fur et à mesure de l’aventure. L’amitié, le courage, le dépassement de soi sont des thèmes majeurs de ce type d’animé. Retrouvez donc les grands classiques tels que \u003cb\u003eOne Piece\u003c/b\u003e, L’Attaque des Titans, \u003cb\u003eNaruto\u003c/b\u003e, Death Note, Boruto, Fairy Tail et bien d’autres encore !\u003cbr /\u003eMais ADN, c’est aussi des mangas plus légers, pour passer un bon moment, seul ou avec des amis. Quelques exemples ? Docteur Slump, Tom Sawyer, ou le très original Assassination Classroom sont à dévorer sans attendre.\u003cbr /\u003eÀ l’inverse, vous souhaitez embarquer pour un univers plus sombre, violent voire dérangeant ? The Promised Neverland, Claymore, The Garden of Sinners, Tokyo Ghoul, Goblin Slayer ou Ken le Survivant sont faits pour vous.\u003cbr /\u003eLes animes sont aussi particulièrement développés sur la thématique du sport. Dans cette rubrique, il y en a pour tous les goûts ! Voiture, football américain, volley et bien sûr les incontournables Kuroko's Basket, Captain Tsubasa, Slam Dunk.\u003cbr /\u003eSouvent destinés aux filles (mais pas que !), les shojo nous racontent des histoires d’adolescentes, souvent pleines de rebondissements et de dialogues passionnants. Vous l’avez compris, il y en a littéralement pour tous les goûts sur le site ADN.\u003cbr /\u003e\u003cbr /\u003e\u003cb\u003eComment trouver facilement les mangas Vostfr ou VF ?\u003c/b\u003e\u003cbr /\u003e\u003cbr /\u003eVous souhaitez plonger dans le monde du manga, mais vous n’avez pas de titres précis en tête ? Aucun souci, ADN vous accompagne pour trouver LA perle qui occupera vos soirées. Notre système de filtre vous aide à choisir l’animé idéal.\u003cbr /\u003e\u003cul\u003e\u003cli\u003eAnime en simulcast, téléchargement ou bien gratuit\u003c/li\u003e\u003cli\u003eLes séries, films ou OAV\u003c/li\u003e\u003cli\u003eLa langue de votre animé (VF ou VOSTFR)\u003c/li\u003e\u003cli\u003eLa qualité (720p, 1080p)\u003c/li\u003e\u003cli\u003eLa tranche d’âge ciblé\u003c/li\u003e\u003cli\u003eLe genre (shonen, shojo, seinen,  aventure, comédie, drame...)\u003c/li\u003e\u003c/ul\u003e\u003cbr /\u003eVous l’avez compris, vous avez toutes les cartes en main pour parfaitement choisir l’œuvre qui vous convient. Pour les plus curieux, notre onglet nouveautés vous attend avec les dernières grosses sorties. Au fur et à mesure de vos visionnages, des recommandations personnalisées vous seront proposées, entièrement basées sur vos goûts et vos préférences.\u003cbr /\u003eQue vous soyez friand de \u003cb\u003emanga en vostfr\u003c/b\u003e ou en vf, vous retrouverez l’anime idéal pour vous. Multisupport, le site ADN est tout aussi bien disponible sur tablette, sur ordinateur ou sur votre mobile.","description_catalog_genre":"Animation Digital Network c'est le meilleur de l'animé en direct du Japon ! Découvrez en streaming les animés, films, OAV et dramas dans le genre"},"forum_page":{"forum":"Forum","welcome":"Bienvenue sur le forum d'ADN !","new_topics":"Sujets récents","forum_topics":"Sujets du forum","ago":"Il y a","the":"Le"},"subscription_page":{"page_title":"Anime Japonais - Toutes les offres d'abonnement de  streaming légal manga | ADN","monthly":"Mensuel","yearly":"Annuel","pick_monthly_subscription":"Choisissez votre forfait mensuel !","pick_annual_subscription":"Choisissez votre forfait annuel !","change_anytime":"Sans engagement, il est modifiable à tout moment.","save_money":"Faites des économies sur le total en payant l'année en une fois.","streaming":"Streaming","download":"Download","current_subscription":"Actuellement","month":"mois","year":"an","equal_to":"Équivalent à ","pay_once":"Paiement en une fois","no_limit":"illimités","month_credits":"Crédits de téléchargement par mois\u003csup\u003e1 \u003c/sup\u003e","collection":"Pour collectionner vos séries préférées ou profiter de vos contenus vraiment partout !","loyalty_discount":"Tarif dégressif","loyalty_discount_description":"Le prix de votre abonnement diminue en fonction de votre ancienneté !","multiprofile":"Multiprofil","multiple_devices":"Jusqu'à 4 écrans simultanés","screens":"Accès multi-écrans\u003csup\u003e2 \u003c/sup\u003e","catalog":"Accès à tout le catalogue et aux films","quality":"Haute définition (qualité 1080p)\u003csup\u003e3 \u003c/sup\u003e","language":"Langues : VOSTFR / VF\u003csup\u003e4 \u003c/sup\u003e","adFree":"Pas de publicité","continue":"Continuer","better_than_monthly":"Vous économisez par rapport à l'abonnement mensuel","download_credit":"\u003csup\u003e1 \u003c/sup\u003eLes crédits de téléchargement sont valables sur les séries du catalogue en fonction des droits disponibles. Il n'est pas possible de télécharger à partir des applications.","screens_credit":"\u003csup\u003e2 \u003c/sup\u003eADN est disponible sur la télévision via les applications Android TV, Chromecast et Apple TV, les smartphones et tablettes via les applications Android et iOS et les ordinateurs via internet.","quality_credit":"\u003csup\u003e3 \u003c/sup\u003eLa disponibilité des vidéos en HD dépend de votre FAI (fournisseur d'accès internet) et des capacités de vos appareils. Les contenus ne sont pas tous disponibles en haute définition.","language_credit":"\u003csup\u003e4 \u003c/sup\u003eLes contenus ne sont pas tous disponibles en version française.","learn_more":"Pour en savoir plus, veuillez consulter les \u003ca href='/terms-of-use'\u003econditions d'utilisation.\u003c/a\u003e","coupon_only_available_with_subscription":"Vous ne pourrez pas bénéficier de ce coupon avec cet abonnement. Êtes-vous sur ?","christmas_offer_subtitle":"OFFRE DÉCOUVERTE : 1 MOIS D’ABONNEMENT GRATUIT ! Partageons ensemble l’esprit des fêtes de fin d’année ! Profitez de petits moments de bonheur et de complicité devant vos titres préférés."},"notification_popup":{"header":"S'inscrire aux notifications ?","accept_button":"Oui","decline_button":"Non"},"landing_pages":{"watch_show":"Voir l'anime","show_suggestions":"Si vous aimez visionner les animes en streaming, n’hésitez pas à consulter \u003ca href = '/video'\u003ele catalogue d’ADN\u003c/a\u003e dans lequel nous vous proposons une large sélection de séries."},"forgot_password":{"enter_email":"Veuillez saisir l'adresse e-mail associée à votre compte d'utilisateur. Un code de vérification vous sera adressé. Lorsque vous le recevrez, vous pourrez choisir un nouveau mot de passe","title":"Adresse e-mail : *"},"subscription_auth_page":{"header":"IDENTIFICATION","subheader":"Rejoignez-nous en vous connectant ou en créant un compte ADN","login_header":"Déjà inscrit","login_subheader":"Identifiez-vous ci-dessous","registration_header":"Pas encore inscrit","registration_subheader":"N'attendez plus ! Rejoignez la communauté ADN","registration_button":"Créer un compte","email_validation_subheader":"VOTRE EMAIL DOIT ÊTRE VÉRIFIÉ AVANT TOUT ABONNEMENT"},"subscription_payment_method_updated":{"header":"Mise à jour de votre moyen de paiement","sub_header":"Félicitations","sub_header_box":"Votre moyen de paiement est maintenant à jour.","text":"Vous pouvez dès à présent profiter pleinement du catalogue ADN","button":"Accéder au site"},"forgot_username":{"enter_email":"Veuillez saisir l'adresse e-mail associée à votre compte d'utilisateur. Votre Pseudo vous sera envoyé à cette adresse."},"update_credit_card":{"title":"Mise à jour de votre moyen de paiement","update":"Mettez à jour votre carte bancaire.","fill_new_cc":"Renseignez votre nouvelle carte bancaire","confirm":"Valider","cardholder_name":"Titulaire de la carte","cardholder_placeholder":"Nom Prénom","card_number":"Numéro de carte","card_number_lowercase":"numéro de carte","expiration_date":"Date d'expiration","security_code":"Code de sécurité","secure_page":"Page 100% sécurisée","secure_payment":"Paiement 100% sécurisé","months":"Mois","years":"Année","invalid_cvc":"Le code de sécurité est invalide.","invalid_date":"La date est invalide.","invalid_cc":"Votre numéro de carte de paiement est invalide.","invalid_cardholder":"Le titulaire de la carte est invalide.","authorized_cc":"Seules les cartes VISA, Mastercard et Maestro sont acceptées."},"dummy_page":{"forum_will_comeback_soon":"Le forum sera bientôt de retour...","maintenance":"Maintenance","subscription_maintenance":"Nous sommes désolés mais notre service abonnement est indisponible temporairement. Il sera de nouveau opérationnel ce mardi 27 octobre en début d'après-midi. Merci de votre compréhension et de votre patience."},"avatar_editor":{"avatar_selection":"Sélection de l'avatar","background_not_select":"* Attention, les fonds ne sont\u003cbr /\u003epas sélectionnables avec\u003cbr /\u003eles avatars exclusifs.","background_not_select_mobile":"* Attention, les fonds ne sont pas sélectionnables avec les avatars exclusifs.","available":"Série disponible sur"},"commercial_operation":{"title":"Du 16 au 30 mars\u003cbr /\u003e\u003cspan\u003eL'abonnement streaming mensuel passe à \u003cstrong\u003e1€\u003c/strong\u003e\u003csup\u003e*\u003c/sup\u003e\u003c/span\u003e","subtitle":"* Promotion applicable uniquement sur le 1er mois d'abonnement. Non valable pour les abonnements en cours.","button_title":"J'en profite","currently":"En ce moment*","currentlybis":"En ce moment","period":"* Opération en cours du 14 décembre au 4 janvier","periodbis":"Opération en cours du 16 au 30 mars"},"alert_message":{"tickets_alert":"Suite à un très grand nombre de tickets reçus, des retards dans le traitement des demandes sont à prévoir. Nous faisons notre maximum pour répondre à tous dans les meilleurs délais. Nous vous remercions de votre compréhension."},"registration_success":{"success_message":"Votre création de compte est maintenant finalisée !\u003cbr /\u003eGrâce à votre compte, vous pouvez :","services_message":"Regarder des centaines de vidéos disponibles gratuitement, créer une watchlist, accéder à votre historique, poster des commentaires sur vos séries et vidéos favorites.","access_to":"Accéder au service","experience_message":"Pour une expérience illimitée, avec accès aux applications,\u003cbr /\u003eaux VF et à la HD sans publicités, jetez un coup d'oeil à nos abonnements !"},"what_is_it":{"title":"Qu'est-ce que c'est ?","responsible":"La consommation responsable signifie que :","quality":"La qualité de vos vidéos est configurée en 480p.","auto_read":"La lecture automatique est désactivée.","profile":"Dans votre profil, ces 2 éléments sont donc pré-paramétrés sur ces modes écologiques et un signe distinctif apparaît dans votre avatar.\u003cbr /\u003eNotre planète vous dit merci !","button":"OK"},"watchlist":{"released_ago":"Ajouté il y a {{date}}","video_not_available":"Pas encore disponible","show_not_available":"Cette série n'est plus disponible sur le site","distribution_not_available":"Cette série n'est pas disponible dans votre pays","error":"Connectez-vous !","add":"Ajouter à la watchlist","remove":"Retirer de la watchlist","share_disable":"Ne plus partager","share_enable":"Activez le partage de watchlist","watch":"À voir: ","next":" Prochain: ","next_video_number":"Episode n°  {{number}} ","last":" Dernière sortie: ","view_button":"Voir","no_results":"Ajouter des séries, des films ou des OAV à votre watchlist, pour suivre et partager vos animes favoris.","delete_button":"Supprimer"},"formula":{"title":"Choisissez la formule qui vous plaît !","description":"Mensuel ou annuel ? Avec ou sans option téléchargement ? À vous de choisir !","conditions":"Pour en savoir plus, veuillez consulter les \u003ca href='/terms-of-use'\u003econditions d'utilisation\u003c/a\u003e.","free":{"title":"Gratuit","free_episodes":"Des centaines d'épisodes gratuits","free_episodes_asterisk":"Liste des séries gratuites dispnonible ici :","access_history":"Accès à votre historique et votre watchlist","ads_presence":"Présence de publicités","quality_limit":"Accès limité au 480p","create_account":"Je créé un compte gratuit"},"premium":{"title":"Premium","full_catalog_access":"Accès à tout le catalogue sans restriction","access_full":"Accès à votre historique, votre watchlist et vos recommandations","no_ads":"Aucune publicité","hd_access":"Accès à la HD","hd_access_asterisk":"Les contenus ne sont pas tous disponibles en haute définition.","download_option":"Option téléchargement","download_option_description":"(13 vidéos téléchargeables/mois ou téléchargement illimité/an)","download_option_asterisk":"Les contenus ne sont pas tous disponibles en téléchargement."},"common":{"comments_feature":"Participation aux commentaires","mutiple_devices":"Multi-supports","multiple_devices_description":" (ADN est disponible sur la télévision via les applications Android TV, Apple TV, Chromecast, PS4 et Xbox, les smartphones et tablettes via les applications Android et iOS et les ordinateurs via internet.)","multiprofiles":"Multiprofil","multiple_devices":"Jusqu'à 4 écrans simultanés","language":"VOSTFR/VF","language_asterisk":"En fonction de leur disponibilité.","loyalty_discount":"Tarif dégressif","loyalty_discount_description":"\u003cbr /\u003eLe prix de votre abonnement diminue en fonction de votre ancienneté !"},"price":{"per_month":"{{price}}€/mois","per_year":"{{price}}€/an","economy":"Soit {{price}}€ d'économie","no_engagement":"Sans engagement"},"action":{"create_account":"JE CRÉE UN COMPTE GRATUIT"}},"heroes":{"title":"Les héros","page_title":"ADN | Les Héros des dessin-animés | Anime en streaming VF et VOSTFR"},"banlist":{"text":"Retrouvez ici les titres que vous avez bannis de vos recommandations. Vous pouvez changer d'avis en les supprimant de cette liste.\u003cbr /\u003e\u003cbr /\u003eLes recommandations que vous verrez sur le site seront en partie basées sur cette liste.","remove_button":"Supprimer de la liste"},"livestream":{"ottera":{"header":"Épisodes suivants"}},"new_domain":{"announcement":"Anime Digital Network se transforme en \u003cspan\u003eAnimation Digital Network\u003c/span\u003e !!\u003cbr /\u003ePensez à mettre à jour votre URL.\u003cbr /\u003eNous mettons tout en œuvre pour que vous n'ayez aucun ralentissement ! Merci de votre soutien."},"sondage_popup":{"content":"Parlez-nous de votre relation avec l’univers des anime et tentez de gagner","reward":"1 an d’abonnement","participate":"Je participe !"},"page_title":{"title":"ADN | Anime streaming en VOSTFR et VF"}}}},"initialLocale":"fr","ns":["common"],"userConfig":{"i18n":{"defaultLocale":"fr","locales":["fr","de"],"localeDetection":false},"fallbackLng":{"default":["fr"]},"localePath":"/var/task/i18n/locales","reloadOnPrerender":true,"default":{"i18n":{"defaultLocale":"fr","locales":["fr","de"],"localeDetection":false},"fallbackLng":{"default":["fr"]},"localePath":"/var/task/i18n/locales","reloadOnPrerender":true}}}},"__N_SSP":true},"page":"/video/[show]/[video]","query":{"show":"315-no-game-no-life","video":"5008-episode-6"},"buildId":"iyQTl64NN8C5sAy274F3k","isFallback":false,"isExperimentalCompile":false,"gssp":true,"locale":"fr","locales":["fr","de"],"defaultLocale":"fr","scriptLoader":[]}</script>
  <script id="hotjar" data-nscript="afterInteractive">(function (h, o, t, j, a, r) {
      h.hj = h.hj || function () { (h.hj.q = h.hj.q || []).push(arguments) }
      h._hjSettings = { hjid: 2359970, hjsv: 6 };
      a = o.getElementsByTagName('head')[0];
      r = o.createElement('script');
      r.async = 1;
      r.src = t + h._hjSettings.hjid + j + h._hjSettings.hjsv;
      a.appendChild(r)
    })(window, document, 'https://static.hotjar.com/c/hotjar-', '.js?sv=');</script>
  <script id="bcs"
    data-nscript="afterInteractive">window.__symbol_bcs_sirdata_overwrites_it_and_it_breaks_react = window.Symbol</script>
  <script src="https://cache.consentframework.com/js/pa/27993/c/LrSl1/stub" data-cfasync="false"
    referrerpolicy="unsafe-url" type="text/javascript" data-nscript="afterInteractive"></script>
  <script src="https://choices.consentframework.com/js/pa/27993/c/LrSl1/cmp" data-cfasync="false"
    referrerpolicy="unsafe-url" type="text/javascript" data-nscript="afterInteractive"></script>
  <script type="text/javascript" data-cmp-src="" data-nscript="afterInteractive"></script>
  <script src="https://www.google-analytics.com/analytics.js" async="true" data-nscript="afterInteractive"></script>
  <next-route-announcer>
    <p aria-live="assertive" id="__next-route-announcer__" role="alert"
      style="border: 0px; clip: rect(0px, 0px, 0px, 0px); height: 1px; margin: -1px; overflow: hidden; padding: 0px; position: absolute; top: 0px; width: 1px; white-space: nowrap; overflow-wrap: normal;">
    </p>
  </next-route-announcer>
  <script src="//cdn-a.yieldlove.com/yieldlove-bidder.js?animedigitalnetwork.fr" async="true" defer="true"
    type="text/javascript" data-nscript="afterInteractive"></script>
  <script src="//cdn.elasticad.net/native/serve/js/quantx/nativeEmbed.gz.js" async="true" defer="true"
    type="text/javascript" id="quantx-embed-tag" data-nscript="afterInteractive"></script><iframe
    name="__sdcmpapiLocator" style="display: none;"></iframe><iframe name="__tcfapiLocator"
    style="display: none;"></iframe><iframe id="qZibzt8W" frameborder="0"
    src="chrome-extension://ekhagklcjbdpajgpjgmbionohlpdbjgc/translateSandbox/translateSandbox.html"
    style="width: 0px; height: 0px; display: none;"></iframe>
  <script data-cmp-src="https://securepubads.g.doubleclick.net/tag/js/gpt.js" data-cmp-vendor="755"
    data-cmp-purpose="1,3,4" data-cmp-purposes-li="2,7,9,10"
    data-cmp-fallback-src="https://pagead2.googlesyndication.com/tag/js/gpt.js" data-cmp-fallback-vendor="755"
    data-cmp-fallback-purposes-li="2,7,9,10" async="" defer="" data-cmp-handled="1"></script>
  <script data-cmp-src="/vendor/ads/interstitiel.min.js" async="" defer="" data-cmp-handled="1"></script>
  <script src="/_next/static/chunks/1228-876948f3a681bc07.js"></script>
  <script src="/_next/static/chunks/1890-1f16143645f13c9a.js"></script>
  <script src="/_next/static/chunks/pages/video-8ef36a41d24e13c8.js"></script>
  <script src="/_next/static/chunks/810-cb10a4ae5a7fa2ae.js"></script>
  <script src="/_next/static/chunks/8915-e5955a54d5fed2da.js"></script>
  <script src="/_next/static/chunks/pages/index-5efe5a4036b770bd.js"></script>
  <script src="/_next/static/chunks/pages/subscribe-66a9d0ec4ce66d12.js"></script>
  <script src="/_next/static/chunks/9674-a92b15f41282fdf3.js"></script>
  <script src="/_next/static/chunks/1886-b6708b1ccf514116.js"></script>
  <script src="/_next/static/chunks/pages/login-d41f518f3ba65d9f.js"></script>
  <script src="/_next/static/chunks/3542-dad9f0e4c53e3582.js"></script>
  <script src="/_next/static/chunks/pages/video/%5Bshow%5D-d4cbff5a9a347df6.js"></script>
  <script src="/_next/static/chunks/pages/new-on-adn-38f18febe4ddacbd.js"></script>
  <script src="/_next/static/chunks/4376-283f5664401d0749.js"></script>
  <script src="/_next/static/chunks/pages/live-93f49a6cdfeb74c4.js"></script>
  <div id="sd-cmp" class="sd-cmp-1EpGs sd-cmp-ziEj0"
    style="--background-color: #FFFFFF; --main-color: #202942; --title-color: #202942; --text-color: #8492A6; --border-color: #F0F0F0; --overlay-color: #F9F9F9; --background-color-dark: #FFFFFF; --main-color-dark: #202942; --title-color-dark: #202942; --text-color-dark: #8492A6; --border-color-dark: #F0F0F0; --overlay-color-dark: #F9F9F9; --border-radius: 24px; --font-family: Helvetica; --font-family-title: Helvetica; --provider-logo: url(data:image/svg+xml;base64,PHN2ZyBpZD0iTE9HT19CTFVFIiBkYXRhLW5hbWU9IkxPR08gQkxVRSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgdmlld0JveD0iMCAwIDQwMTkuODkgMTc3NS43NiI+PGRlZnM+PHN0eWxlPi5jbHMtMXtmaWxsOm5vbmU7fS5jbHMtMntmaWxsOiM2ZWQyMTY7fS5jbHMtM3tjbGlwLXBhdGg6dXJsKCNjbGlwLXBhdGgpO30uY2xzLTR7ZmlsbDojMjAyOTQyO308L3N0eWxlPjxjbGlwUGF0aCBpZD0iY2xpcC1wYXRoIj48cGF0aCBpZD0iTUFTUVVFIiBjbGFzcz0iY2xzLTEiIGQ9Ik00MDM4LjQyLDE0OCwxNDg4LjcsMTQyLjQyczM1NC4zMiwyNzAuNywzMjkuMzgsODA1YzAsMCwyLjY5LDMxMS42OC0yNTIuNTUsNTgwLjU0bDI0NzIuODktMTQuNzVaIi8+PC9jbGlwUGF0aD48L2RlZnM+PGcgaWQ9IlBBU1RJTExFIj48cGF0aCBjbGFzcz0iY2xzLTIiIGQ9Ik02OS4yNSwxMjE3LjY1YzEyLjkzLDAsMjgsNC40Myw0NS4yNSwxMyw4LjYyLDMuMjQsMTcsNi44LDI1LjA3LDEwLjUyczE3LjQ5LDguMzgsMjguMjksMTMuNzZBNzYwLjQ3LDc2MC40NywwLDAsMCwyNDMsMTI4MHE0Mi43NSwxMiwxMDQuMzQsMTYuOTJjNC4yNywxLjE5LDEwLjIsMS41OSwxNy43NSwxLjU5cTU0LjkzLDMuMzMsOTUuMzYtOS42NnQ2OC0zMi4zNWMxOC4zMS0xNCwzMi41OS0yOS41OCw0Mi43OS00Ni45MWExMzQuNywxMzQuNywwLDAsMCwxOC42Mi01My4zMSw0OC40OSw0OC40OSwwLDAsMSwuNzktOC4xNSw1Miw1MiwwLDAsMCwuODMtOC4wN3EwLTQzLjU0LTI0LjI5LTgwLjg0UTU0MywxMDIzLjc1LDQ5Ny42OSw5OTQuNnEtNDUuMTktMzAuNzItMTA0LjIxLTU1Ljc3VDI3MS40LDg4OS41MXEtNTkuODgtMjIuNjUtMTAzLjUtNTQuMTFUOTUuMTIsNzY1LjA4Yy0zMy4xOC00NC01MS4xOC05MS42OC01NC41NC0xNDMuMTdhODg5LjUxLDg4OS41MSwwLDAsMCwyMy4zLDU5Ni42QTQyLjI4LDQyLjI4LDAsMCwxLDY5LjI1LDEyMTcuNjVaIi8+PHBhdGggY2xhc3M9ImNscy0yIiBkPSJNMTczNi4xNiw3OTAuOWExOTUuNDUsMTk1LjQ1LDAsMCwxLTQ2LjA4LDEwLjQ0LDQzNi40MSw0MzYuNDEsMCwwLDEtNDYsMi40NmMtNy42LDAtMTQuMzYtLjI1LTIwLjI1LS44cy0xMS41OS0uNzktMTctLjc5YTIwNS4yNywyMDUuMjcsMCwwLDAtMzIuMzUsMy4xN2MtMTIuOSwyLjEzLTI3LDctNDIsMTQuNjMtMTQsNy41MS0yOC4wOCwxOC00MiwzMS41NnEtMjEsMjAtMzUuNjEsNTUuNzdjLTYuNDQsMTUtMTEuNjIsMzIuODMtMTUuMzQsNTMuMzFzLTUuNjgsNDMuNTktNS42OCw2OS41M1YxMjA4YTMwMi4xOSwzMDIuMTksMCwwLDEtOS43LDc1LjIzLDE5Ny4yMiwxOTcuMjIsMCwwLDEtMzIuMzEsNjguNjZxLTIyLjY4LDMwLjc1LTYwLjYzLDQ5LjM1dC05MywxOC41OVYxMTY0LjI5bC0xLjU4LTExMS41MnEwLTgwLjkxLDIzLjQyLTE1MS4xN1QxMzMwLjM3LDc3OGEzNTIuMzQsMzUyLjM0LDAsMCwxLDExMS41Ny04Mi41OHE2NC43MS0zMC43MSwxNDcuMTMtMzAuNjlBNDAyLjQ4LDQwMi40OCwwLDAsMSwxNjY3LjUsNjcycTM2LjM4LDcuMzgsNjMuODcsMTUuMzVjNy44OCwyLjM3LDE1LjQ3LDQuOSwyMy4xMSw3LjQzQzE2NjYuMTksMjk3LjI5LDEzMTEuOSwwLDg4Ny44MywwLDYwMy40MywwLDM1MC41LDEzMy44OCwxODgsMzQxLjg0YzI5LjI2LTE3LjA5LDU5LjkxLTI5LjI3LDkyLjE5LTM2LDM2LjE1LTcuNTIsNzAuODMtMTAuNzYsMTA0LjM0LTkuNjksOC41NywwLDE0LjUxLjU1LDE3Ljc1LDEuNThRNTA5LDMwNS44Niw1ODEsMzMyLjUxdDExNS42MSw1Ny4zNHEyMi42NSwxNC42NywzNy4xOCwyOC4zMkEzNDguNzIsMzQ4LjcyLDAsMCwxLDc1OCw0NDMuMjhjNy41Niw4LjYyLDE0LDE2LjEzLDE5LjQyLDIyLjYybDMuMjQsNi40OS0zLjI0LDQuODJjLTEwLjc2LDE0LTIyLjExLDI0LjI0LTMzLjkzLDMwLjczYTM3LjgxLDM3LjgxLDAsMCwxLTE3LDguMDcsMTAwLDEwMCwwLDAsMS0xOC41OSwxLjU5LDY1LjA2LDY1LjA2LDAsMCwxLTIxLTMuMjFxLTkuNjktMy4xNS0yMi42Mi04LjA3Yy0xOC40LTguNjItMzYuNjctMTYuNjktNTUtMjQuMjRRNTc3LDQ2OS4xNCw1MzQuMTMsNDU2LjIxdC0xMDQuMy0xNy44YTI1LDI1LDAsMCwxLTYuNDUtLjc5LDI5LjM0LDI5LjM0LDAsMCwwLTYuNTItLjgzcS03MS4xNi0zLjIxLTExNy45NSwyOS4xMS00OC42LDMwLjc1LTU4LjI5LDgwLjg0LTMuMjEsMTYuMi0zLjIsMjIuNjIsMCwzNy4yNywxOS40MSw2M2MxMi45MywxNy4xOSwzMS43MiwzMy40Niw1Ni42LDQ4LjU3cTM1LjQ2LDIxLDgwLDM4LDQ0LjM4LDE3LDg5LjY3LDM0LjhhODY0LjY1LDg2NC42NSwwLDAsMSwxMTkuNjksNTYuNTFxNTYuNTIsMzIuMzIsMTAwLjI0LDc0LjRhMzQyLDM0MiwwLDAsMSw2Ny4wNyw5NC42MXEyNSw1Mi41NiwyMS44MywxMTguODF2MTIuMjNhNzUuNzcsNzUuNzcsMCwwLDEtMS41OCwxMy42OHEtOS43NSw4Mi40Ni00Ny43NywxNDMuMDl0LTkzLDk5LjQzYTM1OC42NiwzNTguNjYsMCwwLDEtMTIwLjQzLDU4LjIycS02NS40NCwxNy42OC0xMjguNTQsMTYuMjJhNTIsNTIsMCwwLDAtMTIuODktMS42NmgtMTNRMjY4LDE0MjgsMTk2LjkyLDE0MDAuNDNjLTE3LjQtNi42NC0zMy4xNC0xMy41My00OC4xMy0yMC40MSwxNTkuMTksMjM4LjU3LDQzMC43MSwzOTUuNzQsNzM5LDM5NS43NCw0OTAuMzUsMCw4ODcuODQtMzk3LjQ4LDg4Ny44NC04ODcuODRhOTAzLjYsOTAzLjYsMCwwLDAtNy43MS0xMTZBMTQ0LDE0NCwwLDAsMSwxNzM2LjE2LDc5MC45Wm0tNjM3Ljc5LDQ5NS42MXEuNzcsMzQuNzcsMi40LDY5LjQ1YzEsMjMuMjYsMi42Niw0NC40Niw0LjgzLDYzLjkxaC05LjdxLTU0LjkzLDAtOTEuMzYtMTguNTl0LTU5LTQ5LjM1YTIwMC41MSwyMDAuNTEsMCwwLDEtMzEuNTEtNjkuNSwzMTkuNjEsMzE5LjYxLDAsMCwxLTguOS03NC40M1Y4NzYuNTdhMzI5Ljc4LDMyOS43OCwwLDAsMSw4LjktNzUuMjMsMTg0LjEzLDE4NC4xMywwLDAsMSwzMS41Mi02OC42NnEyMi41OS0zMC43Miw1OS00OS4yOHQ5MS4zNi0xOC42Nmg5LjY5Yy0yLjE3LDE5LjM3LTMuOCw0MC43My00LjgzLDYzLjgycy0xLjg5LDQ2LjIxLTIuNCw2OC44My0uODQsNDMuODItLjg0LDYzLjgzdjM2MC40NmMwLDIwLC4yOSw0MS41My44NSw2NC43OVptLTUuNy03OTYuMzFhMTIzLjUsMTIzLjUsMCwwLDEtNDIuOCw0My42MlExMDIzLjE5LDU1MCw5OTQuMDcsNTUwcS0yNC4yNywwLTUwLjE1LTEzUTkxOCw1MjIuNDMsOTA0LjM3LDQ5Ny40MWExMDkuOTMsMTA5LjkzLDAsMCwxLTEzLjgyLTU0LjE4YzAtMTkuNDMsNC45Mi0zOC43NiwxNC41Ny01OC4yMkExMjIuODUsMTIyLjg1LDAsMCwxLDk0OCwzNDEuMzVhMTA5LDEwOSwwLDAsMSw1Ny40My0xNi4xOCw5Ni40Miw5Ni40MiwwLDAsMSw0OC40NSwxM2MxOC4zMSw5LjY1LDMxLjgsMjMuMjEsNDAuNDIsNDAuMzlhMTE4LjM3LDExOC4zNywwLDAsMSwxMyw1My4zNHEtLjA3LDI5LjE0LTE0LjY2LDU4LjI2WiIvPjwvZz48ZyBpZD0iREFUQSI+PGcgY2xhc3M9ImNscy0zIj48ZyBpZD0iTEVUVFJFUyI+PHBhdGggY2xhc3M9ImNscy00IiBkPSJNMTcxNS42LDE0NDkuNzRxLTk4LjQ2LDAtMTcwLjA2LTQ1LjV0LTExMS4xMy0xMjkuNzhxLTM5LjU2LTg0LjI3LTM5LjUzLTE5OS4xNSwwLTE3MS41NCw4Ni41Mi0yNzN0MjM0LjItMTAxLjQzcTg2LjUyLDAsMTUyLjkxLDM5LjUzdDk5LjIsMTA4LjE0VjQyMy40MnEwLTQ2LjI1LDQ0Ljc1LTQ2LjI0LDQ2LjI0LDAsNDYuMjQsNDYuMjRWMTQwMC41cTAsNDYuMjYtNDQuNzUsNDYuMjYtNDYuMjMsMC00Ni4yNC00Ni4yNnYtOTguNDVxLTMyLjgyLDY4LjYzLTk5LjIsMTA4LjE2VDE3MTUuNiwxNDQ5Ljc0Wm0xMS45NC03Ni4wOXExMTAuNCwwLDE3Ni03OC4zMXQ2NS42NS0yMjBxMC0xNDEuNy02NS42NS0yMTkuMjh0LTE3Ni03Ny41N3EtMTEwLjM4LDAtMTc1LjI4LDc3LjU3dC02NC44OSwyMTkuMjhxMCwxNDEuNzIsNjQuODksMjIwVDE3MjcuNTQsMTM3My42NVoiLz48cGF0aCBjbGFzcz0iY2xzLTQiIGQ9Ik0yNDM1LjEzLDE0NDcuNTlxLTczLjExLDAtMTMwLjU0LTI4LjM0dC05MS03Ny41N3EtMzMuNTYtNDkuMjUtMzMuNTYtMTEwLjM5LDAtODAuNTcsNDAuMjctMTI2LjA2dDEzNS43NS02NC44OXE5NS40Ny0xOS4zNiwyNjIuNTQtMTkuMzloNDYuMjR2LTUzLjdxMC05OS45NC00MC4yNy0xNDUuNDRUMjQ5Ni4zLDc3Ni4zYTQxMC42NCw0MTAuNjQsMCwwLDAtMTEwLjQsMTQuOTNRMjMzMi4yLDgwNi4xNiwyMjc0LDgzOXEtMjYuODYsMTQuOTQtNDIuNTIuNzV0LTE0LjkyLTM3LjI4cS43NS0yMy4xMywyNC42Mi0zNS4wN0E1MzQuNDgsNTM0LjQ4LDAsMCwxLDIzNjgsNzE1Ljg5cTY1LjY0LTE3LjE2LDEyNi44MS0xNy4xNSwxMzEuMjgsMCwxOTQuNjcsNjcuMTN0NjMuNCwyMDUuODR2NDI2LjY0cTAsNDYuMjYtNDEuNzYsNDYuMjUtNDQuNzksMC00NC43Ny00Ni4yNXYtOTIuNDhxLTI5Ljg0LDY3LjEzLTkwLjI1LDEwNC40MlQyNDM1LjEzLDE0NDcuNTlabTExLjk0LTczLjExcTY0LjEzLDAsMTEyLjYyLTMwLjU3dDc2LjgyLTg0LjI4cTI4LjMyLTUzLjY5LDI4LjM0LTEyMi4zM3YtNDkuMjNIMjYyMC4xcS0xMzQuMjYsMC0yMDkuNTksMTEuOTR0LTEwNS4xNiw0MS43NnEtMjkuODMsMjkuODUtMjkuODQsODIsMCw2Ny4xMyw0Ni4yNCwxMDguOVQyNDQ3LjA3LDEzNzQuNDhaIi8+PHBhdGggY2xhc3M9ImNscy00IiBkPSJNMzIyNC4wOSwxNDQ3LjE5cS0xMjAuODQsMC0xODEuMjYtNjUuNjV0LTYwLjQxLTE4OFY3ODQuODRIMjg3MnEtNDMuMjgsMC00My4yNS0zNy4yOCwwLTM1LjgsNDMuMjUtMzUuODFoMTEwLjM5VjUyNS4yOHEwLTQ2LjI0LDQ2LjI2LTQ2LjI0LDQ0LjczLDAsNDQuNzUsNDYuMjRWNzExLjc1SDMyNzQuOHE0MS43NiwwLDQxLjc4LDM1LjgxLDAsMzcuMjgtNDEuNzgsMzcuMjhIMzA3My40M3YzOTYuODJxMCw5MSwzNy4yOCwxMzguNzN0MTIzLjgzLDQ3LjczcTI5Ljg0LDAsNDkuMjItNi43dDM0LjMyLTYuNzNxMjYuODQsMCwyNi44NSwzNy4zYTUzLjg5LDUzLjg5LDAsMCwxLTUuMjQsMjMuMTFxLTUuMjQsMTEuMTktMTguNjMsMTUuNjdjLTEwLjk1LDQtMjUuODgsNy42OS00NC43NiwxMS4yQTI5MSwyOTEsMCwwLDEsMzIyNC4wOSwxNDQ3LjE5WiIvPjxwYXRoIGNsYXNzPSJjbHMtNCIgZD0iTTM3MDIuMTUsMTQ0Ny41OXEtNzMuMTEsMC0xMzAuNTMtMjguMzR0LTkxLTc3LjU3cS0zMy41NS00OS4yNS0zMy41Ni0xMTAuMzksMC04MC41Nyw0MC4yNy0xMjYuMDZ0MTM1Ljc1LTY0Ljg5cTk1LjQ3LTE5LjM2LDI2Mi41NC0xOS4zOWg0Ni4yNHYtNTMuN3EwLTk5Ljk0LTQwLjI3LTE0NS40NFQzNzYzLjMyLDc3Ni4zYTQxMC41Nyw0MTAuNTcsMCwwLDAtMTEwLjM5LDE0LjkzUTM1OTkuMjIsODA2LjE2LDM1NDEsODM5cS0yNi44NiwxNC45NC00Mi41MS43NXQtMTQuOTMtMzcuMjhxLjc1LTIzLjEzLDI0LjYyLTM1LjA3QTUzNC42NSw1MzQuNjUsMCwwLDEsMzYzNSw3MTUuODlxNjUuNjQtMTcuMTYsMTI2LjgxLTE3LjE1LDEzMS4yOCwwLDE5NC42Nyw2Ny4xM3Q2My40LDIwNS44NHY0MjYuNjRxMCw0Ni4yNi00MS43Niw0Ni4yNS00NC43OSwwLTQ0Ljc3LTQ2LjI1di05Mi40OHEtMjkuODQsNjcuMTMtOTAuMjQsMTA0LjQyVDM3MDIuMTUsMTQ0Ny41OVptMTEuOTQtNzMuMTFxNjQuMTMsMCwxMTIuNjItMzAuNTd0NzYuODItODQuMjhxMjguMzItNTMuNjksMjguMzQtMTIyLjMzdi00OS4yM2gtNDQuNzRxLTEzNC4yOCwwLTIwOS42LDExLjk0dC0xMDUuMTYsNDEuNzZxLTI5Ljg0LDI5Ljg1LTI5LjgzLDgyLDAsNjcuMTMsNDYuMjMsMTA4LjlUMzcxNC4wOSwxMzc0LjQ4WiIvPjwvZz48L2c+PC9nPjwvc3ZnPg==); --provider-logo-dark: url(data:image/svg+xml;base64,PHN2ZyBpZD0iTE9HT19CTFVFIiBkYXRhLW5hbWU9IkxPR08gQkxVRSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgdmlld0JveD0iMCAwIDQwMTkuODkgMTc3NS43NiI+PGRlZnM+PHN0eWxlPi5jbHMtMXtmaWxsOm5vbmU7fS5jbHMtMntmaWxsOiM2ZWQyMTY7fS5jbHMtM3tjbGlwLXBhdGg6dXJsKCNjbGlwLXBhdGgpO30uY2xzLTR7ZmlsbDojMjAyOTQyO308L3N0eWxlPjxjbGlwUGF0aCBpZD0iY2xpcC1wYXRoIj48cGF0aCBpZD0iTUFTUVVFIiBjbGFzcz0iY2xzLTEiIGQ9Ik00MDM4LjQyLDE0OCwxNDg4LjcsMTQyLjQyczM1NC4zMiwyNzAuNywzMjkuMzgsODA1YzAsMCwyLjY5LDMxMS42OC0yNTIuNTUsNTgwLjU0bDI0NzIuODktMTQuNzVaIi8+PC9jbGlwUGF0aD48L2RlZnM+PGcgaWQ9IlBBU1RJTExFIj48cGF0aCBjbGFzcz0iY2xzLTIiIGQ9Ik02OS4yNSwxMjE3LjY1YzEyLjkzLDAsMjgsNC40Myw0NS4yNSwxMyw4LjYyLDMuMjQsMTcsNi44LDI1LjA3LDEwLjUyczE3LjQ5LDguMzgsMjguMjksMTMuNzZBNzYwLjQ3LDc2MC40NywwLDAsMCwyNDMsMTI4MHE0Mi43NSwxMiwxMDQuMzQsMTYuOTJjNC4yNywxLjE5LDEwLjIsMS41OSwxNy43NSwxLjU5cTU0LjkzLDMuMzMsOTUuMzYtOS42NnQ2OC0zMi4zNWMxOC4zMS0xNCwzMi41OS0yOS41OCw0Mi43OS00Ni45MWExMzQuNywxMzQuNywwLDAsMCwxOC42Mi01My4zMSw0OC40OSw0OC40OSwwLDAsMSwuNzktOC4xNSw1Miw1MiwwLDAsMCwuODMtOC4wN3EwLTQzLjU0LTI0LjI5LTgwLjg0UTU0MywxMDIzLjc1LDQ5Ny42OSw5OTQuNnEtNDUuMTktMzAuNzItMTA0LjIxLTU1Ljc3VDI3MS40LDg4OS41MXEtNTkuODgtMjIuNjUtMTAzLjUtNTQuMTFUOTUuMTIsNzY1LjA4Yy0zMy4xOC00NC01MS4xOC05MS42OC01NC41NC0xNDMuMTdhODg5LjUxLDg4OS41MSwwLDAsMCwyMy4zLDU5Ni42QTQyLjI4LDQyLjI4LDAsMCwxLDY5LjI1LDEyMTcuNjVaIi8+PHBhdGggY2xhc3M9ImNscy0yIiBkPSJNMTczNi4xNiw3OTAuOWExOTUuNDUsMTk1LjQ1LDAsMCwxLTQ2LjA4LDEwLjQ0LDQzNi40MSw0MzYuNDEsMCwwLDEtNDYsMi40NmMtNy42LDAtMTQuMzYtLjI1LTIwLjI1LS44cy0xMS41OS0uNzktMTctLjc5YTIwNS4yNywyMDUuMjcsMCwwLDAtMzIuMzUsMy4xN2MtMTIuOSwyLjEzLTI3LDctNDIsMTQuNjMtMTQsNy41MS0yOC4wOCwxOC00MiwzMS41NnEtMjEsMjAtMzUuNjEsNTUuNzdjLTYuNDQsMTUtMTEuNjIsMzIuODMtMTUuMzQsNTMuMzFzLTUuNjgsNDMuNTktNS42OCw2OS41M1YxMjA4YTMwMi4xOSwzMDIuMTksMCwwLDEtOS43LDc1LjIzLDE5Ny4yMiwxOTcuMjIsMCwwLDEtMzIuMzEsNjguNjZxLTIyLjY4LDMwLjc1LTYwLjYzLDQ5LjM1dC05MywxOC41OVYxMTY0LjI5bC0xLjU4LTExMS41MnEwLTgwLjkxLDIzLjQyLTE1MS4xN1QxMzMwLjM3LDc3OGEzNTIuMzQsMzUyLjM0LDAsMCwxLDExMS41Ny04Mi41OHE2NC43MS0zMC43MSwxNDcuMTMtMzAuNjlBNDAyLjQ4LDQwMi40OCwwLDAsMSwxNjY3LjUsNjcycTM2LjM4LDcuMzgsNjMuODcsMTUuMzVjNy44OCwyLjM3LDE1LjQ3LDQuOSwyMy4xMSw3LjQzQzE2NjYuMTksMjk3LjI5LDEzMTEuOSwwLDg4Ny44MywwLDYwMy40MywwLDM1MC41LDEzMy44OCwxODgsMzQxLjg0YzI5LjI2LTE3LjA5LDU5LjkxLTI5LjI3LDkyLjE5LTM2LDM2LjE1LTcuNTIsNzAuODMtMTAuNzYsMTA0LjM0LTkuNjksOC41NywwLDE0LjUxLjU1LDE3Ljc1LDEuNThRNTA5LDMwNS44Niw1ODEsMzMyLjUxdDExNS42MSw1Ny4zNHEyMi42NSwxNC42NywzNy4xOCwyOC4zMkEzNDguNzIsMzQ4LjcyLDAsMCwxLDc1OCw0NDMuMjhjNy41Niw4LjYyLDE0LDE2LjEzLDE5LjQyLDIyLjYybDMuMjQsNi40OS0zLjI0LDQuODJjLTEwLjc2LDE0LTIyLjExLDI0LjI0LTMzLjkzLDMwLjczYTM3LjgxLDM3LjgxLDAsMCwxLTE3LDguMDcsMTAwLDEwMCwwLDAsMS0xOC41OSwxLjU5LDY1LjA2LDY1LjA2LDAsMCwxLTIxLTMuMjFxLTkuNjktMy4xNS0yMi42Mi04LjA3Yy0xOC40LTguNjItMzYuNjctMTYuNjktNTUtMjQuMjRRNTc3LDQ2OS4xNCw1MzQuMTMsNDU2LjIxdC0xMDQuMy0xNy44YTI1LDI1LDAsMCwxLTYuNDUtLjc5LDI5LjM0LDI5LjM0LDAsMCwwLTYuNTItLjgzcS03MS4xNi0zLjIxLTExNy45NSwyOS4xMS00OC42LDMwLjc1LTU4LjI5LDgwLjg0LTMuMjEsMTYuMi0zLjIsMjIuNjIsMCwzNy4yNywxOS40MSw2M2MxMi45MywxNy4xOSwzMS43MiwzMy40Niw1Ni42LDQ4LjU3cTM1LjQ2LDIxLDgwLDM4LDQ0LjM4LDE3LDg5LjY3LDM0LjhhODY0LjY1LDg2NC42NSwwLDAsMSwxMTkuNjksNTYuNTFxNTYuNTIsMzIuMzIsMTAwLjI0LDc0LjRhMzQyLDM0MiwwLDAsMSw2Ny4wNyw5NC42MXEyNSw1Mi41NiwyMS44MywxMTguODF2MTIuMjNhNzUuNzcsNzUuNzcsMCwwLDEtMS41OCwxMy42OHEtOS43NSw4Mi40Ni00Ny43NywxNDMuMDl0LTkzLDk5LjQzYTM1OC42NiwzNTguNjYsMCwwLDEtMTIwLjQzLDU4LjIycS02NS40NCwxNy42OC0xMjguNTQsMTYuMjJhNTIsNTIsMCwwLDAtMTIuODktMS42NmgtMTNRMjY4LDE0MjgsMTk2LjkyLDE0MDAuNDNjLTE3LjQtNi42NC0zMy4xNC0xMy41My00OC4xMy0yMC40MSwxNTkuMTksMjM4LjU3LDQzMC43MSwzOTUuNzQsNzM5LDM5NS43NCw0OTAuMzUsMCw4ODcuODQtMzk3LjQ4LDg4Ny44NC04ODcuODRhOTAzLjYsOTAzLjYsMCwwLDAtNy43MS0xMTZBMTQ0LDE0NCwwLDAsMSwxNzM2LjE2LDc5MC45Wm0tNjM3Ljc5LDQ5NS42MXEuNzcsMzQuNzcsMi40LDY5LjQ1YzEsMjMuMjYsMi42Niw0NC40Niw0LjgzLDYzLjkxaC05LjdxLTU0LjkzLDAtOTEuMzYtMTguNTl0LTU5LTQ5LjM1YTIwMC41MSwyMDAuNTEsMCwwLDEtMzEuNTEtNjkuNSwzMTkuNjEsMzE5LjYxLDAsMCwxLTguOS03NC40M1Y4NzYuNTdhMzI5Ljc4LDMyOS43OCwwLDAsMSw4LjktNzUuMjMsMTg0LjEzLDE4NC4xMywwLDAsMSwzMS41Mi02OC42NnEyMi41OS0zMC43Miw1OS00OS4yOHQ5MS4zNi0xOC42Nmg5LjY5Yy0yLjE3LDE5LjM3LTMuOCw0MC43My00LjgzLDYzLjgycy0xLjg5LDQ2LjIxLTIuNCw2OC44My0uODQsNDMuODItLjg0LDYzLjgzdjM2MC40NmMwLDIwLC4yOSw0MS41My44NSw2NC43OVptLTUuNy03OTYuMzFhMTIzLjUsMTIzLjUsMCwwLDEtNDIuOCw0My42MlExMDIzLjE5LDU1MCw5OTQuMDcsNTUwcS0yNC4yNywwLTUwLjE1LTEzUTkxOCw1MjIuNDMsOTA0LjM3LDQ5Ny40MWExMDkuOTMsMTA5LjkzLDAsMCwxLTEzLjgyLTU0LjE4YzAtMTkuNDMsNC45Mi0zOC43NiwxNC41Ny01OC4yMkExMjIuODUsMTIyLjg1LDAsMCwxLDk0OCwzNDEuMzVhMTA5LDEwOSwwLDAsMSw1Ny40My0xNi4xOCw5Ni40Miw5Ni40MiwwLDAsMSw0OC40NSwxM2MxOC4zMSw5LjY1LDMxLjgsMjMuMjEsNDAuNDIsNDAuMzlhMTE4LjM3LDExOC4zNywwLDAsMSwxMyw1My4zNHEtLjA3LDI5LjE0LTE0LjY2LDU4LjI2WiIvPjwvZz48ZyBpZD0iREFUQSI+PGcgY2xhc3M9ImNscy0zIj48ZyBpZD0iTEVUVFJFUyI+PHBhdGggY2xhc3M9ImNscy00IiBkPSJNMTcxNS42LDE0NDkuNzRxLTk4LjQ2LDAtMTcwLjA2LTQ1LjV0LTExMS4xMy0xMjkuNzhxLTM5LjU2LTg0LjI3LTM5LjUzLTE5OS4xNSwwLTE3MS41NCw4Ni41Mi0yNzN0MjM0LjItMTAxLjQzcTg2LjUyLDAsMTUyLjkxLDM5LjUzdDk5LjIsMTA4LjE0VjQyMy40MnEwLTQ2LjI1LDQ0Ljc1LTQ2LjI0LDQ2LjI0LDAsNDYuMjQsNDYuMjRWMTQwMC41cTAsNDYuMjYtNDQuNzUsNDYuMjYtNDYuMjMsMC00Ni4yNC00Ni4yNnYtOTguNDVxLTMyLjgyLDY4LjYzLTk5LjIsMTA4LjE2VDE3MTUuNiwxNDQ5Ljc0Wm0xMS45NC03Ni4wOXExMTAuNCwwLDE3Ni03OC4zMXQ2NS42NS0yMjBxMC0xNDEuNy02NS42NS0yMTkuMjh0LTE3Ni03Ny41N3EtMTEwLjM4LDAtMTc1LjI4LDc3LjU3dC02NC44OSwyMTkuMjhxMCwxNDEuNzIsNjQuODksMjIwVDE3MjcuNTQsMTM3My42NVoiLz48cGF0aCBjbGFzcz0iY2xzLTQiIGQ9Ik0yNDM1LjEzLDE0NDcuNTlxLTczLjExLDAtMTMwLjU0LTI4LjM0dC05MS03Ny41N3EtMzMuNTYtNDkuMjUtMzMuNTYtMTEwLjM5LDAtODAuNTcsNDAuMjctMTI2LjA2dDEzNS43NS02NC44OXE5NS40Ny0xOS4zNiwyNjIuNTQtMTkuMzloNDYuMjR2LTUzLjdxMC05OS45NC00MC4yNy0xNDUuNDRUMjQ5Ni4zLDc3Ni4zYTQxMC42NCw0MTAuNjQsMCwwLDAtMTEwLjQsMTQuOTNRMjMzMi4yLDgwNi4xNiwyMjc0LDgzOXEtMjYuODYsMTQuOTQtNDIuNTIuNzV0LTE0LjkyLTM3LjI4cS43NS0yMy4xMywyNC42Mi0zNS4wN0E1MzQuNDgsNTM0LjQ4LDAsMCwxLDIzNjgsNzE1Ljg5cTY1LjY0LTE3LjE2LDEyNi44MS0xNy4xNSwxMzEuMjgsMCwxOTQuNjcsNjcuMTN0NjMuNCwyMDUuODR2NDI2LjY0cTAsNDYuMjYtNDEuNzYsNDYuMjUtNDQuNzksMC00NC43Ny00Ni4yNXYtOTIuNDhxLTI5Ljg0LDY3LjEzLTkwLjI1LDEwNC40MlQyNDM1LjEzLDE0NDcuNTlabTExLjk0LTczLjExcTY0LjEzLDAsMTEyLjYyLTMwLjU3dDc2LjgyLTg0LjI4cTI4LjMyLTUzLjY5LDI4LjM0LTEyMi4zM3YtNDkuMjNIMjYyMC4xcS0xMzQuMjYsMC0yMDkuNTksMTEuOTR0LTEwNS4xNiw0MS43NnEtMjkuODMsMjkuODUtMjkuODQsODIsMCw2Ny4xMyw0Ni4yNCwxMDguOVQyNDQ3LjA3LDEzNzQuNDhaIi8+PHBhdGggY2xhc3M9ImNscy00IiBkPSJNMzIyNC4wOSwxNDQ3LjE5cS0xMjAuODQsMC0xODEuMjYtNjUuNjV0LTYwLjQxLTE4OFY3ODQuODRIMjg3MnEtNDMuMjgsMC00My4yNS0zNy4yOCwwLTM1LjgsNDMuMjUtMzUuODFoMTEwLjM5VjUyNS4yOHEwLTQ2LjI0LDQ2LjI2LTQ2LjI0LDQ0LjczLDAsNDQuNzUsNDYuMjRWNzExLjc1SDMyNzQuOHE0MS43NiwwLDQxLjc4LDM1LjgxLDAsMzcuMjgtNDEuNzgsMzcuMjhIMzA3My40M3YzOTYuODJxMCw5MSwzNy4yOCwxMzguNzN0MTIzLjgzLDQ3LjczcTI5Ljg0LDAsNDkuMjItNi43dDM0LjMyLTYuNzNxMjYuODQsMCwyNi44NSwzNy4zYTUzLjg5LDUzLjg5LDAsMCwxLTUuMjQsMjMuMTFxLTUuMjQsMTEuMTktMTguNjMsMTUuNjdjLTEwLjk1LDQtMjUuODgsNy42OS00NC43NiwxMS4yQTI5MSwyOTEsMCwwLDEsMzIyNC4wOSwxNDQ3LjE5WiIvPjxwYXRoIGNsYXNzPSJjbHMtNCIgZD0iTTM3MDIuMTUsMTQ0Ny41OXEtNzMuMTEsMC0xMzAuNTMtMjguMzR0LTkxLTc3LjU3cS0zMy41NS00OS4yNS0zMy41Ni0xMTAuMzksMC04MC41Nyw0MC4yNy0xMjYuMDZ0MTM1Ljc1LTY0Ljg5cTk1LjQ3LTE5LjM2LDI2Mi41NC0xOS4zOWg0Ni4yNHYtNTMuN3EwLTk5Ljk0LTQwLjI3LTE0NS40NFQzNzYzLjMyLDc3Ni4zYTQxMC41Nyw0MTAuNTcsMCwwLDAtMTEwLjM5LDE0LjkzUTM1OTkuMjIsODA2LjE2LDM1NDEsODM5cS0yNi44NiwxNC45NC00Mi41MS43NXQtMTQuOTMtMzcuMjhxLjc1LTIzLjEzLDI0LjYyLTM1LjA3QTUzNC42NSw1MzQuNjUsMCwwLDEsMzYzNSw3MTUuODlxNjUuNjQtMTcuMTYsMTI2LjgxLTE3LjE1LDEzMS4yOCwwLDE5NC42Nyw2Ny4xM3Q2My40LDIwNS44NHY0MjYuNjRxMCw0Ni4yNi00MS43Niw0Ni4yNS00NC43OSwwLTQ0Ljc3LTQ2LjI1di05Mi40OHEtMjkuODQsNjcuMTMtOTAuMjQsMTA0LjQyVDM3MDIuMTUsMTQ0Ny41OVptMTEuOTQtNzMuMTFxNjQuMTMsMCwxMTIuNjItMzAuNTd0NzYuODItODQuMjhxMjguMzItNTMuNjksMjguMzQtMTIyLjMzdi00OS4yM2gtNDQuNzRxLTEzNC4yOCwwLTIwOS42LDExLjk0dC0xMDUuMTYsNDEuNzZxLTI5Ljg0LDI5Ljg1LTI5LjgzLDgyLDAsNjcuMTMsNDYuMjMsMTA4LjlUMzcxNC4wOSwxMzc0LjQ4WiIvPjwvZz48L2c+PC9nPjwvc3ZnPg==); --vh: 10.18px;">
    <div class="sd-cmp-2jVB1"></div>
  </div>
</body>

</html>