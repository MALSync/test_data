<html lang="fr">

<head>
  <script async=""
    src="https://www.googletagmanager.com/gtm.js?id=GTM-5D6VC2L&amp;gtm_auth=&amp;gtm_preview=&amp;gtm_cookies_win=x"></script>
  <script>
    (function (w, d, s, l, i) {
      w[l] = w[l] || [];
      w[l].push({ 'gtm.start': new Date().getTime(), event: 'gtm.js', });
      var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : '';
      j.async = true; j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl + '&gtm_auth=&gtm_preview=&gtm_cookies_win=x';
      f.parentNode.insertBefore(j, f);
    })(window, document, 'script', 'dataLayer', 'GTM-5D6VC2L');</script>
  <style class="vjs-styles-defaults">
    .video-js {
      width: 300px;
      height: 150px;
    }

    .vjs-fluid {
      padding-top: 56.25%
    }
  </style>
  <script async=""
    src="https://www.googletagmanager.com/gtm.js?id=GTM-5D6VC2L&amp;gtm_auth=&amp;gtm_preview=&amp;gtm_cookies_win=x"></script>
  <script>
    (function (w, d, s, l, i) {
      w[l] = w[l] || [];
      w[l].push({ 'gtm.start': new Date().getTime(), event: 'gtm.js', });
      var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : '';
      j.async = true; j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl + '&gtm_auth=&gtm_preview=&gtm_cookies_win=x';
      f.parentNode.insertBefore(j, f);
    })(window, document, 'script', 'dataLayer', 'GTM-5D6VC2L');</script>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width">
  <link rel="alternate" hreflang="fr-FR"
    href="https://animationdigitalnetwork.com/video/267-hunter-x-hunter-2011/3533-episode-70"
    data-testid="hreflang-fr-FR">
  <link rel="alternate" hreflang="x-default"
    href="https://animationdigitalnetwork.com/video/267-hunter-x-hunter-2011/3533-episode-70"
    data-testid="hreflang-x-default">
  <link rel="canonical" href="https://animationdigitalnetwork.com/video/267-hunter-x-hunter-2011/3533-episode-70">
  <title>Hunter x Hunter (2011) - Arc 05 : Greed Island Épisode 70 : Volonté et amitié ! - streaming - VF et VOSTFR -
    ADN</title>
  <meta name="description"
    content="Retrouvez Hunter x Hunter (2011) - Épisode 70 en streaming VF et VOSTFR sur Animation Digital Network ! Qualité HD 1080p, HD 720p et SD 480p.">
  <meta name="keywords"
    content="streaming, VOD, animé, japonais, anime, alternative légale, vidéo à la demande, ADN, vostfr, vostf, vf, vo, replay, manga, version française, version originale, version doublée, dessin animé, gratuit, abonnement">
  <meta name="robots" content="index">
  <meta property="og:title"
    content="Hunter x Hunter (2011) - Arc 05 : Greed Island Épisode 70 : Volonté et amitié ! - streaming - VF et VOSTFR - ADN">
  <meta property="og:type" content="video.episode">
  <meta property="og:image" content="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps70_640x360.jpg">
  <meta property="og:description"
    content="Retrouvez Hunter x Hunter (2011) - Épisode 70 en streaming VF et VOSTFR sur Animation Digital Network ! Qualité HD 1080p, HD 720p et SD 480p.">
  <meta property="og:url" content="https://animationdigitalnetwork.com/video/267-hunter-x-hunter-2011/3533-episode-70">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:site" content="ADNanime">
  <meta property="twitter:creator" content="ADNanime">
  <meta property="twitter:description"
    content="Retrouvez Hunter x Hunter (2011) - Épisode 70 en streaming VF et VOSTFR sur Animation Digital Network ! Qualité HD 1080p, HD 720p et SD 480p.">
  <meta property="twitter:title"
    content="Hunter x Hunter (2011) - Arc 05 : Greed Island Épisode 70 : Volonté et amitié ! - streaming - VF et VOSTFR - ADN">
  <meta property="twitter:image:src"
    content="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps70_640x360.jpg">
  <script async="" defer="">
    window.googletag = window.googletag || { cmd: [] };
    googletag.cmd.push(function () {
      // Destroy slots before creating new ones
      googletag.destroySlots();

      // Disabling initial load before enabling service, only if it's not the first route visited by user
      if (false) {
        googletag.pubads().disableInitialLoad();
      }

      // new Google slots

      window.googletag
        .defineSlot('/21835257576/ADN_RECTANGLE_TOP', [[970, 90], [728, 90], [970, 250]], 'div-gpt-ad-1569230740302-0')
        .addService(window.googletag.pubads());


      window.googletag
        .defineSlot('/21835257576/ADN_INTERSTITIAL', [1, 1], 'div-gpt-ad-1627562754480-0')
        .addService(window.googletag.pubads());


      // enable services
      googletag.pubads().enableLazyLoad({

        renderMarginPercent: 0
      });
      googletag.pubads().enableSingleRequest();
      googletag.enableServices();

      // Refresh ads only if it's not the first route visited by user
      if (false) {
        googletag.pubads().refresh();
      }
    });
  </script>
  <meta name="next-head-count" content="21">
  <meta name="theme-color" content="#0096FF">
  <meta name="apple-itunes-app" content="app-id=667935767">
  <link rel="icon" href="/favicon.ico">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon/favicon-32x32.webp">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon/favicon-16x16.webp">
  <link rel="mask-icon" href="/images/favicon/safari-pinned-tab.svg" color="#0096ff">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/favicon/apple-touch-icon.webp">
  <meta name="msapplication-TileColor" content="#04121a">
  <meta name="msapplication-config" content="/browserconfig.xml">
  <link rel="manifest" href="/manifest.json" crossorigin="use-credentials">
  <link rel="stylesheet"
    data-href="https://fonts.googleapis.com/css?family=Poppins:200,400,600,700,800&amp;display=swap">
  <link rel="stylesheet"
    data-href="https://fonts.googleapis.com/css?family=Unbounded:200,400,600,700,800&amp;display=swap">
  <link rel="stylesheet" data-href="https://fonts.googleapis.com/css?family=Inter:200,400,600,700,800&amp;display=swap">
  <link rel="stylesheet" data-href="https://fonts.googleapis.com/css2?family=Bebas+Neue&amp;display=swap">
  <link href="/vendor/ads/interstitiel.min.css" rel="stylesheet">
  <link rel="preload" href="/_next/static/css/bc427d470fe4209b.css" as="style">
  <link rel="stylesheet" href="/_next/static/css/bc427d470fe4209b.css" data-n-g=""><noscript data-n-css=""></noscript>
  <script defer="" nomodule="" src="/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script>
  <script src="/_next/static/chunks/webpack-46c6a5884c5dd2f4.js" defer=""></script>
  <script src="/_next/static/chunks/framework-a667dbba83e63e79.js" defer=""></script>
  <script src="/_next/static/chunks/main-b8a3d3c2da235587.js" defer=""></script>
  <script src="/_next/static/chunks/pages/_app-3ab58f4a11bc6fa3.js" defer=""></script>
  <script src="/_next/static/chunks/7536-051d0de4ef9bc9ad.js" defer=""></script>
  <script src="/_next/static/chunks/9491-6fcde69d78e87c27.js" defer=""></script>
  <script src="/_next/static/chunks/5589-10f80fffd3c3fce8.js" defer=""></script>
  <script src="/_next/static/chunks/9185-2d23de81aa7b5293.js" defer=""></script>
  <script src="/_next/static/chunks/1622-7ae19a9edc64d726.js" defer=""></script>
  <script src="/_next/static/chunks/6327-e8320ac5e0810ca6.js" defer=""></script>
  <script src="/_next/static/chunks/530-6ee41c80621d63cd.js" defer=""></script>
  <script src="/_next/static/chunks/198-d19a3c80e88ab04c.js" defer=""></script>
  <script src="/_next/static/chunks/7183-fa70af9dc01f0d6a.js" defer=""></script>
  <script src="/_next/static/chunks/871-3ff70bbca48fa17e.js" defer=""></script>
  <script src="/_next/static/chunks/4995-c37805957366adfe.js" defer=""></script>
  <script src="/_next/static/chunks/9267-b53a25c23bab6c91.js" defer=""></script>
  <script src="/_next/static/chunks/338-978e6a66f154811c.js" defer=""></script>
  <script src="/_next/static/chunks/pages/video/%5Bshow%5D/%5Bvideo%5D-8960e3721917031e.js" defer=""></script>
  <script src="/_next/static/iyQTl64NN8C5sAy274F3k/_buildManifest.js" defer=""></script>
  <script src="/_next/static/iyQTl64NN8C5sAy274F3k/_ssgManifest.js" defer=""></script>
  <style data-styled="active" data-styled-version="5.3.6"></style>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins:200,400,600,700,800&amp;display=swap">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Unbounded:200,400,600,700,800&amp;display=swap">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Inter:200,400,600,700,800&amp;display=swap">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Bebas+Neue&amp;display=swap">
  <script async="" src="https://static.hotjar.com/c/hotjar-2359970.js?sv=6"></script>
  <script src="/vendor/player/cryptojs.min.js"></script>
  <script src="/vendor/player/jsencrypt.min.js"></script>
  <script src="/vendor/player/videojs.min.js"></script>
  <script src="//imasdk.googleapis.com/js/sdkloader/ima3.js"></script>
  <link as="script" rel="prefetch" href="/_next/static/chunks/810-cb10a4ae5a7fa2ae.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/8915-e5955a54d5fed2da.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/pages/index-5efe5a4036b770bd.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/pages/subscribe-66a9d0ec4ce66d12.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/9674-a92b15f41282fdf3.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/1886-b6708b1ccf514116.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/pages/login-d41f518f3ba65d9f.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/3542-dad9f0e4c53e3582.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/pages/video/%5Bshow%5D-d4cbff5a9a347df6.js">
  <script src="/vendor/player/adn-vjs.052a92d454d450241c225b1e727d2a977cd7c483.min.js" async=""></script>
  <link as="script" rel="prefetch" href="/_next/static/chunks/1228-876948f3a681bc07.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/1890-1f16143645f13c9a.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/pages/video-8ef36a41d24e13c8.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/pages/new-on-adn-38f18febe4ddacbd.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/4376-283f5664401d0749.js">
  <link as="script" rel="prefetch" href="/_next/static/chunks/pages/live-93f49a6cdfeb74c4.js">
  <script src="/vendor/player/videojs.ima.min.js" async=""></script>
  <script src="https://securepubads.g.doubleclick.net/tag/js/gpt.js" async="" defer=""></script>
  <script src="/vendor/ads/interstitiel.min.js" async="" defer=""></script>
  <script src="https://securepubads.g.doubleclick.net/tag/js/gpt.js" async="" defer=""></script>
  <script src="/vendor/ads/interstitiel.min.js" async="" defer=""></script>
  <script type="text/javascript"
    src="https://js.sddan.com/GS.d?pa=27993&amp;c=LrSl1&amp;cmp=0&amp;u=https%3A%2F%2Fanimationdigitalnetwork.com%2Fvideo%2F267-hunter-x-hunter-2011%2F3533-episode-70&amp;r=&amp;rand=1721906366055&amp;gdpr=1&amp;gdpr_consent=CQCT9cAQCT9cABcAKBDEA-FgAP_gAEPgAAqIIzQJwABQAKAAsACoAGQAQAAqABbADQANQAigBNAC3AGEAYgA5QCDAIQAToApABcAD0AIQAR0AzoBoADRAGvANoAjsBHoCXgE_gLzAYuAxkBkgDkwHUAPSAgOBGQCMwIzQEoAFAAWABUAEEANAA1ADEAH4AQgBCACLAEdANEAa8A2gCPQF5gMEAZIA5MAAA&amp;globalscope=false&amp;cookieless_ignore=0&amp;fb_consent=1&amp;tbp=true"
    async="" referrerpolicy="unsafe-url"></script>
  <style type="text/css">
    .sd-cmp-xwtxB {
      overflow: hidden !important
    }

    .sd-cmp-1EpGs {
      /*! normalize.css v7.0.0 | MIT License | github.com/necolas/normalize.css */
      --modal-width: 610px;
      --background-color: #fafafa;
      --main-color: #202942;
      --title-color: #202942;
      --text-color: #8492a6;
      --border-color: #e9ecef;
      --overlay-color: #000;
      --background-color-dark: #121725;
      --main-color-dark: #5a6d90;
      --title-color-dark: #5a6d90;
      --text-color-dark: #8492a6;
      --border-color-dark: #202942;
      --overlay-color-dark: #000;
      --border-radius: 24px;
      --font-family: "Roboto";
      --font-family-title: "Roboto Slab";
      --font-size-base: 13px;
      --font-size-big: calc(var(--font-size-base) + 2px);
      --font-size-small: calc(var(--font-size-base) - 2px);
      --font-size-xsmall: calc(var(--font-size-base) - 4px);
      --font-size-xxsmall: calc(var(--font-size-base) - 6px);
      --logo-size: 80px;
      --logo-offset: -20px;
      --skin-size: 75px;
      --spacing-base: 5px;
      --spacing-sm: var(--spacing-base);
      --spacing-md: calc(var(--spacing-base) + 5px);
      --spacing-lg: calc(var(--spacing-base) + 10px);
      --padding-base: 15px;
      --padding-sm: var(--padding-base);
      --padding-md: calc(var(--padding-base) + 10px)
    }

    .sd-cmp-1EpGs html {
      line-height: 1.15;
      -ms-text-size-adjust: 100%;
      -webkit-text-size-adjust: 100%
    }

    .sd-cmp-1EpGs body {
      margin: 0
    }

    .sd-cmp-1EpGs article,
    .sd-cmp-1EpGs aside,
    .sd-cmp-1EpGs footer,
    .sd-cmp-1EpGs header,
    .sd-cmp-1EpGs nav,
    .sd-cmp-1EpGs section {
      display: block
    }

    .sd-cmp-1EpGs h1 {
      font-size: 2em;
      margin: .67em 0
    }

    .sd-cmp-1EpGs figcaption,
    .sd-cmp-1EpGs figure,
    .sd-cmp-1EpGs main {
      display: block
    }

    .sd-cmp-1EpGs figure {
      margin: 1em 40px
    }

    .sd-cmp-1EpGs hr {
      -webkit-box-sizing: content-box;
      box-sizing: content-box;
      height: 0;
      overflow: visible
    }

    .sd-cmp-1EpGs pre {
      font-family: monospace, monospace;
      font-size: 1em
    }

    .sd-cmp-1EpGs a {
      background-color: transparent;
      -webkit-text-decoration-skip: objects
    }

    .sd-cmp-1EpGs a,
    .sd-cmp-1EpGs span {
      -webkit-touch-callout: none;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none
    }

    .sd-cmp-1EpGs abbr[title] {
      border-bottom: none;
      text-decoration: underline;
      -webkit-text-decoration: underline dotted;
      text-decoration: underline dotted
    }

    .sd-cmp-1EpGs b,
    .sd-cmp-1EpGs strong {
      font-weight: inherit;
      font-weight: bolder
    }

    .sd-cmp-1EpGs code,
    .sd-cmp-1EpGs kbd,
    .sd-cmp-1EpGs samp {
      font-family: monospace, monospace;
      font-size: 1em
    }

    .sd-cmp-1EpGs dfn {
      font-style: italic
    }

    .sd-cmp-1EpGs mark {
      background-color: #ff0;
      color: #000
    }

    .sd-cmp-1EpGs small {
      font-size: 80%
    }

    .sd-cmp-1EpGs sub,
    .sd-cmp-1EpGs sup {
      font-size: 75%;
      line-height: 0;
      position: relative;
      vertical-align: baseline
    }

    .sd-cmp-1EpGs sub {
      bottom: -.25em
    }

    .sd-cmp-1EpGs sup {
      top: -.5em
    }

    .sd-cmp-1EpGs audio,
    .sd-cmp-1EpGs video {
      display: inline-block
    }

    .sd-cmp-1EpGs audio:not([controls]) {
      display: none;
      height: 0
    }

    .sd-cmp-1EpGs img {
      border-style: none
    }

    .sd-cmp-1EpGs svg:not(:root) {
      overflow: hidden
    }

    .sd-cmp-1EpGs button,
    .sd-cmp-1EpGs input,
    .sd-cmp-1EpGs optgroup,
    .sd-cmp-1EpGs select,
    .sd-cmp-1EpGs textarea {
      font-size: 100%;
      line-height: 1.15;
      margin: 0;
      height: auto
    }

    .sd-cmp-1EpGs button,
    .sd-cmp-1EpGs input {
      overflow: visible
    }

    .sd-cmp-1EpGs button,
    .sd-cmp-1EpGs select {
      text-transform: none
    }

    .sd-cmp-1EpGs [type=reset],
    .sd-cmp-1EpGs [type=submit],
    .sd-cmp-1EpGs button,
    .sd-cmp-1EpGs html [type=button] {
      -webkit-appearance: button
    }

    .sd-cmp-1EpGs [type=button]::-moz-focus-inner,
    .sd-cmp-1EpGs [type=reset]::-moz-focus-inner,
    .sd-cmp-1EpGs [type=submit]::-moz-focus-inner,
    .sd-cmp-1EpGs button::-moz-focus-inner {
      border-style: none;
      padding: 0
    }

    .sd-cmp-1EpGs [type=button]:-moz-focusring,
    .sd-cmp-1EpGs [type=reset]:-moz-focusring,
    .sd-cmp-1EpGs [type=submit]:-moz-focusring,
    .sd-cmp-1EpGs button:-moz-focusring {
      outline: 1px dotted ButtonText
    }

    .sd-cmp-1EpGs button {
      white-space: normal
    }

    .sd-cmp-1EpGs fieldset {
      padding: .35em .75em .625em
    }

    .sd-cmp-1EpGs legend {
      -webkit-box-sizing: border-box;
      box-sizing: border-box;
      color: inherit;
      display: table;
      max-width: 100%;
      padding: 0;
      white-space: normal
    }

    .sd-cmp-1EpGs progress {
      display: inline-block;
      vertical-align: baseline
    }

    .sd-cmp-1EpGs textarea {
      overflow: auto
    }

    .sd-cmp-1EpGs [type=checkbox],
    .sd-cmp-1EpGs [type=radio] {
      -webkit-box-sizing: border-box;
      box-sizing: border-box;
      padding: 0
    }

    .sd-cmp-1EpGs [type=number]::-webkit-inner-spin-button,
    .sd-cmp-1EpGs [type=number]::-webkit-outer-spin-button {
      height: auto
    }

    .sd-cmp-1EpGs [type=search] {
      -webkit-appearance: textfield;
      outline-offset: -2px
    }

    .sd-cmp-1EpGs [type=search]::-webkit-search-cancel-button,
    .sd-cmp-1EpGs [type=search]::-webkit-search-decoration {
      -webkit-appearance: none
    }

    .sd-cmp-1EpGs ::-webkit-file-upload-button {
      -webkit-appearance: button;
      font: inherit
    }

    .sd-cmp-1EpGs details,
    .sd-cmp-1EpGs menu {
      display: block
    }

    .sd-cmp-1EpGs summary {
      display: list-item
    }

    .sd-cmp-1EpGs canvas {
      display: inline-block
    }

    .sd-cmp-1EpGs [hidden],
    .sd-cmp-1EpGs template {
      display: none
    }

    .sd-cmp-1EpGs.sd-cmp-1Icfl {
      --modal-width: 560px;
      --font-size-base: 12px;
      --logo-size: 70px;
      --logo-offset: -15px;
      --skin-size: 65px;
      --spacing-base: 3px;
      --padding-base: 13px
    }

    .sd-cmp-1EpGs.sd-cmp-ziEj0 {
      --modal-width: 610px;
      --font-size-base: 13px;
      --logo-size: 80px;
      --logo-offset: -20px;
      --skin-size: 75px;
      --spacing-base: 5px;
      --padding-base: 15px
    }

    .sd-cmp-1EpGs.sd-cmp-qPvsF {
      --modal-width: 660px;
      --font-size-base: 14px;
      --logo-size: 90px;
      --logo-offset: -25px;
      --skin-size: 85px;
      --spacing-base: 7px;
      --padding-base: 17px
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-1EpGs {
        --font-size-base: 13px !important
      }
    }

    .sd-cmp-1EpGs .sd-cmp-1wlYk {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: var(--overlay-color);
      opacity: .7;
      z-index: 2147483646
    }

    .sd-cmp-1EpGs .sd-cmp-2jVB1 {
      font-size: var(--font-size-base);
      font-family: var(--font-family), Helvetica, Arial, sans-serif;
      font-weight: 400;
      -webkit-font-smoothing: antialiased;
      line-height: 1.4;
      text-align: left;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-1EpGs .sd-cmp-2jVB1 {
        line-height: 1.2
      }
    }

    .sd-cmp-1EpGs .sd-cmp-1W1Kb {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      z-index: 2147483647
    }

    .sd-cmp-1EpGs * {
      -webkit-box-sizing: border-box;
      box-sizing: border-box;
      min-width: auto;
      min-height: auto;
      margin: 0;
      padding: 0;
      line-height: unset;
      font-family: unset;
      font-size: unset;
      font-weight: unset;
      letter-spacing: normal
    }

    .sd-cmp-1EpGs a {
      font-size: inherit;
      font-weight: 700;
      cursor: pointer;
      text-decoration: underline !important;
      color: var(--text-color) !important;
      -webkit-tap-highlight-color: transparent
    }

    .sd-cmp-1EpGs a:hover {
      text-decoration: none !important
    }

    .sd-cmp-1EpGs svg {
      display: inline-block;
      vertical-align: middle;
      margin-top: -2px;
      -webkit-transition: .2s ease;
      transition: .2s ease
    }

    .sd-cmp-1EpGs h2,
    .sd-cmp-1EpGs h3 {
      font-family: inherit;
      font-size: inherit;
      background: none !important
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-1EpGs {
        --background-color: var(--background-color-dark) !important;
        --main-color: var(--main-color-dark) !important;
        --title-color: var(--title-color-dark) !important;
        --text-color: var(--text-color-dark) !important;
        --border-color: var(--border-color-dark) !important;
        --overlay-color: var(--overlay-color-dark) !important;
        --provider-logo: var(--provider-logo-dark) !important
      }
    }
  </style>
  <style type="text/css">
    .sd-cmp-1AaTO {
      position: relative;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1;
      -webkit-appearance: none !important;
      -moz-appearance: none !important;
      appearance: none !important;
      background: none !important;
      border: none !important;
      -webkit-box-shadow: none !important;
      box-shadow: none !important;
      outline: none !important;
      text-shadow: none !important;
      font-size: inherit !important;
      padding: 0 !important;
      margin: 0 !important;
      width: auto !important
    }

    .sd-cmp-1AaTO .sd-cmp-3G37o,
    .sd-cmp-1AaTO .sd-cmp-AL7Qz {
      display: block;
      font-family: var(--font-family-title), Helvetica, Arial, sans-serif;
      letter-spacing: .4pt;
      font-weight: 500;
      cursor: pointer;
      white-space: nowrap;
      width: auto;
      outline: 0
    }

    .sd-cmp-1AaTO .sd-cmp-3G37o {
      border-radius: calc(var(--border-radius)/2);
      border: 1px solid var(--main-color);
      -webkit-tap-highlight-color: transparent;
      -webkit-transition: color .1s ease-out, background .1s ease-out;
      transition: color .1s ease-out, background .1s ease-out
    }

    .sd-cmp-1AaTO .sd-cmp-AL7Qz {
      font-size: var(--font-size-base);
      color: var(--main-color);
      text-decoration: underline !important;
      padding: .55em 1.5em
    }

    @media (hover:hover) {
      .sd-cmp-1AaTO .sd-cmp-AL7Qz:hover {
        text-decoration: none !important
      }
    }

    .sd-cmp-1AaTO .sd-cmp-AL7Qz:active {
      text-decoration: none !important
    }

    .sd-cmp-1AaTO:focus {
      outline: 0
    }

    .sd-cmp-1AaTO:focus>.sd-cmp-3G37o {
      outline: 1px auto -webkit-focus-ring-color
    }

    .sd-cmp-1AaTO:hover {
      background: none !important;
      border: none !important
    }

    .sd-cmp-2SVKF {
      padding: .55em 1.5em;
      font-size: var(--font-size-small) !important;
      text-transform: lowercase !important
    }

    .sd-cmp-8Qarf {
      background: var(--main-color);
      color: var(--background-color)
    }

    @media (hover:hover) {
      .sd-cmp-8Qarf:hover {
        background: var(--background-color);
        color: var(--main-color)
      }
    }

    .sd-cmp-37Lg8,
    .sd-cmp-8Qarf:active {
      background: var(--background-color);
      color: var(--main-color)
    }

    @media (hover:hover) {
      .sd-cmp-37Lg8:hover {
        background: var(--main-color);
        color: var(--background-color)
      }

      .sd-cmp-37Lg8:hover svg {
        fill: var(--background-color)
      }
    }

    .sd-cmp-37Lg8:active {
      background: var(--main-color);
      color: var(--background-color)
    }

    .sd-cmp-37Lg8:active svg {
      fill: var(--background-color)
    }

    .sd-cmp-37Lg8 svg {
      fill: var(--main-color)
    }

    .sd-cmp-2QK_B {
      position: fixed;
      width: var(--modal-width);
      height: auto;
      top: 50%;
      left: 50%;
      -webkit-transform: translate3d(-50%, -50%, 0);
      transform: translate3d(-50%, -50%, 0);
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-pack: center;
      -ms-flex-pack: center;
      justify-content: center;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      margin: 0;
      padding: 0;
      -webkit-box-shadow: unset !important;
      box-shadow: unset !important;
      z-index: 2147483647
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-2QK_B {
        width: 100%;
        height: 100%
      }
    }

    .sd-cmp-2QK_B.sd-cmp-2Ltpa {
      top: 0 !important;
      bottom: auto !important
    }

    .sd-cmp-2QK_B.sd-cmp-32o6S,
    .sd-cmp-2QK_B.sd-cmp-2Ltpa {
      left: 0 !important;
      right: 0 !important;
      -webkit-transform: unset !important;
      transform: unset !important
    }

    .sd-cmp-2QK_B.sd-cmp-32o6S {
      top: auto !important;
      bottom: 0 !important
    }

    .sd-cmp-2QK_B.sd-cmp-oL4pt {
      left: 0 !important;
      right: unset !important
    }

    .sd-cmp-2QK_B.sd-cmp-3Pt1U {
      left: unset !important;
      right: 0 !important
    }

    .sd-cmp-2QK_B.sd-cmp-O521Y {
      width: 100%;
      max-width: 1400px;
      margin: auto
    }

    .sd-cmp-2QK_B.sd-cmp-1YoMI {
      display: none !important
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE {
      width: 100%;
      height: fit-content;
      height: -webkit-fit-content;
      height: -moz-fit-content;
      max-height: calc(100vh - 50px);
      margin: 25px;
      background: var(--background-color);
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      position: relative;
      border-radius: var(--border-radius);
      -webkit-box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137);
      box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137)
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE.sd-cmp-3S0AD {
      height: 600px
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-2QK_B .sd-cmp-1ZnvE {
        max-height: calc(var(--vh, 1vh)*100 - 25px);
        margin: 12.5px
      }
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6 {
      display: none;
      width: var(--skin-size);
      background-color: var(--background-color);
      background-position: 50%;
      background-size: cover;
      background-repeat: no-repeat;
      border-radius: var(--border-radius) 0 0 var(--border-radius)
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY {
      display: block;
      background-image: var(--skin)
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY+*+*+*+.sd-cmp-kOZlP,
    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY+*+*+.sd-cmp-kOZlP,
    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY+*+.sd-cmp-kOZlP,
    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY+.sd-cmp-kOZlP {
      border-radius: 0 var(--border-radius) var(--border-radius) 0
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-3EIuH {
      background-image: var(--skin-dark)
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY {
        display: none
      }

      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY+*+*+*+.sd-cmp-kOZlP,
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY+*+*+.sd-cmp-kOZlP,
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY+*+.sd-cmp-kOZlP,
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-1dusY+.sd-cmp-kOZlP {
        border-radius: var(--border-radius)
      }

      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-3EIuH {
        display: block
      }

      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-3EIuH+*+*+*+.sd-cmp-kOZlP,
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-3EIuH+*+*+.sd-cmp-kOZlP,
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-3EIuH+*+.sd-cmp-kOZlP,
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6.sd-cmp-3EIuH+.sd-cmp-kOZlP {
        border-radius: 0 var(--border-radius) var(--border-radius) 0
      }
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6+.sd-cmp-FhVkq {
      left: calc(var(--skin-size) + var(--padding-md))
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6 {
        display: none !important
      }

      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6+.sd-cmp-FhVkq {
        left: calc(var(--padding-md))
      }

      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6+*+*+*+.sd-cmp-kOZlP,
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6+*+*+.sd-cmp-kOZlP,
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6+*+.sd-cmp-kOZlP,
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-2w6m6+.sd-cmp-kOZlP {
        border-radius: var(--border-radius) !important
      }
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-FhVkq {
      display: none;
      width: var(--logo-size);
      height: var(--logo-size);
      position: absolute;
      top: var(--logo-offset);
      left: var(--padding-md);
      background-color: var(--background-color);
      background-position: 50%;
      background-size: 100%;
      background-repeat: no-repeat;
      -webkit-box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137);
      box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137);
      border-radius: calc(var(--border-radius)/2);
      border: 5px solid var(--background-color);
      z-index: 1
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-FhVkq.sd-cmp-1cljl {
      display: block;
      background-image: var(--logo)
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-FhVkq.sd-cmp-2PpFN {
      background-image: var(--logo-dark)
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-FhVkq.sd-cmp-1cljl {
        display: none
      }

      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-FhVkq.sd-cmp-2PpFN {
        display: block
      }
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-FhVkq {
        left: var(--padding-sm) !important
      }
    }

    @media screen and (max-width:calc(400px - 1px)) {
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-FhVkq {
        display: none !important
      }
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1;
      border-radius: var(--border-radius);
      overflow: hidden
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP:before {
      content: "";
      position: absolute;
      top: 0;
      right: 0;
      width: 50%;
      height: 50%;
      border-top-right-radius: var(--border-radius);
      opacity: .25;
      background: transparent 100% 0/contain no-repeat var(--watermark)
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP:before {
        background: transparent 100% 0/contain no-repeat var(--watermark-dark)
      }
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP .sd-cmp-1FSuG {
      position: relative;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      gap: var(--spacing-sm);
      padding: var(--padding-sm) var(--padding-md)
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP .sd-cmp-1FSuG {
        padding: var(--padding-sm)
      }
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP .sd-cmp-1FSuG>* {
      width: 100%
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP .sd-cmp-3Mcwk {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1;
      position: relative;
      overflow-y: auto;
      overflow-x: hidden;
      -webkit-overflow-scrolling: touch;
      min-height: 60px
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP .sd-cmp-3Mcwk .sd-cmp-NBjy7 {
      overflow: hidden;
      -ms-overflow-y: hidden;
      overflow-y: auto
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP .sd-cmp-3Mcwk .sd-cmp-NBjy7::-webkit-scrollbar {
      width: 5px
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP .sd-cmp-3Mcwk .sd-cmp-NBjy7::-webkit-scrollbar-thumb {
      border: 0 solid transparent;
      -webkit-box-shadow: inset 0 0 0 3px var(--main-color);
      box-shadow: inset 0 0 0 3px var(--main-color)
    }

    .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP .sd-cmp-3Mcwk .sd-cmp-NBjy7 .sd-cmp-3H8D2 {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      gap: var(--spacing-lg);
      padding: var(--padding-sm) var(--padding-md)
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-2QK_B .sd-cmp-1ZnvE .sd-cmp-kOZlP .sd-cmp-3Mcwk .sd-cmp-NBjy7 .sd-cmp-3H8D2 {
        gap: var(--spacing-md);
        padding: var(--padding-sm)
      }
    }

    .sd-cmp-NBjy7 .sd-cmp-3nwYC {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-align: start;
      -ms-flex-align: start;
      align-items: flex-start;
      -webkit-box-pack: justify;
      -ms-flex-pack: justify;
      justify-content: space-between
    }

    @media screen and (prefers-color-scheme:light) {
      .sd-cmp-NBjy7 .sd-cmp-3nwYC.sd-cmp-3JuoZ {
        margin-left: calc(var(--logo-size) + var(--spacing-lg));
        min-height: calc(var(--logo-size) + var(--logo-offset) - var(--padding-sm))
      }
    }

    @media (pointer:none),
    screen and (prefers-color-scheme:light) and (pointer:coarse),
    screen and (prefers-color-scheme:light) and screen and (max-width:calc(400px - 1px)),
    screen and (prefers-color-scheme:light) and screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-NBjy7 .sd-cmp-3nwYC.sd-cmp-3JuoZ {
        margin-left: calc(var(--logo-size) + var(--spacing-md))
      }
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-NBjy7 .sd-cmp-3nwYC.sd-cmp-3PMfJ {
        margin-left: calc(var(--logo-size) + var(--spacing-lg));
        min-height: calc(var(--logo-size) + var(--logo-offset) - var(--padding-sm))
      }
    }

    @media (pointer:none),
    screen and (prefers-color-scheme:dark) and (pointer:coarse),
    screen and (prefers-color-scheme:dark) and screen and (max-width:calc(400px - 1px)),
    screen and (prefers-color-scheme:dark) and screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-NBjy7 .sd-cmp-3nwYC.sd-cmp-3PMfJ {
        margin-left: calc(var(--logo-size) + var(--spacing-md))
      }
    }

    @media screen and (max-width:calc(400px - 1px)) {
      .sd-cmp-NBjy7 .sd-cmp-3nwYC {
        margin-left: 0 !important;
        min-height: 0 !important
      }
    }

    .sd-cmp-NBjy7 .sd-cmp-xODGp {
      font-size: calc(var(--font-size-base)*1.5);
      font-weight: 500;
      line-height: 1.2;
      color: var(--title-color);
      outline: 0 !important;
      margin: 0 !important;
      padding: 0 !important;
      border: 0 !important;
      font-family: var(--font-family-title), Helvetica, Arial, sans-serif !important;
      text-transform: none !important;
      text-align: left !important;
      letter-spacing: inherit !important;
      background: none !important
    }

    .sd-cmp-NBjy7 .sd-cmp-xODGp * {
      font-family: inherit;
      font-size: inherit;
      font-weight: inherit
    }

    .sd-cmp-NBjy7 .sd-cmp-1IdBZ {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      gap: var(--spacing-md)
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-NBjy7 .sd-cmp-1IdBZ {
        gap: var(--spacing-sm)
      }
    }

    .sd-cmp-NBjy7 .sd-cmp-1t2yR {
      display: block;
      text-align: justify;
      color: var(--text-color);
      text-shadow: 1pt 0 0 var(--background-color)
    }

    .sd-cmp-NBjy7 .sd-cmp-1t2yR strong {
      font-family: inherit;
      font-size: inherit;
      font-weight: 700 !important;
      color: var(--text-color) !important;
      cursor: pointer;
      text-decoration: underline;
      -webkit-tap-highlight-color: transparent
    }

    @media (hover:hover) {
      .sd-cmp-NBjy7 .sd-cmp-1t2yR strong:hover {
        text-decoration: none !important
      }
    }

    .sd-cmp-NBjy7 .sd-cmp-3TX97 {
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1;
      gap: var(--spacing-md)
    }

    .sd-cmp-NBjy7 .sd-cmp-3TX97,
    .sd-cmp-NBjy7 .sd-cmp-3TX97 .sd-cmp-10mD2 {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex
    }

    .sd-cmp-NBjy7 .sd-cmp-3TX97 .sd-cmp-10mD2 {
      gap: var(--spacing-sm);
      color: var(--title-color);
      border-bottom: 1px solid var(--border-color);
      padding-bottom: var(--spacing-sm);
      -webkit-box-pack: justify;
      -ms-flex-pack: justify;
      justify-content: space-between;
      position: relative
    }

    .sd-cmp-NBjy7 .sd-cmp-3TX97 .sd-cmp-10mD2 .sd-cmp-1Xy8H {
      text-transform: uppercase;
      font-family: var(--font-family-title), Helvetica, Arial, sans-serif;
      font-size: var(--font-size-big);
      font-weight: 700;
      color: var(--title-color)
    }

    .sd-cmp-NBjy7 .sd-cmp-3eQpC {
      position: relative;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      -webkit-box-pack: center;
      -ms-flex-pack: center;
      justify-content: center
    }

    @media screen and (max-width:calc(400px - 1px)) {
      .sd-cmp-NBjy7 .sd-cmp-3eQpC {
        min-height: unset
      }
    }

    .sd-cmp-NBjy7 .sd-cmp-3eQpC .sd-cmp-TOv77 {
      display: inline-block !important
    }
  </style>
  <style type="text/css">
    .sd-cmp-1bquj {
      position: relative;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1;
      -webkit-appearance: none !important;
      -moz-appearance: none !important;
      appearance: none !important;
      background: none !important;
      border: none !important;
      -webkit-box-shadow: none !important;
      box-shadow: none !important;
      outline: none !important;
      text-shadow: none !important;
      font-size: inherit !important;
      padding: 0 !important;
      margin: 0 !important;
      width: auto !important
    }

    .sd-cmp-1bquj .sd-cmp-1jLDJ,
    .sd-cmp-1bquj .sd-cmp-2jmDj {
      display: block;
      font-family: var(--font-family-title), Helvetica, Arial, sans-serif;
      letter-spacing: .4pt;
      font-weight: 500;
      cursor: pointer;
      white-space: nowrap;
      width: auto;
      outline: 0
    }

    .sd-cmp-1bquj .sd-cmp-1jLDJ {
      border-radius: calc(var(--border-radius)/2);
      border: 1px solid var(--main-color);
      -webkit-tap-highlight-color: transparent;
      -webkit-transition: color .1s ease-out, background .1s ease-out;
      transition: color .1s ease-out, background .1s ease-out
    }

    .sd-cmp-1bquj .sd-cmp-2jmDj {
      font-size: var(--font-size-base);
      color: var(--main-color);
      text-decoration: underline !important;
      padding: .55em 1.5em
    }

    @media (hover:hover) {
      .sd-cmp-1bquj .sd-cmp-2jmDj:hover {
        text-decoration: none !important
      }
    }

    .sd-cmp-1bquj .sd-cmp-2jmDj:active {
      text-decoration: none !important
    }

    .sd-cmp-1bquj:focus {
      outline: 0
    }

    .sd-cmp-1bquj:focus>.sd-cmp-1jLDJ {
      outline: 1px auto -webkit-focus-ring-color
    }

    .sd-cmp-1bquj:hover {
      background: none !important;
      border: none !important
    }

    .sd-cmp-3bFVg {
      padding: .55em 1.5em;
      font-size: var(--font-size-small) !important;
      text-transform: lowercase !important
    }

    .sd-cmp-3_LLS {
      background: var(--main-color);
      color: var(--background-color)
    }

    @media (hover:hover) {
      .sd-cmp-3_LLS:hover {
        background: var(--background-color);
        color: var(--main-color)
      }
    }

    .sd-cmp-W8q3F,
    .sd-cmp-3_LLS:active {
      background: var(--background-color);
      color: var(--main-color)
    }

    @media (hover:hover) {
      .sd-cmp-W8q3F:hover {
        background: var(--main-color);
        color: var(--background-color)
      }

      .sd-cmp-W8q3F:hover svg {
        fill: var(--background-color)
      }
    }

    .sd-cmp-W8q3F:active {
      background: var(--main-color);
      color: var(--background-color)
    }

    .sd-cmp-W8q3F:active svg {
      fill: var(--background-color)
    }

    .sd-cmp-W8q3F svg {
      fill: var(--main-color)
    }

    .sd-cmp-1G6aQ {
      width: 1em;
      height: 1em
    }

    .sd-cmp-26rLm {
      display: inline-block;
      outline: 0;
      z-index: 1
    }

    .sd-cmp-26rLm:hover {
      text-decoration: none !important
    }

    .sd-cmp-26rLm:focus {
      outline: 0
    }

    .sd-cmp-26rLm:focus>.sd-cmp-24wCw {
      outline: 1px auto -webkit-focus-ring-color
    }

    .sd-cmp-26rLm .sd-cmp-24wCw {
      position: absolute;
      top: var(--padding-sm);
      right: var(--padding-sm);
      z-index: 1;
      width: calc(var(--font-size-base)*2);
      height: calc(var(--font-size-base)*2);
      border-radius: var(--border-radius);
      background-color: var(--background-color);
      cursor: pointer;
      outline: 0
    }

    @media (hover:hover) {
      .sd-cmp-26rLm .sd-cmp-24wCw:hover {
        -webkit-filter: contrast(95%);
        filter: contrast(95%)
      }
    }

    .sd-cmp-26rLm .sd-cmp-24wCw span {
      display: block;
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      margin: auto;
      width: var(--font-size-base);
      height: 2px;
      background: var(--main-color);
      border-radius: 2px
    }

    .sd-cmp-26rLm .sd-cmp-24wCw span:first-child {
      -webkit-transform: rotate(45deg);
      transform: rotate(45deg)
    }

    .sd-cmp-26rLm .sd-cmp-24wCw span:nth-child(2) {
      -webkit-transform: rotate(-45deg);
      transform: rotate(-45deg)
    }

    .sd-cmp-2yAVI {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: horizontal;
      -webkit-box-direction: normal;
      -ms-flex-direction: row;
      flex-direction: row;
      -ms-flex-wrap: wrap;
      flex-wrap: wrap
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-2yAVI {
        -webkit-box-orient: vertical;
        -webkit-box-direction: reverse;
        -ms-flex-direction: column-reverse;
        flex-direction: column-reverse
      }
    }

    .sd-cmp-2yAVI .sd-cmp-fuQAp {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-pack: center;
      -ms-flex-pack: center;
      justify-content: center;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      height: 100%;
      letter-spacing: .4pt;
      padding: var(--padding-sm);
      font-size: var(--font-size-base) !important;
      border: 1px solid var(--border-color) !important;
      border-left: 0 !important;
      border-bottom: 0 !important;
      border-radius: 0 !important;
      white-space: normal;
      word-break: break-word;
      -webkit-filter: contrast(95%);
      filter: contrast(95%)
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-2yAVI .sd-cmp-fuQAp {
        border-right: 0 !important
      }
    }

    .sd-cmp-2yAVI>:last-child .sd-cmp-fuQAp {
      border-right: 0 !important
    }

    .sd-cmp-UGoNj>a svg {
      width: 1.5em;
      height: 1.5em;
      stroke: var(--title-color);
      stroke-opacity: .5;
      stroke-linecap: round;
      stroke-linejoin: round;
      stroke-width: 1.5;
      fill: none
    }

    .sd-cmp-UGoNj>a svg:hover {
      stroke-opacity: 1
    }

    .sd-cmp-tfDbK {
      position: absolute;
      top: 0;
      right: 0;
      z-index: 2147483647
    }

    .sd-cmp-tfDbK .sd-cmp-3gktw {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      gap: var(--spacing-sm);
      position: relative;
      background: var(--background-color);
      border-radius: var(--border-radius);
      -webkit-box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137);
      box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137);
      color: var(--title-color);
      border: 1px solid var(--border-color);
      padding: var(--padding-md);
      text-align: left
    }

    .sd-cmp-tfDbK .sd-cmp-3gktw .sd-cmp-1Kq_o {
      -webkit-box-orient: horizontal;
      -webkit-box-direction: normal;
      -ms-flex-direction: row;
      flex-direction: row;
      gap: var(--spacing-sm);
      font-size: var(--font-size-small)
    }

    .sd-cmp-tfDbK .sd-cmp-3gktw .sd-cmp-1Kq_o,
    .sd-cmp-Qhb4d {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center
    }

    .sd-cmp-Qhb4d {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: var(--background-color);
      opacity: .6;
      -webkit-box-pack: center;
      -ms-flex-pack: center;
      justify-content: center
    }

    @-webkit-keyframes sd-cmp-1phSD {
      to {
        -webkit-transform: rotate(1turn);
        transform: rotate(1turn)
      }
    }

    @keyframes sd-cmp-1phSD {
      to {
        -webkit-transform: rotate(1turn);
        transform: rotate(1turn)
      }
    }

    .sd-cmp-Qhb4d span {
      display: inline-block;
      width: 2rem;
      height: 2rem;
      vertical-align: text-bottom;
      border: .25em solid var(--main-color);
      border-right: .25em solid transparent;
      border-radius: 50%;
      -webkit-animation: sd-cmp-1phSD .75s linear infinite;
      animation: sd-cmp-1phSD .75s linear infinite
    }

    .sd-cmp-1yrT_.sd-cmp-1DJ9f {
      visibility: hidden
    }

    .sd-cmp-3jRLA {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      padding: 5px 0;
      position: absolute;
      top: var(--padding-sm);
      right: var(--padding-sm);
      z-index: 1
    }

    @media screen and (prefers-color-scheme:light) {
      .sd-cmp-3jRLA.sd-cmp-wJ0o7 {
        padding: 5px 10px !important;
        background-color: var(--background-color);
        border-radius: calc(var(--border-radius)/2)
      }
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-3jRLA.sd-cmp-17lw6 {
        padding: 5px 10px !important;
        background-color: var(--background-color);
        border-radius: calc(var(--border-radius)/2)
      }
    }

    .sd-cmp-3jRLA .sd-cmp-qYrQ7 {
      padding: 0;
      font-size: var(--font-size-base);
      white-space: normal
    }

    .sd-cmp-1l64l {
      margin: 0 5px
    }

    .sd-cmp-2dwYy {
      position: fixed;
      width: var(--modal-width);
      height: auto;
      top: 50%;
      left: 50%;
      -webkit-transform: translate3d(-50%, -50%, 0);
      transform: translate3d(-50%, -50%, 0);
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-pack: center;
      -ms-flex-pack: center;
      justify-content: center;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      margin: 0;
      padding: 0;
      -webkit-box-shadow: unset !important;
      box-shadow: unset !important;
      z-index: 2147483647
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-2dwYy {
        width: 100%;
        height: 100%
      }
    }

    .sd-cmp-2dwYy.sd-cmp-3-xyC {
      display: none !important
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj {
      width: 100%;
      height: fit-content;
      height: -webkit-fit-content;
      height: -moz-fit-content;
      max-width: calc(var(--modal-width) - var(--padding-md)*2 - 50px);
      max-height: calc(100vh - var(--padding-md)*2 - 50px);
      background: var(--background-color);
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      position: relative;
      border-radius: var(--border-radius);
      border: 1px solid var(--border-color);
      -webkit-box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137);
      box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137)
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-2dwYy .sd-cmp-1XaZj {
        max-width: calc(100vw - var(--padding-sm)*2 - 25px);
        max-height: calc(var(--vh, 1vh)*100 - var(--padding-sm)*2 - 25px);
        margin: 12.5px
      }
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC {
      border-radius: var(--border-radius);
      overflow: hidden
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC,
    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 {
      position: relative;
      overflow-y: auto;
      overflow-x: hidden;
      -webkit-overflow-scrolling: touch;
      min-height: 60px
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 .sd-cmp-3ZKc7 {
      overflow: hidden;
      -ms-overflow-y: hidden;
      overflow-y: auto
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 .sd-cmp-3ZKc7:not(:first-child) {
      padding-top: var(--spacing-md)
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 .sd-cmp-3ZKc7:not(:first-child) {
        padding-top: var(--spacing-lg)
      }
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 .sd-cmp-3ZKc7::-webkit-scrollbar {
      width: 5px
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 .sd-cmp-3ZKc7::-webkit-scrollbar-thumb {
      border: 0 solid transparent;
      -webkit-box-shadow: inset 0 0 0 3px var(--main-color);
      box-shadow: inset 0 0 0 3px var(--main-color)
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 .sd-cmp-3ZKc7 .sd-cmp-25O0Z {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      gap: var(--spacing-lg);
      padding: var(--padding-sm) var(--padding-md);
      color: var(--text-color)
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 .sd-cmp-3ZKc7 .sd-cmp-25O0Z {
        gap: var(--spacing-md);
        padding: var(--padding-sm)
      }
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 .sd-cmp-3ZKc7 .sd-cmp-3dOD4 {
      text-transform: uppercase;
      font-family: var(--font-family-title), Helvetica, Arial, sans-serif;
      font-size: var(--font-size-big);
      font-weight: 700;
      color: var(--title-color);
      padding-bottom: var(--spacing-sm);
      border-bottom: 1px solid var(--border-color)
    }

    .sd-cmp-2dwYy .sd-cmp-1XaZj .sd-cmp-2hprC .sd-cmp-2Az34 .sd-cmp-3ZKc7 .sd-cmp-3x_wI ul.sd-cmp-2SdjI {
      list-style: circle;
      padding: 0 var(--padding-sm);
      margin-inline: var(--padding-sm)
    }

    .sd-cmp-1OY4L:not(:first-child) {
      position: absolute;
      bottom: 0;
      right: 0;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-pack: end;
      -ms-flex-pack: end;
      justify-content: flex-end
    }

    .sd-cmp-1OY4L:not(:first-child)>a {
      -webkit-box-orient: vertical !important;
      -webkit-box-direction: normal !important;
      -ms-flex-direction: column !important;
      flex-direction: column !important
    }

    .sd-cmp-1OY4L>a {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      -webkit-box-orient: horizontal;
      -webkit-box-direction: normal;
      -ms-flex-direction: row;
      flex-direction: row;
      gap: calc(var(--spacing-sm)/2);
      color: var(--text-color) !important;
      text-decoration: none !important;
      white-space: nowrap
    }

    .sd-cmp-1OY4L>a>span {
      letter-spacing: .7pt;
      font-size: var(--font-size-xxsmall);
      font-weight: 400;
      white-space: nowrap
    }

    .sd-cmp-1OY4L>a>span.sd-cmp-dRdUR {
      display: block;
      font-size: var(--font-size-xsmall);
      font-weight: 700;
      content: var(--provider-logo);
      height: 15px;
      -webkit-filter: grayscale(100%);
      filter: grayscale(100%)
    }

    @media screen and (max-width:calc(400px - 1px)) {
      .sd-cmp-1OY4L {
        display: none !important
      }
    }

    .sd-cmp-2sgrL {
      display: -webkit-inline-box;
      display: -ms-inline-flexbox;
      display: inline-flex;
      cursor: pointer;
      -webkit-tap-highlight-color: transparent;
      outline: none
    }

    .sd-cmp-2sgrL:focus {
      outline: 0
    }

    .sd-cmp-2sgrL:focus>.sd-cmp-2ffiy {
      outline: 1px solid -webkit-focus-ring-color
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy {
      display: inline-block;
      width: 3.6666em;
      height: 1.6666em;
      position: relative;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none;
      outline: 0
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy .sd-cmp-3f1b_ {
      visibility: hidden
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy .sd-cmp-3VuB_ {
      border-radius: .8333em;
      width: 100%;
      height: 100%;
      position: absolute;
      top: 0;
      left: 0;
      -webkit-transition: .1s linear;
      transition: .1s linear;
      overflow: hidden
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy .sd-cmp-3VuB_:before {
      display: block;
      content: "";
      width: 100%;
      height: 100%;
      background-color: var(--background-color);
      -webkit-filter: contrast(75%);
      filter: contrast(75%)
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy .sd-cmp-1M8zu {
      border-radius: calc(1.6666em - 4px);
      width: calc(1.6666em - 4px);
      height: calc(1.6666em - 4px);
      position: absolute;
      top: 2px;
      left: 2px;
      -webkit-transition: .1s linear;
      transition: .1s linear;
      -webkit-transform: translate(1em);
      transform: translate(1em);
      background-color: var(--background-color);
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      -webkit-box-pack: center;
      -ms-flex-pack: center;
      justify-content: center
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy .sd-cmp-1M8zu:before {
      display: block;
      content: "";
      width: 100%;
      height: 100%;
      position: absolute;
      top: 0;
      left: 0;
      border: 2px solid var(--background-color);
      -webkit-box-sizing: border-box;
      box-sizing: border-box;
      border-radius: calc(1.6666em - 4px)
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy .sd-cmp-1M8zu svg {
      margin-top: 0;
      fill: var(--background-color)
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-2ww6m .sd-cmp-3VuB_:before {
      background-color: var(--main-color);
      -webkit-filter: brightness(1);
      filter: brightness(1)
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-2ww6m .sd-cmp-1M8zu {
      -webkit-transform: translate(2em);
      transform: translate(2em);
      background-color: var(--background-color)
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-2ww6m .sd-cmp-1M8zu:before {
      border-color: var(--background-color)
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-2ww6m .sd-cmp-1M8zu svg {
      fill: var(--main-color)
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-23LnT .sd-cmp-1M8zu {
      -webkit-transform: none;
      transform: none
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-23LnT .sd-cmp-1M8zu svg {
      fill: #f67262
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-23LnT .sd-cmp-1M8zu {
        background-color: #f67262
      }

      .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-23LnT .sd-cmp-1M8zu:before {
        border-color: #f67262
      }

      .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-23LnT .sd-cmp-1M8zu svg {
        fill: var(--background-color)
      }
    }

    @media (hover:hover) {
      .sd-cmp-2sgrL .sd-cmp-2ffiy:not(.sd-cmp-2FJ_r):hover .sd-cmp-1M8zu {
        width: calc(1.6666em + 4px);
        height: calc(1.6666em + 4px);
        border-radius: calc(.8333em + 2px);
        top: -2px;
        left: -2px
      }
    }

    @media screen and (prefers-color-scheme:dark) and (hover:hover) {
      .sd-cmp-2sgrL .sd-cmp-2ffiy:not(.sd-cmp-2FJ_r):not(.sd-cmp-2ww6m):not(.sd-cmp-23LnT):hover .sd-cmp-1M8zu:before {
        -webkit-filter: contrast(75%);
        filter: contrast(75%)
      }
    }

    @media screen and (prefers-color-scheme:light) and (hover:hover) {
      .sd-cmp-2sgrL .sd-cmp-2ffiy:not(.sd-cmp-2FJ_r):not(.sd-cmp-2ww6m):hover .sd-cmp-1M8zu:before {
        -webkit-filter: contrast(75%);
        filter: contrast(75%)
      }
    }

    @media (hover:hover) {
      .sd-cmp-2sgrL .sd-cmp-2ffiy:not(.sd-cmp-2FJ_r).sd-cmp-2ww6m:hover .sd-cmp-1M8zu:before {
        border-color: var(--main-color)
      }
    }

    .sd-cmp-2sgrL .sd-cmp-2ffiy.sd-cmp-2FJ_r {
      cursor: default
    }
  </style>
  <style type="text/css">
    .sd-cmp-2Rfqb {
      position: relative;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1;
      -webkit-appearance: none !important;
      -moz-appearance: none !important;
      appearance: none !important;
      background: none !important;
      border: none !important;
      -webkit-box-shadow: none !important;
      box-shadow: none !important;
      outline: none !important;
      text-shadow: none !important;
      font-size: inherit !important;
      padding: 0 !important;
      margin: 0 !important;
      width: auto !important
    }

    .sd-cmp-2Rfqb .sd-cmp-P9OsE,
    .sd-cmp-2Rfqb .sd-cmp-4psWo {
      display: block;
      font-family: var(--font-family-title), Helvetica, Arial, sans-serif;
      letter-spacing: .4pt;
      font-weight: 500;
      cursor: pointer;
      white-space: nowrap;
      width: auto;
      outline: 0
    }

    .sd-cmp-2Rfqb .sd-cmp-P9OsE {
      border-radius: calc(var(--border-radius)/2);
      border: 1px solid var(--main-color);
      -webkit-tap-highlight-color: transparent;
      -webkit-transition: color .1s ease-out, background .1s ease-out;
      transition: color .1s ease-out, background .1s ease-out
    }

    .sd-cmp-2Rfqb .sd-cmp-4psWo {
      font-size: var(--font-size-base);
      color: var(--main-color);
      text-decoration: underline !important;
      padding: .55em 1.5em
    }

    @media (hover:hover) {
      .sd-cmp-2Rfqb .sd-cmp-4psWo:hover {
        text-decoration: none !important
      }
    }

    .sd-cmp-2Rfqb .sd-cmp-4psWo:active {
      text-decoration: none !important
    }

    .sd-cmp-2Rfqb:focus {
      outline: 0
    }

    .sd-cmp-2Rfqb:focus>.sd-cmp-P9OsE {
      outline: 1px auto -webkit-focus-ring-color
    }

    .sd-cmp-2Rfqb:hover {
      background: none !important;
      border: none !important
    }

    .sd-cmp-2YQh2 {
      padding: .55em 1.5em;
      font-size: var(--font-size-small) !important;
      text-transform: lowercase !important
    }

    .sd-cmp-3JhOz {
      background: var(--main-color);
      color: var(--background-color)
    }

    @media (hover:hover) {
      .sd-cmp-3JhOz:hover {
        background: var(--background-color);
        color: var(--main-color)
      }
    }

    .sd-cmp-I0Qqz,
    .sd-cmp-3JhOz:active {
      background: var(--background-color);
      color: var(--main-color)
    }

    @media (hover:hover) {
      .sd-cmp-I0Qqz:hover {
        background: var(--main-color);
        color: var(--background-color)
      }

      .sd-cmp-I0Qqz:hover svg {
        fill: var(--background-color)
      }
    }

    .sd-cmp-I0Qqz:active {
      background: var(--main-color);
      color: var(--background-color)
    }

    .sd-cmp-I0Qqz:active svg {
      fill: var(--background-color)
    }

    .sd-cmp-I0Qqz svg {
      fill: var(--main-color)
    }

    .sd-cmp-2fiYx {
      position: fixed;
      width: var(--modal-width);
      height: auto;
      top: 50%;
      left: 50%;
      -webkit-transform: translate3d(-50%, -50%, 0);
      transform: translate3d(-50%, -50%, 0);
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-pack: center;
      -ms-flex-pack: center;
      justify-content: center;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      margin: 0;
      padding: 0;
      -webkit-box-shadow: unset !important;
      box-shadow: unset !important;
      z-index: 2147483647
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-2fiYx {
        width: 100%;
        height: 100%
      }
    }

    .sd-cmp-2fiYx.sd-cmp-3bYHL {
      top: 0 !important;
      bottom: auto !important
    }

    .sd-cmp-2fiYx.sd-cmp-1N-2m,
    .sd-cmp-2fiYx.sd-cmp-3bYHL {
      left: 0 !important;
      right: 0 !important;
      -webkit-transform: unset !important;
      transform: unset !important
    }

    .sd-cmp-2fiYx.sd-cmp-1N-2m {
      top: auto !important;
      bottom: 0 !important
    }

    .sd-cmp-2fiYx.sd-cmp-2B8FG {
      left: 0 !important;
      right: unset !important
    }

    .sd-cmp-2fiYx.sd-cmp-3l9Ca {
      left: unset !important;
      right: 0 !important
    }

    .sd-cmp-2fiYx.sd-cmp-13Tzg {
      width: 100%;
      max-width: 1400px;
      margin: auto
    }

    .sd-cmp-2fiYx.sd-cmp-2DClO {
      display: none !important
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l {
      width: 100%;
      height: fit-content;
      height: -webkit-fit-content;
      height: -moz-fit-content;
      max-height: calc(100vh - 50px);
      margin: 25px;
      background: var(--background-color);
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      position: relative;
      border-radius: var(--border-radius);
      -webkit-box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137);
      box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137)
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l.sd-cmp-JTFSm {
      height: 600px
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-2fiYx .sd-cmp-2Ap2l {
        max-height: calc(var(--vh, 1vh)*100 - 25px);
        margin: 12.5px
      }
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_ {
      display: none;
      width: var(--skin-size);
      background-color: var(--background-color);
      background-position: 50%;
      background-size: cover;
      background-repeat: no-repeat;
      border-radius: var(--border-radius) 0 0 var(--border-radius)
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG {
      display: block;
      background-image: var(--skin)
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG+*+*+*+.sd-cmp-M7o5g,
    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG+*+*+.sd-cmp-M7o5g,
    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG+*+.sd-cmp-M7o5g,
    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG+.sd-cmp-M7o5g {
      border-radius: 0 var(--border-radius) var(--border-radius) 0
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-iiwF5 {
      background-image: var(--skin-dark)
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG {
        display: none
      }

      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG+*+*+*+.sd-cmp-M7o5g,
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG+*+*+.sd-cmp-M7o5g,
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG+*+.sd-cmp-M7o5g,
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-2nGyG+.sd-cmp-M7o5g {
        border-radius: var(--border-radius)
      }

      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-iiwF5 {
        display: block
      }

      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-iiwF5+*+*+*+.sd-cmp-M7o5g,
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-iiwF5+*+*+.sd-cmp-M7o5g,
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-iiwF5+*+.sd-cmp-M7o5g,
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_.sd-cmp-iiwF5+.sd-cmp-M7o5g {
        border-radius: 0 var(--border-radius) var(--border-radius) 0
      }
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_+.sd-cmp-3f-nX {
      left: calc(var(--skin-size) + var(--padding-md))
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)),
    screen and (min-width:500px) and (max-width:calc(610px - 1px)) {
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_ {
        display: none !important
      }

      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_+.sd-cmp-3f-nX {
        left: calc(var(--padding-md))
      }

      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_+*+*+*+.sd-cmp-M7o5g,
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_+*+*+.sd-cmp-M7o5g,
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_+*+.sd-cmp-M7o5g,
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3mYX_+.sd-cmp-M7o5g {
        border-radius: var(--border-radius) !important
      }
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3f-nX {
      display: none;
      width: var(--logo-size);
      height: var(--logo-size);
      position: absolute;
      top: var(--logo-offset);
      left: var(--padding-md);
      background-color: var(--background-color);
      background-position: 50%;
      background-size: 100%;
      background-repeat: no-repeat;
      -webkit-box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137);
      box-shadow: 0 0 15px rgba(0, 0, 0, .12549019607843137);
      border-radius: calc(var(--border-radius)/2);
      border: 5px solid var(--background-color);
      z-index: 1
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3f-nX.sd-cmp-1yUSH {
      display: block;
      background-image: var(--logo)
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3f-nX.sd-cmp-3Vjk0 {
      background-image: var(--logo-dark)
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3f-nX.sd-cmp-1yUSH {
        display: none
      }

      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3f-nX.sd-cmp-3Vjk0 {
        display: block
      }
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3f-nX {
        left: var(--padding-sm) !important
      }
    }

    @media screen and (max-width:calc(400px - 1px)) {
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-3f-nX {
        display: none !important
      }
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1;
      border-radius: var(--border-radius);
      overflow: hidden
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g:before {
      content: "";
      position: absolute;
      top: 0;
      right: 0;
      width: 50%;
      height: 50%;
      border-top-right-radius: var(--border-radius);
      opacity: .25;
      background: transparent 100% 0/contain no-repeat var(--watermark)
    }

    @media screen and (prefers-color-scheme:dark) {
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g:before {
        background: transparent 100% 0/contain no-repeat var(--watermark-dark)
      }
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g .sd-cmp-3Ob7I {
      position: relative;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      gap: var(--spacing-sm);
      padding: var(--padding-sm) var(--padding-md)
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g .sd-cmp-3Ob7I {
        padding: var(--padding-sm)
      }
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g .sd-cmp-3Ob7I>* {
      width: 100%
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g .sd-cmp-WV_jZ {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1;
      position: relative;
      overflow-y: auto;
      overflow-x: hidden;
      -webkit-overflow-scrolling: touch;
      min-height: 60px
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g .sd-cmp-WV_jZ .sd-cmp-2L7kb {
      overflow: hidden;
      -ms-overflow-y: hidden;
      overflow-y: auto
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g .sd-cmp-WV_jZ .sd-cmp-2L7kb::-webkit-scrollbar {
      width: 5px
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g .sd-cmp-WV_jZ .sd-cmp-2L7kb::-webkit-scrollbar-thumb {
      border: 0 solid transparent;
      -webkit-box-shadow: inset 0 0 0 3px var(--main-color);
      box-shadow: inset 0 0 0 3px var(--main-color)
    }

    .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g .sd-cmp-WV_jZ .sd-cmp-2L7kb .sd-cmp-2zXBa {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      gap: var(--spacing-lg);
      padding: var(--padding-sm) var(--padding-md)
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-2fiYx .sd-cmp-2Ap2l .sd-cmp-M7o5g .sd-cmp-WV_jZ .sd-cmp-2L7kb .sd-cmp-2zXBa {
        gap: var(--spacing-md);
        padding: var(--padding-sm)
      }
    }

    .sd-cmp-3CtBh {
      position: fixed;
      z-index: 999999;
      font-size: 100%;
      bottom: 20px
    }

    .sd-cmp-3CtBh.sd-cmp-1eC6j {
      left: 20px
    }

    .sd-cmp-3CtBh.sd-cmp-1eC6j button {
      border-bottom-left-radius: 0 !important
    }

    .sd-cmp-3CtBh.sd-cmp-29k-b {
      right: 20px
    }

    .sd-cmp-3CtBh.sd-cmp-29k-b button {
      border-bottom-right-radius: 0 !important
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-3CtBh {
        bottom: 10px
      }

      .sd-cmp-3CtBh.sd-cmp-1eC6j {
        left: 10px
      }

      .sd-cmp-3CtBh.sd-cmp-29k-b {
        right: 10px
      }
    }

    .sd-cmp-3CtBh .sd-cmp-1jcua {
      display: block;
      position: relative
    }

    .sd-cmp-3CtBh .sd-cmp-1HEM- svg {
      -webkit-filter: drop-shadow(0 -5px 6px rgba(0, 0, 0, .12549019607843137));
      filter: drop-shadow(0 -5px 6px #00000020)
    }

    .sd-cmp-3CtBh .sd-cmp-1HEM-:not(.sd-cmp-1IetA) {
      cursor: pointer
    }

    .sd-cmp-3CtBh .sd-cmp-1HEM-:not(.sd-cmp-1IetA) svg:hover {
      -webkit-transform: translateY(-5px);
      transform: translateY(-5px)
    }

    .sd-cmp-3CtBh button.sd-cmp-eBAM3 {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: horizontal;
      -webkit-box-direction: normal;
      -ms-flex-direction: row;
      flex-direction: row;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      gap: var(--spacing-md);
      outline: 0;
      -webkit-tap-highlight-color: transparent;
      -webkit-transition: color .1s ease-out, background .1s ease-out;
      transition: color .1s ease-out, background .1s ease-out;
      border-radius: var(--border-radius);
      -webkit-box-shadow: 0 -5px 12px -2px rgba(0, 0, 0, .12549019607843137);
      box-shadow: 0 -5px 12px -2px rgba(0, 0, 0, .12549019607843137);
      background: var(--main-color);
      color: var(--background-color);
      border: 1px solid var(--background-color);
      padding: calc(var(--padding-md)/2) var(--padding-md);
      font-family: var(--font-family-title), Helvetica, Arial, sans-serif;
      font-size: var(--font-size-base) !important;
      line-height: 1.4
    }

    .sd-cmp-3CtBh button.sd-cmp-eBAM3.sd-cmp-Dcke7 {
      padding: calc(var(--padding-sm)/2) var(--padding-sm);
      font-size: var(--font-size-small) !important
    }

    .sd-cmp-3CtBh button.sd-cmp-eBAM3.sd-cmp-Dcke7 .sd-cmp-2DMNr svg {
      height: 17px
    }

    @media (pointer:coarse),
    (pointer:none),
    screen and (max-width:calc(400px - 1px)),
    screen and (min-width:400px) and (max-width:calc(500px - 1px)) {
      .sd-cmp-3CtBh button.sd-cmp-eBAM3:not(.sd-cmp-3sfQJ) {
        padding: calc(var(--padding-sm)/2) var(--padding-sm)
      }
    }

    @media (hover:hover) {
      .sd-cmp-3CtBh button.sd-cmp-eBAM3:hover:not([disabled]) {
        background: var(--background-color);
        color: var(--main-color);
        border: 1px solid var(--main-color);
        cursor: pointer
      }
    }

    .sd-cmp-3CtBh button.sd-cmp-eBAM3 .sd-cmp-2DMNr svg {
      width: auto;
      height: 20px
    }
  </style>
  <style type="text/css">
    .sd-cmp-M_ol- {
      position: relative;
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1;
      -webkit-appearance: none !important;
      -moz-appearance: none !important;
      appearance: none !important;
      background: none !important;
      border: none !important;
      -webkit-box-shadow: none !important;
      box-shadow: none !important;
      outline: none !important;
      text-shadow: none !important;
      font-size: inherit !important;
      padding: 0 !important;
      margin: 0 !important;
      width: auto !important
    }

    .sd-cmp-M_ol- .sd-cmp-3Ddrw,
    .sd-cmp-M_ol- .sd-cmp-2QkHp {
      display: block;
      font-family: var(--font-family-title), Helvetica, Arial, sans-serif;
      letter-spacing: .4pt;
      font-weight: 500;
      cursor: pointer;
      white-space: nowrap;
      width: auto;
      outline: 0
    }

    .sd-cmp-M_ol- .sd-cmp-3Ddrw {
      border-radius: calc(var(--border-radius)/2);
      border: 1px solid var(--main-color);
      -webkit-tap-highlight-color: transparent;
      -webkit-transition: color .1s ease-out, background .1s ease-out;
      transition: color .1s ease-out, background .1s ease-out
    }

    .sd-cmp-M_ol- .sd-cmp-2QkHp {
      font-size: var(--font-size-base);
      color: var(--main-color);
      text-decoration: underline !important;
      padding: .55em 1.5em
    }

    @media (hover:hover) {
      .sd-cmp-M_ol- .sd-cmp-2QkHp:hover {
        text-decoration: none !important
      }
    }

    .sd-cmp-M_ol- .sd-cmp-2QkHp:active {
      text-decoration: none !important
    }

    .sd-cmp-M_ol-:focus {
      outline: 0
    }

    .sd-cmp-M_ol-:focus>.sd-cmp-3Ddrw {
      outline: 1px auto -webkit-focus-ring-color
    }

    .sd-cmp-M_ol-:hover {
      background: none !important;
      border: none !important
    }

    .sd-cmp-3CVn1 {
      padding: .55em 1.5em;
      font-size: var(--font-size-small) !important;
      text-transform: lowercase !important
    }

    .sd-cmp-qlrqV {
      background: var(--main-color);
      color: var(--background-color)
    }

    @media (hover:hover) {
      .sd-cmp-qlrqV:hover {
        background: var(--background-color);
        color: var(--main-color)
      }
    }

    .sd-cmp-R874O,
    .sd-cmp-qlrqV:active {
      background: var(--background-color);
      color: var(--main-color)
    }

    @media (hover:hover) {
      .sd-cmp-R874O:hover {
        background: var(--main-color);
        color: var(--background-color)
      }

      .sd-cmp-R874O:hover svg {
        fill: var(--background-color)
      }
    }

    .sd-cmp-R874O:active {
      background: var(--main-color);
      color: var(--background-color)
    }

    .sd-cmp-R874O:active svg {
      fill: var(--background-color)
    }

    .sd-cmp-R874O svg {
      fill: var(--main-color)
    }

    .sd-cmp-mgUYY {
      position: relative
    }

    .sd-cmp-mgUYY a.sd-cmp-1eRDs {
      -webkit-text-decoration: underline dashed !important;
      text-decoration: underline dashed !important
    }

    .sd-cmp-3WOME {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
      flex-direction: column;
      gap: var(--spacing-sm);
      text-align: center
    }
  </style>
  <script src="/vendor/player/videojs-chromecast.min.js?date=2020-12-11" async=""></script>
</head>

<body><noscript>
    <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-5D6VC2L&gtm_auth=&gtm_preview=&gtm_cookies_win=x"
      height="0" width="0" style="display:none;visibility:hidden" id="tag-manager"></iframe></noscript><noscript>
    <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-5D6VC2L&gtm_auth=&gtm_preview=&gtm_cookies_win=x"
      height="0" width="0" style="display:none;visibility:hidden" id="tag-manager"></iframe></noscript>
  <div id="__next">
    <div data-testid="default-layout" class="sc-9c57b843-0 eRWXBr">
      <div class="sc-ccc62f29-0 isIJWV">
        <div class="sc-de9e3aea-0 jjEEkw">
          <div>
            <div>
              <div class="adn-interstitiel hide" data-time="5">
                <div class="adn-interstitiel-close-button hide"></div><a target="_blank"
                  href="/video/267-hunter-x-hunter-2011/3533-episode-70#"> </a>
                <div class="adn-interstitiel-content"></div>
                <div class="adn-interstitiel-video hide"></div>
              </div>
              <div class="adn-interstitiel-background hide"></div>
            </div>
            <div id="div-gpt-ad-1627562754480-0" style="height: 1px; width: 1px;">
              <script>googletag.cmd.push(function () { googletag.display("div-gpt-ad-1627562754480-0"); });</script>
            </div>
          </div>
        </div>
        <div class="sc-621a9100-0 cEUYSz">
          <nav data-testid="menuContent" class="sc-621a9100-1 jIUuTk">
            <ul class="sc-621a9100-2 fGnBpI">
              <li class="sc-621a9100-3 kOoxHx"><a class="sc-621a9100-5 kYMsgx" href="/"><img alt="" loading="lazy"
                    width="84" height="42" decoding="async" data-nimg="1" class="sc-f6c13dea-0 gvKDbT"
                    style="color:transparent" src="/images/logo-adn/adn-logo-fairy-tail.webp"></a></li>
              <li class="sc-621a9100-3 kOoxHx"><a class="sc-621a9100-5 hDImXX" href="/video"><span
                    class="sc-45f49f9-0 kHRvYb icon sc-621a9100-6 hVmpne icon-catalog-page"
                    data-testid="menu-icon"></span><span data-testid="menu-label"
                    class="sc-621a9100-9 iitBlP">Catalogue</span></a>
                <div class="sc-621a9100-10 bTRBOF"></div>
              </li>
              <li class="sc-621a9100-3 kOoxHx"><a class="sc-621a9100-5 hDImXX" href="/new-on-adn"><span
                    class="sc-45f49f9-0 kHRvYb icon sc-621a9100-6 hVmpne icon-hot" data-testid="menu-icon"></span><span
                    data-testid="menu-label" class="sc-621a9100-9 iitBlP">Nouveautés</span></a>
                <div class="sc-621a9100-10 bTRBOF"></div>
              </li>
              <li class="sc-621a9100-3 kOoxHx"><span class="sc-cf524f08-0 fYjySn sc-621a9100-5 hDImXX"><span
                    class="sc-45f49f9-0 kHRvYb icon sc-621a9100-6 hVmpne icon-playlist"
                    data-testid="menu-icon"></span><span data-testid="menu-label"
                    class="sc-621a9100-9 iitBlP">Séries</span></span>
                <div class="sc-621a9100-10 bTRBOF">
                  <ul class="sc-621a9100-11 rtuMC">
                    <li class="sc-621a9100-13 gZSZQC"><a class="sc-621a9100-5 sc-621a9100-14 hDImXX kGDxdr"
                        href="/video?type=EPS&amp;genres=animation_japonaise">Animation japonaise</a></li>
                    <li class="sc-621a9100-13 gZSZQC"><a class="sc-621a9100-5 sc-621a9100-14 hDImXX kGDxdr"
                        href="/video?type=EPS&amp;genres=animation_franco-belge">Animation franco-belge</a></li>
                    <li class="sc-621a9100-13 gZSZQC"><a class="sc-621a9100-5 sc-621a9100-14 hDImXX kGDxdr"
                        href="/video?type=EPS&amp;genres=jeunesse">Jeunesse</a></li>
                    <li class="sc-621a9100-13 gZSZQC"><a class="sc-621a9100-5 sc-621a9100-14 hDImXX kGDxdr"
                        href="/video?type=EPS">Toutes les séries</a></li>
                  </ul>
                </div>
              </li>
              <li class="sc-621a9100-3 kOoxHx"><span class="sc-cf524f08-0 fYjySn sc-621a9100-5 hDImXX"><span
                    class="sc-45f49f9-0 kHRvYb icon sc-621a9100-6 hVmpne icon-movie"
                    data-testid="menu-icon"></span><span data-testid="menu-label"
                    class="sc-621a9100-9 iitBlP">Films</span></span>
                <div class="sc-621a9100-10 bTRBOF">
                  <ul class="sc-621a9100-11 rtuMC">
                    <li class="sc-621a9100-13 gZSZQC"><a class="sc-621a9100-5 sc-621a9100-14 hDImXX kGDxdr"
                        href="/video?type=MOV">Long-métrage</a></li>
                    <li class="sc-621a9100-13 gZSZQC"><a class="sc-621a9100-5 sc-621a9100-14 hDImXX kGDxdr"
                        href="/video?type=SHORT">Court-métrage</a></li>
                    <li class="sc-621a9100-13 gZSZQC"><a class="sc-621a9100-5 sc-621a9100-14 hDImXX kGDxdr"
                        href="/video?type=OAV">Oav</a></li>
                  </ul>
                </div>
              </li>
              <li class="sc-621a9100-3 kOoxHx"><a class="sc-621a9100-5 hDImXX" href="/video?distribution=free"><span
                    class="sc-45f49f9-0 kHRvYb icon sc-621a9100-6 hVmpne icon-free" data-testid="menu-icon"></span><span
                    data-testid="menu-label" class="sc-621a9100-9 iitBlP">Gratuit</span></a>
                <div class="sc-621a9100-10 bTRBOF"></div>
              </li>
              <li class="sc-621a9100-3 kOoxHx"><a class="sc-621a9100-5 kYMsgx" href="/live"><span
                    class="sc-531a95f7-0 TTQcA sc-beaa459b-0 hByTWU"></span><span data-testid="menu-label"
                    class="sc-621a9100-9 iitBlP">ADN TV+</span></a>
                <div class="sc-621a9100-10 bTRBOF"></div>
              </li>
              <li class="sc-621a9100-4 dGQagY"></li>
              <li data-testid="menu-search" class="sc-621a9100-3 kOoxHx"><span
                  class="sc-cf524f08-0 fYjySn sc-621a9100-5 eQdlua"><span
                    class="sc-45f49f9-0 kHRvYb icon sc-621a9100-6 hVmpne icon-search"
                    data-testid="menu-icon"></span></span>
                <div class="sc-621a9100-10 bTRBOF">
                  <ul class="sc-621a9100-11 rtuMC">
                    <li class="sc-621a9100-13 kuGBZB">
                      <form class="sc-81c770ae-0 fJjufR"><span
                          class="sc-45f49f9-0 kHRvYb icon sc-81c770ae-1 iRtQxu icon-search"><label for="nav-search"
                            class="sc-81c770ae-3 fAIOSR"><input id="nav-search" data-testid="nav-search" type="text"
                              autocomplete="off" class="sc-81c770ae-2 BhJuU" value=""></label></span></form>
                    </li>
                  </ul>
                </div>
              </li>
              <li class="sc-621a9100-3 kOoxHx"><span data-testid="menu-offer-button" class="sc-621a9100-8 bLQctB">
                  <div class="sc-621a9100-12 lirrLF"><a data-testid="button" class="sc-af141b2-4-Component bTWwvv"
                      href="/subscribe"><span>S'abonner</span></a></div>
                </span></li>
              <li data-testid="menu-login-link" class="sc-621a9100-3 kOoxHx"><a class="sc-621a9100-5 kYMsgx"
                  href="/login"><span class="sc-45f49f9-0 iLKksz icon sc-621a9100-6 hVmoTu icon-profil-2"></span></a>
              </li>
              <li class="sc-621a9100-15 hxTgvh"><button class="sc-45f49f9-0 kHSHkc icon sc-621a9100-16 irTNQq icon-menu"
                  data-testid="menu-burger" data-toggle="collapse" data-target="#menu-collapse"
                  aria-controls="menu-collapse" aria-expanded="" aria-label="Toggle navigation" type="button"></button>
              </li>
            </ul>
          </nav>
        </div>
        <div data-testid="header-wrapper" class="sc-f885e9ef-0 iNNfIO">
          <div class="sc-5a07385f-0 ijZHww">
            <div class="sc-5a07385f-1 cxbrPD">
              <div>
                <div class="sc-e71849ea-0 cbBkcX">
                  <div data-testid="ads-block">
                    <div id="div-gpt-ad-1569230740302-0" class="ads-block">
                      <script>googletag.cmd.push(function () { googletag.display("div-gpt-ad-1569230740302-0"); });</script>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="sc-60e49a10-0 jUuRqY">
          <div class="sc-60e49a10-1 kMXdzm">
            <div data-testid="player-content">
              <script
                type="application/ld+json">{"@context":"http://schema.org","@type":"TVEpisode","name":"Hunter x Hunter (2011) - Épisode 70 : Volonté et amitié !","description":"La partie de balle au prisonnier se poursuit. Tour à tour, les équipiers de Gon et Kirua se font sortir du terrain ... Il ne reste plus que Hisoka.  Mais Gon a une idée pour vaincre Laser  mais pour la mettre en œuvre, il a besoin de l'aide de Kirua…","episodeNumber":"70","thumbnailUrl":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps70_640x360.jpg","video":{"@type":"VideoObject","name":"Hunter x Hunter (2011) - Épisode 70 : Volonté et amitié !","url":"https://animationdigitalnetwork.com/video/267-hunter-x-hunter-2011/3533-episode-70","description":"Retrouvez Hunter x Hunter (2011) - Épisode 70 en streaming VF et VOSTFR sur Animation Digital Network ! Qualité HD 1080p, HD 720p et SD 480p.","caption":"Retrouvez Hunter x Hunter (2011) - Épisode 70 en streaming VF et VOSTFR sur Animation Digital Network ! Qualité HD 1080p, HD 720p et SD 480p.","encodingFormat":"mp4","videoQuality":"HD 1080p","requiresSubscription":false,"thumbnailUrl":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps70_1920x1080.jpg","duration":"PT22M35S","width":1920,"height":1080,"playerType":"HTML5","isFamilyFriendly":true,"datePublished":"2013-04-03T12:00:00Z","uploadDate":"2013-04-03T12:00:00Z","genre":"Shônen Jump, Animation japonaise, Jeunesse, Action, Aventure, Fantastique, Shônen","embedUrl":"https://animationdigitalnetwork.com/embedded/267-hunter-x-hunter-2011/3533","interactionStatistic":{"@type":"InteractionCounter","interactionType":"http://schema.org/CommentAction","userInteractionCount":13},"author":[{"@type":"Person","name":"ADN","url":"https://animationdigitalnetwork.com"}],"inLanguage":["jp","fr"],"potentialAction":{"@type":"WatchAction","target":[{"url":"https://animationdigitalnetwork.com/video/267-hunter-x-hunter-2011/3533-episode-70","actionPlatform":"https://schema.org/DesktopWebPlatform","inLanguage":["jp","fr"]},{"url":"https://animationdigitalnetwork.com/video/267-hunter-x-hunter-2011/3533-episode-70","actionPlatform":"https://schema.org/MobileWebPlatform","inLanguage":["jp","fr"]},{"url":"https://animationdigitalnetwork.com/video/267-hunter-x-hunter-2011/3533-episode-70","actionPlatform":"https://schema.org/IOSPlatform","inLanguage":["jp","fr"]},{"url":"https://animationdigitalnetwork.com/video/267-hunter-x-hunter-2011/3533-episode-70","actionPlatform":"https://schema.org/AndroidPlatform","inLanguage":["jp","fr"]}],"actionAccessibilityRequirement":{"@type":"ActionAccessSpecification","category":"noLoginRequired","availabilityStarts":"2013-04-03T12:00:00Z","availabilityEnds":"2027-09-21T00:00:00Z"}}},"subtitleLanguage":"fr","partOfSeries":{"@type":"TVSeries","name":"Hunter x Hunter (2011)","url":"https://animationdigitalnetwork.com/video/267-hunter-x-hunter-2011"},"partOfSeason":{"@type":"CreativeWorkSeason","name":"Arc 05 : Greed Island"},"aggregateRating":{"@type":"AggregateRating","ratingValue":5,"ratingCount":180}}</script>
              <script
                type="application/ld+json">{"@context":"https://schema.org","@type":"BreadcrumbList","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https://animationdigitalnetwork.com"},{"@type":"ListItem","position":2,"name":"Hunter x Hunter (2011)","item":"https://animationdigitalnetwork.com/video/267-hunter-x-hunter-2011"},{"@type":"ListItem","position":3,"name":"Hunter x Hunter (2011) - Épisode 70","item":"https://animationdigitalnetwork.com/video/267-hunter-x-hunter-2011/3533-episode-70"}]}</script>
              <div class="sc-3b794bf1-0 sc-3b794bf1-1 fccbjH gYcEtV">
                <div class="sc-5a07385f-0 izqJqd">
                  <div class="sc-5a07385f-1 itDEN">
                    <div>
                      <h1 title="Hunter x Hunter (2011) - Arc 05 : Greed Island Épisode 70 : Volonté et amitié !"
                        class="sc-ca75078d-3 iNSNnU"><span class="sc-ca75078d-5 dIbhyE"> <!-- -->Arc 05 : Greed Island
                          Épisode 70 : Volonté et amitié !</span><a class="sc-ca75078d-4 bHdkA-d"
                          href="/video/267-hunter-x-hunter-2011">Hunter x Hunter (2011)</a></h1>
                      <ul class="sc-ca75078d-0 bbVXwQ">
                        <li class="sc-ca75078d-1 gDGYcG">HD 1080p</li>
                        <li title="Japonais sous-titré français" class="sc-ca75078d-1 gDGYcG">VOSTFR</li>
                        <li title="Français" class="sc-ca75078d-1 gDGYcG">VF</li>
                        <li class="sc-ca75078d-1 gDGYcG">12+</li>
                        <li class="sc-ca75078d-1 dYAgBK">
                          <div data-testid="vod-rating">
                            <p data-testid="rating-note" class="sc-ebbe6c3b-1 hIdMJL">5<span>/5</span></p>
                            <div class="sc-70923b32-4 cYfyie">
                              <ul data-testid="empty-list" class="sc-70923b32-5 gQJqQq">
                                <li class="sc-70923b32-8 ciuxMJ"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-70923b32-2 kGLNvr icon-star"></span></li>
                                <li class="sc-70923b32-8 ciuxMJ"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-70923b32-2 kGLNvr icon-star"></span></li>
                                <li class="sc-70923b32-8 ciuxMJ"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-70923b32-2 kGLNvr icon-star"></span></li>
                                <li class="sc-70923b32-8 ciuxMJ"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-70923b32-2 kGLNvr icon-star"></span></li>
                                <li class="sc-70923b32-8 ciuxMJ"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-70923b32-2 kGLNvr icon-star"></span></li>
                              </ul>
                              <ul data-testid="rating-list" class="sc-70923b32-6 bYbUqK">
                                <li data-testid="rating-list-item" class="sc-70923b32-8 ciuxMJ"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-70923b32-3 gqlDIE icon-star"></span></li>
                                <li data-testid="rating-list-item" class="sc-70923b32-8 ciuxMJ"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-70923b32-3 gqlDIE icon-star"></span></li>
                                <li data-testid="rating-list-item" class="sc-70923b32-8 ciuxMJ"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-70923b32-3 gqlDIE icon-star"></span></li>
                                <li data-testid="rating-list-item" class="sc-70923b32-8 ciuxMJ"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-70923b32-3 gqlDIE icon-star"></span></li>
                                <li data-testid="rating-list-item" class="sc-70923b32-8 ciuxMJ"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-70923b32-3 gqlDIE icon-star"></span></li>
                              </ul>
                            </div>
                          </div>
                        </li>
                        <li class="sc-ca75078d-1 gDGYcG"><span
                            data-link="L2NvbW1lbnRzLzI2Ny1odW50ZXIteC1odW50ZXItMjAxMS8zNTMzLWVwaXNvZGUtNzA" role="link"
                            tabindex="0" class="sc-fb73a479-0 jFWHTR sc-ca75078d-2 bCDgiI">13 commentaires</span></li>
                      </ul>
                      <ul class="sc-3b794bf1-3 dvWoSm">
                        <li class="sc-3b794bf1-4 fHvaOF"><button data-testid="watchlist-button"
                            class="sc-f85a8886-0-button frfnfW"><span>Ma watchlist</span></button></li>
                        <li class="sc-3b794bf1-4 fHvaOF">
                          <div class="sc-6891cc6-0 euwFRO">
                            <ul class="sc-6891cc6-1 bGvGLN">
                              <li data-testid="share-text" class="sc-6891cc6-2 gzLlDv">Partager :</li>
                              <li class="sc-6891cc6-2 iBwdDI"><button title="Partager sur Facebook"
                                  class="sc-f85a8886-0-button VQVPS sc-6891cc6-4 TNaFK"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-6891cc6-3 cEsLVB icon-facebook"></span></button>
                              </li>
                              <li class="sc-6891cc6-2 iBwdDI"><button
                                  class="sc-f85a8886-0-button VQVPS sc-6891cc6-4 TNaFK"><span
                                    class="sc-45f49f9-0 kHRvYb icon sc-6891cc6-3 cEsLVB icon-twitter"></span></button>
                              </li>
                              <li class="sc-6891cc6-2 iBwdDI"><button
                                  class="sc-f85a8886-0-button VQVPS sc-6891cc6-4 TNaFK">&lt;/&gt;
                                  <!-- -->Insérer</button></li>
                            </ul>
                          </div>
                        </li>
                      </ul>
                      <div class="sc-fbe71df2-0 hwBOkU">
                        <div class="sc-fbe71df2-1 kGKfVM video" data-testid="video-player"
                          style="background-image: url(&quot;https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps70_640x360.jpg&quot;);">
                          <div class="vjs-error-display adn-player-error">
                            <div class="adn-player-error-message">Désactivez AdBlock ou équivalent et rechargez la page
                              pour lancer la vidéo.</div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="sc-5a07385f-0 izqJqd">
                  <div class="sc-5a07385f-1 itDEN">
                    <div>
                      <div class="sc-69509e27-0 xmqfv">
                        <div class="sc-e372fe5f-0 bWeCQq"><span
                            class="sc-45f49f9-0 kHRvYb icon sc-e372fe5f-5 gHbTOJ icon-left"></span><span
                            class="sc-e372fe5f-1 geipsu">Arc 05 : Greed Island<span
                              class="sc-45f49f9-0 kHRvYb icon sc-e372fe5f-2 iCgmRw icon-bottom"></span></span><span
                            class="sc-e372fe5f-3 eRhNyR"><select class="sc-e372fe5f-4 jmlDxw">
                              <option value="0">Arc 01 : Examen de Hunter</option>
                              <option value="1">Arc 02 : Kukuru Mountain</option>
                              <option value="2">Arc 03 : Tour Céleste</option>
                              <option value="3">Arc 04 : York Shin City</option>
                              <option value="4" selected="">Arc 05 : Greed Island</option>
                              <option value="5">Arc 06 : Chimera Ant</option>
                              <option value="6">Arc 07 : Les Élections</option>
                            </select></span><span
                            class="sc-45f49f9-0 kHRvYb icon sc-e372fe5f-6 jmrTGa icon-right"></span></div>
                        <div class="sc-1d31806c-0 fFalTP">
                          <div class="sc-1d31806c-1 bwDGCh">
                            <ul class="sc-1d31806c-4 jJpwYb invisible">
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Un départ et des amis"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3464-episode-1">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 1" data-testid="img-testid" loading="lazy"
                                        width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps1_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 1</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Un départ et des amis</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="L'épreuve des épreuves"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3465-episode-2">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 2" data-testid="img-testid" loading="lazy"
                                        width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps2_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 2</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">L'épreuve des épreuves</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Il faut se battre pour y arriver"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3466-episode-3">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 3" data-testid="img-testid" loading="lazy"
                                        width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps3_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 3</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Il faut se battre pour y
                                        arriver</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Espoirs et ambitions"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3467-episode-4">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 4" data-testid="img-testid" loading="lazy"
                                        width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps4_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 4</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Espoirs et ambitions</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Hisoka est sournois"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3468-episode-5">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 5" data-testid="img-testid" loading="lazy"
                                        width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps5_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 5</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Hisoka est sournois</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Une épreuve étonnante"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3469-episode-6">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 6" data-testid="img-testid" loading="lazy"
                                        width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps6_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 6</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Une épreuve étonnante</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Combat décisif à bord du dirigeable"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3470-episode-7">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 7" data-testid="img-testid" loading="lazy"
                                        width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps7_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 7</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Combat décisif à bord du
                                        dirigeable</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="La majorité l'emporte"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3471-episode-8">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 8" data-testid="img-testid" loading="lazy"
                                        width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps8_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 8</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">La majorité l'emporte</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Attention aux prisonniers"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3472-episode-9">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 9" data-testid="img-testid" loading="lazy"
                                        width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps9_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 9</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Attention aux prisonniers
                                      </h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="L'occasion fait le larron"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3473-episode-10">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 10" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps10_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 10</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">L'occasion fait le larron
                                      </h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Un pari de maboul"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3474-episode-11">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 11" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps11_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 11</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Un pari de maboul</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Un dernier choix pour la route"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3475-episode-12">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 12" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps12_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 12</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Un dernier choix pour la
                                        route</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Des nouvelles de Gon"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3476-episode-13">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 13" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps13_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 13</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Des nouvelles de Gon</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Toucher sa cible !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3477-episode-14">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 14" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps14_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 14</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Toucher sa cible !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Tromperies à la chaîne"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3478-episode-15">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 15" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps15_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 15</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Tromperies à la chaîne</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Défaite et humiliation"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3479-episode-16">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 16" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps16_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 16</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Défaite et humiliation</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Piège dans la grotte"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3480-episode-17">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 17" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps17_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 17</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Piège dans la grotte</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Un entretien décisif"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3481-episode-18">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 18" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps18_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 18</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Un entretien décisif</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Victoire impossible, défaite impossible"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3482-episode-19">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 19" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps19_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 19</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Victoire impossible, défaite
                                        impossible</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Un développement inattendu"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3483-episode-20">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 20" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps20_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 20</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Un développement inattendu
                                      </h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Querelles fraternelles"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3484-episode-21">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 21" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps21_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 21</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Querelles fraternelles</h4>
                                    </div>
                                  </a></div>
                              </li>
                            </ul>
                            <ul class="sc-1d31806c-4 jJpwYb invisible">
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Un dangereux chien de garde"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3485-episode-22">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 22" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps22_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 22</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Un dangereux chien de garde
                                      </h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Les devoirs d'un garde"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3486-episode-23">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 23" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps23_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 23</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Les devoirs d'un garde</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="La famille Zoldik"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3487-episode-24">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 24" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps24_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 24</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">La famille Zoldik</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Tu ne le verras pas si tu ne la vois pas"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3488-episode-25">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 25" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps25_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 25</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Tu ne le verras pas si tu ne
                                        la vois pas</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Avant et après"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3489-episode-26">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 26" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps26_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 26</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Avant et après</h4>
                                    </div>
                                  </a></div>
                              </li>
                            </ul>
                            <ul class="sc-1d31806c-4 jJpwYb invisible">
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Entrée dans l'arène"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3490-episode-27">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 27" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps27_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 27</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Entrée dans l'arène</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Nen et Nen"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3491-episode-28">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 28" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps28_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 28</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Nen et Nen</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Éveil et potentiel"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3492-episode-29">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 29" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps29_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 29</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Éveil et potentiel</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Combat acharné et querelle"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3493-episode-30">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 30" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps30_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 30</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Combat acharné et querelle
                                      </h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Destinée et ténacité"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3494-episode-31">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 31" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps31_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 31</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Destinée et ténacité</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Une victoire surprenante"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3495-episode-32">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 32" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps32_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 32</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Une victoire surprenante</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Une menace insignifiante"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3496-episode-33">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 33" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps33_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 33</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Une menace insignifiante</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Revanche à armes égales"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3497-episode-34">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 34" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps34_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 34</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Revanche à armes égales</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Examen véritablement réussi"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3498-episode-35">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 35" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps35_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 35</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Examen véritablement réussi
                                      </h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Une énorme dette et un petit coup de pied"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3499-episode-36">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 36" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps36_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 36</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Une énorme dette et un petit
                                        coup de pied</h4>
                                    </div>
                                  </a></div>
                              </li>
                            </ul>
                            <ul class="sc-1d31806c-4 jJpwYb invisible">
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Jin et Gon"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3500-episode-37">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 37" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps37_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 37</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Jin et Gon</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="La réponse de mon père"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3501-episode-38">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 38" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps38_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 38</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">La réponse de mon père</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Souhait et serment"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3502-episode-39">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 39" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps39_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 39</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Souhait et serment</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Coopération entre utilisateurs de Nen"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3503-episode-40">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 40" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps40_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 40</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Coopération entre
                                        utilisateurs de Nen</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Le rassemblement des héros !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3504-episode-41">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 41" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps41_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 41</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Le rassemblement des héros !
                                      </h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Défendre et attaquer"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3505-episode-42">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 42" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps42_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 42</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Défendre et attaquer</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Une farce tragique"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3506-episode-43">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 43" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps43_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 43</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Une farce tragique</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Préparation au combat"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3507-episode-44">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 44" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps44_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 44</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Préparation au combat</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Contrainte et promesse"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3508-episode-45">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 45" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps45_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 45</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Contrainte et promesse</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Poursuite et attente"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3509-episode-46">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 46" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps46_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 46</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Poursuite et attente</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Condition et serment"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3510-episode-47">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 47" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps47_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 47</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Condition et serment</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Des yeux bien affûtés"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3511-episode-48">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 48" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps48_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 48</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Des yeux bien affûtés</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Analyse et poursuite"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3512-episode-49">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 49" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps49_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 49</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Analyse et poursuite</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Camarades et sabre !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3513-episode-50">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 50" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps50_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 50</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Camarades et sabre !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Un champ de bataille impitoyable !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3514-episode-51">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 51" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps51_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 51</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Un champ de bataille
                                        impitoyable !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Attaque et impact !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3515-episode-52">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 52" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps52_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 52</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Attaque et impact !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Feinte et stratagème !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3516-episode-53">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 53" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps53_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 53</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Feinte et stratagème !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Fausse prédiction ?"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3517-episode-54">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 54" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps54_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 54</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Fausse prédiction ?</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Camarades et supercherie !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3518-episode-55">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 55" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps55_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 55</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Camarades et supercherie !
                                      </h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Bien-aimée et désastre !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3519-episode-56">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 56" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps56_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 56</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Bien-aimée et désastre !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Initiative et instructions !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3520-episode-57">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 57" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps57_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 57</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Initiative et instructions !
                                      </h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Adieu et revolver"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3521-episode-58">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 58" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps58_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 58</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Adieu et revolver</h4>
                                    </div>
                                  </a></div>
                              </li>
                            </ul>
                            <ul class="sc-1d31806c-4 jJpwYb">
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Enchères et impatience !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3522-episode-59">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 59" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps59_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 59</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Enchères et impatience !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Règles et commencement !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3523-episode-60">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 60" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps60_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 60</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Règles et commencement !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Invitation et meilleur ami !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3524-episode-61">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 61" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps61_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 61</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Invitation et meilleur ami !
                                      </h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Réalité et pierres précieuses !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3525-episode-62">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 62" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps62_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 62</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Réalité et pierres précieuses
                                        !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Un maître impitoyable"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3526-episode-63">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 63" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps63_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 63</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Un maître impitoyable</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Progrès et chantage"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3527-episode-64">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 64" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps64_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 64</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Progrès et chantage</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Poing diabolique et pierre-papier-ciseaux !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3528-episode-65">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 65" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps65_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 65</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Poing diabolique et
                                        pierre-papier-ciseaux !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Capture et stratagème !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3529-episode-66">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 66" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps66_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 66</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Capture et stratagème !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="15 et 15 !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3530-episode-67">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 67" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps67_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 67</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">15 et 15 !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Pirates et déductions !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3531-episode-68">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 68" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps68_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 68</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Pirates et déductions !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Confrontation acharnée !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3532-episode-69">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 69" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps69_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 69</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Confrontation acharnée !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Volonté et amitié !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3533-episode-70">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 70" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 enSttT jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps70_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 70</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Volonté et amitié !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Négociation et transaction !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3534-episode-71">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 71" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps71_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 71</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Négociation et transaction !
                                      </h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Occasion et poursuite !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3535-episode-72">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 72" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps72_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 72</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Occasion et poursuite !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Folie et victoire !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3536-episode-73">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 73" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps73_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 73</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Folie et victoire !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Vainqueurs et vaincus !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3537-episode-74">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 74" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps74_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 74</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Vainqueurs et vaincus !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="L’ami de Jin et le véritable ami !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3538-episode-75">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 75" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps75_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 75</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">L’ami de Jin et le véritable
                                        ami !</h4>
                                    </div>
                                  </a></div>
                              </li>
                            </ul>
                            <ul class="sc-1d31806c-4 jJpwYb invisible">
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Retrouvailles et compréhension"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3539-episode-76">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 76" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps76_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 76</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Retrouvailles et
                                        compréhension</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Inquiétudes et apparition"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3540-episode-77">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 77" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps77_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 77</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Inquiétudes et apparition
                                      </h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Prolifération rapide !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3541-episode-78">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 78" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps78_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 78</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Prolifération rapide !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="NGL"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3542-episode-79">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 79" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps79_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 79</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">NGL</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Infamie et atrocité !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3543-episode-80">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 80" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps80_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 80</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Infamie et atrocité !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Début des combats"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3544-episode-81">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 81" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps81_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 81</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Début des combats</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="La roulette de Kaito !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3545-episode-82">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 82" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps82_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 82</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">La roulette de Kaito !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Évolution par influence"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3546-episode-83">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 83" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps83_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 83</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Évolution par influence</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Éveil du destin !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3547-episode-84">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 84" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps84_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 84</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Éveil du destin !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Ombre et lumière !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3548-episode-85">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 85" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps85_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 85</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Ombre et lumière !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Promesse et réunion !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3549-episode-86">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 86" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps86_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 86</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Promesse et réunion !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Duel et Fuite !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3550-episode-87">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 87" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps87_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 87</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Duel et Fuite !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Pierre-papier-ciseaux et point faible !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3551-episode-88">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 88" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps88_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 88</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Pierre-papier-ciseaux et
                                        point faible !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Gentillesse et force !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3552-episode-89">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 89" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps89_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 89</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Gentillesse et force !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Intérêts et emprise !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3553-episode-90">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 90" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps90_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 90</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Intérêts et emprise !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Les forts et les faibles !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3554-episode-91">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 91" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps91_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 91</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Les forts et les faibles !
                                      </h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Un souhait et deux serments !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3555-episode-92">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 92" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps92_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 92</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Un souhait et deux serments !
                                      </h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Rendez-vous avec Pâmu !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3556-episode-93">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 93" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps93_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 93</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Rendez-vous avec Pâmu !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Ami et voyage !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3557-episode-94">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 94" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps94_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 94</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Ami et voyage !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Ressentiment et bizarreries !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3558-episode-95">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 95" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps95_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 95</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Ressentiment et bizarreries !
                                      </h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Résidence illégale !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3559-episode-96">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 96" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps96_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 96</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Résidence illégale !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Combat féroce et élimination !"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3560-episode-97">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 97" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps97_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 97</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Combat féroce et élimination
                                        !</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Infiltration et sélection"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3561-episode-98">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 98" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps98_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 98</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Infiltration et sélection
                                      </h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Combinaison et évolution"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3562-episode-99">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 99" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps99_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 99</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Combinaison et évolution</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Traque et contre-attaque"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/3563-episode-100">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 100" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps100_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 100</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Traque et contre-attaque</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Ikarugo et éclairs"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/4491-episode-101">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 101" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps101_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 101</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Ikarugo et éclairs</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Pouvoirs et jeux de stratégie"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/4492-episode-102">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 102" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps102_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 102</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Pouvoirs et jeux de stratégie
                                      </h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Échec et mat et anticipation"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/4524-episode-103">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 103" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps103_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 103</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Échec et mat et anticipation
                                      </h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Hésitation et embarras"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/4525-episode-104">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 104" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps104_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 104</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Hésitation et embarras</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Détermination et éveil"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/4526-episode-105">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 105" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps105_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 105</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Détermination et éveil</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Nov et Morau"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/4563-episode-106">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 106" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps106_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 106</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Nov et Morau</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Retour et retraite"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/4564-episode-107">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 107" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps107_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 107</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Retour et retraite</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Le Gungi de Komugi"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/4565-episode-108">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 108" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps108_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 108</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Le Gungi de Komugi</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Début de la procession, début de la mission"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/4566-episode-109">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 109" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps109_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 109</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Début de la procession, début
                                        de la mission</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Crainte et Expectative"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/4595-episode-110">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 110" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps110_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 110</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Crainte et Expectative</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Irruption soudaine"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/4627-episode-111">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 111" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps111_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 111</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Irruption soudaine</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Monstre et monstre"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/4720-episode-112">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 112" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps112_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 112</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Monstre et monstre</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Un Insecte d'honneur"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/4721-episode-113">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 113" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps113_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 113</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Un Insecte d'honneur</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Séparation et erreur de calcul"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/4722-episode-114">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 114" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps114_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 114</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Séparation et erreur de
                                        calcul</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Devoir et doutes"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/4723-episode-115">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 115" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps115_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 115</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Devoir et doutes</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Vengeance et soins"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/4724-episode-116">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 116" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps116_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 116</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Vengeance et soins</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Un Affront à laver"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/4725-episode-117">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 117" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps117_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 117</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Un Affront à laver</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Fausse colère"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/4726-episode-118">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 118" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps118_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 118</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Fausse colère</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Poulpe fort et Poulpe faible"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/4727-episode-119">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 119" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps119_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 119</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Poulpe fort et Poulpe faible
                                      </h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Faux et vrai"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/4728-episode-120">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 120" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps120_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 120</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Faux et vrai</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Défaite et Honneur"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/4729-episode-121">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 121" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps121_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 121</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Défaite et Honneur</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Principes et Nom"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/4730-episode-122">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 122" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps122_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 122</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Principes et Nom</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Centipèdes et Souvenirs"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/4900-episode-123">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 123" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps123_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 123</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Centipèdes et Souvenirs</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Limite et Éveil"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/4947-episode-124">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 124" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps124_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 124</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Limite et Éveil</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Puissance et apogée des arts martiaux"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/4948-episode-125">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 125" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps125_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 125</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Puissance et apogée des arts
                                        martiaux</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Le Zéro et la Rose"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/4949-episode-126">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 126" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps126_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 126</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Le Zéro et la Rose</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Hostilité et Détermination"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/5021-episode-127">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 127" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps127_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 127</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Hostilité et Détermination
                                      </h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Joie sans pareille et amour inconditionnel"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/5047-episode-128">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 128" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps128_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 128</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Joie sans pareille et amour
                                        inconditionnel</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Cible et objectif"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/5062-episode-129">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 129" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps129_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 129</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Cible et objectif</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Magie et Désespoir"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/5097-episode-130">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 130" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps130_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 130</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Magie et Désespoir</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Colère et Lumière"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/5099-episode-131">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 131" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps131_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 131</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Colère et Lumière</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Avance et Activation"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/5104-episode-132">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 132" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps132_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 132</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Avance et Activation</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Espérance de vie"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/5105-episode-133">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 133" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps133_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 133</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Espérance de vie</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Un Seul Mot"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/5106-episode-134">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 134" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps134_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 134</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Un Seul Mot</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Ce jour, cet instant"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/5107-episode-135">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 135" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps135_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 135</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Ce jour, cet instant</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Retour à la maison et Vrai nom"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/5108-episode-136">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 136" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps136_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 136</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Retour à la maison et Vrai
                                        nom</h4>
                                    </div>
                                  </a></div>
                              </li>
                            </ul>
                            <ul class="sc-1d31806c-4 jJpwYb invisible">
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Débat entre zodiaques"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/5109-episode-137">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 137" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps137_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 137</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Débat entre zodiaques</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Demande et souhait"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/5110-episode-138">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 138" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps138_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 138</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Demande et souhait</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Aruka et Nanika"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/5111-episode-139">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 139" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps139_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 139</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Aruka et Nanika</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a
                                    title="Participation à la guerre et entrée en guerre"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/5112-episode-140">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 140" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps140_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 140</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Participation à la guerre et
                                        entrée en guerre</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Prestidigitateur et Intendants"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/5113-episode-141">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 141" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps141_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 141</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Prestidigitateur et
                                        Intendants</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Aiguille et traque"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/5114-episode-142">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 142" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps142_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 142</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Aiguille et traque</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Crimes et Griffes"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/5115-episode-143">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 143" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps143_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 143</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Crimes et Griffes</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Sanction et Ovation"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/5116-episode-144">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 144" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps144_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 144</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Sanction et Ovation</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Défaite et Retrouvailles"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/5117-episode-145">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 145" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps145_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 145</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Défaite et Retrouvailles</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Président et Annulation"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/5118-episode-146">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 146" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps146_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 146</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Président et Annulation</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Salut et Avenir"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/5119-episode-147">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 147" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps147_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 147</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Salut et Avenir</h4>
                                    </div>
                                  </a></div>
                              </li>
                              <li class="sc-593aa08f-0 sc-45ef3f75-0 eJBcuO cKzLgL">
                                <div class="sc-45ef3f75-1 fzJEwM"><a title="Passé et Futur"
                                    class="sc-593aa08f-6 sc-45ef3f75-9 bjjhkM iMFgKC"
                                    href="/video/267-hunter-x-hunter-2011/5120-episode-148">
                                    <div class="sc-593aa08f-4 sc-45ef3f75-2 eTMqiy"><img
                                        alt="Hunter x Hunter (2011) - Épisode 148" data-testid="img-testid"
                                        loading="lazy" width="154" height="86" decoding="async" data-nimg="1"
                                        class="sc-593aa08f-5 sc-45ef3f75-3 hEYays jjJHZK" style="color:transparent"
                                        src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps148_320x180.jpg"><span
                                        class="sc-45f49f9-0 kHRvYb icon sc-593aa08f-7 gUOYGD icon-play"></span>
                                      <div class="sc-4c2444b5-0 jwMCU">
                                        <div data-testid="viewbar-progress" class="sc-4c2444b5-1 iSGVGA"></div>
                                      </div>
                                    </div>
                                    <div class="sc-593aa08f-1 ereUTH">
                                      <h3 class="sc-593aa08f-2 ehNjVL">Épisode 148</h3>
                                      <h4 class="sc-593aa08f-3 sc-1d31806c-3 NAJmQ eYCMxq">Passé et Futur</h4>
                                    </div>
                                  </a></div>
                              </li>
                            </ul>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="sc-5a07385f-0 ilFYUV">
                  <div class="sc-5a07385f-1 dBZhfz">
                    <div>
                      <div class="sc-e71849ea-0 cbBkcX">
                        <div>
                          <script type="text/javascript">
                            var w_yahoo = (top == self) ? window : window.top, d_yahoo = w_yahoo.document;

                            w_yahoo.adUnitCode = w_yahoo.adUnitCode || [];
                            w_yahoo.adUnitCode.push("86b0cbcc-b2a1-4cf9-97c8-2aa88d81ba28");
                            w_yahoo.apiKey = "YRXW2QHX5V87X37994NN";

                            (function () {
                              var script = d_yahoo.createElement("script");
                              script.async = true;
                              script.src = "https://s.yimg.com/av/yap/ga/yap.js";
                              d_yahoo.body.appendChild(script);
                            })();
                          </script>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div data-testid="comments-panel" id="comments-panel">
                  <div class="sc-5a07385f-0 izqJqd">
                    <div class="sc-5a07385f-1 ebyxoh">
                      <h2 class="sc-5a07385f-2 dZbUtq"><span class="sc-5a07385f-3 jXwzJT">Avis sur l'animé Hunter x
                          Hunter (2011) - Épisode 70</span></h2>
                      <div>
                        <div class="sc-17cd96c1-0 iecioq"><span data-link="L2xvZ2lu" role="link" tabindex="0"
                            class="sc-fb73a479-0 jFWHTR sc-17cd96c1-12 byRsrW"><span>Vous devez <span>être
                                connecté</span> pour poster un commentaire</span></span></div>
                        <div class="sc-3c8b4bd7-0 eA-dIHC">
                          <div class="sc-3386ffa2-0 doutqj">
                            <div class="sc-d2f319dc-0 iqQKvO">
                              <div data-testid="scrollbars" class="sc-d2f319dc-2 igKZTn">
                                <ul data-testid="comments" class="sc-3386ffa2-1 kgNIXI">
                                  <li data-testid="comment-item" id="commentaire-29934" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTQ0OTk4LzE"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="NaviSly" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTQ0OTk4LzE"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">NaviSly</span> </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 7 ans</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Le
                                          meilleur sport !</div>
                                      </div>
                                    </div>
                                    <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                      <li data-testid="comment-item" id="commentaire-32326"
                                        class="sc-f8132342-1 cgwBxx">
                                        <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                          <div class="sc-f8132342-6 hcKLri">
                                            <div class="sc-f8132342-7 giwGoq"><span data-link="L3Byb2ZpbGUvNjAyNTU5LzE"
                                                role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">?Johnny
                                                Joestar?</span> </div>
                                            <div class="sc-f8132342-9 ghALZj"> Posté il y a 6 ans</div>
                                          </div>
                                          <div class="sc-f8132342-10 GNNRV">
                                            <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                              j'aime bien la ball au prisoné mais s'est d'un jeux....serrieusement
                                              autent faire du foot avec du nen ou du bastket ball avec du nen du rugby
                                              mais la ball au prisonier s'est le plus fun je trouve meme si s'est plus
                                              un jeux</div>
                                          </div>
                                        </div>
                                        <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvNjAyNTU5LzE"
                                            role="link" tabindex="0"
                                            class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                              alt="✩Johnny Joestar✩" loading="lazy" width="180" height="180"
                                              decoding="async" data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                              src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                              style="color: transparent;"></span></div>
                                      </li>
                                      <li data-testid="comment-item" id="commentaire-33400"
                                        class="sc-f8132342-1 cgwBxx">
                                        <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                          <div class="sc-f8132342-6 hcKLri">
                                            <div class="sc-f8132342-7 giwGoq"><span data-link="L3Byb2ZpbGUvMTE0MjUwLzE"
                                                role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Anxis</span>
                                            </div>
                                            <div class="sc-f8132342-9 ghALZj"> Posté il y a 6 ans</div>
                                          </div>
                                          <div class="sc-f8132342-10 GNNRV">
                                            <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                              s'est d'un jeux...</div>
                                          </div>
                                        </div>
                                        <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTE0MjUwLzE"
                                            role="link" tabindex="0"
                                            class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Anxis"
                                              loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                              class="sc-f8132342-4 gpxdqr"
                                              src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                              style="color: transparent;"></span></div>
                                      </li>
                                      <li data-testid="comment-item" id="commentaire-115626"
                                        class="sc-f8132342-1 cgwBxx">
                                        <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                          <div class="sc-f8132342-6 hcKLri">
                                            <div class="sc-f8132342-7 giwGoq"><span data-link="L3Byb2ZpbGUvNzUwNjQzLzE"
                                                role="link" tabindex="0"
                                                class="sc-fb73a479-0 jFWHTR">Anonymous750643-1</span> </div>
                                            <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                          </div>
                                          <div class="sc-f8132342-10 GNNRV">
                                            <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">moi
                                              pas comprendre ce que toi écrire</div>
                                          </div>
                                        </div>
                                        <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvNzUwNjQzLzE"
                                            role="link" tabindex="0"
                                            class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="Anonymous750643"
                                              loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                              class="sc-f8132342-4 gpxdqr"
                                              src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                              style="color: transparent;"></span></div>
                                      </li>
                                      <li data-testid="comment-item" id="commentaire-126535"
                                        class="sc-f8132342-1 cgwBxx">
                                        <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                          <div class="sc-f8132342-6 hcKLri">
                                            <div class="sc-f8132342-7 giwGoq"><span data-link="L3Byb2ZpbGUvMTMwMzYxNS8x"
                                                role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">madalexi22</span>
                                            </div>
                                            <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                          </div>
                                          <div class="sc-f8132342-10 GNNRV">
                                            <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">Je
                                              te rassure, lui même ne se comprends pas...</div>
                                          </div>
                                        </div>
                                        <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMTMwMzYxNS8x"
                                            role="link" tabindex="0"
                                            class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="madalexi22"
                                              loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                              class="sc-f8132342-4 gpxdqr"
                                              src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                              style="color: transparent;"></span></div>
                                      </li>
                                      <li data-testid="comment-item" id="commentaire-253449"
                                        class="sc-f8132342-1 cgwBxx">
                                        <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                          <div class="sc-f8132342-6 hcKLri">
                                            <div class="sc-f8132342-7 giwGoq"><span data-link="L3Byb2ZpbGUvMjQzMTMwNy8x"
                                                role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">4kmon</span>
                                            </div>
                                            <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                          </div>
                                          <div class="sc-f8132342-10 GNNRV">
                                            <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">je
                                              crois qu'il voulait dire "c'est qu'un jeu"...</div>
                                          </div>
                                        </div>
                                        <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMjQzMTMwNy8x"
                                            role="link" tabindex="0"
                                            class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="sarrbabacar767"
                                              loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                              class="sc-f8132342-4 gpxdqr"
                                              src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                              style="color: transparent;"></span></div>
                                      </li>
                                    </ul>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-98153" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTM4MzM1MS8x"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="Lyoxi" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTM4MzM1MS8x"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Lyoxi</span> </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">waw
                                          episode de ouf !!</div>
                                      </div>
                                    </div>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-108577" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTU2NDI3My8x"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="Kenza Tounsi" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTU2NDI3My8x"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Kenza Tounsi</span>
                                        </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Esque
                                          c'est obligatoire quand paye</div>
                                      </div>
                                    </div>
                                    <ul data-testid="child-comments" class="sc-f8132342-14 hgnoa">
                                      <li data-testid="comment-item" id="commentaire-249341"
                                        class="sc-f8132342-1 cgwBxx">
                                        <div data-testid="comment-container" class="sc-f8132342-5 leERTG">
                                          <div class="sc-f8132342-6 hcKLri">
                                            <div class="sc-f8132342-7 giwGoq"><span data-link="L3Byb2ZpbGUvMzA0NjM0NS8x"
                                                role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">La Reine Des
                                                Chips</span> </div>
                                            <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                          </div>
                                          <div class="sc-f8132342-10 GNNRV">
                                            <div data-testid="comment-container-text" class="sc-f8132342-11 fHIGyB">
                                              Signification de ce message s'il te plaît ^^"</div>
                                          </div>
                                        </div>
                                        <div class="sc-f8132342-2 cAvjnP"><span data-link="L3Byb2ZpbGUvMzA0NjM0NS8x"
                                            role="link" tabindex="0"
                                            class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img alt="kuroi namida"
                                              loading="lazy" width="180" height="180" decoding="async" data-nimg="1"
                                              class="sc-f8132342-4 gpxdqr"
                                              src="https://avatar.animationdigitalnetwork.fr/web/ch14_bg0_green0_188.jpg"
                                              style="color: transparent;"></span></div>
                                      </li>
                                    </ul>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-115841" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTU0MTEzNy8x"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="fabianie" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTU0MTEzNy8x"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">fabianie</span> </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">omgggg
                                        </div>
                                      </div>
                                    </div>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-125420" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMTA1ODg2Ny8x"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="Drux1587" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMTA1ODg2Ny8x"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">Drux1587</span> </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 4 ans</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">-combien
                                          font 1+1?<br>-Oui<br>mdrr</div>
                                      </div>
                                    </div>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-237398" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMjk2ODEyMi8x"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="Xx Sarada xX" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMjk2ODEyMi8x"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">compte
                                            principal</span> </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 2 ans</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">c le
                                          dernier épisode ou ya une suite?</div>
                                      </div>
                                    </div>
                                  </li>
                                  <li data-testid="comment-item" id="commentaire-287852" class="sc-f8132342-1 cgwBxx">
                                    <div class="sc-f8132342-2 egXgRb"><span data-link="L3Byb2ZpbGUvMzUzNTM3My8x"
                                        role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR sc-f8132342-3 dPNZBt"><img
                                          alt="ZagZag42" loading="lazy" width="180" height="180" decoding="async"
                                          data-nimg="1" class="sc-f8132342-4 gpxdqr"
                                          src="https://avatar.animationdigitalnetwork.fr/web/ch4_bg0_green0_188.jpg"
                                          style="color: transparent;"></span></div>
                                    <div data-testid="comment-container" class="sc-f8132342-5 iMhFYv">
                                      <div class="sc-f8132342-6 hcKLri">
                                        <div class="sc-f8132342-7 cDgcsg"><span data-link="L3Byb2ZpbGUvMzUzNTM3My8x"
                                            role="link" tabindex="0" class="sc-fb73a479-0 jFWHTR">ZagZag42</span> </div>
                                        <div class="sc-f8132342-9 ghALZj"> Posté il y a 1 an</div>
                                      </div>
                                      <div class="sc-f8132342-10 ceaJdD">
                                        <div data-testid="comment-container-text" class="sc-f8132342-11 idRMlH">Si Gon
                                          peut communiquer avec les extraterrestres, ça veut dire qu'il en a déjà
                                          rencontré ?!? (Après le générique de fin)</div>
                                      </div>
                                    </div>
                                  </li>
                                </ul>
                              </div>
                              <div class="sc-d2f319dc-1 jreYYe"></div>
                              <div class="sc-d2f319dc-3 kqHagB"></div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div data-testid="relatedshowlist">
                  <div class="sc-5a07385f-0 bjqPKO">
                    <div class="sc-5a07385f-1 djrtre">
                      <h2 class="sc-5a07385f-2 fDafkR"><span class="sc-5a07385f-3 ikPnob">Anime à voir ensuite</span>
                      </h2>
                      <div>
                        <div class="sc-fbb18752-1 kpgeux">
                          <div data-testid="horizontal-list" class="sc-6eec03a9-0 kydjJB">
                            <div class="sc-6eec03a9-1 kLRzJm">
                              <ul class="sc-6eec03a9-2 egmhYp">
                                <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                  data-testid="show-item">
                                  <div class="sc-78652606-1 cjTGPX"><a class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                      href="/video/624-yu-yu-hakusho">
                                      <div class="sc-78652606-2 gtTxwn">
                                        <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img alt="Yu Yu Hakusho"
                                            loading="lazy" width="196" height="280" decoding="async" data-nimg="1"
                                            class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                            src="https://image.animationdigitalnetwork.fr/license/yuyuhakusho/tv/web/affiche_350x500.jpg">
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                        <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Yu Yu Hakusho</h3>
                                      </div>
                                    </a></div>
                                </li>
                                <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                  data-testid="show-item">
                                  <div class="sc-78652606-1 cjTGPX"><a class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                      href="/video/753-yu-yu-hakusho-oav-et-specials">
                                      <div class="sc-78652606-2 gtTxwn">
                                        <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                            alt="Yu Yu Hakusho - OAV et épisodes spéciaux" loading="lazy" width="196"
                                            height="280" decoding="async" data-nimg="1"
                                            class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                            src="https://image.animationdigitalnetwork.fr/license/yuyuhakusho/oav/web/affiche_350x500.jpg">
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                        <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Yu Yu Hakusho - OAV et épisodes
                                          spéciaux</h3>
                                      </div>
                                    </a></div>
                                </li>
                                <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                  data-testid="show-item">
                                  <div class="sc-78652606-1 cjTGPX"><a class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                      href="/video/390-assassination-classroom-saison-2">
                                      <div class="sc-78652606-2 gtTxwn">
                                        <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                            alt="Assassination Classroom - Saison 2" loading="lazy" width="196"
                                            height="280" decoding="async" data-nimg="1"
                                            class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                            src="https://image.animationdigitalnetwork.fr/license/assclass/tv2/web/affiche_350x500.jpg">
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                        <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Assassination Classroom - Saison
                                          2</h3>
                                      </div>
                                    </a></div>
                                </li>
                                <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                  data-testid="show-item">
                                  <div class="sc-78652606-1 cjTGPX"><a class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                      href="/video/344-assassination-classroom">
                                      <div class="sc-78652606-2 gtTxwn">
                                        <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                            alt="Assassination Classroom" loading="lazy" width="196" height="280"
                                            decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                            style="color:transparent"
                                            src="https://image.animationdigitalnetwork.fr/license/assclass/tv/web/affiche_350x500.jpg">
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                        <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Assassination Classroom</h3>
                                      </div>
                                    </a></div>
                                </li>
                                <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                  data-testid="show-item">
                                  <div class="sc-78652606-1 cjTGPX"><a class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                      href="/video/711-seraph-of-the-end-owari-no-seraph">
                                      <div class="sc-78652606-2 gtTxwn">
                                        <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                            alt="Seraph of the End" loading="lazy" width="196" height="280"
                                            decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                            style="color:transparent"
                                            src="https://image.animationdigitalnetwork.fr/license/seraph/tv/web/affiche_350x500.jpg">
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                        <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Seraph of the End</h3>
                                      </div>
                                    </a></div>
                                </li>
                                <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                  data-testid="show-item">
                                  <div class="sc-78652606-1 cjTGPX"><a class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                      href="/video/283-strike-the-blood">
                                      <div class="sc-78652606-2 gtTxwn">
                                        <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                            alt="Strike the Blood" loading="lazy" width="196" height="280"
                                            decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                            style="color:transparent"
                                            src="https://image.animationdigitalnetwork.fr/license/striketb/tv/web/affiche_350x500.jpg">
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                        <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Strike the Blood</h3>
                                      </div>
                                    </a></div>
                                </li>
                                <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                  data-testid="show-item">
                                  <div class="sc-78652606-1 cjTGPX"><a class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                      href="/video/766-robotics-notes">
                                      <div class="sc-78652606-2 gtTxwn">
                                        <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img alt="Robotics;Notes"
                                            loading="lazy" width="196" height="280" decoding="async" data-nimg="1"
                                            class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                            src="https://image.animationdigitalnetwork.fr/license/roboticsnotes/tv/web/affiche_350x500.jpg">
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                        <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Robotics;Notes</h3>
                                      </div>
                                    </a></div>
                                </li>
                                <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                  data-testid="show-item">
                                  <div class="sc-78652606-1 cjTGPX"><a class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                      href="/video/1072-helck">
                                      <div class="sc-78652606-2 gtTxwn">
                                        <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img alt="Helck"
                                            loading="lazy" width="196" height="280" decoding="async" data-nimg="1"
                                            class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                            src="https://image.animationdigitalnetwork.fr/license/helck/tv/web/affiche_350x500.jpg">
                                        </div>
                                      </div>
                                      <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                        <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Helck</h3>
                                      </div>
                                    </a></div>
                                </li>
                              </ul>
                            </div>
                            <div class="sc-6eec03a9-3 bBfLyW"><span
                                class="sc-45f49f9-0 kHRvYb icon sc-6eec03a9-4 kaJHtA icon-left"
                                data-testid="left-arrow"></span></div>
                            <div class="sc-6eec03a9-3 kQfEXv"><span
                                class="sc-45f49f9-0 kHRvYb icon sc-6eec03a9-4 kaJHtA icon-right"
                                data-testid="right-arrow"></span></div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div data-testid="pairshowlist">
                  <div data-testid="pairshowlist">
                    <div class="sc-5a07385f-0 bjqPKO">
                      <div class="sc-5a07385f-1 djrtre">
                        <h2 class="sc-5a07385f-2 fDafkR"><span class="sc-5a07385f-3 ikPnob">Shonen et anime</span></h2>
                        <div>
                          <div class="sc-fbb18752-1 kpgeux">
                            <div data-testid="horizontal-list" class="sc-6eec03a9-0 kydjJB">
                              <div class="sc-6eec03a9-1 kLRzJm">
                                <ul class="sc-6eec03a9-2 egmhYp">
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/624-yu-yu-hakusho">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="Yu Yu Hakusho" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/yuyuhakusho/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Yu Yu Hakusho</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/846-demon-slayer-kimetsu-no-yaiba-saison-1">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="Demon Slayer: Kimetsu no Yaiba" loading="lazy" width="196"
                                              height="280" decoding="async" data-nimg="1"
                                              class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/demonslayer/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Demon Slayer: Kimetsu no Yaiba
                                          </h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor" href="/video/1173-harmagedon">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img alt="Harmagedon"
                                              loading="lazy" width="196" height="280" decoding="async" data-nimg="1"
                                              class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/harmagedon/film/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Harmagedon</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor" href="/video/1104-trigun">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img alt="Trigun"
                                              loading="lazy" width="196" height="280" decoding="async" data-nimg="1"
                                              class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/trigun/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Trigun</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/522-dances-with-the-dragons">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="Dances with the Dragons" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/dancesdragons/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Dances with the Dragons</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/737-yu-yu-hakusho-the-movie">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="Yu Yu Hakusho : The Movie" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/yuyuhakusho/film/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Yu Yu Hakusho : The Movie</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/725-black-rock-shooter">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="Black Rock Shooter" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/brs/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Black Rock Shooter</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/390-assassination-classroom-saison-2">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="Assassination Classroom - Saison 2" loading="lazy" width="196"
                                              height="280" decoding="async" data-nimg="1"
                                              class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/assclass/tv2/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Assassination Classroom -
                                            Saison 2</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/442-sword-art-online">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="Sword Art Online" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/swordartonline/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Sword Art Online</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                </ul>
                              </div>
                              <div class="sc-6eec03a9-3 bBfLyW"><span
                                  class="sc-45f49f9-0 kHRvYb icon sc-6eec03a9-4 kaJHtA icon-left"
                                  data-testid="left-arrow"></span></div>
                              <div class="sc-6eec03a9-3 kQfEXv"><span
                                  class="sc-45f49f9-0 kHRvYb icon sc-6eec03a9-4 kaJHtA icon-right"
                                  data-testid="right-arrow"></span></div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div class="sc-5a07385f-0 bjqPKO">
                      <div class="sc-5a07385f-1 djrtre">
                        <h2 class="sc-5a07385f-2 fDafkR"><span class="sc-5a07385f-3 ikPnob">Avec des bagarres en
                            équipe</span></h2>
                        <div>
                          <div class="sc-fbb18752-1 kpgeux">
                            <div data-testid="horizontal-list" class="sc-6eec03a9-0 kydjJB">
                              <div class="sc-6eec03a9-1 kLRzJm">
                                <ul class="sc-6eec03a9-2 egmhYp">
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/658-tokyo-ghoul-re-saison-3">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="Tokyo Ghoul:re - Saison 3" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/tokyoghoul/tv3/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Tokyo Ghoul:re - Saison 3</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/481-valerian-et-laureline">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="Valérian et Laureline" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/valerian/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Valérian et Laureline</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/662-attaque-des-titans-shingeki-no-kyojin">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="L'Attaque des Titans" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/aot/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">L'Attaque des Titans</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/964-immoral-guild">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="Immoral Guild" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/immoralguild/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Immoral Guild</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor" href="/video/107-rainbow">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img alt="Rainbow"
                                              loading="lazy" width="196" height="280" decoding="async" data-nimg="1"
                                              class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/rainbow/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Rainbow</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor" href="/video/108-reborn">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img alt="Reborn!"
                                              loading="lazy" width="196" height="280" decoding="async" data-nimg="1"
                                              class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/reborn/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Reborn!</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/892-one-piece-oav-3d2y">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="One Piece OAV • 3D2Y" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/onepiece/special4/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">One Piece OAV • 3D2Y</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/924-one-piece-film-episode-alabasta-les-pirates-et-la-princesse-du-desert">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="One Piece Film 8 • Épisode d'Alabasta : Les Pirates et la Princesse du désert"
                                              loading="lazy" width="196" height="280" decoding="async" data-nimg="1"
                                              class="sc-593aa08f-5 sc-78652606-4 hEYays" style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/onepiece/film8/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">One Piece Film 8 • Épisode
                                            d'Alabasta : Les Pirates et la Princesse du désert</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/999-dragon-ball-super">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="Dragon Ball Super" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/dbsuper/tv/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Dragon Ball Super</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                  <li class="sc-593aa08f-0 sc-78652606-0 eJBcuO sc-fbb18752-0 qITtw"
                                    data-testid="show-item">
                                    <div class="sc-78652606-1 cjTGPX"><a
                                        class="sc-593aa08f-6 sc-78652606-7 bjjhkM cjmdor"
                                        href="/video/362-boruto-naruto-le-film">
                                        <div class="sc-78652606-2 gtTxwn">
                                          <div class="sc-593aa08f-4 sc-78652606-3 dzcMFc hozzmN"><img
                                              alt="Boruto : Naruto, le film" loading="lazy" width="196" height="280"
                                              decoding="async" data-nimg="1" class="sc-593aa08f-5 sc-78652606-4 hEYays"
                                              style="color:transparent"
                                              src="https://image.animationdigitalnetwork.fr/license/boruto/film/web/affiche_350x500.jpg">
                                          </div>
                                        </div>
                                        <div class="sc-593aa08f-1 sc-78652606-5 ereUTH laWkSU">
                                          <h3 class="sc-593aa08f-2 sc-78652606-6 ehNjVL">Boruto : Naruto, le film</h3>
                                        </div>
                                      </a></div>
                                  </li>
                                </ul>
                              </div>
                              <div class="sc-6eec03a9-3 bBfLyW"><span
                                  class="sc-45f49f9-0 kHRvYb icon sc-6eec03a9-4 kaJHtA icon-left"
                                  data-testid="left-arrow"></span></div>
                              <div class="sc-6eec03a9-3 kQfEXv"><span
                                  class="sc-45f49f9-0 kHRvYb icon sc-6eec03a9-4 kaJHtA icon-right"
                                  data-testid="right-arrow"></span></div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="sc-3b794bf1-0 sc-3b794bf1-2 fccbjH iUguuT">
                <div class="sc-7c8882ca-0 gWKUWh">
                  <div class="sc-7c8882ca-1 gKKoPN">
                    <div class="sc-7c8882ca-2 fzWdFj">
                      <div class="sc-7c8882ca-3 wfQkE"><span class="sc-7c8882ca-4 fMCNZF">+</span></div>
                      <div class="sc-7c8882ca-3 drflDN"><span class="sc-7c8882ca-5 TOQfn">15 000</span><span
                          class="sc-7c8882ca-6 VLWfO">ÉPISODES</span></div>
                    </div>
                    <div class="sc-7c8882ca-2 EPjJx">
                      <div class="sc-7c8882ca-7 dzFMEO"></div><span class="sc-7c8882ca-6 brbqRh">H+1</span>
                    </div>
                    <div class="sc-7c8882ca-2 iuOYfP"><span class="sc-7c8882ca-6 dEVjZE">HD</span></div>
                    <div class="sc-7c8882ca-2 gaABGy">
                      <div class="sc-7c8882ca-8 dyBrOn">
                        <div class="sc-7c8882ca-3 wfQkE"><span class="sc-7c8882ca-4 fMCNZF">+</span></div>
                        <div class="sc-7c8882ca-3 drflDN"><span class="sc-7c8882ca-5 dFPIMb">530</span>
                          <div class="sc-7c8882ca-9 xOogq"><span class="sc-7c8882ca-10 fuxvnZ">SÉRIES</span><span
                              class="sc-7c8882ca-10 fuxvnZ">&amp; <!-- -->FILMS</span></div>
                        </div>
                      </div>
                    </div>
                    <div class="sc-7c8882ca-2 jMetLH"><span
                        class="sc-45f49f9-0 kHRvYb icon sc-7c8882ca-11 donuey icon-screens"></span>
                      <div><span class="sc-7c8882ca-6 fopMPu">MULTIPLATEFORME</span></div>
                    </div>
                    <div class="sc-7c8882ca-2 iyldYe"><span
                        class="sc-45f49f9-0 kHRvYb icon sc-7c8882ca-11 zImyK icon-handmetal"></span>
                      <div><span class="sc-7c8882ca-6 hffVVV">SANS ENGAGEMENT</span></div>
                    </div><a class="sc-7c8882ca-12 iWXHni" href="/subscribe"></a>
                  </div>
                </div>
                <div class="sc-5a07385f-0 izqJqd">
                  <div class="sc-5a07385f-1 itDEN">
                    <h2 class="sc-5a07385f-2 gSjyFv"><span class="sc-5a07385f-3 eZfPND">Résumé de l'épisode</span></h2>
                    <div>
                      <div class="sc-a801f5c4-0 dvmutC">
                        <div class="sc-a801f5c4-1 jjgIst"><img
                            summary="La partie de balle au prisonnier se poursuit. Tour à tour, les équipiers de Gon et Kirua se font sortir du terrain ... Il ne reste plus que Hisoka.  Mais Gon a une idée pour vaincre Laser  mais pour la mettre en œuvre, il a besoin de l'aide de Kirua…"
                            class="sc-10eb2f-0 ijAnXs"
                            src="https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps70_640x360.jpg"
                            alt="La partie de balle au prisonnier se poursuit. Tour à tour, les équipiers de Gon et Kirua se font sortir du terrain ... Il ne reste plus que Hisoka.  Mais Gon a une idée pour vaincre Laser  mais pour la mettre en œuvre, il a besoin de l'aide de Kirua…"
                            data-testid="img-resume-episode"></div>
                        <p class="sc-a801f5c4-2 azCef">La partie de balle au prisonnier se poursuit. Tour à tour, les
                          équipiers de Gon et Kirua se font sortir du terrain ... Il ne reste plus que Hisoka. Mais Gon
                          a une idée pour vaincre Laser mais pour la mettre en œuvre, il a besoin de l'aide de Kirua…
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="sc-5a07385f-0 ilFYUV">
              <div class="sc-5a07385f-1 dBZhfz">
                <div>
                  <div class="sc-e71849ea-1 drbmWY"></div>
                  <div class="sc-e71849ea-0 cbBkcX">
                    <script defer="" type="text/javascript">
                      {
                        (function () {
                          const e = document.createElement('script');
                          const f = document.getElementsByTagName('script')[0];
                          e.src = //player.pepsia.com/sdk.js?d=190e99e04a3;
                            e.type = 'text/javascript';
                          e.async = !0;
                          f.parentNode.insertBefore(e, f);
                        })()
                      }
                    </script>
                    <div class="pepsia_player" data-token="00ea" data-popup="bottom-left" data-logo="0"></div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="sc-499ed712-0 hjHByy"><a class="sc-499ed712-1 bVkEhA" href="/"></a>
          <div class="sc-499ed712-2 hSydCm"><a target="_blank" class="sc-499ed712-3 iyvrgK"
              href="https://www.facebook.com/ADN-163110993879311/"><span
                class="sc-45f49f9-0 kHRvYb icon sc-499ed712-4 jVnhGX icon-facebook"></span></a><a target="_blank"
              class="sc-499ed712-3 kZrbNh" href="https://www.instagram.com/animationdigitalnetwork/"><span
                class="sc-45f49f9-0 kHRvYb icon sc-499ed712-4 jVnhGX icon-instagram"></span></a><a target="_blank"
              class="sc-499ed712-3 ekITHO" href="https://twitter.com/adnanime"><span
                class="sc-45f49f9-0 kHRvYb icon sc-499ed712-4 jVnhGX icon-twitter"></span></a><a target="_blank"
              class="sc-499ed712-3 kOvzCS" href="https://www.youtube.com/channel/UCguBmD8D2uN6Sn6Ch-cVk_g"><span
                class="sc-45f49f9-0 kHRvYb icon sc-499ed712-4 jVnhGX icon-youtube"></span></a><a target="_blank"
              class="sc-499ed712-3 ghwxtG" href="https://www.twitch.tv/adnanime"><span
                class="sc-45f49f9-0 kHRvYb icon sc-499ed712-4 eOpmMt icon-twitch"></span></a></div>
        </div>
        <div class="sc-499ed712-5 fRItrR">
          <div class="sc-499ed712-6 bZPxEl">
            <div class="sc-499ed712-7 hXgmlo">
              <h4 class="sc-499ed712-8 YsXXp"><span
                  class="sc-45f49f9-0 kHRvYb icon sc-499ed712-9 epnMSe icon-friends"></span> Vous &amp; nous</h4>
              <ul class="sc-499ed712-10 eqIxxv">
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz"
                    href="/contact-us/create-ticket">Contactez-nous</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/faq">FAQ</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/about-us">Qui sommes-nous
                    ?</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/adn-team">L'équipe ADN</a>
                </li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/jobs">Recrutement</a></li>
              </ul>
            </div>
            <div class="sc-499ed712-7 hXgmlo">
              <h4 class="sc-499ed712-8 YsXXp"><span
                  class="sc-45f49f9-0 kHRvYb icon sc-499ed712-9 epnMSe icon-leader"></span> Séries les plus populaires
              </h4>
              <ul class="sc-499ed712-10 eqIxxv">
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz"
                    href="/video/1003-dragon-ball-z">Dragon Ball Z</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/video/269-fairy-tail">Fairy
                    Tail</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz"
                    href="/video/265-naruto-shippuden">Naruto Shippuden</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz"
                    href="/video/626-one-piece-saga-7-guerre-au-sommet">One Piece : Saga 07 - Guerre au sommet</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz"
                    href="/video/694-one-piece-saga-10-dressrosa">One Piece : Saga 10 - Dressrosa</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz"
                    href="/video/563-one-piece-saga-12-whole-cake-island">One Piece : Saga 12 - Whole Cake Island</a>
                </li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz"
                    href="/video/469-one-piece-saga-14-pays-de-wano">One Piece : Saga 14 - Pays de Wano</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz"
                    href="/video/1116-one-piece-saga-15-egg-head">One Piece : Saga 15 - Egghead</a></li>
              </ul>
            </div>
            <div class="sc-499ed712-7 hXgmlo">
              <h4 class="sc-499ed712-8 YsXXp"><span
                  class="sc-45f49f9-0 kHRvYb icon sc-499ed712-9 epnMSe icon-geography-earth"></span> Navigation</h4>
              <ul class="sc-499ed712-10 eqIxxv">
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/account">Mon profil</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/subscribe">Nos offres</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/video">Catalogue</a></li>
              </ul>
            </div>
            <div class="sc-499ed712-7 hXgmlo">
              <h4 class="sc-499ed712-8 YsXXp"><span
                  class="sc-45f49f9-0 kHRvYb icon sc-499ed712-9 epnMSe icon-compare-balance"></span> Légal</h4>
              <ul class="sc-499ed712-10 eqIxxv">
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/tos">Conditions générales de
                    vente</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/privacy-policy">Charte pour la
                    protection des données personnelles</a></li>
                <li class="sc-499ed712-11 dlZfBl"><a class="sc-499ed712-12 fKbhKz" href="/legal-notice">Mentions
                    Légales</a></li>
                <li class="sc-499ed712-11 dlZfBl"><span class="sc-499ed712-13 doErwq">Paramètres des cookies</span></li>
              </ul>
            </div>
          </div>
          <p class="sc-499ed712-14 izWbEj">© 2022 Animationdigitalnetwork.com est un site du groupe Média-Participations
            opéré par ADN - ANIMATION DIGITAL NETWORK.</p>
        </div>
      </div>
    </div>
  </div>
  <div id="pin-code-portal"></div>
  <div id="confirm-popup-portal"></div>
  <script id="__NEXT_DATA__"
    type="application/json">{"props":{"pageProps":{"dehydratedState":{"mutations":[],"queries":[{"state":{"data":{"shows":[{"id":1003,"title":"Dragon Ball Z","type":"EPS","originalTitle":"ドラゴンボールＺ","shortTitle":"Dragon Ball Z","reference":"dbz_tv","age":"10+","languages":["vostf","vf"],"summary":"Depuis leur mariage, Son Goku et Chichi vivent des jours heureux en famille. Seulement, cette apparente tranquillité se retrouve ébranlée par l’arrivée de Radditz, qui lui révèle être son frère ainsi qu’un Saïyen, un guerrier extraterrestre doté d’une force surhumaine. Afin de l’enjoindre à rejoindre sa cause, ce dernier kidnappe Son Gohan. Aidé par Piccolo et ses amis, Son Goku va tout mettre en œuvre afin de libérer son fils.","image":"https://image.animationdigitalnetwork.fr/license/dbz/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/dbz/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/dbz/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/dbz/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/1003-dragon-ball-z","urlPath":"/video/1003-dragon-ball-z","episodeCount":291,"genres":["Animation japonaise","Action","Aventure","Comédie","Fantastique","Nostalgie","Shônen"],"copyright":"©Bird Studio/Shueisha, Toei Animation","rating":4.9,"ratingsCount":1746,"commentsCount":61,"qualities":["sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":"Retrouvez l'exclusivité de « Dragon Ball Z », la série mythique d'Akira Toriyama, sur ADN !","firstReleaseYear":"1986","productionStudio":"Toei Animation","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Daisuke Nishio, Shigeyasu Yamauchi"},{"role":"Mangaka","name":"Akira Toriyama"},{"role":"Compositeur","name":"Shunsuke Kikuchi"},{"role":"Character designer","name":"Minoru Maeda"}],"nextVideoReleaseDate":null,"indexable":true},{"id":269,"title":"Fairy Tail","type":"EPS","originalTitle":"Fairy Tail","shortTitle":"Fairy Tail","reference":"fairytail_tv","age":"12+","languages":["vostf","vf"],"summary":"Le Royaume de Fiore. Ce pays perpétuellement neutre qui compte 17 millions d'habitants, est aussi un monde de magie et de mystères. La magie fait partie du quotidien et son commerce y est entièrement libre. Ainsi, certains, passés maîtres, décident d'en faire leur profession. On les appelle les Mages. Contre rétribution, ils œuvrent pour le bien de la communauté. Leur force est aussi leur nombre, ils se regroupent dans différentes guildes, disséminées un peu partout dans le royaume. Parmi celles-ci, se trouve une guilde toute particulière, qui hier comme aujourd'hui, a fait naître de nombreuses légendes. Elle a pour nom : Fairy Tail.","image":"https://image.animationdigitalnetwork.fr/license/fairytail/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/fairytail/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/fairytail/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/fairytail/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/269-fairy-tail","urlPath":"/video/269-fairy-tail","episodeCount":328,"genres":["Animation japonaise","Jeunesse","Action","Aventure","Comédie","Fantastique","Shônen"],"copyright":"Based on the manga “FAIRY TAIL” by Hiro Mashima originally serialized in the weekly SHONEN MAGAZINE published by KODANSHA Ltd.\n©Hiro Mashima・KODANSHA/Fairy Tail Guild・TV TOKYO. All Rights Reserved.\n©Hiro Mashima･KODANSHA/Fairy Tail project･TV TOKYO.All Rights Reserved.\n©Hiro Mashima, KODANSHA/FAIRY TAIL Committee,TV TOKYO","rating":4.8,"ratingsCount":33140,"commentsCount":586,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":true,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2009","productionStudio":"A-1 Pictures","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Shinji Ishihira"},{"role":"Scénariste","name":"Masashi Sogo"},{"role":"Compositeur","name":"Yasuharu Takanashi"},{"role":"Mangaka","name":"Hiro Mashima"},{"role":"Character designer","name":"Aoi Yamamoto"}],"nextVideoReleaseDate":null,"indexable":true},{"id":265,"title":"Naruto Shippuden","type":"EPS","originalTitle":"Naruto Shippuden","shortTitle":"Naruto Shippuden","reference":"naruto_tv2","age":"10+","languages":["vostf","vf"],"summary":"Naruto est de retour&nbsp;! Après deux ans et demi d’entraînement avec Jiraya, il retrouve ses camarades de l’Académie des ninjas ainsi que ses professeurs de Konoha. Tous ont évolué, y compris les ninjas du village de Suna. Seul Kakashi semble être resté fidèle à lui-même. Hélas, les retrouvailles sont de courte durée. Gaara, devenu depuis peu Kazekage de son village, est menacé. Tout porte à croire que l’Akatsuki soit à l’origine de l’attaque, mais dans quel but&nbsp;?","image":"https://image.animationdigitalnetwork.fr/license/naruto/tv2/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/naruto/tv2/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/naruto/tv2/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/naruto/tv2/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/265-naruto-shippuden","urlPath":"/video/265-naruto-shippuden","episodeCount":503,"genres":["Animation japonaise","Jeunesse","Action","Arts Martiaux","Aventure","Comédie","Fantastique","Shônen"],"copyright":"©2002 MASASHI KISHIMOTO / 2007 SHIPPUDEN All Rights Reserved.","rating":4.7,"ratingsCount":56536,"commentsCount":484,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":true,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2007","productionStudio":"Pierrot","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Hayato Date"},{"role":"Scénariste","name":"Junki Takegami"},{"role":"Compositeur","name":"Yasuharu Takanashi"},{"role":"Auteur","name":"Masashi Kishimoto"},{"role":"Character designer","name":"Tetsuya Nishio"}],"nextVideoReleaseDate":null,"indexable":true},{"id":626,"title":"One Piece : Saga 07 - Guerre au sommet","type":"EPS","originalTitle":"One Piece : Saga 07 - Summit War","shortTitle":null,"reference":"onepiece_arc7","age":"10+","languages":["vostf","vf"],"summary":"Portgas D. Ace, le commandant de la deuxième division de l’équipage de Barbe Blanche sera exécuté à 15h précise à Marine Ford. Pour assurer le bon déroulement de cette exécution, le Gouvernement Mondial mobilise les troupes d’élite de la Marine avec plus de 100 000 soldats et 50 navires de guerre. Il convoque également ses hommes les plus puissants : les Grands Corsaires et les amiraux.\n\nAfin d’empêcher l’exécution, Barbe Blanche réunit son équipage et fait appel aux 43 capitaines pirates qui lui ont juré allégeance dans le Nouveau Monde pour prendre d’assaut Marine Ford.\n\nLa plus grande bataille depuis le début de l’Âge d’Or de la piraterie est sur le point de commencer : les forces du Gouvernement Mondial contre l’homme le plus fort du monde et « ses fils ». Une bataille dont l’issue bouleversera à jamais l’équilibre du monde. Luffy réussira-t-il à se faire une place dans cette bataille au sommet pour sauver son frère ?","image":"https://image.animationdigitalnetwork.fr/license/onepiece/arc7/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/onepiece/arc7/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/onepiece/arc7/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/onepiece/arc7/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/626-one-piece-saga-7-guerre-au-sommet","urlPath":"/video/626-one-piece-saga-7-guerre-au-sommet","episodeCount":126,"genres":["Animation japonaise","Jeunesse","Aventure","Comédie","Fantastique","Shônen"],"copyright":"Film © 1999 Toei Animation Co., Ltd.  © Eiichiro Oda/Shueisha, Toei Animation","rating":4.8,"ratingsCount":22227,"commentsCount":227,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"1999","productionStudio":"Toei Animation","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Konosuke Uda"},{"role":"Scénariste","name":"Ryota Yamaguchi"},{"role":"Compositeur","name":"Kohei Tanaka"},{"role":"Mangaka","name":"Eiichirô Oda"},{"role":"Character designer","name":"Noboru Koizumi"}],"nextVideoReleaseDate":null,"indexable":true},{"id":694,"title":"One Piece : Saga 10 - Dressrosa","type":"EPS","originalTitle":null,"shortTitle":null,"reference":"onepiece_arc10","age":"10+","languages":["vostf","vf"],"summary":"L'alliance de l'équipage au Chapeau de paille et de Trafalgar. Law se dirige maintenant vers Dressrosa, une île gouvernée par l'un des pires Grands Corsaires : Doflamingo. En plus de devoir détruire l'usine de Smiles, Luffy et ses compagnons auront une autre raison d'affronter les dangers de Dressrosa : récupérer le fruit du démon d'Ace aux Poings Ardents...","image":"https://image.animationdigitalnetwork.fr/license/onepiece/arc10/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/onepiece/arc10/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/onepiece/arc10/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/onepiece/arc10/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/694-one-piece-saga-10-dressrosa","urlPath":"/video/694-one-piece-saga-10-dressrosa","episodeCount":118,"genres":["Animation japonaise","Jeunesse","Action","Aventure","Comédie","Fantastique","Shônen"],"copyright":"©Eiichiro Oda/Shueisha, Toei Animation","rating":4.9,"ratingsCount":15195,"commentsCount":207,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"1998","productionStudio":"Toei Animation","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Konosuke Uda"},{"role":"Scénariste","name":"Ryota Yamaguchi"},{"role":"Compositeur","name":"Kohei Tanaka"},{"role":"Mangaka","name":"Eiichirô Oda"},{"role":"Character designer","name":"Noboru Koizumi"}],"nextVideoReleaseDate":null,"indexable":true},{"id":563,"title":"One Piece : Saga 12 - Whole Cake Island","type":"EPS","originalTitle":"One Piece","shortTitle":null,"reference":"onepiece_arc14","age":"10+","languages":["vostf","vf"],"summary":"Oyez ! Oyez ! Pirates de tous bords ! Gol D.Roger, le légendaire Roi des pirates, mort sur l’échafaud, a laissé derrière lui un trésor inestimable : le « One Piece ». Monkey D.Luffy, un garçon naïf et impulsif, rêve de mettre la main sur ce fameux butin et de devenir le nouveau Roi des Pirates.  Parcourant les mers, il rassemble au fil de l’eau un équipage redoutable.\n\nC’est justement le kidnapping de son cuisinier, Sanji, qui pousse nos héros à débarquer en secret sur l’île de Whole Cake Island, le fief de la terrible Big Mom. Bien décidés à sauver leur ami de ce mariage forcé, Monkey D.Luffy et une partie de l’équipage vont devoir faire face à l’immense famille de l’impératrice, tous plus dangereux et puissants les uns que les autres… L’heure du sinistre goûter nuptial approche ! ","image":"https://image.animationdigitalnetwork.fr/license/onepiece/arc14/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/onepiece/arc14/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/onepiece/arc14/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/onepiece/arc14/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/563-one-piece-saga-12-whole-cake-island","urlPath":"/video/563-one-piece-saga-12-whole-cake-island","episodeCount":98,"genres":["Shônen Jump","Animation japonaise","Jeunesse","Action","Aventure","Comédie","Fantastique","Shônen"],"copyright":"Film © 1999 Toei Animation Co., Ltd.  © Eiichiro Oda/Shueisha, Toei Animation","rating":4.8,"ratingsCount":13617,"commentsCount":297,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"1999","productionStudio":"Toei Animation","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Konosuke Uda"},{"role":"Scénariste","name":"Ryota Yamaguchi"},{"role":"Compositeur","name":"Kohei Tanaka"},{"role":"Mangaka","name":"Eiichirô Oda"},{"role":"Character designer","name":"Noboru Koizumi"}],"nextVideoReleaseDate":null,"indexable":true},{"id":469,"title":"One Piece : Saga 14 - Pays de Wano","type":"EPS","originalTitle":"One Piece","shortTitle":"One Piece","reference":"onepiece_tv","age":"10+","languages":["vostf","vf"],"summary":"Oyez ! Oyez ! Pirates de tous bords ! Gol D.Roger, le légendaire Roi des pirates, mort sur l’échafaud, a laissé derrière lui un trésor inestimable : le « One Piece ». Monkey D.Luffy, un garçon naïf et impulsif, rêve de mettre la main sur ce fameux butin et de devenir le nouveau Roi des Pirates. Parcourant les mers, il rassemble au fil de l’eau un équipage redoutable.\nLuffy et ses compagnons débarquent au pays de Wano pour affronter le terrible Kaido, réputé pour être la personne la plus forte du monde. Là-bas, ils y retrouvent Zoro et le reste de l'équipage infiltrés dans tout le pays...","image":"https://image.animationdigitalnetwork.fr/license/onepiece/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/onepiece/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/onepiece/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/onepiece/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/469-one-piece-saga-14-pays-de-wano","urlPath":"/video/469-one-piece-saga-14-pays-de-wano","episodeCount":208,"genres":["Animation japonaise","Jeunesse","Action","Aventure","Comédie","Fantastique","Shônen"],"copyright":"Film © 1999 Toei Animation Co., Ltd. © Eiichiro Oda/Shueisha, Toei Animation","rating":4.7,"ratingsCount":49119,"commentsCount":1588,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"1999","productionStudio":"Toei Animation","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Konosuke Uda"},{"role":"Scénariste","name":"Ryota Yamaguchi"},{"role":"Compositeur","name":"Kohei Tanaka"},{"role":"Mangaka","name":"Eiichirô Oda"},{"role":"Character designer","name":"Noboru Koizumi"}],"nextVideoReleaseDate":null,"indexable":true},{"id":1116,"title":"One Piece : Saga 15 - Egghead","type":"EPS","originalTitle":"ワンピース","shortTitle":"One Piece","reference":"onepiece_tv15","age":"10+","languages":["vostf"],"summary":"Oyez ! Oyez ! Pirates de tous bords ! Gol D. Roger, le légendaire Roi des pirates, mort sur l’échafaud, a laissé derrière lui un trésor inestimable : le « One Piece ». Monkey D. Luffy, un garçon naïf et impulsif, rêve de mettre la main sur ce fameux butin et de devenir le nouveau Roi des Pirates. Parcourant les mers, il rassemble au fil de l’eau un équipage redoutable.\nAprès avoir quitté le pays de Wa, Luffy et son équipage accostent sur l’île de Egg Head où réside le talentueux et mystérieux Dr Vegapunk. Malheureusement pour eux, le Gouvernement Mondial envoie une équipe du CP0 dont la mission est d’assassiner le scientifique.","image":"https://image.animationdigitalnetwork.fr/license/onepiece/tv15/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/onepiece/tv15/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/onepiece/tv15/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/onepiece/tv15/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/1116-one-piece-saga-15-egg-head","urlPath":"/video/1116-one-piece-saga-15-egg-head","episodeCount":27,"genres":["Animation japonaise","Jeunesse","Action","Aventure","Comédie","Fantastique","Shônen"],"copyright":"©Eiichiro Oda / Shueisha, Toei Animation","rating":4.7,"ratingsCount":1832,"commentsCount":59,"qualities":["fhd","hd","sd"],"distributions":"fr,de","simulcast":true,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":"Une nouvelle aventure attend Luffy et son équipage ! Le début de la saga finale commence !","firstReleaseYear":"1999","productionStudio":"Toei Animation","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Fukasawa Toshinori"},{"role":"Scénariste","name":"Shoji Yonemura"},{"role":"Mangaka","name":"Eiichiro Oda"},{"role":"Compositeur","name":"Kohei Tanaka, Shiro Hamaguchi"},{"role":"Directeur de la photographie","name":"Hideki Chiba, Tomoya Hosaka"},{"role":"Directeur de l'animation","name":"Kazuya Hisada, Keiichi Ichikawa"}],"nextVideoReleaseDate":"2024-07-28T07:00:00Z","indexable":true}]},"dataUpdateCount":1,"dataUpdatedAt":1721906364126,"error":null,"errorUpdateCount":0,"errorUpdatedAt":0,"fetchFailureCount":0,"fetchFailureReason":null,"fetchMeta":null,"isInvalidated":false,"status":"success","fetchStatus":"idle"},"queryKey":["topShows",{"limit":8}],"queryHash":"[\"topShows\",{\"limit\":8}]"},{"state":{"data":{"video":{"id":3533,"title":"Hunter x Hunter (2011) - Épisode 70","name":"Volonté et amitié !","number":"Épisode 70","shortNumber":"70","season":"Arc 05 : Greed Island","reference":"hunter_tv2_0070","type":"EPS","order":70,"image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps70_320x180.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps70_640x360.jpg","summary":"La partie de balle au prisonnier se poursuit. Tour à tour, les équipiers de Gon et Kirua se font sortir du terrain ... Il ne reste plus que Hisoka.  Mais Gon a une idée pour vaincre Laser  mais pour la mettre en œuvre, il a besoin de l'aide de Kirua…","releaseDate":"2013-04-03T12:00:00Z","duration":1355,"url":"https://animationdigitalnetwork.com/video/267-hunter-x-hunter-2011/3533-episode-70","urlPath":"/video/267-hunter-x-hunter-2011/3533-episode-70","embeddedUrl":"https://animationdigitalnetwork.com/embedded/267-hunter-x-hunter-2011/3533","languages":["vostf","vf"],"qualities":["fhd","hd","sd","mobile"],"rating":5,"ratingsCount":180,"commentsCount":13,"available":true,"download":false,"free":false,"freeWithAds":true,"show":{"id":267,"title":"Hunter x Hunter (2011)","type":"EPS","originalTitle":"????×????","shortTitle":"Hunter x Hunter (2011)","reference":"hunter_tv2","age":"12+","languages":["vostf","vf"],"summary":"Gon Freecss est un jeune garçon de 12 ans qui rêve de devenir «&nbsp;Hunter&nbsp;». Les «&nbsp;Hunter&nbsp;» sont des aventuriers d’élites dans des domaines aussi différents que la cuisine, l’archéologie, la justice… Ils peuvent être aussi chasseurs de primes ou bien consultants. Gon va se présenter à l’examen afin de retrouver son père qu’il ne connaît pas, l’un des plus grands «&nbsp;Hunter&nbsp;» de son temps. Trois autres aspirants «&nbsp;Hunter&nbsp;» vont se rapprocher de Gon, afin de former une équipe solide et soudée. Une fois leur but commun atteint, la quête qui s’annonce sera des plus passionnantes. ","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/267-hunter-x-hunter-2011","urlPath":"/video/267-hunter-x-hunter-2011","episodeCount":148,"genres":["Shônen Jump","Animation japonaise","Jeunesse","Action","Aventure","Fantastique","Shônen"],"copyright":"©P98-21 ©V • N • S • M\n©P98-21 ©V • N • M","rating":4.8,"ratingsCount":25694,"commentsCount":492,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":true,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2011","productionStudio":"Madhouse","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Kazuhiro Furuhashi"},{"role":"Scénariste","name":"Nobuaki Kishima"},{"role":"Mangaka","name":"Yoshihiro Togashi"},{"role":"Compositeur","name":"Toshihiko Sahashi"},{"role":"Character designer","name":"Takayuki Goto"}],"nextVideoReleaseDate":null,"indexable":true},"microdata":{"@context":"http://schema.org","@type":"TVEpisode","name":"Hunter x Hunter (2011) - Épisode 70 : Volonté et amitié !","description":"La partie de balle au prisonnier se poursuit. Tour à tour, les équipiers de Gon et Kirua se font sortir du terrain ... Il ne reste plus que Hisoka.  Mais Gon a une idée pour vaincre Laser  mais pour la mettre en œuvre, il a besoin de l'aide de Kirua…","episodeNumber":"70","thumbnailUrl":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps70_640x360.jpg","video":{"@type":"VideoObject","name":"Hunter x Hunter (2011) - Épisode 70 : Volonté et amitié !","url":"https://animationdigitalnetwork.com/video/267-hunter-x-hunter-2011/3533-episode-70","description":"Retrouvez Hunter x Hunter (2011) - Épisode 70 en streaming VF et VOSTFR sur Animation Digital Network ! Qualité HD 1080p, HD 720p et SD 480p.","caption":"Retrouvez Hunter x Hunter (2011) - Épisode 70 en streaming VF et VOSTFR sur Animation Digital Network ! Qualité HD 1080p, HD 720p et SD 480p.","encodingFormat":"mp4","videoQuality":"HD 1080p","requiresSubscription":false,"thumbnailUrl":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps70_1920x1080.jpg","duration":"PT22M35S","width":1920,"height":1080,"playerType":"HTML5","isFamilyFriendly":true,"datePublished":"2013-04-03T12:00:00Z","uploadDate":"2013-04-03T12:00:00Z","genre":"Shônen Jump, Animation japonaise, Jeunesse, Action, Aventure, Fantastique, Shônen","embedUrl":"https://animationdigitalnetwork.com/embedded/267-hunter-x-hunter-2011/3533","interactionStatistic":{"@type":"InteractionCounter","interactionType":"http://schema.org/CommentAction","userInteractionCount":13},"author":[{"@type":"Person","name":"ADN","url":"https://animationdigitalnetwork.com"}],"inLanguage":["jp","fr"],"potentialAction":{"@type":"WatchAction","target":[{"url":"https://animationdigitalnetwork.com/video/267-hunter-x-hunter-2011/3533-episode-70","actionPlatform":"https://schema.org/DesktopWebPlatform","inLanguage":["jp","fr"]},{"url":"https://animationdigitalnetwork.com/video/267-hunter-x-hunter-2011/3533-episode-70","actionPlatform":"https://schema.org/MobileWebPlatform","inLanguage":["jp","fr"]},{"url":"https://animationdigitalnetwork.com/video/267-hunter-x-hunter-2011/3533-episode-70","actionPlatform":"https://schema.org/IOSPlatform","inLanguage":["jp","fr"]},{"url":"https://animationdigitalnetwork.com/video/267-hunter-x-hunter-2011/3533-episode-70","actionPlatform":"https://schema.org/AndroidPlatform","inLanguage":["jp","fr"]}],"actionAccessibilityRequirement":{"@type":"ActionAccessSpecification","category":"noLoginRequired","availabilityStarts":"2013-04-03T12:00:00Z","availabilityEnds":"2027-09-21T00:00:00Z"}}},"subtitleLanguage":"fr","partOfSeries":{"@type":"TVSeries","name":"Hunter x Hunter (2011)","url":"https://animationdigitalnetwork.com/video/267-hunter-x-hunter-2011"},"partOfSeason":{"@type":"CreativeWorkSeason","name":"Arc 05 : Greed Island"},"aggregateRating":{"@type":"AggregateRating","ratingValue":5,"ratingCount":180}},"seo":{"title":"Hunter x Hunter (2011) - Arc 05 : Greed Island Épisode 70 : Volonté et amitié ! - streaming - VF et VOSTFR - ADN","description":"Retrouvez Hunter x Hunter (2011) - Épisode 70 en streaming VF et VOSTFR sur Animation Digital Network ! Qualité HD 1080p, HD 720p et SD 480p."},"indexable":true}},"dataUpdateCount":1,"dataUpdatedAt":1721906364140,"error":null,"errorUpdateCount":0,"errorUpdatedAt":0,"fetchFailureCount":0,"fetchFailureReason":null,"fetchMeta":null,"isInvalidated":false,"status":"success","fetchStatus":"idle"},"queryKey":["video ",{"videoId":3533,"withMicrodata":true,"withSeo":true,"skipDistributionCheck":true}],"queryHash":"[\"video \",{\"skipDistributionCheck\":true,\"videoId\":3533,\"withMicrodata\":true,\"withSeo\":true}]"},{"state":{"data":{"seasons":[{"season":"Arc 01 : Examen de Hunter","title":"Arc 01 : Examen de Hunter","videos":[{"id":3464,"title":"Hunter x Hunter (2011) - Épisode 1","name":"Un départ et des amis","number":"Épisode 1","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps1_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3464-episode-1","free":false,"freeWithAds":true},{"id":3465,"title":"Hunter x Hunter (2011) - Épisode 2","name":"L'épreuve des épreuves","number":"Épisode 2","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps2_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3465-episode-2","free":false,"freeWithAds":true},{"id":3466,"title":"Hunter x Hunter (2011) - Épisode 3","name":"Il faut se battre pour y arriver","number":"Épisode 3","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps3_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3466-episode-3","free":false,"freeWithAds":true},{"id":3467,"title":"Hunter x Hunter (2011) - Épisode 4","name":"Espoirs et ambitions","number":"Épisode 4","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps4_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3467-episode-4","free":false,"freeWithAds":true},{"id":3468,"title":"Hunter x Hunter (2011) - Épisode 5","name":"Hisoka est sournois","number":"Épisode 5","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps5_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3468-episode-5","free":false,"freeWithAds":true},{"id":3469,"title":"Hunter x Hunter (2011) - Épisode 6","name":"Une épreuve étonnante","number":"Épisode 6","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps6_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3469-episode-6","free":false,"freeWithAds":true},{"id":3470,"title":"Hunter x Hunter (2011) - Épisode 7","name":"Combat décisif à bord du dirigeable","number":"Épisode 7","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps7_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3470-episode-7","free":false,"freeWithAds":true},{"id":3471,"title":"Hunter x Hunter (2011) - Épisode 8","name":"La majorité l'emporte","number":"Épisode 8","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps8_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3471-episode-8","free":false,"freeWithAds":true},{"id":3472,"title":"Hunter x Hunter (2011) - Épisode 9","name":"Attention aux prisonniers","number":"Épisode 9","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps9_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3472-episode-9","free":false,"freeWithAds":true},{"id":3473,"title":"Hunter x Hunter (2011) - Épisode 10","name":"L'occasion fait le larron","number":"Épisode 10","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps10_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3473-episode-10","free":false,"freeWithAds":true},{"id":3474,"title":"Hunter x Hunter (2011) - Épisode 11","name":"Un pari de maboul","number":"Épisode 11","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps11_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3474-episode-11","free":false,"freeWithAds":true},{"id":3475,"title":"Hunter x Hunter (2011) - Épisode 12","name":"Un dernier choix pour la route","number":"Épisode 12","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps12_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3475-episode-12","free":false,"freeWithAds":true},{"id":3476,"title":"Hunter x Hunter (2011) - Épisode 13","name":"Des nouvelles de Gon","number":"Épisode 13","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps13_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3476-episode-13","free":false,"freeWithAds":true},{"id":3477,"title":"Hunter x Hunter (2011) - Épisode 14","name":"Toucher sa cible !","number":"Épisode 14","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps14_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3477-episode-14","free":false,"freeWithAds":true},{"id":3478,"title":"Hunter x Hunter (2011) - Épisode 15","name":"Tromperies à la chaîne","number":"Épisode 15","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps15_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3478-episode-15","free":false,"freeWithAds":true},{"id":3479,"title":"Hunter x Hunter (2011) - Épisode 16","name":"Défaite et humiliation","number":"Épisode 16","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps16_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3479-episode-16","free":false,"freeWithAds":true},{"id":3480,"title":"Hunter x Hunter (2011) - Épisode 17","name":"Piège dans la grotte","number":"Épisode 17","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps17_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3480-episode-17","free":false,"freeWithAds":true},{"id":3481,"title":"Hunter x Hunter (2011) - Épisode 18","name":"Un entretien décisif","number":"Épisode 18","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps18_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3481-episode-18","free":false,"freeWithAds":true},{"id":3482,"title":"Hunter x Hunter (2011) - Épisode 19","name":"Victoire impossible, défaite impossible","number":"Épisode 19","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps19_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3482-episode-19","free":false,"freeWithAds":true},{"id":3483,"title":"Hunter x Hunter (2011) - Épisode 20","name":"Un développement inattendu","number":"Épisode 20","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps20_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3483-episode-20","free":false,"freeWithAds":true},{"id":3484,"title":"Hunter x Hunter (2011) - Épisode 21","name":"Querelles fraternelles","number":"Épisode 21","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps21_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3484-episode-21","free":false,"freeWithAds":true}]},{"season":"Arc 02 : Kukuru Mountain","title":"Arc 02 : Kukuru Mountain","videos":[{"id":3485,"title":"Hunter x Hunter (2011) - Épisode 22","name":"Un dangereux chien de garde","number":"Épisode 22","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps22_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3485-episode-22","free":false,"freeWithAds":true},{"id":3486,"title":"Hunter x Hunter (2011) - Épisode 23","name":"Les devoirs d'un garde","number":"Épisode 23","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps23_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3486-episode-23","free":false,"freeWithAds":true},{"id":3487,"title":"Hunter x Hunter (2011) - Épisode 24","name":"La famille Zoldik","number":"Épisode 24","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps24_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3487-episode-24","free":false,"freeWithAds":true},{"id":3488,"title":"Hunter x Hunter (2011) - Épisode 25","name":"Tu ne le verras pas si tu ne la vois pas","number":"Épisode 25","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps25_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3488-episode-25","free":false,"freeWithAds":true},{"id":3489,"title":"Hunter x Hunter (2011) - Épisode 26","name":"Avant et après","number":"Épisode 26","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps26_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3489-episode-26","free":false,"freeWithAds":true}]},{"season":"Arc 03 : Tour Céleste","title":"Arc 03 : Tour Céleste","videos":[{"id":3490,"title":"Hunter x Hunter (2011) - Épisode 27","name":"Entrée dans l'arène","number":"Épisode 27","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps27_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3490-episode-27","free":false,"freeWithAds":true},{"id":3491,"title":"Hunter x Hunter (2011) - Épisode 28","name":"Nen et Nen","number":"Épisode 28","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps28_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3491-episode-28","free":false,"freeWithAds":true},{"id":3492,"title":"Hunter x Hunter (2011) - Épisode 29","name":"Éveil et potentiel","number":"Épisode 29","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps29_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3492-episode-29","free":false,"freeWithAds":true},{"id":3493,"title":"Hunter x Hunter (2011) - Épisode 30","name":"Combat acharné et querelle","number":"Épisode 30","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps30_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3493-episode-30","free":false,"freeWithAds":true},{"id":3494,"title":"Hunter x Hunter (2011) - Épisode 31","name":"Destinée et ténacité","number":"Épisode 31","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps31_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3494-episode-31","free":false,"freeWithAds":true},{"id":3495,"title":"Hunter x Hunter (2011) - Épisode 32","name":"Une victoire surprenante","number":"Épisode 32","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps32_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3495-episode-32","free":false,"freeWithAds":true},{"id":3496,"title":"Hunter x Hunter (2011) - Épisode 33","name":"Une menace insignifiante","number":"Épisode 33","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps33_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3496-episode-33","free":false,"freeWithAds":true},{"id":3497,"title":"Hunter x Hunter (2011) - Épisode 34","name":"Revanche à armes égales","number":"Épisode 34","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps34_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3497-episode-34","free":false,"freeWithAds":true},{"id":3498,"title":"Hunter x Hunter (2011) - Épisode 35","name":"Examen véritablement réussi","number":"Épisode 35","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps35_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3498-episode-35","free":false,"freeWithAds":true},{"id":3499,"title":"Hunter x Hunter (2011) - Épisode 36","name":"Une énorme dette et un petit coup de pied","number":"Épisode 36","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps36_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3499-episode-36","free":false,"freeWithAds":true}]},{"season":"Arc 04 : York Shin City","title":"Arc 04 : York Shin City","videos":[{"id":3500,"title":"Hunter x Hunter (2011) - Épisode 37","name":"Jin et Gon","number":"Épisode 37","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps37_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3500-episode-37","free":false,"freeWithAds":true},{"id":3501,"title":"Hunter x Hunter (2011) - Épisode 38","name":"La réponse de mon père","number":"Épisode 38","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps38_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3501-episode-38","free":false,"freeWithAds":true},{"id":3502,"title":"Hunter x Hunter (2011) - Épisode 39","name":"Souhait et serment","number":"Épisode 39","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps39_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3502-episode-39","free":false,"freeWithAds":true},{"id":3503,"title":"Hunter x Hunter (2011) - Épisode 40","name":"Coopération entre utilisateurs de Nen","number":"Épisode 40","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps40_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3503-episode-40","free":false,"freeWithAds":true},{"id":3504,"title":"Hunter x Hunter (2011) - Épisode 41","name":"Le rassemblement des héros !","number":"Épisode 41","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps41_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3504-episode-41","free":false,"freeWithAds":true},{"id":3505,"title":"Hunter x Hunter (2011) - Épisode 42","name":"Défendre et attaquer","number":"Épisode 42","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps42_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3505-episode-42","free":false,"freeWithAds":true},{"id":3506,"title":"Hunter x Hunter (2011) - Épisode 43","name":"Une farce tragique","number":"Épisode 43","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps43_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3506-episode-43","free":false,"freeWithAds":true},{"id":3507,"title":"Hunter x Hunter (2011) - Épisode 44","name":"Préparation au combat","number":"Épisode 44","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps44_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3507-episode-44","free":false,"freeWithAds":true},{"id":3508,"title":"Hunter x Hunter (2011) - Épisode 45","name":"Contrainte et promesse","number":"Épisode 45","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps45_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3508-episode-45","free":false,"freeWithAds":true},{"id":3509,"title":"Hunter x Hunter (2011) - Épisode 46","name":"Poursuite et attente","number":"Épisode 46","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps46_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3509-episode-46","free":false,"freeWithAds":true},{"id":3510,"title":"Hunter x Hunter (2011) - Épisode 47","name":"Condition et serment","number":"Épisode 47","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps47_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3510-episode-47","free":false,"freeWithAds":true},{"id":3511,"title":"Hunter x Hunter (2011) - Épisode 48","name":"Des yeux bien affûtés","number":"Épisode 48","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps48_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3511-episode-48","free":false,"freeWithAds":true},{"id":3512,"title":"Hunter x Hunter (2011) - Épisode 49","name":"Analyse et poursuite","number":"Épisode 49","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps49_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3512-episode-49","free":false,"freeWithAds":true},{"id":3513,"title":"Hunter x Hunter (2011) - Épisode 50","name":"Camarades et sabre !","number":"Épisode 50","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps50_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3513-episode-50","free":false,"freeWithAds":true},{"id":3514,"title":"Hunter x Hunter (2011) - Épisode 51","name":"Un champ de bataille impitoyable !","number":"Épisode 51","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps51_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3514-episode-51","free":false,"freeWithAds":true},{"id":3515,"title":"Hunter x Hunter (2011) - Épisode 52","name":"Attaque et impact !","number":"Épisode 52","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps52_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3515-episode-52","free":false,"freeWithAds":true},{"id":3516,"title":"Hunter x Hunter (2011) - Épisode 53","name":"Feinte et stratagème !","number":"Épisode 53","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps53_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3516-episode-53","free":false,"freeWithAds":true},{"id":3517,"title":"Hunter x Hunter (2011) - Épisode 54","name":"Fausse prédiction ?","number":"Épisode 54","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps54_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3517-episode-54","free":false,"freeWithAds":true},{"id":3518,"title":"Hunter x Hunter (2011) - Épisode 55","name":"Camarades et supercherie !","number":"Épisode 55","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps55_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3518-episode-55","free":false,"freeWithAds":true},{"id":3519,"title":"Hunter x Hunter (2011) - Épisode 56","name":"Bien-aimée et désastre !","number":"Épisode 56","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps56_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3519-episode-56","free":false,"freeWithAds":true},{"id":3520,"title":"Hunter x Hunter (2011) - Épisode 57","name":"Initiative et instructions !","number":"Épisode 57","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps57_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3520-episode-57","free":false,"freeWithAds":true},{"id":3521,"title":"Hunter x Hunter (2011) - Épisode 58","name":"Adieu et revolver","number":"Épisode 58","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps58_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3521-episode-58","free":false,"freeWithAds":true}]},{"season":"Arc 05 : Greed Island","title":"Arc 05 : Greed Island","videos":[{"id":3522,"title":"Hunter x Hunter (2011) - Épisode 59","name":"Enchères et impatience !","number":"Épisode 59","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps59_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3522-episode-59","free":false,"freeWithAds":true},{"id":3523,"title":"Hunter x Hunter (2011) - Épisode 60","name":"Règles et commencement !","number":"Épisode 60","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps60_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3523-episode-60","free":false,"freeWithAds":true},{"id":3524,"title":"Hunter x Hunter (2011) - Épisode 61","name":"Invitation et meilleur ami !","number":"Épisode 61","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps61_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3524-episode-61","free":false,"freeWithAds":true},{"id":3525,"title":"Hunter x Hunter (2011) - Épisode 62","name":"Réalité et pierres précieuses !","number":"Épisode 62","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps62_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3525-episode-62","free":false,"freeWithAds":true},{"id":3526,"title":"Hunter x Hunter (2011) - Épisode 63","name":"Un maître impitoyable","number":"Épisode 63","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps63_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3526-episode-63","free":false,"freeWithAds":true},{"id":3527,"title":"Hunter x Hunter (2011) - Épisode 64","name":"Progrès et chantage","number":"Épisode 64","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps64_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3527-episode-64","free":false,"freeWithAds":true},{"id":3528,"title":"Hunter x Hunter (2011) - Épisode 65","name":"Poing diabolique et pierre-papier-ciseaux !","number":"Épisode 65","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps65_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3528-episode-65","free":false,"freeWithAds":true},{"id":3529,"title":"Hunter x Hunter (2011) - Épisode 66","name":"Capture et stratagème !","number":"Épisode 66","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps66_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3529-episode-66","free":false,"freeWithAds":true},{"id":3530,"title":"Hunter x Hunter (2011) - Épisode 67","name":"15 et 15 !","number":"Épisode 67","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps67_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3530-episode-67","free":false,"freeWithAds":true},{"id":3531,"title":"Hunter x Hunter (2011) - Épisode 68","name":"Pirates et déductions !","number":"Épisode 68","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps68_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3531-episode-68","free":false,"freeWithAds":true},{"id":3532,"title":"Hunter x Hunter (2011) - Épisode 69","name":"Confrontation acharnée !","number":"Épisode 69","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps69_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3532-episode-69","free":false,"freeWithAds":true},{"id":3533,"title":"Hunter x Hunter (2011) - Épisode 70","name":"Volonté et amitié !","number":"Épisode 70","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps70_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3533-episode-70","free":false,"freeWithAds":true},{"id":3534,"title":"Hunter x Hunter (2011) - Épisode 71","name":"Négociation et transaction !","number":"Épisode 71","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps71_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3534-episode-71","free":false,"freeWithAds":true},{"id":3535,"title":"Hunter x Hunter (2011) - Épisode 72","name":"Occasion et poursuite !","number":"Épisode 72","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps72_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3535-episode-72","free":false,"freeWithAds":true},{"id":3536,"title":"Hunter x Hunter (2011) - Épisode 73","name":"Folie et victoire !","number":"Épisode 73","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps73_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3536-episode-73","free":false,"freeWithAds":true},{"id":3537,"title":"Hunter x Hunter (2011) - Épisode 74","name":"Vainqueurs et vaincus !","number":"Épisode 74","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps74_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3537-episode-74","free":false,"freeWithAds":true},{"id":3538,"title":"Hunter x Hunter (2011) - Épisode 75","name":"L’ami de Jin et le véritable ami !","number":"Épisode 75","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps75_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3538-episode-75","free":false,"freeWithAds":true}]},{"season":"Arc 06 : Chimera Ant","title":"Arc 06 : Chimera Ant","videos":[{"id":3539,"title":"Hunter x Hunter (2011) - Épisode 76","name":"Retrouvailles et compréhension","number":"Épisode 76","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps76_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3539-episode-76","free":false,"freeWithAds":true},{"id":3540,"title":"Hunter x Hunter (2011) - Épisode 77","name":"Inquiétudes et apparition","number":"Épisode 77","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps77_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3540-episode-77","free":false,"freeWithAds":true},{"id":3541,"title":"Hunter x Hunter (2011) - Épisode 78","name":"Prolifération rapide !","number":"Épisode 78","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps78_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3541-episode-78","free":false,"freeWithAds":true},{"id":3542,"title":"Hunter x Hunter (2011) - Épisode 79","name":"NGL","number":"Épisode 79","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps79_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3542-episode-79","free":false,"freeWithAds":true},{"id":3543,"title":"Hunter x Hunter (2011) - Épisode 80","name":"Infamie et atrocité !","number":"Épisode 80","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps80_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3543-episode-80","free":false,"freeWithAds":true},{"id":3544,"title":"Hunter x Hunter (2011) - Épisode 81","name":"Début des combats","number":"Épisode 81","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps81_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3544-episode-81","free":false,"freeWithAds":true},{"id":3545,"title":"Hunter x Hunter (2011) - Épisode 82","name":"La roulette de Kaito !","number":"Épisode 82","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps82_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3545-episode-82","free":false,"freeWithAds":true},{"id":3546,"title":"Hunter x Hunter (2011) - Épisode 83","name":"Évolution par influence","number":"Épisode 83","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps83_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3546-episode-83","free":false,"freeWithAds":true},{"id":3547,"title":"Hunter x Hunter (2011) - Épisode 84","name":"Éveil du destin !","number":"Épisode 84","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps84_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3547-episode-84","free":false,"freeWithAds":true},{"id":3548,"title":"Hunter x Hunter (2011) - Épisode 85","name":"Ombre et lumière !","number":"Épisode 85","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps85_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3548-episode-85","free":false,"freeWithAds":true},{"id":3549,"title":"Hunter x Hunter (2011) - Épisode 86","name":"Promesse et réunion !","number":"Épisode 86","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps86_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3549-episode-86","free":false,"freeWithAds":true},{"id":3550,"title":"Hunter x Hunter (2011) - Épisode 87","name":"Duel et Fuite !","number":"Épisode 87","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps87_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3550-episode-87","free":false,"freeWithAds":true},{"id":3551,"title":"Hunter x Hunter (2011) - Épisode 88","name":"Pierre-papier-ciseaux et point faible !","number":"Épisode 88","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps88_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3551-episode-88","free":false,"freeWithAds":true},{"id":3552,"title":"Hunter x Hunter (2011) - Épisode 89","name":"Gentillesse et force !","number":"Épisode 89","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps89_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3552-episode-89","free":false,"freeWithAds":true},{"id":3553,"title":"Hunter x Hunter (2011) - Épisode 90","name":"Intérêts et emprise !","number":"Épisode 90","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps90_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3553-episode-90","free":false,"freeWithAds":true},{"id":3554,"title":"Hunter x Hunter (2011) - Épisode 91","name":"Les forts et les faibles !","number":"Épisode 91","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps91_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3554-episode-91","free":false,"freeWithAds":true},{"id":3555,"title":"Hunter x Hunter (2011) - Épisode 92","name":"Un souhait et deux serments !","number":"Épisode 92","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps92_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3555-episode-92","free":false,"freeWithAds":true},{"id":3556,"title":"Hunter x Hunter (2011) - Épisode 93","name":"Rendez-vous avec Pâmu !","number":"Épisode 93","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps93_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3556-episode-93","free":false,"freeWithAds":true},{"id":3557,"title":"Hunter x Hunter (2011) - Épisode 94","name":"Ami et voyage !","number":"Épisode 94","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps94_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3557-episode-94","free":false,"freeWithAds":true},{"id":3558,"title":"Hunter x Hunter (2011) - Épisode 95","name":"Ressentiment et bizarreries !","number":"Épisode 95","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps95_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3558-episode-95","free":false,"freeWithAds":true},{"id":3559,"title":"Hunter x Hunter (2011) - Épisode 96","name":"Résidence illégale !","number":"Épisode 96","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps96_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3559-episode-96","free":false,"freeWithAds":true},{"id":3560,"title":"Hunter x Hunter (2011) - Épisode 97","name":"Combat féroce et élimination !","number":"Épisode 97","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps97_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3560-episode-97","free":false,"freeWithAds":true},{"id":3561,"title":"Hunter x Hunter (2011) - Épisode 98","name":"Infiltration et sélection","number":"Épisode 98","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps98_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3561-episode-98","free":false,"freeWithAds":true},{"id":3562,"title":"Hunter x Hunter (2011) - Épisode 99","name":"Combinaison et évolution","number":"Épisode 99","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps99_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3562-episode-99","free":false,"freeWithAds":true},{"id":3563,"title":"Hunter x Hunter (2011) - Épisode 100","name":"Traque et contre-attaque","number":"Épisode 100","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps100_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/3563-episode-100","free":false,"freeWithAds":true},{"id":4491,"title":"Hunter x Hunter (2011) - Épisode 101","name":"Ikarugo et éclairs","number":"Épisode 101","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps101_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/4491-episode-101","free":false,"freeWithAds":true},{"id":4492,"title":"Hunter x Hunter (2011) - Épisode 102","name":"Pouvoirs et jeux de stratégie","number":"Épisode 102","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps102_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/4492-episode-102","free":false,"freeWithAds":true},{"id":4524,"title":"Hunter x Hunter (2011) - Épisode 103","name":"Échec et mat et anticipation","number":"Épisode 103","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps103_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/4524-episode-103","free":false,"freeWithAds":true},{"id":4525,"title":"Hunter x Hunter (2011) - Épisode 104","name":"Hésitation et embarras","number":"Épisode 104","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps104_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/4525-episode-104","free":false,"freeWithAds":true},{"id":4526,"title":"Hunter x Hunter (2011) - Épisode 105","name":"Détermination et éveil","number":"Épisode 105","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps105_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/4526-episode-105","free":false,"freeWithAds":true},{"id":4563,"title":"Hunter x Hunter (2011) - Épisode 106","name":"Nov et Morau","number":"Épisode 106","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps106_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/4563-episode-106","free":false,"freeWithAds":true},{"id":4564,"title":"Hunter x Hunter (2011) - Épisode 107","name":"Retour et retraite","number":"Épisode 107","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps107_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/4564-episode-107","free":false,"freeWithAds":true},{"id":4565,"title":"Hunter x Hunter (2011) - Épisode 108","name":"Le Gungi de Komugi","number":"Épisode 108","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps108_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/4565-episode-108","free":false,"freeWithAds":true},{"id":4566,"title":"Hunter x Hunter (2011) - Épisode 109","name":"Début de la procession, début de la mission","number":"Épisode 109","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps109_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/4566-episode-109","free":false,"freeWithAds":true},{"id":4595,"title":"Hunter x Hunter (2011) - Épisode 110","name":"Crainte et Expectative","number":"Épisode 110","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps110_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/4595-episode-110","free":false,"freeWithAds":true},{"id":4627,"title":"Hunter x Hunter (2011) - Épisode 111","name":"Irruption soudaine","number":"Épisode 111","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps111_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/4627-episode-111","free":false,"freeWithAds":true},{"id":4720,"title":"Hunter x Hunter (2011) - Épisode 112","name":"Monstre et monstre","number":"Épisode 112","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps112_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/4720-episode-112","free":false,"freeWithAds":true},{"id":4721,"title":"Hunter x Hunter (2011) - Épisode 113","name":"Un Insecte d'honneur","number":"Épisode 113","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps113_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/4721-episode-113","free":false,"freeWithAds":true},{"id":4722,"title":"Hunter x Hunter (2011) - Épisode 114","name":"Séparation et erreur de calcul","number":"Épisode 114","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps114_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/4722-episode-114","free":false,"freeWithAds":true},{"id":4723,"title":"Hunter x Hunter (2011) - Épisode 115","name":"Devoir et doutes","number":"Épisode 115","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps115_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/4723-episode-115","free":false,"freeWithAds":true},{"id":4724,"title":"Hunter x Hunter (2011) - Épisode 116","name":"Vengeance et soins","number":"Épisode 116","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps116_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/4724-episode-116","free":false,"freeWithAds":true},{"id":4725,"title":"Hunter x Hunter (2011) - Épisode 117","name":"Un Affront à laver","number":"Épisode 117","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps117_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/4725-episode-117","free":false,"freeWithAds":true},{"id":4726,"title":"Hunter x Hunter (2011) - Épisode 118","name":"Fausse colère","number":"Épisode 118","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps118_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/4726-episode-118","free":false,"freeWithAds":true},{"id":4727,"title":"Hunter x Hunter (2011) - Épisode 119","name":"Poulpe fort et Poulpe faible","number":"Épisode 119","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps119_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/4727-episode-119","free":false,"freeWithAds":true},{"id":4728,"title":"Hunter x Hunter (2011) - Épisode 120","name":"Faux et vrai","number":"Épisode 120","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps120_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/4728-episode-120","free":false,"freeWithAds":true},{"id":4729,"title":"Hunter x Hunter (2011) - Épisode 121","name":"Défaite et Honneur","number":"Épisode 121","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps121_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/4729-episode-121","free":false,"freeWithAds":true},{"id":4730,"title":"Hunter x Hunter (2011) - Épisode 122","name":"Principes et Nom","number":"Épisode 122","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps122_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/4730-episode-122","free":false,"freeWithAds":true},{"id":4900,"title":"Hunter x Hunter (2011) - Épisode 123","name":"Centipèdes et Souvenirs","number":"Épisode 123","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps123_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/4900-episode-123","free":false,"freeWithAds":true},{"id":4947,"title":"Hunter x Hunter (2011) - Épisode 124","name":"Limite et Éveil","number":"Épisode 124","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps124_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/4947-episode-124","free":false,"freeWithAds":true},{"id":4948,"title":"Hunter x Hunter (2011) - Épisode 125","name":"Puissance et apogée des arts martiaux","number":"Épisode 125","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps125_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/4948-episode-125","free":false,"freeWithAds":true},{"id":4949,"title":"Hunter x Hunter (2011) - Épisode 126","name":"Le Zéro et la Rose","number":"Épisode 126","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps126_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/4949-episode-126","free":false,"freeWithAds":true},{"id":5021,"title":"Hunter x Hunter (2011) - Épisode 127","name":"Hostilité et Détermination","number":"Épisode 127","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps127_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/5021-episode-127","free":false,"freeWithAds":true},{"id":5047,"title":"Hunter x Hunter (2011) - Épisode 128","name":"Joie sans pareille et amour inconditionnel","number":"Épisode 128","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps128_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/5047-episode-128","free":false,"freeWithAds":true},{"id":5062,"title":"Hunter x Hunter (2011) - Épisode 129","name":"Cible et objectif","number":"Épisode 129","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps129_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/5062-episode-129","free":false,"freeWithAds":true},{"id":5097,"title":"Hunter x Hunter (2011) - Épisode 130","name":"Magie et Désespoir","number":"Épisode 130","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps130_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/5097-episode-130","free":false,"freeWithAds":true},{"id":5099,"title":"Hunter x Hunter (2011) - Épisode 131","name":"Colère et Lumière","number":"Épisode 131","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps131_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/5099-episode-131","free":false,"freeWithAds":true},{"id":5104,"title":"Hunter x Hunter (2011) - Épisode 132","name":"Avance et Activation","number":"Épisode 132","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps132_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/5104-episode-132","free":false,"freeWithAds":true},{"id":5105,"title":"Hunter x Hunter (2011) - Épisode 133","name":"Espérance de vie","number":"Épisode 133","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps133_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/5105-episode-133","free":false,"freeWithAds":true},{"id":5106,"title":"Hunter x Hunter (2011) - Épisode 134","name":"Un Seul Mot","number":"Épisode 134","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps134_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/5106-episode-134","free":false,"freeWithAds":true},{"id":5107,"title":"Hunter x Hunter (2011) - Épisode 135","name":"Ce jour, cet instant","number":"Épisode 135","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps135_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/5107-episode-135","free":false,"freeWithAds":true},{"id":5108,"title":"Hunter x Hunter (2011) - Épisode 136","name":"Retour à la maison et Vrai nom","number":"Épisode 136","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps136_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/5108-episode-136","free":false,"freeWithAds":true}]},{"season":"Arc 07 : Les  Élections","title":"Arc 07 : Les  Élections","videos":[{"id":5109,"title":"Hunter x Hunter (2011) - Épisode 137","name":"Débat entre zodiaques","number":"Épisode 137","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps137_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/5109-episode-137","free":false,"freeWithAds":true},{"id":5110,"title":"Hunter x Hunter (2011) - Épisode 138","name":"Demande et souhait","number":"Épisode 138","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps138_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/5110-episode-138","free":false,"freeWithAds":true},{"id":5111,"title":"Hunter x Hunter (2011) - Épisode 139","name":"Aruka et Nanika","number":"Épisode 139","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps139_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/5111-episode-139","free":false,"freeWithAds":true},{"id":5112,"title":"Hunter x Hunter (2011) - Épisode 140","name":"Participation à la guerre et entrée en guerre","number":"Épisode 140","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps140_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/5112-episode-140","free":false,"freeWithAds":true},{"id":5113,"title":"Hunter x Hunter (2011) - Épisode 141","name":"Prestidigitateur et Intendants","number":"Épisode 141","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps141_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/5113-episode-141","free":false,"freeWithAds":true},{"id":5114,"title":"Hunter x Hunter (2011) - Épisode 142","name":"Aiguille et traque","number":"Épisode 142","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps142_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/5114-episode-142","free":false,"freeWithAds":true},{"id":5115,"title":"Hunter x Hunter (2011) - Épisode 143","name":"Crimes et Griffes","number":"Épisode 143","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps143_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/5115-episode-143","free":false,"freeWithAds":true},{"id":5116,"title":"Hunter x Hunter (2011) - Épisode 144","name":"Sanction et Ovation","number":"Épisode 144","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps144_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/5116-episode-144","free":false,"freeWithAds":true},{"id":5117,"title":"Hunter x Hunter (2011) - Épisode 145","name":"Défaite et Retrouvailles","number":"Épisode 145","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps145_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/5117-episode-145","free":false,"freeWithAds":true},{"id":5118,"title":"Hunter x Hunter (2011) - Épisode 146","name":"Président et Annulation","number":"Épisode 146","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps146_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/5118-episode-146","free":false,"freeWithAds":true},{"id":5119,"title":"Hunter x Hunter (2011) - Épisode 147","name":"Salut et Avenir","number":"Épisode 147","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps147_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/5119-episode-147","free":false,"freeWithAds":true},{"id":5120,"title":"Hunter x Hunter (2011) - Épisode 148","name":"Passé et Futur","number":"Épisode 148","image":"https://image.animationdigitalnetwork.fr/license/hunter/tv2/web/eps148_320x180.jpg","duration":1440,"urlPath":"/video/267-hunter-x-hunter-2011/5120-episode-148","free":false,"freeWithAds":true}]}]},"dataUpdateCount":1,"dataUpdatedAt":1721906364172,"error":null,"errorUpdateCount":0,"errorUpdatedAt":0,"fetchFailureCount":0,"fetchFailureReason":null,"fetchMeta":null,"isInvalidated":false,"status":"success","fetchStatus":"idle"},"queryKey":["videosSeasons",{"showId":267,"order":"asc"}],"queryHash":"[\"videosSeasons\",{\"order\":\"asc\",\"showId\":267}]"},{"state":{"data":{"seasons":[{"season":"Arc 01 : Examen de Hunter","title":"Arc 01 : Examen de Hunter"},{"season":"Arc 02 : Kukuru Mountain","title":"Arc 02 : Kukuru Mountain"},{"season":"Arc 03 : Tour Céleste","title":"Arc 03 : Tour Céleste"},{"season":"Arc 04 : York Shin City","title":"Arc 04 : York Shin City"},{"season":"Arc 05 : Greed Island","title":"Arc 05 : Greed Island"},{"season":"Arc 06 : Chimera Ant","title":"Arc 06 : Chimera Ant"},{"season":"Arc 07 : Les  Élections","title":"Arc 07 : Les  Élections"}]},"dataUpdateCount":1,"dataUpdatedAt":1721906364125,"error":null,"errorUpdateCount":0,"errorUpdatedAt":0,"fetchFailureCount":0,"fetchFailureReason":null,"fetchMeta":null,"isInvalidated":false,"status":"success","fetchStatus":"idle"},"queryKey":["seasons",{"showId":267,"order":"asc"}],"queryHash":"[\"seasons\",{\"order\":\"asc\",\"showId\":267}]"},{"state":{"data":{"comments":[{"id":287852,"parentId":null,"lft":27,"rgt":28,"depth":1,"text":"Si Gon peut communiquer avec les extraterrestres, ça veut dire qu'il en a déjà rencontré ?!? (Après le générique de fin)","postDate":"2023-04-14T18:58:11Z","validated":true,"user":{"id":3535373,"rating":null,"username":"ZagZag42","avatar":"https://www.gravatar.com/avatar/336ad59110c44c5d7d62554d70dfad1f?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"ZagZag42","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch4_bg0_green0_188.jpg"},"comments":[]},{"id":237398,"parentId":null,"lft":23,"rgt":26,"depth":1,"text":"c le dernier épisode ou ya une suite?","postDate":"2021-11-30T19:21:11Z","validated":true,"user":{"id":2968122,"rating":null,"username":"Xx Sarada xX","avatar":"https://www.gravatar.com/avatar/4a6d3a0351a6781dd9729bcf2643a77d?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"compte principal","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":125420,"parentId":null,"lft":21,"rgt":22,"depth":1,"text":"-combien font 1+1?\n-Oui\nmdrr","postDate":"2020-07-10T21:40:20Z","validated":true,"user":{"id":1058867,"rating":null,"username":"Drux1587","avatar":"https://www.gravatar.com/avatar/42cad56685ed256f7c94b85c1716ec4e?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Drux1587","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":115841,"parentId":null,"lft":19,"rgt":20,"depth":1,"text":"omgggg","postDate":"2020-05-19T00:19:21Z","validated":true,"user":{"id":1541137,"rating":5,"username":"fabianie","avatar":"https://www.gravatar.com/avatar/15685ef482d9e9a90e954391273b7e7a?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":5,"username":"fabianie","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":108577,"parentId":null,"lft":15,"rgt":18,"depth":1,"text":"Esque c'est obligatoire quand paye","postDate":"2020-04-25T13:47:33Z","validated":true,"user":{"id":1564273,"rating":null,"username":"Kenza Tounsi","avatar":"https://www.gravatar.com/avatar/ffee3eeb4452594e7df0922440edc5dd?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Kenza Tounsi","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[{"id":249341,"parentId":108577,"lft":16,"rgt":17,"depth":2,"text":"Signification de ce message s'il te plaît ^^\"","postDate":"2022-03-05T19:14:33Z","validated":true,"user":{"id":3046345,"rating":null,"username":"kuroi namida","avatar":"https://www.gravatar.com/avatar/80a407d9fb995dc0109eea321bd4e3b9?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"La Reine Des Chips","avatar":"https://avatar.animationdigitalnetwork.fr/web/ch14_bg0_green0_188.jpg"},"comments":[]}]},{"id":98153,"parentId":null,"lft":13,"rgt":14,"depth":1,"text":"waw episode de ouf !!","postDate":"2020-03-07T17:06:14Z","validated":true,"user":{"id":1383351,"rating":5,"username":"Lyoxi","avatar":"https://www.gravatar.com/avatar/4cf64eda202cdf9dbe69a8463a218cc9?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":5,"username":"Lyoxi","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":29934,"parentId":null,"lft":1,"rgt":12,"depth":1,"text":"Le meilleur sport !","postDate":"2017-06-12T18:35:42Z","validated":true,"user":{"id":144998,"rating":5,"username":"NaviSly","avatar":"https://www.gravatar.com/avatar/d5cb72c955fbcd76ac85f274ece6435a?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":5,"username":"NaviSly","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[{"id":32326,"parentId":29934,"lft":2,"rgt":11,"depth":2,"text":"j'aime bien la ball au prisoné mais s'est d'un jeux....serrieusement autent faire du foot avec du nen ou du bastket ball avec du nen du rugby mais la ball au prisonier s'est le plus fun je trouve meme si s'est plus un jeux","postDate":"2017-08-16T13:55:46Z","validated":true,"user":{"id":602559,"rating":null,"username":"✩Johnny Joestar✩","avatar":"https://www.gravatar.com/avatar/7457b28969e3b1b8a05f81514d164479?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"?Johnny Joestar?","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":33400,"parentId":32326,"lft":3,"rgt":4,"depth":3,"text":"s'est d'un jeux...","postDate":"2017-09-18T13:33:18Z","validated":true,"user":{"id":114250,"rating":null,"username":"Anxis","avatar":"https://www.gravatar.com/avatar/060d305667e26cf78f4e76575d65ad37?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Anxis","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":115626,"parentId":32326,"lft":5,"rgt":10,"depth":3,"text":"moi pas comprendre ce que toi écrire","postDate":"2020-05-17T22:52:47Z","validated":true,"user":{"id":750643,"rating":null,"username":"Anonymous750643","avatar":"https://www.gravatar.com/avatar/979ec61b55973253837c620d67797850?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"Anonymous750643-1","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":126535,"parentId":115626,"lft":6,"rgt":7,"depth":4,"text":"Je te rassure, lui même ne se comprends pas...","postDate":"2020-07-16T22:30:00Z","validated":true,"user":{"id":1303615,"rating":null,"username":"madalexi22","avatar":"https://www.gravatar.com/avatar/2b816e33d5db80674dc70c53d0395505?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":null,"username":"madalexi22","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]},{"id":253449,"parentId":115626,"lft":8,"rgt":9,"depth":4,"text":"je crois qu'il voulait dire \"c'est qu'un jeu\"...","postDate":"2022-04-14T15:47:56Z","validated":true,"user":{"id":2431307,"rating":5,"username":"sarrbabacar767","avatar":"https://www.gravatar.com/avatar/77fdbd3bcc86f253a2011d7337b13e67?d=https%3A%2F%2Fcdn.animationdigitalnetwork.fr%2Favatar%2Fdefault-v4.jpg","isSubscriber":false},"profile":{"id":1,"rating":5,"username":"4kmon","avatar":"https://avatar.animationdigitalnetwork.fr/web/default_188.jpg"},"comments":[]}]}]},"dataUpdateCount":1,"dataUpdatedAt":1721906364151,"error":null,"errorUpdateCount":0,"errorUpdatedAt":0,"fetchFailureCount":0,"fetchFailureReason":null,"fetchMeta":null,"isInvalidated":false,"status":"success","fetchStatus":"idle"},"queryKey":["comments","/comment/video/3533",{"order":"desc","limit":100,"offset":0}],"queryHash":"[\"comments\",\"/comment/video/3533\",{\"limit\":100,\"offset\":0,\"order\":\"desc\"}]"},{"state":{"data":{"shows":[{"id":624,"title":"Yu Yu Hakusho","type":"EPS","originalTitle":"Yu Yu Hakusho","shortTitle":"Yu Yu Hakusho","reference":"yuyuhakusho_tv","age":"10+","languages":["vostf","vf"],"summary":"Yusuke Urameshi est un jeune voyou de 14 ans. À la surprise générale, il sacrifie sa vie pour sauver celle d'un petit garçon lors d'un accident de voiture. Il quitte alors le monde des humains, le Ningen-Kai, pour rejoindre le monde spirituel, le Rei-Kai, gouverné par l'empereur Enma Daioh…","image":"https://image.animationdigitalnetwork.fr/license/yuyuhakusho/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/yuyuhakusho/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/yuyuhakusho/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/yuyuhakusho/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/624-yu-yu-hakusho","urlPath":"/video/624-yu-yu-hakusho","episodeCount":112,"genres":["Animation japonaise","Action","Arts Martiaux","Comédie","Fantastique","Shônen"],"copyright":"©Yoshihiro Togashi 1990-1994 TV animation series: ©Pierrot/Shueisha","rating":4.9,"ratingsCount":1950,"commentsCount":75,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":null,"tagline":null,"firstReleaseYear":"1992","productionStudio":"Pierrot","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Noriyuki Abe"},{"role":"Mangaka","name":"Yoshihiro Togashi"},{"role":"Scénariste","name":"Yukiyoshi Ohashi"},{"role":"Compositeur","name":"Yusuke Honma"},{"role":"Character designer","name":"Mari Kitayama"},{"role":"Character designer","name":"Masaya Onishi"}],"nextVideoReleaseDate":null,"indexable":true},{"id":753,"title":"Yu Yu Hakusho - OAV et épisodes spéciaux","type":"EPS","originalTitle":null,"shortTitle":null,"reference":"yuyuhakusho_oav","age":"10+","languages":["vostf"],"summary":"Yusuke et ses amis sont confrontés à une prise d’otages par des terroristes dans le monde des esprits.","image":"https://image.animationdigitalnetwork.fr/license/yuyuhakusho/oav/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/yuyuhakusho/oav/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/yuyuhakusho/oav/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/yuyuhakusho/oav/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/753-yu-yu-hakusho-oav-et-specials","urlPath":"/video/753-yu-yu-hakusho-oav-et-specials","episodeCount":7,"genres":["Animation japonaise","Action","Arts Martiaux","Comédie","Fantastique","Shônen"],"copyright":"©Yoshihiro Togashi 1990 - 1994\n©Pierrot/Shueisha","rating":4.8,"ratingsCount":26,"commentsCount":4,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"1995","productionStudio":"Pierrot","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Noriyuki Abe"}],"nextVideoReleaseDate":null,"indexable":true},{"id":390,"title":"Assassination Classroom - Saison 2","type":"EPS","originalTitle":"アカメが斬る!","shortTitle":"Assclass2","reference":"assclass_tv2","age":"10+","languages":["vostf","vf"],"summary":"De retour de leurs vacances des plus « reposantes » sur l’île d’Okinawa, la classe 3 – E réintègre leur école pour un nouveau semestre. Entre l’obtention de leur diplôme, leur mission d’assassinats et le directeur, Gakuhô Asano qui n’est pas près de les laisser tranquille, cette rentrée promet de ne pas être de tout repos !","image":"https://image.animationdigitalnetwork.fr/license/assclass/tv2/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/assclass/tv2/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/assclass/tv2/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/assclass/tv2/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/390-assassination-classroom-saison-2","urlPath":"/video/390-assassination-classroom-saison-2","episodeCount":25,"genres":["Animation japonaise","Jeunesse","Action","Comédie","Scolaire","Shônen"],"copyright":"©Yusei Matsui/SHUEISHA,ASSASSINATION CLASSROOM Committee","rating":4.8,"ratingsCount":5141,"commentsCount":78,"qualities":["fhd","hd","sd"],"distributions":"fr,de","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2016","productionStudio":"Lerche","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Seiji Kishi"},{"role":"Scénariste","name":"Makoto Uezu"},{"role":"Compositeur","name":"Naoki Sato"},{"role":"NULL","name":"NULL"},{"role":"NULL","name":"NULL"},{"role":"NULL","name":"NULL"}],"nextVideoReleaseDate":null,"indexable":true},{"id":344,"title":"Assassination Classroom","type":"EPS","originalTitle":"Ansatsu Kyôshitsu","shortTitle":null,"reference":"assclass_tv","age":"10+","languages":["vostf","vf"],"summary":"L'histoire, pour le moins insolite, se déroule au collège Kunugigaoka. Koro Sensei est une étrange créature munie de tentacules et d'une tête ronde et jaune, capable de se déplacer à Mach 20 et doté d'une force phénoménale. Ce professeur hors du commun enseigne à la classe 3-E (E comme \"End\") avec le but assumé de détruire la Terre en mars prochain. Ses élèves, un ramassis de cancres ayant pour particularité d'être des assassins en herbe, vont donc tenter d’assassiner leur professeur à temps pour sauver la planète. \nAlors, êtes-vous prêts à suivre leur année scolaire très intense ?","image":"https://image.animationdigitalnetwork.fr/license/assclass/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/assclass/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/assclass/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/assclass/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/344-assassination-classroom","urlPath":"/video/344-assassination-classroom","episodeCount":22,"genres":["Animation japonaise","Jeunesse","Action","Comédie","Policier / Thriller","Scolaire","Shônen"],"copyright":"©Yusei Matsui/SHUEISHA,ASSASSINATION CLASSROOM Committee","rating":4.8,"ratingsCount":4982,"commentsCount":125,"qualities":["fhd","hd","sd"],"distributions":"fr,de","simulcast":false,"free":true,"available":true,"download":true,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2015","productionStudio":"Lerche","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Seiji Kishi"},{"role":"Scénariste","name":"Makoto Uezu"},{"role":"Compositeur","name":"Naoki Sato"},{"role":"Mangaka","name":"Yûsei Matsui"},{"role":"NULL","name":"NULL"},{"role":"NULL","name":"NULL"}],"nextVideoReleaseDate":null,"indexable":true},{"id":711,"title":"Seraph of the End","type":"EPS","originalTitle":"Owari no Seraph","shortTitle":null,"reference":"seraph_tv","age":"12+","languages":["vostf","vf"],"summary":"Un virus mortel a tué la plupart des humains du Japon. Les enfants, eux, ont été asservis par les vampires, qui ont profité de l'occasion pour prendre le contrôle. Dans le souterrain de la ville vampirique de Sanguinem, Yûichirô et Mikaela Hyakuya sont deux jeunes esclaves chargés de donner leur sang aux aristocrates qui ont besoin de soulager leur soif. Mais Yûichirô ne l'entend pas de cette oreille et tente de s'échapper avec son frère adoptif et leurs amis. Mais les vampires les rattrapent et abattent tous leurs compagnons. Mikaela se sacrifie pour permettre à Yûichirô de s'échapper de la ville vampirique. Une fois à l'extérieur, le jeune garçon découvre un monde intact, et comprend que cette histoire d'épidémie n'était peut-être qu'un mensonge pour asservir les enfants. Il découvre également une  résistance organisée contre les vampires qu'il décide de rejoindre pour délivrer les esclaves et venger la mort de Mikaela. Néanmoins, ce qu'il va découvrir sur l'origine de l'épidémie risque fort de lui déplaire.","image":"https://image.animationdigitalnetwork.fr/license/seraph/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/seraph/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/seraph/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/seraph/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/711-seraph-of-the-end-owari-no-seraph","urlPath":"/video/711-seraph-of-the-end-owari-no-seraph","episodeCount":24,"genres":["Animation japonaise","Action","Drame","Science-Fiction"],"copyright":"© Takaya Kagami, Yamato Yamamoto, Daisuke Furuya/SHUEISHA, Seraph of the End Project. All rights reserved","rating":4.7,"ratingsCount":834,"commentsCount":84,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2015","productionStudio":"Wit Studio","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Daisuke Tokudo"}],"nextVideoReleaseDate":null,"indexable":true},{"id":283,"title":"Strike the Blood","type":"EPS","originalTitle":"Strike the Blood","shortTitle":null,"reference":"striketb_tv","age":"12+","languages":["vostf"],"summary":"Sur l’île artificielle d’Itogami, on peut trouver toute sorte de créatures magiques. L'île est une réserve où elles peuvent habiter, tout en étant protégées et étudiées. Parmi elles, incognito, vit un lycéen : Kojô Akatsuki, qui est aussi le 4e Primogéniteur, soit l’un des vampires les plus puissants au monde. Quand Yukina Himeragi, une jeune prêtresse armée débarque dans son lycée, c’en est fini de sa petite vie tranquille…","image":"https://image.animationdigitalnetwork.fr/license/striketb/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/striketb/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/striketb/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/striketb/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/283-strike-the-blood","urlPath":"/video/283-strike-the-blood","episodeCount":24,"genres":["Sexy","Animation japonaise","Action","Comédie","Ecchi","Fan service","Fantastique","Romance"],"copyright":"© Gakuto Mikumo / ASCII MEDIA WORKS / PROJECT STB","rating":4.7,"ratingsCount":1723,"commentsCount":37,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2013","productionStudio":"Silver Link","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Takao Sano"},{"role":"Réalisateur","name":"Hideyo Yamamoto"},{"role":"Scénariste","name":"Hiroyuki Yoshino"},{"role":"Auteur","name":"Gakuto Mikumo"},{"role":"Character designer","name":"Keiichi Sano"},{"role":"Compositeur","name":"Assumed Sounds"}],"nextVideoReleaseDate":null,"indexable":true},{"id":766,"title":"Robotics;Notes","type":"EPS","originalTitle":"??????????","shortTitle":"Robotics;Notes","reference":"roboticsnotes_tv","age":"12+","languages":["vostf"],"summary":"Fan inconditionnelle de l’anime « Gunvarrel », Akiho Senomiya dirige avec ardeur le club de robotique de son lycée. Malheureusement, en raison de difficultés financières, ce dernier est sur le point d’être dissous, au grand dam de la jeune fille, qui ne trouve aucun soutien auprès de Kaito Yashio, second membre émérite, qui préfère s’entraîner sur Kill-Ballad, un jeu de combat. Afin de pallier l’absence de fond, Akiho décide d’inscrire le club au Robo-One, un concours où les plus grands robots s’affrontent. Mais au fur et à mesure, des phénomènes inexpliqués surviennent, attisant la curiosité des deux amis…","image":"https://image.animationdigitalnetwork.fr/license/roboticsnotes/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/roboticsnotes/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/roboticsnotes/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/roboticsnotes/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/766-robotics-notes","urlPath":"/video/766-robotics-notes","episodeCount":22,"genres":["Animation japonaise","Comédie","Drame","Romance","Science-Fiction","Scolaire"],"copyright":"© ROBOTICS.NOTES Partners","rating":4.9,"ratingsCount":122,"commentsCount":17,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Jeu Vidéo","tagline":null,"firstReleaseYear":"2012","productionStudio":"Production I.G","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Kazuya Nomura"},{"role":"Scénariste","name":"Jukki Hanada, Toshizo Nemoto, Masahiro Yokotani"},{"role":"Auteur","name":"5pb. Records, NitroPlus"},{"role":"Character designer original","name":"Tomonori Fukuda"},{"role":"Compositeur","name":"Yuki Hayashi, Takeshi Abo"},{"role":"Directeur artistique","name":"Ichiro Tatsuta"}],"nextVideoReleaseDate":null,"indexable":true},{"id":1072,"title":"Helck","type":"EPS","originalTitle":"Helck","shortTitle":"Helck","reference":"helck_tv","age":"12+","languages":["vostf"],"summary":"En effervescence depuis la défaite de leur souverain, le monde démoniaque organise un tournoi, espérant ainsi élire son digne successeur. Helck, un illustre guerrier à ce jour invaincu, semble prédestiné à remporter la victoire. Bien que clamant son aversion pour l’humanité, ses motivations ambiguës suscitent l’inquiétude de Vamirio, organisatrice de la compétition, résolue à l’évincer coûte que coûte.","image":"https://image.animationdigitalnetwork.fr/license/helck/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/helck/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/helck/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/helck/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/1072-helck","urlPath":"/video/1072-helck","episodeCount":24,"genres":["Animation japonaise","Action","Aventure","Comédie","Fantastique"],"copyright":"©Nanaki Nanao, Shogakukan/Helck Production Committee","rating":4.8,"ratingsCount":919,"commentsCount":15,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2023","productionStudio":"Satelight","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Tatsuo Sato"},{"role":"Scénariste","name":"Toshizo Nemoto, Mitsutaka Hirota"},{"role":"Mangaka","name":"Nanaki Nanao"},{"role":"Compositeur","name":"Yoshihisa Hirano"},{"role":"Directeur artistique","name":"Eiji Iwase"},{"role":"Directeur de la photographie","name":"Tsuyoshi Shimura"}],"nextVideoReleaseDate":null,"indexable":true}]},"dataUpdateCount":1,"dataUpdatedAt":1721906364171,"error":null,"errorUpdateCount":0,"errorUpdatedAt":0,"fetchFailureCount":0,"fetchFailureReason":null,"fetchMeta":null,"isInvalidated":false,"status":"success","fetchStatus":"idle"},"queryKey":["getRelatedShow",{"showId":267}],"queryHash":"[\"getRelatedShow\",{\"showId\":267}]"},{"state":{"data":{"pairs":[{"title":"Shonen et anime","shows":[{"id":624,"title":"Yu Yu Hakusho","type":"EPS","originalTitle":"Yu Yu Hakusho","shortTitle":"Yu Yu Hakusho","reference":"yuyuhakusho_tv","age":"10+","languages":["vostf","vf"],"summary":"Yusuke Urameshi est un jeune voyou de 14 ans. À la surprise générale, il sacrifie sa vie pour sauver celle d'un petit garçon lors d'un accident de voiture. Il quitte alors le monde des humains, le Ningen-Kai, pour rejoindre le monde spirituel, le Rei-Kai, gouverné par l'empereur Enma Daioh…","image":"https://image.animationdigitalnetwork.fr/license/yuyuhakusho/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/yuyuhakusho/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/yuyuhakusho/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/yuyuhakusho/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/624-yu-yu-hakusho","urlPath":"/video/624-yu-yu-hakusho","episodeCount":112,"genres":["Animation japonaise","Action","Arts Martiaux","Comédie","Fantastique","Shônen"],"copyright":"©Yoshihiro Togashi 1990-1994 TV animation series: ©Pierrot/Shueisha","rating":4.9,"ratingsCount":1950,"commentsCount":75,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":null,"tagline":null,"firstReleaseYear":"1992","productionStudio":"Pierrot","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Noriyuki Abe"},{"role":"Mangaka","name":"Yoshihiro Togashi"},{"role":"Scénariste","name":"Yukiyoshi Ohashi"},{"role":"Compositeur","name":"Yusuke Honma"},{"role":"Character designer","name":"Mari Kitayama"},{"role":"Character designer","name":"Masaya Onishi"}],"nextVideoReleaseDate":null,"indexable":true},{"id":846,"title":"Demon Slayer: Kimetsu no Yaiba","type":"EPS","originalTitle":"Demon Slayer: Kimetsu no Yaiba","shortTitle":"Demon Slayer","reference":"demonslayer_tv","age":"12+","languages":["vostf","vf"],"summary":"Nous sommes pendant l’ère Taishô. Tanjirô, un jeune et sympathique vendeur de charbon voit son quotidien changer radicalement après le massacre de sa famille par un démon. Seule sa petite sœur Nezuko survit à l’attaque, mais elle est transformée en un démon féroce. Ils partent tous deux en voyage afin de prendre leur revanche et de rendre à Nezuko son apparence d’origine. Vivez avec eux ce périple dans lequel le destin des humains et des démons s’entremêlent.","image":"https://image.animationdigitalnetwork.fr/license/demonslayer/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/demonslayer/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/demonslayer/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/demonslayer/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/846-demon-slayer-kimetsu-no-yaiba-saison-1","urlPath":"/video/846-demon-slayer-kimetsu-no-yaiba-saison-1","episodeCount":26,"genres":["Animation japonaise","Action","Aventure","Fantastique","Historique","Shônen","Violence"],"copyright":"©Koyoharu Gotoge / SHUEISHA, Aniplex, ufotable","rating":4.9,"ratingsCount":1021,"commentsCount":215,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2019","productionStudio":"ufotable","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Haruo Sotozaki"},{"role":"Mangaka","name":"Koyoharu Gotôge"},{"role":"Compositeur","name":"Yuki Kajiura"},{"role":"Compositeur","name":"Gō Shiina"}],"nextVideoReleaseDate":null,"indexable":true},{"id":1173,"title":"Harmagedon","type":"MOV","originalTitle":"아마게돈","shortTitle":"Harmagedon","reference":"harmagedon_film","age":"16+","languages":["vostf"],"summary":"Lorsque l’avion transportant Luna, la princesse de Transylvanie, explose en plein vol, son destin bascule. Sauvée in extremis par Froi, une mystérieuse entité, elle apprend que Genma, son ennemi juré, projette de détruire la Terre. Dotée de redoutables pouvoirs psychiques et désormais accompagnée par le robot Vega, elle se prépare à affronter les ténèbres qui menacent le monde.","image":"https://image.animationdigitalnetwork.fr/license/harmagedon/film/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/harmagedon/film/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/harmagedon/film/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/harmagedon/film/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/1173-harmagedon","urlPath":"/video/1173-harmagedon","episodeCount":1,"genres":["International","Aventure","Nostalgie","Science-Fiction","Violence"],"copyright":"©1983 Kadokawa Pictures, Inc.","rating":4.3,"ratingsCount":3,"commentsCount":0,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"1996","productionStudio":null,"countryOfOrigin":"Corée du Sud","productionTeam":[{"role":"Réalisateur","name":"Lee Hyeon Se"},{"role":"Scénariste","name":"Solock Ya, Lee Hyeon Se"},{"role":"Auteur","name":"Lee Hyeon Se"},{"role":"Compositeur","name":"Jiwhan Kim, Shinwoo Kim"},{"role":"Directeur de la photographie","name":"Bokdong Cho"},{"role":"Directeur de l'animation","name":"Sopung Lee"}],"nextVideoReleaseDate":null,"indexable":true},{"id":1104,"title":"Trigun","type":"EPS","originalTitle":"トライガン","shortTitle":"Trigun","reference":"trigun_tv","age":"10+","languages":["vostf","vf"],"summary":"Les ressources naturelles de la Terre ayant été épuisées, l’humanité a dû émigrer sur une planète hostile brûlée par deux soleils, où règne désormais la loi du plus fort. Pistolero légendaire, surnommé le «&nbsp;Typhon Humanoïde&nbsp;», Vash The Stampede fait figure d’homme à abattre en raison de sa mise à prix faramineuse&nbsp;: soixante milliards de doubles dollars.","image":"https://image.animationdigitalnetwork.fr/license/trigun/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/trigun/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/trigun/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/trigun/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/1104-trigun","urlPath":"/video/1104-trigun","episodeCount":26,"genres":["Animation japonaise","Action","Aventure","Comédie","Drame","Science-Fiction","Shônen"],"copyright":"© 1998 YASUHIRO NIGHTOW / SHONENGAHOSHA, FLYING DOG","rating":5,"ratingsCount":111,"commentsCount":3,"qualities":["sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":"Plongez dans un mélange unique de western et de science-fiction qui a conquis les cœurs du monde entier.","firstReleaseYear":"1998","productionStudio":"Madhouse","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Satoshi Nishimura"},{"role":"Scénariste","name":"Yosuke Kuroda"},{"role":"Mangaka","name":"Yasuhiro Nightow"},{"role":"Compositeur","name":"Tsuneo Imahori"},{"role":"Directeur artistique","name":"Hidetoshi Kaneko"},{"role":"Directeur de la photographie","name":"Hisao Shirai"}],"nextVideoReleaseDate":null,"indexable":true},{"id":522,"title":"Dances with the Dragons","type":"EPS","originalTitle":"Saredo Tsumibito wa Ryuu to Odoru","shortTitle":"Dances with the dragons","reference":"dancesdragons_tv","age":"12+","languages":["vostf"],"summary":"Gayus et Gigna, deux chasseurs de primes, sont des « technomages ». Ce sont des individus capables de manipuler les équations qui régissent les lois de leur monde. Armés de leur Magitech, ils peuvent ainsi accomplir toutes sortes d’exploits fantastiques et meurtriers. C’est dans la ville d’Eridana que les deux mercenaires se retrouvent emportés dans une bataille contre des dragons. Ils comprennent alors qu’il se passe quelque chose qui les dépassent complètement…","image":"https://image.animationdigitalnetwork.fr/license/dancesdragons/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/dancesdragons/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/dancesdragons/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/dancesdragons/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/522-dances-with-the-dragons","urlPath":"/video/522-dances-with-the-dragons","episodeCount":12,"genres":["Animation japonaise","Action","Arts Martiaux","Aventure","Fantastique","Seinen"],"copyright":"©Labo Asai, Shogakukan/Dances with the Dragons production committee","rating":4.2,"ratingsCount":465,"commentsCount":3,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":null,"firstReleaseYear":"2018","productionStudio":"Seven Arcs Pictures","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Hiroshi Nishikori"},{"role":"Réalisateur","name":"Hirozaku Hanai"},{"role":"Scénariste","name":"Takayo Ikami"},{"role":"Compositeur","name":"Takashi Ômama"},{"role":"Character designer","name":"Masaru Kitao"}],"nextVideoReleaseDate":null,"indexable":true},{"id":737,"title":"Yu Yu Hakusho : The Movie","type":"MOV","originalTitle":null,"shortTitle":null,"reference":"yuyuhakusho_film","age":"10+","languages":["vostf"],"summary":"Agé de quatorze ans, Yusuke Urameshi est sans doute le plus mauvais élève du collège Sarayashiki : ses notes sont médiocres, il passe son temps à faire l'école buissonnière et son attitude arrogante l'entraîne souvent dans des altercations de toutes sortes. Ce héros bien improbable va pourtant perdre la vie en sauvant un petit garçon sur le point de se faire renverser par une voiture..","image":"https://image.animationdigitalnetwork.fr/license/yuyuhakusho/film/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/yuyuhakusho/film/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/yuyuhakusho/film/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/yuyuhakusho/film/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/737-yu-yu-hakusho-the-movie","urlPath":"/video/737-yu-yu-hakusho-the-movie","episodeCount":1,"genres":["Animation japonaise","Action","Arts Martiaux","Comédie","Shônen"],"copyright":"©Yoshihiro Togashi 1990 - 1994©Pierrot/Shueisha","rating":4.8,"ratingsCount":27,"commentsCount":2,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"1993","productionStudio":"Pierrot","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Noriyuki Abe"}],"nextVideoReleaseDate":null,"indexable":true},{"id":725,"title":"Black Rock Shooter","type":"EPS","originalTitle":"?????????????","shortTitle":"Black Rock Shooter","reference":"brs_tv","age":"12+","languages":["vostf"],"summary":"Black Rock Shooter est la rencontre de deux destins, entrelacés et partagés entre deux mondes : celui de deux lycéennes, Mato et Yomi. Amies malgré leurs différences, elles sentent qu'un lien mystérieux et puissant les unit, sans savoir comment...","image":"https://image.animationdigitalnetwork.fr/license/brs/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/brs/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/brs/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/brs/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/725-black-rock-shooter","urlPath":"/video/725-black-rock-shooter","episodeCount":8,"genres":["Fantasy","Amitié","Animation japonaise","Action","Drame","Psychologique","Scolaire"],"copyright":"© BRS on TV","rating":3.8,"ratingsCount":50,"commentsCount":11,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Oeuvre Originale","tagline":null,"firstReleaseYear":"2012","productionStudio":"Ordet, SANZIGEN Animation Studio","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Shinobu Yoshioka"},{"role":"Auteur","name":"Huke"},{"role":"Scénariste","name":"Mari Okada"},{"role":"Compositeur","name":"Hideharu Mori"},{"role":"Character designer original","name":"Huke"},{"role":"Character designer","name":"Yusuke Yoshigaki"}],"nextVideoReleaseDate":null,"indexable":true},{"id":390,"title":"Assassination Classroom - Saison 2","type":"EPS","originalTitle":"アカメが斬る!","shortTitle":"Assclass2","reference":"assclass_tv2","age":"10+","languages":["vostf","vf"],"summary":"De retour de leurs vacances des plus « reposantes » sur l’île d’Okinawa, la classe 3 – E réintègre leur école pour un nouveau semestre. Entre l’obtention de leur diplôme, leur mission d’assassinats et le directeur, Gakuhô Asano qui n’est pas près de les laisser tranquille, cette rentrée promet de ne pas être de tout repos !","image":"https://image.animationdigitalnetwork.fr/license/assclass/tv2/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/assclass/tv2/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/assclass/tv2/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/assclass/tv2/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/390-assassination-classroom-saison-2","urlPath":"/video/390-assassination-classroom-saison-2","episodeCount":25,"genres":["Animation japonaise","Jeunesse","Action","Comédie","Scolaire","Shônen"],"copyright":"©Yusei Matsui/SHUEISHA,ASSASSINATION CLASSROOM Committee","rating":4.8,"ratingsCount":5141,"commentsCount":78,"qualities":["fhd","hd","sd"],"distributions":"fr,de","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2016","productionStudio":"Lerche","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Seiji Kishi"},{"role":"Scénariste","name":"Makoto Uezu"},{"role":"Compositeur","name":"Naoki Sato"},{"role":"NULL","name":"NULL"},{"role":"NULL","name":"NULL"},{"role":"NULL","name":"NULL"}],"nextVideoReleaseDate":null,"indexable":true},{"id":442,"title":"Sword Art Online","type":"EPS","originalTitle":"ソードアート・オンライン","shortTitle":"Sword Art Online","reference":"swordartonline_tv","age":"10+","languages":["vostf","vf"],"summary":"Sword&nbsp;Art Online, un MMORPG dont la bêta déchaîne les passions, offre l’opportunité à dix mille privilégiés de s’immerger dans son univers grâce à un casque de réalité virtuelle. Kirito, 14&nbsp;ans, se démarque de ses pairs en déjouant les rouages du jeu. Mais lorsqu’une mystérieuse entité annonce aux joueurs qu’ils ne pourront pas se déconnecter avant d’atteindre le niveau&nbsp;100, la panique s’immisce progressivement. Une seule échappatoire possible&nbsp;: survivre ou mourir.","image":"https://image.animationdigitalnetwork.fr/license/swordartonline/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/swordartonline/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/swordartonline/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/swordartonline/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/442-sword-art-online","urlPath":"/video/442-sword-art-online","episodeCount":49,"genres":["Animation japonaise","Action","Drame","Fantastique","Romance","Isekai"],"copyright":"©REKI KAWAHARA/ASCII MEDIA WORKS/SAO Project.","rating":5,"ratingsCount":331,"commentsCount":19,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Light Novel","tagline":null,"firstReleaseYear":"2012","productionStudio":"A-1 Pictures","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Tomohiko Ito"},{"role":"Scénariste","name":"Yukie Sugawara"},{"role":"Auteur","name":"Reki Kawahara"},{"role":"Character designer original","name":"abec"},{"role":"Compositeur","name":"Yuki Kajiura"},{"role":"Directeur artistique","name":"Yusuke Takeda"}],"nextVideoReleaseDate":null,"indexable":true}]},{"title":"Avec des bagarres en équipe","shows":[{"id":658,"title":"Tokyo Ghoul:re - Saison 3","type":"EPS","originalTitle":"Tokyo Ghoul : RE","shortTitle":null,"reference":"tokyoghoul_tv3","age":"16+","languages":["vostf","vf"],"summary":"Deux ans après les événements qui ont impliqué les goules du 20ème et le CCG, on suit Haise Sasaki, un inspecteur du CCG et son équipe, assignés pour traquer une goule sans scrupule qui se fait passer pour un chauffeur de taxi. Si on fait appel à eux pour ce cas, c'est parce qu'ils possèdent des caractéristiques bien précises...","image":"https://image.animationdigitalnetwork.fr/license/tokyoghoul/tv3/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/tokyoghoul/tv3/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/tokyoghoul/tv3/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/tokyoghoul/tv3/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/658-tokyo-ghoul-re-saison-3","urlPath":"/video/658-tokyo-ghoul-re-saison-3","episodeCount":24,"genres":["Animation japonaise","Action","Policier / Thriller"],"copyright":"©︎ISHIZAKA RYUDAI/Cycomi/Hanamiya Fan Club","rating":4.5,"ratingsCount":1034,"commentsCount":61,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2018","productionStudio":"Pierrot","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Odahiro Watanabe"},{"role":"Auteur","name":"Sui Ishida"},{"role":"Character designer","name":"Atsuko Nakajima"},{"role":"Scénariste","name":"Chuji Mikasano"}],"nextVideoReleaseDate":null,"indexable":true},{"id":481,"title":"Valérian et Laureline","type":"EPS","originalTitle":"Valérian et Lauréline","shortTitle":"Valérian","reference":"valerian_tv","age":"10+","languages":["vostf","vf"],"summary":"Juin 2417, Valérian est le plus jeune pilote spatio-temporel de Galaxity, la capitale de l'Empire galactique terrien. Très talentueux, il est envoyé pour sa première mission à bord du Tempus Fugit, le 5 avril 912 en Normandie. Au cours de cette expédition, il modifie le passé bien malgré lui en sauvant une jeune et belle saltimbanque : Laureline. Après avoir pris la fuite face à un cruel seigneur, ils retournent tous deux dans le futur. Or, ils réalisent très vite que la Terre a disparu et qu'ils sont les uniques représentants de l'espèce humaine. À la recherche de leur planète natale, Valérian et Laureline parcourent la galaxie tout en s'opposant aux manœuvres des Vlagos, créatures tentaculaires et cauchemardesques qui veulent s'emparer du pouvoir et contrôler l'Univers... ","image":"https://image.animationdigitalnetwork.fr/license/valerian/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/valerian/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/valerian/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/valerian/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/481-valerian-et-laureline","urlPath":"/video/481-valerian-et-laureline","episodeCount":40,"genres":["Cyberpunk","Robots","Animation franco-belge","Jeunesse","Action","Aventure","Science-Fiction"],"copyright":"© DARGAUD MARINA / EUROPACORP / SATELIGHT 2006","rating":4.6,"ratingsCount":317,"commentsCount":12,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":true,"basedOn":null,"tagline":null,"firstReleaseYear":"2007","productionStudio":"Ellipsanime","countryOfOrigin":"France","productionTeam":[{"role":"Réalisateur","name":"Philippe Vidal"},{"role":"Auteur","name":"Jean-Claude Mézières"},{"role":"Character designer","name":"Jean-Claude Mézières"},{"role":"Auteur","name":"Pierre Christin"}],"nextVideoReleaseDate":null,"indexable":true},{"id":662,"title":"L'Attaque des Titans","type":"EPS","originalTitle":"Shingeki no Kyojin","shortTitle":"L'Attaque des Titans","reference":"aot_tv","age":"12+","languages":["vostf","vf"],"summary":"Dans un monde ravagé par des titans mangeurs d’homme depuis plus d’un siècle, les rares survivants de l’Humanité n’ont d’autre choix pour survivre que de se barricader dans une cité-forteresse. Le jeune Eren, témoin de la mort de sa mère dévorée par un titan, n’a qu'un rêve : entrer dans le corps d’élite chargé de découvrir l’origine des titans, et les tuer jusqu'au dernier…","image":"https://image.animationdigitalnetwork.fr/license/aot/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/aot/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/aot/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/aot/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/662-attaque-des-titans-shingeki-no-kyojin","urlPath":"/video/662-attaque-des-titans-shingeki-no-kyojin","episodeCount":25,"genres":["Animation japonaise","Action","Aventure","Drame","Seinen","Violence"],"copyright":"Based on the manga \"Shingeki no Kyojin\" by Hajime Isayama originally serialized in the monthly BESSATSU SHONEN magazine published by Kodansha Ltd.\n©Hajime Isayama,Kodansha/\"ATTACK ON TITAN\"Production Committee. All rights reserved","rating":4.9,"ratingsCount":3374,"commentsCount":483,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2013","productionStudio":"Wit Studio","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Tetsuro Araki"},{"role":"Mangaka","name":"Hajime Isayama"},{"role":"Scénariste","name":"Yasuko Kobayashi"},{"role":"Character designer","name":"Kyoji Asano"},{"role":"Directeur artistique","name":"Shunichiro Yoshihara"},{"role":"Compositeur","name":"HiroyukI Sawano"}],"nextVideoReleaseDate":null,"indexable":true},{"id":964,"title":"Immoral Guild","type":"EPS","originalTitle":"Futoku no Guild","shortTitle":"Immoral Guild","reference":"immoralguild_tv","age":"18+","languages":["vostf"],"summary":"Bien que Kikuru Madan soit le meilleur chasseur de monstres de la guilde, ce dernier, las de cette vie intrépide et sans repos, souhaite profiter comme il se doit de sa jeunesse. Mais poser sa démission n'est pas chose aisée : s'il souhaite partir, il devra accomplir avant une dernière mission : former Hitamu Kyan afin qu'elle lui succède. Mais une ribambelle de jeunes femmes, plus charmantes les unes que les autres, se présentent à lui, fin prêtes à s'améliorer. Malheureusement Kikuru va devoir faire preuve d'une patience infinie s'il souhaite parfaire leur apprentissage…","image":"https://image.animationdigitalnetwork.fr/license/immoralguild/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/immoralguild/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/immoralguild/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/immoralguild/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/964-immoral-guild","urlPath":"/video/964-immoral-guild","episodeCount":12,"genres":["Fantasy","Harem","Monstres","Animation japonaise","Action","Aventure","Comédie","Ecchi","Fantastique"],"copyright":"©Taichi Kawazoe/ SQUARE ENIX, Immoral Guild PARTNERS","rating":3.9,"ratingsCount":119,"commentsCount":10,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2022","productionStudio":"TNK","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Takuya Asaoka"},{"role":"Mangaka","name":"Taichi Kawazoe"},{"role":"Directeur artistique","name":"Satoru Hirayanagi"},{"role":"Directeur de la photographie","name":"Takuya Ogata"},{"role":"Character designer","name":"Hiraku Kaneko"}],"nextVideoReleaseDate":null,"indexable":true},{"id":107,"title":"Rainbow","type":"EPS","originalTitle":"Rainbow : Nisha Rokubou no Shichinin","shortTitle":"Rainbow","reference":"rainbow_tv","age":"12+","languages":["vostf"],"summary":"1955. La fin de la guerre ayant meurtri considérablement l’économie japonaise, six adolescents, exsangues et accablés par la misère, sont contraints de commettre divers méfaits afin de survivre. Incarcérés dans une cellule de la maison de correction de Shônan, leur existence se transforme en un véritable cauchemar de brutalité et d’humiliation. Poussés dans leurs derniers retranchements, ils vont devoir faire preuve d’une résilience sans faille.","image":"https://image.animationdigitalnetwork.fr/license/rainbow/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/rainbow/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/rainbow/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/rainbow/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/107-rainbow","urlPath":"/video/107-rainbow","episodeCount":26,"genres":["Animation japonaise","Drame","Historique","Policier / Thriller","Seinen"],"copyright":"Based on the original graphic novel “RAINBOW” by George Abe, Masasumi Kakizaki, published by Shogakukan Inc.\n©2010 George Abe, Masasumi Kakizaki/Shogakukan, VAP, NTV","rating":4.8,"ratingsCount":167,"commentsCount":3,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":"Une ode à l'amitié dans l'enfer carcéral des années 1950.","firstReleaseYear":"2010","productionStudio":"Madhouse","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Hiroshi Koujina"},{"role":"Scénariste","name":"Kazuyuki Fudeyasu, Mitsutaka Hirota, Hideo Takayashiki"},{"role":"Mangaka","name":"George Abe, Masasumi Kakizaki"},{"role":"Directeur artistique","name":"Tomoyuki Shimizu"},{"role":"Directeur de la photographie","name":"Yukihiro Masumoto"},{"role":"Character designer","name":"Ai Kikuchi"}],"nextVideoReleaseDate":null,"indexable":true},{"id":108,"title":"Reborn!","type":"EPS","originalTitle":"Katekyo Hitman Reborn!","shortTitle":null,"reference":"reborn_tv","age":"10+","languages":["vostf"],"summary":"En dépit de son apparence quelque peu enfantine, Reborn est un redoutable tueur qui officie pour le compte d'un puissant clan de la mafia italienne : la famille Vongola. Cette dernière l'envoie au Japon pour éduquer le jeune Tsunayoshi Sawada, ce dernier étant pressenti pour devenir le dixième parrain du clan. Mais l'adolescent, qui est d'une prodigieuse nullité que se soit pour les études, le sport, ou même en popularité auprès des filles, semble loin de faire l'affaire. Mais tout cela va peut être changer grâce à son nouveau professeur très particulier...","image":"https://image.animationdigitalnetwork.fr/license/reborn/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/reborn/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/reborn/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/reborn/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/108-reborn","urlPath":"/video/108-reborn","episodeCount":203,"genres":["Animation japonaise","Action","Comédie","Shônen"],"copyright":"© AKIRA AMANO/SHUEISHA, TV TOKYO, REBORN! PRODUCTION COMMITTEE","rating":4.7,"ratingsCount":2510,"commentsCount":92,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":null,"tagline":"Reborn! Mon prof le tueur","firstReleaseYear":"2006","productionStudio":"Artland","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Kenichi Imaizumi"},{"role":"Mangaka","name":"Akira Amano"},{"role":"Scénariste","name":"Nobuaki Kishima"},{"role":"Character designer","name":"Masayoshi Tanaka"},{"role":"Compositeur","name":"Toshihiko Sahashi"}],"nextVideoReleaseDate":null,"indexable":true},{"id":892,"title":"One Piece OAV • 3D2Y","type":"OAV","originalTitle":"One Piece 3D2Y","shortTitle":"One Piece OAV - 3D2Y","reference":"onepiece_special4","age":"10+","languages":["vostf","vf"],"summary":"Retrouvez avec émotion les différentes aventures qu’ont vécues Luffy et son équipage lors de leur périple sur les mers de Grand Line, dans une version remastérisée&thinsp;! Après la guerre au sommet de Marine Ford où le frère de Luffy, Ace, a perdu la vie, l’équipage du Chapeau de paille s’est donné rendez-vous deux ans plus tard pour pouvoir s’entraîner de leur côté. Luffy suit son entraînement sur l’île Rusukaina afin de parfaire ses compétences avant de se rendre dans le Nouveau Monde avec son équipage. Mais un événement inattendu vient bouleverser son apprentissage : Byrnndi World, un célèbre pirate, s’est échappé du niveau 6 d’Impel Down, la prison la plus sécurisée du Gouvernement Mondial, et kidnappe Marigold et Sandersonia, afin de faire pression sur le gouvernement et Hancock en raison du statut de Grand Corsaire de la princesse Kuja. Luffy et Hancock décident d’unir leurs forces pour stopper Byrnndi et sauver les sœurs de cette dernière.","image":"https://image.animationdigitalnetwork.fr/license/onepiece/special4/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/onepiece/special4/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/onepiece/special4/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/onepiece/special4/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/892-one-piece-oav-3d2y","urlPath":"/video/892-one-piece-oav-3d2y","episodeCount":1,"genres":["Animation japonaise","Jeunesse","Action","Aventure","Comédie","Fantastique","Shônen"],"copyright":"© Eiichiro Oda/Shueisha, Toei Animation","rating":4.8,"ratingsCount":67,"commentsCount":6,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":"Partez à l'aventure avec l'équipage du chapeau de paille !","firstReleaseYear":"2014","productionStudio":"Toei Animation","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Konosuke Uda"},{"role":"Mangaka","name":"Eiichirô Oda"},{"role":"Scénariste","name":"Ryota Yamaguchi"},{"role":"Compositeur","name":"Kohei Tanaka"},{"role":"Character designer","name":"Noboru Koizumi"}],"nextVideoReleaseDate":null,"indexable":true},{"id":924,"title":"One Piece Film 8 • Épisode d'Alabasta : Les Pirates et la Princesse du désert","type":"MOV","originalTitle":"One Piece Movie 8 : Episode of Alabasta - Sabaku no Ojou to Kaizoku Tachi","shortTitle":"One Piece Film 8 • Épisode d'Alabasta : Les Pirates et la Princesse du désert","reference":"onepiece_film8","age":"10+","languages":["vostf","vf"],"summary":"Le Royaume d’Alabasta est en proie à une terrible guerre civile, orchestrée dans l’ombre par le perfide Crocodile, l’un des sept Grands Corsaires. Afin de sauver son pays de la mainmise de ce dernier, Vivi Nefertari fait appel à l’équipage du Chapeau de paille pour lui venir en aide, mais une fois sur place, ceux-ci se retrouvent confrontés aux membres de l’organisation Baroque Works.\nCe film retrace les événements de l'arc Alabasta en modifiant cependant quelques passages de ce dernier.","image":"https://image.animationdigitalnetwork.fr/license/onepiece/film8/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/onepiece/film8/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/onepiece/film8/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/onepiece/film8/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/924-one-piece-film-episode-alabasta-les-pirates-et-la-princesse-du-desert","urlPath":"/video/924-one-piece-film-episode-alabasta-les-pirates-et-la-princesse-du-desert","episodeCount":1,"genres":["Animation japonaise","Jeunesse","Action","Aventure","Comédie","Fantastique","Shônen"],"copyright":"© Eiichiro Oda/Shueisha, Toei Animation","rating":4.6,"ratingsCount":25,"commentsCount":4,"qualities":["fhd","hd","sd"],"distributions":"fr,de","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":"Partez à l'aventure avec l'équipage du Chapeau de paille !","firstReleaseYear":"2007","productionStudio":"Toei Animation","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Takahiro Imamura"},{"role":"Mangaka","name":"Eiichirô Oda"},{"role":"Scénariste","name":"Hirohiko Uesaka"},{"role":"Compositeur","name":"Kohei Tanaka"},{"role":"Compositeur","name":"Shiro Hamaguchi"},{"role":"Character designer","name":"Eisaku Inoue"}],"nextVideoReleaseDate":null,"indexable":true},{"id":999,"title":"Dragon Ball Super","type":"EPS","originalTitle":"ドラゴンボール超(スーパー)","shortTitle":"Dragon Ball Super","reference":"dbsuper_tv","age":"10+","languages":["vostf","vf"],"summary":"Depuis sa victoire face à Majin Boo, Son Goku, travaillant désormais comme fermier pour subvenir aux besoins de sa famille, espère pouvoir vivre en toute quiétude auprès de ses proches. Mais dans les confins obscurs de la galaxie, Beerus, le dieu de la destruction, se réveille après des décennies de léthargie. Accompagné de son assistant Whis, il cherche à contrer la prophétie selon laquelle un «&nbsp;Dieu Super Saïyen&nbsp;» viendrait à bout de son hégémonie.","image":"https://image.animationdigitalnetwork.fr/license/dbsuper/tv/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/dbsuper/tv/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/dbsuper/tv/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/dbsuper/tv/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/999-dragon-ball-super","urlPath":"/video/999-dragon-ball-super","episodeCount":131,"genres":["Animation japonaise","Action","Arts Martiaux","Aventure","Comédie","Fantastique","Shônen"],"copyright":"©Bird Studio/Shueisha, Toei Animation","rating":4.7,"ratingsCount":1790,"commentsCount":76,"qualities":["fhd","hd","sd"],"distributions":"fr,de","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":"Retrouvez l'exclusivité de « Dragon Ball Super » sur ADN !","firstReleaseYear":"2015","productionStudio":"Toei Animation","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Kimitoshi Chioka, Kouhei Hatano, Morio Hatano, Tatsuya Nagamine, Ryota Nakamura"},{"role":"Scénariste","name":"Akira Toriyama"},{"role":"Mangaka","name":"Akira Toriyama"},{"role":"Compositeur","name":"Norihito Sumitomo"}],"nextVideoReleaseDate":null,"indexable":true},{"id":362,"title":"Boruto : Naruto, le film","type":"EPS","originalTitle":"Boruto","shortTitle":null,"reference":"boruto_film","age":"10+","languages":["vostf","vf"],"summary":"Après une guerre terrible, Konoha connaît enfin la prospérité et le progrès.\u2028C’est dans ce contexte paisible que Naruto est nommé 7e Hokage. Il prépare la tenue du prochain examen de sélection des Ninjas de Moyenne Classe afin de détecter de nouveaux talents. Seule ombre au tableau : son fils Boruto, qui lui en veut terriblement car il se sent délaissé.\nPendant les épreuves de l’examen, deux sombres individus s'attaquent à Naruto ! Boruto est tétanisé et ne doit la vie sauve qu’à l’intervention de Sasuke. Il découvre stupéfait que Naruto a disparu avec ses mystérieux agresseurs ... \n","image":"https://image.animationdigitalnetwork.fr/license/boruto/film/web/affiche_175x250.jpg","image2x":"https://image.animationdigitalnetwork.fr/license/boruto/film/web/affiche_350x500.jpg","imageHorizontal":"https://image.animationdigitalnetwork.fr/license/boruto/film/web/license_320x180.jpg","imageHorizontal2x":"https://image.animationdigitalnetwork.fr/license/boruto/film/web/license_640x360.jpg","url":"https://animationdigitalnetwork.com/video/362-boruto-naruto-le-film","urlPath":"/video/362-boruto-naruto-le-film","episodeCount":1,"genres":["Animation japonaise","Jeunesse","Action","Arts Martiaux","Aventure","Comédie","Shônen"],"copyright":"© 2002 MASASHI KISHIMOTO / 2007 SHIPPUDEN © BMP 2015","rating":4.5,"ratingsCount":236,"commentsCount":107,"qualities":["fhd","hd","sd"],"distributions":"fr","simulcast":false,"free":false,"available":true,"download":false,"basedOn":"Manga","tagline":null,"firstReleaseYear":"2015","productionStudio":"Pierrot","countryOfOrigin":"Japon","productionTeam":[{"role":"Réalisateur","name":"Hiroyuki Yamashita"},{"role":"Mangaka","name":"Masashi Kishimoto"},{"role":"Character designer","name":"Tetsuya Nishio"},{"role":"Compositeur","name":"Yasuharu Takanashi"}],"nextVideoReleaseDate":null,"indexable":true}]}]},"dataUpdateCount":1,"dataUpdatedAt":1721906364127,"error":null,"errorUpdateCount":0,"errorUpdatedAt":0,"fetchFailureCount":0,"fetchFailureReason":null,"fetchMeta":null,"isInvalidated":false,"status":"success","fetchStatus":"idle"},"queryKey":["pairsShow",{"showId":267,"minPairSize":3}],"queryHash":"[\"pairsShow\",{\"minPairSize\":3,\"showId\":267}]"},{"state":{"data":{"hreflang":{"fr":"https://animationdigitalnetwork.com/video/267-hunter-x-hunter-2011/3533-episode-70","de":null}},"dataUpdateCount":1,"dataUpdatedAt":1721906364143,"error":null,"errorUpdateCount":0,"errorUpdatedAt":0,"fetchFailureCount":0,"fetchFailureReason":null,"fetchMeta":null,"isInvalidated":false,"status":"success","fetchStatus":"idle"},"queryKey":["hreflang",3533],"queryHash":"[\"hreflang\",3533]"}]},"_nextI18Next":{"initialI18nStore":{"fr":{"common":{"title":"ADN","learn":"Learn React","hello_button":"Hello Button","are_you_sure":"Êtes-vous sur ?","cancel":"Annuler","ok":"OK","yes":"Oui","no":"Non","loading":" Chargement...","loading_video":" Chargement du lecteur...","click_here":"cliquez ici !","next_release":"PROCHAINE SORTIE","adn_news":"ADN news","last_videos":"Derniers ajouts","themes":"Thèmes","recommendations":"Recommandations","yatta_link":"Plus de news","yatta_posted":"Posté il y a","more_results":"Plus de résultats","no_releases":"Pas de sorties.","watch_EPS":"Regarder la série","watch_MOV":"Regarder le film","watch_OAV":"Regarder l'OAV","first_episode_free":"1\u003csup\u003eer\u003c/sup\u003e épisode GRATUIT","and":"ET","hours":"Heures","minutes":"Minutes","resume_episode":"Résumé de l'épisode","summary_title":"Résumé : {{videoTitle}} {{videoNumber}} en {{videoLanguages}}","seo_title":"ADN | Anime streaming en VOSTFR et VF","seo_description":"Animation Digital Network c'est le meilleur de l'animé en direct du Japon ! Découvrez en streaming tout Naruto Shippuden, Fairy Tail, Hunter x Hunter, Blue Exorcist, Code Geass, Vampire Knight, etc.","seo_author":"ADN","errors":{"required":"Ce champ est obligatoire.","required_number":"Le code doit contenir 6 chiffres.","min_length":"Le mot de passe doit faire plus de 8 caractères.","min_age":"La création de compte est réservée aux personnes ayant 12 ans révolus.","password_must_match":"La vérification et le mot de passe sont différents.","gcu_required":"Vous devez accepter les conditions d'utilisation pour créer un compte.","email_invalid":"Cette adresse email n'est pas valide.","email_validation_error":"${value} doit être un email valide.","captcha":"Captcha Incorrect","page":"Page introuvable","logout_failed":"La déconnexion de votre compte n'a pas pu se faire correctement. Veuillez réessayer.","message_with_context":"{{message}} Erreur: {{context}}","relogin_to_apply_changes":"La session d'actualisation a échoué. Veuillez vous déconnecter et vous reconnecter pour appliquer un nouvel abonnement","something_went_wrong":"Une erreur est survenue.","profiles_general_error":"Nous avons rencontré un problème avec les profils, temporairement le profil principal a été défini pour permettre la navigation sur le site","viewing_limitation_invalid":"La limitation de durée de visionnage doit être de 30 minutes au minimum.","subscription_group_invalid":"L'offre découverte est uniquement disponible pour les nouveaux utilisateurs","ogone_errors":{"20001004":"We have received an unknown status for the transaction. We shall contact your acquirer and update the transaction status within one working day. Please check the : us later.","20001111":"A technical problem has occurred. Please contact the helpdesk.","20001998":"We received an unknown status for the transaction. We will contact your acquirer and update the status of the transaction. Please check the status later.","30001011":"A technical problem has occurred. Please contact the helpdesk.","30031001":"Invalid merchant number","30041001":"Retain card.","30051001":"Authorisation declined","30071001":"Retain card - special conditions.","30121001":"Invalid transaction","30131001":"Invalid amount","30141001":"Invalid card number","30201001":"A technical problem has occurred. Please contact the helpdesk.","30301001":"Invalid format","30341001":"Suspicion of fraud.","30381001":"A technical problem has occurred. Please contact the helpdesk.","30411001":"Lost card","30431001":"Stolen card. Pick up.","30511001":"Insufficient funds","30541001":"Card expired","30561001":"Card not in authoriser's database.","30591001":"Suspicion of fraud","30611001":"Amount exceeds card limit","30751001":"Incorrect PIN entered too many times","50001054":"Card number incorrect or incompatible","50001111":"Data validation error","50001113":"This order has already been processed.","50001123":"Card type not active"}},"actions":{"save":"Enregistrer","enter":"Valider","cancel":"Annuler"},"messages":{"general_error":"Une erreur est survenue.","session_expired":"Votre session a expiré. Veuillez vous reconnecter.","empty_password":"Un mot de passe vide n'est pas autorisé"},"languages":{"vostf":{"name":"VOSTFR","title":"Japonais sous-titré français"},"vf":{"name":"VF","title":"Français"},"and":" et ","title_video_tab":" {{title}} - streaming - {{languages}} - ADN"},"time_codes":{"title":"Page d'administration du timecodes","error_details":"Détails de l'erreur:","is_uploading":"Téléchargement","submit_file":"Ajouter le fichier CSV"},"multi_profile":{"add_new":"Ajouter un nouveau profil","edit":"Modification du profil","fields":{"name":"Entrer votre nom","act_green":"J'agis pour la planète en ayant une consommation responsable.","act_green_explanation":"Qu'est-ce que c'est ?","green":"Vous pouvez modifier ces paramètres dans vos préférences de lecture.","age_group":"Catégorie d'âge :"},"age_group":{"zero":"0+","ten":"10+","twelve":"12+","sixteen":"16+","eighteen":"18+","no_restriction":"Sans restriction d'âge","hint":"Les contenus à partir de {{age}} ne sont pas autorisés.","hint_no_limit":"Pas de restriction de contenu."},"subscription":{"registered":"Inscrit","subscriber":"Abonné"},"who_is_it":{"title":"Qui est-ce ?","add":"Nouveau profil","edit":"Modifier mon profil","cta_text":"Pour réactiver vos profils secondaires,","cta_link":"ré-abonnez vous."},"who_is_it_edit":{"title_singular":"Modifier le profil","title_plural":"Modifier les profils","subtitle":"Sélectionner un profil à modifier","end":"Terminé","cta_text":"Vous souhaitez ajouter de nouveaux profils ?","cta_disabled_text":"Pour modifier vos profils secondaires,","cta_link":"Abonnez-vous !","cta_disabled_link":"ré-abonnez vous."},"messages":{"profile_created":"Profil créé avec succès","profile_updated":"Profil mis à jour","profile_create_error":"Erreur lors de la création du profil, veuillez réessayer plus tard","profile_update_error":"Erreur lors de la modification du profil, veuillez réessayer plus tard","profile_update_avatar_distribution_error":"Cet avatar n'est pas disponible dans votre distribution, veuillez en choisir un autre"}},"pin_code":{"title":"Entrez votre code pin","forgot_pin_code":"Code pin oublié ?","forgot_pin_code_received":"Veuillez vérifier votre boîte de réception !"},"twitch":{"follow":"Suivez nos émissions"},"player":{"vote":"Notez !","thanks_for_voting":"Merci :)","no_comments":"Aucun commentaire","comments":"{{count}} commentaires","commentSingular":"{{count}} commentaire","comment":"commentaires","my_watchlist":"Ma watchlist","already_seen_show":"J'ai vu cette série","favorite":"Coup de coeur","download":"Télécharger","broadcast":"En cours de diffusion.","see_more":"Voir plus","summary":"Résumé de la série :","season":"Saison {{season}} ","source":"Source :","in":"en","on_adn":"sur ADN","and_lowercase":"et","integrate_video":"Intégrer la vidéo","no_access":"Vous devez être abonné pour accéder à ce contenu.","show_offer":"Découvrir les offres","return_to_home":"Retour à l'accueil","report_issue":"Veuillez réessayer plus tard. si le problème persiste, n'hésitez pas à contacter ","go_to_sav":"notre SAV","go_to_catalog":"Accéder au catalogue","video_not_found":"Vidéo non trouvée !","already_subscriber":"Déjà abonné(e) à ADN ? ","click_here":"Cliquez ici !","to_sign_in":"pour vous connecter à votre compte et visionner l'épisode","age_restriction_message":"Ce contenu n'est pas accessible pour votre catégorie d'âge.\u003cbr /\u003eC'est pour votre bien !","distribution_restriction_message":"Ce contenu n'est pas accessible dans votre pays.","duration_restriction_message":"Vous avez atteint la limite de visionnage quotidienne définie pour votre profil.","select_video":"Veuillez sélectionner une autre vidéo !"},"download_overlay":{"unlimited_credits":"Vos crédits de téléchargement sont \u003cstrong\u003eillimités\u003c/strong","no_credits":"Vous n'avez plus/pas de crédits de téléchargement","credits_after_one":"Il vous reste maintenant \u003cstrong\u003e1 crédit\u003c/strong\u003e de téléchargement à utiliser.","credits_after_other":"Il vous reste actuellement \u003cstrong\u003e{{count}} crédits\u003c/strong\u003e de téléchargement à utiliser.","credits_before_one":"Il vous reste actuellement \u003cstrong\u003e1 crédit\u003c/strong\u003e de téléchargement à utiliser.","credits_before_other":"Il vous reste actuellement \u003cstrong\u003e{{count}} crédits\u003c/strong\u003e de téléchargement à utiliser.","you_will_use_credits_one":"Vous utiliserez \u003cstrong\u003e1 crédit\u003c/strong\u003e de téléchargement","you_will_use_credits_other":"Vous utiliserez \u003cstrong\u003e{{count}} crédits\u003c/strong\u003e de téléchargement","download_warning":"Attention : Les fichiers téléchargés sont marqués et nous permettent d'identifier leur propriétaire. Toute tentative de partage de fichier entrainera le blocage du compte ainsi que des poursuites judiciaires. (cf. Article 9 des CGU)","download_max_reached":"\u003cstrong\u003eVous avez déjà téléchargé ce fichier plus de 8 fois !\u003c/strong\u003e\u003cbr/\u003eN'hésitez pas à contacter le SAV si vous rencontrez des problèmes pour télécharger une vidéo.","validate_email_warning":"\u003cstrong\u003eAttention !\u003c/strong\u003e Pour télécharger un épisode, veuillez d'abord valider votre adresse email.","video_not_available":"Cette vidéo n'est pas encore disponible en téléchargement.","video_not_available_message":"Nous travaillons pour la rendre disponible au plus vite. Merci de votre compréhension.","no_download":"Vous ne pouvez pas télécharger cette vidéo.","no_main_profile":"Les téléchargements sont réservés au détenteur du compte ADN. Si vous désirez télécharger une vidéo, contactez-le.","choose_version":"Choisissez la version que vous voulez télécharger :","country_ip":"\u003cspan class=\"geomessage\"\u003ePour des raisons légales, nous ne sommes pas autorisés à diffuser nos vidéos dans ce territoire.\u003cbr/\u003e Si vous vous trouvez dans un pays européen francophone, un territoire d'outre mer ou au Maghreb et que ce message apparaît, contactez-nous en utilisant le formulaire de contact du site.\u003cbr/\u003e\u003cbr/\u003eFor legal reasons, we are not allowed to broadcast our videos in this territory.\u003cbr/\u003eIf this message appears, when you are in a french speaking country, an overseas territory or in the maghreb, please contact us by using our website contact form.\u003c/span\u003e\u003cbr/\u003e\u003cstrong\u003eVotre pays : {{country}} (IP : {{ip}})\u003c/strong\u003e","blacklisted_ip":"l'IP {{ip}} est bloquée.\u003cbr/\u003eL'utilisation de VPN ou Proxy pour accéder aux vidéos n'est pas autorisé. Cette IP peut aussi avoir été bloquée si elle a été utilisée à des fins ne respectant pas nos conditions d’utilisations.","download_available":"Votre épisode est téléchargeable","download_available_for":"Votre épisode est téléchargeable pendant {{time}}","download_button":"Télécharger","download_version":"Télécharger en ","view_our_offers":" Voir les offres","validate_email_button":"Valider mon adresse mail","you_download":"Vous télécharger :","you_want_to_download":"Vous allez télécharger :","warn_already_downloaded":"\u003cstrong\u003eAttention :\u003c/strong\u003e Vous avez déjà téléchargé cet épisode.","in_language_vf":" en \u003cacronym title=\"Version Française\"\u003eVF\u003c/acronym\u003e","in_language_vostf":" en \u003cacronym title='Version Originale Sous-Titrée Français'\u003eVOSTFR\u003c/acronym\u003e","progress_bar":{"start":"Préparation...","done":"Téléchargement...","all_done":"Téléchargement terminé !"},"language_titles":{"vf":"Version Française","vostf":"Version Originale Sous-Titrée Français"}},"main_carrousel":{"watch_show":"Regarder","free":"Gratuit"},"versus_battle_page":{"title":"BIENVENUE SUR ADN !","header":"Aidez-nous a vous proposer les meilleurs contenus","sub_header":"Quel anime préférez vous ?","button":"PASSER"},"user_account_survey_page":{"header":"QUI SUIS-JE ?","pass_button":"PASSER","submit_button":"VALIDER","notification_message":"Votre compte a été créé avec succès. N'hésitez pas à compléter votre profil pour profiter pleinement de tous nos services !"},"versus_battle":{"title":"VERSUS BATTLE","i_like_both":"J'aime les 2 !","i_like_none":"Aucun"},"account":{"user_info":{"member_since":"Membre depuis {{since}}","change_avatar":"Changer mon avatar","edit_profile":"Éditer mon profil","view_profile":"Voir mon profil public","logout":"Se déconnecter","male_letter":"H","female_letter":"F","age":"{{age}} ans","subscription_male":"Abonné {{subscription}} ","subscription_female":"Abonnée {{subscription}} ","no_subscription_male":"Non abonné","no_subscription_female":"Non abonnée"},"menu_categories":{"my_account":"Mon compte","my_profile":"Mon profil","my_recommendations":"Mes recommandations"},"account_management":{"title":"Informations du compte","save_button":"Enregistrer"},"profile_management":{"title":"Gestion des profils","age_restriction_title":"Restriction d'accés","delete_title":"Suppression du profil","save":"Enregistrer","delete":"Supprimer","confirm":"Voulez-vous vraiment supprimer ce profil?","field_by_age_category":"• Par catégorie d'âge :","field_by_blacklist":"• Par titres interdits (5 maximum) :","watch_time_restriction":"Limitation de durée de visionnage"},"playback_preferences":{"title":"Mes préférences de lecture","language":"Langue","resolution":"Résolution","auto_play":"Lecture automatique\u0026nbsp;:","night_mode":"Mode nuit","auto_play_message":"Les épisodes s'enchaîneront automatiquement.","green":"J'agis pour la planète en ayant une consommation responsable."},"myinformation":{"title":" Mes informations"},"myprofile":{"title":" Mon profil","username":"Pseudo :","birthdate":"Date de naissance :","last_name":"Nom :","first_name":"Prénom :","email":"Email :","email_address":"Adresse mail du compte :","validate_email":"Valider son email","change_email":"Changer d'email","fake_password":"Mot de passe :","address":"Numéro et rue :","company":"Société :","city":"Ville :","zip_code":"Code postal :","country":"Pays :","change_password":"Modifier mon mot de passe","email_change_subprofile_only":"Pour modifier votre adresse mail, rendez-vous dans l'espace \"Informations du compte\"","sex":"Mon genre :","sex_male":"Homme","sex_female":"Femme","newsletter_label":"J’accepte de recevoir par e-mail les offres et newsletters d'informations de ADN","newsletter_partners_label":"Je souhaite également recevoir par e-mail les offres et newsletters d’informations des partenaires de ADN","animeormanga_label":"Je suis fan de :","dvdperyear_label":"Nombre de DVD/Blu-ray que j'achète par an ?","mangaperyear_label":"Nombre de manga que j'achète par an ?","alreadysubscriber_label":"J'ai déjà souscrit à une offre légale de VOD (Vidéo à la demande) :","whichsubscription_label":"Si oui, lesquelles ?","whichsubscription_placeholder":"noms des services...","submit_button":"VALIDER","animeormanga_manga":"Manga essentiellement","animeormanga_animation":"Animation japonaise essentiellement","animeormanga_both":"Les deux","peryear_none":"Aucun","peryear_minus":"Moins de {{number}}","peryear_plus":"Plus de {{number}}","alreadysubscriber_yes":"oui","alreadysubscriber_no":"non","invalid_birthdate_message":"Le format de la date de naissance n'est pas bon.","not_old_enough":"La création de compte est réservée aux personnes de plus de 12 ans.","update_profile_error":"Certains champs ne sont pas valides. Veuillez les vérifier et réessayez.","update_profile_success":"Votre compte a été sauvegardé","email_change_need_validation":"Vous devez d'abord valider la modification du profil, afin d'enregister le changement d'email."},"mypublicprofile":{"title":" Mon profil public","visible":"Status du profil :","module1":"Module 1 :","module2":"Module 2 :","module3":"Module 3 :","age":"Affichage de l'age :","sex":"Affichage du genre :","private":"privé","public":"public","info":"Vous avez réglé la visibilité de votre profil sur 'privé' ! Il n'est visible que par vous même.","no_module":"Aucun module","video_viewed":"Dernières vidéos vues","video_rated":"Dernières vidéos notées","video_commented":"Dernières vidéos commentées","background_fake":"Choisir une image","background_label":"Background du profil :","error":"Certains champs ne sont pas valides. Veuillez les vérifier et réessayez.","background_empty":"Vous devez séléctionner un background dans la liste déroulante.","success":"Votre profil est sauvegardé !","save":"sauvegarder"},"myaddresses":{"title":" Mes adresses","no_address":"Aucune Adresse Renseignée","delivery_address":"Adresse de livraison","billing_address":"Adresse de facturation","add_new_address":"Ajouter une adresse","create_new_address":"Créer une nouvelle adresse","edit_address":"Modifier une adresse","choose_address":"Choisir une autre adresse","choose_address_title":"Choisissez une adresse","modify_address":"Modifier","use_delivery_address":"Utiliser l'adresse de livraison","remove_address":"Supprimer","confirm_address":"Valider","update_address_success":"Votre adresse a été sauvegardé","phone":"Tél : ","form":{"firstname":"Prénom","lastname":"Nom","company":"Société","street":"Rue et voie","street_placeholder":"Rue, voie...","city":"Ville","zipcode":"Code postal","country":"Pays","phoneNumber":"Téléphone","more_info":"Plus d'informations","more_info_placeholder":"n° porte, batiment, code, etc...","countries":{"empty":"-","dz":"Algérie","ad":"Andorre","be":"Belgique","fr":"France","de":"Allemagne","at":"Autriche","gp":"Guadeloupe","gy":"Guyane","lu":"Luxembourg","ma":"Maroc","mq":"Martinique","yt":"Mayotte","md":"Monaco","nc":"Nouvelle Calédonie","pf":"Polynésie Française","re":"Réunion","bl":"Saint-Barthélemy","mf":"Saint-Martin","pm":"Saint-Pierre-et-Miquelon","ch":"Suisse","tn":"Tunisie","wf":"Wallis-et-Futuna"}}},"mynotifications":{"title":" Mes notifications","header":"J'aimerais recevoir une alerte par e-mail pour:","submit_button":"SAUVEGARDER"},"mydevices":{"title":"Appareils","application":"Application","device_count":"Nombre d'appareils","last_activity":"Dernière connexion","action":"Action","disconnect":"Déconnecter","disconnect_devices":"Déconnecter les appareils","disconnect_all_devices":"Déconnecter tous les appareils","no_devices":"Aucun appareil connecté"},"mysubscription":{"title":" Mon abonnement","confirm_unsubscribe_title":"Êtes-vous sûr de vouloir vous désabonner ?","confirm_unsubscribe_standard_subscription_content":"En annulant le renouvellement automatique, vous renoncez aux avantages de votre abonnement.","confirm_unsubscribe_loyality_discount_content":"En annulant le renouvellement de votre abonnement, vous renoncez à l'avantage que vous apporte le tarif dégressif.","no_subscription_title":"Aucun abonnement","no_subscription_desc":"Vous n'avez pas d'abonnement ADN en cours.","period":{"monthly":"Par mois","yearly":"Par an"},"current_sub":{"header":"Abonnement en cours","subscriber_since":"Vous êtes abonné depuis {{since}}","name_partners":"Partenaires","renewal_cancelled":"Renouvellement automatique annulé.","end_date":"Votre abonnement actuel est valide jusqu'au","renewal_date":"Cet abonnement sera renouvelé automatiquement le","sub_buttons":{"new_subscription":"Souscrire à un nouvel abonnement ADN","subscribe":"S'abonner à ADN","modify_sub":"Mettre à jour mon abonnement","cancel_sub":"Annuler le renouvellement automatique"}},"loyality_discount":{"popup_cta":"Tarif dégressif ?","popup_title":"Qu'est-ce que c'est ?","popup_content":"Votre fidélité est récompensée !\u003cbr /\u003e Plus vous restez abonné, plus le prix de votre abonnement diminue. Pour en savoir plus, rendez-vous sur la page de \u003ca href='/terms-of-use'\u003enos CGU\u003c/a\u003e.","popup_close":"J'ai compris !"},"next_sub":{"header":"Prochain abonnement","start_date":"Cet abonnement débutera le"},"coupon":{"header":"code promo","button":"ok"},"paybox":{"header":"Mode de paiement","invalid_payment_data":"Carte Bancaire non/plus valide!","creditcard":"Carte Bancaire •••• •••• •••• ","see_paypal":"Voir mon compte Paypal","update_card":"Mettre à jour"},"payments":{"header":"Mes achats","table":{"date":"date","price":"prix","method":"methode de paiement","type":"achat","start_date":"debut de validite","end_date":"fin de validite","invoices":"factures"}},"invoice":{"title":"FACTURE","order_date":"Date d'achat : ","payment_date":"Date de paiement : ","billing_address":"Adresse de facturation","product_header":"Produit","subscription":"Abonnement","monthly_subscription":"mensuel","yearly_subscription":"annuel","price_ht":"Prix HT","price_ttc":"Prix TTC","delivery_price":"Frais de Port","total_ht":"Total (HT)","total_ttc":"Total (TTC)","total":"Total ","payment_method":"Mode de paiement : ","vat_directive":" Application de la TVA du pays du consommateur : directive européenne 2008/8/EC – article 5","company_tel":"Tél","company_fax":"Fax","tva_number":"TVA Intracommunautaire","male":"M.","female":"Mme.","error_message":"Un problème est survenu si ça se reproduit n'hésitez pas à contacter le SAV"}},"subscription":{"title":"Abonnement","confirm_unsubscribe":"Êtes-vous sur de vouloir vous désabonner ?","no_subscription_title":"Aucun abonnement","no_subscription_desc":"Vous n'avez pas d'abonnement ADN en cours.","period":{"monthly":"Par mois","yearly":"Par an"},"current_sub":{"header":"Abonnement en cours","name_partners":"Partenaires","renewal_cancelled":"Renouvellement automatique annulé.","end_date":"Votre abonnement actuel est valide jusqu'au","renewal_date":"Cet abonnement sera renouvelé automatiquement le","sub_buttons":{"new_subscription":"Souscrire à un nouvel abonnement ADN","subscribe":"S'abonner à ADN","modify_sub":"Mettre à jour mon abonnement","cancel_sub":"Annuler le renouvellement automatique"}},"next_sub":{"header":"Prochain abonnement","start_date":"Cet abonnement débutera le"},"coupon":{"header":"code promo","button":"ok"},"paybox":{"header":"Mode de paiement","invalid_payment_data":"Carte Bancaire non/plus valide!","creditcard":"Carte Bancaire •••• •••• •••• ","see_paypal":"Voir mon compte Paypal","update_card":"Mettre à jour"},"payments":{"header":"Mes achats","table":{"date":"date","price":"prix","method":"methode de paiement","type":"achat","start_date":"debut de validite","end_date":"fin de validite","invoices":"factures"}},"invoice":{"title":"FACTURE","order_date":"Date d'achat : ","payment_date":"Date de paiement : ","billing_address":"Adresse de facturation","product_header":"Produit","price_ht":"Prix HT","price_ttc":"Prix TTC","delivery_price":"Frais de Port","total_ht":"Total (HT)","total_ttc":"Total (TTC)","total":"Total ","payment_method":"Mode de paiement : ","vat_directive":" Application de la TVA du pays du consommateur : directive européenne 2008/8/EC – article 5","company_tel":"Tél","company_fax":"Fax","male":"M.","female":"Mme.","error_message":"Un problème est survenu si ça se reproduit n'hésitez pas à contacter le SAV"}},"mydownloads":{"title":" Mes téléchargements","credit_download_link":"Choisir un fichier","credits":"Crédits","credit_number":"Crédit n","download_button":"Télécharger","available":"Disponible : ","no_results":"Vous n'avez pas de crédit de téléchargement. \u003ca href=\"/faq-download\" target=\"_blank\"\u003eEn savoir +\u003c/a\u003e","valid_through":"Valide encore"},"myhistoric":{"title":" Mon historique"},"mywatchlist":{"title":" Ma watchlist"},"security":{"title":"Sécurité du compte","not_subscribed":"Vous devez être abonné pour pouvoir profiter de cette fonctionnalité.","save":"Enregistrer","enable_security":"Sécurité du compte :","enable_security_description":"Le code pin sera demandé pour accéder à votre profil, afin de protéger les données du compte, et pour créer un nouveau profil.","enable_parental_control":"Contrôle parental :","enable_parental_control_description":"Le code pin sera demandé pour changer la catégorie d'âge d'un profil.","info_age_category":"Renseignez le code pin du compte pour modifier la catégorie d’âge du profil.","info_main_profile":"Renseignez le code pin du compte pour accéder à ce profil.","info_new_profile":"Renseignez le code pin du compte pour créer un nouveau profil.","title_two_factor":"Double authentification","secure_account":"Sécurisez davantage votre compte avec la double authentification. Un code à usage unique vous sera envoyé, selon la méthode choisie, par SMS ou par email à chaque tentative de nouvelle connexion sur votre compte ADN.","enable_two_factor_auth":"Activer la double authentification\u0026nbsp;:","sms":"Par SMS","email":"Par email","account_phone":"Numéro de téléphone du compte :","change_phone":"Changer de numéro de téléphone","account_email":"Email du compte :","change_email":"Pour changer d'email, rendez-vous dans l'espace ","change_email_link":"Gestion du compte","2fa_popup_cancel":"Annuler","2fa_popup_next":"Suivant","2fa_popup_header_step1":"Double authentification 1/3","2fa_popup_header_step2":"Double authentification 2/3","2fa_popup_header_step3":"Double authentification 3/3","2fa_popup_step1_message_password":"Pour paramétrer la double authentification sur votre compte, renseignez le mot de passe du compte ADN :","2fa_popup_step1_message_sms":"Renseignez votre n° de téléphone :","2fa_popup_step2_message_sms":"Afin de valider votre numéro, renseignez le code de vérification reçu par SMS :","2fa_popup_step2_message_email":"Afin de valider votre adresse mail, renseignez le code de vérification reçu sur l'email {{email}} :","2fa_popup_step3_message":"Double authentification activée avec succès !","2fa_popup_deactivate":"Pour désactiver la double authentification,\u003cbr/\u003e renseignez le mot de passe du compte ADN :"},"deleteaccount":{"title":" Supprimer mon compte","before_delete":"Avant de supprimer votre compte, \u003cbr /\u003e\u003cbr /\u003e \u003cstrong\u003eAssurez-vous que le renouvellement automatique de votre abonnement est bien annulé.\u003c/strong\u003e","once_deleted":"Une fois supprimé, vous ne pourrez plus accéder à votre \u003cbr /\u003e compte et toutes ses données seront supprimées.","confirm_delete":"Pour confirmer la suppression de votre compte, merci de renseigner votre mot de passe.","old_password":"Mot de passe actuel : ","confirm":"Valider"},"accountdeleted":{"deleted_account":"Suppression de votre compte","account_delete_confirm":"Votre compte a bien été supprimé. ","see_you_adn":"On espère vite vous revoir sur ADN !"},"changepassword":{"change_password":"Modifier mon mot de passe","use_form":"Utilisez le formulaire ci-dessous pour modifier votre mot de passe de votre compte ADN.","new_password":"Nouveau mot de passe : ","confirm_new_password":"Saisissez une seconde fois votre nouveau mot de passe : "},"validatemail":{"header":"VALIDATION DE VOTRE EMAIL","text_p01":"Un email vous a été envoyé à l'adresse ","text_p02":"Suivez les instructions de ce dernier pour valider votre adresse électronique.","button":"J'AI VALIDÉ MON EMAIL","not_validated_yet":"Vous n'avez pas encore validé votre adresse email. Veuillez vérifier votre boite mail et suivre les instructions de l'email envoyé avant de continuer.","resend_button":"Renvoyer l'email de validation"},"emailvalidated":{"header":"VOTRE EMAIL EST MAINTENANT VALIDÉ !","button":"CONTINUER"},"editmail":{"header":"MODIFIER MON ADRESSE EMAIL","text_account":"Utilisez le formulaire ci-dessous pour modifier l'adresse email de votre compte ADN.","text_profile":"Utilisez le formulaire ci-dessous pour modifier l'adresse email de votre profil ADN.","new_email_label":"Nouvelle adresse email :","current_password_label":"Mot de passe actuel :","button":"VALIDER"},"multilists":{"title":" Sélectionnées pour vous"},"moodboard":{"title":" Moodboard"},"surprises":{"title":" Surprises"},"banlist":{"title":"Titres bannis"},"contact_us":{"title":" Nous Contacter"},"logout":{"title":" Déconnexion"},"validatecoupon":{"title":"Ce coupon vous donne accès à :","period":"Durée","activate":"Activer"},"gdpr":{"par_01":"Les informations recueillies sur ce formulaire sont enregistrées par ADN Animation Digital Network pour permettre la création d'un compte. Vous pouvez exercer votre droit d'accès aux données vous concernant et les faire rectifier en vous adressant à ","par_02":"Pour plus d’informations, merci d’accéder à la Charte pour la ","contact_link":"nous contacter","personnal_data_link":"protection des données personnelles","must_accept_to_watch":"Pour accéder au contenu vous devez accepter les cookies du site"}},"profile":{"profile":"Profil de","profile_simple":"Profil","private_profile":"Ce profil est privé.","unauthenticated_profile":"Vous devez être \u003ca href='/login'\u003econnecté\u003c/a\u003e ou \u003ca href='/signup'\u003ecréer un compte\u003c/a\u003e pour voir ce profil.","viewingTime":"Heures \u003cbr /\u003e de visionnage","videoViewed":"Vidéos \u003cbr /\u003e vues","showStarted":"Séries commencées","videoRated":"Vidéos \u003cbr /\u003e notées","averageRating":"Note \u003cbr /\u003e moyenne","comment":"Commentaires","lastVisit":"Dernière visite il y a","video_viewed_list_title":"DERNIÈRES VIDÉOS VUES","video_rated_list_title":"DERNIÈRES VIDÉOS NOTÉES","video_commented_list_title":"DERNIÈRES VIDÉOS COMMENTÉES","video_status_timestamp":"il y a {{date}}","video_list_empty":"Aucune vidéo"},"catalog":{"order":{"title":"Tri : ","new":"les + récents","popular":"les + populaires","alpha":"ordre alphabétique"},"page":{"search_placeholder":"Recherche","content_title":"Catalogue : Animes, Films, OAV et Dramas","content_title_genre":"Animes, Films, OAV et Dramas du genre :","filter_toggle_button":"Filtres","loading_message":"Chargement...","empty_message":"Il n'y a aucun résultat correspondant à vos critères.","load_more":"Afficher plus"},"distribution":{"title":"ANIME EN","label_simulcast":"Simulcast","label_download":"Téléchargement","label_free":"Gratuit"},"type":{"title":"TYPES","label_eps":"Séries","label_mov":"Films","label_long":"Long-métrage","label_short":"Court-métrage","label_oav":"Oav"},"language":{"title":"LANGUES","label_vostfr":"VOSTFR","label_vf":"VF"},"quality":{"title":"QUALITÉ","label_fhd":"HD 1080P","label_hd":"HD 720P"},"age":{"title":"AGES","label_0":"Pour tous","label_10":"10 ans","label_12":"12 ans","label_16":"16 ans","label_18":"18 ans","label_no_restrictions":"Sans restriction"},"sections":{"label_japanese":"Animation japonaise","label_french_belgian":"Animation franco-belge","label_international":"International","label_youth":"Jeunesse"},"genres":{"title":"GENRES","label_arts_martiaux":"Arts Martiaux","label_aventure_action":"Aventure / Action","label_comedie":"Comédie","label_drame":"Drame","label_ecchi_fan_service":"Ecchi / Fan service","label_fantastique_science_fiction":"Fantastique / Science-Fiction","label_heroic_fantasy":"Heroic fantasy","label_historique":"Historique","label_jeunesse":"Jeunesse","label_josei":"Jôsei","label_mecha":"Mecha","label_musical":"Musical","label_nostalgie":"Nostalgie","label_policier_thriller":"Policier / Thriller","label_psychologie":"Psychologie","label_romance":"Romance","label_scolaire":"Scolaire","label_seinen":"Seinen","label_shojo":"Shôjo","label_shonen":"Shônen","label_sport":"Sport","label_violence":"Violence"}},"subscription_page_final":{"header":"Validation de votre commande","felicitation":"Félicitations\u0026nbsp;!","now_subscribe":"Vous êtes maintenant abonné(e) à ADN.","text":"Vous pouvez dès à présent profiter pleinement du catalogue ADN\u0026nbsp;!","title_survey":"Vous avez 30 secondes pour un petit questionnaire ? C’est par ici !","first_question":"Connaissiez-vous ADN ?","second_question":"Aviez-vous déjà pensé à vous abonner ?","third_question":"Quels en ont été les freins ?","four_question":"Quelles autres plateformes de streaming connaissez-vous ?","five_question":"Êtes-vous abonné à une autre plateforme de streaming ?","yes":"Oui","no":"Non","price":"Prix","catalog":"Catalogue","ergonomy":"Ergonomie","nothing":"Aucun","other":"Autre","redirect":"Accéder au site","which":"Laquelle ?"},"subscription_page_payment":{"gcu_label":" En finalisant votre achat, vous vous soumettez aux \u003ca href=\"https://animationdigitalnetwork.com/terms-of-use\" target=\"_blank\"\u003econditions générales d'utilisation\u003c/a\u003e et acceptez l'accès au contenu numérique de la plateforme en renonçant à votre droit de rétractation de 14 jours.","gcu_validation":"Vous devez accepter les Conditions Générales d'Utilisation pour continuer.","subscription_payment_header":"Récapitulatif de votre commande","subscription_payment_title":"Vérifiez que les informations sont exactes et choisissez votre mode de paiement.","commande_title":" Ma commande","button_continue":"Continuer","payments_title":" Mode de paiement","i_have_promo_code":"J'ai un code coupon","valider_coupon":"Valider","payments":{"by_credit_card":"Payez par carte bancaire","by_paypal":"Payez avec Paypal","redirect_info":" Vous serez redirigé vers les serveurs sécurisés de Paypal","pay_price_text":" Payer {{price}}"},"first_period":{"year_zero":"la première année","year_one":"la première année","year_other":"les {{count}} premières années","month_zero":"le premier mois","month_one":"le premier mois","month_other":"les {{count}} premiers mois","day_zero":"le premier jour","day_one":"le premier jour","day_other":"les {{count}} premiers jours"},"subscription_period":{"year_zero":"an","year_one":"an","year_other":"{{count}} ans","month_zero":"mois","month_one":"mois","month_other":"{{count}} mois","week_zero":"semaine","week_one":"semaine","week_other":"{{count}} semaines","day_zero":"jour","day_one":"jour","day_other":"{{count}} jours"},"subscription":{"title_mobile":"Abo. ","title_desktop":"Abonnement ","details":"Détails : ","coupon":"Coupon :","new_subscription_price":"Prix nouvel abonnement","discount":"Réduction ancien abonnement \u003csmall\u003e(au prorata des jours déjà consommés)\u003c/small\u003e","toPay":"Prix de la mise à jour","startDate":"Date d'application de la mise à jour","startDateNow":"Aujourd'hui","total":"Total","free_offer":"offert ","cancel_coupon":"Supprimer","recurring_info":"Puis {{price}} tous les {{period}} à partir du {{date}}.","trial_info":"Période d'essai :","cancel_info":"Vous pouvez annuler le renouvellement automatique à tout moment depuis votre compte ADN. Si vous choisissez Paypal, votre abonnement sera renouvelé 24h avant la fin de la période en cours.","cancel_info_trial":"Vous pouvez annuler le renouvellement automatique à tout moment depuis votre compte ADN. Si vous choisissez Paypal, votre abonnement sera renouvelé 24h avant la fin de la période d'essai."}},"subscription_page_validate_paypal":{"header":"Validation Paypal en cours...","please_wait":"Vérification en cours...","error":"Une erreur pendant la validation de votre paiement s'est produite. Veuillez contacter le service après-vente.","sav_button":"contacter le SAV"},"subscription_page_validate_credit_card":{"header":"Validation carte de crédit en cours...","please_wait":"Vérification en cours...","error":"Une erreur pendant la validation de votre paiement s'est produite. Veuillez contacter le service après-vente.","sav_button":"contacter le SAV"},"vod":{"shareText":"Partager :","insert":"Insérer","by_email":"Par mail","send":"Envoyer"},"send_email":{"title":"Partagez à un ami {{episodeTitle}}","email_label":"Destinataire","email_placeholder":"Adresse email du destinataire","message_label":"Message additionnel (facultatif)","email_incorrect":"Formulaire invalide : Veuillez vérifier les champs du formulaire"},"popup":{"close":"Fermer","send":"Envoyer"},"menu":{"videos":"Vidéos","videos_lowercase":"vidéos","heroes":"Héros","catalogue":"Catalogue","sub_new":"Nouveauté","our_offer":"Notre offre","home":"Accueil","interviews":"Interviews","participate":"Participer","forum":"Forum","suggestions":"Boite à idées","store":"Store","series":"Séries","sub_news":"Nouveautés","news":"News","twitch":"ADN TV+","sabonner":"S'abonner","my_profile":"Mon profil","downloads":"Téléchargement","my_history":"Mon Historique","my_watchlist":"Ma Watchlist","my_subscription":"Mon Abonnement","logout":"Déconnexion","all_shows":"Toutes les séries","change_profile":"Changer de profil","manage_account":"Gérer le compte","manage_profile":"Gérer mon profil","leave_youth_section":"Quitter la section jeunesse","free":"Gratuit"},"history":{"no_results":"Aucun historique"},"ban":{"no_results":"Aucun titre banni"},"footer":{"who_we_are":"Qui sommes-nous ?","you_and_me":" Vous \u0026 nous","faq":"FAQ","contact_us":"Contactez-nous","adn_team":"L'équipe ADN","recruitment":"Recrutement","most_popular_serie":" Séries les plus populaires","most_popular_show":" Anime les plus populaires","navigation":" Navigation","our_offers":"Nos offres","legal":" Légal","terms_of_service":"Conditions générales de vente","legal_notice":"Mentions Légales","privacy":"Charte pour la protection des données personnelles","gdpr_settings":"Paramètres des cookies","copyright":"© 2022 Animationdigitalnetwork.com est un site du groupe Média-Participations opéré par ADN - ANIMATION DIGITAL NETWORK."},"badges":{"episodes":{"text":"ÉPISODES","number":"15 000"},"shows":{"text":"SÉRIES","number":"530"},"films":"FILMS","multisupport":"MULTIPLATEFORME","no_engage":"SANS ENGAGEMENT"},"character_list":{"title":"Personnages clés de"},"show_advanced_metadata":{"title":"Fiche de l'anime : {{title}}","originalTitle":"Titre VO : ","direction":"Réalisation : ","originalWork":"Œuvre originale : ","scriptwriter":"Scénariste : ","music":"Musique : ","production":"Production de la série : ","opening":"Générique d’ouverture : ","ending":"Générique de fin : ","category":"Thèmes principaux : ","release":"Date de 1ère diffusion : ","audience":"Public : ","website":"Site officiel : "},"show_list":{"title":"Anime à voir ensuite","arrow_prev_title":"précédent","arrow_next_title":"suivant","winter":"Hiver","autumn":"Automne","summer":"Été","spring":"Printemps","available_at":"Disponible dans","free":"Gratuit"},"product_list":{"title":" DISPONIBLE SUR LE STORE","buy":"ACHETER","arrow_prev_title":"précédent","arrow_next_title":"suivant"},"comments":{"title":"Avis sur l'animé {{title}}","reply":"Répondre","remove":"Supprimer","anonymous":"Anonyme","validate":"Valider le message","moderate":"Modérer le message","comment_placeholder":"Il n'y a aucun commentaire actuellement. Soyez-le premier à réagir !","adn_team":"L'équipe ADN","confirm_remove":"Voulez-vous vraiment supprimer ce commentaire ?","confirm_moderate":"Raison de la modération (laisser vide pour annuler) ?","confirm_validate":"Raison de la validation (laisser vide pour annuler) ?","no_access":"Vous devez \u003cspan\u003eêtre connecté\u003c/span\u003e pour poster un commentaire","not_available":"Vous ne pouvez pas commenter une série/vidéo non publiée","posted_ago":" Posté il y a {{date}}","post_comment":"Poster un commentaire","reply_comment":"Répondre à {{username}}","write_message":"Rédiger un message :","add_spoiler_tag":"Ajouter une balise spoiler","spoiler_info":"Lors de l'utilisation de la balise spoiler, écrire le commentaire comme suivant : \u003cstrong\u003e[spoiler] votre texte ici [/spoiler]\u003c/strong\u003e","preview_message":"Prévisualisation de votre réponse :","accept_terms":"En postant, vous acceptez de respecter {{link}} .","regulations":"le réglement des commentaires d'ADN","button_cancel":"ANNULER","button_reply":"RÉPONDRE","button_post":"POSTER","load_more":"Charger plus de commentaires"},"time_conversion":{"today":"Aujourd'hui","yesterday":"Hier","tomorrow":"Demain","years":"ans","year":"an","months":"mois","month":"mois","weeks":"semaines","week":"semaine","days":"jours","day":"jour","hours":"H","hour":"H","hourMin":"h","minutes":"min","minute":"min","seconds":"s","second":"s"},"dates":{"mondays":"Lundis","tuesdays":"Mardis","wednesdays":"Mercredis","thursdays":"Jeudis","fridays":"Vendredis","saturdays":"Samedis","sundays":"Dimanches","every":"Tous les","at":"À"},"showlist":{"recommended":"Rien que pour vous","recently_watched":"Reprendre mes séries en cours","manga":"Séries adaptées de manga","simulcast":"Les simulcasts","movie":"Les films","youth_videos":"Top vidéos jeunesses"},"error_page":{"404":"404","500":"500","page_title":"404 - Erreur: 404","page_title500":"500 - Erreur: 500","no_chance":"Pas de chance...","internal_error":"Une erreur s'est produite","return_to_home":"Retour à l'accueil","contact_our_team":"Contacter notre équipe","check_catalogue":"Découvrir notre catalogue","page_unavailable":"Cette page n'est pas disponible dans votre pays","content_unavailable":"Ce contenu n'est pas disponible dans votre pays"},"embedded_page":{"not_available":"Cette vidéo n'est pas/plus disponible.\u003cbr /\u003eRetrouvez toutes nos vidéos \u003ca href='/video'\u003esur notre catalogue\u003c/a\u003e."},"surprise":{"title":"Surprises","first_p":"Vous ne savez pas quoi regarder ?","second_p":"Cliquez sur « GO » et laissez faire le hasard\u0026nbsp;!","go":"GO"},"moodboard":{"first_p":"Sélectionnez 3 humeurs parmi les choix ci-dessous","result":"Résultats :"},"recommendation":{"title":"Sélectionnées pour vous","first_p":"Vous trouverez ici des séries qui pourraient vous plaire.\u003cbr /\u003eNous nous sommes basés sur ce que vous avez déjà visionné pour vous les présenter.","ban":"Supprimer de mes recommandations"},"seo":{"title":"Le site français au service du stream d’animation et anime en vostfr et vf.","description_page":"Animation Digital Network, c’est le meilleur de l’animé en direct du Japon! Découvrez en streaming en VO ou VF : One Piece, Dragon Ball, Naruto, Fairy Tail, Oshi No Ko, Yu-Gi-Oh, L’Attaque des Titans, etc.","keywords":"streaming, VOD, animé, japonais, anime, alternative légale, vidéo à la demande, ADN, vostfr, vostf, vf, vo, replay, manga, version française, version originale, version doublée, dessin animé, gratuit, abonnement","description_homepage":"\u003cb\u003eQuels genres d'animés propose ADN ?\u003c/b\u003e\u003cbr /\u003eADN propose un très large choix d’animés en ligne, disponible en quelques clics seulement. Le manga s’étant aujourd’hui largement démocratisé, c’est ainsi que coexiste une multitude de genres et de sous-genres. Retrouvez, par exemple, le shônen, le fer de lance de l’animation japonaise. Le shôjo quant à lui, vise un public plus féminin. Vous retrouverez également les indémodables mangas de sport, comme \u003ca href='/video/885-hajime-no-ippo-the-fighting'\u003eHajime no Ippo\u003c/a\u003e ou \u003ca href='/video/952-ashita-no-joe'\u003eAshita no Joe 2\u003c/a\u003e, dont le côté initiatique fonctionne toujours à merveille. Mais les animes, c’est aussi une bonne dose d’humour et de bonne humeur, avec le très original \u003ca href='/video/344-assassination-classroom'\u003eAssassination Classroom\u003c/a\u003e, par exemple.\u003cbr /\u003eIl existe aussi des animes orientés pour les plus jeunes. Ils représentent une très bonne porte d’entrée dans le monde des animes en streaming. Vous l’aurez compris, il y en a pour tous les goûts sur ADN.\u003cbr /\u003e\u003cbr /\u003e\u003cb\u003eQuelles sont les possibilités de paramétrage qu'offrent ADN pour les séries et les films disponibles en streaming ?\u003c/b\u003e\u003cbr /\u003ePour une expérience réussie, vous pouvez paramétrer précisément de nombreux critères.  Vous retrouverez vos animés répartis en 3 catégories : simulcast, téléchargement ou visionnage gratuit.\u003cbr /\u003eChoisissez la langue qui vous convient entre animés en VOSTFR ou en VF. Ceux-ci sont disponibles en HD, avec comme qualité 720p et 1080p.\u003cbr /\u003eÉvidemment, l’expérience ADN est complètement personnalisable. Créez ainsi vos propres watchlist, séries coups de cœur et déposez votre avis ou commentaire concernant les séries de votre choix. Plusieurs types d’abonnements sont disponibles selon vos envies, chacun multi-supports.\u003cbr /\u003e\u003cbr /\u003e\u003cb\u003eQuelles sont les têtes d’affiche d'animés en streaming sur ADN ? \u003c/b\u003e\u003cbr /\u003eADN propose quelques-uns des animes incontournables de notre époque et d’avant. Quel que soit le genre, vous retrouverez un certain nombre de classiques. Envie d’un shônen de qualité ? \u003ca href='/video/265-naruto-shippuden'\u003eNaruto Shippuden\u003c/a\u003e, \u003ca href='/video/457-boruto-naruto-next-generations'\u003eBoruto\u003c/a\u003e et \u003ca href='/video?search=One%20piece'\u003eOne piece\u003c/a\u003e en streaming vous attendent sur notre site. ADN, ce sont aussi des oeuvres certes plus anciennes, mais toujours aussi indémodables telles que \u003ca href='/video/851-akira'\u003eAkira\u003c/a\u003e, \u003ca href='/video/582-albator'\u003eAlbator\u003c/a\u003e, \u003ca href='/video/946-cobra'\u003eCobra\u003c/a\u003e, \u003ca href='/video/957-lady-oscar'\u003eLady Oscar\u003c/a\u003e et bien d’autres...\u003cbr /\u003eADN propose également des nouveautés incontournables telles que \u003ca href='/video/912-call-of-the-night'\u003eCall of the Night\u003c/a\u003e, \u003ca href='/video/973-the-eminence-in-shadow'\u003eEminence in Shadow\u003c/a\u003e ou encore \u003ca href='/video/908-my-isekai-life'\u003eMy Isekai Life\u003c/a\u003e.\u003cbr /\u003eSi vous avez une question concernant notre offre, n’hésitez pas à prendre contact avec nous via notre site web, nous nous ferons un plaisir de vous répondre.","description_onboarding":"\u003cb\u003eQuels animes en VF ou en VOSTFR propose ADN ?\u003c/b\u003e\u003cbr /\u003e\u003cbr /\u003eUne multitude de thématiques et d’animes vous attendent sur ADN ! C’est bien simple il y’en a pas tous les goûts, tous les âges, toutes les envies. En premier lieu, retrouvez les incontournables shonen, ces animés avec un fort côté initiatique où le héros progresse en compétence au fur et à mesure de l’aventure. L’amitié, le courage, le dépassement de soi sont des thèmes majeurs de ce type d’animé. Retrouvez donc les grands classiques tels que \u003cb\u003eOne Piece\u003c/b\u003e, L’Attaque des Titans, \u003cb\u003eNaruto\u003c/b\u003e, Death Note, Boruto, Fairy Tail et bien d’autres encore !\u003cbr /\u003eMais ADN, c’est aussi des mangas plus légers, pour passer un bon moment, seul ou avec des amis. Quelques exemples ? Docteur Slump, Tom Sawyer, ou le très original Assassination Classroom sont à dévorer sans attendre.\u003cbr /\u003eÀ l’inverse, vous souhaitez embarquer pour un univers plus sombre, violent voire dérangeant ? The Promised Neverland, Claymore, The Garden of Sinners, Tokyo Ghoul, Goblin Slayer ou Ken le Survivant sont faits pour vous.\u003cbr /\u003eLes animes sont aussi particulièrement développés sur la thématique du sport. Dans cette rubrique, il y en a pour tous les goûts ! Voiture, football américain, volley et bien sûr les incontournables Kuroko's Basket, Captain Tsubasa, Slam Dunk.\u003cbr /\u003eSouvent destinés aux filles (mais pas que !), les shojo nous racontent des histoires d’adolescentes, souvent pleines de rebondissements et de dialogues passionnants. Vous l’avez compris, il y en a littéralement pour tous les goûts sur le site ADN.\u003cbr /\u003e\u003cbr /\u003e\u003cb\u003eComment trouver facilement les mangas Vostfr ou VF ?\u003c/b\u003e\u003cbr /\u003e\u003cbr /\u003eVous souhaitez plonger dans le monde du manga, mais vous n’avez pas de titres précis en tête ? Aucun souci, ADN vous accompagne pour trouver LA perle qui occupera vos soirées. Notre système de filtre vous aide à choisir l’animé idéal.\u003cbr /\u003e\u003cul\u003e\u003cli\u003eAnime en simulcast, téléchargement ou bien gratuit\u003c/li\u003e\u003cli\u003eLes séries, films ou OAV\u003c/li\u003e\u003cli\u003eLa langue de votre animé (VF ou VOSTFR)\u003c/li\u003e\u003cli\u003eLa qualité (720p, 1080p)\u003c/li\u003e\u003cli\u003eLa tranche d’âge ciblé\u003c/li\u003e\u003cli\u003eLe genre (shonen, shojo, seinen,  aventure, comédie, drame...)\u003c/li\u003e\u003c/ul\u003e\u003cbr /\u003eVous l’avez compris, vous avez toutes les cartes en main pour parfaitement choisir l’œuvre qui vous convient. Pour les plus curieux, notre onglet nouveautés vous attend avec les dernières grosses sorties. Au fur et à mesure de vos visionnages, des recommandations personnalisées vous seront proposées, entièrement basées sur vos goûts et vos préférences.\u003cbr /\u003eQue vous soyez friand de \u003cb\u003emanga en vostfr\u003c/b\u003e ou en vf, vous retrouverez l’anime idéal pour vous. Multisupport, le site ADN est tout aussi bien disponible sur tablette, sur ordinateur ou sur votre mobile.","description_catalog_genre":"Animation Digital Network c'est le meilleur de l'animé en direct du Japon ! Découvrez en streaming les animés, films, OAV et dramas dans le genre"},"forum_page":{"forum":"Forum","welcome":"Bienvenue sur le forum d'ADN !","new_topics":"Sujets récents","forum_topics":"Sujets du forum","ago":"Il y a","the":"Le"},"subscription_page":{"page_title":"Anime Japonais - Toutes les offres d'abonnement de  streaming légal manga | ADN","monthly":"Mensuel","yearly":"Annuel","pick_monthly_subscription":"Choisissez votre forfait mensuel !","pick_annual_subscription":"Choisissez votre forfait annuel !","change_anytime":"Sans engagement, il est modifiable à tout moment.","save_money":"Faites des économies sur le total en payant l'année en une fois.","streaming":"Streaming","download":"Download","current_subscription":"Actuellement","month":"mois","year":"an","equal_to":"Équivalent à ","pay_once":"Paiement en une fois","no_limit":"illimités","month_credits":"Crédits de téléchargement par mois\u003csup\u003e1 \u003c/sup\u003e","collection":"Pour collectionner vos séries préférées ou profiter de vos contenus vraiment partout !","loyalty_discount":"Tarif dégressif","loyalty_discount_description":"Le prix de votre abonnement diminue en fonction de votre ancienneté !","multiprofile":"Multiprofil","multiple_devices":"Jusqu'à 4 écrans simultanés","screens":"Accès multi-écrans\u003csup\u003e2 \u003c/sup\u003e","catalog":"Accès à tout le catalogue et aux films","quality":"Haute définition (qualité 1080p)\u003csup\u003e3 \u003c/sup\u003e","language":"Langues : VOSTFR / VF\u003csup\u003e4 \u003c/sup\u003e","adFree":"Pas de publicité","continue":"Continuer","better_than_monthly":"Vous économisez par rapport à l'abonnement mensuel","download_credit":"\u003csup\u003e1 \u003c/sup\u003eLes crédits de téléchargement sont valables sur les séries du catalogue en fonction des droits disponibles. Il n'est pas possible de télécharger à partir des applications.","screens_credit":"\u003csup\u003e2 \u003c/sup\u003eADN est disponible sur la télévision via les applications Android TV, Chromecast et Apple TV, les smartphones et tablettes via les applications Android et iOS et les ordinateurs via internet.","quality_credit":"\u003csup\u003e3 \u003c/sup\u003eLa disponibilité des vidéos en HD dépend de votre FAI (fournisseur d'accès internet) et des capacités de vos appareils. Les contenus ne sont pas tous disponibles en haute définition.","language_credit":"\u003csup\u003e4 \u003c/sup\u003eLes contenus ne sont pas tous disponibles en version française.","learn_more":"Pour en savoir plus, veuillez consulter les \u003ca href='/terms-of-use'\u003econditions d'utilisation.\u003c/a\u003e","coupon_only_available_with_subscription":"Vous ne pourrez pas bénéficier de ce coupon avec cet abonnement. Êtes-vous sur ?","christmas_offer_subtitle":"OFFRE DÉCOUVERTE : 1 MOIS D’ABONNEMENT GRATUIT ! Partageons ensemble l’esprit des fêtes de fin d’année ! Profitez de petits moments de bonheur et de complicité devant vos titres préférés."},"notification_popup":{"header":"S'inscrire aux notifications ?","accept_button":"Oui","decline_button":"Non"},"landing_pages":{"watch_show":"Voir l'anime","show_suggestions":"Si vous aimez visionner les animes en streaming, n’hésitez pas à consulter \u003ca href = '/video'\u003ele catalogue d’ADN\u003c/a\u003e dans lequel nous vous proposons une large sélection de séries."},"forgot_password":{"enter_email":"Veuillez saisir l'adresse e-mail associée à votre compte d'utilisateur. Un code de vérification vous sera adressé. Lorsque vous le recevrez, vous pourrez choisir un nouveau mot de passe","title":"Adresse e-mail : *"},"subscription_auth_page":{"header":"IDENTIFICATION","subheader":"Rejoignez-nous en vous connectant ou en créant un compte ADN","login_header":"Déjà inscrit","login_subheader":"Identifiez-vous ci-dessous","registration_header":"Pas encore inscrit","registration_subheader":"N'attendez plus ! Rejoignez la communauté ADN","registration_button":"Créer un compte","email_validation_subheader":"VOTRE EMAIL DOIT ÊTRE VÉRIFIÉ AVANT TOUT ABONNEMENT"},"subscription_payment_method_updated":{"header":"Mise à jour de votre moyen de paiement","sub_header":"Félicitations","sub_header_box":"Votre moyen de paiement est maintenant à jour.","text":"Vous pouvez dès à présent profiter pleinement du catalogue ADN","button":"Accéder au site"},"forgot_username":{"enter_email":"Veuillez saisir l'adresse e-mail associée à votre compte d'utilisateur. Votre Pseudo vous sera envoyé à cette adresse."},"update_credit_card":{"title":"Mise à jour de votre moyen de paiement","update":"Mettez à jour votre carte bancaire.","fill_new_cc":"Renseignez votre nouvelle carte bancaire","confirm":"Valider","cardholder_name":"Titulaire de la carte","cardholder_placeholder":"Nom Prénom","card_number":"Numéro de carte","card_number_lowercase":"numéro de carte","expiration_date":"Date d'expiration","security_code":"Code de sécurité","secure_page":"Page 100% sécurisée","secure_payment":"Paiement 100% sécurisé","months":"Mois","years":"Année","invalid_cvc":"Le code de sécurité est invalide.","invalid_date":"La date est invalide.","invalid_cc":"Votre numéro de carte de paiement est invalide.","invalid_cardholder":"Le titulaire de la carte est invalide.","authorized_cc":"Seules les cartes VISA, Mastercard et Maestro sont acceptées."},"dummy_page":{"forum_will_comeback_soon":"Le forum sera bientôt de retour...","maintenance":"Maintenance","subscription_maintenance":"Nous sommes désolés mais notre service abonnement est indisponible temporairement. Il sera de nouveau opérationnel ce mardi 27 octobre en début d'après-midi. Merci de votre compréhension et de votre patience."},"avatar_editor":{"avatar_selection":"Sélection de l'avatar","background_not_select":"* Attention, les fonds ne sont\u003cbr /\u003epas sélectionnables avec\u003cbr /\u003eles avatars exclusifs.","background_not_select_mobile":"* Attention, les fonds ne sont pas sélectionnables avec les avatars exclusifs.","available":"Série disponible sur"},"commercial_operation":{"title":"Du 16 au 30 mars\u003cbr /\u003e\u003cspan\u003eL'abonnement streaming mensuel passe à \u003cstrong\u003e1€\u003c/strong\u003e\u003csup\u003e*\u003c/sup\u003e\u003c/span\u003e","subtitle":"* Promotion applicable uniquement sur le 1er mois d'abonnement. Non valable pour les abonnements en cours.","button_title":"J'en profite","currently":"En ce moment*","currentlybis":"En ce moment","period":"* Opération en cours du 14 décembre au 4 janvier","periodbis":"Opération en cours du 16 au 30 mars"},"alert_message":{"tickets_alert":"Suite à un très grand nombre de tickets reçus, des retards dans le traitement des demandes sont à prévoir. Nous faisons notre maximum pour répondre à tous dans les meilleurs délais. Nous vous remercions de votre compréhension."},"registration_success":{"success_message":"Votre création de compte est maintenant finalisée !\u003cbr /\u003eGrâce à votre compte, vous pouvez :","services_message":"Regarder des centaines de vidéos disponibles gratuitement, créer une watchlist, accéder à votre historique, poster des commentaires sur vos séries et vidéos favorites.","access_to":"Accéder au service","experience_message":"Pour une expérience illimitée, avec accès aux applications,\u003cbr /\u003eaux VF et à la HD sans publicités, jetez un coup d'oeil à nos abonnements !"},"what_is_it":{"title":"Qu'est-ce que c'est ?","responsible":"La consommation responsable signifie que :","quality":"La qualité de vos vidéos est configurée en 480p.","auto_read":"La lecture automatique est désactivée.","profile":"Dans votre profil, ces 2 éléments sont donc pré-paramétrés sur ces modes écologiques et un signe distinctif apparaît dans votre avatar.\u003cbr /\u003eNotre planète vous dit merci !","button":"OK"},"watchlist":{"released_ago":"Ajouté il y a {{date}}","video_not_available":"Pas encore disponible","show_not_available":"Cette série n'est plus disponible sur le site","distribution_not_available":"Cette série n'est pas disponible dans votre pays","error":"Connectez-vous !","add":"Ajouter à la watchlist","remove":"Retirer de la watchlist","share_disable":"Ne plus partager","share_enable":"Activez le partage de watchlist","watch":"À voir: ","next":" Prochain: ","next_video_number":"Episode n°  {{number}} ","last":" Dernière sortie: ","view_button":"Voir","no_results":"Ajouter des séries, des films ou des OAV à votre watchlist, pour suivre et partager vos animes favoris.","delete_button":"Supprimer"},"formula":{"title":"Choisissez la formule qui vous plaît !","description":"Mensuel ou annuel ? Avec ou sans option téléchargement ? À vous de choisir !","conditions":"Pour en savoir plus, veuillez consulter les \u003ca href='/terms-of-use'\u003econditions d'utilisation\u003c/a\u003e.","free":{"title":"Gratuit","free_episodes":"Des centaines d'épisodes gratuits","free_episodes_asterisk":"Liste des séries gratuites dispnonible ici :","access_history":"Accès à votre historique et votre watchlist","ads_presence":"Présence de publicités","quality_limit":"Accès limité au 480p","create_account":"Je créé un compte gratuit"},"premium":{"title":"Premium","full_catalog_access":"Accès à tout le catalogue sans restriction","access_full":"Accès à votre historique, votre watchlist et vos recommandations","no_ads":"Aucune publicité","hd_access":"Accès à la HD","hd_access_asterisk":"Les contenus ne sont pas tous disponibles en haute définition.","download_option":"Option téléchargement","download_option_description":"(13 vidéos téléchargeables/mois ou téléchargement illimité/an)","download_option_asterisk":"Les contenus ne sont pas tous disponibles en téléchargement."},"common":{"comments_feature":"Participation aux commentaires","mutiple_devices":"Multi-supports","multiple_devices_description":" (ADN est disponible sur la télévision via les applications Android TV, Apple TV, Chromecast, PS4 et Xbox, les smartphones et tablettes via les applications Android et iOS et les ordinateurs via internet.)","multiprofiles":"Multiprofil","multiple_devices":"Jusqu'à 4 écrans simultanés","language":"VOSTFR/VF","language_asterisk":"En fonction de leur disponibilité.","loyalty_discount":"Tarif dégressif","loyalty_discount_description":"\u003cbr /\u003eLe prix de votre abonnement diminue en fonction de votre ancienneté !"},"price":{"per_month":"{{price}}€/mois","per_year":"{{price}}€/an","economy":"Soit {{price}}€ d'économie","no_engagement":"Sans engagement"},"action":{"create_account":"JE CRÉE UN COMPTE GRATUIT"}},"heroes":{"title":"Les héros","page_title":"ADN | Les Héros des dessin-animés | Anime en streaming VF et VOSTFR"},"banlist":{"text":"Retrouvez ici les titres que vous avez bannis de vos recommandations. Vous pouvez changer d'avis en les supprimant de cette liste.\u003cbr /\u003e\u003cbr /\u003eLes recommandations que vous verrez sur le site seront en partie basées sur cette liste.","remove_button":"Supprimer de la liste"},"livestream":{"ottera":{"header":"Épisodes suivants"}},"new_domain":{"announcement":"Anime Digital Network se transforme en \u003cspan\u003eAnimation Digital Network\u003c/span\u003e !!\u003cbr /\u003ePensez à mettre à jour votre URL.\u003cbr /\u003eNous mettons tout en œuvre pour que vous n'ayez aucun ralentissement ! Merci de votre soutien."},"sondage_popup":{"content":"Parlez-nous de votre relation avec l’univers des anime et tentez de gagner","reward":"1 an d’abonnement","participate":"Je participe !"},"page_title":{"title":"ADN | Anime streaming en VOSTFR et VF"}}}},"initialLocale":"fr","ns":["common"],"userConfig":{"i18n":{"defaultLocale":"fr","locales":["fr","de"],"localeDetection":false},"fallbackLng":{"default":["fr"]},"localePath":"/var/task/i18n/locales","reloadOnPrerender":true,"default":{"i18n":{"defaultLocale":"fr","locales":["fr","de"],"localeDetection":false},"fallbackLng":{"default":["fr"]},"localePath":"/var/task/i18n/locales","reloadOnPrerender":true}}}},"__N_SSP":true},"page":"/video/[show]/[video]","query":{"show":"267-hunter-x-hunter-2011","video":"3533-episode-70"},"buildId":"iyQTl64NN8C5sAy274F3k","isFallback":false,"isExperimentalCompile":false,"gssp":true,"locale":"fr","locales":["fr","de"],"defaultLocale":"fr","scriptLoader":[]}</script>
  <script id="hotjar" data-nscript="afterInteractive">(function (h, o, t, j, a, r) {
      h.hj = h.hj || function () { (h.hj.q = h.hj.q || []).push(arguments) }
      h._hjSettings = { hjid: 2359970, hjsv: 6 };
      a = o.getElementsByTagName('head')[0];
      r = o.createElement('script');
      r.async = 1;
      r.src = t + h._hjSettings.hjid + j + h._hjSettings.hjsv;
      a.appendChild(r)
    })(window, document, 'https://static.hotjar.com/c/hotjar-', '.js?sv=');</script>
  <script id="bcs"
    data-nscript="afterInteractive">window.__symbol_bcs_sirdata_overwrites_it_and_it_breaks_react = window.Symbol</script>
  <script src="https://cache.consentframework.com/js/pa/27993/c/LrSl1/stub" data-cfasync="false"
    referrerpolicy="unsafe-url" type="text/javascript" data-nscript="afterInteractive"></script>
  <script src="https://choices.consentframework.com/js/pa/27993/c/LrSl1/cmp" data-cfasync="false"
    referrerpolicy="unsafe-url" type="text/javascript" data-nscript="afterInteractive"></script>
  <script type="text/javascript" data-cmp-src="" data-nscript="afterInteractive"></script>
  <script src="https://www.google-analytics.com/analytics.js" async="true" data-nscript="afterInteractive"></script>
  <next-route-announcer>
    <p aria-live="assertive" id="__next-route-announcer__" role="alert"
      style="border: 0px; clip: rect(0px, 0px, 0px, 0px); height: 1px; margin: -1px; overflow: hidden; padding: 0px; position: absolute; top: 0px; width: 1px; white-space: nowrap; overflow-wrap: normal;">
    </p>
  </next-route-announcer>
  <script src="//cdn-a.yieldlove.com/yieldlove-bidder.js?animedigitalnetwork.fr" async="true" defer="true"
    type="text/javascript" data-nscript="afterInteractive"></script>
  <script src="//cdn.elasticad.net/native/serve/js/quantx/nativeEmbed.gz.js" async="true" defer="true"
    type="text/javascript" id="quantx-embed-tag" data-nscript="afterInteractive"></script><iframe
    name="__sdcmpapiLocator" style="display: none;"></iframe><iframe name="__tcfapiLocator"
    style="display: none;"></iframe>
  <script data-cmp-src="https://securepubads.g.doubleclick.net/tag/js/gpt.js" data-cmp-vendor="755"
    data-cmp-purpose="1,3,4" data-cmp-purposes-li="2,7,9,10"
    data-cmp-fallback-src="https://pagead2.googlesyndication.com/tag/js/gpt.js" data-cmp-fallback-vendor="755"
    data-cmp-fallback-purposes-li="2,7,9,10" async="" defer="" data-cmp-handled="1"></script>
  <script data-cmp-src="/vendor/ads/interstitiel.min.js" async="" defer="" data-cmp-handled="1"></script>
  <script src="/_next/static/chunks/810-cb10a4ae5a7fa2ae.js"></script>
  <script src="/_next/static/chunks/8915-e5955a54d5fed2da.js"></script>
  <script src="/_next/static/chunks/pages/index-5efe5a4036b770bd.js"></script>
  <script src="/_next/static/chunks/pages/subscribe-66a9d0ec4ce66d12.js"></script>
  <script src="/_next/static/chunks/9674-a92b15f41282fdf3.js"></script>
  <script src="/_next/static/chunks/1886-b6708b1ccf514116.js"></script>
  <script src="/_next/static/chunks/pages/login-d41f518f3ba65d9f.js"></script>
  <script src="/_next/static/chunks/3542-dad9f0e4c53e3582.js"></script>
  <script src="/_next/static/chunks/pages/video/%5Bshow%5D-d4cbff5a9a347df6.js"></script>
  <script src="/_next/static/chunks/1228-876948f3a681bc07.js"></script>
  <script src="/_next/static/chunks/1890-1f16143645f13c9a.js"></script>
  <script src="/_next/static/chunks/pages/video-8ef36a41d24e13c8.js"></script>
  <script src="/_next/static/chunks/pages/new-on-adn-38f18febe4ddacbd.js"></script>
  <script src="/_next/static/chunks/4376-283f5664401d0749.js"></script>
  <script src="/_next/static/chunks/pages/live-93f49a6cdfeb74c4.js"></script>
  <div id="sd-cmp" class="sd-cmp-1EpGs sd-cmp-ziEj0"
    style="--background-color: #FFFFFF; --main-color: #202942; --title-color: #202942; --text-color: #8492A6; --border-color: #F0F0F0; --overlay-color: #F9F9F9; --background-color-dark: #FFFFFF; --main-color-dark: #202942; --title-color-dark: #202942; --text-color-dark: #8492A6; --border-color-dark: #F0F0F0; --overlay-color-dark: #F9F9F9; --border-radius: 24px; --font-family: Helvetica; --font-family-title: Helvetica; --provider-logo: url(data:image/svg+xml;base64,PHN2ZyBpZD0iTE9HT19CTFVFIiBkYXRhLW5hbWU9IkxPR08gQkxVRSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgdmlld0JveD0iMCAwIDQwMTkuODkgMTc3NS43NiI+PGRlZnM+PHN0eWxlPi5jbHMtMXtmaWxsOm5vbmU7fS5jbHMtMntmaWxsOiM2ZWQyMTY7fS5jbHMtM3tjbGlwLXBhdGg6dXJsKCNjbGlwLXBhdGgpO30uY2xzLTR7ZmlsbDojMjAyOTQyO308L3N0eWxlPjxjbGlwUGF0aCBpZD0iY2xpcC1wYXRoIj48cGF0aCBpZD0iTUFTUVVFIiBjbGFzcz0iY2xzLTEiIGQ9Ik00MDM4LjQyLDE0OCwxNDg4LjcsMTQyLjQyczM1NC4zMiwyNzAuNywzMjkuMzgsODA1YzAsMCwyLjY5LDMxMS42OC0yNTIuNTUsNTgwLjU0bDI0NzIuODktMTQuNzVaIi8+PC9jbGlwUGF0aD48L2RlZnM+PGcgaWQ9IlBBU1RJTExFIj48cGF0aCBjbGFzcz0iY2xzLTIiIGQ9Ik02OS4yNSwxMjE3LjY1YzEyLjkzLDAsMjgsNC40Myw0NS4yNSwxMyw4LjYyLDMuMjQsMTcsNi44LDI1LjA3LDEwLjUyczE3LjQ5LDguMzgsMjguMjksMTMuNzZBNzYwLjQ3LDc2MC40NywwLDAsMCwyNDMsMTI4MHE0Mi43NSwxMiwxMDQuMzQsMTYuOTJjNC4yNywxLjE5LDEwLjIsMS41OSwxNy43NSwxLjU5cTU0LjkzLDMuMzMsOTUuMzYtOS42NnQ2OC0zMi4zNWMxOC4zMS0xNCwzMi41OS0yOS41OCw0Mi43OS00Ni45MWExMzQuNywxMzQuNywwLDAsMCwxOC42Mi01My4zMSw0OC40OSw0OC40OSwwLDAsMSwuNzktOC4xNSw1Miw1MiwwLDAsMCwuODMtOC4wN3EwLTQzLjU0LTI0LjI5LTgwLjg0UTU0MywxMDIzLjc1LDQ5Ny42OSw5OTQuNnEtNDUuMTktMzAuNzItMTA0LjIxLTU1Ljc3VDI3MS40LDg4OS41MXEtNTkuODgtMjIuNjUtMTAzLjUtNTQuMTFUOTUuMTIsNzY1LjA4Yy0zMy4xOC00NC01MS4xOC05MS42OC01NC41NC0xNDMuMTdhODg5LjUxLDg4OS41MSwwLDAsMCwyMy4zLDU5Ni42QTQyLjI4LDQyLjI4LDAsMCwxLDY5LjI1LDEyMTcuNjVaIi8+PHBhdGggY2xhc3M9ImNscy0yIiBkPSJNMTczNi4xNiw3OTAuOWExOTUuNDUsMTk1LjQ1LDAsMCwxLTQ2LjA4LDEwLjQ0LDQzNi40MSw0MzYuNDEsMCwwLDEtNDYsMi40NmMtNy42LDAtMTQuMzYtLjI1LTIwLjI1LS44cy0xMS41OS0uNzktMTctLjc5YTIwNS4yNywyMDUuMjcsMCwwLDAtMzIuMzUsMy4xN2MtMTIuOSwyLjEzLTI3LDctNDIsMTQuNjMtMTQsNy41MS0yOC4wOCwxOC00MiwzMS41NnEtMjEsMjAtMzUuNjEsNTUuNzdjLTYuNDQsMTUtMTEuNjIsMzIuODMtMTUuMzQsNTMuMzFzLTUuNjgsNDMuNTktNS42OCw2OS41M1YxMjA4YTMwMi4xOSwzMDIuMTksMCwwLDEtOS43LDc1LjIzLDE5Ny4yMiwxOTcuMjIsMCwwLDEtMzIuMzEsNjguNjZxLTIyLjY4LDMwLjc1LTYwLjYzLDQ5LjM1dC05MywxOC41OVYxMTY0LjI5bC0xLjU4LTExMS41MnEwLTgwLjkxLDIzLjQyLTE1MS4xN1QxMzMwLjM3LDc3OGEzNTIuMzQsMzUyLjM0LDAsMCwxLDExMS41Ny04Mi41OHE2NC43MS0zMC43MSwxNDcuMTMtMzAuNjlBNDAyLjQ4LDQwMi40OCwwLDAsMSwxNjY3LjUsNjcycTM2LjM4LDcuMzgsNjMuODcsMTUuMzVjNy44OCwyLjM3LDE1LjQ3LDQuOSwyMy4xMSw3LjQzQzE2NjYuMTksMjk3LjI5LDEzMTEuOSwwLDg4Ny44MywwLDYwMy40MywwLDM1MC41LDEzMy44OCwxODgsMzQxLjg0YzI5LjI2LTE3LjA5LDU5LjkxLTI5LjI3LDkyLjE5LTM2LDM2LjE1LTcuNTIsNzAuODMtMTAuNzYsMTA0LjM0LTkuNjksOC41NywwLDE0LjUxLjU1LDE3Ljc1LDEuNThRNTA5LDMwNS44Niw1ODEsMzMyLjUxdDExNS42MSw1Ny4zNHEyMi42NSwxNC42NywzNy4xOCwyOC4zMkEzNDguNzIsMzQ4LjcyLDAsMCwxLDc1OCw0NDMuMjhjNy41Niw4LjYyLDE0LDE2LjEzLDE5LjQyLDIyLjYybDMuMjQsNi40OS0zLjI0LDQuODJjLTEwLjc2LDE0LTIyLjExLDI0LjI0LTMzLjkzLDMwLjczYTM3LjgxLDM3LjgxLDAsMCwxLTE3LDguMDcsMTAwLDEwMCwwLDAsMS0xOC41OSwxLjU5LDY1LjA2LDY1LjA2LDAsMCwxLTIxLTMuMjFxLTkuNjktMy4xNS0yMi42Mi04LjA3Yy0xOC40LTguNjItMzYuNjctMTYuNjktNTUtMjQuMjRRNTc3LDQ2OS4xNCw1MzQuMTMsNDU2LjIxdC0xMDQuMy0xNy44YTI1LDI1LDAsMCwxLTYuNDUtLjc5LDI5LjM0LDI5LjM0LDAsMCwwLTYuNTItLjgzcS03MS4xNi0zLjIxLTExNy45NSwyOS4xMS00OC42LDMwLjc1LTU4LjI5LDgwLjg0LTMuMjEsMTYuMi0zLjIsMjIuNjIsMCwzNy4yNywxOS40MSw2M2MxMi45MywxNy4xOSwzMS43MiwzMy40Niw1Ni42LDQ4LjU3cTM1LjQ2LDIxLDgwLDM4LDQ0LjM4LDE3LDg5LjY3LDM0LjhhODY0LjY1LDg2NC42NSwwLDAsMSwxMTkuNjksNTYuNTFxNTYuNTIsMzIuMzIsMTAwLjI0LDc0LjRhMzQyLDM0MiwwLDAsMSw2Ny4wNyw5NC42MXEyNSw1Mi41NiwyMS44MywxMTguODF2MTIuMjNhNzUuNzcsNzUuNzcsMCwwLDEtMS41OCwxMy42OHEtOS43NSw4Mi40Ni00Ny43NywxNDMuMDl0LTkzLDk5LjQzYTM1OC42NiwzNTguNjYsMCwwLDEtMTIwLjQzLDU4LjIycS02NS40NCwxNy42OC0xMjguNTQsMTYuMjJhNTIsNTIsMCwwLDAtMTIuODktMS42NmgtMTNRMjY4LDE0MjgsMTk2LjkyLDE0MDAuNDNjLTE3LjQtNi42NC0zMy4xNC0xMy41My00OC4xMy0yMC40MSwxNTkuMTksMjM4LjU3LDQzMC43MSwzOTUuNzQsNzM5LDM5NS43NCw0OTAuMzUsMCw4ODcuODQtMzk3LjQ4LDg4Ny44NC04ODcuODRhOTAzLjYsOTAzLjYsMCwwLDAtNy43MS0xMTZBMTQ0LDE0NCwwLDAsMSwxNzM2LjE2LDc5MC45Wm0tNjM3Ljc5LDQ5NS42MXEuNzcsMzQuNzcsMi40LDY5LjQ1YzEsMjMuMjYsMi42Niw0NC40Niw0LjgzLDYzLjkxaC05LjdxLTU0LjkzLDAtOTEuMzYtMTguNTl0LTU5LTQ5LjM1YTIwMC41MSwyMDAuNTEsMCwwLDEtMzEuNTEtNjkuNSwzMTkuNjEsMzE5LjYxLDAsMCwxLTguOS03NC40M1Y4NzYuNTdhMzI5Ljc4LDMyOS43OCwwLDAsMSw4LjktNzUuMjMsMTg0LjEzLDE4NC4xMywwLDAsMSwzMS41Mi02OC42NnEyMi41OS0zMC43Miw1OS00OS4yOHQ5MS4zNi0xOC42Nmg5LjY5Yy0yLjE3LDE5LjM3LTMuOCw0MC43My00LjgzLDYzLjgycy0xLjg5LDQ2LjIxLTIuNCw2OC44My0uODQsNDMuODItLjg0LDYzLjgzdjM2MC40NmMwLDIwLC4yOSw0MS41My44NSw2NC43OVptLTUuNy03OTYuMzFhMTIzLjUsMTIzLjUsMCwwLDEtNDIuOCw0My42MlExMDIzLjE5LDU1MCw5OTQuMDcsNTUwcS0yNC4yNywwLTUwLjE1LTEzUTkxOCw1MjIuNDMsOTA0LjM3LDQ5Ny40MWExMDkuOTMsMTA5LjkzLDAsMCwxLTEzLjgyLTU0LjE4YzAtMTkuNDMsNC45Mi0zOC43NiwxNC41Ny01OC4yMkExMjIuODUsMTIyLjg1LDAsMCwxLDk0OCwzNDEuMzVhMTA5LDEwOSwwLDAsMSw1Ny40My0xNi4xOCw5Ni40Miw5Ni40MiwwLDAsMSw0OC40NSwxM2MxOC4zMSw5LjY1LDMxLjgsMjMuMjEsNDAuNDIsNDAuMzlhMTE4LjM3LDExOC4zNywwLDAsMSwxMyw1My4zNHEtLjA3LDI5LjE0LTE0LjY2LDU4LjI2WiIvPjwvZz48ZyBpZD0iREFUQSI+PGcgY2xhc3M9ImNscy0zIj48ZyBpZD0iTEVUVFJFUyI+PHBhdGggY2xhc3M9ImNscy00IiBkPSJNMTcxNS42LDE0NDkuNzRxLTk4LjQ2LDAtMTcwLjA2LTQ1LjV0LTExMS4xMy0xMjkuNzhxLTM5LjU2LTg0LjI3LTM5LjUzLTE5OS4xNSwwLTE3MS41NCw4Ni41Mi0yNzN0MjM0LjItMTAxLjQzcTg2LjUyLDAsMTUyLjkxLDM5LjUzdDk5LjIsMTA4LjE0VjQyMy40MnEwLTQ2LjI1LDQ0Ljc1LTQ2LjI0LDQ2LjI0LDAsNDYuMjQsNDYuMjRWMTQwMC41cTAsNDYuMjYtNDQuNzUsNDYuMjYtNDYuMjMsMC00Ni4yNC00Ni4yNnYtOTguNDVxLTMyLjgyLDY4LjYzLTk5LjIsMTA4LjE2VDE3MTUuNiwxNDQ5Ljc0Wm0xMS45NC03Ni4wOXExMTAuNCwwLDE3Ni03OC4zMXQ2NS42NS0yMjBxMC0xNDEuNy02NS42NS0yMTkuMjh0LTE3Ni03Ny41N3EtMTEwLjM4LDAtMTc1LjI4LDc3LjU3dC02NC44OSwyMTkuMjhxMCwxNDEuNzIsNjQuODksMjIwVDE3MjcuNTQsMTM3My42NVoiLz48cGF0aCBjbGFzcz0iY2xzLTQiIGQ9Ik0yNDM1LjEzLDE0NDcuNTlxLTczLjExLDAtMTMwLjU0LTI4LjM0dC05MS03Ny41N3EtMzMuNTYtNDkuMjUtMzMuNTYtMTEwLjM5LDAtODAuNTcsNDAuMjctMTI2LjA2dDEzNS43NS02NC44OXE5NS40Ny0xOS4zNiwyNjIuNTQtMTkuMzloNDYuMjR2LTUzLjdxMC05OS45NC00MC4yNy0xNDUuNDRUMjQ5Ni4zLDc3Ni4zYTQxMC42NCw0MTAuNjQsMCwwLDAtMTEwLjQsMTQuOTNRMjMzMi4yLDgwNi4xNiwyMjc0LDgzOXEtMjYuODYsMTQuOTQtNDIuNTIuNzV0LTE0LjkyLTM3LjI4cS43NS0yMy4xMywyNC42Mi0zNS4wN0E1MzQuNDgsNTM0LjQ4LDAsMCwxLDIzNjgsNzE1Ljg5cTY1LjY0LTE3LjE2LDEyNi44MS0xNy4xNSwxMzEuMjgsMCwxOTQuNjcsNjcuMTN0NjMuNCwyMDUuODR2NDI2LjY0cTAsNDYuMjYtNDEuNzYsNDYuMjUtNDQuNzksMC00NC43Ny00Ni4yNXYtOTIuNDhxLTI5Ljg0LDY3LjEzLTkwLjI1LDEwNC40MlQyNDM1LjEzLDE0NDcuNTlabTExLjk0LTczLjExcTY0LjEzLDAsMTEyLjYyLTMwLjU3dDc2LjgyLTg0LjI4cTI4LjMyLTUzLjY5LDI4LjM0LTEyMi4zM3YtNDkuMjNIMjYyMC4xcS0xMzQuMjYsMC0yMDkuNTksMTEuOTR0LTEwNS4xNiw0MS43NnEtMjkuODMsMjkuODUtMjkuODQsODIsMCw2Ny4xMyw0Ni4yNCwxMDguOVQyNDQ3LjA3LDEzNzQuNDhaIi8+PHBhdGggY2xhc3M9ImNscy00IiBkPSJNMzIyNC4wOSwxNDQ3LjE5cS0xMjAuODQsMC0xODEuMjYtNjUuNjV0LTYwLjQxLTE4OFY3ODQuODRIMjg3MnEtNDMuMjgsMC00My4yNS0zNy4yOCwwLTM1LjgsNDMuMjUtMzUuODFoMTEwLjM5VjUyNS4yOHEwLTQ2LjI0LDQ2LjI2LTQ2LjI0LDQ0LjczLDAsNDQuNzUsNDYuMjRWNzExLjc1SDMyNzQuOHE0MS43NiwwLDQxLjc4LDM1LjgxLDAsMzcuMjgtNDEuNzgsMzcuMjhIMzA3My40M3YzOTYuODJxMCw5MSwzNy4yOCwxMzguNzN0MTIzLjgzLDQ3LjczcTI5Ljg0LDAsNDkuMjItNi43dDM0LjMyLTYuNzNxMjYuODQsMCwyNi44NSwzNy4zYTUzLjg5LDUzLjg5LDAsMCwxLTUuMjQsMjMuMTFxLTUuMjQsMTEuMTktMTguNjMsMTUuNjdjLTEwLjk1LDQtMjUuODgsNy42OS00NC43NiwxMS4yQTI5MSwyOTEsMCwwLDEsMzIyNC4wOSwxNDQ3LjE5WiIvPjxwYXRoIGNsYXNzPSJjbHMtNCIgZD0iTTM3MDIuMTUsMTQ0Ny41OXEtNzMuMTEsMC0xMzAuNTMtMjguMzR0LTkxLTc3LjU3cS0zMy41NS00OS4yNS0zMy41Ni0xMTAuMzksMC04MC41Nyw0MC4yNy0xMjYuMDZ0MTM1Ljc1LTY0Ljg5cTk1LjQ3LTE5LjM2LDI2Mi41NC0xOS4zOWg0Ni4yNHYtNTMuN3EwLTk5Ljk0LTQwLjI3LTE0NS40NFQzNzYzLjMyLDc3Ni4zYTQxMC41Nyw0MTAuNTcsMCwwLDAtMTEwLjM5LDE0LjkzUTM1OTkuMjIsODA2LjE2LDM1NDEsODM5cS0yNi44NiwxNC45NC00Mi41MS43NXQtMTQuOTMtMzcuMjhxLjc1LTIzLjEzLDI0LjYyLTM1LjA3QTUzNC42NSw1MzQuNjUsMCwwLDEsMzYzNSw3MTUuODlxNjUuNjQtMTcuMTYsMTI2LjgxLTE3LjE1LDEzMS4yOCwwLDE5NC42Nyw2Ny4xM3Q2My40LDIwNS44NHY0MjYuNjRxMCw0Ni4yNi00MS43Niw0Ni4yNS00NC43OSwwLTQ0Ljc3LTQ2LjI1di05Mi40OHEtMjkuODQsNjcuMTMtOTAuMjQsMTA0LjQyVDM3MDIuMTUsMTQ0Ny41OVptMTEuOTQtNzMuMTFxNjQuMTMsMCwxMTIuNjItMzAuNTd0NzYuODItODQuMjhxMjguMzItNTMuNjksMjguMzQtMTIyLjMzdi00OS4yM2gtNDQuNzRxLTEzNC4yOCwwLTIwOS42LDExLjk0dC0xMDUuMTYsNDEuNzZxLTI5Ljg0LDI5Ljg1LTI5LjgzLDgyLDAsNjcuMTMsNDYuMjMsMTA4LjlUMzcxNC4wOSwxMzc0LjQ4WiIvPjwvZz48L2c+PC9nPjwvc3ZnPg==); --provider-logo-dark: url(data:image/svg+xml;base64,PHN2ZyBpZD0iTE9HT19CTFVFIiBkYXRhLW5hbWU9IkxPR08gQkxVRSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgdmlld0JveD0iMCAwIDQwMTkuODkgMTc3NS43NiI+PGRlZnM+PHN0eWxlPi5jbHMtMXtmaWxsOm5vbmU7fS5jbHMtMntmaWxsOiM2ZWQyMTY7fS5jbHMtM3tjbGlwLXBhdGg6dXJsKCNjbGlwLXBhdGgpO30uY2xzLTR7ZmlsbDojMjAyOTQyO308L3N0eWxlPjxjbGlwUGF0aCBpZD0iY2xpcC1wYXRoIj48cGF0aCBpZD0iTUFTUVVFIiBjbGFzcz0iY2xzLTEiIGQ9Ik00MDM4LjQyLDE0OCwxNDg4LjcsMTQyLjQyczM1NC4zMiwyNzAuNywzMjkuMzgsODA1YzAsMCwyLjY5LDMxMS42OC0yNTIuNTUsNTgwLjU0bDI0NzIuODktMTQuNzVaIi8+PC9jbGlwUGF0aD48L2RlZnM+PGcgaWQ9IlBBU1RJTExFIj48cGF0aCBjbGFzcz0iY2xzLTIiIGQ9Ik02OS4yNSwxMjE3LjY1YzEyLjkzLDAsMjgsNC40Myw0NS4yNSwxMyw4LjYyLDMuMjQsMTcsNi44LDI1LjA3LDEwLjUyczE3LjQ5LDguMzgsMjguMjksMTMuNzZBNzYwLjQ3LDc2MC40NywwLDAsMCwyNDMsMTI4MHE0Mi43NSwxMiwxMDQuMzQsMTYuOTJjNC4yNywxLjE5LDEwLjIsMS41OSwxNy43NSwxLjU5cTU0LjkzLDMuMzMsOTUuMzYtOS42NnQ2OC0zMi4zNWMxOC4zMS0xNCwzMi41OS0yOS41OCw0Mi43OS00Ni45MWExMzQuNywxMzQuNywwLDAsMCwxOC42Mi01My4zMSw0OC40OSw0OC40OSwwLDAsMSwuNzktOC4xNSw1Miw1MiwwLDAsMCwuODMtOC4wN3EwLTQzLjU0LTI0LjI5LTgwLjg0UTU0MywxMDIzLjc1LDQ5Ny42OSw5OTQuNnEtNDUuMTktMzAuNzItMTA0LjIxLTU1Ljc3VDI3MS40LDg4OS41MXEtNTkuODgtMjIuNjUtMTAzLjUtNTQuMTFUOTUuMTIsNzY1LjA4Yy0zMy4xOC00NC01MS4xOC05MS42OC01NC41NC0xNDMuMTdhODg5LjUxLDg4OS41MSwwLDAsMCwyMy4zLDU5Ni42QTQyLjI4LDQyLjI4LDAsMCwxLDY5LjI1LDEyMTcuNjVaIi8+PHBhdGggY2xhc3M9ImNscy0yIiBkPSJNMTczNi4xNiw3OTAuOWExOTUuNDUsMTk1LjQ1LDAsMCwxLTQ2LjA4LDEwLjQ0LDQzNi40MSw0MzYuNDEsMCwwLDEtNDYsMi40NmMtNy42LDAtMTQuMzYtLjI1LTIwLjI1LS44cy0xMS41OS0uNzktMTctLjc5YTIwNS4yNywyMDUuMjcsMCwwLDAtMzIuMzUsMy4xN2MtMTIuOSwyLjEzLTI3LDctNDIsMTQuNjMtMTQsNy41MS0yOC4wOCwxOC00MiwzMS41NnEtMjEsMjAtMzUuNjEsNTUuNzdjLTYuNDQsMTUtMTEuNjIsMzIuODMtMTUuMzQsNTMuMzFzLTUuNjgsNDMuNTktNS42OCw2OS41M1YxMjA4YTMwMi4xOSwzMDIuMTksMCwwLDEtOS43LDc1LjIzLDE5Ny4yMiwxOTcuMjIsMCwwLDEtMzIuMzEsNjguNjZxLTIyLjY4LDMwLjc1LTYwLjYzLDQ5LjM1dC05MywxOC41OVYxMTY0LjI5bC0xLjU4LTExMS41MnEwLTgwLjkxLDIzLjQyLTE1MS4xN1QxMzMwLjM3LDc3OGEzNTIuMzQsMzUyLjM0LDAsMCwxLDExMS41Ny04Mi41OHE2NC43MS0zMC43MSwxNDcuMTMtMzAuNjlBNDAyLjQ4LDQwMi40OCwwLDAsMSwxNjY3LjUsNjcycTM2LjM4LDcuMzgsNjMuODcsMTUuMzVjNy44OCwyLjM3LDE1LjQ3LDQuOSwyMy4xMSw3LjQzQzE2NjYuMTksMjk3LjI5LDEzMTEuOSwwLDg4Ny44MywwLDYwMy40MywwLDM1MC41LDEzMy44OCwxODgsMzQxLjg0YzI5LjI2LTE3LjA5LDU5LjkxLTI5LjI3LDkyLjE5LTM2LDM2LjE1LTcuNTIsNzAuODMtMTAuNzYsMTA0LjM0LTkuNjksOC41NywwLDE0LjUxLjU1LDE3Ljc1LDEuNThRNTA5LDMwNS44Niw1ODEsMzMyLjUxdDExNS42MSw1Ny4zNHEyMi42NSwxNC42NywzNy4xOCwyOC4zMkEzNDguNzIsMzQ4LjcyLDAsMCwxLDc1OCw0NDMuMjhjNy41Niw4LjYyLDE0LDE2LjEzLDE5LjQyLDIyLjYybDMuMjQsNi40OS0zLjI0LDQuODJjLTEwLjc2LDE0LTIyLjExLDI0LjI0LTMzLjkzLDMwLjczYTM3LjgxLDM3LjgxLDAsMCwxLTE3LDguMDcsMTAwLDEwMCwwLDAsMS0xOC41OSwxLjU5LDY1LjA2LDY1LjA2LDAsMCwxLTIxLTMuMjFxLTkuNjktMy4xNS0yMi42Mi04LjA3Yy0xOC40LTguNjItMzYuNjctMTYuNjktNTUtMjQuMjRRNTc3LDQ2OS4xNCw1MzQuMTMsNDU2LjIxdC0xMDQuMy0xNy44YTI1LDI1LDAsMCwxLTYuNDUtLjc5LDI5LjM0LDI5LjM0LDAsMCwwLTYuNTItLjgzcS03MS4xNi0zLjIxLTExNy45NSwyOS4xMS00OC42LDMwLjc1LTU4LjI5LDgwLjg0LTMuMjEsMTYuMi0zLjIsMjIuNjIsMCwzNy4yNywxOS40MSw2M2MxMi45MywxNy4xOSwzMS43MiwzMy40Niw1Ni42LDQ4LjU3cTM1LjQ2LDIxLDgwLDM4LDQ0LjM4LDE3LDg5LjY3LDM0LjhhODY0LjY1LDg2NC42NSwwLDAsMSwxMTkuNjksNTYuNTFxNTYuNTIsMzIuMzIsMTAwLjI0LDc0LjRhMzQyLDM0MiwwLDAsMSw2Ny4wNyw5NC42MXEyNSw1Mi41NiwyMS44MywxMTguODF2MTIuMjNhNzUuNzcsNzUuNzcsMCwwLDEtMS41OCwxMy42OHEtOS43NSw4Mi40Ni00Ny43NywxNDMuMDl0LTkzLDk5LjQzYTM1OC42NiwzNTguNjYsMCwwLDEtMTIwLjQzLDU4LjIycS02NS40NCwxNy42OC0xMjguNTQsMTYuMjJhNTIsNTIsMCwwLDAtMTIuODktMS42NmgtMTNRMjY4LDE0MjgsMTk2LjkyLDE0MDAuNDNjLTE3LjQtNi42NC0zMy4xNC0xMy41My00OC4xMy0yMC40MSwxNTkuMTksMjM4LjU3LDQzMC43MSwzOTUuNzQsNzM5LDM5NS43NCw0OTAuMzUsMCw4ODcuODQtMzk3LjQ4LDg4Ny44NC04ODcuODRhOTAzLjYsOTAzLjYsMCwwLDAtNy43MS0xMTZBMTQ0LDE0NCwwLDAsMSwxNzM2LjE2LDc5MC45Wm0tNjM3Ljc5LDQ5NS42MXEuNzcsMzQuNzcsMi40LDY5LjQ1YzEsMjMuMjYsMi42Niw0NC40Niw0LjgzLDYzLjkxaC05LjdxLTU0LjkzLDAtOTEuMzYtMTguNTl0LTU5LTQ5LjM1YTIwMC41MSwyMDAuNTEsMCwwLDEtMzEuNTEtNjkuNSwzMTkuNjEsMzE5LjYxLDAsMCwxLTguOS03NC40M1Y4NzYuNTdhMzI5Ljc4LDMyOS43OCwwLDAsMSw4LjktNzUuMjMsMTg0LjEzLDE4NC4xMywwLDAsMSwzMS41Mi02OC42NnEyMi41OS0zMC43Miw1OS00OS4yOHQ5MS4zNi0xOC42Nmg5LjY5Yy0yLjE3LDE5LjM3LTMuOCw0MC43My00LjgzLDYzLjgycy0xLjg5LDQ2LjIxLTIuNCw2OC44My0uODQsNDMuODItLjg0LDYzLjgzdjM2MC40NmMwLDIwLC4yOSw0MS41My44NSw2NC43OVptLTUuNy03OTYuMzFhMTIzLjUsMTIzLjUsMCwwLDEtNDIuOCw0My42MlExMDIzLjE5LDU1MCw5OTQuMDcsNTUwcS0yNC4yNywwLTUwLjE1LTEzUTkxOCw1MjIuNDMsOTA0LjM3LDQ5Ny40MWExMDkuOTMsMTA5LjkzLDAsMCwxLTEzLjgyLTU0LjE4YzAtMTkuNDMsNC45Mi0zOC43NiwxNC41Ny01OC4yMkExMjIuODUsMTIyLjg1LDAsMCwxLDk0OCwzNDEuMzVhMTA5LDEwOSwwLDAsMSw1Ny40My0xNi4xOCw5Ni40Miw5Ni40MiwwLDAsMSw0OC40NSwxM2MxOC4zMSw5LjY1LDMxLjgsMjMuMjEsNDAuNDIsNDAuMzlhMTE4LjM3LDExOC4zNywwLDAsMSwxMyw1My4zNHEtLjA3LDI5LjE0LTE0LjY2LDU4LjI2WiIvPjwvZz48ZyBpZD0iREFUQSI+PGcgY2xhc3M9ImNscy0zIj48ZyBpZD0iTEVUVFJFUyI+PHBhdGggY2xhc3M9ImNscy00IiBkPSJNMTcxNS42LDE0NDkuNzRxLTk4LjQ2LDAtMTcwLjA2LTQ1LjV0LTExMS4xMy0xMjkuNzhxLTM5LjU2LTg0LjI3LTM5LjUzLTE5OS4xNSwwLTE3MS41NCw4Ni41Mi0yNzN0MjM0LjItMTAxLjQzcTg2LjUyLDAsMTUyLjkxLDM5LjUzdDk5LjIsMTA4LjE0VjQyMy40MnEwLTQ2LjI1LDQ0Ljc1LTQ2LjI0LDQ2LjI0LDAsNDYuMjQsNDYuMjRWMTQwMC41cTAsNDYuMjYtNDQuNzUsNDYuMjYtNDYuMjMsMC00Ni4yNC00Ni4yNnYtOTguNDVxLTMyLjgyLDY4LjYzLTk5LjIsMTA4LjE2VDE3MTUuNiwxNDQ5Ljc0Wm0xMS45NC03Ni4wOXExMTAuNCwwLDE3Ni03OC4zMXQ2NS42NS0yMjBxMC0xNDEuNy02NS42NS0yMTkuMjh0LTE3Ni03Ny41N3EtMTEwLjM4LDAtMTc1LjI4LDc3LjU3dC02NC44OSwyMTkuMjhxMCwxNDEuNzIsNjQuODksMjIwVDE3MjcuNTQsMTM3My42NVoiLz48cGF0aCBjbGFzcz0iY2xzLTQiIGQ9Ik0yNDM1LjEzLDE0NDcuNTlxLTczLjExLDAtMTMwLjU0LTI4LjM0dC05MS03Ny41N3EtMzMuNTYtNDkuMjUtMzMuNTYtMTEwLjM5LDAtODAuNTcsNDAuMjctMTI2LjA2dDEzNS43NS02NC44OXE5NS40Ny0xOS4zNiwyNjIuNTQtMTkuMzloNDYuMjR2LTUzLjdxMC05OS45NC00MC4yNy0xNDUuNDRUMjQ5Ni4zLDc3Ni4zYTQxMC42NCw0MTAuNjQsMCwwLDAtMTEwLjQsMTQuOTNRMjMzMi4yLDgwNi4xNiwyMjc0LDgzOXEtMjYuODYsMTQuOTQtNDIuNTIuNzV0LTE0LjkyLTM3LjI4cS43NS0yMy4xMywyNC42Mi0zNS4wN0E1MzQuNDgsNTM0LjQ4LDAsMCwxLDIzNjgsNzE1Ljg5cTY1LjY0LTE3LjE2LDEyNi44MS0xNy4xNSwxMzEuMjgsMCwxOTQuNjcsNjcuMTN0NjMuNCwyMDUuODR2NDI2LjY0cTAsNDYuMjYtNDEuNzYsNDYuMjUtNDQuNzksMC00NC43Ny00Ni4yNXYtOTIuNDhxLTI5Ljg0LDY3LjEzLTkwLjI1LDEwNC40MlQyNDM1LjEzLDE0NDcuNTlabTExLjk0LTczLjExcTY0LjEzLDAsMTEyLjYyLTMwLjU3dDc2LjgyLTg0LjI4cTI4LjMyLTUzLjY5LDI4LjM0LTEyMi4zM3YtNDkuMjNIMjYyMC4xcS0xMzQuMjYsMC0yMDkuNTksMTEuOTR0LTEwNS4xNiw0MS43NnEtMjkuODMsMjkuODUtMjkuODQsODIsMCw2Ny4xMyw0Ni4yNCwxMDguOVQyNDQ3LjA3LDEzNzQuNDhaIi8+PHBhdGggY2xhc3M9ImNscy00IiBkPSJNMzIyNC4wOSwxNDQ3LjE5cS0xMjAuODQsMC0xODEuMjYtNjUuNjV0LTYwLjQxLTE4OFY3ODQuODRIMjg3MnEtNDMuMjgsMC00My4yNS0zNy4yOCwwLTM1LjgsNDMuMjUtMzUuODFoMTEwLjM5VjUyNS4yOHEwLTQ2LjI0LDQ2LjI2LTQ2LjI0LDQ0LjczLDAsNDQuNzUsNDYuMjRWNzExLjc1SDMyNzQuOHE0MS43NiwwLDQxLjc4LDM1LjgxLDAsMzcuMjgtNDEuNzgsMzcuMjhIMzA3My40M3YzOTYuODJxMCw5MSwzNy4yOCwxMzguNzN0MTIzLjgzLDQ3LjczcTI5Ljg0LDAsNDkuMjItNi43dDM0LjMyLTYuNzNxMjYuODQsMCwyNi44NSwzNy4zYTUzLjg5LDUzLjg5LDAsMCwxLTUuMjQsMjMuMTFxLTUuMjQsMTEuMTktMTguNjMsMTUuNjdjLTEwLjk1LDQtMjUuODgsNy42OS00NC43NiwxMS4yQTI5MSwyOTEsMCwwLDEsMzIyNC4wOSwxNDQ3LjE5WiIvPjxwYXRoIGNsYXNzPSJjbHMtNCIgZD0iTTM3MDIuMTUsMTQ0Ny41OXEtNzMuMTEsMC0xMzAuNTMtMjguMzR0LTkxLTc3LjU3cS0zMy41NS00OS4yNS0zMy41Ni0xMTAuMzksMC04MC41Nyw0MC4yNy0xMjYuMDZ0MTM1Ljc1LTY0Ljg5cTk1LjQ3LTE5LjM2LDI2Mi41NC0xOS4zOWg0Ni4yNHYtNTMuN3EwLTk5Ljk0LTQwLjI3LTE0NS40NFQzNzYzLjMyLDc3Ni4zYTQxMC41Nyw0MTAuNTcsMCwwLDAtMTEwLjM5LDE0LjkzUTM1OTkuMjIsODA2LjE2LDM1NDEsODM5cS0yNi44NiwxNC45NC00Mi41MS43NXQtMTQuOTMtMzcuMjhxLjc1LTIzLjEzLDI0LjYyLTM1LjA3QTUzNC42NSw1MzQuNjUsMCwwLDEsMzYzNSw3MTUuODlxNjUuNjQtMTcuMTYsMTI2LjgxLTE3LjE1LDEzMS4yOCwwLDE5NC42Nyw2Ny4xM3Q2My40LDIwNS44NHY0MjYuNjRxMCw0Ni4yNi00MS43Niw0Ni4yNS00NC43OSwwLTQ0Ljc3LTQ2LjI1di05Mi40OHEtMjkuODQsNjcuMTMtOTAuMjQsMTA0LjQyVDM3MDIuMTUsMTQ0Ny41OVptMTEuOTQtNzMuMTFxNjQuMTMsMCwxMTIuNjItMzAuNTd0NzYuODItODQuMjhxMjguMzItNTMuNjksMjguMzQtMTIyLjMzdi00OS4yM2gtNDQuNzRxLTEzNC4yOCwwLTIwOS42LDExLjk0dC0xMDUuMTYsNDEuNzZxLTI5Ljg0LDI5Ljg1LTI5LjgzLDgyLDAsNjcuMTMsNDYuMjMsMTA4LjlUMzcxNC4wOSwxMzc0LjQ4WiIvPjwvZz48L2c+PC9nPjwvc3ZnPg==); --vh: 10.18px;">
    <div class="sd-cmp-2jVB1"></div>
  </div><iframe id="vXHlK3KO" frameborder="0"
    src="chrome-extension://ekhagklcjbdpajgpjgmbionohlpdbjgc/translateSandbox/translateSandbox.html"
    style="width: 0px; height: 0px; display: none;"></iframe>
</body>

</html>