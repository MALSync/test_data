<html lang="en-US">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="profile" href="https://gmpg.org/xfn/11">
  <link rel="pingback" href="https://manhuaus.com/xmlrpc.php">



  <meta name="robots" content="index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1">

  <!-- This site is optimized with the Yoast SEO plugin v20.5 - https://yoast.com/wordpress/plugins/seo/ -->
  <title>I Became the Tyrant of a Defence Game - MANHUAUS.COM</title>
  <link rel="canonical" href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/">
  <meta property="og:locale" content="en_US">
  <meta property="og:type" content="article">
  <meta property="og:title" content="I Became the Tyrant of a Defence Game - MANHUAUS.COM">
  <meta property="og:description"
    content="I Became the Tyrant of a Defence Game ManhwaThe tower defense &amp; dungeon offense RPG, I watched the ending of the game on a difficulty that no one has cleared yet. But when I woke up, I was inside the game. On top of that, in a tutorial stage that I can’t seem to beat....Continue Reading →">
  <meta property="og:url" content="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/">
  <meta property="og:site_name" content="MANHUAUS.COM">
  <meta property="article:modified_time" content="2024-02-03T11:48:20+00:00">
  <meta property="og:image"
    content="https://manhuaus.com/wp-content/uploads/2022/08/Tyrant-of-the-Tower-Defense-Game.webp">
  <meta property="og:image:width" content="300">
  <meta property="og:image:height" content="435">
  <meta property="og:image:type" content="image/webp">
  <meta name="twitter:card" content="summary_large_image">
  <script type="application/ld+json"
    class="yoast-schema-graph">{"@context":"https://schema.org","@graph":[{"@type":"WebPage","@id":"https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/","url":"https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/","name":"I Became the Tyrant of a Defence Game - MANHUAUS.COM","isPartOf":{"@id":"https://manhuaus.com/#website"},"primaryImageOfPage":{"@id":"https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/#primaryimage"},"image":{"@id":"https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/#primaryimage"},"thumbnailUrl":"https://manhuaus.com/wp-content/uploads/2022/08/Tyrant-of-the-Tower-Defense-Game.webp","datePublished":"2022-08-12T23:59:00+00:00","dateModified":"2024-02-03T11:48:20+00:00","breadcrumb":{"@id":"https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/#primaryimage","url":"https://manhuaus.com/wp-content/uploads/2022/08/Tyrant-of-the-Tower-Defense-Game.webp","contentUrl":"https://manhuaus.com/wp-content/uploads/2022/08/Tyrant-of-the-Tower-Defense-Game.webp","width":300,"height":435},{"@type":"BreadcrumbList","@id":"https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https://manhuaus.com/"},{"@type":"ListItem","position":2,"name":"Manga","item":"https://manhuaus.com/manga/"},{"@type":"ListItem","position":3,"name":"I Became the Tyrant of a Defence Game"}]},{"@type":"WebSite","@id":"https://manhuaus.com/#website","url":"https://manhuaus.com/","name":"MANHUAUS.COM","description":"Read Hot Manga - Manhwa - Manhua English Translation Website Free Update!","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https://manhuaus.com/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"}]}</script>
  <!-- / Yoast SEO plugin. -->


  <link rel="alternate" type="application/rss+xml" title="MANHUAUS.COM » Feed" href="https://manhuaus.com/feed/">
  <link rel="alternate" type="application/rss+xml" title="MANHUAUS.COM » Comments Feed"
    href="https://manhuaus.com/comments/feed/">
  <link rel="alternate" type="application/rss+xml"
    title="MANHUAUS.COM » I Became the Tyrant of a Defence Game Comments Feed"
    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/feed/">
  <script type="text/javascript">
    window._wpemojiSettings = { "baseUrl": "https:\/\/s.w.org\/images\/core\/emoji\/14.0.0\/72x72\/", "ext": ".png", "svgUrl": "https:\/\/s.w.org\/images\/core\/emoji\/14.0.0\/svg\/", "svgExt": ".svg", "source": { "concatemoji": "https:\/\/manhuaus.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=6.3.3" } };
    /*! This file is auto-generated */
    !function (i, n) { var o, s, e; function c(e) { try { var t = { supportTests: e, timestamp: (new Date).valueOf() }; sessionStorage.setItem(o, JSON.stringify(t)) } catch (e) { } } function p(e, t, n) { e.clearRect(0, 0, e.canvas.width, e.canvas.height), e.fillText(t, 0, 0); var t = new Uint32Array(e.getImageData(0, 0, e.canvas.width, e.canvas.height).data), r = (e.clearRect(0, 0, e.canvas.width, e.canvas.height), e.fillText(n, 0, 0), new Uint32Array(e.getImageData(0, 0, e.canvas.width, e.canvas.height).data)); return t.every(function (e, t) { return e === r[t] }) } function u(e, t, n) { switch (t) { case "flag": return n(e, "\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f", "\ud83c\udff3\ufe0f\u200b\u26a7\ufe0f") ? !1 : !n(e, "\ud83c\uddfa\ud83c\uddf3", "\ud83c\uddfa\u200b\ud83c\uddf3") && !n(e, "\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f", "\ud83c\udff4\u200b\udb40\udc67\u200b\udb40\udc62\u200b\udb40\udc65\u200b\udb40\udc6e\u200b\udb40\udc67\u200b\udb40\udc7f"); case "emoji": return !n(e, "\ud83e\udef1\ud83c\udffb\u200d\ud83e\udef2\ud83c\udfff", "\ud83e\udef1\ud83c\udffb\u200b\ud83e\udef2\ud83c\udfff") }return !1 } function f(e, t, n) { var r = "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? new OffscreenCanvas(300, 150) : i.createElement("canvas"), a = r.getContext("2d", { willReadFrequently: !0 }), o = (a.textBaseline = "top", a.font = "600 32px Arial", {}); return e.forEach(function (e) { o[e] = t(a, e, n) }), o } function t(e) { var t = i.createElement("script"); t.src = e, t.defer = !0, i.head.appendChild(t) } "undefined" != typeof Promise && (o = "wpEmojiSettingsSupports", s = ["flag", "emoji"], n.supports = { everything: !0, everythingExceptFlag: !0 }, e = new Promise(function (e) { i.addEventListener("DOMContentLoaded", e, { once: !0 }) }), new Promise(function (t) { var n = function () { try { var e = JSON.parse(sessionStorage.getItem(o)); if ("object" == typeof e && "number" == typeof e.timestamp && (new Date).valueOf() < e.timestamp + 604800 && "object" == typeof e.supportTests) return e.supportTests } catch (e) { } return null }(); if (!n) { if ("undefined" != typeof Worker && "undefined" != typeof OffscreenCanvas && "undefined" != typeof URL && URL.createObjectURL && "undefined" != typeof Blob) try { var e = "postMessage(" + f.toString() + "(" + [JSON.stringify(s), u.toString(), p.toString()].join(",") + "));", r = new Blob([e], { type: "text/javascript" }), a = new Worker(URL.createObjectURL(r), { name: "wpTestEmojiSupports" }); return void (a.onmessage = function (e) { c(n = e.data), a.terminate(), t(n) }) } catch (e) { } c(n = f(s, u, p)) } t(n) }).then(function (e) { for (var t in e) n.supports[t] = e[t], n.supports.everything = n.supports.everything && n.supports[t], "flag" !== t && (n.supports.everythingExceptFlag = n.supports.everythingExceptFlag && n.supports[t]); n.supports.everythingExceptFlag = n.supports.everythingExceptFlag && !n.supports.flag, n.DOMReady = !1, n.readyCallback = function () { n.DOMReady = !0 } }).then(function () { return e }).then(function () { var e; n.supports.everything || (n.readyCallback(), (e = n.source || {}).concatemoji ? t(e.concatemoji) : e.wpemoji && e.twemoji && (t(e.twemoji), t(e.wpemoji))) })) }((window, document), window._wpemojiSettings);
  </script>
  <style type="text/css">
    img.wp-smiley,
    img.emoji {
      display: inline !important;
      border: none !important;
      box-shadow: none !important;
      height: 1em !important;
      width: 1em !important;
      margin: 0 0.07em !important;
      vertical-align: -0.1em !important;
      background: none !important;
      padding: 0 !important;
    }
  </style>
  <link rel="stylesheet" id="wp-block-library-css"
    href="https://manhuaus.com/wp-includes/css/dist/block-library/style.min.css?ver=6.3.3" type="text/css" media="all">
  <style id="wp-block-library-theme-inline-css" type="text/css">
    .wp-block-audio figcaption {
      color: #555;
      font-size: 13px;
      text-align: center
    }

    .is-dark-theme .wp-block-audio figcaption {
      color: hsla(0, 0%, 100%, .65)
    }

    .wp-block-audio {
      margin: 0 0 1em
    }

    .wp-block-code {
      border: 1px solid #ccc;
      border-radius: 4px;
      font-family: Menlo, Consolas, monaco, monospace;
      padding: .8em 1em
    }

    .wp-block-embed figcaption {
      color: #555;
      font-size: 13px;
      text-align: center
    }

    .is-dark-theme .wp-block-embed figcaption {
      color: hsla(0, 0%, 100%, .65)
    }

    .wp-block-embed {
      margin: 0 0 1em
    }

    .blocks-gallery-caption {
      color: #555;
      font-size: 13px;
      text-align: center
    }

    .is-dark-theme .blocks-gallery-caption {
      color: hsla(0, 0%, 100%, .65)
    }

    .wp-block-image figcaption {
      color: #555;
      font-size: 13px;
      text-align: center
    }

    .is-dark-theme .wp-block-image figcaption {
      color: hsla(0, 0%, 100%, .65)
    }

    .wp-block-image {
      margin: 0 0 1em
    }

    .wp-block-pullquote {
      border-bottom: 4px solid;
      border-top: 4px solid;
      color: currentColor;
      margin-bottom: 1.75em
    }

    .wp-block-pullquote cite,
    .wp-block-pullquote footer,
    .wp-block-pullquote__citation {
      color: currentColor;
      font-size: .8125em;
      font-style: normal;
      text-transform: uppercase
    }

    .wp-block-quote {
      border-left: .25em solid;
      margin: 0 0 1.75em;
      padding-left: 1em
    }

    .wp-block-quote cite,
    .wp-block-quote footer {
      color: currentColor;
      font-size: .8125em;
      font-style: normal;
      position: relative
    }

    .wp-block-quote.has-text-align-right {
      border-left: none;
      border-right: .25em solid;
      padding-left: 0;
      padding-right: 1em
    }

    .wp-block-quote.has-text-align-center {
      border: none;
      padding-left: 0
    }

    .wp-block-quote.is-large,
    .wp-block-quote.is-style-large,
    .wp-block-quote.is-style-plain {
      border: none
    }

    .wp-block-search .wp-block-search__label {
      font-weight: 700
    }

    .wp-block-search__button {
      border: 1px solid #ccc;
      padding: .375em .625em
    }

    :where(.wp-block-group.has-background) {
      padding: 1.25em 2.375em
    }

    .wp-block-separator.has-css-opacity {
      opacity: .4
    }

    .wp-block-separator {
      border: none;
      border-bottom: 2px solid;
      margin-left: auto;
      margin-right: auto
    }

    .wp-block-separator.has-alpha-channel-opacity {
      opacity: 1
    }

    .wp-block-separator:not(.is-style-wide):not(.is-style-dots) {
      width: 100px
    }

    .wp-block-separator.has-background:not(.is-style-dots) {
      border-bottom: none;
      height: 1px
    }

    .wp-block-separator.has-background:not(.is-style-wide):not(.is-style-dots) {
      height: 2px
    }

    .wp-block-table {
      margin: 0 0 1em
    }

    .wp-block-table td,
    .wp-block-table th {
      word-break: normal
    }

    .wp-block-table figcaption {
      color: #555;
      font-size: 13px;
      text-align: center
    }

    .is-dark-theme .wp-block-table figcaption {
      color: hsla(0, 0%, 100%, .65)
    }

    .wp-block-video figcaption {
      color: #555;
      font-size: 13px;
      text-align: center
    }

    .is-dark-theme .wp-block-video figcaption {
      color: hsla(0, 0%, 100%, .65)
    }

    .wp-block-video {
      margin: 0 0 1em
    }

    .wp-block-template-part.has-background {
      margin-bottom: 0;
      margin-top: 0;
      padding: 1.25em 2.375em
    }
  </style>
  <style id="classic-theme-styles-inline-css" type="text/css">
    /*! This file is auto-generated */
    .wp-block-button__link {
      color: #fff;
      background-color: #32373c;
      border-radius: 9999px;
      box-shadow: none;
      text-decoration: none;
      padding: calc(.667em + 2px) calc(1.333em + 2px);
      font-size: 1.125em
    }

    .wp-block-file__button {
      background: #32373c;
      color: #fff;
      text-decoration: none
    }
  </style>
  <style id="global-styles-inline-css" type="text/css">
    body {
      --wp--preset--color--black: #000000;
      --wp--preset--color--cyan-bluish-gray: #abb8c3;
      --wp--preset--color--white: #ffffff;
      --wp--preset--color--pale-pink: #f78da7;
      --wp--preset--color--vivid-red: #cf2e2e;
      --wp--preset--color--luminous-vivid-orange: #ff6900;
      --wp--preset--color--luminous-vivid-amber: #fcb900;
      --wp--preset--color--light-green-cyan: #7bdcb5;
      --wp--preset--color--vivid-green-cyan: #00d084;
      --wp--preset--color--pale-cyan-blue: #8ed1fc;
      --wp--preset--color--vivid-cyan-blue: #0693e3;
      --wp--preset--color--vivid-purple: #9b51e0;
      --wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg, rgba(6, 147, 227, 1) 0%, rgb(155, 81, 224) 100%);
      --wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg, rgb(122, 220, 180) 0%, rgb(0, 208, 130) 100%);
      --wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg, rgba(252, 185, 0, 1) 0%, rgba(255, 105, 0, 1) 100%);
      --wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg, rgba(255, 105, 0, 1) 0%, rgb(207, 46, 46) 100%);
      --wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg, rgb(238, 238, 238) 0%, rgb(169, 184, 195) 100%);
      --wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg, rgb(74, 234, 220) 0%, rgb(151, 120, 209) 20%, rgb(207, 42, 186) 40%, rgb(238, 44, 130) 60%, rgb(251, 105, 98) 80%, rgb(254, 248, 76) 100%);
      --wp--preset--gradient--blush-light-purple: linear-gradient(135deg, rgb(255, 206, 236) 0%, rgb(152, 150, 240) 100%);
      --wp--preset--gradient--blush-bordeaux: linear-gradient(135deg, rgb(254, 205, 165) 0%, rgb(254, 45, 45) 50%, rgb(107, 0, 62) 100%);
      --wp--preset--gradient--luminous-dusk: linear-gradient(135deg, rgb(255, 203, 112) 0%, rgb(199, 81, 192) 50%, rgb(65, 88, 208) 100%);
      --wp--preset--gradient--pale-ocean: linear-gradient(135deg, rgb(255, 245, 203) 0%, rgb(182, 227, 212) 50%, rgb(51, 167, 181) 100%);
      --wp--preset--gradient--electric-grass: linear-gradient(135deg, rgb(202, 248, 128) 0%, rgb(113, 206, 126) 100%);
      --wp--preset--gradient--midnight: linear-gradient(135deg, rgb(2, 3, 129) 0%, rgb(40, 116, 252) 100%);
      --wp--preset--font-size--small: 13px;
      --wp--preset--font-size--medium: 20px;
      --wp--preset--font-size--large: 36px;
      --wp--preset--font-size--x-large: 42px;
      --wp--preset--spacing--20: 0.44rem;
      --wp--preset--spacing--30: 0.67rem;
      --wp--preset--spacing--40: 1rem;
      --wp--preset--spacing--50: 1.5rem;
      --wp--preset--spacing--60: 2.25rem;
      --wp--preset--spacing--70: 3.38rem;
      --wp--preset--spacing--80: 5.06rem;
      --wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);
      --wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);
      --wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);
      --wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);
      --wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);
    }

    :where(.is-layout-flex) {
      gap: 0.5em;
    }

    :where(.is-layout-grid) {
      gap: 0.5em;
    }

    body .is-layout-flow>.alignleft {
      float: left;
      margin-inline-start: 0;
      margin-inline-end: 2em;
    }

    body .is-layout-flow>.alignright {
      float: right;
      margin-inline-start: 2em;
      margin-inline-end: 0;
    }

    body .is-layout-flow>.aligncenter {
      margin-left: auto !important;
      margin-right: auto !important;
    }

    body .is-layout-constrained>.alignleft {
      float: left;
      margin-inline-start: 0;
      margin-inline-end: 2em;
    }

    body .is-layout-constrained>.alignright {
      float: right;
      margin-inline-start: 2em;
      margin-inline-end: 0;
    }

    body .is-layout-constrained>.aligncenter {
      margin-left: auto !important;
      margin-right: auto !important;
    }

    body .is-layout-constrained> :where(:not(.alignleft):not(.alignright):not(.alignfull)) {
      max-width: var(--wp--style--global--content-size);
      margin-left: auto !important;
      margin-right: auto !important;
    }

    body .is-layout-constrained>.alignwide {
      max-width: var(--wp--style--global--wide-size);
    }

    body .is-layout-flex {
      display: flex;
    }

    body .is-layout-flex {
      flex-wrap: wrap;
      align-items: center;
    }

    body .is-layout-flex>* {
      margin: 0;
    }

    body .is-layout-grid {
      display: grid;
    }

    body .is-layout-grid>* {
      margin: 0;
    }

    :where(.wp-block-columns.is-layout-flex) {
      gap: 2em;
    }

    :where(.wp-block-columns.is-layout-grid) {
      gap: 2em;
    }

    :where(.wp-block-post-template.is-layout-flex) {
      gap: 1.25em;
    }

    :where(.wp-block-post-template.is-layout-grid) {
      gap: 1.25em;
    }

    .has-black-color {
      color: var(--wp--preset--color--black) !important;
    }

    .has-cyan-bluish-gray-color {
      color: var(--wp--preset--color--cyan-bluish-gray) !important;
    }

    .has-white-color {
      color: var(--wp--preset--color--white) !important;
    }

    .has-pale-pink-color {
      color: var(--wp--preset--color--pale-pink) !important;
    }

    .has-vivid-red-color {
      color: var(--wp--preset--color--vivid-red) !important;
    }

    .has-luminous-vivid-orange-color {
      color: var(--wp--preset--color--luminous-vivid-orange) !important;
    }

    .has-luminous-vivid-amber-color {
      color: var(--wp--preset--color--luminous-vivid-amber) !important;
    }

    .has-light-green-cyan-color {
      color: var(--wp--preset--color--light-green-cyan) !important;
    }

    .has-vivid-green-cyan-color {
      color: var(--wp--preset--color--vivid-green-cyan) !important;
    }

    .has-pale-cyan-blue-color {
      color: var(--wp--preset--color--pale-cyan-blue) !important;
    }

    .has-vivid-cyan-blue-color {
      color: var(--wp--preset--color--vivid-cyan-blue) !important;
    }

    .has-vivid-purple-color {
      color: var(--wp--preset--color--vivid-purple) !important;
    }

    .has-black-background-color {
      background-color: var(--wp--preset--color--black) !important;
    }

    .has-cyan-bluish-gray-background-color {
      background-color: var(--wp--preset--color--cyan-bluish-gray) !important;
    }

    .has-white-background-color {
      background-color: var(--wp--preset--color--white) !important;
    }

    .has-pale-pink-background-color {
      background-color: var(--wp--preset--color--pale-pink) !important;
    }

    .has-vivid-red-background-color {
      background-color: var(--wp--preset--color--vivid-red) !important;
    }

    .has-luminous-vivid-orange-background-color {
      background-color: var(--wp--preset--color--luminous-vivid-orange) !important;
    }

    .has-luminous-vivid-amber-background-color {
      background-color: var(--wp--preset--color--luminous-vivid-amber) !important;
    }

    .has-light-green-cyan-background-color {
      background-color: var(--wp--preset--color--light-green-cyan) !important;
    }

    .has-vivid-green-cyan-background-color {
      background-color: var(--wp--preset--color--vivid-green-cyan) !important;
    }

    .has-pale-cyan-blue-background-color {
      background-color: var(--wp--preset--color--pale-cyan-blue) !important;
    }

    .has-vivid-cyan-blue-background-color {
      background-color: var(--wp--preset--color--vivid-cyan-blue) !important;
    }

    .has-vivid-purple-background-color {
      background-color: var(--wp--preset--color--vivid-purple) !important;
    }

    .has-black-border-color {
      border-color: var(--wp--preset--color--black) !important;
    }

    .has-cyan-bluish-gray-border-color {
      border-color: var(--wp--preset--color--cyan-bluish-gray) !important;
    }

    .has-white-border-color {
      border-color: var(--wp--preset--color--white) !important;
    }

    .has-pale-pink-border-color {
      border-color: var(--wp--preset--color--pale-pink) !important;
    }

    .has-vivid-red-border-color {
      border-color: var(--wp--preset--color--vivid-red) !important;
    }

    .has-luminous-vivid-orange-border-color {
      border-color: var(--wp--preset--color--luminous-vivid-orange) !important;
    }

    .has-luminous-vivid-amber-border-color {
      border-color: var(--wp--preset--color--luminous-vivid-amber) !important;
    }

    .has-light-green-cyan-border-color {
      border-color: var(--wp--preset--color--light-green-cyan) !important;
    }

    .has-vivid-green-cyan-border-color {
      border-color: var(--wp--preset--color--vivid-green-cyan) !important;
    }

    .has-pale-cyan-blue-border-color {
      border-color: var(--wp--preset--color--pale-cyan-blue) !important;
    }

    .has-vivid-cyan-blue-border-color {
      border-color: var(--wp--preset--color--vivid-cyan-blue) !important;
    }

    .has-vivid-purple-border-color {
      border-color: var(--wp--preset--color--vivid-purple) !important;
    }

    .has-vivid-cyan-blue-to-vivid-purple-gradient-background {
      background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;
    }

    .has-light-green-cyan-to-vivid-green-cyan-gradient-background {
      background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;
    }

    .has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background {
      background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;
    }

    .has-luminous-vivid-orange-to-vivid-red-gradient-background {
      background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;
    }

    .has-very-light-gray-to-cyan-bluish-gray-gradient-background {
      background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;
    }

    .has-cool-to-warm-spectrum-gradient-background {
      background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;
    }

    .has-blush-light-purple-gradient-background {
      background: var(--wp--preset--gradient--blush-light-purple) !important;
    }

    .has-blush-bordeaux-gradient-background {
      background: var(--wp--preset--gradient--blush-bordeaux) !important;
    }

    .has-luminous-dusk-gradient-background {
      background: var(--wp--preset--gradient--luminous-dusk) !important;
    }

    .has-pale-ocean-gradient-background {
      background: var(--wp--preset--gradient--pale-ocean) !important;
    }

    .has-electric-grass-gradient-background {
      background: var(--wp--preset--gradient--electric-grass) !important;
    }

    .has-midnight-gradient-background {
      background: var(--wp--preset--gradient--midnight) !important;
    }

    .has-small-font-size {
      font-size: var(--wp--preset--font-size--small) !important;
    }

    .has-medium-font-size {
      font-size: var(--wp--preset--font-size--medium) !important;
    }

    .has-large-font-size {
      font-size: var(--wp--preset--font-size--large) !important;
    }

    .has-x-large-font-size {
      font-size: var(--wp--preset--font-size--x-large) !important;
    }

    .wp-block-navigation a:where(:not(.wp-element-button)) {
      color: inherit;
    }

    :where(.wp-block-post-template.is-layout-flex) {
      gap: 1.25em;
    }

    :where(.wp-block-post-template.is-layout-grid) {
      gap: 1.25em;
    }

    :where(.wp-block-columns.is-layout-flex) {
      gap: 2em;
    }

    :where(.wp-block-columns.is-layout-grid) {
      gap: 2em;
    }

    .wp-block-pullquote {
      font-size: 1.5em;
      line-height: 1.6;
    }
  </style>
  <link rel="stylesheet" id="ct-shortcode-css"
    href="https://manhuaus.com/wp-content/plugins/madara-shortcodes/shortcodes/css/shortcodes.css?ver=6.3.3"
    type="text/css" media="all">
  <link rel="stylesheet" id="bootstrap-css"
    href="https://manhuaus.com/wp-content/themes/madara/css/bootstrap.min.css?ver=4.3.1" type="text/css" media="all">
  <link rel="stylesheet" id="slick-css"
    href="https://manhuaus.com/wp-content/themes/madara/js/slick/slick.css?ver=1.9.0" type="text/css" media="all">
  <link rel="stylesheet" id="slick-theme-css"
    href="https://manhuaus.com/wp-content/themes/madara/js/slick/slick-theme.css?ver=6.3.3" type="text/css" media="all">
  <link rel="stylesheet" id="madara-css-child-css"
    href="https://manhuaus.com/wp-content/themes/madara/style.css?ver=6.3.3" type="text/css" media="all">
  <link rel="stylesheet" id="fontawesome-css"
    href="https://manhuaus.com/wp-content/themes/madara/app/lib/fontawesome/web-fonts-with-css/css/all.min.css?ver=5.15.3"
    type="text/css" media="all">
  <link rel="stylesheet" id="ionicons-css"
    href="https://manhuaus.com/wp-content/themes/madara/css/fonts/ionicons/css/ionicons.min.css?ver=4.5.10"
    type="text/css" media="all">
  <link rel="stylesheet" id="loaders-css"
    href="https://manhuaus.com/wp-content/themes/madara/css/loaders.min.css?ver=6.3.3" type="text/css" media="all">
  <link rel="stylesheet" id="madara-css-css"
    href="https://manhuaus.com/wp-content/themes/madara-child/style.css?ver=1.6.6" type="text/css" media="all">
  <style id="madara-css-inline-css" type="text/css">
    :root {
      --madara-main-color: #eb3349;
    }

    .manga-title-badges.custom {
      background-color: #e54e0d;
    }

    #pageloader .loader-inner.ball-pulse>div,
    #pageloader .loader-inner.ball-pulse-sync>div,
    #pageloader .loader-inner.ball-beat>div,
    #pageloader .loader-inner.ball-grid-pulse>div,
    #pageloader .loader-inner.ball-grid-beat>div,
    #pageloader .loader-inner.ball-pulse-rise>div,
    #pageloader .loader-inner.ball-rotate>div,
    #pageloader .loader-inner.ball-rotate>div:after,
    #pageloader .loader-inner.ball-rotate>div:before,
    #pageloader .loader-inner.cube-transition>div,
    #pageloader .loader-inner.ball-zig-zag>div,
    #pageloader .loader-inner.ball-zig-zag-deflect>div,
    #pageloader .loader-inner.line-scale-party>div,
    #pageloader .loader-inner.line-scale-pulse-out-rapid>div,
    #pageloader .loader-inner.line-scale-pulse-out>div,
    #pageloader .loader-inner.line-scale>div,
    #pageloader .loader-inner.line-spin-fade-loader>div,
    #pageloader .loader-inner.ball-scale>div,
    #pageloader .loader-inner.ball-scale-multiple>div,
    #pageloader .loader-inner.ball-spin-fade-loader>div,
    #pageloader .loader-inner.square-spin>div {
      background-color: #ffffff
    }

    #pageloader .loader-inner.ball-clip-rotate>div {
      border: 2px solid #ffffff;
      border-bottom-color: transparent;
    }

    #pageloader .loader-inner.ball-scale-ripple>div,
    #pageloader .loader-inner.ball-scale-ripple-multiple>div {
      border: 2px solid #ffffff;
    }

    #pageloader .loader-inner.ball-clip-rotate-pulse>div:first-child {
      background: #ffffff;
    }

    #pageloader .loader-inner.ball-clip-rotate-pulse>div:last-child {
      border-color: #ffffff transparent;
    }

    #pageloader .loader-inner.ball-clip-rotate-multiple>div {
      border: 2px solid #ffffff;
      border-bottom-color: transparent;
      border-top-color: transparent;
    }

    #pageloader .loader-inner.triangle-skew-spin>div {
      border-left: 20px solid transparent;
      border-right: 20px solid transparent;
      border-bottom: 20px solid #ffffff;
    }

    #pageloader .loader-inner.ball-triangle-path>div {
      border: 1px solid #ffffff;
    }

    #pageloader .loader-inner.semi-circle-spin>div {
      background-image: linear-gradient(transparent 0, transparent 70%, #ffffff 30%, #ffffff 100%);
    }

    #pageloader.spinners {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 99999;
      background: #ef4546
    }

    p.madara-unyson {
      color: #FF0000;
    }

    .table.table-hover.list-bookmark tr:last-child td {
      text-align: center;
    }

    #adminmenu .wp-submenu li.current {
      display: none !important;
    }

    .show_tgmpa_version {
      float: right;
      padding: 0em 1.5em 0.5em 0;
    }

    .tgmpa>h2 {
      font-size: 23px;
      font-weight: 400;
      line-height: 29px;
      margin: 0;
      padding: 9px 15px 4px 0;
    }

    .update-php {
      width: 100%;
      height: 98%;
      min-height: 850px;
      padding-top: 1px;
    }

    .c-blog-post .entry-content .entry-content_wrap .read-container img.alignleft {
      margin: 10px 30px 10px 0 !important;
    }

    .c-blog-post .entry-content .entry-content_wrap .read-container img.alignright {
      margin: 10px 0px 10px 30px !important;
    }

    .read-container i.fas.fa-spinner.fa-spin {
      font-size: 31px;
      color: #888;
    }

    .c-blog-post .entry-content .entry-content_wrap .read-container img {
      cursor: pointer;
    }

    .choose-avatar .loading-overlay {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.72);
      z-index: 1;
      display: none;
    }

    .choose-avatar .loading-overlay i.fas.fa-spinner {
      font-size: 40px;
      color: #ec3348;
    }

    .choose-avatar .loading-overlay .loading-icon {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }

    .choose-avatar.uploading .loading-overlay {
      display: block;
    }

    .site-header .c-sub-header-nav .entry-header {
      display: none;
      margin-bottom: 15px;
    }

    .site-header .c-sub-header-nav.sticky .entry-header {
      display: block;
    }

    .site-header .c-sub-header-nav.hide-sticky-menu.sticky .c-sub-nav_wrap {
      display: none;
    }

    .site-header .c-sub-header-nav.hide-sticky-menu .entry-header {
      margin-top: 15px;
    }

    @media (max-width: 480px) {
      .c-blog-post .entry-content .entry-content_wrap .reading-content {
        margin-left: -15px;
        margin-right: -15px
      }
    }

    .settings-page table.list-bookmark>tbody tr td>div.mange-name:before {
      content: "Manga Name";
    }

    .settings-page table.list-bookmark>tbody tr td>div.action:before {
      content: "Edit";
    }

    .settings-page table.list-bookmark>tbody tr td>div.post-on:before {
      content: "Updated Time";
    }

    .archive .footer-ads,
    .blog .footer-ads,
    .single-post .footer-ads {
      display: none;
    }

    .single-post .item-content a {
      color: #ca383a;
    }
  </style>
  <script type="text/javascript" src="https://manhuaus.com/wp-includes/js/jquery/jquery.min.js?ver=3.7.0"
    id="jquery-core-js"></script>
  <script type="text/javascript" src="https://manhuaus.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.4.1"
    id="jquery-migrate-js"></script>
  <link rel="https://api.w.org/" href="https://manhuaus.com/wp-json/">
  <link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://manhuaus.com/xmlrpc.php?rsd">
  <meta name="generator" content="WordPress 6.3.3">
  <link rel="shortlink" href="https://manhuaus.com/?p=1355635">
  <link rel="alternate" type="application/json+oembed"
    href="https://manhuaus.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fmanhuaus.com%2Fmanga%2Fi-became-the-tyrant-of-a-defence-game%2F">
  <link rel="alternate" type="text/xml+oembed"
    href="https://manhuaus.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fmanhuaus.com%2Fmanga%2Fi-became-the-tyrant-of-a-defence-game%2F&amp;format=xml">
  <link rel="icon" href="https://manhuaus.com/wp-content/uploads/2020/09/cropped-LOGO1-32x32.png" sizes="32x32">
  <link rel="icon" href="https://manhuaus.com/wp-content/uploads/2020/09/cropped-LOGO1-192x192.png" sizes="192x192">
  <link rel="apple-touch-icon" href="https://manhuaus.com/wp-content/uploads/2020/09/cropped-LOGO1-180x180.png">
  <meta name="msapplication-TileImage"
    content="https://manhuaus.com/wp-content/uploads/2020/09/cropped-LOGO1-270x270.png">
  <style type="text/css" id="wp-custom-css">
    .c-blog-post .entry-content .entry-content_wrap .read-container img {
      margin: 0 auto 0px;
      max-width: 700px;
      border: none;
    }

    .blocks-gallery-grid .blocks-gallery-item {
      margin: 0 16px 0px 0;
    }

    @media (max-width: 600px) {
      body.page.reading-manga .c-page-content .content-area {
        margin-right: -15px;
        margin-left: -15px;
      }

      .c-blog-post .entry-content .entry-content_wrap .read-container img {
        border: none;
      }
    }

    .parent {
      width: 100px;
    }

    img {
      display: block;
      width: 100%;
      height: auto;
    }

    .c-blog-post .entry-content .entry-content_wrap {
      line-height: 0;
    }




    .c-image-hover {
      border-radius: 10px;
    }

    .wp-block-image {
      display: block;
      margin: auto;
    }
  </style>
  <script type="application/ld+json">
						{
							"@context": "http://schema.org",
							"@type": "Article",
							"mainEntityOfPage": {
								"@type": "WebPage",
								"@id": "https://google.com/article"
							},
							"headline": "I Became the Tyrant of a Defence Game",
							"image": {
								"@type": "ImageObject",
								"url": "https://manhuaus.com/wp-content/uploads/2022/08/Tyrant-of-the-Tower-Defense-Game.webp",
								"height": 391,
								"width": 696							},
							"datePublished": "2022-08-12 23:59:00",
							"dateModified": "2024-02-03 11:48:20",
							"author": {
								"@type": "Person",
								"name": "quangphuc"
							},
							"publisher": {
								"@type": "Organization",
								"name": "MANHUAUS.COM",
								"logo": {
									"@type": "ImageObject",
									"url": "https://manhuaus.com/wp-content/uploads/2017/10/logo-web-2.png"
								}
							},
							"description": "I Became the Tyrant of a Defence Game ManhwaThe tower defense &#038; dungeon offense RPG,
I watched the ending of the game on a difficulty that no one has cleared y"
						}
					</script>
  <meta property="og:type" content="article">
  <meta property="og:image"
    content="https://manhuaus.com/wp-content/uploads/2022/08/Tyrant-of-the-Tower-Defense-Game.webp">
  <meta property="og:site_name" content="MANHUAUS.COM">
  <meta property="fb:app_id" content="">
  <meta property="og:title" content="I Became the Tyrant of a Defence Game">
  <meta property="og:url" content="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/">
  <meta property="og:description" content="I Became the Tyrant of a Defence Game ManhwaThe tower defense &amp; dungeon offense RPG,
I watched the ending of the game on a difficulty that no one has cleared y">
  <meta name="twitter:card" content="summary">
  <meta name="twitter:site" content="@MANHUAUS.COM">
  <meta name="twitter:title" content="I Became the Tyrant of a Defence Game">
  <meta name="twitter:description" content="I Became the Tyrant of a Defence Game ManhwaThe tower defense &amp; dungeon offense RPG,
I watched the ending of the game on a difficulty that no one has cleared y">
  <meta name="twitter:url" content="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/">
  <meta name="twitter:image"
    content="https://manhuaus.com/wp-content/uploads/2022/08/Tyrant-of-the-Tower-Defense-Game.webp">
  <meta name="description" content="I Became the Tyrant of a Defence Game ManhwaThe tower defense &amp; dungeon offense RPG,
I watched the ending of the game on a difficulty that no one has cleared y">
  <meta name="generator" content="Powered by Madara - A powerful multi-purpose theme by Madara">

  <meta name="google-site-verification" content="BPzgEWI6cbx7kMMJ6nu9h5kUjEYQKrfyzdtuB4FsXHY">

  <!-- Global site tag (gtag.js) - Google Analytics -->
  <script async="" src="https://www.googletagmanager.com/gtag/js?id=UA-162046339-1"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag() { dataLayer.push(arguments); }
    gtag('js', new Date());

    gtag('config', 'UA-162046339-1');
  </script>


  <script type="text/javascript">
    var infolinks_pid = 3289941;
    var infolinks_wsid = 0;
  </script>
  <script type="text/javascript" src="//resources.infolinks.com/js/infolinks_main.js"></script>


  <script async="" data-cfasync="false" src="https://cdn.pubfuture-ad.com/v2/unit/pt.js"
    type="text/javascript"></script>

  <script
    src="https://manhuaus-com.disqus.com/count-data.js?2=https%3A%2F%2Fmanhuaus.com%2Fmanga%2Fi-became-the-tyrant-of-a-defence-game%2F"></script>
  <script async="" type="text/javascript" src="https://manhuaus-com.disqus.com/count.js"></script>
  <script type="text/javascript" async="" src="https://manhuaus-com.disqus.com/embed.js"></script>
  <script src="https://manhuaus.com/wp-includes/js/wp-emoji-release.min.js?ver=6.3.3" defer=""></script>
  <script src="https://c.disquscdn.com/next/embed/alfie_v4.63f1ab6d6b9d5807dc0c94ef3fe0b851.js" async=""
    charset="UTF-8"></script>
</head>

<body
  class="wp-manga-template-default single single-wp-manga postid-1355635 wp-embed-responsive wp-manga-page manga-page page header-style-1 is-sidebar text-ui-dark minimal-reading-layout">
  <div id="pf-3305-1">
    <script>window.pubfuturetag = window.pubfuturetag || []; window.pubfuturetag.push({ unit: "63bf7c161b082a0027337278", id: "pf-3305-1" })</script>
  </div>
  <div id="pf-4863-1">
    <script>window.pubfuturetag = window.pubfuturetag || []; window.pubfuturetag.push({ unit: "64a82c8e4ecbe9003d425543", id: "pf-4863-1" })</script>
  </div>








  <div class="wrap">
    <div class="body-wrap">
      <header class="site-header">
        <div class="c-header__top">
          <ul class="search-main-menu">
            <li>
              <form id="blog-post-search" class="ajax manga-search-form" action="https://manhuaus.com/" method="get">
                <input type="text" placeholder="Search..." name="s" value=""
                  class="manga-search-field ui-autocomplete-input" autocomplete="off">
                <input type="submit" value="Search">
                <div class="loader-inner line-scale">
                  <div></div>
                  <div></div>
                  <div></div>
                  <div></div>
                  <div></div>
                </div>
                <input type="hidden" name="post_type" value="wp-manga"><input type="hidden" name="post_type"
                  value="wp-manga">
                <ul id="ui-id-1" tabindex="0" class="ui-menu ui-widget ui-widget-content ui-autocomplete ui-front"
                  unselectable="on" style="display: none;"></ul>
              </form>
            </li>
          </ul>
          <div class="main-navigation style-1 ">
            <div class="container ">
              <div class="row">
                <div class="col-md-12">
                  <div class="main-navigation_wrap">
                    <div class="wrap_branding">
                      <a class="logo" href="https://manhuaus.com/" title="MANHUAUS.COM">
                        <img class="img-responsive" src="https://manhuaus.com/wp-content/uploads/2017/10/logo-web-2.png"
                          alt="MANHUAUS.COM">
                      </a>
                    </div>

                    <div class="main-menu">
                      <ul class="nav navbar-nav main-navbar">
                        <li id="menu-item-5197"
                          class="menu-item menu-item-type-post_type menu-item-object-page menu-item-home menu-item-5197">
                          <a href="https://manhuaus.com/">HOME</a></li>
                        <li id="menu-item-1340532"
                          class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1340532"><a
                            href="https://manhuaus.com/home-dark/">HOME DARK</a></li>
                        <li id="menu-item-5199"
                          class="menu-item menu-item-type-post_type menu-item-object-page menu-item-5199"><a
                            href="https://manhuaus.com/contact/">CONTACT US</a></li>
                        <li id="menu-item-1355969"
                          class="menu-item menu-item-type-post_type_archive menu-item-object-wp-manga menu-item-1355969">
                          <a href="https://manhuaus.com/manga/">MANGA</a></li>
                        <li id="menu-item-1355972"
                          class="menu-item menu-item-type-custom menu-item-object-custom menu-item-1355972"><a
                            href="https://manhuaus.com/user-settings/?tab=bookmark">BOOKMARK</a></li>
                      </ul>
                    </div>

                    <div class="search-navigation search-sidebar">

                      <div id="manga-search-17"
                        class="widget col-12 col-md-12   default  no-icon heading-style-1 manga-widget widget-manga-search">
                        <div class="widget__inner manga-widget widget-manga-search__inner c-widget-wrap">
                          <div class="widget-content">
                            <div class="search-navigation__wrap">

                              <script>
                                jQuery(document).ready(function ($) {
                                  if ($('.c-header__top .manga-search-form').length !== 0 && $('.c-header__top .manga-search-form.search-form').length !== 0) {

                                    $('form#blog-post-search').append('<input type="hidden" name="post_type" value="wp-manga">');

                                    $('form#blog-post-search').addClass("manga-search-form");

                                    $('form#blog-post-search input[name="s"]').addClass("manga-search-field");

                                    $('form.manga-search-form.ajax input.manga-search-field').each(function () {

                                      var searchIcon = $(this).parent().children('.ion-ios-search-strong');

                                      var append = $(this).parent();

                                      $(this).autocomplete({
                                        appendTo: append,
                                        source: function (request, resp) {
                                          $.ajax({
                                            url: manga.ajax_url,
                                            type: 'POST',
                                            dataType: 'json',
                                            data: {
                                              action: 'wp-manga-search-manga',
                                              title: request.term,
                                            },
                                            success: function (data) {
                                              resp($.map(data.data, function (item) {
                                                if (true == data.success) {
                                                  return {
                                                    label: item.title,
                                                    value: item.title,
                                                    url: item.url,
                                                    type: item.type
                                                  }
                                                } else {
                                                  return {
                                                    label: item.message,
                                                    value: item.message,
                                                    type: item.type,
                                                    click: false
                                                  }
                                                }
                                              }))
                                            }
                                          });
                                        },
                                        select: function (e, ui) {
                                          if (ui.item.url) {
                                            window.location.href = ui.item.url;
                                          } else {
                                            if (ui.item.click) {
                                              return true;
                                            } else {
                                              return false;
                                            }
                                          }
                                        },
                                        open: function (e, ui) {
                                          var acData = $(this).data('uiAutocomplete');
                                          acData.menu.element.addClass('manga-autocomplete').find('li div').each(function () {
                                            var $self = $(this),
                                              keyword = $.trim(acData.term).split(' ').join('|');
                                            $self.html($self.text().replace(new RegExp("(" + keyword + ")", "gi"), '<span class="manga-text-highlight">$1</span>'));
                                          });
                                        }
                                      }).autocomplete("instance")._renderItem = function (ul, item) {
                                        return $("<li class='search-item'>")
                                          .append("<div class='manga-type-" + item.type + "'>" + item.label + "</div>")
                                          .appendTo(ul);
                                      };
                                    });
                                  }
                                });
                              </script>
                              <ul class="main-menu-search nav-menu">
                                <li class="menu-search">
                                  <a href="javascript:;" class="open-search-main-menu"> <i
                                      class="icon ion-ios-search"></i>
                                    <i class="icon ion-android-close"></i> </a>
                                  <ul class="search-main-menu">
                                    <li>
                                      <form class="manga-search-form search-form ajax" action="https://manhuaus.com/"
                                        method="get">
                                        <input class="manga-search-field ui-autocomplete-input" type="text"
                                          placeholder="Search..." name="s" value="" autocomplete="off">
                                        <input type="hidden" name="post_type" value="wp-manga"> <i
                                          class="icon ion-ios-search"></i>
                                        <div class="loader-inner ball-clip-rotate-multiple">
                                          <div></div>
                                          <div></div>
                                        </div>
                                        <input type="submit" value="Search">
                                        <ul id="ui-id-2" tabindex="0"
                                          class="ui-menu ui-widget ui-widget-content ui-autocomplete ui-front"
                                          unselectable="on" style="display: none;"></ul>
                                      </form>
                                    </li>
                                  </ul>
                                </li>
                              </ul>

                              <div class="link-adv-search">
                                <a href="https://manhuaus.com/?s=&amp;post_type=wp-manga">Advanced</a>
                              </div>

                            </div>

                          </div>
                        </div>
                      </div>
                    </div>
                    <div class="c-togle__menu">
                      <button type="button" class="menu_icon__open">
                        <span></span> <span></span> <span></span>
                      </button>
                    </div>

                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>


        <div class="mobile-menu menu-collapse off-canvas">
          <div class="close-nav">
            <button class="menu_icon__close">
              <span></span> <span></span>
            </button>
          </div>


          <div class="c-modal_item">
            <!-- Button trigger modal -->
            <span class="c-modal_sign-in">
              <a href="#" data-toggle="modal" data-target="#form-login" class="btn-active-modal">Sign in</a>
            </span>

            <span class="c-modal_sign-up">
              <a href="javascript:void(0)" data-toggle="modal" data-target="#form-sign-up" class="btn-active-modal">Sign
                up</a>
            </span>

          </div>


          <nav class="off-menu">
            <ul id="menu-home-menu-1" class="nav navbar-nav main-navbar">
              <li id="nav-menu-item-5197"
                class="main-menu-item menu-item-depth-0 menu-item menu-item-type-post_type menu-item-object-page menu-item-home">
                <a href="https://manhuaus.com/" class="menu-link  main-menu-link">HOME </a></li>
              <li id="nav-menu-item-1340532"
                class="main-menu-item menu-item-depth-0 menu-item menu-item-type-post_type menu-item-object-page"><a
                  href="https://manhuaus.com/home-dark/" class="menu-link  main-menu-link">HOME DARK </a></li>
              <li id="nav-menu-item-5199"
                class="main-menu-item menu-item-depth-0 menu-item menu-item-type-post_type menu-item-object-page"><a
                  href="https://manhuaus.com/contact/" class="menu-link  main-menu-link">CONTACT US </a></li>
              <li id="nav-menu-item-1355969"
                class="main-menu-item menu-item-depth-0 menu-item menu-item-type-post_type_archive menu-item-object-wp-manga">
                <a href="https://manhuaus.com/manga/" class="menu-link  main-menu-link">MANGA </a></li>
              <li id="nav-menu-item-1355972"
                class="main-menu-item menu-item-depth-0 menu-item menu-item-type-custom menu-item-object-custom"><a
                  href="https://manhuaus.com/user-settings/?tab=bookmark" class="menu-link  main-menu-link">BOOKMARK
                </a></li>
            </ul>
          </nav>

          <div class="center"></div>
        </div>
        <div class="clone-header"></div>
        <div class=" c-sub-header-nav with-border  hide-sticky-menu">
          <div class="container ">
            <div class="c-sub-nav_wrap">
              <div class="sub-nav_content">


                <ul class="sub-nav_list list-inline second-menu">
                  <li id="menu-item-5196"
                    class="menu-item menu-item-type-custom menu-item-object-custom menu-item-5196"><a
                      href="https://discord.gg/BbmZB4A">JOIN OUR DISCORD</a></li>
                  <li id="menu-item-1355974"
                    class="menu-item menu-item-type-custom menu-item-object-custom menu-item-1355974"><a
                      href="https://manhuaus.com/user-settings/?tab=bookmark">BOOKMARK</a></li>
                  <li id="menu-item-5202"
                    class="menu-item menu-item-type-post_type menu-item-object-page menu-item-5202"><a
                      href="https://manhuaus.com/user-settings/">User Settings</a></li>

                  <i class="mobile-icon icon ion-md-more"></i>

                </ul>
              </div>

              <div class="c-modal_item">
                <!-- Button trigger modal -->
                <a href="javascript:void(0)" data-toggle="modal" data-target="#form-login" class="btn-active-modal">Sign
                  in</a>
                <a href="javascript:void(0)" data-toggle="modal" data-target="#form-sign-up"
                  class="btn-active-modal">Sign up</a>
              </div>
            </div>

          </div>
        </div>


      </header>




      <div class="site-content">
        <div
          class="post-1355635 wp-manga type-wp-manga status-publish has-post-thumbnail hentry wp-manga-genre-action wp-manga-genre-drama wp-manga-genre-fantasy">
          <div class="profile-manga summary-layout-1"
            style="background-image: url(https://manhuaus.com/wp-content/themes/madara/images/bg-search.jpg);">
            <div class="container">
              <div class="row">
                <div class="col-12 col-sm-12 col-md-12">

                  <div class="c-breadcrumb-wrapper">


                    <div class="c-breadcrumb">
                      <ol class="breadcrumb">
                        <li>
                          <a href="https://manhuaus.com/">
                            Home </a>
                        </li>

                        <li>
                          <a href="https://manhuaus.com/manga-genre/action/">
                            Action </a>
                        </li>

                        <li>
                          <a href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/">
                            I Became the Tyrant of a Defence Game </a>
                        </li>


                      </ol>
                    </div>

                  </div>

                  <div class="post-title">

                    <h1>
                      I Became the Tyrant of a Defence Game </h1>
                  </div>
                  <div class="tab-summary ">
                    <div class="summary_image">
                      <a href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/">
                        <img width="193" height="278"
                          data-src="https://manhuaus.com/wp-content/uploads/2022/08/Tyrant-of-the-Tower-Defense-Game-193x278.webp"
                          data-srcset="https://manhuaus.com/wp-content/uploads/2022/08/Tyrant-of-the-Tower-Defense-Game-193x278.webp 193w, https://manhuaus.com/wp-content/uploads/2022/08/Tyrant-of-the-Tower-Defense-Game-125x180.webp 125w"
                          data-sizes="(max-width: 193px) 100vw, 193px" class="img-responsive effect-fade lazyloaded"
                          src="https://manhuaus.com/wp-content/uploads/2022/08/Tyrant-of-the-Tower-Defense-Game-193x278.webp"
                          style="padding-top:278px;" alt="Tyrant of the Tower Defense Game"
                          sizes="(max-width: 193px) 100vw, 193px"
                          srcset="https://manhuaus.com/wp-content/uploads/2022/08/Tyrant-of-the-Tower-Defense-Game-193x278.webp 193w, https://manhuaus.com/wp-content/uploads/2022/08/Tyrant-of-the-Tower-Defense-Game-125x180.webp 125w">
                      </a>
                    </div>
                    <div class="summary_content_wrap">
                      <div class="summary_content">
                        <div class="post-content">
                          <div class="loader-inner ball-pulse">
                            <div></div>
                            <div></div>
                            <div></div>
                          </div>
                          <div class="post-content_item">
                            <div class="summary-heading">
                              <h5>
                                Rank </h5>
                            </div>
                            <div class="summary-content">
                              N/A, it has 116.6K monthly views </div>
                          </div>
                          <div class="post-content_item">
                            <div class="summary-heading">
                              <h5>
                                Alternative </h5>
                            </div>
                            <div class="summary-content">
                              디펜스 게임의 폭군이 되었다, Tyrant of the Tower Defense Game </div>
                          </div>

                          <div class="post-content_item">
                            <div class="summary-heading">
                              <h5>
                                Genre(s) </h5>
                            </div>
                            <div class="summary-content">
                              <div class="genres-content">
                                <a href="https://manhuaus.com/manga-genre/action/" rel="tag">Action</a>, <a
                                  href="https://manhuaus.com/manga-genre/drama/" rel="tag">Drama</a>, <a
                                  href="https://manhuaus.com/manga-genre/fantasy/" rel="tag">Fantasy</a>
                              </div>
                            </div>
                          </div>



                        </div>
                        <div class="post-status">


                          <div class="post-content_item">
                            <div class="summary-heading">
                              <h5>
                                Status </h5>
                            </div>
                            <div class="summary-content">
                              OnGoing </div>
                          </div>
                          <div class="manga-action">
                            <div class="count-comment">
                              <div class="action_icon">
                                <a href="#manga-discussion"><i class="icon ion-md-chatbubbles"></i></a>
                              </div>
                              <div class="action_detail">
                                <span class="disqus-comment-count"
                                  data-disqus-url="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/">4
                                  Comments</span>
                              </div>
                            </div>
                            <div class="add-bookmark">
                              <div class="action_icon">
                                <script type="text/javascript"> var requireLogin2BookMark = true; </script><a href="#"
                                  class="wp-manga-action-button" data-action="bookmark" data-post="1355635"
                                  data-chapter="" data-page="1" title="Bookmark"><i
                                    class="icon ion-ios-bookmark"></i></a>
                              </div>
                              <div class="action_detail"><span>240 Users bookmarked This</span></div>
                            </div>
                          </div>
                        </div>


                        <div id="init-links" class="nav-links">
                          <a href="#" id="btn-read-last" class="c-btn c-btn_style-1">
                            Read First</a>
                          <a href="#" id="btn-read-first" class="c-btn c-btn_style-1">Read Last</a>
                        </div>

                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="c-page-content style-1">
            <div class="content-area">
              <div class="container">
                <div class="row ">
                  <div class="main-col  col-md-8 col-sm-8">
                    <!-- container & no-sidebar-->
                    <div class="main-col-inner">
                      <div class="c-page">
                        <!-- <div class="c-page__inner"> -->
                        <div class="c-page__content">

                          <div class="c-blog__heading style-2 font-heading">

                            <h2 class="h4">
                              <i class="icon ion-ios-star"></i>
                              Summary
                            </h2>
                          </div>

                          <div class="description-summary">

                            <div class="summary__content show-more">
                              <p>I Became the Tyrant of a Defence Game ManhwaThe tower defense &amp; dungeon offense
                                RPG,<br>
                                I watched the ending of the game on a difficulty that no one has cleared yet.<br>
                                But when I woke up, I was inside the game. On top of that, in a tutorial stage that I
                                can’t seem to beat.<br>
                                “I’ll clear this damned game at all costs…!”<br>
                                디펜스 게임의 폭군이 되었다<br>
                                Tyrant of the Tower Defense Game</p>
                            </div>

                            <div class="c-content-readmore">
                              <span class="btn btn-link content-readmore less" style="display: inline-block;">
                                Show more </span>
                            </div>

                          </div>


                          <div class="c-blog__heading style-2 font-heading">
                            <h2 class="h4">
                              <i class="icon ion-ios-star"></i>
                              LATEST MANGA RELEASES
                            </h2>
                            <a href="#" title="Change Order" class="btn-reverse-order"><i
                                class="icon ion-md-swap"></i></a>
                          </div>
                          <div class="page-content-listing single-page">
                            <div class="listing-chapters_wrap cols-2 show-more show">



                              <ul class="main version-chap no-volumn active">


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-80/">
                                    Chapter 80 </a>

                                  <span class="chapter-release-date">
                                    <i>February 16, 2024</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-79/">
                                    Chapter 79 </a>

                                  <span class="chapter-release-date">
                                    <i>February 16, 2024</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-78/">
                                    Chapter 78 </a>

                                  <span class="chapter-release-date">
                                    <i>February 3, 2024</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-77/">
                                    Chapter 77 </a>

                                  <span class="chapter-release-date">
                                    <i>January 27, 2024</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-76/">
                                    Chapter 76 </a>

                                  <span class="chapter-release-date">
                                    <i>January 27, 2024</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-75/">
                                    Chapter 75 </a>

                                  <span class="chapter-release-date">
                                    <i>January 12, 2024</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-74/">
                                    Chapter 74 </a>

                                  <span class="chapter-release-date">
                                    <i>December 26, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-73/">
                                    Chapter 73 </a>

                                  <span class="chapter-release-date">
                                    <i>December 26, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-72/">
                                    Chapter 72 </a>

                                  <span class="chapter-release-date">
                                    <i>December 18, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-71/">
                                    Chapter 71 </a>

                                  <span class="chapter-release-date">
                                    <i>December 16, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-70/">
                                    Chapter 70 </a>

                                  <span class="chapter-release-date">
                                    <i>December 3, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-69/">
                                    Chapter 69 </a>

                                  <span class="chapter-release-date">
                                    <i>November 19, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-68/">
                                    Chapter 68 </a>

                                  <span class="chapter-release-date">
                                    <i>November 5, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-67/">
                                    Chapter 67 </a>

                                  <span class="chapter-release-date">
                                    <i>November 2, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-66/">
                                    Chapter 66 </a>

                                  <span class="chapter-release-date">
                                    <i>October 28, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-65/">
                                    Chapter 65 </a>

                                  <span class="chapter-release-date">
                                    <i>October 19, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-64/">
                                    Chapter 64 </a>

                                  <span class="chapter-release-date">
                                    <i>October 18, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-63/">
                                    Chapter 63 </a>

                                  <span class="chapter-release-date">
                                    <i>October 11, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-62/">
                                    Chapter 62 </a>

                                  <span class="chapter-release-date">
                                    <i>September 23, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-61/">
                                    Chapter 61 </a>

                                  <span class="chapter-release-date">
                                    <i>September 9, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-60/">
                                    Chapter 60 </a>

                                  <span class="chapter-release-date">
                                    <i>August 29, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-59/">
                                    Chapter 59 </a>

                                  <span class="chapter-release-date">
                                    <i>August 19, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-58/">
                                    Chapter 58 </a>

                                  <span class="chapter-release-date">
                                    <i>August 19, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-57/">
                                    Chapter 57 </a>

                                  <span class="chapter-release-date">
                                    <i>August 8, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-56/">
                                    Chapter 56 </a>

                                  <span class="chapter-release-date">
                                    <i>August 8, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-55/">
                                    Chapter 55 </a>

                                  <span class="chapter-release-date">
                                    <i>August 1, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-54/">
                                    Chapter 54 </a>

                                  <span class="chapter-release-date">
                                    <i>July 20, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-53/">
                                    Chapter 53 </a>

                                  <span class="chapter-release-date">
                                    <i>July 6, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-52/">
                                    Chapter 52 </a>

                                  <span class="chapter-release-date">
                                    <i>June 30, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-51/">
                                    Chapter 51 </a>

                                  <span class="chapter-release-date">
                                    <i>June 25, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-50/">
                                    Chapter 50 </a>

                                  <span class="chapter-release-date">
                                    <i>June 24, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-49/">
                                    Chapter 49 </a>

                                  <span class="chapter-release-date">
                                    <i>June 14, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-48/">
                                    Chapter 48 </a>

                                  <span class="chapter-release-date">
                                    <i>June 14, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-47/">
                                    Chapter 47 </a>

                                  <span class="chapter-release-date">
                                    <i>May 20, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-46/">
                                    Chapter 46 </a>

                                  <span class="chapter-release-date">
                                    <i>May 20, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-45/">
                                    Chapter 45 </a>

                                  <span class="chapter-release-date">
                                    <i>May 10, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-44/">
                                    Chapter 44 </a>

                                  <span class="chapter-release-date">
                                    <i>April 27, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-43/">
                                    Chapter 43 </a>

                                  <span class="chapter-release-date">
                                    <i>April 27, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-42/">
                                    Chapter 42 </a>

                                  <span class="chapter-release-date">
                                    <i>April 13, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-41/">
                                    Chapter 41 </a>

                                  <span class="chapter-release-date">
                                    <i>April 5, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-40/">
                                    Chapter 40 </a>

                                  <span class="chapter-release-date">
                                    <i>April 1, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-39/">
                                    Chapter 39 </a>

                                  <span class="chapter-release-date">
                                    <i>March 21, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-38/">
                                    Chapter 38 </a>

                                  <span class="chapter-release-date">
                                    <i>March 14, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter37/">
                                    Chapter37 </a>

                                  <span class="chapter-release-date">
                                    <i>March 7, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-36/">
                                    Chapter 36 </a>

                                  <span class="chapter-release-date">
                                    <i>February 25, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-35/">
                                    Chapter 35 </a>

                                  <span class="chapter-release-date">
                                    <i>February 18, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-34/">
                                    Chapter 34 </a>

                                  <span class="chapter-release-date">
                                    <i>February 11, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-33/">
                                    Chapter 33 </a>

                                  <span class="chapter-release-date">
                                    <i>February 6, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-32/">
                                    Chapter 32 </a>

                                  <span class="chapter-release-date">
                                    <i>January 28, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-31/">
                                    Chapter 31 </a>

                                  <span class="chapter-release-date">
                                    <i>January 21, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-30/">
                                    Chapter 30 </a>

                                  <span class="chapter-release-date">
                                    <i>January 14, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-29/">
                                    Chapter 29 </a>

                                  <span class="chapter-release-date">
                                    <i>January 7, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-28/">
                                    Chapter 28 </a>

                                  <span class="chapter-release-date">
                                    <i>January 1, 2023</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-27/">
                                    Chapter 27 </a>

                                  <span class="chapter-release-date">
                                    <i>December 26, 2022</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-26/">
                                    Chapter 26 </a>

                                  <span class="chapter-release-date">
                                    <i>December 17, 2022</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-25/">
                                    Chapter 25 </a>

                                  <span class="chapter-release-date">
                                    <i>December 10, 2022</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-24/">
                                    Chapter 24 </a>

                                  <span class="chapter-release-date">
                                    <i>December 3, 2022</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-23/">
                                    Chapter 23 </a>

                                  <span class="chapter-release-date">
                                    <i>November 26, 2022</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-22/">
                                    Chapter 22 </a>

                                  <span class="chapter-release-date">
                                    <i>November 19, 2022</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-21/">
                                    Chapter 21 </a>

                                  <span class="chapter-release-date">
                                    <i>November 12, 2022</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-20/">
                                    Chapter 20 </a>

                                  <span class="chapter-release-date">
                                    <i>November 4, 2022</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-19/">
                                    Chapter 19 </a>

                                  <span class="chapter-release-date">
                                    <i>October 29, 2022</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-18/">
                                    Chapter 18 </a>

                                  <span class="chapter-release-date">
                                    <i>October 22, 2022</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-17/">
                                    Chapter 17 </a>

                                  <span class="chapter-release-date">
                                    <i>October 15, 2022</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-16/">
                                    Chapter 16 </a>

                                  <span class="chapter-release-date">
                                    <i>October 8, 2022</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-15/">
                                    Chapter 15 </a>

                                  <span class="chapter-release-date">
                                    <i>October 1, 2022</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-14/">
                                    Chapter 14 </a>

                                  <span class="chapter-release-date">
                                    <i>September 24, 2022</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-13/">
                                    Chapter 13 </a>

                                  <span class="chapter-release-date">
                                    <i>September 24, 2022</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-12/">
                                    Chapter 12 </a>

                                  <span class="chapter-release-date">
                                    <i>September 17, 2022</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-11/">
                                    Chapter 11 </a>

                                  <span class="chapter-release-date">
                                    <i>September 11, 2022</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a
                                    href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-10/">
                                    Chapter 10 </a>

                                  <span class="chapter-release-date">
                                    <i>September 3, 2022</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-9/">
                                    Chapter 9 </a>

                                  <span class="chapter-release-date">
                                    <i>August 27, 2022</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-8/">
                                    Chapter 8 </a>

                                  <span class="chapter-release-date">
                                    <i>August 20, 2022</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-7/">
                                    Chapter 7 </a>

                                  <span class="chapter-release-date">
                                    <i>August 13, 2022</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-6/">
                                    Chapter 6 </a>

                                  <span class="chapter-release-date">
                                    <i>August 13, 2022</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-5/">
                                    Chapter 5 </a>

                                  <span class="chapter-release-date">
                                    <i>August 13, 2022</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-4/">
                                    Chapter 4 </a>

                                  <span class="chapter-release-date">
                                    <i>August 13, 2022</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-3/">
                                    Chapter 3 </a>

                                  <span class="chapter-release-date">
                                    <i>August 13, 2022</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-2/">
                                    Chapter 2 </a>

                                  <span class="chapter-release-date">
                                    <i>August 13, 2022</i> </span>


                                </li>


                                <li class="wp-manga-chapter    ">

                                  <a href="https://manhuaus.com/manga/i-became-the-tyrant-of-a-defence-game/chapter-1/">
                                    Chapter 1 </a>

                                  <span class="chapter-release-date">
                                    <i>August 13, 2022</i> </span>


                                </li>



                              </ul>



                              <div class="c-chapter-readmore">
                                <span class="btn btn-link chapter-readmore less-chap" style="display: inline;">
                                  Show more </span>
                              </div>

                            </div>
                          </div>
                        </div>
                        <!-- </div> -->
                      </div>



                      <!-- comments-area -->

                      <div id="manga-discussion" class="c-blog__heading style-2 font-heading">
                        <i class="ion-ios-star"></i>
                        <h4> MANGA DISCUSSION </h4>

                      </div>
                      <div class="manga-discussion wrapper">

                        <div id="disqus_thread"><iframe id="dsq-app5195" name="dsq-app5195" allowtransparency="true"
                            frameborder="0" scrolling="no" tabindex="0" title="Disqus" width="100%"
                            src="https://disqus.com/embed/comments/?base=default&amp;f=manhuaus-com&amp;t_i=1355635%20https%3A%2F%2Fmanhuaus.org%2F%2Fmanga%2F%3Dwp-manga%26p%3D1355635&amp;t_u=https%3A%2F%2Fmanhuaus.com%2Fmanga%2Fi-became-the-tyrant-of-a-defence-game%2F&amp;t_e=I%20Became%20the%20Tyrant%20of%20a%20Defence%20Game&amp;t_d=%0A%09%09%09%09%09%09I%20Became%20the%20Tyrant%20of%20a%20Defence%20Game%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20&amp;t_t=I%20Became%20the%20Tyrant%20of%20a%20Defence%20Game&amp;s_o=default#version=73089b0e9a0024b949a6fc2641b276de"
                            style="width: 1px !important; min-width: 100% !important; border: none !important; overflow: hidden !important; height: 1248px !important;"
                            horizontalscrolling="no" verticalscrolling="no"></iframe></div>
                      </div>

                      <!-- END comments-area -->


                    </div>
                  </div>

                  <div class="sidebar-col col-md-4 col-sm-4">
                    <div id="main-sidebar" class="main-sidebar" role="complementary">
                      <div class="row">
                        <div id="manga-search-19"
                          class="widget col-12 col-md-12   default no-icon  manga-widget widget-manga-search">
                          <div class="widget__inner manga-widget widget-manga-search__inner c-widget-wrap">
                            <div class="widget-content">
                              <div class="search-navigation__wrap">

                                <script>
                                  jQuery(document).ready(function ($) {
                                    if ($('.c-header__top .manga-search-form').length !== 0 && $('.c-header__top .manga-search-form.search-form').length !== 0) {

                                      $('form#blog-post-search').append('<input type="hidden" name="post_type" value="wp-manga">');

                                      $('form#blog-post-search').addClass("manga-search-form");

                                      $('form#blog-post-search input[name="s"]').addClass("manga-search-field");

                                      $('form.manga-search-form.ajax input.manga-search-field').each(function () {

                                        var searchIcon = $(this).parent().children('.ion-ios-search-strong');

                                        var append = $(this).parent();

                                        $(this).autocomplete({
                                          appendTo: append,
                                          source: function (request, resp) {
                                            $.ajax({
                                              url: manga.ajax_url,
                                              type: 'POST',
                                              dataType: 'json',
                                              data: {
                                                action: 'wp-manga-search-manga',
                                                title: request.term,
                                              },
                                              success: function (data) {
                                                resp($.map(data.data, function (item) {
                                                  if (true == data.success) {
                                                    return {
                                                      label: item.title,
                                                      value: item.title,
                                                      url: item.url,
                                                      type: item.type
                                                    }
                                                  } else {
                                                    return {
                                                      label: item.message,
                                                      value: item.message,
                                                      type: item.type,
                                                      click: false
                                                    }
                                                  }
                                                }))
                                              }
                                            });
                                          },
                                          select: function (e, ui) {
                                            if (ui.item.url) {
                                              window.location.href = ui.item.url;
                                            } else {
                                              if (ui.item.click) {
                                                return true;
                                              } else {
                                                return false;
                                              }
                                            }
                                          },
                                          open: function (e, ui) {
                                            var acData = $(this).data('uiAutocomplete');
                                            acData.menu.element.addClass('manga-autocomplete').find('li div').each(function () {
                                              var $self = $(this),
                                                keyword = $.trim(acData.term).split(' ').join('|');
                                              $self.html($self.text().replace(new RegExp("(" + keyword + ")", "gi"), '<span class="manga-text-highlight">$1</span>'));
                                            });
                                          }
                                        }).autocomplete("instance")._renderItem = function (ul, item) {
                                          return $("<li class='search-item'>")
                                            .append("<div class='manga-type-" + item.type + "'>" + item.label + "</div>")
                                            .appendTo(ul);
                                        };
                                      });
                                    }
                                  });
                                </script>
                                <ul class="main-menu-search nav-menu">
                                  <li class="menu-search">
                                    <a href="javascript:;" class="open-search-main-menu"> <i
                                        class="icon ion-ios-search"></i>
                                      <i class="icon ion-android-close"></i> </a>
                                    <ul class="search-main-menu">
                                      <li>
                                        <form class="manga-search-form search-form ajax" action="https://manhuaus.com/"
                                          method="get">
                                          <input class="manga-search-field ui-autocomplete-input" type="text"
                                            placeholder="Search..." name="s" value="" autocomplete="off">
                                          <input type="hidden" name="post_type" value="wp-manga"> <i
                                            class="icon ion-ios-search"></i>
                                          <div class="loader-inner ball-clip-rotate-multiple">
                                            <div></div>
                                            <div></div>
                                          </div>
                                          <input type="submit" value="Search">
                                          <ul id="ui-id-3" tabindex="0"
                                            class="ui-menu ui-widget ui-widget-content ui-autocomplete ui-front"
                                            unselectable="on" style="display: none;"></ul>
                                        </form>
                                      </li>
                                    </ul>
                                  </li>
                                </ul>

                                <div class="link-adv-search">
                                  <a href="https://manhuaus.com/?s=&amp;post_type=wp-manga">Advanced</a>
                                </div>

                              </div>

                            </div>
                          </div>
                        </div>
                      </div>
                      <div class="row">
                        <div id="media_image-9"
                          class="widget col-12 col-md-12   default  no-icon heading-style-1 widget_media_image">
                          <div class="widget__inner widget_media_image__inner c-widget-wrap">
                            <div class="widget-content"><a href="https://discord.gg/BbmZB4A"><img width="300"
                                  height="106" src="https://manhuaus.com/wp-content/uploads/2021/08/discord-300x106.png"
                                  class="image wp-image-1343239  attachment-medium size-medium" alt="" decoding="async"
                                  style="max-width: 100%; height: auto;"
                                  srcset="https://manhuaus.com/wp-content/uploads/2021/08/discord-300x106.png 300w, https://manhuaus.com/wp-content/uploads/2021/08/discord.png 612w"
                                  sizes="(max-width: 300px) 100vw, 300px"></a></div>
                          </div>
                        </div>
                      </div>
                      <div class="row">
                        <div id="manga-recent-9"
                          class="widget col-12 col-md-12   default  no-icon heading-style-1 c-popular manga-widget widget-manga-recent">
                          <div class="widget__inner c-popular manga-widget widget-manga-recent__inner c-widget-wrap">
                            <div class="c-widget-content style-1 with-button">
                              <div class="widget-heading font-nav">
                                <h5 class="heading">HOT MANGA</h5>
                              </div>
                              <div class="widget-content">
                                <div class="popular-item-wrap">


                                  <div class="popular-img widget-thumbnail c-image-hover">
                                    <a title="Starting From Today I’ll Work As A City Lord – Manhuaus"
                                      href="https://manhuaus.com/manga/starting-from-today-ill-work-as-a-city-lord/">
                                      <img width="75" height="106"
                                        data-src="https://manhuaus.com/wp-content/uploads/2020/09/从今天开始当城主-75x106.jpg"
                                        class="img-responsive effect-fade lazyloaded"
                                        src="https://manhuaus.com/wp-content/uploads/2020/09/从今天开始当城主-75x106.jpg"
                                        style="padding-top:106px;" alt="从今天开始当城主"> </a>
                                  </div>

                                  <div class="popular-content">
                                    <h5 class="widget-title">
                                      <a title="Starting From Today I’ll Work As A City Lord – Manhuaus"
                                        href="https://manhuaus.com/manga/starting-from-today-ill-work-as-a-city-lord/">Starting
                                        From Today I’ll Work As A City Lord – Manhuaus</a>
                                    </h5>

                                    <div class="list-chapter">
                                      <div class="chapter-item ">

                                        <span class="chapter font-meta">
                                          <a href="https://manhuaus.com/manga/starting-from-today-ill-work-as-a-city-lord/chapter-520/"
                                            class="btn-link"> Chapter 520 </a>
                                        </span>

                                        <span class="post-on font-meta">
                                          1 day ago </span>
                                      </div>
                                      <div class="chapter-item ">

                                        <span class="chapter font-meta">
                                          <a href="https://manhuaus.com/manga/starting-from-today-ill-work-as-a-city-lord/chapter-519/"
                                            class="btn-link"> Chapter 519 </a>
                                        </span>

                                        <span class="post-on font-meta">
                                          February 14, 2024 </span>
                                      </div>
                                    </div>

                                  </div>
                                </div>

                                <div class="popular-item-wrap">


                                  <div class="popular-img widget-thumbnail c-image-hover">
                                    <a title="I Have A Dragon In My Body – Manhuaus"
                                      href="https://manhuaus.com/manga/i-have-a-dragon-in-my-body-2/">
                                      <img width="75" height="106"
                                        data-src="https://manhuaus.com/wp-content/uploads/2020/09/con-rong-ok-75x106.jpg"
                                        class="img-responsive effect-fade lazyloaded"
                                        src="https://manhuaus.com/wp-content/uploads/2020/09/con-rong-ok-75x106.jpg"
                                        style="padding-top:106px;" alt="con rong ok"> </a>
                                  </div>

                                  <div class="popular-content">
                                    <h5 class="widget-title">
                                      <a title="I Have A Dragon In My Body – Manhuaus"
                                        href="https://manhuaus.com/manga/i-have-a-dragon-in-my-body-2/">I Have A Dragon
                                        In My Body – Manhuaus</a>
                                    </h5>

                                    <div class="list-chapter">
                                      <div class="chapter-item ">

                                        <span class="chapter font-meta">
                                          <a href="https://manhuaus.com/manga/i-have-a-dragon-in-my-body-2/chapter-631/"
                                            class="btn-link"> Chapter 631 </a>
                                        </span>

                                        <span class="post-on font-meta">
                                          May 14, 2023 </span>
                                      </div>
                                      <div class="chapter-item ">

                                        <span class="chapter font-meta">
                                          <a href="https://manhuaus.com/manga/i-have-a-dragon-in-my-body-2/chapter-630/"
                                            class="btn-link"> Chapter 630 </a>
                                        </span>

                                        <span class="post-on font-meta">
                                          May 11, 2023 </span>
                                      </div>
                                    </div>

                                  </div>
                                </div>

                                <div class="popular-item-wrap">


                                  <div class="popular-img widget-thumbnail c-image-hover">
                                    <a title="Logging 10,000 Years into the Future"
                                      href="https://manhuaus.com/manga/logging-10000-years-into-the-future/">
                                      <img width="75" height="106"
                                        data-src="https://manhuaus.com/wp-content/uploads/2023/01/Logging-10000-Years-into-the-Future-75x106.webp"
                                        class="img-responsive effect-fade lazyloaded"
                                        src="https://manhuaus.com/wp-content/uploads/2023/01/Logging-10000-Years-into-the-Future-75x106.webp"
                                        style="padding-top:106px;" alt="Logging 10,000 Years into the Future"> </a>
                                  </div>

                                  <div class="popular-content">
                                    <h5 class="widget-title">
                                      <a title="Logging 10,000 Years into the Future"
                                        href="https://manhuaus.com/manga/logging-10000-years-into-the-future/">Logging
                                        10,000 Years into the Future</a>
                                    </h5>

                                    <div class="list-chapter">
                                      <div class="chapter-item ">

                                        <span class="chapter font-meta">
                                          <a href="https://manhuaus.com/manga/logging-10000-years-into-the-future/chapter-96/"
                                            class="btn-link"> Chapter 96 </a>
                                        </span>

                                        <span class="post-on font-meta">
                                          1 day ago </span>
                                      </div>
                                      <div class="chapter-item ">

                                        <span class="chapter font-meta">
                                          <a href="https://manhuaus.com/manga/logging-10000-years-into-the-future/chapter-95/"
                                            class="btn-link"> Chapter 95 </a>
                                        </span>

                                        <span class="post-on font-meta">
                                          February 22, 2024 </span>
                                      </div>
                                    </div>

                                  </div>
                                </div>

                                <div class="popular-item-wrap">


                                  <div class="popular-img widget-thumbnail c-image-hover">
                                    <a title="I’m An Evil God – Manhuaus"
                                      href="https://manhuaus.com/manga/im-an-evil-god-1/">
                                      <img width="75" height="106"
                                        data-src="https://manhuaus.com/wp-content/uploads/2020/09/Im-An-Evil-God-75x106.webp"
                                        class="img-responsive effect-fade lazyloaded"
                                        src="https://manhuaus.com/wp-content/uploads/2020/09/Im-An-Evil-God-75x106.webp"
                                        style="padding-top:106px;" alt="I’m An Evil God"> </a>
                                  </div>

                                  <div class="popular-content">
                                    <h5 class="widget-title">
                                      <a title="I’m An Evil God – Manhuaus"
                                        href="https://manhuaus.com/manga/im-an-evil-god-1/">I’m An Evil God –
                                        Manhuaus</a>
                                    </h5>

                                    <div class="list-chapter">
                                      <div class="chapter-item ">

                                        <span class="chapter font-meta">
                                          <a href="https://manhuaus.com/manga/im-an-evil-god-1/chapter-429/"
                                            class="btn-link"> Chapter 429 </a>
                                        </span>

                                        <span class="post-on font-meta">
                                          February 23, 2024 </span>
                                      </div>
                                      <div class="chapter-item ">

                                        <span class="chapter font-meta">
                                          <a href="https://manhuaus.com/manga/im-an-evil-god-1/chapter-428/"
                                            class="btn-link"> Chapter 428 </a>
                                        </span>

                                        <span class="post-on font-meta">
                                          February 20, 2024 </span>
                                      </div>
                                    </div>

                                  </div>
                                </div>

                                <div class="popular-item-wrap">


                                  <div class="popular-img widget-thumbnail c-image-hover">
                                    <a title="Cultivation Return on Campus – Manhuaus"
                                      href="https://manhuaus.com/manga/cultivation-return-on-campus-2/">
                                      <img width="75" height="106"
                                        data-src="https://manhuaus.com/wp-content/uploads/2020/09/sss-75x106.jpg"
                                        class="img-responsive effect-fade lazyloaded"
                                        src="https://manhuaus.com/wp-content/uploads/2020/09/sss-75x106.jpg"
                                        style="padding-top:106px;" alt="sss"> </a>
                                  </div>

                                  <div class="popular-content">
                                    <h5 class="widget-title">
                                      <a title="Cultivation Return on Campus – Manhuaus"
                                        href="https://manhuaus.com/manga/cultivation-return-on-campus-2/">Cultivation
                                        Return on Campus – Manhuaus</a>
                                    </h5>

                                    <div class="list-chapter">
                                      <div class="chapter-item ">

                                        <span class="chapter font-meta">
                                          <a href="https://manhuaus.com/manga/cultivation-return-on-campus-2/chapter-451/"
                                            class="btn-link"> Chapter 451 </a>
                                        </span>

                                        <span class="post-on font-meta">
                                          June 10, 2023 </span>
                                      </div>
                                      <div class="chapter-item ">

                                        <span class="chapter font-meta">
                                          <a href="https://manhuaus.com/manga/cultivation-return-on-campus-2/chapter-450/"
                                            class="btn-link"> Chapter 450 </a>
                                        </span>

                                        <span class="post-on font-meta">
                                          June 7, 2023 </span>
                                      </div>
                                    </div>

                                  </div>
                                </div>

                                <div class="popular-item-wrap">


                                  <div class="popular-img widget-thumbnail c-image-hover">
                                    <a title="Reborn 80,000 Years – Manhuaus"
                                      href="https://manhuaus.com/manga/reborn-80000-years/">
                                      <img width="75" height="106"
                                        data-src="https://manhuaus.com/wp-content/uploads/2020/11/reborrn-75x106.jpg"
                                        class="img-responsive lazyload effect-fade"
                                        src="https://manhuaus.com/wp-content/themes/madara/images/dflazy.jpg"
                                        style="padding-top:106px;" alt="reborrn"> </a>
                                  </div>

                                  <div class="popular-content">
                                    <h5 class="widget-title">
                                      <a title="Reborn 80,000 Years – Manhuaus"
                                        href="https://manhuaus.com/manga/reborn-80000-years/">Reborn 80,000 Years –
                                        Manhuaus</a>
                                    </h5>

                                    <div class="list-chapter">
                                      <div class="chapter-item ">

                                        <span class="chapter font-meta">
                                          <a href="https://manhuaus.com/manga/reborn-80000-years/chapter-392/"
                                            class="btn-link"> Chapter 392 </a>
                                        </span>

                                        <span class="post-on font-meta">
                                          August 1, 2023 </span>
                                      </div>
                                      <div class="chapter-item ">

                                        <span class="chapter font-meta">
                                          <a href="https://manhuaus.com/manga/reborn-80000-years/chapter-391/"
                                            class="btn-link"> Chapter 391 </a>
                                        </span>

                                        <span class="post-on font-meta">
                                          July 22, 2023 </span>
                                      </div>
                                    </div>

                                  </div>
                                </div>

                                <div class="popular-item-wrap">


                                  <div class="popular-img widget-thumbnail c-image-hover">
                                    <a title="Martial God Asura" href="https://manhuaus.com/manga/martial-god-asura-2/">
                                      <img width="75" height="106"
                                        data-src="https://manhuaus.com/wp-content/uploads/2020/12/Martial-God-Asura-75x106.jpg"
                                        data-srcset="https://manhuaus.com/wp-content/uploads/2020/12/Martial-God-Asura-75x106.jpg 75w, https://manhuaus.com/wp-content/uploads/2020/12/Martial-God-Asura-225x320.jpg 225w"
                                        data-sizes="(max-width: 75px) 100vw, 75px"
                                        class="img-responsive lazyload effect-fade"
                                        src="https://manhuaus.com/wp-content/themes/madara/images/dflazy.jpg"
                                        style="padding-top:106px;" alt="Martial God Asura"> </a>
                                  </div>

                                  <div class="popular-content">
                                    <h5 class="widget-title">
                                      <a title="Martial God Asura"
                                        href="https://manhuaus.com/manga/martial-god-asura-2/">Martial God Asura</a>
                                    </h5>

                                    <div class="list-chapter">
                                      <div class="chapter-item ">

                                        <span class="chapter font-meta">
                                          <a href="https://manhuaus.com/manga/martial-god-asura-2/chapter-784/"
                                            class="btn-link"> Chapter 784 </a>
                                        </span>

                                        <span class="post-on font-meta">
                                          November 28, 2023 </span>
                                      </div>
                                      <div class="chapter-item ">

                                        <span class="chapter font-meta">
                                          <a href="https://manhuaus.com/manga/martial-god-asura-2/chapter-782/"
                                            class="btn-link"> Chapter 782 </a>
                                        </span>

                                        <span class="post-on font-meta">
                                          November 23, 2023 </span>
                                      </div>
                                    </div>

                                  </div>
                                </div>

                                <div class="popular-item-wrap">


                                  <div class="popular-img widget-thumbnail c-image-hover">
                                    <a title="The Last Human" href="https://manhuaus.com/manga/the-last-human/">
                                      <img width="75" height="106"
                                        data-src="https://manhuaus.com/wp-content/uploads/2020/11/The_Last_Human-75x106.jpg"
                                        class="img-responsive lazyload effect-fade"
                                        src="https://manhuaus.com/wp-content/themes/madara/images/dflazy.jpg"
                                        style="padding-top:106px;" alt="The_Last_Human"> </a>
                                  </div>

                                  <div class="popular-content">
                                    <h5 class="widget-title">
                                      <a title="The Last Human" href="https://manhuaus.com/manga/the-last-human/">The
                                        Last Human</a>
                                    </h5>

                                    <div class="list-chapter">
                                      <div class="chapter-item ">

                                        <span class="chapter font-meta">
                                          <a href="https://manhuaus.com/manga/the-last-human/chapter-567/"
                                            class="btn-link"> Chapter 567 </a>
                                        </span>

                                        <span class="post-on font-meta">
                                          February 22, 2024 </span>
                                      </div>
                                      <div class="chapter-item ">

                                        <span class="chapter font-meta">
                                          <a href="https://manhuaus.com/manga/the-last-human/chapter-566/"
                                            class="btn-link"> Chapter 566 </a>
                                        </span>

                                        <span class="post-on font-meta">
                                          February 21, 2024 </span>
                                      </div>
                                    </div>

                                  </div>
                                </div>

                                <span class="c-wg-button-wrap">
                                  <a class="widget-view-more" href="/manga/?m_orderby=trending">Here for more Popular
                                    Manga</a>
                                </span>

                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                </div>
              </div>
            </div>
          </div>

        </div>
      </div><!-- <div class="site-content"> -->




      <footer class="site-footer">


        <div class="top-footer">
          <div class="container">
            <div class="row">
              <div class="col-md-12">
                <div class="wrap_social_account">
                  <ul class="list-inline social_account__item">
                    <li><a class="social-icons" target="_blank" rel="noopener"
                        href="https://www.facebook.com/Manhuauscom-103707431305499" title="Facebook"><i
                          class="fab fa-facebook-f" aria-hidden="true"></i></a></li>
                    <li><a class="social-icons" target="_blank" rel="noopener"
                        href="https://www.youtube.com/channel/UCzI0wjKndlRVKAWaYfgCkzw?view_as=subscriber"
                        title="Youtube"><i class="fab fa-youtube" aria-hidden="true"></i></a></li>
                    <li><a class="social-icons" target="_blank" rel="noopener" href="mailto:manhuaus240587@gmail.com"
                        title="Email"><i class="far fa-envelope" aria-hidden="true"></i></a></li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>


        <div class="bottom-footer">
          <div class="container">
            <div class="row">
              <div class="col-md-12">

                <div class="nav-footer">
                  <ul class="list-inline font-nav">
                    <li id="menu-item-1355030"
                      class="menu-item menu-item-type-post_type menu-item-object-page menu-item-home menu-item-1355030">
                      <a href="https://manhuaus.com/">HOME</a></li>
                    <li id="menu-item-78" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-78">
                      <a href="https://manhuaus.com/contact/">CONTACT US</a></li>
                  </ul>
                </div>
                <div class="copyright">
                  <p>© 2024 Manhuaus. All rights reserved</p>
                </div>

              </div>
            </div>
          </div>
        </div>

      </footer>


    </div> <!-- class="wrap" -->
  </div> <!-- class="body-wrap" -->



  <!-- Modal -->
  <div class="wp-manga-section">
    <input type="hidden" name="bookmarking" value="0">
    <div class="modal fade" id="form-login" tabindex="-1" role="dialog">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">×</span></button>
          </div>
          <div class="modal-body">
            <div id="login" class="login">
              <h3>
                <a href="https://manhuaus.com/" title="MANHUAUS.COM" tabindex="-1">Sign in</a>
              </h3>
              <p class="message login"></p>
              <meta name="robots"
                content="index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1">
              <link rel="icon" href="https://manhuaus.com/wp-content/uploads/2020/09/cropped-LOGO1-32x32.png"
                sizes="32x32">
              <link rel="icon" href="https://manhuaus.com/wp-content/uploads/2020/09/cropped-LOGO1-192x192.png"
                sizes="192x192">
              <link rel="apple-touch-icon"
                href="https://manhuaus.com/wp-content/uploads/2020/09/cropped-LOGO1-180x180.png">
              <meta name="msapplication-TileImage"
                content="https://manhuaus.com/wp-content/uploads/2020/09/cropped-LOGO1-270x270.png">
              <style type="text/css">
                body.login div#login h1 a {
                  background-image: url(https://manhuaus.com/wp-content/uploads/2017/10/logo-web-2.png);
                  width: 320px;
                  height: 120px;
                  background-size: auto;
                  background-position: center;
                }
              </style>
              <form name="loginform" id="loginform" method="post">
                <p>
                  <label>Username or Email Address * <br> <input type="text" name="log" class="input user_login"
                      value="" size="20">
                  </label>
                </p>
                <p>
                  <label>Password * <br> <input type="password" autocomplete="" name="pwd" class="input user_pass"
                      value="" size="20">
                  </label>
                </p>
                <p>
                </p>
                <p class="forgetmenot">
                  <label>
                    <input name="rememberme" type="checkbox" id="rememberme" value="forever">Remember Me </label>
                </p>
                <p class="submit">
                  <input type="submit" name="wp-submit" class="button button-primary button-large wp-submit"
                    value="Log In"> <input type="hidden" name="redirect_to" value="https://manhuaus.com/wp-admin/">
                  <input type="hidden" name="testcookie" value="1">
                </p>
              </form>
              <p class="nav">
                <a href="javascript:avoid(0)" class="to-reset">Lost your password?</a>
              </p>
              <p class="backtoblog">
                <a href="javascript:void(0)">← Back to MANHUAUS.COM</a>
              </p>
            </div>
          </div>
          <div class="modal-footer"></div>
        </div>
      </div>
    </div>

    <div class="modal fade" id="form-sign-up" tabindex="-1" role="dialog">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">×</span></button>
          </div>
          <div class="modal-body">
            <div id="sign-up" class="login">
              <h3>
                <a href="https://manhuaus.com/" title="MANHUAUS.COM" tabindex="-1">Sign Up</a>
              </h3>
              <p class="message register">Register For This Site.</p>
              <form name="registerform" id="registerform" novalidate="novalidate">
                <p>
                  <label>Username * <br>
                    <input type="text" name="user_sign-up" class="input user_login" value="" size="20">
                  </label>
                </p>
                <p>
                  <label>Email Address * <br>
                    <input type="email" name="email_sign-up" class="input user_email" value="" size="20">
                  </label>
                </p>
                <p>
                  <label>Password *<br>
                    <input type="password" name="pass_sign-up" autocomplete="" class="input user_pass" value=""
                      size="25">
                  </label>
                </p>
                <p class="action">
                </p>

                <input type="hidden" name="redirect_to" value="">
                <p class="submit">
                  <input type="submit" name="wp-submit" class="button button-primary button-large wp-submit"
                    value="Register">
                </p>
              </form>
              <p class="nav">
                <a href="javascript:void(0)" class="to-login">Log in</a>
                |
                <a href="javascript:void(0)" class="to-reset">Lost your password?</a>
              </p>
              <p class="backtoblog">
                <a href="javascript:void(0)">← Back to MANHUAUS.COM</a>
              </p>
            </div>
          </div>
          <div class="modal-footer"></div>
        </div>
      </div>
    </div>

    <div class="modal fade" id="form-reset" tabindex="-1" role="dialog">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">×</span></button>
          </div>
          <div class="modal-body">
            <div id="reset" class="login">
              <h3>
                <a href="javascript:void(0)" class="to-reset">Lost your password?</a>
              </h3>
              <p class="message reset">Please enter your username or email address. You will receive a link to create a
                new password via email.</p>
              <form name="resetform" id="resetform" method="post">
                <p>
                  <label>Username or Email Address <br>
                    <input type="text" name="user_reset" id="user_reset" class="input" value="" size="20">
                  </label>
                </p>
                <p class="submit">
                  <input type="submit" name="wp-submit" class="button button-primary button-large wp-submit"
                    value="Get New Password">
                  <input type="hidden" name="testcookie" value="1">
                </p>
              </form>
              <p>
                <a class="backtoblog" href="javascript:void(0)">← Back to MANHUAUS.COM</a>
              </p>
            </div>
          </div>
          <div class="modal-footer"></div>
        </div>
      </div>
    </div>
  </div>
  <script id="dsq-count-scr" src="https://manhuaus-com.disqus.com/count.js" async=""></script>
  <div class="go-to-top active">
    <i class="icon ion-md-arrow-up"></i>
  </div>
  <script type="text/javascript" id="wp-manga-single-js-js-extra">
    /* <![CDATA[ */
    var wpMangaSingle = { "ajax_url": "https:\/\/manhuaus.com\/wp-admin\/admin-ajax.php", "home_url": "https:\/\/manhuaus.com" };
    /* ]]> */
  </script>
  <script type="text/javascript"
    src="https://manhuaus.com/wp-content/plugins/madara-core/assets/js/manga-single.js?ver=6.3.3"
    id="wp-manga-single-js-js"></script>
  <script type="text/javascript" id="disqus_count-js-extra">
    /* <![CDATA[ */
    var countVars = { "disqusShortname": "manhuaus-com" };
    /* ]]> */
  </script>
  <script type="text/javascript"
    src="https://manhuaus.com/wp-content/plugins/disqus-comment-system/public/js/comment_count.js?ver=3.0.23"
    id="disqus_count-js"></script>
  <script type="text/javascript" id="manga_disqus_embed-js-extra">
    /* <![CDATA[ */
    var embedVars = { "disqusConfig": { "integration": "wordpress 3.0.12" }, "disqusIdentifier": "1355635 https:\/\/manhuaus.org\/\/manga\/=wp-manga&p=1355635", "disqusShortname": "manhuaus-com", "disqusTitle": "I Became the Tyrant of a Defence Game", "disqusUrl": "https:\/\/manhuaus.com\/manga\/i-became-the-tyrant-of-a-defence-game\/", "postId": "1355635" };
    /* ]]> */
  </script>
  <script type="text/javascript"
    src="https://manhuaus.com/wp-content/plugins/disqus-comment-system/public/js/comment_embed.js?ver=6.3.3"
    id="manga_disqus_embed-js"></script>
  <script type="text/javascript" src="https://manhuaus.com/wp-includes/js/comment-reply.min.js?ver=6.3.3"
    id="comment-reply-js"></script>
  <script type="text/javascript" src="https://manhuaus.com/wp-content/themes/madara/js/core.js?ver=6.3.3"
    id="madara-core-js"></script>
  <script type="text/javascript" src="https://manhuaus.com/wp-content/themes/madara/js/smoothscroll.js?ver=1.4.10"
    id="smoothscroll-js"></script>
  <script type="text/javascript"
    src="https://manhuaus.com/wp-content/themes/madara/js/lazysizes/lazysizes.min.js?ver=5.3.2"
    id="lazysizes-js"></script>
  <script type="text/javascript" src="https://manhuaus.com/wp-content/themes/madara/js/bootstrap.min.js?ver=4.6.0"
    id="bootstrap-js"></script>
  <script type="text/javascript" src="https://manhuaus.com/wp-content/themes/madara/js/shuffle.min.js?ver=5.3.0"
    id="shuffle-js"></script>
  <script type="text/javascript" src="https://manhuaus.com/wp-includes/js/imagesloaded.min.js?ver=4.1.4"
    id="imagesloaded-js"></script>
  <script type="text/javascript" src="https://manhuaus.com/wp-content/themes/madara/js/aos.js?ver=6.3.3"
    id="aos-js"></script>
  <script type="text/javascript" id="madara-js-js-extra">
    /* <![CDATA[ */
    var madara = { "ajaxurl": "https:\/\/manhuaus.com\/wp-admin\/admin-ajax.php", "query_vars": { "page": 0, "manga-core": "i-became-the-tyrant-of-a-defence-game", "post_type": "wp-manga", "name": "i-became-the-tyrant-of-a-defence-game", "error": "", "m": "", "p": 0, "post_parent": "", "subpost": "", "subpost_id": "", "attachment": "", "attachment_id": 0, "pagename": "", "page_id": 0, "second": "", "minute": "", "hour": "", "day": 0, "monthnum": 0, "year": 0, "w": 0, "category_name": "", "tag": "", "cat": "", "tag_id": "", "author": "", "author_name": "", "feed": "", "tb": "", "paged": 0, "meta_key": "", "meta_value": "", "preview": "", "s": "", "sentence": "", "title": "", "fields": "", "menu_order": "", "embed": "", "category__in": [], "category__not_in": [], "category__and": [], "post__in": [], "post__not_in": [], "post_name__in": [], "tag__in": [], "tag__not_in": [], "tag__and": [], "tag_slug__in": [], "tag_slug__and": [], "post_parent__in": [], "post_parent__not_in": [], "author__in": [], "author__not_in": [], "search_columns": [], "ignore_sticky_posts": false, "suppress_filters": false, "cache_results": true, "update_post_term_cache": true, "update_menu_item_cache": false, "lazy_load_term_meta": true, "update_post_meta_cache": true, "posts_per_page": 12, "nopaging": false, "comments_per_page": "50", "no_found_rows": false, "order": "DESC" }, "current_url": "https:\/\/manhuaus.com\/manga\/i-became-the-tyrant-of-a-defence-game" };
    var single_manga_show_more = { "show_more": "Show more  ", "show_less": "Show less  " };
    /* ]]> */
  </script>
  <script type="text/javascript" src="https://manhuaus.com/wp-content/themes/madara/js/template.js?ver=1.7.3"
    id="madara-js-js"></script>
  <script type="text/javascript" src="https://manhuaus.com/wp-content/themes/madara/js/ajax.js?ver=6.3.3"
    id="madara-ajax-js"></script>
  <script type="text/javascript" id="wp-manga-login-ajax-js-extra">
    /* <![CDATA[ */
    var wpMangaLogin = { "admin_ajax": "https:\/\/manhuaus.com\/wp-admin\/admin-ajax.php", "home_url": "https:\/\/manhuaus.com", "nonce": "ac4896da8c", "messages": { "please_enter_username": "Please enter username", "please_enter_password": "Please enter password", "invalid_username_or_password": "Invalid username or password", "server_error": "Server Error!", "username_or_email_cannot_be_empty": "Username or Email cannot be empty", "please_fill_all_fields": "Please fill in all password fields.", "password_cannot_less_than_12": "Password cannot have less than 12 characters", "password_doesnot_match": "Password does not match. Please try again.", "username_cannot_empty": "Username cannot be empty", "email_cannot_empty": "Email cannot be empty", "password_cannot_empty": "Password cannot be empty" } };
    /* ]]> */
  </script>
  <script type="text/javascript" src="https://manhuaus.com/wp-content/plugins/madara-core/assets/js/login.js?ver=1.7.2"
    id="wp-manga-login-ajax-js"></script>
  <script type="text/javascript"
    src="https://manhuaus.com/wp-content/plugins/madara-core/assets/slick/slick.min.js?ver=6.3.3"
    id="wp-manga-slick-js-js"></script>
  <script type="text/javascript" src="https://manhuaus.com/wp-includes/js/jquery/ui/core.min.js?ver=1.13.2"
    id="jquery-ui-core-js"></script>
  <script type="text/javascript" src="https://manhuaus.com/wp-includes/js/jquery/ui/menu.min.js?ver=1.13.2"
    id="jquery-ui-menu-js"></script>
  <script type="text/javascript"
    src="https://manhuaus.com/wp-includes/js/dist/vendor/wp-polyfill-inert.min.js?ver=3.1.2"
    id="wp-polyfill-inert-js"></script>
  <script type="text/javascript"
    src="https://manhuaus.com/wp-includes/js/dist/vendor/regenerator-runtime.min.js?ver=0.13.11"
    id="regenerator-runtime-js"></script>
  <script type="text/javascript" src="https://manhuaus.com/wp-includes/js/dist/vendor/wp-polyfill.min.js?ver=3.15.0"
    id="wp-polyfill-js"></script>
  <script type="text/javascript"
    src="https://manhuaus.com/wp-includes/js/dist/dom-ready.min.js?ver=392bdd43726760d1f3ca"
    id="wp-dom-ready-js"></script>
  <script type="text/javascript" src="https://manhuaus.com/wp-includes/js/dist/hooks.min.js?ver=c6aec9a8d4e5a5d543a1"
    id="wp-hooks-js"></script>
  <script type="text/javascript" src="https://manhuaus.com/wp-includes/js/dist/i18n.min.js?ver=7701b0c3857f914212ef"
    id="wp-i18n-js"></script><iframe style="display: none;"></iframe>
  <script id="wp-i18n-js-after" type="text/javascript">
    wp.i18n.setLocaleData({ 'text direction\u0004ltr': ['ltr'] });
  </script>
  <script type="text/javascript" src="https://manhuaus.com/wp-includes/js/dist/a11y.min.js?ver=7032343a947cfccf5608"
    id="wp-a11y-js"></script>
  <script type="text/javascript" id="jquery-ui-autocomplete-js-extra">
    /* <![CDATA[ */
    var uiAutocompleteL10n = { "noResults": "No results found.", "oneResult": "1 result found. Use up and down arrow keys to navigate.", "manyResults": "%d results found. Use up and down arrow keys to navigate.", "itemSelected": "Item selected." };
    /* ]]> */
  </script>
  <script type="text/javascript" src="https://manhuaus.com/wp-includes/js/jquery/ui/autocomplete.min.js?ver=1.13.2"
    id="jquery-ui-autocomplete-js"></script>
  <script type="text/javascript" id="wp-manga-js-extra">
    /* <![CDATA[ */
    var manga = { "ajax_url": "https:\/\/manhuaus.com\/wp-admin\/admin-ajax.php", "home_url": "https:\/\/manhuaus.com", "base_url": "https:\/\/manhuaus.com\/manga\/i-became-the-tyrant-of-a-defence-game\/", "manga_paged_var": "manga-paged", "enable_manga_view": "1", "manga_id": "1355635" };
    /* ]]> */
  </script>
  <script type="text/javascript" src="https://manhuaus.com/wp-content/plugins/madara-core/assets/js/script.js?ver=1.7.1"
    id="wp-manga-js"></script>
  <script type="text/javascript" src="https://manhuaus.com/wp-content/themes/madara/js/slick/slick.min.js?ver=1.9.0"
    id="slick-js"></script>
  <script type="text/javascript"
    src="https://manhuaus.com/wp-content/plugins/madara-shortcodes/shortcodes/js/ct-shortcodes.js?ver=1.5.2.1"
    id="ct-shortcode-js-js"></script>



  <p id="a11y-speak-intro-text" class="a11y-speak-intro-text"
    style="position: absolute;margin: -1px;padding: 0;height: 1px;width: 1px;overflow: hidden;clip: rect(1px, 1px, 1px, 1px);-webkit-clip-path: inset(50%);clip-path: inset(50%);border: 0;word-wrap: normal !important;"
    hidden="hidden">Notifications</p>
  <div id="a11y-speak-assertive" class="a11y-speak-region"
    style="position: absolute;margin: -1px;padding: 0;height: 1px;width: 1px;overflow: hidden;clip: rect(1px, 1px, 1px, 1px);-webkit-clip-path: inset(50%);clip-path: inset(50%);border: 0;word-wrap: normal !important;"
    aria-live="assertive" aria-relevant="additions text" aria-atomic="true"></div>
  <div id="a11y-speak-polite" class="a11y-speak-region"
    style="position: absolute;margin: -1px;padding: 0;height: 1px;width: 1px;overflow: hidden;clip: rect(1px, 1px, 1px, 1px);-webkit-clip-path: inset(50%);clip-path: inset(50%);border: 0;word-wrap: normal !important;"
    aria-live="polite" aria-relevant="additions text" aria-atomic="true"></div>
  <div role="status" aria-live="assertive" aria-relevant="additions" class="ui-helper-hidden-accessible"></div>
  <div role="status" aria-live="assertive" aria-relevant="additions" class="ui-helper-hidden-accessible"></div>
  <div role="status" aria-live="assertive" aria-relevant="additions" class="ui-helper-hidden-accessible"></div>
  <div data-lastpass-root=""
    style="position: absolute !important; top: 0px !important; left: 0px !important; height: 0px !important; width: 0px !important;">
  </div>
</body>

</html>
