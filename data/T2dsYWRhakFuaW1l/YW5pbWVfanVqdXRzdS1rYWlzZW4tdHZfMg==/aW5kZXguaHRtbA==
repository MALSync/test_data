<html lang="pl">

<head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# website: http://ogp.me/ns/website#">
  <meta charset="utf-8">
  <meta http-equiv="x-dns-prefetch-control" content="on">
  <link rel="dns-prefetch" href="//cdn.ogladajanime.pl">
  <link rel="dns-prefetch" href="//unpkg.com">
  <link rel="dns-prefetch" href="//static.cloudflareinsights.com">
  <link rel="dns-prefetch" href="//fonts.gstatic.com">
  <title>Oglądaj Anime</title>
  <meta name="description"
    content="Yuuji Itadori jest licealistą, który spędza całe dnie na odwiedzaniu swojego chorego dziadka. Chociaż wygląda jak przeciętny nastolatek, posiada ogromną siłę fizyczną. Każdy klub sportowy chce, żeby chłopak do niego dołączył, ale Itadori wolałby spędzać czas z wyrzutkami ze szkoły w kółku okultystycznym. Pewnego dnia klubowi udaje się zdobyć zapieczętowany, przeklęty przedmiot, ale niewiele wiedzą na jego temat. Jaki terror wywołają, kiedy złamią pieczęć?">
  <meta property="og:title" content="Jujutsu Kaisen (TV) - Oglądaj Anime">
  <meta property="og:description"
    content="Yuuji Itadori jest licealistą, który spędza całe dnie na odwiedzaniu swojego chorego dziadka. Chociaż wygląda jak przeciętny nastolatek, posiada ogromną siłę fizyczną. Każdy klub sportowy chce, żeby chłopak do niego dołączył, ale Itadori wolałby spędzać czas z wyrzutkami ze szkoły w kółku okultystycznym. Pewnego dnia klubowi udaje się zdobyć zapieczętowany, przeklęty przedmiot, ale niewiele wiedzą na jego temat. Jaki terror wywołają, kiedy złamią pieczęć?">
  <meta property="og:locale" content="pl">
  <meta property="og:url" content="https://ogladajanime.pl/anime/jujutsu-kaisen-tv/2">
  <meta property="og:image" content="https://cdn.ogladajanime.pl/images/anime/14496/250w.webp">
  <meta name="twitter:image:src" content="https://cdn.ogladajanime.pl/images/anime/14496/250w.webp">
  <meta property="og:site_name" content="ogladajanime.pl">
  <meta property="og:type" content="website">
  <meta name="referrer" content="same-origin">
  <meta name="theme-color" content="#292b2c">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <meta name="keywords"
    content="anime, ogladaj, online, odcinki, naruto, dragon ball kai, bleach, one piece, soul eater, fullmetal alchemist, death note, fairy tail">
  <meta name="clckd" content="1628a261a7ef317cddf12f858ecbc8a6">
  <link rel="preconnect" href="https://fonts.gstatic.com">
  <link rel="preconnect" href="https://cdn.ogladajanime.pl">
  <link rel="preload" href="https://cdn.ogladajanime.pl/css/bootstrap.min.css?20230412120403" as="style">
  <link rel="preload" href="https://cdn.ogladajanime.pl/css/main.css?20231006091352" as="style">
  <link rel="preload" href="https://cdn.ogladajanime.pl/css/font-awesome.min.css?20230412120403" as="style">
  <link rel="preload" href="https://cdn.ogladajanime.pl/js/jquery-3.6.1.min.js?20221113202413" as="script">
  <link rel="preload" href="https://cdn.ogladajanime.pl/js/main.js?20231011090848" as="script">
  <link rel="preload" href="https://cdn.ogladajanime.pl/js/lozad.min.js?20221113202414" as="script">
  <link rel="shortcut icon" href="https://cdn.ogladajanime.pl/favicon.ico?new">
  <link rel="apple-touch-icon" href="/apple-touch-icon.png">
  <link rel="stylesheet" href="https://cdn.ogladajanime.pl/css/bootstrap.min.css?20230412120403">
  <link rel="stylesheet" href="https://cdn.ogladajanime.pl/css/main.css?20231006091352">
  <link rel="stylesheet" href="https://cdn.ogladajanime.pl/css/font-awesome.min.css?20230412120403">
  <script type="text/javascript" defer="" async="" src="https://notifpush.com/scripts/nadz-sdk.js"></script>
  <script defer="" src="https://cdn.ogladajanime.pl/js/lozad.min.js?20221113202414"></script>

  <script defer="" src="https://cdn.ogladajanime.pl/js/jquery-3.6.1.min.js?20221113202413"></script>
  <script defer="" src="https://cdn.ogladajanime.pl/js/jquery.validate.min.js?20221113202415"></script>
  <script defer="" src="https://cdn.ogladajanime.pl/js/popper.min.js?20221113202516"></script>
  <script defer="" src="https://cdn.ogladajanime.pl/js/bootstrap.min.js?20230412120404"></script>
  <script defer="" src="https://cdn.ogladajanime.pl/js/bootbox.all.min.js?20230412120404"></script>
  <script defer="" src="https://cdn.ogladajanime.pl/js/main.js?20231011090848"></script>
  <script async="" src="https://a.spolecznosci.net/core/209bf148406d2e655aefec7cd5d749a8/main.js"></script>
  <link rel="stylesheet" href="https://unpkg.com/flickity@2/dist/flickity.min.css">
  <script src="https://unpkg.com/flickity@2/dist/flickity.pkgd.min.js"></script>
  <script type="application/ld+json">
            {
              "@context" : "https://schema.org",
              "@type" : "WebSite",
              "name" : "ogladajanime.pl",
              "alternateName" : "OgladajAnime",
              "url" : "https://ogladajanime.pl"
            },
            "potentialAction": {
              "@type": "SearchAction",
              "target": "https://ogladajanime.pl/search/name/{query}",
              "query-input": "required"
            }
		</script>
  <script>
    var RunFunc = [];
    var observer = null;

    function runjQuery(func) {
      if (window.jQuery)
        func();
      else
        RunFunc.push(func);
    }

    if (self != top) { top.location = self.location; }
  </script>
  <script type="text/javascript">

    var _nAdzq = _nAdzq || []; (function () {
      _nAdzq.push(["setIds", "0ab15a0535a5874a"]);
      var e = "https://notifpush.com/scripts/";
      var t = document.createElement("script");
      t.type = "text/javascript";
      t.defer = true;
      t.async = true;
      t.src = e + "nadz-sdk.js";
      var s = document.getElementsByTagName("script")[0];
      s.parentNode.insertBefore(t, s)
    })();

  </script>
  <script type="text/javascript">

    function check() {
      var before = new Date().getTime();
      debugger;
      var after = new Date().getTime();

      if (after - before > 200) {
        self.location.replace(window.location.protocol + '//ogladajanime.pl/error');
      }
      else {
        before = null;
        after = null;
        delete before;
        delete after;

        setTimeout(check, 200);
      }
    }

    check();

  </script>

</head>

<body data-theme="dark">
  <div style="padding-top: 80px;"></div>
  <div id="registerForm" class="d-none">
    <form class="form-horizontal text-center" role="form">
      <h3>Rejestracja</h3>
      <div class="form-group">
        <label class="control-label col-12">Login</label>
        <div class="col-12">
          <input type="text" class="form-control" id="registerName" name="registerName" required="">
        </div>
      </div>
      <div class="form-group">
        <label class="control-label col-12">Email</label>
        <div class="col-12">
          <input type="email" class="form-control" id="registerEmail" name="registerEmail" required="">
        </div>
      </div>
      <div class="form-group">
        <label class="control-label col-12">Hasło</label>
        <div class="col-12">
          <input type="password" class="form-control" id="registerPass" name="registerPass" required="">
        </div>
      </div>
      <div class="form-group">
        <label class="control-label col-12">Powtórz hasło</label>
        <div class="col-12">
          <input type="password" class="form-control" id="registerPass2" name="registerPass2" required="">
        </div>
      </div>
    </form>
  </div>
  <div id="loginForm" class="d-none">
    <form class="form-horizontal text-center" role="form">
      <h3>Logowanie</h3>
      <div class="form-group">
        <label class="control-label col-12">Login</label>
        <div class="col-12">
          <input type="text" class="form-control" id="loginName" name="loginName" required="">
        </div>
      </div>
      <div class="form-group">
        <label class="control-label col-12">Hasło</label>
        <div class="col-12">
          <input type="password" class="form-control" id="loginPass" name="loginPass" required="">
        </div>
      </div>
      <a href="#" class="text-center" onclick="showReset(); return false;">Zapomniałeś hasła?</a>
    </form>
  </div>
  <div id="resetForm" class="d-none">
    <form class="form-horizontal text-center" role="form">
      <h3>Przywrócenie hasła</h3>
      <div class="form-group">
        <label class="control-label col-12">Login lub email</label>
        <div class="col-12">
          <input type="text" class="form-control" id="resetName" name="resetName" required="">
        </div>
      </div>
    </form>
  </div>
  <nav class="navbar navbar-expand-md navbar-dark bg-dark fixed-top pr-2 pl-2">
    <div class="collapse navbar-collapse navbarSupportedContent">
      <ul class="navbar-nav mr-auto">
        <li class="nav-item m-0 p-0 mr-1">
          <a href="/" onclick="loadPage('main2', null, '/main2'); return false;">
            <img src="https://cdn.ogladajanime.pl/images/oa3.png" style="height: 40px;"
              class="m-0 p-0 pt-1 d-block d-md-none d-lg-block top-nav" alt="Oglądaj Anime" title="Oglądaj Anime">
            <img src="https://cdn.ogladajanime.pl/images/oaIcon.png" style="height: 40px;"
              class="m-0 p-0 pt-1 d-none d-md-block d-lg-none top-nav" alt="Oglądaj Anime" title="Oglądaj Anime">
          </a>
        </li>

        <li class="nav-item dropdown">
          <a class="nav-link top-nav-text dropdown-toggle" href="#" data-toggle="dropdown">Anime</a>
          <ul id="dropdown" class="dropdown-menu bg-white" style="max-width: 160px;">
            <li><a class="dropdown-item" href="/anime_seasons"
                onclick="loadPage('anime_seasons', null, '/anime_seasons'); return false;">Sezony</a></li>
            <li><a class="dropdown-item" href="/harmonogram"
                onclick="loadPage('harmonogram', null, '/harmonogram'); return false;">Harmonogram</a></li>
            <li><a class="dropdown-item" href="#" onclick="anime_search('', 'custom'); return false;">Wyszukiwarka</a>
            </li>
            <li><a class="dropdown-item" href="/all_anime_list"
                onclick="loadPage('all_anime_list', null, '/all_anime_list'); return false;">Lista anime</a></li>
          </ul>
        </li>
        <li class="nav-item">
          <span id="new_chat_messages" class="badge badge-pill badge-primary d-none"
            style="float:right; margin-bottom:-10px;">0</span>
          <a class="nav-link top-nav-text" href="/chat"
            onclick="loadPage('chat', null, '/chat'); return false;">Czat</a>
        </li>
        <li class="nav-item">
          <span id="new_comments" class="badge badge-pill badge-primary d-none"
            style="float:right; margin-bottom:-10px;">0</span>
          <a class="nav-link top-nav-text" href="/last_comments"
            onclick="loadPage('last_comments', null, '/last_comments'); return false;">Komentarze</a>
        </li>
        <li class="nav-item">
          <a class="nav-link top-nav-text" href="/discord"
            onclick="loadPage('discord', null, '/discord'); return false;">Kontakt</a>
        </li>
        <li class="nav-item">
          <a class="nav-link top-nav-text" href="/support"
            onclick="loadPage('support', null, '/support'); return false;">
            Wsparcie
          </a>
        </li>
      </ul>
    </div>
    <div id="navBarSearchForm" class="navbar-form mr-1 ml-0">
      <input id="searchInput" class="form-control" type="text" autocomplete="off" aria-label="Wyszukaj anime"
        placeholder="Wyszukaj anime..." value="">
    </div>
    <button class="btn btn-primary ml-2 mr-auto"
      onclick="anime_search('', 'custom'); return false;">Wyszukiwarka</button>
    <div class="collapse navbar-collapse navbarSupportedContent">

      <button class="btn btn-secondary ml-auto mr-2 my-md-0 my-2"
        onclick="showLogin(); return false;">Logowanie</button>
      <button class="btn btn-primary my-md-0 my-2" onclick="showRegister(); return false;">Rejestracja</button>
    </div>
    <button class="navbar-toggler m-0" type="button" data-toggle="collapse" data-target=".navbarSupportedContent"
      aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon m-0"></span>
    </button>
  </nav>
  <script>
    function registerUser2() {
      if (!$(".bootbox-body form").valid())
        return false;

      var login = $('.bootbox-body form #registerName').val();
      var email = $('.bootbox-body form #registerEmail').val();
      var pass = $('.bootbox-body form #registerPass').val();
      var pass2 = $('.bootbox-body form #registerPass2').val();

      if (pass != pass2) {
        bootbox.alert('Hasło oraz powtórzenie hasła nie zgadzają się!');
        return false;
      }

      if (login.trim() == "" || pass.trim() == "" || email.trim() == "" || pass2.trim() == "")
        return false;


      command("register", { 'login': login, 'pass': pass, 'email': email }, function (res) {
        if (res != 'OK') {
          bootbox.alert(res);
        }
        else {
          bootbox.alert('Pomyślnie zarejestrowano! Teraz możesz się zalogować.', function () { bootbox.hideAll(); });
        }
      });
    }

    function loginUser2() {
      var login = $('.bootbox-body form #loginName').val();
      var pass = $('.bootbox-body form #loginPass').val();

      if (login.trim() == "" || pass.trim() == "")
        return;

      command("login", { 'login': login, 'pass': pass }, function (res) {
        if (res != 'OK')
          bootbox.alert(res);
        else
          location.reload();
      });
    }

    function resetUser() {
      var login = $('.bootbox-body form #resetName').val();

      if (login.trim() == "")
        return;

      $('.bootbox-body form #resetName').prop('disabled', true);

      command("reset_pass", { 'login': login }, function (res) {
        if (res != 'OK') {
          bootbox.alert(res);
          $('.bootbox-body form #resetName').prop('disabled', false);
        }
        else
          bootbox.alert("Prośba o restart hasła została wysłana. Sprawdź swoją skrzynkę odbiorczą oraz folder spam.");
      });
    }

    function showLogin() {
      var form = $("#loginForm").html();

      bootbox.confirm({
        message: form,
        buttons: {
          confirm: {
            label: 'Zaloguj',
            className: 'btn-primary'
          },
          cancel: {
            label: 'Anuluj',
            className: 'btn-secondary'
          }
        },
        callback: function (result) {
          if (!result)
            return true;

          loginUser2();
          return false;
        }
      });
    }

    function showReset() {
      var form = $("#resetForm").html();

      bootbox.confirm({
        message: form,
        buttons: {
          confirm: {
            label: 'Resetuj hasło',
            className: 'btn-primary'
          },
          cancel: {
            label: 'Anuluj',
            className: 'btn-secondary'
          }
        },
        callback: function (result) {
          if (!result)
            return true;

          resetUser();
          return false;
        }
      });
    }

    function showRegister() {
      var form = $("#registerForm").html();

      bootbox.confirm({
        message: form,
        buttons: {
          confirm: {
            label: 'Zarejestruj',
            className: 'btn-primary'
          },
          cancel: {
            label: 'Anuluj',
            className: 'btn-secondary'
          }
        },
        callback: function (result) {
          if (!result)
            return true;

          // do something
          registerUser2();
          return false;
        }
      });

      $(".bootbox-body form").validate({
        debug: true,
        rules: {
          registerName: { required: true, minlength: 3, maxlength: 24 },
          registerEmail: "required",
          registerPass: { required: true, minlength: 5 },
          registerPass2: { required: true, minlength: 5, equalTo: ".bootbox-body form #registerPass" },
        },
        messages: {
          registerName:
          {
            required: "Podaj login",
            minlength: "Login musi mieć minimum 3 znaki.",
            maxlength: "Login może mieć maksymalnie 24 znaki.",
          },
          registerEmail: "Podaj poprawny email",
          registerPass:
          {
            required: "Podaj hasło",
            minlength: "Hasło musi mieć minimum 5 znaków.",
          },
          registerPass2:
          {
            required: "Podaj powtórzenie hasła",
            minlength: "Powtórzenie hasła musi mieć minimum 5 znaków.",
            equalTo: "Hasło oraz powtórzenie hasła nie zgadzają się."
          }
        }
      });
    }

    runjQuery(function () {
      $(document).ready(function () {
        var AutocompleteLoaded = false;
        var LastAutocompleteSearch = "";
        var AutocompleteList = null;



        $("#searchInput").on("keydown", function search(e) {
          if (!AutocompleteLoaded) {
            AutocompleteLoaded = true;

            let scriptEle = document.createElement("script");
            scriptEle.setAttribute("src", "https://cdn.ogladajanime.pl/js/search.js?20230427102814");
            document.body.appendChild(scriptEle);

            $.ajax({
              type: "POST",
              url: '/manager.php?action=get_anime_names',
              async: true,
              success: function (res) {
                var obj = getJsonObject(res);

                if (obj != null && obj.json != null) {
                  AutocompleteList = obj.json;

                  if (typeof autocompletesearch === "function")
                    autocompletesearch(document.getElementById("searchInput"), AutocompleteList);
                }
              }
            });
          }

          if (e.keyCode == 13 && (typeof autocompletesearch !== "function" || AutocompleteList == null)) {
            let curSearch = $(this).val();
            anime_search(curSearch, 'name');
          }
        });

        $('.navbar-nav>li>a').on('click', function () {
          if ($(this).hasClass('dropdown-toggle'))
            return;

          $('.navbar-collapse').collapse('hide');
        });

        $('.navbar-nav>li>div>a').on('click', function () {
          if ($(this).hasClass('dropdown-toggle'))
            return;

          $('.navbar-collapse').collapse('hide');
        });

        $('.navbar-nav>li>ul>li').on('click', function () {
          $('.navbar-collapse').collapse('hide');
        });

      });
    });
  </script>
  <style>
    .autocomplete {
      position: relative;
      display: inline-block;
    }

    .autocomplete-items {
      position: absolute;
      border: 1px solid #d4d4d4;
      border-bottom: none;
      border-top: none;
      z-index: 99;
      top: 100%;
    }

    .autocomplete-items div {
      padding: 3px;
      cursor: pointer;
      background-color: #111;
      border-bottom: 1px solid #d4d4d4;
    }

    .autocomplete-items div:hover {
      background-color: #222;
    }

    .autocomplete-active {
      background-color: #333 !important;
      color: #fff;
    }

    .top-nav:hover {
      transform: scale(1.02);
      -webkit-transform: scale(1.02);
      -webkit-filter: grayscale(100%);
      filter: grayscale(100%);
    }

    .top-nav-text:hover {
      transform: scale(1.05);
      -webkit-transform: scale(1.05);
    }
  </style>
  <div id="loadingSection" style="display: none;">
    <div class="container">
      <section>
        <div class="row justify-content-center">
          <div class="col-8">
            <div class="card bg-white">
              <div class="row card-body justify-content-center">
                Ładowanie...
              </div>
            </div>
          </div>
        </div>
      </section>
    </div>
  </div>
  <div id="site-content">
    <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@id": "https://ogladajanime.pl/anime/jujutsu-kaisen-tv",
    "@type": "TVSeries",
    "name": "Jujutsu Kaisen (TV)",
    "image": {
        "@type": "ImageObject",
        "url": "https://cdn.ogladajanime.pl/images/anime/14496/450w.webp?20230412144310"
    },
    "thumbnailUrl": "https://cdn.ogladajanime.pl/images/anime/14496/450w.webp?20230412144310",
    "aggregateRating": {
        "@type": "AggregateRating",
        "ratingValue": "9.1",
        "bestRating": "10",
        "reviewCount": 3830    }
}</script>
    <div class="container-fluid">
      <section>
        <div class="row mx-xl-5 new-text">
          <div class="col-12 col-md-4 order-1 order-md-2">
            <div class="row px-4">
              <div class="col-12 card bg-white mb-3" style="max-width: 300px; margin: auto;">
                <div class="row card-body justify-content-center p-0 py-2" style=" align-items: center;">
                  <h4 class="col-6 text-right m-0 p-0 pr-1">9.1/10</h4>
                  <p class="col-6 text-left m-0 p-0 pt-2">3830 głosów</p>
                  <p id="my_anime_rate" style="display: block; margin: 0;">
                    <a href="#" onclick="return updateAnimeRate(this, 14496)" value="1" title="Tragedia (1)"
                      class="fa fa-gold fa-star-o"></a>
                    <a href="#" onclick="return updateAnimeRate(this, 14496)" value="2" title="Bardzo złe (2)"
                      class="fa fa-gold fa-star-o"></a>
                    <a href="#" onclick="return updateAnimeRate(this, 14496)" value="3" title="Złe (3)"
                      class="fa fa-gold fa-star-o"></a>
                    <a href="#" onclick="return updateAnimeRate(this, 14496)" value="4" title="Słabe (4)"
                      class="fa fa-gold fa-star-o"></a>
                    <a href="#" onclick="return updateAnimeRate(this, 14496)" value="5" title="Średnie (5)"
                      class="fa fa-gold fa-star-o"></a>
                    <a href="#" onclick="return updateAnimeRate(this, 14496)" value="6" title="Niezłe (6)"
                      class="fa fa-gold fa-star-o"></a>
                    <a href="#" onclick="return updateAnimeRate(this, 14496)" value="7" title="Dobre (7)"
                      class="fa fa-gold fa-star-o"></a>
                    <a href="#" onclick="return updateAnimeRate(this, 14496)" value="8" title="Bardzo dobre (8)"
                      class="fa fa-gold fa-star-o"></a>
                    <a href="#" onclick="return updateAnimeRate(this, 14496)" value="9" title="Świetne (9)"
                      class="fa fa-gold fa-star-o"></a>
                    <a href="#" onclick="return updateAnimeRate(this, 14496)" value="10" title="Wspaniałe (10)"
                      class="fa  fa-star-o"></a>
                  </p>
                  <label class="mt-2 mb-0">
                    <b>Dodaj do listy: </b>
                    <select id="anime_status" class="list-select" onchange="updateAnimeStatus(this,14496);">
                      <option value="0" selected="">Nie oglądam</option>
                      <option value="1">Oglądam</option>
                      <option value="2">Obejrzane</option>
                      <option value="3">Planuje</option>
                      <option value="4">Wstrzymane</option>
                      <option value="5">Porzucone</option>
                    </select>
                  </label>
                  <div class="col-12 text-center">
                    <div class="row mt-2">
                      <div class="col-6 m-0 p-0">
                        <p class="m-0 p-0">Ogląda: <b>8308</b></p>
                        <p class="m-0 p-0">Obejrzało: <b>5106</b></p>
                        <p class="m-0 p-0">Planuje: <b>1105</b></p>
                      </div>
                      <div class="col-6 m-0 p-0">
                        <p class="m-0 p-0">Wstrzymało: <b>117</b></p>
                        <p class="m-0 p-0">Porzuciło: <b>79</b></p>
                        <div class="col-12 text-center m-0 p-0">
                          <button class="badge badge-outline-secondary text-gray p-1 m-0"
                            onclick="bootbox.alert('Zaloguj się aby edytować anime.'); return false;">Edytuj
                            anime</button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="col-12 col-md-8 new-text mb-3 order-2 order-md-1">
            <div class="row">
              <div class="col-3 p-0 pl-2">
                <img class="img-fluid lozad rounded float-right" height="600" width="425"
                  style="aspect-ratio: 425/600 !important;"
                  data-srcset="https://cdn.ogladajanime.pl/images/anime/14496/450w.webp?20230412144310 450w" \=""
                  data-sizes="auto" sizes="100px"
                  src="https://cdn.ogladajanime.pl/images/anime/14496/0w.webp?20230412144310" alt="Jujutsu Kaisen (TV)"
                  srcset="https://cdn.ogladajanime.pl/images/anime/14496/450w.webp?20230412144310 450w"
                  data-loaded="true">
              </div>
              <div class="col-9 text-left">
                <h4 id="anime_name_id" anime_id="14496" class="m-0">Jujutsu Kaisen (TV)</h4>
                <i class="text-muted text-trim">Sorcery Fight|呪術廻戦|Jjk</i>
                <div class="outlines mt-1">
                  <span class="btn disabled btn-outline-warning p-0 px-2">TV</span>
                  <span class="btn disabled btn-outline-warning p-0 px-2 ml-1">PG-13</span>
                  <span class="btn disabled btn-outline-secondary p-0 px-2 ml-1"><i class="fa fa-eye"> 698
                      214</i></span>
                </div>
                <p id="animeDesc" class="text-gray content hide-content mb-0 mt-3">Yuuji Itadori jest licealistą, który
                  spędza całe dnie na odwiedzaniu swojego chorego dziadka. Chociaż wygląda jak przeciętny nastolatek,
                  posiada ogromną siłę fizyczną. Każdy klub sportowy chce, żeby chłopak do niego dołączył, ale Itadori
                  wolałby spędzać czas z wyrzutkami ze szkoły w kółku okultystycznym. Pewnego dnia klubowi udaje się
                  zdobyć zapieczętowany, przeklęty przedmiot, ale niewiele wiedzą na jego temat. Jaki terror wywołają,
                  kiedy złamią pieczęć?</p>
                <a id="descShow" class="m-0" href="#" onclick="showMore(this); return false;">[więcej]</a>
                <div class="row text-gray mt-3">
                  <div class="col-12 col-sm-6 col-lg-5">
                    <p class="m-0"><b class="text-muted">Odcinki:</b> 24</p>
                    <p class="m-0"><b class="text-muted">Czas odcinka:</b> 24 min.</p>
                    <p class="m-0"><b class="text-muted">Status:</b> Zakończone</p>
                    <p class="m-0"><b class="text-muted">Start emisji:</b> 2020-10-03</p>
                    <p class="m-0"><b class="text-muted">Koniec emisji:</b> 2021-03-27</p>
                  </div>
                  <div class="col-12 col-sm-6 col-lg-7">
                    <div class="row">
                      <div class="col-12">
                        <span class="mr-1"><b class="text-muted">Gatunki:</b></span><span
                          class="badge badge-outline-secondary text-gray mr-1" href="/search/name/Akcja"
                          onclick="anime_search('Akcja', 'name'); return false;">
                          Akcja </span><span class="badge badge-outline-secondary text-gray mr-1"
                          href="/search/name/Award-Winning"
                          onclick="anime_search('Award Winning', 'name'); return false;">
                          Award Winning </span><span class="badge badge-outline-secondary text-gray mr-1"
                          href="/search/name/Demony" onclick="anime_search('Demony', 'name'); return false;">
                          Demony </span><span class="badge badge-outline-secondary text-gray mr-1"
                          href="/search/name/Fantasy" onclick="anime_search('Fantasy', 'name'); return false;">
                          Fantasy </span><span class="badge badge-outline-secondary text-gray mr-1"
                          href="/search/name/Horror" onclick="anime_search('Horror', 'name'); return false;">
                          Horror </span><span class="badge badge-outline-secondary text-gray mr-1"
                          href="/search/name/Nadprzyrodzone"
                          onclick="anime_search('Nadprzyrodzone', 'name'); return false;">
                          Nadprzyrodzone </span><span class="badge badge-outline-secondary text-gray mr-1"
                          href="/search/name/Shounen" onclick="anime_search('Shounen', 'name'); return false;">
                          Shounen </span><span class="badge badge-outline-secondary text-gray mr-1"
                          href="/search/name/Szkolne" onclick="anime_search('Szkolne', 'name'); return false;">
                          Szkolne </span>
                      </div>
                      <div class="col-12 mt-1">
                        <span class="mr-1"><b class="text-muted">Tagi:</b></span><span
                          class="badge badge-outline-secondary text-gray mr-1" href="/search/name/Anioły/demony"
                          onclick="anime_search('Anioły/demony', 'name'); return false;">
                          Anioły/demony </span><span class="badge badge-outline-secondary text-gray mr-1"
                          href="/search/name/Dzielenie-Ciała"
                          onclick="anime_search('Dzielenie Ciała', 'name'); return false;">
                          Dzielenie Ciała </span><span class="badge badge-outline-secondary text-gray mr-1"
                          href="/search/name/Fantastyka-Współczesna"
                          onclick="anime_search('Fantastyka Współczesna', 'name'); return false;">
                          Fantastyka Współczesna </span><span class="badge badge-outline-secondary text-gray mr-1"
                          href="/search/name/Przemoc" onclick="anime_search('Przemoc', 'name'); return false;">
                          Przemoc </span>
                      </div>
                      <div class="col-12 mt-1">
                        <span class="mr-1"><b class="text-muted">Studio:</b></span><span
                          class="badge badge-outline-secondary text-gray mr-1" href="#">
                          Toho Animation </span><span class="badge badge-outline-secondary text-gray mr-1" href="#">
                          Mainichi Broadcasting System </span><span class="badge badge-outline-secondary text-gray mr-1"
                          href="#">
                          Shueisha </span><span class="badge badge-outline-secondary text-gray mr-1" href="#">
                          Dugout </span>
                      </div>
                    </div>
                  </div>
                  <div class="col-12 p-4 text-center">
                    <badge class="badge badge-danger col-12 text-wrap">
                      <p class="h6 py-3">Zaloguj się aby uzyskać dostęp do wszystkich treści i funkcji strony.</p>
                      <p>
                        <button class="btn btn-secondary mr-4" onclick="showRegister(); return false;">Zarejestruj
                          się</button>
                        <button class="btn btn-secondary" onclick="showLogin(); return false;">Zaloguj się</button>
                      </p>
                    </badge>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="row mx-xl-5 new-text">
          <div class="col-12 col-lg-9">
            <div class="row">
              <div class="spolecznoscinet col-12 img-fluid" id="spolecznosci-9190" data-min-width="750"></div>
              <div class="col-12 col-xl-3 order-2 order-xl-1 px-4">
                <div class="row">
                  <div class="col-12 p-0 pr-2" style="background-color: black; border-radius: 5px;">
                    <input id="ep_search" class="mx-2 mt-2" style="background-color: #212121; color: #555;" type="text"
                      placeholder="Wyszukaj..." onkeyup="searchEpisode();">
                    <button class="m-0 ml-1 mt-2 btn btn-sm btn-primary py-0 align-top"
                      onclick="reverseEpisodes(); return false;" aria-label="Odwróć"> <i class="fa fa-sort"></i>
                    </button>
                    <ul id="ep_list" class="list-group-striped pl-2 my-2"
                      style="min-height: 100px; max-height: 27vw; overflow-y: scroll;">
                      <li class=" list-group-item list-group-item-action  py-1 px-1" title="Zapowiedź"
                        onclick="changeEpisode(this, '0', 177780); return false;" value="0" ep_id="177780">
                        <div style="display: flex; justify-content: space-between; width: 100%;">
                          <div class="m-0 p-0" style="float: left;">
                            <span class="m-0 mr-2 p-1 badge badge-primary" style="float: left;"
                              title="To nie Filler">0</span>
                            <p class="text-trim m-0 p-0">Zapowiedź</p>
                          </div>
                        </div>
                      </li>
                      <li class=" list-group-item list-group-item-action  py-1 px-1" title="Ryoumen Sukuna"
                        onclick="changeEpisode(this, '1', 177779); return false;" value="1" ep_id="177779">
                        <div style="display: flex; justify-content: space-between; width: 100%;">
                          <div class="m-0 p-0" style="float: left;">
                            <span class="m-0 mr-2 p-1 badge badge-primary" style="float: left;"
                              title="To nie Filler">1</span>
                            <p class="text-trim m-0 p-0">Ryoumen Sukuna</p>
                          </div>
                          <img class="m-0 p-0" src="https://cdn.ogladajanime.pl/images/flags/en.png" alt="en"
                            height="15" width="25"
                            style="box-shadow: 0px 0px 10px 3px rgba(0,0,0,0.5); margin-top: 3px !important; float: right; display: inline-block;">
                        </div>
                      </li>
                      <li class="list-group-item list-group-item-action active py-1 px-1" title="Dla siebie"
                        onclick="changeEpisode(this, '2', 178266); return false;" value="2" ep_id="178266" style="">
                        <div style="display: flex; justify-content: space-between; width: 100%;">
                          <div class="m-0 p-0" style="float: left;">
                            <span class="m-0 mr-2 p-1 badge badge-primary" style="float: left;"
                              title="To nie Filler">2</span>
                            <p class="text-trim m-0 p-0">Dla siebie</p>
                          </div>
                          <img class="m-0 p-0" src="https://cdn.ogladajanime.pl/images/flags/en.png" alt="en"
                            height="15" width="25"
                            style="box-shadow: 0px 0px 10px 3px rgba(0,0,0,0.5); margin-top: 3px !important; float: right; display: inline-block;">
                        </div>
                      </li>
                      <li class=" list-group-item list-group-item-action  py-1 px-1" title="Dziewczyna ze stali"
                        onclick="changeEpisode(this, '3', 178317); return false;" value="3" ep_id="178317">
                        <div style="display: flex; justify-content: space-between; width: 100%;">
                          <div class="m-0 p-0" style="float: left;">
                            <span class="m-0 mr-2 p-1 badge badge-primary" style="float: left;"
                              title="To nie Filler">3</span>
                            <p class="text-trim m-0 p-0">Dziewczyna ze stali</p>
                          </div>
                          <img class="m-0 p-0" src="https://cdn.ogladajanime.pl/images/flags/en.png" alt="en"
                            height="15" width="25"
                            style="box-shadow: 0px 0px 10px 3px rgba(0,0,0,0.5); margin-top: 3px !important; float: right; display: inline-block;">
                        </div>
                      </li>
                      <li class=" list-group-item list-group-item-action  py-1 px-1"
                        title="Ziemski żywot przeklętego łona" onclick="changeEpisode(this, '4', 183504); return false;"
                        value="4" ep_id="183504">
                        <div style="display: flex; justify-content: space-between; width: 100%;">
                          <div class="m-0 p-0" style="float: left;">
                            <span class="m-0 mr-2 p-1 badge badge-primary" style="float: left;"
                              title="To nie Filler">4</span>
                            <p class="text-trim m-0 p-0">Ziemski żywot przeklętego łona</p>
                          </div>
                          <img class="m-0 p-0" src="https://cdn.ogladajanime.pl/images/flags/en.png" alt="en"
                            height="15" width="25"
                            style="box-shadow: 0px 0px 10px 3px rgba(0,0,0,0.5); margin-top: 3px !important; float: right; display: inline-block;">
                        </div>
                      </li>
                      <li class=" list-group-item list-group-item-action  py-1 px-1"
                        title="Przeklęte łono musi umrzeć. Część 2"
                        onclick="changeEpisode(this, '5', 183635); return false;" value="5" ep_id="183635">
                        <div style="display: flex; justify-content: space-between; width: 100%;">
                          <div class="m-0 p-0" style="float: left;">
                            <span class="m-0 mr-2 p-1 badge badge-primary" style="float: left;"
                              title="To nie Filler">5</span>
                            <p class="text-trim m-0 p-0">Przeklęte łono musi umrzeć. Część 2</p>
                          </div>
                          <img class="m-0 p-0" src="https://cdn.ogladajanime.pl/images/flags/en.png" alt="en"
                            height="15" width="25"
                            style="box-shadow: 0px 0px 10px 3px rgba(0,0,0,0.5); margin-top: 3px !important; float: right; display: inline-block;">
                        </div>
                      </li>
                      <li class=" list-group-item list-group-item-action  py-1 px-1" title="Po deszczu"
                        onclick="changeEpisode(this, '6', 183785); return false;" value="6" ep_id="183785">
                        <div style="display: flex; justify-content: space-between; width: 100%;">
                          <div class="m-0 p-0" style="float: left;">
                            <span class="m-0 mr-2 p-1 badge badge-primary" style="float: left;"
                              title="To nie Filler">6</span>
                            <p class="text-trim m-0 p-0">Po deszczu</p>
                          </div>
                          <img class="m-0 p-0" src="https://cdn.ogladajanime.pl/images/flags/en.png" alt="en"
                            height="15" width="25"
                            style="box-shadow: 0px 0px 10px 3px rgba(0,0,0,0.5); margin-top: 3px !important; float: right; display: inline-block;">
                        </div>
                      </li>
                      <li class=" list-group-item list-group-item-action  py-1 px-1" title="Napad"
                        onclick="changeEpisode(this, '7', 184315); return false;" value="7" ep_id="184315">
                        <div style="display: flex; justify-content: space-between; width: 100%;">
                          <div class="m-0 p-0" style="float: left;">
                            <span class="m-0 mr-2 p-1 badge badge-primary" style="float: left;"
                              title="To nie Filler">7</span>
                            <p class="text-trim m-0 p-0">Napad</p>
                          </div>
                          <img class="m-0 p-0" src="https://cdn.ogladajanime.pl/images/flags/en.png" alt="en"
                            height="15" width="25"
                            style="box-shadow: 0px 0px 10px 3px rgba(0,0,0,0.5); margin-top: 3px !important; float: right; display: inline-block;">
                        </div>
                      </li>
                      <li class=" list-group-item list-group-item-action  py-1 px-1" title="Nuda"
                        onclick="changeEpisode(this, '8', 184314); return false;" value="8" ep_id="184314">
                        <div style="display: flex; justify-content: space-between; width: 100%;">
                          <div class="m-0 p-0" style="float: left;">
                            <span class="m-0 mr-2 p-1 badge badge-primary" style="float: left;"
                              title="To nie Filler">8</span>
                            <p class="text-trim m-0 p-0">Nuda</p>
                          </div>
                          <img class="m-0 p-0" src="https://cdn.ogladajanime.pl/images/flags/en.png" alt="en"
                            height="15" width="25"
                            style="box-shadow: 0px 0px 10px 3px rgba(0,0,0,0.5); margin-top: 3px !important; float: right; display: inline-block;">
                        </div>
                      </li>
                      <li class=" list-group-item list-group-item-action  py-1 px-1" title="Narybek i odwrócona kara"
                        onclick="changeEpisode(this, '9', 184313); return false;" value="9" ep_id="184313">
                        <div style="display: flex; justify-content: space-between; width: 100%;">
                          <div class="m-0 p-0" style="float: left;">
                            <span class="m-0 mr-2 p-1 badge badge-primary" style="float: left;"
                              title="To nie Filler">9</span>
                            <p class="text-trim m-0 p-0">Narybek i odwrócona kara</p>
                          </div>
                          <img class="m-0 p-0" src="https://cdn.ogladajanime.pl/images/flags/en.png" alt="en"
                            height="15" width="25"
                            style="box-shadow: 0px 0px 10px 3px rgba(0,0,0,0.5); margin-top: 3px !important; float: right; display: inline-block;">
                        </div>
                      </li>
                      <li class=" list-group-item list-group-item-action  py-1 px-1" title="Pasywne Przeobrażenie"
                        onclick="changeEpisode(this, '10', 184312); return false;" value="10" ep_id="184312">
                        <div style="display: flex; justify-content: space-between; width: 100%;">
                          <div class="m-0 p-0" style="float: left;">
                            <span class="m-0 mr-2 p-1 badge badge-primary" style="float: left;"
                              title="To nie Filler">10</span>
                            <p class="text-trim m-0 p-0">Pasywne Przeobrażenie</p>
                          </div>
                          <img class="m-0 p-0" src="https://cdn.ogladajanime.pl/images/flags/en.png" alt="en"
                            height="15" width="25"
                            style="box-shadow: 0px 0px 10px 3px rgba(0,0,0,0.5); margin-top: 3px !important; float: right; display: inline-block;">
                        </div>
                      </li>
                      <li class=" list-group-item list-group-item-action  py-1 px-1" title="Twardogłowi głupcy"
                        onclick="changeEpisode(this, '11', 184311); return false;" value="11" ep_id="184311">
                        <div style="display: flex; justify-content: space-between; width: 100%;">
                          <div class="m-0 p-0" style="float: left;">
                            <span class="m-0 mr-2 p-1 badge badge-primary" style="float: left;"
                              title="To nie Filler">11</span>
                            <p class="text-trim m-0 p-0">Twardogłowi głupcy</p>
                          </div>
                          <img class="m-0 p-0" src="https://cdn.ogladajanime.pl/images/flags/en.png" alt="en"
                            height="15" width="25"
                            style="box-shadow: 0px 0px 10px 3px rgba(0,0,0,0.5); margin-top: 3px !important; float: right; display: inline-block;">
                        </div>
                      </li>
                      <li class=" list-group-item list-group-item-action  py-1 px-1" title="Pewnego dnia, do ciebie"
                        onclick="changeEpisode(this, '12', 184310); return false;" value="12" ep_id="184310">
                        <div style="display: flex; justify-content: space-between; width: 100%;">
                          <div class="m-0 p-0" style="float: left;">
                            <span class="m-0 mr-2 p-1 badge badge-primary" style="float: left;"
                              title="To nie Filler">12</span>
                            <p class="text-trim m-0 p-0">Pewnego dnia, do ciebie</p>
                          </div>
                          <img class="m-0 p-0" src="https://cdn.ogladajanime.pl/images/flags/pl.png" alt="pl"
                            height="15" width="25"
                            style="box-shadow: 0px 0px 10px 3px rgba(0,0,0,0.5); margin-top: 3px !important; float: right; display: inline-block;">
                        </div>
                      </li>
                      <li class=" list-group-item list-group-item-action  py-1 px-1" title="Do zobaczenia jutro"
                        onclick="changeEpisode(this, '13', 184309); return false;" value="13" ep_id="184309">
                        <div style="display: flex; justify-content: space-between; width: 100%;">
                          <div class="m-0 p-0" style="float: left;">
                            <span class="m-0 mr-2 p-1 badge badge-primary" style="float: left;"
                              title="To nie Filler">13</span>
                            <p class="text-trim m-0 p-0">Do zobaczenia jutro</p>
                          </div>
                          <img class="m-0 p-0" src="https://cdn.ogladajanime.pl/images/flags/en.png" alt="en"
                            height="15" width="25"
                            style="box-shadow: 0px 0px 10px 3px rgba(0,0,0,0.5); margin-top: 3px !important; float: right; display: inline-block;">
                        </div>
                      </li>
                      <li class=" list-group-item list-group-item-action  py-1 px-1"
                        title="Zawody w szkole siostrzanej w Kioto, bitwa drużynowa, część 0"
                        onclick="changeEpisode(this, '14', 184308); return false;" value="14" ep_id="184308">
                        <div style="display: flex; justify-content: space-between; width: 100%;">
                          <div class="m-0 p-0" style="float: left;">
                            <span class="m-0 mr-2 p-1 badge badge-primary" style="float: left;"
                              title="To nie Filler">14</span>
                            <p class="text-trim m-0 p-0">Zawody w szkole siostrzanej w Kioto, bitwa drużynowa, część 0
                            </p>
                          </div>
                          <img class="m-0 p-0" src="https://cdn.ogladajanime.pl/images/flags/en.png" alt="en"
                            height="15" width="25"
                            style="box-shadow: 0px 0px 10px 3px rgba(0,0,0,0.5); margin-top: 3px !important; float: right; display: inline-block;">
                        </div>
                      </li>
                      <li class=" list-group-item list-group-item-action  py-1 px-1"
                        title="Zawody z siostrzaną szkołą Kioto, bitwa drużynowa, część 1"
                        onclick="changeEpisode(this, '15', 184307); return false;" value="15" ep_id="184307">
                        <div style="display: flex; justify-content: space-between; width: 100%;">
                          <div class="m-0 p-0" style="float: left;">
                            <span class="m-0 mr-2 p-1 badge badge-primary" style="float: left;"
                              title="To nie Filler">15</span>
                            <p class="text-trim m-0 p-0">Zawody z siostrzaną szkołą Kioto, bitwa drużynowa, część 1</p>
                          </div>
                          <img class="m-0 p-0" src="https://cdn.ogladajanime.pl/images/flags/en.png" alt="en"
                            height="15" width="25"
                            style="box-shadow: 0px 0px 10px 3px rgba(0,0,0,0.5); margin-top: 3px !important; float: right; display: inline-block;">
                        </div>
                      </li>
                      <li class=" list-group-item list-group-item-action  py-1 px-1"
                        title="Zawody z siostrzaną szkołą Kioto, bitwa drużynowa, część 2"
                        onclick="changeEpisode(this, '16', 184306); return false;" value="16" ep_id="184306">
                        <div style="display: flex; justify-content: space-between; width: 100%;">
                          <div class="m-0 p-0" style="float: left;">
                            <span class="m-0 mr-2 p-1 badge badge-primary" style="float: left;"
                              title="To nie Filler">16</span>
                            <p class="text-trim m-0 p-0">Zawody z siostrzaną szkołą Kioto, bitwa drużynowa, część 2</p>
                          </div>
                          <img class="m-0 p-0" src="https://cdn.ogladajanime.pl/images/flags/en.png" alt="en"
                            height="15" width="25"
                            style="box-shadow: 0px 0px 10px 3px rgba(0,0,0,0.5); margin-top: 3px !important; float: right; display: inline-block;">
                        </div>
                      </li>
                      <li class=" list-group-item list-group-item-action  py-1 px-1"
                        title="Zawody z siostrzaną szkołą Kioto, bitwa drużynowa, część 3"
                        onclick="changeEpisode(this, '17', 184305); return false;" value="17" ep_id="184305">
                        <div style="display: flex; justify-content: space-between; width: 100%;">
                          <div class="m-0 p-0" style="float: left;">
                            <span class="m-0 mr-2 p-1 badge badge-primary" style="float: left;"
                              title="To nie Filler">17</span>
                            <p class="text-trim m-0 p-0">Zawody z siostrzaną szkołą Kioto, bitwa drużynowa, część 3</p>
                          </div>
                          <img class="m-0 p-0" src="https://cdn.ogladajanime.pl/images/flags/en.png" alt="en"
                            height="15" width="25"
                            style="box-shadow: 0px 0px 10px 3px rgba(0,0,0,0.5); margin-top: 3px !important; float: right; display: inline-block;">
                        </div>
                      </li>
                      <li class=" list-group-item list-group-item-action  py-1 px-1" title="Mędrzec"
                        onclick="changeEpisode(this, '18', 184304); return false;" value="18" ep_id="184304">
                        <div style="display: flex; justify-content: space-between; width: 100%;">
                          <div class="m-0 p-0" style="float: left;">
                            <span class="m-0 mr-2 p-1 badge badge-primary" style="float: left;"
                              title="To nie Filler">18</span>
                            <p class="text-trim m-0 p-0">Mędrzec</p>
                          </div>
                          <img class="m-0 p-0" src="https://cdn.ogladajanime.pl/images/flags/en.png" alt="en"
                            height="15" width="25"
                            style="box-shadow: 0px 0px 10px 3px rgba(0,0,0,0.5); margin-top: 3px !important; float: right; display: inline-block;">
                        </div>
                      </li>
                      <li class=" list-group-item list-group-item-action  py-1 px-1" title="Czarny błysk"
                        onclick="changeEpisode(this, '19', 188100); return false;" value="19" ep_id="188100">
                        <div style="display: flex; justify-content: space-between; width: 100%;">
                          <div class="m-0 p-0" style="float: left;">
                            <span class="m-0 mr-2 p-1 badge badge-primary" style="float: left;"
                              title="To nie Filler">19</span>
                            <p class="text-trim m-0 p-0">Czarny błysk</p>
                          </div>
                          <img class="m-0 p-0" src="https://cdn.ogladajanime.pl/images/flags/en.png" alt="en"
                            height="15" width="25"
                            style="box-shadow: 0px 0px 10px 3px rgba(0,0,0,0.5); margin-top: 3px !important; float: right; display: inline-block;">
                        </div>
                      </li>
                      <li class=" list-group-item list-group-item-action  py-1 px-1" title="Niestandardowy"
                        onclick="changeEpisode(this, '20', 184303); return false;" value="20" ep_id="184303">
                        <div style="display: flex; justify-content: space-between; width: 100%;">
                          <div class="m-0 p-0" style="float: left;">
                            <span class="m-0 mr-2 p-1 badge badge-primary" style="float: left;"
                              title="To nie Filler">20</span>
                            <p class="text-trim m-0 p-0">Niestandardowy</p>
                          </div>
                          <img class="m-0 p-0" src="https://cdn.ogladajanime.pl/images/flags/en.png" alt="en"
                            height="15" width="25"
                            style="box-shadow: 0px 0px 10px 3px rgba(0,0,0,0.5); margin-top: 3px !important; float: right; display: inline-block;">
                        </div>
                      </li>
                      <li class=" list-group-item list-group-item-action  py-1 px-1" title="Jujutsu Koshien"
                        onclick="changeEpisode(this, '21', 184302); return false;" value="21" ep_id="184302">
                        <div style="display: flex; justify-content: space-between; width: 100%;">
                          <div class="m-0 p-0" style="float: left;">
                            <span class="m-0 mr-2 p-1 badge badge-primary" style="float: left;"
                              title="To nie Filler">21</span>
                            <p class="text-trim m-0 p-0">Jujutsu Koshien</p>
                          </div>
                          <img class="m-0 p-0" src="https://cdn.ogladajanime.pl/images/flags/en.png" alt="en"
                            height="15" width="25"
                            style="box-shadow: 0px 0px 10px 3px rgba(0,0,0,0.5); margin-top: 3px !important; float: right; display: inline-block;">
                        </div>
                      </li>
                      <li class=" list-group-item list-group-item-action  py-1 px-1"
                        title="Źródło ślepego posłuszeństwa, część 1"
                        onclick="changeEpisode(this, '22', 184301); return false;" value="22" ep_id="184301">
                        <div style="display: flex; justify-content: space-between; width: 100%;">
                          <div class="m-0 p-0" style="float: left;">
                            <span class="m-0 mr-2 p-1 badge badge-primary" style="float: left;"
                              title="To nie Filler">22</span>
                            <p class="text-trim m-0 p-0">Źródło ślepego posłuszeństwa, część 1</p>
                          </div>
                        </div>
                      </li>
                      <li class=" list-group-item list-group-item-action  py-1 px-1"
                        title="Źródło ślepego posłuszeństwa, część 2"
                        onclick="changeEpisode(this, '23', 184300); return false;" value="23" ep_id="184300">
                        <div style="display: flex; justify-content: space-between; width: 100%;">
                          <div class="m-0 p-0" style="float: left;">
                            <span class="m-0 mr-2 p-1 badge badge-primary" style="float: left;"
                              title="To nie Filler">23</span>
                            <p class="text-trim m-0 p-0">Źródło ślepego posłuszeństwa, część 2</p>
                          </div>
                        </div>
                      </li>
                      <li class=" list-group-item list-group-item-action  py-1 px-1" title="Wspólnicy"
                        onclick="changeEpisode(this, '24', 184299); return false;" value="24" ep_id="184299">
                        <div style="display: flex; justify-content: space-between; width: 100%;">
                          <div class="m-0 p-0" style="float: left;">
                            <span class="m-0 mr-2 p-1 badge badge-primary" style="float: left;"
                              title="To nie Filler">24</span>
                            <p class="text-trim m-0 p-0">Wspólnicy</p>
                          </div>
                        </div>
                      </li>
                    </ul>
                  </div>
                </div>
              </div>
              <div class="col-12 col-xl-9 order-1 order-xl-2 px-2 mb-2">
                <div class="row">
                  <div class="col-12">

                    <div class="row">
                      <div class="col-12">
                        <div id="playerLoader" class="p-0 d-none" style="width: 97%; height: 100%; z-index: 99;">
                          <img id="gifLoaderWebp" class="p-0 m-0 lozad" width="100%" height="100%" alt="Loading..."
                            data-src="https://cdn.ogladajanime.pl/images/run3.webp">
                          <h5 class="text-center m-0 p-0"
                            style="width: 90%; position:absolute; top: 10px; left: 50%; transform: translate(-50%, 0);
                                                    text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;">
                            Szukamy dla Ciebie najlepszego playera...
                          </h5>
                          <h5 class="text-center m-0 p-0"
                            style="width: 90%; position:absolute; bottom: 10px; left: 50%; transform: translate(-50%, 0);
                                                    text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;">
                            Jeśli player się nie ładuje, spróbuj wybrać inny player, odśwież stronę oraz sprawdź swoje
                            połączenie internetowe.
                          </h5>
                        </div>
                        <div id="playerNotFound" class="p-0 d-none"
                          style="width: 97%; height: 100%; z-index: 100; position: absolute;">
                          <h5 class="text-center m-0 p-0"
                            style="width: 90%; position:absolute; bottom: 45%; left: 50%; transform: translate(-50%, 0);
                                                    text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;">
                            Brak playerów :c <br>
                            Zaloguj się aby uzyskać dostęp do wszystkich treści strony.
                          </h5>
                        </div>
                        <div id="openExternal" class="p-0 d-none"
                          style="width: 97%; height: 100%; z-index: 100; position: absolute;">
                          <h5 class="text-center m-0 p-0"
                            style="width: 90%; position:absolute; bottom: 45%; left: 50%; transform: translate(-50%, 0);
                                                    text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;">
                            <a id="openExternalUrl" href="#" target="_blank">Oglądaj na zewnętrznej stronie</a>
                          </h5>
                        </div>
                        <a id="playerStartImg" href="#" onclick="startPlayer2(this); return false;">
                          <img src="https://cdn.ogladajanime.pl/images/play.webp" alt="Odtwórz"
                            style="max-height: 150px; position: absolute; z-index: 99; margin: auto;  top: 0; left: 0; bottom: 0; right: 0;">
                        </a>
                        <script>
                          function startPlayer2(el) {
                            if (document.getElementById('download-js-script')) {
                              startPlayer3();
                              return;
                            }

                            var script = document.createElement('script');
                            script.src = 'https://cdn.ogladajanime.pl/js/download.js?20230916204830';
                            script.id = 'download-js-script';

                            script.onload = function () {
                              startPlayer3();
                            };

                            document.body.appendChild(script);
                          }

                          function startPlayer3() {
                            if (PlayerUrl != null) {
                              $('#playerLoader').removeClass('d-none');
                              $('#playerFrame').attr('src', PlayerUrl);

                              $('#reportButton').removeClass('disabled');
                            }

                            $('#playerStartImg').addClass('d-none');
                            getCdaPlayerRawUrl(178266, null, false);
                          }

                          runjQuery(function () {
                            $(document).ready(function () {
                              createPlayer();
                            });
                          });
                        </script>
                        <a id="newPlayerSource" class="ml-1 d-none"
                          style="position: absolute; z-index: 99; text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;"
                          href="#" target="__blank"></a>
                        <div id="playerEmbed" class="embed-responsive embed-responsive-16by9"
                          style="background-color: black; border:none;">
                          <iframe id="playerFrame" title="Odtwarzacz" class="d-none embed-responsive-item"
                            scrolling="no" allowfullscreen="" name="v2" allow="encrypted-media"></iframe>
                          <video id="newPlayer"
                            class="embed-responsive-item video-js vjs-default-skin vjs-big-play-centered vjs-show-big-play-button-on-pause d-none"
                            controls="" preload="auto" style="width: 100% !important; height: 100% !important;"
                            allowfullscreen="true" scrolling="no" allow="encrypted-media"></video>
                        </div>
                        <div id="playerTools" class="px-2 py-1 d-none text-trim"
                          style="background-color: black; border:none;">
                          <input type="checkbox" checked="" disabled=""> Automatycznie oznaczaj obejrzane odcinki
                          (wymaga zalogowania)
                        </div>
                      </div>
                    </div>
                  </div>
                  <div id="slow_player_info" class="col-12 text-center">
                    <badge class="badge badge-info col-12 text-wrap m-0 p-0 mb-1">
                      <p class="h6 p-0 m-0 py-1">
                        Jeśli <b>zacina</b> ci player, wyłącz akcelerację sprzętową w ustawieniach przeglądarki.
                        <button class="btn btn-sm btn-primary m-0 ml-4 px-2 py-0" onclick="showAccel(); return false;"
                          target="_blank">Poradnik</button>
                        <button class="btn btn-sm btn-danger m-0 ml-4 px-2 py-0"
                          onclick="hideSlowPlayerInfo(); return false;">Ukryj na zawsze</button>
                      </p>
                    </badge>
                  </div>
                  <div id="change_player_info" class="col-12 text-center">
                    <badge class="badge badge-info col-12 text-wrap m-0 p-0">
                      <p class="h4 m-0 p-0 float-left pl-4">↓</p>
                      <p class="h6 p-0 m-0 py-1">
                        Jeśli nie odpowiada ci tłumaczenie wybierz inne używając przycisku 'Zmień player' ;)
                        <button class="btn btn-sm btn-danger m-0 ml-4 px-2 py-0"
                          onclick="hideChangePlayerInfo(); return false;">Ukryj na zawsze</button>
                      </p>
                    </badge>
                  </div>
                  <div class="col-12 mt-2 text-center">
                    <div class="btn-group" style="float: left;">
                      <button id="changePlayerButton" value="178266" onclick="changePlayerListLoad(false);"
                        type="button" class="btn btn-glow btn-primary dropdown-toggle p-1 disabled"
                        data-toggle="dropdown" aria-expanded="false">
                        Zmień player
                      </button>
                      <div id="changePlayerData" class="dropdown-menu bg-white p-1"
                        style="width: 250px; max-height: 200px; overflow-y: scroll;">
                        Loading...
                      </div>
                    </div>
                    <button class="float-left btn btn-primary p-1 ml-2" id="watchedUpdateButton"
                      onclick="bootbox.alert(`Zaloguj się by tworzyć listy anime.`);">Dodaj do obejrzanych</button>
                    <button id="next_ep_button" class="btn btn-outline-primary p-1"
                      onclick="changeEpisode(null, 3, 178317, true); return false;">Następny</button>
                    <button id="reportButton" class="btn btn-danger p-1 float-right disabled">
                      Zgłoś player
                    </button>
                    <button id="addNewPlayerButton"
                      class="btn btn-primary p-1 mr-2 float-right d-none d-sm-block disabled" onclick="return false;">
                      Dodaj player
                    </button>
                  </div>
                </div>
              </div>
              <div class="col-12 col-xl-3 order-3 order-xl-3 px-2">
              </div>
              <div class="col-12 col-xl-9 order-4 order-xl-4 px-2 mt-2">
                <div class="row">
                  <div class="col-12 mb-0">
                    <h4 id="comment_count" style="float: left;">Komentarze (2)</h4>
                    <button id="epCommentButton" style="float: right;"
                      class="d-none btn btn-sm btn-secondary py-1 px-2">Odcinek 2</button>
                    <button id="animeCommentButton" ismobile="false" style="float: right;"
                      class="btn btn-sm btn-primary py-1 px-2 mr-2" onclick="showComments(this); return false;">Odśwież
                      Komentarze</button>
                  </div>
                </div>
                <div class="col-12 mb-4">
                  <div class="row justify-content-center">
                    <textarea class="form-control m-2 mt-0" id="animeCommentText" rows="3"
                      placeholder="Zaloguj się by pisać komentarze..." disabled=""></textarea>
                    <div class="mr-4 mt-2">
                      <input id="animeCommentSpoiler" name="animeCommentSpoiler" type="checkbox">
                      <label for="animeCommentSpoiler">Spoiler?</label>
                    </div>
                    <button id="send_anime_comment" class="btn btn-sm btn-primary"
                      onclick="sendAnimeComment(14496, 178266);" disabled="">Wyślij komentarz</button>
                  </div>
                </div>
                <div id="anime_comments" class="col-12">
                  <div class="row">
                    <p class="col-12 text-center">Teraz wyświetlamy komentarze dla <b>aktualnie oglądanego
                        odcinka</b>!<br>Wszystkie napisane wcześniej komentarze zostały przeniesione do <b>1
                        odcinka</b>.</p>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/51162" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 51162}, '/profile/51162'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/51162.webp?20230520192803"
                              alt="Lukasz06">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-primary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Odcinek: 2
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/51162"
                                    onclick="loadPage('profile', {id: 51162}, '/profile/51162'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> Lukasz06 </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>67 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(267562, 0); return false;" class="float-right"><i
                                  id="vote_down_267562" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  2</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(267562, 1); return false;" class="float-right"><i
                                  id="vote_up_267562" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  14</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(267562); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">Dobra już po 2 odcinkach podoba mi się to anime, jestem ciekawy jak się
                              rozwinie.</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/65447" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 65447}, '/profile/65447'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/0.webp?20220412093253"
                              alt="Juliannabsd">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-primary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Odcinek: 2
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/65447"
                                    onclick="loadPage('profile', {id: 65447}, '/profile/65447'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> Juliannabsd </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>85 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(261348, 0); return false;" class="float-right"><i
                                  id="vote_down_261348" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  7</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(261348, 1); return false;" class="float-right"><i
                                  id="vote_up_261348" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  10</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(261348); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">is sambody say just eat</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/142665" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 142665}, '/profile/142665'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/142665.webp?20231015143040"
                              alt="AkiraUwU">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Odcinek: 1
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/142665"
                                    onclick="loadPage('profile', {id: 142665}, '/profile/142665'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> AkiraUwU </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>7 godzin temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(289486, 0); return false;" class="float-right"><i
                                  id="vote_down_289486" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  0</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(289486, 1); return false;" class="float-right"><i
                                  id="vote_up_289486" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  0</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(289486); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">ogladane 2 raz, polecam XD<br>
                            </div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/127368" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 127368}, '/profile/127368'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/127368.webp?20231006150640"
                              alt="Sweat">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Odcinek: 1
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/127368"
                                    onclick="loadPage('profile', {id: 127368}, '/profile/127368'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> Sweat </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>10 godzin temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(289406, 0); return false;" class="float-right"><i
                                  id="vote_down_289406" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  0</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(289406, 1); return false;" class="float-right"><i
                                  id="vote_up_289406" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  0</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(289406); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">ja lubiałem jak to hollow purple na editach jest lol</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/60932" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 60932}, '/profile/60932'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/60932.webp?20231015150631"
                              alt="Just_Normal_User">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Odcinek: 1
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/60932"
                                    onclick="loadPage('profile', {id: 60932}, '/profile/60932'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> Just_Normal_User </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>wczoraj</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(289382, 0); return false;" class="float-right"><i
                                  id="vote_down_289382" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  0</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(289382, 1); return false;" class="float-right"><i
                                  id="vote_up_289382" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  2</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(289382); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">Edity mnie przekonały do anime xD</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/138376" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 138376}, '/profile/138376'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/0.webp?20220412093253"
                              alt="spoconymaksiu69">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Odcinek: 1
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/138376"
                                    onclick="loadPage('profile', {id: 138376}, '/profile/138376'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> spoconymaksiu69 </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>8 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(286958, 0); return false;" class="float-right"><i
                                  id="vote_down_286958" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  0</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(286958, 1); return false;" class="float-right"><i
                                  id="vote_up_286958" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  0</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(286958); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">Czas zacząć oglądać nie ma co <br>
                            </div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/86132" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 86132}, '/profile/86132'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/86132.webp?20230906223830"
                              alt="Haakuu">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Odcinek: 1
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/86132"
                                    onclick="loadPage('profile', {id: 86132}, '/profile/86132'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> Haakuu </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>19 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(283466, 0); return false;" class="float-right"><i
                                  id="vote_down_283466" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  1</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(283466, 1); return false;" class="float-right"><i
                                  id="vote_up_283466" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  4</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(283466); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">Nie da się zawieść mega dobre anime <br>
                              DoSłowne połączenie Naruto i Demon Slayera fajny klimat fajna historia</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/111849" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 111849}, '/profile/111849'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/0.webp?20220412093253"
                              alt="D u p a">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Odcinek: 1
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/111849"
                                    onclick="loadPage('profile', {id: 111849}, '/profile/111849'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> D u p a </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>23 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(281913, 0); return false;" class="float-right"><i
                                  id="vote_down_281913" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  0</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(281913, 1); return false;" class="float-right"><i
                                  id="vote_up_281913" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  1</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(281913); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">Ogólnie uważam że słodkie są te animacje takie i ogólnie pięknie
                              namalowane</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/64136" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 64136}, '/profile/64136'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/64136.webp?20230909220247"
                              alt="fourize">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Anime
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/64136"
                                    onclick="loadPage('profile', {id: 64136}, '/profile/64136'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> fourize </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>36 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(277956, 0); return false;" class="float-right"><i
                                  id="vote_down_277956" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  1</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(277956, 1); return false;" class="float-right"><i
                                  id="vote_up_277956" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  2</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(277956); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">rel</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/93018" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 93018}, '/profile/93018'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/93018.webp?20230830225751"
                              alt="XKONIX">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Odcinek: 1
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/93018"
                                    onclick="loadPage('profile', {id: 93018}, '/profile/93018'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> XKONIX </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>37 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(277502, 0); return false;" class="float-right"><i
                                  id="vote_down_277502" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  1</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(277502, 1); return false;" class="float-right"><i
                                  id="vote_up_277502" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  13</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(277502); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">ciekawe jak smakuje taki paluch<br>
                            </div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/99236" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 99236}, '/profile/99236'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/99236.webp?20231010223110"
                              alt="Liliana">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Odcinek: 1
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/99236"
                                    onclick="loadPage('profile', {id: 99236}, '/profile/99236'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> Liliana </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>48 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(274004, 0); return false;" class="float-right"><i
                                  id="vote_down_274004" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  0</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(274004, 1); return false;" class="float-right"><i
                                  id="vote_up_274004" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  12</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(274004); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">Czy tylko mnie rozsmieszylo jak on tego palucha zeżarł?</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/53804" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 53804}, '/profile/53804'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/53804.webp?20230823011933"
                              alt="du1pa320">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Odcinek: 1
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/53804"
                                    onclick="loadPage('profile', {id: 53804}, '/profile/53804'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> du1pa320 </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>52 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(272973, 0); return false;" class="float-right"><i
                                  id="vote_down_272973" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  0</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(272973, 1); return false;" class="float-right"><i
                                  id="vote_up_272973" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  9</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(272973); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">rewatch przed shibuya arc</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/79687" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 79687}, '/profile/79687'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/79687.webp?20230801211515"
                              alt="mapawq">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Odcinek: 1
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/79687"
                                    onclick="loadPage('profile', {id: 79687}, '/profile/79687'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> mapawq </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>54 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(272073, 0); return false;" class="float-right"><i
                                  id="vote_down_272073" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  0</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(272073, 1); return false;" class="float-right"><i
                                  id="vote_up_272073" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  3</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(272073); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">moje 1 anime polecam haha<br>
                            </div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/97934" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 97934}, '/profile/97934'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/0.webp?20220412093253"
                              alt="Zoelubijesc">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Odcinek: 1
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/97934"
                                    onclick="loadPage('profile', {id: 97934}, '/profile/97934'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> Zoelubijesc </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>60 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(269937, 0); return false;" class="float-right"><i
                                  id="vote_down_269937" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  1</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(269937, 1); return false;" class="float-right"><i
                                  id="vote_up_269937" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  3</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(269937); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">Czemu mam kur takie prof</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/97934" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 97934}, '/profile/97934'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/0.webp?20220412093253"
                              alt="Zoelubijesc">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Odcinek: 1
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/97934"
                                    onclick="loadPage('profile', {id: 97934}, '/profile/97934'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> Zoelubijesc </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>60 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(269936, 0); return false;" class="float-right"><i
                                  id="vote_down_269936" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  0</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(269936, 1); return false;" class="float-right"><i
                                  id="vote_up_269936" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  3</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(269936); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">Kolega mi polecił i opłaca się oglądać</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/65415" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 65415}, '/profile/65415'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/65415.webp?20230717224805"
                              alt="Szjajwwwk12345">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Odcinek: 1
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/65415"
                                    onclick="loadPage('profile', {id: 65415}, '/profile/65415'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> Szjajwwwk12345 </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>61 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(269797, 0); return false;" class="float-right"><i
                                  id="vote_down_269797" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  0</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(269797, 1); return false;" class="float-right"><i
                                  id="vote_up_269797" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  1</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(269797); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">Słyszałam o ty tyle razy że zaczynam oglądać, i polecam</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/78622" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 78622}, '/profile/78622'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/78622.webp?20230811123227"
                              alt="staryLis">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Odcinek: 1
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/78622"
                                    onclick="loadPage('profile', {id: 78622}, '/profile/78622'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> staryLis </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>67 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(267635, 0); return false;" class="float-right"><i
                                  id="vote_down_267635" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  0</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(267635, 1); return false;" class="float-right"><i
                                  id="vote_up_267635" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  5</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(267635); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">gut gut yes yes<br>
                              <br>
                            </div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/51162" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 51162}, '/profile/51162'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/51162.webp?20230520192803"
                              alt="Lukasz06">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Odcinek: 1
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/51162"
                                    onclick="loadPage('profile', {id: 51162}, '/profile/51162'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> Lukasz06 </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>67 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(267544, 0); return false;" class="float-right"><i
                                  id="vote_down_267544" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  1</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(267544, 1); return false;" class="float-right"><i
                                  id="vote_up_267544" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  8</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(267544); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">Dobra to czas zobaczyć czym wszyscy się tak zachwycają.</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/36513" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 36513}, '/profile/36513'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/36513.webp?20230529223112"
                              alt="mas">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Odcinek: 1
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/36513"
                                    onclick="loadPage('profile', {id: 36513}, '/profile/36513'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> mas </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>69 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(267002, 0); return false;" class="float-right"><i
                                  id="vote_down_267002" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  0</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(267002, 1); return false;" class="float-right"><i
                                  id="vote_up_267002" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  6</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(267002); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">07.08.2023 oglądam pierwszy raz</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/77140" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 77140}, '/profile/77140'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/77140.webp?20230728135717"
                              alt="Weeb_Blue">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Odcinek: 1
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/77140"
                                    onclick="loadPage('profile', {id: 77140}, '/profile/77140'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> Weeb_Blue </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>70 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(266830, 0); return false;" class="float-right"><i
                                  id="vote_down_266830" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  2</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(266830, 1); return false;" class="float-right"><i
                                  id="vote_up_266830" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  8</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(266830); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">Fortnite 08.08.2023 koloryzowane</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/77140" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 77140}, '/profile/77140'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/77140.webp?20230728135717"
                              alt="Weeb_Blue">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Odcinek: 1
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/77140"
                                    onclick="loadPage('profile', {id: 77140}, '/profile/77140'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> Weeb_Blue </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>73 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(265382, 0); return false;" class="float-right"><i
                                  id="vote_down_265382" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  19</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(265382, 1); return false;" class="float-right"><i
                                  id="vote_up_265382" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  14</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(265382); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">oni są z fortnite</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/58824" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 58824}, '/profile/58824'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/58824.webp?20230813020413"
                              alt="_Madao_">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Odcinek: 1
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/58824"
                                    onclick="loadPage('profile', {id: 58824}, '/profile/58824'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b><img class="img-fluid  m-0 p-0 mb-1" width="20px"
                                        src="https://cdn.ogladajanime.pl/images/star/silver-small.webp" alt="silver">
                                      _Madao_ <img class="img-fluid  m-0 p-0 mb-1" width="20px"
                                        src="https://cdn.ogladajanime.pl/images/star/silver-small.webp"
                                        alt="silver"></b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>84 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(261875, 0); return false;" class="float-right"><i
                                  id="vote_down_261875" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  3</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(261875, 1); return false;" class="float-right"><i
                                  id="vote_up_261875" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  8</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(261875); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">Ciekawa historia fajne walki 9/10</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/65140" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 65140}, '/profile/65140'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/65140.webp?20230720023020"
                              alt="luszko">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Odcinek: 1
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/65140"
                                    onclick="loadPage('profile', {id: 65140}, '/profile/65140'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> luszko </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>88 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(260657, 0); return false;" class="float-right"><i
                                  id="vote_down_260657" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  4</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(260657, 1); return false;" class="float-right"><i
                                  id="vote_up_260657" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  22</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(260657); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">jbc legie tylko lech<br>
                            </div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/59451" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 59451}, '/profile/59451'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/59451.webp?20230704211533"
                              alt="A dud">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Odcinek: 1
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/59451"
                                    onclick="loadPage('profile', {id: 59451}, '/profile/59451'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> A dud </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>101 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(256549, 0); return false;" class="float-right"><i
                                  id="vote_down_256549" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  8</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(256549, 1); return false;" class="float-right"><i
                                  id="vote_up_256549" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  44</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(256549); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">ok, nie będę kłamać. Oglądam to tylko dlatego, że jest taki hype o 2
                              sezonie.</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/44459" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 44459}, '/profile/44459'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/0.webp?20220412093253"
                              alt="Blake0">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Odcinek: 1
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/44459"
                                    onclick="loadPage('profile', {id: 44459}, '/profile/44459'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> Blake0 </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>102 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(256206, 0); return false;" class="float-right"><i
                                  id="vote_down_256206" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  2</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(256206, 1); return false;" class="float-right"><i
                                  id="vote_up_256206" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  3</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(256206); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">Fajne animku<br>
                            </div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/52365" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 52365}, '/profile/52365'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/52365.webp?20230601203301"
                              alt="bulkaispulka">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Anime
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/52365"
                                    onclick="loadPage('profile', {id: 52365}, '/profile/52365'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> bulkaispulka </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>110 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(28682, 0); return false;" class="float-right"><i
                                  id="vote_down_28682" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  2</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(28682, 1); return false;" class="float-right"><i
                                  id="vote_up_28682" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  11</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(28682); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">lubie ale moi koledzy nie lubia i nie chca ze mna obejrzec:(<br>
                            </div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/30338" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 30338}, '/profile/30338'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/30338.webp?20230506032607"
                              alt="Baki uzumaki">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Anime
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/30338"
                                    onclick="loadPage('profile', {id: 30338}, '/profile/30338'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> Baki uzumaki </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>111 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(28522, 0); return false;" class="float-right"><i
                                  id="vote_down_28522" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  2</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(28522, 1); return false;" class="float-right"><i
                                  id="vote_up_28522" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  6</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(28522); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">Pov mochito Gomu Gomu no</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/30184" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 30184}, '/profile/30184'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/0.webp?20220412093253"
                              alt="Furia">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Anime
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/30184"
                                    onclick="loadPage('profile', {id: 30184}, '/profile/30184'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> Furia </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>116 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(27669, 0); return false;" class="float-right"><i
                                  id="vote_down_27669" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  2</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(27669, 1); return false;" class="float-right"><i
                                  id="vote_up_27669" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  3</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(27669); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">super serial</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/55107" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 55107}, '/profile/55107'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/55107.webp?20230909170520"
                              alt="kwiatuszek uwu12">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Anime
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/55107"
                                    onclick="loadPage('profile', {id: 55107}, '/profile/55107'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> kwiatuszek uwu12 </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>117 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(27571, 0); return false;" class="float-right"><i
                                  id="vote_down_27571" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  1</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(27571, 1); return false;" class="float-right"><i
                                  id="vote_up_27571" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  4</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(27571); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">Mega zajebiste anime</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/52462" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 52462}, '/profile/52462'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/52462.webp?20230831205846"
                              alt="_EMMA_">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Anime
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/52462"
                                    onclick="loadPage('profile', {id: 52462}, '/profile/52462'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> _EMMA_ </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>117 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(27560, 0); return false;" class="float-right"><i
                                  id="vote_down_27560" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  1</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(27560, 1); return false;" class="float-right"><i
                                  id="vote_up_27560" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  9</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(27560); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 spoiler">Jest to pierwsze anime jakie w życiu obejrzałam, i chociaż
                              obejrzałam już dużo, zawsze chętnie do niego wracam. Kreska i muzyka są cudowne, a humor
                              zabawny. Postacie są bardzo sympatyczne, aż miło popatrzeć. Openingi i endingi -
                              wybitne.<br>
                              Z fabułą jest nieco inaczej. <br>
                              Ponieważ dość powoli się rozkręca, po 3 odcinku niektórym mogłoby się znudzić. Jednak,
                              jeśli dotrwacie do piątego, czeka was masa niespodzianek! Nie będę tutaj spoilerować, ale
                              nawet, jeśli po tych 3 pierwszych odcinkach wam się znudzi, to poczekajcie, oglądajcie
                              dalej, a czeka was kubeł zimnej wody!</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/47453" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 47453}, '/profile/47453'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/0.webp?20220412093253"
                              alt="Pjoter002">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Anime
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/47453"
                                    onclick="loadPage('profile', {id: 47453}, '/profile/47453'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> Pjoter002 </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>123 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(26383, 0); return false;" class="float-right"><i
                                  id="vote_down_26383" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  1</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(26383, 1); return false;" class="float-right"><i
                                  id="vote_up_26383" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  4</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(26383); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">Gyutaroo pomylił universa</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/42797" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 42797}, '/profile/42797'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/42797.webp?20230927151052"
                              alt="jihyun">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Anime
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/42797"
                                    onclick="loadPage('profile', {id: 42797}, '/profile/42797'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> jihyun </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>126 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(25948, 0); return false;" class="float-right"><i
                                  id="vote_down_25948" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  1</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(25948, 1); return false;" class="float-right"><i
                                  id="vote_up_25948" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  13</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(25948); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">zajebiste anime czekam na sezon 2 i polecam obejrzeć</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/52188" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 52188}, '/profile/52188'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/52188.webp?20230603103405"
                              alt="LenaBNHA2">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Anime
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/52188"
                                    onclick="loadPage('profile', {id: 52188}, '/profile/52188'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> LenaBNHA2 </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>129 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(25606, 0); return false;" class="float-right"><i
                                  id="vote_down_25606" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  2</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(25606, 1); return false;" class="float-right"><i
                                  id="vote_up_25606" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  14</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(25606); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">Ta panda w openingu rozwala mnie za każdym razem</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/47072" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 47072}, '/profile/47072'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/0.webp?20220412093253"
                              alt="WujPablo">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Anime
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/47072"
                                    onclick="loadPage('profile', {id: 47072}, '/profile/47072'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> WujPablo </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>137 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(24734, 0); return false;" class="float-right"><i
                                  id="vote_down_24734" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  1</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(24734, 1); return false;" class="float-right"><i
                                  id="vote_up_24734" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  3</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(24734); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">a może czteroręki powinien wygrać hm</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/47072" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 47072}, '/profile/47072'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/0.webp?20220412093253"
                              alt="WujPablo">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Anime
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/47072"
                                    onclick="loadPage('profile', {id: 47072}, '/profile/47072'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> WujPablo </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>137 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(24704, 0); return false;" class="float-right"><i
                                  id="vote_down_24704" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  1</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(24704, 1); return false;" class="float-right"><i
                                  id="vote_up_24704" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  1</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(24704); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">szczerze mówiąc nie wiem czy wolę żeby wygrali ludzie z klątwami czy na
                              odwrót<br>
                              <br>
                              gdyby z 2 czy 3 uczucia do klątw dodać byłyby fajne
                            </div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/32048" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 32048}, '/profile/32048'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/32048.webp?20230322184816"
                              alt="KoccHan">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Anime
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/32048"
                                    onclick="loadPage('profile', {id: 32048}, '/profile/32048'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> KoccHan </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>139 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(24470, 0); return false;" class="float-right"><i
                                  id="vote_down_24470" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  2</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(24470, 1); return false;" class="float-right"><i
                                  id="vote_up_24470" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  4</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(24470); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">Ciekawe anime, dużo się dzieje :)</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/51313" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 51313}, '/profile/51313'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/51313.webp?20231012192507"
                              alt="demonekpowerkc">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Anime
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/51313"
                                    onclick="loadPage('profile', {id: 51313}, '/profile/51313'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> demonekpowerkc </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>147 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(23551, 0); return false;" class="float-right"><i
                                  id="vote_down_23551" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  2</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(23551, 1); return false;" class="float-right"><i
                                  id="vote_up_23551" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  2</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(23551); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">mysle ze anime bardzo fajne dla osob ktore lubia duzo walki w anime a
                              dla mnie to jest poprostu spokonic ciekawego bo caly czas walki. Wiem ze o to chodzi ale
                              dla mn za duzo sie dzieje gojo naj<br>
                              8,5/10 za 2 mies znowu ogladne ^^</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/22015" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 22015}, '/profile/22015'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/22015.webp?20230521185925"
                              alt="muczas">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Anime
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/22015"
                                    onclick="loadPage('profile', {id: 22015}, '/profile/22015'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> muczas </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>147 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(23523, 0); return false;" class="float-right"><i
                                  id="vote_down_23523" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  1</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(23523, 1); return false;" class="float-right"><i
                                  id="vote_up_23523" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  0</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(23523); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">W lipcu tego roku ma wyjść drugi sezon informacja jest już pewna
                              pozostało tylko czekać na kolejne 24 odcinki ^^</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/51219" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 51219}, '/profile/51219'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/51219.webp?20231008114150"
                              alt="Gr4nd0m3ga">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Anime
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/51219"
                                    onclick="loadPage('profile', {id: 51219}, '/profile/51219'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> Gr4nd0m3ga </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>148 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(23458, 0); return false;" class="float-right"><i
                                  id="vote_down_23458" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  6</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(23458, 1); return false;" class="float-right"><i
                                  id="vote_up_23458" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  5</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(23458); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">best anime i ever watched<br>
                            </div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/37622" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 37622}, '/profile/37622'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/37622.webp?20230621224758"
                              alt="marta szymonik">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Anime
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/37622"
                                    onclick="loadPage('profile', {id: 37622}, '/profile/37622'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> marta szymonik </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>148 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(23436, 0); return false;" class="float-right"><i
                                  id="vote_down_23436" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  1</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(23436, 1); return false;" class="float-right"><i
                                  id="vote_up_23436" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  1</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(23436); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">polecam</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/44177" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 44177}, '/profile/44177'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/44177.webp?20230716195809"
                              alt="Dazaiii">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Anime
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/44177"
                                    onclick="loadPage('profile', {id: 44177}, '/profile/44177'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> Dazaiii </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>148 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(23407, 0); return false;" class="float-right"><i
                                  id="vote_down_23407" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  1</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(23407, 1); return false;" class="float-right"><i
                                  id="vote_up_23407" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  3</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(23407); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">Czasami gorzej czasami lepiej takie 8,5/10 ( moja opinia ) czegoś mi
                              brakuje.<br>
                            </div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/26615" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 26615}, '/profile/26615'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/26615.webp?20231003001029"
                              alt="Nadaiii">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Anime
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/26615"
                                    onclick="loadPage('profile', {id: 26615}, '/profile/26615'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> Nadaiii </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>154 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(22867, 0); return false;" class="float-right"><i
                                  id="vote_down_22867" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  2</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(22867, 1); return false;" class="float-right"><i
                                  id="vote_up_22867" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  6</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(22867); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">puste niczym parking przed Biedronką WTF, jaki sklep był w orginale?
                              Raczej Biedronka na pewno nie XDDD</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/40369" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 40369}, '/profile/40369'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/40369.webp?20230616194318"
                              alt="olifka">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Anime
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/40369"
                                    onclick="loadPage('profile', {id: 40369}, '/profile/40369'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> olifka </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>159 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(22335, 0); return false;" class="float-right"><i
                                  id="vote_down_22335" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  1</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(22335, 1); return false;" class="float-right"><i
                                  id="vote_up_22335" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  5</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(22335); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">kocham to anime!! polecam</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/42808" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 42808}, '/profile/42808'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/42808.webp?20230920130640"
                              alt="Rosey">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Anime
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/42808"
                                    onclick="loadPage('profile', {id: 42808}, '/profile/42808'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> Rosey </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>189 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(18771, 0); return false;" class="float-right"><i
                                  id="vote_down_18771" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  1</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(18771, 1); return false;" class="float-right"><i
                                  id="vote_up_18771" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  7</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(18771); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">Kocham to, myślę że to jest moje drugie ulubione anime. Nie mogę się
                              doczekać sezonu drugiego! tak czy siak, polecam obejrzeć.</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/45530" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 45530}, '/profile/45530'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/45530.webp?20230409003209"
                              alt="HelMidori">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Anime
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/45530"
                                    onclick="loadPage('profile', {id: 45530}, '/profile/45530'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> HelMidori </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>190 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(18621, 0); return false;" class="float-right"><i
                                  id="vote_down_18621" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  1</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(18621, 1); return false;" class="float-right"><i
                                  id="vote_up_18621" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  7</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(18621); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">po prostu cudo&lt;3</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/29588" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 29588}, '/profile/29588'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/29588.webp?20230507001702"
                              alt="Niewiadoma">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Anime
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/29588"
                                    onclick="loadPage('profile', {id: 29588}, '/profile/29588'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> Niewiadoma </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>191 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(18438, 0); return false;" class="float-right"><i
                                  id="vote_down_18438" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  11</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(18438, 1); return false;" class="float-right"><i
                                  id="vote_up_18438" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  5</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(18438); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">Co do mojego dawnego komentarza, że pewnie wrócę do tego anime jednak
                              muszę powiedzieć że napewno do niego nie wrócę. Zamiast oglądać chciałam przenieść się na
                              mangę, jednak tak manga jak anime w ogóle nie zachęciły mnie do dalszego oglądania. Może
                              poprostu to nie moje klimaty</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/26158" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 26158}, '/profile/26158'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/26158.webp?20230329222657"
                              alt="Sana19">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Anime
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/26158"
                                    onclick="loadPage('profile', {id: 26158}, '/profile/26158'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> Sana19 </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>200 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(17689, 0); return false;" class="float-right"><i
                                  id="vote_down_17689" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  5</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(17689, 1); return false;" class="float-right"><i
                                  id="vote_up_17689" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  6</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(17689); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">Fabuła nie jakaś mega, ale całkiem spoko, nie nudzi się i ciekawi co
                              będzie dalej. Miłe do obejrzenia po męczącym dniu, albo po prostu dla fanu. Kreska
                              świetna, muzyka też idealnie dobrana. Rozwój postaci choć powoli to jednak jest, czekam na
                              następne sezony, żeby dowiedzieć się więcej o historii postaci. Zgodzę się z ryn, że
                              zdecydowanie za mało wyjaśnili struktury świata, kompletnie od czapy nagle zostaliśmy
                              wrzuceni w nowe uniwersum, bez uprzedniego chociażby rozeznania się, jak to wszystko
                              działa. Poza tym, niektóre wątki lecą za szybko albo są niedokańczane np. od tak sobie
                              przeleciało ileś czasu przez 2 odcinki, kiedy Yuji był martwy i nagle BUM! Jesteśmy już w
                              następnym arcu, uczniowie rywalizują (usiłują zabić się nawzajem, tak przy okazji), bo
                              wytwórni nie chciało się czasu poświęcać na rozwijanie postaci czy coś podobnego, tylko
                              ciągle lecą z sieczką co dwa odcinki. <br>
                              Ogólni to JK wypadło dobrze. Moja ocena to jakieś 8.7/10, ale może się to zmieni z
                              następnymi sezonami, jak trochę bardziej poznamy bohaterów.</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/18238" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 18238}, '/profile/18238'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/18238.webp?20230527204545"
                              alt="ryn">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Anime
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/18238"
                                    onclick="loadPage('profile', {id: 18238}, '/profile/18238'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> ryn </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>202 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(17489, 0); return false;" class="float-right"><i
                                  id="vote_down_17489" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  3</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(17489, 1); return false;" class="float-right"><i
                                  id="vote_up_17489" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  2</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(17489); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">Jak dla mnie fajne anime, da sie obejrzec i jest ladna kreska i
                              animacja, ale dla mnie nic ciekawego sie nie dzieje. Nie lubie jak w anime fabula leci
                              totalnie za szybko, co tutaj sie dzieje, w 1 odcinku po prostu zostajemy wciagnieci (a
                              raczej glowny bohater) w ta historie bez wiekszego wytlumaczenia i tak totalnie z dupy.
                              Poza tym to spoko:D</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/36590" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 36590}, '/profile/36590'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/36590.webp?20230124185220"
                              alt="SSachiii">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Anime
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/36590"
                                    onclick="loadPage('profile', {id: 36590}, '/profile/36590'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> SSachiii </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>228 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(15593, 0); return false;" class="float-right"><i
                                  id="vote_down_15593" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  2</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(15593, 1); return false;" class="float-right"><i
                                  id="vote_up_15593" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  6</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(15593); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">gojo&lt;33</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/42253" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 42253}, '/profile/42253'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/42253.webp?20230619083723"
                              alt="Art The Clown">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Anime
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/42253"
                                    onclick="loadPage('profile', {id: 42253}, '/profile/42253'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> Art The Clown </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>230 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(15428, 0); return false;" class="float-right"><i
                                  id="vote_down_15428" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  2</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(15428, 1); return false;" class="float-right"><i
                                  id="vote_up_15428" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  4</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(15428); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">czekam na drugi sezon</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/36927" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 36927}, '/profile/36927'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/36927.webp?20230728024502"
                              alt="JAGCHIM">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Anime
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/36927"
                                    onclick="loadPage('profile', {id: 36927}, '/profile/36927'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> JAGCHIM </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>239 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(14705, 0); return false;" class="float-right"><i
                                  id="vote_down_14705" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  2</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(14705, 1); return false;" class="float-right"><i
                                  id="vote_up_14705" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  8</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(14705); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">Kiedy 2 sezon? :p</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                    <div class="col-12 mb-2">
                      <div class="row justify-content-center">
                        <div class="col-2 text-center m-0 p-0">
                          <a href="/profile/29803" class="tooltip tooltip-user tooltipstered"
                            onclick="loadPage('profile', {id: 29803}, '/profile/29803'); return false;">
                            <img class="col-12 m-0 p-0 img-fluid lozad rounded" style="max-height: 140px;" height="140"
                              width="140" data-src="https://cdn.ogladajanime.pl/images/user/29803.webp?20220821124411"
                              alt="Blankusiap">
                          </a>
                        </div>
                        <div class="col-10 ml-0 pl-0">
                          <div class="row m-0 p-0 mb-4">
                            <div class="col-6">
                              <div class="row">
                                <div class="col-12">
                                  <badge class="badge badge-secondary mr-1 mb-1 pt-1 pb-1 px-2">
                                    Anime
                                  </badge>
                                </div>
                                <div class="col-12">
                                  <a href="/profile/29803"
                                    onclick="loadPage('profile', {id: 29803}, '/profile/29803'); return false;"
                                    class="tooltip tooltip-user tooltipstered">
                                    <b> Blankusiap </b>
                                  </a>
                                </div>
                                <div class="col-12 text-muted text-sm"><small>242 dni temu</small></div>
                              </div>
                            </div>
                            <div class="col-6 m-0 p-0">
                              <a href="#" aria-label="Daj łapkę w dół"
                                onclick="voteAnimeComment(14381, 0); return false;" class="float-right"><i
                                  id="vote_down_14381" class="fa fa-thumbs-down text-danger" aria-hidden="true">
                                  7</i></a>
                              <a href="#" aria-label="Daj łapkę w górę"
                                onclick="voteAnimeComment(14381, 1); return false;" class="float-right"><i
                                  id="vote_up_14381" class="fa fa-thumbs-up text-success mr-3" aria-hidden="true">
                                  4</i></a>

                              <a href="#" aria-label="Zgłoś komentarz" title="Zgłoś komentarz"
                                onclick="reportComment(14381); return false;" class="float-right"><i
                                  class="fa fa-flag-o text-warning mr-4" aria-hidden="true"></i></a>
                            </div>

                            <div class="col-12 ">Strasznie zacina, ale anime spoko naprawdę wciąga.</div>
                          </div>
                        </div>
                      </div>
                      <hr class="m-0 p-0" style="background-color: #2E2E2E;">
                    </div>

                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="col-12 col-lg-3 m-0 px-xl-3">
            <div class="row">
              <div class="col-12 mb-2">
                <button id="showAnimeButton" class="btn btn-sm btn-primary py-1 px-2 mr-1"
                  onclick="showAnime(); return false;">Podobne anime</button>
                <button id="showCharacterButton" class="btn btn-sm btn-secondary py-1 px-2"
                  onclick="showCharacter(); return false;">Postacie</button>
              </div>
            </div>
            <div id="similar_animes" class="row">
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/anime/tenpou-ibun-ayakashi-ayashi"
                        onclick="loadAnimePage(10816, 'tenpou-ibun-ayakashi-ayashi'); return false;"
                        aria-label="Tenpou Ibun: Ayakashi Ayashi">
                        <img class="img-fluid lozad rounded tooltip tooltip-anime tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-srcset="https://cdn.ogladajanime.pl/images/anime/10816/350w.webp?20230412144154 350w"
                          \="" data-sizes="auto" sizes="100px"
                          src="https://cdn.ogladajanime.pl/images/anime/10816/0w.webp?20230412144154"
                          alt="Tenpou Ibun: Ayakashi Ayashi"
                          srcset="https://cdn.ogladajanime.pl/images/anime/10816/350w.webp?20230412144154 350w"
                          data-loaded="true">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/anime/tenpou-ibun-ayakashi-ayashi"
                            onclick="loadAnimePage(10816, 'tenpou-ibun-ayakashi-ayashi'); return false;"
                            aria-label="Tenpou Ibun: Ayakashi Ayashi">
                            <div class="tooltip tooltip-anime text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Tenpou Ibun: Ayakashi Ayashi</div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-secondary"><i class="fa fa-trophy "> 7.1</i></span>
                          <span class="m-0 mt-1 badge badge-danger">R</span>
                          <span class="float-right m-0 mt-1 badge badge-warning">TV</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/anime/shakugan-no-shana-ii"
                        onclick="loadAnimePage(6270, 'shakugan-no-shana-ii'); return false;"
                        aria-label="Shakugan no Shana II">
                        <img class="img-fluid lozad rounded tooltip tooltip-anime tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-srcset="https://cdn.ogladajanime.pl/images/anime/6270/450w.webp?20230412144608 450w" \=""
                          data-sizes="auto" sizes="100px"
                          src="https://cdn.ogladajanime.pl/images/anime/6270/0w.webp?20230412144608"
                          alt="Shakugan no Shana II"
                          srcset="https://cdn.ogladajanime.pl/images/anime/6270/450w.webp?20230412144608 450w"
                          data-loaded="true">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/anime/shakugan-no-shana-ii"
                            onclick="loadAnimePage(6270, 'shakugan-no-shana-ii'); return false;"
                            aria-label="Shakugan no Shana II">
                            <div class="tooltip tooltip-anime text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Shakugan no Shana II</div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-warning"><i class="fa fa-trophy "> 8.1</i></span>
                          <span class="m-0 mt-1 badge badge-warning">PG-13</span>
                          <span class="float-right m-0 mt-1 badge badge-warning">TV</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/anime/rosario-to-vampire"
                        onclick="loadAnimePage(2237, 'rosario-to-vampire'); return false;"
                        aria-label="Rosario to Vampire">
                        <img class="img-fluid lozad rounded tooltip tooltip-anime tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-srcset="https://cdn.ogladajanime.pl/images/anime/2237/350w.webp?20230412144431 350w" \=""
                          data-sizes="auto" sizes="100px"
                          src="https://cdn.ogladajanime.pl/images/anime/2237/0w.webp?20230412144430"
                          alt="Rosario to Vampire"
                          srcset="https://cdn.ogladajanime.pl/images/anime/2237/350w.webp?20230412144431 350w"
                          data-loaded="true">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/anime/rosario-to-vampire"
                            onclick="loadAnimePage(2237, 'rosario-to-vampire'); return false;"
                            aria-label="Rosario to Vampire">
                            <div class="tooltip tooltip-anime text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Rosario to Vampire</div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-secondary"><i class="fa fa-trophy "> 7.8</i></span>
                          <span class="m-0 mt-1 badge badge-danger">R+</span>
                          <span class="float-right m-0 mt-1 badge badge-warning">TV</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/anime/rosario-to-vampire-capu2"
                        onclick="loadAnimePage(4178, 'rosario-to-vampire-capu2'); return false;"
                        aria-label="Rosario to Vampire Capu2">
                        <img class="img-fluid lozad rounded tooltip tooltip-anime tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-srcset="https://cdn.ogladajanime.pl/images/anime/4178/250w.webp?20230412144517 250w" \=""
                          data-sizes="auto" sizes="100px"
                          src="https://cdn.ogladajanime.pl/images/anime/4178/0w.webp?20230412144517"
                          alt="Rosario to Vampire Capu2"
                          srcset="https://cdn.ogladajanime.pl/images/anime/4178/250w.webp?20230412144517 250w"
                          data-loaded="true">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/anime/rosario-to-vampire-capu2"
                            onclick="loadAnimePage(4178, 'rosario-to-vampire-capu2'); return false;"
                            aria-label="Rosario to Vampire Capu2">
                            <div class="tooltip tooltip-anime text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Rosario to Vampire Capu2</div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-warning"><i class="fa fa-trophy "> 8.1</i></span>
                          <span class="m-0 mt-1 badge badge-danger">R+</span>
                          <span class="float-right m-0 mt-1 badge badge-warning">TV</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/anime/kuroshitsuji" onclick="loadAnimePage(12509, 'kuroshitsuji'); return false;"
                        aria-label="Kuroshitsuji">
                        <img class="img-fluid lozad rounded tooltip tooltip-anime tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-srcset="https://cdn.ogladajanime.pl/images/anime/12509/250w.webp?20230412144240 250w"
                          \="" data-sizes="auto" sizes="100px"
                          src="https://cdn.ogladajanime.pl/images/anime/12509/0w.webp?20230412144240" alt="Kuroshitsuji"
                          srcset="https://cdn.ogladajanime.pl/images/anime/12509/250w.webp?20230412144240 250w"
                          data-loaded="true">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/anime/kuroshitsuji" onclick="loadAnimePage(12509, 'kuroshitsuji'); return false;"
                            aria-label="Kuroshitsuji">
                            <div class="tooltip tooltip-anime text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Kuroshitsuji</div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-warning"><i class="fa fa-trophy "> 8.5</i></span>
                          <span class="m-0 mt-1 badge badge-warning">PG-13</span>
                          <span class="float-right m-0 mt-1 badge badge-warning">TV</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/anime/07-ghost" onclick="loadAnimePage(6905, '07-ghost'); return false;"
                        aria-label="07-Ghost">
                        <img class="img-fluid lozad rounded tooltip tooltip-anime tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-srcset="https://cdn.ogladajanime.pl/images/anime/6905/350w.webp?20230412144622 350w" \=""
                          data-sizes="auto" sizes="100px"
                          src="https://cdn.ogladajanime.pl/images/anime/6905/0w.webp?20230412144622" alt="07-Ghost">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/anime/07-ghost" onclick="loadAnimePage(6905, '07-ghost'); return false;"
                            aria-label="07-Ghost">
                            <div class="tooltip tooltip-anime text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              07-Ghost</div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-secondary"><i class="fa fa-trophy "> 7.6</i></span>
                          <span class="m-0 mt-1 badge badge-warning">PG-13</span>
                          <span class="float-right m-0 mt-1 badge badge-warning">TV</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/anime/seiken-no-blacksmith"
                        onclick="loadAnimePage(7570, 'seiken-no-blacksmith'); return false;"
                        aria-label="Seiken no Blacksmith">
                        <img class="img-fluid lozad rounded tooltip tooltip-anime tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-srcset="https://cdn.ogladajanime.pl/images/anime/7570/250w.webp?20230412144638 250w" \=""
                          data-sizes="auto" sizes="100px"
                          src="https://cdn.ogladajanime.pl/images/anime/7570/0w.webp?20230412144638"
                          alt="Seiken no Blacksmith">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/anime/seiken-no-blacksmith"
                            onclick="loadAnimePage(7570, 'seiken-no-blacksmith'); return false;"
                            aria-label="Seiken no Blacksmith">
                            <div class="tooltip tooltip-anime text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Seiken no Blacksmith</div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-secondary"><i class="fa fa-trophy "> 7</i></span>
                          <span class="m-0 mt-1 badge badge-danger">R+</span>
                          <span class="float-right m-0 mt-1 badge badge-warning">TV</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/anime/omamori-himari" onclick="loadAnimePage(1950, 'omamori-himari'); return false;"
                        aria-label="Omamori Himari">
                        <img class="img-fluid lozad rounded tooltip tooltip-anime tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-srcset="https://cdn.ogladajanime.pl/images/anime/1950/350w.webp?20230412144424 350w" \=""
                          data-sizes="auto" sizes="100px"
                          src="https://cdn.ogladajanime.pl/images/anime/1950/0w.webp?20230412144424"
                          alt="Omamori Himari">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/anime/omamori-himari" onclick="loadAnimePage(1950, 'omamori-himari'); return false;"
                            aria-label="Omamori Himari">
                            <div class="tooltip tooltip-anime text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Omamori Himari</div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-secondary"><i class="fa fa-trophy "> 7.9</i></span>
                          <span class="m-0 mt-1 badge badge-danger">R+</span>
                          <span class="float-right m-0 mt-1 badge badge-warning">TV</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/anime/kuroshitsuji-2" onclick="loadAnimePage(8853, 'kuroshitsuji-2'); return false;"
                        aria-label="Kuroshitsuji 2">
                        <img class="img-fluid lozad rounded tooltip tooltip-anime tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-srcset="https://cdn.ogladajanime.pl/images/anime/8853/350w.webp?20230412144709 350w" \=""
                          data-sizes="auto" sizes="100px"
                          src="https://cdn.ogladajanime.pl/images/anime/8853/0w.webp?20230412144709"
                          alt="Kuroshitsuji 2">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/anime/kuroshitsuji-2" onclick="loadAnimePage(8853, 'kuroshitsuji-2'); return false;"
                            aria-label="Kuroshitsuji 2">
                            <div class="tooltip tooltip-anime text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Kuroshitsuji 2</div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-warning"><i class="fa fa-trophy "> 8.2</i></span>
                          <span class="m-0 mt-1 badge badge-danger">R</span>
                          <span class="float-right m-0 mt-1 badge badge-warning">TV</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/anime/nurarihyon-no-mago"
                        onclick="loadAnimePage(2667, 'nurarihyon-no-mago'); return false;"
                        aria-label="Nurarihyon no Mago">
                        <img class="img-fluid lozad rounded tooltip tooltip-anime tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-srcset="https://cdn.ogladajanime.pl/images/anime/2667/350w.webp?20230412144441 350w" \=""
                          data-sizes="auto" sizes="100px"
                          src="https://cdn.ogladajanime.pl/images/anime/2667/0w.webp?20230412144440"
                          alt="Nurarihyon no Mago">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/anime/nurarihyon-no-mago"
                            onclick="loadAnimePage(2667, 'nurarihyon-no-mago'); return false;"
                            aria-label="Nurarihyon no Mago">
                            <div class="tooltip tooltip-anime text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Nurarihyon no Mago</div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-warning"><i class="fa fa-trophy "> 8.1</i></span>
                          <span class="m-0 mt-1 badge badge-warning">PG-13</span>
                          <span class="float-right m-0 mt-1 badge badge-warning">TV</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/anime/otome-youkai-zakuro"
                        onclick="loadAnimePage(10813, 'otome-youkai-zakuro'); return false;"
                        aria-label="Otome Youkai Zakuro">
                        <img class="img-fluid lozad rounded tooltip tooltip-anime tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-srcset="https://cdn.ogladajanime.pl/images/anime/10813/450w.webp?20230412144154 450w"
                          \="" data-sizes="auto" sizes="100px"
                          src="https://cdn.ogladajanime.pl/images/anime/10813/0w.webp?20230412144153"
                          alt="Otome Youkai Zakuro">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/anime/otome-youkai-zakuro"
                            onclick="loadAnimePage(10813, 'otome-youkai-zakuro'); return false;"
                            aria-label="Otome Youkai Zakuro">
                            <div class="tooltip tooltip-anime text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Otome Youkai Zakuro</div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-warning"><i class="fa fa-trophy "> 8.1</i></span>
                          <span class="m-0 mt-1 badge badge-warning">PG-13</span>
                          <span class="float-right m-0 mt-1 badge badge-warning">TV</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/anime/ao-no-exorcist" onclick="loadAnimePage(10830, 'ao-no-exorcist'); return false;"
                        aria-label="Ao no Exorcist">
                        <img class="img-fluid lozad rounded tooltip tooltip-anime tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-srcset="https://cdn.ogladajanime.pl/images/anime/10830/350w.webp?20230412144154 350w"
                          \="" data-sizes="auto" sizes="100px"
                          src="https://cdn.ogladajanime.pl/images/anime/10830/0w.webp?20230412144154"
                          alt="Ao no Exorcist">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/anime/ao-no-exorcist"
                            onclick="loadAnimePage(10830, 'ao-no-exorcist'); return false;" aria-label="Ao no Exorcist">
                            <div class="tooltip tooltip-anime text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Ao no Exorcist</div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-warning"><i class="fa fa-trophy "> 8.2</i></span>
                          <span class="m-0 mt-1 badge badge-warning">PG-13</span>
                          <span class="float-right m-0 mt-1 badge badge-warning">TV</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/anime/nurarihyon-no-mago-2-sennen-makyou"
                        onclick="loadAnimePage(14959, 'nurarihyon-no-mago-2-sennen-makyou'); return false;"
                        aria-label="Nurarihyon no Mago 2: Sennen Makyou">
                        <img class="img-fluid lozad rounded tooltip tooltip-anime tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-srcset="https://cdn.ogladajanime.pl/images/anime/14959/350w.webp?20230412144317 350w"
                          \="" data-sizes="auto" sizes="100px"
                          src="https://cdn.ogladajanime.pl/images/anime/14959/0w.webp?20230412144317"
                          alt="Nurarihyon no Mago 2: Sennen Makyou">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/anime/nurarihyon-no-mago-2-sennen-makyou"
                            onclick="loadAnimePage(14959, 'nurarihyon-no-mago-2-sennen-makyou'); return false;"
                            aria-label="Nurarihyon no Mago 2: Sennen Makyou">
                            <div class="tooltip tooltip-anime text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Nurarihyon no Mago 2: Sennen Makyou</div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-warning"><i class="fa fa-trophy "> 8.2</i></span>
                          <span class="m-0 mt-1 badge badge-success">G</span>
                          <span class="float-right m-0 mt-1 badge badge-warning">TV</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/anime/itsuka-tenma-no-kuro-usagi"
                        onclick="loadAnimePage(1382, 'itsuka-tenma-no-kuro-usagi'); return false;"
                        aria-label="Itsuka Tenma no Kuro Usagi">
                        <img class="img-fluid lozad rounded tooltip tooltip-anime tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-srcset="https://cdn.ogladajanime.pl/images/anime/1382/350w.webp?20230412144258 350w" \=""
                          data-sizes="auto" sizes="100px"
                          src="https://cdn.ogladajanime.pl/images/anime/1382/0w.webp?20230412144258"
                          alt="Itsuka Tenma no Kuro Usagi">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/anime/itsuka-tenma-no-kuro-usagi"
                            onclick="loadAnimePage(1382, 'itsuka-tenma-no-kuro-usagi'); return false;"
                            aria-label="Itsuka Tenma no Kuro Usagi">
                            <div class="tooltip tooltip-anime text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Itsuka Tenma no Kuro Usagi</div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-secondary"><i class="fa fa-trophy "> 7.7</i></span>
                          <span class="m-0 mt-1 badge badge-danger">R+</span>
                          <span class="float-right m-0 mt-1 badge badge-warning">TV</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/anime/shakugan-no-shana-iii-final"
                        onclick="loadAnimePage(338, 'shakugan-no-shana-iii-final'); return false;"
                        aria-label="Shakugan no Shana III (Final)">
                        <img class="img-fluid lozad rounded tooltip tooltip-anime tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-srcset="https://cdn.ogladajanime.pl/images/anime/338/350w.webp?20230412144458 350w" \=""
                          data-sizes="auto" sizes="100px"
                          src="https://cdn.ogladajanime.pl/images/anime/338/0w.webp?20230412144458"
                          alt="Shakugan no Shana III (Final)">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/anime/shakugan-no-shana-iii-final"
                            onclick="loadAnimePage(338, 'shakugan-no-shana-iii-final'); return false;"
                            aria-label="Shakugan no Shana III (Final)">
                            <div class="tooltip tooltip-anime text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Shakugan no Shana III (Final)</div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-warning"><i class="fa fa-trophy "> 8.2</i></span>
                          <span class="m-0 mt-1 badge badge-warning">PG-13</span>
                          <span class="float-right m-0 mt-1 badge badge-warning">TV</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/anime/jujutsu-kaisen-tv-2nd-season"
                        onclick="loadAnimePage(15840, 'jujutsu-kaisen-tv-2nd-season'); return false;"
                        aria-label="Jujutsu Kaisen (TV) 2nd Season">
                        <img class="img-fluid lozad rounded tooltip tooltip-anime tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-srcset="https://cdn.ogladajanime.pl/images/anime/15840/450w.webp?20230708150928 450w"
                          \="" data-sizes="auto" sizes="100px"
                          src="https://cdn.ogladajanime.pl/images/anime/15840/0w.webp?20230708150927"
                          alt="Jujutsu Kaisen (TV) 2nd Season">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/anime/jujutsu-kaisen-tv-2nd-season"
                            onclick="loadAnimePage(15840, 'jujutsu-kaisen-tv-2nd-season'); return false;"
                            aria-label="Jujutsu Kaisen (TV) 2nd Season">
                            <div class="tooltip tooltip-anime text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Jujutsu Kaisen (TV) 2nd Season</div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-warning"><i class="fa fa-trophy "> 9.3</i></span>
                          <span class="m-0 mt-1 badge badge-danger">R</span>
                          <span class="float-right m-0 mt-1 badge badge-warning">TV</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/anime/jujutsu-kaisen-official-pv"
                        onclick="loadAnimePage(17528, 'jujutsu-kaisen-official-pv'); return false;"
                        aria-label="Jujutsu Kaisen Official PV">
                        <img class="img-fluid lozad rounded tooltip tooltip-anime tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-srcset="https://cdn.ogladajanime.pl/images/anime/17528/600w.webp?20230705235522 600w"
                          \="" data-sizes="auto" sizes="100px"
                          src="https://cdn.ogladajanime.pl/images/anime/17528/0w.webp?20230705235521"
                          alt="Jujutsu Kaisen Official PV">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/anime/jujutsu-kaisen-official-pv"
                            onclick="loadAnimePage(17528, 'jujutsu-kaisen-official-pv'); return false;"
                            aria-label="Jujutsu Kaisen Official PV">
                            <div class="tooltip tooltip-anime text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Jujutsu Kaisen Official PV</div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-secondary"><i class="fa fa-trophy "> 7.8</i></span>
                          <span class="m-0 mt-1 badge badge-success">G</span>
                          <span class="float-right m-0 mt-1 badge badge-success">ONA</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/anime/jujutsu-kaisen-0-movie"
                        onclick="loadAnimePage(15717, 'jujutsu-kaisen-0-movie'); return false;"
                        aria-label="Jujutsu Kaisen 0 Movie">
                        <img class="img-fluid lozad rounded tooltip tooltip-anime tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-srcset="https://cdn.ogladajanime.pl/images/anime/15717/450w.webp?20230412144338 450w"
                          \="" data-sizes="auto" sizes="100px"
                          src="https://cdn.ogladajanime.pl/images/anime/15717/0w.webp?20230412144337"
                          alt="Jujutsu Kaisen 0 Movie">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/anime/jujutsu-kaisen-0-movie"
                            onclick="loadAnimePage(15717, 'jujutsu-kaisen-0-movie'); return false;"
                            aria-label="Jujutsu Kaisen 0 Movie">
                            <div class="tooltip tooltip-anime text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Jujutsu Kaisen 0 Movie</div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-warning"><i class="fa fa-trophy "> 9.2</i></span>
                          <span class="m-0 mt-1 badge badge-warning">PG-13</span>
                          <span class="float-right m-0 mt-1 badge badge-primary">Movie</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div id="anime_characters" class="row d-none">
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/character/8560-Satoru-Gojou"
                        onclick="loadPage('character', {character_id: 8560}, '/character/8560-Satoru-Gojou'); return false;">
                        <img class="img-fluid lozad rounded tooltip tooltip-character tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-src="https://cdn.ogladajanime.pl/images/character/8560.webp?20230322100521" alt="">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/character/8560-Satoru-Gojou"
                            onclick="loadPage('character', {character_id: 8560}, '/character/8560-Satoru-Gojou'); return false;">
                            <div class="tooltip tooltip-character text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Satoru Gojou</div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-success">Główna</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/character/13057-Megumi-Fushiguro"
                        onclick="loadPage('character', {character_id: 13057}, '/character/13057-Megumi-Fushiguro'); return false;">
                        <img class="img-fluid lozad rounded tooltip tooltip-character tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-src="https://cdn.ogladajanime.pl/images/character/13057.webp?20230322100515" alt="">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/character/13057-Megumi-Fushiguro"
                            onclick="loadPage('character', {character_id: 13057}, '/character/13057-Megumi-Fushiguro'); return false;">
                            <div class="tooltip tooltip-character text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Megumi Fushiguro</div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-success">Główna</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/character/13058-Yuuji-Itadori"
                        onclick="loadPage('character', {character_id: 13058}, '/character/13058-Yuuji-Itadori'); return false;">
                        <img class="img-fluid lozad rounded tooltip tooltip-character tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-src="https://cdn.ogladajanime.pl/images/character/13058.webp?20230322100516" alt="">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/character/13058-Yuuji-Itadori"
                            onclick="loadPage('character', {character_id: 13058}, '/character/13058-Yuuji-Itadori'); return false;">
                            <div class="tooltip tooltip-character text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Yuuji Itadori</div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-success">Główna</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/character/13059-Nobara-Kugisaki"
                        onclick="loadPage('character', {character_id: 13059}, '/character/13059-Nobara-Kugisaki'); return false;">
                        <img class="img-fluid lozad rounded tooltip tooltip-character tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-src="https://cdn.ogladajanime.pl/images/character/13059.webp?20230322100516" alt="">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/character/13059-Nobara-Kugisaki"
                            onclick="loadPage('character', {character_id: 13059}, '/character/13059-Nobara-Kugisaki'); return false;">
                            <div class="tooltip tooltip-character text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Nobara Kugisaki</div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-success">Główna</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/character/8558-Panda"
                        onclick="loadPage('character', {character_id: 8558}, '/character/8558-Panda'); return false;">
                        <img class="img-fluid lozad rounded tooltip tooltip-character tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-src="https://cdn.ogladajanime.pl/images/character/8558.webp?20230228201511" alt="">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/character/8558-Panda"
                            onclick="loadPage('character', {character_id: 8558}, '/character/8558-Panda'); return false;">
                            <div class="tooltip tooltip-character text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Panda </div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-warning">Drugoplanowa</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/character/8559-Suguru-Getou"
                        onclick="loadPage('character', {character_id: 8559}, '/character/8559-Suguru-Getou'); return false;">
                        <img class="img-fluid lozad rounded tooltip tooltip-character tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-src="https://cdn.ogladajanime.pl/images/character/8559.webp?20230322100521" alt="">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/character/8559-Suguru-Getou"
                            onclick="loadPage('character', {character_id: 8559}, '/character/8559-Suguru-Getou'); return false;">
                            <div class="tooltip tooltip-character text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Suguru Getou</div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-warning">Drugoplanowa</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/character/32452-Shouko-Ieiri"
                        onclick="loadPage('character', {character_id: 32452}, '/character/32452-Shouko-Ieiri'); return false;">
                        <img class="img-fluid lozad rounded tooltip tooltip-character tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-src="https://cdn.ogladajanime.pl/images/character/32452.webp?20230221235557" alt="">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/character/32452-Shouko-Ieiri"
                            onclick="loadPage('character', {character_id: 32452}, '/character/32452-Shouko-Ieiri'); return false;">
                            <div class="tooltip tooltip-character text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Shouko Ieiri</div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-warning">Drugoplanowa</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/character/32965-Kiyotaka-Ijichi"
                        onclick="loadPage('character', {character_id: 32965}, '/character/32965-Kiyotaka-Ijichi'); return false;">
                        <img class="img-fluid lozad rounded tooltip tooltip-character tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-src="https://cdn.ogladajanime.pl/images/character/32965.webp?20230221235552" alt="">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/character/32965-Kiyotaka-Ijichi"
                            onclick="loadPage('character', {character_id: 32965}, '/character/32965-Kiyotaka-Ijichi'); return false;">
                            <div class="tooltip tooltip-character text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Kiyotaka Ijichi</div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-warning">Drugoplanowa</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/character/8561-Toge-Inumaki"
                        onclick="loadPage('character', {character_id: 8561}, '/character/8561-Toge-Inumaki'); return false;">
                        <img class="img-fluid lozad rounded tooltip tooltip-character tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-src="https://cdn.ogladajanime.pl/images/character/8561.webp?20230221235554" alt="">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/character/8561-Toge-Inumaki"
                            onclick="loadPage('character', {character_id: 8561}, '/character/8561-Toge-Inumaki'); return false;">
                            <div class="tooltip tooltip-character text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Toge Inumaki</div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-warning">Drugoplanowa</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/character/34643-Nanami-Kento"
                        onclick="loadPage('character', {character_id: 34643}, '/character/34643-Nanami-Kento'); return false;">
                        <img class="img-fluid lozad rounded tooltip tooltip-character tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-src="https://cdn.ogladajanime.pl/images/character/34643.webp?20230221235558" alt="">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/character/34643-Nanami-Kento"
                            onclick="loadPage('character', {character_id: 34643}, '/character/34643-Nanami-Kento'); return false;">
                            <div class="tooltip tooltip-character text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Nanami Kento</div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-warning">Drugoplanowa</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/character/13060-Hanami"
                        onclick="loadPage('character', {character_id: 13060}, '/character/13060-Hanami'); return false;">
                        <img class="img-fluid lozad rounded tooltip tooltip-character tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-src="https://cdn.ogladajanime.pl/images/character/13060.webp?20230228201511" alt="">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/character/13060-Hanami"
                            onclick="loadPage('character', {character_id: 13060}, '/character/13060-Hanami'); return false;">
                            <div class="tooltip tooltip-character text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Hanami </div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-warning">Drugoplanowa</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/character/13061-Jougo"
                        onclick="loadPage('character', {character_id: 13061}, '/character/13061-Jougo'); return false;">
                        <img class="img-fluid lozad rounded tooltip tooltip-character tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-src="https://cdn.ogladajanime.pl/images/character/13061.webp?20230228201512" alt="">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/character/13061-Jougo"
                            onclick="loadPage('character', {character_id: 13061}, '/character/13061-Jougo'); return false;">
                            <div class="tooltip tooltip-character text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Jougo </div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-warning">Drugoplanowa</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-12 mb-2 m-0">
                <div class="card bg-white">
                  <div class="row card-body justify-content-center m-0 p-1">
                    <div class="col-2 m-0 p-0">
                      <a href="/character/13062-Mahito"
                        onclick="loadPage('character', {character_id: 13062}, '/character/13062-Mahito'); return false;">
                        <img class="img-fluid lozad rounded tooltip tooltip-character tooltipstered" height="600"
                          width="425" style="aspect-ratio: 425/600 !important;"
                          data-src="https://cdn.ogladajanime.pl/images/character/13062.webp?20230228201512" alt="">
                      </a>
                    </div>
                    <div class="col-10 mb-0 pb-0">
                      <div class="row" style="height:100%;">
                        <div class="col-12 px-2">
                          <a href="/character/13062-Mahito"
                            onclick="loadPage('character', {character_id: 13062}, '/character/13062-Mahito'); return false;">
                            <div class="tooltip tooltip-character text-bold tooltipstered"
                              style="float: left; font-size: 16px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;">
                              Mahito </div>
                          </a>
                        </div>
                        <div class="col-12 px-1 text-sm align-self-end">
                          <span class="m-0 mt-1 ml-1 badge badge-warning">Drugoplanowa</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
    </div>
    <script>

      runjQuery(function () {
        $(document).ready(function () {
          var num = "2";
          var watched = $($("#ep_list").find('[value=' + num + ']')[0]);

          if (watched.position() != undefined) {
            watched.addClass('active');
            updateNextEpisodeButton(num);

            $('#ep_list').scrollTop(watched.position().top - 80);
          }

          initializeAnimeTooltip();
          initializeUserTooltip();
          initializeCharacterTooltip();

          // changePlayerListLoad();
          var playerFrame = document.getElementById("playerFrame")

          if (playerFrame != undefined) {
            playerFrame.addEventListener("load", function (e) {
              if ($('#playerFrame').attr('src') != null)
                $('#playerLoader').addClass('d-none');
            });
          }

          checkDesc();

          $(window).resize(function () {
            checkDesc();
          });

          if ($('#animeCommentButton').text().includes('Odśwież'))
            loadAnimeComments();
        })
      });
    </script>
  </div>
  <script type="text/javascript">
    var _qasp = _qasp || [];
    _qasp.push(['setPAID']);

  </script>
  <div class="container-fluid">
    <div class="row justify-content-center">
      <div class="col-12 col-md-10 mt-2 text-secondary text-center small">
        Copyright © 2023 ogladajanime.pl<br>
        Żaden z prezentowanych materiałów nie jest hostowany na serwerach ogladajanime.pl. Serwis udostępnia jedynie
        informacje o anime oraz odnośniki do serwisów udostępniających zamieszczone materiały wideo (mi. vidoza.net,
        youtube.com, cda.pl, mp4upload.com, sibnet.ru itp.), których użytkownicy potwierdzili, że posiadają prawa
        autorskie do udostępnianych przez siebie zasobów. Wszelkie roszczenia prawne należy kierować pod adresem
        serwisów publikujących zamieszczone materiały. Administracja serwisu nie ponosi odpowiedzialności za treści i
        komentarze publikowane przez użytkowników.
        <br>
        Kontakt z administarcją strony: kontakt@ogladajanime.pl
        <br>
        <p id="genTime">Wygenerowano w: 14 ms.</p>
      </div>
    </div>
  </div>
  <script defer=""
    src="https://static.cloudflareinsights.com/beacon.min.js/v8b253dfea2ab4077af8c6f58422dfbfd1689876627854"
    integrity="sha512-bjgnUKX4azu3dLTVtie9u6TKqgx29RBwfj3QXYt5EKfWM/9hPSAI/4qcV5NACjwAo8UtTeWefx6Zq5PHcMm7Tg=="
    data-cf-beacon="{&quot;rayId&quot;:&quot;816a9c242fce2c2e&quot;,&quot;version&quot;:&quot;2023.8.0&quot;,&quot;r&quot;:1,&quot;token&quot;:&quot;e8603b64bd434065bb14989a476d380e&quot;,&quot;si&quot;:100}"
    crossorigin="anonymous"></script>


</body>

</html>
