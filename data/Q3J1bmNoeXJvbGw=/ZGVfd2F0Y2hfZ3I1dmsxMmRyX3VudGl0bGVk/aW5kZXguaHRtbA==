<html lang="de" dir="ltr">

<head>
    <meta charset="utf-8">
    <link rel="preconnect" href="https://imgsrv.crunchyroll.com">
    <link rel="preconnect" href="https://eec.crunchyroll.com">
    <link rel="preconnect" href="https://static.crunchyroll.com">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">
    <link rel="preload" href="/build/assets/fonts/Lato/Lato-Semibold.woff2" as="font" crossorigin="" type="font/woff2">
    <link rel="preload" href="/build/assets/fonts/Lato/Lato-Medium.woff2" as="font" crossorigin="" type="font/woff2">
    <link rel="preload" href="/build/assets/fonts/Lato/Lato-Heavy.woff2" as="font" crossorigin="" type="font/woff2">
    <link rel="preload" as="image" href="https://www.crunchyroll.com/build/assets/img/footer/sony_pictures_logo.png">
    <link rel="stylesheet" href="/build/_next/static/css/2c48d5e67156c5a0.css" data-precedence="next">
    <link rel="stylesheet" href="/build/_next/static/css/15495fa0eb960cbc.css" data-precedence="next">
    <link rel="preload" as="script" fetchpriority="low" href="/build/_next/static/chunks/webpack-6142b962a05999aa.js">
    <script src="https://cdn.cookielaw.org/scripttemplates/otSDKStub.js" type="text/javascript" charset="UTF-8"
        data-domain-script="9470b86f-5b87-4646-a4f7-2f2916b2a883"></script>
    <script src="/build/_next/static/chunks/fd9d1056-0b20414f83c60743.js" async=""></script>
    <script src="/build/_next/static/chunks/2117-ca4fd6e1148f787b.js" async=""></script>
    <script src="/build/_next/static/chunks/main-app-b2692a35bfc76357.js" async=""></script>
    <script src="/build/_next/static/chunks/9245-ead89068752fddd5.js" async=""></script>
    <script src="/build/_next/static/chunks/467-c4e431920d555f16.js" async=""></script>
    <script src="/build/_next/static/chunks/3666-af0033ce304ec0af.js" async=""></script>
    <script src="/build/_next/static/chunks/7507-f7b8f16ce2d0fe81.js" async=""></script>
    <script src="/build/_next/static/chunks/6252-5b9fabbb56757527.js" async=""></script>
    <script src="/build/_next/static/chunks/2335-1c0d4df5e7cd6b7c.js" async=""></script>
    <script src="/build/_next/static/chunks/4271-29a702866671b47e.js" async=""></script>
    <script src="/build/_next/static/chunks/3241-c656705d2176da50.js" async=""></script>
    <script src="/build/_next/static/chunks/2077-c4b20c6ce179bee2.js" async=""></script>
    <script src="/build/_next/static/chunks/9056-7a3119db7080ef7c.js" async=""></script>
    <script src="/build/_next/static/chunks/6309-5ae8d9934f7afdf9.js" async=""></script>
    <script src="/build/_next/static/chunks/6035-0ad2d60ccb21e6d0.js" async=""></script>
    <script src="/build/_next/static/chunks/5434-ed53304f8ef95bf8.js" async=""></script>
    <script src="/build/_next/static/chunks/8343-acb091498012eee0.js" async=""></script>
    <script src="/build/_next/static/chunks/8003-1e9267bfc29cfdf6.js" async=""></script>
    <script src="/build/_next/static/chunks/2848-954008d634b30e67.js" async=""></script>
    <script src="/build/_next/static/chunks/5767-36b4420d2af5e11f.js" async=""></script>
    <script src="/build/_next/static/chunks/app/layout-8059ccfbd735ab21.js" async=""></script>
    <script src="/build/_next/static/chunks/app/%5Blocale%5D/%5B%5B...pathname%5D%5D/loading-46f6b9ab07932dd0.js"
        async=""></script>
    <script src="/build/_next/static/chunks/8887-35a2a7fc79d6638e.js" async=""></script>
    <script src="/build/_next/static/chunks/1844-0b8d9101107308ba.js" async=""></script>
    <script src="/build/_next/static/chunks/7513-848cf5c7929840ce.js" async=""></script>
    <script src="/build/_next/static/chunks/8421-0b9cdd54efe42e86.js" async=""></script>
    <script src="/build/_next/static/chunks/3513-f29809099ff44bc4.js" async=""></script>
    <script src="/build/_next/static/chunks/6138-5386d90ca62a55f6.js" async=""></script>
    <script src="/build/_next/static/chunks/app/%5Blocale%5D/layout-ce6fd47d6030c370.js" async=""></script>
    <link rel="preload" href="https://static.crunchyroll.com/analytics/cr-eec-8.0.1.js" as="script">
    <meta name="theme-color" content="#1b1a26">
    <link rel="manifest" href="/manifest.json" crossorigin="use-credentials">
    <link rel="icon" href="/build/assets/img/favicons/favicon-v2-16x16.png" sizes="16x16" type="image/png">
    <link rel="icon" href="/build/assets/img/favicons/favicon-v2-32x32.png" sizes="32x32" type="image/png">
    <link rel="icon" href="/build/assets/img/favicons/favicon-v2-96x96.png" sizes="96x96" type="image/png">
    <link rel="apple-touch-icon" href="/build/assets/img/favicons/apple-touch-icon-v2-57x57.png" sizes="57x57">
    <link rel="apple-touch-icon" href="/build/assets/img/favicons/apple-touch-icon-v2-60x60.png" sizes="60x60">
    <link rel="apple-touch-icon" href="/build/assets/img/favicons/apple-touch-icon-v2-72x72.png" sizes="72x72">
    <link rel="apple-touch-icon" href="/build/assets/img/favicons/apple-touch-icon-v2-76x76.png" sizes="76x76">
    <link rel="apple-touch-icon" href="/build/assets/img/favicons/apple-touch-icon-v2-114x114.png" sizes="114x114">
    <title>Ai-Mai-Mi Mousou Catastrophe Ohne Titel - Schau auf Crunchyroll</title>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <script id="segment-fetch-credentials">
        const checkValue = value =>
            value?.startsWith?.(
                'https://eec.crunchyroll.com/v1'
            );
        const getURLValue = arg => arg instanceof URL && arg.origin;
        const getRequestValue = arg => arg instanceof Request && arg.url;

        const originalFetch = window.fetch;

        window.fetch = function (arg, options = {}) {
            try {
                if (checkValue(getURLValue(arg) || getRequestValue(arg) || arg)) {
                    options.credentials = 'include';
                }

                return originalFetch(arg, options);
            } catch (e) {
                console.error('Error in fetch fix', e);

                return originalFetch(arg, options);
            }
        };
    </script>
    <script>(self.__next_s = self.__next_s || []).push([0, { "children": "\n            (function() {\n              const url = new URL(window.location.href);\n\n              const originalPathname = url.pathname;\n              const sanitizedPathname = originalPathname.replaceAll(/\\/{2,}/g, '/');\n\n              if (sanitizedPathname !== originalPathname) {\n                url.pathname = sanitizedPathname;\n                window.history.replaceState(null, '', url.toString());\n                }\n            })()\n          ", "id": "sanitize-pathname" }])</script>
    <script>(self.__next_s = self.__next_s || []).push([0, { "children": "\n              window.prerenderReady = false\n            ", "id": "prerender-not-ready" }])</script>
    <script>(self.__next_s = self.__next_s || []).push([0, { "children": "\n              setTimeout(() => {\n                window.prerenderReady = true;\n              },19000)\n            ", "id": "prerender-ready" }])</script>
    <style rel="stylesheet">
        .erc-root-layout {
            visibility: hidden;
        }

        body {
            background-color: rgb(0, 0, 0);
        }
    </style>
    <script>(self.__next_s = self.__next_s || []).push([0, { "children": "\n                window.etp = {\"src\":\"https://static.crunchyroll.com/analytics/cr-eec-8.0.1.js\",\"config\":{\"analytics\":{\"writeKey\":\"VfZ36W4IeP9eT1VqeGPX2DIwq6SeLyW4\",\"microsoftWriteKey\":\"HbnMM2mSIKuwfaYearW0ioRSLoao1ljF\",\"defaultApiHost\":\"eec.crunchyroll.com/v1\",\"fallbackLibraryHost\":\"sa.etp-prod.com/analytics.js/v1/\",\"gtmId\":\"GTM-PK7T4JG\"},\"ccpa\":{\"userConsentConfig\":{\"cookieDomain\":\"beta.crunchyroll.com\",\"domId\":\"1bd5662a-1ef1-4d20-bea2-ea9557d3df42\",\"src\":\"https://cdn.cookielaw.org/scripttemplates/otSDKStub.js\"}},\"oneTrust\":{\"sdkSrc\":\"https://cdn.cookielaw.org/scripttemplates/otSDKStub.js\",\"domainScript\":\"9470b86f-5b87-4646-a4f7-2f2916b2a883\"}}};\n                if (window.document.referrer === 'app-info://platform/microsoft-store') {\n                  window.etp.config.analytics.writeKey = window.etp.config.analytics.microsoftWriteKey\n                }\n              ", "id": "etp-config" }])</script>
    <script>(self.__next_s = self.__next_s || []).push(["https://static.crunchyroll.com/analytics/cr-eec-8.0.1.js", { "type": "text/javascript", "id": "etp-analytics" }])</script>
    <script
        id="app-config">window.__APP_CONFIG__ = { "cookie": { "domain": "crunchyroll.com", "path": "/", "expires": -1, "sameSite": "Lax", "secure": true, "httpOnly": false }, "logger": { "enabled": true }, "debug": { "enabled": false }, "datadog": { "apm": { "enabled": true }, "browserRum": { "env": "prod", "applicationId": "f10c0867-3aa9-4179-a957-bcb2522940fc", "clientToken": "pub6b0c3cc3e86bd646a5c19b3b4a2a45af", "site": "us5.datadoghq.com", "service": "cxweb", "sessionSampleRate": 20, "sessionReplaySampleRate": 0, "trackInteractions": true, "trackResources": true, "defaultPrivacyLevel": "mask-user-input", "trackViewsManually": true, "enableExperimentalFeatures": ["feature_flags"] } }, "braze": { "apiKey": "80f403d2-1c18-471d-b0ef-243d1d646436", "sdkEndpoint": "sdk.iad-03.braze.com" }, "drm": { "dashRolloutPercent": 100, "fairplayCertificateUrl": "https://lic.staging.drmtoday.com/license-server-fairplay/cert/", "playreadyCertificateUrl": "https://lic.staging.drmtoday.com//license-proxy-headerauth/drmtoday/RightsManager.asmx", "widevineCertificateUrl": "https://lic.staging.drmtoday.com/license-proxy-widevine/cenc/" }, "darkFeatureConfig": { "rolloutFeatures": { "changePlan": "2b96c0bcf487cbda6ae6c3787c499b0911b7d805b6c4ecb7066c7a9c8e63313f", "gatedHomepageABTest": "00b87f139e5571bff242922dd6028826c18685c6d433433b4268113771812884" }, "developmentFeatures": { "adConfigId": "34a958a196f6e7271b792e5a49969279c71495c4057cf0fbaa784079661eff47", "alexandria": "f8ce85591c31f9f949a210e89e1337ba902745da3835682d114f55ba720995c9", "flashMessageTimeout": "ee5bb0ae1982555a6bb40bca8b306e793c3dfe4bec4ba1f230ead3baea63f1de", "oneAdPerMidroll": "28530273e4a7ceba936d748b9a80f808254a5f00cbb36f173447dfc8f61bdad1", "strictMode": "adc72b417b58bb9970bf5ac02fc275acf92977f3ae3c602ab638f1f39c243155", "vilosUrl": "79fd1e27d68052f4e55907d20273b1334df964a9c89e19314bbd1a9ec44ad287", "countryOverride": "8e4edb64f5ae8437bd9ddd232f0ea4647927979a9a7d775e793de6ee62414ea6", "videoQualitySelector": "28a117b375f227cef52db075ca26fa10f8442b6aef01bc732ca131de8863e527", "lrxUa": "e68028df98391faaedb64f48f57aa97b71cef5d7e62da2f2dba41c715b28d3ec", "premiumCtaWatchPage": "bbaf42ad1a9ea0b0a25490df659f80cf2a944d0e3496c0fccf66e4899cf0a186", "partnersIntegration": "63cc0ffa07ef14913b073bb931bf6403939103ba736850bcb723454706a14580", "endSlateRecommendations": "8ce2308787e85db880f0b12baccffbf83281c49cc8ec392add92ceee5c3a2362", "navABtest": "12664a7a11fb702efeba3a49b938753e7aae38eeeaf27c97bed1ab8f3f39ae1c", "comingSoon": "845503e75459d7eeb8cca2890e6ff36be9da9bc8bc22b0e9242c5d84aba9c651", "indiaRatings": "72f7ead393b1ad8a10b9d41b4a45847be6ef5daa9549b290207e1678031cc3a6", "australiaRatings": "422f489431b5afdc727f9af8fa44c1b76af56dc0a6154951b809f72d1e760a5d", "samsungCheckout": "26e78d6eea65e3e03bf0edd943a02acd52a46cbd32e1b60626224359c490420a" }, "storageKey": "efg_state", "domain": "crunchyroll.com", "securedRoutes": ["/feature(?![\\w\\d])", ["/feature(?![wd])"]], "computedFeatureHashMap": { "changePlan": "2b96c0bcf487cbda6ae6c3787c499b0911b7d805b6c4ecb7066c7a9c8e63313f", "gatedHomepageABTest": "00b87f139e5571bff242922dd6028826c18685c6d433433b4268113771812884", "adConfigId": "34a958a196f6e7271b792e5a49969279c71495c4057cf0fbaa784079661eff47", "alexandria": "f8ce85591c31f9f949a210e89e1337ba902745da3835682d114f55ba720995c9", "flashMessageTimeout": "ee5bb0ae1982555a6bb40bca8b306e793c3dfe4bec4ba1f230ead3baea63f1de", "oneAdPerMidroll": "28530273e4a7ceba936d748b9a80f808254a5f00cbb36f173447dfc8f61bdad1", "strictMode": "adc72b417b58bb9970bf5ac02fc275acf92977f3ae3c602ab638f1f39c243155", "vilosUrl": "79fd1e27d68052f4e55907d20273b1334df964a9c89e19314bbd1a9ec44ad287", "countryOverride": "8e4edb64f5ae8437bd9ddd232f0ea4647927979a9a7d775e793de6ee62414ea6", "videoQualitySelector": "28a117b375f227cef52db075ca26fa10f8442b6aef01bc732ca131de8863e527", "lrxUa": "e68028df98391faaedb64f48f57aa97b71cef5d7e62da2f2dba41c715b28d3ec", "premiumCtaWatchPage": "bbaf42ad1a9ea0b0a25490df659f80cf2a944d0e3496c0fccf66e4899cf0a186", "partnersIntegration": "63cc0ffa07ef14913b073bb931bf6403939103ba736850bcb723454706a14580", "endSlateRecommendations": "8ce2308787e85db880f0b12baccffbf83281c49cc8ec392add92ceee5c3a2362", "navABtest": "12664a7a11fb702efeba3a49b938753e7aae38eeeaf27c97bed1ab8f3f39ae1c", "comingSoon": "845503e75459d7eeb8cca2890e6ff36be9da9bc8bc22b0e9242c5d84aba9c651", "indiaRatings": "72f7ead393b1ad8a10b9d41b4a45847be6ef5daa9549b290207e1678031cc3a6", "australiaRatings": "422f489431b5afdc727f9af8fa44c1b76af56dc0a6154951b809f72d1e760a5d", "samsungCheckout": "26e78d6eea65e3e03bf0edd943a02acd52a46cbd32e1b60626224359c490420a" } }, "staticDomain": "https://www.crunchyroll.com", "assetsPath": "/build", "assetsBuildPath": "", "baseSiteUrl": "https://www.crunchyroll.com", "baseStaticUrl": "https://static.crunchyroll.com", "baseSsoUrl": "https://sso.crunchyroll.com", "imgSrvUrl": "https://imgsrv.crunchyroll.com/cdn-cgi/image", "incentivesConductorServiceUrl": "https://cr-incentives-conductor.prd.crunchyrollsvc.com", "newsServiceUrl": "https://cr-news-api-service.prd.crunchyrollsvc.com/v1", "vilosConfig": { "vilosPlayerUrl": "https://static.crunchyroll.com/vilos-v2/web/vilos/player.html", "vilosApiDomain": "https://www.crunchyroll.com", "playServiceUrl": "https://www.crunchyroll.com/playback", "defaultUrls": { "prod": "https://www.crunchyroll.com/playback", "dev": "https://cr-play-service.dev.crunchyrollsvc.com", "staging": "https://stage.crunchyroll.com/playback" } }, "cxApiParams": { "apiDomain": "https://www.crunchyroll.com", "accountAuthClientId": "noaihdevm_6iyg0a8l0q", "anonClientId": "cr_web", "deviceIdDomain": ".crunchyroll.com" }, "redirectRoutes": [{ "url": "/maintenance", "patterns": [], "statusCode": 302 }, { "url": "/simulcasts", "patterns": ["/videos/(drama|anime)/simulcasts"], "statusCode": 301 }, { "url": "/series/GR751KNZY/attack-on-titan", "patterns": ["/series/G24H1NM05"], "statusCode": 301 }, { "url": "/series/G6DQDD3WR/fairy-tail", "patterns": ["/series/G0XHWM9M"], "statusCode": 301 }, { "url": "/series/GY8VM8MWY/haikyu", "patterns": ["/series/GXJHM3980"], "statusCode": 301 }, { "url": "/series/G6NQ5DWZ6/my-hero-academia", "patterns": ["/series/GYNV9DP2R"], "statusCode": 301 }, { "url": "/series/GRE50KV36/black-clover", "patterns": ["/series/gy1xx0n0y"], "statusCode": 301 }, { "url": "/series/G6GG91P26/food-wars-shokugeki-no-soma", "patterns": ["/series/GR0XP5V9Y"], "statusCode": 301 }, { "url": "/videos/alphabetical", "patterns": ["/videos/(drama|anime)/alpha"], "statusCode": 301 }, { "url": "/videos/new", "patterns": ["/videos/(drama|anime)/updated"], "statusCode": 301 }, { "url": "/videos/popular", "patterns": ["/videos/anime(?!/\\w)"], "statusCode": 301 }, { "url": "/history", "patterns": ["/home/history"], "statusCode": 301 }, { "url": "/", "patterns": ["/device_activated"], "statusCode": 301 }, { "url": "/", "patterns": ["/comics/manga/*"], "statusCode": 301 }, { "url": "/", "patterns": ["/manga/\\w+/read/\\w+"], "statusCode": 301 }, { "url": "/", "patterns": ["^/manga/?$"], "statusCode": 301 }, { "url": "/", "patterns": ["^/lineup/manga([/?#]\\S*)*$"], "statusCode": 301 }, { "url": "/search", "patterns": ["^/search-classic([/?#]\\S*)*$"], "statusCode": 301 }, { "url": "/", "patterns": ["^/(forumtopic|forumcategory)(-\\d*)?([/?#]\\S*)*$"], "statusCode": 301 }, { "url": "/", "patterns": ["^/forum([/?#]\\S*)*$"], "statusCode": 301 }, { "url": "/", "patterns": ["^/library([/?#]\\S*)*$"], "statusCode": 301 }], "authorizedRoutes": ["^/account", "^/profile/email", "^/watchlist", "^/history", "^/crunchylists", "^/notifications", "^/profiles"], "payPal": { "env": "production" }, "NODE_ENV": "production", "STAGE": "prd", "appVersion": "675184e8e123e39e2c331789199d936ee49de921" }</script>
    <script src="/build/_next/static/chunks/polyfills-42372ed130431b0a.js" nomodule=""></script>
    <script>(function () { window.SS = window.SS || {}; SS.Require = function (callback) { if (typeof callback === 'function') { if (window.SS && SS.EventTrack) { callback(); } else { var siteSpect = document.getElementById('siteSpectLibraries'); var head = document.getElementsByTagName('head')[0]; if (siteSpect === null && typeof head !== 'undefined') { siteSpect = document.createElement('script'); siteSpect.type = 'text/javascript'; siteSpect.setAttribute("ssobj", "/crobjects/"); siteSpect.setAttribute("sstrack", "crmet"); siteSpect.src = '/crobjects/core.js+ssdomvar.js+generic-adapter.js'; siteSpect.async = true; siteSpect.id = 'siteSpectLibraries'; head.appendChild(siteSpect); } if (window.addEventListener) { siteSpect.addEventListener('load', callback, false); } else { siteSpect.attachEvent('onload', callback, false); } } } }; })(); </script>
    <script id="sanitize-pathname">
        (function () {
            const url = new URL(window.location.href);

            const originalPathname = url.pathname;
            const sanitizedPathname = originalPathname.replaceAll(/\/{2,}/g, '/');

            if (sanitizedPathname !== originalPathname) {
                url.pathname = sanitizedPathname;
                window.history.replaceState(null, '', url.toString());
            }
        })()
    </script>
    <link rel="prefetch" as="script" href="/build/_next/static/chunks/3493.85fa99049a8661d1.js">
    <link rel="prefetch" as="script" href="/build/_next/static/chunks/7814.9029ab74bcb97ca1.js">
    <link rel="prefetch" as="script" href="/build/_next/static/chunks/1370-bf8747611b945cab.js">
    <link rel="prefetch" as="script" href="/build/_next/static/chunks/1950-f662f6730cb5b965.js">
    <link rel="prefetch" as="script" href="/build/_next/static/chunks/845.89e6f74e2a563480.js">
    <link rel="prefetch" as="script" href="/build/_next/static/chunks/4563.0f2f5bfb49a307da.js">
    <script id="prerender-not-ready">
        window.prerenderReady = false
    </script>
    <script id="prerender-ready">
        setTimeout(() => {
            window.prerenderReady = true;
        }, 19000)
    </script>
    <script id="etp-config">
        window.etp = { "src": "https://static.crunchyroll.com/analytics/cr-eec-8.0.1.js", "config": { "analytics": { "writeKey": "VfZ36W4IeP9eT1VqeGPX2DIwq6SeLyW4", "microsoftWriteKey": "HbnMM2mSIKuwfaYearW0ioRSLoao1ljF", "defaultApiHost": "eec.crunchyroll.com/v1", "fallbackLibraryHost": "sa.etp-prod.com/analytics.js/v1/", "gtmId": "GTM-PK7T4JG" }, "ccpa": { "userConsentConfig": { "cookieDomain": "beta.crunchyroll.com", "domId": "1bd5662a-1ef1-4d20-bea2-ea9557d3df42", "src": "https://cdn.cookielaw.org/scripttemplates/otSDKStub.js" } }, "oneTrust": { "sdkSrc": "https://cdn.cookielaw.org/scripttemplates/otSDKStub.js", "domainScript": "9470b86f-5b87-4646-a4f7-2f2916b2a883" } } };
        if (window.document.referrer === 'app-info://platform/microsoft-store') {
            window.etp.config.analytics.writeKey = window.etp.config.analytics.microsoftWriteKey
        }
    </script>
    <script type="text/javascript" id="etp-analytics"
        src="https://static.crunchyroll.com/analytics/cr-eec-8.0.1.js"></script>
    <script src="https://cdn.segment.com/analytics.js/v1/VfZ36W4IeP9eT1VqeGPX2DIwq6SeLyW4/analytics.min.js"
        type="text/javascript" async="" crossorigin="anonymous"></script>
    <script src="https://sa.etp-prod.com/analytics.js/v1/VfZ36W4IeP9eT1VqeGPX2DIwq6SeLyW4/analytics.min.js"
        type="text/javascript" async="" crossorigin="anonymous"></script>
    <script src="https://www.googletagmanager.com/gtm.js?id=GTM-PK7T4JG" type="text/javascript" async=""
        crossorigin="anonymous"></script>
    <link rel="alternate" hreflang="x-default" href="https://www.crunchyroll.com/watch/GR5VK12DR/untitled"
        data-rh="true">
    <link rel="alternate" hreflang="en" href="https://www.crunchyroll.com/watch/GR5VK12DR/untitled" data-rh="true">
    <link rel="alternate" hreflang="id" href="https://www.crunchyroll.com/id/watch/GR5VK12DR/untitled" data-rh="true">
    <link rel="alternate" hreflang="de" href="https://www.crunchyroll.com/de/watch/GR5VK12DR/untitled" data-rh="true">
    <link rel="alternate" hreflang="es" href="https://www.crunchyroll.com/es/watch/GR5VK12DR/untitled" data-rh="true">
    <link rel="alternate" hreflang="es-es" href="https://www.crunchyroll.com/es-es/watch/GR5VK12DR/untitled"
        data-rh="true">
    <link rel="alternate" hreflang="fr" href="https://www.crunchyroll.com/fr/watch/GR5VK12DR/untitled" data-rh="true">
    <link rel="alternate" hreflang="it" href="https://www.crunchyroll.com/it/watch/GR5VK12DR/untitled" data-rh="true">
    <link rel="alternate" hreflang="pt-br" href="https://www.crunchyroll.com/pt-br/watch/GR5VK12DR/untitled"
        data-rh="true">
    <link rel="alternate" hreflang="pt-pt" href="https://www.crunchyroll.com/pt-pt/watch/GR5VK12DR/untitled"
        data-rh="true">
    <link rel="alternate" hreflang="ru" href="https://www.crunchyroll.com/ru/watch/GR5VK12DR/untitled" data-rh="true">
    <link rel="alternate" hreflang="ar" href="https://www.crunchyroll.com/ar/watch/GR5VK12DR/untitled" data-rh="true">
    <link rel="alternate" hreflang="hi" href="https://www.crunchyroll.com/hi/watch/GR5VK12DR/untitled" data-rh="true">
    <script src="https://cdn.cookielaw.org/scripttemplates/202311.1.0/otBannerSdk.js" async=""
        type="text/javascript"></script>
    <style id="onetrust-style">
        #onetrust-banner-sdk {
            -ms-text-size-adjust: 100%;
            -webkit-text-size-adjust: 100%
        }

        #onetrust-banner-sdk .onetrust-vendors-list-handler {
            cursor: pointer;
            color: #1f96db;
            font-size: inherit;
            font-weight: bold;
            text-decoration: none;
            margin-left: 5px
        }

        #onetrust-banner-sdk .onetrust-vendors-list-handler:hover {
            color: #1f96db
        }

        #onetrust-banner-sdk:focus {
            outline: 2px solid #000;
            outline-offset: -2px
        }

        #onetrust-banner-sdk a:focus {
            outline: 2px solid #000
        }

        #onetrust-banner-sdk #onetrust-accept-btn-handler,
        #onetrust-banner-sdk #onetrust-reject-all-handler,
        #onetrust-banner-sdk #onetrust-pc-btn-handler {
            outline-offset: 1px
        }

        #onetrust-banner-sdk.ot-bnr-w-logo .ot-bnr-logo {
            height: 64px;
            width: 64px
        }

        #onetrust-banner-sdk .ot-tcf2-vendor-count.ot-text-bold {
            font-weight: bold
        }

        #onetrust-banner-sdk .ot-close-icon,
        #onetrust-pc-sdk .ot-close-icon,
        #ot-sync-ntfy .ot-close-icon {
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center;
            height: 12px;
            width: 12px
        }

        #onetrust-banner-sdk .powered-by-logo,
        #onetrust-banner-sdk .ot-pc-footer-logo a,
        #onetrust-pc-sdk .powered-by-logo,
        #onetrust-pc-sdk .ot-pc-footer-logo a,
        #ot-sync-ntfy .powered-by-logo,
        #ot-sync-ntfy .ot-pc-footer-logo a {
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center;
            height: 25px;
            width: 152px;
            display: block;
            text-decoration: none;
            font-size: .75em
        }

        #onetrust-banner-sdk .powered-by-logo:hover,
        #onetrust-banner-sdk .ot-pc-footer-logo a:hover,
        #onetrust-pc-sdk .powered-by-logo:hover,
        #onetrust-pc-sdk .ot-pc-footer-logo a:hover,
        #ot-sync-ntfy .powered-by-logo:hover,
        #ot-sync-ntfy .ot-pc-footer-logo a:hover {
            color: #565656
        }

        #onetrust-banner-sdk h3 *,
        #onetrust-banner-sdk h4 *,
        #onetrust-banner-sdk h6 *,
        #onetrust-banner-sdk button *,
        #onetrust-banner-sdk a[data-parent-id] *,
        #onetrust-pc-sdk h3 *,
        #onetrust-pc-sdk h4 *,
        #onetrust-pc-sdk h6 *,
        #onetrust-pc-sdk button *,
        #onetrust-pc-sdk a[data-parent-id] *,
        #ot-sync-ntfy h3 *,
        #ot-sync-ntfy h4 *,
        #ot-sync-ntfy h6 *,
        #ot-sync-ntfy button *,
        #ot-sync-ntfy a[data-parent-id] * {
            font-size: inherit;
            font-weight: inherit;
            color: inherit
        }

        #onetrust-banner-sdk .ot-hide,
        #onetrust-pc-sdk .ot-hide,
        #ot-sync-ntfy .ot-hide {
            display: none !important
        }

        #onetrust-banner-sdk button.ot-link-btn:hover,
        #onetrust-pc-sdk button.ot-link-btn:hover,
        #ot-sync-ntfy button.ot-link-btn:hover {
            text-decoration: underline;
            opacity: 1
        }

        #onetrust-pc-sdk .ot-sdk-row .ot-sdk-column {
            padding: 0
        }

        #onetrust-pc-sdk .ot-sdk-container {
            padding-right: 0
        }

        #onetrust-pc-sdk .ot-sdk-row {
            flex-direction: initial;
            width: 100%
        }

        #onetrust-pc-sdk [type=checkbox]:checked,
        #onetrust-pc-sdk [type=checkbox]:not(:checked) {
            pointer-events: initial
        }

        #onetrust-pc-sdk [type=checkbox]:disabled+label::before,
        #onetrust-pc-sdk [type=checkbox]:disabled+label:after,
        #onetrust-pc-sdk [type=checkbox]:disabled+label {
            pointer-events: none;
            opacity: .7
        }

        #onetrust-pc-sdk #vendor-list-content {
            transform: translate3d(0, 0, 0)
        }

        #onetrust-pc-sdk li input[type=checkbox] {
            z-index: 1
        }

        #onetrust-pc-sdk li .ot-checkbox label {
            z-index: 2
        }

        #onetrust-pc-sdk li .ot-checkbox input[type=checkbox] {
            height: auto;
            width: auto
        }

        #onetrust-pc-sdk li .host-title a,
        #onetrust-pc-sdk li .ot-host-name a,
        #onetrust-pc-sdk li .accordion-text,
        #onetrust-pc-sdk li .ot-acc-txt {
            z-index: 2;
            position: relative
        }

        #onetrust-pc-sdk input {
            margin: 3px .1ex
        }

        #onetrust-pc-sdk .pc-logo,
        #onetrust-pc-sdk .ot-pc-logo {
            height: 60px;
            width: 180px;
            background-position: center;
            background-size: contain;
            background-repeat: no-repeat;
            display: inline-flex;
            justify-content: center;
            align-items: center
        }

        #onetrust-pc-sdk .pc-logo img,
        #onetrust-pc-sdk .ot-pc-logo img {
            max-height: 100%;
            max-width: 100%
        }

        #onetrust-pc-sdk .screen-reader-only,
        #onetrust-pc-sdk .ot-scrn-rdr,
        .ot-sdk-cookie-policy .screen-reader-only,
        .ot-sdk-cookie-policy .ot-scrn-rdr {
            border: 0;
            clip: rect(0 0 0 0);
            height: 1px;
            margin: -1px;
            overflow: hidden;
            padding: 0;
            position: absolute;
            width: 1px
        }

        #onetrust-pc-sdk.ot-fade-in,
        .onetrust-pc-dark-filter.ot-fade-in,
        #onetrust-banner-sdk.ot-fade-in {
            animation-name: onetrust-fade-in;
            animation-duration: 400ms;
            animation-timing-function: ease-in-out
        }

        #onetrust-pc-sdk.ot-hide {
            display: none !important
        }

        .onetrust-pc-dark-filter.ot-hide {
            display: none !important
        }

        #ot-sdk-btn.ot-sdk-show-settings,
        #ot-sdk-btn.optanon-show-settings {
            color: #68b631;
            border: 1px solid #68b631;
            height: auto;
            white-space: normal;
            word-wrap: break-word;
            padding: .8em 2em;
            font-size: .8em;
            line-height: 1.2;
            cursor: pointer;
            -moz-transition: .1s ease;
            -o-transition: .1s ease;
            -webkit-transition: 1s ease;
            transition: .1s ease
        }

        #ot-sdk-btn.ot-sdk-show-settings:hover,
        #ot-sdk-btn.optanon-show-settings:hover {
            color: #fff;
            background-color: #68b631
        }

        .onetrust-pc-dark-filter {
            background: rgba(0, 0, 0, .5);
            z-index: 2147483646;
            width: 100%;
            height: 100%;
            overflow: hidden;
            position: fixed;
            top: 0;
            bottom: 0;
            left: 0
        }

        @keyframes onetrust-fade-in {
            0% {
                opacity: 0
            }

            100% {
                opacity: 1
            }
        }

        .ot-cookie-label {
            text-decoration: underline
        }

        @media only screen and (min-width: 426px)and (max-width: 896px)and (orientation: landscape) {
            #onetrust-pc-sdk p {
                font-size: .75em
            }
        }

        #onetrust-banner-sdk .banner-option-input:focus+label {
            outline: 1px solid #000;
            outline-style: auto
        }

        .category-vendors-list-handler+a:focus,
        .category-vendors-list-handler+a:focus-visible {
            outline: 2px solid #000
        }

        #onetrust-pc-sdk .ot-userid-title {
            margin-top: 10px
        }

        #onetrust-pc-sdk .ot-userid-title>span,
        #onetrust-pc-sdk .ot-userid-timestamp>span {
            font-weight: 700
        }

        #onetrust-pc-sdk .ot-userid-desc {
            font-style: italic
        }

        #onetrust-pc-sdk .ot-host-desc a {
            pointer-events: initial
        }

        #onetrust-pc-sdk .ot-ven-hdr>p a {
            position: relative;
            z-index: 2;
            pointer-events: initial
        }

        #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-vnd-info a,
        #onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-vnd-info a {
            margin-right: auto
        }

        #onetrust-pc-sdk .ot-pc-footer-logo img {
            width: 136px;
            height: 16px
        }

        #onetrust-pc-sdk .ot-pur-vdr-count {
            font-weight: 400;
            font-size: .7rem;
            padding-top: 3px;
            display: block
        }

        #onetrust-banner-sdk .ot-optout-signal,
        #onetrust-pc-sdk .ot-optout-signal {
            border: 1px solid #32ae88;
            border-radius: 3px;
            padding: 5px;
            margin-bottom: 10px;
            background-color: #f9fffa;
            font-size: .85rem;
            line-height: 2
        }

        #onetrust-banner-sdk .ot-optout-signal .ot-optout-icon,
        #onetrust-pc-sdk .ot-optout-signal .ot-optout-icon {
            display: inline;
            margin-right: 5px
        }

        #onetrust-banner-sdk .ot-optout-signal svg,
        #onetrust-pc-sdk .ot-optout-signal svg {
            height: 20px;
            width: 30px;
            transform: scale(0.5)
        }

        #onetrust-banner-sdk .ot-optout-signal svg path,
        #onetrust-pc-sdk .ot-optout-signal svg path {
            fill: #32ae88
        }

        #onetrust-banner-sdk,
        #onetrust-pc-sdk,
        #ot-sdk-cookie-policy,
        #ot-sync-ntfy {
            font-size: 16px
        }

        #onetrust-banner-sdk *,
        #onetrust-banner-sdk ::after,
        #onetrust-banner-sdk ::before,
        #onetrust-pc-sdk *,
        #onetrust-pc-sdk ::after,
        #onetrust-pc-sdk ::before,
        #ot-sdk-cookie-policy *,
        #ot-sdk-cookie-policy ::after,
        #ot-sdk-cookie-policy ::before,
        #ot-sync-ntfy *,
        #ot-sync-ntfy ::after,
        #ot-sync-ntfy ::before {
            -webkit-box-sizing: content-box;
            -moz-box-sizing: content-box;
            box-sizing: content-box
        }

        #onetrust-banner-sdk div,
        #onetrust-banner-sdk span,
        #onetrust-banner-sdk h1,
        #onetrust-banner-sdk h2,
        #onetrust-banner-sdk h3,
        #onetrust-banner-sdk h4,
        #onetrust-banner-sdk h5,
        #onetrust-banner-sdk h6,
        #onetrust-banner-sdk p,
        #onetrust-banner-sdk img,
        #onetrust-banner-sdk svg,
        #onetrust-banner-sdk button,
        #onetrust-banner-sdk section,
        #onetrust-banner-sdk a,
        #onetrust-banner-sdk label,
        #onetrust-banner-sdk input,
        #onetrust-banner-sdk ul,
        #onetrust-banner-sdk li,
        #onetrust-banner-sdk nav,
        #onetrust-banner-sdk table,
        #onetrust-banner-sdk thead,
        #onetrust-banner-sdk tr,
        #onetrust-banner-sdk td,
        #onetrust-banner-sdk tbody,
        #onetrust-banner-sdk .ot-main-content,
        #onetrust-banner-sdk .ot-toggle,
        #onetrust-banner-sdk #ot-content,
        #onetrust-banner-sdk #ot-pc-content,
        #onetrust-banner-sdk .checkbox,
        #onetrust-pc-sdk div,
        #onetrust-pc-sdk span,
        #onetrust-pc-sdk h1,
        #onetrust-pc-sdk h2,
        #onetrust-pc-sdk h3,
        #onetrust-pc-sdk h4,
        #onetrust-pc-sdk h5,
        #onetrust-pc-sdk h6,
        #onetrust-pc-sdk p,
        #onetrust-pc-sdk img,
        #onetrust-pc-sdk svg,
        #onetrust-pc-sdk button,
        #onetrust-pc-sdk section,
        #onetrust-pc-sdk a,
        #onetrust-pc-sdk label,
        #onetrust-pc-sdk input,
        #onetrust-pc-sdk ul,
        #onetrust-pc-sdk li,
        #onetrust-pc-sdk nav,
        #onetrust-pc-sdk table,
        #onetrust-pc-sdk thead,
        #onetrust-pc-sdk tr,
        #onetrust-pc-sdk td,
        #onetrust-pc-sdk tbody,
        #onetrust-pc-sdk .ot-main-content,
        #onetrust-pc-sdk .ot-toggle,
        #onetrust-pc-sdk #ot-content,
        #onetrust-pc-sdk #ot-pc-content,
        #onetrust-pc-sdk .checkbox,
        #ot-sdk-cookie-policy div,
        #ot-sdk-cookie-policy span,
        #ot-sdk-cookie-policy h1,
        #ot-sdk-cookie-policy h2,
        #ot-sdk-cookie-policy h3,
        #ot-sdk-cookie-policy h4,
        #ot-sdk-cookie-policy h5,
        #ot-sdk-cookie-policy h6,
        #ot-sdk-cookie-policy p,
        #ot-sdk-cookie-policy img,
        #ot-sdk-cookie-policy svg,
        #ot-sdk-cookie-policy button,
        #ot-sdk-cookie-policy section,
        #ot-sdk-cookie-policy a,
        #ot-sdk-cookie-policy label,
        #ot-sdk-cookie-policy input,
        #ot-sdk-cookie-policy ul,
        #ot-sdk-cookie-policy li,
        #ot-sdk-cookie-policy nav,
        #ot-sdk-cookie-policy table,
        #ot-sdk-cookie-policy thead,
        #ot-sdk-cookie-policy tr,
        #ot-sdk-cookie-policy td,
        #ot-sdk-cookie-policy tbody,
        #ot-sdk-cookie-policy .ot-main-content,
        #ot-sdk-cookie-policy .ot-toggle,
        #ot-sdk-cookie-policy #ot-content,
        #ot-sdk-cookie-policy #ot-pc-content,
        #ot-sdk-cookie-policy .checkbox,
        #ot-sync-ntfy div,
        #ot-sync-ntfy span,
        #ot-sync-ntfy h1,
        #ot-sync-ntfy h2,
        #ot-sync-ntfy h3,
        #ot-sync-ntfy h4,
        #ot-sync-ntfy h5,
        #ot-sync-ntfy h6,
        #ot-sync-ntfy p,
        #ot-sync-ntfy img,
        #ot-sync-ntfy svg,
        #ot-sync-ntfy button,
        #ot-sync-ntfy section,
        #ot-sync-ntfy a,
        #ot-sync-ntfy label,
        #ot-sync-ntfy input,
        #ot-sync-ntfy ul,
        #ot-sync-ntfy li,
        #ot-sync-ntfy nav,
        #ot-sync-ntfy table,
        #ot-sync-ntfy thead,
        #ot-sync-ntfy tr,
        #ot-sync-ntfy td,
        #ot-sync-ntfy tbody,
        #ot-sync-ntfy .ot-main-content,
        #ot-sync-ntfy .ot-toggle,
        #ot-sync-ntfy #ot-content,
        #ot-sync-ntfy #ot-pc-content,
        #ot-sync-ntfy .checkbox {
            font-family: inherit;
            font-weight: normal;
            -webkit-font-smoothing: auto;
            letter-spacing: normal;
            line-height: normal;
            padding: 0;
            margin: 0;
            height: auto;
            min-height: 0;
            max-height: none;
            width: auto;
            min-width: 0;
            max-width: none;
            border-radius: 0;
            border: none;
            clear: none;
            float: none;
            position: static;
            bottom: auto;
            left: auto;
            right: auto;
            top: auto;
            text-align: left;
            text-decoration: none;
            text-indent: 0;
            text-shadow: none;
            text-transform: none;
            white-space: normal;
            background: none;
            overflow: visible;
            vertical-align: baseline;
            visibility: visible;
            z-index: auto;
            box-shadow: none
        }

        #onetrust-banner-sdk label:before,
        #onetrust-banner-sdk label:after,
        #onetrust-banner-sdk .checkbox:after,
        #onetrust-banner-sdk .checkbox:before,
        #onetrust-pc-sdk label:before,
        #onetrust-pc-sdk label:after,
        #onetrust-pc-sdk .checkbox:after,
        #onetrust-pc-sdk .checkbox:before,
        #ot-sdk-cookie-policy label:before,
        #ot-sdk-cookie-policy label:after,
        #ot-sdk-cookie-policy .checkbox:after,
        #ot-sdk-cookie-policy .checkbox:before,
        #ot-sync-ntfy label:before,
        #ot-sync-ntfy label:after,
        #ot-sync-ntfy .checkbox:after,
        #ot-sync-ntfy .checkbox:before {
            content: "";
            content: none
        }

        #onetrust-banner-sdk .ot-sdk-container,
        #onetrust-pc-sdk .ot-sdk-container,
        #ot-sdk-cookie-policy .ot-sdk-container {
            position: relative;
            width: 100%;
            max-width: 100%;
            margin: 0 auto;
            padding: 0 20px;
            box-sizing: border-box
        }

        #onetrust-banner-sdk .ot-sdk-column,
        #onetrust-banner-sdk .ot-sdk-columns,
        #onetrust-pc-sdk .ot-sdk-column,
        #onetrust-pc-sdk .ot-sdk-columns,
        #ot-sdk-cookie-policy .ot-sdk-column,
        #ot-sdk-cookie-policy .ot-sdk-columns {
            width: 100%;
            float: left;
            box-sizing: border-box;
            padding: 0;
            display: initial
        }

        @media(min-width: 400px) {

            #onetrust-banner-sdk .ot-sdk-container,
            #onetrust-pc-sdk .ot-sdk-container,
            #ot-sdk-cookie-policy .ot-sdk-container {
                width: 90%;
                padding: 0
            }
        }

        @media(min-width: 550px) {

            #onetrust-banner-sdk .ot-sdk-container,
            #onetrust-pc-sdk .ot-sdk-container,
            #ot-sdk-cookie-policy .ot-sdk-container {
                width: 100%
            }

            #onetrust-banner-sdk .ot-sdk-column,
            #onetrust-banner-sdk .ot-sdk-columns,
            #onetrust-pc-sdk .ot-sdk-column,
            #onetrust-pc-sdk .ot-sdk-columns,
            #ot-sdk-cookie-policy .ot-sdk-column,
            #ot-sdk-cookie-policy .ot-sdk-columns {
                margin-left: 4%
            }

            #onetrust-banner-sdk .ot-sdk-column:first-child,
            #onetrust-banner-sdk .ot-sdk-columns:first-child,
            #onetrust-pc-sdk .ot-sdk-column:first-child,
            #onetrust-pc-sdk .ot-sdk-columns:first-child,
            #ot-sdk-cookie-policy .ot-sdk-column:first-child,
            #ot-sdk-cookie-policy .ot-sdk-columns:first-child {
                margin-left: 0
            }

            #onetrust-banner-sdk .ot-sdk-two.ot-sdk-columns,
            #onetrust-pc-sdk .ot-sdk-two.ot-sdk-columns,
            #ot-sdk-cookie-policy .ot-sdk-two.ot-sdk-columns {
                width: 13.3333333333%
            }

            #onetrust-banner-sdk .ot-sdk-three.ot-sdk-columns,
            #onetrust-pc-sdk .ot-sdk-three.ot-sdk-columns,
            #ot-sdk-cookie-policy .ot-sdk-three.ot-sdk-columns {
                width: 22%
            }

            #onetrust-banner-sdk .ot-sdk-four.ot-sdk-columns,
            #onetrust-pc-sdk .ot-sdk-four.ot-sdk-columns,
            #ot-sdk-cookie-policy .ot-sdk-four.ot-sdk-columns {
                width: 30.6666666667%
            }

            #onetrust-banner-sdk .ot-sdk-eight.ot-sdk-columns,
            #onetrust-pc-sdk .ot-sdk-eight.ot-sdk-columns,
            #ot-sdk-cookie-policy .ot-sdk-eight.ot-sdk-columns {
                width: 65.3333333333%
            }

            #onetrust-banner-sdk .ot-sdk-nine.ot-sdk-columns,
            #onetrust-pc-sdk .ot-sdk-nine.ot-sdk-columns,
            #ot-sdk-cookie-policy .ot-sdk-nine.ot-sdk-columns {
                width: 74%
            }

            #onetrust-banner-sdk .ot-sdk-ten.ot-sdk-columns,
            #onetrust-pc-sdk .ot-sdk-ten.ot-sdk-columns,
            #ot-sdk-cookie-policy .ot-sdk-ten.ot-sdk-columns {
                width: 82.6666666667%
            }

            #onetrust-banner-sdk .ot-sdk-eleven.ot-sdk-columns,
            #onetrust-pc-sdk .ot-sdk-eleven.ot-sdk-columns,
            #ot-sdk-cookie-policy .ot-sdk-eleven.ot-sdk-columns {
                width: 91.3333333333%
            }

            #onetrust-banner-sdk .ot-sdk-twelve.ot-sdk-columns,
            #onetrust-pc-sdk .ot-sdk-twelve.ot-sdk-columns,
            #ot-sdk-cookie-policy .ot-sdk-twelve.ot-sdk-columns {
                width: 100%;
                margin-left: 0
            }
        }

        #onetrust-banner-sdk h1,
        #onetrust-banner-sdk h2,
        #onetrust-banner-sdk h3,
        #onetrust-banner-sdk h4,
        #onetrust-banner-sdk h5,
        #onetrust-banner-sdk h6,
        #onetrust-pc-sdk h1,
        #onetrust-pc-sdk h2,
        #onetrust-pc-sdk h3,
        #onetrust-pc-sdk h4,
        #onetrust-pc-sdk h5,
        #onetrust-pc-sdk h6,
        #ot-sdk-cookie-policy h1,
        #ot-sdk-cookie-policy h2,
        #ot-sdk-cookie-policy h3,
        #ot-sdk-cookie-policy h4,
        #ot-sdk-cookie-policy h5,
        #ot-sdk-cookie-policy h6 {
            margin-top: 0;
            font-weight: 600;
            font-family: inherit
        }

        #onetrust-banner-sdk h1,
        #onetrust-pc-sdk h1,
        #ot-sdk-cookie-policy h1 {
            font-size: 1.5rem;
            line-height: 1.2
        }

        #onetrust-banner-sdk h2,
        #onetrust-pc-sdk h2,
        #ot-sdk-cookie-policy h2 {
            font-size: 1.5rem;
            line-height: 1.25
        }

        #onetrust-banner-sdk h3,
        #onetrust-pc-sdk h3,
        #ot-sdk-cookie-policy h3 {
            font-size: 1.5rem;
            line-height: 1.3
        }

        #onetrust-banner-sdk h4,
        #onetrust-pc-sdk h4,
        #ot-sdk-cookie-policy h4 {
            font-size: 1.5rem;
            line-height: 1.35
        }

        #onetrust-banner-sdk h5,
        #onetrust-pc-sdk h5,
        #ot-sdk-cookie-policy h5 {
            font-size: 1.5rem;
            line-height: 1.5
        }

        #onetrust-banner-sdk h6,
        #onetrust-pc-sdk h6,
        #ot-sdk-cookie-policy h6 {
            font-size: 1.5rem;
            line-height: 1.6
        }

        @media(min-width: 550px) {

            #onetrust-banner-sdk h1,
            #onetrust-pc-sdk h1,
            #ot-sdk-cookie-policy h1 {
                font-size: 1.5rem
            }

            #onetrust-banner-sdk h2,
            #onetrust-pc-sdk h2,
            #ot-sdk-cookie-policy h2 {
                font-size: 1.5rem
            }

            #onetrust-banner-sdk h3,
            #onetrust-pc-sdk h3,
            #ot-sdk-cookie-policy h3 {
                font-size: 1.5rem
            }

            #onetrust-banner-sdk h4,
            #onetrust-pc-sdk h4,
            #ot-sdk-cookie-policy h4 {
                font-size: 1.5rem
            }

            #onetrust-banner-sdk h5,
            #onetrust-pc-sdk h5,
            #ot-sdk-cookie-policy h5 {
                font-size: 1.5rem
            }

            #onetrust-banner-sdk h6,
            #onetrust-pc-sdk h6,
            #ot-sdk-cookie-policy h6 {
                font-size: 1.5rem
            }
        }

        #onetrust-banner-sdk p,
        #onetrust-pc-sdk p,
        #ot-sdk-cookie-policy p {
            margin: 0 0 1em 0;
            font-family: inherit;
            line-height: normal
        }

        #onetrust-banner-sdk a,
        #onetrust-pc-sdk a,
        #ot-sdk-cookie-policy a {
            color: #565656;
            text-decoration: underline
        }

        #onetrust-banner-sdk a:hover,
        #onetrust-pc-sdk a:hover,
        #ot-sdk-cookie-policy a:hover {
            color: #565656;
            text-decoration: none
        }

        #onetrust-banner-sdk .ot-sdk-button,
        #onetrust-banner-sdk button,
        #onetrust-pc-sdk .ot-sdk-button,
        #onetrust-pc-sdk button,
        #ot-sdk-cookie-policy .ot-sdk-button,
        #ot-sdk-cookie-policy button {
            margin-bottom: 1rem;
            font-family: inherit
        }

        #onetrust-banner-sdk .ot-sdk-button,
        #onetrust-banner-sdk button,
        #onetrust-pc-sdk .ot-sdk-button,
        #onetrust-pc-sdk button,
        #ot-sdk-cookie-policy .ot-sdk-button,
        #ot-sdk-cookie-policy button {
            display: inline-block;
            height: 38px;
            padding: 0 30px;
            color: #555;
            text-align: center;
            font-size: .9em;
            font-weight: 400;
            line-height: 38px;
            letter-spacing: .01em;
            text-decoration: none;
            white-space: nowrap;
            background-color: rgba(0, 0, 0, 0);
            border-radius: 2px;
            border: 1px solid #bbb;
            cursor: pointer;
            box-sizing: border-box
        }

        #onetrust-banner-sdk .ot-sdk-button:hover,
        #onetrust-banner-sdk :not(.ot-leg-btn-container)>button:not(.ot-link-btn):hover,
        #onetrust-banner-sdk :not(.ot-leg-btn-container)>button:not(.ot-link-btn):focus,
        #onetrust-pc-sdk .ot-sdk-button:hover,
        #onetrust-pc-sdk :not(.ot-leg-btn-container)>button:not(.ot-link-btn):hover,
        #onetrust-pc-sdk :not(.ot-leg-btn-container)>button:not(.ot-link-btn):focus,
        #ot-sdk-cookie-policy .ot-sdk-button:hover,
        #ot-sdk-cookie-policy :not(.ot-leg-btn-container)>button:not(.ot-link-btn):hover,
        #ot-sdk-cookie-policy :not(.ot-leg-btn-container)>button:not(.ot-link-btn):focus {
            color: #333;
            border-color: #888;
            opacity: .7
        }

        #onetrust-banner-sdk .ot-sdk-button:focus,
        #onetrust-banner-sdk :not(.ot-leg-btn-container)>button:focus,
        #onetrust-pc-sdk .ot-sdk-button:focus,
        #onetrust-pc-sdk :not(.ot-leg-btn-container)>button:focus,
        #ot-sdk-cookie-policy .ot-sdk-button:focus,
        #ot-sdk-cookie-policy :not(.ot-leg-btn-container)>button:focus {
            outline: 2px solid #000
        }

        #onetrust-banner-sdk .ot-sdk-button.ot-sdk-button-primary,
        #onetrust-banner-sdk button.ot-sdk-button-primary,
        #onetrust-banner-sdk input[type=submit].ot-sdk-button-primary,
        #onetrust-banner-sdk input[type=reset].ot-sdk-button-primary,
        #onetrust-banner-sdk input[type=button].ot-sdk-button-primary,
        #onetrust-pc-sdk .ot-sdk-button.ot-sdk-button-primary,
        #onetrust-pc-sdk button.ot-sdk-button-primary,
        #onetrust-pc-sdk input[type=submit].ot-sdk-button-primary,
        #onetrust-pc-sdk input[type=reset].ot-sdk-button-primary,
        #onetrust-pc-sdk input[type=button].ot-sdk-button-primary,
        #ot-sdk-cookie-policy .ot-sdk-button.ot-sdk-button-primary,
        #ot-sdk-cookie-policy button.ot-sdk-button-primary,
        #ot-sdk-cookie-policy input[type=submit].ot-sdk-button-primary,
        #ot-sdk-cookie-policy input[type=reset].ot-sdk-button-primary,
        #ot-sdk-cookie-policy input[type=button].ot-sdk-button-primary {
            color: #fff;
            background-color: #33c3f0;
            border-color: #33c3f0
        }

        #onetrust-banner-sdk .ot-sdk-button.ot-sdk-button-primary:hover,
        #onetrust-banner-sdk button.ot-sdk-button-primary:hover,
        #onetrust-banner-sdk input[type=submit].ot-sdk-button-primary:hover,
        #onetrust-banner-sdk input[type=reset].ot-sdk-button-primary:hover,
        #onetrust-banner-sdk input[type=button].ot-sdk-button-primary:hover,
        #onetrust-banner-sdk .ot-sdk-button.ot-sdk-button-primary:focus,
        #onetrust-banner-sdk button.ot-sdk-button-primary:focus,
        #onetrust-banner-sdk input[type=submit].ot-sdk-button-primary:focus,
        #onetrust-banner-sdk input[type=reset].ot-sdk-button-primary:focus,
        #onetrust-banner-sdk input[type=button].ot-sdk-button-primary:focus,
        #onetrust-pc-sdk .ot-sdk-button.ot-sdk-button-primary:hover,
        #onetrust-pc-sdk button.ot-sdk-button-primary:hover,
        #onetrust-pc-sdk input[type=submit].ot-sdk-button-primary:hover,
        #onetrust-pc-sdk input[type=reset].ot-sdk-button-primary:hover,
        #onetrust-pc-sdk input[type=button].ot-sdk-button-primary:hover,
        #onetrust-pc-sdk .ot-sdk-button.ot-sdk-button-primary:focus,
        #onetrust-pc-sdk button.ot-sdk-button-primary:focus,
        #onetrust-pc-sdk input[type=submit].ot-sdk-button-primary:focus,
        #onetrust-pc-sdk input[type=reset].ot-sdk-button-primary:focus,
        #onetrust-pc-sdk input[type=button].ot-sdk-button-primary:focus,
        #ot-sdk-cookie-policy .ot-sdk-button.ot-sdk-button-primary:hover,
        #ot-sdk-cookie-policy button.ot-sdk-button-primary:hover,
        #ot-sdk-cookie-policy input[type=submit].ot-sdk-button-primary:hover,
        #ot-sdk-cookie-policy input[type=reset].ot-sdk-button-primary:hover,
        #ot-sdk-cookie-policy input[type=button].ot-sdk-button-primary:hover,
        #ot-sdk-cookie-policy .ot-sdk-button.ot-sdk-button-primary:focus,
        #ot-sdk-cookie-policy button.ot-sdk-button-primary:focus,
        #ot-sdk-cookie-policy input[type=submit].ot-sdk-button-primary:focus,
        #ot-sdk-cookie-policy input[type=reset].ot-sdk-button-primary:focus,
        #ot-sdk-cookie-policy input[type=button].ot-sdk-button-primary:focus {
            color: #fff;
            background-color: #1eaedb;
            border-color: #1eaedb
        }

        #onetrust-banner-sdk input[type=text],
        #onetrust-pc-sdk input[type=text],
        #ot-sdk-cookie-policy input[type=text] {
            height: 38px;
            padding: 6px 10px;
            background-color: #fff;
            border: 1px solid #d1d1d1;
            border-radius: 4px;
            box-shadow: none;
            box-sizing: border-box
        }

        #onetrust-banner-sdk input[type=text],
        #onetrust-pc-sdk input[type=text],
        #ot-sdk-cookie-policy input[type=text] {
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none
        }

        #onetrust-banner-sdk input[type=text]:focus,
        #onetrust-pc-sdk input[type=text]:focus,
        #ot-sdk-cookie-policy input[type=text]:focus {
            border: 1px solid #000;
            outline: 0
        }

        #onetrust-banner-sdk label,
        #onetrust-pc-sdk label,
        #ot-sdk-cookie-policy label {
            display: block;
            margin-bottom: .5rem;
            font-weight: 600
        }

        #onetrust-banner-sdk input[type=checkbox],
        #onetrust-pc-sdk input[type=checkbox],
        #ot-sdk-cookie-policy input[type=checkbox] {
            display: inline
        }

        #onetrust-banner-sdk ul,
        #onetrust-pc-sdk ul,
        #ot-sdk-cookie-policy ul {
            list-style: circle inside
        }

        #onetrust-banner-sdk ul,
        #onetrust-pc-sdk ul,
        #ot-sdk-cookie-policy ul {
            padding-left: 0;
            margin-top: 0
        }

        #onetrust-banner-sdk ul ul,
        #onetrust-pc-sdk ul ul,
        #ot-sdk-cookie-policy ul ul {
            margin: 1.5rem 0 1.5rem 3rem;
            font-size: 90%
        }

        #onetrust-banner-sdk li,
        #onetrust-pc-sdk li,
        #ot-sdk-cookie-policy li {
            margin-bottom: 1rem
        }

        #onetrust-banner-sdk th,
        #onetrust-banner-sdk td,
        #onetrust-pc-sdk th,
        #onetrust-pc-sdk td,
        #ot-sdk-cookie-policy th,
        #ot-sdk-cookie-policy td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #e1e1e1
        }

        #onetrust-banner-sdk button,
        #onetrust-pc-sdk button,
        #ot-sdk-cookie-policy button {
            margin-bottom: 1rem;
            font-family: inherit
        }

        #onetrust-banner-sdk .ot-sdk-container:after,
        #onetrust-banner-sdk .ot-sdk-row:after,
        #onetrust-pc-sdk .ot-sdk-container:after,
        #onetrust-pc-sdk .ot-sdk-row:after,
        #ot-sdk-cookie-policy .ot-sdk-container:after,
        #ot-sdk-cookie-policy .ot-sdk-row:after {
            content: "";
            display: table;
            clear: both
        }

        #onetrust-banner-sdk .ot-sdk-row,
        #onetrust-pc-sdk .ot-sdk-row,
        #ot-sdk-cookie-policy .ot-sdk-row {
            margin: 0;
            max-width: none;
            display: block
        }

        #onetrust-banner-sdk {
            box-shadow: 0 0 18px rgba(0, 0, 0, .2)
        }

        #onetrust-banner-sdk.otFlat {
            position: fixed;
            z-index: 2147483645;
            bottom: 0;
            right: 0;
            left: 0;
            background-color: #fff;
            max-height: 90%;
            overflow-x: hidden;
            overflow-y: auto
        }

        #onetrust-banner-sdk.otFlat.top {
            top: 0px;
            bottom: auto
        }

        #onetrust-banner-sdk.otRelFont {
            font-size: 1rem
        }

        #onetrust-banner-sdk>.ot-sdk-container {
            overflow: hidden
        }

        #onetrust-banner-sdk::-webkit-scrollbar {
            width: 11px
        }

        #onetrust-banner-sdk::-webkit-scrollbar-thumb {
            border-radius: 10px;
            background: #c1c1c1
        }

        #onetrust-banner-sdk {
            scrollbar-arrow-color: #c1c1c1;
            scrollbar-darkshadow-color: #c1c1c1;
            scrollbar-face-color: #c1c1c1;
            scrollbar-shadow-color: #c1c1c1
        }

        #onetrust-banner-sdk #onetrust-policy {
            margin: 1.25em 0 .625em 2em;
            overflow: hidden
        }

        #onetrust-banner-sdk #onetrust-policy .ot-gv-list-handler {
            float: left;
            font-size: .82em;
            padding: 0;
            margin-bottom: 0;
            border: 0;
            line-height: normal;
            height: auto;
            width: auto
        }

        #onetrust-banner-sdk #onetrust-policy-title {
            font-size: 1.2em;
            line-height: 1.3;
            margin-bottom: 10px
        }

        #onetrust-banner-sdk #onetrust-policy-text {
            clear: both;
            text-align: left;
            font-size: .88em;
            line-height: 1.4
        }

        #onetrust-banner-sdk #onetrust-policy-text * {
            font-size: inherit;
            line-height: inherit
        }

        #onetrust-banner-sdk #onetrust-policy-text a {
            font-weight: bold;
            margin-left: 5px
        }

        #onetrust-banner-sdk #onetrust-policy-title,
        #onetrust-banner-sdk #onetrust-policy-text {
            color: dimgray;
            float: left
        }

        #onetrust-banner-sdk #onetrust-button-group-parent {
            min-height: 1px;
            text-align: center
        }

        #onetrust-banner-sdk #onetrust-button-group {
            display: inline-block
        }

        #onetrust-banner-sdk #onetrust-accept-btn-handler,
        #onetrust-banner-sdk #onetrust-reject-all-handler,
        #onetrust-banner-sdk #onetrust-pc-btn-handler {
            background-color: #68b631;
            color: #fff;
            border-color: #68b631;
            margin-right: 1em;
            min-width: 125px;
            height: auto;
            white-space: normal;
            word-break: break-word;
            word-wrap: break-word;
            padding: 12px 10px;
            line-height: 1.2;
            font-size: .813em;
            font-weight: 600
        }

        #onetrust-banner-sdk #onetrust-pc-btn-handler.cookie-setting-link {
            background-color: #fff;
            border: none;
            color: #68b631;
            text-decoration: underline;
            padding-left: 0;
            padding-right: 0
        }

        #onetrust-banner-sdk .onetrust-close-btn-ui {
            width: 44px;
            height: 44px;
            background-size: 12px;
            border: none;
            position: relative;
            margin: auto;
            padding: 0
        }

        #onetrust-banner-sdk .banner_logo {
            display: none
        }

        #onetrust-banner-sdk.ot-bnr-w-logo .ot-bnr-logo {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            left: 0px
        }

        #onetrust-banner-sdk.ot-bnr-w-logo #onetrust-policy {
            margin-left: 65px
        }

        #onetrust-banner-sdk .ot-b-addl-desc {
            clear: both;
            float: left;
            display: block
        }

        #onetrust-banner-sdk #banner-options {
            float: left;
            display: table;
            margin-right: 0;
            margin-left: 1em;
            width: calc(100% - 1em)
        }

        #onetrust-banner-sdk .banner-option-input {
            cursor: pointer;
            width: auto;
            height: auto;
            border: none;
            padding: 0;
            padding-right: 3px;
            margin: 0 0 10px;
            font-size: .82em;
            line-height: 1.4
        }

        #onetrust-banner-sdk .banner-option-input * {
            pointer-events: none;
            font-size: inherit;
            line-height: inherit
        }

        #onetrust-banner-sdk .banner-option-input[aria-expanded=true]~.banner-option-details {
            display: block;
            height: auto
        }

        #onetrust-banner-sdk .banner-option-input[aria-expanded=true] .ot-arrow-container {
            transform: rotate(90deg)
        }

        #onetrust-banner-sdk .banner-option {
            margin-bottom: 12px;
            margin-left: 0;
            border: none;
            float: left;
            padding: 0
        }

        #onetrust-banner-sdk .banner-option:first-child {
            padding-left: 2px
        }

        #onetrust-banner-sdk .banner-option:not(:first-child) {
            padding: 0;
            border: none
        }

        #onetrust-banner-sdk .banner-option-header {
            cursor: pointer;
            display: inline-block
        }

        #onetrust-banner-sdk .banner-option-header :first-child {
            color: dimgray;
            font-weight: bold;
            float: left
        }

        #onetrust-banner-sdk .banner-option-header .ot-arrow-container {
            display: inline-block;
            border-top: 6px solid rgba(0, 0, 0, 0);
            border-bottom: 6px solid rgba(0, 0, 0, 0);
            border-left: 6px solid dimgray;
            margin-left: 10px;
            vertical-align: middle
        }

        #onetrust-banner-sdk .banner-option-details {
            display: none;
            font-size: .83em;
            line-height: 1.5;
            padding: 10px 0px 5px 10px;
            margin-right: 10px;
            height: 0px
        }

        #onetrust-banner-sdk .banner-option-details * {
            font-size: inherit;
            line-height: inherit;
            color: dimgray
        }

        #onetrust-banner-sdk .ot-arrow-container,
        #onetrust-banner-sdk .banner-option-details {
            transition: all 300ms ease-in 0s;
            -webkit-transition: all 300ms ease-in 0s;
            -moz-transition: all 300ms ease-in 0s;
            -o-transition: all 300ms ease-in 0s
        }

        #onetrust-banner-sdk .ot-dpd-container {
            float: left
        }

        #onetrust-banner-sdk .ot-dpd-title {
            margin-bottom: 10px
        }

        #onetrust-banner-sdk .ot-dpd-title,
        #onetrust-banner-sdk .ot-dpd-desc {
            font-size: .88em;
            line-height: 1.4;
            color: dimgray
        }

        #onetrust-banner-sdk .ot-dpd-title *,
        #onetrust-banner-sdk .ot-dpd-desc * {
            font-size: inherit;
            line-height: inherit
        }

        #onetrust-banner-sdk.ot-iab-2 #onetrust-policy-text * {
            margin-bottom: 0
        }

        #onetrust-banner-sdk.ot-iab-2 .onetrust-vendors-list-handler {
            display: block;
            margin-left: 0;
            margin-top: 5px;
            clear: both;
            margin-bottom: 0;
            padding: 0;
            border: 0;
            height: auto;
            width: auto
        }

        #onetrust-banner-sdk.ot-iab-2 #onetrust-button-group button {
            display: block
        }

        #onetrust-banner-sdk.ot-close-btn-link {
            padding-top: 25px
        }

        #onetrust-banner-sdk.ot-close-btn-link #onetrust-close-btn-container {
            top: 15px;
            transform: none;
            right: 15px
        }

        #onetrust-banner-sdk.ot-close-btn-link #onetrust-close-btn-container button {
            padding: 0;
            white-space: pre-wrap;
            border: none;
            height: auto;
            line-height: 1.5;
            text-decoration: underline;
            font-size: .69em
        }

        #onetrust-banner-sdk #onetrust-policy-text,
        #onetrust-banner-sdk .ot-dpd-desc,
        #onetrust-banner-sdk .ot-b-addl-desc {
            font-size: .813em;
            line-height: 1.5
        }

        #onetrust-banner-sdk .ot-dpd-desc {
            margin-bottom: 10px
        }

        #onetrust-banner-sdk .ot-dpd-desc>.ot-b-addl-desc {
            margin-top: 10px;
            margin-bottom: 10px;
            font-size: 1em
        }

        @media only screen and (max-width: 425px) {
            #onetrust-banner-sdk #onetrust-close-btn-container {
                position: absolute;
                top: 6px;
                right: 2px
            }

            #onetrust-banner-sdk #onetrust-policy {
                margin-left: 0;
                margin-top: 3em
            }

            #onetrust-banner-sdk #onetrust-button-group {
                display: block
            }

            #onetrust-banner-sdk #onetrust-accept-btn-handler,
            #onetrust-banner-sdk #onetrust-reject-all-handler,
            #onetrust-banner-sdk #onetrust-pc-btn-handler {
                width: 100%
            }

            #onetrust-banner-sdk .onetrust-close-btn-ui {
                top: auto;
                transform: none
            }

            #onetrust-banner-sdk #onetrust-policy-title {
                display: inline;
                float: none
            }

            #onetrust-banner-sdk #banner-options {
                margin: 0;
                padding: 0;
                width: 100%
            }
        }

        @media only screen and (min-width: 426px)and (max-width: 896px) {
            #onetrust-banner-sdk #onetrust-close-btn-container {
                position: absolute;
                top: 0;
                right: 0
            }

            #onetrust-banner-sdk #onetrust-policy {
                margin-left: 1em;
                margin-right: 1em
            }

            #onetrust-banner-sdk .onetrust-close-btn-ui {
                top: 10px;
                right: 10px
            }

            #onetrust-banner-sdk:not(.ot-iab-2) #onetrust-group-container {
                width: 95%
            }

            #onetrust-banner-sdk.ot-iab-2 #onetrust-group-container {
                width: 100%
            }

            #onetrust-banner-sdk.ot-bnr-w-logo #onetrust-button-group-parent {
                padding-left: 50px
            }

            #onetrust-banner-sdk #onetrust-button-group-parent {
                width: 100%;
                position: relative;
                margin-left: 0
            }

            #onetrust-banner-sdk #onetrust-button-group button {
                display: inline-block
            }

            #onetrust-banner-sdk #onetrust-button-group {
                margin-right: 0;
                text-align: center
            }

            #onetrust-banner-sdk .has-reject-all-button #onetrust-pc-btn-handler {
                float: left
            }

            #onetrust-banner-sdk .has-reject-all-button #onetrust-reject-all-handler,
            #onetrust-banner-sdk .has-reject-all-button #onetrust-accept-btn-handler {
                float: right
            }

            #onetrust-banner-sdk .has-reject-all-button #onetrust-button-group {
                width: calc(100% - 2em);
                margin-right: 0
            }

            #onetrust-banner-sdk .has-reject-all-button #onetrust-pc-btn-handler.cookie-setting-link {
                padding-left: 0px;
                text-align: left
            }

            #onetrust-banner-sdk.ot-buttons-fw .ot-sdk-three button {
                width: 100%;
                text-align: center
            }

            #onetrust-banner-sdk.ot-buttons-fw #onetrust-button-group-parent button {
                float: none
            }

            #onetrust-banner-sdk.ot-buttons-fw #onetrust-pc-btn-handler.cookie-setting-link {
                text-align: center
            }
        }

        @media only screen and (min-width: 550px) {
            #onetrust-banner-sdk .banner-option:not(:first-child) {
                border-left: 1px solid #d8d8d8;
                padding-left: 25px
            }
        }

        @media only screen and (min-width: 425px)and (max-width: 550px) {

            #onetrust-banner-sdk.ot-iab-2 #onetrust-button-group,
            #onetrust-banner-sdk.ot-iab-2 #onetrust-policy,
            #onetrust-banner-sdk.ot-iab-2 .banner-option {
                width: 100%
            }
        }

        @media only screen and (min-width: 769px) {
            #onetrust-banner-sdk #onetrust-button-group {
                margin-right: 30%
            }

            #onetrust-banner-sdk #banner-options {
                margin-left: 2em;
                margin-right: 5em;
                margin-bottom: 1.25em;
                width: calc(100% - 7em)
            }
        }

        @media only screen and (min-width: 897px)and (max-width: 1023px) {
            #onetrust-banner-sdk.vertical-align-content #onetrust-button-group-parent {
                position: absolute;
                top: 50%;
                left: 75%;
                transform: translateY(-50%)
            }

            #onetrust-banner-sdk #onetrust-close-btn-container {
                top: 50%;
                margin: auto;
                transform: translate(-50%, -50%);
                position: absolute;
                padding: 0;
                right: 0
            }

            #onetrust-banner-sdk #onetrust-close-btn-container button {
                position: relative;
                margin: 0;
                right: -22px;
                top: 2px
            }
        }

        @media only screen and (min-width: 1024px) {
            #onetrust-banner-sdk #onetrust-close-btn-container {
                top: 50%;
                margin: auto;
                transform: translate(-50%, -50%);
                position: absolute;
                right: 0
            }

            #onetrust-banner-sdk #onetrust-close-btn-container button {
                right: -12px
            }

            #onetrust-banner-sdk #onetrust-policy {
                margin-left: 2em
            }

            #onetrust-banner-sdk.vertical-align-content #onetrust-button-group-parent {
                position: absolute;
                top: 50%;
                left: 60%;
                transform: translateY(-50%)
            }

            #onetrust-banner-sdk .ot-optout-signal {
                width: 50%
            }

            #onetrust-banner-sdk.ot-iab-2 #onetrust-policy-title {
                width: 50%
            }

            #onetrust-banner-sdk.ot-iab-2 #onetrust-policy-text,
            #onetrust-banner-sdk.ot-iab-2 :not(.ot-dpd-desc)>.ot-b-addl-desc {
                margin-bottom: 1em;
                width: 50%;
                border-right: 1px solid #d8d8d8;
                padding-right: 1rem
            }

            #onetrust-banner-sdk.ot-iab-2 #onetrust-policy-text {
                margin-bottom: 0;
                padding-bottom: 1em
            }

            #onetrust-banner-sdk.ot-iab-2 :not(.ot-dpd-desc)>.ot-b-addl-desc {
                margin-bottom: 0;
                padding-bottom: 1em
            }

            #onetrust-banner-sdk.ot-iab-2 .ot-dpd-container {
                width: 45%;
                padding-left: 1rem;
                display: inline-block;
                float: none
            }

            #onetrust-banner-sdk.ot-iab-2 .ot-dpd-title {
                line-height: 1.7
            }

            #onetrust-banner-sdk.ot-iab-2 #onetrust-button-group-parent {
                left: auto;
                right: 4%;
                margin-left: 0
            }

            #onetrust-banner-sdk.ot-iab-2 #onetrust-button-group button {
                display: block
            }

            #onetrust-banner-sdk:not(.ot-iab-2) #onetrust-button-group-parent {
                margin: auto;
                width: 30%
            }

            #onetrust-banner-sdk:not(.ot-iab-2) #onetrust-group-container {
                width: 60%
            }

            #onetrust-banner-sdk #onetrust-button-group {
                margin-right: auto
            }

            #onetrust-banner-sdk #onetrust-accept-btn-handler,
            #onetrust-banner-sdk #onetrust-reject-all-handler,
            #onetrust-banner-sdk #onetrust-pc-btn-handler {
                margin-top: 1em
            }
        }

        @media only screen and (min-width: 890px) {
            #onetrust-banner-sdk.ot-buttons-fw:not(.ot-iab-2) #onetrust-button-group-parent {
                padding-left: 3%;
                padding-right: 4%;
                margin-left: 0
            }

            #onetrust-banner-sdk.ot-buttons-fw:not(.ot-iab-2) #onetrust-button-group {
                margin-right: 0;
                margin-top: 1.25em;
                width: 100%
            }

            #onetrust-banner-sdk.ot-buttons-fw:not(.ot-iab-2) #onetrust-button-group button {
                width: 100%;
                margin-bottom: 5px;
                margin-top: 5px
            }

            #onetrust-banner-sdk.ot-buttons-fw:not(.ot-iab-2) #onetrust-button-group button:last-of-type {
                margin-bottom: 20px
            }
        }

        @media only screen and (min-width: 1280px) {
            #onetrust-banner-sdk:not(.ot-iab-2) #onetrust-group-container {
                width: 55%
            }

            #onetrust-banner-sdk:not(.ot-iab-2) #onetrust-button-group-parent {
                width: 44%;
                padding-left: 2%;
                padding-right: 2%
            }

            #onetrust-banner-sdk:not(.ot-iab-2).vertical-align-content #onetrust-button-group-parent {
                position: absolute;
                left: 55%
            }
        }

        #onetrust-consent-sdk #onetrust-banner-sdk {
            background-color: #000000;
        }

        #onetrust-consent-sdk #onetrust-policy-title,
        #onetrust-consent-sdk #onetrust-policy-text,
        #onetrust-consent-sdk .ot-b-addl-desc,
        #onetrust-consent-sdk .ot-dpd-desc,
        #onetrust-consent-sdk .ot-dpd-title,
        #onetrust-consent-sdk #onetrust-policy-text *:not(.onetrust-vendors-list-handler),
        #onetrust-consent-sdk .ot-dpd-desc *:not(.onetrust-vendors-list-handler),
        #onetrust-consent-sdk #onetrust-banner-sdk #banner-options *,
        #onetrust-banner-sdk .ot-cat-header,
        #onetrust-banner-sdk .ot-optout-signal {
            color: #FFFFFF;
        }

        #onetrust-consent-sdk #onetrust-banner-sdk .banner-option-details {
            background-color: #E9E9E9;
        }

        #onetrust-consent-sdk #onetrust-banner-sdk a[href],
        #onetrust-consent-sdk #onetrust-banner-sdk a[href] font,
        #onetrust-consent-sdk #onetrust-banner-sdk .ot-link-btn {
            color: #00bfff;
        }

        #onetrust-consent-sdk #onetrust-accept-btn-handler,
        #onetrust-banner-sdk #onetrust-reject-all-handler {
            background-color: #00bfff;
            border-color: #00bfff;
            color: #FFFFFF;
        }

        #onetrust-consent-sdk #onetrust-banner-sdk *:focus,
        #onetrust-consent-sdk #onetrust-banner-sdk:focus {
            outline-color: #A0A0A0;
            outline-width: 1px;
        }

        #onetrust-consent-sdk #onetrust-pc-btn-handler,
        #onetrust-consent-sdk #onetrust-pc-btn-handler.cookie-setting-link {
            color: #E9E9E9;
            border-color: #E9E9E9;
            background-color:
                #000000;
        }

        a.custom-link {
            color: #00bfff !important;
            text-decoration: none !important;
        }

        #onetrust-pc-sdk.otPcCenter {
            overflow: hidden;
            position: fixed;
            margin: 0 auto;
            top: 5%;
            right: 0;
            left: 0;
            width: 40%;
            max-width: 575px;
            min-width: 575px;
            border-radius: 2.5px;
            z-index: 2147483647;
            background-color: #fff;
            -webkit-box-shadow: 0px 2px 10px -3px #999;
            -moz-box-shadow: 0px 2px 10px -3px #999;
            box-shadow: 0px 2px 10px -3px #999
        }

        #onetrust-pc-sdk.otPcCenter[dir=rtl] {
            right: 0;
            left: 0
        }

        #onetrust-pc-sdk.otRelFont {
            font-size: 1rem
        }

        #onetrust-pc-sdk .ot-optout-signal {
            margin-top: .625rem
        }

        #onetrust-pc-sdk #ot-addtl-venlst .ot-arw-cntr,
        #onetrust-pc-sdk #ot-addtl-venlst .ot-plus-minus,
        #onetrust-pc-sdk .ot-hide-tgl {
            visibility: hidden
        }

        #onetrust-pc-sdk #ot-addtl-venlst .ot-arw-cntr *,
        #onetrust-pc-sdk #ot-addtl-venlst .ot-plus-minus *,
        #onetrust-pc-sdk .ot-hide-tgl * {
            visibility: hidden
        }

        #onetrust-pc-sdk #ot-gn-venlst .ot-ven-item .ot-acc-hdr {
            min-height: 40px
        }

        #onetrust-pc-sdk .ot-pc-header {
            height: 39px;
            padding: 10px 0 10px 30px;
            border-bottom: 1px solid #e9e9e9
        }

        #onetrust-pc-sdk #ot-pc-title,
        #onetrust-pc-sdk #ot-category-title,
        #onetrust-pc-sdk .ot-cat-header,
        #onetrust-pc-sdk #ot-lst-title,
        #onetrust-pc-sdk .ot-ven-hdr .ot-ven-name,
        #onetrust-pc-sdk .ot-always-active {
            font-weight: bold;
            color: dimgray
        }

        #onetrust-pc-sdk .ot-always-active-group .ot-cat-header {
            width: 55%;
            font-weight: 700
        }

        #onetrust-pc-sdk .ot-cat-item p {
            clear: both;
            float: left;
            margin-top: 10px;
            margin-bottom: 5px;
            line-height: 1.5;
            font-size: .812em;
            color: dimgray
        }

        #onetrust-pc-sdk .ot-close-icon {
            height: 44px;
            width: 44px;
            background-size: 10px
        }

        #onetrust-pc-sdk #ot-pc-title {
            float: left;
            font-size: 1em;
            line-height: 1.5;
            margin-bottom: 10px;
            margin-top: 10px;
            width: 100%
        }

        #onetrust-pc-sdk #accept-recommended-btn-handler {
            margin-right: 10px;
            margin-bottom: 25px;
            outline-offset: -1px
        }

        #onetrust-pc-sdk #ot-pc-desc {
            clear: both;
            width: 100%;
            font-size: .812em;
            line-height: 1.5;
            margin-bottom: 25px
        }

        #onetrust-pc-sdk #ot-pc-desc a {
            margin-left: 5px
        }

        #onetrust-pc-sdk #ot-pc-desc * {
            font-size: inherit;
            line-height: inherit
        }

        #onetrust-pc-sdk #ot-pc-desc ul li {
            padding: 10px 0px
        }

        #onetrust-pc-sdk a {
            color: #656565;
            cursor: pointer
        }

        #onetrust-pc-sdk a:hover {
            color: #3860be
        }

        #onetrust-pc-sdk label {
            margin-bottom: 0
        }

        #onetrust-pc-sdk #vdr-lst-dsc {
            font-size: .812em;
            line-height: 1.5;
            padding: 10px 15px 5px 15px
        }

        #onetrust-pc-sdk button {
            max-width: 394px;
            padding: 12px 30px;
            line-height: 1;
            word-break: break-word;
            word-wrap: break-word;
            white-space: normal;
            font-weight: bold;
            height: auto
        }

        #onetrust-pc-sdk .ot-link-btn {
            padding: 0;
            margin-bottom: 0;
            border: 0;
            font-weight: normal;
            line-height: normal;
            width: auto;
            height: auto
        }

        #onetrust-pc-sdk #ot-pc-content {
            position: absolute;
            overflow-y: scroll;
            padding-left: 0px;
            padding-right: 30px;
            top: 60px;
            bottom: 110px;
            margin: 1px 3px 0 30px;
            width: calc(100% - 63px)
        }

        #onetrust-pc-sdk .ot-vs-list .ot-always-active,
        #onetrust-pc-sdk .ot-cat-grp .ot-always-active {
            float: right;
            clear: none;
            color: #3860be;
            margin: 0;
            font-size: .813em;
            line-height: 1.3
        }

        #onetrust-pc-sdk .ot-pc-scrollbar::-webkit-scrollbar-track {
            margin-right: 20px
        }

        #onetrust-pc-sdk .ot-pc-scrollbar::-webkit-scrollbar {
            width: 11px
        }

        #onetrust-pc-sdk .ot-pc-scrollbar::-webkit-scrollbar-thumb {
            border-radius: 10px;
            background: #d8d8d8
        }

        #onetrust-pc-sdk input[type=checkbox]:focus+.ot-acc-hdr {
            outline: #000 1px solid
        }

        #onetrust-pc-sdk .ot-pc-scrollbar {
            scrollbar-arrow-color: #d8d8d8;
            scrollbar-darkshadow-color: #d8d8d8;
            scrollbar-face-color: #d8d8d8;
            scrollbar-shadow-color: #d8d8d8
        }

        #onetrust-pc-sdk .save-preference-btn-handler {
            margin-right: 20px
        }

        #onetrust-pc-sdk .ot-pc-refuse-all-handler {
            margin-right: 10px
        }

        #onetrust-pc-sdk #ot-pc-desc .privacy-notice-link {
            margin-left: 0;
            margin-right: 8px
        }

        #onetrust-pc-sdk #ot-pc-desc .ot-imprint-handler {
            margin-left: 0;
            margin-right: 8px
        }

        #onetrust-pc-sdk .ot-subgrp-cntr {
            display: inline-block;
            clear: both;
            width: 100%;
            padding-top: 15px
        }

        #onetrust-pc-sdk .ot-switch+.ot-subgrp-cntr {
            padding-top: 10px
        }

        #onetrust-pc-sdk ul.ot-subgrps {
            margin: 0;
            font-size: initial
        }

        #onetrust-pc-sdk ul.ot-subgrps li p,
        #onetrust-pc-sdk ul.ot-subgrps li h5 {
            font-size: .813em;
            line-height: 1.4;
            color: dimgray
        }

        #onetrust-pc-sdk ul.ot-subgrps .ot-switch {
            min-height: auto
        }

        #onetrust-pc-sdk ul.ot-subgrps .ot-switch-nob {
            top: 0
        }

        #onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr {
            display: inline-block;
            width: 100%
        }

        #onetrust-pc-sdk ul.ot-subgrps .ot-acc-txt {
            margin: 0
        }

        #onetrust-pc-sdk ul.ot-subgrps li {
            padding: 0;
            border: none
        }

        #onetrust-pc-sdk ul.ot-subgrps li h5 {
            position: relative;
            top: 5px;
            font-weight: bold;
            margin-bottom: 0;
            float: left
        }

        #onetrust-pc-sdk li.ot-subgrp {
            margin-left: 20px;
            overflow: auto
        }

        #onetrust-pc-sdk li.ot-subgrp>h5 {
            width: calc(100% - 100px)
        }

        #onetrust-pc-sdk .ot-cat-item p>ul,
        #onetrust-pc-sdk li.ot-subgrp p>ul {
            margin: 0px;
            list-style: disc;
            margin-left: 15px;
            font-size: inherit
        }

        #onetrust-pc-sdk .ot-cat-item p>ul li,
        #onetrust-pc-sdk li.ot-subgrp p>ul li {
            font-size: inherit;
            padding-top: 10px;
            padding-left: 0px;
            padding-right: 0px;
            border: none
        }

        #onetrust-pc-sdk .ot-cat-item p>ul li:last-child,
        #onetrust-pc-sdk li.ot-subgrp p>ul li:last-child {
            padding-bottom: 10px
        }

        #onetrust-pc-sdk .ot-pc-logo {
            height: 40px;
            width: 120px
        }

        #onetrust-pc-sdk .ot-pc-footer {
            position: absolute;
            bottom: 0px;
            width: 100%;
            max-height: 160px;
            border-top: 1px solid #d8d8d8
        }

        #onetrust-pc-sdk.ot-ftr-stacked .ot-pc-refuse-all-handler {
            margin-bottom: 0px
        }

        #onetrust-pc-sdk.ot-ftr-stacked #ot-pc-content {
            bottom: 160px
        }

        #onetrust-pc-sdk.ot-ftr-stacked .ot-pc-footer button {
            width: 100%;
            max-width: none
        }

        #onetrust-pc-sdk.ot-ftr-stacked .ot-btn-container {
            margin: 0 30px;
            width: calc(100% - 60px);
            padding-right: 0
        }

        #onetrust-pc-sdk .ot-pc-footer-logo {
            height: 30px;
            width: 100%;
            text-align: right;
            background: #f4f4f4
        }

        #onetrust-pc-sdk .ot-pc-footer-logo a {
            display: inline-block;
            margin-top: 5px;
            margin-right: 10px
        }

        #onetrust-pc-sdk[dir=rtl] .ot-pc-footer-logo {
            direction: rtl
        }

        #onetrust-pc-sdk[dir=rtl] .ot-pc-footer-logo a {
            margin-right: 25px
        }

        #onetrust-pc-sdk .ot-tgl {
            float: right;
            position: relative;
            z-index: 1
        }

        #onetrust-pc-sdk .ot-tgl input:checked+.ot-switch .ot-switch-nob {
            background-color: #cddcf2;
            border: 1px solid #3860be
        }

        #onetrust-pc-sdk .ot-tgl input:checked+.ot-switch .ot-switch-nob:before {
            -webkit-transform: translateX(20px);
            -ms-transform: translateX(20px);
            transform: translateX(20px);
            background-color: #3860be;
            border-color: #3860be
        }

        #onetrust-pc-sdk .ot-tgl input:focus+.ot-switch {
            outline: #000 solid 1px
        }

        #onetrust-pc-sdk .ot-switch {
            position: relative;
            display: inline-block;
            width: 45px;
            height: 25px
        }

        #onetrust-pc-sdk .ot-switch-nob {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #f2f1f1;
            border: 1px solid #ddd;
            transition: all .2s ease-in 0s;
            -moz-transition: all .2s ease-in 0s;
            -o-transition: all .2s ease-in 0s;
            -webkit-transition: all .2s ease-in 0s;
            border-radius: 20px
        }

        #onetrust-pc-sdk .ot-switch-nob:before {
            position: absolute;
            content: "";
            height: 21px;
            width: 21px;
            bottom: 1px;
            background-color: #7d7d7d;
            -webkit-transition: .4s;
            transition: .4s;
            border-radius: 20px
        }

        #onetrust-pc-sdk .ot-chkbox input:checked~label::before {
            background-color: #3860be
        }

        #onetrust-pc-sdk .ot-chkbox input+label::after {
            content: none;
            color: #fff
        }

        #onetrust-pc-sdk .ot-chkbox input:checked+label::after {
            content: ""
        }

        #onetrust-pc-sdk .ot-chkbox input:focus+label::before {
            outline-style: solid;
            outline-width: 2px;
            outline-style: auto
        }

        #onetrust-pc-sdk .ot-chkbox label {
            position: relative;
            display: inline-block;
            padding-left: 30px;
            cursor: pointer;
            font-weight: 500
        }

        #onetrust-pc-sdk .ot-chkbox label::before,
        #onetrust-pc-sdk .ot-chkbox label::after {
            position: absolute;
            content: "";
            display: inline-block;
            border-radius: 3px
        }

        #onetrust-pc-sdk .ot-chkbox label::before {
            height: 18px;
            width: 18px;
            border: 1px solid #3860be;
            left: 0px;
            top: auto
        }

        #onetrust-pc-sdk .ot-chkbox label::after {
            height: 5px;
            width: 9px;
            border-left: 3px solid;
            border-bottom: 3px solid;
            transform: rotate(-45deg);
            -o-transform: rotate(-45deg);
            -ms-transform: rotate(-45deg);
            -webkit-transform: rotate(-45deg);
            left: 4px;
            top: 5px
        }

        #onetrust-pc-sdk .ot-label-txt {
            display: none
        }

        #onetrust-pc-sdk .ot-chkbox input,
        #onetrust-pc-sdk .ot-tgl input {
            position: absolute;
            opacity: 0;
            width: 0;
            height: 0
        }

        #onetrust-pc-sdk .ot-arw-cntr {
            float: right;
            position: relative;
            pointer-events: none
        }

        #onetrust-pc-sdk .ot-arw-cntr .ot-arw {
            width: 16px;
            height: 16px;
            margin-left: 5px;
            color: dimgray;
            display: inline-block;
            vertical-align: middle;
            -webkit-transition: all 150ms ease-in 0s;
            -moz-transition: all 150ms ease-in 0s;
            -o-transition: all 150ms ease-in 0s;
            transition: all 150ms ease-in 0s
        }

        #onetrust-pc-sdk input:checked~.ot-acc-hdr .ot-arw,
        #onetrust-pc-sdk button[aria-expanded=true]~.ot-acc-hdr .ot-arw-cntr svg {
            transform: rotate(90deg);
            -o-transform: rotate(90deg);
            -ms-transform: rotate(90deg);
            -webkit-transform: rotate(90deg)
        }

        #onetrust-pc-sdk input[type=checkbox]:focus+.ot-acc-hdr {
            outline: #000 1px solid
        }

        #onetrust-pc-sdk .ot-tgl-cntr,
        #onetrust-pc-sdk .ot-arw-cntr {
            display: inline-block
        }

        #onetrust-pc-sdk .ot-tgl-cntr {
            width: 45px;
            float: right;
            margin-top: 2px
        }

        #onetrust-pc-sdk #ot-lst-cnt .ot-tgl-cntr {
            margin-top: 10px
        }

        #onetrust-pc-sdk .ot-always-active-subgroup {
            width: auto;
            padding-left: 0px !important;
            top: 3px;
            position: relative
        }

        #onetrust-pc-sdk .ot-label-status {
            padding-left: 5px;
            font-size: .75em;
            display: none
        }

        #onetrust-pc-sdk .ot-arw-cntr {
            margin-top: -1px
        }

        #onetrust-pc-sdk .ot-arw-cntr svg {
            -webkit-transition: all 300ms ease-in 0s;
            -moz-transition: all 300ms ease-in 0s;
            -o-transition: all 300ms ease-in 0s;
            transition: all 300ms ease-in 0s;
            height: 10px;
            width: 10px
        }

        #onetrust-pc-sdk input:checked~.ot-acc-hdr .ot-arw {
            transform: rotate(90deg);
            -o-transform: rotate(90deg);
            -ms-transform: rotate(90deg);
            -webkit-transform: rotate(90deg)
        }

        #onetrust-pc-sdk .ot-arw {
            width: 10px;
            margin-left: 15px;
            transition: all 300ms ease-in 0s;
            -webkit-transition: all 300ms ease-in 0s;
            -moz-transition: all 300ms ease-in 0s;
            -o-transition: all 300ms ease-in 0s
        }

        #onetrust-pc-sdk .ot-vlst-cntr {
            margin-bottom: 0
        }

        #onetrust-pc-sdk .ot-hlst-cntr {
            margin-top: 5px;
            display: inline-block;
            width: 100%
        }

        #onetrust-pc-sdk .category-vendors-list-handler,
        #onetrust-pc-sdk .category-vendors-list-handler+a,
        #onetrust-pc-sdk .category-host-list-handler {
            clear: both;
            color: #3860be;
            margin-left: 0;
            font-size: .813em;
            text-decoration: none;
            float: left;
            overflow: hidden
        }

        #onetrust-pc-sdk .category-vendors-list-handler:hover,
        #onetrust-pc-sdk .category-vendors-list-handler+a:hover,
        #onetrust-pc-sdk .category-host-list-handler:hover {
            text-decoration-line: underline
        }

        #onetrust-pc-sdk .category-vendors-list-handler+a {
            clear: none
        }

        #onetrust-pc-sdk .ot-vlst-cntr .ot-ext-lnk,
        #onetrust-pc-sdk .ot-ven-hdr .ot-ext-lnk {
            display: inline-block;
            height: 13px;
            width: 13px;
            background-repeat: no-repeat;
            margin-left: 1px;
            margin-top: 6px;
            cursor: pointer
        }

        #onetrust-pc-sdk .ot-ven-hdr .ot-ext-lnk {
            margin-bottom: -1px
        }

        #onetrust-pc-sdk .back-btn-handler {
            font-size: 1em;
            text-decoration: none
        }

        #onetrust-pc-sdk .back-btn-handler:hover {
            opacity: .6
        }

        #onetrust-pc-sdk #ot-lst-title h3 {
            display: inline-block;
            word-break: break-word;
            word-wrap: break-word;
            margin-bottom: 0;
            color: #656565;
            font-size: 1em;
            font-weight: bold;
            margin-left: 15px
        }

        #onetrust-pc-sdk #ot-lst-title {
            margin: 10px 0 10px 0px;
            font-size: 1em;
            text-align: left
        }

        #onetrust-pc-sdk #ot-pc-hdr {
            margin: 0 0 0 30px;
            height: auto;
            width: auto
        }

        #onetrust-pc-sdk #ot-pc-hdr input::placeholder {
            color: #d4d4d4;
            font-style: italic
        }

        #onetrust-pc-sdk #vendor-search-handler {
            height: 31px;
            width: 100%;
            border-radius: 50px;
            font-size: .8em;
            padding-right: 35px;
            padding-left: 15px;
            float: left;
            margin-left: 15px
        }

        #onetrust-pc-sdk .ot-ven-name {
            display: block;
            width: auto;
            padding-right: 5px
        }

        #onetrust-pc-sdk #ot-lst-cnt {
            overflow-y: auto;
            margin-left: 20px;
            margin-right: 7px;
            width: calc(100% - 27px);
            max-height: calc(100% - 80px);
            height: 100%;
            transform: translate3d(0, 0, 0)
        }

        #onetrust-pc-sdk #ot-pc-lst {
            width: 100%;
            bottom: 100px;
            position: absolute;
            top: 60px
        }

        #onetrust-pc-sdk #ot-pc-lst:not(.ot-enbl-chr) .ot-tgl-cntr .ot-arw-cntr,
        #onetrust-pc-sdk #ot-pc-lst:not(.ot-enbl-chr) .ot-tgl-cntr .ot-arw-cntr * {
            visibility: hidden
        }

        #onetrust-pc-sdk #ot-pc-lst .ot-tgl-cntr {
            right: 12px;
            position: absolute
        }

        #onetrust-pc-sdk #ot-pc-lst .ot-arw-cntr {
            float: right;
            position: relative
        }

        #onetrust-pc-sdk #ot-pc-lst .ot-arw {
            margin-left: 10px
        }

        #onetrust-pc-sdk #ot-pc-lst .ot-acc-hdr {
            overflow: hidden;
            cursor: pointer
        }

        #onetrust-pc-sdk .ot-vlst-cntr {
            overflow: hidden
        }

        #onetrust-pc-sdk #ot-sel-blk {
            overflow: hidden;
            width: 100%;
            position: sticky;
            position: -webkit-sticky;
            top: 0;
            z-index: 3
        }

        #onetrust-pc-sdk #ot-back-arw {
            height: 12px;
            width: 12px
        }

        #onetrust-pc-sdk .ot-lst-subhdr {
            width: 100%;
            display: inline-block
        }

        #onetrust-pc-sdk .ot-search-cntr {
            float: left;
            width: 78%;
            position: relative
        }

        #onetrust-pc-sdk .ot-search-cntr>svg {
            width: 30px;
            height: 30px;
            position: absolute;
            float: left;
            right: -15px
        }

        #onetrust-pc-sdk .ot-fltr-cntr {
            float: right;
            right: 50px;
            position: relative
        }

        #onetrust-pc-sdk #filter-btn-handler {
            background-color: #3860be;
            border-radius: 17px;
            display: inline-block;
            position: relative;
            width: 32px;
            height: 32px;
            -moz-transition: .1s ease;
            -o-transition: .1s ease;
            -webkit-transition: 1s ease;
            transition: .1s ease;
            padding: 0;
            margin: 0
        }

        #onetrust-pc-sdk #filter-btn-handler:hover {
            background-color: #3860be
        }

        #onetrust-pc-sdk #filter-btn-handler svg {
            width: 12px;
            height: 12px;
            margin: 3px 10px 0 10px;
            display: block;
            position: static;
            right: auto;
            top: auto
        }

        #onetrust-pc-sdk .ot-ven-link,
        #onetrust-pc-sdk .ot-ven-legclaim-link {
            color: #3860be;
            text-decoration: none;
            font-weight: 100;
            display: inline-block;
            padding-top: 10px;
            transform: translate(0, 1%);
            -o-transform: translate(0, 1%);
            -ms-transform: translate(0, 1%);
            -webkit-transform: translate(0, 1%);
            position: relative;
            z-index: 2
        }

        #onetrust-pc-sdk .ot-ven-link *,
        #onetrust-pc-sdk .ot-ven-legclaim-link * {
            font-size: inherit
        }

        #onetrust-pc-sdk .ot-ven-link:hover,
        #onetrust-pc-sdk .ot-ven-legclaim-link:hover {
            text-decoration: underline
        }

        #onetrust-pc-sdk .ot-ven-hdr {
            width: calc(100% - 160px);
            height: auto;
            float: left;
            word-break: break-word;
            word-wrap: break-word;
            vertical-align: middle;
            padding-bottom: 3px
        }

        #onetrust-pc-sdk .ot-ven-link,
        #onetrust-pc-sdk .ot-ven-legclaim-link {
            letter-spacing: .03em;
            font-size: .75em;
            font-weight: 400
        }

        #onetrust-pc-sdk .ot-ven-dets {
            border-radius: 2px;
            background-color: #f8f8f8
        }

        #onetrust-pc-sdk .ot-ven-dets li:first-child p:first-child {
            border-top: none
        }

        #onetrust-pc-sdk .ot-ven-dets .ot-ven-disc:not(:first-child) {
            border-top: 1px solid #ddd !important
        }

        #onetrust-pc-sdk .ot-ven-dets .ot-ven-disc:nth-child(n+3) p {
            display: inline-block
        }

        #onetrust-pc-sdk .ot-ven-dets .ot-ven-disc:nth-child(n+3) p:nth-of-type(odd) {
            width: 30%
        }

        #onetrust-pc-sdk .ot-ven-dets .ot-ven-disc:nth-child(n+3) p:nth-of-type(even) {
            width: 50%;
            word-break: break-word;
            word-wrap: break-word
        }

        #onetrust-pc-sdk .ot-ven-dets .ot-ven-disc p,
        #onetrust-pc-sdk .ot-ven-dets .ot-ven-disc h4 {
            padding-top: 5px;
            padding-bottom: 5px;
            display: block
        }

        #onetrust-pc-sdk .ot-ven-dets .ot-ven-disc h4 {
            display: inline-block
        }

        #onetrust-pc-sdk .ot-ven-dets .ot-ven-disc p:nth-last-child(-n+1) {
            padding-bottom: 10px
        }

        #onetrust-pc-sdk .ot-ven-dets .ot-ven-disc p:nth-child(-n+2):not(.disc-pur) {
            padding-top: 10px
        }

        #onetrust-pc-sdk .ot-ven-dets .ot-ven-disc .disc-pur-cont {
            display: inline
        }

        #onetrust-pc-sdk .ot-ven-dets .ot-ven-disc .disc-pur {
            position: relative;
            width: 50% !important;
            word-break: break-word;
            word-wrap: break-word;
            left: calc(30% + 17px)
        }

        #onetrust-pc-sdk .ot-ven-dets .ot-ven-disc .disc-pur:nth-child(-n+1) {
            position: static
        }

        #onetrust-pc-sdk .ot-ven-dets p,
        #onetrust-pc-sdk .ot-ven-dets h4,
        #onetrust-pc-sdk .ot-ven-dets span {
            font-size: .69em;
            text-align: left;
            vertical-align: middle;
            word-break: break-word;
            word-wrap: break-word;
            margin: 0;
            padding-bottom: 10px;
            padding-left: 15px;
            color: #2e3644
        }

        #onetrust-pc-sdk .ot-ven-dets h4 {
            padding-top: 5px
        }

        #onetrust-pc-sdk .ot-ven-dets span {
            color: dimgray;
            padding: 0;
            vertical-align: baseline
        }

        #onetrust-pc-sdk .ot-ven-dets .ot-ven-pur h4 {
            border-top: 1px solid #e9e9e9;
            border-bottom: 1px solid #e9e9e9;
            padding-bottom: 5px;
            margin-bottom: 5px;
            font-weight: bold
        }

        #onetrust-pc-sdk #ot-host-lst .ot-sel-all {
            float: right;
            position: relative;
            margin-right: 42px;
            top: 10px
        }

        #onetrust-pc-sdk #ot-host-lst .ot-sel-all input[type=checkbox] {
            width: auto;
            height: auto
        }

        #onetrust-pc-sdk #ot-host-lst .ot-sel-all label {
            height: 20px;
            width: 20px;
            padding-left: 0px
        }

        #onetrust-pc-sdk #ot-host-lst .ot-acc-txt {
            overflow: hidden;
            width: 95%
        }

        #onetrust-pc-sdk .ot-host-hdr {
            position: relative;
            z-index: 1;
            pointer-events: none;
            width: calc(100% - 125px);
            float: left
        }

        #onetrust-pc-sdk .ot-host-name,
        #onetrust-pc-sdk .ot-host-desc {
            display: inline-block;
            width: 90%
        }

        #onetrust-pc-sdk .ot-host-name {
            pointer-events: none
        }

        #onetrust-pc-sdk .ot-host-hdr>a {
            text-decoration: underline;
            font-size: .82em;
            position: relative;
            z-index: 2;
            float: left;
            margin-bottom: 5px;
            pointer-events: initial
        }

        #onetrust-pc-sdk .ot-host-name+a {
            margin-top: 5px
        }

        #onetrust-pc-sdk .ot-host-name,
        #onetrust-pc-sdk .ot-host-name a,
        #onetrust-pc-sdk .ot-host-desc,
        #onetrust-pc-sdk .ot-host-info {
            color: dimgray;
            word-break: break-word;
            word-wrap: break-word
        }

        #onetrust-pc-sdk .ot-host-name,
        #onetrust-pc-sdk .ot-host-name a {
            font-weight: bold;
            font-size: .82em;
            line-height: 1.3
        }

        #onetrust-pc-sdk .ot-host-name a {
            font-size: 1em
        }

        #onetrust-pc-sdk .ot-host-expand {
            margin-top: 3px;
            margin-bottom: 3px;
            clear: both;
            display: block;
            color: #3860be;
            font-size: .72em;
            font-weight: normal
        }

        #onetrust-pc-sdk .ot-host-expand * {
            font-size: inherit
        }

        #onetrust-pc-sdk .ot-host-desc,
        #onetrust-pc-sdk .ot-host-info {
            font-size: .688em;
            line-height: 1.4;
            font-weight: normal
        }

        #onetrust-pc-sdk .ot-host-desc {
            margin-top: 10px
        }

        #onetrust-pc-sdk .ot-host-opt {
            margin: 0;
            font-size: inherit;
            display: inline-block;
            width: 100%
        }

        #onetrust-pc-sdk .ot-host-opt li>div div {
            font-size: .8em;
            padding: 5px 0
        }

        #onetrust-pc-sdk .ot-host-opt li>div div:nth-child(1) {
            width: 30%;
            float: left
        }

        #onetrust-pc-sdk .ot-host-opt li>div div:nth-child(2) {
            width: 70%;
            float: left;
            word-break: break-word;
            word-wrap: break-word
        }

        #onetrust-pc-sdk .ot-host-info {
            border: none;
            display: inline-block;
            width: calc(100% - 10px);
            padding: 10px;
            margin-bottom: 10px;
            background-color: #f8f8f8
        }

        #onetrust-pc-sdk .ot-host-info>div {
            overflow: auto
        }

        #onetrust-pc-sdk #no-results {
            text-align: center;
            margin-top: 30px
        }

        #onetrust-pc-sdk #no-results p {
            font-size: 1em;
            color: #2e3644;
            word-break: break-word;
            word-wrap: break-word
        }

        #onetrust-pc-sdk #no-results p span {
            font-weight: bold
        }

        #onetrust-pc-sdk #ot-fltr-modal {
            width: 100%;
            height: auto;
            display: none;
            -moz-transition: .2s ease;
            -o-transition: .2s ease;
            -webkit-transition: 2s ease;
            transition: .2s ease;
            overflow: hidden;
            opacity: 1;
            right: 0
        }

        #onetrust-pc-sdk #ot-fltr-modal .ot-label-txt {
            display: inline-block;
            font-size: .85em;
            color: dimgray
        }

        #onetrust-pc-sdk #ot-fltr-cnt {
            z-index: 2147483646;
            background-color: #fff;
            position: absolute;
            height: 90%;
            max-height: 300px;
            width: 325px;
            left: 210px;
            margin-top: 10px;
            margin-bottom: 20px;
            padding-right: 10px;
            border-radius: 3px;
            -webkit-box-shadow: 0px 0px 12px 2px #c7c5c7;
            -moz-box-shadow: 0px 0px 12px 2px #c7c5c7;
            box-shadow: 0px 0px 12px 2px #c7c5c7
        }

        #onetrust-pc-sdk .ot-fltr-scrlcnt {
            overflow-y: auto;
            overflow-x: hidden;
            clear: both;
            max-height: calc(100% - 60px)
        }

        #onetrust-pc-sdk #ot-anchor {
            border: 12px solid rgba(0, 0, 0, 0);
            display: none;
            position: absolute;
            z-index: 2147483647;
            right: 55px;
            top: 75px;
            transform: rotate(45deg);
            -o-transform: rotate(45deg);
            -ms-transform: rotate(45deg);
            -webkit-transform: rotate(45deg);
            background-color: #fff;
            -webkit-box-shadow: -3px -3px 5px -2px #c7c5c7;
            -moz-box-shadow: -3px -3px 5px -2px #c7c5c7;
            box-shadow: -3px -3px 5px -2px #c7c5c7
        }

        #onetrust-pc-sdk .ot-fltr-btns {
            margin-left: 15px
        }

        #onetrust-pc-sdk #filter-apply-handler {
            margin-right: 15px
        }

        #onetrust-pc-sdk .ot-fltr-opt {
            margin-bottom: 25px;
            margin-left: 15px;
            width: 75%;
            position: relative
        }

        #onetrust-pc-sdk .ot-fltr-opt p {
            display: inline-block;
            margin: 0;
            font-size: .9em;
            color: #2e3644
        }

        #onetrust-pc-sdk .ot-chkbox label span {
            font-size: .85em;
            color: dimgray
        }

        #onetrust-pc-sdk .ot-chkbox input[type=checkbox]+label::after {
            content: none;
            color: #fff
        }

        #onetrust-pc-sdk .ot-chkbox input[type=checkbox]:checked+label::after {
            content: ""
        }

        #onetrust-pc-sdk .ot-chkbox input[type=checkbox]:focus+label::before {
            outline-style: solid;
            outline-width: 2px;
            outline-style: auto
        }

        #onetrust-pc-sdk #ot-selall-vencntr,
        #onetrust-pc-sdk #ot-selall-adtlvencntr,
        #onetrust-pc-sdk #ot-selall-hostcntr,
        #onetrust-pc-sdk #ot-selall-licntr,
        #onetrust-pc-sdk #ot-selall-gnvencntr {
            right: 15px;
            position: relative;
            width: 20px;
            height: 20px;
            float: right
        }

        #onetrust-pc-sdk #ot-selall-vencntr label,
        #onetrust-pc-sdk #ot-selall-adtlvencntr label,
        #onetrust-pc-sdk #ot-selall-hostcntr label,
        #onetrust-pc-sdk #ot-selall-licntr label,
        #onetrust-pc-sdk #ot-selall-gnvencntr label {
            float: left;
            padding-left: 0
        }

        #onetrust-pc-sdk #ot-ven-lst:first-child {
            border-top: 1px solid #e2e2e2
        }

        #onetrust-pc-sdk ul {
            list-style: none;
            padding: 0
        }

        #onetrust-pc-sdk ul li {
            position: relative;
            margin: 0;
            padding: 15px 15px 15px 10px;
            border-bottom: 1px solid #e2e2e2
        }

        #onetrust-pc-sdk ul li h3 {
            font-size: .75em;
            color: #656565;
            margin: 0;
            display: inline-block;
            width: 70%;
            height: auto;
            word-break: break-word;
            word-wrap: break-word
        }

        #onetrust-pc-sdk ul li p {
            margin: 0;
            font-size: .7em
        }

        #onetrust-pc-sdk ul li input[type=checkbox] {
            position: absolute;
            cursor: pointer;
            width: 100%;
            height: 100%;
            opacity: 0;
            margin: 0;
            top: 0;
            left: 0
        }

        #onetrust-pc-sdk .ot-cat-item>button:focus,
        #onetrust-pc-sdk .ot-acc-cntr>button:focus,
        #onetrust-pc-sdk li>button:focus {
            outline: #000 solid 2px
        }

        #onetrust-pc-sdk .ot-cat-item>button,
        #onetrust-pc-sdk .ot-acc-cntr>button,
        #onetrust-pc-sdk li>button {
            position: absolute;
            cursor: pointer;
            width: 100%;
            height: 100%;
            margin: 0;
            top: 0;
            left: 0;
            z-index: 1;
            max-width: none;
            border: none
        }

        #onetrust-pc-sdk .ot-cat-item>button[aria-expanded=false]~.ot-acc-txt,
        #onetrust-pc-sdk .ot-acc-cntr>button[aria-expanded=false]~.ot-acc-txt,
        #onetrust-pc-sdk li>button[aria-expanded=false]~.ot-acc-txt {
            margin-top: 0;
            max-height: 0;
            opacity: 0;
            overflow: hidden;
            width: 100%;
            transition: .25s ease-out;
            display: none
        }

        #onetrust-pc-sdk .ot-cat-item>button[aria-expanded=true]~.ot-acc-txt,
        #onetrust-pc-sdk .ot-acc-cntr>button[aria-expanded=true]~.ot-acc-txt,
        #onetrust-pc-sdk li>button[aria-expanded=true]~.ot-acc-txt {
            transition: .1s ease-in;
            margin-top: 10px;
            width: 100%;
            overflow: auto;
            display: block
        }

        #onetrust-pc-sdk .ot-cat-item>button[aria-expanded=true]~.ot-acc-grpcntr,
        #onetrust-pc-sdk .ot-acc-cntr>button[aria-expanded=true]~.ot-acc-grpcntr,
        #onetrust-pc-sdk li>button[aria-expanded=true]~.ot-acc-grpcntr {
            width: auto;
            margin-top: 0px;
            padding-bottom: 10px
        }

        #onetrust-pc-sdk .ot-host-item>button:focus,
        #onetrust-pc-sdk .ot-ven-item>button:focus {
            outline: 0;
            border: 2px solid #000
        }

        #onetrust-pc-sdk .ot-hide-acc>button {
            pointer-events: none
        }

        #onetrust-pc-sdk .ot-hide-acc .ot-plus-minus>*,
        #onetrust-pc-sdk .ot-hide-acc .ot-arw-cntr>* {
            visibility: hidden
        }

        #onetrust-pc-sdk .ot-hide-acc .ot-acc-hdr {
            min-height: 30px
        }

        #onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt) {
            padding-right: 10px;
            width: calc(100% - 37px);
            margin-top: 10px;
            max-height: calc(100% - 90px)
        }

        #onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt) #ot-sel-blk {
            background-color: #f9f9fc;
            border: 1px solid #e2e2e2;
            width: calc(100% - 2px);
            padding-bottom: 5px;
            padding-top: 5px
        }

        #onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt) #ot-sel-blk.ot-vnd-list-cnt {
            border: unset;
            background-color: unset
        }

        #onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt) #ot-sel-blk.ot-vnd-list-cnt .ot-sel-all-hdr {
            display: none
        }

        #onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt) #ot-sel-blk.ot-vnd-list-cnt .ot-sel-all {
            padding-right: .5rem
        }

        #onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt) #ot-sel-blk.ot-vnd-list-cnt .ot-sel-all .ot-chkbox {
            right: 0
        }

        #onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt) .ot-sel-all {
            padding-right: 34px
        }

        #onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt) .ot-sel-all-chkbox {
            width: auto
        }

        #onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt) ul li {
            border: 1px solid #e2e2e2;
            margin-bottom: 10px
        }

        #onetrust-pc-sdk.ot-addtl-vendors #ot-lst-cnt:not(.ot-host-cnt) .ot-acc-cntr>.ot-acc-hdr {
            padding: 10px 0 10px 15px
        }

        #onetrust-pc-sdk.ot-addtl-vendors .ot-sel-all-chkbox {
            float: right
        }

        #onetrust-pc-sdk.ot-addtl-vendors .ot-plus-minus~.ot-sel-all-chkbox {
            right: 34px
        }

        #onetrust-pc-sdk.ot-addtl-vendors #ot-ven-lst:first-child {
            border-top: none
        }

        #onetrust-pc-sdk .ot-acc-cntr {
            position: relative;
            border-left: 1px solid #e2e2e2;
            border-right: 1px solid #e2e2e2;
            border-bottom: 1px solid #e2e2e2
        }

        #onetrust-pc-sdk .ot-acc-cntr input {
            z-index: 1
        }

        #onetrust-pc-sdk .ot-acc-cntr>.ot-acc-hdr {
            background-color: #f9f9fc;
            padding: 5px 0 5px 15px;
            width: auto
        }

        #onetrust-pc-sdk .ot-acc-cntr>.ot-acc-hdr .ot-plus-minus {
            vertical-align: middle;
            top: auto
        }

        #onetrust-pc-sdk .ot-acc-cntr>.ot-acc-hdr .ot-arw-cntr {
            right: 10px
        }

        #onetrust-pc-sdk .ot-acc-cntr>.ot-acc-hdr input {
            z-index: 2
        }

        #onetrust-pc-sdk .ot-acc-cntr.ot-add-tech .ot-acc-hdr {
            padding: 10px 0 10px 15px
        }

        #onetrust-pc-sdk .ot-acc-cntr>input[type=checkbox]:checked~.ot-acc-hdr {
            border-bottom: 1px solid #e2e2e2
        }

        #onetrust-pc-sdk .ot-acc-cntr>.ot-acc-txt {
            padding-left: 10px;
            padding-right: 10px
        }

        #onetrust-pc-sdk .ot-acc-cntr button[aria-expanded=true]~.ot-acc-txt {
            width: auto
        }

        #onetrust-pc-sdk .ot-acc-cntr .ot-addtl-venbox {
            display: none
        }

        #onetrust-pc-sdk .ot-vlst-cntr {
            margin-bottom: 0;
            width: 100%
        }

        #onetrust-pc-sdk .ot-vensec-title {
            font-size: .813em;
            vertical-align: middle;
            display: inline-block
        }

        #onetrust-pc-sdk .category-vendors-list-handler,
        #onetrust-pc-sdk .category-vendors-list-handler+a {
            margin-left: 0;
            margin-top: 10px
        }

        #onetrust-pc-sdk #ot-selall-vencntr.line-through label::after,
        #onetrust-pc-sdk #ot-selall-adtlvencntr.line-through label::after,
        #onetrust-pc-sdk #ot-selall-licntr.line-through label::after,
        #onetrust-pc-sdk #ot-selall-hostcntr.line-through label::after,
        #onetrust-pc-sdk #ot-selall-gnvencntr.line-through label::after {
            height: auto;
            border-left: 0;
            transform: none;
            -o-transform: none;
            -ms-transform: none;
            -webkit-transform: none;
            left: 5px;
            top: 9px
        }

        #onetrust-pc-sdk #ot-category-title {
            float: left;
            padding-bottom: 10px;
            font-size: 1em;
            width: 100%
        }

        #onetrust-pc-sdk .ot-cat-grp {
            margin-top: 10px
        }

        #onetrust-pc-sdk .ot-cat-item {
            line-height: 1.1;
            margin-top: 10px;
            display: inline-block;
            width: 100%
        }

        #onetrust-pc-sdk .ot-btn-container {
            text-align: right
        }

        #onetrust-pc-sdk .ot-btn-container button {
            display: inline-block;
            font-size: .75em;
            letter-spacing: .08em;
            margin-top: 19px
        }

        #onetrust-pc-sdk #close-pc-btn-handler.ot-close-icon {
            position: absolute;
            top: 10px;
            right: 0;
            z-index: 1;
            padding: 0;
            background-color: rgba(0, 0, 0, 0);
            border: none
        }

        #onetrust-pc-sdk #close-pc-btn-handler.ot-close-icon svg {
            display: block;
            height: 10px;
            width: 10px
        }

        #onetrust-pc-sdk #clear-filters-handler {
            margin-top: 20px;
            margin-bottom: 10px;
            float: right;
            max-width: 200px;
            text-decoration: none;
            color: #3860be;
            font-size: .9em;
            font-weight: bold;
            background-color: rgba(0, 0, 0, 0);
            border-color: rgba(0, 0, 0, 0);
            padding: 1px
        }

        #onetrust-pc-sdk #clear-filters-handler:hover {
            color: #2285f7
        }

        #onetrust-pc-sdk #clear-filters-handler:focus {
            outline: #000 solid 1px
        }

        #onetrust-pc-sdk .ot-enbl-chr h4~.ot-tgl,
        #onetrust-pc-sdk .ot-enbl-chr h4~.ot-always-active {
            right: 45px
        }

        #onetrust-pc-sdk .ot-enbl-chr h4~.ot-tgl+.ot-tgl {
            right: 120px
        }

        #onetrust-pc-sdk .ot-enbl-chr .ot-pli-hdr.ot-leg-border-color span:first-child {
            width: 90px
        }

        #onetrust-pc-sdk .ot-enbl-chr li.ot-subgrp>h5+.ot-tgl-cntr {
            padding-right: 25px
        }

        #onetrust-pc-sdk .ot-plus-minus {
            width: 20px;
            height: 20px;
            font-size: 1.5em;
            position: relative;
            display: inline-block;
            margin-right: 5px;
            top: 3px
        }

        #onetrust-pc-sdk .ot-plus-minus span {
            position: absolute;
            background: #27455c;
            border-radius: 1px
        }

        #onetrust-pc-sdk .ot-plus-minus span:first-of-type {
            top: 25%;
            bottom: 25%;
            width: 10%;
            left: 45%
        }

        #onetrust-pc-sdk .ot-plus-minus span:last-of-type {
            left: 25%;
            right: 25%;
            height: 10%;
            top: 45%
        }

        #onetrust-pc-sdk button[aria-expanded=true]~.ot-acc-hdr .ot-arw,
        #onetrust-pc-sdk button[aria-expanded=true]~.ot-acc-hdr .ot-plus-minus span:first-of-type,
        #onetrust-pc-sdk button[aria-expanded=true]~.ot-acc-hdr .ot-plus-minus span:last-of-type {
            transform: rotate(90deg)
        }

        #onetrust-pc-sdk button[aria-expanded=true]~.ot-acc-hdr .ot-plus-minus span:last-of-type {
            left: 50%;
            right: 50%
        }

        #onetrust-pc-sdk #ot-selall-vencntr label,
        #onetrust-pc-sdk #ot-selall-adtlvencntr label,
        #onetrust-pc-sdk #ot-selall-hostcntr label,
        #onetrust-pc-sdk #ot-selall-licntr label {
            position: relative;
            display: inline-block;
            width: 20px;
            height: 20px
        }

        #onetrust-pc-sdk .ot-host-item .ot-plus-minus,
        #onetrust-pc-sdk .ot-ven-item .ot-plus-minus {
            float: left;
            margin-right: 8px;
            top: 10px
        }

        #onetrust-pc-sdk .ot-ven-item ul {
            list-style: none inside;
            font-size: 100%;
            margin: 0
        }

        #onetrust-pc-sdk .ot-ven-item ul li {
            margin: 0 !important;
            padding: 0;
            border: none !important
        }

        #onetrust-pc-sdk .ot-pli-hdr {
            color: #77808e;
            overflow: hidden;
            padding-top: 7.5px;
            padding-bottom: 7.5px;
            width: calc(100% - 2px);
            border-top-left-radius: 3px;
            border-top-right-radius: 3px
        }

        #onetrust-pc-sdk .ot-pli-hdr span:first-child {
            top: 50%;
            transform: translateY(50%);
            max-width: 90px
        }

        #onetrust-pc-sdk .ot-pli-hdr span:last-child {
            padding-right: 10px;
            max-width: 95px;
            text-align: center
        }

        #onetrust-pc-sdk .ot-li-title {
            float: right;
            font-size: .813em
        }

        #onetrust-pc-sdk .ot-pli-hdr.ot-leg-border-color {
            background-color: #f4f4f4;
            border: 1px solid #d8d8d8
        }

        #onetrust-pc-sdk .ot-pli-hdr.ot-leg-border-color span:first-child {
            text-align: left;
            width: 70px
        }

        #onetrust-pc-sdk li.ot-subgrp>h5,
        #onetrust-pc-sdk .ot-cat-header {
            width: calc(100% - 130px)
        }

        #onetrust-pc-sdk li.ot-subgrp>h5+.ot-tgl-cntr {
            padding-left: 13px
        }

        #onetrust-pc-sdk .ot-acc-grpcntr .ot-acc-grpdesc {
            margin-bottom: 5px
        }

        #onetrust-pc-sdk .ot-acc-grpcntr .ot-subgrp-cntr {
            border-top: 1px solid #d8d8d8
        }

        #onetrust-pc-sdk .ot-acc-grpcntr .ot-vlst-cntr+.ot-subgrp-cntr {
            border-top: none
        }

        #onetrust-pc-sdk .ot-acc-hdr .ot-arw-cntr+.ot-tgl-cntr,
        #onetrust-pc-sdk .ot-acc-txt h4+.ot-tgl-cntr {
            padding-left: 13px
        }

        #onetrust-pc-sdk .ot-pli-hdr~.ot-cat-item .ot-subgrp>h5,
        #onetrust-pc-sdk .ot-pli-hdr~.ot-cat-item .ot-cat-header {
            width: calc(100% - 145px)
        }

        #onetrust-pc-sdk .ot-pli-hdr~.ot-cat-item h5+.ot-tgl-cntr,
        #onetrust-pc-sdk .ot-pli-hdr~.ot-cat-item .ot-cat-header+.ot-tgl {
            padding-left: 28px
        }

        #onetrust-pc-sdk .ot-sel-all-hdr,
        #onetrust-pc-sdk .ot-sel-all-chkbox {
            display: inline-block;
            width: 100%;
            position: relative
        }

        #onetrust-pc-sdk .ot-sel-all-chkbox {
            z-index: 1
        }

        #onetrust-pc-sdk .ot-sel-all {
            margin: 0;
            position: relative;
            padding-right: 23px;
            float: right
        }

        #onetrust-pc-sdk .ot-consent-hdr,
        #onetrust-pc-sdk .ot-li-hdr {
            float: right;
            font-size: .812em;
            line-height: normal;
            text-align: center;
            word-break: break-word;
            word-wrap: break-word
        }

        #onetrust-pc-sdk .ot-li-hdr {
            max-width: 100px;
            padding-right: 10px
        }

        #onetrust-pc-sdk .ot-consent-hdr {
            max-width: 55px
        }

        #onetrust-pc-sdk #ot-selall-licntr {
            display: block;
            width: 21px;
            height: auto;
            float: right;
            position: relative;
            right: 80px
        }

        #onetrust-pc-sdk #ot-selall-licntr label {
            position: absolute
        }

        #onetrust-pc-sdk .ot-ven-ctgl {
            margin-left: 66px
        }

        #onetrust-pc-sdk .ot-ven-litgl+.ot-arw-cntr {
            margin-left: 81px
        }

        #onetrust-pc-sdk .ot-enbl-chr .ot-host-cnt .ot-tgl-cntr {
            width: auto
        }

        #onetrust-pc-sdk #ot-lst-cnt:not(.ot-host-cnt) .ot-tgl-cntr {
            width: auto;
            top: auto;
            height: 20px
        }

        #onetrust-pc-sdk #ot-lst-cnt .ot-chkbox {
            position: relative;
            display: inline-block;
            width: 20px;
            height: 20px
        }

        #onetrust-pc-sdk #ot-lst-cnt .ot-chkbox label {
            position: absolute;
            padding: 0;
            width: 20px;
            height: 20px
        }

        #onetrust-pc-sdk #ot-lst-cnt .ot-vnd-info-cntr {
            border: 1px solid #d8d8d8;
            padding: .75rem 2rem;
            padding-bottom: 0;
            width: auto;
            margin-top: .5rem
        }

        #onetrust-pc-sdk .ot-acc-grpdesc+.ot-leg-btn-container {
            padding-left: 20px;
            padding-right: 20px;
            width: calc(100% - 40px);
            margin-bottom: 5px
        }

        #onetrust-pc-sdk .ot-subgrp .ot-leg-btn-container {
            margin-bottom: 5px
        }

        #onetrust-pc-sdk #ot-ven-lst .ot-leg-btn-container {
            margin-top: 10px
        }

        #onetrust-pc-sdk .ot-leg-btn-container {
            display: inline-block;
            width: 100%;
            margin-bottom: 10px
        }

        #onetrust-pc-sdk .ot-leg-btn-container button {
            height: auto;
            padding: 6.5px 8px;
            margin-bottom: 0;
            letter-spacing: 0;
            font-size: .75em;
            line-height: normal
        }

        #onetrust-pc-sdk .ot-leg-btn-container svg {
            display: none;
            height: 14px;
            width: 14px;
            padding-right: 5px;
            vertical-align: sub
        }

        #onetrust-pc-sdk .ot-active-leg-btn {
            cursor: default;
            pointer-events: none
        }

        #onetrust-pc-sdk .ot-active-leg-btn svg {
            display: inline-block
        }

        #onetrust-pc-sdk .ot-remove-objection-handler {
            text-decoration: underline;
            padding: 0;
            font-size: .75em;
            font-weight: 600;
            line-height: 1;
            padding-left: 10px
        }

        #onetrust-pc-sdk .ot-obj-leg-btn-handler span {
            font-weight: bold;
            text-align: center;
            font-size: inherit;
            line-height: 1.5
        }

        #onetrust-pc-sdk.ot-close-btn-link #close-pc-btn-handler {
            border: none;
            height: auto;
            line-height: 1.5;
            text-decoration: underline;
            font-size: .69em;
            background: none;
            right: 15px;
            top: 15px;
            width: auto;
            font-weight: normal
        }

        #onetrust-pc-sdk .ot-pgph-link {
            font-size: .813em !important;
            margin-top: 5px;
            position: relative
        }

        #onetrust-pc-sdk .ot-pgph-link.ot-pgph-link-subgroup {
            margin-bottom: 1rem
        }

        #onetrust-pc-sdk .ot-pgph-contr {
            margin: 0 2.5rem
        }

        #onetrust-pc-sdk .ot-pgph-title {
            font-size: 1.18rem;
            margin-bottom: 2rem
        }

        #onetrust-pc-sdk .ot-pgph-desc {
            font-size: 1rem;
            font-weight: 400;
            margin-bottom: 2rem;
            line-height: 1.5rem
        }

        #onetrust-pc-sdk .ot-pgph-desc:not(:last-child):after {
            content: "";
            width: 96%;
            display: block;
            margin: 0 auto;
            padding-bottom: 2rem;
            border-bottom: 1px solid #e9e9e9
        }

        #onetrust-pc-sdk .ot-cat-header {
            float: left;
            font-weight: 600;
            font-size: .875em;
            line-height: 1.5;
            max-width: 90%;
            vertical-align: middle
        }

        #onetrust-pc-sdk .ot-vnd-item>button:focus {
            outline: #000 solid 2px
        }

        #onetrust-pc-sdk .ot-vnd-item>button {
            position: absolute;
            cursor: pointer;
            width: 100%;
            height: 100%;
            margin: 0;
            top: 0;
            left: 0;
            z-index: 1;
            max-width: none;
            border: none
        }

        #onetrust-pc-sdk .ot-vnd-item>button[aria-expanded=false]~.ot-acc-txt {
            margin-top: 0;
            max-height: 0;
            opacity: 0;
            overflow: hidden;
            width: 100%;
            transition: .25s ease-out;
            display: none
        }

        #onetrust-pc-sdk .ot-vnd-item>button[aria-expanded=true]~.ot-acc-txt {
            transition: .1s ease-in;
            margin-top: 10px;
            width: 100%;
            overflow: auto;
            display: block
        }

        #onetrust-pc-sdk .ot-vnd-item>button[aria-expanded=true]~.ot-acc-grpcntr {
            width: auto;
            margin-top: 0px;
            padding-bottom: 10px
        }

        #onetrust-pc-sdk .ot-accordion-layout.ot-cat-item {
            position: relative;
            border-radius: 2px;
            margin: 0;
            padding: 0;
            border: 1px solid #d8d8d8;
            border-top: none;
            width: calc(100% - 2px);
            float: left
        }

        #onetrust-pc-sdk .ot-accordion-layout.ot-cat-item:first-of-type {
            margin-top: 10px;
            border-top: 1px solid #d8d8d8
        }

        #onetrust-pc-sdk .ot-accordion-layout .ot-acc-grpdesc {
            padding-left: 20px;
            padding-right: 20px;
            width: calc(100% - 40px);
            font-size: .812em;
            margin-bottom: 10px;
            margin-top: 15px
        }

        #onetrust-pc-sdk .ot-accordion-layout .ot-acc-grpdesc>ul {
            padding-top: 10px
        }

        #onetrust-pc-sdk .ot-accordion-layout .ot-acc-grpdesc>ul li {
            padding-top: 0;
            line-height: 1.5;
            padding-bottom: 10px
        }

        #onetrust-pc-sdk .ot-accordion-layout div+.ot-acc-grpdesc {
            margin-top: 5px
        }

        #onetrust-pc-sdk .ot-accordion-layout .ot-vlst-cntr:first-child {
            margin-top: 10px
        }

        #onetrust-pc-sdk .ot-accordion-layout .ot-vlst-cntr:last-child,
        #onetrust-pc-sdk .ot-accordion-layout .ot-hlst-cntr:last-child {
            margin-bottom: 5px
        }

        #onetrust-pc-sdk .ot-accordion-layout .ot-acc-hdr {
            padding-top: 11.5px;
            padding-bottom: 11.5px;
            padding-left: 20px;
            padding-right: 20px;
            width: calc(100% - 40px);
            display: inline-block
        }

        #onetrust-pc-sdk .ot-accordion-layout .ot-acc-txt {
            width: 100%;
            padding: 0
        }

        #onetrust-pc-sdk .ot-accordion-layout .ot-subgrp-cntr {
            padding-left: 20px;
            padding-right: 15px;
            padding-bottom: 0;
            width: calc(100% - 35px)
        }

        #onetrust-pc-sdk .ot-accordion-layout .ot-subgrp {
            padding-right: 5px
        }

        #onetrust-pc-sdk .ot-accordion-layout .ot-acc-grpcntr {
            z-index: 1;
            position: relative
        }

        #onetrust-pc-sdk .ot-accordion-layout .ot-cat-header+.ot-arw-cntr {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            right: 20px;
            margin-top: -2px
        }

        #onetrust-pc-sdk .ot-accordion-layout .ot-cat-header+.ot-arw-cntr .ot-arw {
            width: 15px;
            height: 20px;
            margin-left: 5px;
            color: dimgray
        }

        #onetrust-pc-sdk .ot-accordion-layout .ot-cat-header {
            float: none;
            color: #2e3644;
            margin: 0;
            display: inline-block;
            height: auto;
            word-wrap: break-word;
            min-height: inherit
        }

        #onetrust-pc-sdk .ot-accordion-layout .ot-vlst-cntr,
        #onetrust-pc-sdk .ot-accordion-layout .ot-hlst-cntr {
            padding-left: 20px;
            width: calc(100% - 20px);
            display: inline-block;
            margin-top: 0;
            padding-bottom: 2px
        }

        #onetrust-pc-sdk .ot-accordion-layout .ot-acc-hdr {
            position: relative;
            min-height: 25px
        }

        #onetrust-pc-sdk .ot-accordion-layout h4~.ot-tgl,
        #onetrust-pc-sdk .ot-accordion-layout h4~.ot-always-active {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            right: 20px
        }

        #onetrust-pc-sdk .ot-accordion-layout h4~.ot-tgl+.ot-tgl {
            right: 95px
        }

        #onetrust-pc-sdk .ot-accordion-layout .category-vendors-list-handler,
        #onetrust-pc-sdk .ot-accordion-layout .category-vendors-list-handler+a {
            margin-top: 5px
        }

        #onetrust-pc-sdk #ot-lst-cnt {
            margin-top: 1rem;
            max-height: calc(100% - 96px)
        }

        #onetrust-pc-sdk #ot-lst-cnt .ot-vnd-info-cntr {
            border: 1px solid #d8d8d8;
            padding: .75rem 2rem;
            padding-bottom: 0;
            width: auto;
            margin-top: .5rem
        }

        #onetrust-pc-sdk #ot-lst-cnt .ot-vnd-info {
            margin-bottom: 1rem;
            padding-left: .75rem;
            padding-right: .75rem;
            display: flex;
            flex-direction: column
        }

        #onetrust-pc-sdk #ot-lst-cnt .ot-vnd-info[data-vnd-info-key*=DPOEmail] {
            border-top: 1px solid #d8d8d8;
            padding-top: 1rem
        }

        #onetrust-pc-sdk #ot-lst-cnt .ot-vnd-info[data-vnd-info-key*=DPOLink] {
            border-bottom: 1px solid #d8d8d8;
            padding-bottom: 1rem
        }

        #onetrust-pc-sdk #ot-lst-cnt .ot-vnd-info .ot-vnd-lbl {
            font-weight: bold;
            font-size: .85em;
            margin-bottom: .5rem
        }

        #onetrust-pc-sdk #ot-lst-cnt .ot-vnd-info .ot-vnd-cnt {
            margin-left: .5rem;
            font-weight: 500;
            font-size: .85rem
        }

        #onetrust-pc-sdk .ot-vs-list,
        #onetrust-pc-sdk .ot-vnd-serv {
            width: auto;
            padding: 1rem 1.25rem;
            padding-bottom: 0
        }

        #onetrust-pc-sdk .ot-vs-list .ot-vnd-serv-hdr-cntr,
        #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-serv-hdr-cntr {
            padding-bottom: .75rem;
            border-bottom: 1px solid #d8d8d8
        }

        #onetrust-pc-sdk .ot-vs-list .ot-vnd-serv-hdr-cntr .ot-vnd-serv-hdr,
        #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-serv-hdr-cntr .ot-vnd-serv-hdr {
            font-weight: 600;
            font-size: .95em;
            line-height: 2;
            margin-left: .5rem
        }

        #onetrust-pc-sdk .ot-vs-list .ot-vnd-item,
        #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item {
            border: none;
            margin: 0;
            padding: 0
        }

        #onetrust-pc-sdk .ot-vs-list .ot-vnd-item button,
        #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item button {
            outline: none;
            border-bottom: 1px solid #d8d8d8
        }

        #onetrust-pc-sdk .ot-vs-list .ot-vnd-item button[aria-expanded=true],
        #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item button[aria-expanded=true] {
            border-bottom: none
        }

        #onetrust-pc-sdk .ot-vs-list .ot-vnd-item:first-child,
        #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item:first-child {
            margin-top: .25rem;
            border-top: unset
        }

        #onetrust-pc-sdk .ot-vs-list .ot-vnd-item:last-child,
        #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item:last-child {
            margin-bottom: .5rem
        }

        #onetrust-pc-sdk .ot-vs-list .ot-vnd-item:last-child button,
        #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item:last-child button {
            border-bottom: none
        }

        #onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-vnd-info-cntr,
        #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-vnd-info-cntr {
            border: 1px solid #d8d8d8;
            padding: .75rem 1.75rem;
            padding-bottom: 0;
            width: auto;
            margin-top: .5rem
        }

        #onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-vnd-info,
        #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-vnd-info {
            margin-bottom: 1rem;
            padding-left: .75rem;
            padding-right: .75rem;
            display: flex;
            flex-direction: column
        }

        #onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-vnd-info[data-vnd-info-key*=DPOEmail],
        #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-vnd-info[data-vnd-info-key*=DPOEmail] {
            border-top: 1px solid #d8d8d8;
            padding-top: 1rem
        }

        #onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-vnd-info[data-vnd-info-key*=DPOLink],
        #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-vnd-info[data-vnd-info-key*=DPOLink] {
            border-bottom: 1px solid #d8d8d8;
            padding-bottom: 1rem
        }

        #onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-vnd-info .ot-vnd-lbl,
        #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-vnd-info .ot-vnd-lbl {
            font-weight: bold;
            font-size: .85em;
            margin-bottom: .5rem
        }

        #onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-vnd-info .ot-vnd-cnt,
        #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-vnd-info .ot-vnd-cnt {
            margin-left: .5rem;
            font-weight: 500;
            font-size: .85rem
        }

        #onetrust-pc-sdk .ot-vs-list.ot-vnd-subgrp-cnt,
        #onetrust-pc-sdk .ot-vnd-serv.ot-vnd-subgrp-cnt {
            padding-left: 40px
        }

        #onetrust-pc-sdk .ot-vs-list.ot-vnd-subgrp-cnt .ot-vnd-serv-hdr-cntr .ot-vnd-serv-hdr,
        #onetrust-pc-sdk .ot-vnd-serv.ot-vnd-subgrp-cnt .ot-vnd-serv-hdr-cntr .ot-vnd-serv-hdr {
            font-size: .8em
        }

        #onetrust-pc-sdk .ot-vs-list.ot-vnd-subgrp-cnt .ot-cat-header,
        #onetrust-pc-sdk .ot-vnd-serv.ot-vnd-subgrp-cnt .ot-cat-header {
            font-size: .8em
        }

        #onetrust-pc-sdk .ot-subgrp-cntr .ot-vnd-serv {
            margin-bottom: 1rem;
            padding: 1rem .95rem
        }

        #onetrust-pc-sdk .ot-subgrp-cntr .ot-vnd-serv .ot-vnd-serv-hdr-cntr {
            padding-bottom: .75rem;
            border-bottom: 1px solid #d8d8d8
        }

        #onetrust-pc-sdk .ot-subgrp-cntr .ot-vnd-serv .ot-vnd-serv-hdr-cntr .ot-vnd-serv-hdr {
            font-weight: 700;
            font-size: .8em;
            line-height: 20px;
            margin-left: .82rem
        }

        #onetrust-pc-sdk .ot-subgrp-cntr .ot-cat-header {
            font-weight: 700;
            font-size: .8em;
            line-height: 20px
        }

        #onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-vnd-serv .ot-vnd-lst-cont .ot-accordion-layout .ot-acc-hdr div.ot-chkbox {
            margin-left: .82rem
        }

        #onetrust-pc-sdk .ot-vs-config .ot-acc-hdr,
        #onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr,
        #onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr,
        #onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr,
        #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr,
        #onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr,
        #onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr {
            padding: .7rem 0;
            margin: 0;
            display: flex;
            width: 100%;
            align-items: center;
            justify-content: space-between
        }

        #onetrust-pc-sdk .ot-vs-config .ot-acc-hdr div:first-child,
        #onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr div:first-child,
        #onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr div:first-child,
        #onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr div:first-child,
        #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr div:first-child,
        #onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr div:first-child,
        #onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr div:first-child {
            margin-left: .5rem
        }

        #onetrust-pc-sdk .ot-vs-config .ot-acc-hdr div:last-child,
        #onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr div:last-child,
        #onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr div:last-child,
        #onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr div:last-child,
        #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr div:last-child,
        #onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr div:last-child,
        #onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr div:last-child {
            margin-right: .5rem;
            margin-left: .5rem
        }

        #onetrust-pc-sdk .ot-vs-config .ot-acc-hdr .ot-always-active,
        #onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr .ot-always-active,
        #onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr .ot-always-active,
        #onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-always-active,
        #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr .ot-always-active,
        #onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-always-active,
        #onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr .ot-always-active {
            position: relative;
            right: unset;
            top: unset;
            transform: unset
        }

        #onetrust-pc-sdk .ot-vs-config .ot-acc-hdr .ot-plus-minus,
        #onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr .ot-plus-minus,
        #onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr .ot-plus-minus,
        #onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-plus-minus,
        #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr .ot-plus-minus,
        #onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-plus-minus,
        #onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr .ot-plus-minus {
            top: 0
        }

        #onetrust-pc-sdk .ot-vs-config .ot-acc-hdr .ot-arw-cntr,
        #onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr .ot-arw-cntr,
        #onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr .ot-arw-cntr,
        #onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-arw-cntr,
        #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr .ot-arw-cntr,
        #onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-arw-cntr,
        #onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr .ot-arw-cntr {
            float: none;
            top: unset;
            right: unset;
            transform: unset;
            margin-top: -2px;
            position: relative
        }

        #onetrust-pc-sdk .ot-vs-config .ot-acc-hdr .ot-cat-header,
        #onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr .ot-cat-header,
        #onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr .ot-cat-header,
        #onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-cat-header,
        #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr .ot-cat-header,
        #onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-cat-header,
        #onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr .ot-cat-header {
            flex: 1;
            margin: 0 .5rem
        }

        #onetrust-pc-sdk .ot-vs-config .ot-acc-hdr .ot-tgl,
        #onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr .ot-tgl,
        #onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr .ot-tgl,
        #onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-tgl,
        #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr .ot-tgl,
        #onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-tgl,
        #onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr .ot-tgl {
            position: relative;
            transform: none;
            right: 0;
            top: 0;
            float: none
        }

        #onetrust-pc-sdk .ot-vs-config .ot-acc-hdr .ot-chkbox,
        #onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr .ot-chkbox,
        #onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr .ot-chkbox,
        #onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-chkbox,
        #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr .ot-chkbox,
        #onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-chkbox,
        #onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr .ot-chkbox {
            position: relative;
            margin: 0 .5rem
        }

        #onetrust-pc-sdk .ot-vs-config .ot-acc-hdr .ot-chkbox label,
        #onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr .ot-chkbox label,
        #onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr .ot-chkbox label,
        #onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-chkbox label,
        #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr .ot-chkbox label,
        #onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-chkbox label,
        #onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr .ot-chkbox label {
            padding: 0
        }

        #onetrust-pc-sdk .ot-vs-config .ot-acc-hdr .ot-chkbox label::before,
        #onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr .ot-chkbox label::before,
        #onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr .ot-chkbox label::before,
        #onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-chkbox label::before,
        #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr .ot-chkbox label::before,
        #onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-chkbox label::before,
        #onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr .ot-chkbox label::before {
            position: relative
        }

        #onetrust-pc-sdk .ot-vs-config .ot-acc-hdr .ot-chkbox input,
        #onetrust-pc-sdk ul.ot-subgrps .ot-acc-hdr .ot-chkbox input,
        #onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps .ot-acc-hdr .ot-chkbox input,
        #onetrust-pc-sdk .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-chkbox input,
        #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-acc-hdr .ot-chkbox input,
        #onetrust-pc-sdk #ot-pc-lst .ot-vs-list .ot-vnd-item .ot-acc-hdr .ot-chkbox input,
        #onetrust-pc-sdk .ot-accordion-layout.ot-checkbox-consent .ot-acc-hdr .ot-chkbox input {
            position: absolute;
            cursor: pointer;
            width: 100%;
            height: 100%;
            opacity: 0;
            margin: 0;
            top: 0;
            left: 0;
            z-index: 1
        }

        #onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps li.ot-subgrp .ot-acc-hdr h5.ot-cat-header,
        #onetrust-pc-sdk .ot-subgrp-cntr ul.ot-subgrps li.ot-subgrp .ot-acc-hdr h4.ot-cat-header {
            margin: 0
        }

        #onetrust-pc-sdk .ot-vs-config .ot-subgrp-cntr ul.ot-subgrps li.ot-subgrp h5 {
            top: 0;
            line-height: 20px
        }

        #onetrust-pc-sdk .ot-vs-list {
            display: flex;
            flex-direction: column;
            padding: 0;
            margin: .5rem 4px
        }

        #onetrust-pc-sdk .ot-vs-selc-all {
            display: flex;
            padding: 0;
            float: unset;
            align-items: center;
            justify-content: flex-start
        }

        #onetrust-pc-sdk .ot-vs-selc-all.ot-toggle-conf {
            justify-content: flex-end
        }

        #onetrust-pc-sdk .ot-vs-selc-all.ot-toggle-conf.ot-caret-conf .ot-sel-all-chkbox {
            margin-right: 48px
        }

        #onetrust-pc-sdk .ot-vs-selc-all.ot-toggle-conf .ot-sel-all-chkbox {
            margin: 0;
            padding: 0;
            margin-right: 14px;
            justify-content: flex-end
        }

        #onetrust-pc-sdk .ot-vs-selc-all.ot-toggle-conf #ot-selall-vencntr.ot-chkbox,
        #onetrust-pc-sdk .ot-vs-selc-all.ot-toggle-conf #ot-selall-vencntr.ot-tgl {
            display: inline-block;
            right: unset;
            width: auto;
            height: auto;
            float: none
        }

        #onetrust-pc-sdk .ot-vs-selc-all.ot-toggle-conf #ot-selall-vencntr label {
            width: 45px;
            height: 25px
        }

        #onetrust-pc-sdk .ot-vs-selc-all .ot-sel-all-chkbox {
            margin-right: 11px;
            margin-left: .75rem;
            display: flex;
            align-items: center
        }

        #onetrust-pc-sdk .ot-vs-selc-all .sel-all-hdr {
            margin: 0 1.25rem;
            font-size: .812em;
            line-height: normal;
            text-align: center;
            word-break: break-word;
            word-wrap: break-word
        }

        #onetrust-pc-sdk .ot-vnd-list-cnt #ot-selall-vencntr.ot-chkbox {
            float: unset;
            right: 0
        }

        #onetrust-pc-sdk[dir=rtl] #ot-back-arw,
        #onetrust-pc-sdk[dir=rtl] input~.ot-acc-hdr .ot-arw {
            transform: rotate(180deg);
            -o-transform: rotate(180deg);
            -ms-transform: rotate(180deg);
            -webkit-transform: rotate(180deg)
        }

        #onetrust-pc-sdk[dir=rtl] input:checked~.ot-acc-hdr .ot-arw {
            transform: rotate(270deg);
            -o-transform: rotate(270deg);
            -ms-transform: rotate(270deg);
            -webkit-transform: rotate(270deg)
        }

        #onetrust-pc-sdk[dir=rtl] .ot-chkbox label::after {
            transform: rotate(45deg);
            -webkit-transform: rotate(45deg);
            -o-transform: rotate(45deg);
            -ms-transform: rotate(45deg);
            border-left: 0;
            border-right: 3px solid
        }

        #onetrust-pc-sdk[dir=rtl] .ot-search-cntr>svg {
            right: 0
        }

        @media only screen and (max-width: 600px) {
            #onetrust-pc-sdk.otPcCenter {
                left: 0;
                min-width: 100%;
                height: 100%;
                top: 0;
                border-radius: 0
            }

            #onetrust-pc-sdk #ot-pc-content,
            #onetrust-pc-sdk.ot-ftr-stacked .ot-btn-container {
                margin: 1px 3px 0 10px;
                padding-right: 10px;
                width: calc(100% - 23px)
            }

            #onetrust-pc-sdk .ot-btn-container button {
                max-width: none;
                letter-spacing: .01em
            }

            #onetrust-pc-sdk #close-pc-btn-handler {
                top: 10px;
                right: 17px
            }

            #onetrust-pc-sdk p {
                font-size: .7em
            }

            #onetrust-pc-sdk #ot-pc-hdr {
                margin: 10px 10px 0 5px;
                width: calc(100% - 15px)
            }

            #onetrust-pc-sdk .vendor-search-handler {
                font-size: 1em
            }

            #onetrust-pc-sdk #ot-back-arw {
                margin-left: 12px
            }

            #onetrust-pc-sdk #ot-lst-cnt {
                margin: 0;
                padding: 0 5px 0 10px;
                min-width: 95%
            }

            #onetrust-pc-sdk .switch+p {
                max-width: 80%
            }

            #onetrust-pc-sdk .ot-ftr-stacked button {
                width: 100%
            }

            #onetrust-pc-sdk #ot-fltr-cnt {
                max-width: 320px;
                width: 90%;
                border-top-right-radius: 0;
                border-bottom-right-radius: 0;
                margin: 0;
                margin-left: 15px;
                left: auto;
                right: 40px;
                top: 85px
            }

            #onetrust-pc-sdk .ot-fltr-opt {
                margin-left: 25px;
                margin-bottom: 10px
            }

            #onetrust-pc-sdk .ot-pc-refuse-all-handler {
                margin-bottom: 0
            }

            #onetrust-pc-sdk #ot-fltr-cnt {
                right: 40px
            }
        }

        @media only screen and (max-width: 476px) {

            #onetrust-pc-sdk .ot-fltr-cntr,
            #onetrust-pc-sdk #ot-fltr-cnt {
                right: 10px
            }

            #onetrust-pc-sdk #ot-anchor {
                right: 25px
            }

            #onetrust-pc-sdk button {
                width: 100%
            }

            #onetrust-pc-sdk:not(.ot-addtl-vendors) #ot-pc-lst:not(.ot-enbl-chr) .ot-sel-all {
                padding-right: 9px
            }

            #onetrust-pc-sdk:not(.ot-addtl-vendors) #ot-pc-lst:not(.ot-enbl-chr) .ot-tgl-cntr {
                right: 0
            }
        }

        @media only screen and (max-width: 896px)and (max-height: 425px)and (orientation: landscape) {
            #onetrust-pc-sdk.otPcCenter {
                left: 0;
                top: 0;
                min-width: 100%;
                height: 100%;
                border-radius: 0
            }

            #onetrust-pc-sdk #ot-anchor {
                left: initial;
                right: 50px
            }

            #onetrust-pc-sdk #ot-lst-title {
                margin-top: 12px
            }

            #onetrust-pc-sdk #ot-lst-title * {
                font-size: inherit
            }

            #onetrust-pc-sdk #ot-pc-hdr input {
                margin-right: 0;
                padding-right: 45px
            }

            #onetrust-pc-sdk .switch+p {
                max-width: 85%
            }

            #onetrust-pc-sdk #ot-sel-blk {
                position: static
            }

            #onetrust-pc-sdk #ot-pc-lst {
                overflow: auto
            }

            #onetrust-pc-sdk #ot-lst-cnt {
                max-height: none;
                overflow: initial
            }

            #onetrust-pc-sdk #ot-lst-cnt.no-results {
                height: auto
            }

            #onetrust-pc-sdk input {
                font-size: 1em !important
            }

            #onetrust-pc-sdk p {
                font-size: .6em
            }

            #onetrust-pc-sdk #ot-fltr-modal {
                width: 100%;
                top: 0
            }

            #onetrust-pc-sdk ul li p,
            #onetrust-pc-sdk .category-vendors-list-handler,
            #onetrust-pc-sdk .category-vendors-list-handler+a,
            #onetrust-pc-sdk .category-host-list-handler {
                font-size: .6em
            }

            #onetrust-pc-sdk.ot-shw-fltr #ot-anchor {
                display: none !important
            }

            #onetrust-pc-sdk.ot-shw-fltr #ot-pc-lst {
                height: 100% !important;
                overflow: hidden;
                top: 0px
            }

            #onetrust-pc-sdk.ot-shw-fltr #ot-fltr-cnt {
                margin: 0;
                height: 100%;
                max-height: none;
                padding: 10px;
                top: 0;
                width: calc(100% - 20px);
                position: absolute;
                right: 0;
                left: 0;
                max-width: none
            }

            #onetrust-pc-sdk.ot-shw-fltr .ot-fltr-scrlcnt {
                max-height: calc(100% - 65px)
            }
        }

        #onetrust-consent-sdk #onetrust-pc-sdk,
        #onetrust-consent-sdk #ot-search-cntr,
        #onetrust-consent-sdk #onetrust-pc-sdk .ot-switch.ot-toggle,
        #onetrust-consent-sdk #onetrust-pc-sdk ot-grp-hdr1 .checkbox,
        #onetrust-consent-sdk #onetrust-pc-sdk #ot-pc-title:after,
        #onetrust-consent-sdk #onetrust-pc-sdk #ot-sel-blk,
        #onetrust-consent-sdk #onetrust-pc-sdk #ot-fltr-cnt,
        #onetrust-consent-sdk #onetrust-pc-sdk #ot-anchor {
            background-color: #000000;
        }

        #onetrust-consent-sdk #onetrust-pc-sdk h3,
        #onetrust-consent-sdk #onetrust-pc-sdk h4,
        #onetrust-consent-sdk #onetrust-pc-sdk h5,
        #onetrust-consent-sdk #onetrust-pc-sdk h6,
        #onetrust-consent-sdk #onetrust-pc-sdk p,
        #onetrust-consent-sdk #onetrust-pc-sdk #ot-ven-lst .ot-ven-opts p,
        #onetrust-consent-sdk #onetrust-pc-sdk #ot-pc-desc,
        #onetrust-consent-sdk #onetrust-pc-sdk #ot-pc-title,
        #onetrust-consent-sdk #onetrust-pc-sdk .ot-li-title,
        #onetrust-consent-sdk #onetrust-pc-sdk .ot-sel-all-hdr span,
        #onetrust-consent-sdk #onetrust-pc-sdk #ot-host-lst .ot-host-info,
        #onetrust-consent-sdk #onetrust-pc-sdk #ot-fltr-modal #modal-header,
        #onetrust-consent-sdk #onetrust-pc-sdk .ot-checkbox label span,
        #onetrust-consent-sdk #onetrust-pc-sdk #ot-pc-lst #ot-sel-blk p,
        #onetrust-consent-sdk #onetrust-pc-sdk #ot-pc-lst #ot-lst-title h3,
        #onetrust-consent-sdk #onetrust-pc-sdk #ot-pc-lst .back-btn-handler p,
        #onetrust-consent-sdk #onetrust-pc-sdk #ot-pc-lst .ot-ven-name,
        #onetrust-consent-sdk #onetrust-pc-sdk #ot-pc-lst #ot-ven-lst .consent-category,
        #onetrust-consent-sdk #onetrust-pc-sdk .ot-leg-btn-container .ot-inactive-leg-btn,
        #onetrust-consent-sdk #onetrust-pc-sdk .ot-label-status,
        #onetrust-consent-sdk #onetrust-pc-sdk .ot-chkbox label span,
        #onetrust-consent-sdk #onetrust-pc-sdk #clear-filters-handler,
        #onetrust-consent-sdk #onetrust-pc-sdk .ot-optout-signal {
            color: #FFFFFF;
        }

        #onetrust-consent-sdk #onetrust-pc-sdk .privacy-notice-link,
        #onetrust-consent-sdk #onetrust-pc-sdk .ot-pgph-link,
        #onetrust-consent-sdk #onetrust-pc-sdk .category-vendors-list-handler,
        #onetrust-consent-sdk #onetrust-pc-sdk .category-vendors-list-handler+a,
        #onetrust-consent-sdk #onetrust-pc-sdk .category-host-list-handler,
        #onetrust-consent-sdk #onetrust-pc-sdk .ot-ven-link,
        #onetrust-consent-sdk #onetrust-pc-sdk .ot-ven-legclaim-link,
        #onetrust-consent-sdk #onetrust-pc-sdk #ot-host-lst .ot-host-name a,
        #onetrust-consent-sdk #onetrust-pc-sdk #ot-host-lst .ot-acc-hdr .ot-host-expand,
        #onetrust-consent-sdk #onetrust-pc-sdk #ot-host-lst .ot-host-info a,
        #onetrust-consent-sdk #onetrust-pc-sdk #ot-pc-content #ot-pc-desc .ot-link-btn,
        #onetrust-consent-sdk #onetrust-pc-sdk .ot-vnd-serv .ot-vnd-item .ot-vnd-info a,
        #onetrust-consent-sdk #onetrust-pc-sdk #ot-lst-cnt .ot-vnd-info a {
            color: #00bfff;
        }

        #onetrust-consent-sdk #onetrust-pc-sdk .category-vendors-list-handler:hover {
            text-decoration: underline;
        }

        #onetrust-consent-sdk #onetrust-pc-sdk .ot-acc-grpcntr.ot-acc-txt,
        #onetrust-consent-sdk #onetrust-pc-sdk .ot-acc-txt .ot-subgrp-tgl .ot-switch.ot-toggle {
            background-color: #000000;
        }

        #onetrust-consent-sdk #onetrust-pc-sdk #ot-host-lst .ot-host-info,
        #onetrust-consent-sdk #onetrust-pc-sdk .ot-acc-txt .ot-ven-dets {
            background-color: #000000;
        }

        #onetrust-consent-sdk #onetrust-pc-sdk button:not(#clear-filters-handler):not(.ot-close-icon):not(#filter-btn-handler):not(.ot-remove-objection-handler):not(.ot-obj-leg-btn-handler):not([aria-expanded]):not(.ot-link-btn),
        #onetrust-consent-sdk #onetrust-pc-sdk .ot-leg-btn-container .ot-active-leg-btn {
            background-color: #00bfff;
            border-color: #00bfff;
            color: #FFFFFF;
        }

        #onetrust-consent-sdk #onetrust-pc-sdk .ot-active-menu {
            border-color: #00bfff;
        }

        #onetrust-consent-sdk #onetrust-pc-sdk .ot-leg-btn-container .ot-remove-objection-handler {
            background-color: transparent;
            border: 1px solid transparent;
        }

        #onetrust-consent-sdk #onetrust-pc-sdk .ot-leg-btn-container .ot-inactive-leg-btn {
            background-color: #FFFFFF;
            color: #4D4D4D;
            border-color: #4D4D4D;
        }

        #onetrust-consent-sdk #onetrust-pc-sdk .ot-tgl input:focus+.ot-switch,
        .ot-switch .ot-switch-nob,
        .ot-switch .ot-switch-nob:before,
        #onetrust-pc-sdk .ot-checkbox input[type="checkbox"]:focus+label::before,
        #onetrust-pc-sdk .ot-chkbox input[type="checkbox"]:focus+label::before {
            outline-color: #A0A0A0;
            outline-width: 1px;
        }

        #onetrust-pc-sdk .ot-host-item>button:focus,
        #onetrust-pc-sdk .ot-ven-item>button:focus {
            border: 1px solid #A0A0A0;
        }

        #onetrust-consent-sdk #onetrust-pc-sdk *:focus,
        #onetrust-consent-sdk #onetrust-pc-sdk .ot-vlst-cntr>a:focus {
            outline: 1px solid #A0A0A0;
        }

        #onetrust-pc-sdk .ot-vlst-cntr .ot-ext-lnk,
        #onetrust-pc-sdk .ot-ven-hdr .ot-ext-lnk {
            background-image: url('https://cdn.cookielaw.org/logos/static/ot_external_link.svg');
        }

        #onetrust-pc-sdk .ot-pc-footer-logo {
            display: none;
        }

        .ot-sdk-cookie-policy {
            font-family: inherit;
            font-size: 16px
        }

        .ot-sdk-cookie-policy.otRelFont {
            font-size: 1rem
        }

        .ot-sdk-cookie-policy h3,
        .ot-sdk-cookie-policy h4,
        .ot-sdk-cookie-policy h6,
        .ot-sdk-cookie-policy p,
        .ot-sdk-cookie-policy li,
        .ot-sdk-cookie-policy a,
        .ot-sdk-cookie-policy th,
        .ot-sdk-cookie-policy #cookie-policy-description,
        .ot-sdk-cookie-policy .ot-sdk-cookie-policy-group,
        .ot-sdk-cookie-policy #cookie-policy-title {
            color: dimgray
        }

        .ot-sdk-cookie-policy #cookie-policy-description {
            margin-bottom: 1em
        }

        .ot-sdk-cookie-policy h4 {
            font-size: 1.2em
        }

        .ot-sdk-cookie-policy h6 {
            font-size: 1em;
            margin-top: 2em
        }

        .ot-sdk-cookie-policy th {
            min-width: 75px
        }

        .ot-sdk-cookie-policy a,
        .ot-sdk-cookie-policy a:hover {
            background: #fff
        }

        .ot-sdk-cookie-policy thead {
            background-color: #f6f6f4;
            font-weight: bold
        }

        .ot-sdk-cookie-policy .ot-mobile-border {
            display: none
        }

        .ot-sdk-cookie-policy section {
            margin-bottom: 2em
        }

        .ot-sdk-cookie-policy table {
            border-collapse: inherit
        }

        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy {
            font-family: inherit;
            font-size: 1rem
        }

        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy h3,
        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy h4,
        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy h6,
        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy p,
        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy li,
        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy a,
        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy th,
        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy #cookie-policy-description,
        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-sdk-cookie-policy-group,
        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy #cookie-policy-title {
            color: dimgray
        }

        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy #cookie-policy-description {
            margin-bottom: 1em
        }

        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-sdk-subgroup {
            margin-left: 1.5em
        }

        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy #cookie-policy-description,
        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-sdk-cookie-policy-group-desc,
        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-table-header,
        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy a,
        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy span,
        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy td {
            font-size: .9em
        }

        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy td span,
        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy td a {
            font-size: inherit
        }

        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-sdk-cookie-policy-group {
            font-size: 1em;
            margin-bottom: .6em
        }

        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-sdk-cookie-policy-title {
            margin-bottom: 1.2em
        }

        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy>section {
            margin-bottom: 1em
        }

        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy th {
            min-width: 75px
        }

        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy a,
        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy a:hover {
            background: #fff
        }

        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy thead {
            background-color: #f6f6f4;
            font-weight: bold
        }

        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-mobile-border {
            display: none
        }

        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy section {
            margin-bottom: 2em
        }

        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-sdk-subgroup ul li {
            list-style: disc;
            margin-left: 1.5em
        }

        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-sdk-subgroup ul li h4 {
            display: inline-block
        }

        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table {
            border-collapse: inherit;
            margin: auto;
            border: 1px solid #d7d7d7;
            border-radius: 5px;
            border-spacing: initial;
            width: 100%;
            overflow: hidden
        }

        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table th,
        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table td {
            border-bottom: 1px solid #d7d7d7;
            border-right: 1px solid #d7d7d7
        }

        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table tr:last-child td {
            border-bottom: 0px
        }

        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table tr th:last-child,
        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table tr td:last-child {
            border-right: 0px
        }

        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table .ot-host,
        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table .ot-cookies-type {
            width: 25%
        }

        .ot-sdk-cookie-policy[dir=rtl] {
            text-align: left
        }

        #ot-sdk-cookie-policy h3 {
            font-size: 1.5em
        }

        @media only screen and (max-width: 530px) {

            .ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) table,
            .ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) thead,
            .ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) tbody,
            .ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) th,
            .ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) td,
            .ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) tr {
                display: block
            }

            .ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) thead tr {
                position: absolute;
                top: -9999px;
                left: -9999px
            }

            .ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) tr {
                margin: 0 0 1em 0
            }

            .ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) tr:nth-child(odd),
            .ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) tr:nth-child(odd) a {
                background: #f6f6f4
            }

            .ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) td {
                border: none;
                border-bottom: 1px solid #eee;
                position: relative;
                padding-left: 50%
            }

            .ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) td:before {
                position: absolute;
                height: 100%;
                left: 6px;
                width: 40%;
                padding-right: 10px
            }

            .ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) .ot-mobile-border {
                display: inline-block;
                background-color: #e4e4e4;
                position: absolute;
                height: 100%;
                top: 0;
                left: 45%;
                width: 2px
            }

            .ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) td:before {
                content: attr(data-label);
                font-weight: bold
            }

            .ot-sdk-cookie-policy:not(#ot-sdk-cookie-policy-v2) li {
                word-break: break-word;
                word-wrap: break-word
            }

            #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table {
                overflow: hidden
            }

            #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table td {
                border: none;
                border-bottom: 1px solid #d7d7d7
            }

            #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table,
            #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy thead,
            #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy tbody,
            #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy th,
            #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy td,
            #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy tr {
                display: block
            }

            #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table .ot-host,
            #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table .ot-cookies-type {
                width: auto
            }

            #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy tr {
                margin: 0 0 1em 0
            }

            #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy td:before {
                height: 100%;
                width: 40%;
                padding-right: 10px
            }

            #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy td:before {
                content: attr(data-label);
                font-weight: bold
            }

            #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy li {
                word-break: break-word;
                word-wrap: break-word
            }

            #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy thead tr {
                position: absolute;
                top: -9999px;
                left: -9999px;
                z-index: -9999
            }

            #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table tr:last-child td {
                border-bottom: 1px solid #d7d7d7;
                border-right: 0px
            }

            #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table tr:last-child td:last-child {
                border-bottom: 0px
            }
        }

        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy h5,
        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy h6,
        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy li,
        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy p,
        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy a,
        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy span,
        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy td,
        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy #cookie-policy-description {
            color: #696969;
        }

        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy th {
            color: #696969;
        }

        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy .ot-sdk-cookie-policy-group {
            color: #696969;
        }

        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy #cookie-policy-title {
            color: #696969;
        }


        #ot-sdk-cookie-policy-v2.ot-sdk-cookie-policy table th {
            background-color: #F8F8F8;
        }

        .ot-floating-button__front {
            background-image: url('https://cdn.cookielaw.org/logos/static/ot_persistent_cookie_icon.png')
        }

        @keyframes slide-down-custom {
            0% {
                bottom: 1307px !important;
            }

            100% {
                bottom: 0px;
            }
        }

        @-webkit-keyframes slide-down-custom {
            0% {
                bottom: 1307px !important;
            }

            100% {
                bottom: 0px;
            }
        }

        @-moz-keyframes slide-down-custom {
            0% {
                bottom: 1307px !important;
            }

            100% {
                bottom: 0px;
            }
        }
    </style>
    <link rel="canonical" href="https://www.crunchyroll.com/de/watch/GR5VK12DR/untitled" data-rh="true">
    <meta property="twitter:card" content="summary" data-rh="true">
    <meta property="og:title" content="Ai-Mai-Mi Mousou Catastrophe | E3 - Ohne Titel" data-rh="true">
    <meta property="og:url" content="https://www.crunchyroll.com/de/watch/GR5VK12DR/untitled" data-rh="true">
    <meta property="og:description"
        content="Ponoka-senpai bietet demjenigen drei Millionen Yen an, der es schafft, die anderen zu töten. Schließlich wird ein Kampf ohne Regeln daraus und die Lage verschärft sich."
        data-rh="true">
    <meta property="og:locale" content="en_US" data-rh="true">
    <meta property="og:type" content="video.episode" data-rh="true">
    <meta property="og:image"
        content="https://imgsrv.crunchyroll.com/cdn-cgi/image/fit=contain,format=auto,quality=70,width=1200,height=675/catalog/crunchyroll/a8e35103b9309557a05c835c8839f0d9.jpg"
        data-rh="true">
    <meta property="og:image:width" content="1200" data-rh="true">
    <meta property="video:duration" content="210.269" data-rh="true">
    <meta property="video:release_date" content="2014-07-24T17:05:00.000Z" data-rh="true">
    <meta property="video:series" content="https://www.crunchyroll.com/de/series/GRP8DZ7GR/ai-mai-mi-mousou-catastrophe"
        data-rh="true">
    <meta name="description"
        content="Schau Ai-Mai-Mi Mousou Catastrophe Ohne Titel auf Crunchyroll. Ponoka-senpai bietet demjenigen drei Millionen Yen an, der es schafft, die anderen zu töten. Schließlich wird ein Kampf ohne Regeln daraus und die Lage verschärft sich."
        data-rh="true">
    <script type="application/ld+json"
        data-rh="true">{"@context":"https://schema.org","@type":"VideoObject","name":"Ohne Titel","description":"Ponoka-senpai bietet demjenigen drei Millionen Yen an, der es schafft, die anderen zu töten. Schließlich wird ein Kampf ohne Regeln daraus und die Lage verschärft sich.","thumbnailUrl":["https://imgsrv.crunchyroll.com/cdn-cgi/image/fit=contain,format=auto,quality=70,width=320,height=180/catalog/crunchyroll/a8e35103b9309557a05c835c8839f0d9.jpg"],"uploadDate":"2014-07-24T18:00:00Z","duration":"PT3M30.269000000000005S"}</script>
    <script type="application/ld+json"
        data-rh="true">{"@context":["https://schema.org",{"@language":"de"}],"@id":"https://www.crunchyroll.com/de/watch/GR5VK12DR/untitled","name":"Ai-Mai-Mi Mousou Catastrophe | E3 - Ohne Titel","@type":"TVEpisode","datePublished":"2014-07-24T17:05:00.000Z","url":"https://www.crunchyroll.com/de/watch/GR5VK12DR/untitled","thumbnailUrl":"https://imgsrv.crunchyroll.com/cdn-cgi/image/fit=contain,format=auto,quality=70,width=1200,height=675/catalog/crunchyroll/a8e35103b9309557a05c835c8839f0d9.jpg","image":"https://imgsrv.crunchyroll.com/cdn-cgi/image/fit=contain,format=auto,quality=70,width=1200,height=675/catalog/crunchyroll/a8e35103b9309557a05c835c8839f0d9.jpg","aggregateRating":{"@type":"AggregateRating","ratingValue":"3.2","ratingCount":183,"worstRating":1,"bestRating":5},"episodeNumber":3,"partOfSeason":{"@type":"TVSeason","@id":"https://www.crunchyroll.com/de/series/GRP8DZ7GR/ai-mai-mi-mousou-catastrophe","name":"Ai-Mai-Mi Mousou Catastrophe","seasonNumber":1},"partOfSeries":{"@type":"TVSeries","@id":"https://www.crunchyroll.com/de/series/GRP8DZ7GR/ai-mai-mi-mousou-catastrophe","name":"Ai-Mai-Mi Mousou Catastrophe"},"potentialAction":{"@type":"WatchAction","target":[{"url":"https://www.crunchyroll.com/de/watch/GR5VK12DR/untitled","actionPlatform":"https://schema.org/DesktopWebPlatform","inLanguage":"de"},{"url":"https://www.crunchyroll.com/de/watch/GR5VK12DR/untitled","actionPlatform":"http://schema.org/MobileWebPlatform","inLanguage":"de"}],"actionAccessibilityRequirement":{"@type":"ActionAccessSpecification","category":"nologinrequired","availabilityStarts":"2014-07-31T18:00:00Z","availabilityEnds":"2022-08-15T07:00:00Z"}}}</script>
    <script type="application/ld+json"
        data-rh="true">{"@context":"https://schema.org","@type":"BreadcrumbList","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https://www.crunchyroll.com/de/"},{"@type":"ListItem","position":2,"name":"Comedy","item":"https://www.crunchyroll.com/de/videos/comedy"},{"@type":"ListItem","position":3,"name":"Ai-Mai-Mi Mousou Catastrophe","item":"https://www.crunchyroll.com/de/series/GRP8DZ7GR/ai-mai-mi-mousou-catastrophe"}]}</script>
</head>

<body class="">
    <div id="content" class="erc-root-layout">
        <div>
            <div class="app-contents">
                <div class="app-layout--3GDnn">
                    <div class="app-layout__header--ywueY">
                        <div class="erc-large-header">
                            <div class="container--cq5XE container--has-no-gutters--WqnNJ header-content">
                                <div class="header-logo"><a aria-label="Crunchyroll-Logo" tabindex="0" href="/de/"
                                        class="erc-logo state-scalable"><svg class="logo-icon logo-scalable-horizontal"
                                            xmlns="http://www.w3.org/2000/svg" viewBox="0 0 303 52"
                                            data-t="crunchyroll-horizontal-svg"
                                            aria-labelledby="crunchyroll-horizontal-svg" aria-hidden="true" role="img">
                                            <path
                                                d="M62.1772 26.0647C62.1772 17.3803 69.1876 10.3699 77.872 10.3699C84.2042 10.3699 89.2693 13.8967 91.8466 19.0081L85.425 22.1742C84.0686 19.2794 81.3094 17.1091 77.872 17.1091C73.1676 17.1091 69.3233 20.9996 69.3233 26.0647C69.3233 31.1299 73.1676 35.0667 77.872 35.0667C81.3094 35.0667 84.0686 32.8963 85.425 30.0015L91.8466 33.1676C89.2693 38.279 84.2042 41.8058 77.872 41.8058C69.1876 41.8058 62.1772 34.7954 62.1772 26.0647Z M94.3376 18.7368H101.077V22.3992C102.298 20.0933 104.197 18.7368 106.506 18.7368H108.405V25.3865H106.188C102.976 25.3865 101.484 27.1499 101.484 30.2728V41.3526H94.3376V18.7368Z M110.754 31.6724V18.7368H117.9V31.6724C117.9 34.1603 119.484 35.6986 121.88 35.6986C124.275 35.6986 125.86 34.1603 125.86 31.6724V18.7368H133.006V31.6724C133.006 37.6871 128.301 41.8027 121.88 41.8027C115.458 41.8027 110.754 37.6871 110.754 31.6724Z M136.4 18.7368H143.41V21.4959C144.995 19.6863 147.208 18.5117 149.789 18.5117C155.307 18.5117 158.926 22.538 158.926 28.3275V41.3526H151.78V28.3275C151.78 25.9291 150.017 24.1195 147.665 24.1195C145.312 24.1195 143.549 25.9291 143.549 28.3275V41.3526H136.403V18.7368H136.4Z M178.691 32.1256L184.526 34.8848C182.671 38.9541 178.647 41.8058 173.761 41.8058C167.158 41.8058 161.864 36.5588 161.864 30.0447C161.864 23.5306 167.158 18.2836 173.761 18.2836C178.691 18.2836 182.717 21.1784 184.573 25.2478L178.694 28.0532C177.926 25.9723 176.024 24.5264 173.764 24.5264C170.78 24.5264 168.517 26.968 168.517 30.0447C168.517 33.1214 170.78 35.563 173.764 35.563C175.981 35.563 177.88 34.1603 178.694 32.1256H178.691Z M186.832 10.8231H193.978V21.4528C195.563 19.6432 197.733 18.5117 200.221 18.5117C205.739 18.5117 209.359 22.538 209.359 28.3275V41.3526H202.213V28.3275C202.213 25.9291 200.449 24.1195 198.097 24.1195C195.745 24.1195 193.981 25.9291 193.981 28.3275V41.3526H186.835V10.8231H186.832Z M222.337 32.215L227.131 18.7368H234.277L225.14 42.7091C223.241 47.6848 220.254 49.8089 215.188 49.8089H211.933V43.5661H215.188C217.134 43.5661 218.129 42.7522 218.672 41.3958L209.67 18.7368H217.312L222.334 32.215H222.337Z M236.087 18.7368H242.826V22.3992C244.047 20.0933 245.946 18.7368 248.255 18.7368H250.154V25.3865H247.938C244.725 25.3865 243.233 27.1499 243.233 30.2728V41.3526H236.087V18.7368Z M251.15 30.0447C251.15 23.5769 256.443 18.2836 263.136 18.2836C269.829 18.2836 275.122 23.5769 275.122 30.0447C275.122 36.5125 269.829 41.8058 263.136 41.8058C256.443 41.8058 251.15 36.5588 251.15 30.0447ZM257.8 30.0447C257.8 33.2108 260.152 35.563 263.136 35.563C266.12 35.563 268.472 33.2108 268.472 30.0447C268.472 26.8786 266.12 24.5264 263.136 24.5264C260.152 24.5264 257.8 26.8786 257.8 30.0447Z M286.427 41.3526C280.502 41.3526 278.06 38.7291 278.06 33.1214V10.8231H285.206V33.1214C285.206 34.3884 285.749 35.1129 287.016 35.1129H288.19V41.3557H286.427V41.3526Z M298.367 41.3526C292.442 41.3526 290 38.7291 290 33.1214V10.8231H297.146V33.1214C297.146 34.3884 297.689 35.1129 298.956 35.1129H300.13V41.3557H298.367V41.3526Z M7.81735 28.8732C7.82968 17.2231 17.2848 7.78652 28.9349 7.79885C40.0886 7.81118 49.2108 16.4771 49.9568 27.4366C49.9846 26.968 50 26.4963 50 26.0247C50.0123 12.7684 39.2809 2.01234 26.0247 2.00001C12.7684 1.98768 2.01234 12.7222 2.00001 25.9753C1.98768 39.2316 12.7222 49.9877 25.9753 50C26.5241 50 27.0667 49.9815 27.6062 49.9476C16.5542 49.2724 7.80502 40.0917 7.81735 28.8732Z M40.3846 29.1846C35.8559 29.1815 32.1873 25.5037 32.1935 20.9749C32.1965 17.4235 34.4594 14.4023 37.6193 13.2647C35.1191 11.9453 32.2705 11.1961 29.2432 11.1931C19.2948 11.1838 11.2208 19.2393 11.2116 29.1877C11.2023 39.136 19.2578 47.21 29.2062 47.2193C39.1545 47.2285 47.2285 39.173 47.2378 29.2216C47.2378 28.0933 47.136 26.9927 46.9387 25.9198C45.4405 27.9021 43.0636 29.1846 40.3846 29.1815V29.1846Z">
                                            </path>
                                        </svg><svg class="logo-icon logo-scalable-icon-only"
                                            xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48"
                                            data-t="crunchyroll-logo-only-svg"
                                            aria-labelledby="crunchyroll-logo-only-svg" aria-hidden="true" role="img">
                                            <path
                                                d="M5.818 26.871c.01-11.65 9.466-21.086 21.117-21.073 11.153.01 20.275 8.678 21.022 19.638.028-.467.043-.94.043-1.413C48.014 10.77 37.28.013 24.024 0 10.768-.014.014 10.721 0 23.976-.014 37.23 10.721 47.987 23.976 48c.548 0 1.092-.018 1.63-.054-11.051-.676-19.8-9.856-19.788-21.076Zm32.568.312a8.2 8.2 0 0 1-8.19-8.208 8.204 8.204 0 0 1 5.424-7.71 17.923 17.923 0 0 0-8.375-2.073c-9.95-.01-18.022 8.047-18.032 17.995-.01 9.95 8.047 18.022 17.995 18.033 9.948.01 18.022-8.047 18.032-17.997 0-1.127-.103-2.23-.301-3.301a8.187 8.187 0 0 1-6.554 3.261h.001Z">
                                            </path>
                                        </svg></a></div>
                                <div class="header-internal-links"><a tabindex="0"
                                        class="erc-header-tile erc-header-internal-links news-link"
                                        data-t="header-menu-new" href="/de/videos/new"><span
                                            class="text--gq6o- text--is-l--iccTo">Neu</span></a><a tabindex="0"
                                        class="erc-header-tile erc-header-internal-links" data-t="header-menu-popular"
                                        href="/de/videos/popular"><span
                                            class="text--gq6o- text--is-l--iccTo">Beliebt</span></a><a tabindex="0"
                                        class="erc-header-tile erc-header-internal-links simulcast-link"
                                        data-t="header-menu-simulcast" href="/de/simulcast"><span
                                            class="text--gq6o- text--is-l--iccTo">Simulcast</span></a></div>
                                <div class="header-menu">
                                    <div class="erc-menu">
                                        <div class="state-visible-on-desktop">
                                            <div role="button" tabindex="0"
                                                class="erc-header-tile state-dropdown menu-tile" aria-expanded="false"
                                                aria-haspopup="menu" aria-controls="browse-menu" data-t="menu-browse">
                                                <span class="text--gq6o- text--is-l--iccTo item-title">Kategorien</span>
                                                <div class="erc-header-svg menu-icon"><svg class="header-svg-icon"
                                                        xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
                                                        data-t="dropdown-svg" aria-labelledby="dropdown-svg"
                                                        aria-hidden="true" role="img">
                                                        <path d="M7 10h10l-5 5z"></path>
                                                    </svg></div>
                                            </div>
                                            <div class="browse-menu--71A2V erc-browse-menu-dropdown-old"
                                                data-t="browse-menu" id="browse-menu">
                                                <nav class="browse-menu__wrapper--Fm8TF">
                                                    <div class="browse-menu-list--QbB0d">
                                                        <ul class="browse-menu-list__wrapper--keqeR">
                                                            <li class="browse-menu-item--x3OpR menu-item-hidden-small-desktop"
                                                                data-t="browse-menu-item"><a
                                                                    class="browse-menu-item__link--JmxT8" tabindex="0"
                                                                    href="/de/videos/popular"><span
                                                                        class="text--gq6o- text--is-m--pqiL-">Beliebt</span></a>
                                                            </li>
                                                            <li class="browse-menu-item--x3OpR menu-item-hidden-large-desktop"
                                                                data-t="browse-menu-item"><a
                                                                    class="browse-menu-item__link--JmxT8" tabindex="0"
                                                                    href="/de/videos/new"><span
                                                                        class="text--gq6o- text--is-m--pqiL-">Neu</span></a>
                                                            </li>
                                                            <li class="browse-menu-item--x3OpR"
                                                                data-t="browse-menu-item"><a
                                                                    class="browse-menu-item__link--JmxT8" tabindex="0"
                                                                    href="/de/videos/alphabetical"><span
                                                                        class="text--gq6o- text--is-m--pqiL-">Stöbern
                                                                        (A-Z)</span></a></li>
                                                            <li class="browse-menu-item--x3OpR menu-item-hidden-large-desktop"
                                                                data-t="browse-menu-item"><a
                                                                    class="browse-menu-item__link--JmxT8" tabindex="0"
                                                                    href="/de/simulcasts/seasons/spring-2025"><span
                                                                        class="text--gq6o- text--is-m--pqiL-">Simulcast
                                                                        Season</span></a></li>
                                                            <li class="browse-menu-item--x3OpR"
                                                                data-t="browse-menu-item"><a tabindex="0"
                                                                    href="https://www.crunchyroll.com/simulcastcalendar"
                                                                    target="_self"
                                                                    class="browse-menu-item__link--JmxT8"><span
                                                                        class="text--gq6o- text--is-m--pqiL-">Release-Kalender</span></a>
                                                            </li>
                                                            <li class="browse-menu-item--x3OpR"
                                                                data-t="browse-menu-item"><a
                                                                    class="browse-menu-item__link--JmxT8" tabindex="0"
                                                                    href="/de/music"><span
                                                                        class="text--gq6o- text--is-m--pqiL-">Musikvideos
                                                                        &amp; Konzerte</span></a></li>
                                                        </ul>
                                                    </div>
                                                    <div class="browse-menu-section--Fq7Yv"><small
                                                            class="text--gq6o- text--is-semibold--AHOYN text--is-s--JP2oa browse-menu-section__title--ome9F">Genres</small>
                                                        <div class="browse-submenu-list--0Tx5R">
                                                            <li class="" data-t="browse-submenu-item">
                                                                <div class="text--gq6o- text--is-m--pqiL-"><a
                                                                        class="browse-submenu-item__link--SSQp9"
                                                                        tabindex="0" href="/de/videos/action">Action</a>
                                                                </div>
                                                            </li>
                                                            <li class="" data-t="browse-submenu-item">
                                                                <div class="text--gq6o- text--is-m--pqiL-"><a
                                                                        class="browse-submenu-item__link--SSQp9"
                                                                        tabindex="0"
                                                                        href="/de/videos/adventure">Adventure</a></div>
                                                            </li>
                                                            <li class="" data-t="browse-submenu-item">
                                                                <div class="text--gq6o- text--is-m--pqiL-"><a
                                                                        class="browse-submenu-item__link--SSQp9"
                                                                        tabindex="0" href="/de/videos/comedy">Comedy</a>
                                                                </div>
                                                            </li>
                                                            <li class="" data-t="browse-submenu-item">
                                                                <div class="text--gq6o- text--is-m--pqiL-"><a
                                                                        class="browse-submenu-item__link--SSQp9"
                                                                        tabindex="0" href="/de/videos/drama">Drama</a>
                                                                </div>
                                                            </li>
                                                            <li class="" data-t="browse-submenu-item">
                                                                <div class="text--gq6o- text--is-m--pqiL-"><a
                                                                        class="browse-submenu-item__link--SSQp9"
                                                                        tabindex="0"
                                                                        href="/de/videos/fantasy">Fantasy</a></div>
                                                            </li>
                                                            <li class="" data-t="browse-submenu-item">
                                                                <div class="text--gq6o- text--is-m--pqiL-"><a
                                                                        class="browse-submenu-item__link--SSQp9"
                                                                        tabindex="0" href="/de/videos/music">Musik</a>
                                                                </div>
                                                            </li>
                                                            <li class="" data-t="browse-submenu-item">
                                                                <div class="text--gq6o- text--is-m--pqiL-"><a
                                                                        class="browse-submenu-item__link--SSQp9"
                                                                        tabindex="0"
                                                                        href="/de/videos/romance">Romanze</a></div>
                                                            </li>
                                                            <li class="" data-t="browse-submenu-item">
                                                                <div class="text--gq6o- text--is-m--pqiL-"><a
                                                                        class="browse-submenu-item__link--SSQp9"
                                                                        tabindex="0" href="/de/videos/sci-fi">Science
                                                                        Fiction</a></div>
                                                            </li>
                                                            <li class="" data-t="browse-submenu-item">
                                                                <div class="text--gq6o- text--is-m--pqiL-"><a
                                                                        class="browse-submenu-item__link--SSQp9"
                                                                        tabindex="0" href="/de/videos/seinen">Seinen</a>
                                                                </div>
                                                            </li>
                                                            <li class="" data-t="browse-submenu-item">
                                                                <div class="text--gq6o- text--is-m--pqiL-"><a
                                                                        class="browse-submenu-item__link--SSQp9"
                                                                        tabindex="0" href="/de/videos/shojo">Shojo</a>
                                                                </div>
                                                            </li>
                                                            <li class="" data-t="browse-submenu-item">
                                                                <div class="text--gq6o- text--is-m--pqiL-"><a
                                                                        class="browse-submenu-item__link--SSQp9"
                                                                        tabindex="0" href="/de/videos/shonen">Shonen</a>
                                                                </div>
                                                            </li>
                                                            <li class="" data-t="browse-submenu-item">
                                                                <div class="text--gq6o- text--is-m--pqiL-"><a
                                                                        class="browse-submenu-item__link--SSQp9"
                                                                        tabindex="0"
                                                                        href="/de/videos/slice-of-life">Slice of
                                                                        Life</a></div>
                                                            </li>
                                                            <li class="" data-t="browse-submenu-item">
                                                                <div class="text--gq6o- text--is-m--pqiL-"><a
                                                                        class="browse-submenu-item__link--SSQp9"
                                                                        tabindex="0" href="/de/videos/sports">Sport</a>
                                                                </div>
                                                            </li>
                                                            <li class="" data-t="browse-submenu-item">
                                                                <div class="text--gq6o- text--is-m--pqiL-"><a
                                                                        class="browse-submenu-item__link--SSQp9"
                                                                        tabindex="0"
                                                                        href="/de/videos/supernatural">Supernatural</a>
                                                                </div>
                                                            </li>
                                                            <li class="" data-t="browse-submenu-item">
                                                                <div class="text--gq6o- text--is-m--pqiL-"><a
                                                                        class="browse-submenu-item__link--SSQp9"
                                                                        tabindex="0"
                                                                        href="/de/videos/thriller">Thriller</a></div>
                                                            </li>
                                                        </div>
                                                    </div>
                                                </nav>
                                            </div>
                                        </div>
                                        <div class="state-visible-on-mobile">
                                            <div role="button" tabindex="0"
                                                class="erc-header-tile state-icon-only menu-tile" aria-expanded="false"
                                                aria-haspopup="menu" aria-controls="vertical-menu" data-t="header-tile">
                                                <div class="erc-header-svg"><svg
                                                        class="menu-ab-svg--wDGx3 header-svg-icon"
                                                        xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
                                                        data-t="menu-svg" aria-labelledby="menu-svg" aria-hidden="true"
                                                        role="img">
                                                        <path class="menu-ab-svg__top--Xgjtj" d="M20 5H4V7H20V5Z">
                                                        </path>
                                                        <path class="menu-ab-svg__middle--vsB5D" d="M4 11H20V13H4V11Z">
                                                        </path>
                                                        <path class="menu-ab-svg__bottom--6yklx" d="M20 17H4V19H20V17Z">
                                                        </path>
                                                    </svg></div>
                                            </div>
                                            <div class="vertical-menu-dropdown--xFN3x erc-vertical-menu-dropdown-old"
                                                data-t="vertical-menu" id="vertical-menu">
                                                <div class="vertical-menu-dropdown__dropdown-fader--abVP1"></div>
                                                <div class="vertical-menu-dropdown__dropdown-content--vbGzi">
                                                    <nav>
                                                        <div class="menu-section--4MXZF">
                                                            <ul>
                                                                <li class="menu-item--OhDG8 state-hidden-tablet"
                                                                    data-t="item"><a class="menu-item__link--qKzk6"
                                                                        tabindex="0" href="/de/videos/new"><span
                                                                            class="text--gq6o- text--is-fixed-size--5i4oU text--is-l--iccTo">Neu</span></a>
                                                                </li>
                                                                <li class="menu-item--OhDG8 state-hidden-tablet"
                                                                    data-t="item"><a class="menu-item__link--qKzk6"
                                                                        tabindex="0" href="/de/videos/popular"><span
                                                                            class="text--gq6o- text--is-fixed-size--5i4oU text--is-l--iccTo">Beliebt</span></a>
                                                                </li>
                                                                <li class="menu-item--OhDG8" data-t="item"><a
                                                                        class="menu-item__link--qKzk6" tabindex="0"
                                                                        href="/de/videos/alphabetical"><span
                                                                            class="text--gq6o- text--is-fixed-size--5i4oU text--is-l--iccTo">Stöbern
                                                                            (A-Z)</span></a></li>
                                                                <li class="menu-item--OhDG8 state-hidden-tablet"
                                                                    data-t="item"><a class="menu-item__link--qKzk6"
                                                                        tabindex="0"
                                                                        href="/de/simulcasts/seasons/spring-2025"><span
                                                                            class="text--gq6o- text--is-fixed-size--5i4oU text--is-l--iccTo">Simulcast
                                                                            Season</span></a></li>
                                                                <li class="menu-item--OhDG8" data-t="item"><a
                                                                        tabindex="0"
                                                                        href="https://www.crunchyroll.com/simulcastcalendar"
                                                                        target="_self"
                                                                        class="menu-item__link--qKzk6"><span
                                                                            class="text--gq6o- text--is-fixed-size--5i4oU text--is-l--iccTo">Release-Kalender</span></a>
                                                                </li>
                                                                <li data-t="expandable-item">
                                                                    <div role="button" tabindex="0"
                                                                        class="submenu-expandable-item--YU7Ic"><span
                                                                            class="text--gq6o- text--is-fixed-size--5i4oU text--is-l--iccTo">Kategorien</span><span
                                                                            class="submenu-expandable-item__icon--4-kMr"><svg
                                                                                class="angle--pJ1yZ angle--is-bottom--RZzvm"
                                                                                xmlns="http://www.w3.org/2000/svg"
                                                                                viewBox="0 0 24 24"
                                                                                data-t="angle-bottom-svg"
                                                                                aria-labelledby="angle-svg"
                                                                                aria-hidden="true" role="img">
                                                                                <path
                                                                                    d="M8.6 7.4L10 6l6 6-6 6-1.4-1.4 4.6-4.6z">
                                                                                </path>
                                                                            </svg></span></div>
                                                                    <ul class="submenu-dropdown-list--jOQVI">
                                                                        <li data-t="item"><a
                                                                                class="submenu-item__title--xKnc7"
                                                                                tabindex="0" href="/de/videos/action">
                                                                                <h5
                                                                                    class="text--gq6o- text--is-m--pqiL-">
                                                                                    Action</h5>
                                                                            </a></li>
                                                                        <li data-t="item"><a
                                                                                class="submenu-item__title--xKnc7"
                                                                                tabindex="0"
                                                                                href="/de/videos/adventure">
                                                                                <h5
                                                                                    class="text--gq6o- text--is-m--pqiL-">
                                                                                    Adventure</h5>
                                                                            </a></li>
                                                                        <li data-t="item"><a
                                                                                class="submenu-item__title--xKnc7"
                                                                                tabindex="0" href="/de/videos/comedy">
                                                                                <h5
                                                                                    class="text--gq6o- text--is-m--pqiL-">
                                                                                    Comedy</h5>
                                                                            </a></li>
                                                                        <li data-t="item"><a
                                                                                class="submenu-item__title--xKnc7"
                                                                                tabindex="0" href="/de/videos/drama">
                                                                                <h5
                                                                                    class="text--gq6o- text--is-m--pqiL-">
                                                                                    Drama</h5>
                                                                            </a></li>
                                                                        <li data-t="item"><a
                                                                                class="submenu-item__title--xKnc7"
                                                                                tabindex="0" href="/de/videos/fantasy">
                                                                                <h5
                                                                                    class="text--gq6o- text--is-m--pqiL-">
                                                                                    Fantasy</h5>
                                                                            </a></li>
                                                                        <li data-t="item"><a
                                                                                class="submenu-item__title--xKnc7"
                                                                                tabindex="0" href="/de/videos/music">
                                                                                <h5
                                                                                    class="text--gq6o- text--is-m--pqiL-">
                                                                                    Musik</h5>
                                                                            </a></li>
                                                                        <li data-t="item"><a
                                                                                class="submenu-item__title--xKnc7"
                                                                                tabindex="0" href="/de/videos/romance">
                                                                                <h5
                                                                                    class="text--gq6o- text--is-m--pqiL-">
                                                                                    Romanze</h5>
                                                                            </a></li>
                                                                        <li data-t="item"><a
                                                                                class="submenu-item__title--xKnc7"
                                                                                tabindex="0" href="/de/videos/sci-fi">
                                                                                <h5
                                                                                    class="text--gq6o- text--is-m--pqiL-">
                                                                                    Science Fiction</h5>
                                                                            </a></li>
                                                                        <li data-t="item"><a
                                                                                class="submenu-item__title--xKnc7"
                                                                                tabindex="0" href="/de/videos/seinen">
                                                                                <h5
                                                                                    class="text--gq6o- text--is-m--pqiL-">
                                                                                    Seinen</h5>
                                                                            </a></li>
                                                                        <li data-t="item"><a
                                                                                class="submenu-item__title--xKnc7"
                                                                                tabindex="0" href="/de/videos/shojo">
                                                                                <h5
                                                                                    class="text--gq6o- text--is-m--pqiL-">
                                                                                    Shojo</h5>
                                                                            </a></li>
                                                                        <li data-t="item"><a
                                                                                class="submenu-item__title--xKnc7"
                                                                                tabindex="0" href="/de/videos/shonen">
                                                                                <h5
                                                                                    class="text--gq6o- text--is-m--pqiL-">
                                                                                    Shonen</h5>
                                                                            </a></li>
                                                                        <li data-t="item"><a
                                                                                class="submenu-item__title--xKnc7"
                                                                                tabindex="0"
                                                                                href="/de/videos/slice-of-life">
                                                                                <h5
                                                                                    class="text--gq6o- text--is-m--pqiL-">
                                                                                    Slice of Life</h5>
                                                                            </a></li>
                                                                        <li data-t="item"><a
                                                                                class="submenu-item__title--xKnc7"
                                                                                tabindex="0" href="/de/videos/sports">
                                                                                <h5
                                                                                    class="text--gq6o- text--is-m--pqiL-">
                                                                                    Sport</h5>
                                                                            </a></li>
                                                                        <li data-t="item"><a
                                                                                class="submenu-item__title--xKnc7"
                                                                                tabindex="0"
                                                                                href="/de/videos/supernatural">
                                                                                <h5
                                                                                    class="text--gq6o- text--is-m--pqiL-">
                                                                                    Supernatural</h5>
                                                                            </a></li>
                                                                        <li data-t="item"><a
                                                                                class="submenu-item__title--xKnc7"
                                                                                tabindex="0" href="/de/videos/thriller">
                                                                                <h5
                                                                                    class="text--gq6o- text--is-m--pqiL-">
                                                                                    Thriller</h5>
                                                                            </a></li>
                                                                    </ul>
                                                                </li>
                                                            </ul>
                                                        </div>
                                                        <div class="menu-section--4MXZF">
                                                            <ul>
                                                                <li class="menu-item--OhDG8 erc-vertical-menu-store-link"
                                                                    data-t="external-item"><a tabindex="0"
                                                                        href="https://store.crunchyroll.com/eu/?utm_source=web"
                                                                        target="_blank" rel="noopener noreferrer"
                                                                        class="menu-item__link--qKzk6"><span
                                                                            class="text--gq6o- text--is-fixed-size--5i4oU text--is-l--iccTo">Store</span></a>
                                                                </li>
                                                                <li data-t="expandable-item">
                                                                    <div role="button" tabindex="0"
                                                                        class="submenu-expandable-item--YU7Ic"><span
                                                                            class="text--gq6o- text--is-fixed-size--5i4oU text--is-l--iccTo">News</span><span
                                                                            class="submenu-expandable-item__icon--4-kMr"><svg
                                                                                class="angle--pJ1yZ angle--is-bottom--RZzvm"
                                                                                xmlns="http://www.w3.org/2000/svg"
                                                                                viewBox="0 0 24 24"
                                                                                data-t="angle-bottom-svg"
                                                                                aria-labelledby="angle-svg"
                                                                                aria-hidden="true" role="img">
                                                                                <path
                                                                                    d="M8.6 7.4L10 6l6 6-6 6-1.4-1.4 4.6-4.6z">
                                                                                </path>
                                                                            </svg></span></div>
                                                                    <ul class="submenu-dropdown-list--jOQVI">
                                                                        <li data-t="item"><a tabindex="0"
                                                                                href="https://www.crunchyroll.com/news"
                                                                                target="_self"
                                                                                class="submenu-item__title--xKnc7">
                                                                                <h5
                                                                                    class="text--gq6o- text--is-m--pqiL-">
                                                                                    Alle News</h5>
                                                                            </a></li>
                                                                        <li data-t="item"><a tabindex="0"
                                                                                href="https://www.crunchyroll.com/de/animeawards/index.html"
                                                                                target="_self"
                                                                                class="submenu-item__title--xKnc7">
                                                                                <h5
                                                                                    class="text--gq6o- text--is-m--pqiL-">
                                                                                    Anime Awards</h5>
                                                                            </a></li>
                                                                        <li data-t="item"><a tabindex="0"
                                                                                href="https://www.crunchyrollexpo.com"
                                                                                target="_self"
                                                                                class="submenu-item__title--xKnc7">
                                                                                <h5
                                                                                    class="text--gq6o- text--is-m--pqiL-">
                                                                                    Events &amp; Erlebnisse</h5>
                                                                            </a></li>
                                                                    </ul>
                                                                </li>
                                                                <li class="menu-item--OhDG8" data-t="external-item"><a
                                                                        tabindex="0"
                                                                        href="https://www.crunchyroll.com/games/index.html"
                                                                        target="_blank" rel="noopener noreferrer"
                                                                        class="menu-item__link--qKzk6"><span
                                                                            class="text--gq6o- text--is-fixed-size--5i4oU text--is-l--iccTo">Games</span></a>
                                                                </li>
                                                                <li class="menu-item--OhDG8" data-t="item"><a
                                                                        class="menu-item__link--qKzk6" tabindex="0"
                                                                        href="/de/music"><span
                                                                            class="text--gq6o- text--is-fixed-size--5i4oU text--is-l--iccTo">Musikvideos
                                                                            &amp; Konzerte</span></a></li>
                                                            </ul>
                                                        </div>
                                                    </nav>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="header-external-links"><a aria-label="Games - in neuem Tab öffnen"
                                        tabindex="0" class="erc-header-tile"
                                        href="https://www.crunchyroll.com/games/index.html" target="_blank"
                                        data-t="header-menu-games"><span
                                            class="text--gq6o- text--is-l--iccTo">Games</span></a><a
                                        aria-label="Store - in neuem Tab öffnen" tabindex="0"
                                        class="erc-header-tile erc-header-store-link"
                                        href="https://store.crunchyroll.com/eu/?utm_source=web" target="_blank"
                                        data-t="header-menu-store"><span
                                            class="text--gq6o- text--is-l--iccTo link-text">Store</span></a>
                                    <div class="erc-news-menu">
                                        <div role="button" tabindex="0" class="erc-header-tile news-menu-tile"
                                            aria-expanded="false" aria-haspopup="menu" aria-controls="news-menu"
                                            data-t="header-menu-news"><span
                                                class="text--gq6o- text--is-l--iccTo news-item-title">News</span>
                                            <div class="erc-header-svg news-menu-icon"><svg class="header-svg-icon"
                                                    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
                                                    data-t="dropdown-svg" aria-labelledby="dropdown-svg"
                                                    aria-hidden="true" role="img">
                                                    <path d="M7 10h10l-5 5z"></path>
                                                </svg></div>
                                        </div>
                                        <div class="erc-news-menu-dropdown" id="news-menu">
                                            <nav class="news-menu-wrapper">
                                                <div class="news-menu-section">
                                                    <ul>
                                                        <li class="news-menu-item" data-t="news-dropdown-item"><a
                                                                tabindex="0" class="erc-menu-item-title"
                                                                href="https://www.crunchyroll.com/news"
                                                                target="_self"><span
                                                                    class="text--gq6o- text--is-m--pqiL-">Alle
                                                                    News</span></a></li>
                                                        <li class="news-menu-item" data-t="news-dropdown-item"><a
                                                                tabindex="0" class="erc-menu-item-title"
                                                                href="https://www.crunchyroll.com/de/animeawards/index.html"
                                                                target="_self"><span
                                                                    class="text--gq6o- text--is-m--pqiL-">Anime
                                                                    Awards</span></a></li>
                                                        <li class="news-menu-item" data-t="news-dropdown-item"><a
                                                                tabindex="0" class="erc-menu-item-title"
                                                                href="https://www.crunchyrollexpo.com"
                                                                target="_self"><span
                                                                    class="text--gq6o- text--is-m--pqiL-">Events &amp;
                                                                    Erlebnisse</span></a></li>
                                                    </ul>
                                                </div>
                                            </nav>
                                        </div>
                                    </div>
                                </div>
                                <div class="header-actions">
                                    <div class="nav-horizontal-layout__action-item--KZBne">
                                        <div class="upsell-popup--2jfqM" data-t="upsell-popup" id="upsell-popup"><a
                                                aria-label="Hol dir kostenlos Premium " tabindex="0"
                                                class="erc-header-tile state-icon-only erc-header-free-trial-tile-old"
                                                href="https://www.crunchyroll.com/premium?referrer=newweb_organic_header&amp;return_url=https%3A%2F%2Fwww.crunchyroll.com%2Fde%2Fwatch%2FGR5VK12DR%2Funtitled#plans"
                                                aria-controls="upsell-popup" data-t="header-tile">
                                                <div class="erc-header-svg premium-icon"><svg
                                                        class="premium-filled-icon--iMcjr header-svg-icon"
                                                        xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
                                                        data-t="premium-filled-svg" aria-labelledby="premium-filled-svg"
                                                        aria-hidden="true" role="img">
                                                        <path fill-rule="evenodd" clip-rule="evenodd"
                                                            d="M2 8L8 9L12 3L16 9L22 8L18 19H6L2 8Z"></path>
                                                    </svg></div>
                                                <div class="text-wrapper"><span
                                                        class="text--gq6o- text--is-semibold--AHOYN text--is-xs--5PTBo first-row">Kostenlos
                                                        testen</span><span
                                                        class="text--gq6o- text--is-semibold--AHOYN text--is-xs--5PTBo second-row">Premium</span>
                                                </div>
                                            </a>
                                            <div class="upsell-popup__body--plD5e"><a tabindex="0"
                                                    href="https://www.crunchyroll.com/premium?referrer=newweb_header_modal&amp;return_url=https%3A%2F%2Fwww.crunchyroll.com%2Fde%2Fwatch%2FGR5VK12DR%2Funtitled#plans"
                                                    class="upsell-popup__content-wrapper--GcfqM">
                                                    <div class="upsell-popup-background--vNLNW background">
                                                        <div class="upsell-popup-background__background-inner--PX762">
                                                            <svg class="upsell-popup-background__left-up-stars--Yo7QK"
                                                                viewBox="0 0 50 36" aria-hidden="true"
                                                                xmlns="http://www.w3.org/2000/svg">
                                                                <g transform="translate(2 -7)" fill="none"
                                                                    fill-rule="evenodd">
                                                                    <path stroke="#FAB818" stroke-width="2"
                                                                        d="m15.225 33.094.214 1.078-.744.833 1.083-.215.853.733-.237-1.068.73-.855-1.068.24z">
                                                                    </path>
                                                                    <path stroke="#FFF" stroke-width="2"
                                                                        d="m6.602 16.97.24 1.124-.837.868 1.218-.224.96.764-.267-1.113.822-.891-1.202.25z">
                                                                    </path>
                                                                    <path stroke="#FAB818" stroke-width="2.4"
                                                                        d="m36.534 15.907.088 1.565-1.215 1.028 1.57-.09 1.059 1.205-.123-1.554 1.201-1.063-1.555.127z">
                                                                    </path>
                                                                </g>
                                                            </svg><svg
                                                                class="upsell-popup-background__right-up-star--7-A8B"
                                                                viewBox="0 0 17 16" xmlns="http://www.w3.org/2000/svg"
                                                                aria-hidden="true">
                                                                <g transform="translate(-276 -10)" stroke="#FAB818"
                                                                    stroke-width="2" fill="none" fill-rule="evenodd">
                                                                    <path
                                                                        d="m284.748 17.598.078.375-.273.28.396-.062.313.265-.087-.373.268-.287-.391.07z">
                                                                    </path>
                                                                </g>
                                                            </svg><svg
                                                                class="upsell-popup-background__right-bottom-lines-star--VSiM7"
                                                                viewBox="0 0 75 79" xmlns="http://www.w3.org/2000/svg"
                                                                aria-hidden="true">
                                                                <g transform="translate(-290 -89)" fill="none"
                                                                    fill-rule="evenodd">
                                                                    <path stroke="#FFC94D" stroke-width="1.68"
                                                                        opacity=".688"
                                                                        d="m343.9 145.118.037.41-.31.28.412-.038.289.306-.047-.406.305-.29-.406.048z">
                                                                    </path>
                                                                    <path stroke="#FAB818" opacity=".4"
                                                                        d="m365.957 85.043-52.5 82.059M361.457 173.102l-66-41.03">
                                                                    </path>
                                                                </g>
                                                            </svg><svg
                                                                class="upsell-popup-background__left-bottom-lines--Kdac1"
                                                                viewBox="0 0 70 63" xmlns="http://www.w3.org/2000/svg"
                                                                aria-hidden="true">
                                                                <g transform="translate(5 -105)" stroke="#FAB818"
                                                                    fill="none" fill-rule="evenodd" opacity=".4">
                                                                    <path
                                                                        d="M-43 73 93.876 192.954M-35.5 158.5l93.301-21.628">
                                                                    </path>
                                                                </g>
                                                            </svg></div>
                                                    </div>
                                                    <div class="upsell-popup__content--mDfJ4">
                                                        <h3
                                                            class="heading--nKNOf heading--is-xxs--1CKSn heading--is-family-type-one--GqBzU upsell-popup__title--Plp7P">
                                                            <svg class="premium-icon--V9L7x upsell-popup__title-icon--L9GBo"
                                                                xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
                                                                data-t="premium-svg" aria-labelledby="premium-svg"
                                                                aria-hidden="true" role="img">
                                                                <path
                                                                    d="M18.188 17l1.667-5.606-4.26 1.864L12 7.688l-3.596 5.57-4.259-1.864L5.812 17h12.376zm-14.08 1.285L1.614 9.9a1 1 0 0 1 1.36-1.2l4.673 2.045 3.512-5.442a1 1 0 0 1 1.68 0l3.514 5.442 4.674-2.046a1 1 0 0 1 1.36 1.201l-2.494 8.386a1 1 0 0 1-.959.715H5.067a1 1 0 0 1-.959-.715z">
                                                                </path>
                                                            </svg>7-tägiges Probeabonnement</h3>
                                                        <p
                                                            class="text--gq6o- text--is-semibold--AHOYN text--is-m--pqiL-">
                                                            Eine Premium-Mitgliedschaft ermöglicht unbegrenzten Zugang
                                                            zu Anime, ohne Werbung und bereits kurz nach Premiere in
                                                            Japan. Probiere es gleich aus!</p>
                                                    </div>
                                                </a></div>
                                        </div>
                                    </div>
                                    <div class="nav-horizontal-layout__action-item--KZBne"><a aria-label="Suchen"
                                            tabindex="0"
                                            class="erc-header-tile state-icon-only erc-search-header-button-old"
                                            data-t="header-tile" href="/de/search">
                                            <div class="erc-header-svg"><svg class="header-svg-icon"
                                                    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
                                                    data-t="search-svg" aria-labelledby="search-svg" aria-hidden="true"
                                                    role="img">
                                                    <path fill-rule="evenodd" clip-rule="evenodd"
                                                        d="M10.5 19C12.4879 19 14.3164 18.3176 15.7641 17.1742L21.2927 22.7069L22.7074 21.2931L17.1778 15.7595C18.319 14.3126 19 12.4858 19 10.5C19 5.80558 15.1944 2 10.5 2C5.80558 2 2 5.80558 2 10.5C2 15.1944 5.80558 19 10.5 19ZM10.5 17C14.0899 17 17 14.0899 17 10.5C17 6.91015 14.0899 4 10.5 4C6.91015 4 4 6.91015 4 10.5C4 14.0899 6.91015 17 10.5 17Z">
                                                    </path>
                                                </svg></div>
                                        </a></div>
                                    <div
                                        class="nav-horizontal-layout__action-item--KZBne nav-horizontal-layout__action-item--is-mobile-hidden--NNQTk">
                                        <a aria-label="Watchlist" tabindex="0"
                                            class="erc-header-tile state-icon-only erc-watchlist-header-button-old"
                                            data-t="header-tile" href="/de/watchlist">
                                            <div class="erc-header-svg"><svg class="header-svg-icon"
                                                    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
                                                    data-t="watchlist-svg" aria-labelledby="watchlist-svg"
                                                    aria-hidden="true" role="img">
                                                    <path fill-rule="evenodd" clip-rule="evenodd"
                                                        d="M19.0001 20.5858C19.0001 21.4767 17.9229 21.9229 17.293 21.2929L12.0001 16L6.7071 21.2929C6.07714 21.9229 5 21.4767 5 20.5858L5.00006 3H19.0001V20.5858ZM7.00001 18.1716L7.00006 5H17.0001V18.1716L12.0001 13.1716L7.00001 18.1716Z">
                                                    </path>
                                                </svg></div>
                                        </a></div>
                                    <div class="nav-horizontal-layout__action-item--KZBne">
                                        <div class="erc-anonymous-user-menu-old">
                                            <div role="button" aria-label="Nutzermenü" tabindex="0"
                                                class="erc-header-tile state-icon-only" aria-expanded="false"
                                                aria-haspopup="menu" aria-controls="user-menu-anonymous"
                                                data-t="header-tile">
                                                <div class="erc-header-svg"><svg class="header-svg-icon"
                                                        xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
                                                        data-t="user-settings-svg" aria-labelledby="user-settings-svg"
                                                        aria-hidden="true" role="img">
                                                        <path
                                                            d="M12 20a6.01 6.01 0 0 1-5.966-5.355L12 12.088l5.966 2.557A6.01 6.01 0 0 1 12 20m0-16c1.654 0 3 1.346 3 3s-1.345 3-2.999 3h-.002A3.003 3.003 0 0 1 9 7c0-1.654 1.346-3 3-3m7.394 9.081l-4.572-1.959A4.997 4.997 0 0 0 17 7c0-2.757-2.243-5-5-5S7 4.243 7 7c0 1.71.865 3.22 2.178 4.122l-4.572 1.959A.999.999 0 0 0 4 14c0 4.411 3.589 8 8 8s8-3.589 8-8c0-.4-.238-.762-.606-.919">
                                                        </path>
                                                    </svg></div>
                                            </div>
                                            <div class="user-menu--ZzPZG" id="user-menu-anonymous">
                                                <div class="user-menu__scrollable--KuZhi">
                                                    <div class="user-menu-section--9hBdl"><a tabindex="0"
                                                            href="https://sso.crunchyroll.com/authorize?prompt=register&amp;client_id=noaihdevm_6iyg0a8l0q&amp;redirect_uri=https%3A%2F%2Fwww.crunchyroll.com%2Fcallback&amp;response_type=cookie&amp;state=%2Fwatch%2FGR5VK12DR%2Funtitled"
                                                            class="user-menu-nav-item---CLa2" data-t="signup-link">
                                                            <div class="user-menu-nav-item__item-info--QO7p2">
                                                                <p
                                                                    class="text--gq6o- text--is-fixed-size--5i4oU text--is-l--iccTo">
                                                                    Konto erstellen</p>
                                                                <div
                                                                    class="user-menu-nav-item__item-description--xlQwi">
                                                                    <p
                                                                        class="text--gq6o- text--is-m--pqiL- user-menu-nav-item__description-text--FcBCl">
                                                                        Werde ein kostenloses Mitglied oder
                                                                        Premium-Mitglied.</p>
                                                                </div>
                                                            </div>
                                                        </a><a tabindex="0"
                                                            href="https://sso.crunchyroll.com/authorize?client_id=noaihdevm_6iyg0a8l0q&amp;redirect_uri=https%3A%2F%2Fwww.crunchyroll.com%2Fcallback&amp;response_type=cookie&amp;state=%2Fwatch%2FGR5VK12DR%2Funtitled"
                                                            class="user-menu-nav-item---CLa2" data-t="signin-link">
                                                            <div class="user-menu-nav-item__item-info--QO7p2">
                                                                <p
                                                                    class="text--gq6o- text--is-fixed-size--5i4oU text--is-l--iccTo">
                                                                    Einloggen</p>
                                                                <div
                                                                    class="user-menu-nav-item__item-description--xlQwi">
                                                                    <p
                                                                        class="text--gq6o- text--is-m--pqiL- user-menu-nav-item__description-text--FcBCl">
                                                                        Bist du bereits ein Crunchyroll-Mitglied?
                                                                        Willkommen zurück.</p>
                                                                </div>
                                                            </div>
                                                        </a><a class="user-menu-nav-item---CLa2" tabindex="0"
                                                            data-t="gift-card-link" href="/de/redeem">
                                                            <div class="user-menu-nav-item__item-info--QO7p2">
                                                                <p
                                                                    class="text--gq6o- text--is-fixed-size--5i4oU text--is-l--iccTo">
                                                                    Guthabenkarte</p>
                                                                <div
                                                                    class="user-menu-nav-item__item-description--xlQwi">
                                                                    <p
                                                                        class="text--gq6o- text--is-m--pqiL- user-menu-nav-item__description-text--FcBCl">
                                                                        Hast du eine Guthabenkarte? Hier kannst du sie
                                                                        einlösen.</p>
                                                                </div>
                                                            </div>
                                                        </a></div>
                                                    <div class="user-menu-section--9hBdl">
                                                        <div
                                                            class="user-menu-upsell-button--1M5Bs user-menu-upsell-button--has-no-block-gutters--CHRE5">
                                                            <div class=""><a tabindex="0"
                                                                    class="button--xqVd0 button--is-type-five--qz0dA button--is-wide--myDDw"
                                                                    data-t="upsell-btn"
                                                                    href="https://www.crunchyroll.com/premium?referrer=newweb_organic_acct_menu&amp;return_url=https%3A%2F%2Fwww.crunchyroll.com%2Fde%2Fwatch%2FGR5VK12DR%2Funtitled#plans"><span
                                                                        class="call-to-action--PEidl call-to-action--is-m--RVdkI button__cta--LOqDH"><svg
                                                                            class="premium-icon--V9L7x"
                                                                            xmlns="http://www.w3.org/2000/svg"
                                                                            viewBox="0 0 24 24" data-t="premium-svg"
                                                                            aria-labelledby="premium-svg"
                                                                            aria-hidden="true" role="img">
                                                                            <path
                                                                                d="M18.188 17l1.667-5.606-4.26 1.864L12 7.688l-3.596 5.57-4.259-1.864L5.812 17h12.376zm-14.08 1.285L1.614 9.9a1 1 0 0 1 1.36-1.2l4.673 2.045 3.512-5.442a1 1 0 0 1 1.68 0l3.514 5.442 4.674-2.046a1 1 0 0 1 1.36 1.201l-2.494 8.386a1 1 0 0 1-.959.715H5.067a1 1 0 0 1-.959-.715z">
                                                                            </path>
                                                                        </svg>7-tägiges Probeabonnement</span></a></div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <aside class="app-layout__aside--IG1cw"></aside>
                    <div class="app-layout__content--dvZfJ">
                        <div class="app-layout__overlay--HKKQN"></div>
                        <div class="page-wrapper--5HUY2 erc-watch-episode">
                            <div class="erc-watch-episode-layout">
                                <div class="video-player-wrapper">
                                    <div class="video-player-spacer"></div>
                                    <div class="erc-blocked-stream video-player">
                                        <div class="blocked-stream-overlay">
                                            <div class="content-image--3na7E undefined blocked-stream-img">
                                                <figure class="content-image__figure--7vume">
                                                    <div class="progressive-image-loading--rwH3R">
                                                        <picture><img
                                                                class="progressive-image-base__fade--Nrn20 progressive-image-base__fade--is-ready--dMxKu content-image__image--7tGlg progressive-image-loading__preview--eYvnH progressive-image-loading__preview--is-hidden--RLDT9"
                                                                loading="eager"
                                                                src="https://imgsrv.crunchyroll.com/cdn-cgi/image/fit=contain,format=auto,quality=70,width=1200,height=675,blur=30/catalog/crunchyroll/a8e35103b9309557a05c835c8839f0d9.jpg"
                                                                alt="" data-t="preview-image"></picture>
                                                        <picture><img
                                                                class="content-image__image--7tGlg progressive-image-loading__original--k-k-7"
                                                                loading="eager"
                                                                src="https://imgsrv.crunchyroll.com/cdn-cgi/image/fit=contain,format=auto,quality=70,width=1200,height=675/catalog/crunchyroll/a8e35103b9309557a05c835c8839f0d9.jpg"
                                                                alt="Eingeschränkter Stream" data-t="original-image">
                                                        </picture>
                                                    </div>
                                                </figure>
                                            </div><span class="stream-overlay-dark"></span>
                                            <div class="blocked-container"></div>
                                        </div>
                                    </div>
                                    <div class="erc-player-anonymous-consent">
                                        <div class="player-anonymous-consent-content-wrapper">
                                            <div class="player-anonymous-consent-content">
                                                <h1
                                                    class="heading--nKNOf heading--is-s--x1e6g heading--is-family-type-one--GqBzU player-anonymous-consent-title">
                                                    Wir haben unsere Nutzungsbedingungen aktualisiert</h1>
                                                <p class="text--gq6o- text--is-xl---ywR- player-anonymous-consent-description"
                                                    id="updated-terms-consent">Wir haben unsere <a tabindex="1"
                                                        class="player-anonymous-consent-link"
                                                        href="https://www.crunchyroll.com/de/tos" target="_blank"
                                                        data-t="customer-support-link">Nutzungsbedingungen</a> für die
                                                    Nutzung von Crunchyroll aktualisiert. Bitte überprüfe unsere
                                                    aktualisierten Bedingungen. Durch den Klick auf "Weiter" stimmst du
                                                    den aktualisierten Bedingungen zu.</p><button tabindex="1"
                                                    class="button--xqVd0 button--is-type-eight--JgoJ6"
                                                    data-t="grant-player-anonymous-consent-btn"
                                                    aria-labelledby="updated-terms-consent"><span
                                                        class="call-to-action--PEidl call-to-action--is-m--RVdkI button__cta--LOqDH">Weiter</span></button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="banner-wrapper">
                                    <div class="content-wrapper--MF5LS"></div>
                                </div>
                                <div class="content-wrapper--MF5LS">
                                    <div class="body-wrapper">
                                        <div class="current-media-wrapper">
                                            <div class="erc-current-media-info">
                                                <div class="ls-info-container"></div>
                                                <div class="current-media-header">
                                                    <div class="current-media-parent-ref"><a tabindex="0"
                                                            data-t="show-title-link" class="show-title-link"
                                                            href="/de/series/GRP8DZ7GR/ai-mai-mi-mousou-catastrophe">
                                                            <h4
                                                                class="text--gq6o- text--is-fixed-size--5i4oU text--is-semibold--AHOYN text--is-l--iccTo">
                                                                Ai-Mai-Mi Mousou Catastrophe</h4>
                                                        </a>
                                                        <div class="current-media-ratings">
                                                            <div class="star-rating-short--a-zf4 star-rating-short--is-small--5rmFb"
                                                                data-t="star-rating-short">
                                                                <div role="button" tabindex="0"
                                                                    class="star-rating-short__trigger--j5wck">
                                                                    <div class="star-rating-short-static--qkdpc star-rating-short-static--is-small--WAjB2"
                                                                        data-t="star-rating-short-static">
                                                                        <p
                                                                            class="text--gq6o- text--is-m--pqiL- star-rating-short-static__rating--bdAfR">
                                                                            3.2</p><svg
                                                                            class="star-rating-short-static__star-icon--JLlR- base-svg--is-flip--QvCQC"
                                                                            xmlns="http://www.w3.org/2000/svg"
                                                                            viewBox="0 0 24 24" data-t="star-svg"
                                                                            aria-labelledby="star-svg"
                                                                            aria-hidden="false" role="img">
                                                                            <title id="star-svg">Sterne Review</title>
                                                                            <path
                                                                                d="M15.266 8.352L11.988 1.723 8.73 8.352 1.431 9.397 6.71 14.528 5.465 21.849 11.999 18.39 18.544 21.85 17.285 14.528 22.57 9.398z">
                                                                            </path>
                                                                        </svg>
                                                                        <p class="text--gq6o- text--is-m--pqiL- star-rating-short-static__votes-count--h9Sun"
                                                                            data-t="rating-count">(183)</p>
                                                                    </div><svg
                                                                        class="star-rating-short__trigger-icon---MKmu"
                                                                        xmlns="http://www.w3.org/2000/svg"
                                                                        viewBox="0 0 24 24" data-t="dropdown-svg"
                                                                        aria-labelledby="dropdown-svg"
                                                                        aria-hidden="true" role="img">
                                                                        <path d="M7 10h10l-5 5z"></path>
                                                                    </svg>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="tooltip-target--pW1cv"><button
                                                            aria-label="Der Watchlist hinzufügen" tabindex="0"
                                                            data-t="add-to-watchlist-btn"
                                                            class="watchlist-toggle--LJPTQ toggle-watchlist-icon"><span
                                                                class="watchlist-toggle__icon-wrapper--UiCr2"><svg
                                                                    class="watchlist-toggle__icon--oo0Km watchlist-toggle__icon--is-filled--AaM71"
                                                                    xmlns="http://www.w3.org/2000/svg"
                                                                    viewBox="0 0 24 24" data-t="watchlist-filled-svg"
                                                                    aria-labelledby="watchlist-filled-svg"
                                                                    aria-hidden="true" role="img">
                                                                    <path
                                                                        d="M18 2H6a1 1 0 0 0-1 1v17.056c0 .209.065.412.187.581a.994.994 0 0 0 1.394.233l4.838-3.455a1 1 0 0 1 1.162 0l4.838 3.455A1 1 0 0 0 19 20.056V3a1 1 0 0 0-1-1z">
                                                                    </path>
                                                                </svg><svg class="watchlist-toggle__icon--oo0Km"
                                                                    xmlns="http://www.w3.org/2000/svg"
                                                                    viewBox="0 0 24 24" data-t="watchlist-svg"
                                                                    aria-labelledby="watchlist-svg" aria-hidden="true"
                                                                    role="img">
                                                                    <path
                                                                        d="M17 18.113l-3.256-2.326A2.989 2.989 0 0 0 12 15.228c-.629 0-1.232.194-1.744.559L7 18.113V4h10v14.113zM18 2H6a1 1 0 0 0-1 1v17.056c0 .209.065.412.187.581a.994.994 0 0 0 1.394.233l4.838-3.455a1 1 0 0 1 1.162 0l4.838 3.455A1 1 0 0 0 19 20.056V3a1 1 0 0 0-1-1z">
                                                                    </path>
                                                                </svg></span></button></div>
                                                </div>
                                                <h1
                                                    class="heading--nKNOf heading--is-xs--UyvXH heading--is-family-type-one--GqBzU title">
                                                    E3 - Ohne Titel</h1>
                                                <div class="media-tags">
                                                    <div class="meta-tags--o8OYw" data-t="meta-tags"><span
                                                            class="text--gq6o- text--is-m--pqiL- maturity-rating--7hF2p"
                                                            data-t="UN-maturity-rating"><svg
                                                                class="maturity-rating__icon--qzkzC"
                                                                xmlns="http://www.w3.org/2000/svg" viewBox="0 0 37 20"
                                                                data-t="universal-rating-14-svg"
                                                                aria-labelledby="universal-rating-14-svg"
                                                                aria-hidden="true" role="img">
                                                                <path
                                                                    d="M3.30378 1.64569C3.47524 0.693104 4.30424 0 5.27214 0L6 0V20H2.39214C1.14576 20 0.202976 18.8724 0.423775 17.6457L3.30378 1.64569Z"
                                                                    fill="#4A4E58" fill-opacity="0.7"></path>
                                                                <rect width="25" height="20" transform="translate(6)"
                                                                    fill="#4A4E58" fill-opacity="0.7"></rect>
                                                                <path
                                                                    d="M12.3387 5.54545L10.7691 15H9.05642L10.349 7.212H10.2936L7.8469 8.62464L8.10542 7.05504L10.7091 5.54545H12.3387ZM13.2943 13.2457L13.5159 11.8839L18.5802 5.54545H19.7159L19.3927 7.48438H18.7049L15.2887 11.7638L15.2794 11.8377H20.8838L20.6484 13.2457H13.2943ZM17.5092 15L17.8693 12.8256L17.9939 12.2209L19.0973 5.54545H20.713L19.1434 15H17.5092ZM24.8932 13.4766L25.9458 7.08736H27.4L26.3428 13.4766H24.8932ZM22.8251 11.0067L23.0697 9.56179H29.4589L29.2143 11.0067H22.8251Z"
                                                                    fill="#DADADA"></path>
                                                                <path
                                                                    d="M33.6962 18.3543C33.5248 19.3069 32.6958 20 31.7279 20L31 20L31 -5.24537e-07L34.6079 -2.09128e-07C35.8542 -1.00166e-07 36.797 1.12764 36.5762 2.35431L33.6962 18.3543Z"
                                                                    fill="#4A4E58" fill-opacity="0.7"></path>
                                                            </svg></span>
                                                        <div
                                                            class="meta-tags__tag-wrapper--fzf-1 meta-tags__tag-wrapper--is-inline--ug1Il">
                                                            <span class="text--gq6o- text--is-m--pqiL-">OmU</span></div>
                                                    </div>
                                                </div>
                                                <p class="text--gq6o- text--is-m--pqiL- release-date">Veröffentlicht am
                                                    24. Juli 2014</p>
                                                <div class="episode-actions">
                                                    <div class="episode-ratings--AB18N episode-ratings">
                                                        <div class="tooltip-target--pW1cv"><button tabindex="0"
                                                                data-t="episode-like-button"
                                                                class="episode-rate-action--e-GyC"><span
                                                                    class="episode-rate-action__content--z7tPb"><svg
                                                                        class="episode-rate-action__icon--DEMWd"
                                                                        xmlns="http://www.w3.org/2000/svg"
                                                                        viewBox="0 0 24 24" data-t="thumbs-up-svg"
                                                                        aria-labelledby="thumbs-up-svg"
                                                                        aria-hidden="true" role="img">
                                                                        <path
                                                                            d="M7 20h12v-4c0-.155.036-.309.105-.447l1.33-2.658c.28-.561.28-1.229 0-1.79L19.382 9H14a1 1 0 0 1-1-1V4c0-1.103-.897-2-2-2h-1v4.879a3.973 3.973 0 0 1-1.172 2.828l-.021.021L7 11.432V20zm12 2H6a1 1 0 0 1-1-1V11a1 1 0 0 1 .314-.728l2.109-1.989C7.795 7.906 8 7.408 8 6.879V1a1 1 0 0 1 1-1h2c2.206 0 4 1.794 4 4v3h4.382c.764 0 1.449.424 1.789 1.106l1.053 2.105a4.02 4.02 0 0 1 0 3.578L21 16.236V20c0 1.103-.897 2-2 2zm-17-.063a1 1 0 0 1-1-1V11a1 1 0 0 1 2 0v9.938a1 1 0 0 1-1 1z">
                                                                        </path>
                                                                    </svg><svg
                                                                        class="episode-rate-action__icon--DEMWd episode-rate-action__icon--is-involved--a6Mtt"
                                                                        xmlns="http://www.w3.org/2000/svg"
                                                                        viewBox="0 0 24 24"
                                                                        data-t="thumbs-up-filled-svg"
                                                                        aria-labelledby="thumbs-up-filled-svg"
                                                                        aria-hidden="true" role="img">
                                                                        <path
                                                                            d="M19 22H6a1 1 0 0 1-1-1V11a1 1 0 0 1 .314-.728l2.109-1.989C7.795 7.906 8 7.408 8 6.879V1a1 1 0 0 1 1-1h2c2.206 0 4 1.794 4 4v3h4.382c.764 0 1.449.424 1.789 1.106l1.053 2.105a4.02 4.02 0 0 1 0 3.578L21 16.236V20c0 1.103-.897 2-2 2zm-17-.063a1 1 0 0 1-1-1V11a1 1 0 0 1 2 0v9.938a1 1 0 0 1-1 1z">
                                                                        </path>
                                                                    </svg><span
                                                                        class="call-to-action--PEidl call-to-action--is-s--xFu35 episode-rate-action__text--NK8oS">147</span></span></button>
                                                        </div>
                                                        <div class="tooltip-target--pW1cv"><button tabindex="0"
                                                                data-t="episode-dislike-button"
                                                                class="episode-rate-action--e-GyC"><span
                                                                    class="episode-rate-action__content--z7tPb"><svg
                                                                        class="episode-rate-action__icon--DEMWd"
                                                                        xmlns="http://www.w3.org/2000/svg"
                                                                        viewBox="0 0 24 24" data-t="thumbs-down-svg"
                                                                        aria-labelledby="thumbs-down-svg"
                                                                        aria-hidden="true" role="img">
                                                                        <path
                                                                            d="M17 4H5v4c0 .155-.036.309-.105.447l-1.33 2.658a2.012 2.012 0 0 0 0 1.79L4.618 15H10a1 1 0 0 1 1 1v4c0 1.103.897 2 2 2h1v-4.879c0-1.068.416-2.072 1.172-2.828l.021-.021L17 12.568V4zM5 2h13a1 1 0 0 1 1 1v10a1 1 0 0 1-.314.728l-2.109 1.989A1.987 1.987 0 0 0 16 17.121V23a1 1 0 0 1-1 1h-2c-2.206 0-4-1.794-4-4v-3H4.618a1.987 1.987 0 0 1-1.789-1.106l-1.053-2.105a4.02 4.02 0 0 1 0-3.578L3 7.764V4c0-1.103.897-2 2-2zm17 .063a1 1 0 0 1 1 1V13a1 1 0 1 1-2 0V3.063a1 1 0 0 1 1-1z">
                                                                        </path>
                                                                    </svg><svg
                                                                        class="episode-rate-action__icon--DEMWd episode-rate-action__icon--is-involved--a6Mtt"
                                                                        xmlns="http://www.w3.org/2000/svg"
                                                                        viewBox="0 0 24 24"
                                                                        data-t="thumbs-down-filled-svg"
                                                                        aria-labelledby="thumbs-down-filled-svg"
                                                                        aria-hidden="true" role="img">
                                                                        <path
                                                                            d="M5 2h13a1 1 0 0 1 1 1v10a1 1 0 0 1-.314.728l-2.109 1.989A1.987 1.987 0 0 0 16 17.121V23a1 1 0 0 1-1 1h-2c-2.206 0-4-1.794-4-4v-3H4.618a1.987 1.987 0 0 1-1.789-1.106l-1.053-2.105a4.02 4.02 0 0 1 0-3.578L3 7.764V4c0-1.103.897-2 2-2zm17 .063a1 1 0 0 1 1 1V13a1 1 0 1 1-2 0V3.063a1 1 0 0 1 1-1z">
                                                                        </path>
                                                                    </svg><span
                                                                        class="call-to-action--PEidl call-to-action--is-s--xFu35 episode-rate-action__text--NK8oS">10</span></span></button>
                                                        </div>
                                                    </div>
                                                    <div class="tooltip-target--pW1cv"><button aria-label="Teilen"
                                                            tabindex="0"
                                                            class="call-to-action--PEidl call-to-action--is-m--RVdkI erc-share-button"><svg
                                                                class="share-icon" xmlns="http://www.w3.org/2000/svg"
                                                                viewBox="0 0 24 24" data-t="share-svg"
                                                                aria-labelledby="share-svg" aria-hidden="true"
                                                                role="img">
                                                                <path
                                                                    d="M18 2c2.21 0 4 1.79 4 4s-1.79 4-4 4c-1.385 0-2.606-.704-3.323-1.773l-5.02 2.151c.22.496.343 1.045.343 1.622 0 .577-.122 1.126-.342 1.622l5.019 2.151C15.394 14.703 16.615 14 18 14c2.21 0 4 1.79 4 4s-1.79 4-4 4-4-1.79-4-4c0-.113.005-.225.014-.335L8.35 15.238C7.69 15.718 6.878 16 6 16c-2.21 0-4-1.79-4-4s1.79-4 4-4c.878 0 1.69.283 2.35.762l5.664-2.427C14.004 6.225 14 6.113 14 6c0-2.21 1.79-4 4-4zm0 14c-1.105 0-2 .895-2 2s.895 2 2 2 2-.895 2-2-.895-2-2-2zM6 10c-1.105 0-2 .895-2 2s.895 2 2 2 2-.895 2-2-.895-2-2-2zm12-6c-1.105 0-2 .895-2 2s.895 2 2 2 2-.895 2-2-.895-2-2-2z"
                                                                    transform="translate(-60 -1504) translate(60 1504)">
                                                                </path>
                                                            </svg></button></div>
                                                </div>
                                                <div class="" data-t="expandable-section">
                                                    <div
                                                        class="expandable-section__wrapper--G-ttI expandable-section__wrapper--is-faded--EE4Zg expandable-section__wrapper--is-long--ZL6oO">
                                                        <div>
                                                            <p
                                                                class="text--gq6o- text--is-l--iccTo expandable-section__text---00oG">
                                                                Ponoka-senpai bietet demjenigen drei Millionen Yen an,
                                                                der es schafft, die anderen zu töten. Schließlich wird
                                                                ein Kampf ohne Regeln daraus und die Lage verschärft
                                                                sich.</p>
                                                            <div class="languages-table-details">
                                                                <div class="details-table__table-row--4eYc5"
                                                                    data-t="detail-row-audio-language">
                                                                    <div
                                                                        class="details-table__table-column-name--m7zxX">
                                                                        <h5 class="text--gq6o- text--is-semibold--AHOYN text--is-l--iccTo"
                                                                            data-t="details-table-column-name">Audio
                                                                        </h5>
                                                                    </div>
                                                                    <div
                                                                        class="details-table__table-column-value--KeNXo">
                                                                        <h5 class="text--gq6o- text--is-m--pqiL-"
                                                                            data-t="details-table-description">Japanese
                                                                        </h5>
                                                                    </div>
                                                                </div>
                                                                <div class="details-table__table-row--4eYc5"
                                                                    data-t="detail-row-subtitles-language">
                                                                    <div
                                                                        class="details-table__table-column-name--m7zxX">
                                                                        <h5 class="text--gq6o- text--is-semibold--AHOYN text--is-l--iccTo"
                                                                            data-t="details-table-column-name">
                                                                            Untertitel</h5>
                                                                    </div>
                                                                    <div
                                                                        class="details-table__table-column-value--KeNXo">
                                                                        <h5 class="text--gq6o- text--is-m--pqiL-"
                                                                            data-t="details-table-description">Deutsch,
                                                                            English, Español (América Latina), Español
                                                                            (España), Français, Português (Brasil)</h5>
                                                                    </div>
                                                                </div>
                                                                <div class="details-table__table-row--4eYc5"
                                                                    data-t="detail-row-content-advisory">
                                                                    <div
                                                                        class="details-table__table-column-name--m7zxX">
                                                                        <h5 class="text--gq6o- text--is-semibold--AHOYN text--is-l--iccTo"
                                                                            data-t="details-table-column-name">
                                                                            Inhaltswarnung</h5>
                                                                    </div>
                                                                    <div
                                                                        class="details-table__table-column-value--KeNXo">
                                                                        <h4 class="text--gq6o- text--is-m--pqiL-"
                                                                            data-t="details-table-title">14+</h4>
                                                                        <h5 class="text--gq6o- text--is-m--pqiL-"
                                                                            data-t="details-table-description">vulgäre
                                                                            Sprache, Gewalt</h5>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div><button tabindex="0"
                                                        class="call-to-action--PEidl call-to-action--is-s--xFu35 expandable-section__button--KeiDD"
                                                        data-t="expandable-btn">Mehr anzeigen</button>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="videos-wrapper">
                                            <div class="erc-watch-more-episodes">
                                                <div class="collapsed-section">
                                                    <div class="prev-next-episodes">
                                                        <div class="erc-prev-next-episode episode"
                                                            data-t="next-episode"><a tabindex="0" class="title"
                                                                href="/de/watch/G6GG4ZNE6/untitled"><span
                                                                    class="call-to-action--PEidl call-to-action--is-m--RVdkI">Nächste
                                                                    Episode</span></a>
                                                            <div class="playable-card-mini-static--WU--V"
                                                                data-t="playable-card-mini"><a
                                                                    aria-label="E4 - Ohne Titel" tabindex="0"
                                                                    class="playable-card-mini-static__link--UOJQm"
                                                                    href="/de/watch/G6GG4ZNE6/untitled"></a><a
                                                                    tabindex="-1" href="/de/watch/G6GG4ZNE6/untitled"
                                                                    class="playable-card-mini-static__thumbnail-wrapper--kGEEH"
                                                                    aria-hidden="true">
                                                                    <div
                                                                        class="playable-thumbnail--HKMt2 playable-thumbnail--is-sized--ttnK8">
                                                                        <div
                                                                            class="content-image--3na7E content-image--is-sized--SOai1 playable-thumbnail__image--AgM1B">
                                                                            <div
                                                                                class="content-image-figure-wrapper--pKs17 content-image__figure-wrapper--TRCnl">
                                                                                <div
                                                                                    class="content-image-figure-wrapper__figure-sizer--SH2-x content-image__figure-sizer--is-background-type-one--Eo1qr">
                                                                                    <svg class="content-image-figure-wrapper__sizer---PAKo"
                                                                                        xmlns="http://www.w3.org/2000/svg"
                                                                                        viewBox="0 0 16 9"
                                                                                        aria-hidden="true"></svg>
                                                                                    <figure
                                                                                        class="content-image__figure--7vume">
                                                                                        <div
                                                                                            class="progressive-image-loading--rwH3R">
                                                                                            <picture><img
                                                                                                    class="progressive-image-base__fade--Nrn20 progressive-image-base__fade--is-ready--dMxKu content-image__image--7tGlg progressive-image-loading__preview--eYvnH progressive-image-loading__preview--is-hidden--RLDT9"
                                                                                                    loading="eager"
                                                                                                    src="https://imgsrv.crunchyroll.com/cdn-cgi/image/fit=contain,format=auto,quality=70,width=320,height=180,blur=30/catalog/crunchyroll/d6de665dea80538c99f24b9dcc528051.jpg"
                                                                                                    alt=""
                                                                                                    data-t="card-image">
                                                                                            </picture>
                                                                                            <picture><img
                                                                                                    class="content-image__image--7tGlg progressive-image-loading__original--k-k-7"
                                                                                                    loading="eager"
                                                                                                    src="https://imgsrv.crunchyroll.com/cdn-cgi/image/fit=contain,format=auto,quality=70,width=320,height=180/catalog/crunchyroll/d6de665dea80538c99f24b9dcc528051.jpg"
                                                                                                    alt="Ohne Titel"
                                                                                                    data-t="card-image">
                                                                                            </picture>
                                                                                        </div>
                                                                                    </figure>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                        <div class="">
                                                                            <div class="availability-overlay--2b4o9">
                                                                            </div>
                                                                        </div>
                                                                        <div
                                                                            class="content-tags-group--0ckbD playable-thumbnail__tags--wNuh1">
                                                                            <div class="info-tag--iCqCs info-tag--has-icon--DtgC3 info-tag--is-three--ZaCkq content-tags-group__item--rJ2ZA"
                                                                                data-t="info-tag-premium">
                                                                                <div
                                                                                    class="info-tag__icon-wrapper--V5xQG">
                                                                                    <svg class="premium-filled-icon--nW2Vi"
                                                                                        xmlns="http://www.w3.org/2000/svg"
                                                                                        viewBox="0 0 16 16"
                                                                                        data-t="premium-filled-svg"
                                                                                        aria-labelledby="premium-filled-svg"
                                                                                        aria-hidden="true" role="img">
                                                                                        <path
                                                                                            d="M2.419 13L0 4.797 4.837 6.94 8 2l3.163 4.94L16 4.798 13.581 13z">
                                                                                        </path>
                                                                                    </svg></div><small
                                                                                    class="text--gq6o- text--is-heavy--2YygX text--is-xs--5PTBo info-tag__item--avQcC">Premium</small>
                                                                            </div>
                                                                        </div>
                                                                        <div class="text--gq6o- text--is-semibold--AHOYN text--is-m--pqiL- playable-thumbnail__duration--p-Ldq"
                                                                            data-t="duration-info">3min</div>
                                                                    </div>
                                                                </a>
                                                                <div
                                                                    class="playable-card-mini-static__body-aligner--wTXAJ">
                                                                    <div class="playable-card-mini-static__body--odiBS">
                                                                        <h3
                                                                            class="text--gq6o- text--is-semibold--AHOYN text--is-m--pqiL- playable-card-mini-static__title--fp9y6">
                                                                            <a tabindex="-1"
                                                                                href="/de/watch/G6GG4ZNE6/untitled"
                                                                                class="playable-card-mini-static__title-link--NcI2h"
                                                                                aria-hidden="true">E4 - Ohne Titel</a>
                                                                        </h3>
                                                                        <div
                                                                            class="playable-card-mini-static__footer--pWndA">
                                                                            <div
                                                                                class="playable-card-mini-static__footer-meta--XS-oA">
                                                                                <div class="meta-tags--o8OYw"
                                                                                    data-t="meta-tags">
                                                                                    <div
                                                                                        class="meta-tags__tag-wrapper--fzf-1 meta-tags__tag-wrapper--is-inline--ug1Il">
                                                                                        <span
                                                                                            class="text--gq6o- text--is-m--pqiL-">Untertitel</span>
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="erc-prev-next-episode episode"
                                                            data-t="prev-episode"><a tabindex="0" class="title"
                                                                href="/de/watch/GYDQD20G6/untitled"><span
                                                                    class="call-to-action--PEidl call-to-action--is-m--RVdkI">Vorherige
                                                                    Episode</span></a>
                                                            <div class="playable-card-mini-static--WU--V"
                                                                data-t="playable-card-mini"><a
                                                                    aria-label="E2 - Ohne Titel" tabindex="0"
                                                                    class="playable-card-mini-static__link--UOJQm"
                                                                    href="/de/watch/GYDQD20G6/untitled"></a><a
                                                                    tabindex="-1" href="/de/watch/GYDQD20G6/untitled"
                                                                    class="playable-card-mini-static__thumbnail-wrapper--kGEEH"
                                                                    aria-hidden="true">
                                                                    <div
                                                                        class="playable-thumbnail--HKMt2 playable-thumbnail--is-sized--ttnK8">
                                                                        <div
                                                                            class="content-image--3na7E content-image--is-sized--SOai1 playable-thumbnail__image--AgM1B">
                                                                            <div
                                                                                class="content-image-figure-wrapper--pKs17 content-image__figure-wrapper--TRCnl">
                                                                                <div
                                                                                    class="content-image-figure-wrapper__figure-sizer--SH2-x content-image__figure-sizer--is-background-type-one--Eo1qr">
                                                                                    <svg class="content-image-figure-wrapper__sizer---PAKo"
                                                                                        xmlns="http://www.w3.org/2000/svg"
                                                                                        viewBox="0 0 16 9"
                                                                                        aria-hidden="true"></svg>
                                                                                    <figure
                                                                                        class="content-image__figure--7vume">
                                                                                        <div
                                                                                            class="progressive-image-loading--rwH3R">
                                                                                            <picture><img
                                                                                                    class="progressive-image-base__fade--Nrn20 progressive-image-base__fade--is-ready--dMxKu content-image__image--7tGlg progressive-image-loading__preview--eYvnH progressive-image-loading__preview--is-hidden--RLDT9"
                                                                                                    loading="eager"
                                                                                                    src="https://imgsrv.crunchyroll.com/cdn-cgi/image/fit=contain,format=auto,quality=70,width=320,height=180,blur=30/catalog/crunchyroll/eab142441c30ce1ba2dc4b0c318f0fd1.jpg"
                                                                                                    alt=""
                                                                                                    data-t="card-image">
                                                                                            </picture>
                                                                                            <picture><img
                                                                                                    class="content-image__image--7tGlg progressive-image-loading__original--k-k-7"
                                                                                                    loading="eager"
                                                                                                    src="https://imgsrv.crunchyroll.com/cdn-cgi/image/fit=contain,format=auto,quality=70,width=320,height=180/catalog/crunchyroll/eab142441c30ce1ba2dc4b0c318f0fd1.jpg"
                                                                                                    alt="Ohne Titel"
                                                                                                    data-t="card-image">
                                                                                            </picture>
                                                                                        </div>
                                                                                    </figure>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                        <div class="">
                                                                            <div class="availability-overlay--2b4o9">
                                                                            </div>
                                                                        </div>
                                                                        <div
                                                                            class="content-tags-group--0ckbD playable-thumbnail__tags--wNuh1">
                                                                            <div class="info-tag--iCqCs info-tag--has-icon--DtgC3 info-tag--is-three--ZaCkq content-tags-group__item--rJ2ZA"
                                                                                data-t="info-tag-premium">
                                                                                <div
                                                                                    class="info-tag__icon-wrapper--V5xQG">
                                                                                    <svg class="premium-filled-icon--nW2Vi"
                                                                                        xmlns="http://www.w3.org/2000/svg"
                                                                                        viewBox="0 0 16 16"
                                                                                        data-t="premium-filled-svg"
                                                                                        aria-labelledby="premium-filled-svg"
                                                                                        aria-hidden="true" role="img">
                                                                                        <path
                                                                                            d="M2.419 13L0 4.797 4.837 6.94 8 2l3.163 4.94L16 4.798 13.581 13z">
                                                                                        </path>
                                                                                    </svg></div><small
                                                                                    class="text--gq6o- text--is-heavy--2YygX text--is-xs--5PTBo info-tag__item--avQcC">Premium</small>
                                                                            </div>
                                                                        </div>
                                                                        <div class="text--gq6o- text--is-semibold--AHOYN text--is-m--pqiL- playable-thumbnail__duration--p-Ldq"
                                                                            data-t="duration-info">3min</div>
                                                                    </div>
                                                                </a>
                                                                <div
                                                                    class="playable-card-mini-static__body-aligner--wTXAJ">
                                                                    <div class="playable-card-mini-static__body--odiBS">
                                                                        <h3
                                                                            class="text--gq6o- text--is-semibold--AHOYN text--is-m--pqiL- playable-card-mini-static__title--fp9y6">
                                                                            <a tabindex="-1"
                                                                                href="/de/watch/GYDQD20G6/untitled"
                                                                                class="playable-card-mini-static__title-link--NcI2h"
                                                                                aria-hidden="true">E2 - Ohne Titel</a>
                                                                        </h3>
                                                                        <div
                                                                            class="playable-card-mini-static__footer--pWndA">
                                                                            <div
                                                                                class="playable-card-mini-static__footer-meta--XS-oA">
                                                                                <div class="meta-tags--o8OYw"
                                                                                    data-t="meta-tags">
                                                                                    <div
                                                                                        class="meta-tags__tag-wrapper--fzf-1 meta-tags__tag-wrapper--is-inline--ug1Il">
                                                                                        <span
                                                                                            class="text--gq6o- text--is-m--pqiL-">Untertitel</span>
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div><button tabindex="0"
                                                        class="button--xqVd0 button--is-type-two-weak--VH7er see-all-button"
                                                        data-t="see-more-episodes-btn"><span
                                                            class="call-to-action--PEidl call-to-action--is-m--RVdkI button__cta--LOqDH"><svg
                                                                class="" xmlns="http://www.w3.org/2000/svg"
                                                                viewBox="0 0 24 24" data-t="episodes-svg"
                                                                aria-labelledby="episodes-svg" aria-hidden="true"
                                                                role="img">
                                                                <path
                                                                    d="M21 10a1 1 0 011 1v9a1 1 0 01-1 1H3a1 1 0 01-1-1v-9a1 1 0 011-1h18zm-1 2H4v7h16v-7zm0-5a1 1 0 010 2H4a1 1 0 110-2h16zm-2-3a1 1 0 010 2H6a1 1 0 110-2h12z">
                                                                </path>
                                                            </svg>Mehr Episoden anzeigen</span></button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="app-layout__footer--jgOfu">
                        <div class="erc-footer">
                            <div>
                                <div class="content-wrapper--MF5LS">
                                    <div class="footer-top-wrapper">
                                        <div class="sections">
                                            <div class="erc-footer-section" data-t="navigation">
                                                <h2
                                                    class="text--gq6o- text--is-fixed-size--5i4oU text--is-semibold--AHOYN text--is-l--iccTo title">
                                                    Navigation</h2>
                                                <ul class="list">
                                                    <li class="erc-footer-section-item"><a
                                                            aria-label="Beliebte durchstöbern" tabindex="0" class="as"
                                                            href="/de/videos/popular"><span
                                                                class="text--gq6o- text--is-m--pqiL- text">Beliebte
                                                                durchstöbern</span></a></li>
                                                    <li class="erc-footer-section-item"><a
                                                            aria-label="Simulcasts durchstöbern" tabindex="0" class="as"
                                                            href="/de/simulcasts/seasons/spring-2025"><span
                                                                class="text--gq6o- text--is-m--pqiL- text">Simulcasts
                                                                durchstöbern</span></a></li>
                                                    <li class="erc-footer-section-item"><a aria-label="Programm"
                                                            tabindex="0"
                                                            href="https://www.crunchyroll.com/simulcastcalendar"
                                                            class="as"><span
                                                                class="text--gq6o- text--is-m--pqiL- text">Programm</span></a>
                                                    </li>
                                                    <li class="erc-footer-section-item"><a aria-label="News"
                                                            tabindex="0" href="https://www.crunchyroll.com/news"
                                                            class="as"><span
                                                                class="text--gq6o- text--is-m--pqiL- text">News</span></a>
                                                    </li>
                                                    <li class="erc-footer-section-item"><a
                                                            aria-label="Store - in neuem Tab öffnen" tabindex="0"
                                                            href="https://store.crunchyroll.com/eu/?utm_source=web"
                                                            target="_blank" class="as"><span
                                                                class="text--gq6o- text--is-m--pqiL- text">Store</span></a>
                                                    </li>
                                                    <li class="erc-footer-section-item"><a
                                                            aria-label="Games - in neuem Tab öffnen" tabindex="0"
                                                            href="https://www.crunchyroll.com/games/index.html"
                                                            target="_blank" class="as"><span
                                                                class="text--gq6o- text--is-m--pqiL- text">Games</span></a>
                                                    </li>
                                                </ul>
                                            </div>
                                            <div class="erc-footer-section" data-t="socials">
                                                <h2
                                                    class="text--gq6o- text--is-fixed-size--5i4oU text--is-semibold--AHOYN text--is-l--iccTo title">
                                                    Nimm Kontakt zu uns auf</h2>
                                                <ul class="list">
                                                    <li class="erc-footer-section-item"><a
                                                            aria-label="Offizieller Youtube-Account von Crunchyroll - in neuem Tab öffnen"
                                                            tabindex="0"
                                                            href="https://www.youtube.com/channel/UC9yobUXOa4WNswj_JLZf8Lg"
                                                            target="_blank" class="as"><span
                                                                class="text--gq6o- text--is-m--pqiL- text"><svg
                                                                    class="left-icon" xmlns="http://www.w3.org/2000/svg"
                                                                    viewBox="0 0 16 16" data-t="youtube-svg"
                                                                    aria-labelledby="youtube-svg" aria-hidden="true"
                                                                    role="img">
                                                                    <path
                                                                        d="M15.666,4.124A2.01,2.01,0,0,0,14.251,2.7,47.511,47.511,0,0,0,8,2.364,47.511,47.511,0,0,0,1.749,2.7,2.01,2.01,0,0,0,.334,4.124,21.09,21.09,0,0,0,0,8a21.09,21.09,0,0,0,.334,3.876A2.01,2.01,0,0,0,1.749,13.3,47.509,47.509,0,0,0,8,13.636a47.509,47.509,0,0,0,6.251-.337,2.01,2.01,0,0,0,1.415-1.424A21.09,21.09,0,0,0,16,8,21.09,21.09,0,0,0,15.666,4.124Zm-9.3,6.255V5.621L10.545,8Z">
                                                                    </path>
                                                                </svg>Youtube</span></a></li>
                                                    <li class="erc-footer-section-item"><a
                                                            aria-label="Offizieller Facebook-Account von Crunchyroll - in neuem Tab öffnen"
                                                            tabindex="0" href="https://www.facebook.com/crunchyroll.de/"
                                                            target="_blank" class="as"><span
                                                                class="text--gq6o- text--is-m--pqiL- text"><svg
                                                                    class="left-icon" xmlns="http://www.w3.org/2000/svg"
                                                                    viewBox="0 0 16 16" data-t="facebook-svg"
                                                                    aria-labelledby="facebook-svg" aria-hidden="true"
                                                                    role="img">
                                                                    <path
                                                                        d="M15.1169,0 L0.8829,0 C0.3949,0 -0.0001,0.395 -0.0001,0.883 L-0.0001,15.117 C-0.0001,15.605 0.3949,16 0.8829,16 L8.5459,16 L8.5459,9.804 L6.4609,9.804 L6.4609,7.389 L8.5459,7.389 L8.5459,5.608 C8.5459,3.542 9.8079,2.417 11.6519,2.417 C12.5349,2.417 13.2939,2.482 13.5149,2.512 L13.5149,4.671 L12.2369,4.672 C11.2339,4.672 11.0399,5.148 11.0399,5.848 L11.0399,7.389 L13.4309,7.389 L13.1199,9.804 L11.0399,9.804 L11.0399,16 L15.1169,16 C15.6049,16 15.9999,15.605 15.9999,15.117 L15.9999,0.883 C15.9999,0.395 15.6049,0 15.1169,0">
                                                                    </path>
                                                                </svg>Facebook</span></a></li>
                                                    <li class="erc-footer-section-item"><a
                                                            aria-label="Offizieller X-Account von Crunchyroll - in neuem Tab öffnen"
                                                            tabindex="0" href="https://x.com/crunchyroll_de"
                                                            target="_blank" class="as"><span
                                                                class="text--gq6o- text--is-m--pqiL- text"><svg
                                                                    class="left-icon" xmlns="http://www.w3.org/2000/svg"
                                                                    viewBox="0 0 24 24" data-t="x-svg"
                                                                    aria-labelledby="x-svg" aria-hidden="true"
                                                                    role="img">
                                                                    <path
                                                                        d="M13.7124 10.6179L20.4133 3H18.8254L13.0071 9.61448L8.35992 3H3L10.0274 13.0023L3 20.9908H4.58799L10.7324 14.0056L15.6401 20.9908H21L13.7121 10.6179H13.7124ZM11.5375 13.0904L10.8255 12.0944L5.16017 4.16911H7.59922L12.1712 10.5651L12.8832 11.5611L18.8262 19.8748H16.3871L11.5375 13.0908V13.0904Z">
                                                                    </path>
                                                                </svg>X</span></a></li>
                                                    <li class="erc-footer-section-item"><a
                                                            aria-label="Offizieller Instagram-Account von Crunchyroll - in neuem Tab öffnen"
                                                            tabindex="0" href="https://www.instagram.com/crunchyrollde/"
                                                            target="_blank" class="as"><span
                                                                class="text--gq6o- text--is-m--pqiL- text"><svg
                                                                    class="left-icon" xmlns="http://www.w3.org/2000/svg"
                                                                    viewBox="0 0 16 16" data-t="instagram-svg"
                                                                    aria-labelledby="instagram-svg" aria-hidden="true"
                                                                    role="img">
                                                                    <path
                                                                        d="M8,1.44c2.14,0,2.39,0,3.23,0a4.43,4.43,0,0,1,1.49.28,2.48,2.48,0,0,1,.92.6,2.48,2.48,0,0,1,.6.92,4.43,4.43,0,0,1,.28,1.49c0,0.84,0,1.1,0,3.23s0,2.39,0,3.23a4.43,4.43,0,0,1-.28,1.49,2.65,2.65,0,0,1-1.52,1.52,4.43,4.43,0,0,1-1.49.28c-0.84,0-1.1,0-3.23,0s-2.39,0-3.23,0a4.43,4.43,0,0,1-1.49-.28,2.48,2.48,0,0,1-.92-0.6,2.48,2.48,0,0,1-.6-0.92,4.43,4.43,0,0,1-.28-1.49c0-.84,0-1.1,0-3.23s0-2.39,0-3.23a4.43,4.43,0,0,1,.28-1.49,2.48,2.48,0,0,1,.6-0.92,2.48,2.48,0,0,1,.92-0.6,4.43,4.43,0,0,1,1.49-.28c0.84,0,1.1,0,3.23,0M8,0C5.83,0,5.55,0,4.7,0A5.87,5.87,0,0,0,2.76.42a3.92,3.92,0,0,0-1.42.92A3.92,3.92,0,0,0,.42,2.76,5.87,5.87,0,0,0,0,4.7C0,5.55,0,5.83,0,8s0,2.45,0,3.3a5.87,5.87,0,0,0,.37,1.94,3.92,3.92,0,0,0,.92,1.42,3.92,3.92,0,0,0,1.42.92A5.87,5.87,0,0,0,4.7,16c0.85,0,1.13,0,3.3,0s2.45,0,3.3,0a5.87,5.87,0,0,0,1.94-.37,4.09,4.09,0,0,0,2.34-2.34A5.87,5.87,0,0,0,16,11.3c0-.85,0-1.13,0-3.3s0-2.45,0-3.3a5.87,5.87,0,0,0-.37-1.94,3.92,3.92,0,0,0-.92-1.42A3.92,3.92,0,0,0,13.24.42,5.87,5.87,0,0,0,11.3,0C10.45,0,10.17,0,8,0H8Z">
                                                                    </path>
                                                                    <path
                                                                        d="M8,3.89A4.11,4.11,0,1,0,12.11,8,4.11,4.11,0,0,0,8,3.89Zm0,6.77A2.67,2.67,0,1,1,10.67,8,2.67,2.67,0,0,1,8,10.67Z">
                                                                    </path>
                                                                    <circle cx="12.27" cy="3.73" r="0.96"></circle>
                                                                </svg>Instagram</span></a></li>
                                                    <li class="erc-footer-section-item"><a
                                                            aria-label="Offizieller TikTok-Account von Crunchyroll - in neuem Tab öffnen"
                                                            tabindex="0" href="https://www.tiktok.com/@crunchyroll_de"
                                                            target="_blank" class="as"><span
                                                                class="text--gq6o- text--is-m--pqiL- text"><svg
                                                                    class="left-icon" xmlns="http://www.w3.org/2000/svg"
                                                                    viewBox="0 0 16 16" data-t="tiktok-svg"
                                                                    aria-labelledby="tiktok-svg" aria-hidden="true"
                                                                    role="img">
                                                                    <path
                                                                        d="M14.095 0H1.905C.855 0 0 .854 0 1.905v12.19C0 15.145.854 16 1.905 16h12.19c1.05 0 1.905-.854 1.905-1.905V1.905C16 .855 15.146 0 14.095 0m-1.521 6.98a2.854 2.854 0 0 1-2.651-1.277v4.395A3.248 3.248 0 1 1 6.674 6.85c.068 0 .134.006.201.01v1.6c-.067-.007-.132-.02-.2-.02a1.658 1.658 0 0 0 0 3.316c.915 0 1.724-.721 1.724-1.637l.016-7.465h1.531a2.853 2.853 0 0 0 2.63 2.547v1.78">
                                                                    </path>
                                                                </svg>TikTok</span></a></li>
                                                </ul>
                                            </div>
                                            <div class="erc-footer-section erc-footer-about-section"
                                                data-t="footer-about">
                                                <h2
                                                    class="text--gq6o- text--is-fixed-size--5i4oU text--is-semibold--AHOYN text--is-l--iccTo title">
                                                    Crunchyroll</h2>
                                                <ul class="list">
                                                    <li class="erc-footer-section-item"><a
                                                            aria-label="Starte ein Probeabonnement" tabindex="0"
                                                            href="https://www.crunchyroll.com/premium?referrer=newweb_organic_footer&amp;return_url=https%3A%2F%2Fwww.crunchyroll.com%2Fde%2Fwatch%2FGR5VK12DR%2Funtitled#plans"
                                                            data-t="free-trial-link" class="as premium-item"><span
                                                                class="text--gq6o- text--is-m--pqiL- text"><svg
                                                                    class="premium-filled-icon--nW2Vi left-icon premium-icon"
                                                                    xmlns="http://www.w3.org/2000/svg"
                                                                    viewBox="0 0 16 16" data-t="premium-filled-svg"
                                                                    aria-labelledby="premium-filled-svg"
                                                                    aria-hidden="true" role="img">
                                                                    <path
                                                                        d="M2.419 13L0 4.797 4.837 6.94 8 2l3.163 4.94L16 4.798 13.581 13z">
                                                                    </path>
                                                                </svg>Starte ein Probeabonnement</span></a></li>
                                                    <li class="erc-footer-section-item"><a aria-label="Über uns"
                                                            tabindex="0"
                                                            href="https://www.crunchyroll.com/de/about/index.html"
                                                            data-t="about-link" class="as"><span
                                                                class="text--gq6o- text--is-m--pqiL- text">Über
                                                                uns</span></a></li>
                                                    <li class="erc-footer-section-item"><a
                                                            aria-label="Hilfeseite - in neuem Tab öffnen" tabindex="0"
                                                            href="https://help.crunchyroll.com/hc/de" target="_blank"
                                                            data-t="help-link" class="as"><span
                                                                class="text--gq6o- text--is-m--pqiL- text">Hilfeseite</span></a>
                                                    </li>
                                                    <li class="erc-footer-section-item"><a
                                                            aria-label="Allgemeine Geschäftsbedingungen - in neuem Tab öffnen"
                                                            tabindex="0" href="https://www.crunchyroll.com/de/tos"
                                                            target="_blank" data-t="terms-link" class="as"><span
                                                                class="text--gq6o- text--is-m--pqiL- text">Allgemeine
                                                                Geschäftsbedingungen</span></a></li>
                                                    <li class="erc-footer-section-item"><a
                                                            aria-label="Datenschutzerklärung - in neuem Tab öffnen"
                                                            tabindex="0"
                                                            href="https://www.crunchyroll.com/privacy/index.html"
                                                            target="_blank" data-t="privacy-link" class="as"><span
                                                                class="text--gq6o- text--is-m--pqiL- text">Datenschutzerklärung</span></a>
                                                    </li>
                                                    <li class="erc-footer-section-item"><button
                                                            data-t="cookie-consent-tool" class="as"
                                                            aria-label="Verwaltung der Datennutzung - in Modal öffnen"><span
                                                                class="text--gq6o- text--is-m--pqiL- text">Verwaltung
                                                                der Datennutzung</span></button></li>
                                                    <li class="erc-footer-section-item"><a
                                                            aria-label="Presseanfragen - in neuem Tab öffnen"
                                                            tabindex="0" href="mailto:pr@crunchyroll.com"
                                                            target="_blank" class="as"><span
                                                                class="text--gq6o- text--is-m--pqiL- text">Presseanfragen</span></a>
                                                    </li>
                                                    <li class="erc-footer-section-item"><a
                                                            aria-label="Werbeanfragen - in neuem Tab öffnen"
                                                            tabindex="0" href="mailto:advertising@crunchyroll.com"
                                                            target="_blank" class="as"><span
                                                                class="text--gq6o- text--is-m--pqiL- text">Werbeanfragen</span></a>
                                                    </li>
                                                    <li class="erc-footer-section-item"><a
                                                            aria-label="Hol dir unsere Apps - in neuem Tab öffnen"
                                                            tabindex="0" href="https://www.crunchyroll.com/de/devices"
                                                            target="_blank" class="as"><span
                                                                class="text--gq6o- text--is-m--pqiL- text">Hol dir
                                                                unsere Apps</span></a></li>
                                                    <li class="erc-footer-section-item"><a
                                                            aria-label="Guthabenkarte einlösen" tabindex="0" class="as"
                                                            href="/de/redeem"><span
                                                                class="text--gq6o- text--is-m--pqiL- text">Guthabenkarte
                                                                einlösen</span></a></li>
                                                    <li class="erc-footer-section-item"><a
                                                            aria-label="Offene Stellen - in neuem Tab öffnen"
                                                            tabindex="0"
                                                            href="https://www.crunchyroll.com/about/jobs/index.html"
                                                            target="_blank" class="as"><span
                                                                class="text--gq6o- text--is-m--pqiL- text">Offene
                                                                Stellen</span></a></li>
                                                </ul>
                                            </div>
                                            <div class="erc-footer-section" data-t="account">
                                                <h2
                                                    class="text--gq6o- text--is-fixed-size--5i4oU text--is-semibold--AHOYN text--is-l--iccTo title">
                                                    Konto</h2>
                                                <ul class="list">
                                                    <li class="erc-footer-section-item"><a aria-label="Konto erstellen"
                                                            tabindex="0"
                                                            href="https://sso.crunchyroll.com/authorize?prompt=register&amp;client_id=noaihdevm_6iyg0a8l0q&amp;redirect_uri=https%3A%2F%2Fwww.crunchyroll.com%2Fcallback&amp;response_type=cookie&amp;state=%2Fwatch%2FGR5VK12DR%2Funtitled"
                                                            data-t="footer-signup-link" class="as"><span
                                                                class="text--gq6o- text--is-m--pqiL- text">Konto
                                                                erstellen</span></a></li>
                                                    <li class="erc-footer-section-item"><a aria-label="Einloggen"
                                                            tabindex="0"
                                                            href="https://sso.crunchyroll.com/authorize?client_id=noaihdevm_6iyg0a8l0q&amp;redirect_uri=https%3A%2F%2Fwww.crunchyroll.com%2Fcallback&amp;response_type=cookie&amp;state=%2Fwatch%2FGR5VK12DR%2Funtitled"
                                                            data-t="footer-login-link" class="as"><span
                                                                class="text--gq6o- text--is-m--pqiL- text">Einloggen</span></a>
                                                    </li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="erc-footer-copyright-section">
                                        <div class="footer-legal-wrapper"><img class="footer-logo"
                                                src="https://www.crunchyroll.com/build/assets/img/footer/sony_pictures_logo.png"
                                                alt="Sony Pictures">
                                            <p class="text--gq6o- text--is-m--pqiL- footer-copyright">© Crunchyroll, LLC
                                            </p>
                                        </div>
                                        <div class="dropdown--cacSP erc-language-select footer-language">
                                            <div role="button" aria-label="App-Sprache" tabindex="0"
                                                class="dropdown-trigger--P--FX dropdown-trigger--is-styled--Q3nCd select-trigger--is-type-filled--4DySC trigger"
                                                aria-haspopup="listbox" aria-expanded="false"
                                                aria-controls="d335887e-f7bd-4cb0-9e9d-93a25f405f3f"><svg
                                                    class="dropdown-trigger__icon--yrLaj"
                                                    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
                                                    data-t="dropdown-svg" aria-labelledby="dropdown-svg"
                                                    aria-hidden="true" role="img">
                                                    <path d="M7 10h10l-5 5z"></path>
                                                </svg><span
                                                    class="call-to-action--PEidl call-to-action--is-m--RVdkI select-trigger__title-cta--C5-uH select-trigger__title-cta--is-displayed-on-mobile--6oNk1 trigger-text">Deutsch</span><span
                                                    class="text--gq6o- text--is-semibold--AHOYN text--is-xl---ywR- select-trigger__title-truncated--D00zB trigger-text"><span
                                                        class="select-trigger__title-truncated-text--5KH40">Deutsch</span></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script src="/build/_next/static/chunks/webpack-6142b962a05999aa.js" async=""></script>
    <script>(self.__next_f = self.__next_f || []).push([0]); self.__next_f.push([2, null])</script>
    <script>self.__next_f.push([1, "1:HL[\"/build/_next/static/css/2c48d5e67156c5a0.css\",\"style\"]\n2:HL[\"/build/_next/static/css/15495fa0eb960cbc.css\",\"style\"]\n"])</script>
    <script>self.__next_f.push([1, "3:I[12846,[],\"\"]\n5:I[4707,[],\"\"]\n8:I[36423,[],\"\"]\n12:I[61060,[],\"\"]\na:HL[\"/build/assets/fonts/Lato/Lato-Semibold.woff2\",\"font\",{\"crossOrigin\":\"\",\"type\":\"font/woff2\"}]\nb:HL[\"/build/assets/fonts/Lato/Lato-Medium.woff2\",\"font\",{\"crossOrigin\":\"\",\"type\":\"font/woff2\"}]\nc:HL[\"/build/assets/fonts/Lato/Lato-Heavy.woff2\",\"font\",{\"crossOrigin\":\"\",\"type\":\"font/woff2\"}]\nd:HC\"https://imgsrv.crunchyroll.com\"\ne:HC\"https://eec.crunchyroll.com\"\nf:HC\"https://static.crunchyroll.com\"\n6:[\"locale\",\"en\",\"d\"]\n7:[\"pathname\",\"\",\"oc\"]\n13:[]\n0:[\"$\",\"$L3\",null,{\"buildId\":\"18HVg4KuzjAshDvwdRZOj\",\"assetPrefix\":\"/build\",\"urlParts\":[\"\",\"en\"],\"initialTree\":[\"\",{\"children\":[[\"locale\",\"en\",\"d\"],{\"children\":[[\"pathname\",\"\",\"oc\"],{\"children\":[\"__PAGE__?{\\\"locale\\\":\\\"en\\\"}\",{}]}]}]},\"$undefined\",\"$undefined\",true],\"initialSeedData\":[\"\",{\"children\":[[\"locale\",\"en\",\"d\"],{\"children\":[[\"pathname\",\"\",\"oc\"],{\"children\":[\"__PAGE__\",{},[[\"$L4\",null,null],null],null]},[null,[\"$\",\"$L5\",null,{\"parallelRouterKey\":\"children\",\"segmentPath\":[\"children\",\"$6\",\"children\",\"$7\",\"children\"],\"error\":\"$undefined\",\"errorStyles\":\"$undefined\",\"errorScripts\":\"$undefined\",\"template\":[\"$\",\"$L8\",null,{}],\"templateStyles\":\"$undefined\",\"templateScripts\":\"$undefined\",\"notFound\":\"$undefined\",\"notFoundStyles\":\"$undefined\"}]],[[\"$\",\"div\",null,{\"className\":\"loading--9nt-6 erc-app-shell blank\",\"data-t\":\"$undefined\",\"style\":{\"--loading__animation-visibility\":\"hidden\"},\"children\":\"$undefined\"}],[],[]]]},[[null,\"$L9\"],null],null]},[[[[\"$\",\"link\",\"0\",{\"rel\":\"stylesheet\",\"href\":\"/build/_next/static/css/2c48d5e67156c5a0.css\",\"precedence\":\"next\",\"crossOrigin\":\"$undefined\"}],[\"$\",\"link\",\"1\",{\"rel\":\"stylesheet\",\"href\":\"/build/_next/static/css/15495fa0eb960cbc.css\",\"precedence\":\"next\",\"crossOrigin\":\"$undefined\"}]],\"$L10\"],null],null],\"couldBeIntercepted\":false,\"initialHead\":[null,\"$L11\"],\"globalErrorComponent\":\"$12\",\"missingSlots\":\"$W13\"}]\n"])</script>
    <script>self.__next_f.push([1, "14:I[3544,[\"9245\",\"static/chunks/9245-ead89068752fddd5.js\",\"467\",\"static/chunks/467-c4e431920d555f16.js\",\"3666\",\"static/chunks/3666-af0033ce304ec0af.js\",\"7507\",\"static/chunks/7507-f7b8f16ce2d0fe81.js\",\"6252\",\"static/chunks/6252-5b9fabbb56757527.js\",\"2335\",\"static/chunks/2335-1c0d4df5e7cd6b7c.js\",\"4271\",\"static/chunks/4271-29a702866671b47e.js\",\"3241\",\"static/chunks/3241-c656705d2176da50.js\",\"2077\",\"static/chunks/2077-c4b20c6ce179bee2.js\",\"9056\",\"static/chunks/9056-7a3119db7080ef7c.js\",\"6309\",\"static/chunks/6309-5ae8d9934f7afdf9.js\",\"6035\",\"static/chunks/6035-0ad2d60ccb21e6d0.js\",\"5434\",\"static/chunks/5434-ed53304f8ef95bf8.js\",\"8343\",\"static/chunks/8343-acb091498012eee0.js\",\"8003\",\"static/chunks/8003-1e9267bfc29cfdf6.js\",\"2848\",\"static/chunks/2848-954008d634b30e67.js\",\"5767\",\"static/chunks/5767-36b4420d2af5e11f.js\",\"3185\",\"static/chunks/app/layout-8059ccfbd735ab21.js\"],\"HelmetProvider\"]\n15:I[88003,[\"9245\",\"static/chunks/9245-ead89068752fddd5.js\",\"467\",\"static/chunks/467-c4e431920d555f16.js\",\"3666\",\"static/chunks/3666-af0033ce304ec0af.js\",\"7507\",\"static/chunks/7507-f7b8f16ce2d0fe81.js\",\"6252\",\"static/chunks/6252-5b9fabbb56757527.js\",\"2335\",\"static/chunks/2335-1c0d4df5e7cd6b7c.js\",\"4271\",\"static/chunks/4271-29a702866671b47e.js\",\"3241\",\"static/chunks/3241-c656705d2176da50.js\",\"2077\",\"static/chunks/2077-c4b20c6ce179bee2.js\",\"9056\",\"static/chunks/9056-7a3119db7080ef7c.js\",\"6309\",\"static/chunks/6309-5ae8d9934f7afdf9.js\",\"6035\",\"static/chunks/6035-0ad2d60ccb21e6d0.js\",\"5434\",\"static/chunks/5434-ed53304f8ef95bf8.js\",\"8343\",\"static/chunks/8343-acb091498012eee0.js\",\"8003\",\"static/chunks/8003-1e9267bfc29cfdf6.js\",\"2848\",\"static/chunks/2848-954008d634b30e67.js\",\"5767\",\"static/chunks/5767-36b4420d2af5e11f.js\",\"3185\",\"static/chunks/app/layout-8059ccfbd735ab21.js\"],\"\"]\n17:I[54218,[\"9245\",\"static/chunks/9245-ead89068752fddd5.js\",\"467\",\"static/chunks/467-c4e431920d555f16.js\",\"3666\",\"static/chunks/3666-af0033ce304ec0af.js\",\"7507\",\"static/chunks/7507-f7b8f16ce2d0fe81.js\",\"6252\",\"static/chunks/6252-5b9fabbb56757527.js\",\"2335\",\"static/"])</script>
    <script>self.__next_f.push([1, "chunks/2335-1c0d4df5e7cd6b7c.js\",\"3241\",\"static/chunks/3241-c656705d2176da50.js\",\"2077\",\"static/chunks/2077-c4b20c6ce179bee2.js\",\"9056\",\"static/chunks/9056-7a3119db7080ef7c.js\",\"6309\",\"static/chunks/6309-5ae8d9934f7afdf9.js\",\"6035\",\"static/chunks/6035-0ad2d60ccb21e6d0.js\",\"5434\",\"static/chunks/5434-ed53304f8ef95bf8.js\",\"8343\",\"static/chunks/8343-acb091498012eee0.js\",\"7153\",\"static/chunks/app/%5Blocale%5D/%5B%5B...pathname%5D%5D/loading-46f6b9ab07932dd0.js\"],\"default\"]\n18:I[42751,[\"9245\",\"static/chunks/9245-ead89068752fddd5.js\",\"467\",\"static/chunks/467-c4e431920d555f16.js\",\"3666\",\"static/chunks/3666-af0033ce304ec0af.js\",\"7507\",\"static/chunks/7507-f7b8f16ce2d0fe81.js\",\"6252\",\"static/chunks/6252-5b9fabbb56757527.js\",\"2335\",\"static/chunks/2335-1c0d4df5e7cd6b7c.js\",\"4271\",\"static/chunks/4271-29a702866671b47e.js\",\"3241\",\"static/chunks/3241-c656705d2176da50.js\",\"2077\",\"static/chunks/2077-c4b20c6ce179bee2.js\",\"9056\",\"static/chunks/9056-7a3119db7080ef7c.js\",\"6309\",\"static/chunks/6309-5ae8d9934f7afdf9.js\",\"6035\",\"static/chunks/6035-0ad2d60ccb21e6d0.js\",\"5434\",\"static/chunks/5434-ed53304f8ef95bf8.js\",\"8343\",\"static/chunks/8343-acb091498012eee0.js\",\"8003\",\"static/chunks/8003-1e9267bfc29cfdf6.js\",\"2848\",\"static/chunks/2848-954008d634b30e67.js\",\"5767\",\"static/chunks/5767-36b4420d2af5e11f.js\",\"3185\",\"static/chunks/app/layout-8059ccfbd735ab21.js\"],\"default\"]\n16:T1c93,"])</script>
    <script>self.__next_f.push([1, "window.__APP_CONFIG__ = {\"cookie\":{\"domain\":\"crunchyroll.com\",\"path\":\"/\",\"expires\":-1,\"sameSite\":\"Lax\",\"secure\":true,\"httpOnly\":false},\"logger\":{\"enabled\":true},\"debug\":{\"enabled\":false},\"datadog\":{\"apm\":{\"enabled\":true},\"browserRum\":{\"env\":\"prod\",\"applicationId\":\"f10c0867-3aa9-4179-a957-bcb2522940fc\",\"clientToken\":\"pub6b0c3cc3e86bd646a5c19b3b4a2a45af\",\"site\":\"us5.datadoghq.com\",\"service\":\"cxweb\",\"sessionSampleRate\":20,\"sessionReplaySampleRate\":0,\"trackInteractions\":true,\"trackResources\":true,\"defaultPrivacyLevel\":\"mask-user-input\",\"trackViewsManually\":true,\"enableExperimentalFeatures\":[\"feature_flags\"]}},\"braze\":{\"apiKey\":\"80f403d2-1c18-471d-b0ef-243d1d646436\",\"sdkEndpoint\":\"sdk.iad-03.braze.com\"},\"drm\":{\"dashRolloutPercent\":100,\"fairplayCertificateUrl\":\"https://lic.staging.drmtoday.com/license-server-fairplay/cert/\",\"playreadyCertificateUrl\":\"https://lic.staging.drmtoday.com//license-proxy-headerauth/drmtoday/RightsManager.asmx\",\"widevineCertificateUrl\":\"https://lic.staging.drmtoday.com/license-proxy-widevine/cenc/\"},\"darkFeatureConfig\":{\"rolloutFeatures\":{\"changePlan\":\"2b96c0bcf487cbda6ae6c3787c499b0911b7d805b6c4ecb7066c7a9c8e63313f\",\"gatedHomepageABTest\":\"00b87f139e5571bff242922dd6028826c18685c6d433433b4268113771812884\"},\"developmentFeatures\":{\"adConfigId\":\"34a958a196f6e7271b792e5a49969279c71495c4057cf0fbaa784079661eff47\",\"alexandria\":\"f8ce85591c31f9f949a210e89e1337ba902745da3835682d114f55ba720995c9\",\"flashMessageTimeout\":\"ee5bb0ae1982555a6bb40bca8b306e793c3dfe4bec4ba1f230ead3baea63f1de\",\"oneAdPerMidroll\":\"28530273e4a7ceba936d748b9a80f808254a5f00cbb36f173447dfc8f61bdad1\",\"strictMode\":\"adc72b417b58bb9970bf5ac02fc275acf92977f3ae3c602ab638f1f39c243155\",\"vilosUrl\":\"79fd1e27d68052f4e55907d20273b1334df964a9c89e19314bbd1a9ec44ad287\",\"countryOverride\":\"8e4edb64f5ae8437bd9ddd232f0ea4647927979a9a7d775e793de6ee62414ea6\",\"videoQualitySelector\":\"28a117b375f227cef52db075ca26fa10f8442b6aef01bc732ca131de8863e527\",\"lrxUa\":\"e68028df98391faaedb64f48f57aa97b71cef5d7e62da2f2dba41c715b28d3ec\",\"premiumCtaWatchPage\":\"bbaf42ad1a9ea0b0a25490df659f80cf2a944d0e3496c0fccf66e4899cf0a186\",\"partnersIntegration\":\"63cc0ffa07ef14913b073bb931bf6403939103ba736850bcb723454706a14580\",\"endSlateRecommendations\":\"8ce2308787e85db880f0b12baccffbf83281c49cc8ec392add92ceee5c3a2362\",\"navABtest\":\"12664a7a11fb702efeba3a49b938753e7aae38eeeaf27c97bed1ab8f3f39ae1c\",\"comingSoon\":\"845503e75459d7eeb8cca2890e6ff36be9da9bc8bc22b0e9242c5d84aba9c651\",\"indiaRatings\":\"72f7ead393b1ad8a10b9d41b4a45847be6ef5daa9549b290207e1678031cc3a6\",\"australiaRatings\":\"422f489431b5afdc727f9af8fa44c1b76af56dc0a6154951b809f72d1e760a5d\",\"samsungCheckout\":\"26e78d6eea65e3e03bf0edd943a02acd52a46cbd32e1b60626224359c490420a\"},\"storageKey\":\"efg_state\",\"domain\":\"crunchyroll.com\",\"securedRoutes\":[\"/feature(?![\\\\w\\\\d])\",[\"/feature(?![wd])\"]],\"computedFeatureHashMap\":{\"changePlan\":\"2b96c0bcf487cbda6ae6c3787c499b0911b7d805b6c4ecb7066c7a9c8e63313f\",\"gatedHomepageABTest\":\"00b87f139e5571bff242922dd6028826c18685c6d433433b4268113771812884\",\"adConfigId\":\"34a958a196f6e7271b792e5a49969279c71495c4057cf0fbaa784079661eff47\",\"alexandria\":\"f8ce85591c31f9f949a210e89e1337ba902745da3835682d114f55ba720995c9\",\"flashMessageTimeout\":\"ee5bb0ae1982555a6bb40bca8b306e793c3dfe4bec4ba1f230ead3baea63f1de\",\"oneAdPerMidroll\":\"28530273e4a7ceba936d748b9a80f808254a5f00cbb36f173447dfc8f61bdad1\",\"strictMode\":\"adc72b417b58bb9970bf5ac02fc275acf92977f3ae3c602ab638f1f39c243155\",\"vilosUrl\":\"79fd1e27d68052f4e55907d20273b1334df964a9c89e19314bbd1a9ec44ad287\",\"countryOverride\":\"8e4edb64f5ae8437bd9ddd232f0ea4647927979a9a7d775e793de6ee62414ea6\",\"videoQualitySelector\":\"28a117b375f227cef52db075ca26fa10f8442b6aef01bc732ca131de8863e527\",\"lrxUa\":\"e68028df98391faaedb64f48f57aa97b71cef5d7e62da2f2dba41c715b28d3ec\",\"premiumCtaWatchPage\":\"bbaf42ad1a9ea0b0a25490df659f80cf2a944d0e3496c0fccf66e4899cf0a186\",\"partnersIntegration\":\"63cc0ffa07ef14913b073bb931bf6403939103ba736850bcb723454706a14580\",\"endSlateRecommendations\":\"8ce2308787e85db880f0b12baccffbf83281c49cc8ec392add92ceee5c3a2362\",\"navABtest\":\"12664a7a11fb702efeba3a49b938753e7aae38eeeaf27c97bed1ab8f3f39ae1c\",\"comingSoon\":\"845503e75459d7eeb8cca2890e6ff36be9da9bc8bc22b0e9242c5d84aba9c651\",\"indiaRatings\":\"72f7ead393b1ad8a10b9d41b4a45847be6ef5daa9549b290207e1678031cc3a6\",\"australiaRatings\":\"422f489431b5afdc727f9af8fa44c1b76af56dc0a6154951b809f72d1e760a5d\",\"samsungCheckout\":\"26e78d6eea65e3e03bf0edd943a02acd52a46cbd32e1b60626224359c490420a\"}},\"staticDomain\":\"https://www.crunchyroll.com\",\"assetsPath\":\"/build\",\"assetsBuildPath\":\"\",\"baseSiteUrl\":\"https://www.crunchyroll.com\",\"baseStaticUrl\":\"https://static.crunchyroll.com\",\"baseSsoUrl\":\"https://sso.crunchyroll.com\",\"imgSrvUrl\":\"https://imgsrv.crunchyroll.com/cdn-cgi/image\",\"incentivesConductorServiceUrl\":\"https://cr-incentives-conductor.prd.crunchyrollsvc.com\",\"newsServiceUrl\":\"https://cr-news-api-service.prd.crunchyrollsvc.com/v1\",\"vilosConfig\":{\"vilosPlayerUrl\":\"https://static.crunchyroll.com/vilos-v2/web/vilos/player.html\",\"vilosApiDomain\":\"https://www.crunchyroll.com\",\"playServiceUrl\":\"https://www.crunchyroll.com/playback\",\"defaultUrls\":{\"prod\":\"https://www.crunchyroll.com/playback\",\"dev\":\"https://cr-play-service.dev.crunchyrollsvc.com\",\"staging\":\"https://stage.crunchyroll.com/playback\"}},\"cxApiParams\":{\"apiDomain\":\"https://www.crunchyroll.com\",\"accountAuthClientId\":\"noaihdevm_6iyg0a8l0q\",\"anonClientId\":\"cr_web\",\"deviceIdDomain\":\".crunchyroll.com\"},\"redirectRoutes\":[{\"url\":\"/maintenance\",\"patterns\":[],\"statusCode\":302},{\"url\":\"/simulcasts\",\"patterns\":[\"/videos/(drama|anime)/simulcasts\"],\"statusCode\":301},{\"url\":\"/series/GR751KNZY/attack-on-titan\",\"patterns\":[\"/series/G24H1NM05\"],\"statusCode\":301},{\"url\":\"/series/G6DQDD3WR/fairy-tail\",\"patterns\":[\"/series/G0XHWM9M\"],\"statusCode\":301},{\"url\":\"/series/GY8VM8MWY/haikyu\",\"patterns\":[\"/series/GXJHM3980\"],\"statusCode\":301},{\"url\":\"/series/G6NQ5DWZ6/my-hero-academia\",\"patterns\":[\"/series/GYNV9DP2R\"],\"statusCode\":301},{\"url\":\"/series/GRE50KV36/black-clover\",\"patterns\":[\"/series/gy1xx0n0y\"],\"statusCode\":301},{\"url\":\"/series/G6GG91P26/food-wars-shokugeki-no-soma\",\"patterns\":[\"/series/GR0XP5V9Y\"],\"statusCode\":301},{\"url\":\"/videos/alphabetical\",\"patterns\":[\"/videos/(drama|anime)/alpha\"],\"statusCode\":301},{\"url\":\"/videos/new\",\"patterns\":[\"/videos/(drama|anime)/updated\"],\"statusCode\":301},{\"url\":\"/videos/popular\",\"patterns\":[\"/videos/anime(?!/\\\\w)\"],\"statusCode\":301},{\"url\":\"/history\",\"patterns\":[\"/home/history\"],\"statusCode\":301},{\"url\":\"/\",\"patterns\":[\"/device_activated\"],\"statusCode\":301},{\"url\":\"/\",\"patterns\":[\"/comics/manga/*\"],\"statusCode\":301},{\"url\":\"/\",\"patterns\":[\"/manga/\\\\w+/read/\\\\w+\"],\"statusCode\":301},{\"url\":\"/\",\"patterns\":[\"^/manga/?$\"],\"statusCode\":301},{\"url\":\"/\",\"patterns\":[\"^/lineup/manga([/?#]\\\\S*)*$\"],\"statusCode\":301},{\"url\":\"/search\",\"patterns\":[\"^/search-classic([/?#]\\\\S*)*$\"],\"statusCode\":301},{\"url\":\"/\",\"patterns\":[\"^/(forumtopic|forumcategory)(-\\\\d*)?([/?#]\\\\S*)*$\"],\"statusCode\":301},{\"url\":\"/\",\"patterns\":[\"^/forum([/?#]\\\\S*)*$\"],\"statusCode\":301},{\"url\":\"/\",\"patterns\":[\"^/library([/?#]\\\\S*)*$\"],\"statusCode\":301}],\"authorizedRoutes\":[\"^/account\",\"^/profile/email\",\"^/watchlist\",\"^/history\",\"^/crunchylists\",\"^/notifications\",\"^/profiles\"],\"payPal\":{\"env\":\"production\"},\"NODE_ENV\":\"production\",\"STAGE\":\"prd\",\"appVersion\":\"675184e8e123e39e2c331789199d936ee49de921\"}"])</script>
    <script>self.__next_f.push([1, "10:[\"$\",\"$L14\",null,{\"children\":[\"$\",\"html\",null,{\"children\":[[\"$\",\"head\",null,{\"children\":[[\"$\",\"title\",null,{\"children\":\"Crunchyroll: Watch Popular Anime, Play Games \u0026 Shop Online\"}],[\"$\",\"script\",null,{\"id\":\"segment-fetch-credentials\",\"dangerouslySetInnerHTML\":{\"__html\":\"\\n                  const checkValue = value =\u003e\\n                    value?.startsWith?.(\\n                      'https://eec.crunchyroll.com/v1'\\n                    );\\n                  const getURLValue = arg =\u003e arg instanceof URL \u0026\u0026 arg.origin;\\n                  const getRequestValue = arg =\u003e arg instanceof Request \u0026\u0026 arg.url;\\n\\n                  const originalFetch = window.fetch;\\n\\n                  window.fetch = function (arg, options = {}) {\\n                    try {\\n                      if (checkValue(getURLValue(arg) || getRequestValue(arg) || arg)) {\\n                        options.credentials = 'include';\\n                      }\\n\\n                      return originalFetch(arg, options);\\n                    } catch (e) {\\n                      console.error('Error in fetch fix', e);\\n\\n                      return originalFetch(arg, options);\\n                    }\\n                  };\\n            \"}}],[\"$\",\"$L15\",null,{\"strategy\":\"beforeInteractive\",\"id\":\"sanitize-pathname\",\"dangerouslySetInnerHTML\":{\"__html\":\"\\n            (function() {\\n              const url = new URL(window.location.href);\\n\\n              const originalPathname = url.pathname;\\n              const sanitizedPathname = originalPathname.replaceAll(/\\\\/{2,}/g, '/');\\n\\n              if (sanitizedPathname !== originalPathname) {\\n                url.pathname = sanitizedPathname;\\n                window.history.replaceState(null, '', url.toString());\\n                }\\n            })()\\n          \"}}],[\"$\",\"$L15\",null,{\"id\":\"prerender-not-ready\",\"strategy\":\"beforeInteractive\",\"dangerouslySetInnerHTML\":{\"__html\":\"\\n              window.prerenderReady = false\\n            \"}}],[\"$\",\"$L15\",null,{\"id\":\"prerender-ready\",\"strategy\":\"beforeInteractive\",\"dangerouslySetInnerHTML\":{\"__html\":\"\\n              setTimeout(() =\u003e {\\n                window.prerenderReady = true;\\n              },19000)\\n            \"}}],[\"$\",\"meta\",null,{\"name\":\"prerender-status-code\",\"content\":\"500\"}],[\"$\",\"meta\",null,{\"httpEquiv\":\"X-UA-Compatible\",\"content\":\"IE=edge\"}],[\"$\",\"style\",null,{\"rel\":\"stylesheet\",\"children\":\"\\n          .erc-root-layout {\\n            visibility: hidden;\\n          }\\n\\n          body {\\n            background-color: rgb(0, 0, 0);\\n          }\\n        \"}],[\"$\",\"$L15\",null,{\"strategy\":\"beforeInteractive\",\"id\":\"etp-config\",\"dangerouslySetInnerHTML\":{\"__html\":\"\\n                window.etp = {\\\"src\\\":\\\"https://static.crunchyroll.com/analytics/cr-eec-8.0.1.js\\\",\\\"config\\\":{\\\"analytics\\\":{\\\"writeKey\\\":\\\"VfZ36W4IeP9eT1VqeGPX2DIwq6SeLyW4\\\",\\\"microsoftWriteKey\\\":\\\"HbnMM2mSIKuwfaYearW0ioRSLoao1ljF\\\",\\\"defaultApiHost\\\":\\\"eec.crunchyroll.com/v1\\\",\\\"fallbackLibraryHost\\\":\\\"sa.etp-prod.com/analytics.js/v1/\\\",\\\"gtmId\\\":\\\"GTM-PK7T4JG\\\"},\\\"ccpa\\\":{\\\"userConsentConfig\\\":{\\\"cookieDomain\\\":\\\"beta.crunchyroll.com\\\",\\\"domId\\\":\\\"1bd5662a-1ef1-4d20-bea2-ea9557d3df42\\\",\\\"src\\\":\\\"https://cdn.cookielaw.org/scripttemplates/otSDKStub.js\\\"}},\\\"oneTrust\\\":{\\\"sdkSrc\\\":\\\"https://cdn.cookielaw.org/scripttemplates/otSDKStub.js\\\",\\\"domainScript\\\":\\\"9470b86f-5b87-4646-a4f7-2f2916b2a883\\\"}}};\\n                if (window.document.referrer === 'app-info://platform/microsoft-store') {\\n                  window.etp.config.analytics.writeKey = window.etp.config.analytics.microsoftWriteKey\\n                }\\n              \"}}],[\"$\",\"$L15\",null,{\"id\":\"etp-analytics\",\"type\":\"text/javascript\",\"strategy\":\"beforeInteractive\",\"src\":\"https://static.crunchyroll.com/analytics/cr-eec-8.0.1.js\"}],[\"$\",\"script\",null,{\"id\":\"app-config\",\"dangerouslySetInnerHTML\":{\"__html\":\"$16\"}}]]}],[\"$\",\"body\",null,{\"className\":\"scroll-block--is-blocked--eO-YO\",\"children\":[[\"$\",\"$L17\",null,{}],[\"$\",\"div\",null,{\"id\":\"content\",\"className\":\"erc-root-layout\",\"children\":[\"$\",\"$L5\",null,{\"parallelRouterKey\":\"children\",\"segmentPath\":[\"children\"],\"error\":\"$undefined\",\"errorStyles\":\"$undefined\",\"errorScripts\":\"$undefined\",\"template\":[\"$\",\"$L8\",null,{}],\"templateStyles\":\"$undefined\",\"templateScripts\":\"$undefined\",\"notFound\":[[\"$\",\"title\",null,{\"children\":\"404: This page could not be found.\"}],[\"$\",\"div\",null,{\"style\":{\"fontFamily\":\"system-ui,\\\"Segoe UI\\\",Roboto,Helvetica,Arial,sans-serif,\\\"Apple Color Emoji\\\",\\\"Segoe UI Emoji\\\"\",\"height\":\"100vh\",\"textAlign\":\"center\",\"display\":\"flex\",\"flexDirection\":\"column\",\"alignItems\":\"center\",\"justifyContent\":\"center\"},\"children\":[\"$\",\"div\",null,{\"children\":[[\"$\",\"style\",null,{\"dangerouslySetInnerHTML\":{\"__html\":\"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}\"}}],[\"$\",\"h1\",null,{\"className\":\"next-error-h1\",\"style\":{\"display\":\"inline-block\",\"margin\":\"0 20px 0 0\",\"padding\":\"0 23px 0 0\",\"fontSize\":24,\"fontWeight\":500,\"verticalAlign\":\"top\",\"lineHeight\":\"49px\"},\"children\":\"404\"}],[\"$\",\"div\",null,{\"style\":{\"display\":\"inline-block\"},\"children\":[\"$\",\"h2\",null,{\"style\":{\"fontSize\":14,\"fontWeight\":400,\"lineHeight\":\"49px\",\"margin\":0},\"children\":\"This page could not be found.\"}]}]]}]}]],\"notFoundStyles\":[]}]}],[\"$\",\"$L18\",null,{}]]}]]}]}]\n"])</script>
    <script>self.__next_f.push([1, "11:[[\"$\",\"meta\",\"0\",{\"name\":\"viewport\",\"content\":\"width=device-width, initial-scale=1, maximum-scale=5\"}],[\"$\",\"meta\",\"1\",{\"name\":\"theme-color\",\"content\":\"#1b1a26\"}],[\"$\",\"meta\",\"2\",{\"charSet\":\"utf-8\"}],[\"$\",\"link\",\"3\",{\"rel\":\"manifest\",\"href\":\"/manifest.json\",\"crossOrigin\":\"use-credentials\"}],[\"$\",\"link\",\"4\",{\"rel\":\"icon\",\"href\":\"/build/assets/img/favicons/favicon-v2-16x16.png\",\"sizes\":\"16x16\",\"type\":\"image/png\"}],[\"$\",\"link\",\"5\",{\"rel\":\"icon\",\"href\":\"/build/assets/img/favicons/favicon-v2-32x32.png\",\"sizes\":\"32x32\",\"type\":\"image/png\"}],[\"$\",\"link\",\"6\",{\"rel\":\"icon\",\"href\":\"/build/assets/img/favicons/favicon-v2-96x96.png\",\"sizes\":\"96x96\",\"type\":\"image/png\"}],[\"$\",\"link\",\"7\",{\"rel\":\"apple-touch-icon\",\"href\":\"/build/assets/img/favicons/apple-touch-icon-v2-57x57.png\",\"sizes\":\"57x57\"}],[\"$\",\"link\",\"8\",{\"rel\":\"apple-touch-icon\",\"href\":\"/build/assets/img/favicons/apple-touch-icon-v2-60x60.png\",\"sizes\":\"60x60\"}],[\"$\",\"link\",\"9\",{\"rel\":\"apple-touch-icon\",\"href\":\"/build/assets/img/favicons/apple-touch-icon-v2-72x72.png\",\"sizes\":\"72x72\"}],[\"$\",\"link\",\"10\",{\"rel\":\"apple-touch-icon\",\"href\":\"/build/assets/img/favicons/apple-touch-icon-v2-76x76.png\",\"sizes\":\"76x76\"}],[\"$\",\"link\",\"11\",{\"rel\":\"apple-touch-icon\",\"href\":\"/build/assets/img/favicons/apple-touch-icon-v2-114x114.png\",\"sizes\":\"114x114\"}]]\n4:null\n"])</script>
    <script>self.__next_f.push([1, "19:I[16456,[\"7507\",\"static/chunks/7507-f7b8f16ce2d0fe81.js\",\"2335\",\"static/chunks/2335-1c0d4df5e7cd6b7c.js\",\"4271\",\"static/chunks/4271-29a702866671b47e.js\",\"8887\",\"static/chunks/8887-35a2a7fc79d6638e.js\",\"2077\",\"static/chunks/2077-c4b20c6ce179bee2.js\",\"1844\",\"static/chunks/1844-0b8d9101107308ba.js\",\"7513\",\"static/chunks/7513-848cf5c7929840ce.js\",\"2848\",\"static/chunks/2848-954008d634b30e67.js\",\"8421\",\"static/chunks/8421-0b9cdd54efe42e86.js\",\"3513\",\"static/chunks/3513-f29809099ff44bc4.js\",\"6138\",\"static/chunks/6138-5386d90ca62a55f6.js\",\"5767\",\"static/chunks/5767-36b4420d2af5e11f.js\",\"1203\",\"static/chunks/app/%5Blocale%5D/layout-ce6fd47d6030c370.js\"],\"default\"]\n1a:I[9795,[\"7507\",\"static/chunks/7507-f7b8f16ce2d0fe81.js\",\"2335\",\"static/chunks/2335-1c0d4df5e7cd6b7c.js\",\"4271\",\"static/chunks/4271-29a702866671b47e.js\",\"8887\",\"static/chunks/8887-35a2a7fc79d6638e.js\",\"2077\",\"static/chunks/2077-c4b20c6ce179bee2.js\",\"1844\",\"static/chunks/1844-0b8d9101107308ba.js\",\"7513\",\"static/chunks/7513-848cf5c7929840ce.js\",\"2848\",\"static/chunks/2848-954008d634b30e67.js\",\"8421\",\"static/chunks/8421-0b9cdd54efe42e86.js\",\"3513\",\"static/chunks/3513-f29809099ff44bc4.js\",\"6138\",\"static/chunks/6138-5386d90ca62a55f6.js\",\"5767\",\"static/chunks/5767-36b4420d2af5e11f.js\",\"1203\",\"static/chunks/app/%5Blocale%5D/layout-ce6fd47d6030c370.js\"],\"default\"]\n9:[\"$\",\"$L19\",null,{\"locale\":\"en-US\",\"now\":\"$D2025-06-02T10:45:31.493Z\",\"timeZone\":\"UTC\",\"children\":[\"$\",\"$L1a\",null,{\"children\":\"$L1b\"}]}]\n"])</script>
    <script>self.__next_f.push([1, "1c:I[89466,[\"7507\",\"static/chunks/7507-f7b8f16ce2d0fe81.js\",\"2335\",\"static/chunks/2335-1c0d4df5e7cd6b7c.js\",\"4271\",\"static/chunks/4271-29a702866671b47e.js\",\"8887\",\"static/chunks/8887-35a2a7fc79d6638e.js\",\"2077\",\"static/chunks/2077-c4b20c6ce179bee2.js\",\"1844\",\"static/chunks/1844-0b8d9101107308ba.js\",\"7513\",\"static/chunks/7513-848cf5c7929840ce.js\",\"2848\",\"static/chunks/2848-954008d634b30e67.js\",\"8421\",\"static/chunks/8421-0b9cdd54efe42e86.js\",\"3513\",\"static/chunks/3513-f29809099ff44bc4.js\",\"6138\",\"static/chunks/6138-5386d90ca62a55f6.js\",\"5767\",\"static/chunks/5767-36b4420d2af5e11f.js\",\"1203\",\"static/chunks/app/%5Blocale%5D/layout-ce6fd47d6030c370.js\"],\"default\"]\n1d:I[6422,[\"7507\",\"static/chunks/7507-f7b8f16ce2d0fe81.js\",\"2335\",\"static/chunks/2335-1c0d4df5e7cd6b7c.js\",\"4271\",\"static/chunks/4271-29a702866671b47e.js\",\"8887\",\"static/chunks/8887-35a2a7fc79d6638e.js\",\"2077\",\"static/chunks/2077-c4b20c6ce179bee2.js\",\"1844\",\"static/chunks/1844-0b8d9101107308ba.js\",\"7513\",\"static/chunks/7513-848cf5c7929840ce.js\",\"2848\",\"static/chunks/2848-954008d634b30e67.js\",\"8421\",\"static/chunks/8421-0b9cdd54efe42e86.js\",\"3513\",\"static/chunks/3513-f29809099ff44bc4.js\",\"6138\",\"static/chunks/6138-5386d90ca62a55f6.js\",\"5767\",\"static/chunks/5767-36b4420d2af5e11f.js\",\"1203\",\"static/chunks/app/%5Blocale%5D/layout-ce6fd47d6030c370.js\"],\"default\"]\n1e:I[83145,[\"7507\",\"static/chunks/7507-f7b8f16ce2d0fe81.js\",\"2335\",\"static/chunks/2335-1c0d4df5e7cd6b7c.js\",\"4271\",\"static/chunks/4271-29a702866671b47e.js\",\"8887\",\"static/chunks/8887-35a2a7fc79d6638e.js\",\"2077\",\"static/chunks/2077-c4b20c6ce179bee2.js\",\"1844\",\"static/chunks/1844-0b8d9101107308ba.js\",\"7513\",\"static/chunks/7513-848cf5c7929840ce.js\",\"2848\",\"static/chunks/2848-954008d634b30e67.js\",\"8421\",\"static/chunks/8421-0b9cdd54efe42e86.js\",\"3513\",\"static/chunks/3513-f29809099ff44bc4.js\",\"6138\",\"static/chunks/6138-5386d90ca62a55f6.js\",\"5767\",\"static/chunks/5767-36b4420d2af5e11f.js\",\"1203\",\"static/chunks/app/%5Blocale%5D/layout-ce6fd47d6030c370.js\"],\"default\"]\n1f:I[77812,[\"7507\",\"static/chunks/7507-f7b8f16ce"])</script>
    <script>self.__next_f.push([1, "2d0fe81.js\",\"2335\",\"static/chunks/2335-1c0d4df5e7cd6b7c.js\",\"4271\",\"static/chunks/4271-29a702866671b47e.js\",\"8887\",\"static/chunks/8887-35a2a7fc79d6638e.js\",\"2077\",\"static/chunks/2077-c4b20c6ce179bee2.js\",\"1844\",\"static/chunks/1844-0b8d9101107308ba.js\",\"7513\",\"static/chunks/7513-848cf5c7929840ce.js\",\"2848\",\"static/chunks/2848-954008d634b30e67.js\",\"8421\",\"static/chunks/8421-0b9cdd54efe42e86.js\",\"3513\",\"static/chunks/3513-f29809099ff44bc4.js\",\"6138\",\"static/chunks/6138-5386d90ca62a55f6.js\",\"5767\",\"static/chunks/5767-36b4420d2af5e11f.js\",\"1203\",\"static/chunks/app/%5Blocale%5D/layout-ce6fd47d6030c370.js\"],\"default\"]\n20:I[5003,[\"7507\",\"static/chunks/7507-f7b8f16ce2d0fe81.js\",\"2335\",\"static/chunks/2335-1c0d4df5e7cd6b7c.js\",\"4271\",\"static/chunks/4271-29a702866671b47e.js\",\"8887\",\"static/chunks/8887-35a2a7fc79d6638e.js\",\"2077\",\"static/chunks/2077-c4b20c6ce179bee2.js\",\"1844\",\"static/chunks/1844-0b8d9101107308ba.js\",\"7513\",\"static/chunks/7513-848cf5c7929840ce.js\",\"2848\",\"static/chunks/2848-954008d634b30e67.js\",\"8421\",\"static/chunks/8421-0b9cdd54efe42e86.js\",\"3513\",\"static/chunks/3513-f29809099ff44bc4.js\",\"6138\",\"static/chunks/6138-5386d90ca62a55f6.js\",\"5767\",\"static/chunks/5767-36b4420d2af5e11f.js\",\"1203\",\"static/chunks/app/%5Blocale%5D/layout-ce6fd47d6030c370.js\"],\"default\"]\n"])</script>
    <script>self.__next_f.push([1, "1b:[\"$\",\"$L1c\",null,{\"initialState\":{\"global\":{\"isAppInert\":null,\"upsell\":{\"isPopupClosable\":true},\"etpConfig\":{},\"flashMessage\":{\"message\":\"\",\"statusType\":\"success\",\"timeoutExpiration\":4000,\"values\":{},\"isFrozen\":false},\"localStorage\":{\"hasSynced\":false},\"persistMessage\":{\"messages\":[]},\"fetchEnvironment\":{\"hasAppLoaded\":false,\"hasAppMounted\":false,\"hasAppFailed\":false,\"appRetryBackoff\":5000,\"clientCountry\":\"\",\"appMountType\":null,\"isSSRBuild\":false,\"isClient\":false},\"viewershipAttribution\":{\"viewershipAttributionChainId\":null,\"viewershipAttributionSourceScreen\":null,\"viewershipAttributionSourceCollection\":null},\"pagePerformance\":{\"hasPageLoaded\":false}},\"layout\":{\"header\":{\"browseMenu\":{\"isDropdownOpen\":false},\"platformSwitcher\":{\"isPlatformSwitcherOpen\":false},\"newsMenu\":{\"isDropdownOpen\":false},\"userMenu\":{\"isDropdownOpen\":false}},\"footer\":{\"isFooterInView\":false}},\"watch\":{\"id\":null,\"moviesIds\":[],\"isWatchContentFetchedOnce\":false,\"isWatchContentParentFetchedOnce\":false,\"videoPlayer\":{\"playService\":null,\"httpErrorCode\":null,\"isInitialPlayheadTimeLoaded\":false,\"videoPlayerRequestTime\":0,\"videoPlayerStartType\":\"\",\"countPlaybackStarted\":0,\"initialPlayheadTime\":0,\"playerPreferences\":{\"isUpNextAutoplayEnabled\":true},\"playbackState\":\"playback_paused\",\"playbackStateToRestore\":null},\"isEpisodeListExpanded\":false,\"isEpisodeListOpen\":false,\"isInEpisodeListSeasonsView\":false,\"premiumDubSelectedVersion\":null,\"upNextDubUnavailableId\":null,\"streamsFetchStatus\":\"IDLE\",\"endSlate\":{\"isVisible\":false,\"allIds\":[],\"byId\":{}}},\"search\":{\"isLoading\":false,\"isLoadingNextPage\":false,\"fetchError\":null,\"series\":{\"ids\":[],\"total\":0},\"topResults\":{\"ids\":[],\"total\":0},\"movieListings\":{\"ids\":[],\"total\":0},\"episodes\":{\"ids\":[],\"total\":0},\"recentSearches\":[],\"music\":{\"ids\":[],\"total\":0}},\"feed\":{\"byId\":{},\"allIds\":[],\"status\":\"IDLE\"},\"content\":{\"media\":{\"byId\":{}},\"playheads\":{\"byId\":{}},\"ratings\":{\"starRating\":{\"byId\":{},\"userRatingById\":{}},\"thumbRating\":{\"allIds\":[],\"byId\":{},\"userRatingById\":{}}},\"upNext\":{\"byId\":{},\"statusById\":{}},\"previousEpisode\":{\"byId\":{},\"statusById\":{}}},\"series\":{\"seasons\":{\"episodesIdsBySeasonId\":{},\"areEpisodesLoading\":false,\"isEpisodesComponentLoading\":true,\"areEpisodesUnavailable\":false,\"hasError\":false},\"episodeSort\":\"asc\",\"featuredMusic\":{\"byId\":{},\"hasResponse\":false},\"copyrightInfo\":{\"byId\":{},\"status\":\"IDLE\"},\"shellLoadedById\":{},\"byId\":{}},\"router\":{\"referrers\":[],\"isNotFound\":false,\"locations\":{\"current\":{\"pathname\":\"/\",\"search\":\"\",\"hash\":\"\",\"state\":\"$undefined\"}},\"routerMetadata\":null,\"redirect\":null,\"isContentServerError\":false},\"simulcast\":{\"allIds\":[],\"status\":\"PENDING\",\"seasonList\":[],\"seasonListStatus\":\"IDLE\"},\"genres\":{\"allIds\":[],\"byId\":{},\"byGuid\":{},\"subgenres\":{\"allIds\":[],\"byId\":{},\"itemsById\":{},\"statusById\":{},\"isFetched\":false,\"isFetchedOnce\":false,\"isError\":false},\"isLoading\":true,\"isFetchedOnce\":false,\"isError\":false},\"browse\":{\"allIds\":[],\"lastDayIds\":[],\"pastWeekIds\":[],\"earlierIds\":[],\"total\":0,\"status\":\"IDLE\",\"isLoadingNextPage\":false,\"inViewportCollections\":[],\"alphabetical\":{\"metadata\":{},\"activeLetter\":null,\"allIds\":[],\"status\":\"PENDING\",\"scrollToLetter\":null}},\"localization\":{\"locale\":\"en-US\",\"messages\":{\"alt.hime\":\"Hime.\",\"alt.yuzu\":\"Yuzu.\",\"alt.chibi_hime\":\"Chibi Hime.\",\"api.fetch_watchlist_error\":\"Sorry, there was a problem displaying your watchlist. Please try again.\",\"api.network_error\":\"Sorry, we encountered a network error. Please try again later.\",\"app.default_page_title\":\"Crunchyroll: Watch Popular Anime, Play Games \u0026 Shop Online\",\"app.offline_message\":\"You are offline. Please check your connection.\",\"app.failed_state.title\":\"Something went wrong\",\"app.failed_state.description\":\"We will refresh this page automatically in {seconds, plural, one {# second} other {# seconds}}\",\"app.failed_state.cta\":\"Try again\",\"anonymous.infobox.title\":\"Account Required\",\"account_restricted.description.create_username_and_verify_email\":\"\u003ccreate-username-cta\u003eCreate a username\u003c/create-username-cta\u003e and \u003cverify-email-cta\u003everify your email address\u003c/verify-email-cta\u003e.\",\"account_restricted.description.create_username\":\"Just \u003ccreate-username-cta\u003ecreate a username\u003c/create-username-cta\u003e.\",\"account_restricted.description.verify_email\":\"Just \u003cverify-email-cta\u003everify your email address\u003c/verify-email-cta\u003e.\",\"account_restricted.modal.description\":\"Then you can fully enjoy Crunchyroll.\",\"account_restricted.modal.close\":\"Do This Later\",\"account_restricted.modal.username.title\":\"Please Create a Username to Continue\",\"account_restricted.modal.username.create_button\":\"Create Username\",\"account_restricted.modal.email.title\":\"Please Verify Your Email Address to Continue\",\"account_restricted.modal.email.verify_button\":\"Send Verification Email\",\"blocked_stream.confirm_mature_description\":\"Please confirm that you are at least 18 years old and would like to enable mature content.\",\"blocked-stream.confirm_mature_button\":\"Yes, I’m 18+\",\"blocked_stream.coming_soon_message\":\"Check back shortly for the video you’re after.\",\"blocked_stream.coming_soon_title\":\"coming soon\",\"blocked_stream.mature_title_for_own_rating_system_country\":\"Mature content\",\"blocked_stream.mature_title_for_universal_rating_country\":\"Restricted content\",\"blocked_stream.unavailable_description\":\"This video is currently unavailable.\",\"blocked_stream.unavailable_title\":\"unavailable\",\"blocked_stream.restricted_stream_alt\":\"Restricted Stream\",\"blocked_stream.maturity_rating_br.title\":\"Mature Content\",\"blocked_stream.maturity_rating_br.description\":\"This cannot be viewed with your current \u003ccta\u003eMaturity Restrictions\u003c/cta\u003e setting.\",\"blocked_stream.maturity_rating_universal.title\":\"Restricted Content\",\"blocked_stream.maturity_rating_universal.description\":\"This cannot be viewed with your current \u003ccta\u003eContent Restrictions\u003c/cta\u003e setting.\",\"blocked_stream.message_for_own_rating_system_country\":\"Please \u003clogin-cta\u003elog in\u003c/login-cta\u003e or \u003csignup-cta\u003ecreate an account\u003c/signup-cta\u003e to watch mature content.\",\"blocked_stream.message_for_universal_rating_country\":\"Please \u003clogin-cta\u003elog in\u003c/login-cta\u003e or \u003csignup-cta\u003ecreate an account\u003c/signup-cta\u003e to watch restricted content.\",\"browse.alphabetical.collection.title\":\"Browse All Anime\",\"browse.new.collection.title\":\"Newly Added Anime\",\"browse.popular.collection.title\":\"Most Popular Anime\",\"browse.alphabetical\":\"Alphabetical\",\"browse.browse_all\":\"Browse All\",\"browse.browse_all_az\":\"Browse All (A-Z)\",\"browse.earlier\":\"Earlier\",\"browse.last_day\":\"Last 24 Hours\",\"browse.new\":\"New\",\"browse.past_week\":\"This Past Week\",\"browse.popular\":\"Popular\",\"browse.view_all\":\"View All\",\"browse.sorting.new\":\"New\",\"browse.sorting.popular\":\"Popular\",\"content.details_table.language_audio\":\"Audio\",\"content.details_table.awards\":\"Awards\",\"content.details_table.language_subtitles\":\"Subtitles\",\"content.details_table.content_advisory\":\"Content Advisory\",\"content.details_table.genres\":\"Genres\",\"current_filters.all_subtitled\":\"All Subtitled\",\"current_filters.all_dubbed\":\"All Dubbed\",\"current_filters.all_series\":\"All Series\",\"current_filters.all_movies\":\"All Movies\",\"current_filters.subtitled_series\":\"Subtitled Series\",\"current_filters.subtitled_movies\":\"Subtitled Movies\",\"current_filters.dubbed_series\":\"Dubbed Series\",\"current_filters.dubbed_movies\":\"Dubbed Movies\",\"current_filters.favorites_only\":\"Favorites Only\",\"current_filters.favorite_subtitled\":\"Favorite Subtitled\",\"current_filters.favorite_dubbed\":\"Favorite Dubbed\",\"current_filters.favorite_series\":\"Favorite Series\",\"current_filters.favorite_movies\":\"Favorite Movies\",\"current_filters.favorite_subtitled_series\":\"Favorite Subtitled Series\",\"current_filters.favorite_dubbed_series\":\"Favorite Dubbed Series\",\"current_filters.favorite_subtitled_movies\":\"Favorite Subtitled Movies\",\"current_filters.favorite_dubbed_movies\":\"Favorite Dubbed Movies\",\"current_filters.all\":\"All\",\"current_filters.dubbed\":\"Dubbed\",\"current_filters.filter\":\"Filter\",\"current_filters.language\":\"Language\",\"current_filters.media\":\"Media\",\"current_filters.movies\":\"Movies\",\"current_filters.reset\":\"Reset Filters\",\"current_filters.series\":\"Series\",\"current_filters.subtitled\":\"Subtitled\",\"current_filters.update_filters\":\"Update Filters\",\"custom_lists.create_list_button_text\":\"Create New List\",\"custom_lists.create_list_modal.title\":\"Create Crunchylist\",\"custom_lists.create_list_modal.input_label\":\"List Name\",\"custom_lists.create_list_modal.submit_button_text\":\"Create List\",\"custom_lists.create_list_modal.cancel_button_text\":\"Cancel\",\"custom_lists.create_list_modal.empty_characters_error\":\"List name required.\",\"custom_lists.create_list_modal.max_eighty_characters_error\":\"Name cannot exceed 80 characters.\",\"custom_lists.empty_list\":\"You don’t have any Crunchylists yet. {linebreak} Let’s create one!\",\"custom_lists.items_list\":\"{itemsCount, plural, one {# Item} other {# Items}}\",\"custom_lists.list_modified_date\":\"Updated on {modifiedDate}\",\"custom_lists.add_list_item.placeholder\":\"Start typing in the search field to find a series to add to your Crunchylist.\",\"episode.meta_title_short\":\"E{episode_number}\",\"episode.meta_title_long\":\"{episode_number, plural, one {# Episode} other {# Episodes}}\",\"episode.meta_title_tag\":\"{season} {episode} - Watch on Crunchyroll\",\"episode.meta_description\":\"Watch {season} {episode}, on Crunchyroll. {description}\",\"expandable_section.fewer_details\":\"Fewer details\",\"expandable_section.more_details\":\"More details\",\"expandable_section.show_less\":\"Show less\",\"expandable_section.show_more\":\"Show more\",\"feed.view_history\":\"View History\",\"feed.view_watchlist\":\"View Watchlist\",\"feed.view_all_description\":\"Still looking for something to watch? {linebreak} Check out our full library\",\"feed.view_all\":\"View all\",\"feed.empty.title\":\"Nothing to see here\",\"feed.empty.subtitle\":\"Try searching or browsing the streaming library for anime to watch.\",\"feed.empty.browse_button\":\"Browse All\",\"feed.empty.try_again_button\":\"Try Again\",\"feed.anonymous_upsell.title\":\"Crunchyroll: Watch Anime Anytime, Anywhere\",\"feed.anonymous_upsell.description\":\"Get all anime and games ad-free, plus download content! Try it free for {duration} days. Cancel anytime.\",\"feed.anonymous_upsell.cta\":\"Start Free Trial\",\"single_card.to_series\":\"To series\",\"single_card.to_movie\":\"To movie\",\"footer.canada_accessibility_feedback\":\"Canadian Accessibility Feedback Process\",\"footer.canada_accessibility_plan\":\"Canadian Accessibility Plan\",\"footer.account\":\"Account\",\"footer.about\":\"About\",\"footer.ad_choices\":\"AdChoices\",\"footer.crunchyroll\":\"Crunchyroll\",\"footer.release_calendar\":\"Release Calendar\",\"footer.browse_popular\":\"Browse Popular\",\"footer.browse_simulcasts\":\"Browse Simulcasts\",\"footer.connect_with_us\":\"Connect With Us\",\"footer.get_apps\":\"Get the Apps\",\"footer.start_free_trial\":\"Start a Free Trial\",\"footer.go_premium\":\"Go Premium\",\"footer.games\":\"Games\",\"footer.help_faq\":\"Help Center\",\"footer.jobs\":\"Jobs\",\"footer.my_account\":\"My Account\",\"footer.navigation\":\"Navigation\",\"footer.news\":\"News\",\"footer.cookie_consent_tool\":\"Cookie Consent Tool\",\"footer.cookie_consent_tool.open_modal\":\"Cookie Consent Tool - open in modal popup\",\"footer.press_inquiries\":\"Press Inquiries\",\"footer.adv_inquiries\":\"Advertising Inquiries\",\"footer.do_not_sell\":\"Do Not Sell or Share My Personal Information\",\"footer.privacy_policy\":\"Privacy Policy\",\"footer.redeem_gift_card\":\"Redeem Gift Card\",\"footer.store\":\"Store\",\"footer.terms\":\"Terms of Use\",\"footer.language\":\"Language\",\"footer.mf_ration\":\"Index 2025 : 72/100\",\"footer.modern_slavery_transparency_statement\":\"Modern Slavery Transparency Statement\",\"footer.sony_logo\":\"Sony Pictures\",\"genres.empty_genres.title\":\"Something Went Wrong\",\"genres.empty_genres.description\":\"Choose another genre or try again.\",\"genres.meta_title_tag\":\"{name} Anime Shows and Movies - Crunchyroll\",\"genres.meta_description\":\"Embark on an anime adventure with Crunchyroll, your ultimate destination for watching a vast collection of anime series and movies. Delve into the captivating worlds of hit titles such as One Piece, Jujutsu Kaisen, Chainsaw Man, and Attack on Titan. Start your free trial today and immerse yourself in the thrilling world of anime with Crunchyroll!\",\"history.cancel\":\"Cancel\",\"history.clear_history\":\"Clear History\",\"history.clear_history_description\":\"This will permanently delete your entire History and reset your progress in all videos. This can’t be undone.\",\"history.clear_success_message\":\"Watch History has been cleared.\",\"history.clear_watch_history\":\"Clear Your History and Viewing Progress?\",\"history.empty_history\":\"Make History... with history. {linebreak} Start watching to fill this feed.\",\"history.fetch_error_message\":\"Something went wrong. Please try again.\",\"history.most_recent\":\"Most Recent\",\"history.remove_item.success\":\"Removed from history\",\"history.remove_item.error\":\"Sorry, there was an error removing {title} from your History. Please try again.\",\"history_card.action_icon.tooltip.remove\":\"Remove\",\"info_tags.coming_soon\":\"Coming soon\",\"info_tags.mature\":\"Mature\",\"info_tags.videos_count\":\"{count, plural, one {# Video} other {# Videos}}\",\"info_tags.new\":\"New\",\"info_tags.premium\":\"Premium\",\"info_tags.pre_order\":\"Pre-order\",\"info_tags.in_stock\":\"In Stock\",\"info_tags.sale\":\"Sale\",\"info_tags.exclusive\":\"Exclusive\",\"info_tags.now_playing\":\"Now Playing\",\"info_tags.live\":\"Live\",\"live_indicator.copy\":\"Live\",\"live.fallback_label\":\"Livestream {datetime}\",\"live.vod_coming_soon\":\"Full episode available soon\",\"maintenance.back_button_text\":\"Go back\",\"maintenance.description\":\"You’ve stumbled upon a page that we’re fixing up for you.\",\"maintenance.home_button_text\":\"Take me home\",\"maintenance.title\":\"This page is under maintenance\",\"menu.premium_member\":\"Premium Member\",\"menu.settings\":\"Settings\",\"menu.switch_profile\":\"Switch Profile\",\"menu.notifications\":\"Notifications\",\"menu.alphabetical\":\"Alphabetical\",\"menu.avatar_alt\":\"User Avatar\",\"menu.browse\":\"Browse\",\"menu.categories\":\"Categories\",\"menu.facebook\":\"Facebook\",\"menu.games\":\"Games\",\"menu.genres\":\"Genres\",\"menu.instagram\":\"Instagram\",\"menu.new\":\"New\",\"menu.news\":\"News\",\"menu.news.all_news\":\"All News\",\"menu.news.anime_awards\":\"Anime Awards\",\"menu.news.crunchyroll_expo\":\"Events \u0026 Experiences\",\"menu.popular\":\"Popular\",\"menu.log_out_title\":\"Log Out\",\"menu.signin_description\":\"Already joined Crunchyroll? Welcome back.\",\"menu.signin_title\":\"Log In\",\"menu.signup_description\":\"Join for free or go Premium.\",\"menu.giftcard_title\":\"Gift Card\",\"menu.giftcard_description\":\"Have a gift card? Redeem it here.\",\"menu.signup_title\":\"Create Account\",\"menu.simulcast_season\":\"Simulcast Season\",\"menu.simulcast\":\"Simulcast\",\"menu.release_calendar\":\"Release Calendar\",\"menu.music_videos_concerts\":\"Music Videos \u0026 Concerts\",\"menu.store\":\"Store\",\"menu.x\":\"X\",\"menu.watchlist\":\"Watchlist\",\"menu.crunchylists\":\"Crunchylists\",\"menu.history\":\"History\",\"menu.youtube\":\"Youtube\",\"menu.tiktok\":\"TikTok\",\"menu.odnoklassniki\":\"Odnoklassniki\",\"menu.vkontakte\":\"VKontakte\",\"menu.upsell.go\":\"Go\",\"menu.upsell.try_free\":\"Try free\",\"menu.upsell.premium\":\"Premium\",\"menu.upsell.aria_label.premium\":\"Go Premium\",\"menu.upsell.aria_label.try_free\":\"Try free Premium\",\"meta_tags.dub\":\"Dub\",\"meta_tags.dubbed\":\"Dubbed\",\"meta_tags.mature\":\"Mature\",\"meta_tags.sub\":\"Sub\",\"meta_tags.sub_dub\":\"Sub | Dub\",\"meta_tags.subtitled\":\"Subtitled\",\"meta.lang.dub.short\":\"Dub {lang}\",\"meta.lang.dub.exact.short\":\"Dub\",\"meta.lang.dub\":\"Dubbed {lang}\",\"meta.lang.dub.exact\":\"Dubbed\",\"meta.lang.sub.short\":\"Sub {lang}\",\"meta.lang.sub.exact.short\":\"Sub\",\"meta.lang.sub\":\"Subtitled {lang}\",\"meta.lang.sub.exact\":\"Subtitled\",\"my_lists.history\":\"History\",\"my_lists.home_button_text\":\"Go to home feed\",\"my_lists.title\":\"My Lists\",\"my_lists.watchlist\":\"Watchlist\",\"my_lists.custom_lists\":\"Crunchylists\",\"single_custom_list.back_link\":\"Back to Crunchylists\",\"single_custom_list.add_item_text_label\":\"Add Series\",\"single_custom_list.add_item_dropdown.see_all_results\":\"See All Results\",\"single_custom_list.settings_dropdown\":\"Settings\",\"single_custom_list.settings_dropdown_rename_option\":\"Rename Crunchylist\",\"single_custom_list.settings_dropdown_delete_option\":\"Delete Crunchylist\",\"single_custom_list.items\":\"Items\",\"single_custom_list.empty_state.description\":\"You can add items to this Crunchylist with the search feature above. Or add to this Crunchylist from an \u003clink\u003eanime’s page\u003c/link\u003e.\",\"no_filtered_results.no_results\":\"No results, but don’t give up\",\"no_filtered_results.remove_filters\":\"Try removing some filters\",\"no_filtered_results.subtitle\":\"Go favorite some shows!\",\"no_filtered_results.title\":\"Favorites is empty\",\"not_found.page_title\":\"Crunchyroll - Page not found\",\"not_found.page_not_found_description\":\"Yuzu says there's nothing to see here!\",\"not_found.page_not_found_title\":\"404 - Page Not Found\",\"not_found.take_home_btn\":\"Take me home\",\"playable_thumbnail.unavailable\":\"Unavailable\",\"playable_thumbnail.watched\":\"Watched\",\"playable_card.see_more\":\"See more\",\"playable_card.play_icon.title\":\"{title} {meta}\",\"playable_card.more_options\":\"More Options\",\"playable_card.mark_as_watched\":\"Mark as Watched\",\"playable_card.watched\":\"Watched\",\"search.all_results\":\"All Results\",\"search.clear\":\"Clear\",\"search.clear_recent\":\"Clear Recent\",\"search.episodes\":\"Episodes\",\"search.episodes_only\":\"Episodes Only\",\"search.music\":\"Music Videos and Concerts\",\"search.music_only\":\"Music Videos and Concerts Only\",\"search.input_placeholder\":\"Search...\",\"search.movies\":\"Movies\",\"search.movies_only\":\"Movies Only\",\"search.empty_results\":\"Sorry, no results were found. Check your spelling or try searching for something else.\",\"search.recent_search_results\":\"Recent Search Results\",\"search.series\":\"Series\",\"search.series_only\":\"Series Only\",\"search.top_results\":\"Top Results\",\"search.see_all\":\"See All\",\"search.see_more\":\"See More\",\"search.series_card_subtitle\":\"{meta}\",\"season.next\":\"Next\",\"season.next_season\":\"Next season\",\"season.previous\":\"Previous\",\"season.previous_season\":\"Previous season\",\"season.prefixed_season_title_v2\":\"{isSeasonNumberEmpty, select, true {{title}} other {{shouldSeasonNumberBePrefixed, select, true {S{seasonNumber}} other {{seasonNumber}}}: {title}}}\",\"season.prefixed_season_title_v2_short\":\"{shouldSeasonNumberBePrefixed, select, true {S{seasonNumber}} other {{seasonNumber}}}\",\"season.episodes_count_item\":\"{numberOfEpisodes, plural, one {# Episode} other {# Episodes}}\",\"season.seasons\":\"Seasons\",\"season.show_more\":\"Show More\",\"season.more_options\":\"Options\",\"season.mark_as_watched\":\"Mark Season as Watched\",\"season.marked_as_watched\":\"Season Marked as Watched\",\"season.mark_as_watched.success\":\"{seasonTitle} Successfully Marked as Watched. {undoCta}\",\"seasons.fetch.error\":\"Something went wrong. Please try again.\",\"meta.season_with_episode_short\":\"{seasonMeta} {episodeMeta}\",\"meta.season_with_episode_long\":\"{seasonMeta}, {episodeMeta}\",\"season.meta_title_long\":\"{season_number, plural, one {# Season} other {# Seasons}}\",\"og.title\":\"The World's Largest Dedicated Anime Collection - Crunchyroll\",\"og.site_name\":\"Crunchyroll\",\"seo.home_title\":\"Crunchyroll: Watch Popular Anime, Play Games \u0026 Shop Online\",\"seo.home_description\":\"Embark on an anime adventure with Crunchyroll, your ultimate destination for watching a vast collection of anime series and movies. Delve into the captivating worlds of hit titles such as One Piece, Jujutsu Kaisen, Chainsaw Man, and Attack on Titan. Start your free trial today and immerse yourself in the thrilling world of anime with Crunchyroll!\",\"seo.music_landing_title\":\"Music - New Music Artists, Videos \u0026 Concerts - Crunchyroll\",\"seo.music_landing_description\":\"Enjoy music from a selection of popular videos and songs, where many have been featured in hit anime series titles. Examples include Chainsaw Man, Demon Slayer, Naruto, and Sword Art Online. Here you’ll also find Japanese music artists, J-Pop, J-Rock, Visual Kei, Idols, and K-Pop. Many of the concerts have been made available outside of Japan for the first time.\",\"seo.browse_popular_title\":\"Most Popular Anime Shows and Movies - Crunchyroll\",\"seo.browse_popular_description\":\"Embark on an anime adventure with Crunchyroll, your ultimate destination for watching a vast collection of anime series and movies. Delve into the captivating worlds of hit titles such as One Piece, Jujutsu Kaisen, Chainsaw Man, and Attack on Titan. Start your free trial today and immerse yourself in the thrilling world of anime with Crunchyroll!\",\"seo.browse_new_title\":\"Latest New Anime Shows and Movies - Crunchyroll\",\"seo.browse_new_description\":\"Embark on an anime adventure with Crunchyroll, your ultimate destination for watching a vast collection of anime series and movies. Delve into the captivating worlds of hit titles such as One Piece, Jujutsu Kaisen, Chainsaw Man, and Attack on Titan. Start your free trial today and immerse yourself in the thrilling world of anime with Crunchyroll!\",\"seo.browse_alphabetical_title\":\"List of Anime Shows and Movies - Crunchyroll\",\"seo.browse_alphabetical_description\":\"Embark on an anime adventure with Crunchyroll, your ultimate destination for watching a vast collection of anime series and movies. Delve into the captivating worlds of hit titles such as One Piece, Jujutsu Kaisen, Chainsaw Man, and Attack on Titan. Start your free trial today and immerse yourself in the thrilling world of anime with Crunchyroll!\",\"seo.simulcast_title\":\"Crunchyroll - Browse Simulcasted Anime\",\"seo.simulcast_description\":\"Watch the best anime from Crunchyroll online and stream episodes of Bleach, Naruto, Dragon Ball Super, Attack on Titan, Hunter x Hunter, Fairy Tail, and more.\",\"seo.watchlist_title\":\"Curate Your Custom Watchlist | Crunchyroll\",\"seo.watchlist_description\":\"Elevate your anime viewing experience with a Watchlist. Explore recent activity, apply language and media filters, and harness advanced sorting and filtering options to create a customized anime watchlist that aligns perfectly with your preferences.\",\"seo.history_title\":\"Recent Anime History | Crunchyroll\",\"seo.history_description\":\"Easily explore your most recent anime viewing history on Crunchyroll and rediscover past favorites. Manage your history and clear your viewing records directly from the page for a personalized anime experience.\",\"seo.crunchylist_title\":\"Create and Manage Crunchylists | Crunchyroll\",\"seo.crunchylist_description\":\"Curate your anime collection with Crunchylists on Crunchyroll. Easily create and manage lists, and add items using the search feature or directly from an anime's page to organize your favorite series and movies in one central location.\",\"seo.single_crunchylist_title\":\"Manage Your Crunchylist | Crunchyroll\",\"seo.single_crunchylist_description\":\"Streamline your Crunchylist on Crunchyroll. Easily organize, edit, and fine-tune your curated anime collection. Add, remove, or rearrange items to ensure it perfectly aligns with your favorite series and movies, keeping your collection up-to-date.\",\"seo.app_failed_state_title\":\"Error Page: Discover More Anime Adventures | Crunchyroll\",\"seo.app_failed_state_description\":\"Oops! You've stumbled upon a Crunchyroll error page, but fear not—your anime journey lives on. Explore thrilling titles such as Solo Leveling, Demon Slayer, One Piece, Jujutsu Kaisen, Chainsaw Man, and Attack on Titan. Begin your free trial now and keep the anime excitement alive!\",\"seo.activate_device_title\":\"Activate and Link Your Account | Crunchyroll\",\"seo.activate_device_description\":\"Activate Crunchyroll to seamlessly link your Crunchyroll account to devices by entering the activation code, ensuring access to over 1000 anime titles. Enjoy uninterrupted viewing pleasure by effortlessly activating your device in just three simple steps. Utilize the code option for quick log-in on supported devices such as PlayStation®, Xbox, Android TV, Google TV, Amazon Fire TV, Apple TV, Samsung TV, LG TV, and Nintendo Switch™.\",\"seo.activate_device_keywords\":\"activate, activation, activating, code, Crunchyroll, PS5, Nintendo Switch, Xbox, Apple TV, Roku, PlayStation, PS4, link, linking, watch, access, account, login, code, fire TV, device, devices, sign up, anime, titles\",\"series.background_alt\":\"Series background\",\"series.logo\":\"Series logo\",\"series.more_options_top\":\"More\",\"similar_to.more_like_this_title\":\"More Like This\",\"series.featured_music.title\":\"Featured Music\",\"series.meta_tag_title\":\"Watch {name} - Crunchyroll\",\"series.meta.description\":\"Stream {title} on Crunchyroll and experience the latest and greatest anime! Browse to watch series, episodes, movies, and music videos of your favorite anime in subbed or dubbed formats. Discover more anime similar to {title} among our ever-growing catalogue of titles featuring unforgettable characters, complete seasons, and fresh releases coming out shortly after airing in Japan. Watch anime your way by browsing dozens of genres including romance, action, and sci-fi on your favorite devices such as game consoles and smart TVs.\",\"artist.meta_title_tag\":\"{name} - Crunchyroll\",\"series.season.empty_list.heading\":\"Videos Aren’t Available\",\"series.season.empty_list.text\":\"While this show can’t be viewed, we do have others like it.\",\"series.season.empty_list.cta\":\"See Similar Shows\",\"series.season.coming_soon.heading\":\"Check back on {date} for the premiere episode!\",\"series.season.coming_soon.description\":\"In the meantime, feel free to take a look around.\",\"series.unavailable_episodes\":\"Unfortunately, this show’s videos aren’t available.\",\"series.up_next.fetch_error\":\"Could not load next episode. Please try again.\",\"series.mark_as_watched\":\"Mark Series as Watched\",\"series.mark_as_watched.success\":\"Series Successfully Marked as Watched. {undoCta}\",\"browse_content.up_next.fetch_error\":\"Something went wrong. Please try again or view the series page.\",\"simulcast.feed_title\":\"Simulcast Season\",\"simulcast.season_list\":\"Season List\",\"alphabetical.empty_alphabetical.title\":\"Something Went Wrong\",\"alphabetical.empty_alphabetical.description\":\"Choose another page or try again.\",\"simulcast.empty_simulcast.title\":\"Something Went Wrong\",\"simulcast.empty_simulcast.description\":\"Choose another page or try again.\",\"sorting.sort_by\":\"Sort by\",\"subgenres.meta_title_tag\":\"{sorting} {genre} Anime Shows and Movies - Crunchyroll\",\"subgenres.meta_description\":\"Embark on an anime adventure with Crunchyroll, your ultimate destination for watching a vast collection of anime series and movies. Delve into the captivating worlds of hit titles such as One Piece, Jujutsu Kaisen, Chainsaw Man, and Attack on Titan. Start your free trial today and immerse yourself in the thrilling world of anime with Crunchyroll!\",\"browse.empty_browse.title\":\"Something Went Wrong\",\"browse.empty_browse.description\":\"Choose another page or try again.\",\"subgenres.empty_subgenres.title\":\"Something Went Wrong\",\"subgenres.empty_subgenres.description\":\"Choose another subgenre or try again.\",\"svg.back\":\"Previous\",\"svg.angle_bottom\":\"Expand\",\"svg.angle_left\":\"Previous\",\"svg.angle_right\":\"Next\",\"svg.angle_top\":\"Collapse\",\"svg.alert\":\"Alert\",\"svg.checkmark\":\"Checked\",\"svg.checkmark_filled\":\"Checked\",\"svg.chromecast\":\"Play on TV\",\"svg.chromecast_filled\":\"Playing on TV\",\"svg.coming_soon\":\"Coming Soon\",\"svg.credit_card\":\"Payment Methods\",\"svg.cross\":\"Close\",\"svg.crunchyroll_logo\":\"Crunchyroll logo\",\"svg.crunchylist\":\"Crunchylist\",\"svg.dropdown\":\"Dropdown menu\",\"svg.decoration\":\"Decoration\",\"svg.edit\":\"Edit\",\"svg.error\":\"Error\",\"svg.episodes\":\"More content\",\"svg.external_site\":\"Go to External URL\",\"svg.facebook\":\"Facebook\",\"svg.favorite\":\"Mark as Favorite\",\"svg.favorite_filled\":\"Remove from Favorites\",\"svg.favorite_round\":\"Dismiss\",\"svg.filter\":\"Filter / Settings\",\"svg.genre\":\"Genre\",\"svg.history\":\"History\",\"svg.home\":\"Home\",\"svg.instagram\":\"Instagram\",\"svg.comment\":\"Comment\",\"svg.loader\":\"Loader\",\"svg.menu\":\"Menu\",\"svg.more\":\"More actions\",\"svg.mature\":\"Mature\",\"svg.missing\":\"Missing\",\"svg.new\":\"New\",\"svg.new_filled\":\"New\",\"svg.notification\":\"Notification\",\"svg.play\":\"Play\",\"svg.play_filled\":\"Play\",\"svg.premium\":\"Premium Only\",\"svg.premium_filled\":\"Premium\",\"svg.replay\":\"Watch again\",\"svg.reply\":\"Reply\",\"svg.search\":\"Search\",\"svg.settings\":\"Settings\",\"svg.user_settings\":\"Account menu\",\"svg.add\":\"Add\",\"svg.share\":\"Share\",\"svg.sign_out\":\"Sign Out\",\"svg.sort\":\"Sort\",\"svg.thumbs_down\":\"Dislike this\",\"svg.thumbs_down_filled\":\"You dislike this\",\"svg.thumbs_up\":\"Like this\",\"svg.thumbs_up_filled\":\"You like this\",\"svg.trash\":\"Delete\",\"svg.x\":\"X\",\"svg.unavailable\":\"Unavailable\",\"svg.view_all\":\"View All\",\"svg.watchlist\":\"Watchlist\",\"svg.watchlist_add\":\"Add to Watchlist\",\"svg.watchlist_remove\":\"Remove from Watchlist\",\"svg.watchlist_filled_small\":\"In Watchlist\",\"svg.watchlist_new\":\"Watchlist with new items\",\"svg.youtube\":\"YouTube\",\"svg.lines\":\"Lines\",\"svg.vkontakte\":\"VKontakte\",\"svg.odnoklassniki\":\"Odnoklassniki\",\"svg.upsell_stars\":\"Upsell stars\",\"svg.switch_icon\":\"Switch\",\"svg.feedback\":\"Leave Feedback\",\"svg.star\":\"Star Review\",\"svg.report\":\"Report\",\"svg.report_filled\":\"Reported\",\"svg.news\":\"Crunchyroll news\",\"svg.ecom\":\"Crunchyroll Store\",\"svg.logo.email\":\"Email\",\"svg.logo.x\":\"X\",\"svg.logo.facebook\":\"Facebook\",\"svg.logo.reddit\":\"Reddit\",\"svg.logo.pinterest\":\"Pinterest\",\"svg.logo.tumblr\":\"Tumblr\",\"svg.logo.whats_app\":\"WhatsApp\",\"svg.logo.telegram\":\"Telegram\",\"svg.logo.line\":\"Line\",\"svg.logo.v_kontakte\":\"ВКонтакте\",\"svg.tiktok\":\"TikTok\",\"svg.logo.odnoklassniki\":\"OK.RU\",\"svg.curated_carousel\":\"Curated Carousel\",\"svg.brasil_content_rating.l\":\"General Audiences\",\"svg.brasil_content_rating.al\":\"General Audiences\",\"svg.brasil_content_rating.10\":\"Not recommended for minors under ten\",\"svg.brasil_content_rating.a10\":\"Not recommended for minors under ten\",\"svg.brasil_content_rating.12\":\"Not recommended for minors under twelve\",\"svg.brasil_content_rating.a12\":\"Not recommended for minors under twelve\",\"svg.brasil_content_rating.14\":\"Not recommended for minors under fourteen\",\"svg.brasil_content_rating.a14\":\"Not recommended for minors under fourteen\",\"svg.brasil_content_rating.16\":\"Not recommended for minors under sixteen\",\"svg.brasil_content_rating.a16\":\"Not recommended for minors under sixteen\",\"svg.brasil_content_rating.18\":\"Not recommended for minors under eighteen\",\"svg.brasil_content_rating.a18\":\"Not recommended for minors under eighteen\",\"svg.nz_content_rating.g\":\"General Audiences\",\"svg.nz_content_rating.pg\":\"Parental Guidance\",\"svg.nz_content_rating.m\":\"Mature Audience\",\"svg.nz_content_rating.13\":\"Unsuitable for audiences under 13 years of age\",\"svg.nz_content_rating.16\":\"Unsuitable for audiences under 16 years of age\",\"svg.nz_content_rating.18\":\"Unsuitable for audiences under 18 years of age\",\"svg.universal_content_rating.all\":\"General Audiences\",\"svg.universal_content_rating.pg\":\"Parental Guidance\",\"svg.universal_content_rating.12\":\"Not recommended for minors under twelve\",\"svg.universal_content_rating.14\":\"Not recommended for minors under fourteen\",\"svg.universal_content_rating.16\":\"Not recommended for minors under sixteen\",\"svg.universal_content_rating.18\":\"Not recommended for minors under eighteen\",\"svg.india_content_rating.u\":\"All ages\",\"svg.india_content_rating.ua7\":\"Ages 7 and up\",\"svg.india_content_rating.ua13\":\"Ages 13 and up\",\"svg.india_content_rating.ua16\":\"Ages 16 and up\",\"svg.india_content_rating.a\":\"Adults only\",\"svg.australia_content_rating.g\":\"General\",\"svg.australia_content_rating.pg\":\"Parental Guidance\",\"svg.australia_content_rating.m\":\"Mature\",\"svg.australia_content_rating.ma15\":\"Mature Accompanied (15+)\",\"svg.australia_content_rating.r18\":\"Restricted (18+)\",\"svg.calendar\":\"Release Date\",\"svg.gift\":\"gift\",\"svg.anime\":\"Anime\",\"svg.games\":\"Games\",\"svg.manga\":\"Manga\",\"svg.pagination_element\":\"Carousel Pagination Element\",\"unsupported_modal.close_alt\":\"Close unsupported\",\"unsupported_modal.description\":\"Oh no! It looks like you’re using a web browser we don’t support! Please consider updating your internet browser to unlock thousands of anime titles!\",\"unsupported_modal.get_chrome\":\"Get Chrome\",\"unsupported_modal.get_firefox\":\"Get Firefox\",\"unsupported_modal.get_safari\":\"Get Safari\",\"unsupported_modal.get_edge\":\"Get Edge\",\"unsupported_modal.title\":\"Update your web browser!\",\"video_player.iframes_not_supported\":\"Your browser does not support iframes.\",\"video_player.player\":\"Video Player\",\"watch.poster_link_to_series\":\"to series\",\"watch.poster_link_to_artist\":\"to artist\",\"watch.see_more_episodes.button\":\"See More Episodes\",\"watch.see_more_videos.button\":\"See More Videos\",\"watch.next_episode\":\"Next Episode\",\"watch.previous_episode\":\"Previous Episode\",\"watch.previous_episode.fetch_error\":\"Could not load additional episodes. Please try again.\",\"watch.next_video\":\"Next Video\",\"watch.previous_video\":\"Previous Video\",\"watch.meta_title_tag\":\"{title} - Watch on Crunchyroll\",\"watch.meta_description\":\"Watch {title}, on Crunchyroll. {description}\",\"watch.related_videos\":\"Related\",\"watch.related_videos.show_more\":\"Show More\",\"watch.related_videos.show_less\":\"Show Less\",\"watch.released_on\":\"Released on {releaseDate}\",\"watch.episode_ratings.tooltip.like\":\"Like this\",\"watch.episode_ratings.tooltip.remove_like\":\"Remove Like\",\"watch.episode_ratings.tooltip.dislike\":\"Dislike this\",\"watch.episode_ratings.tooltip.remove_dislike\":\"Remove Dislike\",\"watch.episode_ratings.like\":\"Like\",\"watch.episode_ratings.dislike\":\"Dislike\",\"watch.episode_ratings.sign_in_to_do_this\":\"Log In or Create Account to do this\",\"watch.upsell_banner.title\":\"Want to watch without ads?\",\"watch.upsell_banner.description_free_trial\":\"Try Premium free for {duration} days, cancel any time.\",\"watch.upsell_banner.description_direct_to_pay\":\"Access to thousands of episodes of anime, ad-free, with Premium.\",\"watch.upsell_banner.try_premium_free\":\"try premium free\",\"watch.upsell_banner.go_premium\":\"go premium\",\"watch.restricted_ios.title\":\"Watch this on the Crunchyroll App.\",\"watch.restricted_ios.subtitle\":\"Download the free app and enjoy the world’s largest dedicated anime collection.\",\"watch.restricted_ios.bgc_alt\":\"Episode background\",\"watch.restricted_ios.logo_alt\":\"Download on the App Store\",\"watching_status.play\":\"Play\",\"watching_status.continue\":\"Continue\",\"watching_status.continue_watching\":\"Continue Watching\",\"watching_status.start\":\"Start Watching\",\"watching_status.start_playing\":\"Start Playing\",\"watching_status.up_next\":\"Up Next\",\"watching_status.watch_again\":\"Watch Again\",\"watching_status.rewatch\":\"Rewatch\",\"watching_status.watch_now\":\"Watch Now\",\"watching_status.coming_soon\":\"Coming Soon\",\"hero_card.button_text\":\"{title} {meta}\",\"hero_card.button_text.live\":\"{title} {meta} Live\",\"hero_card.button_text.coming_soon\":\"Explore the series\",\"hero_carousel.a11y.previous_cta_label\":\"Previous Item\",\"hero_carousel.a11y.next_cta_label\":\"Next Item\",\"browse_card.title\":\"{meta} - {title}\",\"show_card_hover.play_icon.title\":\"Play {meta}\",\"show_card_hover.play\":\"Play\",\"show_card_hover.seasons\":\"{seasonCount, plural, one {# Season} other {# Seasons}}\",\"show_card_hover.episodes\":\"{episodeCount, plural, one {# Episode} other {# Episodes}}\",\"show_card_hover.add_to_crunchylist\":\"Add to Crunchylist\",\"show_card_hover.add_to_watchlist\":\"Add to Watchlist\",\"show_card_hover.remove_from__watchlist\":\"Remove from Watchlist\",\"episode_card.title\":\"{meta} - {title}\",\"formatted_duration\":\"{format, select, h {{hours}h} m {{minutes}m} s {{seconds}s} hm {{hours}h {minutes}m} other {}}\",\"duration.time_left\":\"{number, plural, one {left} other {left}}\",\"duration.time_left_joined\":\"{duration} {timeLeft}\",\"watchlist.add_to_watchlist\":\"Add To Watchlist\",\"watchlist.in_watchlist\":\"In Watchlist\",\"watchlist.empty_watchlist\":\"Your Watchlist needs some love. {linebreak} Let’s fill it up with awesome anime.\",\"watchlist.remove_hover\":\"REMOVE\",\"watchlist.sort\":\"Sort\",\"watchlist.sort_order\":\"Sort Order\",\"watchlist.update_sorting\":\"Update Sorting\",\"watchlist.watchlist_card_subtitle\":\"{title}: {meta}\",\"watchlist.item_removed\":\"Removed from watchlist.\",\"watchlist.item_remove_failed\":\"We couldn't remove {title} from your watchlist. Try again later.\",\"watchlist.add_item_error\":\"We couldn't add {title} to your watchlist. Try again later.\",\"watchlist.mark_as_favorite_error\":\"Unable to mark as Favorite. Please try again later.\",\"watchlist.unmark_as_favorite_error\":\"Unable to unmark as Favorite. Please try again later.\",\"watchlist_sorting.added\":\"Added\",\"watchlist_sorting.alphabetical\":\"Alphabetical\",\"watchlist_sorting.asc\":\"A-Z\",\"watchlist_sorting.desc\":\"Z-A\",\"watchlist_sorting.newest\":\"Newest\",\"watchlist_sorting.oldest\":\"Oldest\",\"watchlist_sorting.popularity\":\"Popularity\",\"watchlist_sorting.recent_activity\":\"Recent Activity\",\"watchlist_sorting.updated\":\"Updated\",\"watchlist_sorting.watched\":\"Watched\",\"watchlist_sorting.current_sorting\":\"{current_sort} ({current_sort_order})\",\"account.membership.title\":\"Membership Information\",\"account.membership.description\":\"Manage your membership plan \u0026 order history details\",\"account.membership.description.change_plan\":\"Change your plan, manage payment methods, and view your order history.\",\"account.membership.manage_payment.title\":\"Payment Method\",\"account.membership.manage_payment.cta\":\"manage\",\"account.membership.manage_payment.info\":\"To change your plan, a valid payment method is required.\",\"account.membership.order_history.title\":\"Order History\",\"account.membership.order_history.description\":\"For information on the taxes applied, check \u003cdetails\u003eOrder Details\u003c/details\u003e. If you have any questions, please contact \u003chelpCenter\u003eCustomer Support\u003c/helpCenter\u003e.\",\"account.membership.free.title\":\"Free Member\",\"account.membership.free_trial.eligible.description\":\"Premium access includes unlimited anime, ad-free, new episodes shortly after they air in Japan. Try it now!\",\"account.membership.free_trial.ineligible.description\":\"Unlimited anime, ad-free, new episodes shortly after they air in Japan, access to exclusive games. Starting at only {price}/month.\",\"account.membership.premium_fan\":\"Fan\",\"account.membership.premium_fan_quarter\":\"Fan Quarterly\",\"account.membership.premium_fan_annual\":\"Fan Annual\",\"account.membership.premium_fan_plus_manga\":\"Fan + Manga\",\"account.membership.premium_mega_fan\":\"Mega Fan\",\"account.membership.premium_mega_fan_annual\":\"Mega Fan Annual\",\"account.membership.premium_mega_fan_plus_manga\":\"Mega Fan + Manga\",\"account.membership.premium_ultimate_fan\":\"Ultimate Fan\",\"account.membership.premium_ultimate_fan_annual\":\"Ultimate Fan Annual\",\"account.membership.monthly\":\"month\",\"account.membership.yearly\":\"year\",\"account.membership.3months\":\"every 3 months\",\"account.membership.premium.heading\":\"{accessType} Member\",\"account.membership.premium.upgrade_membership\":\"Upgrade Membership\",\"account.membership.premium.restart_membership\":\"Renew Membership\",\"account.membership.premium.cancel_subscription\":\"Cancel Subscription\",\"account.membership.premium.manage_payment\":\"Manage Payment Method\",\"account.membership.premium.funimation.description\":\"Your subscription with Funimation is still active. Avoid double billing by canceling your Funimation subscription.\",\"account.membership.premium.funimation.cta\":\"GO TO FUNIMATION\",\"account.membership.funimation.description\":\"Your subscription with Funimation is still active, to manage your subscription\",\"account.membership.funimation.cta\":\"Go to your Funimation account\",\"account.membership.premium.gifted.title\":\"Gift Access / {daysLeft} left\",\"account.membership.premium.gifted.title.days_left\":\"{daysLeft, plural, one {# day} other {# days}}\",\"account.membership.premium.gifted.renewal\":\"Your premium benefits will end on {renewalDate}\",\"account.membership.premium.recurring_pay.title\":\"{amount} / {cycleDuration}\",\"account.membership.premium.recurring_pay.renewal\":\"Your subscription will renew on {renewalDate}\",\"account.membership.premium.free_trial.title\":\"Free Trial\",\"account.membership.premium.free_trial.days_left\":\" / {daysLeft} left\",\"account.membership.premium.free_trial.days\":\"{daysLeft, plural, one {# day} other {# days}}\",\"account.membership.premium.free_trial.renewal\":\"You will be charged {amount}/{cycleDuration} {applicableTaxes} starting {renewalDate}\",\"account.membership.provider.description\":\"You have an active subscription via {provider}. In order to change or cancel it please visit \u003clink\u003e{provider}\u003c/link\u003e.\",\"account.membership.third_party_free_trial.price_text\":\"Free Trial\",\"account.membership.third_party.renewal_date\":\"The subscription is made via {provider}. In order to change or cancel it go to the settings inside the \u003clink\u003eapplication\u003c/link\u003e.\",\"account.membership.third_party.cr_cancel.renewal_date\":\"The subscription is made via {provider}.\",\"account.membership.canceled.renewal_date\":\"The subscription was canceled and will not auto renew, but you still have premium access until {date}.\",\"account.membership.third_party_free_trial.days_left\":\" / {daysLeft} left\",\"account.membership.third_party_free_trial.days\":\"{daysLeft, plural, one {# day} other {# days}}\",\"account.membership.tax.applicable_taxes\":\"+ applicable taxes\",\"account.membership.tax.gst_inclusive\":\"+ GST Inclusive\",\"account.membership.tax.vat_inclusive\":\"+ VAT Inclusive\",\"account.membership.tax.iva_inclusive\":\"+ IVA Inclusive\",\"account.membership.restart.success\":\"Congratulations! Your membership was successfully restarted.\",\"account.membership.restart.error\":\"We’re sorry. There was an error processing your payment information. Please try again.\",\"account.membership.restart.modal.title\":\"New Subscription Info\",\"account.membership.restart.modal.description\":\"Your subscription will automatically renew at {amount}/{cycleDuration}. The new billing date will change to the date you renewed it on.\",\"account.membership.restart.modal.restart.button\":\"confirm and renew\",\"account.membership.restart.modal.cancel.button\":\"Cancel\",\"account.membership.cancel_downgrade.success\":\"Your plan will not be changed. It will remain as {accessType}.\",\"account.membership.cancel_downgrade.modal.title\":\"Are you sure?\",\"account.membership.cancel_downgrade.modal.description\":\"Your plan will stay as {accessType} and will renew on the next billing date.\",\"account.membership.cancel_downgrade.modal.restart.button\":\"Keep {accessType}\",\"account.membership.cancel_downgrade.modal.cancel.button\":\"back\",\"account.membership.benefit.manga\":\"Access to \u003clink\u003eCrunchyroll Manga\u003c/link\u003e\",\"account.membership.benefit.no_ads\":\"Ad-free streaming\",\"account.membership.benefit.concurrent_streams.2\":\"Stream on a total of \u003cspan\u003e2 devices\u003c/span\u003e at a time\",\"account.membership.benefit.concurrent_streams.4\":\"Stream on a total of \u003cspan\u003e4 devices\u003c/span\u003e at a time\",\"account.membership.benefit.concurrent_streams.6\":\"Stream on a total of \u003cspan\u003e6 devices\u003c/span\u003e at a time\",\"account.membership.benefit.offline_viewing\":\"Download HD videos\",\"account.membership.benefit.cr_bento\":\"Access to Crunchyroll Game Vault\",\"account.membership.benefit.cr_store_percent_off.5\":\"\u003cspan\u003e5%\u003c/span\u003e off select merch at the Crunchyroll Store\",\"account.membership.benefit.cr_store_percent_off.10\":\"\u003cspan\u003e10%\u003c/span\u003e off select merch at the Crunchyroll Store\",\"account.membership.benefit.cr_store_percent_off.15\":\"\u003cspan\u003e15%\u003c/span\u003e off select merch at the Crunchyroll Store\",\"account.membership.benefit.cr_store_percent_off.20\":\"\u003cspan\u003e20%\u003c/span\u003e off select merch at the Crunchyroll Store\",\"account.membership.benefit.annual_swag_bag\":\"Exclusive swag bag after 12 consecutive months of an Ultimate Fan subscription\",\"account.membership.benefit.cr_store.free_shipping\":\"Crunchyroll Store Deals: \u003cspan\u003e{discount}%\u003c/span\u003e off select products; Members only offers \u0026 early access to sales; Free {region} Shipping{price}*\",\"account.membership.benefit.annual_discount_percent\":\"\u003cspan\u003e16%\u003c/span\u003e discount on Monthly Plan (billed every 12-months)\",\"account.membership.perks.collapsed_label\":\"show all benefits\",\"account.membership.perks.expanded_label\":\"show fewer benefits\",\"account.membership.change_plan\":\"change plan\",\"account.membership.dont_change_plan\":\"don’t change my plan\",\"account.membership.pending_downgrade.renewal_info\":\"Your subscription will change to \u003chighlighted\u003e{tier}\u003c/highlighted\u003e {date}. Starting from that date, you will be charged {price} per {cycleDuration}.\",\"account.membership.pending_downgrade.flash_message\":\"Your new Membership plan will start on {date}, you’re all set!\",\"account.membership.payment_failed\":\"We had some issues processing your last payment. Update your payment or view your \u003clink\u003eOrder History\u003c/link\u003e for more details.\",\"account.membership.pending_upgrade.flash_message\":\"It may take a few minutes activating your new {tier} benefits. If something needs your attention, we will send you an email.\",\"account.membership.pending_upgrade.alert_info\":\"We are processing your plan change to {tier}. You will gain access to your new benefits and can manage your new subscription when it is completed.\",\"profile.preferences.title\":\"Preferences for {profileName}\",\"profile.avatar_alt\":\"User Avatar\",\"profile.profile_avatar_alt\":\"Profile Avatar\",\"account.preferences.description\":\"Set your language and video preferences\",\"account.preferences.display_language\":\"Display Language\",\"account.preferences.email_communication_language\":\"Email Communication Language\",\"account.preferences.video_quality\":\"Video Quality\",\"account.preferences.video_quality.auto\":\"Auto\",\"account.preferences.subtitles_or_closed_captions_language\":\"Subtitles/CC Language\",\"account.preferences.audio_language\":\"Audio Language\",\"account.preferences.audio_language.japanese\":\"Japanese\",\"account.preferences.subtitle_language.none\":\"None\",\"account.preferences.closed_captions.title\":\"Show Closed Captions\",\"account.preferences.closed_captions.description\":\"By enabling this setting, we will automatically show closed captions when they are available.\",\"account.preferences.video_toggle.title\":\"Mature Video Content\",\"account.preferences.video_toggle.description\":\"By enabling this setting, you confirm that you are at least 18 years old.\",\"account.preferences.update.error\":\"Something went wrong. Please try again.\",\"account.preferences.update.error.too_many_requests\":\"You've reached your attempt limits. Please try again in 2 hours.\",\"account.preferences.universal_content_restrictions.faq\":\"Check out our \u003clink\u003eContent Restrictions FAQ\u003c/link\u003e to learn more about content ratings.\",\"account.preferences.brazil_maturity_restrictions.faq\":\"Check out our \u003clink\u003eMaturity Restrictions FAQ\u003c/link\u003e to learn more about content ratings.\",\"account.maturity_restrictions.title\":\"Maturity Restrictions\",\"account.maturity_restrictions.option.L.title\":\"L\",\"account.maturity_restrictions.option.L.description\":\"Only view content suitable for all audience\",\"account.maturity_restrictions.option.10.title\":\"10\",\"account.maturity_restrictions.option.10.description\":\"View all content rated 10 and below\",\"account.maturity_restrictions.option.12.title\":\"12\",\"account.maturity_restrictions.option.12.description\":\"View all content rated 12 and below\",\"account.maturity_restrictions.option.14.title\":\"14\",\"account.maturity_restrictions.option.14.description\":\"View all content rated 14 and below\",\"account.maturity_restrictions.option.16.title\":\"16\",\"account.maturity_restrictions.option.16.description\":\"View all content rated 16 and below\",\"account.maturity_restrictions.option.18.title\":\"18\",\"account.maturity_restrictions.option.18.description\":\"View all content rated 18 and below\",\"account.universal_content_restrictions.title\":\"Content Restrictions\",\"account.universal_content_restrictions.option.ALL.title\":\"ALL Audiences\",\"account.universal_content_restrictions.option.ALL.description\":\"Content suitable for all ages.\",\"account.universal_content_restrictions.option.PG.title\":\"Parental Guidance\",\"account.universal_content_restrictions.option.PG.description\":\"Mostly appropriate for children, may contain rude humor and/or comedic violence.\",\"account.universal_content_restrictions.option.12.title\":\"Ages 12 and up\",\"account.universal_content_restrictions.option.12.description\":\"Content may include bloodless violence, light profanity, and/or coming-of-age themes.\",\"account.universal_content_restrictions.option.14.title\":\"Ages 14 and up\",\"account.universal_content_restrictions.option.14.description\":\"May contain profanity, sexual topics and/or imagery, and other mature themes.\",\"account.universal_content_restrictions.option.16.title\":\"Ages 16 and up\",\"account.universal_content_restrictions.option.16.description\":\"Content contains themes not appropriate for younger teens like graphic violence, profanity, and/or sexuality.\",\"account.universal_content_restrictions.option.18.title\":\"Ages 18 and up\",\"account.universal_content_restrictions.option.18.description\":\"Intended for adults, content may contain harsh profanity, explicit nudity/sexuality, and/or extreme violence.\",\"account.india_content_restriction.title\":\"Content Restrictions\",\"account.india_content_restriction.option.U.title\":\"U\",\"account.india_content_restriction.option.U.description\":\"All ages\",\"account.india_content_restriction.option.7.title\":\"U/A 7+\",\"account.india_content_restriction.option.7.description\":\"Ages 7 and up\",\"account.india_content_restriction.option.13.title\":\"U/A 13+\",\"account.india_content_restriction.option.13.description\":\"Ages 13 and up\",\"account.india_content_restriction.option.16.title\":\"U/A 16+\",\"account.india_content_restriction.option.16.description\":\"Ages 16 and up\",\"account.india_content_restriction.option.A.title\":\"A\",\"account.india_content_restriction.option.A.description\":\"Adults only\",\"account.australia_content_restriction.title\":\"Content Restrictions\",\"account.australia_content_restriction.option.G.title\":\"General (G)\",\"account.australia_content_restriction.option.G.description\":\"Suitable for everyone. May have content that may scare very young children.\",\"account.australia_content_restriction.option.PG.title\":\"Parental Guidance (PG)\",\"account.australia_content_restriction.option.PG.description\":\"Parental guidance recommended. May have content that a child may find confusing or upsetting.\",\"account.australia_content_restriction.option.M.title\":\"Mature (M)\",\"account.australia_content_restriction.option.M.description\":\"Not recommended for children under 15. May contain violence and mature themes.\",\"account.australia_content_restriction.option.MA15.title\":\"Mature Accompanied (MA 15+)\",\"account.australia_content_restriction.option.MA15.description\":\"For ages 15 and over. May contain strong sex scenes and drug use.\",\"account.australia_content_restriction.option.R18.title\":\"Restricted (R 18+)\",\"account.australia_content_restriction.option.R18.description\":\"For adults 18 years and over. Content may be offensive to sections of the adult community.\",\"account.change_password.title\":\"Change Password\",\"account.change_password.description\":\"Pick a unique password to keep your account safe\",\"account.change_password.current\":\"Current Password\",\"account.change_password.new\":\"New Password\",\"account.change_password.retype\":\"Retype New Password\",\"account.change_password.alert\":\"Changing your password will sign you out of your other devices. You’ll need to enter the new password when you sign back in.\",\"account.change_password.change\":\"Change Password\",\"account.password.strength_meter.min_length\":\"Use at least 6 characters\",\"account.password.strength_meter.weak\":\"Weak password\",\"account.password.strength_meter.good\":\"Good password\",\"account.password.strength_meter.strong\":\"Strong password\",\"account.password.strength_meter.no_match\":\"Passwords don’t match\",\"account.change_password.success\":\"The password was changed\",\"account.change_password.error\":\"We couldn't change your password. Please try again.\",\"account.change_password.invalid_password\":\"Current password is invalid\",\"account.password.create.title\":\"Create Password\",\"account.password.create.description\":\"Create a password to keep your account safe.\",\"account.password.create.input.new.label\":\"Password\",\"account.password.create.input.confirm.label\":\"Confirm Password\",\"account.password.create.submit\":\"Save\",\"account.password.create.success\":\"Password successfully created.\",\"account.password.create.error\":\"Something went wrong. Please try again.\",\"account.email_notifications.title\":\"Email Notifications\",\"account.email_notifications.description\":\"Set the notifications you want to receive via email\",\"account.email_notifications.all.title\":\"All Notifications\",\"account.email_notifications.store_deals.title\":\"Store Deals\",\"account.email_notifications.store_deals.description\":\"Get the scoop on exclusive savings offered on featured items in the Crunchyroll Store.\",\"account.email_notifications.newsletters.title\":\"Newsletters\",\"account.email_notifications.newsletters.description\":\"Stay up to date with the latest news and special offers by subscribing to the user newsletter.\",\"account.email_notifications.promotional_updates.title\":\"Promotional Updates\",\"account.email_notifications.promotional_updates.description\":\"Receive general promotions for Crunchyroll products, services, and sponsored partner offers.\",\"account.email_notifications.update.error\":\"Something went wrong. Please try again.\",\"account.email_notifications.load_error.title\":\"We could not load your notifications settings.\",\"account.email_notifications.load_error.cta\":\"Please try again\",\"account.change_email.title\":\"Change Email\",\"account.change_email.page_description\":\"Change the email address you use to log in and receive Crunchyroll communications\",\"account.change_email.current_email_label\":\"Current Email\",\"account.change_email.change_email_button\":\"Send email change link\",\"account.change_email.change_email_instructions\":\"Once you click on the button below, a secure link will be sent to your email inbox with instructions on how to change your email.\",\"account.change_email.unverified_email.message\":\"Your email is not yet verified. Please check your inbox for a confirmation link.\",\"account.change_email.unverified_email.action_title\":\"Resend verification link\",\"account.change_email.success\":\"Success! Check your inbox for our email with instructions to complete the process.\",\"account.change_email.system_error\":\"Something went wrong. Please try again.\",\"profile.wallpaper_modal.title\":\"Background Image Selection\",\"profile.wallpaper_modal.description\":\"Choose your profile background image\",\"profile.wallpaper_modal.done\":\"Done\",\"profile.wallpaper_modal.cancel\":\"Cancel\",\"profile.wallpaper_modal.wallpaper_alt\":\"User Wallpaper.\",\"account.navigation.dropdown.title\":\"Settings\",\"account.navigation.title.general\":\"General\",\"account.navigation.title.account\":\"Account\",\"account.navigation.title.purchase_credit\":\"Purchase \u0026 Credit\",\"account.navigation.membership\":\"Membership Info\",\"account.navigation.notifications\":\"Email Notifications\",\"account.navigation.preferences\":\"Preferences\",\"account.navigation.account.email\":\"Email\",\"account.navigation.account.phone\":\"Phone\",\"account.navigation.account.password\":\"Password\",\"account.navigation.connected_apps\":\"Connected Apps\",\"account.navigation.billing_history\":\"Billing History\",\"account.navigation.payment_info\":\"Payment Info\",\"account.navigation.device_management\":\"Device Management\",\"account.email_verification.link_sent_success\":\"We sent a verification link to your email address.\",\"account.email_verification.link_sent_error\":\"Something went wrong. Please try again.\",\"account.email_unverified.new_message\":\"To fully enjoy Crunchyroll, please verify your email address.\",\"account.email_unverified.action\":\"Send verification link\",\"account.device_management.deactivate_modal.confirm\":\"Deactivate\",\"account.device_management.deactivate_modal.dismiss\":\"Cancel\",\"account.device_management.deactivate_modal.all.title\":\"Deactivate All Devices\",\"account.device_management.deactivate_modal.all.description\":\"This will log you out of all devices except for this one. Do you want to continue?\",\"account.device_management.deactivate_modal.selected.title\":\"Deactivate This Device\",\"account.device_management.deactivate_modal.selected.description\":\"This will log you out of the selected device. Do you want to continue?\",\"account.device_management.deactivate_modal.roku.title\":\"Deactivate Roku Devices\",\"account.device_management.deactivate_modal.roku.description\":\"This will log you out from all Roku devices associated with this Roku account. Do you want to continue?\",\"account.device_management.title\":\"Device Management\",\"account.device_management.subtitle\":\"Manage the devices connected to your account\",\"account.device_management.devices_count\":\"{count}/20 Devices\",\"account.device_management.deactivate_all_button\":\"Deactivate All Devices\",\"account.device_management.current_device_label\":\"{deviceType} (Current Device)\",\"account.device_management.deactivate_device_button\":\"Deactivate\",\"account.device_management.device_location\":\"Location: {location}\",\"account.device_management.device_activation_date\":\"Activation Date: {activationDate}\",\"account.device_management.device_last_used_date\":\"Last Used: {lastUsed}\",\"account.device_management.activate_device_hint\":\"Need to connect your device? Just click \u003clink\u003eActivate Device\u003c/link\u003e.\",\"account.device_management.empty_list.title\":\"We could not load your devices.\",\"account.device_management.empty_list.action\":\"Please try again\",\"account.device_management.deactivate_device.success\":\"You have successfully logged out of your device.\",\"account.device_management.deactivate_device.error\":\"Something went wrong. Please try again.\",\"account.device_management.deactivate_all_devices.success\":\"You have been successfully logged out of all other devices.\",\"account.device_management.deactivate_all_devices.error\":\"Something went wrong. Please try again.\",\"account.device_management.deactivate_roku.success\":\"You have successfully logged out of your Roku devices.\",\"account.device_management.activate_device.activation_section.title\":\"Let’s Activate Your Device\",\"account.device_management.activate_device.activation_section.subtitle\":\"Enter the activation code displayed on your TV screen.\",\"account.device_management.activate_device.steps_section.title\":\"How Do I Activate My Device?\",\"account.device_management.activate_device.steps_section.subtitle\":\"Get your device activated to your Crunchyroll account in 3 steps!\",\"account.device_management.activate_device.activation_section.alert\":\"This option is currently available for PlayStation®, Xbox, Android TV, Google TV, Amazon Fire TV, Apple TV, Samsung TV, LG TV, and Nintendo Switch™.\",\"account.device_management.activate_device.steps_section.step.1\":\"On your supported device, go to “Activate with Code” and look for the 6-character code.\",\"account.device_management.activate_device.steps_section.step.2\":\"Using your computer or phone, go to www.crunchyroll.com/activate (this page!) and enter the code.\",\"account.device_management.activate_device.steps_section.step.3\":\"When entered, you’ll be automatically logged in and ready to watch your favorite anime!\",\"account.device_management.activate_device.help_center_section.title\":\"Need Help?\",\"account.device_management.activate_device.help_center_link\":\"For additional help, please visit the \u003clink\u003eCrunchyroll Help Center\u003c/link\u003e.\",\"account.device_management.activate_device.need_help_title.1\":\"What devices and platforms are supported by Crunchyroll?\",\"account.device_management.activate_device.need_help_title.2\":\"Can I activate Crunchyroll on multiple devices?\",\"account.device_management.activate_device.need_help_title.3\":\"How do I troubleshoot activation issues on my device?\",\"account.device_management.activate_device.need_help_title.4\":\"How do I deactivate a device from my Crunchyroll account?\",\"account.device_management.activate_device.need_help_description.1\":\"Crunchyroll is available on media streaming devices (Apple TV, Chromecast, Fire TV, and Roku), mobile phones (Android and iOS), and several gaming consoles (Xbox One, Xbox Series S/X, PlayStation®4, PlayStation®5, and Nintendo Switch™). For a full list of supported devices and additional details, check out \u003clink\u003eCrunchyroll devices\u003c/link\u003e.\",\"account.device_management.activate_device.need_help_description.2\":\"You can activate Crunchyroll on multiple devices, however there are limitations depending on the number of simultaneous streaming depending on your subscription. To manage the devices linked to your account, visit the \u003cdeviceLink\u003eDevice Management\u003c/deviceLink\u003e section in \\\"Settings\\\" on the Crunchyroll website or visit \u003chelpLink\u003eHelp Center\u003c/helpLink\u003e for more details.\",\"account.device_management.activate_device.need_help_description.3.title\":\"If you encounter any issues while activating Crunchyroll on your device, try the following steps:\",\"account.device_management.activate_device.need_help_description.3.step.1\":\"Make sure your device is connected to the internet.\",\"account.device_management.activate_device.need_help_description.3.step.2\":\"Have the latest version of the Crunchyroll app installed on your device.\",\"account.device_management.activate_device.need_help_description.3.step.3\":\"Check if the activation code is correct (it should contain 6 alpha-numeric characters).\",\"account.device_management.activate_device.need_help_description.3.step.4\":\"For further assistance, please refer to the \u003clink\u003eCrunchyroll activation guide\u003c/link\u003e.\",\"account.device_management.activate_device.need_help_description.4.title\":\"To deactivate a device from your Crunchyroll account, follow these steps:\",\"account.device_management.activate_device.need_help_description.4.step.1\":\"Log in to your Crunchyroll account on the website.\",\"account.device_management.activate_device.need_help_description.4.step.2\":\"Go to Settings and select \u003clink\u003eDevice Management\u003c/link\u003e.\",\"account.device_management.activate_device.need_help_description.4.step.3\":\"Choose the device you want to deactivate and select \\\"DEACTIVATE.\\\" \",\"account.device_management.activate_device.need_help_description.4.step.4\":\"Alternatively, you can deactivate all devices linked to your account by selecting \\\"DEACTIVATE ALL DEVICES.\\\"\",\"account.device_management.activate_device.need_help_description.4.step.5\":\"Confirm the action, and the selected device(s) will be removed from your account.\",\"account.device_management.activate_device.common_error\":\"Something went wrong. Please try again.\",\"account.token_fetch_fail\":\"Something went wrong. Please try again.\",\"change_avatar_modal.title\":\"Avatar Selection\",\"change_avatar_modal.description\":\"Choose your avatar! You can change it at any time.\",\"change_avatar_modal.cancel\":\"Cancel\",\"change_avatar_modal.save\":\"Save\",\"change_avatar_modal.user_avatar_alt\":\"User Avatar.\",\"input.email\":\"Email\",\"input.username.ugc\":\"Username (Optional)\",\"input.username.randomize\":\"Randomize\",\"input.password.hide\":\"Hide\",\"input.password.show\":\"Show\",\"input.username.validation.chars_length\":\"Must be between {from} and {to} characters.\",\"input.username.validation.chars_invalid\":\"Must only contain valid characters.\",\"input.username.validation.unavailable\":\"Username is unavailable.\",\"input.username.validation.suggestion\":\"Username is unavailable. Here's a suggestion!\",\"input.username.uploading_error_message\":\"Something went wrong. Please try again.\",\"upsell_popup.free_trial.title\":\"{duration}-Day Free Trial\",\"upsell_popup.free_trial.text\":\"Premium access includes unlimited anime, no ads, and new episodes shortly after they air in Japan. Try it now!\",\"upsell_popup.go_premium.title\":\"Go Premium\",\"upsell_popup.go_premium.text\":\"Unlimited anime, no ads, and new episodes shortly after they air in Japan. Starting at {price}/month.\",\"upsell_popup.title\":\"Watch Now with Premium\",\"upsell_popup.benefits.title\":\"Get even more with Mega Fan:\",\"upsell_popup.benefits.adfree\":\"Ad-free anime\",\"upsell_popup.benefits.offline\":\"Offline viewing\",\"upsell_popup.benefits.gamevault\":\"Access to free video games\",\"upsell_popup.benefits.devices\":\"Available on multiple devices\",\"upsell_popup.free_trial_description\":\"After your free Crunchyroll Premium: Mega Fan trial, your account will automatically renew at {price} per month.\",\"upsell_popup.premium_description\":\"Your Crunchyroll Premium: Mega Fan membership will automatically renew at {price} per month.\",\"upsell_popup.compare_our_plans\":\"Compare our premium plans\",\"upsell_points.button_anchor.free\":\"{duration}-Day Free Trial\",\"upsell_points.button_anchor.go_premium\":\"Go Premium\",\"premium_dub_modal.dismiss_button\":\"No, Thanks\",\"profile_wallpapers.fetch_error_message\":\"Something went wrong. Please try again.\",\"avatars.fetch_error_message\":\"Something went wrong. Please try again.\",\"auth_modal.title\":\"Log In or Create Account\",\"auth_modal.description_ugc\":\"Log in to add shows and movies to your watchlist, customize your preferences, and more! New here? Create a Crunchyroll account.\",\"auth_modal.login_button\":\"Log In\",\"auth_modal.create_account_button\":\"Create Account\",\"email_verification.title\":\"Confirm Your Email Address\",\"email_verification.description\":\"A verification link will be sent to the following email address:\",\"email_verification.submit_button\":\"Send Verification Link\",\"email_verification.action_text\":\"Having trouble? Contact {customerSupportLink}.\",\"email_verification.action_link\":\"Customer Support\",\"email_verification.request.speech_bubble\":\"Thank you!\",\"email_verification.request.title\":\"Email verification link has been sent\",\"email_verification.request.description\":\"Please check your inbox.\",\"email_verification.request.description_email\":\"Please check your {email} inbox.\",\"custom_list.item.more_options\":\"More Options\",\"custom_list.item.rename_option\":\"Rename Crunchylist\",\"custom_list.item.delete_option\":\"Delete Crunchylist\",\"custom_list.item_child.remove_option\":\"Remove\",\"custom_list.item_child.unavailable\":\"No longer available\",\"custom_list.lists\":\"lists\",\"custom_list.add_to_list_button.title\":\"Add to Crunchylist\",\"custom_list.add_to_list_modal.title\":\"Add to Crunchylist\",\"custom_list.add_modal.create_button\":\"Create New List\",\"custom_list.add_modal.create_input_label\":\"Create New List\",\"custom_list.add_dropdown.list_item.count\":\"{listItemCount, plural, one {# Item} other {# Items}}\",\"custom_list.add_modal.list_number\":\"{customListTotalItems}/{customListMaxItems} Lists\",\"custom_list.add_modal.item.accessibility_label\":\"Add to {title} crunchylist\",\"custom_list.add_dropdown.manage_lists\":\"Manage lists\",\"watchlist_action_icon.tooltip.add\":\"Add to Watchlist\",\"watchlist_action_icon.tooltip.remove\":\"Remove from Watchlist\",\"watchlist_card_action_icon.tooltip.add_fav\":\"Mark as Favorite\",\"watchlist_card_action_icon.tooltip.remove_fav\":\"Remove from Favorites\",\"watchlist_card_action_icon.tooltip.remove\":\"Remove\",\"create_custom_list.success_message\":\"\\\"{title}\\\" successfully created.\",\"create_custom_list.error\":\"Something went wrong. Please try again.\",\"create_custom_list.limit_reached_error\":\"List limit reached.\",\"rename_custom_list_modal.title\":\"Rename Crunchylist\",\"rename_custom_list_modal.input.label\":\"List Name\",\"rename_custom_list_modal.button.cancel.text\":\"Cancel\",\"rename_custom_list_modal.button.save.text\":\"Rename List\",\"rename_custom_list.success\":\"List successfully renamed.\",\"rename_custom_list.error\":\"Something went wrong. Please try again.\",\"rename_custom_list.modal_empty_input_error\":\"List name required.\",\"rename_custom_list.modal_max_length_error\":\"Name cannot exceed 80 characters.\",\"delete_custom_list_modal.title\":\"Delete Crunchylist\",\"delete_custom_list_modal.message\":\"Are you sure you’d like to delete this Crunchylist? {linebreak} It can’t be undone.\",\"delete_custom_list_modal.button.cancel.text\":\"Cancel\",\"delete_custom_list_modal.button.delete.text\":\"Delete List\",\"delete_custom_list.success\":\"List successfully deleted.\",\"delete_custom_list.error\":\"Something went wrong. Please try again.\",\"delete_custom_list_item_modal.title\":\"Remove “{title}”\",\"delete_custom_list_item_modal.title_unavailable\":\"Remove from Crunchylist?\",\"delete_custom_list_item_modal.message\":\"Are you sure you’d like to remove it?\",\"delete_custom_list_item_modal.button.remove.text\":\"Remove\",\"delete_custom_list_item_modal.button.cancel.text\":\"Cancel\",\"delete_custom_list_item.success\":\"{title} successfully removed.\",\"delete_custom_list_item.success_unavailable\":\"Successfully removed.\",\"delete_custom_list_item.error\":\"Something went wrong. Please try again.\",\"custom_list_search.no_results\":\"That did not return any results. Try searching for something different.\",\"add_custom_list_item.success\":\"{title} successfully added.\",\"add_custom_list_item.duplicate\":\"{title} already added.\",\"add_custom_list_item.limit_reached\":\"List is full.\",\"series.add_custom_list_item.success\":\"Series successfully added to {title}.\",\"movie.add_custom_list_item.success\":\"Movie successfully added to {title}.\",\"star_rating.average_rating_title\":\"Average Rating\",\"star_rating.tooltip.preview\":\"Rate this {star, plural, one {# star} other {# stars}}\",\"star_rating.tooltip.sign_in_to_rate\":\"Log In or Create Account to do this\",\"star_rating.tooltip.average\":\"Average {average} out of 5 stars\",\"star_rating.tooltip.ratings\":\"{count} ratings\",\"star_rating.tooltip.label\":\"{rating} ({count})\",\"star_rating.tooltip.not_rated\":\"Not yet rated\",\"star_rating.tooltip.user_rated\":\"You rated this {rating} out of 5 stars\",\"add_custom_list_item.error\":\"Something went wrong. Please try again.\",\"footer.social.facebook_link\":\"https://www.facebook.com/Crunchyroll/\",\"footer.social.x_link\":\"https://x.com/crunchyroll\",\"footer.social.youtube_link\":\"https://www.youtube.com/user/crunchyroll/\",\"footer.social.tiktok_link\":\"https://www.tiktok.com/@crunchyroll\",\"footer.social.instagram_link\":\"https://www.instagram.com/crunchyroll/\",\"news_and_editorial.top_news_title\":\"Top News\",\"news_and_editorial.top_news.by_author\":\"by {author}\",\"news_and_editorial.latest_title\":\"Latest\",\"news_and_editorial.view_all_link\":\"View All\",\"recent_episodes.release_day.today\":\"Today\",\"recent_episodes.release_day.yesterday\":\"Yesterday\",\"release_episodes.release_card.episode\":\"Episode {episodeNumber}\",\"release_episodes.release_card.stack.episode\":\"{count, plural, one {# Episode} other {# Episodes}}\",\"release_episodes.release_card.dub_title\":\"(Dub) {title}\",\"release_episodes.release_card.stack.dub_title\":\"(Dubs) {title}\",\"release_episodes_section.view_release_calendar\":\"View Release Calendar\",\"release_episodes_section.show_more\":\"Show More\",\"share.share\":\"Share\",\"share.modal.title.show\":\"Share This Show\",\"share.modal.title.artist\":\"Share\",\"share.modal.title.episode\":\"Share This Episode\",\"share.modal.title.music\":\"Share This Music Video\",\"share.modal.title.movie\":\"Share This Movie\",\"share.logo.email\":\"Email\",\"share.logo.x\":\"X\",\"share.logo.facebook\":\"Facebook\",\"share.logo.reddit\":\"Reddit\",\"share.logo.pinterest\":\"Pinterest\",\"share.logo.tumblr\":\"Tumblr\",\"share.logo.whats_app\":\"WhatsApp\",\"share.logo.telegram\":\"Telegram\",\"share.logo.line\":\"Line\",\"share.logo.v_kontakte\":\"ВКонтакте\",\"share.logo.odnoklassniki\":\"OK.RU\",\"connected_apps.button.connect\":\"Connect\",\"connected_apps.button.disconnect\":\"Disconnect\",\"account.connected_apps.page.title\":\"Connected Apps\",\"account.connected_apps.page.description\":\"Connect to third party apps\",\"account.connected_apps.discord.title\":\"Discord\",\"account.connected_apps.discord.description_to_connect\":\"Linking your account will share what you are currently watching on Discord.\",\"account.connected_apps.discord.description_to_disconnect\":\"If you don’t want to share what you’re watching any longer, click disconnect.\",\"account.connected_apps.disconnect_modal.disconnect\":\"Disconnect\",\"account.connected_apps.disconnect_modal.cancel\":\"Cancel\",\"account.connected_apps.disconnect_modal.discord.title\":\"Disconnect from Discord\",\"account.connected_apps.disconnect_modal.discord.description\":\"Are you sure you want to disconnect from your account on Discord?\",\"account.connected_apps.disconnect.discord.success\":\"Discord has been successfully disconnected.\",\"account.connected_apps.message.error\":\"Something went wrong. Please try again.\",\"account.connected_apps.error.title\":\"There was an error loading your connected apps\",\"account.connected_apps.error.action\":\"Please try again\",\"account.lwa.notification.success\":\"Your Prime Video Channel has successfully connected to Crunchyroll!\",\"account.lwa.notification.double_premium\":\"You’re already enjoying Crunchyroll Premium.\",\"account.lwa.error_modal.title\":\"We Could Not Connect to Prime Video\",\"account.lwa.error_modal.description\":\"Something went wrong! Check out how you can connect your Amazon Prime Video Channel Subscription on our \u003clink\u003eFAQ article\u003c/link\u003e.\",\"account.lwa_error_modal.already_linked.description\":\"This Prime Video account is already connected to Crunchyroll. Please make sure you are using the right Crunchyroll account.\",\"account.lwa_error_modal.button\":\"Try again\",\"account.third_auth_error_modal.title.third_party\":\"We could not connect your {partner} account\",\"account.third_auth_error_modal.description.third_party\":\"Something went wrong! Please try again. If the issue persists, {linebreak} please contact {partner} and request a new activation link.\",\"account.third_auth_error_modal.button.third_party\":\"Contact {partner}\",\"account.third_auth.third_party.success\":\"You are now Premium! Connected with {partner} successfully.\",\"account.third_auth.third_party.double_premium\":\"You are already Premium! Your {partner} account was not connected.\",\"account.third_auth.third_party.error\":\"Could not connect your {partner} account.\",\"activate_device.input.label.error.invalid_code\":\"The activation code entered is invalid, check the code on your device and try again.\",\"activate_device.input.label.error.common\":\"We couldn’t activate your device. Try entering your activation code again.\",\"activate_device.button_text\":\"Activate\",\"activate_device.notification.success\":\"Your device has been successfully activated.\",\"activate_device_tv.notification.success\":\"Your device has been successfully activated. Continue on your TV.\",\"music.genres\":\"Genres\",\"music.tag.music_video\":\"Music Video\",\"music.tag.concert\":\"Concert\",\"artist.filtering.music_videos\":\"Music Videos\",\"artist.filtering.concerts\":\"Concerts\",\"artist.tag.music_artist\":\"Music Artist\",\"artist.music.empty_list.cta\":\"Explore our library\",\"artist.music.empty_list.heading\":\"Videos Aren’t Available\",\"artist.music.empty_list.text\":\"While this artist’s videos can’t be viewed, we do have others like them.\",\"artist.music.show_more\":\"Show More\",\"artist.music.background_alt\":\"Artist background\",\"artist.music.unavailable_videos\":\"Unfortunately, this artist's videos aren’t available.\",\"dub_unavailable_popup.dismiss_button_text\":\"No, thanks\",\"dub_unavailable_language.default\":\"{locale} Dub is not available for this episode\",\"dub_unavailable_language.ja-JP\":\"Japanese Dub is not available for this episode\",\"dub_unavailable_language.en-US\":\"English Dub is not available for this episode\",\"dub_unavailable_language.fr-FR\":\"French Dub is not available for this episode\",\"dub_unavailable_language.de-DE\":\"German Dub is not available for this episode\",\"dub_unavailable_language.it-IT\":\"Italian Dub is not available for this episode\",\"dub_unavailable_language.pt-PT\":\"Portuguese Dub is not available for this episode\",\"dub_unavailable_language.pt-BR\":\"Portuguese Dub is not available for this episode\",\"dub_unavailable_language.ru-RU\":\"Russian Dub is not available for this episode\",\"dub_unavailable_language.es-ES\":\"Spanish Dub is not available for this episode\",\"dub_unavailable_language.es-419\":\"Spanish Dub is not available for this episode\",\"dub_unavailable_language.ar-SA\":\"Arabic Dub is not available for this episode\",\"dub_unavailable_language.hi-IN\":\"Hindi Dub is not available for this episode\",\"premium_dub.dub_language_premium.default\":\"{locale} Dub is Premium\",\"premium_dub.dub_language_premium.ja-JP\":\"Japanese Dub is Premium\",\"premium_dub.dub_language_premium.en-US\":\"English Dub is Premium\",\"premium_dub.dub_language_premium.fr-FR\":\"French Dub is Premium\",\"premium_dub.dub_language_premium.de-DE\":\"German Dub is Premium\",\"premium_dub.dub_language_premium.it-IT\":\"Italian Dub is Premium\",\"premium_dub.dub_language_premium.pt-PT\":\"Portuguese Dub is Premium\",\"premium_dub.dub_language_premium.pt-BR\":\"Portuguese Dub is Premium\",\"premium_dub.dub_language_premium.ru-RU\":\"Russian Dub is Premium\",\"premium_dub.dub_language_premium.es-ES\":\"Spanish Dub is Premium\",\"premium_dub.dub_language_premium.es-419\":\"Spanish Dub is Premium\",\"premium_dub.dub_language_premium.ar-SA\":\"Arabic Dub is Premium\",\"premium_dub.dub_language_premium.hi-IN\":\"Hindi Dub is Premium\",\"premium_dub.watch_dub_language.default\":\"Watch in {locale}\",\"premium_dub.watch_dub_language.ja-JP\":\"Watch in Japanese\",\"premium_dub.watch_dub_language.en-US\":\"Watch in English\",\"premium_dub.watch_dub_language.fr-FR\":\"Watch in French\",\"premium_dub.watch_dub_language.de-DE\":\"Watch in German\",\"premium_dub.watch_dub_language.it-IT\":\"Watch in Italian\",\"premium_dub.watch_dub_language.pt-PT\":\"Watch in Portuguese\",\"premium_dub.watch_dub_language.pt-BR\":\"Watch in Portuguese\",\"premium_dub.watch_dub_language.ru-RU\":\"Watch in Russian\",\"premium_dub.watch_dub_language.es-ES\":\"Watch in Spanish\",\"premium_dub.watch_dub_language.es-419\":\"Watch in Spanish\",\"premium_dub.watch_dub_language.ar-SA\":\"Watch in Arabic\",\"premium_dub.watch_dub_language.hi-IN\":\"Watch in Hindi\",\"premium_dub.next_dub_language_unavailable.default\":\"{locale} Dub is not available for the next episode\",\"premium_dub.next_dub_language_unavailable.ja-JP\":\"Japanese Dub is not available for the next episode\",\"premium_dub.next_dub_language_unavailable.en-US\":\"English Dub is not available for the next episode\",\"premium_dub.next_dub_language_unavailable.fr-FR\":\"French Dub is not available for the next episode\",\"premium_dub.next_dub_language_unavailable.de-DE\":\"German Dub is not available for the next episode\",\"premium_dub.next_dub_language_unavailable.it-IT\":\"Italian Dub is not available for the next episode\",\"premium_dub.next_dub_language_unavailable.pt-PT\":\"Portuguese Dub is not available for the next episode\",\"premium_dub.next_dub_language_unavailable.pt-BR\":\"Portuguese Dub is not available for the next episode\",\"premium_dub.next_dub_language_unavailable.ru-RU\":\"Russian Dub is not available for the next episode\",\"premium_dub.next_dub_language_unavailable.es-ES\":\"Spanish Dub is not available for the next episode\",\"premium_dub.next_dub_language_unavailable.es-419\":\"Spanish Dub is not available for the next episode\",\"premium_dub.next_dub_language_unavailable.ar-SA\":\"Arabic Dub is not available for the next episode\",\"premium_dub.next_dub_language_unavailable.hi-IN\":\"Hindi Dub is not available for the next episode\",\"premium_dub.next_dub_language_alternative.default\":\"But you can watch it in {locale} instead. Would you like to continue?\",\"premium_dub.next_dub_language_alternative.ja-JP\":\"But you can watch it in Japanese instead. Would you like to continue?\",\"premium_dub.next_dub_language_alternative.en-US\":\"But you can watch it in English instead. Would you like to continue?\",\"premium_dub.next_dub_language_alternative.fr-FR\":\"But you can watch it in French instead. Would you like to continue?\",\"premium_dub.next_dub_language_alternative.de-DE\":\"But you can watch it in German instead. Would you like to continue?\",\"premium_dub.next_dub_language_alternative.it-IT\":\"But you can watch it in Italian instead. Would you like to continue?\",\"premium_dub.next_dub_language_alternative.pt-PT\":\"But you can watch it in Portuguese instead. Would you like to continue?\",\"premium_dub.next_dub_language_alternative.pt-BR\":\"But you can watch it in Portuguese instead. Would you like to continue?\",\"premium_dub.next_dub_language_alternative.ru-RU\":\"But you can watch it in Russian instead. Would you like to continue?\",\"premium_dub.next_dub_language_alternative.es-ES\":\"But you can watch it in Spanish instead. Would you like to continue?\",\"premium_dub.next_dub_language_alternative.es-419\":\"But you can watch it in Spanish instead. Would you like to continue?\",\"premium_dub.next_dub_language_alternative.ar-SA\":\"But you can watch it in Arabic instead. Would you like to continue?\",\"premium_dub.next_dub_language_alternative.hi-IN\":\"But you can watch it in Hindi instead. Would you like to continue?\",\"series.premium_upsell_banner.title\":\"Watch this series without ads!\",\"series.premium_upsell_banner.title.dynamic\":\"Watch {title} without ads using Crunchyroll Premium!\",\"series.premium_upsell_banner.start_free_trial\":\"Start free trial\",\"series.premium_upsell_banner.go_premium\":\"Go Premium\",\"series.premium_upsell_banner.description\":\"Get Crunchyroll Premium for this and 30,000+ more episodes of ad-free anime!\",\"series.premium_upsell_banner.description.free_trial\":\"Try Crunchyroll Premium free for {duration} days.\",\"dragonfly.watch_data_transfer.successful\":\"Success! Your Watchlist and history are here.\",\"dragonfly.modal.faq\":\"Still have questions? Check out our \u003clink\u003eFAQ page\u003c/link\u003e.\",\"dragonfly.lrx.modal.description\":\"Go to the {appStore} on your {device} and download the Crunchyroll app.\",\"dragonfly.platforms.xbox\":\"Xbox\",\"dragonfly.platforms.ps\":\"PS 4 or 5\",\"dragonfly.platforms.androidtv\":\"AndroidTV\",\"dragonfly.platforms.firetv\":\"FireTV\",\"dragonfly.platforms.store.xbox\":\"Microsoft Store\",\"dragonfly.platforms.store.ps\":\"PlayStation Store\",\"dragonfly.platforms.store.androidtv\":\"Google Play Store\",\"dragonfly.platforms.store.firetv\":\"Amazon Store\",\"watch_data_migration.in_progress\":\"Your Funimation watch data transfer is in progress\",\"user_migration.fun_premium_no_cr.modal.title\":\"Welcome to Your New Anime Home!\",\"user_migration.fun_premium_no_cr.modal.description\":\"Your Crunchyroll account has been created. You now have Premium access to Crunchyroll due to your Funimation subscription. Your Watchlist and History are on the way over.\",\"user_migration.fun_premium_no_cr.modal.description.secondary\":\"Moving forward, please use your Funimation username and password to access your content on all Crunchyroll apps.\",\"user_migration.fun_premium_no_cr.modal.cta\":\"Let's go\",\"user_migration.watch_history_merge.modal.title\":\"Action Required for Your Data\",\"user_migration.watch_history_merge.modal.description.fun_free\":\"We’ve merged your Funimation and Crunchyroll accounts! Moving forward use your Crunchyroll username and password.\",\"user_migration.watch_history_merge.modal.description.cr_fun_premium\":\"With your current subscription, you’ll continue to have Premium access on all Crunchyroll platforms! From now on, use your Crunchyroll username and password to access your content on all Crunchyroll apps.\",\"user_migration.watch_history_merge.modal.description.fun_premium.cr_free\":\"We’ve merged your Funimation and Crunchyroll accounts! You’re now on Crunchyroll Premium. Use the same username and password.\",\"user_migration.watch_history_merge.modal.description.secondary\":\"What should we do with your watchlist and history?\",\"user_migration.watch_history_merge.modal.radio_button.combine\":\"Combine Crunchyroll and Funimation data\",\"user_migration.watch_history_merge.modal.radio_button.keep_fun\":\"Replace my Crunchyroll data with Funimation data\",\"user_migration.watch_history_merge.modal.radio_button.keep_cr\":\"Save Crunchyroll data only\",\"user_migration.watch_history_merge.modal.continue_button\":\"Continue\",\"user_migration.watch_history_confirmation.modal.title\":\"Are You Sure?\",\"user_migration.watch_history_confirmation.modal.description\":\"You won’t be able to change your decision on your own after confirming. You’ll need to contact Customer Support.\",\"user_migration.watch_history_confirmation.modal.cta.confirm\":\"Yes, I’m sure\",\"user_migration.watch_history_confirmation.modal.cta.dismiss\":\"No, take me back\",\"user_migration.fun_free_no_cr.modal.title\":\"Welcome to Your New Anime Home!\",\"user_migration.fun_free_no_cr.modal.description\":\"Your account has been created. Your queue and history are on the way over. In the meantime, enjoy the world’s largest dedicated anime collection.\",\"user_migration.fun_free_no_cr.modal.cta\":\"Start Exploring\",\"user_migration.fun_free_no_cr.modal.premium_section.title\":\"Get more with premium\",\"user_migration.fun_free_no_cr.modal.premium_section.description\":\"Enjoy ad-free access to the entire Crunchyroll library anytime, anywhere—plus simulcasts straight from Japan.\",\"user_migration.fun_free_no_cr.modal.premium_section.cta\":\"See premium plans\",\"user_migration.migration_lrx.modal.title\":\"Get Crunchyroll On Your Big Screen\",\"user_migration.migration_lrx.modal.no_activation.description\":\"Download the Crunchyroll app on your TV, streaming, or gaming console device to get back to watching all your favorite shows!\",\"user_migration.migration_lrx.modal.activation.description.secondary\":\"Use the login code on your new Crunchyroll app to activate the device, and get back to watching your favorites!\",\"user_migration.migration_lrx.modal.device_availability.action\":\"Device Availability\",\"user_migration.migration_lrx.modal.go_home.action\":\"Go Home\",\"user_migration.migration_lrx.modal.device_activation.action\":\"Device Activation\",\"onboarding.profile_email.back_button\":\"Take Me Back\",\"onboarding.profile_email.title\":\"What’s Your Email?\",\"onboarding.profile_email.subtitle\":\"We need an email in order to recover your account.\",\"onboarding.profile_email.continue_button\":\"Continue\",\"onboarding.profile_email.errors.invalid_email\":\"Please re-enter a valid email address.\",\"onboarding.profile_email.errors.email_already_set\":\"Email has already been set.\",\"onboarding.profile_email.errors.common_message\":\"Something went wrong. Please try again.\",\"notification_center.page_title\":\"Notification Center\",\"notification_center.new_collection\":\"New Notifications\",\"notification_center.past_collection\":\"Past Notifications\",\"notification_center.card.thumbnail_alt\":\"Notification thumbnail\",\"notification_center.empty_collection.title\":\"You don’t have any notifications.\",\"notification_center.empty_collection.description\":\"We’ll send you a notification when we have something new to share!\",\"redeem.heading\":\"Redeem Your Gift Card\",\"redeem.subtitle\":\"Binge-worthy anime and exclusive games. It’s all here.\",\"redeem.input.label\":\"Enter Gift Card Code\",\"redeem.input.label.empty\":\"Enter Card Number or Code\",\"redeem.input.label.invalid\":\"Please enter a valid code\",\"redeem.need_help\":\"NEED HELP?\",\"redeem.continue\":\"CONTINUE\",\"redeem_gift_card_footnote.heading\":\"Surprise an anime fan with Premium today!\",\"redeem_gift_card_footnote.subtitle\":\"Give the gift of ad-free anime, offline viewing and \u003clink\u003emore\u003c/link\u003e on Crunchyroll.\",\"redeem.footnote.shop-gift-cards\":\"Shop gift cards\",\"redeem.auth_modal.description\":\"You will need to log in to your account to redeem and apply a code. New here? Create a Crunchyroll account.\",\"redeem.details.heading\":\"Great, You’re Almost There!\",\"redeem.details.code_ending\":\"Code ending in ... {code}\",\"redeem.details.redeem_before\":\"Redeem before: {expirationDate}\",\"redeem.details.redeem_code\":\"Redeem CODE\",\"redeem.details.check_another_code\":\"CHECK ANOTHER CODE\",\"redeem.details.availability_text\":\"*Device and content availability vary by country or region.\",\"redeem.details.already_premium_description\":\"If you are already a {subscription} subscriber: Your plan will automatically renew after {couponType} period at the current price of your subscription. Please check Membership Info in your Account Settings page for more details.\",\"redeem.details.need_help_text\":\"Still need help?\",\"redeem.details.contact_us\":\"Contact Us\",\"redeem.details.subtitle\":\"{duration} {couponType}\",\"redeem.details.common_perk_1_device\":\"Our entire anime library ad-free, new episodes same day as Japan, and access to exclusive games on one device.\",\"redeem.details.common_perk\":\"Our entire anime library ad-free, new episodes same day as Japan, and access to exclusive games.\",\"redeem.details.perks.plus\":\"PLUS\",\"redeem.details.perk.1_stream_devices\":\"Stream on \u003chighlighted\u003e1 device\u003c/highlighted\u003e at a time\",\"redeem.details.perk.4_stream_devices\":\"Stream on up to \u003chighlighted\u003e4 devices\u003c/highlighted\u003e at a time\",\"redeem.details.perk.6_stream_devices\":\"Stream on up to \u003chighlighted\u003e6 devices\u003c/highlighted\u003e at a time\",\"redeem.details.perk.offline_viewing\":\"Offline Viewing\",\"redeem.details.perk.early_access\":\"Early access to Store sales\",\"redeem.details.perk.10_discount_in_the_store\":\"10% off Store everyday; Members only offers\",\"redeem.details.perk.15_discount_in_the_store\":\"15% off Store everyday; Members only offers\",\"redeem.details.perk.20_discount_in_the_store\":\"20% off Store everyday; Members only offers\",\"redeem.details.perk.discount_in_the_store_and_early_access\":\"Crunchyroll Store Deals: \u003chighlighted\u003e{discount}%\u003c/highlighted\u003e off select products; Members only offers \u0026 early access to sales; Free {region}Shipping{price}\",\"redeem.details.perk.discount_in_the_store\":\"Crunchyroll Store Deals: \u003chighlighted\u003e{discount}%\u003c/highlighted\u003e off select products\",\"redeem.details.perk.anual_swag_bag\":\"Annual Swag Bag\",\"redeem.details.perk.hime_figure_discount\":\"Hime Figurine discount\",\"redeem.details.perk.game_vault\":\"Access Crunchyroll Game Vault, a catalog of free games\",\"redeem.success.new_member_title\":\"We're Getting Your {tierName} Membership Ready!\",\"redeem.details.duration.day\":\"{duration, plural, one {# Day} other {# Days}}\",\"redeem.details.duration.month\":\"{duration, plural, one {# Month} other {# Months}}\",\"redeem.details.duration.year\":\"{duration, plural, one {# Year} other {# Years}}\",\"redeem.details.gift_access\":\"Gift Access\",\"redeem.details.free_trial\":\"Free Trial\",\"redeem.success.code_redeemed_title\":\"Code Redeemed!\",\"redeem.success.description.new\":\"Thanks for joining Crunchyroll Premium. It might take several minutes for your Premium features to activate.\",\"redeem.success.description.equal\":\"Since you’re already a {tierName} subscriber, your {duration} {couponType} will begin at the end of your current billing cycle.\",\"redeem.success.description.greater\":\"Your {duration} {couponType} to {tierName} starts now. Your regular {prevTier} subscription will continue once the {couponType} period ends.\",\"redeem.success.description.lesser\":\"{duration} {couponType} to {tierName} will start when your {prevTier} subscription ends. You can change your subscription any time in Account Settings.\",\"redeem.success.description.unknown\":\"Your {duration} {couponType} to {tierName} Starts Now. Your previous subscription will continue after the {couponType} period ends.\",\"redeem.success.got_it\":\"GOT IT!\",\"redeem.success.go_to_account\":\"go to account\",\"redeem.ineligible.modal.title\":\"We Could Not Redeem Your Gift Card\",\"redeem.ineligible.modal.description\":\"Sorry! This code cannot be applied to your account.\",\"redeem.ineligible.modal.3rdparty.description\":\"Because your subscription is through {source}, we’re not able to change or extend it. Check out how you can redeem your gift card on our \u003clink\u003eFAQ article\u003c/link\u003e.\",\"redeem.ineligible.modal.3rdparty.unknown.description\":\"Because your subscription is through a third-party, we’re not able to change or extend it. Check out how you can redeem your gift card on our \u003clink\u003eFAQ article\u003c/link\u003e.\",\"redeem.api.error\":\"We couldn't redeem your gift code. Try again later. If you're still having trouble, contact \u003clink\u003eCustomer Support\u003c/link\u003e.\",\"redeem.ineligible.modal.geoblocked.description\":\"Redeeming a gift code outside of its original country is not allowed. \u003clink\u003eContact Customer Support\u003c/link\u003e for help.\",\"redeem.ineligible.modal.disallowed_type.description\":\"To redeem this code, please contact \u003clink\u003eCustomer Support\u003c/link\u003e.\",\"redeem.ineligible.modal.button\":\"Got it\",\"redeem.rate_limited.modal.title\":\"Too many gift card attempts have been made\",\"redeem.rate_limited.modal.description\":\"Too many gift card attempts have been made. Try again later\",\"redeem.rate_limited.modal.button\":\"OK\",\"lupin.form.create.title\":\"Create Profile\",\"lupin.form.edit.title\":\"Edit Profile\",\"lupin.form.profile_name.label\":\"Profile Name\",\"lupin.form.profile_name.description\":\"This is seen within your household and can be changed at anytime.\",\"lupin.form.username.description_ugc\":\"Create a Username to be ready for future experiences that’ll share your love of anime! Pick one you love, it can’t be changed!\",\"lupin.form.remove_profile\":\"Delete profile\",\"lupin.form.wallpaper.overlay.label\":\"Update Background Image\",\"lupin.form.avatar.overlay.label\":\"Change\",\"lupin.form.submit\":\"Save\",\"lupin.form.cancel\":\"Cancel\",\"lupin.select_profile.title\":\"Who's going on an adventure?\",\"lupin.select_profile.aria_label\":\"{value} Profile\",\"lupin.add_new_profile.button\":\"Add New\",\"lupin.add_new_profile.button.aria_label\":\"Add New Profile\",\"lupin.select_profile.button\":\"Manage profiles\",\"lupin.profile.name.placeholder\":\"Me\",\"lupin.profiles.welcome\":\"Welcome, {name}!\",\"lupin.profiles.welcome.description\":\"One sec, increasing power levels ...\",\"lupin.profiles.switch.failed\":\"Something went wrong. Please try again.\",\"lost-premium-resubscribe-modal.title\":\"Continue Using All Your Profiles by Resubscribing\",\"lost-premium-resubscribe-modal.description\":\"Plus, get ad-free content and watch on up to 6 devices at a time with a Premium Membership.\",\"lost-premium-resubscribe-modal.button.confirm\":\"Resubscribe\",\"lost-premium-resubscribe-modal.button.cancel\":\"Not Now\",\"lupin.premium-locked-modal.title\":\"Continue Using All Your Profiles by Resubscribing\",\"lupin.premium-locked-modal.description\":\"Plus, get ad-free content and watch on up to 6 devices at a time with a Premium Membership.\",\"lupin.premium-locked-modal.button.confirm\":\"Resubscribe\",\"lupin.premium-locked-modal.button.cancel\":\"Not Now\",\"lupin.premium_modal.add_profile.title\":\"Get More With a Premium Membership\",\"lupin.premium_modal.add_profile.description\":\"Create profiles, watch on up to 6 devices at a time, and say goodbye to ads by upgrading your membership.\",\"lupin.premium_modal.add_profile.confirm\":\"Upgrade\",\"lupin.premium_modal.add_profile.dismiss\":\"Not Now\",\"account.phone.contact\":\"Having trouble? Contact \u003clink\u003eCustomer Support\u003c/link\u003e.\",\"account.phone.add.title\":\"Add Phone Number\",\"account.phone.add.description\":\"You can use this to log into your Crunchyroll account across devices.\",\"account.phone.add.input.label\":\"Phone Number\",\"account.phone.input.invalid\":\"Enter a valid phone number\",\"account.phone.form.input.description\":\"By entering your mobile number, you agree to receive automated messages from us. Standard messaging and data rates may apply.\",\"account.phone.form.action\":\"Verify your log in number with a one-time code.\",\"account.phone.form.button.send_sms\":\"Send SMS\",\"account.phone.form.button.send_whatsapp\":\"Send WhatsApp\",\"account.phone.form.button.remove\":\"Remove Phone Number\",\"account.phone.add.success\":\"Phone number was added.\",\"account.phone.change.title\":\"Phone Number\",\"account.phone.change.description\":\"The current number on your account is \u003cnoWrap\u003e{phone}\u003c/noWrap\u003e\",\"account.phone.change.input.label\":\"New Phone Number\",\"account.phone.change.remove.modal.has_password.title\":\"Verify Your Account\",\"account.phone.change.remove.modal.has_password.description\":\"Enter your password to remove your phone number.\",\"account.phone.change.remove.modal.has_password.input.label\":\"Password\",\"account.phone.change.remove.modal.has_password.input.label.error\":\"Incorrect Password\",\"account.phone.change.remove.modal.has_password.submit\":\"Remove Number\",\"account.phone.change.remove.modal.no_password.title\":\"Create a Password\",\"account.phone.change.remove.modal.no_password.description\":\"You'll need to create a password to log into your account using email before removing this number.\",\"account.phone.change.remove.modal.no_password.input.new.label\":\"New Password\",\"account.phone.change.remove.modal.no_password.input.retype.label\":\"Retype New Password\",\"account.phone.change.remove.modal.no_password.submit\":\"Save\",\"account.phone.change.remove.notification.success\":\"Phone number was removed.\",\"account.phone.change.remove.notification.error\":\"Something went wrong. Please try again.\",\"account.phone.change.success\":\"Phone number was changed.\",\"account.phone.error\":\"Something went wrong. Please try again.\",\"password-required.modal.title\":\"Not So Fast...\",\"password-required.modal.description.brazil\":\"Enter your account password to change this profile's Maturity Restrictions setting to {value}.\",\"password-required.modal.description.universal\":\"Enter your account password to change this profile’s Content Restrictions setting to {value}.\",\"password-required.modal.description.toggle\":\"Enter your account password to update this profile’s Maturity setting.\",\"password-required.modal.submit-button-text\":\"Confirm\",\"password-required.modal.cancel-button-text\":\"Cancel\",\"otp-required.modal.title\":\"Not So Fast...\",\"otp-required.modal.description.brazil\":\"In order to update this profile's Maturity Restrictions setting to {value}, you'll need to verify permissions via one time passcode.\",\"otp-required.modal.description.universal\":\"In order to update this profile's Content Restrictions setting to {value}, you'll need to verify permissions via one time passcode\",\"otp-required.modal.description.toggle\":\"In order to update this profile's Maturity setting, you'll need to verify permissions via one time passcode.\",\"otp-required.modal.send-button\":\"Send SMS\",\"otp-required.modal.cancel-button\":\"Cancel\",\"lupin.manage_profiles.title\":\"Manage Profiles\",\"lupin.manage_profiles.exit\":\"Done\",\"account.page.title\":\"Account Settings\",\"account.otp_validation.title\":\"Phone Number Verification\",\"account.otp_validation.description\":\"We just sent a verification code to {phone}\",\"account.otp_validation.input.label\":\"Enter your 6-digit code\",\"account.otp_validation.input.error.label\":\"Check the code and try again\",\"account.otp_validation.button.label\":\"Save Number\",\"account.otp_validation.code.issue\":\"Didn’t receive the code?\",\"account.otp_validation.code.resend\":\"Send Again\",\"account.otp_confirmation.description\":\"Please enter the code that we sent to {phone}\",\"account.otp_confirmation.button.label\":\"Submit\",\"lupin.footer.switch_profile\":\"Switch Profile\",\"lupin.delete_profile_modal.title\":\"Delete this profile?\",\"lupin.delete_profile_modal.message_ugc\":\"Deleting this profile will also erase its history, saved lists, and customized preferences. This can't be undone! \",\"lupin.delete_profile_modal.title.2\":\"Sure you want to delete this profile?\",\"lupin.delete_profile_modal.message.2_ugc\":\"Deleting this profile will also erase its history, saved lists, and customized preferences. This can't be undone! \",\"lupin.delete_profile_modal.delete_button\":\"Delete\",\"lupin.delete_profile_modal.cancel_button\":\"Cancel\",\"lupin.delete_profile_modal.error_message\":\"Something went wrong. Please try again.\",\"lupin.delete_profile.success_message\":\"Profile successfully deleted.\",\"lupin.profile_name.validation.chars_length\":\"Must be between {from} and {to} characters.\",\"lupin.profile_name.validation.duplicate\":\"This profile name already exists within your household, try again.\",\"lupin.profile_name.validation.invalid\":\"This doesn’t meet our requirements, try again.\",\"lupin.edit_profile.success_message\":\"Profile has been updated.\",\"lupin.edit_profile.error_message\":\"Something went wrong. Please try again.\",\"lupin.failed_profiles_fetch.message\":\"We are having trouble fetching your profiles\",\"account.phone.unsupported.title\":\"Phone Number\",\"account.phone.unsupported.description\":\"The current number on your account is {phone}\",\"lupin.create_profile.success_message\":\"Your new profile has been successfully created.\",\"lupin.profile.mid_session_deleted.title\":\"This profile has been deleted\",\"lupin.profile.mid_session_deleted.description\":\"This profile no longer exists. Please choose another one to continue.\",\"lupin.profile.mid_session_deleted.dismiss\":\"ok\",\"countdown.seconds\":\"secs\",\"countdown.minutes\":\"mins\",\"countdown.hours\":\"hrs\",\"countdown.days\":\"days\",\"activate_device.enter_code_char-1\":\"Please enter activation code character 1\",\"activate_device.enter_code_char-2\":\"Please enter activation code character 2\",\"activate_device.enter_code_char-3\":\"Please enter activation code character 3\",\"activate_device.enter_code_char-4\":\"Please enter activation code character 4\",\"activate_device.enter_code_char-5\":\"Please enter activation code character 5\",\"activate_device.enter_code_char-6\":\"Please enter activation code character 6\",\"region_restricted.welcome.title\":\"Welcome to Crunchyroll!\",\"region_restricted.welcome.body\":\"We’re currently unavailable in your region. While you’re here, check out Anime Awards, our annual celebration of the best of anime. Are you traveling? \u003clink\u003eSee our FAQ.\u003c/link\u003e\",\"region_restricted.explore.title\":\"More from Crunchyroll\",\"region_restricted.explore.anime_awards.name\":\"Anime Awards\",\"region_restricted.explore.anime_awards.description\":\"Since 2017, this annual event has recognized and celebrated anime’s finest series, films, and the talented people who make them.\",\"region_restricted.explore.anime_awards.cta\":\"Visit Anime Awards\",\"region_restricted.faq.title\":\"FAQ\",\"region_restricted.faq.help_hint\":\"For more help please visit our Help Center\",\"region_restricted.faq.help_cta\":\"Visit Help Desk\",\"region_restricted.faq.Q1\":\"How can I manage my Crunchyroll account while in Japan?\",\"region_restricted.faq.A1\":\"If you need to manage your Crunchyroll account or subscription while in Japan, please reach out to our \u003ccustomer-service-link\u003eCustomer Service team\u003c/customer-service-link\u003e. They can assist you with any changes related to your account.\",\"region_restricted.faq.Q2\":\"I am a Crunchyroll subscriber, can I get a refund while in Japan?\",\"region_restricted.faq.A2\":\"Refunds for Crunchyroll subscriptions are handled on a case-by-case basis. If you are in Japan and wish to request a refund, please contact our \u003ccustomer-service-link\u003eCustomer Service team\u003c/customer-service-link\u003e. They will review your request and provide assistance based on your subscription details and our refund policy.\",\"region_restricted.faq.Q3\":\"I am a Crunchyroll subscriber and currently visiting Japan, but I can't watch any content.\",\"region_restricted.faq.A3\":\"Crunchyroll is only available in certain regions, and unfortunately, it's not available in your area. We're sorry for the inconvenience.\",\"seo.region_restricted.page_title\":\"Welcome | Not Available in Your Area | Crunchyroll\",\"seo.region_restricted.page_description\":\"Crunchyroll is not available in your area and is only available in certain regions. We apologize for any inconvenience. While you're here, we hope you enjoy exploring all things anime, such as anime awards and information. Immerse yourself in the world of anime with Crunchyroll\",\"seo.region_restricted.page_keywords\":\"Crunchyroll, anime, video, streaming, anime shows, streaming service, anime series, anime movies, anime merchandise, anime videos, anime collection, anime awards, awards\",\"mark_as_watched.error\":\"Something went wrong. Please try again.\",\"mark_as_watched.undo\":\"Undo\",\"series_hero_action_customlist\":\"My List\",\"series_hero_action_share\":\"Share\",\"series_hero_action_manga\":\"Manga\",\"series_hero_action_more.tooltip\":\"More Options\",\"series_hero_action_more.mobile_header\":\"More\",\"platform.news\":\"News\",\"platform.anime\":\"Anime\",\"platform.store\":\"Store\",\"platform.games\":\"Games\",\"end_slate.recommendations.title\":\"Let’s find what’s next!\",\"end_slate.recommendations.details_button\":\"Details\",\"consent.limited.title\":\"We've Updated Our Terms\",\"consent.limited.description\":\"We've updated our \u003clink\u003eTerms of Use\u003c/link\u003e for using Crunchyroll. Please review our updated terms. By continuing, you agree to the updated terms.\",\"consent.limited.action\":\"Continue\",\"consent.error\":\"Something went wrong. Please try again.\",\"account.password.action\":\"Reset password\",\"footer.about_crunchyroll.p1\":\"Welcome to Crunchyroll, your ultimate destination for streaming the best in anime entertainment. Whether you’re a lifelong fan or just starting your anime journey, Crunchyroll offers an extensive library of top-tier anime series and movies. From action-packed adventures like Naruto and One Piece to fan-favorites such as Demon Slayer and Attack on Titan, we bring the world of anime right to your screen. With thousands of hours of content, you’ll find something for every mood and taste, whether you’re into heart-pounding action, touching romance, or gripping mysteries.\",\"footer.about_crunchyroll.p2\":\"At Crunchyroll, we take pride in being the go-to-platform for anime lovers around the world. You can dive into a wide variety of genres, including fantasy, slice of life, and sci-fi, ensuring there’s always something new to discover.\",\"footer.about_crunchyroll.p3\":\"With simulcasts straight from Japan, you’ll never miss a moment of the latest and greatest anime releases. Our selection goes beyond just series—enjoy a handpicked selection of anime movies that showcase the best in animation and storytelling. Watch anytime, anywhere, with the Crunchyroll app available across all your devices.\",\"footer.about_crunchyroll.p4\":\"Beyond streaming, Crunchyroll is a hub for all things anime. Explore the Crunchyroll Store for exclusive anime merchandise, collectibles, and apparel. Stay updated with Crunchyroll News, delivering the latest on anime, manga, and pop culture. And for gamers, Crunchyroll Games brings your favorite anime worlds to live in exciting and interactive ways. Join the Crunchyroll community and immerse yourself in a world where anime is more than just a genre—it’s a lifestyle.\",\"action.close\":\"Close\",\"action.clear\":\"Clear\",\"action.carousel.pagination\":\"Show slide\",\"dropdown.filtering\":\"Filter\",\"dropdown.sorting\":\"Sort\",\"dropdown.more_options\":\"More Options\",\"select.seasons\":\"Seasons\",\"select.simulcast_seasons\":\"Simulcast Seasons\",\"select.app_language\":\"App Language\",\"platform_switcher.label\":\"Platforms\",\"header.home\":\"Crunchyroll Home\",\"user_menu.label\":\"User Menu\",\"header.edit_profile\":\"Edit Profile\",\"header.menu_new_tab.games\":\"Games - open in a new tab\",\"header.menu_new_tab.store\":\"Store - open in a new tab\",\"header.menu_new_tab.news\":\"News - open in a new tab\",\"link.open_in_new_tab\":\"{link} - open in a new tab\",\"social_link.open_in_new_tab\":\"Crunchyroll's {platform} official account - open in a new tab\"},\"hasLoaded\":false,\"hasFetchFailed\":false},\"features\":{},\"lists\":{\"watchlist\":{\"allIds\":[],\"inWatchlistFlags\":{},\"isItemsInWatchlistLoading\":true,\"byId\":{},\"isLoading\":true,\"isItemLoading\":false,\"controls\":{\"sorting\":{\"type\":\"\",\"order\":\"desc\"},\"filtering\":{\"favorite\":false,\"content\":\"\",\"language\":\"\"}},\"total\":0,\"totalFetched\":0,\"totalBeforeFilter\":0,\"isLoadingNextPage\":false},\"history\":{\"allIds\":[],\"byId\":{},\"isLoading\":false,\"nextPageLink\":null,\"isLoadingNextPage\":false},\"customList\":{\"activeListId\":null,\"contentByListId\":{},\"byId\":{},\"allIds\":[],\"isLoading\":false,\"totalPrivate\":0,\"maxPrivate\":10,\"error\":null,\"search\":\"\",\"searchResultIds\":[],\"searchResultTotals\":0,\"isSearchLoading\":false,\"isListLoading\":false,\"selectedMediaId\":null}},\"userManagement\":{\"account\":{\"validationHints\":[],\"isJwtTokenRetrieved\":false,\"accountId\":null,\"externalAccountId\":null,\"status\":\"IDLE\",\"jwtError\":null,\"isUserPremium\":null,\"email\":null,\"hasPassword\":false,\"phone\":null,\"prevTokenFetchTimestamp\":null,\"rtId\":null,\"prevSessionIsUserPremium\":null,\"creationDateTimestamp\":null,\"isAnonymous\":true},\"multipleProfiles\":{\"status\":\"IDLE\",\"hasRetriedFetching\":false,\"tierMaxProfilesCount\":0,\"maxProfilesCount\":0,\"primaryProfileId\":null,\"byId\":{},\"allIds\":[],\"currentProfileId\":null,\"isProfileSelectionRequired\":false,\"wasProfileSelected\":false,\"isDowngradeAnnouncementRequired\":false,\"isProfileSelectionLoading\":false,\"isProfileSelectionSystemInitiated\":false,\"manageProfiles\":{\"referrer\":\"/\"},\"isProfileSelectionTriggered\":false,\"createProfile\":{\"referrer\":\"/profiles/manage\",\"isCreating\":false},\"deleteProfile\":{\"profileId\":null,\"isProfileDeleting\":false},\"editProfile\":{\"isUpdating\":false,\"referrer\":\"/profiles/manage\"},\"isMidSessionRemovalAnnouncementVisible\":false,\"usernameValidationError\":null,\"profileNameValidationError\":null,\"upsellTextOfButton\":null,\"hoveredProfileId\":null},\"membership\":{\"userPremiumStatus\":{},\"isEligibleForFreeTrial\":null,\"freeTrialDuration\":null,\"premiumProduct\":{},\"fanPackProduct\":{},\"accessType\":null},\"changeAvatarModal\":{\"isSaveButtonDisabled\":true,\"selectedAvatar\":null,\"randomDefaultAvatar\":null,\"stagedAvatar\":null},\"accountPage\":{\"changeEmail\":{\"isLoading\":false},\"password\":{\"focusedInput\":null,\"error\":null,\"isLoading\":false,\"currentPassword\":\"\",\"newPassword\":\"\",\"retypedPassword\":\"\",\"isPasswordCreateLoading\":false},\"emailNotifications\":{\"notifications\":{},\"status\":\"PENDING\"},\"connectedApps\":{\"discord\":{\"isLoading\":true,\"isConnected\":false,\"isError\":false,\"authorizeUrl\":null},\"selectedDisconnectApp\":null,\"isError\":false},\"preferences\":{\"isClosedCaptionsEnabled\":false,\"subtitleLanguages\":{\"list\":[],\"isLoaded\":false},\"audioLanguages\":{\"list\":[],\"isLoaded\":false}},\"membershipInfo\":{\"accountSubscriptions\":{},\"paymentMethod\":null,\"pendingSubscription\":null,\"isPaymentFailed\":false,\"isPaymentPending\":false,\"latestInvoice\":null,\"isPendingUpgrade\":false,\"isPendingDowngrade\":false,\"isCancelSubscriptionClicked\":false,\"changeType\":null,\"isUpgradeFlashMessageShown\":false,\"requestCount\":0},\"phone\":{\"isPhoneDeleteFormLoading\":false,\"isPhoneFormLoading\":false,\"isOTPFormLoading\":false,\"requestedOTPPhoneNumber\":null,\"requestedOTPChannel\":null}},\"avatars\":{\"isError\":false,\"avatarGroups\":[]},\"usernames\":{\"isLoading\":true,\"usernameList\":[]},\"connectedDevices\":{\"isLoading\":false,\"code\":\"\",\"error\":null,\"isRequestFailed\":false},\"activeDevices\":{\"devices\":[],\"total\":0,\"isError\":false,\"isLoading\":true},\"dragonfly\":{\"migrationStatus\":null,\"watchDataStatus\":null,\"isModalFor1stScenarioClosed\":false,\"isWatchHistoryMergeModalClosed\":false,\"migrationPlatform\":null,\"migrationWatchDataSelected\":\"merge\"},\"profileEmail\":{\"emailInput\":\"\",\"isMarketingOptIn\":false,\"referrer\":\"/\"},\"wallpapers\":{\"wallpaperGroups\":[],\"preview\":\"\",\"selected\":\"\",\"randomWallpaper\":\"\"},\"passwordConfirmation\":{\"isLoading\":false,\"pendingAction\":null,\"isRequestOTPLoading\":false,\"hasOTPBeenSent\":false},\"thirdPartyAuth\":{\"platform\":null,\"error\":null,\"isFailedOAuth\":false,\"oAuthErrorModalDismissed\":false}},\"similarTo\":{\"byId\":{},\"hasResponse\":false},\"sonyMusic\":{\"artist\":{\"musicVideosById\":{},\"concertsById\":{},\"isMusicVideosLoading\":true,\"isConcertsLoading\":true,\"isMusicVideosError\":false,\"isConcertsError\":false,\"isMusicUnavailable\":false},\"musicList\":{\"artistActiveFilter\":\"concert\",\"watchActiveFilter\":\"music_video\",\"isMusicListExpanded\":false,\"isMusicListOpen\":false,\"isMusicListFilteredView\":false},\"musicFeed\":{\"byId\":{},\"allIds\":[],\"status\":\"IDLE\",\"contentStatusById\":{},\"musicHero\":{\"hasLoaded\":false,\"isMissing\":false,\"carouselItems\":{\"byId\":{}}},\"renderableMusicFeedItemCount\":4,\"totalItemsFetched\":0,\"totalItemsCount\":0}},\"notificationCenter\":{\"notifications\":[],\"isLoading\":true},\"redeem\":{\"couponCode\":\"\",\"isLoading\":false,\"details\":{\"benefits\":[],\"tier\":null,\"isRedeemable\":false,\"duration\":\"P14D\",\"expiresAt\":\"$undefined\",\"subscription\":null,\"reason\":\"DECLINE\",\"type\":\"GIFT_ACCESS\"},\"success\":{\"tier\":\"$undefined\",\"duration\":\"$undefined\",\"subscriptionDelta\":\"$undefined\",\"subscription\":\"$undefined\"}},\"consent\":{\"wasAnonymousTOSDisplayed\":false,\"anonymousTOSAccepted\":false,\"hasAnonymousConsent\":false,\"isMidSessionConsentPrompted\":false,\"status\":\"IDLE\"},\"manga\":{\"byId\":{}}},\"children\":[\"$\",\"$L1d\",null,{\"children\":[\"$\",\"$L1e\",null,{\"children\":[\"$\",\"$L1f\",null,{\"children\":[\"$\",\"$L20\",null,{\"children\":[\"$\",\"$L5\",null,{\"parallelRouterKey\":\"children\",\"segmentPath\":[\"children\",\"$6\",\"children\"],\"error\":\"$undefined\",\"errorStyles\":\"$undefined\",\"errorScripts\":\"$undefined\",\"template\":[\"$\",\"$L8\",null,{}],\"templateStyles\":\"$undefined\",\"templateScripts\":\"$undefined\",\"notFound\":\"$undefined\",\"notFoundStyles\":\"$undefined\"}]}]}]}]}]}]\n"])</script>
    <next-route-announcer style="position: absolute;"></next-route-announcer>
    <div id="onetrust-consent-sdk">
        <div class="onetrust-pc-dark-filter ot-hide ot-fade-in"></div>
        <div id="onetrust-banner-sdk" class="otFlat bottom ot-wo-title vertical-align-content" tabindex="0"
            role="region" aria-label="Cookie banner" style="bottom: 0px;">
            <div role="alertdialog" aria-describedby="onetrust-policy-text" aria-label="Privacy">
                <div class="ot-sdk-container">
                    <div class="ot-sdk-row">
                        <div id="onetrust-group-container" class="ot-sdk-eight ot-sdk-columns">
                            <div class="banner_logo"></div>
                            <div id="onetrust-policy">
                                <div id="onetrust-policy-text">Our site uses cookies and other technologies ("cookies")
                                    to improve its operation, make it more personal for you, and provide you with
                                    advertising based on your browsing activities and interests on this site and on
                                    other sites. To learn more see our <a
                                        href="https://www.crunchyroll.com/privacy/index.html" style="color:DeepSkyBlue"
                                        target="_blank" rel="noopener">Privacy And Cookies Policy</a>. To make choices
                                    regarding specific cookies including withdrawing consent after consent is given,
                                    access our <a href="#" onclick="OneTrust.ToggleInfoDisplay();"
                                        style="color:DeepSkyBlue">Cookie Consent Tool</a> (available on every page). You
                                    do not need to have cookies enabled to use our sites and apps, but turning them off
                                    may affect your experience on our sites and apps. By clicking 'Accept', you agree
                                    cookies can be used for these purposes and for the sharing of your data with <a
                                        href="https://www.sonypictures.co.uk/sony-entities" style="color:DeepSkyBlue"
                                        target="_blank">Sony Pictures</a> and <a
                                        href="https://www.sonypictures.co.uk/sony-affiliates" style="color:DeepSkyBlue"
                                        target="_blank">Sony group companies</a>.</div>
                            </div>
                        </div>
                        <div id="onetrust-button-group-parent"
                            class="ot-sdk-three ot-sdk-columns has-reject-all-button">
                            <div id="onetrust-button-group"> <button id="onetrust-reject-all-handler">Reject all
                                    non-essential cookies</button> <button id="onetrust-accept-btn-handler">Accept All
                                    Cookies</button></div>
                        </div>
                    </div>
                </div><!-- Close Button -->
                <div id="onetrust-close-btn-container"></div><!-- Close Button END-->
            </div>
        </div>
        <div id="onetrust-pc-sdk" class="otPcCenter ot-hide ot-fade-in ot-sdk-not-webkit ot-addtl-vendors" lang="en"
            aria-label="Preference center" role="region">
            <div role="alertdialog" aria-modal="true" aria-describedby="ot-pc-desc" style="height: 100%;"
                aria-label="We need your consent to proceed"><!-- Close Button -->
                <div class="ot-pc-header"><!-- Logo Tag -->
                    <div class="ot-pc-logo" role="img" aria-label="Company Logo"><img alt="Company Logo"
                            src="https://cdn.cookielaw.org/logos/d19e506f-1a64-463d-94e4-914dd635817d/ecc8ba41-7e8f-4034-94ce-725013ac9653/88e9b364-42a3-4440-9b6f-e18ab8dc4a97/sonypictures_typeonly-reverse.png">
                    </div><button id="close-pc-btn-handler" class="ot-close-icon" aria-label="Close"
                        style="background-image: url(&quot;https://cdn.cookielaw.org/logos/static/ot_close.svg&quot;);"></button>
                </div><!-- Close Button -->
                <div id="ot-pc-content" class="ot-pc-scrollbar">
                    <div class="ot-optout-signal ot-hide">
                        <div class="ot-optout-icon"><svg xmlns="http://www.w3.org/2000/svg">
                                <path class="ot-floating-button__svg-fill"
                                    d="M14.588 0l.445.328c1.807 1.303 3.961 2.533 6.461 3.688 2.015.93 4.576 1.746 7.682 2.446 0 14.178-4.73 24.133-14.19 29.864l-.398.236C4.863 30.87 0 20.837 0 6.462c3.107-.7 5.668-1.516 7.682-2.446 2.709-1.251 5.01-2.59 6.906-4.016zm5.87 13.88a.75.75 0 00-.974.159l-5.475 6.625-3.005-2.997-.077-.067a.75.75 0 00-.983 1.13l4.172 4.16 6.525-7.895.06-.083a.75.75 0 00-.16-.973z"
                                    fill="#FFF" fill-rule="evenodd"></path>
                            </svg></div><span></span>
                    </div>
                    <h2 id="ot-pc-title">We need your consent to proceed</h2>
                    <div id="ot-pc-desc">We use cookies to personalize and enhance your experience on our site. Visit
                        our Privacy Policy for more information on our data collection practices. By clicking Accept,
                        you agree to our use of cookies for the purposes listed in our Cookie Consent Tool.

                        To see a complete list of the companies that use these cookies and other technologies and to
                        tell us whether they can be used on your device or not, access our Cookie Consent Tool.

                        You will see this message only once, but you will always be able to set your preferences at any
                        time in the Cookie Consent Tool. In addition, find more information about the use of cookies and
                        similar technologies on this site in our Cookie Notice.

                        When you proceed to access our site, the companies listed in the Cookie Consent Tool will use
                        cookies and other technologies. This is further explained in our Cookie Notice.
                        <br><a href="https://www.crunchyroll.com/privacy/index.html" class="privacy-notice-link"
                            rel="noopener" target="_blank"
                            aria-label="More information about your privacy, opens in a new tab">For more information
                            view our Privacy Policy</a>
                    </div><button id="accept-recommended-btn-handler">Allow All</button>
                    <section class="ot-sdk-row ot-cat-grp">
                        <h3 id="ot-category-title"> Manage Consent Preferences</h3>
                        <div class="ot-accordion-layout ot-cat-item ot-vs-config" data-optanongroupid="C0001"><button
                                aria-expanded="false" ot-accordion="true" aria-controls="ot-desc-id-C0001"
                                aria-labelledby="ot-header-id-C0001 ot-status-id-C0001"></button><!-- Accordion header -->
                            <div class="ot-acc-hdr ot-always-active-group">
                                <div class="ot-plus-minus"><span></span><span></span></div>
                                <h4 class="ot-cat-header" id="ot-header-id-C0001">Strictly Necessary Cookies</h4>
                                <div id="ot-status-id-C0001" class="ot-always-active">Always Active</div>
                            </div><!-- accordion detail -->
                            <div class="ot-acc-grpcntr ot-acc-txt">
                                <p class="ot-acc-grpdesc ot-category-desc" id="ot-desc-id-C0001">These cookies are
                                    necessary for the website to function and cannot be switched off in our systems.
                                    They are usually only set in response to actions made by you which amount to a
                                    request for services, such as setting your privacy preferences, logging in or
                                    filling in forms. You can set your browser to block or alert you about these
                                    cookies, but some parts of the site will not then work. </p>
                                <div class="ot-hlst-cntr"><button class="ot-link-btn category-host-list-handler"
                                        aria-label="Vendor Details button opens Vendor List menu"
                                        data-parent-id="C0001">View Vendor Details‎</button></div>
                            </div>
                        </div>
                        <div class="ot-accordion-layout ot-cat-item ot-vs-config" data-optanongroupid="C0003"><button
                                aria-expanded="false" ot-accordion="true" aria-controls="ot-desc-id-C0003"
                                aria-labelledby="ot-header-id-C0003 ot-status-id-C0003"></button><!-- Accordion header -->
                            <div class="ot-acc-hdr">
                                <div class="ot-plus-minus"><span></span><span></span></div>
                                <h4 class="ot-cat-header" id="ot-header-id-C0003">Functional Cookies</h4>
                                <div class="ot-tgl"><input type="checkbox" name="ot-group-id-C0003"
                                        id="ot-group-id-C0003" role="switch" class="category-switch-handler"
                                        data-optanongroupid="C0003" aria-labelledby="ot-header-id-C0003"> <label
                                        class="ot-switch" for="ot-group-id-C0003"><span class="ot-switch-nob"
                                            aria-checked="false" role="switch" aria-label="Functional Cookies"></span>
                                        <span class="ot-label-txt">Functional Cookies</span></label> </div>
                            </div><!-- accordion detail -->
                            <div class="ot-acc-grpcntr ot-acc-txt">
                                <p class="ot-acc-grpdesc ot-category-desc" id="ot-desc-id-C0003">These cookies enable
                                    the website to provide enhanced functionality and personalisation. They may be set
                                    by us or by third party providers whose services we have added to our pages. If you
                                    do not allow these cookies then some or all of these services may not function
                                    properly.</p>
                                <div class="ot-hlst-cntr"><button class="ot-link-btn category-host-list-handler"
                                        aria-label="Vendor Details button opens Vendor List menu"
                                        data-parent-id="C0003">View Vendor Details‎</button></div>
                            </div>
                        </div>
                        <div class="ot-accordion-layout ot-cat-item ot-vs-config" data-optanongroupid="C0002"><button
                                aria-expanded="false" ot-accordion="true" aria-controls="ot-desc-id-C0002"
                                aria-labelledby="ot-header-id-C0002 ot-status-id-C0002"></button><!-- Accordion header -->
                            <div class="ot-acc-hdr">
                                <div class="ot-plus-minus"><span></span><span></span></div>
                                <h4 class="ot-cat-header" id="ot-header-id-C0002">Performance Cookies</h4>
                                <div class="ot-tgl"><input type="checkbox" name="ot-group-id-C0002"
                                        id="ot-group-id-C0002" role="switch" class="category-switch-handler"
                                        data-optanongroupid="C0002" aria-labelledby="ot-header-id-C0002"> <label
                                        class="ot-switch" for="ot-group-id-C0002"><span class="ot-switch-nob"
                                            aria-checked="false" role="switch" aria-label="Performance Cookies"></span>
                                        <span class="ot-label-txt">Performance Cookies</span></label> </div>
                            </div><!-- accordion detail -->
                            <div class="ot-acc-grpcntr ot-acc-txt">
                                <p class="ot-acc-grpdesc ot-category-desc" id="ot-desc-id-C0002">These cookies allow us
                                    to count visits and traffic sources so we can measure and improve the performance of
                                    our site. They help us to know which pages are the most and least popular and see
                                    how visitors move around the site. </p>
                                <div class="ot-hlst-cntr"><button class="ot-link-btn category-host-list-handler"
                                        aria-label="Vendor Details button opens Vendor List menu"
                                        data-parent-id="C0002">View Vendor Details‎</button></div>
                            </div>
                        </div>
                        <div class="ot-accordion-layout ot-cat-item ot-vs-config" data-optanongroupid="C0004"><button
                                aria-expanded="false" ot-accordion="true" aria-controls="ot-desc-id-C0004"
                                aria-labelledby="ot-header-id-C0004 ot-status-id-C0004"></button><!-- Accordion header -->
                            <div class="ot-acc-hdr">
                                <div class="ot-plus-minus"><span></span><span></span></div>
                                <h4 class="ot-cat-header" id="ot-header-id-C0004">Targeting Cookies</h4>
                                <div class="ot-tgl"><input type="checkbox" name="ot-group-id-C0004"
                                        id="ot-group-id-C0004" role="switch" class="category-switch-handler"
                                        data-optanongroupid="C0004" aria-labelledby="ot-header-id-C0004"> <label
                                        class="ot-switch" for="ot-group-id-C0004"><span class="ot-switch-nob"
                                            aria-checked="false" role="switch" aria-label="Targeting Cookies"></span>
                                        <span class="ot-label-txt">Targeting Cookies</span></label> </div>
                            </div><!-- accordion detail -->
                            <div class="ot-acc-grpcntr ot-acc-txt">
                                <p class="ot-acc-grpdesc ot-category-desc" id="ot-desc-id-C0004">These cookies may be
                                    set through our site by our partners. They may be used by those companies to build a
                                    profile of your interests and show you relevant adverts on other sites, limit how
                                    often you see the same ads on our sites and allow us to display and deliver content
                                    related your interests. If you do not allow these cookies, you may experience less
                                    relevant advertising and content.</p>
                                <div class="ot-hlst-cntr"><button class="ot-link-btn category-host-list-handler"
                                        aria-label="Vendor Details button opens Vendor List menu"
                                        data-parent-id="C0004">View Vendor Details‎</button></div>
                            </div>
                        </div>
                        <!-- Groups sections starts --><!-- Group section ends --><!-- Accordion Group section starts --><!-- Accordion Group section ends -->
                    </section>
                </div>
                <section id="ot-pc-lst" class="ot-hide ot-hosts-ui ot-pc-scrollbar">
                    <div id="ot-pc-hdr">
                        <div id="ot-lst-title"><button class="ot-link-btn back-btn-handler" aria-label="Back"><svg
                                    id="ot-back-arw" xmlns="http://www.w3.org/2000/svg"
                                    xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                                    viewBox="0 0 444.531 444.531" xml:space="preserve">
                                    <title>Back Button</title>
                                    <g>
                                        <path fill="#656565" d="M213.13,222.409L351.88,83.653c7.05-7.043,10.567-15.657,10.567-25.841c0-10.183-3.518-18.793-10.567-25.835
                    l-21.409-21.416C323.432,3.521,314.817,0,304.637,0s-18.791,3.521-25.841,10.561L92.649,196.425
                    c-7.044,7.043-10.566,15.656-10.566,25.841s3.521,18.791,10.566,25.837l186.146,185.864c7.05,7.043,15.66,10.564,25.841,10.564
                    s18.795-3.521,25.834-10.564l21.409-21.412c7.05-7.039,10.567-15.604,10.567-25.697c0-10.085-3.518-18.746-10.567-25.978
                    L213.13,222.409z"></path>
                                    </g>
                                </svg></button>
                            <h3>Vendors List</h3>
                        </div>
                        <div class="ot-lst-subhdr">
                            <div class="ot-search-cntr">
                                <p role="status" class="ot-scrn-rdr"></p><input id="vendor-search-handler" type="text"
                                    name="vendor-search-handler" placeholder="Search…" aria-label="Vendor list search">
                                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                                    x="0px" y="0px" viewBox="0 -30 110 110" aria-hidden="true">
                                    <title>Search Icon</title>
                                    <path fill="#2e3644" d="M55.146,51.887L41.588,37.786c3.486-4.144,5.396-9.358,5.396-14.786c0-12.682-10.318-23-23-23s-23,10.318-23,23
            s10.318,23,23,23c4.761,0,9.298-1.436,13.177-4.162l13.661,14.208c0.571,0.593,1.339,0.92,2.162,0.92
            c0.779,0,1.518-0.297,2.079-0.837C56.255,54.982,56.293,53.08,55.146,51.887z M23.984,6c9.374,0,17,7.626,17,17s-7.626,17-17,17
            s-17-7.626-17-17S14.61,6,23.984,6z"></path>
                                </svg>
                            </div>
                            <div class="ot-fltr-cntr"><button id="filter-btn-handler" aria-label="Filter"
                                    aria-haspopup="true"><svg role="presentation" aria-hidden="true"
                                        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                                        x="0px" y="0px" viewBox="0 0 402.577 402.577" xml:space="preserve">
                                        <title>Filter Icon</title>
                                        <g>
                                            <path fill="#fff" d="M400.858,11.427c-3.241-7.421-8.85-11.132-16.854-11.136H18.564c-7.993,0-13.61,3.715-16.846,11.136
      c-3.234,7.801-1.903,14.467,3.999,19.985l140.757,140.753v138.755c0,4.955,1.809,9.232,5.424,12.854l73.085,73.083
      c3.429,3.614,7.71,5.428,12.851,5.428c2.282,0,4.66-0.479,7.135-1.43c7.426-3.238,11.14-8.851,11.14-16.845V172.166L396.861,31.413
      C402.765,25.895,404.093,19.231,400.858,11.427z"></path>
                                        </g>
                                    </svg></button></div>
                            <div id="ot-anchor"></div>
                            <section id="ot-fltr-modal">
                                <div id="ot-fltr-cnt"><button id="clear-filters-handler">Clear</button>
                                    <div class="ot-fltr-scrlcnt ot-pc-scrollbar">
                                        <div class="ot-fltr-opts">
                                            <div class="ot-fltr-opt">
                                                <div class="ot-chkbox"><input id="chkbox-id" type="checkbox"
                                                        class="category-filter-handler"> <label for="chkbox-id"><span
                                                            class="ot-label-txt">checkbox label</span></label> <span
                                                        class="ot-label-status">label</span></div>
                                            </div>
                                        </div>
                                        <div class="ot-fltr-btns"><button id="filter-apply-handler">Apply</button>
                                            <button id="filter-cancel-handler">Cancel</button></div>
                                    </div>
                                </div>
                            </section>
                        </div>
                    </div>
                    <section id="ot-lst-cnt" class="ot-host-cnt ot-pc-scrollbar">
                        <div id="ot-sel-blk">
                            <div class="ot-sel-all">
                                <div class="ot-sel-all-hdr"><span class="ot-consent-hdr">Consent</span> <span
                                        class="ot-li-hdr">Leg.Interest</span></div>
                                <div class="ot-sel-all-chkbox">
                                    <div class="ot-chkbox" id="ot-selall-hostcntr"><input
                                            id="select-all-hosts-groups-handler" type="checkbox"> <label
                                            for="select-all-hosts-groups-handler"><span class="ot-label-txt">checkbox
                                                label</span></label> <span class="ot-label-status">label</span></div>
                                    <div class="ot-chkbox" id="ot-selall-vencntr"><input
                                            id="select-all-vendor-groups-handler" type="checkbox"> <label
                                            for="select-all-vendor-groups-handler"><span class="ot-label-txt">checkbox
                                                label</span></label> <span class="ot-label-status">label</span></div>
                                    <div class="ot-chkbox" id="ot-selall-licntr"><input
                                            id="select-all-vendor-leg-handler" type="checkbox"> <label
                                            for="select-all-vendor-leg-handler"><span class="ot-label-txt">checkbox
                                                label</span></label> <span class="ot-label-status">label</span></div>
                                </div>
                            </div>
                        </div>
                        <div class="ot-sdk-row">
                            <div class="ot-sdk-column">
                                <ul id="ot-host-lst"></ul>
                            </div>
                        </div>
                    </section>
                </section>
                <div class="ot-pc-footer">
                    <div class="ot-btn-container"><button class="ot-pc-refuse-all-handler">Reject all non-essential
                            cookies</button> <button
                            class="save-preference-btn-handler onetrust-close-btn-handler">Confirm My Choices</button>
                    </div><!-- Footer logo -->
                    <div class="ot-pc-footer-logo"><a href="https://www.onetrust.com/products/cookie-consent/"
                            target="_blank" rel="noopener noreferrer"
                            aria-label="Powered by OneTrust Opens in a new Tab"><img alt="Powered by Onetrust"
                                src="https://cdn.cookielaw.org/logos/static/powered_by_logo.svg"
                                title="Powered by OneTrust Opens in a new Tab"></a></div>
                </div>
                <!-- Cookie subgroup container --><!-- Vendor list link --><!-- Cookie lost link --><!-- Toggle HTML element --><!-- Checkbox HTML --><!-- plus minus--><!-- Arrow SVG element --><!-- Accordion basic element --><span
                    class="ot-scrn-rdr" aria-atomic="true"
                    aria-live="polite"></span><!-- Vendor Service container and item template -->
            </div><iframe class="ot-text-resize" sandbox="allow-same-origin" title="onetrust-text-resize"
                style="position: absolute; top: -50000px; width: 100em;" aria-hidden="true"></iframe>
        </div>
    </div>
</body>

</html>
