<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
        <title>I Want to Be the Director's Husband Chapter 8</title>
    <meta name="format-detection" content="telephone=no">
    <meta name="robots" content="follow, index, max-snippet:-1, max-video-preview:-1, max-image-preview:large">
    <link rel="icon" href="https://wsrv.nl/?url=cdn.meowing.org/uploads/9fo4CQEukhQ&amp;w=20">
    <link rel="canonical" href="https://writerscans.com/chapter/64116117bfc-641164935e1/">
    <meta name="description" content="I Want to Be the Director's Husband Chapter 8 - Kang A-jin, the CEO of Korea's No. 1 security company, and Joo-hyun, a super rookie in the actor community, will start a heartbreaking marriage! There is only one taboo: never fall in love.">
    <meta name="keywords" content="Romance, Slice of Life, Office Workers">
    <meta property="og:type" content="website">
    <meta property="og:title" content="I Want to Be the Director's Husband Chapter 8">
    <meta property="og:description" content="I Want to Be the Director's Husband Chapter 8 - Kang A-jin, the CEO of Korea's No. 1 security company, and Joo-hyun, a super rookie in the actor community, will start a heartbreaking marriage! There is only one taboo: never fall in love.">
    <meta property="og:url" content="http://writerscans.com/chapter/64116117bfc-641164935e1/">
    <meta property="og:site_name" content="Writers' Scans">
    <meta property="og:image:alt" content="I Want to Be the Director's Husband Chapter 8">
    <meta property="og:image" content="https://wsrv.nl/?url=cdn.meowing.org/uploads/Wx5gfj0W72R">
    <meta property="og:image:secure_url" content="https://wsrv.nl/?url=cdn.meowing.org/uploads/Wx5gfj0W72R">
    <meta property="twitter:title" content="I Want to Be the Director's Husband Chapter 8">
    <meta property="twitter:description" content="I Want to Be the Director's Husband Chapter 8 - Kang A-jin, the CEO of Korea's No. 1 security company, and Joo-hyun, a super rookie in the actor community, will start a heartbreaking marriage! There is only one taboo: never fall in love.">
    <meta property="twitter:image" content="https://wsrv.nl/?url=cdn.meowing.org/uploads/Wx5gfj0W72R">
        <meta property="twitter:card" content="summary_large_image">
        <script async="" src="https://count-server.sharethis.com/v2.0/get_counts?cb=window.__sharethis__.cb&amp;url=https%3A%2F%2Fwriterscans.com%2Fchapter%2F64116117bfc-641164935e1%2F"></script><script async="" src="https://buttons-config.sharethis.com/js/65dc466cf44fb1001a4c6a85.js"></script><script type="application/ld+json">
    {
        "@context": "https://schema.org",
        "@type": "Article",
        "headline": "I Want to Be the Director's Husband Chapter 8",
        "description": "I Want to Be the Director's Husband Chapter 8 - Kang A-jin, the CEO of Korea's No. 1 security company, and Joo-hyun, a super rookie in the actor community, will start a heartbreaking marriage! There is only one taboo: never fall in love.",
        "url": "http://writerscans.com/chapter/64116117bfc-641164935e1/",
        "datePublished": "2025-10-14T03:50:33+00:00",
        "dateModified": "2025-10-14T04:04:34+00:00",
        "image": "https://wsrv.nl/?url=cdn.meowing.org/uploads/Wx5gfj0W72R",
        "author": {
            "@type": "Person",
            "name": "Writers' Scans",
            "url": "http://writerscans.com/chapter/64116117bfc-641164935e1/"
        },
        "publisher": {
            "@type": "Organization",
            "name": "Writers' Scans",
            "logo": {
                "@type": "ImageObject",
                "url": "https://wsrv.nl/?url=cdn.meowing.org/uploads/9fo4CQEukhQ&w=20"
            }
        },
        "mainEntityOfPage": {
            "@type": "WebPage",
            "@id": "http://writerscans.com/chapter/64116117bfc-641164935e1/"
        }
    }
    </script>
    <!-- <script src="https://unpkg.com/htmx.org@1.9.3/dist/htmx.min.js" async></script> -->
    <!-- <script src="https://unpkg.com/htmx.org/dist/ext/loading-states.js" defer></script> -->
        <script async="" src="https://www.googletagmanager.com/gtag/js?id=G-WBZZWKCQVZ"></script>
    <script>
    window.dataLayer = window.dataLayer || [];

    function gtag2() {
        dataLayer.push(arguments);
    }
    gtag2('js', new Date());

    gtag2('config', 'G-WBZZWKCQVZ');
    </script>
    <script src="https://cdn.jsdelivr.net/npm/store2@2.14.2/dist/store2.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/vanilla-lazyload@17.8.4/dist/lazyload.min.js"></script>
            <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/simplebar@latest/dist/simplebar.css">
    <script src="https://cdn.jsdelivr.net/npm/simplebar@latest/dist/simplebar.min.js"></script>
            <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.4/dist/css/splide.min.css">
    <script src="https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.4/dist/js/splide.min.js"></script>
        <link rel="stylesheet" href="https://f.feedmas.com/fw.css">
    
    <script src="/assets/scripts/index.js?clear=v3.8"></script>
    <script src="https://cdn.jsdelivr.net/npm/cleave.js@1.6.0"></script>
    <link rel="stylesheet" href="/assets/styles/output.css?clear=v5.3">

        <style>
    @import url('https://fonts.googleapis.com/css2?family=Comic+Neue:ital,wght@0,300;0,400;0,700;1,300;1,400;1,700&family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=Lora:ital,wght@0,400..700;1,400..700&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Roboto+Mono:ital,wght@0,100..700;1,100..700&display=swap');
    </style>
            <style>
    :root {
        --theme_color: #03000a;
        --header: #00030f;
        --footer: rgb(255 255 255 / 0.1);
        --button: #09090b;
    }

    iframe:not([src]) {
        display: none !important;
    }

    .fw .fw-z-10 {
        z-index: 200 !important;
    }
    </style>
    <style>
    @import url("https://fonts.googleapis.com/css2?family=Poppins:wght@100;200;300;400;500;600;700;800;900&display=swap");
    @import url("https://fonts.googleapis.com/css2?family=Bebas+Neue&family=Croissant+One&family=Young+Serif&display=swap");
    @import url('https://fonts.googleapis.com/css2?family=Bree+Serif&display=swap');
    @import url('https://fonts.googleapis.com/css2?family=Courier+Prime:ital,wght@0,400;0,700;1,400;1,700&display=swap');
    </style>
                <script async="">
    (async function() {
        let library = store.get('library');
        if (library) {
            let series_list = [];
            for (const id in library) {
                series_list.push(id);
            }

            if (series_list.length > 0) {
                let to_json_string = JSON.stringify(series_list);
                try {
                    // UNDER WORK
                    // let response = await fetch('/sync?series=' + encodeURIComponent(to_json_string));
                    // let {
                    //     success
                    // } = await response.json();
                    // if (success) {
                    //     store.remove('library');
                    // }
                } catch (error) {
                    console.error('Failed to sync series:', error);
                }
            }
        }
    })();
    </script>


<style>.\[\&_\.gdprAdTransparencyCogWheelButton\]\:\!pjra-z-\[5\],
AD-SLOT,
DFP-AD,
[class^="adDisplay-module"],
[class^="amp-ad-"],
[data-ad-cls],
[data-adbridg-ad-class],
[data-adshim],
[data-asg-ins],
[data-block-type="ad"],
[data-cl-spot-id],
[data-css-class="dfp-inarticle"],
[data-d-ad-id],
[data-desktop-ad-id],
[data-dynamic-ads],
[data-ez-name],
[data-freestar-ad][id],
[data-id^="div-gpt-ad"],
[data-identity="adhesive-ad"],
[data-m-ad-id],
[data-mobile-ad-id],
[data-rc-widget],
[data-role="tile-ads-module"],
[data-template-type="nativead"],
[data-testid="adBanner-wrapper"],
[data-testid="ad_testID"],
[data-testid="prism-ad-wrapper"],
[data-testid^="section-AdRowBillboard"],
[data-type="ad-vertical"],
[data-wpas-zoneid],
[href$="/sexdating.php"],
[id^="ad-wrap-"],
[id^="ad_sky"],
[id^="ad_slider"],
[id^="section-ad-banner"],
[onclick^="location.href='https://1337x.vpnonly.site/"],
a-ad,
a[data-href^="http://ads.trafficjunky.net/"],
a[data-url^="https://vulpix.bet/?ref="],
a[onclick^="window.location.replace('https://random-affiliate.atimaze.com/"],
a[style="width:100%;height:100%;z-index:10000000000000000;position:absolute;top:0;left:0;"],
ad-shield-ads,
ad-slot,
app-ad,
app-advertisement,
app-large-ad,
aside[id^="adrotate_widgets-"],
atf-ad-slot,
bottomadblock,
display-ad-component,
display-ads,
div[class$="-adlabel"],
div[class^="Adstyled__AdWrapper-"],
div[data-ad-placeholder],
div[data-ad-region],
div[data-ad-wrapper],
div[data-adname],
div[data-adunit-path],
div[data-adunit],
div[data-adzone],
div[data-alias="300x250 Ad 1"],
div[data-alias="300x250 Ad 2"],
div[data-contentexchange-widget],
div[data-dfp-id],
div[data-id-advertdfpconf],
div[id^="ad-div-"],
div[id^="ad-position-"],
div[id^="adngin-"],
div[id^="adrotate_widgets-"],
div[id^="adspot-"],
div[id^="crt-"][style],
div[id^="div-ads-"],
div[id^="google_dfp_"],
div[id^="gpt_ad_"],
div[id^="lazyad-"],
div[id^="optidigital-adslot"],
div[id^="rc-widget-"],
div[id^="st"][style^="z-index: 999999999;"],
div[id^="sticky_ad_"],
div[id^="vuukle-ad-"],
div[ow-ad-unit-wrapper],
gpt-ad,
guj-ad,
hl-adsense,
img[src^="https://images.purevpnaffiliates.com"],
img[src^="https://s-img.adskeeper.com/"],
ps-connatix-module,
span[data-ez-ph-id],
span[id^="ezoic-pub-ad-placeholder-"],
topadblock,
zeus-ad,
broadstreet-zone-container,
iframe[scrolling="no"][sandbox*="allow-popups allow-modals"][style^="width: 100%; height: 100%; border: none;"],
[class^="tile-picker__CitrusBannerContainer-sc-"],
citrus-ad-wrapper,
div[id*="MarketGid"],
[onclick*="content.ad/"],
AMP-AD,
amp-ad,
amp-ad-custom,
amp-connatix-player,
amp-fx-flying-carpet,
a[data-oburl^="https://paid.outbrain.com/network/redir?"],
a[data-redirect^="https://paid.outbrain.com/network/redir?"],
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"] + .ob_source,
[data-taboola-options],
[data-testid="commercial-label-taboola"],
[data-testid^="taboola-"],
amp-embed[type="taboola"],
div[id^="taboola-stream-"],
div[id^="zergnet-widget"],
html[lang] > body.ishome > div.adult + main.main,
html[lang] > body:not([class]):not([id]):not([style]) > div.background-container > div.container > div.captcha-box,
html[lang] > body.startnew > div#sections > section#section_uname,
html[lang] > body:not([style]) > div.captchaBody,
html[lang] > body#body > * > div.cv-xwrapper > div.cvc > div.cv-inner,
html[lang] > body#body > * > div.cvh.BlockClicksActivityBusy,
html#html[sti][vic][lang] > body#allbody,
html > body > div.container.m-p > #checkbox-window.checkbox-window,
html[lang] > body:not([class]):not([id]):not([style]) > div.container > div.recaptcha-box,
body > .security-container[style="opacity: 1; transform: translateY(0px);"],
html > body.hold-transition.theme-primary.bg-img[style^="background-image"][style*="wallpaperaccess.com"][style*="background-repeat"][style*="background-size"],
html > body > div.container > form#unsubscribe-form[onsubmit="submitUnsubscribeForm(event)"],
html > body > div.content > dl > dd.dd1 > div.min_sider > form#form1[action="unsubscribe.php"],
html > body.body > div.container > div.content > form > table.optoutForm,
div[id][style^="position: fixed; inset: 0px; z-index: 2147483647; background: black"][style*="opacity: 0.01"],
div[class$="player-promo-col"],
div#spot-holder.spot-holder[style="display: block;"],
a[dontfo=""][style$="position: absolute; z-index: 2147483647;"],
[data-ad-module]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-width]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-adblockkey]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(html):not(.adsbygoogle),
[data-advadstrackid]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-manager-id]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
div[style^="z-index: 999999; background-image: url(\"data:image/gif;base64,"][style$="position: absolute;"],
a[onclick="openAuc();"],
div[style="position: fixed; display: block; width: 100%; height: 100%; inset: 0px; background-color: rgba(0, 0, 0, 0); z-index: 300000;"],
div[style^="position:fixed;inset:0px;z-index:2147483647;background:black;opacity:0.01"],
div[style^="position: fixed; inset: 0px; z-index: 2147483647; background: black; opacity: 0.01"],
iframe.lazyloaded[data-src^="https://rcm-fe.amazon-adsystem.com/"],
#player div[style$="cursor: pointer; position: absolute; width: 100%; height: 100%; padding: 1rem; z-index: 2147483647;"],
html[lang][style^="--main-bg-color"] > body:not([class]):not([id]) > div#container[style="visibility: visible;"] > div#banner[style="opacity:0"] ~ main:not([class]):not([id]) > div#message,
[onclick*="postlnk.com"],
[data-lnguri*="vipbox"],
[class^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]) { display: none !important; }

[data-ad-name],
[data-revive-zoneid],
[name^="google_ads_iframe"],
div[aria-label="Ads"],
div[data-ad-targeting],
div[id^="ad_position_"],
div[id^="dfp-ad-"],
div[id^="ezoic-pub-ad-"],
ins.adsbygoogle[data-ad-client],
ins.adsbygoogle[data-ad-slot],
[class^="s2nPlayer"],
div[id*="ScriptRoot"],
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"],
div[id^="div-gpt-"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]):not([style="pointer-events: none; height: 1px; width: 0px; opacity: 0; visibility: hidden; position: fixed; bottom: 0px;"]),
[id^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]):not([style="pointer-events: none; height: 1px; width: 0px; opacity: 0; visibility: hidden; position: fixed; bottom: 0px;"]),
div[style^="height:    250px; width:    300px;"],
div[style^="width:    160px; height:    600px; margin: 0px auto; min-width: 160px; min-height: 600px;"],
div[style^="width:    300px; height:    250px;"],
html[class^="img_"][amp4ads=""][i-amphtml-layout=""][i-amphtml-no-boilerplate=""][amp-version="2502032353000"],
html[class^="img_"][amp4ads=""][i-amphtml-layout=""][i-amphtml-no-boilerplate=""][amp-version="2507172035000"],
html[class^="img_"][amp4ads=""][i-amphtml-layout=""][i-amphtml-no-boilerplate=""][amp-version="2509031727000"],
img[height="   250"][width="   300"],
img[height="   90"][width="   728"],
ins[style$="height:    90px; width:    728px;"],
*:not(body) > a[href^="https://content-loader.com/"],
*:not(body) > a[href^="https://html-load.com/"],
*:not(body) > a[href^="https://07c225f3.online/"] { display: none !important; }</style><style>.grid > .container > #aside-promotion,
.sharethis-inline-share-buttons.st-hidden,
[href*="uselnk.com/"],
[href*="postlnk.com"],
[href*="passtechusa.com"] { display: none !important; }</style><style type="text/css">#st-1 {
  font-family: "Helvetica Neue", Verdana, Helvetica, Arial, sans-serif;;
  direction: ltr;
  display: block;
  opacity: 1;
  text-align: left;
  z-index: 94034;
}
#st-1.st-animated {
  -moz-transition: o 0.2s ease-in, p 0.2s ease-in, a 0.2s ease-in, c 0.2s ease-in, i 0.2s ease-in, t 0.2s ease-in, y 0.2s ease-in; -ms-transition: o 0.2s ease-in, p 0.2s ease-in, a 0.2s ease-in, c 0.2s ease-in, i 0.2s ease-in, t 0.2s ease-in, y 0.2s ease-in; -o-transition: o 0.2s ease-in, p 0.2s ease-in, a 0.2s ease-in, c 0.2s ease-in, i 0.2s ease-in, t 0.2s ease-in, y 0.2s ease-in; -webkit-transition: o 0.2s ease-in, p 0.2s ease-in, a 0.2s ease-in, c 0.2s ease-in, i 0.2s ease-in, t 0.2s ease-in, y 0.2s ease-in; transition: o 0.2s ease-in, p 0.2s ease-in, a 0.2s ease-in, c 0.2s ease-in, i 0.2s ease-in, t 0.2s ease-in, y 0.2s ease-in;
}
#st-1.st-hidden {
  opacity: 0;
}

#st-1.st-preview {
  display: none!important;
  opacity: 0!important;
}
#st-1.st-hide {
  display: none;
}
#st-1 .st-btn {
  -moz-box-sizing: border-box;
-webkit-box-sizing: border-box;
box-sizing: border-box;
  -moz-transition: opacity 0.2s ease-in, top 0.2s ease-in; -ms-transition: opacity 0.2s ease-in, top 0.2s ease-in; -o-transition: opacity 0.2s ease-in, top 0.2s ease-in; -webkit-transition: opacity 0.2s ease-in, top 0.2s ease-in; transition: opacity 0.2s ease-in, top 0.2s ease-in;
  -moz-border-radius: 20px;
-webkit-border-radius: 20px;
border-radius: 20px;
  border: none;
  cursor: pointer;
  display: inline-block;
  font-size: 12px;
  height: 40px;
  line-height: 40px;
  margin-right: 8px;
  padding: 0 10px;
  position: relative;
  text-align: center;
  top: 0;
  vertical-align: top;
  white-space: nowrap;
}
#st-1 .st-btn:last-child {
  margin-right: 0;
}
#st-1 .st-btn > svg {
  height: 20px;
  width: 20px;
  position: relative;
  top: 10px;
  vertical-align: top;
}
#st-1 .st-btn > img {
  display: inline-block;
  height: 20px;
  width: 20px;
  position: relative;
  top: 10px;
  vertical-align: top;
}
#st-1 .st-btn > span {
  -moz-transition: all 0.2s ease-in; -ms-transition: all 0.2s ease-in; -o-transition: all 0.2s ease-in; -webkit-transition: all 0.2s ease-in; transition: all 0.2s ease-in;
  color: #fff;
  display: inline-block;
  font-weight: 500;
  letter-spacing: 0.5px;
  min-width: 67px;
  opacity: 1;
  padding: 0 6px;
  position: relative;
  vertical-align: top;
}
#st-1.st-has-labels .st-btn {
  min-width: 135px;
}
#st-1.st-has-labels .st-btn.st-remove-label {
  min-width: 50px;
}
#st-1.st-has-labels .st-btn.st-remove-label > span {
  display: none;
}
#st-1.st-has-labels .st-btn.st-hide-label > span {
  display: none;
}
#st-1 .st-total {
  color: #555;
  display: inline-block;
  font-weight: 500;
  line-height: 15px;
  margin-right: 0;
  max-width: 80px;
  padding: 4px 8px;
  text-align: center;
}
#st-1 .st-total.st-hidden {
  display: none;
}
#st-1 .st-total > span {
  font-size: 20px;
  line-height: 22px;
  display: block;
  padding: 0;
}
#st-1 .st-total > span.st-shares {
  font-size: 12px;
  line-height: 12px;
}
#st-1.st-justified {
  display: flex;
  text-align: center;
}
#st-1.st-justified .st-btn {
  -moz-flex: 1;
-ms-flex: 1;
-webkit-flex: 1;
flex: 1;
}#st-1 .st-btn:hover {
  opacity: .8;
  top: -4px;
}#st-1 .st-btn[data-network='sharethis'] {
  background-color: #6366f1
}
#st-1 .st-btn[data-network='sharethis'] img {
  filter: invert(5%) sepia(100%) saturate(19%) hue-rotate(324deg) brightness(104%) contrast(106%);
}
#st-1 .st-btn[data-network='sharethis'] > span {
  color: #ffffff
}#st-1 .st-btn[data-network='snapchat'] > span {
  color: #333};
}</style></head>
<body style="--width: 30%; --font_size_2: 16px; --line_height_2: 24px; --font_family: Poppins;" class="bg-[--theme_color] text-white select-none sm:pb-20 pb-16" hx-ext="loading-states">
    <!-- for sticky ad -->
                    <div data-loading="" class="fixed z-[55] top-0 left-0 sm:h-1 h-[1.5vw] shadow rounded-r-full bg-white/20 hidden" id="loading">
</div>

<style>
    #loading {
        animation: progress 4s linear infinite;
    }

    @keyframes progress {
        0% {
            width: 0%;
        }

        100% {
            width: 100%;
        }
    }
</style><header id="main_header" class="grid sm:-mb-4 -mb-[4vw] bg-[--header] sm:relative transition-all duration-300 sticky top-0 left-0 z-[161] border-white/5">
    <div class="grid sm:gap-10 gap-[4vw] w-full 2xl:max-w-[100rem] max-w-6xl mx-auto sm:p-4 p-[4vw]">
        <div class="flex  justify-between items-center">
            <div class="flex  sm:gap-4 gap-[4vw] items-center">
                                <a class="flex w-fit justify-center items-center h-11 aspect-square gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full" href="/">
                    <img class="w-6" src="https://api.iconify.design/mdi:arrow-left.svg?color=white">
                </a>
                                <a class="sm:block hidden sm:text-2xl text-[5.5vw] font-bold" href="/">
                    Writers' Scans                </a>
            </div>
            <a class="sm:hidden break-word text-[5.5vw] font-bold" href="/">
                Writers' Scans            </a>

            <div class="flex  sm:gap-4 gap-[4vw]">
                <div id="showPanelButton" alt="Search" title="Search" class="flex sm:pl-4 sm:w-fit w-11 justify-center items-center h-11 sm:px-5 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full">
                    <img class="w-6 ml-0.5" src="https://api.iconify.design/ph:magnifying-glass-bold.svg?color=white">
                    <div class="sm:block hidden font-medium">Search</div>
                </div>
                <div id="bottomHeader" class="flex z-[49]  justify-center sm:bg-transparent border-white/5 bg-[--header] sm:gap-4 gap-[4vw] sm:relative sm:w-auto fixed w-full bottom-0 left-0 sm:p-0 p-[4vw]">
                    <a href="/" class="sm:hidden flex sm:w-fit w-1/2 justify-center items-center h-11 sm:px-5 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full">
                        <img class="w-6" src="https://api.iconify.design/ph:house-simple-fill.svg?color=white">
                        <div class="sm:block hidden font-medium">Home</div>
                    </a>
                    <a href="/latest/" title="Latest" alt="Latest" class="flex sm:w-fit sm:aspect-square w-1/2 justify-center items-center h-11 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full">
                        <img class="w-6" src="https://api.iconify.design/mdi:calendar-badge-outline.svg?color=white">
                        <!-- <div class="sm:block hidden font-medium">Latest</div> -->
                    </a>
                    <a href="/series/" alt="Series" title="Series" class="flex  sm:w-fit w-1/2 justify-center items-center h-11 sm:px-5 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full">
                        <div class="w-6">
                            <img class="w-6" src="https://api.iconify.design/material-symbols:space-dashboard-rounded.svg?color=white">
                        </div>
                        <div class="sm:block hidden font-medium">Series</div>
                    </a>
                                                    <a href="/library/" alt="Library" title="Library" class="sm:px-5 flex  sm:w-fit w-1/2 justify-center items-center h-11 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden">
            <img class="w-6" src="https://api.iconify.design/fluent:library-28-filled.svg?color=white">
            <div class="sm:block hidden font-medium">Library</div>
        </a>
                        </div>
            </div>
        </div>
    </div>
</header>
<script>
(function() {
    let header = document.querySelector('header');
    let bottomHeader = header.querySelector('#bottomHeader');
    let header_background = false;
    if (window.innerWidth < 640) {
        bottomHeader.remove();
        bottomHeader.classList.add('border-t');
        document.body.appendChild(bottomHeader);
        if (!header_background) {
            header.classList.add('bg-[--header]');
        }
        document.addEventListener('scroll', function(event) {
            let scrollY = window.scrollY;
            if (header_background) {
                let opacity = Math.min(scrollY / 40, 1);
                let hexColor = getComputedStyle(document.documentElement).getPropertyValue('--theme_color')
                    .trim();
                let backgroundColor = hexColor + Math.floor(opacity * 255).toString(16).padStart(2, '0');
                let blurAmount = Math.min(scrollY / 5, 20);
                header.style.setProperty('background-color', backgroundColor);
                header.style.backdropFilter = `blur(${blurAmount}px)`;
            }
            if (scrollY > 40) {
                header.classList.add('border-b');
            } else {
                header.classList.remove('border-b');
            }
        });
    }
})();
</script>
<div id="panel" class="w-full h-full fixed z-[161] top-0 left-0 hidden justify-center sm:items-center items-start sm:p-4">
    <div class="w-full h-full absolute bg-black/90 top-0 left-0">

    </div>
    <div id="panel_close" class="sm:p-4 flex justify-end absolute top-0 left-0 w-full h-full">
        <div class="sm:flex hidden w-fit justify-center items-center h-11 aspect-square gap-3 backdrop-blur bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full">
            <img class="w-6" src="https://api.iconify.design/mdi:close.svg?color=white">
        </div>
    </div>
    <div id="panel_block" class="relative w-full h-full sm:max-h-[31rem] 2xl:max-h-[32rem] 2xl:max-w-[64rem] max-w-[45rem] sm:border border-white/5 bg-[--theme_color] backdrop-blur overflow-hidden sm:rounded-xl flex flex-col justify-between">
        <div class="flex flex-col">
            <div>
                <form action="/series/" class="flex gap-4 backdrop-blur-xl h-[16vw] sm:h-12 sm:pt-4 sm:px-4 px-[4vw]">
                    <img class="w-7" src="https://api.iconify.design/ph:magnifying-glass-bold.svg?color=white">
                    <input id="searchInput" type="text" name="q" placeholder="Search Series" class="placeholder:font-light placeholder:text-white/40 text-lg w-full bg-transparent focus-within:outline-none">
                    <img id="panel_close" class="sm:hidden w-7" src="https://api.iconify.design/mdi:close.svg?color=white">
                </form>
            </div>
            <div id="searched_series" class="grid 2xl:grid-cols-4 sm:grid-cols-3 grid-cols-2 sm:gap-4 gap-[4vw] sm:p-4 sm:pt-4 p-[4vw] pt-0">
                                                                            <button id="641f2c8cc04" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm flex" alt="I Became the Patron of Villains" title="I Became the Patron of Villains 악당들의 후원자가 되었다" tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Comedy&quot;,&quot;Fantasy&quot;,&quot;Shounen&quot;,&quot;Villain&quot;,&quot;Video Game&quot;,&quot;Magic&quot;,&quot;Romance&quot;,&quot;Harem&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/641f2c8cc04/" alt="I Became the Patron of Villains" title="I Became the Patron of Villains" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/YWzLapr5sA5&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                            <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs">New</span>
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                        <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            english                        </span>
                                    </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/641f2c8cc04/" alt="I Became the Patron of Villains" title="I Became the Patron of Villains" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        I Became the Patron of Villains</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="641b8b812cc" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm flex" alt="Unstoppable Young Lady" title="Unstoppable Young Lady I Can’t Handle the Young Master" tags="[&quot;Manhwa&quot;,&quot;Shoujo&quot;,&quot;Romance&quot;,&quot;Comedy&quot;,&quot;School life&quot;,&quot;Slice of Life&quot;,&quot;Cooking&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/641b8b812cc/" alt="Unstoppable Young Lady" title="Unstoppable Young Lady" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/wdYSUfWWoB8&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                            <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs">New</span>
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                        <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            english                        </span>
                                    </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/641b8b812cc/" alt="Unstoppable Young Lady" title="Unstoppable Young Lady" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Unstoppable Young Lady</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=manhwa" alt="Manhwa" title="Manhwa" class="flex">
                                Manhwa,                            </a>
                                                    <a href="/series/?genre=shoujo" alt="Shoujo" title="Shoujo" class="flex">
                                Shoujo                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="64116117bfc" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm flex" alt="I Want to Be the Director's Husband" title="I Want to Be the Director's Husband 대표님의 남편이 되고 싶어" tags="[&quot;Romance&quot;,&quot;Slice of Life&quot;,&quot;Office Workers&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/64116117bfc/" alt="I Want to Be the Director's Husband" title="I Want to Be the Director's Husband" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/Wx5gfj0W72R&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                            <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs">New</span>
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                        <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            english                        </span>
                                    </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/64116117bfc/" alt="I Want to Be the Director's Husband" title="I Want to Be the Director's Husband" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        I Want to Be the Director's Husband</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=romance" alt="Romance" title="Romance" class="flex">
                                Romance,                            </a>
                                                    <a href="/series/?genre=slice of life" alt="Slice of Life" title="Slice of Life" class="flex">
                                Slice of Life                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="640f0469375" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm flex" alt="Everyone Hates Me" title="Everyone Hates Me  모두가 날 싫어한다" tags="[&quot;Romance&quot;,&quot;Fantasy&quot;,&quot;Grim Reaper&quot;,&quot;Drama&quot;,&quot;Comedy&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/640f0469375/" alt="Everyone Hates Me" title="Everyone Hates Me" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/31wgu0J8t8T&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                            <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs">New</span>
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                        <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            english                        </span>
                                    </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/640f0469375/" alt="Everyone Hates Me" title="Everyone Hates Me" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Everyone Hates Me</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=romance" alt="Romance" title="Romance" class="flex">
                                Romance,                            </a>
                                                    <a href="/series/?genre=fantasy" alt="Fantasy" title="Fantasy" class="flex">
                                Fantasy                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="640ecb8f2bb" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Classmate" title="Classmate 클래스메이트" tags="[&quot;Horror&quot;,&quot;Mystery&quot;,&quot;School Life&quot;,&quot;Supernatural&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/640ecb8f2bb/" alt="Classmate" title="Classmate" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/cnguoVxx6ul&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                            <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs">New</span>
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                        <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            english                        </span>
                                    </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/640ecb8f2bb/" alt="Classmate" title="Classmate" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Classmate</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=horror" alt="Horror" title="Horror" class="flex">
                                Horror,                            </a>
                                                    <a href="/series/?genre=mystery" alt="Mystery" title="Mystery" class="flex">
                                Mystery                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63fcf6d5fd7" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Genius Who Sees Through the World" title="The Genius Who Sees Through the World 천재, 세상을 읽다" tags="[&quot;Adventure&quot;,&quot; Drama&quot;,&quot;Psychological&quot;,&quot; Tragedy&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63fcf6d5fd7/" alt="The Genius Who Sees Through the World" title="The Genius Who Sees Through the World" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/RW49tYoM6Kv&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                            <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs">New</span>
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                        <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            english                        </span>
                                    </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63fcf6d5fd7/" alt="The Genius Who Sees Through the World" title="The Genius Who Sees Through the World" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Genius Who Sees Through the World</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure,                            </a>
                                                    <a href="/series/?genre= drama" alt=" Drama" title=" Drama" class="flex">
                                 Drama                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                                </div>
            <div id="no_results" class="h-full hidden justify-center items-center text-white/80 font-light">
                <p>No series found.</p>
            </div>
        </div>
        <button type="button" id="view_all_search" class="flex justify-center items-center pb-4">
            <div class="h-11 px-8 bg-blue-600 hover:bg-blue-500 transition-all flex justify-center items-center rounded-full">
                View all results
            </div>
        </button>
    </div>
</div>
<script>
    (function() {
        const panel = document.getElementById('panel');
        const panel_block = document.querySelector('#panel_block');
        const noResults = document.getElementById('no_results');
        const searchedSeries = document.getElementById('searched_series');
        const showPanelButtons = document.querySelectorAll('#showPanelButton');
        const searchInput = document.getElementById('searchInput');
        const panel_closeElements = document.querySelectorAll('#panel_close');
        const AllSeries = document.querySelector("#searched_series>a");
        const view_all_search = document.querySelector('#view_all_search');

        function funPanel(type) {
            if (type) {
                panel.classList.remove('hidden');
                panel.classList.add('flex'); // Show the panel
                document.body.classList.add('static'); // Add class to body
                searchInput.value = "";
                searchInput.focus();
                updateSearchResults();
            } else {
                panel.classList.add('hidden'); // Hide the panel on Escape key
                panel.classList.remove('flex'); // Show the panel
                document.body.classList.remove('static');
            }
        }
        for (const button of panel_closeElements) {
            button.addEventListener('click', function() {
                funPanel()
            });
        }
        for (showPanelButton of showPanelButtons) {
            showPanelButton.addEventListener('click', function() {
                funPanel(true)
            });
        }
        view_all_search.addEventListener('click', function() {
            const inputValue = searchInput.value.toLowerCase();
            location.href = '/series?q=' + inputValue;
        });
        document.addEventListener('keydown', function(event) {
            if (!panel.classList.contains('hidden')) {
                // Only run the event listener if the panel is not hidden
                if (event.key === 'Escape') {
                    funPanel()
                    console.log('Escape');
                } else if (event.key === 'ArrowUp') {
                    console.log('Up');
                } else if (event.key === 'ArrowDown') {
                    console.log('Down');
                } else if (event.key === 'Enter') {
                    console.log('Enter');
                }
            }
        });


        function updateSearchResults() {
            const inputValue = searchInput.value
                .toLowerCase(); // Convert the input value to lowercase for case-insensitive matching
            const anchorElements = document.querySelectorAll("#searched_series > button");
            let count = 0; // Initialize a count to keep track of the matched anchors

            // Check the window width
            const windowWidth = window.innerWidth;

            for (const anchor of anchorElements) {
                const title = anchor.getAttribute("title");
                if (inputValue === '' || (title && title.toLowerCase().includes(inputValue))) {
                    anchor.classList.remove('hidden');
                    anchor.classList.add('flex');
                    let listener = false;
                    count++;
                    if (windowWidth >= 1536) {
                        if (count > 4) {
                            listener = true
                        }
                    } else if (windowWidth < 640) {
                        if (count > 4) {
                            listener = true
                        }
                    } else {
                        if (count > 3) {
                            listener = true
                        }
                    }
                    if (listener) {
                        anchor.classList.add('hidden');
                        anchor.classList.remove('flex');
                    }
                } else {
                    anchor.classList.add('hidden');
                    anchor.classList.remove('flex');
                }
            }
            if (count === 0) {
                view_all_search.classList.add('hidden');
                panel_block.classList.add('grid');
                panel_block.classList.remove('flex');
                panel_block.classList.remove('flex-col');
                panel_block.classList.remove('justify-between');
                searchedSeries.classList.add('hidden');
                searchedSeries.classList.remove('grid');
                noResults.classList.remove('hidden');
                noResults.classList.add('flex');
            } else {
                view_all_search.classList.remove('hidden');
                panel_block.classList.add('flex');
                panel_block.classList.add('flex-col');
                panel_block.classList.add('justify-between');
                panel_block.classList.remove('grid');
                searchedSeries.classList.remove('hidden');
                searchedSeries.classList.add('grid');
                noResults.classList.add('hidden');
                noResults.classList.remove('flex');
            }
        }

        searchInput.addEventListener('input', updateSearchResults);

        updateSearchResults()
        funPanel()
    })();
</script>
    <!-- sm:left-[calc(50%-15rem)] -->
    <!-- for sticky ad -->
            <header id="chapter_header" class="grid sm:mt-4 transition-all sm:border-y border-t sm:sticky top-[--topSet] left-0 z-[49] bg-[--header] border-white/5">
            <div class="flex text-center justify-center items-center w-full 2xl:max-w-[100rem] max-w-6xl mx-auto sm:p-4 p-[4vw]">
                <h1>
                    <span class="flex flex-wrap sm:gap-1.5 gap-[1.5vw] sm:justify-center items-center">
                        <span>
                            <a href="/series/64116117bfc/" alt="I Want to Be the Director's Husband" title="I Want to Be the Director's Husband" class="opacity-100 hover:opacity-50 transition-all">
                                I Want to Be the Director's Husband                            </a> - Chapter 8                        </span>
                    </span>
                </h1>
            </div>
        </header>
        <script>
            (function() {
                let header = document.getElementById('main_header');
                let chapter_header = document.getElementById('chapter_header');
                if (window.innerWidth < 640) {
                    chapter_header.remove();
                    header.appendChild(chapter_header);
                } else {
                                    }
            })();
        </script>
        <div class="grid sm:gap-4 gap-[4vw] w-full 2xl:max-w-[100rem] max-w-6xl mx-auto sm:p-4 p-[4vw]">
                                                                    <div id="pages_panel" class="grid sm:gap-4 gap-[4vw] relative">
                
                    
                    
                                            <div id="pages" show_bar_button="mobile" class="grid sm:max-w-[--width] relative overflow-hidden sm:w-full sm:mx-auto sm:rounded-lg sm:overflow-hidden -mx-[4vw] sm:cursor-[url(https://api.iconify.design/uim:arrow-circle-down.svg?color=red&amp;width=40),_pointer]">
                                                                                                <img src="https://cdn.meowing.org/uploads/uAXJ_NGqw2x" count="0" uid="uAXJ_NGqw2x" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/hpOCx8AN_lI" count="1" uid="hpOCx8AN_lI" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/7Tq1536-fnz" count="2" uid="7Tq1536-fnz" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/r3KVTmSi9Xo" count="3" uid="r3KVTmSi9Xo" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/PsiJ6SCaIyn" count="4" uid="PsiJ6SCaIyn" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/6H9DGKEHq_U" count="5" uid="6H9DGKEHq_U" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/9uLOErtoHCl" count="6" uid="9uLOErtoHCl" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/YECqEpddq6j" count="7" uid="YECqEpddq6j" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/GrPwzUcoumA" count="8" uid="GrPwzUcoumA" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/9agzlR85cT-" count="9" uid="9agzlR85cT-" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/OmsmBMhQQjy" count="10" uid="OmsmBMhQQjy" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/7m3KHpIxOgn" count="11" uid="7m3KHpIxOgn" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/6_CgGRaoLUq" count="12" uid="6_CgGRaoLUq" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/rfp1SGgQuRN" count="13" uid="rfp1SGgQuRN" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/zPEP-GLzUpY" count="14" uid="zPEP-GLzUpY" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/qV2H5FgdxyN" count="15" uid="qV2H5FgdxyN" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/Nc_nCFa2coX" count="16" uid="Nc_nCFa2coX" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/YG9-9fyt0kv" count="17" uid="YG9-9fyt0kv" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/kLvOyWHe_fj" count="18" uid="kLvOyWHe_fj" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="true">
                                                                                                                                <img src="/assets/images/placeholder.svg?clear=3" count="19" uid="4TTMJ7EpyVV" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded">
                                                                                                                                <img src="/assets/images/placeholder.svg?clear=3" count="20" uid="eqOMCGHspJt" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded">
                                                                                                                                <img src="/assets/images/placeholder.svg?clear=3" count="21" uid="Y5UbRACtPGK" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded">
                                                                                                                                <img src="/assets/images/placeholder.svg?clear=3" count="22" uid="Dyx8pIzDgh5" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded">
                                                                                                                                <img src="/assets/images/placeholder.svg?clear=3" count="23" uid="0jNGJDM7UVx" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded">
                                                                                                                                <img src="/assets/images/placeholder.svg?clear=3" count="24" uid="a4rW8mBRw4J" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded">
                                                                                                                                <img src="/assets/images/placeholder.svg?clear=3" count="25" uid="Bqx9osp6Cjz" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded">
                                                                                                                                <img src="/assets/images/placeholder.svg?clear=3" count="26" uid="qZozLVsMZjR" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded">
                                                                                                                                <img src="/assets/images/placeholder.svg?clear=3" count="27" uid="LwoUPpjIG3B" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded">
                                                                                                                                <img src="/assets/images/placeholder.svg?clear=3" count="28" uid="gT3b5q_IomR" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded">
                                                                                                                                <img src="/assets/images/placeholder.svg?clear=3" count="29" uid="78_p2ImIaE4" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded">
                                                                                                                                <img src="/assets/images/placeholder.svg?clear=3" count="30" uid="pSFckLFrktC" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded">
                                                                                                                                <img src="/assets/images/placeholder.svg?clear=3" count="31" uid="zbYXGSVSBGI" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded">
                                                                                                                                <img src="/assets/images/placeholder.svg?clear=3" count="32" uid="QbTmFtGFep3" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded">
                                                                                                                                <img src="/assets/images/placeholder.svg?clear=3" count="33" uid="-DP6JeWD4mA" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded">
                                                                                                                                <img src="/assets/images/placeholder.svg?clear=3" count="34" uid="j8CsIkvj1i7" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded">
                                                                                                                                <img src="/assets/images/placeholder.svg?clear=3" count="35" uid="ukuuUUwimpt" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded">
                                                                                                                                <img src="/assets/images/placeholder.svg?clear=3" count="36" uid="T2vleQyLJCM" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded">
                                                                                                                                <img src="/assets/images/placeholder.svg?clear=3" count="37" uid="5hWi0zMwAfr" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded">
                                                                                                                                <img src="/assets/images/placeholder.svg?clear=3" count="38" uid="r10BatWwGqk" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded">
                                                                                                                                <img src="/assets/images/placeholder.svg?clear=3" count="39" uid="yTzdKa_YMSK" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded">
                                                                                                                                <img src="/assets/images/placeholder.svg?clear=3" count="40" uid="0kDZ686kkWL" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded">
                                                                                                                                <img src="/assets/images/placeholder.svg?clear=3" count="41" uid="g66B2Xe8E8E" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded">
                                                                                                                                <img src="/assets/images/placeholder.svg?clear=3" count="42" uid="6_WOmA3FG0Z" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded">
                                                                                        <script>
                                function loadImage(imgElement, count) {
                                    count++;
                                    const uid = imgElement.getAttribute('uid');
                                    let realUrl = `https://cdn.meowing.org/uploads/${uid}`;

                                    // Check if the image is already loading
                                    if (imgElement.dataset.loading === "true") {
                                        return; // Exit if already loading
                                    }
                                    // Set loading state
                                    imgElement.dataset.loading = "true";

                                    // Set the src to the real URL to start loading
                                    imgElement.src = realUrl;

                                    // Handle the load event
                                    imgElement.onload = function() {
                                        imgElement.dataset.loading = "false";
                                        const nextImg = getNextImage(imgElement);
                                        if (nextImg) {
                                            loadImage(nextImg, 1);
                                        }
                                    };

                                    imgElement.onerror = function() {
                                        imgElement.dataset.loading = "false";
                                        setTimeout(() => {
                                            loadImage(imgElement, count);
                                        }, 2000); // 10 
                                    };
                                }

                                function getNextImage(currentImg) {
                                    const images = document.querySelectorAll('.myImage');
                                    for (let i = 0; i < images.length; i++) {
                                        if (images[i] === currentImg && i + 1 < images.length) {
                                            return images[i + 1];
                                        }
                                    }
                                    return null; // No next image
                                }

                                document.addEventListener('DOMContentLoaded', function() {
                                    const images = document.querySelectorAll('.myImage');
                                    if (images.length > 0) {
                                        // Start loading the first image immediately
                                        loadImage(images[0], 1);
                                    }
                                });
                                const images = document.querySelectorAll('.myImage');
                                const observer = new IntersectionObserver((entries, observer) => {
                                    entries.forEach(entry => {
                                        if (entry.isIntersecting) {
                                            loadImage(entry.target, 1);
                                            observer.unobserve(entry
                                                .target); // Stop observing after loading
                                        }
                                    });
                                });

                                images.forEach(img => {
                                    observer.observe(img);
                                });
                            </script>
                        </div>
                        <script>
                            (function() {
                                let zoom_count = 3;
                                                                    zoom_count = store.get('zoom-0.2') ?? 3;
                                                                document.body.style.setProperty('--width', zoom_count * 10 + 'px');
                            })();
                        </script>
                                                    <script>
                                (function() {
                                    let scrollDownButton = document.getElementById('pages');
                                    scrollDownButton.addEventListener("click", () => {
                                        if (window.innerWidth > 640) {
                                            scrollToDown()
                                        }
                                    });
                                    const scrollToDown = () => {
                                        const currentY = window.scrollY;
                                        const destinationY = currentY + window
                                            .innerHeight; // Adjust this value to control the scroll amount

                                        const scroll = () => {
                                            const currentTime = Date.now();
                                            const timeElapsed = currentTime - startTime;
                                            if (timeElapsed < duration) {
                                                const nextY = easeInOutQuad(timeElapsed, currentY, destinationY - currentY,
                                                    duration);
                                                window.scrollTo(0, nextY);
                                                requestAnimationFrame(scroll);
                                            } else {
                                                window.scrollTo(0, destinationY);
                                            }
                                        };

                                        const duration = 1000;
                                        const startTime = Date.now();
                                        requestAnimationFrame(scroll);
                                    };
                                    const easeInOutQuad = (t, b, c, d) => {
                                        t /= d / 2;
                                        if (t < 1) return c / 2 * t * t + b;
                                        t--;
                                        return -c / 2 * (t * (t - 2) - 1) + b;
                                    };
                                })();
                            </script>
                                            

                            </div>
                                                                <div class="flex flex-col justify-center items-center gap-4 mt-8 mb-4 sm:max-w-[--width] w-full mx-auto">
                        <div class="font-medium text-lg">
                            Next Chapter                        </div>
                                                    <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/64116117bfc-6418cc622e3/" alt="Chapter 9" title="Chapter 9" p="ratWfYoaV2O" d="Oct 20, 2025" c="1">
    <div class="grid sm:gap-2 gap-[2vw]">
                <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
            <div class="aspect-[2/1.5] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/ratWfYoaV2O&amp;w=150)">

            </div>

                    </div>
                <div class="grid h-fit px-1">
                        <span class="flex  gap-1 justify-start items-center overflow-hidden">
                <span class="text-sm truncate">
                    Chapter 9                </span>
                            </span>
            <div class="flex justify-start gap-1.5">
                <div class="text-xs text-white/50 w-fit">
                    Oct 20, 2025                </div>
            </div>
                    </div>
    </div>
    </a>                                            </div>
                                        <div show_bar_button="pc" class="hidden w-fit h-10 sticky bg-blue-500 sm:hover:opacity-100 sm:opacity-80 bottom-4 right-4 z-10 mx-auto rounded-full overflow-hidden cursor-pointer transition-all">
                <div class="w-full h-full rounded-xl border border-white/10 px-4 flex justify-center items-center">
                    <!-- <img class="w-6 mt-1" src="https://api.iconify.design/material-symbols:filter-list-rounded.svg?color=white"> -->
                    <div>Options</div>
                </div>
            </div>

                                                                                                <div class="grid md:grid-cols-2 sm:gap-4 gap-2">
    <div class="sm:flex  hidden justify-between bg-gradient-to-b from-white/10 to-transparent gap-6 p-4 rounded-t-2xl overflow-hidden z-[1] col-span-full md:-mb-4">
    <div class="flex gap-4 justify-center items-center ">
        <div class="h-full w-1 rounded-lg bg-white/20">

        </div>
        <div class="grid ">
            <div class="font-medium truncate">Share Writers' Scans</div>
            <div class="text-sm truncate">to your friends</div>
        </div>
    </div>
    <div class="sharethis-inline-share-buttons st-left st-has-labels st-hidden st-inline-share-buttons" id="st-1"><div class="st-total st-hidden">
  <span class="st-label"></span>
  <span class="st-shares">
    Shares
  </span>
</div><div class="st-btn st-first st-last" data-network="sharethis">
  <img alt="sharethis sharing button" src="https://platform-cdn.sharethis.com/img/sharethis.svg">
  <span class="st-label">Share</span>
</div></div>
</div>
<style>
    #st-1 .st-total {
        color: white !important;
    }

    #st-1.st-hidden {
        opacity: 100 !important;
    }
</style>
<script type="text/javascript" src="https://platform-api.sharethis.com/js/sharethis.js#property=65dc466cf44fb1001a4c6a85&amp;product=inline-share-buttons&amp;source=platform" async="async"></script>    <!-- Report Section -->
        <!-- Social Section -->
        <div class="flex  justify-between gap-6 bg-white/10 p-4 rounded-2xl">
        <div class="flex gap-4  justify-center items-center">
            <div class="h-full w-1 rounded-lg bg-white/20">

            </div>
            <div class="grid ">
                <div class="font-medium truncate">Join Our Socials</div>
                <div class="text-sm truncate">to explore more</div>
            </div>
        </div>
        <a href="discord.gg/MSp4CrVk7U" target="_blank" alt="Discord" title="Discord" class="h-10 gap-2 px-6 bg-[#5865F2] hover:bg-opacity-80 flex justify-center items-center rounded-full">
            <div class="w-6">
                <img src="https://api.iconify.design/cbi:discord.svg?color=%23ffffff" class="w-6" alt="discord">
            </div>
            <div class="font-medium">Discord</div>
        </a>
    </div>
        <!-- Donation Section -->
        <div class="flex  justify-between gap-6 bg-white/10 p-4 rounded-2xl relative overflow-hidden ">
        <img src="/assets/images/senkoheart.png" class="h-full w-auto absolute top-0 left-0 [transform:scaleX(-1)]">
        <div class="flex ml-[4.5rem] gap-4 justify-center items-center relative">
            <div class="hidden h-full w-1 rounded-lg bg-white/20">

            </div>
            <div class="grid ">
                <div class="font-medium truncate">Donate Us</div>
                <div class="text-sm truncate">to support us</div>
            </div>
        </div>
        <div class="flex gap-2 relative">
                                                            <a href="https://ko-fi.com/writersscans" target="_blank" alt="Ko-Fi" title="Ko-Fi" class="h-10 gap-2 px-6 bg-blue-400 hover:bg-opacity-80 flex justify-center items-center rounded-full">
                <div class="w-7">
                    <img src="https://api.iconify.design/cib:ko-fi.svg?color=%23ffffff" class="w-7">
                </div>
                <div class="whitespace-nowrap font-medium">Ko-Fi</div>
            </a>
                                                <a href="https://www.patreon.com/writersscans" target="_blank" alt="Patreon" title="Patreon" class="h-10 aspect-[1/1] gap-2 bg-black hover:bg-opacity-80 flex justify-center items-center rounded-full">
                <div class="w-5">
                    <img src="https://api.iconify.design/fa6-brands:patreon.svg?color=%23ffffff" class="w-5">
                </div>
            </a>
                                </div>
    </div>
    </div>
                    <div class="grid sm:rounded-xl sm:mx-0 -mx-[4vw] sm:w-full w-[calc(100%+8vw)] overflow-hidden">
        <div id="iframe-container"><iframe id="resizing-iframe" src="https://zmio.org/post?color=03000a&amp;host=writerscans.com&amp;path=/series/64116117bfc-641164935e1/" scrolling="no" style="width: 100%; border: none; overflow: hidden; display: block; height: 272px;"></iframe></div>
    </div>
    <script>
        const allowedOrigin = "https://zmio.org";
        const baseSrc =
            "https://zmio.org/post?color=03000a&host=writerscans.com&path=/series/64116117bfc-641164935e1/";

        // Track if iframe was initially made without token
        let iframeCreatedWithoutToken = false;

        function createIframe(token) {
            // Remove old iframe if exists
            const existing = document.getElementById("resizing-iframe");
            if (existing) {
                existing.remove();
            }

            const iframe = document.createElement("iframe");
            iframe.id = "resizing-iframe";

            const url = new URL(baseSrc);
            if (token) {
                url.searchParams.set("token", token);
            }

            iframe.src = url.toString();
            iframe.style.width = "100%";
            iframe.style.border = "none";
            iframe.style.overflow = "hidden";
            iframe.style.display = "none";
            iframe.setAttribute("scrolling", "no");

            document.getElementById("iframe-container").appendChild(iframe);

            iframe.addEventListener("load", () => {
                iframe.style.display = "block";
                if (token) {
                    iframe.contentWindow.postMessage({
                            type: "auth-token",
                            token
                        },
                        allowedOrigin
                    );
                }
            });

            // Update flag
            iframeCreatedWithoutToken = !token;
        }

        // Always listen for messages
        window.addEventListener("message", (event) => {
            if (event.origin !== allowedOrigin) return;

            const data = event.data;

            if (data.type === "resize-iframe") {
                const iframe = document.getElementById("resizing-iframe");
                if (iframe) {
                    iframe.style.height = data.height + "px";
                }
            }

            if (data.type === "auth-token" && data.token) {
                localStorage.setItem("zimo-auth-token", data.token);

                // Recreate iframe only if it was created earlier without a token
                if (iframeCreatedWithoutToken) {
                    createIframe(data.token);
                }
            }
        });

        // On load: check if token exists
        const token = localStorage.getItem("zimo-auth-token");
        createIframe(token); // If token is null, it'll set the flag to recreate later
    </script>
                    </div>
        <div id="chapters_panel" style="--panel_bottom: -100%;" class="fixed bottom-[--panel_bottom] transition-all duration-500 left-0 flex  justify-center items-end w-full h-full z-10">
            <div id="chapters_panel_scroll" class="bg-[--header] border border-white/10 mx-auto rounded-t-3xl w-full h-auto max-h-[50%] max-w-3xl sm:p-4 sm:pb-4 p-[4vw] pb-0 grid sm:gap-10 gap-[4vw] simplebar-scrollable-y" data-simplebar="init"><div class="simplebar-wrapper" style="margin: -16px;"><div class="simplebar-height-auto-observer-wrapper"><div class="simplebar-height-auto-observer"></div></div><div class="simplebar-mask"><div class="simplebar-offset" style="right: 0px; bottom: 0px;"><div class="simplebar-content-wrapper" tabindex="0" role="region" aria-label="scrollable content" style="height: auto; overflow: hidden scroll;"><div class="simplebar-content" style="padding: 16px;">
                <div class="flex items-center justify-between sm:mb-4 mb-[4vw]">
                    <h2 class="sm:text-2xl text-[5.5vw] font-bold">
                        9 Chapters                    </h2>
                    <div class="cursor-pointer group" id="sort">
                        <img class="w-10 not-sorted transition-all" src="https://api.iconify.design/bi:sort-numeric-down-alt.svg?color=white" alt="">
                    </div>
                    <script>
                        (function() {
                            let element = document.querySelector('#sort');

                            element.addEventListener('click', function(event) {
                                element = event.target.classList;
                                if (element.contains('not-sorted')) {
                                    element.add('sorted');
                                    element.remove('not-sorted');
                                    event.target.setAttribute('src',
                                        'https://api.iconify.design/bi:sort-numeric-up.svg?color=white')
                                } else {
                                    element.remove('sorted');
                                    element.add('not-sorted');
                                    event.target.setAttribute('src',
                                        'https://api.iconify.design/bi:sort-numeric-down-alt.svg?color=white')

                                }
                                let chapter = document.querySelector('#chapters');
                                let arr = Array.from(chapter.childNodes);
                                arr.reverse();
                                chapter.append(...arr);
                            });
                        })();
                    </script>
                </div>
                                <div id="chapters" class="grid sm:grid-cols-4 grid-cols-2 sm:gap-4 gap-[3vw] sm:pb-4 pb-[4vw]">
                                                                        <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/64116117bfc-6418cc622e3/" alt="Chapter 9" title="Chapter 9" p="ratWfYoaV2O" d="Oct 20, 2025" c="1">
    <div class="grid sm:gap-2 gap-[2vw]">
                <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
            <div class="aspect-[2/1.5] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/ratWfYoaV2O&amp;w=150)">

            </div>

                    </div>
                <div class="grid h-fit px-1">
                        <span class="flex  gap-1 justify-start items-center overflow-hidden">
                <span class="text-sm truncate">
                    Chapter 9                </span>
                            </span>
            <div class="flex justify-start gap-1.5">
                <div class="text-xs text-white/50 w-fit">
                    Oct 20, 2025                </div>
            </div>
                    </div>
    </div>
    </a>                                                    <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/64116117bfc-641164935e1/" alt="Chapter 8" title="Chapter 8" p="BytU8ha3M9c" d="Oct 14, 2025" c="1">
    <div class="grid sm:gap-2 gap-[2vw]">
                <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
            <div class="aspect-[2/1.5] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/BytU8ha3M9c&amp;w=150)">

            </div>

                    </div>
                <div class="grid h-fit px-1">
                        <span class="flex  gap-1 justify-start items-center overflow-hidden">
                <span class="text-sm truncate">
                    Chapter 8                </span>
                            </span>
            <div class="flex justify-start gap-1.5">
                <div class="text-xs text-white/50 w-fit">
                    Oct 14, 2025                </div>
            </div>
                    </div>
    </div>
    </a>                                                    <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/64116117bfc-6411648ab3e/" alt="Chapter 7" title="Chapter 7" p="K946m0IHG7P" d="Oct 14, 2025" c="1">
    <div class="grid sm:gap-2 gap-[2vw]">
                <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
            <div class="aspect-[2/1.5] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/K946m0IHG7P&amp;w=150)">

            </div>

                    </div>
                <div class="grid h-fit px-1">
                        <span class="flex  gap-1 justify-start items-center overflow-hidden">
                <span class="text-sm truncate">
                    Chapter 7                </span>
                            </span>
            <div class="flex justify-start gap-1.5">
                <div class="text-xs text-white/50 w-fit">
                    Oct 14, 2025                </div>
            </div>
                    </div>
    </div>
    </a>                                                    <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/64116117bfc-6411640a42f/" alt="Chapter 6" title="Chapter 6" p="ioky-nAYnP8" d="Oct 14, 2025" c="1">
    <div class="grid sm:gap-2 gap-[2vw]">
                <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
            <div class="aspect-[2/1.5] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/ioky-nAYnP8&amp;w=150)">

            </div>

                    </div>
                <div class="grid h-fit px-1">
                        <span class="flex  gap-1 justify-start items-center overflow-hidden">
                <span class="text-sm truncate">
                    Chapter 6                </span>
                            </span>
            <div class="flex justify-start gap-1.5">
                <div class="text-xs text-white/50 w-fit">
                    Oct 14, 2025                </div>
            </div>
                    </div>
    </div>
    </a>                                                    <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/64116117bfc-64116404e94/" alt="Chapter 5" title="Chapter 5" p="LzLhEIL3VJy" d="Oct 14, 2025" c="1">
    <div class="grid sm:gap-2 gap-[2vw]">
                <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
            <div class="aspect-[2/1.5] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/LzLhEIL3VJy&amp;w=150)">

            </div>

                    </div>
                <div class="grid h-fit px-1">
                        <span class="flex  gap-1 justify-start items-center overflow-hidden">
                <span class="text-sm truncate">
                    Chapter 5                </span>
                            </span>
            <div class="flex justify-start gap-1.5">
                <div class="text-xs text-white/50 w-fit">
                    Oct 14, 2025                </div>
            </div>
                    </div>
    </div>
    </a>                                                    <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/64116117bfc-641164001da/" alt="Chapter 4" title="Chapter 4" p="WAkFKtcXI53" d="Oct 14, 2025" c="1">
    <div class="grid sm:gap-2 gap-[2vw]">
                <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
            <div class="aspect-[2/1.5] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/WAkFKtcXI53&amp;w=150)">

            </div>

                    </div>
                <div class="grid h-fit px-1">
                        <span class="flex  gap-1 justify-start items-center overflow-hidden">
                <span class="text-sm truncate">
                    Chapter 4                </span>
                            </span>
            <div class="flex justify-start gap-1.5">
                <div class="text-xs text-white/50 w-fit">
                    Oct 14, 2025                </div>
            </div>
                    </div>
    </div>
    </a>                                                    <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/64116117bfc-641163f82f4/" alt="Chapter 3" title="Chapter 3" p="Rdc1-fWVe15" d="Oct 14, 2025" c="1">
    <div class="grid sm:gap-2 gap-[2vw]">
                <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
            <div class="aspect-[2/1.5] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/Rdc1-fWVe15&amp;w=150)">

            </div>

                    </div>
                <div class="grid h-fit px-1">
                        <span class="flex  gap-1 justify-start items-center overflow-hidden">
                <span class="text-sm truncate">
                    Chapter 3                </span>
                            </span>
            <div class="flex justify-start gap-1.5">
                <div class="text-xs text-white/50 w-fit">
                    Oct 14, 2025                </div>
            </div>
                    </div>
    </div>
    </a>                                                    <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/64116117bfc-641163f34d8/" alt="Chapter 2" title="Chapter 2" p="YZZC9Hp2oz7" d="Oct 14, 2025" c="1">
    <div class="grid sm:gap-2 gap-[2vw]">
                <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
            <div class="aspect-[2/1.5] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/YZZC9Hp2oz7&amp;w=150)">

            </div>

                    </div>
                <div class="grid h-fit px-1">
                        <span class="flex  gap-1 justify-start items-center overflow-hidden">
                <span class="text-sm truncate">
                    Chapter 2                </span>
                            </span>
            <div class="flex justify-start gap-1.5">
                <div class="text-xs text-white/50 w-fit">
                    Oct 14, 2025                </div>
            </div>
                    </div>
    </div>
    </a>                                                    <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/64116117bfc-641163ecae3/" alt="Chapter 1" title="Chapter 1" p="DEWYvPiKhdH" d="Oct 14, 2025" c="1">
    <div class="grid sm:gap-2 gap-[2vw]">
                <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
            <div class="aspect-[2/1.5] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/DEWYvPiKhdH&amp;w=150)">

            </div>

                    </div>
                <div class="grid h-fit px-1">
                        <span class="flex  gap-1 justify-start items-center overflow-hidden">
                <span class="text-sm truncate">
                    Chapter 1                </span>
                            </span>
            <div class="flex justify-start gap-1.5">
                <div class="text-xs text-white/50 w-fit">
                    Oct 14, 2025                </div>
            </div>
                    </div>
    </div>
    </a>                                                            </div>
            </div></div></div></div><div class="simplebar-placeholder" style="width: 767px; height: 667px;"></div></div><div class="simplebar-track simplebar-horizontal" style="visibility: hidden;"><div class="simplebar-scrollbar" style="width: 0px; display: none;"></div></div><div class="simplebar-track simplebar-vertical" style="visibility: visible;"><div class="simplebar-scrollbar" style="height: 435px; transform: translate3d(0px, 0px, 0px); display: block;"></div></div></div>
        </div>
                <header id="chapter_controls_header" style="--bottom_controls: 0px;" class="sm:mt-4 bottom-[--bottom_controls] transition-all duration-300 border-t fixed w-full left-0 z-[49] bg-[--header] border-white/5">
            <div class="grid w-full 2xl:max-w-[100rem] max-w-6xl mx-auto sm:p-4 p-[4vw]">
                <div class="flex gap-4 justify-center items-center">
                    
                        <a href="/chapter/64116117bfc-6411648ab3e/" class="flex sm:w-full w-1/2 sm:max-w-[10rem] justify-center items-center h-11 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden">
                            <img class="w-6" src="https://api.iconify.design/mdi:arrow-left.svg?color=white">
                        </a>
                                        <button id="chapters_show" class="sm:px-5 px-[4vw] flex sm:w-fit w-full justify-center items-center h-11 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full">
                        <img class="w-6" src="https://api.iconify.design/ph:squares-four-fill.svg?color=white">
                        <div class="font-medium">Chapters</div>
                    </button>
                    <div class=" sm:flex hidden sm:w-fit w-full justify-center items-center h-11 gap-3 bg-white/10 transition-all  rounded-full overflow-hidden">
                        <div zoom="remove" class="flex text-lg justify-center items-center h-11 aspect-square cursor-pointer hover:bg-white/20">
                            -
                        </div>
                        <div zoom="value" class="w-10 text-center">30%</div>
                        <div zoom="add" class="flex text-lg justify-center items-center h-11 aspect-square cursor-pointer hover:bg-white/20 ">
                            +
                        </div>
                        <script>
                            (function() {
                                let zoom_count_start = 1;
                                let zoom_count_end = 10;
                                let zoom_count = 3;
                                                                    zoom_count = store.get('zoom-0.2') ?? 3;
                                                                for (let element of document.querySelectorAll('[zoom]')) {
                                    element.addEventListener('click', () => {
                                        let elementValue = element.getAttribute('zoom');
                                        if (elementValue === 'add' && zoom_count < zoom_count_end) {
                                            runZoom(zoom_count += 1)
                                        } else if (elementValue === 'remove' && zoom_count > zoom_count_start) {
                                            runZoom(zoom_count -= 1)
                                        }
                                    });
                                }

                                function runZoom(value) {
                                    let element = document.querySelector('[zoom="value"]');
                                    let width = value * 10 + '%';
                                    element.innerText = width;
                                    document.body.style.setProperty('--width', width);
                                                                            store.set('zoom-0.2', value)
                                                                    }
                                runZoom(zoom_count);
                            })();
                        </script>
                    </div>
                                            <a href="/chapter/64116117bfc-6418cc622e3/" class="flex sm:w-full w-1/2 sm:max-w-[10rem] justify-center items-center h-11 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden">
                            <img class="w-6" src="https://api.iconify.design/mdi:arrow-right.svg?color=white">
                        </a>
                                    </div>
            </div>
        </header>
        <script>
            (function() {
                let bottomHeader = document.getElementById('bottomHeader');
                let chapter_controls_header = document.getElementById('chapter_controls_header');
                if (bottomHeader && window.innerWidth < 640) {
                    bottomHeader.remove();
                    bottomHeader.classList.add('pt-0');
                    bottomHeader.classList.remove('fixed');
                    bottomHeader.classList.remove('border-t');
                    chapter_controls_header.appendChild(bottomHeader);
                }
            })();
        </script>
        <script>
            (function() {




                let chapters_panel = document.getElementById('chapters_panel');
                let chapter_controls_header = document.getElementById('chapter_controls_header');
                let chapters_panel_scroll = document.getElementById('chapters_panel_scroll');
                new SimpleBar(chapters_panel_scroll);
                let chapters_show = document.getElementById('chapters_show');

                runEl({
                    show: {
                        element: chapters_panel,
                        function: (data) => {
                            hs_chapter_panel(false);
                        }
                    },
                    ignore: {
                        elements: [chapters_show, chapters_panel_scroll],
                        function: () => {
                            // Ignored elements function
                        }
                    }
                });

                chapters_show.addEventListener('click', function() {
                    hs_chapter_panel(!chapters_panel.classList.contains('panel_shown'));
                });

                function hs_chapter_panel(type) {
                    if (type) {
                        chapters_panel.style.setProperty('--panel_bottom',
                            `${chapter_controls_header.offsetHeight}px`);
                        chapters_panel.classList.add('panel_shown');
                    } else {
                        chapters_panel.style.setProperty('--panel_bottom',
                            `-${chapters_panel.offsetHeight}px`);
                        chapters_panel.classList.remove('panel_shown');
                    }
                }
                //////////////////////////////////////
                //////////////////////////////////////
                /////////////////////////////////////
                let chapter_header = document.getElementById('chapter_header');
                let main_header = document.getElementById('main_header');
                let sticky_ad = document.querySelector('#sticky-ad-head');
                let lastScrollTop = 0;
                if (window.innerWidth < 640) {
                    main_header.classList.add('top-[--topSet]');
                } else {
                    chapter_header.classList.add('top-[--topSet]');
                }

                async function hs_header_on_scroll(type) {
                    try {
                        if (type) {
                            hs_chapter_panel(false)
                            sticky_ad?.classList.remove('duration-[--durationSet]');
                            chapter_controls_header.style.setProperty('--bottom_controls',
                                `-${chapter_controls_header.offsetHeight}px`)
                            // bottom_controls
                            if (window.innerWidth < 640) {
                                main_header.style.setProperty('--topSet', `-${(main_header.offsetHeight)+2}px`);
                                sticky_ad?.style.setProperty('--durationSet', `050ms`);
                                sticky_ad?.style.setProperty('--bottom', `0px`);
                            } else {
                                chapter_header.style.setProperty('--topSet', `-${(chapter_header.offsetHeight)+2}px`);
                                sticky_ad?.classList.add('sm:!bottom-0');
                                sticky_ad?.classList.add('sm:duration-100');
                                sticky_ad?.classList.remove('sm:duration-[610ms]');
                            }
                        } else {
                            chapter_controls_header.style.setProperty('--bottom_controls', `0px`);
                            if (window.innerWidth < 640) {
                                main_header.style.setProperty('--topSet', `0px`);
                                sticky_ad?.style.setProperty('--durationSet', `200ms`);
                                setTimeout(() => {
                                    sticky_ad?.style.setProperty('--bottom',
                                        `${chapter_controls_header.offsetHeight}px`);
                                }, 90)
                            } else {
                                chapter_header.style.setProperty('--topSet', `0px`);
                                sticky_ad?.classList.remove('sm:!bottom-0');
                                sticky_ad?.classList.add('sm:duration-[610ms]');
                                sticky_ad?.classList.remove('sm:duration-100');
                            }
                        }
                    } catch (error) {
                        console.error(error)
                    }
                }

                let show_bar = true;

                window.addEventListener('scroll', () => {
                    if (window.scrollY > document.getElementById("main_header").offsetHeight) {
                        const currentScrollTop = window.pageYOffset || document.documentElement.scrollTop;
                        let show_bar_button_pc = document.querySelector('[show_bar_button="pc"]')
                        if (updateProgress() >= 100) {
                            // if (window.innerWidth >= 640) {
                            //     hs_header_on_scroll(false);
                            // } else {
                            show_bar_button_pc.classList.add('grid');
                            show_bar_button_pc.classList.remove('hidden');
                            // }
                        } else {
                            if (currentScrollTop <= 300) {
                                hs_header_on_scroll(false)
                            } else {
                                hs_header_on_scroll(true)
                                show_bar = true;
                            }
                            // if (window.innerWidth <= 640) {
                            show_bar_button_pc.classList.remove('grid');
                            show_bar_button_pc.classList.add('hidden');
                            // }
                        }
                        lastScrollTop = currentScrollTop;
                    }
                });

                let el_bar = document.querySelectorAll('[show_bar_button]');
                const DOUBLE_TAP_THRESHOLD = 300;
                for (const el of el_bar) {
                    let lastTapTime = 0;
                    el.addEventListener("click", function() {
                        const currentTime = new Date().getTime();
                        const timeSinceLastTap = currentTime - lastTapTime;
                        const isDoubleTap = timeSinceLastTap < DOUBLE_TAP_THRESHOLD && timeSinceLastTap > 0;

                        lastTapTime = currentTime;

                        let value = this.getAttribute('show_bar_button');
                        if (window.scrollY > document.getElementById("main_header")
                            .offsetHeight) {
                            if (value === "mobile") {
                                if (window.innerWidth < 640) {
                                    if (isDoubleTap && show_bar) {
                                        hs_header_on_scroll(false);
                                        console.log("Double tap detected");
                                    } else {
                                        hs_header_on_scroll(show_bar);
                                    }
                                } else {
                                    hs_header_on_scroll(true);
                                }
                            } else if (value === "pc") {
                                hs_header_on_scroll(false);
                            }
                        }
                    }.bind(el));
                }

                //---/////////////////////////
                /////////////////////////////
                //---////////////////////////
                let chapter = document.getElementById("pages");
                let progressPercentage = document.getElementById("progressPercentage");
                let scrolledHeight = 0;
                window.addEventListener("scroll", updateProgress);

                function updateProgress() {
                    let totalHeight = chapter.clientHeight;
                    let visibleHeight = window.innerHeight;
                    let scrollTop = window.scrollY;
                    let chapterOffset = chapter.getBoundingClientRect().top;

                    if (chapterOffset < 0) {
                        if (scrollTop < scrolledHeight) {
                            scrolledHeight = scrollTop;
                        } else {
                            scrolledHeight = scrollTop;
                        }
                        let progress = (scrolledHeight / (totalHeight - visibleHeight)) * 100;
                        let progress_count = progress.toFixed(2);
                        if (progress_count >= 100) progress_count = 100;
                        //set progress progress_count;
                        return Number(progress_count);
                    } else {
                        //set progress 0;
                        scrolledHeight = 0;
                        return 0;
                    }
                }

                // Initial progress update
                updateProgress();

            })();
        </script>
        <script>
            (function() {
                // var lazyLoadInstance = new LazyLoad();
                var myLazyLoad = new LazyLoad({
                    container: document.querySelector("#pages")
                });
                myLazyLoad.update();
            })();
        </script>
        
<footer class="sm:mb-0 mb-20 bg-gradient-to-t from-[--footer] to-transparent sm:mt-12 sm:h-fit">
    <div class="grid w-full 2xl:max-w-[100rem] max-w-6xl mx-auto sm:px-4 sm:py-10 px-[6vw] py-[6vw] h-full">
        <div class="grid sm:gap-10 gap-[4vw]">
            <div class="grid gap-8">
                <div class="flex flex-col justify-center items-center gap-4">
                    <a style="background-image: url(https://wsrv.nl/?url=cdn.meowing.org/uploads/9fo4CQEukhQ&amp;w=100);" class="flex w-fit justify-center items-center h-16 aspect-square gap-3 bg-center bg-cover bg-no-repeat rounded-full" href="/">

                    </a>
                    <div class="flex flex-col justify-center items-center gap-2 w-full">
                        <a class="block w-fit font-semibold text-2xl" href="/">
                            Writers' Scans                        </a>
                                                <div class="w-full sm:max-w-[50%] text-center">
                            Hello, we’re Writers’ scans, a non profit team that tries to bring you the best series with top-notch quality! We value honesty and integrity and therefore will always present to you our latest chapters as soon as we can! Please support us on Ko-fi and Patreon if possible and join us on discord for updates and progress on your favorite series!!!
With love~<br>-Writers’ scans                        </div>
                                            </div>
                </div>
                <div class="flex flex-wrap gap-3 justify-center items-center">
                                                            <a href="discord.gg/MSp4CrVk7U" target="_blank" alt="Discord" title="Discord" class="bg-white/10 hover:bg-white/15 transition-all rounded-lg h-11 w-11 flex flex-col justify-center items-center">
                        <img src="https://api.iconify.design/fa6-brands:discord.svg?color=white" class="h-6">
                    </a>
                                                                                <a href="https://ko-fi.com/writersscans" target="_blank" alt="Ko-Fi" title="Ko-Fi" class="bg-white/10 hover:bg-white/15 transition-all rounded-lg h-11 w-11 flex flex-col justify-center items-center">
                        <img src="https://api.iconify.design/cib:ko-fi.svg?color=white" class="h-6">
                    </a>
                                                                                <a href="https://www.patreon.com/writersscans" target="_blank" alt="Patreon" title="Patreon" class="bg-white/10 hover:bg-white/15 transition-all rounded-lg h-11 w-11 flex flex-col justify-center items-center">
                        <img src="https://api.iconify.design/fa6-brands:patreon.svg?color=white" class="h-6">
                    </a>
                                                            <a href="/dmca" target="_blank" alt="DMCA" title="DMCA" class="bg-white/10 hover:bg-white/15 transition-all rounded-lg h-11 w-11 flex flex-col justify-center items-center">
                        <span class="font-bold text-xs">DMCA</span>
                    </a>
                </div>
                                                <!-- <div class="flex gap-4 justify-center items-center flex-wrap">
                                                    <a href="discord.gg/MSp4CrVk7U" target="_blank" class="font-semibold text-xl hover:text-blue-500"
                                alt="Discord">Discord</a>
                            -                                                    <a href="https://ko-fi.com/writersscans" target="_blank" class="font-semibold text-xl hover:text-blue-500"
                                alt="Ko-Fi">Ko-Fi</a>
                            -                                                    <a href="https://www.patreon.com/writersscans" target="_blank" class="font-semibold text-xl hover:text-blue-500"
                                alt="Patreon">Patreon</a>
                                                                        </div> -->
                                <!-- <div class="text-center flex flex-col justify-center items-center">
                    <span>This theme is designed by ----</span>
                    <span>Sooo unique that everyone wants to copy. 😉</span>
                </div> -->
            </div>
        </div>
    </div>
</footer>
<script>
(() => {
    let open_login_panel_button = document.querySelectorAll('#open_login_panel_button');

    let close_login_panel_button = document.getElementById('close_login_panel_button');
    let login_panel_main = document.getElementById('login_panel_main');
    let login_panel_background = document.getElementById('login_panel_background');
    let login_panel = document.getElementById('login_panel');
    runEl({
        show: {
            element: login_panel,
            function: () => {}
        },
        ignore: {
            elements: [...(Array.from(open_login_panel_button) ?? []), ...[
                close_login_panel_button,
                login_panel_background
            ]],
            function: async (data) => {
                data.preventDefault();
                login_panel_main.classList.toggle('flex');
                login_panel_main.classList.toggle('hidden');
                // Ignored elements function
            }
        }
    });
})();
</script>
<script src="https://www.hCaptcha.com/1/api.js" async="" defer=""></script>
<div id="main-report-element" class="w-full h-full fixed bg-black/40 top-0 left-0 z-[200] hidden justify-center items-center p-4">
    <div class="w-full h-full absolute top-0 left-0 overflow-hidden bg-[--theme_color] opacity-90" id="reportButton">

    </div>
    <div class="w-full max-w-[30rem] h-fit bg-[--theme_color] rounded-2xl relative">

        <!-- Loading Indicator -->
        <div id="report-loader" class="w-full h-full hidden flex justify-center items-center absolute top-0 left-0 z-10 border bg-[--theme_color] border-white/10 rounded-2xl">
            <img class="w-11 animate-spin" src="https://api.iconify.design/mingcute:loading-line.svg?color=white">
        </div>
        <!-- Success Indicator -->
        <div id="report-success" class="w-full h-full hidden flex flex gap-4 justify-center items-center absolute top-0 left-0 z-10 border bg-[--theme_color] border-white/10 rounded-2xl">
            <img class="w-11" src="https://api.iconify.design/material-symbols:check-circle-rounded.svg?color=white" alt="Success">
            <div>
                Report submitted!
            </div>
        </div>

        <div class="w-full h-fit p-6 border-white/10 border rounded-2xl grid">
            <div class="grid gap-3">
                <div class="w-full flex justify-between items-center mb-2">
                    <!-- Modal Title -->
                    <div class="text-white/90 font-bold text-2xl">
                        Report
                    </div>
                    <!-- Close Button -->
                    <button id="reportButton" class="flex w-fit aspect-square justify-center items-center h-11 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full">
                        <img class="w-6" src="https://api.iconify.design/material-symbols:close-rounded.svg?color=white">
                    </button>
                </div>

                <form class="grid gap-4" id="reportForm">
                    <div class="relative grid gap-2">
                        <label for="reportOption" class="flex items-center gap-2">
                            <img src="https://api.iconify.design/mdi:dots-vertical-circle.svg?color=white" alt="Icon" width="20" height="20">
                            Choose an option.
                        </label>
                        <div class="custom-select w-full bg-white/10 rounded-xl relative">
                            <div id="selectedOption" class="text-white cursor-pointer py-2 px-3 flex items-center gap-2">
                                <span class="flex gap-1"><span class="sm:hidden">Tap</span><span class="sm:block hidden">Click</span> to view options</span>
                            </div>
                            <div id="optionsList" class="options-list bg-[--theme_color] rounded-xl absolute w-full hidden mt-1 z-10 overflow-hidden">
                            <div class="option-item text-white py-2 px-3 cursor-pointer hover:bg-white/20 bg-white/10" data-value="1">General error (e.g grammatical, misaligned text)</div><div class="option-item text-white py-2 px-3 cursor-pointer hover:bg-white/20 bg-white/10" data-value="2">Missing/lost image (No page found)</div><div class="option-item text-white py-2 px-3 cursor-pointer hover:bg-white/20 bg-white/10" data-value="3">Wrong chapter</div><div class="option-item text-white py-2 px-3 cursor-pointer hover:bg-white/20 bg-white/10" data-value="4">Untranslated chapter (Other Language)</div><div class="option-item text-white py-2 px-3 cursor-pointer hover:bg-white/20 bg-white/10" data-value="5">Wrong page order</div><div class="option-item text-white py-2 px-3 cursor-pointer hover:bg-white/20 bg-white/10" data-value="6">Other</div></div>
                        </div>
                        <p id="error-message" class="text-red-500 text-sm hidden mt-1">Please select an option.</p>
                    </div>

                    <div class="grid gap-2">
                        <label for="reportText" class="flex items-center gap-2">
                            <img src="https://api.iconify.design/material-symbols:edit-note.svg?color=white" alt="Icon" width="20" height="20">
                            Enter your report.
                        </label>
                        <textarea id="reportText" name="message" rows="4" class="w-full p-2 bg-white/10 rounded-xl" minlength="1" maxlength="200" required=""></textarea>
                    </div>

                    <div class="grid gap-2">
                        <label for="reportText" class="flex items-center gap-2">
                            <img src="https://api.iconify.design/logos:hcaptcha-icon.svg" alt="Icon" width="20" height="20">
                            Solve captcha.
                        </label>
                        <div class="grid gap-1">
                            <div class="h-captcha" data-sitekey="a9226c58-b3d8-4f9e-82d4-d92644dc8584"><iframe src="https://newassets.hcaptcha.com/captcha/v1/4948b4d6847921d7bf0b86388c141311d7f03e2e/static/hcaptcha.html#frame=checkbox&amp;id=0ykfdj4wnpzh&amp;host=writerscans.com&amp;sentry=true&amp;reportapi=https%3A%2F%2Faccounts.hcaptcha.com&amp;recaptchacompat=true&amp;custom=false&amp;hl=de&amp;tplinks=on&amp;andint=off&amp;pstissuer=https%3A%2F%2Fpst-issuer.hcaptcha.com&amp;sitekey=a9226c58-b3d8-4f9e-82d4-d92644dc8584&amp;theme=light&amp;origin=https%3A%2F%2Fwriterscans.com" tabindex="0" frameborder="0" scrolling="no" allow="private-state-token-redemption" title="Widget mit Kontrollkästchen für die hCaptcha-Sicherheitsabfrage" data-hcaptcha-widget-id="0ykfdj4wnpzh" data-hcaptcha-response="" style="pointer-events: auto; background-color: rgba(255, 255, 255, 0); border-radius: 4px; width: 302px; height: 76px; overflow: hidden;"></iframe><textarea id="g-recaptcha-response-0ykfdj4wnpzh" name="g-recaptcha-response" style="display: none;"></textarea><textarea id="h-captcha-response-0ykfdj4wnpzh" name="h-captcha-response" style="display: none;"></textarea></div>
                            <p id="captcha-error-message" class="text-red-500 text-sm hidden mt-1">Please complete the
                                captcha.</p>
                        </div>
                    </div>

                    <div class="text-center">
                        <button type="submit" class="bg-white/10 text-white px-6 h-11 rounded-full">
                            Submit Report
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<script>
    (() => {
        function report_view() {

            const reportElement = document.getElementById("main-report-element");
            const reportLoader = document.getElementById("report-loader");
            const reportText = document.getElementById("reportText");
            const selectedOption = document.getElementById("selectedOption");
            const errorMessage = document.getElementById("error-message");
            if (!reportLoader.classList.contains("hidden")) {
                return;
            }

            reportText.value = "";
            selectedOption.textContent = "Click to view options";
            errorMessage.classList.add("hidden");

            if (reportElement.classList.contains("hidden")) {
                reportElement.classList.add("flex");
                reportElement.classList.remove("hidden");
                reportElement.classList.add("transition-opacity", "opacity-0");
                setTimeout(() => {
                    reportElement.classList.remove("opacity-0");
                    reportElement.classList.add("opacity-100");
                }, 10);
            } else {
                reportElement.classList.remove("opacity-100");
                reportElement.classList.add("opacity-0");
                setTimeout(() => {
                    reportElement.classList.add("hidden");
                    reportElement.classList.remove("flex");
                }, 200);
            }
        }
                const optionsList = [{"value":1,"label":"General error (e.g grammatical, misaligned text)"},{"value":2,"label":"Missing\/lost image (No page found)"},{"value":3,"label":"Wrong chapter"},{"value":4,"label":"Untranslated chapter (Other Language)"},{"value":5,"label":"Wrong page order"},{"value":6,"label":"Other"}];

        const optionsListContainer = document.getElementById('optionsList');
        const selectedOption = document.getElementById('selectedOption');
        const errorMessage = document.getElementById('error-message');
        const captchaErrorMessage = document.getElementById('captcha-error-message');
        const reportText = document.getElementById('reportText');
        const submitButton = document.querySelector('button[type="submit"]');
        const selectContainer = document.querySelector('.custom-select');
        const reportLoader = document.getElementById('report-loader');
        const form = document.getElementById('reportForm');

        const report_view_buttons = document.querySelectorAll('.report_view_button');

        for (let button of report_view_buttons) {
            button.addEventListener('click', () => {
                console.log(true);
            });
        }



        let selectedValue = null;

        optionsList.forEach(option => {
            const optionElement = document.createElement('div');
            optionElement.classList.add('option-item', 'text-white', 'py-2', 'px-3', 'cursor-pointer',
                'hover:bg-white/20', 'bg-white/10');
            optionElement.setAttribute('data-value', option.value);
            optionElement.textContent = option.label;
            optionsListContainer.appendChild(optionElement);
        });

        selectedOption.addEventListener('click', () => {
            optionsListContainer.classList.toggle('hidden');
        });

        optionsListContainer.addEventListener('click', (e) => {
            if (e.target && e.target.classList.contains('option-item')) {
                const allOptions = optionsListContainer.querySelectorAll('.option-item');
                allOptions.forEach(opt => {
                    opt.classList.remove('bg-red-500');
                });

                e.target.classList.add('bg-red-500');

                selectedValue = e.target.getAttribute('data-value');
                const selectedLabel = e.target.textContent;
                selectedOption.textContent = selectedLabel;

                optionsListContainer.classList.add('hidden');
                errorMessage.classList.add('hidden');
            }
        });

        form.addEventListener('submit', async (e) => {
            e.preventDefault();

            if (!selectedValue) {
                errorMessage.classList.remove('hidden');
            } else if (!hcaptcha.getResponse()) {
                captchaErrorMessage.classList.remove('hidden');
            } else {
                captchaErrorMessage.classList.add('hidden');

                // Show loader and disable inputs
                reportLoader.classList.remove('hidden');
                reportText.disabled = true;
                submitButton.disabled = true;
                selectContainer.disabled = true;
                optionsListContainer.classList.add('disabled');
                selectedOption.classList.add('disabled');

                const message = reportText.value;
                let data = {
                    message,
                    type: selectedValue,
                    captcha: hcaptcha.getResponse(),
                    ...{"series_uid":"64116117bfc","chapter_uid":"641164935e1"}                };
                const params = new URLSearchParams(data).toString();
                const url = `/report?${params}`;

                try {
                    let {
                        success,
                        message: error_message
                    } = await fetch(url).then(response => response.json());
                    if (success) {
                        reportLoader.classList.add('hidden');

                        const reportSuccess = document.getElementById('report-success');
                        reportSuccess.classList.remove('hidden');

                        setTimeout(() => {
                            report_view();
                        }, 1000);
                    } else {
                        alert(error_message);
                        setTimeout(() => {
                            report_view();
                        }, 2000);
                    }
                } catch (error) {
                    alert(
                        'An error occurred while submitting the report, reload the page and try again.'
                    );
                    setTimeout(() => {
                        report_view();
                    }, 2000);
                } finally {
                    reportLoader.classList.add('hidden');
                }
            }
        });

        document.getElementById('reportButton')?.addEventListener('click', () => {
            report_view()
        });
    })();
</script>    <div id="cards_show" class="hidden justify-center items-center w-full h-full fixed top-0 left-0 z-[162] overflow-hidden opacity-0 transition-all duration-[250] ">
    <div id="cards_show_bg" class="absolute top-0 left-0 w-full h-full bg-[--theme_color] opacity-90">

    </div>
    <div id="cards_show_main" class="w-full h-full max-w-sm max-h-96 bg-[--theme_color] relative rounded-2xl">
                    <div class="flex flex-col justify-between items-start w-full h-full border border-white/10 rounded-2xl">
                                    <div class="w-full h-full flex flex-col gap-4 p-8 justify-center items-center">
                        <div class="w-full text-center">
                            You don't have any cards yet. <br> To purchase a chapter, purchase a card first.                        </div>
                        <button id="card_note_button" onclick="card_note_open()" class="px-5 flex w-fit justify-center items-center h-11 gap-3 bg-blue-600 hover:bg-blue-500 transition-all cursor-pointer rounded-full">
                            <img class="w-6" src="https://api.iconify.design/mdi:card-plus.svg?color=white">
                            <div class="font-medium">Purchase Card</div>
                        </button>
                    </div>
                                <div class="grid gap-3 h-fit w-full p-4 border-t border-white/10">
                    <div class="w-full">
                        <div class="flex gap-3 justify-start items-center">
                            <div id="main_card_chapter_cover" class="aspect-[2/1.5] h-11 bg-white/10 bg-cover bg-center rounded-xl">

                            </div>
                            <div class="grid">
                                <div class="flex gap-1 justify-start items-center">
                                    <span class="font-bold text-yellow-600" id="main_card_coins"></span>
                                    <span class="text-xs font-semibold">COINS</span>
                                </div>
                                <span class="text-xs"><span id="main_card_chapter_name"></span> - <span id="main_card_chapter_date"></span></span>
                            </div>
                        </div>
                    </div>
                                    </div>
            </div>
            </div>
</div>
<script>
    (async () => {
        let cards_show = document.querySelector('#cards_show');
        let cards_show_bg = document.querySelector('#cards_show_bg');
        let cards_show_main = document.querySelector('#cards_show_main');
        let paid_chapters = document.querySelectorAll("#paid-chapter");
        let cards = document.querySelectorAll("button#card");
        let purchase_button = document.querySelector('#purchase_button');

        let main_card_coins = document.querySelector('#main_card_coins');
        let main_card_chapter_cover = document.querySelector('#main_card_chapter_cover');
        let main_card_chapter_name = document.querySelector('#main_card_chapter_name');
        let main_card_chapter_date = document.querySelector('#main_card_chapter_date');

        await (async () => {
            if (cards) {
                for await (const card of cards) {
                    card.addEventListener('click', async (event) => {
                        const card_x = event.target.closest('[card_uid]');
                        await selectCard(card_x);
                        await setPurchase(card_x)
                    });
                }
            }
            if (purchase_button) {
                purchase_button.addEventListener('click', (event) => {
                    if (event.disabled) {} else {
                        let uid = purchase_button.getAttribute('card_uid');
                        let href = purchase_button.getAttribute('href');
                        if (href && uid) {
                            window.location = `${href}?card=${uid}`;
                        }
                    }
                });
            }
        })();

        async function setPurchase(card_x) {
            try {
                let uid = card_x.getAttribute('card_uid');
                let card_coins = Number(card_x.getAttribute('c')) ?? 0;
                let coins = Number(main_card_coins.textContent) ?? 1;
                if (purchase_button) {
                    if (card_coins >= coins) {
                        purchase_button.classList.add('hover:opacity-90');
                        purchase_button.classList.remove('opacity-50');
                        purchase_button.removeAttribute('disabled');
                        purchase_button.setAttribute('card_uid', uid);
                        return true;
                    } else {
                        purchase_button.classList.remove('hover:opacity-90');
                        purchase_button.classList.add('opacity-50');
                        purchase_button.setAttribute('disabled', 'true');
                        purchase_button.removeAttribute('card_uid');
                        return false;
                    }
                }
            } catch (error) {
                console.error(error);
            }
        }

        async function selectCard(card_x) {
            if (card_x) {
                let uid = card_x.getAttribute('card_uid');
                for await (const card_2 of cards) {
                    const card_uid = card_2.getAttribute('card_uid');
                    if (card_uid === uid) {
                        card_2.classList.add('ring-2');
                        card_2.classList.add('ring-offset-2');
                        card_2.classList.remove('ring-0');
                        card_2.classList.remove('ring-offset-0');
                    } else {
                        card_2.classList.add('ring-0');
                        card_2.classList.add('ring-offset-0');
                        card_2.classList.remove('ring-2');
                        card_2.classList.remove('ring-offset-2');
                    }
                }
                return uid;
            }
        }



        await runEl({
            ignore: {
                elements: [...(Array.from(paid_chapters) ?? []), ...[cards_show_bg]],
                function: async (data) => {
                    data.preventDefault();
                    let check = cards_show.classList.contains('flex');
                                            //-------------------------------------------//
                        let paid_chapter = data.target.closest('#paid-chapter');
                        if (paid_chapter && paid_chapter.getAttribute("id") === "paid-chapter") {
                            let displayName = paid_chapter.getAttribute('title');
                            let photoURL_string = paid_chapter.getAttribute('p');
                            let photoURL =
                                `https://i2.wp.com/cdn.meowing.org/uploads/${photoURL_string}?w=80`;
                            let createdAt = paid_chapter.getAttribute('d');
                            let href = paid_chapter.getAttribute('href');
                            let coins = Number(paid_chapter.getAttribute('c')) ?? 1;
                            main_card_coins.innerHTML = coins;
                            if (purchase_button && href) purchase_button.setAttribute('href', href);
                            if (String(photoURL_string).length === 0) {
                                main_card_chapter_cover.remove()
                            } else {
                                main_card_chapter_cover.style.backgroundImage = `url(${photoURL})`;
                            }
                            main_card_chapter_name.innerHTML = displayName;
                            main_card_chapter_date.innerHTML = createdAt;
                        }
                        //-------------------------------------------//
                                        if (check) {
                        setTimeout(() => {
                            cards_show.classList.toggle('opacity-0')
                            cards_show.classList.toggle('opacity-100')
                        }, 50)
                        setTimeout(() => {
                            cards_show.classList.toggle('hidden')
                            cards_show.classList.toggle('flex')
                        }, 300)
                    } else {
                                                    //-------------------------------------------//
                            await (async () => {
                                let paid_mark = false;
                                for await (const card of cards) {
                                    if (!card.disabled && paid_mark !== true) {
                                        await selectCard(card);
                                        paid_mark = await setPurchase(card);
                                    }
                                }
                            })();
                            //-------------------------------------------//
                                                cards_show.classList.toggle('hidden')
                        cards_show.classList.toggle('flex')
                        // setTimeout(() => {
                        //     cards_show.classList.toggle('backdrop-blur-2xl')
                        //     cards_show.classList.toggle('backdrop-blur-0')
                        // }, 100)
                        setTimeout(() => {
                            cards_show.classList.toggle('opacity-0')
                            cards_show.classList.toggle('opacity-100')
                        }, 150)
                    }
                }
            },
            show: {
                element: cards_show_main,
                function: () => {}
            },
        });
    })();
</script>


<div aria-hidden="true" style="background-color: rgb(255, 255, 255); border: 1px solid rgb(215, 215, 215); box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 4px; border-radius: 4px; left: auto; top: -10000px; z-index: -2147483648; position: absolute; pointer-events: auto; transition: opacity 0.15s ease-out; opacity: 0; visibility: hidden;"><div style="position: relative; z-index: 1;"><iframe src="https://newassets.hcaptcha.com/captcha/v1/4948b4d6847921d7bf0b86388c141311d7f03e2e/static/hcaptcha.html#frame=challenge&amp;id=0ykfdj4wnpzh&amp;host=writerscans.com&amp;sentry=true&amp;reportapi=https%3A%2F%2Faccounts.hcaptcha.com&amp;recaptchacompat=true&amp;custom=false&amp;hl=de&amp;tplinks=on&amp;andint=off&amp;pstissuer=https%3A%2F%2Fpst-issuer.hcaptcha.com&amp;sitekey=a9226c58-b3d8-4f9e-82d4-d92644dc8584&amp;theme=light&amp;origin=https%3A%2F%2Fwriterscans.com" frameborder="0" scrolling="no" allow="private-state-token-redemption" title="Hauptinhalt der hCaptcha Challenge" style="border: 0px; z-index: 2000000000; position: relative;"></iframe></div><div style="width: 100%; height: 100%; position: fixed; pointer-events: none; top: 0px; left: 0px; z-index: 0; background-color: rgb(255, 255, 255); opacity: 0.05;"></div><div style="border-width: 11px; position: absolute; pointer-events: none; margin-top: -11px; z-index: 1; right: 100%;"><div style="border-width: 10px; border-style: solid; border-color: transparent rgb(255, 255, 255) transparent transparent; position: relative; top: 10px; z-index: 1;"></div><div style="border-width: 11px; border-style: solid; border-color: transparent rgb(215, 215, 215) transparent transparent; position: relative; top: -11px; z-index: 0;"></div></div></div></body></html>