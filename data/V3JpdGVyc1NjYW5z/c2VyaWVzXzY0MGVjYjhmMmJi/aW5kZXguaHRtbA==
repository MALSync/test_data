<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
        <title>Classmate</title>
    <meta name="format-detection" content="telephone=no">
    <meta name="robots" content="follow, index, max-snippet:-1, max-video-preview:-1, max-image-preview:large">
    <link rel="icon" href="https://wsrv.nl/?url=cdn.meowing.org/uploads/9fo4CQEukhQ&amp;w=20">
    <link rel="canonical" href="https://writerscans.com/series/640ecb8f2bb/">
    <meta name="description" content="'I'll be your friend.'
A chilling ghost boy, Haesu Lee, visits the outcast, Eunha Joo. The moment she accepts this dangerous friendship, unexpected events unfold around Eunha...
Will this hand offered by her mysterious friend be salvation, or a curse? - Hello, we’re Writers’ scans, a non profit team that tries to bring you the best series with top-notch quality! We value honesty and integrity and therefore will always present to you our latest chapters as soon as we can! Please support us on Ko-fi and Patreon if possible and join us on discord for updates and progress on your favorite series!!!
With love~-Writers’ scans - Classmate">
    <meta name="keywords" content="Horror, Mystery, School Life, Supernatural">
    <meta property="og:type" content="website">
    <meta property="og:title" content="Classmate">
    <meta property="og:description" content="'I'll be your friend.'
A chilling ghost boy, Haesu Lee, visits the outcast, Eunha Joo. The moment she accepts this dangerous friendship, unexpected events unfold around Eunha...
Will this hand offered by her mysterious friend be salvation, or a curse? - Hello, we’re Writers’ scans, a non profit team that tries to bring you the best series with top-notch quality! We value honesty and integrity and therefore will always present to you our latest chapters as soon as we can! Please support us on Ko-fi and Patreon if possible and join us on discord for updates and progress on your favorite series!!!
With love~-Writers’ scans - Classmate">
    <meta property="og:url" content="http://writerscans.com/series/640ecb8f2bb/">
    <meta property="og:site_name" content="Writers' Scans">
    <meta property="og:image:alt" content="Classmate">
    <meta property="og:image" content="https://wsrv.nl/?url=cdn.meowing.org/uploads/cnguoVxx6ul">
    <meta property="og:image:secure_url" content="https://wsrv.nl/?url=cdn.meowing.org/uploads/cnguoVxx6ul">
    <meta property="twitter:title" content="Classmate">
    <meta property="twitter:description" content="'I'll be your friend.'
A chilling ghost boy, Haesu Lee, visits the outcast, Eunha Joo. The moment she accepts this dangerous friendship, unexpected events unfold around Eunha...
Will this hand offered by her mysterious friend be salvation, or a curse? - Hello, we’re Writers’ scans, a non profit team that tries to bring you the best series with top-notch quality! We value honesty and integrity and therefore will always present to you our latest chapters as soon as we can! Please support us on Ko-fi and Patreon if possible and join us on discord for updates and progress on your favorite series!!!
With love~-Writers’ scans - Classmate">
    <meta property="twitter:image" content="https://wsrv.nl/?url=cdn.meowing.org/uploads/cnguoVxx6ul">
        <meta property="twitter:card" content="summary_large_image">
        <script async="" src="https://count-server.sharethis.com/v2.0/get_counts?cb=window.__sharethis__.cb&amp;url=https%3A%2F%2Fwriterscans.com%2Fseries%2F640ecb8f2bb%2F"></script><script async="" src="https://buttons-config.sharethis.com/js/65dc466cf44fb1001a4c6a85.js"></script><script type="application/ld+json">
    {
        "@context": "https://schema.org",
        "@type": "Article",
        "headline": "Classmate",
        "description": "'I'll be your friend.'
A chilling ghost boy, Haesu Lee, visits the outcast, Eunha Joo. The moment she accepts this dangerous friendship, unexpected events unfold around Eunha...
Will this hand offered by her mysterious friend be salvation, or a curse? - Hello, we’re Writers’ scans, a non profit team that tries to bring you the best series with top-notch quality! We value honesty and integrity and therefore will always present to you our latest chapters as soon as we can! Please support us on Ko-fi and Patreon if possible and join us on discord for updates and progress on your favorite series!!!
With love~-Writers’ scans - Classmate",
        "url": "http://writerscans.com/series/640ecb8f2bb/",
        "datePublished": "2025-10-12T02:15:19+00:00",
        "dateModified": "2025-10-21T20:11:40+00:00",
        "image": "https://wsrv.nl/?url=cdn.meowing.org/uploads/cnguoVxx6ul",
        "author": {
            "@type": "Person",
            "name": "Writers' Scans",
            "url": "http://writerscans.com/series/640ecb8f2bb/"
        },
        "publisher": {
            "@type": "Organization",
            "name": "Writers' Scans",
            "logo": {
                "@type": "ImageObject",
                "url": "https://wsrv.nl/?url=cdn.meowing.org/uploads/9fo4CQEukhQ&w=20"
            }
        },
        "mainEntityOfPage": {
            "@type": "WebPage",
            "@id": "http://writerscans.com/series/640ecb8f2bb/"
        }
    }
    </script>
    <!-- <script src="https://unpkg.com/htmx.org@1.9.3/dist/htmx.min.js" async></script> -->
    <!-- <script src="https://unpkg.com/htmx.org/dist/ext/loading-states.js" defer></script> -->
        <script async="" src="https://www.googletagmanager.com/gtag/js?id=G-WBZZWKCQVZ"></script>
    <script>
    window.dataLayer = window.dataLayer || [];

    function gtag2() {
        dataLayer.push(arguments);
    }
    gtag2('js', new Date());

    gtag2('config', 'G-WBZZWKCQVZ');
    </script>
    <script src="https://cdn.jsdelivr.net/npm/store2@2.14.2/dist/store2.min.js"></script>
                <link rel="stylesheet" href="https://f.feedmas.com/fw.css">
    
    <script src="/assets/scripts/index.js?clear=v3.8"></script>
    <script src="https://cdn.jsdelivr.net/npm/cleave.js@1.6.0"></script>
    <link rel="stylesheet" href="/assets/styles/output.css?clear=v5.3">

            <style>
    :root {
        --theme_color: #03000a;
        --header: #00030f;
        --footer: rgb(255 255 255 / 0.1);
        --button: #09090b;
    }

    iframe:not([src]) {
        display: none !important;
    }

    .fw .fw-z-10 {
        z-index: 200 !important;
    }
    </style>
    <style>
    @import url("https://fonts.googleapis.com/css2?family=Poppins:wght@100;200;300;400;500;600;700;800;900&display=swap");
    @import url("https://fonts.googleapis.com/css2?family=Bebas+Neue&family=Croissant+One&family=Young+Serif&display=swap");
    @import url('https://fonts.googleapis.com/css2?family=Bree+Serif&display=swap');
    @import url('https://fonts.googleapis.com/css2?family=Courier+Prime:ital,wght@0,400;0,700;1,400;1,700&display=swap');
    </style>
                <script async="">
    (async function() {
        let library = store.get('library');
        if (library) {
            let series_list = [];
            for (const id in library) {
                series_list.push(id);
            }

            if (series_list.length > 0) {
                let to_json_string = JSON.stringify(series_list);
                try {
                    // UNDER WORK
                    // let response = await fetch('/sync?series=' + encodeURIComponent(to_json_string));
                    // let {
                    //     success
                    // } = await response.json();
                    // if (success) {
                    //     store.remove('library');
                    // }
                } catch (error) {
                    console.error('Failed to sync series:', error);
                }
            }
        }
    })();
    </script>


<style type="text/css">#st-1 {
  font-family: "Helvetica Neue", Verdana, Helvetica, Arial, sans-serif;;
  direction: ltr;
  display: block;
  opacity: 1;
  text-align: left;
  z-index: 94034;
}
#st-1.st-animated {
  -moz-transition: o 0.2s ease-in, p 0.2s ease-in, a 0.2s ease-in, c 0.2s ease-in, i 0.2s ease-in, t 0.2s ease-in, y 0.2s ease-in; -ms-transition: o 0.2s ease-in, p 0.2s ease-in, a 0.2s ease-in, c 0.2s ease-in, i 0.2s ease-in, t 0.2s ease-in, y 0.2s ease-in; -o-transition: o 0.2s ease-in, p 0.2s ease-in, a 0.2s ease-in, c 0.2s ease-in, i 0.2s ease-in, t 0.2s ease-in, y 0.2s ease-in; -webkit-transition: o 0.2s ease-in, p 0.2s ease-in, a 0.2s ease-in, c 0.2s ease-in, i 0.2s ease-in, t 0.2s ease-in, y 0.2s ease-in; transition: o 0.2s ease-in, p 0.2s ease-in, a 0.2s ease-in, c 0.2s ease-in, i 0.2s ease-in, t 0.2s ease-in, y 0.2s ease-in;
}
#st-1.st-hidden {
  opacity: 0;
}

#st-1.st-preview {
  display: none!important;
  opacity: 0!important;
}
#st-1.st-hide {
  display: none;
}
#st-1 .st-btn {
  -moz-box-sizing: border-box;
-webkit-box-sizing: border-box;
box-sizing: border-box;
  -moz-transition: opacity 0.2s ease-in, top 0.2s ease-in; -ms-transition: opacity 0.2s ease-in, top 0.2s ease-in; -o-transition: opacity 0.2s ease-in, top 0.2s ease-in; -webkit-transition: opacity 0.2s ease-in, top 0.2s ease-in; transition: opacity 0.2s ease-in, top 0.2s ease-in;
  -moz-border-radius: 20px;
-webkit-border-radius: 20px;
border-radius: 20px;
  border: none;
  cursor: pointer;
  display: inline-block;
  font-size: 12px;
  height: 40px;
  line-height: 40px;
  margin-right: 8px;
  padding: 0 10px;
  position: relative;
  text-align: center;
  top: 0;
  vertical-align: top;
  white-space: nowrap;
}
#st-1 .st-btn:last-child {
  margin-right: 0;
}
#st-1 .st-btn > svg {
  height: 20px;
  width: 20px;
  position: relative;
  top: 10px;
  vertical-align: top;
}
#st-1 .st-btn > img {
  display: inline-block;
  height: 20px;
  width: 20px;
  position: relative;
  top: 10px;
  vertical-align: top;
}
#st-1 .st-btn > span {
  -moz-transition: all 0.2s ease-in; -ms-transition: all 0.2s ease-in; -o-transition: all 0.2s ease-in; -webkit-transition: all 0.2s ease-in; transition: all 0.2s ease-in;
  color: #fff;
  display: inline-block;
  font-weight: 500;
  letter-spacing: 0.5px;
  min-width: 67px;
  opacity: 1;
  padding: 0 6px;
  position: relative;
  vertical-align: top;
}
#st-1.st-has-labels .st-btn {
  min-width: 135px;
}
#st-1.st-has-labels .st-btn.st-remove-label {
  min-width: 50px;
}
#st-1.st-has-labels .st-btn.st-remove-label > span {
  display: none;
}
#st-1.st-has-labels .st-btn.st-hide-label > span {
  display: none;
}
#st-1 .st-total {
  color: #555;
  display: inline-block;
  font-weight: 500;
  line-height: 15px;
  margin-right: 0;
  max-width: 80px;
  padding: 4px 8px;
  text-align: center;
}
#st-1 .st-total.st-hidden {
  display: none;
}
#st-1 .st-total > span {
  font-size: 20px;
  line-height: 22px;
  display: block;
  padding: 0;
}
#st-1 .st-total > span.st-shares {
  font-size: 12px;
  line-height: 12px;
}
#st-1.st-justified {
  display: flex;
  text-align: center;
}
#st-1.st-justified .st-btn {
  -moz-flex: 1;
-ms-flex: 1;
-webkit-flex: 1;
flex: 1;
}#st-1 .st-btn:hover {
  opacity: .8;
  top: -4px;
}#st-1 .st-btn[data-network='sharethis'] {
  background-color: #6366f1
}
#st-1 .st-btn[data-network='sharethis'] img {
  filter: invert(0%) sepia(0%) saturate(7473%) hue-rotate(323deg) brightness(100%) contrast(101%);
}
#st-1 .st-btn[data-network='sharethis'] > span {
  color: #ffffff
}#st-1 .st-btn[data-network='snapchat'] > span {
  color: #333};
}</style><style>.\[\&_\.gdprAdTransparencyCogWheelButton\]\:\!pjra-z-\[5\],
AD-SLOT,
DFP-AD,
[class^="adDisplay-module"],
[class^="amp-ad-"],
[data-ad-cls],
[data-adbridg-ad-class],
[data-adshim],
[data-asg-ins],
[data-block-type="ad"],
[data-cl-spot-id],
[data-css-class="dfp-inarticle"],
[data-d-ad-id],
[data-desktop-ad-id],
[data-dynamic-ads],
[data-ez-name],
[data-freestar-ad][id],
[data-id^="div-gpt-ad"],
[data-identity="adhesive-ad"],
[data-m-ad-id],
[data-mobile-ad-id],
[data-rc-widget],
[data-role="tile-ads-module"],
[data-template-type="nativead"],
[data-testid="adBanner-wrapper"],
[data-testid="ad_testID"],
[data-testid="prism-ad-wrapper"],
[data-testid^="section-AdRowBillboard"],
[data-type="ad-vertical"],
[data-wpas-zoneid],
[href$="/sexdating.php"],
[id^="ad-wrap-"],
[id^="ad_sky"],
[id^="ad_slider"],
[id^="section-ad-banner"],
[onclick^="location.href='https://1337x.vpnonly.site/"],
a-ad,
a[data-href^="http://ads.trafficjunky.net/"],
a[data-url^="https://vulpix.bet/?ref="],
a[onclick^="window.location.replace('https://random-affiliate.atimaze.com/"],
a[style="width:100%;height:100%;z-index:10000000000000000;position:absolute;top:0;left:0;"],
ad-shield-ads,
ad-slot,
app-ad,
app-advertisement,
app-large-ad,
aside[id^="adrotate_widgets-"],
atf-ad-slot,
bottomadblock,
display-ad-component,
display-ads,
div[class$="-adlabel"],
div[class^="Adstyled__AdWrapper-"],
div[data-ad-placeholder],
div[data-ad-region],
div[data-ad-wrapper],
div[data-adname],
div[data-adunit-path],
div[data-adunit],
div[data-adzone],
div[data-alias="300x250 Ad 1"],
div[data-alias="300x250 Ad 2"],
div[data-contentexchange-widget],
div[data-dfp-id],
div[data-id-advertdfpconf],
div[id^="ad-div-"],
div[id^="ad-position-"],
div[id^="adngin-"],
div[id^="adrotate_widgets-"],
div[id^="adspot-"],
div[id^="crt-"][style],
div[id^="div-ads-"],
div[id^="google_dfp_"],
div[id^="gpt_ad_"],
div[id^="lazyad-"],
div[id^="optidigital-adslot"],
div[id^="rc-widget-"],
div[id^="st"][style^="z-index: 999999999;"],
div[id^="sticky_ad_"],
div[id^="vuukle-ad-"],
div[ow-ad-unit-wrapper],
gpt-ad,
guj-ad,
hl-adsense,
img[src^="https://images.purevpnaffiliates.com"],
img[src^="https://s-img.adskeeper.com/"],
ps-connatix-module,
span[data-ez-ph-id],
span[id^="ezoic-pub-ad-placeholder-"],
topadblock,
zeus-ad,
broadstreet-zone-container,
iframe[scrolling="no"][sandbox*="allow-popups allow-modals"][style^="width: 100%; height: 100%; border: none;"],
[class^="tile-picker__CitrusBannerContainer-sc-"],
citrus-ad-wrapper,
div[id*="MarketGid"],
[onclick*="content.ad/"],
AMP-AD,
amp-ad,
amp-ad-custom,
amp-connatix-player,
amp-fx-flying-carpet,
a[data-oburl^="https://paid.outbrain.com/network/redir?"],
a[data-redirect^="https://paid.outbrain.com/network/redir?"],
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"] + .ob_source,
[data-taboola-options],
[data-testid="commercial-label-taboola"],
[data-testid^="taboola-"],
amp-embed[type="taboola"],
div[id^="taboola-stream-"],
div[id^="zergnet-widget"],
html[lang] > body.ishome > div.adult + main.main,
html[lang] > body:not([class]):not([id]):not([style]) > div.background-container > div.container > div.captcha-box,
html[lang] > body.startnew > div#sections > section#section_uname,
html[lang] > body:not([style]) > div.captchaBody,
html[lang] > body#body > * > div.cv-xwrapper > div.cvc > div.cv-inner,
html[lang] > body#body > * > div.cvh.BlockClicksActivityBusy,
html#html[sti][vic][lang] > body#allbody,
html > body > div.container.m-p > #checkbox-window.checkbox-window,
html[lang] > body:not([class]):not([id]):not([style]) > div.container > div.recaptcha-box,
body > .security-container[style="opacity: 1; transform: translateY(0px);"],
html > body.hold-transition.theme-primary.bg-img[style^="background-image"][style*="wallpaperaccess.com"][style*="background-repeat"][style*="background-size"],
html > body > div.container > form#unsubscribe-form[onsubmit="submitUnsubscribeForm(event)"],
html > body > div.content > dl > dd.dd1 > div.min_sider > form#form1[action="unsubscribe.php"],
html > body.body > div.container > div.content > form > table.optoutForm,
div[id][style^="position: fixed; inset: 0px; z-index: 2147483647; background: black"][style*="opacity: 0.01"],
div[class$="player-promo-col"],
div#spot-holder.spot-holder[style="display: block;"],
a[dontfo=""][style$="position: absolute; z-index: 2147483647;"],
[data-ad-module]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-width]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-adblockkey]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(html):not(.adsbygoogle),
[data-advadstrackid]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-manager-id]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
div[style^="z-index: 999999; background-image: url(\"data:image/gif;base64,"][style$="position: absolute;"],
a[onclick="openAuc();"],
div[style="position: fixed; display: block; width: 100%; height: 100%; inset: 0px; background-color: rgba(0, 0, 0, 0); z-index: 300000;"],
div[style^="position:fixed;inset:0px;z-index:2147483647;background:black;opacity:0.01"],
div[style^="position: fixed; inset: 0px; z-index: 2147483647; background: black; opacity: 0.01"],
iframe.lazyloaded[data-src^="https://rcm-fe.amazon-adsystem.com/"],
#player div[style$="cursor: pointer; position: absolute; width: 100%; height: 100%; padding: 1rem; z-index: 2147483647;"],
html[lang][style^="--main-bg-color"] > body:not([class]):not([id]) > div#container[style="visibility: visible;"] > div#banner[style="opacity:0"] ~ main:not([class]):not([id]) > div#message,
[onclick*="postlnk.com"],
[data-lnguri*="vipbox"],
[class^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]) { display: none !important; }

[data-ad-name],
[data-revive-zoneid],
[name^="google_ads_iframe"],
div[aria-label="Ads"],
div[data-ad-targeting],
div[id^="ad_position_"],
div[id^="dfp-ad-"],
div[id^="ezoic-pub-ad-"],
ins.adsbygoogle[data-ad-client],
ins.adsbygoogle[data-ad-slot],
[class^="s2nPlayer"],
div[id*="ScriptRoot"],
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"],
div[id^="div-gpt-"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]):not([style="pointer-events: none; height: 1px; width: 0px; opacity: 0; visibility: hidden; position: fixed; bottom: 0px;"]),
[id^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]):not([style="pointer-events: none; height: 1px; width: 0px; opacity: 0; visibility: hidden; position: fixed; bottom: 0px;"]),
div[style^="height:    250px; width:    300px;"],
div[style^="width:    160px; height:    600px; margin: 0px auto; min-width: 160px; min-height: 600px;"],
div[style^="width:    300px; height:    250px;"],
html[class^="img_"][amp4ads=""][i-amphtml-layout=""][i-amphtml-no-boilerplate=""][amp-version="2502032353000"],
html[class^="img_"][amp4ads=""][i-amphtml-layout=""][i-amphtml-no-boilerplate=""][amp-version="2507172035000"],
html[class^="img_"][amp4ads=""][i-amphtml-layout=""][i-amphtml-no-boilerplate=""][amp-version="2509031727000"],
img[height="   250"][width="   300"],
img[height="   90"][width="   728"],
ins[style$="height:    90px; width:    728px;"],
*:not(body) > a[href^="https://content-loader.com/"],
*:not(body) > a[href^="https://html-load.com/"],
*:not(body) > a[href^="https://07c225f3.online/"] { display: none !important; }</style><style>.grid > .container > #aside-promotion,
.sharethis-inline-share-buttons.st-hidden,
[href*="uselnk.com/"],
[href*="postlnk.com"],
[href*="passtechusa.com"] { display: none !important; }</style></head>
<body class="bg-[--theme_color] text-white select-none" hx-ext="loading-states">
    <div data-loading="" class="fixed z-[55] top-0 left-0 sm:h-1 h-[1.5vw] shadow rounded-r-full bg-white/20 hidden" id="loading">
</div>

<style>
    #loading {
        animation: progress 4s linear infinite;
    }

    @keyframes progress {
        0% {
            width: 0%;
        }

        100% {
            width: 100%;
        }
    }
</style><header id="main_header" class="grid sm:-mb-4 -mb-[4vw]  sm:relative transition-all duration-300 sticky top-0 left-0 z-[161] border-white/5">
    <div class="grid sm:gap-10 gap-[4vw] w-full 2xl:max-w-[100rem] max-w-6xl mx-auto sm:p-4 p-[4vw]">
        <div class="flex  justify-between items-center">
            <div class="flex  sm:gap-4 gap-[4vw] items-center">
                                <a class="flex w-fit justify-center items-center h-11 aspect-square gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full" href="/">
                    <img class="w-6" src="https://api.iconify.design/mdi:arrow-left.svg?color=white">
                </a>
                                <a class="sm:block hidden sm:text-2xl text-[5.5vw] font-bold" href="/">
                    Writers' Scans                </a>
            </div>
            <a class="sm:hidden break-word text-[5.5vw] font-bold" href="/">
                Writers' Scans            </a>

            <div class="flex  sm:gap-4 gap-[4vw]">
                <div id="showPanelButton" alt="Search" title="Search" class="flex sm:pl-4 sm:w-fit w-11 justify-center items-center h-11 sm:px-5 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full">
                    <img class="w-6 ml-0.5" src="https://api.iconify.design/ph:magnifying-glass-bold.svg?color=white">
                    <div class="sm:block hidden font-medium">Search</div>
                </div>
                <div id="bottomHeader" class="flex z-[49]  justify-center sm:bg-transparent border-white/5 bg-[--header] sm:gap-4 gap-[4vw] sm:relative sm:w-auto fixed w-full bottom-0 left-0 sm:p-0 p-[4vw]">
                    <a href="/" class="sm:hidden flex sm:w-fit w-1/2 justify-center items-center h-11 sm:px-5 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full">
                        <img class="w-6" src="https://api.iconify.design/ph:house-simple-fill.svg?color=white">
                        <div class="sm:block hidden font-medium">Home</div>
                    </a>
                    <a href="/latest/" title="Latest" alt="Latest" class="flex sm:w-fit sm:aspect-square w-1/2 justify-center items-center h-11 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full">
                        <img class="w-6" src="https://api.iconify.design/mdi:calendar-badge-outline.svg?color=white">
                        <!-- <div class="sm:block hidden font-medium">Latest</div> -->
                    </a>
                    <a href="/series/" alt="Series" title="Series" class="flex  sm:w-fit w-1/2 justify-center items-center h-11 sm:px-5 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full">
                        <div class="w-6">
                            <img class="w-6" src="https://api.iconify.design/material-symbols:space-dashboard-rounded.svg?color=white">
                        </div>
                        <div class="sm:block hidden font-medium">Series</div>
                    </a>
                                                    <a href="/library/" alt="Library" title="Library" class="sm:px-5 flex  sm:w-fit w-1/2 justify-center items-center h-11 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden">
            <img class="w-6" src="https://api.iconify.design/fluent:library-28-filled.svg?color=white">
            <div class="sm:block hidden font-medium">Library</div>
        </a>
                        </div>
            </div>
        </div>
    </div>
</header>
<script>
(function() {
    let header = document.querySelector('header');
    let bottomHeader = header.querySelector('#bottomHeader');
    let header_background = true;
    if (window.innerWidth < 640) {
        bottomHeader.remove();
        bottomHeader.classList.add('border-t');
        document.body.appendChild(bottomHeader);
        if (!header_background) {
            header.classList.add('bg-[--header]');
        }
        document.addEventListener('scroll', function(event) {
            let scrollY = window.scrollY;
            if (header_background) {
                let opacity = Math.min(scrollY / 40, 1);
                let hexColor = getComputedStyle(document.documentElement).getPropertyValue('--theme_color')
                    .trim();
                let backgroundColor = hexColor + Math.floor(opacity * 255).toString(16).padStart(2, '0');
                let blurAmount = Math.min(scrollY / 5, 20);
                header.style.setProperty('background-color', backgroundColor);
                header.style.backdropFilter = `blur(${blurAmount}px)`;
            }
            if (scrollY > 40) {
                header.classList.add('border-b');
            } else {
                header.classList.remove('border-b');
            }
        });
    }
})();
</script>
<div id="panel" class="w-full h-full fixed z-[161] top-0 left-0 hidden justify-center sm:items-center items-start sm:p-4">
    <div class="w-full h-full absolute bg-black/90 top-0 left-0">

    </div>
    <div id="panel_close" class="sm:p-4 flex justify-end absolute top-0 left-0 w-full h-full">
        <div class="sm:flex hidden w-fit justify-center items-center h-11 aspect-square gap-3 backdrop-blur bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full">
            <img class="w-6" src="https://api.iconify.design/mdi:close.svg?color=white">
        </div>
    </div>
    <div id="panel_block" class="relative w-full h-full sm:max-h-[31rem] 2xl:max-h-[32rem] 2xl:max-w-[64rem] max-w-[45rem] sm:border border-white/5 bg-[--theme_color] backdrop-blur overflow-hidden sm:rounded-xl flex flex-col justify-between">
        <div class="flex flex-col">
            <div>
                <form action="/series/" class="flex gap-4 backdrop-blur-xl h-[16vw] sm:h-12 sm:pt-4 sm:px-4 px-[4vw]">
                    <img class="w-7" src="https://api.iconify.design/ph:magnifying-glass-bold.svg?color=white">
                    <input id="searchInput" type="text" name="q" placeholder="Search Series" class="placeholder:font-light placeholder:text-white/40 text-lg w-full bg-transparent focus-within:outline-none">
                    <img id="panel_close" class="sm:hidden w-7" src="https://api.iconify.design/mdi:close.svg?color=white">
                </form>
            </div>
            <div id="searched_series" class="grid 2xl:grid-cols-4 sm:grid-cols-3 grid-cols-2 sm:gap-4 gap-[4vw] sm:p-4 sm:pt-4 p-[4vw] pt-0">
                                                                            <button id="641f2c8cc04" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm flex" alt="I Became the Patron of Villains" title="I Became the Patron of Villains 악당들의 후원자가 되었다" tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Comedy&quot;,&quot;Fantasy&quot;,&quot;Shounen&quot;,&quot;Villain&quot;,&quot;Video Game&quot;,&quot;Magic&quot;,&quot;Romance&quot;,&quot;Harem&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/641f2c8cc04/" alt="I Became the Patron of Villains" title="I Became the Patron of Villains" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/YWzLapr5sA5&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                            <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs">New</span>
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                        <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            english                        </span>
                                    </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/641f2c8cc04/" alt="I Became the Patron of Villains" title="I Became the Patron of Villains" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        I Became the Patron of Villains</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="641b8b812cc" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm flex" alt="Unstoppable Young Lady" title="Unstoppable Young Lady I Can’t Handle the Young Master" tags="[&quot;Manhwa&quot;,&quot;Shoujo&quot;,&quot;Romance&quot;,&quot;Comedy&quot;,&quot;School life&quot;,&quot;Slice of Life&quot;,&quot;Cooking&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/641b8b812cc/" alt="Unstoppable Young Lady" title="Unstoppable Young Lady" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/wdYSUfWWoB8&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                            <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs">New</span>
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                        <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            english                        </span>
                                    </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/641b8b812cc/" alt="Unstoppable Young Lady" title="Unstoppable Young Lady" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Unstoppable Young Lady</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=manhwa" alt="Manhwa" title="Manhwa" class="flex">
                                Manhwa,                            </a>
                                                    <a href="/series/?genre=shoujo" alt="Shoujo" title="Shoujo" class="flex">
                                Shoujo                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="64116117bfc" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm flex" alt="I Want to Be the Director's Husband" title="I Want to Be the Director's Husband 대표님의 남편이 되고 싶어" tags="[&quot;Romance&quot;,&quot;Slice of Life&quot;,&quot;Office Workers&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/64116117bfc/" alt="I Want to Be the Director's Husband" title="I Want to Be the Director's Husband" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/Wx5gfj0W72R&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                            <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs">New</span>
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                        <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            english                        </span>
                                    </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/64116117bfc/" alt="I Want to Be the Director's Husband" title="I Want to Be the Director's Husband" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        I Want to Be the Director's Husband</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=romance" alt="Romance" title="Romance" class="flex">
                                Romance,                            </a>
                                                    <a href="/series/?genre=slice of life" alt="Slice of Life" title="Slice of Life" class="flex">
                                Slice of Life                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="640f0469375" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm flex" alt="Everyone Hates Me" title="Everyone Hates Me  모두가 날 싫어한다" tags="[&quot;Romance&quot;,&quot;Fantasy&quot;,&quot;Grim Reaper&quot;,&quot;Drama&quot;,&quot;Comedy&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/640f0469375/" alt="Everyone Hates Me" title="Everyone Hates Me" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/31wgu0J8t8T&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                            <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs">New</span>
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                        <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            english                        </span>
                                    </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/640f0469375/" alt="Everyone Hates Me" title="Everyone Hates Me" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Everyone Hates Me</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=romance" alt="Romance" title="Romance" class="flex">
                                Romance,                            </a>
                                                    <a href="/series/?genre=fantasy" alt="Fantasy" title="Fantasy" class="flex">
                                Fantasy                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="640ecb8f2bb" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Classmate" title="Classmate 클래스메이트" tags="[&quot;Horror&quot;,&quot;Mystery&quot;,&quot;School Life&quot;,&quot;Supernatural&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/640ecb8f2bb/" alt="Classmate" title="Classmate" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/cnguoVxx6ul&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                            <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs">New</span>
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                        <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            english                        </span>
                                    </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/640ecb8f2bb/" alt="Classmate" title="Classmate" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Classmate</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=horror" alt="Horror" title="Horror" class="flex">
                                Horror,                            </a>
                                                    <a href="/series/?genre=mystery" alt="Mystery" title="Mystery" class="flex">
                                Mystery                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63fcf6d5fd7" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Genius Who Sees Through the World" title="The Genius Who Sees Through the World 천재, 세상을 읽다" tags="[&quot;Adventure&quot;,&quot; Drama&quot;,&quot;Psychological&quot;,&quot; Tragedy&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63fcf6d5fd7/" alt="The Genius Who Sees Through the World" title="The Genius Who Sees Through the World" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/RW49tYoM6Kv&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                            <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs">New</span>
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                        <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            english                        </span>
                                    </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63fcf6d5fd7/" alt="The Genius Who Sees Through the World" title="The Genius Who Sees Through the World" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Genius Who Sees Through the World</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure,                            </a>
                                                    <a href="/series/?genre= drama" alt=" Drama" title=" Drama" class="flex">
                                 Drama                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                                </div>
            <div id="no_results" class="h-full hidden justify-center items-center text-white/80 font-light">
                <p>No series found.</p>
            </div>
        </div>
        <button type="button" id="view_all_search" class="flex justify-center items-center pb-4">
            <div class="h-11 px-8 bg-blue-600 hover:bg-blue-500 transition-all flex justify-center items-center rounded-full">
                View all results
            </div>
        </button>
    </div>
</div>
<script>
    (function() {
        const panel = document.getElementById('panel');
        const panel_block = document.querySelector('#panel_block');
        const noResults = document.getElementById('no_results');
        const searchedSeries = document.getElementById('searched_series');
        const showPanelButtons = document.querySelectorAll('#showPanelButton');
        const searchInput = document.getElementById('searchInput');
        const panel_closeElements = document.querySelectorAll('#panel_close');
        const AllSeries = document.querySelector("#searched_series>a");
        const view_all_search = document.querySelector('#view_all_search');

        function funPanel(type) {
            if (type) {
                panel.classList.remove('hidden');
                panel.classList.add('flex'); // Show the panel
                document.body.classList.add('static'); // Add class to body
                searchInput.value = "";
                searchInput.focus();
                updateSearchResults();
            } else {
                panel.classList.add('hidden'); // Hide the panel on Escape key
                panel.classList.remove('flex'); // Show the panel
                document.body.classList.remove('static');
            }
        }
        for (const button of panel_closeElements) {
            button.addEventListener('click', function() {
                funPanel()
            });
        }
        for (showPanelButton of showPanelButtons) {
            showPanelButton.addEventListener('click', function() {
                funPanel(true)
            });
        }
        view_all_search.addEventListener('click', function() {
            const inputValue = searchInput.value.toLowerCase();
            location.href = '/series?q=' + inputValue;
        });
        document.addEventListener('keydown', function(event) {
            if (!panel.classList.contains('hidden')) {
                // Only run the event listener if the panel is not hidden
                if (event.key === 'Escape') {
                    funPanel()
                    console.log('Escape');
                } else if (event.key === 'ArrowUp') {
                    console.log('Up');
                } else if (event.key === 'ArrowDown') {
                    console.log('Down');
                } else if (event.key === 'Enter') {
                    console.log('Enter');
                }
            }
        });


        function updateSearchResults() {
            const inputValue = searchInput.value
                .toLowerCase(); // Convert the input value to lowercase for case-insensitive matching
            const anchorElements = document.querySelectorAll("#searched_series > button");
            let count = 0; // Initialize a count to keep track of the matched anchors

            // Check the window width
            const windowWidth = window.innerWidth;

            for (const anchor of anchorElements) {
                const title = anchor.getAttribute("title");
                if (inputValue === '' || (title && title.toLowerCase().includes(inputValue))) {
                    anchor.classList.remove('hidden');
                    anchor.classList.add('flex');
                    let listener = false;
                    count++;
                    if (windowWidth >= 1536) {
                        if (count > 4) {
                            listener = true
                        }
                    } else if (windowWidth < 640) {
                        if (count > 4) {
                            listener = true
                        }
                    } else {
                        if (count > 3) {
                            listener = true
                        }
                    }
                    if (listener) {
                        anchor.classList.add('hidden');
                        anchor.classList.remove('flex');
                    }
                } else {
                    anchor.classList.add('hidden');
                    anchor.classList.remove('flex');
                }
            }
            if (count === 0) {
                view_all_search.classList.add('hidden');
                panel_block.classList.add('grid');
                panel_block.classList.remove('flex');
                panel_block.classList.remove('flex-col');
                panel_block.classList.remove('justify-between');
                searchedSeries.classList.add('hidden');
                searchedSeries.classList.remove('grid');
                noResults.classList.remove('hidden');
                noResults.classList.add('flex');
            } else {
                view_all_search.classList.remove('hidden');
                panel_block.classList.add('flex');
                panel_block.classList.add('flex-col');
                panel_block.classList.add('justify-between');
                panel_block.classList.remove('grid');
                searchedSeries.classList.remove('hidden');
                searchedSeries.classList.add('grid');
                noResults.classList.add('hidden');
                noResults.classList.remove('flex');
            }
        }

        searchInput.addEventListener('input', updateSearchResults);

        updateSearchResults()
        funPanel()
    })();
</script>
    <div class="grid sm:gap-10 gap-[4vw] w-full 2xl:max-w-[100rem] max-w-6xl mx-auto sm:p-4 p-[4vw]">
                                <div class="layer_main bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/cnguoVxx6ul)">
</div>
<div class="layer_2 layer_main">

</div>
<div class="layer_1 layer_main">

</div>
<div class="flex xl:flex-row flex-col  w-full sm:gap-10 gap-[4vw] relative">
    <div class="flex flex-col justify-center items-center gap-4 h-fit">
        <div>
            <div class="rounded-lg md:w-[24rem] w-44 bg-[image:--photoURL] aspect-[0.75/1] bg-cover bg-center bg-white/10" style="--photoURL:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/cnguoVxx6ul&amp;w=384)">

            </div>
        </div>
        <div class="w-full grid gap-2">
            <div class="grid grid-cols-2 gap-2">
                    <a class="flex  justify-center items-center h-11 px-4 gap-3 bg-white/10 hover:bg-white/20 transition-all rounded-full" href="/chapter/640ecb8f2bb-640ece9aebc/" alt="Chapter 1: Encounter (1)" title="Chapter 1: Encounter (1)" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden">
        <img class="w-7 -mx-1" src="https://api.iconify.design/ic:round-play-arrow.svg?color=%23ffffff" alt="Start Reading">
        <span class="font-medium">
            Start Reading        </span>
    </a>
    <a class="flex  justify-center items-center h-11 px-4 gap-3 bg-white/10 hover:bg-white/20 transition-all rounded-full" href="/chapter/640ecb8f2bb-641b0bed7fb/" alt="Chapter 8: Class 3-1" title="Chapter 8: Class 3-1" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden">
        <img class="w-7 -mx-1" src="https://api.iconify.design/ic:round-play-arrow.svg?color=%23ffffff" alt="New Chapter">
        <span class="font-medium">
            New Chapter
        </span>
    </a>
            </div>
            <div class="flex sm:flex-row flex-col  sm:mt-0 mt-2  sm:gap-4 gap-[4vw]">
                <div class="flex  w-full sm:gap-2 gap-[2vw]">
            <div id="libraryButtonAdd" class="flex w-full justify-center items-center h-11 px-4 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full">
                <img class="w-7 -mx-1" src="https://api.iconify.design/material-symbols:add-rounded.svg?color=white" alt="Add to Library">
                <span class="font-medium">
                    Add to Library                </span>
            </div>
            <div id="libraryButtonRemove" class="hidden w-full justify-center items-center h-11 px-4 gap-3 bg-red-500/70 hover:bg-red-500 transition-all cursor-pointer rounded-full">
                <img class="w-7 -mx-1" src="https://api.iconify.design/material-symbols:close-rounded.svg?color=white" alt="remove from libaray">
                <span class="font-medium">
                    Remove from Library                </span>
            </div>
            <div class="sm:w-fit w-1/3 opacity-50 flex justify-center items-center h-11 sm:px-4 gap-3 bg-white/10 transition-all rounded-full">
                <img class="w-5" src="https://api.iconify.design/ic:round-notifications.svg?color=white" alt="bell icon">
            </div>
        </div>
    </div>
    <script>
        let series_uid = '640ecb8f2bb';
        let library = store.get('library');
        let libraryButtonAdd = document.querySelector('#libraryButtonAdd');
        let libraryButtonRemove = document.querySelector('#libraryButtonRemove');


        libraryButtonAdd.addEventListener('click', function() {
            store.set('library', {
                ...library,
                [series_uid]: true
            })
            toLibrary(true)
        })
        libraryButtonRemove.addEventListener('click', function() {
            let library = store.get('library');
            if (library) {
                delete library[series_uid]
                store.set('library', {
                    ...library
                })
                toLibrary(false)
            }
        })


        function toLibrary(type) {
            let firstElement = ((type ? libraryButtonAdd : libraryButtonRemove).classList);
            let secondElement = ((type ? libraryButtonRemove : libraryButtonAdd).classList);
            firstElement.add('hidden');
            firstElement.remove('flex');
            secondElement.remove('hidden');
            secondElement.add('flex');
        }

        if (library && library[series_uid]) {
            toLibrary(true)
        } else {
            toLibrary(false)
        }
    </script>

        </div>
    </div>
    <div class="grid sm:gap-4 gap-[4vw] w-full h-fit">
        <div class="flex md:flex-row flex-col justify-start items-center gap-6">
            <div class="flex gap-4 flex-col justify-between items-start h-full w-full">
                <div class="grid gap-4">
                    <h1 class="sm:text-4xl text-xl text-[length:10vw] font-black">
                        Classmate                    </h1>
                    <div class="flex flex-wrap gap-3 justify-start items-start">
                                                                        <a href="/series/?genre=horror" alt="Horror" title="Horror" class="leading-none h-8 px-3 flex justify-center items-center sm:gap-1.5 gap-[1.5vw] bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-lg">
                            <span>Horror</span>
                        </a>
                                                <a href="/series/?genre=mystery" alt="Mystery" title="Mystery" class="leading-none h-8 px-3 flex justify-center items-center sm:gap-1.5 gap-[1.5vw] bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-lg">
                            <span>Mystery</span>
                        </a>
                                                <a href="/series/?genre=school life" alt="School Life" title="School Life" class="leading-none h-8 px-3 flex justify-center items-center sm:gap-1.5 gap-[1.5vw] bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-lg">
                            <span>School Life</span>
                        </a>
                                                <a href="/series/?genre=supernatural" alt="Supernatural" title="Supernatural" class="leading-none h-8 px-3 flex justify-center items-center sm:gap-1.5 gap-[1.5vw] bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-lg">
                            <span>Supernatural</span>
                        </a>
                                                                    </div>
                    <div class="grid gap-2 h-fit">
                        <div class="font-medium">
                            Alternative titles
                        </div>
                        <div class="grid gap-2 h-fit">
                                                        <div class="grid flex-wrap gap-2 w-full mb-2 opacity-80">
                                                                                                <span class="text-md leading-none">클래스메이트</span>
                                                            </div>
                                                    </div>
                    </div>
                    <div class="w-full flex gap-3 flex-wrap">
                                                <div class="grid gap-2 h-fit">
                            <div class="font-medium flex gap-1 justify-start items-center">
                                <img src="https://api.iconify.design/material-symbols:edit-rounded.svg?color=white" class="h-auto">
                                <span>Author</span>
                            </div>
                            <div class="min-h-8 py-1 px-3 flex justify-center items-center bg-white/10 hover:bg-white/20 transition-all rounded-lg w-fit">
                                Sooriboo                            </div>
                        </div>
                                                                        <div class="grid gap-2 h-fit">
                            <div class="font-medium flex gap-1 justify-start items-center">
                                <img src="https://api.iconify.design/pepicons-pop:paint-pallet.svg?color=white" class="h-auto">
                                <span>Artist</span>
                            </div>
                            <div class="min-h-8 py-1 px-3 flex justify-center items-center bg-white/10 hover:bg-white/20 transition-all rounded-lg w-fit">
                                Sooriboo                            </div>
                        </div>
                                                                        <div class="grid gap-2 h-fit">
                            <div class="font-medium flex gap-1 justify-start items-center">
                                <img src="https://api.iconify.design/material-symbols:book-4-spark-rounded.svg?color=white" class="h-auto">
                                <span>Type</span>
                            </div>
                            <div class="min-h-8 py-1 px-3 flex justify-center items-center bg-white/10 hover:bg-white/20 transition-all rounded-lg w-fit uppercase">
                                manhwa                            </div>
                        </div>
                                                                        <div class="grid gap-2 h-fit">
                            <div class="font-medium flex gap-1.5 justify-start items-center">
                                <img src="https://api.iconify.design/pajamas:status-preparing-borderless.svg?color=white" class="h-auto">
                                <span>Status</span>
                            </div>
                            <div class="min-h-8 py-1 px-3 flex justify-center items-center bg-white/10 hover:bg-white/20 transition-all rounded-lg w-fit uppercase">
                                ongoing                            </div>
                        </div>
                                                <!-- <div class="grid gap-2 h-fit">
                            <div class="font-medium flex gap-1.5 justify-start items-center">
                                <img src="https://api.iconify.design/material-symbols:menu-book-rounded.svg?color=white"
                                    class="h-auto">
                                <span>Chapters</span>
                            </div>
                            <div
                                class="min-h-8 py-1 px-3 flex justify-center items-center bg-white/10 hover:bg-white/20 transition-all rounded-lg w-fit">
                                8                            </div>
                        </div> -->
                        <div class="grid gap-2 h-fit">
                            <div class="font-medium flex gap-1 justify-start items-center">
                                <img src="https://api.iconify.design/tabler:clock-up.svg?color=white" class="h-auto">
                                <span>Updated</span>
                            </div>
                            <div class="min-h-8 py-1 px-3 flex justify-center items-center bg-white/10 hover:bg-white/20 transition-all rounded-lg w-fit">
                                2025-10-21                            </div>
                        </div>
                        <div class="grid gap-2 h-fit">
                            <div class="font-medium flex gap-1 justify-start items-center">
                                <img src="https://api.iconify.design/tabler:clock-plus.svg?color=white" class="h-auto">
                                <span>Created</span>
                            </div>
                            <div class="min-h-8 py-1 px-3 flex justify-center items-center bg-white/10 hover:bg-white/20 transition-all rounded-lg w-fit">
                                2025-10-12                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="grid gap-2">
                        <div class="text-lg font-bold">
                Synopsis
            </div>
            <div class="grid">
                                <div class="overflow-hidden">
                    <p style="white-space: pre-wrap" class="p-4 bg-white/10 rounded-lg">"I'll be your friend."<br><br>A chilling ghost boy, Haesu Lee, visits the outcast, Eunha Joo. The moment she accepts this dangerous friendship, unexpected events unfold around Eunha...<br><br>Will this hand offered by her mysterious friend be salvation, or a curse?</p>
                </div>
                            </div>
        </div>
        <div class="grid w-full my-2">
            <div class="grid md:grid-cols-2 sm:gap-4 gap-2">
    <div class="sm:flex  hidden justify-between bg-gradient-to-b from-white/10 to-transparent gap-6 p-4 rounded-t-2xl overflow-hidden z-[1] col-span-full md:-mb-4">
    <div class="flex gap-4 justify-center items-center ">
        <div class="h-full w-1 rounded-lg bg-white/20">

        </div>
        <div class="grid ">
            <div class="font-medium truncate">Share Writers' Scans</div>
            <div class="text-sm truncate">to your friends</div>
        </div>
    </div>
    <div class="sharethis-inline-share-buttons st-left st-has-labels st-hidden st-inline-share-buttons" id="st-1"><div class="st-total st-hidden">
  <span class="st-label"></span>
  <span class="st-shares">
    Shares
  </span>
</div><div class="st-btn st-first st-last" data-network="sharethis">
  <img alt="sharethis sharing button" src="https://platform-cdn.sharethis.com/img/sharethis.svg">
  <span class="st-label">Share</span>
</div></div>
</div>
<style>
    #st-1 .st-total {
        color: white !important;
    }

    #st-1.st-hidden {
        opacity: 100 !important;
    }
</style>
<script type="text/javascript" src="https://platform-api.sharethis.com/js/sharethis.js#property=65dc466cf44fb1001a4c6a85&amp;product=inline-share-buttons&amp;source=platform" async="async"></script>    <!-- Report Section -->
        <!-- Social Section -->
        <div class="flex  justify-between gap-6 bg-white/10 p-4 rounded-2xl">
        <div class="flex gap-4  justify-center items-center">
            <div class="h-full w-1 rounded-lg bg-white/20">

            </div>
            <div class="grid ">
                <div class="font-medium truncate">Join Our Socials</div>
                <div class="text-sm truncate">to explore more</div>
            </div>
        </div>
        <a href="discord.gg/MSp4CrVk7U" target="_blank" alt="Discord" title="Discord" class="h-10 gap-2 px-6 bg-[#5865F2] hover:bg-opacity-80 flex justify-center items-center rounded-full">
            <div class="w-6">
                <img src="https://api.iconify.design/cbi:discord.svg?color=%23ffffff" class="w-6" alt="discord">
            </div>
            <div class="font-medium">Discord</div>
        </a>
    </div>
        <!-- Donation Section -->
        <div class="flex  justify-between gap-6 bg-white/10 p-4 rounded-2xl relative overflow-hidden ">
        <img src="/assets/images/senkoheart.png" class="h-full w-auto absolute top-0 left-0 [transform:scaleX(-1)]">
        <div class="flex ml-[4.5rem] gap-4 justify-center items-center relative">
            <div class="hidden h-full w-1 rounded-lg bg-white/20">

            </div>
            <div class="grid ">
                <div class="font-medium truncate">Donate Us</div>
                <div class="text-sm truncate">to support us</div>
            </div>
        </div>
        <div class="flex gap-2 relative">
                                                            <a href="https://ko-fi.com/writersscans" target="_blank" alt="Ko-Fi" title="Ko-Fi" class="h-10 gap-2 px-6 bg-blue-400 hover:bg-opacity-80 flex justify-center items-center rounded-full">
                <div class="w-7">
                    <img src="https://api.iconify.design/cib:ko-fi.svg?color=%23ffffff" class="w-7">
                </div>
                <div class="whitespace-nowrap font-medium">Ko-Fi</div>
            </a>
                                                <a href="https://www.patreon.com/writersscans" target="_blank" alt="Patreon" title="Patreon" class="h-10 aspect-[1/1] gap-2 bg-black hover:bg-opacity-80 flex justify-center items-center rounded-full">
                <div class="w-5">
                    <img src="https://api.iconify.design/fa6-brands:patreon.svg?color=%23ffffff" class="w-5">
                </div>
            </a>
                                </div>
    </div>
    </div>
        </div>
        <div class="lg:flex gap-4 lg:justify-start lg:items-start">
            <div class="w-full">
                <div class="grid gap-4">
                    <div class="gap-4 grid">
                        <div class="flex gap-4 justify-start items-center">
                            <form method="get" class="flex px-4 w-full justify-center items-center h-11 gap-3 bg-white/10 transition-all rounded-full">
                                <img class="w-6" src="https://api.iconify.design/ph:magnifying-glass-bold.svg?color=white">
                                <input type="text" id="chapter_search" name="q" placeholder="Search chapter by number." class="placeholder:font-light placeholder:text-white/50 text-base w-full bg-transparent focus-within:outline-none">
                            </form>
                            <div class="flex justify-center items-center bg-white/10 hover:bg-white/20 transition-all rounded-full h-full aspect-square">
                                <div class="cursor-pointer group" id="sort">
                                    <img class="w-6 not-sorted transition-all" src="https://api.iconify.design/bi:sort-numeric-down-alt.svg?color=white" alt="">
                                </div>
                            </div>
                            <script>
                            (function() {
                                let element = document.querySelector('#sort');

                                element.addEventListener('click', function(event) {
                                    element = event.target.classList;
                                    if (element.contains('not-sorted')) {
                                        element.add('sorted');
                                        element.remove('not-sorted');
                                        event.target.setAttribute('src',
                                            'https://api.iconify.design/bi:sort-numeric-up.svg?color=white'
                                        )
                                    } else {
                                        element.remove('sorted');
                                        element.add('not-sorted');
                                        event.target.setAttribute('src',
                                            'https://api.iconify.design/bi:sort-numeric-down-alt.svg?color=white'
                                        )

                                    }
                                    let chapter = document.querySelector('#chapters');
                                    let arr = Array.from(chapter.childNodes);
                                    arr.reverse();
                                    chapter.append(...arr);
                                });
                            })();
                            </script>
                        </div>
                    </div>
                                        <div class="grid relative overflow-hidden min-h-[20rem]">
                                                <div id="chapters_panel" class="grid h-fit">
                            <div id="chapters" class="grid 2xl:grid-cols-6 lg:grid-cols-5 sm:grid-cols-4 grid-cols-2 sm:gap-4 gap-[3vw]">
                                                                                                <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/640ecb8f2bb-641b0bed7fb/" alt="Chapter 8: Class 3-1" title="Chapter 8: Class 3-1" p="mD9H1S6G_FN" d="5 days ago" c="1">
    <div class="grid sm:gap-2 gap-[2vw]">
                <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
            <div class="aspect-[2/1.5] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/mD9H1S6G_FN&amp;w=150)">

            </div>

                    </div>
                <div class="grid h-fit px-1">
                        <span class="flex  gap-1 justify-start items-center overflow-hidden">
                <span class="text-sm truncate">
                    Chapter 8: Class 3-1                </span>
                            </span>
            <div class="flex justify-start gap-1.5">
                <div class="text-xs text-white/50 w-fit">
                    5 days ago                </div>
            </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/640ecb8f2bb-640eceb94c6/" alt="Chapter 7: The First (2)" title="Chapter 7: The First (2)" p="O4PoqdNLiCk" d="Oct 12, 2025" c="1">
    <div class="grid sm:gap-2 gap-[2vw]">
                <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
            <div class="aspect-[2/1.5] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/O4PoqdNLiCk&amp;w=150)">

            </div>

                    </div>
                <div class="grid h-fit px-1">
                        <span class="flex  gap-1 justify-start items-center overflow-hidden">
                <span class="text-sm truncate">
                    Chapter 7: The First (2)                </span>
                            </span>
            <div class="flex justify-start gap-1.5">
                <div class="text-xs text-white/50 w-fit">
                    Oct 12, 2025                </div>
            </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/640ecb8f2bb-640eceb4c73/" alt="Chapter 6: The First (1)" title="Chapter 6: The First (1)" p="8ldOsWTG73a" d="Oct 12, 2025" c="1">
    <div class="grid sm:gap-2 gap-[2vw]">
                <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
            <div class="aspect-[2/1.5] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/8ldOsWTG73a&amp;w=150)">

            </div>

                    </div>
                <div class="grid h-fit px-1">
                        <span class="flex  gap-1 justify-start items-center overflow-hidden">
                <span class="text-sm truncate">
                    Chapter 6: The First (1)                </span>
                            </span>
            <div class="flex justify-start gap-1.5">
                <div class="text-xs text-white/50 w-fit">
                    Oct 12, 2025                </div>
            </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/640ecb8f2bb-640eceb1d8b/" alt="Chapter 5: My Own Friend (2)" title="Chapter 5: My Own Friend (2)" p="sic0-WtTRpj" d="Oct 12, 2025" c="1">
    <div class="grid sm:gap-2 gap-[2vw]">
                <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
            <div class="aspect-[2/1.5] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/sic0-WtTRpj&amp;w=150)">

            </div>

                    </div>
                <div class="grid h-fit px-1">
                        <span class="flex  gap-1 justify-start items-center overflow-hidden">
                <span class="text-sm truncate">
                    Chapter 5: My Own Friend (2)                </span>
                            </span>
            <div class="flex justify-start gap-1.5">
                <div class="text-xs text-white/50 w-fit">
                    Oct 12, 2025                </div>
            </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/640ecb8f2bb-640eceaa963/" alt="Chapter 4: My Own Friend (1)" title="Chapter 4: My Own Friend (1)" p="BB870kdTsa_" d="Oct 12, 2025" c="1">
    <div class="grid sm:gap-2 gap-[2vw]">
                <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
            <div class="aspect-[2/1.5] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/BB870kdTsa_&amp;w=150)">

            </div>

                    </div>
                <div class="grid h-fit px-1">
                        <span class="flex  gap-1 justify-start items-center overflow-hidden">
                <span class="text-sm truncate">
                    Chapter 4: My Own Friend (1)                </span>
                            </span>
            <div class="flex justify-start gap-1.5">
                <div class="text-xs text-white/50 w-fit">
                    Oct 12, 2025                </div>
            </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/640ecb8f2bb-640ecea3a38/" alt="Chapter 3: The Proposal" title="Chapter 3: The Proposal" p="cIrwUqt9WTe" d="Oct 12, 2025" c="1">
    <div class="grid sm:gap-2 gap-[2vw]">
                <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
            <div class="aspect-[2/1.5] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/cIrwUqt9WTe&amp;w=150)">

            </div>

                    </div>
                <div class="grid h-fit px-1">
                        <span class="flex  gap-1 justify-start items-center overflow-hidden">
                <span class="text-sm truncate">
                    Chapter 3: The Proposal                </span>
                            </span>
            <div class="flex justify-start gap-1.5">
                <div class="text-xs text-white/50 w-fit">
                    Oct 12, 2025                </div>
            </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/640ecb8f2bb-640ecea07e6/" alt="Chapter 2: Encounter (2)" title="Chapter 2: Encounter (2)" p="n60PSklsHD_" d="Oct 12, 2025" c="1">
    <div class="grid sm:gap-2 gap-[2vw]">
                <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
            <div class="aspect-[2/1.5] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/n60PSklsHD_&amp;w=150)">

            </div>

                    </div>
                <div class="grid h-fit px-1">
                        <span class="flex  gap-1 justify-start items-center overflow-hidden">
                <span class="text-sm truncate">
                    Chapter 2: Encounter (2)                </span>
                            </span>
            <div class="flex justify-start gap-1.5">
                <div class="text-xs text-white/50 w-fit">
                    Oct 12, 2025                </div>
            </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/640ecb8f2bb-640ece9aebc/" alt="Chapter 1: Encounter (1)" title="Chapter 1: Encounter (1)" p="kbo16lg7CEg" d="Oct 12, 2025" c="1">
    <div class="grid sm:gap-2 gap-[2vw]">
                <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
            <div class="aspect-[2/1.5] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/kbo16lg7CEg&amp;w=150)">

            </div>

                    </div>
                <div class="grid h-fit px-1">
                        <span class="flex  gap-1 justify-start items-center overflow-hidden">
                <span class="text-sm truncate">
                    Chapter 1: Encounter (1)                </span>
                            </span>
            <div class="flex justify-start gap-1.5">
                <div class="text-xs text-white/50 w-fit">
                    Oct 12, 2025                </div>
            </div>
                    </div>
    </div>
    </a>                                                                                            </div>
                        </div>
                        <script>
                        (function() {
                            let chapters_input = document.getElementById('chapter_search');
                            chapters_input.addEventListener('input', (event) => {
                                let value = event.target.value
                                runSet(value)
                            })

                            function runSet(value = '') {

                                let items = document.querySelectorAll('#chapters>a');
                                let view = false;
                                for (item of items) {
                                    let text = item.getAttribute('alt');
                                    let search = value.length > 0 ? (text.toLowerCase()).includes(value
                                        .toLowerCase()) : true;
                                    if (search) {
                                        item.classList.add('flex');
                                        item.classList.remove('hidden');
                                        view = true;
                                    } else {
                                        item.classList.add('hidden');
                                        item.classList.remove('flex');
                                    }
                                }
                                console.log({
                                    view
                                })
                            }
                        })();
                        </script>
                                                                        <script>
                        (function() {
                            let chapters_panel = document.getElementById('chapters_panel');
                            chapters_panel.classList.remove('containerz');
                            chapters_panel.classList.remove('overflow-hidden');
                            chapters_panel.classList.remove('max-h-[20rem]');
                        })();
                        </script>
                                                                                            </div>
                </div>
            </div>
        </div>
                    <div class="grid sm:rounded-xl sm:mx-0 -mx-[4vw] sm:w-full w-[calc(100%+8vw)] overflow-hidden">
        <div id="iframe-container"><iframe id="resizing-iframe" src="https://zmio.org/post?color=03000a&amp;host=writerscans.com&amp;path=/series/640ecb8f2bb/" scrolling="no" style="width: 100%; border: none; overflow: hidden; display: block; height: 272px;"></iframe></div>
    </div>
    <script>
        const allowedOrigin = "https://zmio.org";
        const baseSrc =
            "https://zmio.org/post?color=03000a&host=writerscans.com&path=/series/640ecb8f2bb/";

        // Track if iframe was initially made without token
        let iframeCreatedWithoutToken = false;

        function createIframe(token) {
            // Remove old iframe if exists
            const existing = document.getElementById("resizing-iframe");
            if (existing) {
                existing.remove();
            }

            const iframe = document.createElement("iframe");
            iframe.id = "resizing-iframe";

            const url = new URL(baseSrc);
            if (token) {
                url.searchParams.set("token", token);
            }

            iframe.src = url.toString();
            iframe.style.width = "100%";
            iframe.style.border = "none";
            iframe.style.overflow = "hidden";
            iframe.style.display = "none";
            iframe.setAttribute("scrolling", "no");

            document.getElementById("iframe-container").appendChild(iframe);

            iframe.addEventListener("load", () => {
                iframe.style.display = "block";
                if (token) {
                    iframe.contentWindow.postMessage({
                            type: "auth-token",
                            token
                        },
                        allowedOrigin
                    );
                }
            });

            // Update flag
            iframeCreatedWithoutToken = !token;
        }

        // Always listen for messages
        window.addEventListener("message", (event) => {
            if (event.origin !== allowedOrigin) return;

            const data = event.data;

            if (data.type === "resize-iframe") {
                const iframe = document.getElementById("resizing-iframe");
                if (iframe) {
                    iframe.style.height = data.height + "px";
                }
            }

            if (data.type === "auth-token" && data.token) {
                localStorage.setItem("zimo-auth-token", data.token);

                // Recreate iframe only if it was created earlier without a token
                if (iframeCreatedWithoutToken) {
                    createIframe(data.token);
                }
            }
        });

        // On load: check if token exists
        const token = localStorage.getItem("zimo-auth-token");
        createIframe(token); // If token is null, it'll set the flag to recreate later
    </script>
        <style>
        .layer_main {
            position: absolute;
            top: 0px;
            left: 0px;
            margin-left: -2.5rem;
            width: calc(100% + 2.5rem);
            height: 960px;
        }

        .layer_2 {
            height: 960px;
            background: var(--layer, rgba(0, 0, 0, .6));
        }

        .layer_1 {
            background: linear-gradient(rgba(0, 0, 0, 0.35) 30%, rgba(0, 0, 0, 0.4) 50%, var(--theme_color) 100%);
            -webkit-backdrop-filter: blur(36px);
            backdrop-filter: blur(36px);
        }
        </style>
    </div>
</div>    </div>
    <!-- sm:left-[calc(50%-15rem)] -->
    
<footer class="sm:mb-0 mb-20 bg-gradient-to-t from-[--footer] to-transparent sm:mt-12 sm:h-fit">
    <div class="grid w-full 2xl:max-w-[100rem] max-w-6xl mx-auto sm:px-4 sm:py-10 px-[6vw] py-[6vw] h-full">
        <div class="grid sm:gap-10 gap-[4vw]">
            <div class="grid gap-8">
                <div class="flex flex-col justify-center items-center gap-4">
                    <a style="background-image: url(https://wsrv.nl/?url=cdn.meowing.org/uploads/9fo4CQEukhQ&amp;w=100);" class="flex w-fit justify-center items-center h-16 aspect-square gap-3 bg-center bg-cover bg-no-repeat rounded-full" href="/">

                    </a>
                    <div class="flex flex-col justify-center items-center gap-2 w-full">
                        <a class="block w-fit font-semibold text-2xl" href="/">
                            Writers' Scans                        </a>
                                                <div class="w-full sm:max-w-[50%] text-center">
                            Hello, we’re Writers’ scans, a non profit team that tries to bring you the best series with top-notch quality! We value honesty and integrity and therefore will always present to you our latest chapters as soon as we can! Please support us on Ko-fi and Patreon if possible and join us on discord for updates and progress on your favorite series!!!
With love~<br>-Writers’ scans                        </div>
                                            </div>
                </div>
                <div class="flex flex-wrap gap-3 justify-center items-center">
                                                            <a href="discord.gg/MSp4CrVk7U" target="_blank" alt="Discord" title="Discord" class="bg-white/10 hover:bg-white/15 transition-all rounded-lg h-11 w-11 flex flex-col justify-center items-center">
                        <img src="https://api.iconify.design/fa6-brands:discord.svg?color=white" class="h-6">
                    </a>
                                                                                <a href="https://ko-fi.com/writersscans" target="_blank" alt="Ko-Fi" title="Ko-Fi" class="bg-white/10 hover:bg-white/15 transition-all rounded-lg h-11 w-11 flex flex-col justify-center items-center">
                        <img src="https://api.iconify.design/cib:ko-fi.svg?color=white" class="h-6">
                    </a>
                                                                                <a href="https://www.patreon.com/writersscans" target="_blank" alt="Patreon" title="Patreon" class="bg-white/10 hover:bg-white/15 transition-all rounded-lg h-11 w-11 flex flex-col justify-center items-center">
                        <img src="https://api.iconify.design/fa6-brands:patreon.svg?color=white" class="h-6">
                    </a>
                                                            <a href="/dmca" target="_blank" alt="DMCA" title="DMCA" class="bg-white/10 hover:bg-white/15 transition-all rounded-lg h-11 w-11 flex flex-col justify-center items-center">
                        <span class="font-bold text-xs">DMCA</span>
                    </a>
                </div>
                                                <!-- <div class="flex gap-4 justify-center items-center flex-wrap">
                                                    <a href="discord.gg/MSp4CrVk7U" target="_blank" class="font-semibold text-xl hover:text-blue-500"
                                alt="Discord">Discord</a>
                            -                                                    <a href="https://ko-fi.com/writersscans" target="_blank" class="font-semibold text-xl hover:text-blue-500"
                                alt="Ko-Fi">Ko-Fi</a>
                            -                                                    <a href="https://www.patreon.com/writersscans" target="_blank" class="font-semibold text-xl hover:text-blue-500"
                                alt="Patreon">Patreon</a>
                                                                        </div> -->
                                <!-- <div class="text-center flex flex-col justify-center items-center">
                    <span>This theme is designed by ----</span>
                    <span>Sooo unique that everyone wants to copy. 😉</span>
                </div> -->
            </div>
        </div>
    </div>
</footer>
<script>
(() => {
    let open_login_panel_button = document.querySelectorAll('#open_login_panel_button');

    let close_login_panel_button = document.getElementById('close_login_panel_button');
    let login_panel_main = document.getElementById('login_panel_main');
    let login_panel_background = document.getElementById('login_panel_background');
    let login_panel = document.getElementById('login_panel');
    runEl({
        show: {
            element: login_panel,
            function: () => {}
        },
        ignore: {
            elements: [...(Array.from(open_login_panel_button) ?? []), ...[
                close_login_panel_button,
                login_panel_background
            ]],
            function: async (data) => {
                data.preventDefault();
                login_panel_main.classList.toggle('flex');
                login_panel_main.classList.toggle('hidden');
                // Ignored elements function
            }
        }
    });
})();
</script>
<script src="https://www.hCaptcha.com/1/api.js" async="" defer=""></script>
<div id="main-report-element" class="w-full h-full fixed bg-black/40 top-0 left-0 z-[200] hidden justify-center items-center p-4">
    <div class="w-full h-full absolute top-0 left-0 overflow-hidden bg-[--theme_color] opacity-90" id="reportButton">

    </div>
    <div class="w-full max-w-[30rem] h-fit bg-[--theme_color] rounded-2xl relative">

        <!-- Loading Indicator -->
        <div id="report-loader" class="w-full h-full hidden flex justify-center items-center absolute top-0 left-0 z-10 border bg-[--theme_color] border-white/10 rounded-2xl">
            <img class="w-11 animate-spin" src="https://api.iconify.design/mingcute:loading-line.svg?color=white">
        </div>
        <!-- Success Indicator -->
        <div id="report-success" class="w-full h-full hidden flex flex gap-4 justify-center items-center absolute top-0 left-0 z-10 border bg-[--theme_color] border-white/10 rounded-2xl">
            <img class="w-11" src="https://api.iconify.design/material-symbols:check-circle-rounded.svg?color=white" alt="Success">
            <div>
                Report submitted!
            </div>
        </div>

        <div class="w-full h-fit p-6 border-white/10 border rounded-2xl grid">
            <div class="grid gap-3">
                <div class="w-full flex justify-between items-center mb-2">
                    <!-- Modal Title -->
                    <div class="text-white/90 font-bold text-2xl">
                        Report
                    </div>
                    <!-- Close Button -->
                    <button id="reportButton" class="flex w-fit aspect-square justify-center items-center h-11 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full">
                        <img class="w-6" src="https://api.iconify.design/material-symbols:close-rounded.svg?color=white">
                    </button>
                </div>

                <form class="grid gap-4" id="reportForm">
                    <div class="relative grid gap-2">
                        <label for="reportOption" class="flex items-center gap-2">
                            <img src="https://api.iconify.design/mdi:dots-vertical-circle.svg?color=white" alt="Icon" width="20" height="20">
                            Choose an option.
                        </label>
                        <div class="custom-select w-full bg-white/10 rounded-xl relative">
                            <div id="selectedOption" class="text-white cursor-pointer py-2 px-3 flex items-center gap-2">
                                <span class="flex gap-1"><span class="sm:hidden">Tap</span><span class="sm:block hidden">Click</span> to view options</span>
                            </div>
                            <div id="optionsList" class="options-list bg-[--theme_color] rounded-xl absolute w-full hidden mt-1 z-10 overflow-hidden">
                            <div class="option-item text-white py-2 px-3 cursor-pointer hover:bg-white/20 bg-white/10" data-value="1">Chapter Missing</div><div class="option-item text-white py-2 px-3 cursor-pointer hover:bg-white/20 bg-white/10" data-value="2">Suggestion</div><div class="option-item text-white py-2 px-3 cursor-pointer hover:bg-white/20 bg-white/10" data-value="3">Feedback</div><div class="option-item text-white py-2 px-3 cursor-pointer hover:bg-white/20 bg-white/10" data-value="4">Correction</div><div class="option-item text-white py-2 px-3 cursor-pointer hover:bg-white/20 bg-white/10" data-value="5">Other</div></div>
                        </div>
                        <p id="error-message" class="text-red-500 text-sm hidden mt-1">Please select an option.</p>
                    </div>

                    <div class="grid gap-2">
                        <label for="reportText" class="flex items-center gap-2">
                            <img src="https://api.iconify.design/material-symbols:edit-note.svg?color=white" alt="Icon" width="20" height="20">
                            Enter your report.
                        </label>
                        <textarea id="reportText" name="message" rows="4" class="w-full p-2 bg-white/10 rounded-xl" minlength="1" maxlength="200" required=""></textarea>
                    </div>

                    <div class="grid gap-2">
                        <label for="reportText" class="flex items-center gap-2">
                            <img src="https://api.iconify.design/logos:hcaptcha-icon.svg" alt="Icon" width="20" height="20">
                            Solve captcha.
                        </label>
                        <div class="grid gap-1">
                            <div class="h-captcha" data-sitekey="a9226c58-b3d8-4f9e-82d4-d92644dc8584"><iframe src="https://newassets.hcaptcha.com/captcha/v1/4948b4d6847921d7bf0b86388c141311d7f03e2e/static/hcaptcha.html#frame=checkbox&amp;id=0x4offc6o2u&amp;host=writerscans.com&amp;sentry=true&amp;reportapi=https%3A%2F%2Faccounts.hcaptcha.com&amp;recaptchacompat=true&amp;custom=false&amp;hl=de&amp;tplinks=on&amp;andint=off&amp;pstissuer=https%3A%2F%2Fpst-issuer.hcaptcha.com&amp;sitekey=a9226c58-b3d8-4f9e-82d4-d92644dc8584&amp;theme=light&amp;origin=https%3A%2F%2Fwriterscans.com" tabindex="0" frameborder="0" scrolling="no" allow="private-state-token-redemption" title="Widget mit Kontrollkästchen für die hCaptcha-Sicherheitsabfrage" data-hcaptcha-widget-id="0x4offc6o2u" data-hcaptcha-response="" style="pointer-events: auto; background-color: rgba(255, 255, 255, 0); border-radius: 4px; width: 302px; height: 76px; overflow: hidden;"></iframe><textarea id="g-recaptcha-response-0x4offc6o2u" name="g-recaptcha-response" style="display: none;"></textarea><textarea id="h-captcha-response-0x4offc6o2u" name="h-captcha-response" style="display: none;"></textarea></div>
                            <p id="captcha-error-message" class="text-red-500 text-sm hidden mt-1">Please complete the
                                captcha.</p>
                        </div>
                    </div>

                    <div class="text-center">
                        <button type="submit" class="bg-white/10 text-white px-6 h-11 rounded-full">
                            Submit Report
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<script>
    (() => {
        function report_view() {

            const reportElement = document.getElementById("main-report-element");
            const reportLoader = document.getElementById("report-loader");
            const reportText = document.getElementById("reportText");
            const selectedOption = document.getElementById("selectedOption");
            const errorMessage = document.getElementById("error-message");
            if (!reportLoader.classList.contains("hidden")) {
                return;
            }

            reportText.value = "";
            selectedOption.textContent = "Click to view options";
            errorMessage.classList.add("hidden");

            if (reportElement.classList.contains("hidden")) {
                reportElement.classList.add("flex");
                reportElement.classList.remove("hidden");
                reportElement.classList.add("transition-opacity", "opacity-0");
                setTimeout(() => {
                    reportElement.classList.remove("opacity-0");
                    reportElement.classList.add("opacity-100");
                }, 10);
            } else {
                reportElement.classList.remove("opacity-100");
                reportElement.classList.add("opacity-0");
                setTimeout(() => {
                    reportElement.classList.add("hidden");
                    reportElement.classList.remove("flex");
                }, 200);
            }
        }
                const optionsList = [{"value":1,"label":"Chapter Missing"},{"value":2,"label":"Suggestion"},{"value":3,"label":"Feedback"},{"value":4,"label":"Correction"},{"value":5,"label":"Other"}];

        const optionsListContainer = document.getElementById('optionsList');
        const selectedOption = document.getElementById('selectedOption');
        const errorMessage = document.getElementById('error-message');
        const captchaErrorMessage = document.getElementById('captcha-error-message');
        const reportText = document.getElementById('reportText');
        const submitButton = document.querySelector('button[type="submit"]');
        const selectContainer = document.querySelector('.custom-select');
        const reportLoader = document.getElementById('report-loader');
        const form = document.getElementById('reportForm');

        const report_view_buttons = document.querySelectorAll('.report_view_button');

        for (let button of report_view_buttons) {
            button.addEventListener('click', () => {
                console.log(true);
            });
        }



        let selectedValue = null;

        optionsList.forEach(option => {
            const optionElement = document.createElement('div');
            optionElement.classList.add('option-item', 'text-white', 'py-2', 'px-3', 'cursor-pointer',
                'hover:bg-white/20', 'bg-white/10');
            optionElement.setAttribute('data-value', option.value);
            optionElement.textContent = option.label;
            optionsListContainer.appendChild(optionElement);
        });

        selectedOption.addEventListener('click', () => {
            optionsListContainer.classList.toggle('hidden');
        });

        optionsListContainer.addEventListener('click', (e) => {
            if (e.target && e.target.classList.contains('option-item')) {
                const allOptions = optionsListContainer.querySelectorAll('.option-item');
                allOptions.forEach(opt => {
                    opt.classList.remove('bg-red-500');
                });

                e.target.classList.add('bg-red-500');

                selectedValue = e.target.getAttribute('data-value');
                const selectedLabel = e.target.textContent;
                selectedOption.textContent = selectedLabel;

                optionsListContainer.classList.add('hidden');
                errorMessage.classList.add('hidden');
            }
        });

        form.addEventListener('submit', async (e) => {
            e.preventDefault();

            if (!selectedValue) {
                errorMessage.classList.remove('hidden');
            } else if (!hcaptcha.getResponse()) {
                captchaErrorMessage.classList.remove('hidden');
            } else {
                captchaErrorMessage.classList.add('hidden');

                // Show loader and disable inputs
                reportLoader.classList.remove('hidden');
                reportText.disabled = true;
                submitButton.disabled = true;
                selectContainer.disabled = true;
                optionsListContainer.classList.add('disabled');
                selectedOption.classList.add('disabled');

                const message = reportText.value;
                let data = {
                    message,
                    type: selectedValue,
                    captcha: hcaptcha.getResponse(),
                    ...{"series_uid":"640ecb8f2bb"}                };
                const params = new URLSearchParams(data).toString();
                const url = `/report?${params}`;

                try {
                    let {
                        success,
                        message: error_message
                    } = await fetch(url).then(response => response.json());
                    if (success) {
                        reportLoader.classList.add('hidden');

                        const reportSuccess = document.getElementById('report-success');
                        reportSuccess.classList.remove('hidden');

                        setTimeout(() => {
                            report_view();
                        }, 1000);
                    } else {
                        alert(error_message);
                        setTimeout(() => {
                            report_view();
                        }, 2000);
                    }
                } catch (error) {
                    alert(
                        'An error occurred while submitting the report, reload the page and try again.'
                    );
                    setTimeout(() => {
                        report_view();
                    }, 2000);
                } finally {
                    reportLoader.classList.add('hidden');
                }
            }
        });

        document.getElementById('reportButton')?.addEventListener('click', () => {
            report_view()
        });
    })();
</script>    <div id="cards_show" class="hidden justify-center items-center w-full h-full fixed top-0 left-0 z-[162] overflow-hidden opacity-0 transition-all duration-[250] ">
    <div id="cards_show_bg" class="absolute top-0 left-0 w-full h-full bg-[--theme_color] opacity-90">

    </div>
    <div id="cards_show_main" class="w-full h-full max-w-sm max-h-96 bg-[--theme_color] relative rounded-2xl">
                    <div class="flex flex-col justify-between items-start w-full h-full border border-white/10 rounded-2xl">
                                    <div class="w-full h-full flex flex-col gap-4 p-8 justify-center items-center">
                        <div class="w-full text-center">
                            You don't have any cards yet. <br> To purchase a chapter, purchase a card first.                        </div>
                        <button id="card_note_button" onclick="card_note_open()" class="px-5 flex w-fit justify-center items-center h-11 gap-3 bg-blue-600 hover:bg-blue-500 transition-all cursor-pointer rounded-full">
                            <img class="w-6" src="https://api.iconify.design/mdi:card-plus.svg?color=white">
                            <div class="font-medium">Purchase Card</div>
                        </button>
                    </div>
                                <div class="grid gap-3 h-fit w-full p-4 border-t border-white/10">
                    <div class="w-full">
                        <div class="flex gap-3 justify-start items-center">
                            <div id="main_card_chapter_cover" class="aspect-[2/1.5] h-11 bg-white/10 bg-cover bg-center rounded-xl">

                            </div>
                            <div class="grid">
                                <div class="flex gap-1 justify-start items-center">
                                    <span class="font-bold text-yellow-600" id="main_card_coins"></span>
                                    <span class="text-xs font-semibold">COINS</span>
                                </div>
                                <span class="text-xs"><span id="main_card_chapter_name"></span> - <span id="main_card_chapter_date"></span></span>
                            </div>
                        </div>
                    </div>
                                    </div>
            </div>
            </div>
</div>
<script>
    (async () => {
        let cards_show = document.querySelector('#cards_show');
        let cards_show_bg = document.querySelector('#cards_show_bg');
        let cards_show_main = document.querySelector('#cards_show_main');
        let paid_chapters = document.querySelectorAll("#paid-chapter");
        let cards = document.querySelectorAll("button#card");
        let purchase_button = document.querySelector('#purchase_button');

        let main_card_coins = document.querySelector('#main_card_coins');
        let main_card_chapter_cover = document.querySelector('#main_card_chapter_cover');
        let main_card_chapter_name = document.querySelector('#main_card_chapter_name');
        let main_card_chapter_date = document.querySelector('#main_card_chapter_date');

        await (async () => {
            if (cards) {
                for await (const card of cards) {
                    card.addEventListener('click', async (event) => {
                        const card_x = event.target.closest('[card_uid]');
                        await selectCard(card_x);
                        await setPurchase(card_x)
                    });
                }
            }
            if (purchase_button) {
                purchase_button.addEventListener('click', (event) => {
                    if (event.disabled) {} else {
                        let uid = purchase_button.getAttribute('card_uid');
                        let href = purchase_button.getAttribute('href');
                        if (href && uid) {
                            window.location = `${href}?card=${uid}`;
                        }
                    }
                });
            }
        })();

        async function setPurchase(card_x) {
            try {
                let uid = card_x.getAttribute('card_uid');
                let card_coins = Number(card_x.getAttribute('c')) ?? 0;
                let coins = Number(main_card_coins.textContent) ?? 1;
                if (purchase_button) {
                    if (card_coins >= coins) {
                        purchase_button.classList.add('hover:opacity-90');
                        purchase_button.classList.remove('opacity-50');
                        purchase_button.removeAttribute('disabled');
                        purchase_button.setAttribute('card_uid', uid);
                        return true;
                    } else {
                        purchase_button.classList.remove('hover:opacity-90');
                        purchase_button.classList.add('opacity-50');
                        purchase_button.setAttribute('disabled', 'true');
                        purchase_button.removeAttribute('card_uid');
                        return false;
                    }
                }
            } catch (error) {
                console.error(error);
            }
        }

        async function selectCard(card_x) {
            if (card_x) {
                let uid = card_x.getAttribute('card_uid');
                for await (const card_2 of cards) {
                    const card_uid = card_2.getAttribute('card_uid');
                    if (card_uid === uid) {
                        card_2.classList.add('ring-2');
                        card_2.classList.add('ring-offset-2');
                        card_2.classList.remove('ring-0');
                        card_2.classList.remove('ring-offset-0');
                    } else {
                        card_2.classList.add('ring-0');
                        card_2.classList.add('ring-offset-0');
                        card_2.classList.remove('ring-2');
                        card_2.classList.remove('ring-offset-2');
                    }
                }
                return uid;
            }
        }



        await runEl({
            ignore: {
                elements: [...(Array.from(paid_chapters) ?? []), ...[cards_show_bg]],
                function: async (data) => {
                    data.preventDefault();
                    let check = cards_show.classList.contains('flex');
                                            //-------------------------------------------//
                        let paid_chapter = data.target.closest('#paid-chapter');
                        if (paid_chapter && paid_chapter.getAttribute("id") === "paid-chapter") {
                            let displayName = paid_chapter.getAttribute('title');
                            let photoURL_string = paid_chapter.getAttribute('p');
                            let photoURL =
                                `https://i2.wp.com/cdn.meowing.org/uploads/${photoURL_string}?w=80`;
                            let createdAt = paid_chapter.getAttribute('d');
                            let href = paid_chapter.getAttribute('href');
                            let coins = Number(paid_chapter.getAttribute('c')) ?? 1;
                            main_card_coins.innerHTML = coins;
                            if (purchase_button && href) purchase_button.setAttribute('href', href);
                            if (String(photoURL_string).length === 0) {
                                main_card_chapter_cover.remove()
                            } else {
                                main_card_chapter_cover.style.backgroundImage = `url(${photoURL})`;
                            }
                            main_card_chapter_name.innerHTML = displayName;
                            main_card_chapter_date.innerHTML = createdAt;
                        }
                        //-------------------------------------------//
                                        if (check) {
                        setTimeout(() => {
                            cards_show.classList.toggle('opacity-0')
                            cards_show.classList.toggle('opacity-100')
                        }, 50)
                        setTimeout(() => {
                            cards_show.classList.toggle('hidden')
                            cards_show.classList.toggle('flex')
                        }, 300)
                    } else {
                                                    //-------------------------------------------//
                            await (async () => {
                                let paid_mark = false;
                                for await (const card of cards) {
                                    if (!card.disabled && paid_mark !== true) {
                                        await selectCard(card);
                                        paid_mark = await setPurchase(card);
                                    }
                                }
                            })();
                            //-------------------------------------------//
                                                cards_show.classList.toggle('hidden')
                        cards_show.classList.toggle('flex')
                        // setTimeout(() => {
                        //     cards_show.classList.toggle('backdrop-blur-2xl')
                        //     cards_show.classList.toggle('backdrop-blur-0')
                        // }, 100)
                        setTimeout(() => {
                            cards_show.classList.toggle('opacity-0')
                            cards_show.classList.toggle('opacity-100')
                        }, 150)
                    }
                }
            },
            show: {
                element: cards_show_main,
                function: () => {}
            },
        });
    })();
</script>


<div aria-hidden="true" style="background-color: rgb(255, 255, 255); border: 1px solid rgb(215, 215, 215); box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 4px; border-radius: 4px; left: auto; top: -10000px; z-index: -2147483648; position: absolute; pointer-events: auto; transition: opacity 0.15s ease-out; opacity: 0; visibility: hidden;"><div style="position: relative; z-index: 1;"><iframe src="https://newassets.hcaptcha.com/captcha/v1/4948b4d6847921d7bf0b86388c141311d7f03e2e/static/hcaptcha.html#frame=challenge&amp;id=0x4offc6o2u&amp;host=writerscans.com&amp;sentry=true&amp;reportapi=https%3A%2F%2Faccounts.hcaptcha.com&amp;recaptchacompat=true&amp;custom=false&amp;hl=de&amp;tplinks=on&amp;andint=off&amp;pstissuer=https%3A%2F%2Fpst-issuer.hcaptcha.com&amp;sitekey=a9226c58-b3d8-4f9e-82d4-d92644dc8584&amp;theme=light&amp;origin=https%3A%2F%2Fwriterscans.com" frameborder="0" scrolling="no" allow="private-state-token-redemption" title="Hauptinhalt der hCaptcha Challenge" style="border: 0px; z-index: 2000000000; position: relative;"></iframe></div><div style="width: 100%; height: 100%; position: fixed; pointer-events: none; top: 0px; left: 0px; z-index: 0; background-color: rgb(255, 255, 255); opacity: 0.05;"></div><div style="border-width: 11px; position: absolute; pointer-events: none; margin-top: -11px; z-index: 1; right: 100%;"><div style="border-width: 10px; border-style: solid; border-color: transparent rgb(255, 255, 255) transparent transparent; position: relative; top: 10px; z-index: 1;"></div><div style="border-width: 11px; border-style: solid; border-color: transparent rgb(215, 215, 215) transparent transparent; position: relative; top: -11px; z-index: 0;"></div></div></div></body></html>