<html xmlns="http://www.w3.org/1999/xhtml"><head>
    <title>Bloods: Inraku no Ketsuzoku 2 hentai | Watch Bloods: Inraku no Ketsuzoku 2 hentai online in high quality</title>
    <meta name="description" content="Watch online and download Bloods: Inraku no Ketsuzoku 2 hentai in high quality. Various formats from 240p to 720p HD (or even 1080p). HTML5 available for mobile devices">
    <meta name="keywords" content="Bloods: Inraku no Ketsuzoku 2, Bloods: Inraku no Ketsuzoku 2 hentai, watch Bloods: Inraku no Ketsuzoku 2 hentai, Bloods: Inraku no Ketsuzoku 2 watch online, watch Bloods: Inraku no Ketsuzoku 2, Bloods: Inraku no Ketsuzoku 2 hentai watch, Bloods: Inraku no Ketsuzoku 2 hentai online, watch Bloods: Inraku no Ketsuzoku 2 online, Bloods: Inraku no Ketsuzoku 2 watch, Bloods: Inraku no Ketsuzoku 2 html5, Bloods: Inraku no Ketsuzoku 2 english sub, download Bloods: Inraku no Ketsuzoku 2 hentai, watch Bloods: Inraku no Ketsuzoku 2 high quality, Bloods: Inraku no Ketsuzoku 2 streaming, Bloods: Inraku no Ketsuzoku 2 mobile episode">
    <link rel="image_src" href="/Content/images/cover/24.jpg">
    <link rel="stylesheet" href="/Content/bootstrap/css/bootstrap-theme.css">
    <link rel="stylesheet" href="/Content/bootstrap/css/bootstrap.css">
    <script async="" src="https://www.google-analytics.com/analytics.js"></script><script src="/Content/js/jquery.min.3.6.js"></script>
    <script src="/Content/bootstrap/js/bootstrap.min.js"></script>
    <link href="/Content/css/tpl_style.css" rel="stylesheet" type="text/css">
    <link rel="shortcut icon" href="/Content/images/favicon.ico" type="image/x-icon">
    <meta charset="utf-8">
  <style type="text/css" id="notify-bootstrap">.notifyjs-bootstrap-base {
	font-weight: bold;
	padding: 8px 15px 8px 14px;
	text-shadow: 0 1px 0 rgba(255, 255, 255, 0.5);
	background-color: #fcf8e3;
	border: 1px solid #fbeed5;
	-webkit-border-radius: 4px;
	-moz-border-radius: 4px;
	border-radius: 4px;
	white-space: nowrap;
	padding-left: 25px;
	background-repeat: no-repeat;
	background-position: 3px 7px;
}
.notifyjs-bootstrap-error {
	color: #B94A48;
	background-color: #F2DEDE;
	border-color: #EED3D7;
	background-image: url(data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAtRJREFUeNqkVc1u00AQHq+dOD+0poIQfkIjalW0SEGqRMuRnHos3DjwAH0ArlyQeANOOSMeAA5VjyBxKBQhgSpVUKKQNGloFdw4cWw2jtfMOna6JOUArDTazXi/b3dm55socPqQhFka++aHBsI8GsopRJERNFlY88FCEk9Yiwf8RhgRyaHFQpPHCDmZG5oX2ui2yilkcTT1AcDsbYC1NMAyOi7zTX2Agx7A9luAl88BauiiQ/cJaZQfIpAlngDcvZZMrl8vFPK5+XktrWlx3/ehZ5r9+t6e+WVnp1pxnNIjgBe4/6dAysQc8dsmHwPcW9C0h3fW1hans1ltwJhy0GxK7XZbUlMp5Ww2eyan6+ft/f2FAqXGK4CvQk5HueFz7D6GOZtIrK+srupdx1GRBBqNBtzc2AiMr7nPplRdKhb1q6q6zjFhrklEFOUutoQ50xcX86ZlqaZpQrfbBdu2R6/G19zX6XSgh6RX5ubyHCM8nqSID6ICrGiZjGYYxojEsiw4PDwMSL5VKsC8Yf4VRYFzMzMaxwjlJSlCyAQ9l0CW44PBADzXhe7xMdi9HtTrdYjFYkDQL0cn4Xdq2/EAE+InCnvADTf2eah4Sx9vExQjkqXT6aAERICMewd/UAp/IeYANM2joxt+q5VI+ieq2i0Wg3l6DNzHwTERPgo1ko7XBXj3vdlsT2F+UuhIhYkp7u7CarkcrFOCtR3H5JiwbAIeImjT/YQKKBtGjRFCU5IUgFRe7fF4cCNVIPMYo3VKqxwjyNAXNepuopyqnld602qVsfRpEkkz+GFL1wPj6ySXBpJtWVa5xlhpcyhBNwpZHmtX8AGgfIExo0ZpzkWVTBGiXCSEaHh62/PoR0p/vHaczxXGnj4bSo+G78lELU80h1uogBwWLf5YlsPmgDEd4M236xjm+8nm4IuE/9u+/PH2JXZfbwz4zw1WbO+SQPpXfwG/BBgAhCNZiSb/pOQAAAAASUVORK5CYII=);
}
.notifyjs-bootstrap-success {
	color: #468847;
	background-color: #DFF0D8;
	border-color: #D6E9C6;
	background-image: url(data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAutJREFUeNq0lctPE0Ecx38zu/RFS1EryqtgJFA08YCiMZIAQQ4eRG8eDGdPJiYeTIwHTfwPiAcvXIwXLwoXPaDxkWgQ6islKlJLSQWLUraPLTv7Gme32zoF9KSTfLO7v53vZ3d/M7/fIth+IO6INt2jjoA7bjHCJoAlzCRw59YwHYjBnfMPqAKWQYKjGkfCJqAF0xwZjipQtA3MxeSG87VhOOYegVrUCy7UZM9S6TLIdAamySTclZdYhFhRHloGYg7mgZv1Zzztvgud7V1tbQ2twYA34LJmF4p5dXF1KTufnE+SxeJtuCZNsLDCQU0+RyKTF27Unw101l8e6hns3u0PBalORVVVkcaEKBJDgV3+cGM4tKKmI+ohlIGnygKX00rSBfszz/n2uXv81wd6+rt1orsZCHRdr1Imk2F2Kob3hutSxW8thsd8AXNaln9D7CTfA6O+0UgkMuwVvEFFUbbAcrkcTA8+AtOk8E6KiQiDmMFSDqZItAzEVQviRkdDdaFgPp8HSZKAEAL5Qh7Sq2lIJBJwv2scUqkUnKoZgNhcDKhKg5aH+1IkcouCAdFGAQsuWZYhOjwFHQ96oagWgRoUov1T9kRBEODAwxM2QtEUl+Wp+Ln9VRo6BcMw4ErHRYjH4/B26AlQoQQTRdHWwcd9AH57+UAXddvDD37DmrBBV34WfqiXPl61g+vr6xA9zsGeM9gOdsNXkgpEtTwVvwOklXLKm6+/p5ezwk4B+j6droBs2CsGa/gNs6RIxazl4Tc25mpTgw/apPR1LYlNRFAzgsOxkyXYLIM1V8NMwyAkJSctD1eGVKiq5wWjSPdjmeTkiKvVW4f2YPHWl3GAVq6ymcyCTgovM3FzyRiDe2TaKcEKsLpJvNHjZgPNqEtyi6mZIm4SRFyLMUsONSSdkPeFtY1n0mczoY3BHTLhwPRy9/lzcziCw9ACI+yql0VLzcGAZbYSM5CCSZg1/9oc/nn7+i8N9p/8An4JMADxhH+xHfuiKwAAAABJRU5ErkJggg==);
}
.notifyjs-bootstrap-info {
	color: #3A87AD;
	background-color: #D9EDF7;
	border-color: #BCE8F1;
	background-image: url(data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3QYFAhkSsdes/QAAA8dJREFUOMvVlGtMW2UYx//POaWHXg6lLaW0ypAtw1UCgbniNOLcVOLmAjHZolOYlxmTGXVZdAnRfXQm+7SoU4mXaOaiZsEpC9FkiQs6Z6bdCnNYruM6KNBw6YWewzl9z+sHImEWv+vz7XmT95f/+3/+7wP814v+efDOV3/SoX3lHAA+6ODeUFfMfjOWMADgdk+eEKz0pF7aQdMAcOKLLjrcVMVX3xdWN29/GhYP7SvnP0cWfS8caSkfHZsPE9Fgnt02JNutQ0QYHB2dDz9/pKX8QjjuO9xUxd/66HdxTeCHZ3rojQObGQBcuNjfplkD3b19Y/6MrimSaKgSMmpGU5WevmE/swa6Oy73tQHA0Rdr2Mmv/6A1n9w9suQ7097Z9lM4FlTgTDrzZTu4StXVfpiI48rVcUDM5cmEksrFnHxfpTtU/3BFQzCQF/2bYVoNbH7zmItbSoMj40JSzmMyX5qDvriA7QdrIIpA+3cdsMpu0nXI8cV0MtKXCPZev+gCEM1S2NHPvWfP/hL+7FSr3+0p5RBEyhEN5JCKYr8XnASMT0xBNyzQGQeI8fjsGD39RMPk7se2bd5ZtTyoFYXftF6y37gx7NeUtJJOTFlAHDZLDuILU3j3+H5oOrD3yWbIztugaAzgnBKJuBLpGfQrS8wO4FZgV+c1IxaLgWVU0tMLEETCos4xMzEIv9cJXQcyagIwigDGwJgOAtHAwAhisQUjy0ORGERiELgG4iakkzo4MYAxcM5hAMi1WWG1yYCJIcMUaBkVRLdGeSU2995TLWzcUAzONJ7J6FBVBYIggMzmFbvdBV44Corg8vjhzC+EJEl8U1kJtgYrhCzgc/vvTwXKSib1paRFVRVORDAJAsw5FuTaJEhWM2SHB3mOAlhkNxwuLzeJsGwqWzf5TFNdKgtY5qHp6ZFf67Y/sAVadCaVY5YACDDb3Oi4NIjLnWMw2QthCBIsVhsUTU9tvXsjeq9+X1d75/KEs4LNOfcdf/+HthMnvwxOD0wmHaXr7ZItn2wuH2SnBzbZAbPJwpPx+VQuzcm7dgRCB57a1uBzUDRL4bfnI0RE0eaXd9W89mpjqHZnUI5Hh2l2dkZZUhOqpi2qSmpOmZ64Tuu9qlz/SEXo6MEHa3wOip46F1n7633eekV8ds8Wxjn37Wl63VVa+ej5oeEZ/82ZBETJjpJ1Rbij2D3Z/1trXUvLsblCK0XfOx0SX2kMsn9dX+d+7Kf6h8o4AIykuffjT8L20LU+w4AZd5VvEPY+XpWqLV327HR7DzXuDnD8r+ovkBehJ8i+y8YAAAAASUVORK5CYII=);
}
.notifyjs-bootstrap-warn {
	color: #C09853;
	background-color: #FCF8E3;
	border-color: #FBEED5;
	background-image: url(data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAMAAAC6V+0/AAABJlBMVEXr6eb/2oD/wi7/xjr/0mP/ykf/tQD/vBj/3o7/uQ//vyL/twebhgD/4pzX1K3z8e349vK6tHCilCWbiQymn0jGworr6dXQza3HxcKkn1vWvV/5uRfk4dXZ1bD18+/52YebiAmyr5S9mhCzrWq5t6ufjRH54aLs0oS+qD751XqPhAybhwXsujG3sm+Zk0PTwG6Shg+PhhObhwOPgQL4zV2nlyrf27uLfgCPhRHu7OmLgAafkyiWkD3l49ibiAfTs0C+lgCniwD4sgDJxqOilzDWowWFfAH08uebig6qpFHBvH/aw26FfQTQzsvy8OyEfz20r3jAvaKbhgG9q0nc2LbZxXanoUu/u5WSggCtp1anpJKdmFz/zlX/1nGJiYmuq5Dx7+sAAADoPUZSAAAAAXRSTlMAQObYZgAAAAFiS0dEAIgFHUgAAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQfdBgUBGhh4aah5AAAAlklEQVQY02NgoBIIE8EUcwn1FkIXM1Tj5dDUQhPU502Mi7XXQxGz5uVIjGOJUUUW81HnYEyMi2HVcUOICQZzMMYmxrEyMylJwgUt5BljWRLjmJm4pI1hYp5SQLGYxDgmLnZOVxuooClIDKgXKMbN5ggV1ACLJcaBxNgcoiGCBiZwdWxOETBDrTyEFey0jYJ4eHjMGWgEAIpRFRCUt08qAAAAAElFTkSuQmCC);
}
</style><script src="//kisshentai.disqus.com/embed.js" data-timestamp="1696358144262"></script><style type="text/css" id="core-notify">.notifyjs-corner {
	position: fixed;
	margin: 5px;
	z-index: 1050;
}

.notifyjs-corner .notifyjs-wrapper,
.notifyjs-corner .notifyjs-container {
	position: relative;
	display: block;
	height: inherit;
	width: inherit;
	margin: 3px;
}

.notifyjs-wrapper {
	z-index: 1;
	position: absolute;
	display: inline-block;
	height: 0;
	width: 0;
}

.notifyjs-container {
	display: none;
	z-index: 1;
	position: absolute;
}

.notifyjs-hidable {
	cursor: pointer;
}

[data-notify-text],[data-notify-html] {
	position: relative;
}

.notifyjs-arrow {
	position: absolute;
	z-index: 2;
	width: 0;
	height: 0;
}</style><style>AD-SLOT,
AD-TRIPLE-BOX,
DFP-AD,
[class^="adDisplay-module"],
[class^="amp-ad-"],
[data-ad-cls],
[data-adbridg-ad-class],
[data-css-class="dfp-inarticle"],
[data-d-ad-id],
[data-desktop-ad-id],
[data-dynamic-ads],
[data-ez-name],
[data-freestar-ad],
[data-id^="div-gpt-ad"],
[data-m-ad-id],
[data-mobile-ad-id],
[data-name="adaptiveConstructorAd"],
[data-rc-widget],
[data-role="tile-ads-module"],
[data-template-type="nativead"],
[data-testid="ad_testID"],
[data-type="ad-vertical"],
[id^="ad-wrap-"],
[id^="ad_sky"],
[id^="ad_slider"],
[id^="section-ad-banner"],
[onclick^="location.href='http://www.reimageplus.com"],
a-ad,
a[style="width:100%;height:100%;z-index:10000000000000000;position:absolute;top:0;left:0;"],
ad-shield-ads,
app-ad,
app-advertisement,
app-large-ad,
ark-top-ad,
article.ad,
aside[id^="adrotate_widgets-"],
atf-ad-slot,
bottomadblock,
display-ads,
div[class^="Adstyled__AdWrapper-"],
div[class^="Display_displayAd"],
div[class^="kiwi-ad-wrapper"],
div[class^="native-ad-"],
div[data-ad-placeholder],
div[data-ad-wrapper],
div[data-adname],
div[data-adunit-path],
div[data-adunit],
div[data-adzone],
div[data-alias="300x250 Ad 1"],
div[data-alias="300x250 Ad 2"],
div[data-content="Advertisement"],
div[data-contentexchange-widget],
div[data-dfp-id],
div[data-id-advertdfpconf],
div[data-insertion],
div[data-mini-ad-unit],
div[data-native-ad],
div[data-spotim-slot],
div[id^="_vdo_ads_player_ai_"],
div[id^="ad-div-"],
div[id^="ad-position-"],
div[id^="adngin-"],
div[id^="adrotate_widgets-"],
div[id^="ads250_250-widget-"],
div[id^="ads300_100-widget-"],
div[id^="ads300_250-widget-"],
div[id^="adspot-"],
div[id^="advads_ad_"],
div[id^="crt-"][style],
div[id^="div-ads-"],
div[id^="google_dfp_"],
div[id^="gpt_ad_"],
div[id^="lazyad-"],
div[id^="optidigital-adslot"],
div[id^="pa_sticky_ad_box_middle_"],
div[id^="rc-widget-"],
div[id^="sticky_ad_"],
div[id^="vuukle-ad-"],
div[recirculation-ad-container],
gpt-ad,
guj-ad,
hl-adsense,
img[src^="https://images.purevpnaffiliates.com"],
ps-connatix-module,
span[data-ez-ph-id],
span[id^="ezoic-pub-ad-placeholder-"],
topadblock,
zeus-ad,
[class^="tile-picker__CitrusBannerContainer-sc-"],
citrus-ad-wrapper,
[class^="s2nPlayer"],
div[id*="MarketGid"],
[onclick*="content.ad/"],
AMP-AD,
amp-ad,
amp-ad-custom,
amp-connatix-player,
amp-fx-flying-carpet,
a[data-obtrack^="http://paid.outbrain.com/network/redir?"],
a[data-oburl^="https://paid.outbrain.com/network/redir?"],
a[data-redirect^="https://paid.outbrain.com/network/redir?"],
a[data-url^="http://paid.outbrain.com/network/redir?"] + .author,
a[data-widget-outbrain-redirect^="http://paid.outbrain.com/network/redir?"],
a[onmousedown^="this.href='http://paid.outbrain.com/network/redir?"][target="_blank"],
a[onmousedown^="this.href='http://paid.outbrain.com/network/redir?"][target="_blank"] + .ob_source,
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"][target="_blank"] + .ob_source,
a[target="_blank"][onmousedown="this.href^='http://paid.outbrain.com/network/redir?"],
div[id^="taboola-stream-"],
display-ad-component,
div[id^="zergnet-widget"],
a[aria-label="Werbelink"],
[onclick*="window.open('http://deloplen.com/"],
[data-uri^="https://s3.amazonaws.com"],
[data-lnguri^="https://s3.amazonaws.com"],
[onclick*="postlnk.com"],
[class^="DisplayAd"],
div[class*="displayAdRight"],
[data-lnguri*="vipbox"],
[src^="https://aff1xstavka.com"],
[class^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]),
[id^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]),
div[id^="div-gpt-"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]),
.samBannerUnit, .samCodeUnit,
[src^="//dombnrs.com/"],
[src^="https://forum.picbaron.com/Banner"],
div[id][style^="position: fixed; inset: 0px; z-index: 2147483647; background: black"][style*="opacity: 0.01"],
div[class$="player-promo-col"],
div#spot-holder.spot-holder[style="display: block;"],
a[dontfo=""][style$="position: absolute; z-index: 2147483647;"],
[data-ad-module]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-width]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-adblockkey]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(html):not(.adsbygoogle),
[data-advadstrackid]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-manager-id]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
div[style^="z-index: 999999; background-image: url(\"data:image/gif;base64,"][style$="position: absolute;"],
a[onclick="openAuc();"],
div[style="position: fixed; display: block; width: 100%; height: 100%; inset: 0px; background-color: rgba(0, 0, 0, 0); z-index: 300000;"],
div[style^="position:fixed;inset:0px;z-index:2147483647;background:black;opacity:0.01"],
a[id][href="https://chpadblock.com/"][rel^="noopener noreferrer"],
a[id][href="https://toolkitspro.com"][rel^="noopener noreferrer"],
a[id][href="https://hamrocsit.com"][rel^="noopener noreferrer"],
iframe.lazyloaded[data-src^="https://rcm-fe.amazon-adsystem.com/"],
[style="position:absolute;top:0;left:0;width: 100%;height: 100%;z-index:2147483647"],
[style="top: 0px; left: 0px; width: 940px; height: 600px; position: absolute; z-index: 2147483647;"],
div[style="position: fixed;top: 0;left: 0;right: 0;bottom:0;z-index: 99999999;background: rgba(0,0,0,.6);"] { display: none !important; }

div[id^="ad"],
[data-ad-name],
[data-revive-zoneid],
[name^="google_ads_iframe"],
div[aria-label="Ads"],
div[data-ad-targeting],
div[data-google-query-id],
div[data-native_ad],
div[id^="ad_position_"],
div[id^="dfp-ad-"],
div[id^="ezoic-pub-ad-"],
div[id^="yandex_ad"],
ins.adsbygoogle,
div[id*="ScriptRoot"],
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"][target="_blank"],
.trc_related_container div[data-item-syndicated="true"],
amp-embed[type="taboola"],
[id^="google_ads_iframe"]:not(.rb-adbanner) { display: none !important; }</style><style>#container > #footer ~ #go-to-top + div[id][class*=" "],
[href="https://t.me/Russia_Vs_Ukraine_War3"],
[href*="uselnk.com/"],
a[href^="http://adtrack"],
[href*="postlnk.com"],
[href*="passtechusa.com"],
[href*="speenphorbin.com"] { display: none !important; }</style></head>

  <body>
    <div id="containerRoot">
      <div id="head">
        <h3>
          <!-- Accountbox -->
          <div style="position: relative; text-align: right; margin: -40px 46px 20px 0px; font: bold 13px Arial;">
   <div id="topHolderBox" class="dropdown" style="width: 230px; height: 27px;">
               <img src="/Content/images/user-small.png" style="vertical-align: middle; margin-bottom: 5px">
         Please <a href="/Login">login </a> or <a href="/Register">register</a>
         </div>
</div>
          <!-- Searchbox -->
          <div id="search" style="position: relative">
 <form action="/Search/Hentai" id="formSearch" method="post">
    <p>
     <input size="250px" id="keyword" name="keyword" value="" autocomplete="off" class="text" style="width: 260px;">
     <input id="imgSearch" type="image" src="/Content/images/search.png" class="button">
    </p>
    <div id="result_box" style="margin-top: -3px; max-height: 300px; overflow-y: auto; overflow-x: hidden;"></div>
    <div style="margin: 10px 48px 10px 0"><a href="/AdvanceSearch"><img src="/Content/images/read.png" width="16px" border="0" style="vertical-align: middle">&nbsp;&nbsp;Advanced Search</a></div>
 </form>
</div>

<script src="/Content/js/main.js"></script>
        </h3>
        <h1><a href="/" title="Watch hentai online - kisshentai.net" class="logo">Watch hentai online - kisshentai.net</a></h1>
      </div>

      <div class="clear"></div>

      <div id="headnav">
         <!-- Navbar -->
         <div id="navbar">
  <div id="navcontainer">
    <ul>
      <li id="liHome"><a href="/">Home</a></li>
      <li id="liDS"><a href="/HentaiList" id="currentTab">Hentai list</a></li>
	  
	   <!-- Remove Mobile
      <li id="liMobile"><a href="/M">MOBILE</a></li>
	   !-->
	   
      <li id="liReport"><a rel="nofollow" target="_blank" href="https://m.me/KissHentai">Report Error</a></li>
      <li id="liRequest"><a rel="nofollow" target="_blank" href="https://m.me/KissHentai">Request Hentai</a></li>
	   <li id="liAnimeOnline">
		  <a target="_blank" title="High quality anime online" href="https://kimanime.com">KimAnime.com</a>
	  </li>
      <!-- ThePornDude Start
	  <li id="liHentaiSite">
          <img src="https://theporndude.com/graphics/TPD-Favicon-Small-D-24px.png" style="width: 17px;position: absolute;top: 4px;right: 222px;">
          <a rel="nofollow" target="_blank" title="Hentai Sites" href="https://theporndude.com/">&nbsp;&nbsp;&nbsp;Hentai Sites</a>
      </li>
	  !-->
      <li id="liReadHentai">
		  <img src="https://9hentai.com/images/logo.png" style="width: 10px;position: absolute;top: 5px;right: 435px;">
		  <a rel="nofollow" target="_blank" title="Read hentai online" href="https://9hentai.com/">9Hentai.com</a>
	  </li>
    </ul>
  </div>
</div>
        <script type="text/javascript">
          var path = 'HentaiList';
          if (path == 'Home')
            $('#liHome a').attr('id', 'currentTab');
          else if (path == 'HentaiList')
            $('#liDS a').attr('id', 'currentTab');
          else
            $('#navcontainer a[href*="' + path + '"]').attr('id', 'currentTab');
        </script>

        <div id="navsubbar">
          <p>
            <a href="/HentaiList">Sort by alphabet</a> |
            <a href="/HentaiList/MostView">Sort by popularity</a> |
            <a href="/HentaiList/LatestUpdate">Latest update</a> |
            <a href="/HentaiList/NewAndHot">New and hot</a> |
            <a href="/HentaiList/NewHentai">New hentai</a>
          </p>
        </div>
      </div>

      <div id="container">
        <div id="leftside">
           <div class="clear"></div>

            <div class="bigBarContainer">
               <div class="barTitle">Bloods: Inraku no Ketsuzoku 2 information</div>
               <div class="barContent">
                  <div class="arrow-general">&nbsp;</div>
                  <div>
                     <a class="bigChar" href="/Hentai/Bloods-Inraku-no-Ketsuzoku-2" title="Watch Bloods: Inraku no Ketsuzoku 2 online in high quality">Bloods: Inraku no Ketsuzoku 2</a>
                     <p>
                        <span class="info">Other name:</span>&nbsp;
                                                <a href="/Hentai/Bloods-Inraku-no-Ketsuzoku-2" title="Watch Bloods～淫落の血族2～ online in high quality">Bloods～淫落の血族2～</a><span class="info">,</span>
                                             </p>

                     <p>
                        <span class="info">Genres:</span>&nbsp;
                                                  <a href="/Genre/Anal" title="Anal sex refers to the sex act involving insertion of the penis into the anus of a sex partner. Hentai with this tag will include scenes of anal sex, either with or without permission from the receiving person.">Anal</a><span class="info">,</span>
                                                  <a href="/Genre/BDSM" title="">BDSM</a><span class="info">,</span>
                                                  <a href="/Genre/Big-Boobs" title="A gigantic oppai, also know as Large breast.">Big Boobs</a><span class="info">,</span>
                                                  <a href="/Genre/Blow-Job" title="Also know as Fellatio, is an oral sex act involving the use of the mouth or throat, which is performed by a person on the penis of another person or oneself.">Blow Job</a><span class="info">,</span>
                                                  <a href="/Genre/Bondage" title="">Bondage</a><span class="info">,</span>
                                                  <a href="/Genre/Creampie" title="Male ejaculates inside his partner's pussy.">Creampie</a><span class="info">,</span>
                                                  <a href="/Genre/Golden-Shower" title="">Golden Shower</a><span class="info">,</span>
                                                  <a href="/Genre/Incest" title="A hentai that contains sexual relations with blood relatives">Incest</a><span class="info">,</span>
                                                  <a href="/Genre/Kemonomimi" title="">Kemonomimi</a><span class="info">,</span>
                                                  <a href="/Genre/Licking" title="">Licking</a><span class="info">,</span>
                                                  <a href="/Genre/Loli" title="I'm calling the police!!">Loli</a><span class="info">,</span>
                                                  <a href="/Genre/Masturbation" title="">Masturbation</a><span class="info">,</span>
                                                  <a href="/Genre/Rape" title="Hentai with this tag will contain heavy elements of rape. This includes forced sexual intercourse (mainly by men on women) using either physical strength, threat, or surprise. This theme is very common and accepted in Japan.">Rape</a><span class="info">,</span>
                                                  <a href="/Genre/Threesome" title="From the word itself, It means that 3 persons are having sex act together.">Threesome</a><span class="info">,</span>
                                                  <a href="/Genre/Toys" title="">Toys</a><span class="info">,</span>
                                                  <a href="/Genre/Virgin" title="You">Virgin</a><span class="info">,</span>
                                                  <a href="/Genre/Yuri" title="">Yuri</a><span class="info">,</span>
                                             </p>

                     <p>
                        <span class="info">Date Aired:</span>&nbsp;
                        Dec 31, 1969                     </p>

                     <p>
                        <span class="info">Status:</span>
                        &nbsp;Completed&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                        <span class="info">Views:</span>
                        &nbsp;174,714&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                        <span id="spanBookmark" data-hid="24">
                           <img src="/Content/images/plus.png" style="vertical-align: middle; margin-bottom: 5px">
                           <a id="btnAddBookmark" onclick="return false;" href="#">Click to bookmark</a>
                        </span>
                        <span id="spanUnBookmark" data-hid="24" data-bid="none" style="display: none">
                           <img src="/Content/images/minus.png" style="vertical-align: middle; margin-bottom: 5px">
                           <a id="btnUnBookmark" onclick="return false;" href="#">Click to UnBookmark</a>
                        </span>
                        <img id="imgLoader" src="/Content/images/loader.gif" style="display: none">
                     </p>
                                          <script>
                        $("#btnAddBookmark").click(function(){
                           $("#spanBookmark").html('<img src="/Content/images/user-small.png" style="vertical-align: middle; margin-bottom: 5px">Please <a href="/Login">Login</a> or <a href="/Register">Register</a>');
                        });
                     </script>
                                          <p><span class="info">Summary:</span></p>
                     The Sagimiya family is cursed in that its members are sexually aroused in the presence of another of the same bloodline. Sagimiya Misaki and her elder twin, Shun, are both disgusted over this and have sworn to resist the calling of their blood. However, Shun loses his composure and goes to their elder sister, Kagu, for release. After Misaki finds out, she too loses her resolve and seeks out Shun.

(Source: ANN)                  </div>
               </div>
            </div>

            <div class="clear2"></div>
<div id="ad1">
	<a href="#" onclick="hideAd1()" style="position: absolute;background: rgba(66, 54, 54, 0.73);padding: 0 5px 0 5px;">Hide</a>
	<!--JuicyAds v2.0-->
	
	<!--JuicyAds END-->
</div>
<div class="clear2"></div>
<script>
function hideAd1() {document.getElementById("ad1").style.display = "none";}
</script>

            <!--- Episode Listing --->
            <div class="bigBarContainer">
               <div class="barTitle">Episodes</div>
               <div class="barContent episodeList">
                  <div class="arrow-general">&nbsp;</div>
                  <div>
                     <!--- Share iFrame --->
                     <div style="float: left;" class="">
                        <div style="display:inline-table">
               				<!-- Go to www.addthis.com/dashboard to customize your tools -->
               				<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-55f83901b850b13f"></script>
               				<!-- Go to www.addthis.com/dashboard to customize your tools -->
                           <div class="addthis_native_toolbox"></div>
                        </div>
                     </div>

                     <div class="clear">&nbsp;</div>
                     <!--- Ads iFrame --->
                     <div style="display: table;margin-right: auto;margin-left: auto;">
                        <div id="ad3" style="float: left;">
<a href="#" onclick="hideAd3()" style="position: absolute;background: rgba(66, 54, 54, 0.73);padding: 0 5px 0 5px;">Hide</a>
<!--JuicyAds v2.0-->
	
<!--JuicyAds END-->
</div>
<script>
function hideAd3() {document.getElementById("ad3").style.display = "none";}
</script>
                     </div>
                     <div class="clear2"></div>
                     <table class="listing">
                        <tbody>
                           <tr>
                              <th width="85%">Episode name</th>
                              <th width="15%">Day Added</th>
                           </tr>
                           <tr style="height: 10px"></tr>
                                                      <tr>
                              <td><a href="/Hentai/Bloods-Inraku-no-Ketsuzoku-2/Episode-002?id=52" title="Watch Bloods: Inraku no Ketsuzoku 2 Episode 002 online in high quality">Bloods: Inraku no Ketsuzoku 2 Episode 002 </a></td>
                              <td>08/02/2017</td>
                           </tr>
                                                      <tr>
                              <td><a href="/Hentai/Bloods-Inraku-no-Ketsuzoku-2/Episode-001?id=51" title="Watch Bloods: Inraku no Ketsuzoku 2 Episode 001 online in high quality">Bloods: Inraku no Ketsuzoku 2 Episode 001 </a></td>
                              <td>08/02/2017</td>
                           </tr>
                                                   </tbody>
                     </table>
                  </div>
               </div>
            </div>
            <div class="clear2"></div>
            <!-- Comments Box -->
            <div class="bigBarContainer">
               <div class="barTitle">Comments</div>
               <div class="barContent">
                  <div class="arrow-general">&nbsp;</div>
                  <div>
                     <div id="disqus_thread" style="margin: 5px;"></div>
                      <script>
                        (function() { // DON'T EDIT BELOW THIS LINE
                           var d = document, s = d.createElement('script');
                           s.src = '//kisshentai.disqus.com/embed.js';
                           s.setAttribute('data-timestamp', +new Date());
                           (d.head || d.body).appendChild(s);
                        })();
                      </script>
                      <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
                  </div>
               </div>
            </div>
            <div class="clear2"></div>
         </div>

        <!--- Side Bar --->
       <div id="rightside">
          <!-- Cover -->
          <div class="rightBox">
              <div class="barTitle">Cover</div>
              <div class="barContent">
                  <div class="arrow-general">&nbsp;</div>
                  <div style="text-align: center"><img width="190px" height="250px" src="/Content/images/cover/24.jpg"></div>
              </div>
          </div>
          <div class="clear2"></div>
          <!-- Related Links -->
          <div class="rightBox">
              <div class="barTitle">Related Links</div>
              <div class="barContent">
                  <div class="arrow-general">&nbsp;</div>
                  <!-- Related -->
                                                      <div class="clear" style="height:5px"></div>
                  <div class="line"></div>
                  <div class="clear" style="height:5px"></div>
                  <img src="/Content/images/bullet.png">&nbsp;<a href="/Hentai/Bloods-Inraku-no-Ketsuzoku-2/Episode-003">Bloods: Inraku no Ketsuzoku 2 003</a>
              </div>
          </div>

       </div>

      </div>
    </div>
    <div style="z-index: 0;position: absolute;top: 220px;left: 0px;width: 100%;height: 600px;overflow: hidden;visibility: hidden;">
   <div id="divFloatLeft" style="position: absolute; visibility: visible; left: 276.5px;">
      
   </div>
   <div id="divFloatRight" style="position: absolute; visibility: visible; right: 276.5px;">
      
   </div>
</div>
<script type="text/javascript">
    function DoAdsPosition() {
        var browserWidth = $(window).width();
        var webWidth = 1000;
        var bannerWidth = 160;
        var blankWidth = (browserWidth - webWidth) / 2;
        var margin = 15;

        $('#divFloatLeft').css('left', browserWidth - webWidth - blankWidth - bannerWidth - margin);
        $('#divFloatLeft').show();

        $('#divFloatRight').css('right', browserWidth - webWidth - blankWidth - bannerWidth - margin);
        $('#divFloatRight').show();
    }

    DoAdsPosition();
    $(window).resize(function () {
        DoAdsPosition();
    });
</script>

<!---<script src="/Content/js/js.betterpop.js"></script>
<script>
    var items = [true, false];
    var type = items[Math.floor(Math.random()*items.length)];
   BetterJsPop.add('http://xapi.juicyads.com/service_advanced.php?code=a4c4p2d4t26624b4y2536484&u=http%3A%2F%2Fwww.juicyads.rocks', {
      'under': true,
      'newTab': true,
      'device': 'desktop',
      'cookieExpires': 21600,
      'name': 'hhndr1'
   }).add('http://xapi.juicyads.com/service_advanced.php?code=a4c4p2d4t26624b4y2536484&u=http%3A%2F%2Fwww.juicyads.rocks', {
      'under': true,
      'newTab': true,
      'device': 'mobile',
      'cookieExpires': 21600,
      'name': 'hhndr1'
   });
</script>
!--->

<script type="text/javascript">
   $('#footer').css('top', $(document).height() - $('#containerRoot').height());
</script>
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-77438537-1', 'auto');
  ga('send', 'pageview');
</script>
<div id="footer" style="top: 75px;">
 <div id="footcontainer" style="position: relative">
    <p>
      <a href="/">KissHentai.net </a>. Copyrights and trademarks for the hentai, and other promotional materials are held by their respective owners and their use is allowed under the fair use clause of the Copyright Law.
      <a href="/Message/PrivacyPolicy">Privacy Policy</a>&nbsp;|&nbsp;<a href="http://kissanime.ru/">Watch anime online</a>
    </p>
 </div>
</div>
  

<iframe style="display: none;"></iframe><div class="pub_300x250 pub_300x250m pub_728x90 text-ad textAd text_ad text_ads text-ads text-ad-links ad-text adSense adBlock adContent adBanner" style="width: 1px !important; height: 1px !important; position: absolute !important; left: -10000px !important; top: -1000px !important;"></div></body></html>