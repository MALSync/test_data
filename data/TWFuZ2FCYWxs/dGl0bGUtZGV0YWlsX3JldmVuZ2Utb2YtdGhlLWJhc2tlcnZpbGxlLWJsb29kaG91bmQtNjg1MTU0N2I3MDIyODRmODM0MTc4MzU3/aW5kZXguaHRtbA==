<!DOCTYPE html><html lang="de-DE"><head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Favicon -->
    <meta name="csrf-token" content="1705c3235e02c45caaf2b0f8ea4f9391a46bda3ae489d8ef491fd1ee1de7aa08">
    <meta name="author" content="Manga Ball">
    <meta name="robots" content="index, follow">
    <meta name="googlebot" content="index, follow">
    <meta name="google" content="index, follow">
    <meta name="google-site-verification" content="">
    <!-- This site is optimized with the Yoast SEO Premium plugin v20.8 (Yoast SEO v20.9) - https://yoast.com/wordpress/plugins/seo/ -->
    <title>Revenge of the Baskerville Bloodhound Online Kostenlos - Revenge of the Baskerville Bloodhound / 철혈검가 사냥개의 회귀 / Cheolhyeolgeomga Sanyanggaeui Hoegwi / Revenge of the Sword Clan's Hound / Revenge of the Iron-Blooded Sword Hound / Regression of the Ironblade Hound / Return of the Iron-Blooded Hound / Return of the Iron-Blooded Sword Hound / The Return of the Iron-Blood Sword Hound / La revanche du limier des Baskerville / O retorno do cão de caça dos Baskerville / A vingança do cão de caça de sangue de ferro Baskerville / El perro de metal / La venganza del sabueso de la espada sangrienta / La venganza del sabueso de sangre de hierro / การกลับมาของหมาล่าเนื้อตระกูลดาบเลือดเหล็ก / 回帰した鉄血の猟犬 / 铁血剑家猎犬的回归 / Demir kanlı kılıç tazısının i̇ntikamı / عودة الكلب ذي الدم الحديدي / বাস্কেরভিলের শিকারী কুকুরের প্রতিশোধ / Return Of The Iron-Bloode... / Месть железнокровного Пса-меченосца / Revenge of the Iron-Blooded Sword Hound 철혈검가 사냥개의 회귀 / Возвращение железнокровной гончей / Месть гончей железной крови / Revenge of the Baskerville Bloodhound / La Venganza del Sabueso de Sangre de Hierro / Revenge Of The Iron-Blooded Sword Hound Mehreren Sprachen</title>
    <meta name="description" content="Revenge of the Baskerville Bloodhound Online Kostenlos - Revenge of the Baskerville Bloodhound / 철혈검가 사냥개의 회귀 / Cheolhyeolgeomga Sanyanggaeui Hoegwi / Revenge of the Sword Clan's Hound / Revenge of the Iron-Blooded Sword Hound / Regression of the Ironblade Hound / Return of the Iron-Blooded Hound / Return of the Iron-Blooded Sword Hound / The Return of the Iron-Blood Sword Hound / La revanche du limier des Baskerville / O retorno do cão de caça dos Baskerville / A vingança do cão de caça de sangue de ferro Baskerville / El perro de metal / La venganza del sabueso de la espada sangrienta / La venganza del sabueso de sangre de hierro / การกลับมาของหมาล่าเนื้อตระกูลดาบเลือดเหล็ก / 回帰した鉄血の猟犬 / 铁血剑家猎犬的回归 / Demir kanlı kılıç tazısının i̇ntikamı / عودة الكلب ذي الدم الحديدي / বাস্কেরভিলের শিকারী কুকুরের প্রতিশোধ / Return Of The Iron-Bloode... / Месть железнокровного Пса-меченосца / Revenge of the Iron-Blooded Sword Hound 철혈검가 사냥개의 회귀 / Возвращение железнокровной гончей / Месть гончей железной крови / Revenge of the Baskerville Bloodhound / La Venganza del Sabueso de Sangre de Hierro / Revenge Of The Iron-Blooded Sword Hound Mehreren Sprachen">
    <meta name="keywords" content="Comics online lesen, beste Comics, neueste Comics, kostenlose Comics, Comics lesen">
    <link rel="canonical" href="https://mangaball.net/title-detail/revenge-of-the-baskerville-bloodhound-6851547b702284f834178357/">
    <meta property="og:locale" content="de-DE">
    <meta property="og:type" content="article">
    <meta property="og:title" content="Revenge of the Baskerville Bloodhound Online Kostenlos - Revenge of the Baskerville Bloodhound / 철혈검가 사냥개의 회귀 / Cheolhyeolgeomga Sanyanggaeui Hoegwi / Revenge of the Sword Clan's Hound / Revenge of the Iron-Blooded Sword Hound / Regression of the Ironblade Hound / Return of the Iron-Blooded Hound / Return of the Iron-Blooded Sword Hound / The Return of the Iron-Blood Sword Hound / La revanche du limier des Baskerville / O retorno do cão de caça dos Baskerville / A vingança do cão de caça de sangue de ferro Baskerville / El perro de metal / La venganza del sabueso de la espada sangrienta / La venganza del sabueso de sangre de hierro / การกลับมาของหมาล่าเนื้อตระกูลดาบเลือดเหล็ก / 回帰した鉄血の猟犬 / 铁血剑家猎犬的回归 / Demir kanlı kılıç tazısının i̇ntikamı / عودة الكلب ذي الدم الحديدي / বাস্কেরভিলের শিকারী কুকুরের প্রতিশোধ / Return Of The Iron-Bloode... / Месть железнокровного Пса-меченосца / Revenge of the Iron-Blooded Sword Hound 철혈검가 사냥개의 회귀 / Возвращение железнокровной гончей / Месть гончей железной крови / Revenge of the Baskerville Bloodhound / La Venganza del Sabueso de Sangre de Hierro / Revenge Of The Iron-Blooded Sword Hound Mehreren Sprachen">
    <meta property="og:description" content="Revenge of the Baskerville Bloodhound Online Kostenlos - Revenge of the Baskerville Bloodhound / 철혈검가 사냥개의 회귀 / Cheolhyeolgeomga Sanyanggaeui Hoegwi / Revenge of the Sword Clan's Hound / Revenge of the Iron-Blooded Sword Hound / Regression of the Ironblade Hound / Return of the Iron-Blooded Hound / Return of the Iron-Blooded Sword Hound / The Return of the Iron-Blood Sword Hound / La revanche du limier des Baskerville / O retorno do cão de caça dos Baskerville / A vingança do cão de caça de sangue de ferro Baskerville / El perro de metal / La venganza del sabueso de la espada sangrienta / La venganza del sabueso de sangre de hierro / การกลับมาของหมาล่าเนื้อตระกูลดาบเลือดเหล็ก / 回帰した鉄血の猟犬 / 铁血剑家猎犬的回归 / Demir kanlı kılıç tazısının i̇ntikamı / عودة الكلب ذي الدم الحديدي / বাস্কেরভিলের শিকারী কুকুরের প্রতিশোধ / Return Of The Iron-Bloode... / Месть железнокровного Пса-меченосца / Revenge of the Iron-Blooded Sword Hound 철혈검가 사냥개의 회귀 / Возвращение железнокровной гончей / Месть гончей железной крови / Revenge of the Baskerville Bloodhound / La Venganza del Sabueso de Sangre de Hierro / Revenge Of The Iron-Blooded Sword Hound Mehreren Sprachen">
    <meta property="og:url" content="https://mangaball.net/title-detail/revenge-of-the-baskerville-bloodhound-6851547b702284f834178357/">
    <meta property="og:site_name" content="Manga Ball">
    <meta property="article:modified_time" content="2025-10-17 20:57:46">
    <meta property="og:image" content="https://bulbasaur.poke-black-and-white.net/covers/6851547b702284f834178357/cover_1752077533539.jpg">
    <script type="application/ld+json" class="yoast-schema-graph">
        {
            "@context": "https://schema.org",
            "@graph": [{
                "@type": "WebPage",
                "@id": "https://mangaball.net/title-detail/revenge-of-the-baskerville-bloodhound-6851547b702284f834178357/",
                "url": "https://mangaball.net/title-detail/revenge-of-the-baskerville-bloodhound-6851547b702284f834178357/",
                "name": "Revenge of the Baskerville Bloodhound - Manga Ball",
                "isPartOf": {
                    "@id": "https://mangaball.net/#website"
                },
                "primaryImageOfPage": {
                    "@id": "https://mangaball.net/title-detail/revenge-of-the-baskerville-bloodhound-6851547b702284f834178357/#primaryimage"
                },
                "image": {
                    "@id": "https://mangaball.net/title-detail/revenge-of-the-baskerville-bloodhound-6851547b702284f834178357/#primaryimage"
                },
                "thumbnailUrl": "https://bulbasaur.poke-black-and-white.net/covers/6851547b702284f834178357/cover_1752077533539.jpg",
                "datePublished": "2025-10-17 20:57:46",
                "dateModified": "2025-10-17 20:57:46",
                "breadcrumb": {
                    "@id": "https://mangaball.net/title-detail/revenge-of-the-baskerville-bloodhound-6851547b702284f834178357/#breadcrumb"
                },
                "inLanguage": "de-DE",
                "potentialAction": [{
                    "@type": "ReadAction",
                    "target": ["https://mangaball.net/title-detail/revenge-of-the-baskerville-bloodhound-6851547b702284f834178357/"]
                }]
            }, {
                "@type": "ImageObject",
                "inLanguage": "de-DE",
                "@id": "https://mangaball.net/title-detail/revenge-of-the-baskerville-bloodhound-6851547b702284f834178357/#primaryimage",
                "url": "https://bulbasaur.poke-black-and-white.net/covers/6851547b702284f834178357/cover_1752077533539.jpg",
                "contentUrl": "https://bulbasaur.poke-black-and-white.net/covers/6851547b702284f834178357/cover_1752077533539.jpg",
                "width": 700,
                "height": 1000,
                "caption": "Revenge of the Baskerville Bloodhound"
            }, {
                "@type": "BreadcrumbList",
                "@id": "https://mangaball.net/title-detail/revenge-of-the-baskerville-bloodhound-6851547b702284f834178357/#breadcrumb",
                "itemListElement": [{
                    "@type": "ListItem",
                    "position": 1,
                    "name": "Home",
                    "item": "https://mangaball.net"
                }, {
                    "@type": "ListItem",
                    "position": 2,
                    "name": "Manga",
                    "item": "https://mangaball.net/recently-updated"
                }, {
                    "@type": "ListItem",
                    "position": 3,
                    "name": "Revenge of the Baskerville Bloodhound"
                }]
            }, {
                "@type": "WebSite",
                "@id": "https://mangaball.net/#website",
                "url": "https://mangaball.net/",
                "name": "Manga Ball",
                "description": "Read Manga Online",
                "potentialAction": [{
                    "@type": "SearchAction",
                    "target": {
                        "@type": "EntryPoint",
                        "urlTemplate": "https://mangaball.net/search-advanced?keyword={search_term_string}"
                    },
                    "query-input": "required name=search_term_string"
                }],
                "inLanguage": "de-DE"
            }]
        }
    </script>
    <!-- / Yoast SEO Premium plugin. -->
    <!-- Favicon -->
    <link rel="icon" href="/favicon.ico" type="image/png">
    <link rel="icon" type="image/png" href="/public/frontend/images/favicon.png">
    <link rel="icon" type="image/png" href="/public/frontend/images/favicon/favicon-24x24.png" sizes="24x24">
    <link rel="icon" type="image/png" href="/public/frontend/images/favicon/favicon-32x32.png" sizes="32x32">
    <link rel="icon" type="image/png" href="/public/frontend/images/favicon/favicon-48x48.png" sizes="48x48">
    <link rel="icon" type="image/png" href="/public/frontend/images/favicon/favicon-64x64.png" sizes="64x64">
    <link rel="icon" type="image/png" href="/public/frontend/images/favicon/favicon-96x96.png" sizes="96x96">
    <link rel="icon" type="image/png" href="/public/frontend/images/favicon/favicon-128x128.png" sizes="128x128">
    <link rel="icon" type="image/png" href="/public/frontend/images/favicon/favicon-192x192.png" sizes="192x192">
    <link rel="icon" type="image/png" href="/public/frontend/images/favicon/favicon-256x256.png" sizes="256x256">
    <link rel="icon" type="image/png" href="/public/frontend/images/favicon/favicon-384x384.png" sizes="384x384">
    <link rel="icon" type="image/png" href="/public/frontend/images/favicon/favicon-512x512.png" sizes="512x512">
    <link rel="apple-touch-icon" type="image/png" href="/public/frontend/images/favicon/favicon-180x180.png">
    <meta name="msapplication-TileImage" content="/public/frontend/images/favicon/favicon-270x270.png">

    <!-- PWA Manifest -->
    <link rel="manifest" href="/manifest.json">
    <meta name="theme-color" content="#ff6740">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="apple-mobile-web-app-title" content="MangaBall">
    <meta name="mobile-web-app-capable" content="yes">

    <link rel="preconnect" href="https://bulbasaur.poke-black-and-white.net" crossorigin="">
    <!-- / Favicon -->
    <!-- Stylesheets -->
    <link href="/public/vendors/bootstrap-5.3.6/css/bootstrap.min.css" rel="stylesheet">
    <!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"> -->
    <!-- <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet"> -->
    <link href="/public/vendors/font-awesome/css/all.min.css" rel="stylesheet">
    <!-- <link href="css/style.css" rel="stylesheet"> -->
    <!-- <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script> -->
    <script src="/public/vendors/jquery/jquery-3.6.0.min.js"></script>
    <!-- <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script> -->
    <script src="/public/vendors/bootstrap-5.3.6/js/bootstrap.bundle.min.js"></script>
    <!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet"> -->
    <link href="/public/vendors/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <!-- <link href="https://cdn.jsdelivr.net/npm/tom-select@2.3.1/dist/css/tom-select.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/tom-select@2.3.1/dist/js/tom-select.complete.min.js"></script> -->

    <link href="/public/vendors/tom-select/tom-select.css" rel="stylesheet">
    <script src="/public/vendors/tom-select/tom-select.complete.min.js"></script>

    <!-- Owl Carousel CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/assets/owl.carousel.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/assets/owl.theme.default.min.css">

    <!-- Owl Carousel JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js"></script>

    <script src="/public/js/skeleton.js"></script>
    <script src="/public/js/renderhtml.js"></script>
    <script src="/public/js/chapter.js"></script><div id="swal-dark-css">
<style>
.swal-dark-popup {
    background-color: #2d3748 !important;
    color: #ffffff !important;
}

.swal-dark-popup .swal2-title {
    color: #ffffff !important;
}

.swal-dark-popup .swal2-content {
    color: #e2e8f0 !important;
}

.swal-dark-select {
    background-color: #4a5568 !important;
    color: #ffffff !important;
    border: 1px solid #718096 !important;
}

.swal-dark-select:focus {
    border-color: #4299e1 !important;
    box-shadow: 0 0 0 0.2rem rgba(66, 153, 225, 0.25) !important;
}
</style>
</div>
    <script src="/public/js/comments.js"></script>
    <script src="/public/vendors/sweetalert2/sweetalert2.all.min.js"></script><style>:root{--swal2-outline: 0 0 0 3px rgba(100, 150, 200, 0.5);--swal2-container-padding: 0.625em;--swal2-backdrop: rgba(0, 0, 0, 0.4);--swal2-backdrop-transition: background-color 0.1s;--swal2-width: 32em;--swal2-padding: 0 0 1.25em;--swal2-border: none;--swal2-border-radius: 0.3125rem;--swal2-background: white;--swal2-color: #545454;--swal2-show-animation: swal2-show 0.3s;--swal2-hide-animation: swal2-hide 0.15s forwards;--swal2-icon-zoom: 1;--swal2-icon-animations: true;--swal2-title-padding: 0.8em 1em 0;--swal2-html-container-padding: 1em 1.6em 0.3em;--swal2-input-border: 1px solid #d9d9d9;--swal2-input-border-radius: 0.1875em;--swal2-input-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.06), 0 0 0 3px transparent;--swal2-input-background: transparent;--swal2-input-transition: border-color 0.2s, box-shadow 0.2s;--swal2-input-hover-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.06), 0 0 0 3px transparent;--swal2-input-focus-border: 1px solid #b4dbed;--swal2-input-focus-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.06), 0 0 0 3px $swal2-outline-color;--swal2-progress-step-background: #add8e6;--swal2-validation-message-background: #f0f0f0;--swal2-validation-message-color: #666;--swal2-footer-border-color: #eee;--swal2-footer-background: transparent;--swal2-footer-color: inherit;--swal2-close-button-position: initial;--swal2-close-button-inset: auto;--swal2-close-button-font-size: 2.5em;--swal2-close-button-color: #ccc;--swal2-close-button-transition: color 0.2s, box-shadow 0.2s;--swal2-close-button-outline: initial;--swal2-close-button-box-shadow: inset 0 0 0 3px transparent;--swal2-close-button-focus-box-shadow: inset var(--swal2-outline);--swal2-close-button-hover-transform: none;--swal2-actions-justify-content: center;--swal2-actions-width: auto;--swal2-actions-margin: 1.25em auto 0;--swal2-actions-padding: 0;--swal2-actions-border-radius: 0;--swal2-actions-background: transparent;--swal2-action-button-transition: background-color 0.2s, box-shadow 0.2s;--swal2-action-button-hover: black 10%;--swal2-action-button-active: black 10%;--swal2-confirm-button-box-shadow: none;--swal2-confirm-button-border-radius: 0.25em;--swal2-confirm-button-background-color: #7066e0;--swal2-confirm-button-color: #fff;--swal2-deny-button-box-shadow: none;--swal2-deny-button-border-radius: 0.25em;--swal2-deny-button-background-color: #dc3741;--swal2-deny-button-color: #fff;--swal2-cancel-button-box-shadow: none;--swal2-cancel-button-border-radius: 0.25em;--swal2-cancel-button-background-color: #6e7881;--swal2-cancel-button-color: #fff;--swal2-toast-show-animation: swal2-toast-show 0.5s;--swal2-toast-hide-animation: swal2-toast-hide 0.1s forwards;--swal2-toast-border: none;--swal2-toast-box-shadow: 0 0 1px hsl(0deg 0% 0% / 0.075), 0 1px 2px hsl(0deg 0% 0% / 0.075), 1px 2px 4px hsl(0deg 0% 0% / 0.075), 1px 3px 8px hsl(0deg 0% 0% / 0.075), 2px 4px 16px hsl(0deg 0% 0% / 0.075)}[data-swal2-theme=dark]{--swal2-dark-theme-black: #19191a;--swal2-dark-theme-white: #e1e1e1;--swal2-background: var(--swal2-dark-theme-black);--swal2-color: var(--swal2-dark-theme-white);--swal2-footer-border-color: #555;--swal2-input-background: color-mix(in srgb, var(--swal2-dark-theme-black), var(--swal2-dark-theme-white) 10%);--swal2-validation-message-background: color-mix( in srgb, var(--swal2-dark-theme-black), var(--swal2-dark-theme-white) 10% );--swal2-validation-message-color: var(--swal2-dark-theme-white)}@media(prefers-color-scheme: dark){[data-swal2-theme=auto]{--swal2-dark-theme-black: #19191a;--swal2-dark-theme-white: #e1e1e1;--swal2-background: var(--swal2-dark-theme-black);--swal2-color: var(--swal2-dark-theme-white);--swal2-footer-border-color: #555;--swal2-input-background: color-mix(in srgb, var(--swal2-dark-theme-black), var(--swal2-dark-theme-white) 10%);--swal2-validation-message-background: color-mix( in srgb, var(--swal2-dark-theme-black), var(--swal2-dark-theme-white) 10% );--swal2-validation-message-color: var(--swal2-dark-theme-white)}}body.swal2-shown:not(.swal2-no-backdrop,.swal2-toast-shown){overflow:hidden}body.swal2-height-auto{height:auto !important}body.swal2-no-backdrop .swal2-container{background-color:rgba(0,0,0,0) !important;pointer-events:none}body.swal2-no-backdrop .swal2-container .swal2-popup{pointer-events:all}body.swal2-no-backdrop .swal2-container .swal2-modal{box-shadow:0 0 10px var(--swal2-backdrop)}body.swal2-toast-shown .swal2-container{box-sizing:border-box;width:360px;max-width:100%;background-color:rgba(0,0,0,0);pointer-events:none}body.swal2-toast-shown .swal2-container.swal2-top{inset:0 auto auto 50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-top-end,body.swal2-toast-shown .swal2-container.swal2-top-right{inset:0 0 auto auto}body.swal2-toast-shown .swal2-container.swal2-top-start,body.swal2-toast-shown .swal2-container.swal2-top-left{inset:0 auto auto 0}body.swal2-toast-shown .swal2-container.swal2-center-start,body.swal2-toast-shown .swal2-container.swal2-center-left{inset:50% auto auto 0;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-center{inset:50% auto auto 50%;transform:translate(-50%, -50%)}body.swal2-toast-shown .swal2-container.swal2-center-end,body.swal2-toast-shown .swal2-container.swal2-center-right{inset:50% 0 auto auto;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-start,body.swal2-toast-shown .swal2-container.swal2-bottom-left{inset:auto auto 0 0}body.swal2-toast-shown .swal2-container.swal2-bottom{inset:auto auto 0 50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-end,body.swal2-toast-shown .swal2-container.swal2-bottom-right{inset:auto 0 0 auto}@media print{body.swal2-shown:not(.swal2-no-backdrop,.swal2-toast-shown){overflow-y:scroll !important}body.swal2-shown:not(.swal2-no-backdrop,.swal2-toast-shown)>[aria-hidden=true]{display:none}body.swal2-shown:not(.swal2-no-backdrop,.swal2-toast-shown) .swal2-container{position:static !important}}div:where(.swal2-container){display:grid;position:fixed;z-index:1060;inset:0;box-sizing:border-box;grid-template-areas:"top-start     top            top-end" "center-start  center         center-end" "bottom-start  bottom-center  bottom-end";grid-template-rows:minmax(min-content, auto) minmax(min-content, auto) minmax(min-content, auto);height:100%;padding:var(--swal2-container-padding);overflow-x:hidden;transition:var(--swal2-backdrop-transition);-webkit-overflow-scrolling:touch}div:where(.swal2-container).swal2-backdrop-show,div:where(.swal2-container).swal2-noanimation{background:var(--swal2-backdrop)}div:where(.swal2-container).swal2-backdrop-hide{background:rgba(0,0,0,0) !important}div:where(.swal2-container).swal2-top-start,div:where(.swal2-container).swal2-center-start,div:where(.swal2-container).swal2-bottom-start{grid-template-columns:minmax(0, 1fr) auto auto}div:where(.swal2-container).swal2-top,div:where(.swal2-container).swal2-center,div:where(.swal2-container).swal2-bottom{grid-template-columns:auto minmax(0, 1fr) auto}div:where(.swal2-container).swal2-top-end,div:where(.swal2-container).swal2-center-end,div:where(.swal2-container).swal2-bottom-end{grid-template-columns:auto auto minmax(0, 1fr)}div:where(.swal2-container).swal2-top-start>.swal2-popup{align-self:start}div:where(.swal2-container).swal2-top>.swal2-popup{grid-column:2;place-self:start center}div:where(.swal2-container).swal2-top-end>.swal2-popup,div:where(.swal2-container).swal2-top-right>.swal2-popup{grid-column:3;place-self:start end}div:where(.swal2-container).swal2-center-start>.swal2-popup,div:where(.swal2-container).swal2-center-left>.swal2-popup{grid-row:2;align-self:center}div:where(.swal2-container).swal2-center>.swal2-popup{grid-column:2;grid-row:2;place-self:center center}div:where(.swal2-container).swal2-center-end>.swal2-popup,div:where(.swal2-container).swal2-center-right>.swal2-popup{grid-column:3;grid-row:2;place-self:center end}div:where(.swal2-container).swal2-bottom-start>.swal2-popup,div:where(.swal2-container).swal2-bottom-left>.swal2-popup{grid-column:1;grid-row:3;align-self:end}div:where(.swal2-container).swal2-bottom>.swal2-popup{grid-column:2;grid-row:3;place-self:end center}div:where(.swal2-container).swal2-bottom-end>.swal2-popup,div:where(.swal2-container).swal2-bottom-right>.swal2-popup{grid-column:3;grid-row:3;place-self:end end}div:where(.swal2-container).swal2-grow-row>.swal2-popup,div:where(.swal2-container).swal2-grow-fullscreen>.swal2-popup{grid-column:1/4;width:100%}div:where(.swal2-container).swal2-grow-column>.swal2-popup,div:where(.swal2-container).swal2-grow-fullscreen>.swal2-popup{grid-row:1/4;align-self:stretch}div:where(.swal2-container).swal2-no-transition{transition:none !important}div:where(.swal2-container)[popover]{width:auto;border:0}div:where(.swal2-container) div:where(.swal2-popup){display:none;position:relative;box-sizing:border-box;grid-template-columns:minmax(0, 100%);width:var(--swal2-width);max-width:100%;padding:var(--swal2-padding);border:var(--swal2-border);border-radius:var(--swal2-border-radius);background:var(--swal2-background);color:var(--swal2-color);font-family:inherit;font-size:1rem;container-name:swal2-popup}div:where(.swal2-container) div:where(.swal2-popup):focus{outline:none}div:where(.swal2-container) div:where(.swal2-popup).swal2-loading{overflow-y:hidden}div:where(.swal2-container) div:where(.swal2-popup).swal2-draggable{cursor:grab}div:where(.swal2-container) div:where(.swal2-popup).swal2-draggable div:where(.swal2-icon){cursor:grab}div:where(.swal2-container) div:where(.swal2-popup).swal2-dragging{cursor:grabbing}div:where(.swal2-container) div:where(.swal2-popup).swal2-dragging div:where(.swal2-icon){cursor:grabbing}div:where(.swal2-container) h2:where(.swal2-title){position:relative;max-width:100%;margin:0;padding:var(--swal2-title-padding);color:inherit;font-size:1.875em;font-weight:600;text-align:center;text-transform:none;word-wrap:break-word;cursor:initial}div:where(.swal2-container) div:where(.swal2-actions){display:flex;z-index:1;box-sizing:border-box;flex-wrap:wrap;align-items:center;justify-content:var(--swal2-actions-justify-content);width:var(--swal2-actions-width);margin:var(--swal2-actions-margin);padding:var(--swal2-actions-padding);border-radius:var(--swal2-actions-border-radius);background:var(--swal2-actions-background)}div:where(.swal2-container) div:where(.swal2-loader){display:none;align-items:center;justify-content:center;width:2.2em;height:2.2em;margin:0 1.875em;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border-width:.25em;border-style:solid;border-radius:100%;border-color:#2778c4 rgba(0,0,0,0) #2778c4 rgba(0,0,0,0)}div:where(.swal2-container) button:where(.swal2-styled){margin:.3125em;padding:.625em 1.1em;transition:var(--swal2-action-button-transition);border:none;box-shadow:0 0 0 3px rgba(0,0,0,0);font-weight:500}div:where(.swal2-container) button:where(.swal2-styled):not([disabled]){cursor:pointer}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-confirm){border-radius:var(--swal2-confirm-button-border-radius);background:initial;background-color:var(--swal2-confirm-button-background-color);box-shadow:var(--swal2-confirm-button-box-shadow);color:var(--swal2-confirm-button-color);font-size:1em}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-confirm):hover{background-color:color-mix(in srgb, var(--swal2-confirm-button-background-color), var(--swal2-action-button-hover))}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-confirm):active{background-color:color-mix(in srgb, var(--swal2-confirm-button-background-color), var(--swal2-action-button-active))}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-deny){border-radius:var(--swal2-deny-button-border-radius);background:initial;background-color:var(--swal2-deny-button-background-color);box-shadow:var(--swal2-deny-button-box-shadow);color:var(--swal2-deny-button-color);font-size:1em}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-deny):hover{background-color:color-mix(in srgb, var(--swal2-deny-button-background-color), var(--swal2-action-button-hover))}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-deny):active{background-color:color-mix(in srgb, var(--swal2-deny-button-background-color), var(--swal2-action-button-active))}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-cancel){border-radius:var(--swal2-cancel-button-border-radius);background:initial;background-color:var(--swal2-cancel-button-background-color);box-shadow:var(--swal2-cancel-button-box-shadow);color:var(--swal2-cancel-button-color);font-size:1em}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-cancel):hover{background-color:color-mix(in srgb, var(--swal2-cancel-button-background-color), var(--swal2-action-button-hover))}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-cancel):active{background-color:color-mix(in srgb, var(--swal2-cancel-button-background-color), var(--swal2-action-button-active))}div:where(.swal2-container) button:where(.swal2-styled):focus-visible{outline:none;box-shadow:var(--swal2-action-button-focus-box-shadow)}div:where(.swal2-container) button:where(.swal2-styled)[disabled]:not(.swal2-loading){opacity:.4}div:where(.swal2-container) button:where(.swal2-styled)::-moz-focus-inner{border:0}div:where(.swal2-container) div:where(.swal2-footer){margin:1em 0 0;padding:1em 1em 0;border-top:1px solid var(--swal2-footer-border-color);background:var(--swal2-footer-background);color:var(--swal2-footer-color);font-size:1em;text-align:center;cursor:initial}div:where(.swal2-container) .swal2-timer-progress-bar-container{position:absolute;right:0;bottom:0;left:0;grid-column:auto !important;overflow:hidden;border-bottom-right-radius:var(--swal2-border-radius);border-bottom-left-radius:var(--swal2-border-radius)}div:where(.swal2-container) div:where(.swal2-timer-progress-bar){width:100%;height:.25em;background:rgba(0,0,0,.2)}div:where(.swal2-container) img:where(.swal2-image){max-width:100%;margin:2em auto 1em;cursor:initial}div:where(.swal2-container) button:where(.swal2-close){position:var(--swal2-close-button-position);inset:var(--swal2-close-button-inset);z-index:2;align-items:center;justify-content:center;width:1.2em;height:1.2em;margin-top:0;margin-right:0;margin-bottom:-1.2em;padding:0;overflow:hidden;transition:var(--swal2-close-button-transition);border:none;border-radius:var(--swal2-border-radius);outline:var(--swal2-close-button-outline);background:rgba(0,0,0,0);color:var(--swal2-close-button-color);font-family:monospace;font-size:var(--swal2-close-button-font-size);cursor:pointer;justify-self:end}div:where(.swal2-container) button:where(.swal2-close):hover{transform:var(--swal2-close-button-hover-transform);background:rgba(0,0,0,0);color:#f27474}div:where(.swal2-container) button:where(.swal2-close):focus-visible{outline:none;box-shadow:var(--swal2-close-button-focus-box-shadow)}div:where(.swal2-container) button:where(.swal2-close)::-moz-focus-inner{border:0}div:where(.swal2-container) div:where(.swal2-html-container){z-index:1;justify-content:center;margin:0;padding:var(--swal2-html-container-padding);overflow:auto;color:inherit;font-size:1.125em;font-weight:normal;line-height:normal;text-align:center;word-wrap:break-word;word-break:break-word;cursor:initial}div:where(.swal2-container) input:where(.swal2-input),div:where(.swal2-container) input:where(.swal2-file),div:where(.swal2-container) textarea:where(.swal2-textarea),div:where(.swal2-container) select:where(.swal2-select),div:where(.swal2-container) div:where(.swal2-radio),div:where(.swal2-container) label:where(.swal2-checkbox){margin:1em 2em 3px}div:where(.swal2-container) input:where(.swal2-input),div:where(.swal2-container) input:where(.swal2-file),div:where(.swal2-container) textarea:where(.swal2-textarea){box-sizing:border-box;width:auto;transition:var(--swal2-input-transition);border:var(--swal2-input-border);border-radius:var(--swal2-input-border-radius);background:var(--swal2-input-background);box-shadow:var(--swal2-input-box-shadow);color:inherit;font-size:1.125em}div:where(.swal2-container) input:where(.swal2-input).swal2-inputerror,div:where(.swal2-container) input:where(.swal2-file).swal2-inputerror,div:where(.swal2-container) textarea:where(.swal2-textarea).swal2-inputerror{border-color:#f27474 !important;box-shadow:0 0 2px #f27474 !important}div:where(.swal2-container) input:where(.swal2-input):hover,div:where(.swal2-container) input:where(.swal2-file):hover,div:where(.swal2-container) textarea:where(.swal2-textarea):hover{box-shadow:var(--swal2-input-hover-box-shadow)}div:where(.swal2-container) input:where(.swal2-input):focus,div:where(.swal2-container) input:where(.swal2-file):focus,div:where(.swal2-container) textarea:where(.swal2-textarea):focus{border:var(--swal2-input-focus-border);outline:none;box-shadow:var(--swal2-input-focus-box-shadow)}div:where(.swal2-container) input:where(.swal2-input)::placeholder,div:where(.swal2-container) input:where(.swal2-file)::placeholder,div:where(.swal2-container) textarea:where(.swal2-textarea)::placeholder{color:#ccc}div:where(.swal2-container) .swal2-range{margin:1em 2em 3px;background:var(--swal2-background)}div:where(.swal2-container) .swal2-range input{width:80%}div:where(.swal2-container) .swal2-range output{width:20%;color:inherit;font-weight:600;text-align:center}div:where(.swal2-container) .swal2-range input,div:where(.swal2-container) .swal2-range output{height:2.625em;padding:0;font-size:1.125em;line-height:2.625em}div:where(.swal2-container) .swal2-input{height:2.625em;padding:0 .75em}div:where(.swal2-container) .swal2-file{width:75%;margin-right:auto;margin-left:auto;background:var(--swal2-input-background);font-size:1.125em}div:where(.swal2-container) .swal2-textarea{height:6.75em;padding:.75em}div:where(.swal2-container) .swal2-select{min-width:50%;max-width:100%;padding:.375em .625em;background:var(--swal2-input-background);color:inherit;font-size:1.125em}div:where(.swal2-container) .swal2-radio,div:where(.swal2-container) .swal2-checkbox{align-items:center;justify-content:center;background:var(--swal2-background);color:inherit}div:where(.swal2-container) .swal2-radio label,div:where(.swal2-container) .swal2-checkbox label{margin:0 .6em;font-size:1.125em}div:where(.swal2-container) .swal2-radio input,div:where(.swal2-container) .swal2-checkbox input{flex-shrink:0;margin:0 .4em}div:where(.swal2-container) label:where(.swal2-input-label){display:flex;justify-content:center;margin:1em auto 0}div:where(.swal2-container) div:where(.swal2-validation-message){align-items:center;justify-content:center;margin:1em 0 0;padding:.625em;overflow:hidden;background:var(--swal2-validation-message-background);color:var(--swal2-validation-message-color);font-size:1em;font-weight:300}div:where(.swal2-container) div:where(.swal2-validation-message)::before{content:"!";display:inline-block;width:1.5em;min-width:1.5em;height:1.5em;margin:0 .625em;border-radius:50%;background-color:#f27474;color:#fff;font-weight:600;line-height:1.5em;text-align:center}div:where(.swal2-container) .swal2-progress-steps{flex-wrap:wrap;align-items:center;max-width:100%;margin:1.25em auto;padding:0;background:rgba(0,0,0,0);font-weight:600}div:where(.swal2-container) .swal2-progress-steps li{display:inline-block;position:relative}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step{z-index:20;flex-shrink:0;width:2em;height:2em;border-radius:2em;background:#2778c4;color:#fff;line-height:2em;text-align:center}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step.swal2-active-progress-step{background:#2778c4}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step{background:var(--swal2-progress-step-background);color:#fff}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step-line{background:var(--swal2-progress-step-background)}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step-line{z-index:10;flex-shrink:0;width:2.5em;height:.4em;margin:0 -1px;background:#2778c4}div:where(.swal2-icon){position:relative;box-sizing:content-box;justify-content:center;width:5em;height:5em;margin:2.5em auto .6em;zoom:var(--swal2-icon-zoom);border:.25em solid rgba(0,0,0,0);border-radius:50%;border-color:#000;font-family:inherit;line-height:5em;cursor:default;user-select:none}div:where(.swal2-icon) .swal2-icon-content{display:flex;align-items:center;font-size:3.75em}div:where(.swal2-icon).swal2-error{border-color:#f27474;color:#f27474}div:where(.swal2-icon).swal2-error .swal2-x-mark{position:relative;flex-grow:1}div:where(.swal2-icon).swal2-error [class^=swal2-x-mark-line]{display:block;position:absolute;top:2.3125em;width:2.9375em;height:.3125em;border-radius:.125em;background-color:#f27474}div:where(.swal2-icon).swal2-error [class^=swal2-x-mark-line][class$=left]{left:1.0625em;transform:rotate(45deg)}div:where(.swal2-icon).swal2-error [class^=swal2-x-mark-line][class$=right]{right:1em;transform:rotate(-45deg)}@container swal2-popup style(--swal2-icon-animations:true){div:where(.swal2-icon).swal2-error.swal2-icon-show{animation:swal2-animate-error-icon .5s}div:where(.swal2-icon).swal2-error.swal2-icon-show .swal2-x-mark{animation:swal2-animate-error-x-mark .5s}}div:where(.swal2-icon).swal2-warning{border-color:#f8bb86;color:#f8bb86}@container swal2-popup style(--swal2-icon-animations:true){div:where(.swal2-icon).swal2-warning.swal2-icon-show{animation:swal2-animate-error-icon .5s}div:where(.swal2-icon).swal2-warning.swal2-icon-show .swal2-icon-content{animation:swal2-animate-i-mark .5s}}div:where(.swal2-icon).swal2-info{border-color:#3fc3ee;color:#3fc3ee}@container swal2-popup style(--swal2-icon-animations:true){div:where(.swal2-icon).swal2-info.swal2-icon-show{animation:swal2-animate-error-icon .5s}div:where(.swal2-icon).swal2-info.swal2-icon-show .swal2-icon-content{animation:swal2-animate-i-mark .8s}}div:where(.swal2-icon).swal2-question{border-color:#87adbd;color:#87adbd}@container swal2-popup style(--swal2-icon-animations:true){div:where(.swal2-icon).swal2-question.swal2-icon-show{animation:swal2-animate-error-icon .5s}div:where(.swal2-icon).swal2-question.swal2-icon-show .swal2-icon-content{animation:swal2-animate-question-mark .8s}}div:where(.swal2-icon).swal2-success{border-color:#a5dc86;color:#a5dc86}div:where(.swal2-icon).swal2-success [class^=swal2-success-circular-line]{position:absolute;width:3.75em;height:7.5em;border-radius:50%}div:where(.swal2-icon).swal2-success [class^=swal2-success-circular-line][class$=left]{top:-0.4375em;left:-2.0635em;transform:rotate(-45deg);transform-origin:3.75em 3.75em;border-radius:7.5em 0 0 7.5em}div:where(.swal2-icon).swal2-success [class^=swal2-success-circular-line][class$=right]{top:-0.6875em;left:1.875em;transform:rotate(-45deg);transform-origin:0 3.75em;border-radius:0 7.5em 7.5em 0}div:where(.swal2-icon).swal2-success .swal2-success-ring{position:absolute;z-index:2;top:-0.25em;left:-0.25em;box-sizing:content-box;width:100%;height:100%;border:.25em solid rgba(165,220,134,.3);border-radius:50%}div:where(.swal2-icon).swal2-success .swal2-success-fix{position:absolute;z-index:1;top:.5em;left:1.625em;width:.4375em;height:5.625em;transform:rotate(-45deg)}div:where(.swal2-icon).swal2-success [class^=swal2-success-line]{display:block;position:absolute;z-index:2;height:.3125em;border-radius:.125em;background-color:#a5dc86}div:where(.swal2-icon).swal2-success [class^=swal2-success-line][class$=tip]{top:2.875em;left:.8125em;width:1.5625em;transform:rotate(45deg)}div:where(.swal2-icon).swal2-success [class^=swal2-success-line][class$=long]{top:2.375em;right:.5em;width:2.9375em;transform:rotate(-45deg)}@container swal2-popup style(--swal2-icon-animations:true){div:where(.swal2-icon).swal2-success.swal2-icon-show .swal2-success-line-tip{animation:swal2-animate-success-line-tip .75s}div:where(.swal2-icon).swal2-success.swal2-icon-show .swal2-success-line-long{animation:swal2-animate-success-line-long .75s}div:where(.swal2-icon).swal2-success.swal2-icon-show .swal2-success-circular-line-right{animation:swal2-rotate-success-circular-line 4.25s ease-in}}[class^=swal2]{-webkit-tap-highlight-color:rgba(0,0,0,0)}.swal2-show{animation:var(--swal2-show-animation)}.swal2-hide{animation:var(--swal2-hide-animation)}.swal2-noanimation{transition:none}.swal2-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}.swal2-rtl .swal2-close{margin-right:initial;margin-left:0}.swal2-rtl .swal2-timer-progress-bar{right:0;left:auto}.swal2-toast{box-sizing:border-box;grid-column:1/4 !important;grid-row:1/4 !important;grid-template-columns:min-content auto min-content;padding:1em;overflow-y:hidden;border:var(--swal2-toast-border);background:var(--swal2-background);box-shadow:var(--swal2-toast-box-shadow);pointer-events:all}.swal2-toast>*{grid-column:2}.swal2-toast h2:where(.swal2-title){margin:.5em 1em;padding:0;font-size:1em;text-align:initial}.swal2-toast .swal2-loading{justify-content:center}.swal2-toast input:where(.swal2-input){height:2em;margin:.5em;font-size:1em}.swal2-toast .swal2-validation-message{font-size:1em}.swal2-toast div:where(.swal2-footer){margin:.5em 0 0;padding:.5em 0 0;font-size:.8em}.swal2-toast button:where(.swal2-close){grid-column:3/3;grid-row:1/99;align-self:center;width:.8em;height:.8em;margin:0;font-size:2em}.swal2-toast div:where(.swal2-html-container){margin:.5em 1em;padding:0;overflow:initial;font-size:1em;text-align:initial}.swal2-toast div:where(.swal2-html-container):empty{padding:0}.swal2-toast .swal2-loader{grid-column:1;grid-row:1/99;align-self:center;width:2em;height:2em;margin:.25em}.swal2-toast .swal2-icon{grid-column:1;grid-row:1/99;align-self:center;width:2em;min-width:2em;height:2em;margin:0 .5em 0 0}.swal2-toast .swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:1.8em;font-weight:bold}.swal2-toast .swal2-icon.swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line]{top:.875em;width:1.375em}.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:.3125em}.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:.3125em}.swal2-toast div:where(.swal2-actions){justify-content:flex-start;height:auto;margin:0;margin-top:.5em;padding:0 .5em}.swal2-toast button:where(.swal2-styled){margin:.25em .5em;padding:.4em .6em;font-size:1em}.swal2-toast .swal2-success{border-color:#a5dc86}.swal2-toast .swal2-success [class^=swal2-success-circular-line]{position:absolute;width:1.6em;height:3em;border-radius:50%}.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=left]{top:-0.8em;left:-0.5em;transform:rotate(-45deg);transform-origin:2em 2em;border-radius:4em 0 0 4em}.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=right]{top:-0.25em;left:.9375em;transform-origin:0 1.5em;border-radius:0 4em 4em 0}.swal2-toast .swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-toast .swal2-success .swal2-success-fix{top:0;left:.4375em;width:.4375em;height:2.6875em}.swal2-toast .swal2-success [class^=swal2-success-line]{height:.3125em}.swal2-toast .swal2-success [class^=swal2-success-line][class$=tip]{top:1.125em;left:.1875em;width:.75em}.swal2-toast .swal2-success [class^=swal2-success-line][class$=long]{top:.9375em;right:.1875em;width:1.375em}@container swal2-popup style(--swal2-icon-animations:true){.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-tip{animation:swal2-toast-animate-success-line-tip .75s}.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-long{animation:swal2-toast-animate-success-line-long .75s}}.swal2-toast.swal2-show{animation:var(--swal2-toast-show-animation)}.swal2-toast.swal2-hide{animation:var(--swal2-toast-hide-animation)}@keyframes swal2-show{0%{transform:scale(0.7)}45%{transform:scale(1.05)}80%{transform:scale(0.95)}100%{transform:scale(1)}}@keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(0.5);opacity:0}}@keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-0.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.8125em;width:1.5625em}}@keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(0.4);opacity:0}50%{margin-top:1.625em;transform:scale(0.4);opacity:0}80%{margin-top:-0.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0deg);opacity:1}}@keyframes swal2-rotate-loading{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes swal2-animate-question-mark{0%{transform:rotateY(-360deg)}100%{transform:rotateY(0)}}@keyframes swal2-animate-i-mark{0%{transform:rotateZ(45deg);opacity:0}25%{transform:rotateZ(-25deg);opacity:.4}50%{transform:rotateZ(15deg);opacity:.8}75%{transform:rotateZ(-5deg);opacity:1}100%{transform:rotateX(0);opacity:1}}@keyframes swal2-toast-show{0%{transform:translateY(-0.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(0.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0deg)}}@keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-0.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}</style>

    <!-- Connection Monitor for Offline Detection -->
    <script src="/public/js/connection-monitor.js"></script>

    <script>
        console.log('MangaBall');
        const CSRF_TOKEN = $('meta[name="csrf-token"]').attr('content');
        console.log(CSRF_TOKEN);
    </script>
    <!-- Google tag -->
    <!-- Google tag (gtag.js) -->
<script async="" src="https://www.googletagmanager.com/gtag/js?id=G-CKP33RWBD7"></script>
<meta name="google-site-verification" content="vVugbuXWUM_UXSbl0bLI33ZWope2n3SP0RsVaSsO7fs">
<script>
    window.dataLayer = window.dataLayer || [];

    function gtag() {
        dataLayer.push(arguments);
    }
    gtag('js', new Date());

    gtag('config', 'G-CKP33RWBD7');
</script><style>
    /* Default variables (fallback theme) */
    :root {
        --primary: #191a1c;
        --primary-rgb: 25, 26, 28;
        --secondary: #111111;
        --secondary-rgb: 17, 17, 17;
        --accent: #ffc4a4;
        --accent-rgb: 255, 196, 164;
        --background: #000000;
        --text: #e0e0e0;
        --highlight: #e6a784;
        --highlight-rgb: 230, 167, 132;
        --button: #cc8a6b;
        --button-rgb: 204, 138, 107;
    }



    .bg-accent {
        background-color: #222;
    }

    header.bg-transparent {
        border-bottom: none !important;
    }

    header.bg-dark {
        border-bottom: 1px solid #ff6740 !important;
    }

    .my-swal2-dark,
    .swal2-dark {
        background: #232323 !important;
        color: #fff !important;
    }

    .my-swal2-dark .swal2-input,
    .my-swal2-dark .swal2-textarea,
    .my-swal2-dark select.swal2-input {
        background: #232323 !important;
        color: #fff !important;
        border: 1px solid #444 !important;
        border-radius: 10px;
    }

    .my-swal2-dark .swal2-input::placeholder,
    .my-swal2-dark .swal2-textarea::placeholder {
        color: #aaa !important;
        opacity: 1;
    }

    .my-swal2-dark select.swal2-input option {
        background: #232323 !important;
        color: #fff !important;
    }

    .my-swal2-dark a {
        color: #ff6740 !important;
    }

    #commentList,
    .item-body-description,
    .item-carousel-body {
        scrollbar-width: none;
        /* Firefox */
        -ms-overflow-style: none;
        /* IE/Edge */
    }

    #commentList::-webkit-scrollbar,
    .item-body-description::-webkit-scrollbar,
    .item-carousel-body::-webkit-scrollbar {
        display: none;
        /* Chrome/Safari */
    }

    .item-body-description {
        min-width: 0;
        flex: 1 1 auto;
    }

    #seasonal-anime-container .bg-dark {
        background-color: rgba(0, 0, 0, 0.25) !important;
    }

    .translation-current {
        background: rgba(255, 103, 64, 0.1) !important;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        border: 1px solid rgba(255, 103, 64, 0.2) !important;
        font-weight: 600;
    }

    .btn {
        transition: background-color 0.2s ease, border-color 0.2s ease, color 0.2s ease;
    }

    .selected-items::after {
        font-family: 'Font Awesome 6 Pro' !important;
    }

    /* .fa{font-family: "Font Awesome 6 Pro" !important }; */
</style><style>
    .owl-carousel {
        margin-top: 1rem;
    }

    .comic-item {
        position: relative;
        transition: transform 0.3s ease;
    }

    .comic-item:hover {
        transform: translateY(-5px);
    }

    .comic-cover {
        position: relative;
        overflow: hidden;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        transition: box-shadow 0.3s ease;
        width: 100%;
        height: 200px;
        display: block;
    }

    .comic-cover:hover {
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
    }

    .comic-cover img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        object-position: center;
        transition: transform 0.3s ease;
        display: block;
    }

    .comic-cover:hover img {
        transform: scale(1.05);
    }

    .comic-overlay {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
        color: white;
        padding: 1rem 0.5rem 0.5rem;
        font-size: 0.75rem;
        font-weight: 600;
        text-align: center;
        line-height: 1.2;
    }

    .comic-rank {
        position: absolute;
        top: 0;
        left: 0;
        background: rgba(0, 0, 0, 0.8);
        color: white;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        font-size: 0.9rem;
        border-radius: 0 0 8px 0;
    }

    .rank-1 {
        background: rgba(239, 68, 68, 0.9) !important;
    }

    .rank-2 {
        background: rgba(249, 115, 22, 0.9) !important;
    }

    .rank-3 {
        background: rgba(234, 179, 8, 0.9) !important;
    }

    .owl-nav button {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
        border: none;
        border-radius: 50%;
        width: 45px;
        height: 45px;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
        transition: all 0.3s ease;
        z-index: 10;
        color: white !important;
    }

    .owl-nav button:hover {
        background: linear-gradient(135deg, #764ba2 0%, #667eea 100%) !important;
        box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6);
        transform: translateY(-50%) scale(1.1);
    }

    .owl-nav button:active {
        transform: translateY(-50%) scale(0.95);
    }

    .owl-prev {
        left: -20px;
    }

    .owl-next {
        right: -20px;
    }

    .owl-dots {
        text-align: center;
        margin-top: 1rem;
    }

    .owl-dots .owl-dot {
        background: #dee2e6;
        border-radius: 50%;
        width: 12px;
        height: 12px;
        margin: 0 4px;
        transition: all 0.3s ease;
    }

    .owl-dots .owl-dot.active,
    .owl-dots .owl-dot:hover {
        background: #007bff;
        transform: scale(1.2);
    }

    .comic-stats {
        margin-top: 0.5rem;
        font-size: 0.75rem;
        color: #6c757d;
        text-align: center;
    }

    .stats-item {
        display: inline-block;
        margin: 0 0.25rem;
    }

    .stats-item i {
        margin-right: 0.25rem;
    }

    @media (max-width: 768px) {
        .owl-nav button {
            width: 40px;
            height: 40px;
        }

        .owl-prev {
            left: -15px;
        }

        .owl-next {
            right: -15px;
        }

        .comic-cover {
            height: 200px;
        }
    }

    @media (max-width: 576px) {
        .comic-cover {
            height: 160px;
        }

        .owl-nav button {
            width: 35px;
            height: 35px;
        }

        .owl-prev {
            left: -10px;
        }

        .owl-next {
            right: -10px;
        }
    }

    .loading-skeleton {
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200% 100%;
        animation: loading 1.5s infinite;
    }

    @keyframes loading {
        0% {
            background-position: 200% 0;
        }

        100% {
            background-position: -200% 0;
        }
    }

    .adult-cover {
        filter: blur(8px);
        transition: filter 0.3s ease;
        cursor: pointer;
    }

    .adult-cover:hover {
        filter: blur(0);
    }
</style><style>.\[\&_\.gdprAdTransparencyCogWheelButton\]\:\!pjra-z-\[5\],
AD-SLOT,
DFP-AD,
[class^="adDisplay-module"],
[class^="amp-ad-"],
[data-ad-cls],
[data-adbridg-ad-class],
[data-adshim],
[data-asg-ins],
[data-block-type="ad"],
[data-cl-spot-id],
[data-css-class="dfp-inarticle"],
[data-d-ad-id],
[data-desktop-ad-id],
[data-dynamic-ads],
[data-ez-name],
[data-freestar-ad][id],
[data-id^="div-gpt-ad"],
[data-identity="adhesive-ad"],
[data-m-ad-id],
[data-mobile-ad-id],
[data-rc-widget],
[data-role="tile-ads-module"],
[data-template-type="nativead"],
[data-testid="adBanner-wrapper"],
[data-testid="ad_testID"],
[data-testid="prism-ad-wrapper"],
[data-testid^="section-AdRowBillboard"],
[data-type="ad-vertical"],
[data-wpas-zoneid],
[href$="/sexdating.php"],
[id^="ad-wrap-"],
[id^="ad_sky"],
[id^="ad_slider"],
[id^="section-ad-banner"],
[onclick^="location.href='https://1337x.vpnonly.site/"],
a-ad,
a[data-href^="http://ads.trafficjunky.net/"],
a[data-url^="https://vulpix.bet/?ref="],
a[onclick^="window.location.replace('https://random-affiliate.atimaze.com/"],
a[style="width:100%;height:100%;z-index:10000000000000000;position:absolute;top:0;left:0;"],
ad-shield-ads,
ad-slot,
app-ad,
app-advertisement,
app-large-ad,
aside[id^="adrotate_widgets-"],
atf-ad-slot,
bottomadblock,
display-ad-component,
display-ads,
div[class$="-adlabel"],
div[class^="Adstyled__AdWrapper-"],
div[data-ad-placeholder],
div[data-ad-region],
div[data-ad-wrapper],
div[data-adname],
div[data-adunit-path],
div[data-adunit],
div[data-adzone],
div[data-alias="300x250 Ad 1"],
div[data-alias="300x250 Ad 2"],
div[data-contentexchange-widget],
div[data-dfp-id],
div[data-id-advertdfpconf],
div[id^="ad-div-"],
div[id^="ad-position-"],
div[id^="adngin-"],
div[id^="adrotate_widgets-"],
div[id^="adspot-"],
div[id^="crt-"][style],
div[id^="div-ads-"],
div[id^="google_dfp_"],
div[id^="gpt_ad_"],
div[id^="lazyad-"],
div[id^="optidigital-adslot"],
div[id^="rc-widget-"],
div[id^="st"][style^="z-index: 999999999;"],
div[id^="sticky_ad_"],
div[id^="vuukle-ad-"],
div[ow-ad-unit-wrapper],
gpt-ad,
guj-ad,
hl-adsense,
img[src^="https://images.purevpnaffiliates.com"],
img[src^="https://s-img.adskeeper.com/"],
ps-connatix-module,
span[data-ez-ph-id],
span[id^="ezoic-pub-ad-placeholder-"],
topadblock,
zeus-ad,
broadstreet-zone-container,
iframe[scrolling="no"][sandbox*="allow-popups allow-modals"][style^="width: 100%; height: 100%; border: none;"],
[class^="tile-picker__CitrusBannerContainer-sc-"],
citrus-ad-wrapper,
div[id*="MarketGid"],
[onclick*="content.ad/"],
AMP-AD,
amp-ad,
amp-ad-custom,
amp-connatix-player,
amp-fx-flying-carpet,
a[data-oburl^="https://paid.outbrain.com/network/redir?"],
a[data-redirect^="https://paid.outbrain.com/network/redir?"],
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"] + .ob_source,
[data-taboola-options],
[data-testid="commercial-label-taboola"],
[data-testid^="taboola-"],
amp-embed[type="taboola"],
div[id^="taboola-stream-"],
div[id^="zergnet-widget"],
html[lang] > body.ishome > div.adult + main.main,
html[lang] > body:not([class]):not([id]):not([style]) > div.background-container > div.container > div.captcha-box,
html[lang] > body.startnew > div#sections > section#section_uname,
html[lang] > body:not([style]) > div.captchaBody,
html[lang] > body#body > * > div.cv-xwrapper > div.cvc > div.cv-inner,
html[lang] > body#body > * > div.cvh.BlockClicksActivityBusy,
html#html[sti][vic][lang] > body#allbody,
html > body > div.container.m-p > #checkbox-window.checkbox-window,
html[lang] > body:not([class]):not([id]):not([style]) > div.container > div.recaptcha-box,
body > .security-container[style="opacity: 1; transform: translateY(0px);"],
html > body.hold-transition.theme-primary.bg-img[style^="background-image"][style*="wallpaperaccess.com"][style*="background-repeat"][style*="background-size"],
html > body > div.container > form#unsubscribe-form[onsubmit="submitUnsubscribeForm(event)"],
html > body > div.content > dl > dd.dd1 > div.min_sider > form#form1[action="unsubscribe.php"],
html > body.body > div.container > div.content > form > table.optoutForm,
div[id][style^="position: fixed; inset: 0px; z-index: 2147483647; background: black"][style*="opacity: 0.01"],
div[class$="player-promo-col"],
div#spot-holder.spot-holder[style="display: block;"],
a[dontfo=""][style$="position: absolute; z-index: 2147483647;"],
[data-ad-module]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-width]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-adblockkey]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(html):not(.adsbygoogle),
[data-advadstrackid]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-manager-id]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
div[style^="z-index: 999999; background-image: url(\"data:image/gif;base64,"][style$="position: absolute;"],
a[onclick="openAuc();"],
div[style="position: fixed; display: block; width: 100%; height: 100%; inset: 0px; background-color: rgba(0, 0, 0, 0); z-index: 300000;"],
div[style^="position:fixed;inset:0px;z-index:2147483647;background:black;opacity:0.01"],
div[style^="position: fixed; inset: 0px; z-index: 2147483647; background: black; opacity: 0.01"],
iframe.lazyloaded[data-src^="https://rcm-fe.amazon-adsystem.com/"],
#player div[style$="cursor: pointer; position: absolute; width: 100%; height: 100%; padding: 1rem; z-index: 2147483647;"],
html[lang][style^="--main-bg-color"] > body:not([class]):not([id]) > div#container[style="visibility: visible;"] > div#banner[style="opacity:0"] ~ main:not([class]):not([id]) > div#message,
[onclick*="postlnk.com"],
[data-lnguri*="vipbox"],
[class^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]) { display: none !important; }

[data-ad-name],
[data-revive-zoneid],
[name^="google_ads_iframe"],
div[aria-label="Ads"],
div[data-ad-targeting],
div[id^="ad_position_"],
div[id^="dfp-ad-"],
div[id^="ezoic-pub-ad-"],
ins.adsbygoogle[data-ad-client],
ins.adsbygoogle[data-ad-slot],
[class^="s2nPlayer"],
div[id*="ScriptRoot"],
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"],
div[id^="div-gpt-"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]):not([style="pointer-events: none; height: 1px; width: 0px; opacity: 0; visibility: hidden; position: fixed; bottom: 0px;"]),
[id^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]):not([style="pointer-events: none; height: 1px; width: 0px; opacity: 0; visibility: hidden; position: fixed; bottom: 0px;"]),
div[style^="height:    250px; width:    300px;"],
div[style^="width:    160px; height:    600px; margin: 0px auto; min-width: 160px; min-height: 600px;"],
div[style^="width:    300px; height:    250px;"],
html[class^="img_"][amp4ads=""][i-amphtml-layout=""][i-amphtml-no-boilerplate=""][amp-version="2502032353000"],
html[class^="img_"][amp4ads=""][i-amphtml-layout=""][i-amphtml-no-boilerplate=""][amp-version="2507172035000"],
html[class^="img_"][amp4ads=""][i-amphtml-layout=""][i-amphtml-no-boilerplate=""][amp-version="2509031727000"],
img[height="   250"][width="   300"],
img[height="   90"][width="   728"],
ins[style$="height:    90px; width:    728px;"],
*:not(body) > a[href^="https://content-loader.com/"],
*:not(body) > a[href^="https://html-load.com/"],
*:not(body) > a[href^="https://07c225f3.online/"] { display: none !important; }</style><style>[href="https://t.me/Russia_Vs_Ukraine_War3"],
[href^="https://url.totaladblock.com/"],
[href*="uselnk.com/"],
[href*="postlnk.com"],
[href*="passtechusa.com"] { display: none !important; }</style></head>

<!-- CSS Styles for Owl Carousel -->

<body class="theme-pokemon-1">
    <h1 class="sr-only" style="display: none;">MangaBall</h1>
    
    <script>
    // Optimized: Use const instead of var
    let setting_list_view = 'split';
</script>
<!-- Header Component -->
<header class="navbar navbar-dark bg-transparent fixed-top border-bottom">
    <div class="container d-flex justify-content-between align-items-center">
        <div class="d-flex align-items-center">
            <button class="navbar-toggler border-0 me-3" type="button" data-bs-toggle="modal" data-bs-target="#navbarModal">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon" style="color: currentcolor;">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12h12M3 6h18M3 18h6"></path>
                </svg>
            </button>
            <a class="navbar-brand" href="/">
                <img src="/public/frontend/images/logo.svg" alt="MangaBall" height="40">
            </a>
        </div>
        <div class="d-flex align-items-center">
            <div class="d-flex align-items-center">
                <button class="btn btn-outline-light header-nav-btn me-2 btn-search-modal" title="Search (Ctrl+K)">
                    <i class="fas fa-search"></i>
                </button>
            </div>
            <div class="d-flex align-items-center">
                <button class="btn header-nav-btn-18plus me-2 position-relative" id="btn18Plus" title="18+ Content (OFF - Click to turn ON)">
                    <span style="font-weight: bold; font-size: 0.75rem; color: #ffc4a4;">18+</span>
                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" id="badge18Plus" style="font-size: 0.5rem;">OFF</span>
                </button>
            </div>
            <div class="d-flex align-items-center">
                <a href="/community/notifications/" class="btn btn-outline-light header-nav-btn me-2 position-relative" title="Notifications" id="notification-bell-btn">
                    <i class="fas fa-bell"></i>
                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-success notification-badge" style="font-size: 0.6rem; display: none;">
                        <span class="notification-count">0</span>
                    </span>
                </a>
            </div>
            <div class="d-flex align-items-center">
                <button class="btn btn-outline-light header-nav-btn me-2 position-relative" id="buttonUser" title="Login">
                                            <i class="fas fa-user"></i>
                                    </button>
            </div>
        </div>
    </div>
</header>
<script>
    // Optimized: Cache DOM elements and use throttled scroll
    (function() {
        'use strict';

        // Cache DOM elements
        const $navbar = document.querySelector('.navbar');
        const $document = $(document);
        const $window = $(window);

        // Throttle function for better performance
        function throttle(func, limit) {
            let inThrottle;
            return function() {
                const args = arguments;
                const context = this;
                if (!inThrottle) {
                    func.apply(context, args);
                    inThrottle = true;
                    setTimeout(() => inThrottle = false, limit);
                }
            }
        }

        // Optimized scroll handler
        const handleScroll = throttle(function() {
            if (window.scrollY > 50) {
                $navbar.classList.add('bg-dark');
                $navbar.classList.remove('bg-transparent');
            } else {
                $navbar.classList.remove('bg-dark');
                $navbar.classList.add('bg-transparent');
            }
        }, 16); // ~60fps

        // Add scroll listener
        window.addEventListener('scroll', handleScroll, {
            passive: true
        });

        // Check scroll position after page load
        $document.ready(function() {
            if (window.scrollY === 0) {
                $navbar.classList.add('bg-transparent');
                $navbar.classList.remove('bg-dark');
            } else {
                $navbar.classList.add('bg-dark');
                $navbar.classList.remove('bg-transparent');
            }
        });
    })();

    // 18+ Content Toggle
    (function() {
        'use strict';

        const btn18Plus = document.getElementById('btn18Plus');
        const icon18Plus = document.getElementById('icon18Plus');
        const badge18Plus = document.getElementById('badge18Plus');
        const cookieName = 'show18PlusContent';

        // Cookie helper functions
        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
            return null;
        }

        function setCookie(name, value, days = 365) {
            const date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            const expires = `expires=${date.toUTCString()}`;
            document.cookie = `${name}=${value};${expires};path=/`;
        }

        // Load saved state from cookie (default false if not exists)
        const cookieValue = getCookie(cookieName);
        const is18PlusEnabled = cookieValue === 'true'; // Mặc định false nếu cookie không tồn tại

        // Set initial state
        function updateButtonState(isEnabled) {
            if (isEnabled) {
                // Enabled state (BẬT)
                btn18Plus.classList.add('active');
                btn18Plus.title = '18+ Content (ON - Click to turn OFF)';

                // Update badge to ON
                badge18Plus.textContent = 'ON';
                badge18Plus.classList.remove('bg-danger');
                badge18Plus.classList.add('bg-success');
            } else {
                // Disabled state (TẮT)
                btn18Plus.classList.remove('active');
                btn18Plus.title = '18+ Content (OFF - Click to turn ON)';

                // Update badge to OFF
                badge18Plus.textContent = 'OFF';
                badge18Plus.classList.remove('bg-success');
                badge18Plus.classList.add('bg-danger');
            }
        }

        // Initialize button state
        updateButtonState(is18PlusEnabled);

        // Toggle on click
        btn18Plus.addEventListener('click', function() {
            const currentValue = getCookie(cookieName);
            const currentState = currentValue === 'true';
            const newState = !currentState;
            // Optional: Show notification
            Swal.fire({
                title: '18+ Content',
                text: newState ? 'Enabled (ON)' : 'Disabled (OFF)',
                icon: newState ? 'success' : 'error',
                confirmButtonText: 'OK'
            }).then(() => {
                // Save to cookie
                setCookie(cookieName, newState);

                // Update button appearance
                updateButtonState(newState);
                // Optional: Reload page to apply filter
                location.reload();
            });
        });
    })();
</script>
<style>
    .header-nav-btn {
        background: #232323;
        border: none;
        border-radius: 50%;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #fff;
        transition: background 0.2s, color 0.2s, box-shadow 0.2s;
        box-shadow: none;
        padding: 0;
    }

    .header-nav-btn i {
        font-size: 1rem;
    }

    .header-nav-btn:hover,
    .header-nav-btn:focus {
        background: #333;
        color: #ff6740;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.10);
        outline: none;
    }

    /* 18+ Button Custom Style */
    .header-nav-btn-18plus {
        background: rgba(255, 196, 164, 0.1);
        /* border: 1px solid rgba(255, 196, 164, 0.3); */
        border-radius: 50%;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #ffc4a4;
        transition: all 0.2s;
        box-shadow: none;
        padding: 0;
    }

    .header-nav-btn-18plus:hover,
    .header-nav-btn-18plus:focus {
        background: rgba(255, 196, 164, 0.2);
        border-color: rgba(255, 196, 164, 0.5);
        box-shadow: 0 2px 8px rgba(255, 196, 164, 0.15);
        outline: none;
    }

    .header-nav-btn-18plus.active {
        background: rgba(255, 196, 164, 0.3);
        border-color: #ffc4a4;
    }
</style>
<!-- Modal Navbar -->
<div class="modal fade" id="navbarModal" aria-labelledby="navbarModalLabel" aria-hidden="true" data-bs-backdrop="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content bg-dark">
            <div class="modal-header border-0 p-4">
                <div class="d-flex align-items-center">
                    <img src="/public/frontend/images/logo.svg" alt="MangaBall" height="40" class="me-2">
                    <span class="text-white fs-4">MangaBall</span>
                </div>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-0">
                <div class="nav-section">
                    <a href="/" class="nav-item " title="Home">
                        <i class="fas fa-home"></i>
                        <span>Home</span>
                    </a>
                </div>
                <div class="nav-section">
                    <div class="nav-header">
                        <i class="fas fa-bookmark"></i>
                        <span>Follows</span>
                    </div>
                    <a href="/offline.html" class="nav-item " title="Offline Library">
                        <i class="fas fa-download"></i>
                        <span>Offline Library</span>
                    </a>
                                            <div class="nav-item text-muted" title="Please login to use this feature">
                            <i class="fas fa-lock"></i>
                            <span>Login to view</span>
                        </div>
                                    </div>

                <div class="nav-section">
                    <div class="nav-header">
                        <i class="fas fa-book"></i>
                        <span>Titles</span>
                    </div>
                    <a href="/search-advanced/" class="nav-item " title="Advanced search">
                        <i class="fas fa-search-plus"></i>
                        <span>Advanced Search</span>
                    </a>
                    <a href="/recently-added/" class="nav-item " title="Recently added titles">
                        <i class="fas fa-plus-circle"></i>
                        <span>Recently Added</span>
                    </a>
                    <a href="/recently-updated/" class="nav-item " title="Recently updated titles">
                        <i class="fas fa-sync-alt"></i>
                        <span>Recently Updated</span>
                    </a>
                    <a href="/recently-updated-chapter/" class="nav-item " title="Recently updated chapters">
                        <i class="fas fa-file-alt"></i>
                        <span>Updated Chapters</span>
                    </a>
                    <a href="/genres/" class="nav-item " title="Manga genres">
                        <i class="fas fa-tags"></i>
                        <span>Genres</span>
                    </a>
                    <a href="/random-title/" class="nav-item active" title="Random title">
                        <i class="fas fa-random"></i>
                        <span>Random Title</span>
                    </a>
                </div>
                <div class="nav-section">
                    <div class="nav-header">
                        <i class="fas fa-users"></i>
                        <span>Groups</span>
                    </div>
                                            <div class="nav-item text-muted" title="Please login to use this feature">
                            <i class="fas fa-lock"></i>
                            <span>Login to view</span>
                        </div>
                                    </div>

                <div class="nav-section">
                    <div class="nav-header">
                        <i class="fas fa-users"></i>
                        <span>Community</span>
                    </div>
                                            <div class="nav-item text-muted" title="Please login to use this feature">
                            <i class="fas fa-lock"></i>
                            <span>Login to view</span>
                        </div>
                                    </div>

                <div class="nav-section">
                    <div class="nav-header">
                        <i class="fas fa-info-circle"></i>
                        <span>Information</span>
                    </div>

                    <a href="/article/site-rule/" class="nav-item " title="Site rules">
                        <i class="fas fa-gavel"></i>
                        <span>Site Rules</span>
                    </a>
                    <a href="/article/timeline/" class="nav-item " title="Development timeline">
                        <i class="fas fa-timeline"></i>
                        <span>Timeline</span>
                    </a>
                    <a href="/article/about-us/" class="nav-item " title="About us">
                        <i class="fas fa-users-cog"></i>
                        <span>About Us</span>
                    </a>
                </div>

                <div class="nav-footer">
                    <div class="social-links">
                        <a href="https://discord.gg/mRfJAvyksC" class="social-link" title="Discord Community">
                            <i class="fab fa-discord"></i>
                        </a>
                        <a href="javascript:void(0)" onclick="alert('Coming soon')" class="social-link" title="Twitter (Coming soon)">
                            <i class="fab fa-twitter"></i>
                        </a>
                        <a href="javascript:void(0)" onclick="alert('Coming soon')" class="social-link" title="Reddit (Coming soon)">
                            <i class="fab fa-reddit"></i>
                        </a>
                        <a href="/storage/sitemaps/sitemap-title-index.xml" class="social-link" title="Sitemap">
                            <i class="fas fa-sitemap"></i>
                        </a>
                    </div>
                    <div class="version-info text-center mt-3">
                        <div><i class="fas fa-code-branch me-1"></i>v2025.6.3</div>
                        <div><i class="fas fa-copyright me-1"></i>MangaBall 2025</div>
                        <div>
                            <a href="javascript:void(0)" onclick="alert('Terms &amp; Conditions')" class="text-muted" title="Terms of service">
                                <i class="fas fa-file-contract me-1"></i>Terms
                            </a>
                        </div>
                        <div>
                            <a href="javascript:void(0)" onclick="alert('Privacy Policy')" class="text-muted" title="Privacy policy">
                                <i class="fas fa-shield-alt me-1"></i>Privacy
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    /* Modal Animation */
    #navbarModal.modal {
        --bs-modal-margin: 0px !important;
        --bs-modal-width: 300px !important;
        --bs-modal-height: 100% !important;
        --bs-modal-padding: 0px !important;
        --bs-modal-border-radius: 0px !important;
        --bs-modal-border-color: transparent !important;
        --bs-modal-border-width: 0px !important;
    }

    .modal.fade .modal-dialog {
        transform: translateX(-100%);
        transition: transform 0.3s ease-out;
    }

    .modal.show .modal-dialog {
        transform: translateX(0);
    }

    /* Navbar Mobile Styles */
    @media (max-width: 991.98px) {
        .navbar-collapse {
            display: none;
        }
    }

    /* Modal Content Styles */
    #navbarModal {
        width: 300px !important;
        height: 100% !important;
        margin: 0px !important;
        padding: 0px !important;
    }

    #navbarModal .modal-content {
        background-color: #2f3136;
        height: 100%;
        border-radius: 0px !important;
        overflow: hidden !important;
    }

    #navbarModal .modal-body {
        overflow: hidden !important;
    }

    #navbarModal .modal-dialog {
        overflow: hidden !important;
    }

    #navbarModal .nav-link {
        padding: 1rem 0;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    #navbarModal .nav-link:hover {
        color: var(--bs-primary) !important;
    }

    #navbarModal .search-box input {
        background-color: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    #navbarModal .search-box input:focus {
        background-color: rgba(255, 255, 255, 0.15);
        border-color: var(--bs-primary);
        color: white;
    }

    /* Navbar Toggler Styles */
    .navbar-toggler {
        padding: 0;
        display: flex;
        align-items: center;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #fff;
        transition: background 0.2s, color 0.2s, box-shadow 0.2s;
    }

    .navbar-toggler:hover {
        background-color: #222;
        border-radius: 50%;
        transition: all 0.2s;
    }

    .navbar-toggler:focus {
        box-shadow: none;
    }

    .navbar-toggler .icon {
        color: white;
        transition: color 0.2s;
    }

    .navbar-toggler:hover .icon {
        color: var(--bs-primary);
    }

    /* Ẩn toggler trên desktop */
    @media (min-width: 992px) {
        .navbar-toggler {
            display: block;
        }
    }

    .nav-section {
        padding: 1rem 1.5rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .nav-header {
        color: #fff;
        font-size: 1.1rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .nav-item {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        font-size: .875rem;
        padding: 0.375rem 0.5rem;
        font-weight: 500;
        color: rgba(255, 255, 255, 0.8);
        text-decoration: none;
        border-radius: 0.5rem;
        transition: all 0.2s;
        margin-bottom: 0.25rem;
    }

    .nav-item:hover {
        background-color: rgba(255, 255, 255, 0.1);
        color: #fff;
    }

    .nav-item.active {
        background-color: #ff6740;
        color: #fff;
    }

    .nav-footer {
        padding: 2rem 1.5rem;
        margin-top: auto;
    }

    .social-links {
        display: flex;
        justify-content: center;
        gap: 1.5rem;
    }

    .social-link {
        color: rgba(255, 255, 255, 0.8);
        font-size: 1.5rem;
        transition: color 0.2s;
    }

    .social-link:hover {
        color: #ff6740;
    }

    .version-info {
        color: rgba(255, 255, 255, 0.6);
        font-size: 0.9rem;
    }

    .version-info a {
        text-decoration: none;
        color: inherit;
    }

    .version-info a:hover {
        color: #ff6740;
    }

    #navbarModal,
    #navbarModal .modal-content,
    #navbarModal .modal-body,
    #navbarModal .modal-dialog {
        scrollbar-width: none;
        /* Firefox */
        -ms-overflow-style: none;
        /* IE 10+ */
    }

    #navbarModal,
    #navbarModal .modal-content::-webkit-scrollbar,
    #navbarModal .modal-body::-webkit-scrollbar,
    #navbarModal .modal-dialog::-webkit-scrollbar {
        display: none;
        /* Chrome, Safari, Opera */
    }
</style>
<!-- Search Bar Overlay (Custom) -->
<div id="searchBarOverlayBg" style="display:none; position:fixed; inset:0; z-index:1199; background:rgba(20,20,20,0.7); transition:opacity 0.2s;">
</div>
<div id="searchBarOverlay">
    <div id="searchBarOverlayInput">
        <input id="searchBarInput" type="text" class="form-control bg-dark text-white border-0" placeholder="Search">
        <button id="clearSearchBarInput" class="btn btn-link text-white ms-2 p-0 d-none" style="font-size:1.25rem;" tabindex="-1"><i class="fas fa-times-circle"></i></button>
        <span class="ms-3 d-flex align-items-center">
            <kbd class="bg-secondary text-white px-2 py-1 rounded">Ctrl</kbd>
            <kbd class="bg-secondary text-white px-2 py-1 rounded ms-1">K</kbd>
        </span>
        <button id="closeSearchBar" class="btn btn-link text-white ms-3 p-0" tabindex="-1"><i class="fas fa-times"></i></button>
    </div>
    <div id="smartSearchBox" class="bg-dark text-white shadow p-3 mt-2 mx-auto">
    </div>
</div>
<script>
    // Optimized: Cache DOM elements and improve debouncing
    (function() {
        'use strict';

        // Cache DOM elements
        const $searchBarOverlayBg = $('#searchBarOverlayBg');
        const $searchBarOverlay = $('#searchBarOverlay');
        const $searchBarInput = $('#searchBarInput');
        const $clearSearchBarInput = $('#clearSearchBarInput');
        const $smartSearchBox = $('#smartSearchBox');
        const $document = $(document);

        // Optimized debounce function
        function debounce(func, wait, immediate) {
            let timeout;
            return function executedFunction() {
                const context = this;
                const args = arguments;
                const later = function() {
                    timeout = null;
                    if (!immediate) func.apply(context, args);
                };
                const callNow = immediate && !timeout;
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
                if (callNow) func.apply(context, args);
            };
        }

        // Optimized search functions
        const showSearchBarOverlay = function() {
            $searchBarOverlayBg.fadeIn(120);
            $searchBarOverlay.fadeIn(120);
            setTimeout(() => $searchBarInput.focus(), 200);
        };

        const hideSearchBarOverlay = function() {
            $searchBarOverlayBg.fadeOut(120);
            $searchBarOverlay.fadeOut(120);
        };

        // Optimized event listeners with delegation
        $document.ready(function() {
            // Open search bar
            $document.on('click', '.btn-search-modal', function(e) {
                e.preventDefault();
                showSearchBarOverlay();
            });

            // Close search bar
            $('#closeSearchBar').on('click', hideSearchBarOverlay);

            // Close search bar when press ESC or Ctrl+K
            $document.on('keydown', function(e) {
                if ($searchBarOverlay.is(':visible') && e.key === 'Escape') {
                    hideSearchBarOverlay();
                }
                // Ctrl+K shortcut
                if ((e.ctrlKey || e.metaKey) && e.key.toLowerCase() === 'k') {
                    e.preventDefault();
                    showSearchBarOverlay();
                }
            });

            // Close search bar when click outside
            $document.on('mousedown', function(e) {
                if ($searchBarOverlay.is(':visible')) {
                    if (!$(e.target).closest('#searchBarOverlay > div').length) {
                        hideSearchBarOverlay();
                    }
                }
            });

            // Optimized search input with debouncing
            const debouncedSearch = debounce(function(val) {
                if (val.length > 1) {
                    smartSearch(val);
                    $clearSearchBarInput.removeClass('d-none');
                    $smartSearchBox.show();
                } else {
                    $clearSearchBarInput.addClass('d-none');
                    $smartSearchBox.hide();
                    $smartSearchBox.html('<div class="text-center text-secondary py-4">Fill in the search box to search</div>');
                }
            }, 300);

            $searchBarInput.on('input', function() {
                debouncedSearch($(this).val());
            });

            $clearSearchBarInput.on('click', function() {
                $searchBarInput.val('').trigger('input').focus();
            });
        });
        // Optimized smart search with cached CSRF token
        const csrfToken = $('meta[name="csrf-token"]').attr('content');

        const smartSearch = function(val) {
            showLoading();

            // Optimized AJAX call with error handling
            $.ajax({
                url: '/api/v1/smart-search/search/',
                type: 'POST',
                data: {
                    search_input: val
                },
                headers: {
                    'X-CSRF-TOKEN': csrfToken
                },
                timeout: 10000, // 10 second timeout
                success: function(response) {
                    hideLoading();
                    if (response?.code === 200) {
                        $smartSearchBox.html(renderSmartSearchAll(response.data));
                    } else {
                        $smartSearchBox.html('<div class="text-center text-secondary py-4">No results found.</div>');
                    }
                },
                error: function(xhr, status, error) {
                    hideLoading();
                    const errorMsg = status === 'timeout' ?
                        'Request timeout. Please try again.' :
                        'Reload page to try again.';
                    $smartSearchBox.html(`<div class="text-center text-secondary py-4">${errorMsg}</div>`);
                }
            });
        };
        // Optimized render functions with template caching
        const renderSmartSearchTitles = function(titles) {
            if (!titles?.length) {
                return '<div class="text-center text-secondary py-4">No results found.</div>';
            }
            return titles.map(renderSmartSearchTitle).join('');
        };

        const renderSectionHeader = function(label, link) {
            return `
        <div class="d-flex justify-content-between align-items-center mt-4 mb-2">
            <h6 class="text-white m-0">${label}</h6>
            <a href="${link}" class="text-secondary text-decoration-none small">
                See more <i class="fas fa-arrow-right"></i>
            </a>
        </div>
    `;
        };

        const renderSmartSearchTitle = function(title) {
            return `<div class="d-flex align-items-center mb-3 p-2 bg-secondary bg-opacity-10 rounded-3 smartsearch-item" onclick="window.location.href='${title.url}'">
                    <img src="${title.img}" alt="cover" class="rounded-2 me-3" style="width:56px;height:56px;object-fit:cover;">
                    <div class="flex-grow-1">
                        <div class="fw-bold text-white text-truncate" style="font-size:1.1rem;max-width:320px;">${title.title}</div>    
                        <div class="d-flex align-items-center gap-3 mt-1 small text-secondary">
                            <span><i class="fas fa-star text-danger"></i> ${title.rating}</span>
                            <span><i class="fas fa-bookmark"></i> ${title.followers}</span>
                            <span><i class="fas fa-eye"></i> ${title.views}</span>
                        </div>
                        ${title.status}
                    </div>
                </div>`;
        };

        const renderSmartSearchAll = function(results) {
            const val = $searchBarInput.val().trim();
            const searchUrl = `/search-advanced?search_input=${encodeURIComponent(val)}`;
            let html = '';

            if (results.manga?.length > 0) {
                html += renderSectionHeader('📘 Manga', searchUrl);
                html += results.manga.map(renderSmartSearchTitle).join('');
            }

            if (results.authors) {
                html += renderSectionHeader('👤 Author', searchUrl);
                html += results.authors;
            }

            if (results.tags) {
                html += renderSectionHeader('🏷 Tags', searchUrl);
                html += results.tags;
            }

            return html || '<div class="text-center text-secondary py-4">No results found.</div>';
        };
    })();
</script>
<style>
    #searchBarOverlay {
        pointer-events: none;
        display: none;
        position: fixed;
        top: 10px;
        left: 0;
        right: 0;
        z-index: 1200;
        pointer-events: none;
    }

    #searchBarOverlayInput {
        max-width: 600px;
        margin: 0 auto;
        background: #232323;
        border-radius: 8px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
        padding: 0.5rem 1rem;
        display: flex;
        align-items: center;
        pointer-events: auto;
        position: relative;
    }

    #searchBarInput {
        font-size: 14px;
        background: #232323;
        border-radius: 12px;
        box-shadow: none;
        outline: none;
        border: none;
        flex: 1;
    }

    #searchBarOverlay>div {
        pointer-events: auto;
    }

    #searchBarInput::placeholder {
        color: #bbb;
        opacity: 1;
    }

    #searchBarOverlay kbd {
        font-size: 12px;
        font-family: inherit;
        background: #444;
        border: none;
    }

    #closeSearchBar {
        color: #fff;
        opacity: 0.7;
        transition: opacity 0.2s;
    }

    #closeSearchBar:hover {
        opacity: 1;
    }

    #clearSearchBarInput {
        color: #fff;
        opacity: 0.7;
        transition: opacity 0.2s;
    }

    #clearSearchBarInput:hover {
        opacity: 1;
    }

    #smartSearchBox {
        background: #232323;
        border-radius: 8px;
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
        font-size: 1.1rem;
        overflow-y: auto;
        max-height: 70vh;
        max-width: 600px;
        min-height: 40px;
        display: none;
        position: relative;
    }

    .smartsearch-item {
        transition: background 0.2s;
        cursor: pointer;
    }

    .smartsearch-item:hover {
        background: #333 !important;
    }

    #searchBarInput:focus {
        border: 2px solid #ff6740 !important;
        box-shadow: 0 0 0 2px #ff674033 !important;
    }

    @keyframes pulseZoom {
        0% {
            transform: scale(0.8);
        }

        50% {
            transform: scale(1.2);
        }

        100% {
            transform: scale(0.8);
        }
    }

    @keyframes shake {

        0%,
        100% {
            transform: translateX(0);
        }

        25% {
            transform: translateX(-2px);
        }

        50% {
            transform: translateX(2px);
        }

        75% {
            transform: translateX(-1px);
        }
    }

    .pulse-avatar {
        animation: pulseZoom 2s infinite ease-in-out;
        transition: transform 0.3s ease;
    }
</style>

<!-- User Dropdown Modal -->
<div id="userDropdownOverlay" style="display:none; position:fixed; inset:0; z-index:1198;"></div>
<div id="userDropdown">
    <div class="user-dropdown-content bg-dark text-white rounded-4 shadow-lg p-4">
        <div class="text-center mb-3">
            <div class="user-avatar mx-auto mb-2">
                                    <i class="fas fa-user-circle" style="font-size:3rem; color: #ff6740;"></i>
                            </div>
            <div class="fw-bold fs-4">
                <i class="fas fa-user me-2"></i>
                Guest            </div>
        </div>
        
        <hr class="my-3" style="border-color: #fff">
        <div class="mb-3 d-flex align-items-center gap-3">
            <button class="btn btn-outline-light btn-settings" style="background: transparent; border: none; border-radius: 10px; padding: 0.5rem 1rem; font-size: 1.2rem; font-weight: 600;" onclick="window.location.href='/user/settings/'" onmouseover="this.style.backgroundColor='#333'" onmouseout="this.style.backgroundColor='transparent'" disabled="" title="Account settings">
                <i class="fas fa-cog"></i>
                <span class="fw-bold">Settings</span>
            </button>
            <button class="btn btn-outline-light btn-settings" style="background: transparent; border: none; border-radius: 10px; padding: 0.5rem 1rem; font-size: 1.2rem; font-weight: 600;" onclick="window.location.href='/user/settings/'" onmouseover="this.style.backgroundColor='#333'" onmouseout="this.style.backgroundColor='transparent'" disabled="" title="Change theme">
                <i class="fas fa-palette"></i>
                <span class="fw-bold">Theme</span>
            </button>
        </div>
        <div class="mb-3 d-flex align-items-center gap-3">
            <i class="fas fa-language"></i>
            <span class="fw-bold">Interface Language</span>
            <span class="badge bg-danger ms-2">BETA</span>
        </div>
        <div class="mb-3 d-flex align-items-center gap-3 text-secondary">
            <i class="fas fa-globe"></i>
            <span>Chapter Languages</span>
            <span class="badge bg-secondary bg-opacity-25 ms-auto">All</span>
        </div>
        <div class="mb-4 d-flex align-items-center gap-3 text-secondary">
            <i class="fas fa-filter"></i>
            <span>Content Filter</span>
        </div>
        <hr class="my-3" style="border-color:rgba(255,255,255,0.1);">
                    <button class="btn w-100 mb-2" style="background:#ff6740; color:#fff; font-weight:600; font-size:1.2rem; border-radius:10px;" onclick="window.location.href='/auth/login/'" title="Login">
                <i class="fas fa-sign-in-alt me-2"></i>Login
            </button>
            </div>
</div>
<style>
    #userDropdownOverlay {
        background: rgba(20, 20, 20, 0.7);
        transition: opacity 0.2s;
    }

    .user-dropdown-content {
        min-width: 320px;
        max-width: 90vw;
        background: #232323;
        border-radius: 18px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
    }

    .user-avatar {
        width: 64px;
        height: 64px;
        background: #232323;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        border: 2px solid #444;
    }

    #userDropdown {
        display: none;
        position: fixed;
        z-index: 1300;
        min-width: 340px;
        max-width: 90vw;
        right: 10px;
    }

    #userDropdown hr {
        border-top-width: 1.5px;
    }

    #userDropdown .btn {
        background: #ff6740;
        color: #fff;
        font-weight: 600;
        font-size: 1.2rem;
        border-radius: 10px;
        border: none;
    }

    #userDropdown .btn:hover {
        background: #ff4500;
    }

    #userDropdown .badge {
        font-size: 0.85rem;
        font-weight: 600;
    }
</style>
<script>
    // Optimized user dropdown functionality
    (function() {
        'use strict';

        // Cache DOM elements
        const $userBtn = $('#buttonUser');
        const $userDropdown = $('#userDropdown');
        const $userDropdownOverlay = $('#userDropdownOverlay');
        const $document = $(document);
        const $window = $(window);

        // Optimized dropdown functions
        const showUserDropdown = function() {
            $userDropdown.css({
                top: '70px',
                display: 'block'
            });
            $userDropdownOverlay.show();
        };

        const hideUserDropdown = function() {
            $userDropdown.hide();
            $userDropdownOverlay.hide();
        };

        // Throttle function for scroll events
        function throttle(func, limit) {
            let inThrottle;
            return function() {
                const args = arguments;
                const context = this;
                if (!inThrottle) {
                    func.apply(context, args);
                    inThrottle = true;
                    setTimeout(() => inThrottle = false, limit);
                }
            }
        }

        // Optimized scroll handler
        const handleScroll = throttle(function() {
            if ($userDropdown.is(':visible')) {
                hideUserDropdown();
            }
        }, 16);

        $document.ready(function() {
            // Toggle dropdown
            $userBtn.on('click', function(e) {
                e.preventDefault();
                if ($userDropdown.is(':visible')) {
                    hideUserDropdown();
                } else {
                    showUserDropdown();
                }
            });

            // Close dropdown when click outside
            $document.on('mousedown', function(e) {
                if ($userDropdown.is(':visible')) {
                    if (!$(e.target).closest('#userDropdown, .header-nav-btn').length) {
                        hideUserDropdown();
                    }
                }
            });

            // Close dropdown when press ESC
            $document.on('keydown', function(e) {
                if ($userDropdown.is(':visible') && e.key === 'Escape') {
                    hideUserDropdown();
                }
            });

            // Close dropdown when scroll
            $window.on('scroll', handleScroll);

            // Close dropdown when modal backdrop clicked
            $('.modal-backdrop').on('click', function() {
                if ($userDropdown.is(':visible')) {
                    hideUserDropdown();
                }
            });

            // Check notification status
            checkNotificationStatus();
        });

        // Function to check notification status
        function checkNotificationStatus() {
            $.ajax({
                url: "/api/v1/notification/status/",
                type: 'GET',
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                success: function(response) {
                    if (response.code === 200) {
                        const unreadCount = response.data.unread_count;
                        const hasUnread = response.data.has_unread;
                        const $badge = $('.notification-badge');
                        const $count = $('.notification-count');

                        // Get previous unread count from localStorage
                        const previousUnreadCount = parseInt(localStorage.getItem('previousUnreadCount') || '0');

                        // Check if there are new notifications
                        const hasNewNotifications = unreadCount > previousUnreadCount && unreadCount > 0;

                        if (hasUnread && unreadCount > 0) {
                            $count.text(unreadCount > 99 ? '99+' : unreadCount);
                            $badge.show();

                            // Add pulsing animation for new notifications
                            $badge.addClass('animate__animated animate__pulse');

                            // Show toast for new notifications
                            if (hasNewNotifications) {
                                showNewNotificationToast(unreadCount);
                            }
                        } else {
                            $badge.hide();
                            $badge.removeClass('animate__animated animate__pulse');
                        }

                        // Update previous count
                        localStorage.setItem('previousUnreadCount', unreadCount.toString());
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Failed to check notification status:', error);
                }
            });
        }

        // Function to show new notification toast
        function showNewNotificationToast(unreadCount) {
            const notificationText = unreadCount === 1 ?
                'You have 1 new unread notification' :
                `You have ${unreadCount} new unread notifications`;

            // Create toast element
            const toastHtml = `
                <div class="toast-notification" style="
                    position: fixed;
                    top: 80px;
                    right: 20px;
                    z-index: 9999;
                    background: linear-gradient(135deg, #ff6740 0%, #ff4500 100%);
                    color: white;
                    padding: 0.75rem 1rem;
                    border-radius: 8px;
                    box-shadow: 0 4px 16px rgba(255, 103, 64, 0.4);
                    cursor: pointer;
                    transition: all 0.3s ease;
                    max-width: 280px;
                    animation: slideInRight 0.3s ease-out;
                ">
                    <div style="display: flex; align-items: center; gap: 0.6rem;">
                        <div class="toast-icon" style="font-size: 1.2rem;">🔔</div>
                        <div style="flex: 1;">
                            <div class="toast-title" style="font-weight: 600; margin-bottom: 0.1rem; font-size: 0.9rem;">New Notification!</div>
                            <div class="toast-text" style="font-size: 0.8rem; opacity: 0.95;">${notificationText}</div>
                        </div>
                        <button class="toast-close" style="
                            background: none;
                            border: none;
                            color: white;
                            font-size: 1rem;
                            cursor: pointer;
                            opacity: 0.7;
                            transition: opacity 0.2s;
                            padding: 0;
                            width: 20px;
                            height: 20px;
                            display: flex;
                            align-items: center;
                            justify-content: center;
                        ">&times;</button>
                    </div>
                </div>
            `;

            // Add CSS animation if not exists
            if (!document.querySelector('#toast-animations')) {
                const style = document.createElement('style');
                style.id = 'toast-animations';
                style.textContent = `
                    @keyframes slideInRight {
                        from {
                            transform: translateX(100%);
                            opacity: 0;
                        }
                        to {
                            transform: translateX(0);
                            opacity: 1;
                        }
                    }
                    @keyframes slideOutRight {
                        from {
                            transform: translateX(0);
                            opacity: 1;
                        }
                        to {
                            transform: translateX(100%);
                            opacity: 0;
                        }
                    }
                    
                    /* Mobile responsive toast */
                    @media (max-width: 768px) {
                        .toast-notification {
                            top: 70px !important;
                            right: 10px !important;
                            left: 10px !important;
                            max-width: none !important;
                            padding: 0.6rem 0.8rem !important;
                            border-radius: 6px !important;
                        }
                        .toast-notification .toast-icon {
                            font-size: 1rem !important;
                        }
                        .toast-notification .toast-title {
                            font-size: 0.8rem !important;
                        }
                        .toast-notification .toast-text {
                            font-size: 0.75rem !important;
                        }
                        .toast-notification .toast-close {
                            font-size: 0.9rem !important;
                            width: 18px !important;
                            height: 18px !important;
                        }
                    }
                `;
                document.head.appendChild(style);
            }

            // Add toast to body
            $('body').append(toastHtml);

            // Handle click to go to notifications
            $('.toast-notification').on('click', function(e) {
                if (!$(e.target).hasClass('toast-close')) {
                    window.location.href = '/community/notifications/';
                }
            });

            // Handle close button
            $('.toast-close').on('click', function(e) {
                e.stopPropagation();
                hideToast();
            });

            // Auto hide after 5 seconds
            setTimeout(hideToast, 5000);

            // Hover effects
            $('.toast-notification').hover(
                function() {
                    $(this).css('transform', 'translateX(-5px)');
                },
                function() {
                    $(this).css('transform', 'translateX(0)');
                }
            );
        }

        // Function to hide toast
        function hideToast() {
            const $toast = $('.toast-notification');
            if ($toast.length) {
                $toast.css('animation', 'slideOutRight 0.3s ease-out');
                setTimeout(() => {
                    $toast.remove();
                }, 300);
            }
        }

        // Check notification status every 30 seconds
        setInterval(checkNotificationStatus, 60000);
    })();
</script>    
                        <!-- Featured Comic Showcase -->
<section class="featured-comic-carousel position-relative" style="background: linear-gradient(90deg, rgba(30,30,30,0.95) 40%, rgba(30,30,30,0.7) 100%), url('https://bulbasaur.poke-black-and-white.net/covers/6851547b702284f834178357/cover_1752077533539.jpg') center/cover no-repeat; min-height: 400px; padding-top: 40px;">
    <div class="container pt-5 pb-3">
        <div id="featuredComicsCarousel" class="carousel slide" data-bs-ride="carousel">
            <div class="carousel-inner">
                <div class="carousel-item active">
                    <div class="row align-items-center">
                        <div class="col-md-4 col-lg-3 mb-4 mb-md-0 d-flex justify-content-center">
                            <img src="https://bulbasaur.poke-black-and-white.net/covers/6851547b702284f834178357/cover_1752077533539.jpg" alt="Manga Cover" class="img-fluid rounded shadow-lg featured-cover " style="max-width: 215px; aspect-ratio: 215/307;">
                        </div>
                        <div class="col-md-8 col-lg-9 text-white" id="comicDetail">
                            <div class="comic-detail-card p-4 rounded-4 shadow-lg position-relative bg-dark bg-opacity-75" style="backdrop-filter: blur(6px);">
                                <div class="d-flex align-items-center mb-3 gap-3 flex-wrap">
                                    <div class="d-flex align-items-center gap-2">
                                        <img src="/storage/flags/kr.webp" style="height: 18px;" alt="flag">
                                        <h4 class="fw-bold mb-0 comic-title" style="letter-spacing: 0.5px;">
                                            Revenge of the Baskerville Bloodhound                                        </h4>
                                    </div>
                                    <span class="badge bg-success me-3">Ongoing</span>                                </div>
                                <div class="d-flex flex-wrap gap-2 mb-3 align-items-center">
                                    <span class="badge bg-info bg-opacity-75"><i class="fas fa-tags me-1"></i> Tags:</span>
                                    <div class="d-flex flex-wrap gap-1"><span class="badge bg-success" onclick="window.open('/search-advanced/?tag_included_ids=685146c5f3ed681c80f257e3', '_self')" data-tag-id="685146c5f3ed681c80f257e3" style="cursor: pointer;">Action</span><span class="badge bg-info" onclick="window.open('/search-advanced/?tag_included_ids=685148cf15e8b86aae68e4de', '_self')" data-tag-id="685148cf15e8b86aae68e4de" style="cursor: pointer;">Adaptation</span><span class="badge bg-warning" onclick="window.open('/search-advanced/?tag_included_ids=685146c5f3ed681c80f257e6', '_self')" data-tag-id="685146c5f3ed681c80f257e6" style="cursor: pointer;">Adventure</span><span class="badge bg-danger" onclick="window.open('/search-advanced/?tag_included_ids=685146c5f3ed681c80f257ea', '_self')" data-tag-id="685146c5f3ed681c80f257ea" style="cursor: pointer;">Fantasy</span><span class="badge bg-success" onclick="window.open('/search-advanced/?tag_included_ids=685148d615e8b86aae68e502', '_self')" data-tag-id="685148d615e8b86aae68e502" style="cursor: pointer;">Full Color</span><span class="badge bg-info" onclick="window.open('/search-advanced/?tag_included_ids=685146c5f3ed681c80f257e8', '_self')" data-tag-id="685146c5f3ed681c80f257e8" style="cursor: pointer;">Harem</span><span class="badge bg-warning" onclick="window.open('/search-advanced/?tag_included_ids=685148d915e8b86aae68e517', '_self')" data-tag-id="685148d915e8b86aae68e517" style="cursor: pointer;">Long Strip</span><span class="badge bg-danger" onclick="window.open('/search-advanced/?tag_included_ids=685148d715e8b86aae68e509', '_self')" data-tag-id="685148d715e8b86aae68e509" style="cursor: pointer;">Magic</span><span class="badge bg-success" onclick="window.open('/search-advanced/?tag_included_ids=685148d215e8b86aae68e4f4', '_self')" data-tag-id="685148d215e8b86aae68e4f4" style="cursor: pointer;">Mystery</span><span class="badge bg-info" onclick="window.open('/search-advanced/?tag_included_ids=6851490c15e8b86aae68e5d1', '_self')" data-tag-id="6851490c15e8b86aae68e5d1" style="cursor: pointer;">Time Travel</span></div>                                </div>
                                <div class="mb-3 d-flex flex-wrap gap-2 align-items-center">
                                    <span class="badge bg-info bg-opacity-75"><i class="fas fa-signature me-1"></i> Alternate Name:</span>
                                    <div class="alternate-name-container">
                                        <div class="d-flex flex-wrap gap-1 "><span class="badge bg-success text-break" style="max-width: 100%; word-break: break-word; white-space: normal;">철혈검가 사냥개의 회귀</span><span class="badge bg-info text-break" style="max-width: 100%; word-break: break-word; white-space: normal;">Cheolhyeolgeomga Sanyanggaeui Hoegwi</span><span class="badge bg-warning text-break" style="max-width: 100%; word-break: break-word; white-space: normal;">Revenge of the Sword Clan's Hound</span><span class="badge bg-danger text-break" style="max-width: 100%; word-break: break-word; white-space: normal;">Revenge of the Iron-Blooded Sword Hound</span><span class="badge bg-success text-break" style="max-width: 100%; word-break: break-word; white-space: normal;">Regression of the Ironblade Hound</span><span class="badge bg-info text-break" style="max-width: 100%; word-break: break-word; white-space: normal;">Return of the Iron-Blooded Hound</span><span class="badge bg-warning text-break" style="max-width: 100%; word-break: break-word; white-space: normal;">Return of the Iron-Blooded Sword Hound</span><span class="badge bg-danger text-break" style="max-width: 100%; word-break: break-word; white-space: normal;">The Return of the Iron-Blood Sword Hound</span><span class="badge bg-success text-break" style="max-width: 100%; word-break: break-word; white-space: normal;">La revanche du limier des Baskerville</span><span class="badge bg-info text-break" style="max-width: 100%; word-break: break-word; white-space: normal;">O retorno do cão de caça dos Baskerville</span><span class="badge bg-warning text-break" style="max-width: 100%; word-break: break-word; white-space: normal;">A vingança do cão de caça de sangue de ferro Baskerville</span><span class="badge bg-danger text-break" style="max-width: 100%; word-break: break-word; white-space: normal;">El perro de metal</span><span class="badge bg-success text-break" style="max-width: 100%; word-break: break-word; white-space: normal;">La venganza del sabueso de la espada sangrienta</span><span class="badge bg-info text-break" style="max-width: 100%; word-break: break-word; white-space: normal;">La venganza del sabueso de sangre de hierro</span><span class="badge bg-warning text-break" style="max-width: 100%; word-break: break-word; white-space: normal;">การกลับมาของหมาล่าเนื้อตระกูลดาบเลือดเหล็ก</span><span class="badge bg-danger text-break" style="max-width: 100%; word-break: break-word; white-space: normal;">回帰した鉄血の猟犬</span><span class="badge bg-success text-break" style="max-width: 100%; word-break: break-word; white-space: normal;">铁血剑家猎犬的回归</span><span class="badge bg-info text-break" style="max-width: 100%; word-break: break-word; white-space: normal;">Demir kanlı kılıç tazısının i̇ntikamı</span><span class="badge bg-warning text-break" style="max-width: 100%; word-break: break-word; white-space: normal;">عودة الكلب ذي الدم الحديدي</span><span class="badge bg-danger text-break" style="max-width: 100%; word-break: break-word; white-space: normal;">বাস্কেরভিলের শিকারী কুকুরের প্রতিশোধ</span><span class="badge bg-success text-break" style="max-width: 100%; word-break: break-word; white-space: normal;">Return Of The Iron-Bloode...</span><span class="badge bg-info text-break" style="max-width: 100%; word-break: break-word; white-space: normal;">Месть железнокровного Пса-меченосца</span><span class="badge bg-warning text-break" style="max-width: 100%; word-break: break-word; white-space: normal;">Revenge of the Iron-Blooded Sword Hound 철혈검가 사냥개의 회귀</span><span class="badge bg-danger text-break" style="max-width: 100%; word-break: break-word; white-space: normal;">Возвращение железнокровной гончей</span><span class="badge bg-success text-break" style="max-width: 100%; word-break: break-word; white-space: normal;">Месть гончей железной крови</span><span class="badge bg-info text-break" style="max-width: 100%; word-break: break-word; white-space: normal;">Revenge of the Baskerville Bloodhound</span><span class="badge bg-warning text-break" style="max-width: 100%; word-break: break-word; white-space: normal;">La Venganza del Sabueso de Sangre de Hierro</span><span class="badge bg-danger text-break" style="max-width: 100%; word-break: break-word; white-space: normal;">Revenge Of The Iron-Blooded Sword Hound</span></div>                                    </div>
                                </div>
                                <div class="d-flex flex-wrap gap-2 mb-3 align-items-center">
                                    <span class="badge bg-secondary bg-opacity-75"><i class="fas fa-user-edit me-1"></i> Persons:</span>
                                    <div class="d-flex flex-wrap gap-1"><span class="badge bg-success" onclick="window.open('/search-advanced/?person=68514c3cd2df9377738b7c36', '_self')" data-person-id="68514c3cd2df9377738b7c36" style="cursor: pointer;">Lee Sanchaek</span><span class="badge bg-info" onclick="window.open('/search-advanced/?person=68514c3cd2df9377738b7c35', '_self')" data-person-id="68514c3cd2df9377738b7c35" style="cursor: pointer;">Legobalbasseo</span><span class="badge bg-warning" onclick="window.open('/search-advanced/?person=68514be4d2df9377738b7b86', '_self')" data-person-id="68514be4d2df9377738b7b86" style="cursor: pointer;">REDICE Studio (레드아이스 스튜디오)</span><span class="badge bg-danger" onclick="window.open('/search-advanced/?person=68514c3cd2df9377738b7c34', '_self')" data-person-id="68514c3cd2df9377738b7c34" style="cursor: pointer;">Seol Arang</span></div>                                    <span class="badge bg-info bg-opacity-75"><i class="fas fa-calendar-alt me-1"></i> Year: <b>2023</b></span>

                                    <span class="badge bg-warning bg-opacity-75"><i class="fas fa-layer-group me-1"></i><span class="totalChapters">146</span> chapters</span>
                                </div>

                                <style>
    #comicDetailButtons .comic-btn-primary {
        background: linear-gradient(135deg, #ff6740 0%, #ff8c42 100%);
        border: none;
        color: white;
        font-weight: 500;
        font-size: 0.95rem;
        border-radius: 8px;
        /* padding: 8px 16px; */
        transition: all 0.2s ease;
        box-shadow: 0 2px 8px rgba(255, 103, 64, 0.2);
        position: relative;
        overflow: hidden;
    }
    
</style>
<div class="d-flex gap-2 mt-2 flex-wrap" id="comicDetailButtons">
    <button class="btn btn-sm btn-primary shadow-sm d-flex align-items-center gap-2 comic-btn-primary" id="addLibraryBtn"><i class="fas fa-book "></i>Add to Library</button>
    <button class="btn btn-sm btn-secondary shadow-sm d-flex align-items-center gap-2" id="showRatingBtn" type="button">
        <i class="fas fa-star"></i>
    </button>
    <button class="btn btn-sm btn-secondary shadow-sm d-flex align-items-center gap-2 comic-btn-primary" id="showReadingBtn">
        <i class="fas fa-spinner fa-spin"></i>Reading...
    </button>
    <button class="btn btn-sm btn-secondary shadow-sm d-flex align-items-center gap-2" id="showReportBtn">
        <i class="fas fa-exclamation-triangle"></i>
    </button>
    <button class="btn btn-sm btn-secondary shadow-sm d-flex align-items-center gap-2" id="showShareBtn">
        <i class="fas fa-share"></i>
    </button>
    <button class="btn btn-sm btn-secondary shadow-sm d-flex align-items-center gap-2" id="showUploadChapterBtn" data-title-id="6851547b702284f834178357">
        <i class="fas fa-upload"></i>
    </button>
</div>
<script>
    let ALL_CHAPTER_READING = [];
    let ALL_CHAPTER_READING_IDS = [];
    // Update button add to library
    $(document).ready( async function() {
        updateAddLibraryBtnHtml();
        await getAllChapterReading();
    });
    // Show rating
    document.getElementById('showRatingBtn').addEventListener('click', function(e) {
        Swal.fire({
            title: 'Choose Rating',
            html: `
            <div class="list-group">
                <button class="list-group-item list-group-item-action" data-value="10">(10) Masterpiece</button>
                <button class="list-group-item list-group-item-action" data-value="9">(9) Great</button>
                <button class="list-group-item list-group-item-action" data-value="8">(8) Very Good</button>
                <button class="list-group-item list-group-item-action" data-value="7">(7) Good</button>
                <button class="list-group-item list-group-item-action" data-value="6">(6) Fine</button>
                <button class="list-group-item list-group-item-action" data-value="5">(5) Average</button>
                <button class="list-group-item list-group-item-action" data-value="4">(4) Bad</button>
                <button class="list-group-item list-group-item-action" data-value="3">(3) Very Bad</button>
                <button class="list-group-item list-group-item-action" data-value="2">(2) Horrible</button>
                <button class="list-group-item list-group-item-action" data-value="1">(1) Appalling</button>
            </div>
        `,
            showConfirmButton: false,
            showCloseButton: true,
            width: 300,
            didOpen: () => {
                document.querySelectorAll('.list-group-item').forEach(btn => {
                    btn.addEventListener('click', function() {
                        // Swal.close();
                        sendRating(this.dataset.value);
                        Swal.close();
                    });
                });
            }
        });
    });
    // Send rating to server
    function sendRating(rating) {
        showLoading();
        $.ajax({
            url: '/api/v1/rating/title/',
            type: 'POST',
            data: {
                rating: rating,
                titleId: titleId
            },
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            success: function(response) {
                hideLoading();
                if (response.code == 200) {
                    Swal.fire({
                        title: 'Rating updated successfully',
                        icon: 'success',
                        showConfirmButton: false,
                        timer: 1500
                    });
                } else {
                    Swal.fire({
                        title: response.message,
                        icon: 'error',
                        showConfirmButton: false,
                        timer: 1500
                    });
                }
            },
            error: function(xhr, status, error) {
                hideLoading();
                console.log(xhr.responseText);
                Swal.fire({
                    title: 'Rating updated failed',
                    icon: 'error',
                    showConfirmButton: false,
                    timer: 1500
                });
            }
        });
    }

    document.getElementById('showReportBtn').addEventListener('click', function(e) {
        Swal.fire({
            title: '<h5 class="mb-3 fw-bold">Reason</h5>',
            html: `
                <div class="container text-white w-100">
                    <!-- Select -->
                    <div class="mb-3">
                        <label for="reportReason" class="form-label">Report Reason</label>
                        <select class="form-select bg-dark text-white border-0" id="reportReason">
                        <option value="duplicate">Duplicate</option>
                        <option value="incorrect_volume">Incorrect or Missing Volume number</option>
                        <option value="incorrect_chapter">Incorrect or Missing Chapter number</option>
                        <option value="missing_volume">Missing Volume number</option>
                        <option value="missing_chapter">Missing Chapter number</option>
                        <option value="incorrect_information">Information is incorrect</option>
                        <option value="missing_information">Missing information</option>
                        <option value="missing_cover">Missing Cover</option>
                        <option value="troll_or_spam">Troll or Spam</option>
                        <option value="vandalism">Vandalism</option>
                        <option value="other">Other</option>
                        </select>
                    </div>

                    <!-- Textarea -->
                    <div class="mb-4">
                        <textarea class="form-control bg-dark text-white border-0" rows="6" placeholder="Additional Explanation" id="reportExplain"></textarea>
                    </div>
                </div>
                `,
            showCancelButton: true,
            showConfirmButton: true,
            confirmButtonText: '<b>Send Report</b>',
            cancelButtonText: '<b>Cancel</b>',
            focusConfirm: false,
            customClass: {
                popup: 'swal2-dark my-swal2-dark',
                confirmButton: 'comic-btn-primary',
                cancelButton: 'btn btn-secondary',
            },
            width: 700,
            padding: '2.5em 2em 2em 2em',
            preConfirm: () => {
                const reason = document.getElementById('reportReason').value;
                const explain = document.getElementById('reportExplain').value;
                if (!reason) {
                    Swal.showValidationMessage('Please select a reason!');
                    return false;
                }
                return {
                    reason,
                    explain
                };
            },
            didOpen: () => {
                // add class dark to SweetAlert2
                document.querySelector('.swal2-popup').classList.add('swal2-dark', 'my-swal2-dark');
            }
        }).then((result) => {
            if (result.isConfirmed) {
                sendReport(result.value.reason, result.value.explain);
            }
        });
    });
    // Send report to server
    function sendReport(reason, explain) {
        showLoading();
        $.ajax({
            url: '/api/v1/report/title/',
            type: 'POST',
            data: {
                reason: reason,
                explain: explain,
                titleId: titleId
            },
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            success: function(response) {
                hideLoading();
                if (response.code == 200) {
                    Swal.fire({
                        title: 'Report sent!',
                        icon: 'success',
                        showConfirmButton: false,
                        timer: 3000
                    });
                } else {
                    Swal.fire({
                        title: response.message,
                        icon: 'error',
                        showConfirmButton: false,
                        timer: 3000
                    });
                }
            },
            error: function(xhr, status, error) {
                hideLoading();
                console.log(xhr.responseText);
                Swal.fire({
                    title: 'Report sent failed',
                    icon: 'error',
                    showConfirmButton: false,
                    timer: 3000
                });
            }
        });
    }
    // Add to library
    document.getElementById('addLibraryBtn').addEventListener('click', function(e) {
        Swal.fire({
            html: `<div class="align-items-start gap-2">
                        <div class="flex-grow-1">
                            <label for="readingStatus" class="form-label fw-bold text-white">Reading Status</label>
                        </div>
                        <div class="d-flex  gap-2 align-items-center justify-content-between">
                            <div class="flex-grow-1">
                                <select class="form-select border-2 border-danger text-white bg-dark" id="readingStatus">
                                    <option value="reading">Reading</option>
                                    <option value="on_hold">On Hold</option>
                                    <option value="dropped">Dropped</option>
                                    <option value="plan_to_read">Plan to Read</option>
                                    <option value="completed">Completed</option>
                                    <option value="re_reading">Re-Reading</option>
                                </select>
                            </div>
                            <div class="d-flex align-items-center justify-content-center flex-shrink-0" style="background-color: #2e2e2e; border-radius: 6px; padding: 0.5rem 1rem;">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="notifySwitch" checked >
                                    <i class="fas fa-question-circle" style="cursor: pointer; font-size: 1.2rem;" title="Notify for new chapter"></i>
                                </div>
                            </div>
                        </div>
                        <!-- Notification button -->
                    </div>`,
            showCancelButton: true,
            showConfirmButton: true,
            confirmButtonText: '<b>Add to library</b>',
            cancelButtonText: '<b>Cancel</b>',
            focusConfirm: false,
            customClass: {
                popup: 'swal2-dark my-swal2-dark',
                confirmButton: 'comic-btn-primary',
                cancelButton: 'btn btn-secondary',
            },
            width: 700,
            padding: '2.5em 2em 2em 2em',
            preConfirm: () => {
                const readingStatus = document.getElementById('readingStatus').value;
                const notify = document.getElementById('notifySwitch').checked;
                if (!readingStatus || readingStatus == 'none' || readingStatus == '' || readingStatus == null || readingStatus == 'undefined') {
                    Swal.showValidationMessage('Please select a reading status!');
                    return false;
                }
                return {
                    readingStatus,
                    notify
                };
            },
            didOpen: () => {
                // add class dark to SweetAlert2
                document.querySelector('.swal2-popup').classList.add('swal2-dark', 'my-swal2-dark');
            }
        }).then((result) => {
            // console.log('result', result);
            if (result.isConfirmed) {
                addToLibrarySimple(result.value.readingStatus, result.value.notify);
            }
        });
    });
    // Add to library
    function addToLibrarySimple(readingStatus, notify) {
        showLoading();
        $.ajax({
            url: '/api/v1/library/add-to-library/',
            type: 'POST',
            data: {
                readingStatus: readingStatus,
                notify: notify,
                titleId: titleId
            },
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            success: function(response) {
                updateAddLibraryBtnHtml();
                hideLoading();
                if (response.code == 200) {
                    Swal.fire({
                        title: 'Title added to library',
                        icon: 'success',
                        showConfirmButton: false,
                        timer: 1500
                    });
                } else {
                    Swal.fire({
                        title: response.message,
                        icon: 'error',
                        showConfirmButton: false,
                        timer: 1500
                    });
                }
            },
            error: function(xhr, status, error) {
                hideLoading();
                console.log(xhr.responseText);
                Swal.fire({
                    title: 'Title added to library failed',
                    icon: 'error',
                    showConfirmButton: false,
                    timer: 1500
                });
            }
        });
    }
    // Update button add to library
    function updateAddLibraryBtnHtml() {
        $.ajax({
            url: '/api/v1/library/update-add-library-btn/',
            type: 'POST',
            data: {
                titleId: titleId
            },
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            success: function(response) {
                if (response.code == 200) {
                    document.getElementById('addLibraryBtn').innerHTML = response.html;
                } else {
                    document.getElementById('addLibraryBtn').innerHTML = '<i class="fas fa-book "></i>Add to Library';
                }
            },
            error: function(xhr, status, error) {
                console.log(xhr.responseText);
                document.getElementById('addLibraryBtn').innerHTML = '<i class="fas fa-book "></i>Add to Library';
            }
        });
    }
    // Show reading
    document.getElementById('showReadingBtn').addEventListener('click', async function(e) {
        $('#chapterSelectModal').modal('show');
        // Filter chapter reading from ALL_CHAPTER_READING_IDS & ALL_CHAPTERS
        await filterChapterReading(ALL_CHAPTER_READING);
    });
    // Render volume tabs html
    async function renderChaptersReading(data) {
        // Change title
        $('#chapterSelectModalLabel').html('<i class="fas fa-list me-2 text-primary"></i>History Readed');
        const $chaptersList = $('#chaptersList');
        $chaptersList.empty();
        if (data.length > 0) {
            const html = chapterHtml.renderGenerateChaptersNoVolume(data, 0, '');
            $chaptersList.append(html);
        } else {
            $chaptersList.append('<div class="text-center text-white">No chapter readed</div>');
        }

        // Set up pagination
        renderPaginationChapter({
            current_page: 1,
            last_page: Math.ceil(data.length / PAGE_SIZE)
        }, 'chaptersPagination');
    }
    // Search Chapter Modal Functions
    async function handleSearchChapterModalChange(value) {
        await filterChapterReading(value);

    }
    // Function get all chapter reading
    async function getAllChapterReading() {
        await $.ajax({
            url: '/api/v1/chapter/get-all-chapter-reading/',
            type: 'POST',
            data: {
                titleId: titleId
            },
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            success: function(response) {
                if (response.code == 200) {
                    ALL_CHAPTER_READING_IDS = response.ALL_CHAPTER_READING_IDS;
                } 
            }
        });
    }
    // Filter chapter reading from ALL_CHAPTER_READING_IDS & ALL_CHAPTERS
    async function filterChapterReading(searchValue = '') {
        //  Filter chapter reading from ALL_CHAPTER_READING_IDS & ALL_CHAPTERS
        let filteredChapters = ALL_CHAPTERS.map(chapter => {
            // console.log('chapter', chapter);
            const readingTranslations = chapter.translations.filter(translation => 
                ALL_CHAPTER_READING_IDS.includes(translation.id)
            );
            // console.log('readingTranslations', readingTranslations);
            // Only return chapter if there is a reading translation
            if (readingTranslations.length > 0) {
                return {
                    ...chapter,
                    translations: readingTranslations
                };
            }
            return null;
        }).filter(chapter => chapter !== null);

        // Filter by chapter number if searchValue is provided and is a string
        if (searchValue && typeof searchValue === 'string' && searchValue.trim() !== '') {
            const searchNumber = parseFloat(searchValue);
            if (!isNaN(searchNumber)) {
                filteredChapters = filteredChapters.filter(chapter => {
                    return chapter.number_float === searchNumber || 
                           chapter.number.toLowerCase().includes(searchValue.toLowerCase());
                });
            } else {
                // If not a number, search by chapter number string
                filteredChapters = filteredChapters.filter(chapter => {
                    return chapter.number.toLowerCase().includes(searchValue.toLowerCase());
                });
            }
        }

        ALL_CHAPTER_READING = filteredChapters;
        console.log('Filtered chapters:', ALL_CHAPTER_READING.length, 'chapters found');
        // Render chapters reading
        await renderChaptersReading(filteredChapters);
    }

    // Show share modal
    document.getElementById('showShareBtn').addEventListener('click', function(e) {
        $('#shareModal').modal('show');
    });
    // Show upload chapter modal
    document.getElementById('showUploadChapterBtn').addEventListener('click', function(e) {
        // $('#uploadChapterModal').modal('show');
        // Call api check user is member of group
        $.ajax({
            url: '/api/v1/user/check-user-is-member-of-group/',
            type: 'POST',
            data: {
                titleId: titleId
            },
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            success: function(response) {
                console.log('response', response);
                if (response.code == 200 && response.isMember) {
                    window.open(response.url, '_blank');
                } else {
                    Swal.fire({
                        title: 'You are not a member of any group',
                        icon: 'error',
                        showConfirmButton: false,
                        timer: 1500
                    });
                }
            },
            error: function(xhr, status, error) {
                hideLoading();
                console.log(xhr.responseText);
                Swal.fire({
                    title: 'You are not a member of any group',
                    icon: 'error',
                    showConfirmButton: false,
                    timer: 1500
                });
            }
        });
    });
</script>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="container pb-3" id="comicDescription">
        <div class="row">
            <div class="col-12">
                <div class="description-container p-3">
                    <div class="description-header">
                        <h5 class="text-white">
                            <i class="fas fa-info-circle me-2 text-primary"></i>
                            Description
                        </h5>
                    </div>
                    <div class="description-content collapsed" id="descriptionContent">
                        <div class="description-text">
                            <div class="description-highlights">
                                <div class="row g-3 mb-3">
                                    <div class="col-md-3 col-6">
                                        <div class="highlight-item">
                                            <i class="fas fa-star text-warning me-2"></i>
                                            <span class="text-light">10</span>
                                        </div>
                                    </div>
                                    <div class="col-md-3 col-6">
                                        <div class="highlight-item">
                                            <i class="fas fa-heart text-danger me-2"></i>
                                            <span class="text-light" id="titleStatsLikes">62413</span>
                                        </div>
                                    </div>
                                    <div class="col-md-3 col-6">
                                        <div class="highlight-item">
                                            <i class="fas fa-eye text-info me-2"></i>
                                            <span class="text-light" id="titleStatsViews">1298</span>
                                        </div>
                                    </div>
                                    <div class="col-md-3 col-6">
                                        <div class="highlight-item">
                                            <i class="fas fa-users text-success me-2"></i>
                                            <span class="text-light">31</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <p>Raised to kill like a pack of loyal hounds, the Baskerville children took countless lives as a band of fearsome assassins.

Despite being the shunned illegitimate son of the brood, Vikir served his family faithfully, only to meet his untimely demise at his father’s hands. But when he is inexplicably reborn with a second chance at life, Vikir, armed with the memories and knowledge of his past, swears to rise above the pack and take his revenge.

This time, he's ready to bite the hand that feeds.</p>                        </div>
                    </div>
                    <div class="description-overlay collapsed" id="descriptionOverlay"></div>
                    <div class="description-actions">
                        <button class="btn btn-outline-primary btn-sm" id="expandDescriptionBtn">
                            <i class="fas fa-chevron-down me-1"></i>
                            Expand
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Main Content -->
<div class="container mt-2 pb-5 " id="comicChapters">
    <!-- Chapters Section -->
    <section class="">
        <div class="text-secondary text-start small">
            <span class="fw-bold totalChapters">146</span> Chapters with <span class="fw-bold totalTranslations">1095</span> Translations • Updated <span class="fw-bold updateTime">21 hours ago</span>

        </div>
        <!-- Filters Section -->
        <div class="filters-container mb-4">
            <!-- Filter Toggle Button -->
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h6 class="mb-0 text-secondary">
                    <i class="fas fa-filter me-2"></i>Filters
                </h6>
                <button class="btn btn-outline-secondary btn-sm" type="button" data-bs-toggle="collapse" data-bs-target="#filtersCollapse" aria-expanded="false" aria-controls="filtersCollapse">
                    <i class="fas fa-chevron-down me-1"></i>Expand
                </button>
            </div>

            <!-- Collapsible Filters Content -->
            <div class="collapse" id="filtersCollapse">
                <div class="p-3 rounded">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <div class="multi-select-container">
                                <div class="selected-items" id="selectedLanguages"><span class="placeholder"> 12 - language selected</span></div>
                                <div class="dropdown-menu multi-select-dropdown" id="languageDropdown"><div class="dropdown-item">
                                <input type="checkbox" id="lang-bn" value="bn">
                                <label for="lang-bn">Bengali</label>
                            </div><div class="dropdown-item">
                                <input type="checkbox" id="lang-de" value="de">
                                <label for="lang-de">German</label>
                            </div><div class="dropdown-item">
                                <input type="checkbox" id="lang-en" value="en">
                                <label for="lang-en">English</label>
                            </div><div class="dropdown-item">
                                <input type="checkbox" id="lang-es" value="es">
                                <label for="lang-es">Spanish</label>
                            </div><div class="dropdown-item">
                                <input type="checkbox" id="lang-es-419" value="es-419">
                                <label for="lang-es-419">Spanish (Latin America)</label>
                            </div><div class="dropdown-item">
                                <input type="checkbox" id="lang-fr" value="fr">
                                <label for="lang-fr">French</label>
                            </div><div class="dropdown-item">
                                <input type="checkbox" id="lang-hu" value="hu">
                                <label for="lang-hu">Hungarian</label>
                            </div><div class="dropdown-item">
                                <input type="checkbox" id="lang-id" value="id">
                                <label for="lang-id">Indonesian</label>
                            </div><div class="dropdown-item">
                                <input type="checkbox" id="lang-it" value="it">
                                <label for="lang-it">Italian</label>
                            </div><div class="dropdown-item">
                                <input type="checkbox" id="lang-pl" value="pl">
                                <label for="lang-pl">Polish</label>
                            </div><div class="dropdown-item">
                                <input type="checkbox" id="lang-pt-br" value="pt-br">
                                <label for="lang-pt-br">Portuguese (Brazil)</label>
                            </div><div class="dropdown-item">
                                <input type="checkbox" id="lang-th" value="th">
                                <label for="lang-th">Thai</label>
                            </div></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="multi-select-container">
                                <div class="selected-items" id="selectedVolumes"><span class="placeholder"> 3 - volume selected</span></div>
                                <div class="dropdown-menu multi-select-dropdown" id="volumeDropdown"><div class="dropdown-item">
                                <input type="checkbox" id="vol-0.0" value="0.0">
                                <label for="vol-0.0">Volume 0.0</label>
                            </div><div class="dropdown-item">
                                <input type="checkbox" id="vol-1.0" value="1.0">
                                <label for="vol-1.0">Volume 1.0</label>
                            </div><div class="dropdown-item">
                                <input type="checkbox" id="vol-2.0" value="2.0">
                                <label for="vol-2.0">Volume 2.0</label>
                            </div></div>
                            </div>
                        </div>
                    </div>
                    <!-- Active Filters -->
                    <div class="active-filters mt-3" id="activeFilters"><span class="filter-tag">
                        <i class="fas fa-language"></i>
                        Bengali
                        <button class="remove-filter" onclick="removeFilter('languages', 'bn')">
                            <i class="fas fa-times"></i>
                        </button>
                    </span><span class="filter-tag">
                        <i class="fas fa-language"></i>
                        German
                        <button class="remove-filter" onclick="removeFilter('languages', 'de')">
                            <i class="fas fa-times"></i>
                        </button>
                    </span><span class="filter-tag">
                        <i class="fas fa-language"></i>
                        English
                        <button class="remove-filter" onclick="removeFilter('languages', 'en')">
                            <i class="fas fa-times"></i>
                        </button>
                    </span><span class="filter-tag">
                        <i class="fas fa-language"></i>
                        Spanish
                        <button class="remove-filter" onclick="removeFilter('languages', 'es')">
                            <i class="fas fa-times"></i>
                        </button>
                    </span><span class="filter-tag">
                        <i class="fas fa-language"></i>
                        Spanish (Latin America)
                        <button class="remove-filter" onclick="removeFilter('languages', 'es-419')">
                            <i class="fas fa-times"></i>
                        </button>
                    </span><span class="filter-tag">
                        <i class="fas fa-language"></i>
                        French
                        <button class="remove-filter" onclick="removeFilter('languages', 'fr')">
                            <i class="fas fa-times"></i>
                        </button>
                    </span><span class="filter-tag">
                        <i class="fas fa-language"></i>
                        Hungarian
                        <button class="remove-filter" onclick="removeFilter('languages', 'hu')">
                            <i class="fas fa-times"></i>
                        </button>
                    </span><span class="filter-tag">
                        <i class="fas fa-language"></i>
                        Indonesian
                        <button class="remove-filter" onclick="removeFilter('languages', 'id')">
                            <i class="fas fa-times"></i>
                        </button>
                    </span><span class="filter-tag">
                        <i class="fas fa-language"></i>
                        Italian
                        <button class="remove-filter" onclick="removeFilter('languages', 'it')">
                            <i class="fas fa-times"></i>
                        </button>
                    </span><span class="filter-tag">
                        <i class="fas fa-language"></i>
                        Polish
                        <button class="remove-filter" onclick="removeFilter('languages', 'pl')">
                            <i class="fas fa-times"></i>
                        </button>
                    </span><span class="filter-tag">
                        <i class="fas fa-language"></i>
                        Portuguese (Brazil)
                        <button class="remove-filter" onclick="removeFilter('languages', 'pt-br')">
                            <i class="fas fa-times"></i>
                        </button>
                    </span><span class="filter-tag">
                        <i class="fas fa-language"></i>
                        Thai
                        <button class="remove-filter" onclick="removeFilter('languages', 'th')">
                            <i class="fas fa-times"></i>
                        </button>
                    </span><span class="filter-tag">
                        <i class="fas fa-book"></i>
                        Volume 0.0
                        <button class="remove-filter" onclick="removeFilter('volumes', '0.0')">
                            <i class="fas fa-times"></i>
                        </button>
                    </span><span class="filter-tag">
                        <i class="fas fa-book"></i>
                        Volume 1.0
                        <button class="remove-filter" onclick="removeFilter('volumes', '1.0')">
                            <i class="fas fa-times"></i>
                        </button>
                    </span><span class="filter-tag">
                        <i class="fas fa-book"></i>
                        Volume 2.0
                        <button class="remove-filter" onclick="removeFilter('volumes', '2.0')">
                            <i class="fas fa-times"></i>
                        </button>
                    </span></div>
                    <!-- Filter Actions -->
                    <div class="filter-actions d-flex justify-content-between align-items-center">
                        <div class="filter-stats text-secondary small w-100">
                            <span id="filteredCount" style="color: #ff6740;">1095</span> translations of <span class="fw-bold totalTranslations" style="color: #ff6740;">1095</span> translations can be displayed
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Search Chapter and Sort Toggle -->
        <div class="d-flex justify-content-between align-items-center mb-3 gap-2">
            <div class="sort-toggle-container">
                <button class="btn btn-outline-secondary btn-sm" type="button" id="sortToggleBtn" title="Toggle sort order">
                    <i class="fas fa-sort-amount-down"></i>
                    <span id="sortToggleText" class="d-none d-md-inline ms-1">Newest</span>
                </button>
            </div>
            <div class="search-chapter-container">
                <div class="input-group input-group-sm">
                    <span class="input-group-text" title="To search exact, add # at the end" style="cursor: help;">
                        <i class="fas fa-info-circle"></i>
                    </span>
                    <input type="text" class="form-control" id="searchChapterInput" placeholder="Search chapter (e.g: 1, 10 or 1# for exact)">
                    <button class="btn" type="button" id="clearSearchBtn">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
        </div>

        <div class="chapters-container">
            <div class="row g-3" id="chaptersContainer"><div class="volume-chapters" style="display:block;">
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 752</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68ede28819cd65ec0a163d83">
                <span class="badge" style="background:#009b3a;color:#fff;">
            Portuguese (Brazil)
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>752
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/kingler.png" class="object-fit-contain" alt="Kingler" style="width: 18px;">
                Kingler
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>2 days ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>6
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68ede28819cd65ec0a163d83')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68ede28819cd65ec0a163d83')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68ede28819cd65ec0a163d83/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68ede28819cd65ec0a163d83/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68ede28819cd65ec0a163d83', '752', 'https://mangaball.net/chapter-detail/68ede28819cd65ec0a163d83/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68ede28819cd65ec0a163d83/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68ede28819cd65ec0a163d83')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 741</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68ede28819cd65ec0a163d84">
                <span class="badge" style="background:#009b3a;color:#fff;">
            Portuguese (Brazil)
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>741
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/kingler.png" class="object-fit-contain" alt="Kingler" style="width: 18px;">
                Kingler
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>2 days ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>2
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68ede28819cd65ec0a163d84')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68ede28819cd65ec0a163d84')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68ede28819cd65ec0a163d84/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68ede28819cd65ec0a163d84/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68ede28819cd65ec0a163d84', '741', 'https://mangaball.net/chapter-detail/68ede28819cd65ec0a163d84/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68ede28819cd65ec0a163d84/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68ede28819cd65ec0a163d84')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 134</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68ebc3590c32d7996b863298">
                <span class="badge" style="background:#aa151b;color:#fff;">
            Spanish
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Capitulo 134
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/tauros.png" class="object-fit-contain" alt="Tauros" style="width: 18px;">
                Tauros
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>2 days ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68ebc3590c32d7996b863298')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68ebc3590c32d7996b863298')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68ebc3590c32d7996b863298/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68ebc3590c32d7996b863298/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68ebc3590c32d7996b863298', 'Capitulo 134', 'https://mangaball.net/chapter-detail/68ebc3590c32d7996b863298/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68ebc3590c32d7996b863298/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68ebc3590c32d7996b863298')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68ede0bcfbaa6f24d22a8f09">
                <span class="badge" style="background:#009b3a;color:#fff;">
            Portuguese (Brazil)
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>134
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/hitmonchan.png" class="object-fit-contain" alt="Hitmonchan" style="width: 18px;">
                Hitmonchan
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>2 days ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68ede0bcfbaa6f24d22a8f09')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68ede0bcfbaa6f24d22a8f09')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68ede0bcfbaa6f24d22a8f09/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68ede0bcfbaa6f24d22a8f09/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68ede0bcfbaa6f24d22a8f09', '134', 'https://mangaball.net/chapter-detail/68ede0bcfbaa6f24d22a8f09/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68ede0bcfbaa6f24d22a8f09/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68ede0bcfbaa6f24d22a8f09')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68ec76d4349509c49eead748">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 134
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/muk.png" class="object-fit-contain" alt="Muk" style="width: 18px;">
                Muk
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>4 days ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>1
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68ec76d4349509c49eead748')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68ec76d4349509c49eead748')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68ec76d4349509c49eead748/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68ec76d4349509c49eead748/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68ec76d4349509c49eead748', 'Chapter 134', 'https://mangaball.net/chapter-detail/68ec76d4349509c49eead748/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68ec76d4349509c49eead748/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68ec76d4349509c49eead748')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68ebb8c944adc98aa222eb9a">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 134
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/ursaring.png" class="object-fit-contain" alt="Ursaring" style="width: 18px;">
                Ursaring
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>4 days ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>21
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68ebb8c944adc98aa222eb9a')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68ebb8c944adc98aa222eb9a')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68ebb8c944adc98aa222eb9a/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68ebb8c944adc98aa222eb9a/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68ebb8c944adc98aa222eb9a', 'Chapter 134', 'https://mangaball.net/chapter-detail/68ebb8c944adc98aa222eb9a/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68ebb8c944adc98aa222eb9a/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68ebb8c944adc98aa222eb9a')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68ebb5be286bb09ad7165270">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Ch. 134 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/swampert.png" class="object-fit-contain" alt="Swampert" style="width: 18px;">
                Swampert
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>4 days ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>4
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68ebb5be286bb09ad7165270')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68ebb5be286bb09ad7165270')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68ebb5be286bb09ad7165270/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68ebb5be286bb09ad7165270/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68ebb5be286bb09ad7165270', 'Ch. 134 ', 'https://mangaball.net/chapter-detail/68ebb5be286bb09ad7165270/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68ebb5be286bb09ad7165270/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68ebb5be286bb09ad7165270')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 133</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68ede0bdfbaa6f24d22a8f0a">
                <span class="badge" style="background:#009b3a;color:#fff;">
            Portuguese (Brazil)
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>133
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/hitmonchan.png" class="object-fit-contain" alt="Hitmonchan" style="width: 18px;">
                Hitmonchan
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>2 days ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68ede0bdfbaa6f24d22a8f0a')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68ede0bdfbaa6f24d22a8f0a')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68ede0bdfbaa6f24d22a8f0a/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68ede0bdfbaa6f24d22a8f0a/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68ede0bdfbaa6f24d22a8f0a', '133', 'https://mangaball.net/chapter-detail/68ede0bdfbaa6f24d22a8f0a/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68ede0bdfbaa6f24d22a8f0a/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68ede0bdfbaa6f24d22a8f0a')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68e27df4b722f25548f742f3">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Ch. 133 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/swampert.png" class="object-fit-contain" alt="Swampert" style="width: 18px;">
                Swampert
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>5 days ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>13
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68e27df4b722f25548f742f3')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68e27df4b722f25548f742f3')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68e27df4b722f25548f742f3/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68e27df4b722f25548f742f3/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68e27df4b722f25548f742f3', 'Ch. 133 ', 'https://mangaball.net/chapter-detail/68e27df4b722f25548f742f3/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68e27df4b722f25548f742f3/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68e27df4b722f25548f742f3')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68e3c11286220655121a2353">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 133
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/pinsir.png" class="object-fit-contain" alt="Pinsir" style="width: 18px;">
                Pinsir
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>1 week ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>2
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68e3c11286220655121a2353')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68e3c11286220655121a2353')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68e3c11286220655121a2353/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68e3c11286220655121a2353/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68e3c11286220655121a2353', 'Chapter 133', 'https://mangaball.net/chapter-detail/68e3c11286220655121a2353/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68e3c11286220655121a2353/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68e3c11286220655121a2353')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68e29b30fd76a59c6df65af7">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 133
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/lugia.png" class="object-fit-contain" alt="Lugia" style="width: 18px;">
                Lugia
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>1 week ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68e29b30fd76a59c6df65af7')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68e29b30fd76a59c6df65af7')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68e29b30fd76a59c6df65af7/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68e29b30fd76a59c6df65af7/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68e29b30fd76a59c6df65af7', 'Chapter 133', 'https://mangaball.net/chapter-detail/68e29b30fd76a59c6df65af7/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68e29b30fd76a59c6df65af7/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68e29b30fd76a59c6df65af7')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68e28261679841202d719a5b">
                <span class="badge" style="background:#aa151b;color:#fff;">
            Spanish
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Capitulo 133
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/tauros.png" class="object-fit-contain" alt="Tauros" style="width: 18px;">
                Tauros
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>1 week ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68e28261679841202d719a5b')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68e28261679841202d719a5b')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68e28261679841202d719a5b/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68e28261679841202d719a5b/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68e28261679841202d719a5b', 'Capitulo 133', 'https://mangaball.net/chapter-detail/68e28261679841202d719a5b/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68e28261679841202d719a5b/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68e28261679841202d719a5b')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68e2842997fb72f896dbdc7a">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 133
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/entei.png" class="object-fit-contain" alt="Entei" style="width: 18px;">
                Entei
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>1 week ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>39
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68e2842997fb72f896dbdc7a')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68e2842997fb72f896dbdc7a')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68e2842997fb72f896dbdc7a/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68e2842997fb72f896dbdc7a/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68e2842997fb72f896dbdc7a', 'Chapter 133', 'https://mangaball.net/chapter-detail/68e2842997fb72f896dbdc7a/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68e2842997fb72f896dbdc7a/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68e2842997fb72f896dbdc7a')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 132</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68ede0bdfbaa6f24d22a8f0b">
                <span class="badge" style="background:#009b3a;color:#fff;">
            Portuguese (Brazil)
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>132
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/hitmonchan.png" class="object-fit-contain" alt="Hitmonchan" style="width: 18px;">
                Hitmonchan
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>2 days ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68ede0bdfbaa6f24d22a8f0b')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68ede0bdfbaa6f24d22a8f0b')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68ede0bdfbaa6f24d22a8f0b/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68ede0bdfbaa6f24d22a8f0b/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68ede0bdfbaa6f24d22a8f0b', '132', 'https://mangaball.net/chapter-detail/68ede0bdfbaa6f24d22a8f0b/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68ede0bdfbaa6f24d22a8f0b/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68ede0bdfbaa6f24d22a8f0b')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68d947f183f744e27dc2fd4d">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Ch. 132 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/swampert.png" class="object-fit-contain" alt="Swampert" style="width: 18px;">
                Swampert
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>5 days ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>36
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68d947f183f744e27dc2fd4d')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68d947f183f744e27dc2fd4d')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68d947f183f744e27dc2fd4d/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68d947f183f744e27dc2fd4d/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68d947f183f744e27dc2fd4d', 'Ch. 132 ', 'https://mangaball.net/chapter-detail/68d947f183f744e27dc2fd4d/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68d947f183f744e27dc2fd4d/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68d947f183f744e27dc2fd4d')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68d95d971bf1d9f0c9c1bb70">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter
        132
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/zapdos.png" class="object-fit-contain" alt="Zapdos" style="width: 18px;">
                Zapdos
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>2 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68d95d971bf1d9f0c9c1bb70')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68d95d971bf1d9f0c9c1bb70')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68d95d971bf1d9f0c9c1bb70/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68d95d971bf1d9f0c9c1bb70/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68d95d971bf1d9f0c9c1bb70', 'Chapter
        132', 'https://mangaball.net/chapter-detail/68d95d971bf1d9f0c9c1bb70/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68d95d971bf1d9f0c9c1bb70/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68d95d971bf1d9f0c9c1bb70')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68d9563464197d9e74e09b87">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 132
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/lugia.png" class="object-fit-contain" alt="Lugia" style="width: 18px;">
                Lugia
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>2 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68d9563464197d9e74e09b87')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68d9563464197d9e74e09b87')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68d9563464197d9e74e09b87/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68d9563464197d9e74e09b87/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68d9563464197d9e74e09b87', 'Chapter 132', 'https://mangaball.net/chapter-detail/68d9563464197d9e74e09b87/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68d9563464197d9e74e09b87/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68d9563464197d9e74e09b87')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68d94983c6290dae324d06f1">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 132
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/entei.png" class="object-fit-contain" alt="Entei" style="width: 18px;">
                Entei
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>2 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>23
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68d94983c6290dae324d06f1')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68d94983c6290dae324d06f1')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68d94983c6290dae324d06f1/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68d94983c6290dae324d06f1/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68d94983c6290dae324d06f1', 'Chapter 132', 'https://mangaball.net/chapter-detail/68d94983c6290dae324d06f1/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68d94983c6290dae324d06f1/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68d94983c6290dae324d06f1')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 131</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68ede0bdfbaa6f24d22a8f0c">
                <span class="badge" style="background:#009b3a;color:#fff;">
            Portuguese (Brazil)
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>131
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/hitmonchan.png" class="object-fit-contain" alt="Hitmonchan" style="width: 18px;">
                Hitmonchan
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>2 days ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68ede0bdfbaa6f24d22a8f0c')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68ede0bdfbaa6f24d22a8f0c')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68ede0bdfbaa6f24d22a8f0c/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68ede0bdfbaa6f24d22a8f0c/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68ede0bdfbaa6f24d22a8f0c', '131', 'https://mangaball.net/chapter-detail/68ede0bdfbaa6f24d22a8f0c/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68ede0bdfbaa6f24d22a8f0c/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68ede0bdfbaa6f24d22a8f0c')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68d01875b5bd46018066b7ea">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 131
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/ursaring.png" class="object-fit-contain" alt="Ursaring" style="width: 18px;">
                Ursaring
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>3 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>42
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68d01875b5bd46018066b7ea')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68d01875b5bd46018066b7ea')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68d01875b5bd46018066b7ea/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68d01875b5bd46018066b7ea/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68d01875b5bd46018066b7ea', 'Chapter 131', 'https://mangaball.net/chapter-detail/68d01875b5bd46018066b7ea/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68d01875b5bd46018066b7ea/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68d01875b5bd46018066b7ea')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68d0331fc2c5f48bc1fb9d04">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 131
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/lugia.png" class="object-fit-contain" alt="Lugia" style="width: 18px;">
                Lugia
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>3 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>3
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68d0331fc2c5f48bc1fb9d04')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68d0331fc2c5f48bc1fb9d04')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68d0331fc2c5f48bc1fb9d04/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68d0331fc2c5f48bc1fb9d04/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68d0331fc2c5f48bc1fb9d04', 'Chapter 131', 'https://mangaball.net/chapter-detail/68d0331fc2c5f48bc1fb9d04/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68d0331fc2c5f48bc1fb9d04/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68d0331fc2c5f48bc1fb9d04')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68d02156c2c5f48bc1fb9a75">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter
        131
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/zapdos.png" class="object-fit-contain" alt="Zapdos" style="width: 18px;">
                Zapdos
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>3 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68d02156c2c5f48bc1fb9a75')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68d02156c2c5f48bc1fb9a75')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68d02156c2c5f48bc1fb9a75/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68d02156c2c5f48bc1fb9a75/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68d02156c2c5f48bc1fb9a75', 'Chapter
        131', 'https://mangaball.net/chapter-detail/68d02156c2c5f48bc1fb9a75/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68d02156c2c5f48bc1fb9a75/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68d02156c2c5f48bc1fb9a75')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68d017b5c2c5f48bc1fb98b7">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 131
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/entei.png" class="object-fit-contain" alt="Entei" style="width: 18px;">
                Entei
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>3 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>30
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68d017b5c2c5f48bc1fb98b7')">
                <i class="fas fa-heart me-1"></i>2
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68d017b5c2c5f48bc1fb98b7')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68d017b5c2c5f48bc1fb98b7/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68d017b5c2c5f48bc1fb98b7/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68d017b5c2c5f48bc1fb98b7', 'Chapter 131', 'https://mangaball.net/chapter-detail/68d017b5c2c5f48bc1fb98b7/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68d017b5c2c5f48bc1fb98b7/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68d017b5c2c5f48bc1fb98b7')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 130</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68ede0befbaa6f24d22a8f0d">
                <span class="badge" style="background:#009b3a;color:#fff;">
            Portuguese (Brazil)
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>130
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/hitmonchan.png" class="object-fit-contain" alt="Hitmonchan" style="width: 18px;">
                Hitmonchan
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>2 days ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68ede0befbaa6f24d22a8f0d')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68ede0befbaa6f24d22a8f0d')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68ede0befbaa6f24d22a8f0d/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68ede0befbaa6f24d22a8f0d/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68ede0befbaa6f24d22a8f0d', '130', 'https://mangaball.net/chapter-detail/68ede0befbaa6f24d22a8f0d/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68ede0befbaa6f24d22a8f0d/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68ede0befbaa6f24d22a8f0d')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68d18b70c692e6182aca7b0f">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 130
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/articuno.png" class="object-fit-contain" alt="Articuno" style="width: 18px;">
                Articuno
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>3 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>14
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68d18b70c692e6182aca7b0f')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68d18b70c692e6182aca7b0f')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68d18b70c692e6182aca7b0f/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68d18b70c692e6182aca7b0f/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68d18b70c692e6182aca7b0f', 'Chapter 130', 'https://mangaball.net/chapter-detail/68d18b70c692e6182aca7b0f/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68d18b70c692e6182aca7b0f/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68d18b70c692e6182aca7b0f')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68d0331fc2c5f48bc1fb9d03">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 130
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/lugia.png" class="object-fit-contain" alt="Lugia" style="width: 18px;">
                Lugia
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>3 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68d0331fc2c5f48bc1fb9d03')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68d0331fc2c5f48bc1fb9d03')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68d0331fc2c5f48bc1fb9d03/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68d0331fc2c5f48bc1fb9d03/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68d0331fc2c5f48bc1fb9d03', 'Chapter 130', 'https://mangaball.net/chapter-detail/68d0331fc2c5f48bc1fb9d03/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68d0331fc2c5f48bc1fb9d03/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68d0331fc2c5f48bc1fb9d03')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68c6de16c2c5f48bc1fa16fd">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter
        130
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/zapdos.png" class="object-fit-contain" alt="Zapdos" style="width: 18px;">
                Zapdos
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>4 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>14
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68c6de16c2c5f48bc1fa16fd')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68c6de16c2c5f48bc1fa16fd')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68c6de16c2c5f48bc1fa16fd/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68c6de16c2c5f48bc1fa16fd/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68c6de16c2c5f48bc1fa16fd', 'Chapter
        130', 'https://mangaball.net/chapter-detail/68c6de16c2c5f48bc1fa16fd/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68c6de16c2c5f48bc1fa16fd/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68c6de16c2c5f48bc1fa16fd')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68c6dd4ec2c5f48bc1fa1681">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 130
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/entei.png" class="object-fit-contain" alt="Entei" style="width: 18px;">
                Entei
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>4 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>51
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68c6dd4ec2c5f48bc1fa1681')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68c6dd4ec2c5f48bc1fa1681')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68c6dd4ec2c5f48bc1fa1681/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68c6dd4ec2c5f48bc1fa1681/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68c6dd4ec2c5f48bc1fa1681', 'Chapter 130', 'https://mangaball.net/chapter-detail/68c6dd4ec2c5f48bc1fa1681/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68c6dd4ec2c5f48bc1fa1681/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68c6dd4ec2c5f48bc1fa1681')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 129</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68ede0befbaa6f24d22a8f0e">
                <span class="badge" style="background:#009b3a;color:#fff;">
            Portuguese (Brazil)
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>129
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/hitmonchan.png" class="object-fit-contain" alt="Hitmonchan" style="width: 18px;">
                Hitmonchan
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>2 days ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68ede0befbaa6f24d22a8f0e')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68ede0befbaa6f24d22a8f0e')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68ede0befbaa6f24d22a8f0e/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68ede0befbaa6f24d22a8f0e/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68ede0befbaa6f24d22a8f0e', '129', 'https://mangaball.net/chapter-detail/68ede0befbaa6f24d22a8f0e/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68ede0befbaa6f24d22a8f0e/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68ede0befbaa6f24d22a8f0e')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68bda2bcc2c5f48bc1f7bbc5">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 129
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/entei.png" class="object-fit-contain" alt="Entei" style="width: 18px;">
                Entei
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>5 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>13
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68bda2bcc2c5f48bc1f7bbc5')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68bda2bcc2c5f48bc1f7bbc5')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68bda2bcc2c5f48bc1f7bbc5/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68bda2bcc2c5f48bc1f7bbc5/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68bda2bcc2c5f48bc1f7bbc5', 'Chapter 129', 'https://mangaball.net/chapter-detail/68bda2bcc2c5f48bc1f7bbc5/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68bda2bcc2c5f48bc1f7bbc5/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68bda2bcc2c5f48bc1f7bbc5')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68bdc212c2c5f48bc1f7c686">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 129
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/lugia.png" class="object-fit-contain" alt="Lugia" style="width: 18px;">
                Lugia
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>5 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68bdc212c2c5f48bc1f7c686')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68bdc212c2c5f48bc1f7c686')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68bdc212c2c5f48bc1f7c686/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68bdc212c2c5f48bc1f7c686/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68bdc212c2c5f48bc1f7c686', 'Chapter 129', 'https://mangaball.net/chapter-detail/68bdc212c2c5f48bc1f7c686/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68bdc212c2c5f48bc1f7c686/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68bdc212c2c5f48bc1f7c686')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68bdae49cc2d126b0513d75a">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Ch. 129 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/raikou.png" class="object-fit-contain" alt="Raikou" style="width: 18px;">
                Raikou
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>5 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>3
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68bdae49cc2d126b0513d75a')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68bdae49cc2d126b0513d75a')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68bdae49cc2d126b0513d75a/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68bdae49cc2d126b0513d75a/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68bdae49cc2d126b0513d75a', 'Ch. 129 ', 'https://mangaball.net/chapter-detail/68bdae49cc2d126b0513d75a/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68bdae49cc2d126b0513d75a/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68bdae49cc2d126b0513d75a')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68bda8f2c2c5f48bc1f7becb">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 129
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/zapdos.png" class="object-fit-contain" alt="Zapdos" style="width: 18px;">
                Zapdos
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>5 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68bda8f2c2c5f48bc1f7becb')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68bda8f2c2c5f48bc1f7becb')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68bda8f2c2c5f48bc1f7becb/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68bda8f2c2c5f48bc1f7becb/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68bda8f2c2c5f48bc1f7becb', 'Chapter 129', 'https://mangaball.net/chapter-detail/68bda8f2c2c5f48bc1f7becb/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68bda8f2c2c5f48bc1f7becb/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68bda8f2c2c5f48bc1f7becb')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 128</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68ede0befbaa6f24d22a8f0f">
                <span class="badge" style="background:#009b3a;color:#fff;">
            Portuguese (Brazil)
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>128
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/hitmonchan.png" class="object-fit-contain" alt="Hitmonchan" style="width: 18px;">
                Hitmonchan
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>2 days ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68ede0befbaa6f24d22a8f0f')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68ede0befbaa6f24d22a8f0f')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68ede0befbaa6f24d22a8f0f/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68ede0befbaa6f24d22a8f0f/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68ede0befbaa6f24d22a8f0f', '128', 'https://mangaball.net/chapter-detail/68ede0befbaa6f24d22a8f0f/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68ede0befbaa6f24d22a8f0f/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68ede0befbaa6f24d22a8f0f')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68b467fefa2a00933a931aa3">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 128
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/entei.png" class="object-fit-contain" alt="Entei" style="width: 18px;">
                Entei
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>6 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>10
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68b467fefa2a00933a931aa3')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68b467fefa2a00933a931aa3')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68b467fefa2a00933a931aa3/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68b467fefa2a00933a931aa3/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68b467fefa2a00933a931aa3', 'Chapter 128', 'https://mangaball.net/chapter-detail/68b467fefa2a00933a931aa3/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68b467fefa2a00933a931aa3/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68b467fefa2a00933a931aa3')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68b4bd4afa2a00933a9328d5">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Ch. 128 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/articuno.png" class="object-fit-contain" alt="Articuno" style="width: 18px;">
                Articuno
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>6 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>2
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68b4bd4afa2a00933a9328d5')">
                <i class="fas fa-heart me-1"></i>3
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68b4bd4afa2a00933a9328d5')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68b4bd4afa2a00933a9328d5/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68b4bd4afa2a00933a9328d5/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68b4bd4afa2a00933a9328d5', 'Ch. 128 ', 'https://mangaball.net/chapter-detail/68b4bd4afa2a00933a9328d5/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68b4bd4afa2a00933a9328d5/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68b4bd4afa2a00933a9328d5')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68b4617ffa2a00933a9319c1">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 128
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/lugia.png" class="object-fit-contain" alt="Lugia" style="width: 18px;">
                Lugia
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>6 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68b4617ffa2a00933a9319c1')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68b4617ffa2a00933a9319c1')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68b4617ffa2a00933a9319c1/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68b4617ffa2a00933a9319c1/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68b4617ffa2a00933a9319c1', 'Chapter 128', 'https://mangaball.net/chapter-detail/68b4617ffa2a00933a9319c1/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68b4617ffa2a00933a9319c1/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68b4617ffa2a00933a9319c1')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68b46062fa2a00933a93196e">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 128
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/zapdos.png" class="object-fit-contain" alt="Zapdos" style="width: 18px;">
                Zapdos
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>6 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68b46062fa2a00933a93196e')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68b46062fa2a00933a93196e')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68b46062fa2a00933a93196e/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68b46062fa2a00933a93196e/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68b46062fa2a00933a93196e', 'Chapter 128', 'https://mangaball.net/chapter-detail/68b46062fa2a00933a93196e/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68b46062fa2a00933a93196e/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68b46062fa2a00933a93196e')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 127</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68ede0bffbaa6f24d22a8f10">
                <span class="badge" style="background:#009b3a;color:#fff;">
            Portuguese (Brazil)
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>127
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/hitmonchan.png" class="object-fit-contain" alt="Hitmonchan" style="width: 18px;">
                Hitmonchan
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>2 days ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68ede0bffbaa6f24d22a8f10')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68ede0bffbaa6f24d22a8f10')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68ede0bffbaa6f24d22a8f10/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68ede0bffbaa6f24d22a8f10/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68ede0bffbaa6f24d22a8f10', '127', 'https://mangaball.net/chapter-detail/68ede0bffbaa6f24d22a8f10/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68ede0bffbaa6f24d22a8f10/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68ede0bffbaa6f24d22a8f10')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68b4bd4afa2a00933a9328d4">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Ch. 127 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/articuno.png" class="object-fit-contain" alt="Articuno" style="width: 18px;">
                Articuno
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>6 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>9
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68b4bd4afa2a00933a9328d4')">
                <i class="fas fa-heart me-1"></i>3.3K
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68b4bd4afa2a00933a9328d4')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68b4bd4afa2a00933a9328d4/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68b4bd4afa2a00933a9328d4/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68b4bd4afa2a00933a9328d4', 'Ch. 127 ', 'https://mangaball.net/chapter-detail/68b4bd4afa2a00933a9328d4/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68b4bd4afa2a00933a9328d4/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68b4bd4afa2a00933a9328d4')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68ab26ebfa2a00933a914cd3">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 127
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/lugia.png" class="object-fit-contain" alt="Lugia" style="width: 18px;">
                Lugia
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>7 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68ab26ebfa2a00933a914cd3')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68ab26ebfa2a00933a914cd3')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68ab26ebfa2a00933a914cd3/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68ab26ebfa2a00933a914cd3/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68ab26ebfa2a00933a914cd3', 'Chapter 127', 'https://mangaball.net/chapter-detail/68ab26ebfa2a00933a914cd3/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68ab26ebfa2a00933a914cd3/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68ab26ebfa2a00933a914cd3')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68ab2d83fa2a00933a914dfd">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 127
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/entei.png" class="object-fit-contain" alt="Entei" style="width: 18px;">
                Entei
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>7 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68ab2d83fa2a00933a914dfd')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68ab2d83fa2a00933a914dfd')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68ab2d83fa2a00933a914dfd/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68ab2d83fa2a00933a914dfd/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68ab2d83fa2a00933a914dfd', 'Chapter 127', 'https://mangaball.net/chapter-detail/68ab2d83fa2a00933a914dfd/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68ab2d83fa2a00933a914dfd/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68ab2d83fa2a00933a914dfd')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68ab372dfa2a00933a9150b9">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 127
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/zapdos.png" class="object-fit-contain" alt="Zapdos" style="width: 18px;">
                Zapdos
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>7 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68ab372dfa2a00933a9150b9')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68ab372dfa2a00933a9150b9')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68ab372dfa2a00933a9150b9/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68ab372dfa2a00933a9150b9/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68ab372dfa2a00933a9150b9', 'Chapter 127', 'https://mangaball.net/chapter-detail/68ab372dfa2a00933a9150b9/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68ab372dfa2a00933a9150b9/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68ab372dfa2a00933a9150b9')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 126</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68ede0bffbaa6f24d22a8f11">
                <span class="badge" style="background:#009b3a;color:#fff;">
            Portuguese (Brazil)
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>126
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/hitmonchan.png" class="object-fit-contain" alt="Hitmonchan" style="width: 18px;">
                Hitmonchan
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>2 days ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68ede0bffbaa6f24d22a8f11')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68ede0bffbaa6f24d22a8f11')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68ede0bffbaa6f24d22a8f11/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68ede0bffbaa6f24d22a8f11/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68ede0bffbaa6f24d22a8f11', '126', 'https://mangaball.net/chapter-detail/68ede0bffbaa6f24d22a8f11/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68ede0bffbaa6f24d22a8f11/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68ede0bffbaa6f24d22a8f11')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68b4bd4afa2a00933a9328d3">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Ch. 126 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/articuno.png" class="object-fit-contain" alt="Articuno" style="width: 18px;">
                Articuno
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>6 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>4
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68b4bd4afa2a00933a9328d3')">
                <i class="fas fa-heart me-1"></i>3.4K
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68b4bd4afa2a00933a9328d3')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68b4bd4afa2a00933a9328d3/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68b4bd4afa2a00933a9328d3/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68b4bd4afa2a00933a9328d3', 'Ch. 126 ', 'https://mangaball.net/chapter-detail/68b4bd4afa2a00933a9328d3/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68b4bd4afa2a00933a9328d3/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68b4bd4afa2a00933a9328d3')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68a7cfecd2c1e2b98d5ab581">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 126
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/lugia.png" class="object-fit-contain" alt="Lugia" style="width: 18px;">
                Lugia
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>7 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68a7cfecd2c1e2b98d5ab581')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68a7cfecd2c1e2b98d5ab581')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab581/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab581/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68a7cfecd2c1e2b98d5ab581', 'Chapter 126', 'https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab581/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab581/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68a7cfecd2c1e2b98d5ab581')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68a1fcafc70bd9a8e3238633">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 126
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/zapdos.png" class="object-fit-contain" alt="Zapdos" style="width: 18px;">
                Zapdos
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>8 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>1
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68a1fcafc70bd9a8e3238633')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68a1fcafc70bd9a8e3238633')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68a1fcafc70bd9a8e3238633/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68a1fcafc70bd9a8e3238633/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68a1fcafc70bd9a8e3238633', 'Chapter 126', 'https://mangaball.net/chapter-detail/68a1fcafc70bd9a8e3238633/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68a1fcafc70bd9a8e3238633/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68a1fcafc70bd9a8e3238633')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68a1e4ecc70bd9a8e3238054">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 126
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/entei.png" class="object-fit-contain" alt="Entei" style="width: 18px;">
                Entei
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>8 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68a1e4ecc70bd9a8e3238054')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68a1e4ecc70bd9a8e3238054')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68a1e4ecc70bd9a8e3238054/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68a1e4ecc70bd9a8e3238054/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68a1e4ecc70bd9a8e3238054', 'Chapter 126', 'https://mangaball.net/chapter-detail/68a1e4ecc70bd9a8e3238054/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68a1e4ecc70bd9a8e3238054/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68a1e4ecc70bd9a8e3238054')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 125</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68ede0bffbaa6f24d22a8f12">
                <span class="badge" style="background:#009b3a;color:#fff;">
            Portuguese (Brazil)
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>125
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/hitmonchan.png" class="object-fit-contain" alt="Hitmonchan" style="width: 18px;">
                Hitmonchan
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>2 days ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68ede0bffbaa6f24d22a8f12')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68ede0bffbaa6f24d22a8f12')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68ede0bffbaa6f24d22a8f12/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68ede0bffbaa6f24d22a8f12/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68ede0bffbaa6f24d22a8f12', '125', 'https://mangaball.net/chapter-detail/68ede0bffbaa6f24d22a8f12/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68ede0bffbaa6f24d22a8f12/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68ede0bffbaa6f24d22a8f12')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68a7cfecd2c1e2b98d5ab580">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 125
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/lugia.png" class="object-fit-contain" alt="Lugia" style="width: 18px;">
                Lugia
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>7 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68a7cfecd2c1e2b98d5ab580')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68a7cfecd2c1e2b98d5ab580')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab580/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab580/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68a7cfecd2c1e2b98d5ab580', 'Chapter 125', 'https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab580/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab580/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68a7cfecd2c1e2b98d5ab580')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="689b2f0aaafdff27c6332232">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Ch. 125 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/articuno.png" class="object-fit-contain" alt="Articuno" style="width: 18px;">
                Articuno
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>7 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>6
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '689b2f0aaafdff27c6332232')">
                <i class="fas fa-heart me-1"></i>2.6K
            </span>
            <span class="comments small text-info" onclick="showComments(this, '689b2f0aaafdff27c6332232')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/689b2f0aaafdff27c6332232/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/689b2f0aaafdff27c6332232/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('689b2f0aaafdff27c6332232', 'Ch. 125 ', 'https://mangaball.net/chapter-detail/689b2f0aaafdff27c6332232/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/689b2f0aaafdff27c6332232/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('689b2f0aaafdff27c6332232')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68a006b8e9f7e077f5351d7d">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 125
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/zapdos.png" class="object-fit-contain" alt="Zapdos" style="width: 18px;">
                Zapdos
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>7 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68a006b8e9f7e077f5351d7d')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68a006b8e9f7e077f5351d7d')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d7d/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d7d/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68a006b8e9f7e077f5351d7d', 'Chapter 125', 'https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d7d/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d7d/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68a006b8e9f7e077f5351d7d')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="6898b878854570575ec9c07d">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 125
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/entei.png" class="object-fit-contain" alt="Entei" style="width: 18px;">
                Entei
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>9 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '6898b878854570575ec9c07d')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '6898b878854570575ec9c07d')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/6898b878854570575ec9c07d/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/6898b878854570575ec9c07d/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('6898b878854570575ec9c07d', 'Chapter 125', 'https://mangaball.net/chapter-detail/6898b878854570575ec9c07d/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/6898b878854570575ec9c07d/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('6898b878854570575ec9c07d')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 124</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68ede0c0fbaa6f24d22a8f13">
                <span class="badge" style="background:#009b3a;color:#fff;">
            Portuguese (Brazil)
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>124
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/hitmonchan.png" class="object-fit-contain" alt="Hitmonchan" style="width: 18px;">
                Hitmonchan
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>2 days ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68ede0c0fbaa6f24d22a8f13')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68ede0c0fbaa6f24d22a8f13')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68ede0c0fbaa6f24d22a8f13/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68ede0c0fbaa6f24d22a8f13/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68ede0c0fbaa6f24d22a8f13', '124', 'https://mangaball.net/chapter-detail/68ede0c0fbaa6f24d22a8f13/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68ede0c0fbaa6f24d22a8f13/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68ede0c0fbaa6f24d22a8f13')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68a7cfecd2c1e2b98d5ab57f">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 124
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/lugia.png" class="object-fit-contain" alt="Lugia" style="width: 18px;">
                Lugia
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>7 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68a7cfecd2c1e2b98d5ab57f')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68a7cfecd2c1e2b98d5ab57f')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab57f/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab57f/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68a7cfecd2c1e2b98d5ab57f', 'Chapter 124', 'https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab57f/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab57f/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68a7cfecd2c1e2b98d5ab57f')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="689b2f0aaafdff27c6332231">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Ch. 124 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/articuno.png" class="object-fit-contain" alt="Articuno" style="width: 18px;">
                Articuno
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>7 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>5
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '689b2f0aaafdff27c6332231')">
                <i class="fas fa-heart me-1"></i>3.3K
            </span>
            <span class="comments small text-info" onclick="showComments(this, '689b2f0aaafdff27c6332231')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/689b2f0aaafdff27c6332231/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/689b2f0aaafdff27c6332231/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('689b2f0aaafdff27c6332231', 'Ch. 124 ', 'https://mangaball.net/chapter-detail/689b2f0aaafdff27c6332231/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/689b2f0aaafdff27c6332231/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('689b2f0aaafdff27c6332231')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68a006b8e9f7e077f5351d7c">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 124
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/zapdos.png" class="object-fit-contain" alt="Zapdos" style="width: 18px;">
                Zapdos
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>7 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68a006b8e9f7e077f5351d7c')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68a006b8e9f7e077f5351d7c')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d7c/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d7c/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68a006b8e9f7e077f5351d7c', 'Chapter 124', 'https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d7c/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d7c/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68a006b8e9f7e077f5351d7c')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="6898b878854570575ec9c07c">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 124
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/entei.png" class="object-fit-contain" alt="Entei" style="width: 18px;">
                Entei
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>9 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '6898b878854570575ec9c07c')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '6898b878854570575ec9c07c')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/6898b878854570575ec9c07c/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/6898b878854570575ec9c07c/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('6898b878854570575ec9c07c', 'Chapter 124', 'https://mangaball.net/chapter-detail/6898b878854570575ec9c07c/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/6898b878854570575ec9c07c/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('6898b878854570575ec9c07c')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 123</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68ede0c0fbaa6f24d22a8f14">
                <span class="badge" style="background:#009b3a;color:#fff;">
            Portuguese (Brazil)
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>123
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/hitmonchan.png" class="object-fit-contain" alt="Hitmonchan" style="width: 18px;">
                Hitmonchan
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>2 days ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68ede0c0fbaa6f24d22a8f14')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68ede0c0fbaa6f24d22a8f14')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68ede0c0fbaa6f24d22a8f14/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68ede0c0fbaa6f24d22a8f14/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68ede0c0fbaa6f24d22a8f14', '123', 'https://mangaball.net/chapter-detail/68ede0c0fbaa6f24d22a8f14/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68ede0c0fbaa6f24d22a8f14/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68ede0c0fbaa6f24d22a8f14')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68a7cfecd2c1e2b98d5ab57e">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 123
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/lugia.png" class="object-fit-contain" alt="Lugia" style="width: 18px;">
                Lugia
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>7 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68a7cfecd2c1e2b98d5ab57e')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68a7cfecd2c1e2b98d5ab57e')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab57e/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab57e/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68a7cfecd2c1e2b98d5ab57e', 'Chapter 123', 'https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab57e/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab57e/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68a7cfecd2c1e2b98d5ab57e')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="689b2f0aaafdff27c6332230">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Ch. 123 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/articuno.png" class="object-fit-contain" alt="Articuno" style="width: 18px;">
                Articuno
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>7 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>4
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '689b2f0aaafdff27c6332230')">
                <i class="fas fa-heart me-1"></i>3.5K
            </span>
            <span class="comments small text-info" onclick="showComments(this, '689b2f0aaafdff27c6332230')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/689b2f0aaafdff27c6332230/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/689b2f0aaafdff27c6332230/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('689b2f0aaafdff27c6332230', 'Ch. 123 ', 'https://mangaball.net/chapter-detail/689b2f0aaafdff27c6332230/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/689b2f0aaafdff27c6332230/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('689b2f0aaafdff27c6332230')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68a006b8e9f7e077f5351d7b">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 123
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/zapdos.png" class="object-fit-contain" alt="Zapdos" style="width: 18px;">
                Zapdos
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>7 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68a006b8e9f7e077f5351d7b')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68a006b8e9f7e077f5351d7b')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d7b/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d7b/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68a006b8e9f7e077f5351d7b', 'Chapter 123', 'https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d7b/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d7b/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68a006b8e9f7e077f5351d7b')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="6898b878854570575ec9c07b">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 123
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/entei.png" class="object-fit-contain" alt="Entei" style="width: 18px;">
                Entei
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>9 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '6898b878854570575ec9c07b')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '6898b878854570575ec9c07b')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/6898b878854570575ec9c07b/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/6898b878854570575ec9c07b/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('6898b878854570575ec9c07b', 'Chapter 123', 'https://mangaball.net/chapter-detail/6898b878854570575ec9c07b/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/6898b878854570575ec9c07b/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('6898b878854570575ec9c07b')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 122</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68ede0c0fbaa6f24d22a8f15">
                <span class="badge" style="background:#009b3a;color:#fff;">
            Portuguese (Brazil)
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>122
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/hitmonchan.png" class="object-fit-contain" alt="Hitmonchan" style="width: 18px;">
                Hitmonchan
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>2 days ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68ede0c0fbaa6f24d22a8f15')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68ede0c0fbaa6f24d22a8f15')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68ede0c0fbaa6f24d22a8f15/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68ede0c0fbaa6f24d22a8f15/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68ede0c0fbaa6f24d22a8f15', '122', 'https://mangaball.net/chapter-detail/68ede0c0fbaa6f24d22a8f15/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68ede0c0fbaa6f24d22a8f15/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68ede0c0fbaa6f24d22a8f15')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68a7cfecd2c1e2b98d5ab57d">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 122
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/lugia.png" class="object-fit-contain" alt="Lugia" style="width: 18px;">
                Lugia
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>7 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68a7cfecd2c1e2b98d5ab57d')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68a7cfecd2c1e2b98d5ab57d')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab57d/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab57d/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68a7cfecd2c1e2b98d5ab57d', 'Chapter 122', 'https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab57d/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab57d/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68a7cfecd2c1e2b98d5ab57d')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="689b2f0aaafdff27c633222f">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Ch. 122 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/articuno.png" class="object-fit-contain" alt="Articuno" style="width: 18px;">
                Articuno
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>7 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>5
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '689b2f0aaafdff27c633222f')">
                <i class="fas fa-heart me-1"></i>3.5K
            </span>
            <span class="comments small text-info" onclick="showComments(this, '689b2f0aaafdff27c633222f')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/689b2f0aaafdff27c633222f/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/689b2f0aaafdff27c633222f/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('689b2f0aaafdff27c633222f', 'Ch. 122 ', 'https://mangaball.net/chapter-detail/689b2f0aaafdff27c633222f/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/689b2f0aaafdff27c633222f/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('689b2f0aaafdff27c633222f')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68a006b8e9f7e077f5351d7a">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 122
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/zapdos.png" class="object-fit-contain" alt="Zapdos" style="width: 18px;">
                Zapdos
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>8 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68a006b8e9f7e077f5351d7a')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68a006b8e9f7e077f5351d7a')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d7a/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d7a/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68a006b8e9f7e077f5351d7a', 'Chapter 122', 'https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d7a/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d7a/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68a006b8e9f7e077f5351d7a')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="6898b878854570575ec9c07a">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 122
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/entei.png" class="object-fit-contain" alt="Entei" style="width: 18px;">
                Entei
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>9 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>1
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '6898b878854570575ec9c07a')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '6898b878854570575ec9c07a')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/6898b878854570575ec9c07a/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/6898b878854570575ec9c07a/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('6898b878854570575ec9c07a', 'Chapter 122', 'https://mangaball.net/chapter-detail/6898b878854570575ec9c07a/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/6898b878854570575ec9c07a/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('6898b878854570575ec9c07a')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 121</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68ede0c1fbaa6f24d22a8f16">
                <span class="badge" style="background:#009b3a;color:#fff;">
            Portuguese (Brazil)
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>121
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/hitmonchan.png" class="object-fit-contain" alt="Hitmonchan" style="width: 18px;">
                Hitmonchan
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>2 days ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68ede0c1fbaa6f24d22a8f16')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68ede0c1fbaa6f24d22a8f16')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68ede0c1fbaa6f24d22a8f16/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68ede0c1fbaa6f24d22a8f16/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68ede0c1fbaa6f24d22a8f16', '121', 'https://mangaball.net/chapter-detail/68ede0c1fbaa6f24d22a8f16/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68ede0c1fbaa6f24d22a8f16/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68ede0c1fbaa6f24d22a8f16')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68a7cfecd2c1e2b98d5ab57c">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 121
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/lugia.png" class="object-fit-contain" alt="Lugia" style="width: 18px;">
                Lugia
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>7 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68a7cfecd2c1e2b98d5ab57c')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68a7cfecd2c1e2b98d5ab57c')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab57c/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab57c/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68a7cfecd2c1e2b98d5ab57c', 'Chapter 121', 'https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab57c/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab57c/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68a7cfecd2c1e2b98d5ab57c')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="689b2f0aaafdff27c633222e">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Ch. 121 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/articuno.png" class="object-fit-contain" alt="Articuno" style="width: 18px;">
                Articuno
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>7 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>4
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '689b2f0aaafdff27c633222e')">
                <i class="fas fa-heart me-1"></i>4.2K
            </span>
            <span class="comments small text-info" onclick="showComments(this, '689b2f0aaafdff27c633222e')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/689b2f0aaafdff27c633222e/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/689b2f0aaafdff27c633222e/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('689b2f0aaafdff27c633222e', 'Ch. 121 ', 'https://mangaball.net/chapter-detail/689b2f0aaafdff27c633222e/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/689b2f0aaafdff27c633222e/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('689b2f0aaafdff27c633222e')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68a006b8e9f7e077f5351d79">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 121
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/zapdos.png" class="object-fit-contain" alt="Zapdos" style="width: 18px;">
                Zapdos
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>8 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68a006b8e9f7e077f5351d79')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68a006b8e9f7e077f5351d79')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d79/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d79/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68a006b8e9f7e077f5351d79', 'Chapter 121', 'https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d79/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d79/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68a006b8e9f7e077f5351d79')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="6873ce75a57ea95009af7084">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 121
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/entei.png" class="object-fit-contain" alt="Entei" style="width: 18px;">
                Entei
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>12 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '6873ce75a57ea95009af7084')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '6873ce75a57ea95009af7084')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/6873ce75a57ea95009af7084/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/6873ce75a57ea95009af7084/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('6873ce75a57ea95009af7084', 'Chapter 121', 'https://mangaball.net/chapter-detail/6873ce75a57ea95009af7084/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/6873ce75a57ea95009af7084/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('6873ce75a57ea95009af7084')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 120</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68ede0c1fbaa6f24d22a8f17">
                <span class="badge" style="background:#009b3a;color:#fff;">
            Portuguese (Brazil)
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>120
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/hitmonchan.png" class="object-fit-contain" alt="Hitmonchan" style="width: 18px;">
                Hitmonchan
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>2 days ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68ede0c1fbaa6f24d22a8f17')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68ede0c1fbaa6f24d22a8f17')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68ede0c1fbaa6f24d22a8f17/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68ede0c1fbaa6f24d22a8f17/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68ede0c1fbaa6f24d22a8f17', '120', 'https://mangaball.net/chapter-detail/68ede0c1fbaa6f24d22a8f17/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68ede0c1fbaa6f24d22a8f17/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68ede0c1fbaa6f24d22a8f17')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68a7cfecd2c1e2b98d5ab57b">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 120
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/lugia.png" class="object-fit-contain" alt="Lugia" style="width: 18px;">
                Lugia
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>7 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68a7cfecd2c1e2b98d5ab57b')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68a7cfecd2c1e2b98d5ab57b')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab57b/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab57b/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68a7cfecd2c1e2b98d5ab57b', 'Chapter 120', 'https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab57b/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab57b/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68a7cfecd2c1e2b98d5ab57b')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="689b2f0aaafdff27c633222d">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Ch. 120 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/articuno.png" class="object-fit-contain" alt="Articuno" style="width: 18px;">
                Articuno
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>7 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>5
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '689b2f0aaafdff27c633222d')">
                <i class="fas fa-heart me-1"></i>3.7K
            </span>
            <span class="comments small text-info" onclick="showComments(this, '689b2f0aaafdff27c633222d')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/689b2f0aaafdff27c633222d/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/689b2f0aaafdff27c633222d/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('689b2f0aaafdff27c633222d', 'Ch. 120 ', 'https://mangaball.net/chapter-detail/689b2f0aaafdff27c633222d/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/689b2f0aaafdff27c633222d/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('689b2f0aaafdff27c633222d')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68a006b8e9f7e077f5351d78">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 120
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/zapdos.png" class="object-fit-contain" alt="Zapdos" style="width: 18px;">
                Zapdos
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>8 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68a006b8e9f7e077f5351d78')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68a006b8e9f7e077f5351d78')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d78/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d78/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68a006b8e9f7e077f5351d78', 'Chapter 120', 'https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d78/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d78/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68a006b8e9f7e077f5351d78')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="6873ce75a57ea95009af7083">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 120
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/entei.png" class="object-fit-contain" alt="Entei" style="width: 18px;">
                Entei
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>12 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '6873ce75a57ea95009af7083')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '6873ce75a57ea95009af7083')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/6873ce75a57ea95009af7083/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/6873ce75a57ea95009af7083/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('6873ce75a57ea95009af7083', 'Chapter 120', 'https://mangaball.net/chapter-detail/6873ce75a57ea95009af7083/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/6873ce75a57ea95009af7083/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('6873ce75a57ea95009af7083')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 119</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68ede0c1fbaa6f24d22a8f18">
                <span class="badge" style="background:#009b3a;color:#fff;">
            Portuguese (Brazil)
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>119
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/hitmonchan.png" class="object-fit-contain" alt="Hitmonchan" style="width: 18px;">
                Hitmonchan
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>2 days ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68ede0c1fbaa6f24d22a8f18')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68ede0c1fbaa6f24d22a8f18')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68ede0c1fbaa6f24d22a8f18/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68ede0c1fbaa6f24d22a8f18/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68ede0c1fbaa6f24d22a8f18', '119', 'https://mangaball.net/chapter-detail/68ede0c1fbaa6f24d22a8f18/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68ede0c1fbaa6f24d22a8f18/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68ede0c1fbaa6f24d22a8f18')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68a7cfecd2c1e2b98d5ab57a">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 119
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/lugia.png" class="object-fit-contain" alt="Lugia" style="width: 18px;">
                Lugia
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>7 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68a7cfecd2c1e2b98d5ab57a')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68a7cfecd2c1e2b98d5ab57a')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab57a/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab57a/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68a7cfecd2c1e2b98d5ab57a', 'Chapter 119', 'https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab57a/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab57a/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68a7cfecd2c1e2b98d5ab57a')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="689b2f0aaafdff27c633222c">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Ch. 119 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/articuno.png" class="object-fit-contain" alt="Articuno" style="width: 18px;">
                Articuno
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>7 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>4
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '689b2f0aaafdff27c633222c')">
                <i class="fas fa-heart me-1"></i>3.4K
            </span>
            <span class="comments small text-info" onclick="showComments(this, '689b2f0aaafdff27c633222c')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/689b2f0aaafdff27c633222c/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/689b2f0aaafdff27c633222c/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('689b2f0aaafdff27c633222c', 'Ch. 119 ', 'https://mangaball.net/chapter-detail/689b2f0aaafdff27c633222c/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/689b2f0aaafdff27c633222c/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('689b2f0aaafdff27c633222c')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68a006b8e9f7e077f5351d77">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 119
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/zapdos.png" class="object-fit-contain" alt="Zapdos" style="width: 18px;">
                Zapdos
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>7 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68a006b8e9f7e077f5351d77')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68a006b8e9f7e077f5351d77')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d77/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d77/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68a006b8e9f7e077f5351d77', 'Chapter 119', 'https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d77/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d77/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68a006b8e9f7e077f5351d77')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="6873ce75a57ea95009af7082">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 119
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/entei.png" class="object-fit-contain" alt="Entei" style="width: 18px;">
                Entei
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>12 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '6873ce75a57ea95009af7082')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '6873ce75a57ea95009af7082')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/6873ce75a57ea95009af7082/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/6873ce75a57ea95009af7082/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('6873ce75a57ea95009af7082', 'Chapter 119', 'https://mangaball.net/chapter-detail/6873ce75a57ea95009af7082/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/6873ce75a57ea95009af7082/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('6873ce75a57ea95009af7082')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 118</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68ede0c2fbaa6f24d22a8f19">
                <span class="badge" style="background:#009b3a;color:#fff;">
            Portuguese (Brazil)
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>118
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/hitmonchan.png" class="object-fit-contain" alt="Hitmonchan" style="width: 18px;">
                Hitmonchan
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>2 days ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68ede0c2fbaa6f24d22a8f19')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68ede0c2fbaa6f24d22a8f19')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68ede0c2fbaa6f24d22a8f19/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68ede0c2fbaa6f24d22a8f19/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68ede0c2fbaa6f24d22a8f19', '118', 'https://mangaball.net/chapter-detail/68ede0c2fbaa6f24d22a8f19/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68ede0c2fbaa6f24d22a8f19/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68ede0c2fbaa6f24d22a8f19')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68a7cfecd2c1e2b98d5ab579">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 118
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/lugia.png" class="object-fit-contain" alt="Lugia" style="width: 18px;">
                Lugia
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>7 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68a7cfecd2c1e2b98d5ab579')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68a7cfecd2c1e2b98d5ab579')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab579/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab579/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68a7cfecd2c1e2b98d5ab579', 'Chapter 118', 'https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab579/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab579/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68a7cfecd2c1e2b98d5ab579')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="689b2f0aaafdff27c633222b">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Ch. 118 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/articuno.png" class="object-fit-contain" alt="Articuno" style="width: 18px;">
                Articuno
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>7 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>8
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '689b2f0aaafdff27c633222b')">
                <i class="fas fa-heart me-1"></i>4.0K
            </span>
            <span class="comments small text-info" onclick="showComments(this, '689b2f0aaafdff27c633222b')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/689b2f0aaafdff27c633222b/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/689b2f0aaafdff27c633222b/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('689b2f0aaafdff27c633222b', 'Ch. 118 ', 'https://mangaball.net/chapter-detail/689b2f0aaafdff27c633222b/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/689b2f0aaafdff27c633222b/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('689b2f0aaafdff27c633222b')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68a006b8e9f7e077f5351d76">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 118
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/zapdos.png" class="object-fit-contain" alt="Zapdos" style="width: 18px;">
                Zapdos
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>7 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68a006b8e9f7e077f5351d76')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68a006b8e9f7e077f5351d76')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d76/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d76/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68a006b8e9f7e077f5351d76', 'Chapter 118', 'https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d76/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d76/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68a006b8e9f7e077f5351d76')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="6873ce75a57ea95009af7081">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 118
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/entei.png" class="object-fit-contain" alt="Entei" style="width: 18px;">
                Entei
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>12 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '6873ce75a57ea95009af7081')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '6873ce75a57ea95009af7081')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/6873ce75a57ea95009af7081/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/6873ce75a57ea95009af7081/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('6873ce75a57ea95009af7081', 'Chapter 118', 'https://mangaball.net/chapter-detail/6873ce75a57ea95009af7081/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/6873ce75a57ea95009af7081/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('6873ce75a57ea95009af7081')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 117</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68ede0c2fbaa6f24d22a8f1a">
                <span class="badge" style="background:#009b3a;color:#fff;">
            Portuguese (Brazil)
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>117
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/hitmonchan.png" class="object-fit-contain" alt="Hitmonchan" style="width: 18px;">
                Hitmonchan
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>2 days ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68ede0c2fbaa6f24d22a8f1a')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68ede0c2fbaa6f24d22a8f1a')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68ede0c2fbaa6f24d22a8f1a/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68ede0c2fbaa6f24d22a8f1a/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68ede0c2fbaa6f24d22a8f1a', '117', 'https://mangaball.net/chapter-detail/68ede0c2fbaa6f24d22a8f1a/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68ede0c2fbaa6f24d22a8f1a/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68ede0c2fbaa6f24d22a8f1a')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68a7cfecd2c1e2b98d5ab578">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 117
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/lugia.png" class="object-fit-contain" alt="Lugia" style="width: 18px;">
                Lugia
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>7 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68a7cfecd2c1e2b98d5ab578')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68a7cfecd2c1e2b98d5ab578')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab578/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab578/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68a7cfecd2c1e2b98d5ab578', 'Chapter 117', 'https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab578/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68a7cfecd2c1e2b98d5ab578/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68a7cfecd2c1e2b98d5ab578')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="689b2f0aaafdff27c633222a">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Ch. 117 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/articuno.png" class="object-fit-contain" alt="Articuno" style="width: 18px;">
                Articuno
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>7 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>3
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '689b2f0aaafdff27c633222a')">
                <i class="fas fa-heart me-1"></i>3.6K
            </span>
            <span class="comments small text-info" onclick="showComments(this, '689b2f0aaafdff27c633222a')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/689b2f0aaafdff27c633222a/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/689b2f0aaafdff27c633222a/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('689b2f0aaafdff27c633222a', 'Ch. 117 ', 'https://mangaball.net/chapter-detail/689b2f0aaafdff27c633222a/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/689b2f0aaafdff27c633222a/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('689b2f0aaafdff27c633222a')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="68a006b8e9f7e077f5351d75">
                <span class="badge" style="background:#ce1126;color:#fff;">
            Indonesian
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 117
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/zapdos.png" class="object-fit-contain" alt="Zapdos" style="width: 18px;">
                Zapdos
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>8 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '68a006b8e9f7e077f5351d75')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '68a006b8e9f7e077f5351d75')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d75/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d75/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('68a006b8e9f7e077f5351d75', 'Chapter 117', 'https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d75/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/68a006b8e9f7e077f5351d75/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('68a006b8e9f7e077f5351d75')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div>
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="6873ce75a57ea95009af7080">
                <span class="badge" style="background:#00247d;color:#fff;">
            English
        </span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Chapter 117
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/entei.png" class="object-fit-contain" alt="Entei" style="width: 18px;">
                Entei
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>12 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '6873ce75a57ea95009af7080')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '6873ce75a57ea95009af7080')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/6873ce75a57ea95009af7080/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/6873ce75a57ea95009af7080/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('6873ce75a57ea95009af7080', 'Chapter 117', 'https://mangaball.net/chapter-detail/6873ce75a57ea95009af7080/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/6873ce75a57ea95009af7080/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('6873ce75a57ea95009af7080')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div></div></div>
            <div class="d-flex justify-content-center g-3" id="chaptersPagination"><ul class="pagination pagination-sm mb-0"><li class="page-item disabled"><a class="page-link" style="cursor: pointer;" href="javascript:void(0)"><i class="fas fa-angles-left"></i></a></li><li class="page-item disabled"><a class="page-link" style="cursor: pointer;" href="javascript:void(0)"><i class="fas fa-angle-left"></i></a></li><li class="page-item active"><a class="page-link" style="cursor: pointer;" href="javascript:void(0)">1</a></li><li class="page-item"><a class="page-link" style="cursor: pointer;" onclick="setPageChapter(2)">2</a></li><li class="page-item"><a class="page-link" style="cursor: pointer;" onclick="setPageChapter(3)">3</a></li><li class="page-item disabled"><span class="page-link">…</span></li><li class="page-item"><a class="page-link" style="cursor: pointer;" onclick="setPageChapter(8)">8</a></li><li class="page-item"><a class="page-link" style="cursor: pointer;" onclick="setPageChapter(2)"><i class="fas fa-angle-right"></i></a></li><li class="page-item"><a class="page-link" style="cursor: pointer;" onclick="setPageChapter(8)"><i class="fas fa-angles-right"></i></a></li></ul></div>
        </div>
    </section>
</div>
<script>
    let ALL_CHAPTERS = [];
    let CHAPTER_FILTERS = [];
    let ALL_LANGUAGES = [];
    let ALL_VOLUMES = [];
    let ALL_SORT = ['newest', 'oldest', 'views', 'likes', 'comments'];
    let PAGE_SIZE = 20;
    let PAGE_NUMBER = 1;
    let PAGE_TOTAL = 0;
    let TOTAL_TRANSLATIONS = 0;
    let SEARCH_CHAPTER_NUMBER = '';
    let currentFilters = {
        languages: [...ALL_LANGUAGES],
        volumes: [...ALL_VOLUMES],
        sort: 'newest'
    };

    // API Routes - Store in window object for global access
    window.apiRoutes = {
        loadReplies: '/api/v1/comment/load-replies/'
    };
    $(document).ready(async function() {
        await getChapterListingByTitleId();
        initializeFilters();
        initChapterInteractions();
        $('.totalChapters').text(ALL_CHAPTERS.length);
        $('.totalTranslations').text(TOTAL_TRANSLATIONS);
    });
    async function getChapterListingByTitleId() {
        showLoading();
        const url = '/api/v1/chapter/chapter-listing-by-title-id/';
        const data = {
            title_id: titleId,
        };
        await $.ajax({
            url: url,
            type: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: data,
            success: async function(response) {
                hideLoading();
                if (response.code == 200 && response.ALL_CHAPTERS && response.ALL_CHAPTERS.length > 0) {
                    ALL_CHAPTERS = response.ALL_CHAPTERS;
                    ALL_LANGUAGES = response.ALL_LANGUAGES;
                    ALL_VOLUMES = response.ALL_VOLUMES;
                    TOTAL_TRANSLATIONS = response.TOTAL_TRANSLATIONS;
                    PAGE_TOTAL = Math.ceil(ALL_CHAPTERS.length / PAGE_SIZE);
                    if (PAGE_TOTAL > 1) {
                        $('#chaptersPagination').show();
                    } else {
                        $('#chaptersPagination').hide();
                    }
                }
            }
        });
    }

    function updateSortToggleDisplay() {
        const sortToggleBtn = $('#sortToggleBtn');
        const sortToggleText = $('#sortToggleText');
        const sortIcon = sortToggleBtn.find('i');

        if (currentFilters.sort === 'newest') {
            sortToggleText.text('Newest');
            sortIcon.removeClass('fa-sort-amount-up').addClass('fa-sort-amount-down');
        } else {
            sortToggleText.text('Oldest');
            sortIcon.removeClass('fa-sort-amount-down').addClass('fa-sort-amount-up');
        }
    }

    async function initializeFilters() {
        currentFilters.languages = [...ALL_LANGUAGES];
        currentFilters.volumes = [...ALL_VOLUMES];
        // Update sort toggle button display
        updateSortToggleDisplay();
        const languageOptions = renderHtml.renderOptionFilter('language', ALL_LANGUAGES);
        document.getElementById('languageDropdown').innerHTML = languageOptions;
        const volumeOptions = renderHtml.renderOptionFilter('volume', ALL_VOLUMES);
        document.getElementById('volumeDropdown').innerHTML = volumeOptions;
        initializeMultiSelect('language', currentFilters.languages);
        initializeMultiSelect('volume', currentFilters.volumes);
        await applyFilters();
    }

    function initializeMultiSelect(type, selectedValues) {
        const container = document.getElementById(`selected${type.charAt(0).toUpperCase() + type.slice(1)}s`);
        const dropdown = document.getElementById(`${type}Dropdown`);

        if (!container || !dropdown) {
            return;
        }

        updateSelectedItemsDisplay(type, selectedValues);

        dropdown.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
            checkbox.checked = selectedValues.map(String).includes(checkbox.value);
        });

        container.addEventListener('click', (e) => {
            e.stopPropagation();
            toggleDropdown(dropdown, container);
        });

        dropdown.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
            checkbox.addEventListener('change', (e) => {
                handleMultiSelectChange(type, e.target.value, e.target.checked);
            });
        });

        document.addEventListener('click', (e) => {
            if (!container.contains(e.target) && !dropdown.contains(e.target)) {
                closeDropdown(dropdown, container);
            }
        });
    }

    function removeMultiSelectItem(type, value) {
        const filterKey = type === 'language' ? 'languages' : 'volumes';

        currentFilters[filterKey] = currentFilters[filterKey].filter(v => v !== value);

        document.getElementById(`${type}-${value}`).checked = false;

        if (currentFilters[filterKey].length === 0) {
            currentFilters[filterKey] = ['all'];
            document.getElementById(`${type}-all`).checked = true;
        }

        updateSelectedItemsDisplay(type, currentFilters[filterKey]);
        PAGE_NUMBER = 1;
        applyFilters();
    }

    function removeFilter(filterType, value) {
        if (filterType === 'sort') {
            currentFilters.sort = 'newest';
            updateSortToggleDisplay();
        } else {
            currentFilters[filterType] = currentFilters[filterType].filter(v => String(v) !== String(value));
            const type = filterType === 'languages' ? 'language' : 'volume';
            document.querySelectorAll(`#${type}Dropdown input[type="checkbox"]`).forEach(cb => {
                cb.checked = currentFilters[filterType].map(String).includes(cb.value);
            });
            updateSelectedItemsDisplay(type, currentFilters[filterType]);
        }
        PAGE_NUMBER = 1;
        applyFilters();
    }

    function updateActiveFilters() {
        const activeFiltersContainer = document.getElementById('activeFilters');
        let html = '';

        if (currentFilters.languages && !currentFilters.languages.includes('all') && currentFilters.languages.length > 0) {
            currentFilters.languages.forEach(lang => {
                const languageName = renderHtml.renderGetLanguageName(lang);
                html += `<span class="filter-tag">
                        <i class="fas fa-language"></i>
                        ${languageName}
                        <button class="remove-filter" onclick="removeFilter('languages', '${lang}')">
                            <i class="fas fa-times"></i>
                        </button>
                    </span>`;
            });
        }

        if (currentFilters.volumes && !currentFilters.volumes.includes('all') && currentFilters.volumes.length > 0) {
            currentFilters.volumes.forEach(vol => {
                html += `<span class="filter-tag">
                        <i class="fas fa-book"></i>
                        Volume ${vol}
                        <button class="remove-filter" onclick="removeFilter('volumes', '${vol}')">
                            <i class="fas fa-times"></i>
                        </button>
                    </span>`;
            });
        }

        if (currentFilters.sort && currentFilters.sort !== 'newest') {
            const sortName = renderHtml.renderGetSortName(currentFilters.sort);
            html += `<span class="filter-tag">
                    <i class="fas fa-sort"></i>
                    ${sortName}
                    <button class="remove-filter" onclick="removeFilter('sort')">
                        <i class="fas fa-times"></i>
                    </button>
                </span>`;
        }
        activeFiltersContainer.innerHTML = html;
    }

    async function renderChaptersByVolume(data) {
        if (data.length === 0) {
            $('#chaptersContainer').html(renderHtml.render_empty_data());
            return;
        }
        const container = document.getElementById('chaptersContainer');
        let html = chapterHtml.renderChaptersByVolume(data);
        container.innerHTML = html;
    }

    async function renderChaptersNoVolume(data) {
        let start = (PAGE_NUMBER - 1) * PAGE_SIZE;
        let end = start + PAGE_SIZE;
        data = data.slice(start, end);
        if (data.length === 0) {
            $('#chaptersContainer').html(renderHtml.render_empty_data());
            return;
        }
        const container = document.getElementById('chaptersContainer');
        let html = chapterHtml.renderGenerateChaptersNoVolume(data);
        container.innerHTML = html;
    }

    function clearFilters() {
        PAGE_NUMBER = 1;
        currentFilters = {
            languages: [],
            volumes: [],
            sort: 'newest'
        };
        updateSortToggleDisplay();

        document.querySelectorAll('#languageDropdown input[type="checkbox"]').forEach(cb => {
            cb.checked = ALL_LANGUAGES.map(String).includes(cb.value);
        });
        updateSelectedItemsDisplay('language', []);

        document.querySelectorAll('#volumeDropdown input[type="checkbox"]').forEach(cb => {
            cb.checked = ALL_VOLUMES.map(String).includes(cb.value);
        });
        updateSelectedItemsDisplay('volume', []);

        applyFilters();
    }

    async function applyFilters() {
        filterAndSortChapters(ALL_CHAPTERS, currentFilters.volumes, currentFilters.languages, currentFilters.sort);
        updateActiveFilters();
        countChapterStats(CHAPTER_FILTERS);
        await renderChaptersNoVolume(CHAPTER_FILTERS);
        setChapterReadingToChapterList();
        renderPaginationChapter({
            current_page: PAGE_NUMBER,
            last_page: Math.ceil(CHAPTER_FILTERS.length / PAGE_SIZE)
        }, 'chaptersPagination');
    }

    function setPageChapter(page) {
        PAGE_NUMBER = page;
        applyFilters();
        $('html, body').animate({
            scrollTop: $('#chaptersContainer').offset().top - 100
        }, 500);
    }

    function saveFilters() {
        localStorage.setItem('mangaFilters', JSON.stringify(currentFilters));

        const saveBtn = document.getElementById('saveFiltersBtn');
        const originalText = saveBtn.innerHTML;
        saveBtn.innerHTML = '<i class="fas fa-check me-1"></i>Saved';
        saveBtn.classList.remove('btn-outline-info');
        saveBtn.classList.add('btn-success');
        saveBtn.classList.add('btn-success-animation');

        setTimeout(() => {
            saveBtn.innerHTML = originalText;
            saveBtn.classList.remove('btn-success', 'btn-success-animation');
            saveBtn.classList.add('btn-outline-info');
        }, 2000);
    }

    function filterAndSortChapters(data, selectedVolumes = [], selectedLanguages = [], sortType = 'newest') {
        const stringVolumes = selectedVolumes.map(v => Number(v).toFixed(1));
        const stringLanguages = selectedLanguages.map(String);

        const sortMap = {
            newest: (a, b) => (b.number_float || parseFloat(b.number) || 0) - (a.number_float || parseFloat(a.number) || 0),
            oldest: (a, b) => (a.number_float || parseFloat(a.number) || 0) - (b.number_float || parseFloat(b.number) || 0),
            views: (a, b) => b.views - a.views,
            likes: (a, b) => b.likes - a.likes,
            comments: (a, b) => b.comments - a.comments
        };

        const sortFn = sortMap[sortType] || sortMap.newest;

        let filteredData = data;
        if (SEARCH_CHAPTER_NUMBER !== '') {
            const searchInput = SEARCH_CHAPTER_NUMBER.trim();
            const isExactSearch = searchInput.endsWith('#');
            const searchValue = isExactSearch ? searchInput.slice(0, -1).trim() : searchInput;

            if (isExactSearch) {
                // Tìm chính xác với dấu #
                const searchNumber = parseFloat(searchValue);
                if (!isNaN(searchNumber)) {
                    filteredData = data.filter(chapter => {
                        return chapter.number_float === searchNumber;
                    });
                } else {
                    filteredData = data.filter(chapter => {
                        return chapter.number.toLowerCase() === searchValue.toLowerCase();
                    });
                }
            } else {
                // Tìm theo includes
                const searchNumber = parseFloat(searchValue);
                if (!isNaN(searchNumber)) {
                    filteredData = data.filter(chapter => {
                        return chapter.number_float === searchNumber ||
                            chapter.number.toLowerCase().includes(searchValue.toLowerCase());
                    });
                } else {
                    filteredData = data.filter(chapter => {
                        return chapter.number.toLowerCase().includes(searchValue.toLowerCase());
                    });
                }
            }
        }

        const chapterFilters = filteredData.map(chapter => {
                const filteredTranslations = chapter.translations
                    .filter(t =>
                        stringLanguages.includes(String(t.language)) &&
                        stringVolumes.includes(Number(t.volume).toFixed(1))
                    );

                return {
                    ...chapter,
                    translations: filteredTranslations
                };
            }).filter(chap => chap.translations.length > 0)
            .sort(sortFn);

        CHAPTER_FILTERS = chapterFilters;
        return chapterFilters;
    }


    function setChapterReadingToChapterList() {
        if (Array.isArray(ALL_CHAPTER_READING_IDS) && ALL_CHAPTER_READING_IDS.length > 0) {
            $('.chapter-translation').each(function() {
                const chapterId = $(this).data('chapter-id');
                if (ALL_CHAPTER_READING_IDS.includes(chapterId)) {
                    $(this).find('button.btn-read').html(`<i class="fas fa-check me-1"></i>Readed`);
                    $(this).addClass('translation-current');
                }
            });
        }
    }

    function renderChapterReading() {
        const container = document.getElementById('chaptersContainer');
        let html = chapterHtml.renderChapterReading(ALL_CHAPTER_READING);
        container.innerHTML = html;
    }

    function callLikes(element, chapterId) {
        showLoading();
        if (!Array.isArray(ALL_CHAPTERS)) {
            hideLoading();
            return;
        }

        let found = false;

        ALL_CHAPTERS.forEach(chapter => {
            (chapter.translations || []).forEach(translation => {
                if (translation.id === chapterId) {
                    translation.likes = (translation.likes || 0) + 1;
                    $(element).html(`<i class="fas fa-heart me-1"></i>${translation.likes}`);
                    found = true;
                }
            });
        });
        $('#titleStatsLikes').html(parseInt($('#titleStatsLikes').text()) + 1);
        if (!found) {
            hideLoading();
            return;
        } else {
            $.ajax({
                url: '/api/v1/chapter/action-likes/',
                type: 'POST',
                data: {
                    chapterId: chapterId,
                    titleId: titleId
                },
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                success: function(response) {
                    hideLoading();
                    return;
                },
                error: function(xhr, status, error) {
                    hideLoading();
                    return;
                }
            });
        }
    }
    $(document).ready(function() {
        $('#commentsModal').on('hidden.bs.modal', function() {
            $('#commentList').html('');
            $('#commentStart').val(0);
            $('#commentLimit').val(10);
            $('#commentInput').val('');
            $('#commentParentId').val('');
            $('#commentObjectId').val('');
        });

        $('#commentsModal #submitCommentBtn').on('click', function() {
            sendComment();
        });

        $('#filtersCollapse').on('show.bs.collapse', function() {
            $('[data-bs-target="#filtersCollapse"]').html('<i class="fas fa-chevron-up me-1"></i>Collapse');
        });

        $('#filtersCollapse').on('hide.bs.collapse', function() {
            $('[data-bs-target="#filtersCollapse"]').html('<i class="fas fa-chevron-down me-1"></i>Expand');
        });

        $('#searchChapterInput').on('input', function() {
            SEARCH_CHAPTER_NUMBER = $(this).val().trim();
            PAGE_NUMBER = 1;
            applyFilters();
        });

        $('#clearSearchBtn').on('click', function() {
            $('#searchChapterInput').val('');
            SEARCH_CHAPTER_NUMBER = '';
            PAGE_NUMBER = 1;
            applyFilters();
        });

        $('#sortToggleBtn').on('click', function() {
            if (currentFilters.sort === 'newest') {
                currentFilters.sort = 'oldest';
                $('#sortToggleText').text('Oldest');
                $(this).find('i').removeClass('fa-sort-amount-down').addClass('fa-sort-amount-up');
            } else {
                currentFilters.sort = 'newest';
                $('#sortToggleText').text('Newest');
                $(this).find('i').removeClass('fa-sort-amount-up').addClass('fa-sort-amount-down');
            }
            PAGE_NUMBER = 1;
            applyFilters();
        });
    });
</script>
<script>
    // Function show comments
    function showComments(element, chapterId) {
        $('#commentsModal #commentObjectId').val(chapterId);
        $('#commentsModal #commentStart').val(0);
        $('#commentsModal #commentLimit').val(10);
        $('#commentList').html('');
        loadComments();
        $('#commentsModal').modal('show');
    }
    // Send comment - optimized
    function sendComment() {
        const $modal = $('#commentsModal');
        const commentInput = $modal.find('#commentInput').val().trim();
        const commentParentId = $modal.find('#commentParentId').val();
        const commentChapterId = $modal.find('#commentObjectId').val();

        if (!commentInput) {
            alert('Please enter your comment');
            return;
        }

        const csrfToken = $('meta[name="csrf-token"]').attr('content');
        showLoading();

        $.ajax({
            url: '/api/v1/comment/send-comment/',
            type: 'POST',
            data: {
                content: commentInput,
                parent_id: commentParentId,
                object_id: commentChapterId,
                object_type: 'chapter'
            },
            headers: {
                'X-CSRF-TOKEN': csrfToken
            },
            success: function(response) {
                console.log('Send comment response:', response);

                if (response.code === 200) {
                    // Check if this is a reply or a new comment
                    if (commentParentId && commentParentId !== '') {
                        console.log('Processing reply for parent:', commentParentId);

                        // This is a reply - find parent comment (not reply)
                        // Need to find the main comment, not a reply item
                        let $parentComment = $(`.comment-item[data-comment-id="${commentParentId}"]`).not('.reply-item');

                        console.log('Parent comment found:', $parentComment.length);

                        if ($parentComment.length > 0) {
                            let $repliesContainer = $parentComment.find('.replies-container').first();

                            console.log('Replies container found:', $repliesContainer.length);

                            // If replies container doesn't exist yet, create the entire structure
                            if ($repliesContainer.length === 0) {
                                console.log('Creating new replies structure');

                                // Find the container where we need to add replies
                                const $replySection = $parentComment.find('.flex-grow-1').last();

                                const repliesHtml = `
                                    <div class="d-flex mt-2 align-items-start">
                                        <div style="width: 12px; border-left: 2px solid #444; margin-right: 10px;"></div>
                                        <div class="flex-grow-1">
                                            <ul class="list-unstyled">
                                                <li class="position-relative ps-4">
                                                    <div class="position-absolute top-0 bottom-0 start-0 border-start border-2 border-secondary" style="margin-left: 12px;"></div>
                                                    <div class="text-white small py-1" style="cursor: pointer;" onclick="toggleReplies(this, '${commentParentId}')">
                                                        <i class="fas fa-chevron-up me-1"></i>
                                                        <span class="reply-text">View 1 replies</span>
                                                    </div>
                                                    <div class="replies-container" style="display: block; margin-top: 0.5rem;">
                                                        <!-- Replies will be loaded here -->
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                `;

                                // Remove old reply section if exists
                                $replySection.find('.d-flex.mt-2').remove();
                                // Add new structure
                                $replySection.append(repliesHtml);

                                $repliesContainer = $parentComment.find('.replies-container').first();
                                console.log('Replies container created, found again:', $repliesContainer.length);
                            }

                            // Render and add the reply
                            const replyHtml = commentHtml.renderReply(response.comment);
                            console.log('Reply HTML generated, adding to container');
                            $repliesContainer.prepend(replyHtml);

                            // Show the replies container if it's hidden
                            if (!$repliesContainer.is(':visible')) {
                                $repliesContainer.slideDown(300);
                                const $toggleDiv = $parentComment.find('.text-white.small[style*="cursor: pointer"]').first();
                                const $icon = $toggleDiv.find('i');
                                $icon.removeClass('fa-chevron-down').addClass('fa-chevron-up');
                            }

                            // Update the reply count in the toggle text
                            const $replyText = $parentComment.find('.reply-text').first();
                            if ($replyText.length > 0) {
                                const currentCount = parseInt($replyText.text().match(/\d+/)?.[0]) || 0;
                                $replyText.text(`View ${currentCount + 1} replies`);
                                console.log('Updated reply count to:', currentCount + 1);
                            }
                        } else {
                            console.error('Parent comment not found for ID:', commentParentId);
                        }

                        // Clear the parent_id after adding reply
                        $modal.find('#commentParentId').val('');
                    } else {
                        console.log('Adding new comment');
                        // This is a new comment - add to comment list
                        $('#commentList').prepend(commentHtml.renderComment(response.comment));
                        // Increment comment start 
                        const $commentStart = $modal.find('#commentStart');
                        $commentStart.val(parseInt($commentStart.val()) + 1);
                    }

                    // Clear the input field
                    $modal.find('#commentInput').val('');
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: response.message
                    });
                }
            },
            error: function() {
                // Error handled silently
            },
            complete: hideLoading
        });
    }
    // Load comments - optimized
    function loadComments() {
        const $modal = $('#commentsModal');
        const commentObjectId = $modal.find('#commentObjectId').val();
        const commentObjectType = 'chapter';
        const commentStart = $modal.find('#commentStart').val();
        const commentLimit = $modal.find('#commentLimit').val();

        if (!commentObjectId || !commentObjectType || !commentStart || !commentLimit) {
            console.error('Missing required parameters');
            return;
        }

        const csrfToken = $('meta[name="csrf-token"]').attr('content');

        $.ajax({
            url: '/api/v1/comment/load-comments/',
            type: 'POST',
            data: {
                object_id: commentObjectId,
                object_type: commentObjectType,
                start: commentStart,
                limit: commentLimit
            },
            headers: {
                'X-CSRF-TOKEN': csrfToken
            },
            success: function(response) {
                if (response.code === 200 && response.data?.length > 0) {
                    const html = commentHtml.renderCommentMultiple(response.data);
                    const $commentList = $modal.find('#commentList');
                    const $loadMoreBtn = $modal.find('#loadMoreBtn');

                    // Update comment start and limit
                    $modal.find('#commentStart').val(response.nextStart);
                    $modal.find('#commentLimit').val(response.limit);

                    // Update title comment
                    $modal.find('#commentsModalLabel').html(response.title);

                    // Add comments
                    if (commentStart == 0) {
                        $commentList.html(html);
                    } else {
                        $commentList.append(html);
                    }

                    // Update load more button
                    $loadMoreBtn.prop('disabled', response.data.length < response.limit);
                }
            },
            error: function() {
                console.error('Error loading comments');
            }
        });
    }
    $(document).ready(function() {
        const $modal = $('#commentsModal');

        $modal.on('hidden.bs.modal', function() {
            // Clear comment list
            $('#commentList').html('');
            // Reset comment start and limit
            $modal.find('#commentStart').val(0);
            $modal.find('#commentLimit').val(10);
            // Clear comment input
            $modal.find('#commentInput').val('');
            // Clear comment parent id
            $modal.find('#commentParentId').val('');
            // Clear comment chapter id
            $modal.find('#commentObjectId').val('');
        });
    });
</script>
<style>
    .breadcrumb {
        background: transparent;
        padding: 0;
    }

    .breadcrumb-item+.breadcrumb-item::before {
        color: #666;
    }

    .featured-comic-carousel {
        min-height: 420px;
        background-color: #222;
        background-blend-mode: darken;
    }

    .featured-comic-carousel .featured-cover {
        border-radius: 1rem;
        box-shadow: 0 0.5rem 2rem rgba(0, 0, 0, 0.4);
        background: #fff;
    }

    .chapters-container {
        position: relative;
    }

    .chapter-item {
        background: #232323;
        border-radius: 16px;
        padding: 1.5rem;
        transition: all 0.3s ease;
        border: 1px solid transparent;
        position: relative;
        overflow: hidden;
    }

    .chapter-item::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: linear-gradient(90deg, #ff6740, #ff4500);
        transform: scaleX(0);
        transition: transform 0.3s ease;
    }

    .chapter-item:hover {
        background: #282828;
        border-color: #ff6740;
        transform: translateY(-3px);
        box-shadow: 0 8px 25px rgba(255, 103, 64, 0.15);
    }

    .chapter-item:hover::before {
        transform: scaleX(1);
    }

    .chapter-item.collapsed {
        max-height: 80px;
        overflow: hidden;
    }

    .chapter-item.expanded {
        max-height: none;
    }

    .chapter-header {
        display: flex;
        justify-content: between;
        align-items: center;
        cursor: pointer;
    }

    .chapter-info {
        flex-grow: 1;
    }

    .chapter-number {
        font-weight: 700;
        color: #ff6740;
        font-size: 1.1rem;
        margin-bottom: 0.25rem;
    }

    .chapter-title {
        color: #fff;
        font-weight: 500;
        margin-bottom: 0.5rem;
    }

    .chapter-meta {
        font-size: 0.85rem;
        color: #888;
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .chapter-actions {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .chapter-details {
        margin-top: 1rem;
        padding-top: 1rem;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        display: none;
    }

    .chapter-item.expanded .chapter-details {
        display: block;
    }

    .expand-icon {
        transition: transform 0.3s ease;
        color: #666;
    }

    .chapter-item.expanded .expand-icon {
        transform: rotate(180deg);
        color: #ff6740;
    }

    .chapter-stats {
        display: flex;
        gap: 1rem;
        margin-bottom: 0.5rem;
    }

    .stat-item {
        display: flex;
        align-items: center;
        gap: 0.25rem;
        font-size: 0.85rem;
        color: #888;
    }

    .chapter-description {
        color: #ccc;
        font-size: 0.9rem;
        line-height: 1.5;
        margin-bottom: 1rem;
    }

    .chapter-tags {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }

    .chapter-tag {
        background: rgba(255, 103, 64, 0.1);
        color: #ff6740;
        padding: 0.25rem 0.5rem;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .related-comic-card {
        background: #232323;
        border-radius: 12px;
        overflow: hidden;
        transition: transform 0.2s;
    }

    .related-comic-card:hover {
        transform: translateY(-5px);
    }

    .related-comic-cover {
        width: 100%;
        aspect-ratio: 215/307;
        object-fit: cover;
    }

    @media (max-width: 767px) {
        .featured-comic-carousel .display-5 {
            font-size: 2rem;
        }

        .featured-comic-carousel .lead {
            font-size: 1rem;
        }

        .chapter-item {
            padding: 1rem;
        }

        .chapter-meta {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.25rem;
        }
    }

    /* Animation for expanding/collapsing */
    .chapter-item {
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .chapter-details {
        opacity: 0;
        transform: translateY(-10px);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .chapter-item.expanded .chapter-details {
        opacity: 1;
        transform: translateY(0);
    }

    /* Loading animation */
    .loading-chapters {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 2rem;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid rgba(255, 103, 64, 0.1);
        border-left: 4px solid #ff6740;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    /* Description Styles */
    .description-container {
        background: rgba(35, 35, 35, 0.8);
        border-radius: 16px;
        padding: 1.5rem;
        position: relative;
        border: 1px solid rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
    }

    .description-header h4 {
        font-weight: 600;
        border-bottom: 2px solid #ff6740;
        padding-bottom: 0.5rem;
        display: inline-block;
    }

    .description-content {
        position: relative;
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        overflow: hidden;
        color: #fff;
    }

    .description-content.collapsed {
        max-height: 120px;
        mask-image: linear-gradient(to bottom, black 60%, transparent 100%);
        -webkit-mask-image: linear-gradient(to bottom, black 60%, transparent 100%);
    }

    .description-content.expanded {
        max-height: none;
        mask-image: none;
        -webkit-mask-image: none;
    }

    .description-text {
        font-size: 0.9rem;
    }

    .description-text p {
        margin-bottom: 1.5rem;
        text-align: justify;
    }

    .description-highlights {
        padding-top: 0.75rem;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
    }

    .highlight-item {
        display: flex;
        align-items: center;
        padding: 0.25rem 0.75rem;
        background: rgba(255, 103, 64, 0.05);
        border-radius: 12px;
        border-left: 3px solid #ff6740;
        transition: all 0.3s ease;
    }

    .highlight-item:hover {
        background: rgba(255, 103, 64, 0.1);
        transform: translateX(5px);
    }

    .highlight-item i {
        font-size: 1.1rem;
        width: 20px;
        text-align: center;
    }

    .description-overlay {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        height: 60px;
        background: linear-gradient(to bottom, transparent, rgba(35, 35, 35, 0.9));
        pointer-events: none;
        transition: opacity 0.3s ease;
    }

    .description-overlay.collapsed {
        opacity: 1;
    }

    .description-overlay.expanded {
        opacity: 0;
    }

    .description-actions {
        text-align: center;
        /* margin-top: 1rem; */
        padding-top: 0.5rem;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
    }

    #expandDescriptionBtn {
        transition: all 0.3s ease;
        border-radius: 25px;
        padding: 0.5rem 1.5rem;
        font-weight: 500;
    }

    #expandDescriptionBtn:hover {
        background: #ff6740;
        border-color: #ff6740;
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(255, 103, 64, 0.3);
    }

    #expandDescriptionBtn.expanded i {
        transform: rotate(180deg);
    }

    #expandDescriptionBtn i {
        transition: transform 0.3s ease;
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
        .description-container {
            padding: 1.5rem;
        }

        .description-content.collapsed {
            max-height: 100px;
        }

        .highlight-item {
            padding: 0.5rem;
            font-size: 0.9rem;
        }
    }

    /* Filters Styles */
    .filters-container {
        background: rgba(35, 35, 35, 0.6);
        border-radius: 16px;
        padding: 0.75rem;
        border: 1px solid rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
    }

    .filters-container .form-label {
        font-weight: 500;
        font-size: 0.9rem;
    }

    .filters-container .form-select {
        border-radius: 12px;
        transition: all 0.3s ease;
        padding: 0.5rem 1rem;
    }

    .filters-container .form-select:focus {
        border-color: #ff6740;
        box-shadow: 0 0 0 0.2rem rgba(255, 103, 64, 0.25);
    }

    .active-filters {
        min-height: 40px;
    }

    .filter-tag {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        background: rgba(255, 103, 64, 0.1);
        color: #ff6740;
        padding: 0.15rem 0.5rem;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 500;
        margin: 0.15rem;
        border: 1px solid rgba(255, 103, 64, 0.2);
        transition: all 0.3s ease;
    }

    .filter-tag:hover {
        background: rgba(255, 103, 64, 0.2);
        transform: translateY(-1px);
    }

    .filter-tag .remove-filter {
        background: none;
        border: none;
        color: #ff6740;
        padding: 0;
        font-size: 0.8rem;
        cursor: pointer;
        transition: color 0.3s ease;
    }

    .filter-tag .remove-filter:hover {
        color: #ff4500;
    }

    .filter-actions {
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        padding-top: 1rem;
    }

    .filter-actions .btn {
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .filter-actions .btn:hover {
        transform: translateY(-1px);
    }

    .filter-stats {
        font-weight: 500;
    }

    /* Filter animations */
    .filter-tag {
        animation: slideIn 0.3s ease;
    }

    @keyframes slideIn {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* Filter Container Responsive Enhancement */
    @media (max-width: 576px) {
        .filters-container {
            margin: 0 -1rem;
            border-radius: 0;
        }

        .filter-actions {
            padding: 0.5rem !important;
            /* background: rgba(0, 0, 0, 0.1);
            border-radius: 12px; */
            /* margin-top: 1rem; */
        }

        .filter-stats {
            text-align: center;
            margin-top: 0.25rem;
        }

        .filter-actions .d-flex {
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .filter-actions .btn {
            font-size: 0.8rem;
            padding: 0.375rem 0.75rem;
        }

        .filter-actions .btn i {
            font-size: 0.7rem;
        }
    }

    @media (max-width: 768px) {
        .filter-actions {
            flex-direction: column;
            gap: 1rem;
        }

        .filter-actions .d-flex {
            justify-content: center;
            flex-wrap: wrap;
        }

        .filter-stats {
            order: -1;
            margin-bottom: 0.25em;
        }
    }

    /* Enhanced Filter Buttons */
    .filter-actions .btn {
        position: relative;
        overflow: hidden;
        transition: all 0.3s ease;
        border-width: 2px;
    }

    .filter-actions .btn::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: left 0.5s;
    }

    .filter-actions .btn:hover::before {
        left: 100%;
    }

    .filter-actions .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    }

    .filter-actions .btn:active {
        transform: translateY(0);
    }

    /* Save Button Animation */
    .btn-outline-info {
        border-color: #17a2b8;
        color: #17a2b8;
    }

    .btn-outline-info:hover {
        background-color: #17a2b8;
        border-color: #17a2b8;
        color: white;
    }

    .btn-success {
        background-color: #28a745;
        border-color: #28a745;
        color: white;
    }

    /* Clear Button */
    .btn-outline-secondary {
        border-color: #6c757d;
        color: #6c757d;
    }

    .btn-outline-secondary:hover {
        background-color: #6c757d;
        border-color: #6c757d;
        color: white;
    }

    /* Share Button */
    .btn-outline-success {
        border-color: #28a745;
        color: #28a745;
    }

    .btn-outline-success:hover {
        background-color: #28a745;
        border-color: #28a745;
        color: white;
    }

    /* Export Button */
    .btn-outline-warning {
        border-color: #ffc107;
        color: #ffc107;
    }

    .btn-outline-warning:hover {
        background-color: #ffc107;
        border-color: #ffc107;
        color: #212529;
    }

    /* Filter Stats Enhancement */
    .filter-stats {
        background: rgba(255, 103, 64, 0.1);
        padding: 0.5rem 1rem;
        border-radius: 20px;
        border: 1px solid rgba(255, 103, 64, 0.2);
        font-weight: 600;
    }

    .filter-stats span {
        color: #ff6740;
        font-weight: 700;
    }

    /* Enhanced Filter Tags */
    .filter-tag {
        position: relative;
        overflow: hidden;
    }

    .filter-tag::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
        transition: left 0.5s;
    }

    .filter-tag:hover::before {
        left: 100%;
    }

    .filter-tag .remove-filter {
        position: relative;
        z-index: 2;
    }

    /* Filter Container Enhancement */
    .filters-container {
        position: relative;
        overflow: hidden;
    }

    .filters-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 2px;
        background: linear-gradient(90deg, #ff6740, #ff4500, #ff6740);
        background-size: 200% 100%;
        animation: shimmer 2s infinite;
    }

    @keyframes shimmer {
        0% {
            background-position: -200% 0;
        }

        100% {
            background-position: 200% 0;
        }
    }

    /* Form Select Enhancement */
    .filters-container .form-select {
        position: relative;
        cursor: pointer;
    }

    .filters-container .form-select:focus {
        transform: scale(1.02);
    }

    /* Label Enhancement */
    .filters-container .form-label {
        position: relative;
        display: inline-block;
    }

    .filters-container .form-label::after {
        content: '';
        position: absolute;
        bottom: -2px;
        left: 0;
        width: 0;
        height: 2px;
        background: #ff6740;
        transition: width 0.3s ease;
    }

    .filters-container .form-select:focus+.form-label::after,
    .filters-container .form-label:hover::after {
        width: 100%;
    }

    /* Loading Animation for Save Button */
    .btn-saving {
        pointer-events: none;
    }

    .btn-saving::after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 16px;
        height: 16px;
        margin: -8px 0 0 -8px;
        border: 2px solid transparent;
        border-top: 2px solid currentColor;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    /* Success Animation */
    .btn-success-animation {
        animation: successPulse 0.6s ease;
    }

    @keyframes successPulse {
        0% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.1);
        }

        100% {
            transform: scale(1);
        }
    }

    /* Dark Mode Enhancement */
    .filters-container {
        background: linear-gradient(135deg, rgba(35, 35, 35, 0.8), rgba(45, 45, 45, 0.6));
    }

    /* Hover Effects for Form Elements */
    .filters-container .form-select:hover {
        border-color: rgba(255, 103, 64, 0.5);
        box-shadow: 0 0 0 0.1rem rgba(255, 103, 64, 0.1);
    }

    /* Active Filter Highlight */
    .filter-tag.active {
        background: rgba(255, 103, 64, 0.3);
        border-color: #ff6740;
        box-shadow: 0 0 10px rgba(255, 103, 64, 0.3);
    }

    /* Multi-Select Styles */
    .multi-select-container {
        position: relative;
        cursor: pointer;
    }

    .selected-items {
        background: #232323;
        border: 1px solid #444;
        border-radius: 12px;
        padding: 0.2rem 0.5rem;
        min-height: 28px;
        display: flex;
        align-items: center;
        flex-wrap: wrap;
        gap: 0.5rem;
        transition: all 0.3s ease;
    }

    .selected-items:hover {
        border-color: rgba(255, 103, 64, 0.5);
        box-shadow: 0 0 0 0.1rem rgba(255, 103, 64, 0.1);
    }

    .selected-items.active {
        border-color: #ff6740;
        box-shadow: 0 0 0 0.2rem rgba(255, 103, 64, 0.25);
    }

    .selected-items::after {
        content: '\f107';
        font-family: 'Font Awesome 6 Free';
        font-weight: 900;
        position: absolute;
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
        transition: transform 0.3s ease;
        color: #666;
    }

    .selected-items.active::after {
        transform: translateY(-50%) rotate(180deg);
    }

    .placeholder {
        color: #666;
        font-style: italic;
        background-color: transparent !important;
    }

    .selected-tag {
        background: rgba(255, 103, 64, 0.2);
        color: #ff6740;
        padding: 0.25rem 0.5rem;
        border-radius: 12px;
        font-size: 0.8rem;
        display: flex;
        align-items: center;
        gap: 0.25rem;
        border: 1px solid rgba(255, 103, 64, 0.3);
        animation: slideIn 0.3s ease;
    }

    .selected-tag .remove-tag {
        background: none;
        border: none;
        color: #ff6740;
        padding: 0;
        font-size: 0.7rem;
        cursor: pointer;
        transition: color 0.3s ease;
    }

    .selected-tag .remove-tag:hover {
        color: #ff4500;
    }

    .multi-select-dropdown {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: #232323;
        border: 1px solid #444;
        border-radius: 12px;
        margin-top: 0.5rem;
        padding: 0.5rem 0;
        z-index: 1000;
        max-height: 100px;
        overflow-y: auto;
        display: none;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    }

    .multi-select-dropdown.show {
        display: block;
        animation: slideDown 0.3s ease;
    }

    @keyframes slideDown {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .dropdown-item {
        padding: 0.25rem 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        cursor: pointer;
        transition: background 0.2s ease;
    }

    .dropdown-item:hover {
        background: rgba(255, 255, 255, 0.1);
    }

    .dropdown-item input[type="checkbox"] {
        width: 16px;
        height: 16px;
        accent-color: #ff6740;
    }

    .dropdown-item label {
        margin: 0;
        cursor: pointer;
        flex: 1;
        color: #fff;
    }

    /* Scrollbar for dropdown */
    .multi-select-dropdown::-webkit-scrollbar {
        width: 6px;
    }

    .multi-select-dropdown::-webkit-scrollbar-track {
        background: transparent;
    }

    .multi-select-dropdown::-webkit-scrollbar-thumb {
        background: rgba(255, 255, 255, 0.2);
        border-radius: 3px;
    }

    .multi-select-dropdown::-webkit-scrollbar-thumb:hover {
        background: rgba(255, 255, 255, 0.3);
    }

    /* Responsive multi-select */
    @media (max-width: 768px) {
        .selected-items {
            padding: 0.5rem 0.75rem;
            min-height: 40px;
        }

        .selected-tag {
            font-size: 0.75rem;
            padding: 0.2rem 0.4rem;
        }

        .multi-select-dropdown {
            max-height: 150px;
        }
    }
    .alternate-name-container {
        max-height: 100px;
        overflow: auto;
    }
    .alternate-name-container::-webkit-scrollbar {
        display: none;
        /* Chrome/Safari */
    }
</style>



<script>
    const titleId = '6851547b702284f834178357';
    // Toggle dropdown
    function toggleDropdown(dropdown, container) {
        const isOpen = dropdown.classList.contains('show');

        // Close all other dropdowns
        document.querySelectorAll('.multi-select-dropdown.show').forEach(d => {
            if (d !== dropdown) {
                d.classList.remove('show');
                d.previousElementSibling.classList.remove('active');
            }
        });

        if (isOpen) {
            closeDropdown(dropdown, container);
        } else {
            openDropdown(dropdown, container);
        }
    }

    // Open dropdown
    function openDropdown(dropdown, container) {
        dropdown.classList.add('show');
        container.classList.add('active');
    }

    // Close dropdown
    function closeDropdown(dropdown, container) {
        dropdown.classList.remove('show');
        container.classList.remove('active');
    }

    // Handle multi-select change
    function handleMultiSelectChange(type, value, checked) {
        const filterKey = type === 'language' ? 'languages' : 'volumes';
        const ALL_VALUES = type === 'language' ? ALL_LANGUAGES : ALL_VOLUMES;
        if (checked) {
            if (!currentFilters[filterKey].includes(value)) {
                currentFilters[filterKey].push(value);
            }
        } else {
            currentFilters[filterKey] = currentFilters[filterKey].filter(v => String(v) !== String(value));
        }
        updateSelectedItemsDisplay(type, currentFilters[filterKey]);
        applyFilters();
    }

    // Update selected items display
    function updateSelectedItemsDisplay(type, selectedValues) {
        const container = document.getElementById(`selected${type.charAt(0).toUpperCase() + type.slice(1)}s`);
        const isAll = selectedValues.includes('all');

        if (isAll || selectedValues.length === 0) {
            container.innerHTML = '<span class="placeholder">Choose ' + (type === 'language' ? 'language' : 'volume') + '...</span>';
        } else {
            container.innerHTML = '<span class="placeholder"> ' + selectedValues.length + ' - ' + (type === 'language' ? 'language' : 'volume') + ' selected</span>';
        }

    }

    // Count chapter stats  
    function countChapterStats(data) {
        let totalTranslations = 0;
        let totalPages = 0;
        let totalViews = 0;
        let totalLikes = 0;
        let totalComments = 0;
        data.forEach(chapter => {
            chapter.translations.forEach(trans => {
                totalTranslations += 1;
                totalPages += trans.pages || 0;
                totalViews += trans.views || 0;
                totalLikes += trans.likes || 0;
                totalComments += trans.comments || 0;
            });
        });
        // Update stats display
        document.getElementById('filteredCount').textContent = totalTranslations;
        document.getElementById('titleStatsViews').textContent = totalViews;
        document.getElementById('titleStatsLikes').textContent = totalLikes;
        $('.chapter-count').text(totalTranslations);
    }

    function initChapterInteractions() {
        // Description expand/collapse
        $('#expandDescriptionBtn').click(function() {
            const isExpanded = $(this).hasClass('expanded');
            const content = $('#descriptionContent');
            const overlay = $('#descriptionOverlay');

            if (isExpanded) {
                // Collapse
                content.removeClass('expanded').addClass('collapsed');
                overlay.removeClass('expanded').addClass('collapsed');
                $(this).removeClass('expanded');
                $(this).html('<i class="fa fa-chevron-down me-1"></i>Expand');
            } else {
                // Expand
                content.removeClass('collapsed').addClass('expanded');
                overlay.removeClass('collapsed').addClass('expanded');
                $(this).addClass('expanded');
                $(this).html('<i class="fas fa-chevron-up me-1" ></i>Collapse');
            }
        });
    }

    // Toggle volume expand/collapse
    function toggleVolume(volume) {
        const block = document.querySelector(`.volume-block[data-volume="${volume}"]`);
        const chapters = block.querySelector('.volume-chapters');
        const btn = block.querySelector('.volume-toggle-btn i');
        if (block.classList.contains('expanded')) {
            block.classList.remove('expanded');
            block.classList.add('collapsed');
            chapters.style.display = 'none';
            btn.classList.remove('fa-chevron-up');
            btn.classList.add('fa-chevron-down');
        } else {
            block.classList.remove('collapsed');
            block.classList.add('expanded');
            chapters.style.display = 'block';
            btn.classList.remove('fa-chevron-down');
            btn.classList.add('fa-chevron-up');
        }
    }
    // Update view
    function updateView() {
        const data = {
            title_id: titleId,
            chapter_id: null
        }
        $.ajax({
            url: '/api/v1/views/update/',
            type: 'POST',
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            data: data,
            success: function(response) {
                console.log(response);
            }
        });
    }
    // Update view
    $(document).ready(function() {
        // Update view
        setTimeout(() => {
            updateView();
        }, 3000);
    });
</script>
<style>
    #chaptersPagination .pagination .page-link {
        color: #ff6740;
        border: 1px solid #ff6740;
        background-color: transparent;
    }

    #chaptersPagination .pagination .page-link:hover {
        color: white;
        background-color: #ff6740;
        border-color: #ff6740;
    }

    #chaptersPagination .pagination .page-item.active .page-link {
        color: white;
        background-color: #ff6740;
        border-color: #ff6740;
    }

    #chaptersPagination .pagination .page-item.disabled .page-link {
        color: #ff6740;
        opacity: 0.5;
        pointer-events: none;
        background-color: transparent;
        border-color: #ff6740;
    }

    /* Search Chapter Styles */
    .search-chapter-container {
        width: 50%;
    }

    .search-chapter-container .input-group-text {
        background-color: #232323;
        border: 1px solid #444;
        border-right: 0 !important;
        color: #fff;
        transition: all 0.3s ease;
    }

    .search-chapter-container .form-control {
        background-color: #232323;
        border: 1px solid #444 !important;
        color: #fff;
        transition: all 0.3s ease;
        border-left: 0 !important;
        border-right: 0 !important;
    }

    .search-chapter-container .form-control::placeholder {
        color: #888;
    }

    .search-chapter-container .form-control:focus {
        border-color: #ff6740 !important;
        border-left: 0 !important;
        border-right: 0 !important;
        box-shadow: 0 0 0 0.2rem rgba(255, 103, 64, 0.25);
        background-color: #2a2a2a;
        color: #fff;
        outline: none;
    }

    .search-chapter-container .input-group:focus-within .input-group-text {
        border-color: #ff6740;
        border-right: 0 !important;
        background-color: #2a2a2a;
    }

    .search-chapter-container .input-group:focus-within #clearSearchBtn {
        border-color: #ff6740;
        border-left: 0 !important;
    }

    #clearSearchBtn {
        background-color: #232323;
        border: 1px solid #444;
        border-left: 0 !important;
        color: #fff;
        transition: all 0.3s ease;
    }

    #clearSearchBtn:hover {
        background-color: #ff6740;
        border-color: #ff6740;
        color: white;
    }

    @media (max-width: 768px) {
        .search-chapter-container {
            width: 100%;
        }
    }
</style>                
    <style>
    .custom-pagination .page-item {
        list-style: none;
    }

    .custom-pagination .page-link {
        background-color: #2e2e2e;
        color: #fff;
        border: none;
        border-radius: 6px;
        padding: 8px 12px;
        min-width: 38px;
        height: 38px;
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 500;
        transition: all 0.2s ease-in-out;
    }

    .custom-pagination .page-link:hover {
        background-color: #444;
        text-decoration: none;
        color: #fff;
    }

    .custom-pagination .page-item.disabled .page-link {
        opacity: 0.4;
        pointer-events: none;
    }

    .custom-pagination .page-item.active .page-link {
        background: linear-gradient(135deg, #ff416c, #ff4b2b);
        color: white;
        font-weight: 600;
    }
</style>

<script>
    // Build page url
    function buildPageUrl(targetPage, passedFilters) {
        const filterValues = passedFilters || (typeof window.filterValues !== 'undefined' ? window.filterValues : {});
        const url = new URL(window.location.href);
        const params = new URLSearchParams();

        for (const key in filterValues) {
            const value = filterValues[key];

            if (Array.isArray(value)) {
                // If is array, join by comma (even empty array, will become empty string)
                params.set(key, value.join(','));
            } else {
                // Assign normally
                params.set(key, value);
            }
        }

        // search_input
        if (typeof window.searchInput !== 'undefined') {
            params.set('search_input', window.searchInput ?? '');
        }

        // Set page
        params.set('page', targetPage);

        return `${url.origin}${url.pathname}?${params.toString()}`;
    }
    // Render pagination
    function renderPagination(paginationData) {
        const {
            current_page,
            last_page
        } = paginationData;
        // Set current page
        const container = $('#pagination-container');
        container.empty();

        const pagination = $('<ul class="pagination pagination-sm mb-0"></ul>');

        const createItem = (page, html, disabled = false, active = false) => {
            const li = $('<li class="page-item"></li>');
            if (disabled) li.addClass('disabled');
            if (active) li.addClass('active');

            const a = $('<a class="page-link"></a>');
            a.html(html);

            if (!disabled && !active) {
                a.attr('href', buildPageUrl(page));
            } else {
                a.attr('href', 'javascript:void(0)');
            }

            li.append(a);
            return li;
        };

        // First
        pagination.append(createItem(1, '<i class="fas fa-angles-left"></i>', current_page === 1));

        // Prev
        pagination.append(createItem(current_page - 1, '<i class="fas fa-angle-left"></i>', current_page === 1));

        const range = 2;
        const pages = [];

        // Always show first page
        pages.push(1);

        // Add ... if needed
        if (current_page - range > 2) {
            pages.push('...');
        }

        // Add middle range
        for (let i = current_page - range; i <= current_page + range; i++) {
            if (i > 1 && i < last_page) {
                pages.push(i);
            }
        }

        // Add ... if needed
        if (current_page + range < last_page - 1) {
            pages.push('...');
        }

        // Always show last page
        if (last_page > 1) {
            pages.push(last_page);
        }

        // Render each page
        pages.forEach(p => {
            if (p === '...') {
                pagination.append('<li class="page-item disabled"><span class="page-link">…</span></li>');
            } else {
                pagination.append(createItem(p, p, false, p === current_page));
            }
        });

        // Next
        pagination.append(createItem(current_page + 1, '<i class="fas fa-angle-right"></i>', current_page === last_page));

        // Last
        pagination.append(createItem(last_page, '<i class="fas fa-angles-right"></i>', current_page === last_page));

        container.append(pagination);
    }

    function addTitelToLibrary(id) {
        Swal.fire({
            html: `<div class="align-items-start gap-2">
                        <div class="flex-grow-1">
                            <label for="readingStatus" class="form-label fw-bold text-white">Reading Status</label>
                        </div>
                        <div class="d-flex  gap-2 align-items-center justify-content-between">
                            <div class="flex-grow-1">
                                <select class="form-select border-2 border-danger text-white bg-dark" id="readingStatus">
                                    <option value="reading" selected>Reading</option>
                                    <option value="on_hold">On Hold</option>
                                    <option value="dropped">Dropped</option>
                                    <option value="plan_to_read">Plan to Read</option>
                                    <option value="completed">Completed</option>
                                    <option value="re_reading">Re-Reading</option>
                                </select>
                            </div>
                            <div class="d-flex align-items-center justify-content-center flex-shrink-0" style="background-color: #2e2e2e; border-radius: 6px; padding: 0.5rem 1rem;">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="notifySwitch" checked >
                                    <i class="fas fa-question-circle" style="cursor: pointer; font-size: 1.2rem;" title="Notify for new chapter"></i>
                                </div>
                            </div>
                        </div>
                    </div>`,
            showCancelButton: true,
            showConfirmButton: true,
            confirmButtonText: '<b>Add to library</b>',
            cancelButtonText: '<b>Cancel</b>',
            focusConfirm: false,
            customClass: {
                popup: 'swal2-dark my-swal2-dark',
                confirmButton: 'comic-btn-primary',
                cancelButton: 'btn btn-secondary',
            },
            width: 500,
            padding: '2.5em 2em 2em 2em',
            preConfirm: () => {
                const readingStatus = document.getElementById('readingStatus').value;
                const notify = document.getElementById('notifySwitch').checked;
                if (!readingStatus || readingStatus == 'none' || readingStatus == '' || readingStatus == null || readingStatus == 'undefined') {
                    Swal.showValidationMessage('Please select a reading status!');
                    return false;
                }
                return {
                    readingStatus,
                    notify
                };
            },
            didOpen: () => {
                // add class dark to SweetAlert2
                document.querySelector('.swal2-popup').classList.add('swal2-dark', 'my-swal2-dark');
            }
        }).then((result) => {
            if (result.isConfirmed) {
                addToLibrary(id, result.value.readingStatus, result.value.notify);
            }
        });
    }
    // Add to library
    function addToLibrary(id, readingStatus, notify) {
        showLoading();
        $.ajax({
            url: '/api/v1/library/add-to-library/',
            type: 'POST',
            data: {
                readingStatus: readingStatus,
                notify: notify,
                titleId: id
            },
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            success: function(response) {
                hideLoading();
                if (response.code == 200) {
                    Swal.fire({
                        title: 'Title added to library',
                        icon: 'success',
                        showConfirmButton: false,
                        timer: 1500
                    });
                } else {
                    Swal.fire({
                        title: response.message,
                        icon: 'error',
                        showConfirmButton: false,
                        timer: 1500
                    });
                }
            },
            error: function(xhr, status, error) {
                hideLoading();
                // console.log(xhr.responseText);
                Swal.fire({
                    title: 'Title added to library failed',
                    icon: 'error',
                    showConfirmButton: false,
                    timer: 1500
                });
            }
        });
    }
    // Set cookie
    function setCookie(name, value, days = 7) {
        const expires = new Date(Date.now() + days * 86400).toUTCString();
        document.cookie = name + '=' + encodeURIComponent(value) + '; expires=' + expires + '; path=/';
    }
    // Get cookie
    function getCookie(name) {
        return document.cookie.split('; ').reduce((r, v) => {
            const parts = v.split('=');
            return parts[0] === name ? decodeURIComponent(parts[1]) : r
        }, '');
    }
    // Render pagination
    function renderPaginationChapter(paginationData, containerId) {
        const {
            current_page,
            last_page
        } = paginationData;
        // Set current page
        const container = $('#' + containerId);
        container.empty();

        const pagination = $('<ul class="pagination pagination-sm mb-0"></ul>');

        const createItem = (page, html, disabled = false, active = false) => {
            const li = $('<li class="page-item"></li>');
            if (disabled) li.addClass('disabled');
            if (active) li.addClass('active');

            const a = $('<a class="page-link" style="cursor: pointer;"></a>');
            a.html(html);

            if (!disabled && !active) {
                a.attr('onclick', `setPageChapter(${page})`);
            } else {
                a.attr('href', 'javascript:void(0)');
            }

            li.append(a);
            return li;
        };

        // First
        pagination.append(createItem(1, '<i class="fas fa-angles-left"></i>', current_page === 1));

        // Prev
        pagination.append(createItem(current_page - 1, '<i class="fas fa-angle-left"></i>', current_page === 1));

        const range = 2;
        const pages = [];

        // Always show first page
        pages.push(1);

        // Add ... if needed
        if (current_page - range > 2) {
            pages.push('...');
        }

        // Add middle range
        for (let i = current_page - range; i <= current_page + range; i++) {
            if (i > 1 && i < last_page) {
                pages.push(i);
            }
        }

        // Add ... if needed
        if (current_page + range < last_page - 1) {
            pages.push('...');
        }

        // Always show last page
        if (last_page > 1) {
            pages.push(last_page);
        }

        // Render each page
        pages.forEach(p => {
            if (p === '...') {
                pagination.append('<li class="page-item disabled"><span class="page-link">…</span></li>');
            } else {
                pagination.append(createItem(p, p, false, p === current_page));
            }
        });

        // Next
        pagination.append(createItem(current_page + 1, '<i class="fas fa-angle-right"></i>', current_page === last_page));

        // Last
        pagination.append(createItem(last_page, '<i class="fas fa-angles-right"></i>', current_page === last_page));

        container.append(pagination);
    }
    /**
     * Pre‑select selected values to TomSelect instance
     * @param {string|HTMLElement} targetSelector - selector (or element) of <select> TomSelect
     * @param {Array<string>} values - array of values (value) you want to select
     */
    function renderSelectedToTomSelect(targetSelector, values) {
        // Get element (or use selector)
        const el = (typeof targetSelector === 'string') ?
            document.querySelector(targetSelector) :
            targetSelector;
        if (!el || !el.tomselect) {
            console.warn('TomSelect instance not found on', targetSelector);
            return;
        }

        const ts = el.tomselect;

        // 1) Clear all selected items (if any)
        ts.clear();

        // 2) If you want to add each item
        // values.forEach(v => ts.addItem(v));

        // Or 3) Use setValue to set the entire array of values at once
        ts.setValue(values);

        // 4) Optionally: if you want to trigger change event to catch by other listeners:
        el.dispatchEvent(new Event('change', {
            bubbles: true
        }));
    }
</script>
<!-- Script for owl carousel -->
<script>
    // Loading animation
    function showLoadingSpinner(id) {
        const carousel = $('#owl-comics-' + id);

        // Ensure the element has a minimum height
        carousel.css({
            'min-height': '200px',
            'display': 'flex',
            'align-items': 'center',
            'justify-content': 'center'
        });
        
        carousel.html(`
            <div class="d-flex justify-content-center align-items-center w-100" style="height: 200px; background-color: rgba(0,0,0,0.1); border-radius: 8px;">
                <div class="spinner-border text-primary me-3" role="status" style="width: 3rem; height: 3rem;">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <div class="text-center">
                    <div class="text-white mb-1">Loading...</div>
                    <small class="text-muted">Please wait for a moment</small>
                </div>
            </div>
        `);
        
    }
    // Initialize Owl Carousel
    function initializeCarousel(id) {
        $('#owl-comics-' + id).owlCarousel({
            loop: false,
            margin: 16,
            nav: true,
            dots: false,
            autoplay: true,
            autoplayTimeout: 5000,
            autoplayHoverPause: true,
            responsive: {
                0: {
                    items: 2,
                    margin: 8
                },
                576: {
                    items: 3,
                    margin: 12
                },
                768: {
                    items: 4,
                    margin: 16
                },
                992: {
                    items: 5,
                    margin: 16
                },
                1200: {
                    items: 6,
                    margin: 16
                },
                1400: {
                    items: 7,
                    margin: 16
                }
            },
            navText: [
                '<i class="fas fa-chevron-left"></i>',
                '<i class="fas fa-chevron-right"></i>'
            ],
            onInitialized: function() {
                // Owl Carousel initialized successfully
            }
        });
    }
    // Function to create comic item HTML
    function createComicItem(comic, index) {
        const rankClass = index === 0 ? 'rank-1' : index === 1 ? 'rank-2' : index === 2 ? 'rank-3' : '';
        
        return `
            <div class="comic-item">
                <div class="comic-cover">
                    <a href="${comic.url}" title="${comic.name}">
                        <img src="${comic.cover}" alt="${comic.name}" loading="lazy" class="comic-cover ${comic.isAdult ? 'adult-cover' : ''}">
                        <div class="comic-overlay">
                            ${comic.name}
                        </div>
                        <div class="comic-rank ${rankClass}">
                            ${index + 1}
                        </div>
                    </a>
                </div>
                <div class="comic-stats">
                    <div class="stats-item">
                        <i class="fas fa-clock"></i>
                        ${comic.updated_at}
                    </div>
                    <div class="stats-item">
                        <img src="${comic.languageFlag}" alt="${comic.languageFlag}" style="width: 12px;">
                    </div>
                    <div class="stats-item">
                        ${comic.status}
                    </div>
                </div>
            </div>
        `;
    }
    // Function to load data without showing loading spinner
    async function loadDataCarousel(type, id) {
        try {
            // Call Ajax to get data
            const response = await $.ajax({
                url: '/api/v1/title/search/',
                data: {
                    search_type: type
                },
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                type: 'POST'
            });
            
            if (response.code == 200) {
                generateComicItems(response.data, id);
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: response.message
                });
            }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error connecting',
                text: 'Cannot load data. Please try again.'
            });
        }
    }
    // Generate comic items
    function generateComicItems(comicsData, id) {
        const carousel = $('#owl-comics-' + id);
        carousel.empty();

        comicsData.forEach((comic, index) => {
            const comicItem = createComicItem(comic, index);
            carousel.append(comicItem);
        });
    }
    function checkElementVisibilityCarousel(elementId, callback, options = {}) {
        // Detect device type
        const isMobile = window.innerWidth <= 768;
        
        const defaultOptions = {
            threshold: isMobile ? 0.3 : 0.5,  // Mobile: 30%, Desktop: 50%
            rootMargin: isMobile ? '50px' : '100px',  // Mobile: 50px, Desktop: 100px
            once: true
        };

        const config = {
            ...defaultOptions,
            ...options
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    // Call callback function when element is visible
                    if (typeof callback === 'function') {
                        // Pass device info to callback
                        callback(entry.target, {
                            isMobile: isMobile,
                            deviceType: isMobile ? 'mobile' : 'desktop',
                            screenWidth: window.innerWidth
                        });
                    }

                    // If once = true, stop observing after trigger
                    if (config.once) {
                        observer.unobserve(entry.target);
                    }
                }
            });
        }, {
            threshold: config.threshold,
            rootMargin: config.rootMargin
        });

        // Find element by id and start observing
        const targetElement = document.getElementById(elementId);
        if (targetElement) {
            observer.observe(targetElement);
            return observer;
        } else {
            console.warn(`Element with id "${elementId}" not found`);
            return null;
        }
    }
    // Resize
    // Handle window resize
    $(window).resize(function() {
        if ($('#owl-comics-recommend').length) {
            $('#owl-comics-recommend').trigger('refresh.owl.carousel');
        }
        if ($('#owl-comics-recent-read').length) {
            $('#owl-comics-recent-read').trigger('refresh.owl.carousel');
        }
        if ($('#owl-comics-recent-chapter-read').length) {
            $('#owl-comics-recent-chapter-read').trigger('refresh.owl.carousel');
        }
    });
</script>
<script>
    // function check element visibility with desktop/mobile support
    function checkElementVisibility(elementId, callback, options = {}) {
        // Detect device type
        const isMobile = window.innerWidth <= 768;
        
        const defaultOptions = {
            threshold: isMobile ? 0.3 : 0.5,  // Mobile: 30%, Desktop: 50%
            rootMargin: isMobile ? '50px' : '100px',  // Mobile: 50px, Desktop: 100px
            once: true
        };

        const config = {
            ...defaultOptions,
            ...options
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    // Call callback function when element is visible
                    if (typeof callback === 'function') {
                        // Pass device info to callback
                        callback(entry.target, {
                            isMobile: isMobile,
                            deviceType: isMobile ? 'mobile' : 'desktop',
                            screenWidth: window.innerWidth
                        });
                    }

                    // If once = true, stop observing after trigger
                    if (config.once) {
                        observer.unobserve(entry.target);
                    }
                }
            });
        }, {
            threshold: config.threshold,
            rootMargin: config.rootMargin
        });

        // Find element by id and start observing
        const targetElement = document.getElementById(elementId);
        if (targetElement) {
            observer.observe(targetElement);
            return observer;
        } else {
            console.warn(`Element with id "${elementId}" not found`);
            return null;
        }
    }

    
</script>

<!-- PWA Registration -->
<!-- <script src="/public/js/pwa-register.js"></script> -->    <style>
    /* CSS for loading spinner (using classes of Bootstrap when possible) */
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(2px);
        z-index: 9999;
        display: none;
    }

    .loading-overlay.show {
        display: block;
    }

    .spinner-container {
        min-width: 180px;
    }

    /* Animation for spinner */
    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: scale(0.8);
        }

        to {
            opacity: 1;
            transform: scale(1);
        }
    }

    .spinner-container {
        animation: fadeIn 0.3s ease-out forwards;
    }
</style>

<!-- Loading Spinner -->
<div class="loading-overlay" id="loadingSpinner" style="display: none;">
    <div class="position-absolute top-50 start-50 translate-middle">
        <div class="spinner-container bg-white p-4 rounded-3 shadow-sm">
            <div class="d-flex flex-column align-items-center">
                <div class="spinner-border text-primary mb-3" role="status" style="width: 3rem; height: 3rem;">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mb-0 fw-medium text-secondary">Processing...</p>
            </div>
        </div>
    </div>
</div>
<script>
    // Function to show loading
    function showLoading() {
        // Add loading class to body or show spinner
        // $('body').addClass('loading');
        // Or if you have a custom spinner:
        $('#loadingSpinner').show();
    }

    // Function to hide loading
    function hideLoading() {
        // Remove loading class from body
        // $('body').removeClass('loading');
        // Or if you have a custom spinner:
        $('#loadingSpinner').hide();
    }
</script>
<style>
    .loader {
        display: block;
        position: relative;
        height: 12px;
        width: 80%;
        min-width: 300px;
        border: 1px solid #fff;
        border-radius: 10px;
        overflow: hidden;
    }

    .loader:after {
        content: '';
        position: absolute;
        left: 0;
        top: 0;
        height: 100%;
        width: 0;
        background: var(--primary-color);
        animation: 6s prog ease-in infinite;
    }

    @keyframes prog {
        to {
            width: 100%;
        }
    }
</style>
<!-- Loading Spinner -->
<div class="loading-overlay" id="loadingSpinnerDownload">
    <div class="position-absolute top-50 start-50 translate-middle">
        <div class="d-flex flex-column align-items-center">
            <span class="loader"></span>
            <p class="mb-0 fw-medium text-white">Downloading file in background, please wait...</p>
        </div>
    </div>
</div>
<script>
    // Function to show loading
    function showLoadingDownload() {
        // Add loading class to body or show spinner
        // $('body').addClass('loading');
        // Or if you have a custom spinner:
        $('#loadingSpinnerDownload').show();
    }

    // Function to hide loading
    function hideLoadingDownload() {
        // Remove loading class from body
        // $('body').removeClass('loading');
        // Or if you have a custom spinner:
        $('#loadingSpinnerDownload').hide();
    }
</script>    <!-- Large Modal -->
<div class="modal fade" id="largeModal" tabindex="-1" aria-labelledby="largeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="largeModalLabel">Large Modal Title</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Add content here
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Chapter Select Modal -->
<div class="modal fade" id="chapterSelectModal" tabindex="-1" aria-labelledby="chapterSelectModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-fullscreen">
        <div class="modal-content bg-dark text-white">
            <div class="modal-header border-secondary">
                <h5 class="modal-title" id="chapterSelectModalLabel">
                    <i class="fas fa-list me-2 text-primary"></i>Choose Chapter
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body d-flex flex-column">
                <!-- Search Chapter and Sort -->
                <div class="d-flex justify-content-between align-items-center mb-3 gap-2">
                    <div class="sort-toggle-container">
                        <button class="btn btn-outline-secondary btn-sm" type="button" id="sortToggleBtn" title="Toggle sort order">
                            <i class="fas fa-sort-amount-down"></i>
                            <span id="sortToggleText" class="d-none d-md-inline ms-1">Newest</span>
                        </button>
                    </div>
                    <div class="search-chapter-modal-container">
                    <div class="input-group input-group-sm">
                    <span class="input-group-text" title="To search exact, add # at the end" style="cursor: help;">
                        <i class="fas fa-info-circle"></i>
                    </span>
                    <input type="text" class="form-control" id="searchChapterInput" placeholder="Search chapter (e.g: 1, 10 or 1# for exact)">
                    <button class="btn" type="button" id="clearSearchBtn">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                    </div>
                </div>

                <div id="chaptersList" class="flex-grow-1" role="list" aria-label="Chapter list">
                </div>
                <div id="chaptersPagination" class="d-flex justify-content-center flex-shrink-0 mt-3" role="navigation" aria-label="Chapter pagination">
                </div>
            </div>
        </div>
    </div>
</div>
<style>
    /* Chapter Select Modal Styles */
    .nav-tabs .nav-link {
        color: #fff;
        border: 1px solid #444;
        background: transparent;
    }

    .nav-tabs .nav-link.active {
        background: linear-gradient(135deg, #ff6740, #ff8c42);
        border-color: #ff6740;
        color: white;
    }

    .nav-tabs .nav-link:hover {
        border-color: #ff6740;
        color: #ff6740;
    }

    .chapter-item {
        padding: 1rem;
        margin-bottom: 0.5rem;
        border-radius: 8px;
        border: 1px solid #444;
        background: rgba(255, 255, 255, 0.05);
        transition: all 0.3s ease;
        cursor: pointer;
    }

    .chapter-item:hover {
        background: rgba(255, 103, 64, 0.1);
        border-color: #ff6740;
        transform: translateX(5px);
    }

    .chapter-item.current {
        background: linear-gradient(135deg, rgba(255, 103, 64, 0.2), rgba(255, 140, 66, 0.2));
        border-color: #ff6740;
    }

    .translation-item {
        padding: 0.5rem;
        margin: 0.25rem 0;
        border-radius: 6px;
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid #555;
        transition: all 0.3s ease;
        cursor: pointer;
    }

    .translation-item:hover {
        background: rgba(255, 103, 64, 0.1);
        border-color: #ff6740;
    }

    .translation-item.current {
        background: rgba(255, 103, 64, 0.2);
        border-color: #ff6740;
    }

    .language-badge {
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
    }

    .volume-info {
        background: rgba(255, 103, 64, 0.1);
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
        border-left: 4px solid #ff6740;
    }
</style>

<!-- Share Modal -->
<div class="modal fade" id="shareModal" tabindex="-1" aria-labelledby="shareModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content bg-dark text-white">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="shareModalLabel">Share this content</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body text-center">
                <div class="d-flex justify-content-center gap-3 flex-wrap">
                    <a href="https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fmangaball.net%2Ftitle-detail%2Frevenge-of-the-baskerville-bloodhound-6851547b702284f834178357%2F" id="share-facebook" class="btn btn-primary"><i class="fab fa-facebook-f"></i></a>
                    <a href="https://twitter.com/intent/tweet?url=https%3A%2F%2Fmangaball.net%2Ftitle-detail%2Frevenge-of-the-baskerville-bloodhound-6851547b702284f834178357%2F" id="share-twitter" class="btn btn-info text-white"><i class="fab fa-twitter"></i></a>
                    <a href="https://t.me/share/url?url=https%3A%2F%2Fmangaball.net%2Ftitle-detail%2Frevenge-of-the-baskerville-bloodhound-6851547b702284f834178357%2F" id="share-telegram" class="btn btn-primary"><i class="fab fa-telegram-plane"></i></a>
                    <a href="mailto:?subject=Check this out&amp;body=https%3A%2F%2Fmangaball.net%2Ftitle-detail%2Frevenge-of-the-baskerville-bloodhound-6851547b702284f834178357%2F" id="share-email" class="btn btn-secondary"><i class="fas fa-envelope"></i></a>
                    <button class="btn btn-outline-light" id="copy-link"><i class="fas fa-link"></i></button>
                </div>
            </div>

            <div class="modal-footer border-0 justify-content-center">
                <small class="text-muted" id="share-url">https://mangaball.net/title-detail/revenge-of-the-baskerville-bloodhound-6851547b702284f834178357/</small>
            </div>
        </div>
    </div>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const url = window.location.href;

        document.getElementById('share-facebook').href = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`;
        document.getElementById('share-twitter').href = `https://twitter.com/intent/tweet?url=${encodeURIComponent(url)}`;
        document.getElementById('share-telegram').href = `https://t.me/share/url?url=${encodeURIComponent(url)}`;
        document.getElementById('share-email').href = `mailto:?subject=Check this out&body=${encodeURIComponent(url)}`;

        document.getElementById('share-url').textContent = url;

        document.getElementById('copy-link').addEventListener('click', function() {
            navigator.clipboard.writeText(url).then(function() {
                alert('Link copied to clipboard!');
            }).catch(function() {
                alert('Failed to copy link.');
            });
        });
    });
</script>
<!-- Comments Modal --> 
<!-- Modal -->
<div class="modal fade" id="commentsModal" tabindex="-1" aria-labelledby="commentsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable modal-fullscreen">
        <div class="modal-content bg-dark text-white">
            <div class="modal-header border-secondary">
                <h5 class="modal-title" id="commentsModalLabel">Comments</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>

                <input type="hidden" id="commentObjectId" value="">
                <input type="hidden" id="commentParentId" value="">
                <input type="hidden" id="commentStart" value="0">
                <input type="hidden" id="commentLimit" value="10">
            </div>
            <div class="modal-body d-flex flex-column" style="max-height: 100%;">
                <!-- Comment input -->
                <div class="mb-3 d-flex gap-2 align-items-center">
                    <div class="flex-grow-1">
                        <textarea id="commentInput" class="form-control bg-secondary text-white" rows="2" placeholder="Enter comment..."></textarea>
                    </div>
                    <div class="flex-shrink-0">
                        <button class="btn btn-primary btn-sm" id="submitCommentBtn">Send</button>
                    </div>
                </div>
                <!-- Comment list -->
                <div id="commentList" class="flex-grow-1 overflow-auto">
                    <div class="d-flex justify-content-center align-items-center">
                        <span class="spinner-border spinner-border-sm text-white"></span>
                        <span class="text-white ms-2">Loading...</span>
                    </div>
                </div>
                <!-- Load more -->
                <div class="mt-3 text-center">
                    <button id="loadMoreBtn" class="btn btn-outline-light btn-sm">Load more</button>
                </div>
            </div>
        </div>
    </div>
</div> 

<style>
    /* Search Chapter Modal Styles */
    .search-chapter-modal-container {
        width: 50%;
    }

    #sortChapterModalBtn {
        background-color: #232323;
        border: 1px solid #444;
        color: #fff;
        transition: all 0.3s ease;
        white-space: nowrap;
        padding: 0.375rem 0.75rem;
    }

    #sortChapterModalBtn:hover {
        background-color: #2a2a2a;
        border-color: #ff6740;
        color: #ff6740;
    }

    #sortChapterModalBtn.active {
        background-color: #ff6740;
        border-color: #ff6740;
        color: white;
    }

    .search-chapter-modal-container .input-group-text {
        background-color: #232323;
        border: 1px solid #444;
        border-right: 0 !important;
        color: #fff;
        transition: all 0.3s ease;
    }

    .search-chapter-modal-container .form-control {
        background-color: #232323;
        border: 1px solid #444 !important;
        border-left: 0 !important;
        border-right: 0 !important;
        color: #fff;
        transition: all 0.3s ease;
    }

    .search-chapter-modal-container .form-control::placeholder {
        color: #888;
    }

    .search-chapter-modal-container .form-control:focus {
        border-color: #ff6740 !important;
        border-left: 0 !important;
        border-right: 0 !important;
        box-shadow: 0 0 0 0.2rem rgba(255, 103, 64, 0.25);
        background-color: #2a2a2a;
        color: #fff;
        outline: none;
    }

    .search-chapter-modal-container .input-group:focus-within .input-group-text {
        border-color: #ff6740;
        border-right: 0 !important;
        background-color: #2a2a2a;
    }

    .search-chapter-modal-container .input-group:focus-within #clearSearchModalBtn {
        border-color: #ff6740;
        border-left: 0 !important;
    }

    #clearSearchModalBtn {
        background-color: #232323;
        border: 1px solid #444;
        border-left: 0 !important;
        color: #fff;
        transition: all 0.3s ease;
    }

    #clearSearchModalBtn:hover {
        background-color: #ff6740;
        border-color: #ff6740;
        color: white;
    }

    @media (max-width: 768px) {
        .search-chapter-modal-container {
            width: 100%;
        }
    }

    /* Comment Mention Highlight Styles */
    .mention-highlight {
        color: #ff6740;
        font-weight: 600;
        background: rgba(255, 103, 64, 0.15);
        padding: 2px 6px;
        border-radius: 4px;
        transition: all 0.2s ease;
        display: inline-block;
    }

    .mention-highlight:hover {
        background: rgba(255, 103, 64, 0.25);
        transform: scale(1.05);
    }
</style>

<script>
    $(document).ready(function() {
        // Search chapter modal input
        $('#searchChapterInput').on('input', function() {
            const value = $(this).val().trim();
            if (typeof handleSearchChapterModalChange === 'function') {
                handleSearchChapterModalChange(value);
            } else {
                console.log('Search chapter modal input changed:', value);
            }
        });

        // Clear search modal button
        $('#clearSearchBtn').on('click', function() {
            $('#searchChapterInput').val('');
            if (typeof handleSearchChapterModalChange === 'function') {
                handleSearchChapterModalChange('');
            }
        });
    });
</script>    <!-- Floating Action Button -->
<div class="floating-action-container">
    <!-- Main Action Button -->
    <button class="floating-action-btn" id="mainActionBtn" onclick="toggleActionMenu()">
        <i class="fas fa-plus"></i>
    </button>

    <!-- Action Menu -->
    <div class="action-menu" id="actionMenu">
        <div class="action-item" onclick="openActionModal('requestTitles')" title="Request Titles">
            <i class="fas fa-plus-circle"></i>
            <span class="action-label">Request Titles</span>
        </div>
        <!-- <div class="action-item" onclick="openActionModal('share')" title="Share">
            <i class="fas fa-share"></i>
            <span class="action-label">Share</span>
        </div> -->
        <!-- <div class="action-item" onclick="openActionModal('report')" title="Report">
            <i class="fas fa-flag"></i>
            <span class="action-label">Report</span>
        </div> -->
    </div>

    <!-- Overlay -->
    <div class="action-overlay" id="actionOverlay" onclick="closeActionMenu()"></div>
</div>

<style>
    /* Floating Action Button Styles */
    .floating-action-container {
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 1000;
    }

    .floating-action-btn {
        width: 56px;
        height: 56px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        color: white;
        font-size: 24px;
        cursor: pointer;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        z-index: 1002;
    }

    .floating-action-btn:hover {
        transform: scale(1.1);
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.25);
    }

    .floating-action-btn.active {
        transform: rotate(45deg);
        background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
    }

    .action-menu {
        position: absolute;
        bottom: 70px;
        right: 0;
        opacity: 0;
        visibility: hidden;
        transform: translateY(20px);
        transition: all 0.3s ease;
        z-index: 1001;
    }

    .action-menu.active {
        opacity: 1;
        visibility: visible;
        transform: translateY(0);
    }

    .action-item {
        display: flex;
        align-items: center;
        background: white;
        padding: 12px 16px;
        margin-bottom: 8px;
        border-radius: 25px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        cursor: pointer;
        transition: all 0.2s ease;
        white-space: nowrap;
        min-width: 140px;
    }

    .action-item:hover {
        transform: translateX(-5px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .action-item i {
        font-size: 18px;
        margin-right: 12px;
        width: 20px;
        text-align: center;
    }

    .action-item:nth-child(1) i {
        color: #28a745;
    }

    .action-item:nth-child(2) i {
        color: #17a2b8;
    }

    .action-item:nth-child(3) i {
        color: #dc3545;
    }

    .action-label {
        font-size: 14px;
        font-weight: 500;
        color: #333;
    }

    .action-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.3);
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;
        z-index: 1000;
    }

    .action-overlay.active {
        opacity: 1;
        visibility: visible;
    }

    /* Responsive */
    @media (max-width: 768px) {
        .floating-action-container {
            bottom: 15px;
            right: 15px;
        }

        .floating-action-btn {
            width: 50px;
            height: 50px;
            font-size: 20px;
        }

        .action-menu {
            bottom: 65px;
        }

        .action-item {
            padding: 10px 14px;
            min-width: 120px;
        }

        .action-item i {
            font-size: 16px;
            margin-right: 10px;
        }

        .action-label {
            font-size: 13px;
        }
    }
</style>

<script>
    // Floating Action Button Functions - Wrapped to avoid conflicts
    (function() {
        'use strict';
        
        // Make functions global
        window.toggleActionMenu = function() {
            const menu = document.getElementById('actionMenu');
            const overlay = document.getElementById('actionOverlay');
            const btn = document.getElementById('mainActionBtn');

            if (!menu || !overlay || !btn) {
                console.error('Action menu elements not found');
                return;
            }

            if (menu.classList.contains('active')) {
                closeActionMenu();
            } else {
                openActionMenu();
            }
        };

        window.openActionMenu = function() {
            const menu = document.getElementById('actionMenu');
            const overlay = document.getElementById('actionOverlay');
            const btn = document.getElementById('mainActionBtn');

            if (menu) menu.classList.add('active');
            if (overlay) overlay.classList.add('active');
            if (btn) btn.classList.add('active');
        };

        window.closeActionMenu = function() {
            const menu = document.getElementById('actionMenu');
            const overlay = document.getElementById('actionOverlay');
            const btn = document.getElementById('mainActionBtn');

            if (menu) menu.classList.remove('active');
            if (overlay) overlay.classList.remove('active');
            if (btn) btn.classList.remove('active');
        };

        window.openActionModal = function(action) {
            closeActionMenu();

            switch (action) {
                case 'requestTitles':
                    openRequestTitlesModal();
                    break;

                case 'share':
                    shareContent();
                    break;

                case 'report':
                    reportContent();
                    break;

                default:
                    showActionAlert('Action', 'This action will be implemented soon.');
            }
        };

        function shareContent() {
            if (navigator.share) {
                navigator.share({
                    title: document.title,
                    text: 'Check out this content',
                    url: window.location.href
                }).catch(err => {
                    console.log('Error sharing:', err);
                    copyToClipboard();
                });
            } else {
                copyToClipboard();
            }
        }

        function copyToClipboard() {
            navigator.clipboard.writeText(window.location.href).then(() => {
                showActionAlert('Share', 'Link copied to clipboard!');
            }).catch(() => {
                showActionAlert('Share', 'Unable to copy link. Please copy manually.');
            });
        }

        function reportContent() {
            if (typeof Swal === 'undefined') {
                alert('SweetAlert2 is not loaded');
                return;
            }
            
            Swal.fire({
                title: 'Report Content',
                input: 'select',
                inputOptions: {
                    'spam': 'Spam',
                    'inappropriate': 'Inappropriate Content',
                    'harassment': 'Harassment',
                    'violence': 'Violence',
                    'other': 'Other'
                },
                inputPlaceholder: 'Select reason',
                showCancelButton: true,
                confirmButtonText: 'Report',
                cancelButtonText: 'Cancel',
                confirmButtonColor: '#dc3545'
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire({
                        title: 'Reported',
                        text: 'Thank you for your report. We will review it shortly.',
                        icon: 'success'
                    });
                }
            });
        }

        function showActionAlert(title, message) {
            if (typeof Swal === 'undefined') {
                alert(message);
                return;
            }
            
            Swal.fire({
                title: title,
                text: message,
                icon: 'info',
                confirmButtonText: 'OK'
            });
        }

        function openRequestTitlesModal() {
            if (typeof Swal === 'undefined') {
                alert('SweetAlert2 is not loaded');
                return;
            }
            
            Swal.fire({
                title: 'Request Titles',
                html: `
                   <div class="mb-3">
                       <label for="requestTitlesLink" class="form-label">Enter Link:</label>
                       <input type="url" class="form-control" id="requestTitlesLink" placeholder="https://example.com" required>
                   </div>
                   <div class="mb-3">
                       <label for="requestTitlesContent" class="form-label">Content:</label>
                       <textarea class="form-control" id="requestTitlesContent" rows="3" placeholder="Describe what happened..." ></textarea>
                   </div>
                `,
                showCancelButton: true,
                confirmButtonText: 'Request',
                cancelButtonText: 'Cancel',
                confirmButtonColor: '#ff6740',
                preConfirm: () => {
                    const link = document.getElementById('requestTitlesLink').value;
                    const type = 'request';
                    const content = document.getElementById('requestTitlesContent').value;
                    
                    if (!link) {
                        Swal.showValidationMessage('Please fill in all required fields');
                        return false;
                    }
                    
                    if (!isValidUrl(link)) {
                        Swal.showValidationMessage('Please enter a valid URL');
                        return false;
                    }
                    
                   return {
                       link,
                       type,
                       content,
                       request_type: 'request'
                   };
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    requestTitlesFromLink(result.value);
                }
            });
        }

        function isValidUrl(string) {
            try {
                new URL(string);
                return true;
            } catch (_) {
                return false;
            }
        }

        function requestTitlesFromLink(data) {
            if (typeof showLoading === 'function') {
                showLoading();
            }
            
            if (typeof $ === 'undefined' || typeof $.ajax === 'undefined') {
                console.error('jQuery is not loaded');
                if (typeof hideLoading === 'function') {
                    hideLoading();
                }
                return;
            }
            
            $.ajax({
                url: '/api/v1/title/request-titles/',
                type: 'POST',
                data: {
                    type: data.type,
                    content: data.content,
                    link: data.link,
                    request_type: data.request_type
                },
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                success: function(response) {
                    if (typeof hideLoading === 'function') {
                        hideLoading();
                    }
                    
                    if (response.code === 200) {
                        if (typeof Swal !== 'undefined') {
                            Swal.fire({
                               title: 'Success!',
                               text: 'Titles requested successfully',
                               icon: 'success'
                            });
                        }
                        // Reload timeline if function exists
                        if (typeof loadTimelineData === 'function') {
                            loadTimelineData(0, false);
                        }
                    } else {
                        if (typeof Swal !== 'undefined') {
                            Swal.fire({
                                title: 'Error',
                                text: response.message || 'Failed to request titles',
                                icon: 'error'
                            });
                        }
                    }
                },
                error: function(xhr, status, error) {
                    if (typeof hideLoading === 'function') {
                        hideLoading();
                    }
                    
                    if (typeof Swal !== 'undefined') {
                        Swal.fire({
                            title: 'Error',
                            text: 'Failed to request titles. Please try again.',
                            icon: 'error'
                        });
                    }
                }
            });
        }

        // Initialize event listeners when DOM is ready
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initEventListeners);
        } else {
            initEventListeners();
        }

        function initEventListeners() {
            // Close menu when clicking outside
            document.addEventListener('click', function(event) {
                const container = document.querySelector('.floating-action-container');
                if (container && !container.contains(event.target)) {
                    closeActionMenu();
                }
            });

            // Keyboard support
            document.addEventListener('keydown', function(event) {
                if (event.key === 'Escape') {
                    closeActionMenu();
                }
            });
        }
    })();
</script>    <style>
    /* ------------------------------
   Bootstrap 5 Theme System
   Switchable via body class="theme-XYZ"
------------------------------ */
    /* Reset and helper: apply variables and transitions */
    body[class^="theme-"] {
        transition: background-color 0.3s, color 0.3s;
        background-color: var(--primary);
        color: var(--text);
    }

    /* ============================
   Theme Color Definitions
============================ */
    .theme-pokemon-1 {
        --primary: #191a1c;
        --primary-rgb: 25, 26, 28;
        --secondary: #111111;
        --secondary-rgb: 17, 17, 17;
        --accent: #ffc4a4;
        --accent-rgb: 255, 196, 164;
        --background: #000000;
        --text: #e0e0e0;
        --highlight: #e6a784;
        --highlight-rgb: 230, 167, 132;
        --button: #cc8a6b;
        --button-rgb: 204, 138, 107;
    }

    .theme-pokemon-2 {
        --primary: #191a1c;
        --primary-rgb: 25, 26, 28;
        --secondary: #111111;
        --secondary-rgb: 17, 17, 17;
        --accent: #5d7b6f;
        --accent-rgb: 93, 123, 96;
        --background: #000000;
        --text: #e0e0e0;
        --highlight: #a4c3a2;
        --highlight-rgb: 164, 195, 162;
        --button: #7b998c;
        --button-rgb: 123, 153, 140;
    }

    .theme-pokemon-3 {
        --primary: #191a1c;
        --primary-rgb: 25, 26, 28;
        --secondary: #111111;
        --secondary-rgb: 17, 17, 17;
        --accent: #b85b56;
        --accent-rgb: 184, 91, 86;
        --background: #000000;
        --text: #e0e0e0;
        --highlight: #de741c;
        --highlight-rgb: 222, 116, 28;
        --button: #fea8a7;
        --button-rgb: 254, 168, 167;
    }

    .theme-pokemon-4 {
        --primary: #191a1c;
        --primary-rgb: 25, 26, 28;
        --secondary: #111111;
        --secondary-rgb: 17, 17, 17;
        --accent: #2d99ae;
        --accent-rgb: 45, 153, 174;
        --background: #000000;
        --text: #e0e0e0;
        --highlight: #bcfefe;
        --highlight-rgb: 188, 239, 238;
        --button: #7fc1d2;
        --button-rgb: 127, 193, 210;
    }

    .theme-pokemon-5 {
        --primary: #191a1c;
        --primary-rgb: 25, 26, 28;
        --secondary: #111111;
        --secondary-rgb: 17, 17, 17;
        --accent: #5d4037;
        --accent-rgb: 255, 64, 129;
        --background: #000000;
        --text: #e0e0e0;
        --highlight: #4e342e;
        --highlight-rgb: 255, 47, 127;
        --button: #795548;
        --button-rgb: 255, 102, 154;
    }

    .theme-pokemon-6 {
        --primary: #191a1c;
        --primary-rgb: 25, 26, 28;
        --secondary: #111111;
        --secondary-rgb: 17, 17, 17;
        --accent: #e91e63;
        --accent-rgb: 233, 30, 99;
        --background: #000000;
        --text: #e0e0e0;
        --highlight: #d81b60;
        --highlight-rgb: 216, 27, 96;
        --button: #ff80ab;
        --button-rgb: 255, 128, 171;
    }

    .theme-pokemon-7 {
        --primary: #191a1c;
        --primary-rgb: 25, 26, 28;
        --secondary: #111111;
        --secondary-rgb: 17, 17, 17;
        --accent: #4caf50;
        --accent-rgb: 76, 175, 80;
        --background: #000000;
        --text: #e0e0e0;
        --highlight: #81c784;
        --highlight-rgb: 129, 199, 132;
        --button: #388e3c;
        --button-rgb: 56, 142, 60;
    }

    .theme-pokemon-8 {
        --primary: #191a1c;
        --primary-rgb: 25, 26, 28;
        --secondary: #111111;
        --secondary-rgb: 17, 17, 17;
        --accent: #6a1b9a;
        --accent-rgb: 106, 27, 154;
        --background: #000000;
        --text: #e0e0e0;
        --highlight: #8e24aa;
        --highlight-rgb: 142, 36, 170;
        --button: #4a148c;
        --button-rgb: 74, 20, 140;
    }

    /* .theme-fantasy-light {
        --primary: #;
        --primary-rgb: 106, 27, 154;
        --background: #fcf4ff;
        --text: #292929;
        --secondary: #e8e0f1;
        --secondary-rgb: 232, 224, 241;
        --accent: #03a9f4;
        --accent-rgb: 3, 169, 244;
    }

    .theme-cyberpunk-neon {
        --primary: #00e5ff;
        --primary-rgb: 0, 229, 255;
        --background: #0f0f0f;
        --text: #ffffff;
        --secondary: #1a1a1a;
        --secondary-rgb: 26, 26, 26;
        --accent: #ff4081;
        --accent-rgb: 255, 64, 129;
    }

    .theme-vintage-manga {
        --primary: #5d4037;
        --primary-rgb: 93, 64, 55;
        --background: #fdf6e3;
        --text: #3e3e3e;
        --secondary: #e0dcd3;
        --secondary-rgb: 224, 220, 211;
        --accent: #b59b85;
        --accent-rgb: 181, 155, 133;
    }

    .theme-calm-pastel {
        --primary: #a3c9a8;
        --primary-rgb: 163, 201, 168;
        --background: #fdfdfd;
        --text: #414141;
        --secondary: #e3fcec;
        --secondary-rgb: 227, 252, 236;
        --accent: #ffb3c1;
        --accent-rgb: 255, 179, 193;
    }

    .theme-pop-cartoon {
        --primary: #ff4081;
        --primary-rgb: 255, 64, 129;
        --background: #fffbec;
        --text: #2b2b2b;
        --secondary: #ffe082;
        --secondary-rgb: 255, 224, 130;
        --accent: #00e676;
        --accent-rgb: 0, 230, 118;
    }

    .theme-dark-gothic {
        --primary: #c51162;
        --primary-rgb: 197, 17, 98;
        --background: #0d0d0d;
        --text: #dddddd;
        --secondary: #1b1b1b;
        --secondary-rgb: 27, 27, 27;
        --accent: #6a1b9a;
        --accent-rgb: 106, 27, 154;
    }

    

    .theme-sepia-classic {
        --primary: #795548;
        --primary-rgb: 121, 85, 72;
        --background: #f8f1e7;
        --text: #3e3e3e;
        --secondary: #e0d6c4;
        --secondary-rgb: 224, 214, 196;
        --accent: #a1887f;
        --accent-rgb: 161, 136, 127;
    } */

    /* ============================
   Core Element Overrides
============================ */
    body[class^="theme-"] .bg-primary {
        background-color: var(--primary) !important;
        color: #fff;
    }

    body[class^="theme-"] .btn-primary {
        background-color: var(--primary) !important;
        border-color: var(--primary) !important;
        color: #fff;
        background: linear-gradient(90deg, var(--accent), rgba(var(--accent-rgb), 0.5)) !important;
    }

    body[class^="theme-"] .text-primary {
        color: var(--primary) !important;
    }

    body[class^="theme-"] .bg-secondary {
        background-color: var(--secondary) !important;
    }

    body[class^="theme-"] .text-accent {
        color: var(--accent) !important;
    }

    body[class^="theme-"] .border-accent {
        border-color: var(--accent) !important;
    }

    body[class^="theme-"] .bg-accent {
        background-color: var(--accent) !important;
        color: #fff;
    }

    /* Forms */
    body[class^="theme-"] .form-control {
        background-color: var(--secondary) !important;
        color: var(--text) !important;
        border: 1px solid var(--primary);
    }

    body[class^="theme-"] .form-control:focus {
        box-shadow: 0 0 0 .2rem rgba(var(--primary-rgb), .25) !important;
        border-color: var(--primary) !important;
    }

    body[class^="theme-"] .form-select {
        background-color: var(--secondary) !important;
        color: var(--text) !important;
        border: 1px solid var(--primary);
    }

    body[class^="theme-"] .form-check-input:checked {
        background-color: var(--accent) !important;
        border-color: var(--accent) !important;
    }

    /* Form Switch Styling */
    body[class^="theme-"].theme-dark-elegant .form-switch .form-check-input {
        background-color: var(--highlight) !important;
        border-color: var(--highlight) !important;
    }

    body[class^="theme-"].theme-dark-elegant .form-switch .form-check-input:checked {
        background-color: var(--accent) !important;
        border-color: var(--accent) !important;
    }

    /* Modal & Dropdown */
    body[class^="theme-"] .modal-content {
        background-color: var(--secondary) !important;
        color: var(--text);
    }

    body[class^="theme-"] .modal-header,
    body[class^="theme-"] .modal-footer {
        background-color: var(--primary) !important;
    }

    body[class^="theme-"] .modal-title {
        color: var(--accent) !important;
    }

    body[class^="theme-"] .dropdown-menu {
        background-color: var(--secondary) !important;
    }

    body[class^="theme-"] .dropdown-item {
        color: var(--text) !important;
    }

    body[class^="theme-"] .dropdown-item:hover,
    body[class^="theme-"] .dropdown-item:focus {
        background-color: var(--primary) !important;
        color: #fff;
    }

    /* Table & List */
    body[class^="theme-"] .table {
        color: var(--text) !important;
        background-color: var(--primary) !important;
    }

    body[class^="theme-"] .table-striped tbody tr:nth-of-type(odd) {
        background-color: var(--secondary) !important;
    }

    body[class^="theme-"] .table-hover tbody tr:hover {
        background-color: var(--accent) !important;
        color: #fff;
    }

    body[class^="theme-"] .list-group-item {
        background-color: var(--secondary) !important;
        color: var(--text) !important;
        border: 1px solid var(--primary);
    }

    body[class^="theme-"] .list-group-item.active {
        background-color: var(--primary) !important;
        border-color: var(--primary) !important;
        color: #fff;
    }

    /* RGB Variants for Box-Shadow */
    body[class^="theme-"] .shadow-primary-sm {
        box-shadow: 0 .125rem .25rem rgba(var(--primary-rgb), .15) !important;
    }

    body[class^="theme-"] .shadow-primary {
        box-shadow: 0 .5rem 1rem rgba(var(--primary-rgb), .15) !important;
    }

    body[class^="theme-"] .shadow-primary-lg {
        box-shadow: 0 1rem 3rem rgba(var(--primary-rgb), .15) !important;
    }

    body[class^="theme-"] .shadow-secondary-sm {
        box-shadow: 0 .125rem .25rem rgba(var(--secondary-rgb), .15) !important;
    }

    body[class^="theme-"] .shadow-secondary {
        box-shadow: 0 .5rem 1rem rgba(var(--secondary-rgb), .15) !important;
    }

    body[class^="theme-"] .shadow-secondary-lg {
        box-shadow: 0 1rem 3rem rgba(var(--secondary-rgb), .15) !important;
    }

    body[class^="theme-"] .shadow-accent-sm {
        box-shadow: 0 .125rem .25rem rgba(var(--accent-rgb), .15) !important;
    }

    body[class^="theme-"] .shadow-accent {
        box-shadow: 0 .5rem 1rem rgba(var(--accent-rgb), .15) !important;
    }

    body[class^="theme-"] .shadow-accent-lg {
        box-shadow: 0 1rem 3rem rgba(var(--accent-rgb), .15) !important;
    }

    /* Alerts */
    body[class^="theme-"] .alert-primary {
        background-color: var(--primary) !important;
        color: #fff;
        border-color: var(--primary) !important;
    }

    body[class^="theme-"] .alert-secondary {
        background-color: var(--secondary) !important;
        color: var(--text);
        border-color: var(--secondary) !important;
    }

    body[class^="theme-"] .alert-accent {
        background-color: var(--accent) !important;
        color: #fff;
        border-color: var(--accent) !important;
    }

    /* Badges */
    body[class^="theme-"] .badge-primary {
        background-color: var(--primary) !important;
    }

    body[class^="theme-"] .badge-secondary {
        background-color: var(--secondary) !important;
        color: var(--text);
    }

    body[class^="theme-"] .badge-accent {
        background-color: var(--accent) !important;
    }

    /* Progress Bars */
    body[class^="theme-"] .progress {
        background-color: var(--secondary) !important;
    }

    body[class^="theme-"] .progress-bar {
        background-color: var(--accent) !important;
        height: 100%;
        background: linear-gradient(90deg, var(--accent), rgba(var(--accent-rgb), 0.5));
        width: 0%;
        transition: width 0.3s ease;
        border-radius: 0;
    }

    /* Breadcrumbs */
    body[class^="theme-"] .breadcrumb {
        background-color: var(--secondary) !important;
    }

    body[class^="theme-"] .breadcrumb-item a {
        color: var(--primary) !important;
    }

    body[class^="theme-"] .breadcrumb-item.active {
        color: var(--text) !important;
    }

    /* Pagination */
    body[class^="theme-"] .pagination .page-link {
        color: var(--secondary) !important;
        background-color: var(--background) !important;
        border: 1px solid var(--secondary) !important;
        transition: background-color 0.3s, color 0.3s;
    }

    body[class^="theme-"] .custom-pagination .page-item.active .page-link {
        background-color: var(--accent) !important;
        color: #fff !important;
        /* background: linear-gradient(90deg, var(--accent), rgba(var(--accent-rgb), 0.5)) !important; */
        background: var(--accent) !important;
        border: none !important;
    }

    body[class^="theme-"] .pagination .page-link:hover,
    body[class^="theme-"] .pagination .page-link:focus {
        background-color: rgba(var(--accent-rgb), 0.3) !important;
        color: #fff !important;
        text-decoration: none;
    }

    body[class^="theme-"] .pagination .page-link:focus {
        box-shadow: 0 0 0 .2rem rgba(var(--primary-rgb), .25) !important;
    }

    body[class^="theme-"] .pagination .page-link {
        background-color: var(--highlight) !important;
        color: var(--text) !important;
    }

    /* Nav Tabs & Pills */
    body[class^="theme-"] .nav-tabs .nav-link.active {
        background-color: var(--primary) !important;
        color: #fff !important;
        border-color: var(--primary) var(--primary) transparent;
    }

    body[class^="theme-"] .nav-pills .nav-link.active {
        background-color: var(--primary) !important;
    }

    /* Carousel */
    body[class^="theme-"] .carousel-indicators [data-bs-target] {
        background-color: var(--primary);
    }

    body[class^="theme-"] .carousel-control-prev-icon,
    body[class^="theme-"] .carousel-control-next-icon {
        filter: invert(1);
    }

    /* Toasts */
    body[class^="theme-"] .toast {
        background-color: var(--secondary) !important;
        color: var(--text);
        border: 1px solid var(--primary);
    }

    body[class^="theme-"] .toast-header {
        background-color: var(--background) !important;
        border-bottom: 1px solid var(--primary);
    }

    body[class^="theme-"] .toast-body {
        background-color: var(--secondary) !important;
    }

    /* Spinner */
    body[class^="theme-"] .spinner-border,
    body[class^="theme-"] .spinner-grow {
        color: var(--primary) !important;
    }

    /* Accordion */
    body[class^="theme-"] .accordion-button {
        background-color: var(--secondary) !important;
        color: var(--text) !important;
    }

    body[class^="theme-"] .accordion-button:not(.collapsed) {
        background-color: var(--primary) !important;
        color: #fff !important;
    }

    /* Cards */
    body[class^="theme-"] .card {
        background-color: var(--secondary) !important;
        color: var(--text) !important;
        border: 1px solid var(--primary);
    }

    body[class^="theme-"] .card-header {
        background-color: var(--background) !important;
        border-bottom: 1px solid var(--primary);
    }

    body[class^="theme-"] .card-footer {
        background-color: var(--background) !important;
        border-top: 1px solid var(--primary);
    }

    /* Tooltips & Popovers */
    body[class^="theme-"] .tooltip-inner {
        background-color: var(--text) !important;
        color: var(--background) !important;
    }

    body[class^="theme-"] .popover-header {
        background-color: var(--primary) !important;
        color: #fff;
    }

    body[class^="theme-"] .popover-body {
        background-color: var(--secondary) !important;
        color: var(--text);
    }

    /* Theme Buttons */
    body[class^="theme-"] .btn-primary {
        color: #fff !important;
        background-color: var(--button) !important;
        border-color: var(--button) !important;
    }

    body[class^="theme-"] .btn-primary:hover,
    body[class^="theme-"] .btn-primary:focus {
        background-color: rgba(var(--button-rgb), 0.85) !important;
        border-color: var(--button) !important;
        color: #fff !important;
    }

    body[class^="theme-"] .btn-outline-primary {
        --bs-btn-color: var(--button);
        --bs-btn-border-color: var(--button);
        --bs-btn-hover-color: #fff;
        --bs-btn-hover-bg: var(--button);
        --bs-btn-hover-border-color: var(--button);
        --bs-btn-focus-shadow-rgb: var(--button-focus-shadow-rgb);
        --bs-btn-active-color: #fff;
        --bs-btn-active-bg: var(--button);
        --bs-btn-active-border-color: var(--button);
        --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
        --bs-btn-disabled-color: var(--button);
        --bs-btn-disabled-bg: transparent;
        --bs-btn-disabled-border-color: var(--button);
        --bs-gradient: none;
        color: var(--button) !important;
        border-color: var(--button) !important;
        background-color: transparent !important;
    }

    body[class^="theme-"] .btn-outline-primary:hover,
    body[class^="theme-"] .btn-outline-primary:focus {
        background-color: var(--button) !important;
        color: #fff !important;
    }

    body[class^="theme-"] .btn-secondary {
        color: #fff !important;
        background-color: var(--secondary) !important;
        border-color: var(--secondary) !important;
    }

    body[class^="theme-"] .btn-outline-secondary {
        color: rgba(var(--accent-rgb), 1) !important;
        border-color: rgba(var(--button-rgb), 0.8) !important;
        background-color: transparent !important;
    }

    body[class^="theme-"] .btn-outline-secondary:hover,
    body[class^="theme-"] .btn-outline-secondary:focus {
        background-color: rgba(var(--button-rgb), 0.8) !important;
        color: #fff !important;
    }

    body[class^="theme-"] .btn-accent {
        color: #fff !important;
        background-color: var(--accent) !important;
        border-color: var(--accent) !important;
    }

    body[class^="theme-"] .btn-outline-accent {
        color: var(--accent) !important;
        border-color: var(--accent) !important;
        background-color: transparent !important;
    }

    body[class^="theme-"] .btn-outline-accent:hover,
    body[class^="theme-"] .btn-outline-accent:focus {
        background-color: var(--accent) !important;
        color: #fff !important;
    }

    body[class^="theme-"] .btn-light {
        background-color: #f8f9fa !important;
        color: #000 !important;
        border-color: #f8f9fa !important;
    }

    body[class^="theme-"] .btn-dark {
        background-color: #212529 !important;
        color: #fff !important;
        border-color: #212529 !important;
    }

    body[class^="theme-"] .btn-outline-primary:disabled {
        color: rgba(var(--text-rgb), 0.8) !important;
        border-color: rgba(var(--text-rgb), 0.8) !important;
        background-color: transparent !important;
    }


    body[class^="theme-"] .btn-outline-primary.disabled {
        color: rgba(var(--button-rgb), 0.5) !important;
        border-color: rgba(var(--button-rgb), 0.3) !important;
        background-color: transparent !important;
    }

    body[class^="theme-"] .btn-outline-primary:active,
    body[class^="theme-"] .btn-outline-primary.active {
        background-color: rgba(var(--button-rgb), 0.85) !important;
        border-color: var(--button) !important;
        color: #fff !important;
    }



    /* Utilities examples */
    body[class^="theme-"] .text-muted {
        color: rgba(var(--text), .6) !important;
    }

    body[class^="theme-"] .link-underline {
        text-decoration: underline var(--accent);
    }

    /* BG Utility Variants for Bootstrap contexts */
    body[class^="theme-"] .bg-primary {
        background-color: var(--primary) !important;
    }

    body[class^="theme-"] .bg-secondary {
        background-color: var(--secondary) !important;
    }

    /* Semantic background colors (static, for consistency) */
    body[class^="theme-"] .bg-success {
        background-color: #198754 !important;
    }

    body[class^="theme-"] .bg-danger {
        background-color: #dc3545 !important;
    }

    body[class^="theme-"] .bg-warning {
        background-color: #ffc107 !important;
    }

    body[class^="theme-"] .bg-info {
        background-color: #0dcaf0 !important;
    }

    body[class^="theme-"] .bg-stealth {
        background-color: transparent !important;
    }

    /* SweetAlert Dark Mode Styling */
    body[class^="theme-"] .my-swal2-dark,
    body[class^="theme-"] .swal2-dark {
        background-color: var(--primary) !important;
        color: var(--text) !important;
        border: 1px solid var(--highlight) !important;
        box-shadow: 0 0 20px rgba(var(--accent-rgb), 0.2);
    }

    body[class^="theme-"] .swal2-title,
    body[class^="theme-"] .swal2-content {
        color: var(--text) !important;
    }

    body[class^="theme-"] .swal2-confirm,
    body[class^="theme-"] .swal2-cancel {
        background-color: var(--accent) !important;
        color: #fff !important;
        border: none !important;
    }


    /* Ensure text contrasts */
    body[class^="theme-"] .bg-primary.text-white,
    body[class^="theme-"] .bg-secondary.text-white,
    body[class^="theme-"] .bg-success.text-white,
    body[class^="theme-"] .bg-danger.text-white,
    body[class^="theme-"] .bg-warning.text-white,
    body[class^="theme-"] .bg-info.text-white,
    body[class^="theme-"] .bg-dark.text-white {
        color: #fff !important;
    }

    /* BG-DARK / TEXT-DARK / BORDER-DARK Overrides */
    body[class^="theme-"] .bg-dark {
        background-color: var(--primary) !important;
    }

    body[class^="theme-"] .text-dark {
        color: var(--text) !important;
    }

    body[class^="theme-"] .border-dark {
        border-color: var(--secondary) !important;
    }

    /* Custom: Sidebar Nav Active */
    body[class^="theme-"] .sidebar .nav-link.active,
    #userDropdown .btn,
    .nav-item.active {
        background-color: var(--accent) !important;
        color: #fff !important;
        border-radius: .25rem;
        box-shadow: 0 0 .25rem rgba(var(--accent-rgb), .5);
    }

    body[class^="theme-"] .bg-dark {
        background-color: var(--primary) !important;
        border-bottom: 2px solid var(--accent) !important;
    }


    body[class^="theme-"] .text-primary {
        color: var(--text) !important;
    }

    body[class^="theme-"] #userSettings .avatar-item.active {
        border: 2px solid var(--accent) !important;
        /* border-radius: .25rem; */
    }

    body[class^="theme-"] .highlight-item {
        border-left: 2px solid var(--accent) !important;
    }

    body[class^="theme-"] .totalChapters,
    .totalTranslations,
    #filteredCount,
    .filter-tag .remove-filter,
    .filter-stats .filter-tag,
    .updateTime,
    .chapter-number,
    #chapterTitle,
    .header-nav-btn:hover {
        color: var(--accent) !important;
    }

    body[class^="theme-"] .filter-tag,
    .filter-stats {
        background-color: rgba(var(--accent-rgb), 0.1) !important;
        color: var(--accent) !important;
        border: 1px solid rgba(var(--accent-rgb), 0.2) !important;
    }

    body[class^="theme-"] #comicDetailButtons .comic-btn-primary {
        background: var(--accent) !important;
        color: #fff !important;
    }

    body[class^="theme-"] #showRatingBtn,
    #showReportBtn,
    #showShareBtn,
    #showDownloadBtn,
    #translationGroup,
    #languageBadge {
        background-color: rgba(var(--accent-rgb), 0.3) !important;
        color: var(--accent) !important;
    }

    body[class^="theme-"] #languageBadge:hover {
        background-color: rgba(var(--accent-rgb), 0.5) !important;
    }

    body[class^="theme-"] .filters-container::before {
        background: rgba(var(--accent-rgb), 0.7) !important;
    }

    body[class^="theme-"] #searchBarInput:focus,
    body[class^="theme-"] #translationGroup:focus,
    body[class^="theme-"] #languageBadge:focus {
        border: 2px solid var(--accent) !important;
        box-shadow: 0 0 0 2px rgba(var(--accent-rgb), 0.3) !important;
    }

    body[class^="theme-"] #searchBarInput:focus-visible,
    #translationGroup:focus-visible {
        border: 2px solid var(--accent) !important;
        box-shadow: 0 0 0 2px rgba(var(--accent-rgb), 0.5) !important;
    }

    body[class^="theme-"] #chaptersPagination .pagination .page-item.active .page-link {
        background-color: rgba(var(--accent-rgb), 0.5) !important;
        color: #fff !important;
        border: 1px solid var(--highlight) !important;
    }

    body[class^="theme-"] .nextChapterBtnBottom {
        background: rgba(var(--accent-rgb), 1) !important;
        border: none !important;
    }

    body[class^="theme-"] .nextChapterBtnBottom:disabled {
        opacity: 0.5 !important;
        pointer-events: none !important;
        background-color: rgba(var(--accent-rgb), 0.5) !important;
        border: none !important;
        color: rgba(var(--text), 0.5) !important;
        box-shadow: 0 0 0 2px rgba(var(--accent-rgb), 0.5) !important;
    }

    body[class^="theme-"] #pageInfo {
        background: rgba(var(--accent-rgb), 0.1) !important;
        border-color: rgba(var(--accent-rgb), 0.3) !important;
        color: var(--text) !important;
        font-weight: 500 !important;
    }

    body[class^="theme-"] .btn-outline-light {
        background: rgba(var(--accent-rgb), 0.1) !important;
        border-color: rgba(var(--accent-rgb), 0.3) !important;
        color: var(--accent) !important;
    }

    body[class^="theme-"] ::placeholder {
        color: rgba(var(--accent-rgb), 0.5) !important;
    }

    body[class^="theme-"] .reading-mode-btn.active,
    body[class^="theme-"] .image-size-btn.active {
        background: rgba(var(--accent-rgb), 0.3) !important;
        border-color: rgba(var(--accent-rgb), 0.4) !important;
        color: #fff !important;
    }

    body[class^="theme-"] .chapter-item:hover {
        background: rgba(var(--accent-rgb), 0.3) !important;
        border-color: rgba(var(--accent-rgb), 0.4) !important;
        color: var(--accent) !important;
    }

    body[class^="theme-"] div:where(.swal2-container) div:where(.swal2-popup) {
        background: rgba(var(--primary-rgb), 1) !important;
        color: #fff !important;
    }

    body[class^="theme-"] .modal-header .btn-close {
        --bs-btn-close-bg: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='rgba(255,0,0,0.8)' viewBox='0 0 16 16'%3E%3Cpath d='M.293.293a1 1 0 0 1 1.414 0L8 6.586 14.293.293a1 1 0 1 1 1.414 1.414L9.414 8l6.293 6.293a1 1 0 0 1-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 0 1-1.414-1.414L6.586 8 .293 1.707a1 1 0 0 1 0-1.414z'/%3E%3C/svg%3E") !important;
    }

    body[class^="theme-"] .ts-control {
        background: none !important;
        border: none !important;
        padding: 0 !important;
        font-size: 1rem !important;
        line-height: unset !important;
    }

    body[class^="theme-"] .ts-control input {
        font-size: 1rem !important;
        color: var(--text) !important;
    }
</style>
</body></html>