<!DOCTYPE html><html lang="de-DE"><head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="1705c3235e02c45caaf2b0f8ea4f9391a46bda3ae489d8ef491fd1ee1de7aa08">
    <meta name="author" content="Manga Ball">
    <meta name="robots" content="index, follow">
    <meta name="googlebot" content="index, follow">
    <meta name="google" content="index, follow">
    <meta name="google-site-verification" content="">
    
    <title>Moto Kouzou Kaiseki Kenkyuusho no Isekai Boukentan Vol. 7 Ch. 37  Online Kostenlos - Mehreren Sprachen</title>
    <meta name="description" content="Moto Kouzou Kaiseki Kenkyuusho no Isekai Boukentan Vol. 7 Ch. 37  Online Kostenlos - Moto Kouzou Kaiseki Kenkyuusho no Isekai Boukentan / The Former Structural Analyst\'s Otherworldly Adventure Story / 元構造解析研究者の異世界冒険譚 / Adventures of a Former Structural Analyst / The Former Structural Researcher’s Story of Otherworldly Adventure / Moto Kouzou Kaiseki Kenkyuusho no Isekai Boukentan Mehreren Sprachen">
    <meta name="keywords" content="Comics online lesen, beste Comics, neueste Comics, kostenlose Comics, Comics lesen">
    <link rel="canonical" href="https://mangaball.net/chapter-detail/685359506c8186610a03d5c4/">
    
    <meta property="og:locale" content="de-DE">
    <meta property="og:type" content="article">
    <meta property="og:title" content="Moto Kouzou Kaiseki Kenkyuusho no Isekai Boukentan Vol. 7 Ch. 37  Online Kostenlos - Mehreren Sprachen">
    <meta property="og:description" content="Moto Kouzou Kaiseki Kenkyuusho no Isekai Boukentan Vol. 7 Ch. 37  Online Kostenlos - Moto Kouzou Kaiseki Kenkyuusho no Isekai Boukentan / The Former Structural Analyst\'s Otherworldly Adventure Story / 元構造解析研究者の異世界冒険譚 / Adventures of a Former Structural Analyst / The Former Structural Researcher’s Story of Otherworldly Adventure / Moto Kouzou Kaiseki Kenkyuusho no Isekai Boukentan Mehreren Sprachen">
    <meta property="og:url" content="https://mangaball.net/chapter-detail/685359506c8186610a03d5c4/">
    <meta property="og:image" content="https://bulbasaur.poke-black-and-white.net/covers/68526f4d6908629fc2c8226e/cover_1754760194468.jpg">
    <meta property="og:site_name" content="Manga Ball">
    <meta property="article:modified_time" content="2025-10-17 20:58:04">
    <meta property="og:image" content="https://bulbasaur.poke-black-and-white.net/covers/68526f4d6908629fc2c8226e/cover_1754760194468.jpg">
    <script type="application/ld+json" class="yoast-schema-graph">
    {
        "@context": "https://schema.org",
        "@graph": [
            {
                "@type": "WebPage",
                "@id": "https://mangaball.net/title-detail/moto-kouzou-kaiseki-kenkyuusho-no-isekai-boukentan-68526f4d6908629fc2c8226e/",
                "url": "https://mangaball.net/title-detail/moto-kouzou-kaiseki-kenkyuusho-no-isekai-boukentan-68526f4d6908629fc2c8226e/",
                "name": "Moto Kouzou Kaiseki Kenkyuusho no Isekai Boukentan - Manga Ball",
                "isPartOf": { "@id": "https://mangaball.net/#website" },
                "primaryImageOfPage": { "@id": "https://mangaball.net/title-detail/moto-kouzou-kaiseki-kenkyuusho-no-isekai-boukentan-68526f4d6908629fc2c8226e/#primaryimage" },
                "image": { "@id": "https://mangaball.net/title-detail/moto-kouzou-kaiseki-kenkyuusho-no-isekai-boukentan-68526f4d6908629fc2c8226e/#primaryimage" },
                "thumbnailUrl": "https://bulbasaur.poke-black-and-white.net/covers/68526f4d6908629fc2c8226e/cover_1754760194468.jpg",
                "datePublished": "2025-10-17 20:58:04",
                "dateModified": "2025-10-17 20:58:04",
                "breadcrumb": { "@id": "https://mangaball.net/title-detail/moto-kouzou-kaiseki-kenkyuusho-no-isekai-boukentan-68526f4d6908629fc2c8226e/#breadcrumb" },
                "inLanguage": "de-DE",
                "potentialAction": [{ "@type": "ReadAction", "target": ["https://mangaball.net/title-detail/moto-kouzou-kaiseki-kenkyuusho-no-isekai-boukentan-68526f4d6908629fc2c8226e/"] }]
            },
            {
                "@type": "ImageObject",
                "inLanguage": "de-DE",
                "@id": "https://mangaball.net/title-detail/moto-kouzou-kaiseki-kenkyuusho-no-isekai-boukentan-68526f4d6908629fc2c8226e/#primaryimage",
                "url": "https://bulbasaur.poke-black-and-white.net/covers/68526f4d6908629fc2c8226e/cover_1754760194468.jpg",
                "contentUrl": "https://bulbasaur.poke-black-and-white.net/covers/68526f4d6908629fc2c8226e/cover_1754760194468.jpg",
                "width": 700,
                "height": 1000,
                "caption": "Moto Kouzou Kaiseki Kenkyuusho no Isekai Boukentan"
            },
            {
                "@type": "BreadcrumbList",
                "@id": "https://mangaball.net/title-detail/moto-kouzou-kaiseki-kenkyuusho-no-isekai-boukentan-68526f4d6908629fc2c8226e/#breadcrumb",
                "itemListElement": [
                    { "@type": "ListItem", "position": 1, "name": "Home", "item": "https://mangaball.net" },
                    { "@type": "ListItem", "position": 2, "name": "Manga", "item": "https://mangaball.net/title-detail/moto-kouzou-kaiseki-kenkyuusho-no-isekai-boukentan-68526f4d6908629fc2c8226e/" },
                    { "@type": "ListItem", "position": 3, "name": "<br />
<b>Warning</b>:  Undefined array key "chapter_name" in <b>/www/wwwroot/mangadex/views/frontend/pages/chapter/chapterIndex.php</b> on line <b>71</b><br />
" }
                ]
            },
            {
                "@type": "WebSite",
                "@id": "https://mangaball.net/#website",
                "url": "https://mangaball.net/",
                "name": "Manga Ball",
                "description": "Read Manga Online",
                "potentialAction": [{
                    "@type": "SearchAction",
                    "target": { "@type": "EntryPoint", "urlTemplate": "https://mangaball.net/advanced-search?keyword={search_term_string}" },
                    "query-input": "required name=search_term_string"
                }],
                "inLanguage": "de-DE"
            }
        ]
    }
    </script>
    <link rel="icon" href="/favicon.ico" type="image/png">
    <link rel="icon" type="image/png" href="/public/frontend/images/favicon.png">
    <link rel="icon" type="image/png" href="/public/frontend/images/favicon/favicon-24x24.png" sizes="24x24">
    <link rel="icon" type="image/png" href="/public/frontend/images/favicon/favicon-32x32.png" sizes="32x32">
    <link rel="icon" type="image/png" href="/public/frontend/images/favicon/favicon-48x48.png" sizes="48x48">
    <link rel="icon" type="image/png" href="/public/frontend/images/favicon/favicon-64x64.png" sizes="64x64">
    <link rel="icon" type="image/png" href="/public/frontend/images/favicon/favicon-96x96.png" sizes="96x96">
    <link rel="icon" type="image/png" href="/public/frontend/images/favicon/favicon-128x128.png" sizes="128x128">
    <link rel="icon" type="image/png" href="/public/frontend/images/favicon/favicon-192x192.png" sizes="192x192">
    <link rel="icon" type="image/png" href="/public/frontend/images/favicon/favicon-256x256.png" sizes="256x256">
    <link rel="icon" type="image/png" href="/public/frontend/images/favicon/favicon-384x384.png" sizes="384x384">
    <link rel="icon" type="image/png" href="/public/frontend/images/favicon/favicon-512x512.png" sizes="512x512">
    <link rel="apple-touch-icon" type="image/png" href="/public/frontend/images/favicon/favicon-180x180.png">
    <meta name="msapplication-TileImage" content="/public/frontend/images/favicon/favicon-270x270.png">
    <link href="/public/vendors/bootstrap-5.3.6/css/bootstrap.min.css" rel="stylesheet">
    <link href="/public/vendors/font-awesome/css/all.min.css" rel="stylesheet">
    <link href="/public/vendors/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet">
    
    <link href="/public/vendors/tom-select/tom-select.css" rel="stylesheet">
    <script src="/public/vendors/tom-select/tom-select.complete.min.js"></script>
    <script src="/public/vendors/jquery/jquery-3.6.0.min.js"></script>
    <script src="/public/vendors/bootstrap-5.3.6/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script src="/public/js/skeleton.js"></script>
    <script src="/public/js/renderhtml.js"></script>
    <script src="/public/js/chapter.js"></script><div id="swal-dark-css">
<style>
.swal-dark-popup {
    background-color: #2d3748 !important;
    color: #ffffff !important;
}

.swal-dark-popup .swal2-title {
    color: #ffffff !important;
}

.swal-dark-popup .swal2-content {
    color: #e2e8f0 !important;
}

.swal-dark-select {
    background-color: #4a5568 !important;
    color: #ffffff !important;
    border: 1px solid #718096 !important;
}

.swal-dark-select:focus {
    border-color: #4299e1 !important;
    box-shadow: 0 0 0 0.2rem rgba(66, 153, 225, 0.25) !important;
}
</style>
</div>
    <script src="/public/js/comments.js"></script>
    <script src="/public/vendors/sweetalert2/sweetalert2.all.min.js"></script><style>:root{--swal2-outline: 0 0 0 3px rgba(100, 150, 200, 0.5);--swal2-container-padding: 0.625em;--swal2-backdrop: rgba(0, 0, 0, 0.4);--swal2-backdrop-transition: background-color 0.1s;--swal2-width: 32em;--swal2-padding: 0 0 1.25em;--swal2-border: none;--swal2-border-radius: 0.3125rem;--swal2-background: white;--swal2-color: #545454;--swal2-show-animation: swal2-show 0.3s;--swal2-hide-animation: swal2-hide 0.15s forwards;--swal2-icon-zoom: 1;--swal2-icon-animations: true;--swal2-title-padding: 0.8em 1em 0;--swal2-html-container-padding: 1em 1.6em 0.3em;--swal2-input-border: 1px solid #d9d9d9;--swal2-input-border-radius: 0.1875em;--swal2-input-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.06), 0 0 0 3px transparent;--swal2-input-background: transparent;--swal2-input-transition: border-color 0.2s, box-shadow 0.2s;--swal2-input-hover-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.06), 0 0 0 3px transparent;--swal2-input-focus-border: 1px solid #b4dbed;--swal2-input-focus-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.06), 0 0 0 3px $swal2-outline-color;--swal2-progress-step-background: #add8e6;--swal2-validation-message-background: #f0f0f0;--swal2-validation-message-color: #666;--swal2-footer-border-color: #eee;--swal2-footer-background: transparent;--swal2-footer-color: inherit;--swal2-close-button-position: initial;--swal2-close-button-inset: auto;--swal2-close-button-font-size: 2.5em;--swal2-close-button-color: #ccc;--swal2-close-button-transition: color 0.2s, box-shadow 0.2s;--swal2-close-button-outline: initial;--swal2-close-button-box-shadow: inset 0 0 0 3px transparent;--swal2-close-button-focus-box-shadow: inset var(--swal2-outline);--swal2-close-button-hover-transform: none;--swal2-actions-justify-content: center;--swal2-actions-width: auto;--swal2-actions-margin: 1.25em auto 0;--swal2-actions-padding: 0;--swal2-actions-border-radius: 0;--swal2-actions-background: transparent;--swal2-action-button-transition: background-color 0.2s, box-shadow 0.2s;--swal2-action-button-hover: black 10%;--swal2-action-button-active: black 10%;--swal2-confirm-button-box-shadow: none;--swal2-confirm-button-border-radius: 0.25em;--swal2-confirm-button-background-color: #7066e0;--swal2-confirm-button-color: #fff;--swal2-deny-button-box-shadow: none;--swal2-deny-button-border-radius: 0.25em;--swal2-deny-button-background-color: #dc3741;--swal2-deny-button-color: #fff;--swal2-cancel-button-box-shadow: none;--swal2-cancel-button-border-radius: 0.25em;--swal2-cancel-button-background-color: #6e7881;--swal2-cancel-button-color: #fff;--swal2-toast-show-animation: swal2-toast-show 0.5s;--swal2-toast-hide-animation: swal2-toast-hide 0.1s forwards;--swal2-toast-border: none;--swal2-toast-box-shadow: 0 0 1px hsl(0deg 0% 0% / 0.075), 0 1px 2px hsl(0deg 0% 0% / 0.075), 1px 2px 4px hsl(0deg 0% 0% / 0.075), 1px 3px 8px hsl(0deg 0% 0% / 0.075), 2px 4px 16px hsl(0deg 0% 0% / 0.075)}[data-swal2-theme=dark]{--swal2-dark-theme-black: #19191a;--swal2-dark-theme-white: #e1e1e1;--swal2-background: var(--swal2-dark-theme-black);--swal2-color: var(--swal2-dark-theme-white);--swal2-footer-border-color: #555;--swal2-input-background: color-mix(in srgb, var(--swal2-dark-theme-black), var(--swal2-dark-theme-white) 10%);--swal2-validation-message-background: color-mix( in srgb, var(--swal2-dark-theme-black), var(--swal2-dark-theme-white) 10% );--swal2-validation-message-color: var(--swal2-dark-theme-white)}@media(prefers-color-scheme: dark){[data-swal2-theme=auto]{--swal2-dark-theme-black: #19191a;--swal2-dark-theme-white: #e1e1e1;--swal2-background: var(--swal2-dark-theme-black);--swal2-color: var(--swal2-dark-theme-white);--swal2-footer-border-color: #555;--swal2-input-background: color-mix(in srgb, var(--swal2-dark-theme-black), var(--swal2-dark-theme-white) 10%);--swal2-validation-message-background: color-mix( in srgb, var(--swal2-dark-theme-black), var(--swal2-dark-theme-white) 10% );--swal2-validation-message-color: var(--swal2-dark-theme-white)}}body.swal2-shown:not(.swal2-no-backdrop,.swal2-toast-shown){overflow:hidden}body.swal2-height-auto{height:auto !important}body.swal2-no-backdrop .swal2-container{background-color:rgba(0,0,0,0) !important;pointer-events:none}body.swal2-no-backdrop .swal2-container .swal2-popup{pointer-events:all}body.swal2-no-backdrop .swal2-container .swal2-modal{box-shadow:0 0 10px var(--swal2-backdrop)}body.swal2-toast-shown .swal2-container{box-sizing:border-box;width:360px;max-width:100%;background-color:rgba(0,0,0,0);pointer-events:none}body.swal2-toast-shown .swal2-container.swal2-top{inset:0 auto auto 50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-top-end,body.swal2-toast-shown .swal2-container.swal2-top-right{inset:0 0 auto auto}body.swal2-toast-shown .swal2-container.swal2-top-start,body.swal2-toast-shown .swal2-container.swal2-top-left{inset:0 auto auto 0}body.swal2-toast-shown .swal2-container.swal2-center-start,body.swal2-toast-shown .swal2-container.swal2-center-left{inset:50% auto auto 0;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-center{inset:50% auto auto 50%;transform:translate(-50%, -50%)}body.swal2-toast-shown .swal2-container.swal2-center-end,body.swal2-toast-shown .swal2-container.swal2-center-right{inset:50% 0 auto auto;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-start,body.swal2-toast-shown .swal2-container.swal2-bottom-left{inset:auto auto 0 0}body.swal2-toast-shown .swal2-container.swal2-bottom{inset:auto auto 0 50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-end,body.swal2-toast-shown .swal2-container.swal2-bottom-right{inset:auto 0 0 auto}@media print{body.swal2-shown:not(.swal2-no-backdrop,.swal2-toast-shown){overflow-y:scroll !important}body.swal2-shown:not(.swal2-no-backdrop,.swal2-toast-shown)>[aria-hidden=true]{display:none}body.swal2-shown:not(.swal2-no-backdrop,.swal2-toast-shown) .swal2-container{position:static !important}}div:where(.swal2-container){display:grid;position:fixed;z-index:1060;inset:0;box-sizing:border-box;grid-template-areas:"top-start     top            top-end" "center-start  center         center-end" "bottom-start  bottom-center  bottom-end";grid-template-rows:minmax(min-content, auto) minmax(min-content, auto) minmax(min-content, auto);height:100%;padding:var(--swal2-container-padding);overflow-x:hidden;transition:var(--swal2-backdrop-transition);-webkit-overflow-scrolling:touch}div:where(.swal2-container).swal2-backdrop-show,div:where(.swal2-container).swal2-noanimation{background:var(--swal2-backdrop)}div:where(.swal2-container).swal2-backdrop-hide{background:rgba(0,0,0,0) !important}div:where(.swal2-container).swal2-top-start,div:where(.swal2-container).swal2-center-start,div:where(.swal2-container).swal2-bottom-start{grid-template-columns:minmax(0, 1fr) auto auto}div:where(.swal2-container).swal2-top,div:where(.swal2-container).swal2-center,div:where(.swal2-container).swal2-bottom{grid-template-columns:auto minmax(0, 1fr) auto}div:where(.swal2-container).swal2-top-end,div:where(.swal2-container).swal2-center-end,div:where(.swal2-container).swal2-bottom-end{grid-template-columns:auto auto minmax(0, 1fr)}div:where(.swal2-container).swal2-top-start>.swal2-popup{align-self:start}div:where(.swal2-container).swal2-top>.swal2-popup{grid-column:2;place-self:start center}div:where(.swal2-container).swal2-top-end>.swal2-popup,div:where(.swal2-container).swal2-top-right>.swal2-popup{grid-column:3;place-self:start end}div:where(.swal2-container).swal2-center-start>.swal2-popup,div:where(.swal2-container).swal2-center-left>.swal2-popup{grid-row:2;align-self:center}div:where(.swal2-container).swal2-center>.swal2-popup{grid-column:2;grid-row:2;place-self:center center}div:where(.swal2-container).swal2-center-end>.swal2-popup,div:where(.swal2-container).swal2-center-right>.swal2-popup{grid-column:3;grid-row:2;place-self:center end}div:where(.swal2-container).swal2-bottom-start>.swal2-popup,div:where(.swal2-container).swal2-bottom-left>.swal2-popup{grid-column:1;grid-row:3;align-self:end}div:where(.swal2-container).swal2-bottom>.swal2-popup{grid-column:2;grid-row:3;place-self:end center}div:where(.swal2-container).swal2-bottom-end>.swal2-popup,div:where(.swal2-container).swal2-bottom-right>.swal2-popup{grid-column:3;grid-row:3;place-self:end end}div:where(.swal2-container).swal2-grow-row>.swal2-popup,div:where(.swal2-container).swal2-grow-fullscreen>.swal2-popup{grid-column:1/4;width:100%}div:where(.swal2-container).swal2-grow-column>.swal2-popup,div:where(.swal2-container).swal2-grow-fullscreen>.swal2-popup{grid-row:1/4;align-self:stretch}div:where(.swal2-container).swal2-no-transition{transition:none !important}div:where(.swal2-container)[popover]{width:auto;border:0}div:where(.swal2-container) div:where(.swal2-popup){display:none;position:relative;box-sizing:border-box;grid-template-columns:minmax(0, 100%);width:var(--swal2-width);max-width:100%;padding:var(--swal2-padding);border:var(--swal2-border);border-radius:var(--swal2-border-radius);background:var(--swal2-background);color:var(--swal2-color);font-family:inherit;font-size:1rem;container-name:swal2-popup}div:where(.swal2-container) div:where(.swal2-popup):focus{outline:none}div:where(.swal2-container) div:where(.swal2-popup).swal2-loading{overflow-y:hidden}div:where(.swal2-container) div:where(.swal2-popup).swal2-draggable{cursor:grab}div:where(.swal2-container) div:where(.swal2-popup).swal2-draggable div:where(.swal2-icon){cursor:grab}div:where(.swal2-container) div:where(.swal2-popup).swal2-dragging{cursor:grabbing}div:where(.swal2-container) div:where(.swal2-popup).swal2-dragging div:where(.swal2-icon){cursor:grabbing}div:where(.swal2-container) h2:where(.swal2-title){position:relative;max-width:100%;margin:0;padding:var(--swal2-title-padding);color:inherit;font-size:1.875em;font-weight:600;text-align:center;text-transform:none;word-wrap:break-word;cursor:initial}div:where(.swal2-container) div:where(.swal2-actions){display:flex;z-index:1;box-sizing:border-box;flex-wrap:wrap;align-items:center;justify-content:var(--swal2-actions-justify-content);width:var(--swal2-actions-width);margin:var(--swal2-actions-margin);padding:var(--swal2-actions-padding);border-radius:var(--swal2-actions-border-radius);background:var(--swal2-actions-background)}div:where(.swal2-container) div:where(.swal2-loader){display:none;align-items:center;justify-content:center;width:2.2em;height:2.2em;margin:0 1.875em;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border-width:.25em;border-style:solid;border-radius:100%;border-color:#2778c4 rgba(0,0,0,0) #2778c4 rgba(0,0,0,0)}div:where(.swal2-container) button:where(.swal2-styled){margin:.3125em;padding:.625em 1.1em;transition:var(--swal2-action-button-transition);border:none;box-shadow:0 0 0 3px rgba(0,0,0,0);font-weight:500}div:where(.swal2-container) button:where(.swal2-styled):not([disabled]){cursor:pointer}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-confirm){border-radius:var(--swal2-confirm-button-border-radius);background:initial;background-color:var(--swal2-confirm-button-background-color);box-shadow:var(--swal2-confirm-button-box-shadow);color:var(--swal2-confirm-button-color);font-size:1em}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-confirm):hover{background-color:color-mix(in srgb, var(--swal2-confirm-button-background-color), var(--swal2-action-button-hover))}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-confirm):active{background-color:color-mix(in srgb, var(--swal2-confirm-button-background-color), var(--swal2-action-button-active))}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-deny){border-radius:var(--swal2-deny-button-border-radius);background:initial;background-color:var(--swal2-deny-button-background-color);box-shadow:var(--swal2-deny-button-box-shadow);color:var(--swal2-deny-button-color);font-size:1em}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-deny):hover{background-color:color-mix(in srgb, var(--swal2-deny-button-background-color), var(--swal2-action-button-hover))}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-deny):active{background-color:color-mix(in srgb, var(--swal2-deny-button-background-color), var(--swal2-action-button-active))}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-cancel){border-radius:var(--swal2-cancel-button-border-radius);background:initial;background-color:var(--swal2-cancel-button-background-color);box-shadow:var(--swal2-cancel-button-box-shadow);color:var(--swal2-cancel-button-color);font-size:1em}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-cancel):hover{background-color:color-mix(in srgb, var(--swal2-cancel-button-background-color), var(--swal2-action-button-hover))}div:where(.swal2-container) button:where(.swal2-styled):where(.swal2-cancel):active{background-color:color-mix(in srgb, var(--swal2-cancel-button-background-color), var(--swal2-action-button-active))}div:where(.swal2-container) button:where(.swal2-styled):focus-visible{outline:none;box-shadow:var(--swal2-action-button-focus-box-shadow)}div:where(.swal2-container) button:where(.swal2-styled)[disabled]:not(.swal2-loading){opacity:.4}div:where(.swal2-container) button:where(.swal2-styled)::-moz-focus-inner{border:0}div:where(.swal2-container) div:where(.swal2-footer){margin:1em 0 0;padding:1em 1em 0;border-top:1px solid var(--swal2-footer-border-color);background:var(--swal2-footer-background);color:var(--swal2-footer-color);font-size:1em;text-align:center;cursor:initial}div:where(.swal2-container) .swal2-timer-progress-bar-container{position:absolute;right:0;bottom:0;left:0;grid-column:auto !important;overflow:hidden;border-bottom-right-radius:var(--swal2-border-radius);border-bottom-left-radius:var(--swal2-border-radius)}div:where(.swal2-container) div:where(.swal2-timer-progress-bar){width:100%;height:.25em;background:rgba(0,0,0,.2)}div:where(.swal2-container) img:where(.swal2-image){max-width:100%;margin:2em auto 1em;cursor:initial}div:where(.swal2-container) button:where(.swal2-close){position:var(--swal2-close-button-position);inset:var(--swal2-close-button-inset);z-index:2;align-items:center;justify-content:center;width:1.2em;height:1.2em;margin-top:0;margin-right:0;margin-bottom:-1.2em;padding:0;overflow:hidden;transition:var(--swal2-close-button-transition);border:none;border-radius:var(--swal2-border-radius);outline:var(--swal2-close-button-outline);background:rgba(0,0,0,0);color:var(--swal2-close-button-color);font-family:monospace;font-size:var(--swal2-close-button-font-size);cursor:pointer;justify-self:end}div:where(.swal2-container) button:where(.swal2-close):hover{transform:var(--swal2-close-button-hover-transform);background:rgba(0,0,0,0);color:#f27474}div:where(.swal2-container) button:where(.swal2-close):focus-visible{outline:none;box-shadow:var(--swal2-close-button-focus-box-shadow)}div:where(.swal2-container) button:where(.swal2-close)::-moz-focus-inner{border:0}div:where(.swal2-container) div:where(.swal2-html-container){z-index:1;justify-content:center;margin:0;padding:var(--swal2-html-container-padding);overflow:auto;color:inherit;font-size:1.125em;font-weight:normal;line-height:normal;text-align:center;word-wrap:break-word;word-break:break-word;cursor:initial}div:where(.swal2-container) input:where(.swal2-input),div:where(.swal2-container) input:where(.swal2-file),div:where(.swal2-container) textarea:where(.swal2-textarea),div:where(.swal2-container) select:where(.swal2-select),div:where(.swal2-container) div:where(.swal2-radio),div:where(.swal2-container) label:where(.swal2-checkbox){margin:1em 2em 3px}div:where(.swal2-container) input:where(.swal2-input),div:where(.swal2-container) input:where(.swal2-file),div:where(.swal2-container) textarea:where(.swal2-textarea){box-sizing:border-box;width:auto;transition:var(--swal2-input-transition);border:var(--swal2-input-border);border-radius:var(--swal2-input-border-radius);background:var(--swal2-input-background);box-shadow:var(--swal2-input-box-shadow);color:inherit;font-size:1.125em}div:where(.swal2-container) input:where(.swal2-input).swal2-inputerror,div:where(.swal2-container) input:where(.swal2-file).swal2-inputerror,div:where(.swal2-container) textarea:where(.swal2-textarea).swal2-inputerror{border-color:#f27474 !important;box-shadow:0 0 2px #f27474 !important}div:where(.swal2-container) input:where(.swal2-input):hover,div:where(.swal2-container) input:where(.swal2-file):hover,div:where(.swal2-container) textarea:where(.swal2-textarea):hover{box-shadow:var(--swal2-input-hover-box-shadow)}div:where(.swal2-container) input:where(.swal2-input):focus,div:where(.swal2-container) input:where(.swal2-file):focus,div:where(.swal2-container) textarea:where(.swal2-textarea):focus{border:var(--swal2-input-focus-border);outline:none;box-shadow:var(--swal2-input-focus-box-shadow)}div:where(.swal2-container) input:where(.swal2-input)::placeholder,div:where(.swal2-container) input:where(.swal2-file)::placeholder,div:where(.swal2-container) textarea:where(.swal2-textarea)::placeholder{color:#ccc}div:where(.swal2-container) .swal2-range{margin:1em 2em 3px;background:var(--swal2-background)}div:where(.swal2-container) .swal2-range input{width:80%}div:where(.swal2-container) .swal2-range output{width:20%;color:inherit;font-weight:600;text-align:center}div:where(.swal2-container) .swal2-range input,div:where(.swal2-container) .swal2-range output{height:2.625em;padding:0;font-size:1.125em;line-height:2.625em}div:where(.swal2-container) .swal2-input{height:2.625em;padding:0 .75em}div:where(.swal2-container) .swal2-file{width:75%;margin-right:auto;margin-left:auto;background:var(--swal2-input-background);font-size:1.125em}div:where(.swal2-container) .swal2-textarea{height:6.75em;padding:.75em}div:where(.swal2-container) .swal2-select{min-width:50%;max-width:100%;padding:.375em .625em;background:var(--swal2-input-background);color:inherit;font-size:1.125em}div:where(.swal2-container) .swal2-radio,div:where(.swal2-container) .swal2-checkbox{align-items:center;justify-content:center;background:var(--swal2-background);color:inherit}div:where(.swal2-container) .swal2-radio label,div:where(.swal2-container) .swal2-checkbox label{margin:0 .6em;font-size:1.125em}div:where(.swal2-container) .swal2-radio input,div:where(.swal2-container) .swal2-checkbox input{flex-shrink:0;margin:0 .4em}div:where(.swal2-container) label:where(.swal2-input-label){display:flex;justify-content:center;margin:1em auto 0}div:where(.swal2-container) div:where(.swal2-validation-message){align-items:center;justify-content:center;margin:1em 0 0;padding:.625em;overflow:hidden;background:var(--swal2-validation-message-background);color:var(--swal2-validation-message-color);font-size:1em;font-weight:300}div:where(.swal2-container) div:where(.swal2-validation-message)::before{content:"!";display:inline-block;width:1.5em;min-width:1.5em;height:1.5em;margin:0 .625em;border-radius:50%;background-color:#f27474;color:#fff;font-weight:600;line-height:1.5em;text-align:center}div:where(.swal2-container) .swal2-progress-steps{flex-wrap:wrap;align-items:center;max-width:100%;margin:1.25em auto;padding:0;background:rgba(0,0,0,0);font-weight:600}div:where(.swal2-container) .swal2-progress-steps li{display:inline-block;position:relative}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step{z-index:20;flex-shrink:0;width:2em;height:2em;border-radius:2em;background:#2778c4;color:#fff;line-height:2em;text-align:center}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step.swal2-active-progress-step{background:#2778c4}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step{background:var(--swal2-progress-step-background);color:#fff}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step-line{background:var(--swal2-progress-step-background)}div:where(.swal2-container) .swal2-progress-steps .swal2-progress-step-line{z-index:10;flex-shrink:0;width:2.5em;height:.4em;margin:0 -1px;background:#2778c4}div:where(.swal2-icon){position:relative;box-sizing:content-box;justify-content:center;width:5em;height:5em;margin:2.5em auto .6em;zoom:var(--swal2-icon-zoom);border:.25em solid rgba(0,0,0,0);border-radius:50%;border-color:#000;font-family:inherit;line-height:5em;cursor:default;user-select:none}div:where(.swal2-icon) .swal2-icon-content{display:flex;align-items:center;font-size:3.75em}div:where(.swal2-icon).swal2-error{border-color:#f27474;color:#f27474}div:where(.swal2-icon).swal2-error .swal2-x-mark{position:relative;flex-grow:1}div:where(.swal2-icon).swal2-error [class^=swal2-x-mark-line]{display:block;position:absolute;top:2.3125em;width:2.9375em;height:.3125em;border-radius:.125em;background-color:#f27474}div:where(.swal2-icon).swal2-error [class^=swal2-x-mark-line][class$=left]{left:1.0625em;transform:rotate(45deg)}div:where(.swal2-icon).swal2-error [class^=swal2-x-mark-line][class$=right]{right:1em;transform:rotate(-45deg)}@container swal2-popup style(--swal2-icon-animations:true){div:where(.swal2-icon).swal2-error.swal2-icon-show{animation:swal2-animate-error-icon .5s}div:where(.swal2-icon).swal2-error.swal2-icon-show .swal2-x-mark{animation:swal2-animate-error-x-mark .5s}}div:where(.swal2-icon).swal2-warning{border-color:#f8bb86;color:#f8bb86}@container swal2-popup style(--swal2-icon-animations:true){div:where(.swal2-icon).swal2-warning.swal2-icon-show{animation:swal2-animate-error-icon .5s}div:where(.swal2-icon).swal2-warning.swal2-icon-show .swal2-icon-content{animation:swal2-animate-i-mark .5s}}div:where(.swal2-icon).swal2-info{border-color:#3fc3ee;color:#3fc3ee}@container swal2-popup style(--swal2-icon-animations:true){div:where(.swal2-icon).swal2-info.swal2-icon-show{animation:swal2-animate-error-icon .5s}div:where(.swal2-icon).swal2-info.swal2-icon-show .swal2-icon-content{animation:swal2-animate-i-mark .8s}}div:where(.swal2-icon).swal2-question{border-color:#87adbd;color:#87adbd}@container swal2-popup style(--swal2-icon-animations:true){div:where(.swal2-icon).swal2-question.swal2-icon-show{animation:swal2-animate-error-icon .5s}div:where(.swal2-icon).swal2-question.swal2-icon-show .swal2-icon-content{animation:swal2-animate-question-mark .8s}}div:where(.swal2-icon).swal2-success{border-color:#a5dc86;color:#a5dc86}div:where(.swal2-icon).swal2-success [class^=swal2-success-circular-line]{position:absolute;width:3.75em;height:7.5em;border-radius:50%}div:where(.swal2-icon).swal2-success [class^=swal2-success-circular-line][class$=left]{top:-0.4375em;left:-2.0635em;transform:rotate(-45deg);transform-origin:3.75em 3.75em;border-radius:7.5em 0 0 7.5em}div:where(.swal2-icon).swal2-success [class^=swal2-success-circular-line][class$=right]{top:-0.6875em;left:1.875em;transform:rotate(-45deg);transform-origin:0 3.75em;border-radius:0 7.5em 7.5em 0}div:where(.swal2-icon).swal2-success .swal2-success-ring{position:absolute;z-index:2;top:-0.25em;left:-0.25em;box-sizing:content-box;width:100%;height:100%;border:.25em solid rgba(165,220,134,.3);border-radius:50%}div:where(.swal2-icon).swal2-success .swal2-success-fix{position:absolute;z-index:1;top:.5em;left:1.625em;width:.4375em;height:5.625em;transform:rotate(-45deg)}div:where(.swal2-icon).swal2-success [class^=swal2-success-line]{display:block;position:absolute;z-index:2;height:.3125em;border-radius:.125em;background-color:#a5dc86}div:where(.swal2-icon).swal2-success [class^=swal2-success-line][class$=tip]{top:2.875em;left:.8125em;width:1.5625em;transform:rotate(45deg)}div:where(.swal2-icon).swal2-success [class^=swal2-success-line][class$=long]{top:2.375em;right:.5em;width:2.9375em;transform:rotate(-45deg)}@container swal2-popup style(--swal2-icon-animations:true){div:where(.swal2-icon).swal2-success.swal2-icon-show .swal2-success-line-tip{animation:swal2-animate-success-line-tip .75s}div:where(.swal2-icon).swal2-success.swal2-icon-show .swal2-success-line-long{animation:swal2-animate-success-line-long .75s}div:where(.swal2-icon).swal2-success.swal2-icon-show .swal2-success-circular-line-right{animation:swal2-rotate-success-circular-line 4.25s ease-in}}[class^=swal2]{-webkit-tap-highlight-color:rgba(0,0,0,0)}.swal2-show{animation:var(--swal2-show-animation)}.swal2-hide{animation:var(--swal2-hide-animation)}.swal2-noanimation{transition:none}.swal2-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}.swal2-rtl .swal2-close{margin-right:initial;margin-left:0}.swal2-rtl .swal2-timer-progress-bar{right:0;left:auto}.swal2-toast{box-sizing:border-box;grid-column:1/4 !important;grid-row:1/4 !important;grid-template-columns:min-content auto min-content;padding:1em;overflow-y:hidden;border:var(--swal2-toast-border);background:var(--swal2-background);box-shadow:var(--swal2-toast-box-shadow);pointer-events:all}.swal2-toast>*{grid-column:2}.swal2-toast h2:where(.swal2-title){margin:.5em 1em;padding:0;font-size:1em;text-align:initial}.swal2-toast .swal2-loading{justify-content:center}.swal2-toast input:where(.swal2-input){height:2em;margin:.5em;font-size:1em}.swal2-toast .swal2-validation-message{font-size:1em}.swal2-toast div:where(.swal2-footer){margin:.5em 0 0;padding:.5em 0 0;font-size:.8em}.swal2-toast button:where(.swal2-close){grid-column:3/3;grid-row:1/99;align-self:center;width:.8em;height:.8em;margin:0;font-size:2em}.swal2-toast div:where(.swal2-html-container){margin:.5em 1em;padding:0;overflow:initial;font-size:1em;text-align:initial}.swal2-toast div:where(.swal2-html-container):empty{padding:0}.swal2-toast .swal2-loader{grid-column:1;grid-row:1/99;align-self:center;width:2em;height:2em;margin:.25em}.swal2-toast .swal2-icon{grid-column:1;grid-row:1/99;align-self:center;width:2em;min-width:2em;height:2em;margin:0 .5em 0 0}.swal2-toast .swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:1.8em;font-weight:bold}.swal2-toast .swal2-icon.swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line]{top:.875em;width:1.375em}.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:.3125em}.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:.3125em}.swal2-toast div:where(.swal2-actions){justify-content:flex-start;height:auto;margin:0;margin-top:.5em;padding:0 .5em}.swal2-toast button:where(.swal2-styled){margin:.25em .5em;padding:.4em .6em;font-size:1em}.swal2-toast .swal2-success{border-color:#a5dc86}.swal2-toast .swal2-success [class^=swal2-success-circular-line]{position:absolute;width:1.6em;height:3em;border-radius:50%}.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=left]{top:-0.8em;left:-0.5em;transform:rotate(-45deg);transform-origin:2em 2em;border-radius:4em 0 0 4em}.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=right]{top:-0.25em;left:.9375em;transform-origin:0 1.5em;border-radius:0 4em 4em 0}.swal2-toast .swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-toast .swal2-success .swal2-success-fix{top:0;left:.4375em;width:.4375em;height:2.6875em}.swal2-toast .swal2-success [class^=swal2-success-line]{height:.3125em}.swal2-toast .swal2-success [class^=swal2-success-line][class$=tip]{top:1.125em;left:.1875em;width:.75em}.swal2-toast .swal2-success [class^=swal2-success-line][class$=long]{top:.9375em;right:.1875em;width:1.375em}@container swal2-popup style(--swal2-icon-animations:true){.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-tip{animation:swal2-toast-animate-success-line-tip .75s}.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-long{animation:swal2-toast-animate-success-line-long .75s}}.swal2-toast.swal2-show{animation:var(--swal2-toast-show-animation)}.swal2-toast.swal2-hide{animation:var(--swal2-toast-hide-animation)}@keyframes swal2-show{0%{transform:scale(0.7)}45%{transform:scale(1.05)}80%{transform:scale(0.95)}100%{transform:scale(1)}}@keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(0.5);opacity:0}}@keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-0.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.8125em;width:1.5625em}}@keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(0.4);opacity:0}50%{margin-top:1.625em;transform:scale(0.4);opacity:0}80%{margin-top:-0.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0deg);opacity:1}}@keyframes swal2-rotate-loading{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes swal2-animate-question-mark{0%{transform:rotateY(-360deg)}100%{transform:rotateY(0)}}@keyframes swal2-animate-i-mark{0%{transform:rotateZ(45deg);opacity:0}25%{transform:rotateZ(-25deg);opacity:.4}50%{transform:rotateZ(15deg);opacity:.8}75%{transform:rotateZ(-5deg);opacity:1}100%{transform:rotateX(0);opacity:1}}@keyframes swal2-toast-show{0%{transform:translateY(-0.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(0.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0deg)}}@keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-0.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}</style>
    
    <!-- Offline Manager for Download Chapters -->
    <script src="/public/js/offline-manager.js"></script>
    <!-- Connection Monitor for Offline Detection -->
    <script src="/public/js/connection-monitor.js"></script>
    
    <!-- Google tag (gtag.js) -->
<script async="" src="https://www.googletagmanager.com/gtag/js?id=G-CKP33RWBD7"></script>
<meta name="google-site-verification" content="vVugbuXWUM_UXSbl0bLI33ZWope2n3SP0RsVaSsO7fs">
<script>
    window.dataLayer = window.dataLayer || [];

    function gtag() {
        dataLayer.push(arguments);
    }
    gtag('js', new Date());

    gtag('config', 'G-CKP33RWBD7');
</script>    <style>
        /* Default variables (fallback theme) */
    :root {
        --primary: #191a1c;
        --primary-rgb: 25, 26, 28;
        --secondary: #111111;
        --secondary-rgb: 17, 17, 17;
        --accent: #ffc4a4;
        --accent-rgb: 255, 196, 164;
        --background: #000000;
        --text: #e0e0e0;
        --highlight: #e6a784;
        --highlight-rgb: 230, 167, 132;
        --button: #cc8a6b;
        --button-rgb: 204, 138, 107;
    }
    </style>
<style>.\[\&_\.gdprAdTransparencyCogWheelButton\]\:\!pjra-z-\[5\],
AD-SLOT,
DFP-AD,
[class^="adDisplay-module"],
[class^="amp-ad-"],
[data-ad-cls],
[data-adbridg-ad-class],
[data-adshim],
[data-asg-ins],
[data-block-type="ad"],
[data-cl-spot-id],
[data-css-class="dfp-inarticle"],
[data-d-ad-id],
[data-desktop-ad-id],
[data-dynamic-ads],
[data-ez-name],
[data-freestar-ad][id],
[data-id^="div-gpt-ad"],
[data-identity="adhesive-ad"],
[data-m-ad-id],
[data-mobile-ad-id],
[data-rc-widget],
[data-role="tile-ads-module"],
[data-template-type="nativead"],
[data-testid="adBanner-wrapper"],
[data-testid="ad_testID"],
[data-testid="prism-ad-wrapper"],
[data-testid^="section-AdRowBillboard"],
[data-type="ad-vertical"],
[data-wpas-zoneid],
[href$="/sexdating.php"],
[id^="ad-wrap-"],
[id^="ad_sky"],
[id^="ad_slider"],
[id^="section-ad-banner"],
[onclick^="location.href='https://1337x.vpnonly.site/"],
a-ad,
a[data-href^="http://ads.trafficjunky.net/"],
a[data-url^="https://vulpix.bet/?ref="],
a[onclick^="window.location.replace('https://random-affiliate.atimaze.com/"],
a[style="width:100%;height:100%;z-index:10000000000000000;position:absolute;top:0;left:0;"],
ad-shield-ads,
ad-slot,
app-ad,
app-advertisement,
app-large-ad,
aside[id^="adrotate_widgets-"],
atf-ad-slot,
bottomadblock,
display-ad-component,
display-ads,
div[class$="-adlabel"],
div[class^="Adstyled__AdWrapper-"],
div[data-ad-placeholder],
div[data-ad-region],
div[data-ad-wrapper],
div[data-adname],
div[data-adunit-path],
div[data-adunit],
div[data-adzone],
div[data-alias="300x250 Ad 1"],
div[data-alias="300x250 Ad 2"],
div[data-contentexchange-widget],
div[data-dfp-id],
div[data-id-advertdfpconf],
div[id^="ad-div-"],
div[id^="ad-position-"],
div[id^="adngin-"],
div[id^="adrotate_widgets-"],
div[id^="adspot-"],
div[id^="crt-"][style],
div[id^="div-ads-"],
div[id^="google_dfp_"],
div[id^="gpt_ad_"],
div[id^="lazyad-"],
div[id^="optidigital-adslot"],
div[id^="rc-widget-"],
div[id^="st"][style^="z-index: 999999999;"],
div[id^="sticky_ad_"],
div[id^="vuukle-ad-"],
div[ow-ad-unit-wrapper],
gpt-ad,
guj-ad,
hl-adsense,
img[src^="https://images.purevpnaffiliates.com"],
img[src^="https://s-img.adskeeper.com/"],
ps-connatix-module,
span[data-ez-ph-id],
span[id^="ezoic-pub-ad-placeholder-"],
topadblock,
zeus-ad,
broadstreet-zone-container,
iframe[scrolling="no"][sandbox*="allow-popups allow-modals"][style^="width: 100%; height: 100%; border: none;"],
[class^="tile-picker__CitrusBannerContainer-sc-"],
citrus-ad-wrapper,
div[id*="MarketGid"],
[onclick*="content.ad/"],
AMP-AD,
amp-ad,
amp-ad-custom,
amp-connatix-player,
amp-fx-flying-carpet,
a[data-oburl^="https://paid.outbrain.com/network/redir?"],
a[data-redirect^="https://paid.outbrain.com/network/redir?"],
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"] + .ob_source,
[data-taboola-options],
[data-testid="commercial-label-taboola"],
[data-testid^="taboola-"],
amp-embed[type="taboola"],
div[id^="taboola-stream-"],
div[id^="zergnet-widget"],
html[lang] > body.ishome > div.adult + main.main,
html[lang] > body:not([class]):not([id]):not([style]) > div.background-container > div.container > div.captcha-box,
html[lang] > body.startnew > div#sections > section#section_uname,
html[lang] > body:not([style]) > div.captchaBody,
html[lang] > body#body > * > div.cv-xwrapper > div.cvc > div.cv-inner,
html[lang] > body#body > * > div.cvh.BlockClicksActivityBusy,
html#html[sti][vic][lang] > body#allbody,
html > body > div.container.m-p > #checkbox-window.checkbox-window,
html[lang] > body:not([class]):not([id]):not([style]) > div.container > div.recaptcha-box,
body > .security-container[style="opacity: 1; transform: translateY(0px);"],
html > body.hold-transition.theme-primary.bg-img[style^="background-image"][style*="wallpaperaccess.com"][style*="background-repeat"][style*="background-size"],
html > body > div.container > form#unsubscribe-form[onsubmit="submitUnsubscribeForm(event)"],
html > body > div.content > dl > dd.dd1 > div.min_sider > form#form1[action="unsubscribe.php"],
html > body.body > div.container > div.content > form > table.optoutForm,
div[id][style^="position: fixed; inset: 0px; z-index: 2147483647; background: black"][style*="opacity: 0.01"],
div[class$="player-promo-col"],
div#spot-holder.spot-holder[style="display: block;"],
a[dontfo=""][style$="position: absolute; z-index: 2147483647;"],
[data-ad-module]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-width]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-adblockkey]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(html):not(.adsbygoogle),
[data-advadstrackid]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-manager-id]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
div[style^="z-index: 999999; background-image: url(\"data:image/gif;base64,"][style$="position: absolute;"],
a[onclick="openAuc();"],
div[style="position: fixed; display: block; width: 100%; height: 100%; inset: 0px; background-color: rgba(0, 0, 0, 0); z-index: 300000;"],
div[style^="position:fixed;inset:0px;z-index:2147483647;background:black;opacity:0.01"],
div[style^="position: fixed; inset: 0px; z-index: 2147483647; background: black; opacity: 0.01"],
iframe.lazyloaded[data-src^="https://rcm-fe.amazon-adsystem.com/"],
#player div[style$="cursor: pointer; position: absolute; width: 100%; height: 100%; padding: 1rem; z-index: 2147483647;"],
html[lang][style^="--main-bg-color"] > body:not([class]):not([id]) > div#container[style="visibility: visible;"] > div#banner[style="opacity:0"] ~ main:not([class]):not([id]) > div#message,
[onclick*="postlnk.com"],
[data-lnguri*="vipbox"],
[class^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]) { display: none !important; }

[data-ad-name],
[data-revive-zoneid],
[name^="google_ads_iframe"],
div[aria-label="Ads"],
div[data-ad-targeting],
div[id^="ad_position_"],
div[id^="dfp-ad-"],
div[id^="ezoic-pub-ad-"],
ins.adsbygoogle[data-ad-client],
ins.adsbygoogle[data-ad-slot],
[class^="s2nPlayer"],
div[id*="ScriptRoot"],
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"],
div[id^="div-gpt-"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]):not([style="pointer-events: none; height: 1px; width: 0px; opacity: 0; visibility: hidden; position: fixed; bottom: 0px;"]),
[id^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]):not([style="pointer-events: none; height: 1px; width: 0px; opacity: 0; visibility: hidden; position: fixed; bottom: 0px;"]),
div[style^="height:    250px; width:    300px;"],
div[style^="width:    160px; height:    600px; margin: 0px auto; min-width: 160px; min-height: 600px;"],
div[style^="width:    300px; height:    250px;"],
html[class^="img_"][amp4ads=""][i-amphtml-layout=""][i-amphtml-no-boilerplate=""][amp-version="2502032353000"],
html[class^="img_"][amp4ads=""][i-amphtml-layout=""][i-amphtml-no-boilerplate=""][amp-version="2507172035000"],
html[class^="img_"][amp4ads=""][i-amphtml-layout=""][i-amphtml-no-boilerplate=""][amp-version="2509031727000"],
img[height="   250"][width="   300"],
img[height="   90"][width="   728"],
ins[style$="height:    90px; width:    728px;"],
*:not(body) > a[href^="https://content-loader.com/"],
*:not(body) > a[href^="https://html-load.com/"],
*:not(body) > a[href^="https://07c225f3.online/"] { display: none !important; }</style><style>[href="https://t.me/Russia_Vs_Ukraine_War3"],
[href^="https://url.totaladblock.com/"],
[href*="uselnk.com/"],
[href*="postlnk.com"],
[href*="passtechusa.com"] { display: none !important; }</style><style>[href*="postlnk.com"],
[href*="passtechusa.com"] { display: none !important; }</style></head>

<body class="theme-pokemon-1 bg-dark text-white">
    <style>
    .reader-container {
        min-height: calc(100vh - 80px);
    }

    .manga-page {
        position: relative;
        display: flex;
        justify-content: center;
        /* margin-bottom: 2rem; */
    }

    .page-container {
        position: relative;
        max-width: 100%;
        overflow: hidden;
        /* box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3); */
        background: transparent;
    }

    .manga-image {
        width: 100%;
        height: auto;
        display: block;
        transition: transform 0.3s ease;
    }

    .page-overlay {
        position: absolute;
        top: 10px;
        right: 10px;
        background: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 5px 10px;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: 500;
    }

    .floating-nav {
        position: fixed;
        right: 20px;
        top: 50%;
        transform: translateY(-50%);
        display: flex;
        flex-direction: column;
        gap: 10px;
        z-index: 1000;
    }

    .floating-nav .btn {
        width: 50px;
        height: 50px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    }

    .btn-primary {
        background: linear-gradient(135deg, #ff6740, #ff8c42);
        border: none;
    }

    .btn-primary:hover {
        background: linear-gradient(135deg, #ff8c42, #ff6740);
        transform: translateY(-1px);
    }

    .night-mode {
        background: #1a1a1a !important;
    }

    .night-mode .manga-page {
        filter: brightness(0.8) contrast(1.1);
    }

    /* Chapter Select Modal Styles */
    .nav-tabs .nav-link {
        color: #fff;
        border: 1px solid #444;
        background: transparent;
    }

    .nav-tabs .nav-link.active {
        background: linear-gradient(135deg, #ff6740, #ff8c42);
        border-color: #ff6740;
        color: white;
    }

    .nav-tabs .nav-link:hover {
        border-color: #ff6740;
        color: #ff6740;
    }

    .chapter-item {
        padding: 1rem;
        margin-bottom: 0.5rem;
        border-radius: 8px;
        border: 1px solid #444;
        background: rgba(255, 255, 255, 0.05);
        transition: all 0.3s ease;
        cursor: pointer;
    }

    .chapter-item:hover {
        background: rgba(255, 103, 64, 0.1);
        border-color: #ff6740;
        transform: translateX(5px);
    }

    .chapter-item.current {
        background: linear-gradient(135deg, rgba(255, 103, 64, 0.2), rgba(255, 140, 66, 0.2));
        border-color: #ff6740;
    }

    .translation-item {
        padding: 0.5rem;
        margin: 0.25rem 0;
        border-radius: 6px;
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid #555;
        transition: all 0.3s ease;
        cursor: pointer;
    }

    .translation-item:hover {
        background: rgba(255, 103, 64, 0.1);
        border-color: #ff6740;
    }

    .translation-item.current {
        background: rgba(255, 103, 64, 0.2);
        border-color: #ff6740;
    }

    .language-badge {
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
    }

    .volume-info {
        background: rgba(255, 103, 64, 0.1);
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
        border-left: 4px solid #ff6740;
    }

    /* Settings Modal Styles */
    .reading-mode-btn.active,
    .image-size-btn.active {
        background: linear-gradient(135deg, #ff6740, #ff8c42);
        border-color: #ff6740;
        color: white;
    }

    .reading-mode-btn:hover,
    .image-size-btn:hover {
        border-color: #ff6740;
        color: #ff6740;
    }

    .form-range::-webkit-slider-thumb {
        background: #ff6740;
    }

    .form-range::-moz-range-thumb {
        background: #ff6740;
    }

    .form-check-input:checked {
        background-color: #ff6740;
        border-color: #ff6740;
    }

    .shortcuts-list kbd {
        background: #444 !important;
        color: #fff;
        border: 1px solid #666;
        font-size: 0.8rem;
        padding: 0.2rem 0.4rem;
    }

    .shortcut-item {
        padding: 0.5rem;
        border-radius: 6px;
        background: rgba(255, 255, 255, 0.05);
    }

    /* Reading Mode Styles */
    .reading-mode-vertical .manga-page {
        /* margin-bottom: 2rem; */
    }

    .reading-mode-horizontal .manga-pages {
        display: flex;
        overflow-x: auto;
        overflow-y: hidden;
        scroll-snap-type: x mandatory;
        scroll-behavior: smooth;
        -webkit-overflow-scrolling: touch;
        flex-direction: row;
        transform: rotateX(180deg);
        /* Flip the scrollbar container */
    }

    .reading-mode-horizontal .manga-page {
        transform: rotateX(180deg);
    }

    .reading-mode-horizontal .manga-page {
        flex: 0 0 auto;
        width: 100vw;
        display: flex;
        justify-content: center;
        align-items: flex-start;
        scroll-snap-align: start;
        box-sizing: border-box;
        padding: 0;
        margin: 0;
    }

    .reading-mode-horizontal .page-container {
        width: 100%;
        height: auto;
        display: flex;
        justify-content: center;
        align-items: flex-start;
        overflow: visible;
        margin: 0;
    }

    .reading-mode-horizontal .manga-image {
        width: auto;
        /* Width equal to viewport */
        height: 100%;
        /* Calculate height automatically */
        object-fit: contain;
        /* Không bị méo hình */
        display: block;
        margin: 0 auto;
    }

    /* .reading-mode-horizontal .manga-pages {
        display: flex;
        overflow-x: auto;
        overflow-y: hidden;
        scroll-snap-type: x mandatory;
        gap: 0;
        padding: 0;
        scroll-behavior: smooth;
        -webkit-overflow-scrolling: touch;
        justify-content: flex-start;
        align-items: flex-start;
        width: 100%;
        box-sizing: border-box;
        height: 100vh;
        position: relative;
    } */

    /* .reading-mode-horizontal .manga-page {
        flex: 0 0 100vw;
        scroll-snap-align: start;
        margin-bottom: 0;
        min-width: 100vw;
        max-width: 100vw;
        display: flex;
        justify-content: center;
        align-items: center;
        box-sizing: border-box;
        height: 100vh;
        padding: 1rem;
    } */

    /* .reading-mode-horizontal .page-container {
        max-width: 100%;
        width: 100%;
        height: 100%;
        margin: 0 auto;
        margin-left: 0vw;
        display: flex;
        justify-content: center;
        align-items: center;
        overflow: hidden;
    } */
    /* .reading-mode-horizontal .page-container {
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        overflow: hidden;
        margin: 0; 
    } */



    .reading-mode-horizontal .manga-image {
        width: 100%;
        height: auto;
        object-fit: contain;
        display: block;
        margin: 0 auto;
    }

    .reading-mode-horizontal .manga-page.active .page-container {
        box-shadow: 0 0 20px rgba(255, 103, 64, 0.3);
        border: 2px solid #ff6740;
        border-radius: 8px;
    }

    .reading-mode-webtoon .manga-pages {
        display: flex;
        flex-direction: column;
        gap: 0;
    }

    .reading-mode-webtoon .manga-page {
        margin-bottom: 0;
    }

    .reading-mode-webtoon .page-container {
        border-radius: 0;
    }

    /* Horizontal scrollbar styling */
    .reading-mode-horizontal .manga-pages::-webkit-scrollbar {
        height: 8px;
    }

    .reading-mode-horizontal .manga-pages::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 4px;
    }

    .reading-mode-horizontal .manga-pages::-webkit-scrollbar-thumb {
        background: linear-gradient(90deg, #ff6740, #ff8c42);
        border-radius: 4px;
    }

    .reading-mode-horizontal .manga-pages::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(90deg, #ff8c42, #ff6740);
    }

    /* Prevent vertical scrolling in horizontal mode */
    .reading-mode-horizontal {
        /* overflow: hidden; */
        min-height: 100vh;
    }

    .reading-mode-horizontal body {
        overflow: hidden;
    }

    .reading-mode-horizontal .main-content {
        overflow: hidden;
        height: 100vh;
    }

    /* Image Size Styles */
    .image-size-small .page-container {
        max-width: 600px;
    }

    .image-size-medium .page-container {
        max-width: 800px;
    }

    .image-size-large .page-container {
        max-width: 1000px;
    }

    /* Auto Scroll Indicator */
    .auto-scroll-indicator {
        position: fixed;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 10px 20px;
        border-radius: 25px;
        z-index: 1000;
        display: none;
    }

    .auto-scroll-indicator.show {
        display: block;
        animation: slideUp 0.3s ease;
    }

    @keyframes slideUp {
        from {
            opacity: 0;
            transform: translateX(-50%) translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateX(-50%) translateY(0);
        }
    }

    /* Progress Bar */
    .progress-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 3px;
        background: rgba(255, 255, 255, 0.1);
        z-index: 1050;
        display: block;
    }

    /* .progress-bar {
        
    } */

    @media (max-width: 768px) {
        .floating-nav {
            right: 10px;
        }

        .floating-nav .btn {
            width: 40px;
            height: 40px;
        }

        .modal-dialog {
            margin: 0.5rem;
        }
    }

    /* Page Navigation Styles */
    #pageNavigation .btn {
        border-radius: 20px;
        font-size: 0.8rem;
        padding: 0.375rem 0.75rem;
        transition: all 0.3s ease;
    }

    #pageNavigation .btn:hover:not(:disabled) {
        background: #ff6740;
        border-color: #ff6740;
        transform: translateY(-1px);
    }

    #pageNavigation .btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    #pageInfo {
        background: rgba(255, 103, 64, 0.1);
        border-color: rgba(255, 103, 64, 0.3);
        color: #ff6740;
        font-weight: 500;
    }

    /* Active page indicator */
    .reading-mode-horizontal .manga-page.active {
        position: relative;
    }

    .reading-mode-horizontal .manga-page.active::before {
        content: '';
        position: absolute;
        top: -5px;
        left: 50%;
        transform: translateX(-50%);
        width: 20px;
        height: 4px;
        background: linear-gradient(90deg, #ff6740, #ff8c42);
        border-radius: 2px;
        z-index: 10;
    }
</style>
<!-- Header -->
<header class="navbar navbar-dark bg-dark fixed-top border-bottom border-secondary">
    <div class="container-fluid d-flex justify-content-between align-items-center">
        <div class="d-flex align-items-center">
            <a class="navbar-brand" href="/">
                <img src="/public/frontend/images/logo.svg" alt="MangaBall" height="40">
            </a>
            <div class="ms-4 d-none d-md-block">
                <h6 class="mb-0 text-white">Moto Kouzou Kaiseki Kenkyuusho no Isekai Boukentan</h6>
                <small class="text-secondary" id="chapterInfo"></small>
            </div>
            <h1 class="sr-only" style="display: none;">Moto Kouzou Kaiseki Kenkyuusho no Isekai Boukentan Vol. 7 Ch. 37  Online Kostenlos - Mehreren Sprachen</h1>
            <h2 class="sr-only" style="display: none;">Moto Kouzou Kaiseki Kenkyuusho no Isekai Boukentan Vol. 7 Ch. 37  Online Kostenlos - Mehreren Sprachen</h2>
        </div>

        <div class="d-flex align-items-center gap-2  flex-wrap">
            <div class="btn-group me-3">
                <button class="btn btn-outline-light btn-sm" id="shareBtn">
                    <i class="fas fa-share"></i>
                </button>
                <button class="btn btn-outline-light btn-sm" onclick="showComments(this, '685359506c8186610a03d5c4')">
                    <i class="fas fa-comment"></i>
                </button>
            </div>
            <div class="btn-group me-3" role="group">
                <button class="btn btn-outline-light btn-sm" id="prevChapterBtn" disabled="">
                    <i class="fas fa-chevron-left"></i>
                </button>
                <button class="btn btn-outline-light btn-sm" id="chapterSelectBtn">
                    <i class="fas fa-list"></i>
                </button>
                <button class="btn btn-outline-light btn-sm" id="nextChapterBtn" disabled="">
                    <i class="fas fa-chevron-right"></i>
                </button>
            </div>
            <!-- Page Navigation (for horizontal mode) -->
            <div class="btn-group me-3" role="group" id="pageNavigation" style="">
                <span class="btn btn-outline-light btn-sm disabled" id="pageInfo">
                    <i class="fas fa-file-alt me-1"></i><span id="currentPageNum">1</span>/<span id="totalPages">33</span>
                </span>
            </div>

            <button class="btn btn-outline-light btn-sm me-2" id="downloadChapterBtn" title="Download for offline reading">
                <i class="fas fa-download"></i>
            </button>

            <button class="btn btn-outline-light btn-sm me-2" id="offlineLibraryBtn" title="View offline library">
                <i class="fas fa-folder-open"></i>
            </button>

            <button class="btn btn-outline-light btn-sm me-2" id="nightModeBtn">
                <i class="fas fa-moon"></i>
            </button>

            <button class="btn btn-outline-light btn-sm me-2" id="settingsBtn">
                <i class="fas fa-cog"></i>
            </button>

            <button class="btn btn-outline-light btn-sm" id="backToDetailBtn" title="Detail title">
                <i class="fas fa-circle-info"></i>
            </button>
        </div>
    </div>
</header>
<style>
    .reader-container .container-fluid {
        max-width: 100%;
        margin: 0 auto;
        margin-top: 20px;
    }

    /* Tablet down */
    @media (max-width: 991.98px) {
        .reader-container .container-fluid {
            margin-top: 20px;
        }
    }

    /* Mobile down */
    @media (max-width: 575.98px) {
        .reader-container .container-fluid {
            margin-top: 60px;
        }
    }

    .chapter-meta-info {
        display: inline-flex;
        align-items: center;
        padding: 6px 12px;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 16px;
        border: 1px solid rgba(255, 255, 255, 0.1);
        transition: all 0.2s ease;
        height: 32px;
        min-height: 32px;
        line-height: 1;
    }

    .chapter-meta-info:hover {
        background: rgba(255, 255, 255, 0.08);
        border-color: rgba(255, 255, 255, 0.15);
    }

    .chapter-meta-info i {
        font-size: 0.875rem;
        line-height: 1;
    }

    .chapter-meta-info span {
        font-size: 0.875rem;
        font-weight: 500;
        line-height: 1;
    }

    /* Ensure badges have consistent height */
    .badge {
        height: 32px;
        display: inline-flex;
        align-items: center;
        padding: 6px 12px;
        line-height: 1;
    }
</style>

<!-- Reader Container -->
<div class="reader-container pt-5 mt-5">
    <div class="container-fluid ">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-10 col-xl-8">
                <!-- Chapter Info -->
                <div class="chapter-info mb-4 text-center">
                    <h4 class="text-white mb-2" id="chapterTitle">Vol. 7 Ch. 37 </h4>
                    <div class="d-flex justify-content-center align-items-center gap-3 flex-wrap">
                        <span class="badge bg-primary" id="translationGroup"><img src="/storage/groups/icons/raikou.png" alt="Raikou" style="width: 16px; height: 16px; object-fit: contain;"> <span class="ms-2">  Raikou</span></span>
                        <span class="badge bg-secondary" id="languageBadge">Russian</span>
                        <span class="chapter-meta-info">
                            <i class="fas fa-clock me-1 text-muted"></i>
                            <span id="updateTime" class="text-muted small">2025-10-17 20:58:04</span>
                        </span>
                        <span class="chapter-meta-info">
                            <i class="fas fa-eye me-1 text-muted"></i>
                            <span id="viewCount" class="text-muted small">10</span>
                        </span>
                    </div>
                </div>
                <!-- Chapter Navigation -->
                <div class="chapter-navigation mt-5 mb-4">
                    <div class="row align-items-center" id="chapterNavigationTop">
                        <div class="col-6">
                            <button class="btn btn-outline-primary w-100 prevChapterBtnBottom" disabled="">
                                <i class="fas fa-chevron-left me-2"></i>Previous
                            </button>
                        </div>
                        <div class="col-6">
                            <button class="btn btn-primary w-100 nextChapterBtnBottom" disabled="">
                                Next<i class="fas fa-chevron-right ms-2"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <!-- Manga Pages -->
                <div class="manga-pages image-size-medium" id="mangaPages">
                    <div class="manga-page w-100" data-page="1">
                        <div class="page-container w-100">
                            <img src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/001.jpg" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/001.jpg" alt="Trang 1" class="manga-image w-100 img-fluid lazy-loaded" style="transition: opacity 0.3s; opacity: 1;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">1</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="2">
                        <div class="page-container w-100">
                            <img src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/002.jpg" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/002.jpg" alt="Trang 2" class="manga-image w-100 img-fluid lazy-loaded" style="transition: opacity 0.3s; opacity: 1;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">2</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="3">
                        <div class="page-container w-100">
                            <img src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/003.jpg" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/003.jpg" alt="Trang 3" class="manga-image w-100 img-fluid lazy-loaded" style="transition: opacity 0.3s; opacity: 1;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">3</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="4">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%204...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/004.jpg" alt="Trang 4" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">4</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="5">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%205...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/005.jpg" alt="Trang 5" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">5</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="6">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%206...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/006.jpg" alt="Trang 6" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">6</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="7">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%207...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/007.jpg" alt="Trang 7" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">7</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="8">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%208...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/008.jpg" alt="Trang 8" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">8</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="9">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%209...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/009.jpg" alt="Trang 9" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">9</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="10">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%2010...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/010.jpg" alt="Trang 10" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">10</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="11">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%2011...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/011.jpg" alt="Trang 11" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">11</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="12">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%2012...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/012.jpg" alt="Trang 12" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">12</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="13">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%2013...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/013.jpg" alt="Trang 13" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">13</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="14">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%2014...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/014.jpg" alt="Trang 14" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">14</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="15">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%2015...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/015.jpg" alt="Trang 15" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">15</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="16">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%2016...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/016.jpg" alt="Trang 16" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">16</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="17">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%2017...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/017.jpg" alt="Trang 17" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">17</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="18">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%2018...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/018.jpg" alt="Trang 18" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">18</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="19">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%2019...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/019.jpg" alt="Trang 19" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">19</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="20">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%2020...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/020.jpg" alt="Trang 20" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">20</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="21">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%2021...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/021.jpg" alt="Trang 21" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">21</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="22">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%2022...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/022.jpg" alt="Trang 22" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">22</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="23">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%2023...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/023.jpg" alt="Trang 23" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">23</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="24">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%2024...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/024.jpg" alt="Trang 24" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">24</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="25">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%2025...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/025.jpg" alt="Trang 25" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">25</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="26">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%2026...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/026.jpg" alt="Trang 26" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">26</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="27">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%2027...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/027.jpg" alt="Trang 27" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">27</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="28">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%2028...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/028.jpg" alt="Trang 28" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">28</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="29">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%2029...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/029.jpg" alt="Trang 29" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">29</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="30">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%2030...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/030.jpg" alt="Trang 30" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">30</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="31">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%2031...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/031.jpg" alt="Trang 31" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">31</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="32">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%2032...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/032.jpg" alt="Trang 32" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">32</div>
                            </div>
                        </div>
                    </div>
                
                    <div class="manga-page w-100" data-page="33">
                        <div class="page-container w-100">
                            <img src="data:image/svg+xml;charset=utf-8,%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22100%25%22%20height%3D%22600%22%20viewBox%3D%220%200%20400%20600%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22%23f8f9fa%22%2F%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Ctext%20x%3D%2250%25%22%20y%3D%2250%25%22%20text-anchor%3D%22middle%22%20dy%3D%22.3em%22%20fill%3D%22%236c757d%22%20font-family%3D%22Arial%22%20font-size%3D%2216%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Loading%20page%2033...%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Ftext%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20" data-src="https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/033.jpg" alt="Trang 33" class="manga-image w-100 img-fluid lazy-load" style="transition: opacity 0.3s ease;" loading="lazy">
                            <div class="page-overlay">
                                <div class="page-number">33</div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Chapter Navigation -->
                <div class="chapter-navigation mt-5 mb-4">
                    <div class="row align-items-center" id="chapterNavigationBottom">
                        <div class="col-6">
                            <button class="btn btn-outline-primary w-100 prevChapterBtnBottom" disabled="">
                                <i class="fas fa-chevron-left me-2"></i>Previous
                            </button>
                        </div>
                        <div class="col-6">
                            <button class="btn btn-primary w-100 nextChapterBtnBottom" disabled="">
                                Next<i class="fas fa-chevron-right ms-2"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div><!-- Chapter Select Modal -->
<!-- <div class="modal fade" id="chapterSelectModal" tabindex="-1" aria-labelledby="chapterSelectModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-fullscreen">
        <div class="modal-content bg-dark text-white">
            <div class="modal-header border-secondary">
                <h5 class="modal-title" id="chapterSelectModalLabel">
                    <i class="fas fa-list me-2 text-primary"></i>Choose Chapter
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body d-flex flex-column">
                <div id="chaptersList" class="flex-grow-1" role="list" aria-label="Chapter list">
                </div>
                <div id="chaptersPagination" class="d-flex justify-content-center flex-shrink-0 mt-3" role="navigation" aria-label="Chapter pagination">
                </div>
            </div>
        </div>
    </div>
</div> -->

<!-- Settings Modal -->
<div class="modal fade" id="settingsModal" tabindex="-1" aria-labelledby="settingsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content bg-dark text-white">
            <div class="modal-header border-secondary">
                <h5 class="modal-title" id="settingsModalLabel">
                    <i class="fas fa-cog me-2 text-primary"></i>Reading Settings
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <!-- Reading Mode -->
                    <div class="col-md-6 mb-4">
                        <h6 class="text-primary mb-3">
                            <i class="fas fa-columns me-2"></i>Reading Mode
                        </h6>
                        <div class="d-grid gap-2" role="group" aria-label="Reading mode selection">
                            <button class="btn btn-outline-light reading-mode-btn active" data-mode="vertical" type="button" title="Read pages vertically, scroll down to see next page">
                                <i class="fas fa-arrows-alt-v me-2"></i>Vertical
                            </button>
                            <button class="btn btn-outline-light reading-mode-btn" data-mode="horizontal" type="button" title="Read pages horizontally, swipe or use arrow keys to navigate">
                                <i class="fas fa-arrows-alt-h me-2"></i>Horizontal
                            </button>
                        </div>
                    </div>

                    <!-- Image Size -->
                    <div class="col-md-6 mb-4">
                        <h6 class="text-primary mb-3">
                            <i class="fas fa-expand-arrows-alt me-2"></i>Image Size
                        </h6>
                        <div class="d-grid gap-2" role="group" aria-label="Image size selection">
                            <button class="btn btn-outline-light image-size-btn" data-size="small" type="button" title="Smaller images, faster loading">
                                <i class="fas fa-compress me-2"></i>Small
                            </button>
                            <button class="btn btn-outline-light image-size-btn active" data-size="medium" type="button" title="Balanced size and quality">
                                <i class="fas fa-square me-2"></i>Medium
                            </button>
                            <button class="btn btn-outline-light image-size-btn" data-size="large" type="button" title="Larger images, better quality">
                                <i class="fas fa-expand me-2"></i>Large
                            </button>
                        </div>
                    </div>

                    <!-- Reading Direction -->
                    <div class="col-md-6 mb-4">
                        <h6 class="text-primary mb-3">
                            <i class="fas fa-language me-2"></i>Reading Direction
                        </h6>
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="isLtrSwitch" aria-describedby="isLtrHelp">
                            <label class="form-check-label" for="isLtrSwitch">
                                <i class="fas fa-arrow-right me-1"></i>Left to right
                            </label>
                        </div>
                        <div class="mt-2" id="isLtrHelp">
                            <small class="text-secondary">
                                <i class="fas fa-info-circle me-2"></i>
                                <span>
                                    Enable left-to-right reading direction. Only applies to horizontal reading mode.
                                </span>
                            </small>
                        </div>
                    </div>

                    <!-- Auto Scroll -->
                    <div class="col-md-6 mb-4">
                        <h6 class="text-primary mb-3">
                            <i class="fas fa-scroll me-2"></i>Auto Scroll
                        </h6>
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="autoScrollSwitch" aria-describedby="autoScrollHelp">
                            <label class="form-check-label" for="autoScrollSwitch">
                                <i class="fas fa-play me-1"></i>Auto Scroll when reading
                            </label>
                        </div>
                        <div class="mt-2" id="autoScrollHelp">
                            <label class="form-label text-secondary">
                                <i class="fas fa-tachometer-alt me-1"></i>Scroll Speed
                            </label>
                            <input type="range" class="form-range" id="scrollSpeedRange" min="1" max="5" value="5" aria-label="Scroll speed">
                            <div class="d-flex justify-content-between">
                                <small class="text-secondary">
                                    <i class="fas fa-turtle me-1"></i>Slow
                                </small>
                                <small class="text-secondary">
                                    <i class="fas fa-rabbit me-1"></i>Fast
                                </small>
                            </div>
                            <small class="text-muted d-block mt-1">
                                <i class="fas fa-lock me-1"></i>Feature coming soon
                            </small>
                        </div>
                    </div>

                    <!-- Preload Settings -->
                    <div class="col-md-6 mb-4">
                        <h6 class="text-primary mb-3">
                            <i class="fas fa-download me-2"></i>Preload Settings
                        </h6>
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="preloadSwitch" aria-describedby="preloadHelp">
                            <label class="form-check-label" for="preloadSwitch">
                                <i class="fas fa-forward me-1"></i>Preload Images
                            </label>
                        </div>
                        <div class="mt-2" id="preloadHelp">
                            <small class="text-secondary">
                                <i class="fas fa-info-circle me-1"></i>
                                <span>
                                    Load 3 images at once when reading. First 3 images load immediately, then load next 3 when reaching 2nd image of current group.
                                </span>
                            </small>
                        </div>
                        <div class="form-check form-switch mt-2">
                            <input class="form-check-input" type="checkbox" id="preloadNextChapterSwitch" disabled="" aria-describedby="preloadNextChapterHelp">
                            <label class="form-check-label" for="preloadNextChapterSwitch">
                                <i class="fas fa-step-forward me-1"></i>Preload next chapter
                            </label>
                        </div>
                        <div class="mt-2" id="preloadNextChapterHelp">
                            <small class="text-muted">
                                <i class="fas fa-lock me-1"></i>Feature coming soon
                            </small>
                        </div>
                    </div>

                    <!-- Display Settings -->
                    <div class="col-md-6 mb-4">
                        <h6 class="text-primary mb-3">
                            <i class="fas fa-eye me-2"></i>Display Options
                        </h6>
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="showPageNumbersSwitch" checked="" aria-describedby="displayHelp">
                            <label class="form-check-label" for="showPageNumbersSwitch">
                                <i class="fas fa-hashtag me-1"></i>Show page numbers
                            </label>
                        </div>
                        <div class="form-check form-switch mt-2">
                            <input class="form-check-input" type="checkbox" id="showProgressBarSwitch" checked="" aria-describedby="displayHelp">
                            <label class="form-check-label" for="showProgressBarSwitch">
                                <i class="fas fa-chart-line me-1"></i>Show progress bar
                            </label>
                        </div>
                        <div class="form-check form-switch mt-2">
                            <input class="form-check-input" type="checkbox" id="showFloatingNavSwitch" checked="" aria-describedby="displayHelp">
                            <label class="form-check-label" for="showFloatingNavSwitch">
                                <i class="fas fa-compass me-1"></i>Show floating navigation
                            </label>
                        </div>
                        <div class="mt-2" id="displayHelp">
                            <small class="text-secondary">
                                <i class="fas fa-info-circle me-1"></i>Customize your reading interface
                            </small>
                        </div>
                    </div>

                    <!-- Keyboard Shortcuts -->
                    <div class="col-md-6 mb-4">
                        <h6 class="text-primary mb-3">
                            <i class="fas fa-keyboard me-2"></i>Keyboard Shortcuts
                        </h6>
                        <div class="shortcuts-list" role="list" aria-label="Available keyboard shortcuts">
                            <div class="shortcut-item d-flex justify-content-between align-items-center mb-2" role="listitem">
                                <span class="text-secondary">
                                    <i class="fas fa-arrow-left me-1"></i>Navigate Pages
                                </span>
                                <kbd class="bg-secondary">
                                    <i class="fas fa-arrow-left me-1"></i>
                                    <i class="fas fa-arrow-right"></i>
                                </kbd>
                            </div>
                            <div class="shortcut-item d-flex justify-content-between align-items-center mb-2" role="listitem">
                                <span class="text-secondary">
                                    <i class="fas fa-moon me-1"></i>Night Mode
                                </span>
                                <kbd class="bg-secondary">N</kbd>
                            </div>
                            <div class="shortcut-item d-flex justify-content-between align-items-center mb-2" role="listitem">
                                <span class="text-secondary">
                                    <i class="fas fa-search-plus me-1"></i>Zoom In/Out
                                </span>
                                <kbd class="bg-secondary">
                                    <i class="fas fa-plus me-1"></i>
                                    <i class="fas fa-minus"></i>
                                </kbd>
                            </div>
                            <div class="shortcut-item d-flex justify-content-between align-items-center mb-2" role="listitem">
                                <span class="text-secondary">
                                    <i class="fas fa-undo me-1"></i>Reset Zoom
                                </span>
                                <kbd class="bg-secondary">0</kbd>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="row mt-4">
                    <div class="col-12">
                        <div class="d-flex justify-content-between gap-2">
                            <button class="btn btn-outline-secondary flex-grow-1" id="resetSettingsBtn" type="button" title="Reset all settings to default values">
                                <i class="fas fa-undo me-2"></i>Reset
                            </button>
                            <div class="d-flex justify-content-end flex-column gap-2">
                                <button class="btn btn-outline-light me-2" data-bs-dismiss="modal" type="button" title="Close without saving changes">
                                    <i class="fas fa-times me-2"></i>Cancel
                                </button>
                                <button class="btn btn-primary" id="saveSettingsBtn" type="button" title="Save all settings">
                                    <i class="fas fa-save me-2"></i>Save
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Floating Navigation -->
<div class="floating-nav" id="floatingNav" style="display: none;" role="navigation" aria-label="Page navigation">
    <button class="btn btn-primary rounded-circle" id="floatingPrevBtn" type="button" title="Previous page" aria-label="Go to previous page">
        <i class="fas fa-chevron-left"></i>
    </button>
    <button class="btn btn-primary rounded-circle" id="floatingNextBtn" type="button" title="Next page" aria-label="Go to next page">
        <i class="fas fa-chevron-right"></i>
    </button>
</div>

<!-- Auto Scroll Toggle Button -->
<div class="auto-scroll-container" id="autoScrollContainer" style="">
    <button class="btn btn-success rounded-circle auto-scroll-btn" id="autoScrollToggleBtn" type="button" title="Bật tự động cuộn" aria-label="Toggle auto scroll">
        <i class="fas fa-play" id="autoScrollIcon"></i>
    </button>
</div>

<!-- Progress Bar -->
<div class="progress-container" id="progressContainer" role="progressbar" aria-label="Reading progress" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
    <div class="progress-bar" id="progressBar" style="width: 3.0303%;"></div>
</div>

<style>
    /* Auto Scroll Container */
    .auto-scroll-container {
        position: fixed;
        top: 120px;
        right: 20px;
        z-index: 1050;
    }

    /* Auto Scroll Toggle Button Styles */
    .auto-scroll-btn {
        width: 50px;
        height: 50px;
        position: relative;
        overflow: hidden;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        border: none;
    }

    .auto-scroll-btn:hover {
        transform: scale(1.1);
        box-shadow: 0 6px 20px rgba(40, 167, 69, 0.4);
    }

    .auto-scroll-btn.btn-success {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
    }

    .auto-scroll-btn.btn-warning {
        background: linear-gradient(135deg, #ffc107 0%, #fd7e14 100%);
    }

    #autoScrollIcon {
        transition: transform 0.3s ease;
        font-size: 18px;
    }

    .auto-scroll-btn:hover #autoScrollIcon {
        transform: scale(1.1);
    }

    /* Pulse animation when auto scroll is active */
    .auto-scroll-btn.auto-scroll-active {
        animation: pulse-green 2s infinite;
    }

    @keyframes pulse-green {
        0% {
            box-shadow: 0 0 0 0 rgba(40, 167, 69, 0.7);
        }

        70% {
            box-shadow: 0 0 0 15px rgba(40, 167, 69, 0);
        }

        100% {
            box-shadow: 0 0 0 0 rgba(40, 167, 69, 0);
        }
    }

    /* Mobile responsive */
    @media (max-width: 768px) {
        .auto-scroll-container {
            top: 15px;
            right: 15px;
        }

        .auto-scroll-btn {
            width: 45px;
            height: 45px;
        }

        #autoScrollIcon {
            font-size: 16px;
        }
    }

    @media (max-width: 480px) {
        .auto-scroll-container {
            top: 10px;
            right: 10px;
        }

        .auto-scroll-btn {
            width: 40px;
            height: 40px;
        }

        #autoScrollIcon {
            font-size: 14px;
        }
    }

    /* Dark theme adjustments */
    .theme-dark .auto-scroll-container {
        /* Dark theme specific styles if needed */
    }

    /* Smooth auto scroll styles */
    html {
        scroll-behavior: smooth;
    }

    /* When auto scrolling is active, use immediate scroll for programmatic scrolling */
    html.auto-scrolling {
        scroll-behavior: auto;
    }

    /* Smooth transition for auto scroll */
    body {
        scroll-behavior: smooth;
        transition: none;
    }
</style><script>
    // Constants - Cache frequently used values
    const userId = ``;
    const titleId = `68526f4d6908629fc2c8226e`;
    const chapterId = `685359506c8186610a03d5c4`;
    const chapterNumber = `37`;
    const chapterVolume = `7`;
    const chapterLanguage = `ru`;
    const chapterImages = JSON.parse(`["https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/001.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/002.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/003.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/004.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/005.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/006.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/007.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/008.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/009.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/010.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/011.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/012.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/013.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/014.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/015.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/016.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/017.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/018.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/019.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/020.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/021.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/022.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/023.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/024.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/025.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/026.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/027.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/028.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/029.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/030.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/031.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/032.jpg","https://bulbasaur.poke-black-and-white.net/storage/68526f4d6908629fc2c8226e/7/37/mangadex/ru/033.jpg"]`);

    // API Routes - Store in window object for global access
    window.apiRoutes = {
        loadReplies: '/api/v1/comment/load-replies/'
    };

    // User settings with optimized parsing
    const userSettings = {};
    const readingMode = userSettings.reading_mode || 'vertical';
    const imageSize = userSettings.image_size || 'medium';
    const autoScroll = userSettings.auto_scroll !== 0;
    const scrollSpeed = parseInt(userSettings.scroll_speed) || 5;
    const preloadImages = userSettings.preload_images == 1;
    const preloadNextChapter = userSettings.preload_next_chapter !== 0;
    const showPageNumbers = userSettings.show_page_numbers !== 0;
    const showProgressBar = userSettings.show_progress_bar !== 0;
    const showFloatingNav = userSettings.show_floating_nav !== 0;
    const isLtr = userSettings.is_ltr !== 0;

    // Global state variables
    let ALL_CHAPTERS = [];
    let FILTERED_CHAPTERS = [];
    let CURRENT_FILTERS = {
        sort: 'newest'
    };
    const PAGE_SIZE = 20;
    let PAGE_NUMBER = 1;
    let PAGE_TOTAL = 0;
    let TOTAL_CHAPTERS = 0;
    let TOTAL_TRANSLATIONS = 0;
    let SEARCH_CHAPTER_NUMBER = '';
    // Reader State - optimized object initialization
    let readerState = {
        currentVolume: chapterVolume,
        currentChapter: chapterNumber,
        currentChapterId: chapterId,
        currentLanguage: chapterLanguage,
        currentPage: 1,
        zoomLevel: 1,
        nightMode: false,
        // Settings
        readingMode,
        imageSize,
        autoScroll,
        scrollSpeed,
        preloadImages,
        preloadNextChapter,
        showPageNumbers,
        showProgressBar,
        showFloatingNav,
        isLtr
    };
    // Cache DOM elements for better performance
    const $document = $(document);
    const $window = $(window);
    const $body = $('body');

    // Initialize reader
    $(document).ready(async () => {
        // 1. Fetch & Render initial data
        await getChapterListingByTitleId();
        generateModalChapterNoVolume();

        // 2. Apply reader state and initial settings
        applyReadingMode();
        applyImageSize();
        toggleProgressBar();
        togglePageNumbers();
        initButton();

        // 3. Event listeners - optimized with event delegation
        setupEventListeners();

        // Update view
        setTimeout(updateView, 3000);
    });

    // Optimized event listeners setup
    function setupEventListeners() {
        // Save settings
        $document.on('click', '#saveSettingsBtn', () => {
            saveSettings();
            $('#settingsModal').modal('hide');
            applyReadingMode();
        });

        // Change progress bar state
        $document.on('change', '#showProgressBarSwitch', function() {
            readerState.showProgressBar = this.checked;
            toggleProgressBar();
        });

        // Update progress bar when scroll - throttled for better performance
        let scrollTimeout;

        $window.on('scroll', () => {
            if (scrollTimeout) clearTimeout(scrollTimeout);
            scrollTimeout = setTimeout(updateProgress, 16); // ~60fps
        });

        // Stop auto scroll on user interactions
        $document.on('touchstart touchend keydown', pauseAutoScrollOnInteraction);

        // Change preload images state
        $document.on('change', '#preloadSwitch', function() {
            readerState.preloadImages = this.checked;
            console.log('preloadImages:', readerState.preloadImages);
            initLazyLoading();
        });

        // Change page number state
        $document.on('change', '#showPageNumbersSwitch', function() {
            readerState.showPageNumbers = this.checked;
            togglePageNumbers();
        });

        // Change floating nav state
        $document.on('change', '#showFloatingNavSwitch', function() {
            readerState.showFloatingNav = this.checked;
            applyReadingMode();
        });

        // Change auto scroll state
        $document.on('change', '#autoScrollSwitch', function() {
            readerState.autoScroll = this.checked;

            // Show/hide auto scroll button based on setting
            if (readerState.readingMode === 'vertical') {
                if (this.checked) {
                    $('#autoScrollContainer').show();
                    updateAutoScrollButton();
                    setTimeout(startAutoScroll, 500);
                } else {
                    $('#autoScrollContainer').hide();
                    stopAutoScroll();
                }
            }
        });

        // Update scroll speed when range changes
        $document.on('input change', '#scrollSpeedRange', function() {
            const newSpeed = parseInt(this.value) || 5;
            readerState.scrollSpeed = newSpeed;

            console.log('Scroll speed updated to:', newSpeed);

            // If auto scroll is currently running, restart it with new speed
            if (isAutoScrolling && readerState.readingMode === 'vertical') {
                stopAutoScroll();
                setTimeout(() => {
                    startAutoScroll();
                }, 100);
            }
        });

        // Keyboard shortcut left/right if reading horizontal
        if (readerState.readingMode === 'horizontal') {
            $document.on('keydown', (e) => {
                if ($(e.target).is('input, textarea')) return;
                if (e.key === 'ArrowRight') {
                    e.preventDefault();
                    navigatePageImage(1);
                } else if (e.key === 'ArrowLeft') {
                    e.preventDefault();
                    navigatePageImage(-1);
                }
            });
        }

        // Back to detail
        $('#backToDetailBtn').on('click', () => {
            window.location.href = '/title-detail/moto-kouzou-kaiseki-kenkyuusho-no-isekai-boukentan-68526f4d6908629fc2c8226e/';
        });

        // Change image size
        $document.on('click', '.image-size-btn', function() {
            $('.image-size-btn').removeClass('active');
            $(this).addClass('active');
            readerState.imageSize = $(this).data('size');
            applyImageSize();
        });

        // Update reading direction (LTR)
        $document.on('change', '#isLtrSwitch', function() {
            readerState.isLtr = this.checked;
            applyReadingMode();
        });

        // Reset settings
        $document.on('click', '#resetSettingsBtn', () => {
            // Reset settings
            Object.assign(readerState, {
                readingMode: 'vertical',
                imageSize: 'medium',
                autoScroll: false,
                scrollSpeed: 5,
                preloadImages: true,
                preloadNextChapter: true,
                showPageNumbers: false,
                showProgressBar: false,
                showFloatingNav: false,
                isLtr: true
            });
            // Save settings
            saveSettings();
            // Reload page
            window.location.reload();
        });
    }

    // Enhanced touch handling for horizontal reading mode
    let touchStartTime = 0;
    let touchStartX = 0;
    let touchStartY = 0;
    let lastTapTime = 0;
    let tapCount = 0;

    $document.on('touchstart', '.manga-page', function(e) {
        if (readerState.readingMode !== 'horizontal') return;

        if (e.touches.length > 1) {
            return;
        }

        touchStartTime = Date.now();
        touchStartX = e.touches[0].clientX;
        touchStartY = e.touches[0].clientY;

        // Handle double tap
        const currentTime = Date.now();
        const timeDiff = currentTime - lastTapTime;

        if (timeDiff < 300 && timeDiff > 0) {
            tapCount++;
        } else {
            tapCount = 1;
        }

        lastTapTime = currentTime;

        // Double tap to change page
        if (tapCount === 2) {
            const halfWidth = this.offsetWidth / 2;
            const direction = touchStartX > halfWidth ? 1 : -1;
            setTimeout(() => {
                navigatePageImage(readerState.isLtr ? direction : -direction);
            }, 0);
            tapCount = 0; // Reset tap count
        }
    });

    $document.on('touchend', '.manga-page', function(e) {
        if (readerState.readingMode !== 'horizontal') return;

        if (e.changedTouches.length > 1) return;

        const touchEndTime = Date.now();
        const touchEndX = e.changedTouches[0].clientX;
        const touchEndY = e.changedTouches[0].clientY;

        const timeDiff = touchEndTime - touchStartTime;
        const deltaX = touchEndX - touchStartX;
        const deltaY = touchEndY - touchStartY;

        // Only handle swipe if it's a quick gesture (less than 300ms)
        // and horizontal movement is significantly greater than vertical
        if (timeDiff < 300 && Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 50) {
            const direction = deltaX > 0 ? -1 : 1; // Swipe right = previous page, swipe left = next page
            setTimeout(() => {
                navigatePageImage(readerState.isLtr ? direction : -direction);
            }, 0);
        }
    });

    // Init button 
    async function initButton() {
        // Init button
        $('#floatingPrevBtn').off('click').click(() => navigatePageImage(-1));
        $('#floatingNextBtn').off('click').click(() => navigatePageImage(1));

        // Auto scroll toggle button
        $('#autoScrollToggleBtn').off('click').click(() => toggleAutoScroll());
        // Show chapter select modal
        $('#chapterSelectBtn').off('click').click(() => {
            // Auto navigate to current chapter page when opening modal
            const currentChapterPage = findCurrentChapterPage(chapterNumber);
            PAGE_NUMBER = currentChapterPage;
            generateModalChapterNoVolume();
            $('#chapterSelectModal').modal('show');
            
            // Scroll to current active chapter after modal is shown
            $('#chapterSelectModal').one('shown.bs.modal', function() {
                const $currentChapter = $('.chapter-block.currentActive');
                if ($currentChapter.length > 0) {
                    const $modalBody = $('#chapterSelectModal .modal-body');
                    const modalBodyTop = $modalBody.scrollTop();
                    const currentChapterTop = $currentChapter.position().top;
                    const modalBodyHeight = $modalBody.height();
                    const scrollPosition = modalBodyTop + currentChapterTop - (modalBodyHeight / 2) + ($currentChapter.height() / 2);
                    
                    $modalBody.animate({
                        scrollTop: scrollPosition
                    }, 300);
                }
            });
        });
        // Show settings button
        $('#settingsBtn').off('click').click(() => openSettingsModal());
        // Night mode
        $('#nightModeBtn').click(() => toggleNightMode());
        // Sort chapter select modal
        $('#sortToggleBtn').off('click').click(() => toggleSortChapterModal());
        // Setup event listeners for modal
        setupEventListenersModal();

    }

    // Get chapter data from database - optimized AJAX call
    async function getChapterListingByTitleId() {
        const url = '/api/v1/chapter/chapter-listing-by-title-id/';
        const csrfToken = $('meta[name="csrf-token"]').attr('content');

        showLoading();

        try {
            const response = await $.ajax({
                url,
                type: 'POST',
                headers: {
                    'X-CSRF-TOKEN': csrfToken
                },
                data: {
                    title_id: titleId,
                    lang: chapterLanguage
                }
            });

            if (response.code === 200 && response.ALL_CHAPTERS?.length > 0) {
                ALL_CHAPTERS = response.ALL_CHAPTERS;
                TOTAL_TRANSLATIONS = response.TOTAL_TRANSLATIONS;
                TOTAL_CHAPTERS = ALL_CHAPTERS.length;
                PAGE_TOTAL = Math.ceil(TOTAL_CHAPTERS / PAGE_SIZE);
            }
        } catch (error) {
            console.error('Error fetching chapters:', error);
        } finally {
            hideLoading();
        }
    }

    async function handleSearchChapterModalChange(value) {
        SEARCH_CHAPTER_NUMBER = value;
        PAGE_NUMBER = 1; // Reset to page 1 when searching
        generateModalChapterNoVolume();
    }

    function toggleSortChapterModal() {
        CURRENT_FILTERS.sort = CURRENT_FILTERS.sort === 'newest' ? 'oldest' : 'newest';
        // find current chapter page
        PAGE_NUMBER = findCurrentChapterPage(chapterNumber);
        generateModalChapterNoVolume();
        // Scroll to current active chapter after modal is shown
        $('#chapterSelectModal').one('shown.bs.modal', function() {
            const $currentChapter = $('.chapter-block.currentActive');
            if ($currentChapter.length > 0) {
                const $modalBody = $('#chapterSelectModal .modal-body');
                const modalBodyTop = $modalBody.scrollTop();
                const currentChapterTop = $currentChapter.position().top;
                const modalBodyHeight = $modalBody.height();
                const scrollPosition = modalBodyTop + currentChapterTop - (modalBodyHeight / 2) + ($currentChapter.height() / 2);
                
                $modalBody.animate({
                    scrollTop: scrollPosition
                }, 300);
            }
        });
    }

    function updateSortToggleDisplay() {
        const sortToggleBtn = $('#sortToggleBtn');
        const sortToggleText = $('#sortToggleText');
        const sortIcon = sortToggleBtn.find('i');
        
        if (CURRENT_FILTERS.sort === 'newest') {
            sortToggleText.text('Newest');
            sortIcon.removeClass('fa-sort-amount-up').addClass('fa-sort-amount-down');
        } else {
            sortToggleText.text('Oldest');
            sortIcon.removeClass('fa-sort-amount-down').addClass('fa-sort-amount-up');
        }
    }

    function findCurrentChapterPage(chapterNumberFloat) {
        // Apply same filter and sort logic as filterAndSortChapters but without pagination
        let filteredChapters = ALL_CHAPTERS;
        
        // Filter by chapter number if search is active
        if (SEARCH_CHAPTER_NUMBER && typeof SEARCH_CHAPTER_NUMBER === 'string' && SEARCH_CHAPTER_NUMBER.trim() !== '') {
            const searchNumber = parseFloat(SEARCH_CHAPTER_NUMBER);
            if (!isNaN(searchNumber)) {
                filteredChapters = filteredChapters.filter(chapter => {
                    return chapter.number_float === searchNumber || 
                           chapter.number.toLowerCase().includes(SEARCH_CHAPTER_NUMBER.toLowerCase());
                });
            } else {
                filteredChapters = filteredChapters.filter(chapter => {
                    return chapter.number.toLowerCase().includes(SEARCH_CHAPTER_NUMBER.toLowerCase());
                });
            }
        }
        
        // Sort chapters
        if (CURRENT_FILTERS.sort === 'newest') {
            filteredChapters = filteredChapters.sort((a, b) => b.number_float - a.number_float);
        } else {
            filteredChapters = filteredChapters.sort((a, b) => a.number_float - b.number_float);
        }
        
        // Find index of current chapter
        const currentIndex = filteredChapters.findIndex(chapter => chapter.number_float === parseFloat(chapterNumberFloat));
        
        if (currentIndex === -1) {
            return 1; // Default to page 1 if not found
        }
        
        // Calculate page number (1-based)
        const currentPage = Math.floor(currentIndex / PAGE_SIZE) + 1;
        
        return currentPage;
    }

    function filterAndSortChapters() {
        let filteredChapters = ALL_CHAPTERS;
        const currentPage = PAGE_NUMBER;
        // Calculate start and end
        const start = (currentPage - 1) * PAGE_SIZE;
        const end = start + PAGE_SIZE;
        // Filter by chapter number if searchValue is provided and is a string
        if (SEARCH_CHAPTER_NUMBER && typeof SEARCH_CHAPTER_NUMBER === 'string' && SEARCH_CHAPTER_NUMBER.trim() !== '') {
            const searchNumber = parseFloat(SEARCH_CHAPTER_NUMBER);
            if (!isNaN(searchNumber)) {
                filteredChapters = filteredChapters.filter(chapter => {
                    return chapter.number_float === searchNumber || 
                           chapter.number.toLowerCase().includes(SEARCH_CHAPTER_NUMBER.toLowerCase());
                });
            } else {
                // If not a number, search by chapter number string
                filteredChapters = filteredChapters.filter(chapter => {
                    return chapter.number.toLowerCase().includes(SEARCH_CHAPTER_NUMBER.toLowerCase());
                });
            }
        }
        // Filter by sort
        if (CURRENT_FILTERS.sort === 'newest') {
            filteredChapters = filteredChapters.sort((a, b) => b.number_float - a.number_float);
        } else {
            filteredChapters = filteredChapters.sort((a, b) => a.number_float - b.number_float);
        }
        FILTERED_CHAPTERS = filteredChapters.slice(start, end);
    }
    // Render volume tabs html - optimized DOM manipulation
    function generateModalChapterNoVolume() {
        // Update sort toggle display
        updateSortToggleDisplay();
        // Call filter and sort chapters
        filterAndSortChapters();
        const $chaptersList = $('#chaptersList');
        $chaptersList.empty();

        if (FILTERED_CHAPTERS.length > 0) {
            const html = chapterHtml.renderGenerateChaptersNoVolume(FILTERED_CHAPTERS, readerState.currentChapter, readerState.currentChapterId);
            $chaptersList.append(html);
        } else {
            $chaptersList.append('<div class="text-center text-white">No chapter</div>');
        }
        // Set up pagination
        renderPaginationChapter({
            current_page: PAGE_NUMBER,
            last_page: PAGE_TOTAL
        }, 'chaptersPagination');

        // Update navigation buttons
        updateNavigationButtons();
    }
    // Set page chapter
    function setPageChapter(page) {
        PAGE_NUMBER = page;
        generateModalChapterNoVolume();
    }
    // Apply reading mode - optimized DOM operations
    function applyReadingMode() {
        const $pageNavigation = $('#pageNavigation');
        const $floatingNav = $('#floatingNav');
        const $floatingPrevBtn = $('#floatingPrevBtn');
        const $floatingNextBtn = $('#floatingNextBtn');

        if (readerState.readingMode === 'horizontal') {
            // Stop auto scroll when switching to horizontal mode
            stopAutoScroll();

            // Load chapter
            loadChapter();
            // Show page navigation
            $pageNavigation.show();
            // Show floating navigation
            if (readerState.showFloatingNav) {
                $floatingNav.show();
                // Set button states
                $floatingPrevBtn.prop('disabled', readerState.isLtr);
                $floatingNextBtn.prop('disabled', !readerState.isLtr);
                // Hide auto scroll container in horizontal mode
                $('#autoScrollContainer').hide();
                stopAutoScroll();
            }
        } else {
            $pageNavigation.show();
            // Show chapter
            loadChapter();
            // Hide floating navigation in vertical mode (no next page needed)
            $floatingNav.hide();

            // Show auto scroll container only if autoScroll is enabled
            if (readerState.autoScroll) {
                $('#autoScrollContainer').show();
                updateAutoScrollButton();
            } else {
                $('#autoScrollContainer').hide();
            }
        }
        togglePageNumbers();
        toggleProgressBar();
    }
    // Load images of chapter - optimized
    function loadChapter() {
        // Load chapter images
        const $container = $('#mangaPages');
        $container.empty();

        const pageHtml = readerState.readingMode === 'horizontal' ?
            chapterHtml.renderImageChapterHorizontal(chapterImages) :
            chapterHtml.renderImageChapterVertical(chapterImages);

        $container.append(pageHtml);

        // Initialize lazy loading for new images
        setTimeout(initLazyLoading, 100);

        // Scroll to top
        window.scrollTo(0, 0);
        setTimeout(updateProgress, 100);

        // Auto scroll if enabled
        // if (readerState.autoScroll && readerState.readingMode === 'vertical') {
        //     console.log('Starting auto scroll - readingMode:', readerState.readingMode, 'autoScroll:', readerState.autoScroll);
        //     setTimeout(startAutoScroll, 1000); // Delay 1 second after load
        // }
    }

    // Auto Scroll Functions
    let autoScrollInterval = null;
    let isAutoScrolling = false;

    function startAutoScroll() {
        if (isAutoScrolling || readerState.readingMode !== 'vertical') {
            console.log('Auto scroll blocked - isAutoScrolling:', isAutoScrolling, 'readingMode:', readerState.readingMode);
            return;
        }

        console.log('Auto scroll started - readingMode:', readerState.readingMode, 'scrollSpeed:', readerState.scrollSpeed);
        isAutoScrolling = true;
        const scrollSpeed = readerState.scrollSpeed || 5;
        const scrollAmount = Math.max(scrollSpeed * 0.5, 1); // Smaller, smoother increments

        // Add auto-scrolling class for CSS control
        document.documentElement.classList.add('auto-scrolling');

        autoScrollInterval = setInterval(() => {
            const currentScroll = window.pageYOffset;
            const documentHeight = document.documentElement.scrollHeight;
            const windowHeight = window.innerHeight;

            // Check if we've reached the bottom
            if (currentScroll + windowHeight >= documentHeight - 10) {
                console.log('Reached bottom, stopping auto scroll');
                stopAutoScroll();
                return;
            }

            // Smooth scroll down using requestAnimationFrame for better performance
            window.scrollTo({
                top: currentScroll + scrollAmount,
                behavior: 'auto' // Use 'auto' for programmatic smooth scrolling
            });
        }, 16); // ~60fps for smooth animation

        // Add visual indicator
        showAutoScrollIndicator();
        updateAutoScrollButton();
    }

    function stopAutoScroll() {
        if (autoScrollInterval) {
            clearInterval(autoScrollInterval);
            autoScrollInterval = null;
        }
        isAutoScrolling = false;

        // Remove auto-scrolling class
        document.documentElement.classList.remove('auto-scrolling');

        hideAutoScrollIndicator();
        updateAutoScrollButton();
    }

    function toggleAutoScroll() {
        if (readerState.readingMode !== 'vertical') {
            console.log('Auto scroll only works in vertical mode');
            return;
        }

        if (isAutoScrolling) {
            stopAutoScroll();
        } else {
            startAutoScroll();
        }
    }

    function updateAutoScrollButton() {
        const $btn = $('#autoScrollToggleBtn');
        const $icon = $('#autoScrollIcon');

        if (isAutoScrolling) {
            $btn.removeClass('btn-success').addClass('btn-warning auto-scroll-active');
            $icon.removeClass('fa-play').addClass('fa-pause');
            $btn.attr('title', 'Dừng tự động cuộn');
        } else {
            $btn.removeClass('btn-warning auto-scroll-active').addClass('btn-success');
            $icon.removeClass('fa-pause').addClass('fa-play');
            $btn.attr('title', 'Bật tự động cuộn');
        }
    }

    function showAutoScrollIndicator() {
        if ($('#autoScrollIndicator').length) return;

        const indicator = $(`
            <div id="autoScrollIndicator" style="
                position: fixed;
                top: 20px;
                right: 20px;
                background: rgba(0, 0, 0, 0.8);
                color: white;
                padding: 10px 15px;
                border-radius: 25px;
                font-size: 14px;
                z-index: 1000;
                display: flex;
                align-items: center;
                gap: 8px;
                transform: translateX(100px);
                opacity: 0;
                transition: all 0.3s ease;
                backdrop-filter: blur(10px);
                border: 1px solid rgba(255, 255, 255, 0.1);
            ">
                <i class="fas fa-play" style="color: #4CAF50;"></i>
                <span>Tự động cuộn</span>
                <button onclick="stopAutoScroll()" style="
                    background: none;
                    border: none;
                    color: white;
                    cursor: pointer;
                    padding: 2px 6px;
                    border-radius: 3px;
                    transition: background-color 0.2s;
                " onmouseover="this.style.backgroundColor='rgba(255,255,255,0.2)'" onmouseout="this.style.backgroundColor='transparent'">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        `);

        $('body').append(indicator);

        // Add CSS animation
        setTimeout(() => {
            $('#autoScrollIndicator').css({
                'transform': 'translateX(0)',
                'opacity': '1'
            });
        }, 100);
    }

    function hideAutoScrollIndicator() {
        $('#autoScrollIndicator').remove();
    }

    // Pause auto scroll on user interaction
    function pauseAutoScrollOnInteraction() {
        if (isAutoScrolling) {
            stopAutoScroll();
        }
    }

    // Lazy Loading Functions - optimized with preload support
    function initLazyLoading() {
        const lazyImages = document.querySelectorAll('img.lazy-load');
        if (!lazyImages.length) return;
        // Set preload images to true to trigger preload
        // readerState.preloadImages = false;
        // Configuration based on preload setting
        const config = {
            groupSize: readerState.preloadImages ? 5 : 3,
            initialLoad: readerState.preloadImages ? 5 : 3,
            triggerPosition: 1 // 2nd image in group (0-indexed)
        };

        // Load initial images only
        loadMultipleImages(lazyImages, 0, config.initialLoad);

        // Check Intersection Observer API support
        if (!('IntersectionObserver' in window)) {
            // Fallback for older browsers - load all images
            loadMultipleImages(lazyImages, config.initialLoad, lazyImages.length - config.initialLoad);
            return;
        }

        // Create optimized observer with closure
        const imageObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (!entry.isIntersecting) return;

                const img = entry.target;
                const currentIndex = Array.from(lazyImages).indexOf(img);

                // Calculate group information
                const groupStart = Math.floor(currentIndex / config.groupSize) * config.groupSize;
                const positionInGroup = currentIndex - groupStart;

                // Load current image if needed
                if (img.classList.contains('lazy-load')) {
                    loadImage(img);
                }

                // Trigger next group loading when reaching trigger position
                if (positionInGroup === config.triggerPosition) {
                    const nextGroupStart = groupStart + config.groupSize;
                    const nextTriggerIndex = nextGroupStart + config.triggerPosition;

                    console.log('Triggering next group load:', {
                        currentIndex,
                        groupStart,
                        positionInGroup,
                        nextGroupStart,
                        nextTriggerIndex,
                        totalImages: lazyImages.length
                    });

                    // Only load next group if we haven't loaded it yet
                    if (nextGroupStart < lazyImages.length) {
                        loadMultipleImages(lazyImages, nextGroupStart, config.groupSize);

                        // Observe next trigger image
                        if (lazyImages[nextTriggerIndex]) {
                            imageObserver.observe(lazyImages[nextTriggerIndex]);
                        }
                    }
                }

                // Unobserve current image
                imageObserver.unobserve(img);
            });
        }, {
            rootMargin: '100px 0px',
            threshold: 0.1
        });

        // Start observing trigger image only if we have more images to load
        if (lazyImages[config.triggerPosition] && lazyImages.length > config.initialLoad) {
            imageObserver.observe(lazyImages[config.triggerPosition]);
        }
    }

    // Load multiple images starting from index
    function loadMultipleImages(images, startIndex, count) {
        for (let i = 0; i < count && startIndex + i < images.length; i++) {
            const img = images[startIndex + i];
            if (img && img.classList.contains('lazy-load')) {
                loadImage(img);
            }
        }
    }

    function loadImage(img) {
        if (!img.dataset.src) return;

        img.onload = function() {
            this.style.opacity = '1';
            this.classList.remove('lazy-load');
            this.classList.add('lazy-loaded');
        };

        img.onerror = function() {
            const errorSvg = `<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="400" viewBox="0 0 400 400">
                <rect width="100%" height="100%" fill="#f8f9fa"/>
                <text x="50%" y="50%" text-anchor="middle" dy=".3em" fill="#dc3545" font-family="Arial" font-size="14">
                    Error Loading Image
                </text>
            </svg>`;
            this.src = `data:image/svg+xml;charset=utf-8,${encodeURIComponent(errorSvg)}`;
            this.style.opacity = '0.7';
        };

        img.src = img.dataset.src;
        img.style.opacity = '0.3';
    }

    // Setup event listeners for Modal - optimized
    function setupEventListenersModal() {
        // Settings modal event listeners
        $document.on('click', '.reading-mode-btn', function() {
            $('.reading-mode-btn').removeClass('active');
            $(this).addClass('active');
            readerState.readingMode = $(this).data('mode');
        });
        // Load settings to modal
        loadSettingsToModal();
    }

    function navigatePageImage(direction) {
        if (readerState.readingMode !== 'horizontal') return;

        const $currentPage = $('#mangaPages .manga-page.currentPage');
        if (!$currentPage.length) return;

        const currentPageNumber = parseInt($currentPage.data('page'));
        const {
            isLtr
        } = readerState;

        // Calculate next page
        const delta = isLtr ? direction : -direction;
        const targetPageNumber = currentPageNumber + (delta > 0 ? 1 : -1);

        // Check limit
        if (targetPageNumber < 1 || targetPageNumber > chapterImages.length) return;

        // Change page state
        const $targetPage = $(`#mangaPages .manga-page[data-page="${targetPageNumber}"]`);
        $currentPage.hide().removeClass('currentPage');
        $targetPage.css('display', 'flex').addClass('currentPage');

        // Update page number
        $('#currentPageNum').text(targetPageNumber);

        // Update button state
        const $floatingPrevBtn = $('#floatingPrevBtn');
        const $floatingNextBtn = $('#floatingNextBtn');

        if (isLtr) {
            $floatingPrevBtn.prop('disabled', targetPageNumber <= 1);
            $floatingNextBtn.prop('disabled', targetPageNumber >= chapterImages.length);
        } else {
            $floatingPrevBtn.prop('disabled', targetPageNumber >= chapterImages.length);
            $floatingNextBtn.prop('disabled', targetPageNumber <= 1);
        }

        // Update progress
        updateProgressHorizontal(targetPageNumber);
        // scroll to #mangaPages    
        $('#mangaPages').animate({
            scrollTop: 0
        }, 300);
    }

    // Update navigation buttons - optimized
    function updateNavigationButtons() {
        const {
            currentLanguage,
            currentChapter,
            currentVolume
        } = readerState;
        const currentVolumeInt = parseInt(currentVolume);

        // Previous chapter
        const prevChapter = findChapterInDirection(ALL_CHAPTERS, currentChapter, currentLanguage, currentVolumeInt, 'prev');
        const $prevButtons = $('#prevChapterBtn, .prevChapterBtnBottom');

        if (prevChapter) {
            $prevButtons.prop('disabled', false).off('click').on('click', () => {
                goToChapter(prevChapter.translation.url);
            });
        } else {
            $prevButtons.prop('disabled', true).off('click');
        }

        // Next chapter
        const nextChapter = findChapterInDirection(ALL_CHAPTERS, currentChapter, currentLanguage, currentVolumeInt, 'next');
        const $nextButtons = $('#nextChapterBtn, .nextChapterBtnBottom');

        if (nextChapter) {
            $nextButtons.prop('disabled', false).off('click').on('click', () => {
                goToChapter(nextChapter.translation.url);
            });
        } else {
            $nextButtons.prop('disabled', true).off('click');
        }
    }

    function findChapterInDirection(chapters, currentNumberFloat, lang, currentVolume, direction = 'next') {
        const currentIndex = chapters.findIndex(
            chap => chap.number_float === parseFloat(currentNumberFloat)
        );

        if (currentIndex === -1) return null;

        const step = direction === 'next' ? -1 : 1;
        const start = currentIndex + step;
        const volumeStr = String(currentVolume);

        for (let i = start; i >= 0 && i < chapters.length; i += step) {
            const chapter = chapters[i];
            const trans = chapter.translations.find(t =>
                t.language === lang && String(t.volume) === volumeStr
            );
            if (trans) {
                return {
                    chapter,
                    translation: trans
                };
            }
        }

        return null;
    }


    // Go to chapter
    function goToChapter(url) {
        window.location.href = url;
    }
    // Toggle night mode - optimized
    function toggleNightMode() {
        readerState.nightMode = !readerState.nightMode;
        const $nightModeIcon = $('#nightModeBtn i');

        if (readerState.nightMode) {
            $body.addClass('night-mode');
            $nightModeIcon.removeClass('fa-moon').addClass('fa-sun');
        } else {
            $body.removeClass('night-mode');
            $nightModeIcon.removeClass('fa-sun').addClass('fa-moon');
        }
    }
    // Open settings modal - optimized
    function openSettingsModal() {
        if (userId) {
            $('#settingsModal').modal('show');
        } else {
            Swal.fire({
                title: 'Please login to view settings & save settings',
                icon: 'warning',
                showCancelButton: true,
                cancelButtonColor: '#d33',
                confirmButtonText: 'Login',
                confirmButtonColor: '#3085d6',
                cancelButtonText: 'Cancel',
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/auth/login/';
                }
            });
        }
    }
    // Load settings to modal - optimized
    function loadSettingsToModal() {
        // Set reading mode
        $('.reading-mode-btn').removeClass('active');
        $(`.reading-mode-btn[data-mode="${readerState.readingMode}"]`).addClass('active');

        // Set image size
        $('.image-size-btn').removeClass('active');
        $(`.image-size-btn[data-size="${readerState.imageSize}"]`).addClass('active');

        // Set switches - batch update
        const switches = {
            '#isLtrSwitch': readerState.isLtr,
            '#autoScrollSwitch': readerState.autoScroll,
            '#preloadSwitch': readerState.preloadImages,
            '#preloadNextChapterSwitch': readerState.preloadNextChapter,
            '#showPageNumbersSwitch': readerState.showPageNumbers,
            '#showProgressBarSwitch': readerState.showProgressBar,
            '#showFloatingNavSwitch': readerState.showFloatingNav
        };

        Object.entries(switches).forEach(([selector, value]) => {
            $(selector).prop('checked', value);
        });

        // Set scroll speed
        $('#scrollSpeedRange').val(readerState.scrollSpeed);
    }

    // Apply Image Size - optimized
    function applyImageSize() {
        const $mangaPages = $('#mangaPages');
        $mangaPages.removeClass('image-size-small image-size-medium image-size-large');
        $mangaPages.addClass(`image-size-${readerState.imageSize}`);
    }

    // Toggle page numbers - optimized
    function togglePageNumbers() {
        $('.page-overlay').toggle(readerState.showPageNumbers);
    }

    // Toggle progress bar - optimized
    function toggleProgressBar() {
        $('#progressContainer').toggle(readerState.showProgressBar);
    }
    // Update progress - optimized
    function updateProgress() {
        if (!readerState.showProgressBar) return;

        const visiblePage = getCurrentVisiblePage();
        if (!visiblePage) return;

        const currentPageNumber = parseInt(visiblePage);
        const totalPages = chapterImages.length;
        const progress = (currentPageNumber / totalPages) * 100;

        // Update current page
        $('#currentPageNum').text(currentPageNumber);
        readerState.currentPage = currentPageNumber;
        $('#progressBar').css('width', `${progress}%`);
    }

    function updateProgressHorizontal(pageNumber) {
        if (!readerState.showProgressBar) return;
        const progress = (pageNumber / chapterImages.length) * 100;
        $('#progressBar').css('width', `${progress}%`);
    }
    // Get visible manga page - optimized
    function getCurrentVisiblePage(minVisiblePercent = 10) {
        const windowHeight = window.innerHeight || document.documentElement.clientHeight;
        const mangaPages = document.querySelectorAll('.manga-page');

        for (const page of mangaPages) {
            const rect = page.getBoundingClientRect();
            const elHeight = rect.height;
            const visibleHeight = Math.min(rect.bottom, windowHeight) - Math.max(rect.top, 200);
            const visiblePercent = (visibleHeight / elHeight) * 100;

            if (visiblePercent >= minVisiblePercent) {
                return page.dataset.page;
            }
        }

        return null;
    }

    function saveSettings() {
        // Get current values from form controls
        const autoScrollValue = $('#autoScrollSwitch').is(':checked');
        const scrollSpeedValue = $('#scrollSpeedRange').val();

        // Update readerState with current form values
        readerState.autoScroll = autoScrollValue;
        readerState.scrollSpeed = parseInt(scrollSpeedValue) || 5;

        console.log('Saving settings:', {
            autoScroll: readerState.autoScroll,
            scrollSpeed: readerState.scrollSpeed,
            readingMode: readerState.readingMode
        });

        // Save settings to database - optimized
        const csrfToken = $('meta[name="csrf-token"]').attr('content');

        showLoading();

        $.ajax({
            url: '/api/v1/user/setting-reader/',
            type: 'POST',
            data: {
                settings: readerState
            },
            headers: {
                'X-CSRF-TOKEN': csrfToken
            },
            success: function(response) {
                if (response.code === 200) {
                    toastr.success('Settings have been updated successfully!');
                } else {
                    toastr.error('Settings have been updated failed!');
                }
                applyReadingMode();
            },
            error: function() {
                toastr.error('Settings have been updated failed!');
            },
            complete: hideLoading
        });
    }
    // Update view - optimized
    function updateView() {
        const csrfToken = $('meta[name="csrf-token"]').attr('content');

        $.ajax({
            url: '/api/v1/views/update/',
            type: 'POST',
            headers: {
                'X-CSRF-TOKEN': csrfToken
            },
            data: {
                title_id: titleId,
                chapter_id: chapterId
            }
        });
    }
</script>
<script>
    document.getElementById('shareBtn').addEventListener('click', function() {
        $('#shareModal').modal('show');
    });
    // Function show comments
    function showComments(element, chapterId) {
        $('#commentsModal #commentObjectId').val(chapterId);
        $('#commentsModal #commentStart').val(0);
        $('#commentsModal #commentLimit').val(10);
        $('#commentList').html('');
        loadComments();
        $('#commentsModal').modal('show');
    }
    // Send comment - optimized
    function sendComment() {
        const $modal = $('#commentsModal');
        const commentInput = $modal.find('#commentInput').val().trim();
        const commentParentId = $modal.find('#commentParentId').val();
        const commentChapterId = $modal.find('#commentObjectId').val();

        if (!commentInput) {
            alert('Please enter your comment');
            return;
        }

        const csrfToken = $('meta[name="csrf-token"]').attr('content');
        showLoading();

        $.ajax({
            url: '/api/v1/comment/send-comment/',
            type: 'POST',
            data: {
                content: commentInput,
                parent_id: commentParentId,
                object_id: commentChapterId,
                object_type: 'chapter'
            },
            headers: {
                'X-CSRF-TOKEN': csrfToken
            },
            success: function(response) {
                console.log('Send comment response:', response);
                
                if (response.code === 200) {
                    // Check if this is a reply or a new comment
                    if (commentParentId && commentParentId !== '') {
                        console.log('Processing reply for parent:', commentParentId);
                        
                        // This is a reply - find parent comment (not reply)
                        // Need to find the main comment, not a reply item
                        let $parentComment = $(`.comment-item[data-comment-id="${commentParentId}"]`).not('.reply-item');
                        
                        console.log('Parent comment found:', $parentComment.length);
                        
                        if ($parentComment.length > 0) {
                            let $repliesContainer = $parentComment.find('.replies-container').first();
                            
                            console.log('Replies container found:', $repliesContainer.length);
                            
                            // If replies container doesn't exist yet, create the entire structure
                            if ($repliesContainer.length === 0) {
                                console.log('Creating new replies structure');
                                
                                // Find the container where we need to add replies
                                const $replySection = $parentComment.find('.flex-grow-1').last();
                                
                                const repliesHtml = `
                                    <div class="d-flex mt-2 align-items-start">
                                        <div style="width: 12px; border-left: 2px solid #444; margin-right: 10px;"></div>
                                        <div class="flex-grow-1">
                                            <ul class="list-unstyled">
                                                <li class="position-relative ps-4">
                                                    <div class="position-absolute top-0 bottom-0 start-0 border-start border-2 border-secondary" style="margin-left: 12px;"></div>
                                                    <div class="text-white small py-1" style="cursor: pointer;" onclick="toggleReplies(this, '${commentParentId}')">
                                                        <i class="fas fa-chevron-up me-1"></i>
                                                        <span class="reply-text">View 1 replies</span>
                                                    </div>
                                                    <div class="replies-container" style="display: block; margin-top: 0.5rem;">
                                                        <!-- Replies will be loaded here -->
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                `;
                                
                                // Remove old reply section if exists
                                $replySection.find('.d-flex.mt-2').remove();
                                // Add new structure
                                $replySection.append(repliesHtml);
                                
                                $repliesContainer = $parentComment.find('.replies-container').first();
                                console.log('Replies container created, found again:', $repliesContainer.length);
                            }
                            
                            // Render and add the reply
                            const replyHtml = commentHtml.renderReply(response.comment);
                            console.log('Reply HTML generated, adding to container');
                            $repliesContainer.prepend(replyHtml);
                            
                            // Show the replies container if it's hidden
                            if (!$repliesContainer.is(':visible')) {
                                $repliesContainer.slideDown(300);
                                const $toggleDiv = $parentComment.find('.text-white.small[style*="cursor: pointer"]').first();
                                const $icon = $toggleDiv.find('i');
                                $icon.removeClass('fa-chevron-down').addClass('fa-chevron-up');
                            }
                            
                            // Update the reply count in the toggle text
                            const $replyText = $parentComment.find('.reply-text').first();
                            if ($replyText.length > 0) {
                                const currentCount = parseInt($replyText.text().match(/\d+/)?.[0]) || 0;
                                $replyText.text(`View ${currentCount + 1} replies`);
                                console.log('Updated reply count to:', currentCount + 1);
                            }
                        } else {
                            console.error('Parent comment not found for ID:', commentParentId);
                        }
                        
                        // Clear the parent_id after adding reply
                        $modal.find('#commentParentId').val('');
                    } else {
                        console.log('Adding new comment');
                        // This is a new comment - add to comment list
                        $('#commentList').prepend(commentHtml.renderComment(response.comment));
                        // Increment comment start 
                        const $commentStart = $modal.find('#commentStart');
                        $commentStart.val(parseInt($commentStart.val()) + 1);
                    }
                    
                    // Clear the input field
                    $modal.find('#commentInput').val('');
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: response.message
                    });
                }
            },
            error: function() {
                // Error handled silently
            },
            complete: hideLoading
        });
    }
    // Load comments - optimized
    function loadComments() {
        const $modal = $('#commentsModal');
        const commentObjectId = $modal.find('#commentObjectId').val();
        const commentObjectType = 'chapter';
        const commentStart = $modal.find('#commentStart').val();
        const commentLimit = $modal.find('#commentLimit').val();

        if (!commentObjectId || !commentObjectType || !commentStart || !commentLimit) {
            console.error('Missing required parameters');
            return;
        }

        const csrfToken = $('meta[name="csrf-token"]').attr('content');

        $.ajax({
            url: '/api/v1/comment/load-comments/',
            type: 'POST',
            data: {
                object_id: commentObjectId,
                object_type: commentObjectType,
                start: commentStart,
                limit: commentLimit
            },
            headers: {
                'X-CSRF-TOKEN': csrfToken
            },
            success: function(response) {
                if (response.code === 200 && response.data?.length > 0) {
                    const html = commentHtml.renderCommentMultiple(response.data);
                    const $commentList = $modal.find('#commentList');
                    const $loadMoreBtn = $modal.find('#loadMoreBtn');

                    // Update comment start and limit
                    $modal.find('#commentStart').val(response.nextStart);
                    $modal.find('#commentLimit').val(response.limit);

                    // Update title comment
                    $modal.find('#commentsModalLabel').html(response.title);

                    // Add comments
                    if (commentStart == 0) {
                        $commentList.html(html);
                    } else {
                        $commentList.append(html);
                    }

                    // Update load more button
                    $loadMoreBtn.prop('disabled', response.data.length < response.limit);
                }
            },
            error: function() {
                console.error('Error loading comments');
            }
        });
    }
    $(document).ready(function() {
        const $modal = $('#commentsModal');

        $modal.on('hidden.bs.modal', function() {
            // Clear comment list
            $('#commentList').html('');
            // Reset comment start and limit
            $modal.find('#commentStart').val(0);
            $modal.find('#commentLimit').val(10);
            // Clear comment input
            $modal.find('#commentInput').val('');
            // Clear comment parent id
            $modal.find('#commentParentId').val('');
            // Clear comment chapter id
            $modal.find('#commentObjectId').val('');
        });

        // Click submit comment
        $modal.find('#submitCommentBtn').on('click', sendComment); 
    });

    
</script>
<script>
    // ============================================
    // OFFLINE DOWNLOAD FEATURE
    // ============================================

    // Update download button state
    async function updateDownloadButton() {
        try {
            const isDownloaded = await window.offlineManager.isChapterDownloaded(chapterId);
            const $btn = $('#downloadChapterBtn');
            const $icon = $btn.find('i');
            
            if (isDownloaded) {
                $btn.removeClass('btn-outline-light').addClass('btn-success');
                $icon.removeClass('fa-download').addClass('fa-check');
                $btn.attr('title', 'Downloaded - Click to delete');
            } else {
                $btn.removeClass('btn-success').addClass('btn-outline-light');
                $icon.removeClass('fa-check').addClass('fa-download');
                $btn.attr('title', 'Download for offline reading');
            }
        } catch (error) {
            console.error('[Download] Error checking download status:', error);
        }
    }

    // Download Chapter Handler
    $('#downloadChapterBtn').on('click', async function() {
        const $btn = $(this);
        const $icon = $btn.find('i');
        
        try {
            // Check if already downloaded
            const isDownloaded = await window.offlineManager.isChapterDownloaded(chapterId);
            
            if (isDownloaded) {
                // Ask if want to delete
                Swal.fire({
                    title: 'Already Downloaded',
                    text: 'This chapter is already downloaded. Do you want to delete it?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: '<i class="fas fa-trash me-2"></i>Delete',
                    cancelButtonText: '<i class="fas fa-times me-2"></i>Cancel',
                    customClass: {
                        popup: 'swal-dark-popup'
                    }
                }).then(async (result) => {
                    if (result.isConfirmed) {
                        try {
                            showLoading();
                            await window.offlineManager.deleteChapter(chapterId);
                            hideLoading();
                            
                            toastr.success('Chapter deleted from offline storage', 'Deleted!');
                            await updateDownloadButton();
                        } catch (error) {
                            hideLoading();
                            console.error('[Download] Delete failed:', error);
                            toastr.error('Failed to delete chapter', 'Error');
                        }
                    }
                });
                return;
            }
            
            // Show download confirmation with progress
            Swal.fire({
                title: '<i class="fas fa-download me-2"></i>Download Chapter',
                html: `
                    <style>
                        .pulse-animation {
                            animation: pulse 1.5s ease-in-out infinite;
                        }
                        @keyframes pulse {
                            0% { opacity: 1; }
                            50% { opacity: 0.7; }
                            100% { opacity: 1; }
                        }
                        .progress-bar {
                            position: relative;
                            overflow: hidden;
                        }
                        .progress-bar::after {
                            content: '';
                            position: absolute;
                            top: 0;
                            left: 0;
                            bottom: 0;
                            right: 0;
                            background-image: linear-gradient(
                                -45deg,
                                rgba(255, 255, 255, .2) 25%,
                                transparent 25%,
                                transparent 50%,
                                rgba(255, 255, 255, .2) 50%,
                                rgba(255, 255, 255, .2) 75%,
                                transparent 75%,
                                transparent
                            );
                            background-size: 50px 50px;
                            animation: move 2s linear infinite;
                        }
                        @keyframes move {
                            0% { background-position: 0 0; }
                            100% { background-position: 50px 50px; }
                        }
                    </style>
                    <div class="text-start">
                        <p class="mb-3">Download this chapter for offline reading?</p>
                        <div class="mb-2">
                            <strong>Chapter:</strong> Vol. 7 Ch. 37                         </div>
                        <div class="mb-2">
                            <strong>Pages:</strong> ${chapterImages.length}
                        </div>
                        <div class="mb-3">
                            <strong>Size:</strong> ~${Math.round(chapterImages.length * 0.5)}MB
                        </div>
                        <div class="progress mb-3" style="height: 30px; border-radius: 15px; background-color: rgba(255,255,255,0.1);">
                            <div class="progress-bar progress-bar-striped progress-bar-animated bg-primary" 
                                 id="downloadProgress" 
                                 role="progressbar" 
                                 style="width: 0%; font-weight: 700; font-size: 16px; border-radius: 15px; transition: width 0.3s ease;"
                                 aria-valuenow="0" 
                                 aria-valuemin="0" 
                                 aria-valuemax="100">
                                <span id="progressText">0%</span>
                            </div>
                        </div>
                        <div id="downloadStatus" class="text-center mb-3">
                            <div class="d-flex align-items-center justify-content-center">
                                <div id="loadingSpinner" class="spinner-border spinner-border-sm text-primary me-2" role="status" style="display: none;">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <span id="statusText" class="fw-bold">Ready to download...</span>
                            </div>
                        </div>
                        <div id="downloadDetails" class="text-center small text-muted" style="display: none;">
                            <div class="row">
                                <div class="col-4">
                                    <div class="border-end">
                                        <div class="fw-bold text-success" id="successCount">0</div>
                                        <div>Success</div>
                                    </div>
                                </div>
                                <div class="col-4">
                                    <div class="border-end">
                                        <div class="fw-bold text-warning" id="failedCount">0</div>
                                        <div>Failed</div>
                                    </div>
                                </div>
                                <div class="col-4">
                                    <div class="fw-bold text-info" id="totalCount">0</div>
                                    <div>Total</div>
                                </div>
                            </div>
                        </div>
                    </div>
                `,
                icon: 'info',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#6c757d',
                confirmButtonText: '<i class="fas fa-download me-2"></i>Download',
                cancelButtonText: '<i class="fas fa-times me-2"></i>Cancel',
                allowOutsideClick: false,
                allowEscapeKey: false,
                customClass: {
                    popup: 'swal-dark-popup',
                    htmlContainer: 'text-white'
                },
                didOpen: () => {
                    Swal.getConfirmButton().disabled = false;
                },
                preConfirm: () => {
                    // Prevent modal from closing
                    return false;   
                }
            });
            
            // Handle confirm button click manually
            $(document).on('click', '.swal2-confirm', function() {
                // Check if this is our download modal
                if ($('#downloadProgress').length > 0) {
                    // Keep modal open and disable buttons during download
                    Swal.getConfirmButton().disabled = true;
                    Swal.getCancelButton().disabled = true;
                    
                    // Update modal content to show progress
                    Swal.update({
                        showCancelButton: false,
                        showConfirmButton: false,
                        allowOutsideClick: false,
                        allowEscapeKey: false
                    });
                    
                    // Start download
                    startDownload();
                }
            });
            
            
            async function startDownload() {
                try {
                    await window.offlineManager.downloadChapter({
                            chapterId: chapterId,
                            titleId: titleId,
                            language: chapterLanguage,
                            titleName: `Moto Kouzou Kaiseki Kenkyuusho no Isekai Boukentan`,
                            chapterNumber: chapterNumber,
                            chapterName: `Vol. 7 Ch. 37 `,
                            images: chapterImages,
                            metadata: {
                                language: chapterLanguage,
                                volume: chapterVolume,
                                url: window.location.href,
                                titleSlug: 'moto-kouzou-kaiseki-kenkyuusho-no-isekai-boukentan'
                            },
                            onProgress: (current, total, success, failed) => {
                                
                                const percent = Math.round((current / total) * 100);
                                
                                console.log(`[Download] Progress: ${current}/${total} (${percent}%) - Success: ${success}, Failed: ${failed}`);
                                
                                // Update progress bar safely
                                const $progress = $('#downloadProgress');
                                const $progressText = $('#progressText');
                                const $loadingSpinner = $('#loadingSpinner');
                                const $statusText = $('#statusText');
                                const $downloadDetails = $('#downloadDetails');
                                const $successCount = $('#successCount');
                                const $failedCount = $('#failedCount');
                                const $totalCount = $('#totalCount');
                                
                                if ($progress.length && $progressText.length) {
                                    // Update progress bar
                                    $progress.css('width', percent + '%')
                                        .attr('aria-valuenow', percent);
                                    
                                    $progressText.text(percent + '%');
                                    
                                    // Change color based on errors
                                    if (failed > 0) {
                                        $progress.removeClass('bg-primary').addClass('bg-warning');
                                    } else {
                                        $progress.removeClass('bg-warning').addClass('bg-primary');
                                    }
                                    
                                    // Show loading spinner
                                    $loadingSpinner.show();
                                    
                                    // Update status text
                                    $statusText.text(`Downloading: ${current}/${total} images`);
                                    
                                    // Show download details
                                    $downloadDetails.show();
                                    $successCount.text(success);
                                    $failedCount.text(failed);
                                    $totalCount.text(total);
                                    
                                    // Add pulsing effect for active download
                                    if (current < total) {
                                        $progress.addClass('pulse-animation');
                                    } else {
                                        $progress.removeClass('pulse-animation');
                                    }
                                    
                                    console.log(`[Download] Progress updated: ${percent}%`);
                                } else {
                                    console.warn('[Download] Progress elements not found, modal might be closed');
                                }
                            },
                            onComplete: (chapterInfo) => {
                                console.log('[Download] Complete:', chapterInfo);
                                
                                const hasErrors = chapterInfo.failCount > 0;
                                const icon = hasErrors ? 'warning' : 'success';
                                const title = hasErrors ? 'Partial Download' : 'Success!';
                                const message = hasErrors 
                                    ? `Downloaded ${chapterInfo.successCount}/${chapterInfo.totalPages + chapterInfo.failCount} pages. ${chapterInfo.failCount} images failed.`
                                    : `Chapter downloaded successfully! You can now read it offline.`;
                                
                                // Close current modal and show success/error
                                Swal.close();
                                
                                Swal.fire({
                                    title: `<i class="fas fa-${hasErrors ? 'exclamation-triangle' : 'check-circle'} me-2"></i>${title}`,
                                    html: `
                                        <div class="text-center">
                                            <div class="mb-3">
                                                <i class="fas fa-${hasErrors ? 'exclamation-triangle' : 'check-circle'} fa-3x text-${hasErrors ? 'warning' : 'success'}"></i>
                                            </div>
                                            <p class="mb-3">${message}</p>
                                            <div class="progress mb-3" style="height: 30px; border-radius: 15px; background-color: rgba(255,255,255,0.1);">
                                                <div class="progress-bar bg-success" 
                                                     style="width: 100%; font-weight: 700; font-size: 16px; border-radius: 15px;">
                                                    100%
                                                </div>
                                            </div>
                                        </div>
                                    `,
                                    icon: null,
                                    showCancelButton: false,
                                    showConfirmButton: true,
                                    confirmButtonText: '<i class="fas fa-check me-2"></i>OK',
                                    confirmButtonColor: '#3085d6',
                                    allowOutsideClick: true,
                                    allowEscapeKey: true,
                                    customClass: {
                                        popup: 'swal-dark-popup'
                                    }
                                });
                                
                                updateDownloadButton();
                                
                                if (!hasErrors) {
                                    toastr.success('Chapter saved to offline library', 'Downloaded!');
                                }
                            },
                            onError: (error) => {
                                console.error('[Download] Error:', error);
                                
                                // Close current modal and show error
                                Swal.close();
                                
                                Swal.fire({
                                    title: '<i class="fas fa-times-circle me-2"></i>Error!',
                                    html: `
                                        <div class="text-center">
                                            <div class="mb-3">
                                                <i class="fas fa-times-circle fa-3x text-danger"></i>
                                            </div>
                                            <p class="mb-3">${error.message || 'Failed to download chapter'}</p>
                                            <div class="progress mb-3" style="height: 30px; border-radius: 15px; background-color: rgba(255,255,255,0.1);">
                                                <div class="progress-bar bg-danger" 
                                                     style="width: 100%; font-weight: 700; font-size: 16px; border-radius: 15px;">
                                                    Failed
                                                </div>
                                            </div>
                                        </div>
                                    `,
                                    icon: null,
                                    showCancelButton: false,
                                    showConfirmButton: true,
                                    confirmButtonText: '<i class="fas fa-check me-2"></i>OK',
                                    confirmButtonColor: '#d33',
                                    allowOutsideClick: true,
                                    allowEscapeKey: true,
                                    customClass: {
                                        popup: 'swal-dark-popup'
                                    }
                                });
                            }
                        });
                        hideLoading();
                        
                } catch (error) {
                    console.error('[Download] Download failed:', error);
                    
                    // Close current modal and show error
                    Swal.close();
                    
                    Swal.fire({
                        title: '<i class="fas fa-times-circle me-2"></i>Error!',
                        html: `
                            <div class="text-center">
                                <div class="mb-3">
                                    <i class="fas fa-times-circle fa-3x text-danger"></i>
                                </div>
                                <p class="mb-3">${error.message || 'Failed to download chapter'}</p>
                                <div class="progress mb-3" style="height: 30px; border-radius: 15px; background-color: rgba(255,255,255,0.1);">
                                    <div class="progress-bar bg-danger" 
                                         style="width: 100%; font-weight: 700; font-size: 16px; border-radius: 15px;">
                                        Failed
                                    </div>
                                </div>
                            </div>
                        `,
                        icon: null,
                        showCancelButton: false,
                        showConfirmButton: true,
                        confirmButtonText: '<i class="fas fa-check me-2"></i>OK',
                        confirmButtonColor: '#d33',
                        allowOutsideClick: true,
                        allowEscapeKey: true,
                        customClass: {
                            popup: 'swal-dark-popup'
                        }
                    });
                }
            }
            
        } catch (error) {
            console.error('[Download] Handler error:', error);
            toastr.error('Failed to process download request', 'Error');
        }
    });

    // Offline Library Handler
    $('#offlineLibraryBtn').on('click', async function() {
        try {
            showLoading();
            const allChapters = await window.offlineManager.getAllChapters();
            // Filter chapters by current titleId
            const chapters = allChapters.filter(chapter => chapter.titleId === titleId);
            hideLoading();
            
            let chaptersHtml = '';
            let totalSize = 0;
            if (chapters.length === 0) {
                chaptersHtml = `
                    <div class="text-center py-5">
                        <div style="font-size: 4rem; margin-bottom: 1rem;">📭</div>
                        <h4 class="text-white">No Offline Chapters</h4>
                        <p class="text-secondary">You haven't downloaded any chapters for this title yet.</p>
                        <p class="text-secondary small mt-3">
                            Click the <i class="fas fa-download"></i> button while reading to download chapters for offline access.
                        </p>
                    </div>
                `;
            } else {
                chaptersHtml = '<div class="list-group">';
                chapters.forEach(chapter => {
                    const date = new Date(chapter.downloadDate).toLocaleDateString();
                    
                    // Calculate chapter size
                    const chapterSizeMB = chapter.size ? (chapter.size / (1024 * 1024)).toFixed(2) : (chapter.totalPages * 0.5).toFixed(2);
                    totalSize += parseFloat(chapterSizeMB);
                    
                    chaptersHtml += `
                        <div class="list-group-item bg-dark text-white border-secondary mb-2" style="border-radius: 8px;">
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="flex-grow-1">
                                    <div class="small">
                                        <i class="fas fa-bookmark me-1 text-primary"></i><span class="fw-bold" style="color: #cc8a6b;">${chapter.chapterName}</span>
                                        <span class="mx-2 text-muted">•</span>
                                        <span class="text-muted"><i class="fas fa-file-image me-1"></i>${chapter.totalPages} pages</span>
                                        <span class="mx-2 text-muted">•</span>
                                        <span class="text-muted"><i class="fas fa-hdd me-1"></i>${chapterSizeMB} MB</span>
                                        <span class="mx-2 text-muted">•</span>
                                        <span class="text-muted"><i class="fas fa-calendar me-1"></i>${date}</span>
                                    </div>
                                </div>
                                <div class="d-flex gap-2">
                                    <button class="btn btn-sm btn-primary" onclick="window.location.href='${chapter.metadata?.url || '#'}'" title="Read">
                                        <i class="fas fa-book-open"></i>
                                    </button>
                                    <button class="btn btn-sm btn-danger" onclick="deleteOfflineChapter('${chapter.chapterId}')" title="Delete">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    `;
                });
                chaptersHtml += '</div>';
                
                // Add clear all button if there are chapters
                chaptersHtml += `
                    <div class="mt-3 text-center">
                        <button class="btn btn-outline-danger btn-sm" onclick="clearOfflineChaptersForTitle()">
                            <i class="fas fa-trash-alt me-1"></i>Clear All Chapters of This Title
                        </button>
                    </div>
                `;
            }
            
            Swal.fire({
                title: '<span style="font-size: 1.25rem;"><i class="fas fa-folder-open me-2"></i>Offline Chapters (Moto Kouzou Kaiseki Kenkyuusho no Isekai Boukentan)</span>',
                html: `
                    <div class="text-start">
                        <div class="mb-3 p-3 bg-secondary bg-opacity-10 rounded">
                            <div class="small text-secondary mb-1">
                                <i class="fas fa-book me-1"></i>Total: <strong>${chapters.length}</strong> chapter${chapters.length !== 1 ? 's' : ''}
                            </div>
                            ${chapters.length > 0 ? `
                            <div class="small text-secondary">
                                <i class="fas fa-hdd me-1"></i>Total Size: <strong>${totalSize.toFixed(2)} MB</strong>
                            </div>
                            ` : ''}
                        </div>
                        <div style="max-height: 400px; overflow-y: auto;">
                            ${chaptersHtml}
                        </div>
                    </div>
                `,
                width: '700px',
                showCloseButton: true,
                showConfirmButton: false,
                customClass: {
                    popup: 'swal-dark-popup',
                    htmlContainer: 'text-white'
                }
            });
            
        } catch (error) {
            hideLoading();
            console.error('[Offline Library] Error:', error);
            toastr.error('Failed to load offline library', 'Error');
        }
    });

    // Delete offline chapter
    window.deleteOfflineChapter = async function(chapterId) {
        try {
            const result = await Swal.fire({
                title: 'Delete Chapter?',
                text: 'This will remove the chapter from your offline storage.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#6c757d',
                confirmButtonText: '<i class="fas fa-trash me-2"></i>Delete',
                cancelButtonText: '<i class="fas fa-times me-2"></i>Cancel',
                customClass: {
                    popup: 'swal-dark-popup'
                }
            });
            
            if (result.isConfirmed) {
                showLoading();
                await window.offlineManager.deleteChapter(chapterId);
                hideLoading();
                
                toastr.success('Chapter deleted', 'Success');
                
                // Refresh library view
                $('#offlineLibraryBtn').click();
                
                // Update current button if this is the current chapter
                if (chapterId === '685359506c8186610a03d5c4') {
                    await updateDownloadButton();
                }
            }
        } catch (error) {
            hideLoading();
            console.error('[Delete] Error:', error);
            toastr.error('Failed to delete chapter', 'Error');
        }
    };

    // Clear offline chapters for current title
    window.clearOfflineChaptersForTitle = async function() {
        try {
            const allChapters = await window.offlineManager.getAllChapters();
            const chapters = allChapters.filter(chapter => chapter.titleId === titleId);
            
            if (chapters.length === 0) {
                toastr.info('No chapters to clear for this title');
                return;
            }
            
            const result = await Swal.fire({
                title: 'Clear All Chapters?',
                html: `
                    <div class="text-start">
                        <p>This will delete <strong>${chapters.length} chapter(s)</strong> of this title from your offline storage.</p>
                        <p class="text-warning"><i class="fas fa-exclamation-triangle me-1"></i>This action cannot be undone!</p>
                    </div>
                `,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#6c757d',
                confirmButtonText: '<i class="fas fa-trash-alt me-2"></i>Clear All',
                cancelButtonText: '<i class="fas fa-times me-2"></i>Cancel',
                customClass: {
                    popup: 'swal-dark-popup',
                    htmlContainer: 'text-white'
                }
            });
            
            if (result.isConfirmed) {
                showLoading();
                
                // Show progress
                Swal.fire({
                    title: 'Clearing...',
                    html: `Deleting ${chapters.length} chapter(s)...`,
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    showConfirmButton: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });
                
                // Delete chapters one by one
                for (const chapter of chapters) {
                    await window.offlineManager.deleteChapter(chapter.chapterId);
                }
                
                hideLoading();
                
                Swal.fire({
                    title: '<i class="fas fa-check-circle me-2"></i>Success!',
                    text: `All ${chapters.length} chapter(s) have been deleted from offline storage.`,
                    icon: 'success',
                    confirmButtonColor: '#3085d6',
                    confirmButtonText: '<i class="fas fa-check me-2"></i>OK',
                    customClass: {
                        popup: 'swal-dark-popup'
                    }
                });
                
                toastr.success('All chapters of this title cleared', 'Success');
                
                // Update current button
                await updateDownloadButton();
            }
        } catch (error) {
            hideLoading();
            console.error('[Clear All] Error:', error);
            Swal.fire({
                title: '<i class="fas fa-times-circle me-2"></i>Error!',
                text: 'Failed to clear chapters. Please try again.',
                icon: 'error',
                confirmButtonColor: '#d33',
                confirmButtonText: '<i class="fas fa-check me-2"></i>OK',
                customClass: {
                    popup: 'swal-dark-popup'
                }
            });
        }
    };

    // Initialize offline features
    $(document).ready(async function() {
        try {
            // Initialize offline manager
            await window.offlineManager.init();
            console.log('[Offline] Manager initialized');
            
            // Update download button state
            await updateDownloadButton();
            
        } catch (error) {
            console.error('[Offline] Initialization error:', error);
            
            // Disable download buttons and show helpful error
            $('#downloadChapterBtn').prop('disabled', true).attr('title', 'Offline download not available');
            $('#offlineLibraryBtn').prop('disabled', true).attr('title', 'Offline library not available');
            
            // Show error based on error code
            if (error.code === 'QUOTA_EXCEEDED') {
                console.warn('[Offline] Storage full - download features disabled');
                
                // Show one-time notification
                if (!sessionStorage.getItem('offlineErrorShown')) {
                    sessionStorage.setItem('offlineErrorShown', 'true');
                    
                    setTimeout(() => {
                        toastr.warning(
                            'Browser storage is full. Download features are disabled. ' +
                            'Please free up space in browser settings.',
                            'Storage Full',
                            { timeOut: 8000 }
                        );
                    }, 2000);
                }
            } else if (error.code === 'BLOCKED') {
                console.warn('[Offline] IndexedDB blocked - download features disabled');
                
                if (!sessionStorage.getItem('offlineErrorShown')) {
                    sessionStorage.setItem('offlineErrorShown', 'true');
                    
                    setTimeout(() => {
                        toastr.info(
                            'Offline download is not available in private browsing mode or due to browser settings.',
                            'Download Unavailable',
                            { timeOut: 6000 }
                        );
                    }, 2000);
                }
            } else {
                console.warn('[Offline] Cannot initialize - download features disabled');
            }
        }
    });
    
    // Add click handlers for disabled buttons
    $(document).on('click', '#downloadChapterBtn:disabled, #offlineLibraryBtn:disabled', function(e) {
        e.preventDefault();
        
        Swal.fire({
            title: '<i class="fas fa-exclamation-triangle me-2"></i>Download Unavailable',
            html: `
                <div class="text-start">
                    <p class="mb-3">Offline download features are not available because:</p>
                    <ul class="text-secondary">
                        <li>Browser storage might be full</li>
                        <li>You might be in private/incognito mode</li>
                        <li>Browser settings might block storage</li>
                    </ul>
                    <p class="mt-3"><strong>Solutions:</strong></p>
                    <ul class="text-secondary">
                        <li>Clear browser cache and cookies</li>
                        <li>Disable private browsing mode</li>
                        <li>Check browser storage permissions</li>
                        <li>Free up disk space on your device</li>
                    </ul>
                </div>
            `,
            icon: 'warning',
            confirmButtonColor: '#3085d6',
            confirmButtonText: '<i class="fas fa-check me-2"></i>OK',
            customClass: {
                popup: 'swal-dark-popup',
                htmlContainer: 'text-white'
            }
        });
    });
</script>
<style>
    .custom-pagination .page-item {
        list-style: none;
    }

    .custom-pagination .page-link {
        background-color: #2e2e2e;
        color: #fff;
        border: none;
        border-radius: 6px;
        padding: 8px 12px;
        min-width: 38px;
        height: 38px;
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 500;
        transition: all 0.2s ease-in-out;
    }

    .custom-pagination .page-link:hover {
        background-color: #444;
        text-decoration: none;
        color: #fff;
    }

    .custom-pagination .page-item.disabled .page-link {
        opacity: 0.4;
        pointer-events: none;
    }

    .custom-pagination .page-item.active .page-link {
        background: linear-gradient(135deg, #ff416c, #ff4b2b);
        color: white;
        font-weight: 600;
    }
</style>

<script>
    // Build page url
    function buildPageUrl(targetPage, passedFilters) {
        const filterValues = passedFilters || (typeof window.filterValues !== 'undefined' ? window.filterValues : {});
        const url = new URL(window.location.href);
        const params = new URLSearchParams();

        for (const key in filterValues) {
            const value = filterValues[key];

            if (Array.isArray(value)) {
                // If is array, join by comma (even empty array, will become empty string)
                params.set(key, value.join(','));
            } else {
                // Assign normally
                params.set(key, value);
            }
        }

        // search_input
        if (typeof window.searchInput !== 'undefined') {
            params.set('search_input', window.searchInput ?? '');
        }

        // Set page
        params.set('page', targetPage);

        return `${url.origin}${url.pathname}?${params.toString()}`;
    }
    // Render pagination
    function renderPagination(paginationData) {
        const {
            current_page,
            last_page
        } = paginationData;
        // Set current page
        const container = $('#pagination-container');
        container.empty();

        const pagination = $('<ul class="pagination pagination-sm mb-0"></ul>');

        const createItem = (page, html, disabled = false, active = false) => {
            const li = $('<li class="page-item"></li>');
            if (disabled) li.addClass('disabled');
            if (active) li.addClass('active');

            const a = $('<a class="page-link"></a>');
            a.html(html);

            if (!disabled && !active) {
                a.attr('href', buildPageUrl(page));
            } else {
                a.attr('href', 'javascript:void(0)');
            }

            li.append(a);
            return li;
        };

        // First
        pagination.append(createItem(1, '<i class="fas fa-angles-left"></i>', current_page === 1));

        // Prev
        pagination.append(createItem(current_page - 1, '<i class="fas fa-angle-left"></i>', current_page === 1));

        const range = 2;
        const pages = [];

        // Always show first page
        pages.push(1);

        // Add ... if needed
        if (current_page - range > 2) {
            pages.push('...');
        }

        // Add middle range
        for (let i = current_page - range; i <= current_page + range; i++) {
            if (i > 1 && i < last_page) {
                pages.push(i);
            }
        }

        // Add ... if needed
        if (current_page + range < last_page - 1) {
            pages.push('...');
        }

        // Always show last page
        if (last_page > 1) {
            pages.push(last_page);
        }

        // Render each page
        pages.forEach(p => {
            if (p === '...') {
                pagination.append('<li class="page-item disabled"><span class="page-link">…</span></li>');
            } else {
                pagination.append(createItem(p, p, false, p === current_page));
            }
        });

        // Next
        pagination.append(createItem(current_page + 1, '<i class="fas fa-angle-right"></i>', current_page === last_page));

        // Last
        pagination.append(createItem(last_page, '<i class="fas fa-angles-right"></i>', current_page === last_page));

        container.append(pagination);
    }

    function addTitelToLibrary(id) {
        Swal.fire({
            html: `<div class="align-items-start gap-2">
                        <div class="flex-grow-1">
                            <label for="readingStatus" class="form-label fw-bold text-white">Reading Status</label>
                        </div>
                        <div class="d-flex  gap-2 align-items-center justify-content-between">
                            <div class="flex-grow-1">
                                <select class="form-select border-2 border-danger text-white bg-dark" id="readingStatus">
                                    <option value="reading" selected>Reading</option>
                                    <option value="on_hold">On Hold</option>
                                    <option value="dropped">Dropped</option>
                                    <option value="plan_to_read">Plan to Read</option>
                                    <option value="completed">Completed</option>
                                    <option value="re_reading">Re-Reading</option>
                                </select>
                            </div>
                            <div class="d-flex align-items-center justify-content-center flex-shrink-0" style="background-color: #2e2e2e; border-radius: 6px; padding: 0.5rem 1rem;">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="notifySwitch" checked >
                                    <i class="fas fa-question-circle" style="cursor: pointer; font-size: 1.2rem;" title="Notify for new chapter"></i>
                                </div>
                            </div>
                        </div>
                    </div>`,
            showCancelButton: true,
            showConfirmButton: true,
            confirmButtonText: '<b>Add to library</b>',
            cancelButtonText: '<b>Cancel</b>',
            focusConfirm: false,
            customClass: {
                popup: 'swal2-dark my-swal2-dark',
                confirmButton: 'comic-btn-primary',
                cancelButton: 'btn btn-secondary',
            },
            width: 500,
            padding: '2.5em 2em 2em 2em',
            preConfirm: () => {
                const readingStatus = document.getElementById('readingStatus').value;
                const notify = document.getElementById('notifySwitch').checked;
                if (!readingStatus || readingStatus == 'none' || readingStatus == '' || readingStatus == null || readingStatus == 'undefined') {
                    Swal.showValidationMessage('Please select a reading status!');
                    return false;
                }
                return {
                    readingStatus,
                    notify
                };
            },
            didOpen: () => {
                // add class dark to SweetAlert2
                document.querySelector('.swal2-popup').classList.add('swal2-dark', 'my-swal2-dark');
            }
        }).then((result) => {
            if (result.isConfirmed) {
                addToLibrary(id, result.value.readingStatus, result.value.notify);
            }
        });
    }
    // Add to library
    function addToLibrary(id, readingStatus, notify) {
        showLoading();
        $.ajax({
            url: '/api/v1/library/add-to-library/',
            type: 'POST',
            data: {
                readingStatus: readingStatus,
                notify: notify,
                titleId: id
            },
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            },
            success: function(response) {
                hideLoading();
                if (response.code == 200) {
                    Swal.fire({
                        title: 'Title added to library',
                        icon: 'success',
                        showConfirmButton: false,
                        timer: 1500
                    });
                } else {
                    Swal.fire({
                        title: response.message,
                        icon: 'error',
                        showConfirmButton: false,
                        timer: 1500
                    });
                }
            },
            error: function(xhr, status, error) {
                hideLoading();
                // console.log(xhr.responseText);
                Swal.fire({
                    title: 'Title added to library failed',
                    icon: 'error',
                    showConfirmButton: false,
                    timer: 1500
                });
            }
        });
    }
    // Set cookie
    function setCookie(name, value, days = 7) {
        const expires = new Date(Date.now() + days * 86400).toUTCString();
        document.cookie = name + '=' + encodeURIComponent(value) + '; expires=' + expires + '; path=/';
    }
    // Get cookie
    function getCookie(name) {
        return document.cookie.split('; ').reduce((r, v) => {
            const parts = v.split('=');
            return parts[0] === name ? decodeURIComponent(parts[1]) : r
        }, '');
    }
    // Render pagination
    function renderPaginationChapter(paginationData, containerId) {
        const {
            current_page,
            last_page
        } = paginationData;
        // Set current page
        const container = $('#' + containerId);
        container.empty();

        const pagination = $('<ul class="pagination pagination-sm mb-0"></ul>');

        const createItem = (page, html, disabled = false, active = false) => {
            const li = $('<li class="page-item"></li>');
            if (disabled) li.addClass('disabled');
            if (active) li.addClass('active');

            const a = $('<a class="page-link" style="cursor: pointer;"></a>');
            a.html(html);

            if (!disabled && !active) {
                a.attr('onclick', `setPageChapter(${page})`);
            } else {
                a.attr('href', 'javascript:void(0)');
            }

            li.append(a);
            return li;
        };

        // First
        pagination.append(createItem(1, '<i class="fas fa-angles-left"></i>', current_page === 1));

        // Prev
        pagination.append(createItem(current_page - 1, '<i class="fas fa-angle-left"></i>', current_page === 1));

        const range = 2;
        const pages = [];

        // Always show first page
        pages.push(1);

        // Add ... if needed
        if (current_page - range > 2) {
            pages.push('...');
        }

        // Add middle range
        for (let i = current_page - range; i <= current_page + range; i++) {
            if (i > 1 && i < last_page) {
                pages.push(i);
            }
        }

        // Add ... if needed
        if (current_page + range < last_page - 1) {
            pages.push('...');
        }

        // Always show last page
        if (last_page > 1) {
            pages.push(last_page);
        }

        // Render each page
        pages.forEach(p => {
            if (p === '...') {
                pagination.append('<li class="page-item disabled"><span class="page-link">…</span></li>');
            } else {
                pagination.append(createItem(p, p, false, p === current_page));
            }
        });

        // Next
        pagination.append(createItem(current_page + 1, '<i class="fas fa-angle-right"></i>', current_page === last_page));

        // Last
        pagination.append(createItem(last_page, '<i class="fas fa-angles-right"></i>', current_page === last_page));

        container.append(pagination);
    }
    /**
     * Pre‑select selected values to TomSelect instance
     * @param {string|HTMLElement} targetSelector - selector (or element) of <select> TomSelect
     * @param {Array<string>} values - array of values (value) you want to select
     */
    function renderSelectedToTomSelect(targetSelector, values) {
        // Get element (or use selector)
        const el = (typeof targetSelector === 'string') ?
            document.querySelector(targetSelector) :
            targetSelector;
        if (!el || !el.tomselect) {
            console.warn('TomSelect instance not found on', targetSelector);
            return;
        }

        const ts = el.tomselect;

        // 1) Clear all selected items (if any)
        ts.clear();

        // 2) If you want to add each item
        // values.forEach(v => ts.addItem(v));

        // Or 3) Use setValue to set the entire array of values at once
        ts.setValue(values);

        // 4) Optionally: if you want to trigger change event to catch by other listeners:
        el.dispatchEvent(new Event('change', {
            bubbles: true
        }));
    }
</script>
<!-- Script for owl carousel -->
<script>
    // Loading animation
    function showLoadingSpinner(id) {
        const carousel = $('#owl-comics-' + id);

        // Ensure the element has a minimum height
        carousel.css({
            'min-height': '200px',
            'display': 'flex',
            'align-items': 'center',
            'justify-content': 'center'
        });
        
        carousel.html(`
            <div class="d-flex justify-content-center align-items-center w-100" style="height: 200px; background-color: rgba(0,0,0,0.1); border-radius: 8px;">
                <div class="spinner-border text-primary me-3" role="status" style="width: 3rem; height: 3rem;">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <div class="text-center">
                    <div class="text-white mb-1">Loading...</div>
                    <small class="text-muted">Please wait for a moment</small>
                </div>
            </div>
        `);
        
    }
    // Initialize Owl Carousel
    function initializeCarousel(id) {
        $('#owl-comics-' + id).owlCarousel({
            loop: false,
            margin: 16,
            nav: true,
            dots: false,
            autoplay: true,
            autoplayTimeout: 5000,
            autoplayHoverPause: true,
            responsive: {
                0: {
                    items: 2,
                    margin: 8
                },
                576: {
                    items: 3,
                    margin: 12
                },
                768: {
                    items: 4,
                    margin: 16
                },
                992: {
                    items: 5,
                    margin: 16
                },
                1200: {
                    items: 6,
                    margin: 16
                },
                1400: {
                    items: 7,
                    margin: 16
                }
            },
            navText: [
                '<i class="fas fa-chevron-left"></i>',
                '<i class="fas fa-chevron-right"></i>'
            ],
            onInitialized: function() {
                // Owl Carousel initialized successfully
            }
        });
    }
    // Function to create comic item HTML
    function createComicItem(comic, index) {
        const rankClass = index === 0 ? 'rank-1' : index === 1 ? 'rank-2' : index === 2 ? 'rank-3' : '';
        
        return `
            <div class="comic-item">
                <div class="comic-cover">
                    <a href="${comic.url}" title="${comic.name}">
                        <img src="${comic.cover}" alt="${comic.name}" loading="lazy" class="comic-cover ${comic.isAdult ? 'adult-cover' : ''}">
                        <div class="comic-overlay">
                            ${comic.name}
                        </div>
                        <div class="comic-rank ${rankClass}">
                            ${index + 1}
                        </div>
                    </a>
                </div>
                <div class="comic-stats">
                    <div class="stats-item">
                        <i class="fas fa-clock"></i>
                        ${comic.updated_at}
                    </div>
                    <div class="stats-item">
                        <img src="${comic.languageFlag}" alt="${comic.languageFlag}" style="width: 12px;">
                    </div>
                    <div class="stats-item">
                        ${comic.status}
                    </div>
                </div>
            </div>
        `;
    }
    // Function to load data without showing loading spinner
    async function loadDataCarousel(type, id) {
        try {
            // Call Ajax to get data
            const response = await $.ajax({
                url: '/api/v1/title/search/',
                data: {
                    search_type: type
                },
                headers: {
                    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                },
                type: 'POST'
            });
            
            if (response.code == 200) {
                generateComicItems(response.data, id);
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: response.message
                });
            }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error connecting',
                text: 'Cannot load data. Please try again.'
            });
        }
    }
    // Generate comic items
    function generateComicItems(comicsData, id) {
        const carousel = $('#owl-comics-' + id);
        carousel.empty();

        comicsData.forEach((comic, index) => {
            const comicItem = createComicItem(comic, index);
            carousel.append(comicItem);
        });
    }
    function checkElementVisibilityCarousel(elementId, callback, options = {}) {
        // Detect device type
        const isMobile = window.innerWidth <= 768;
        
        const defaultOptions = {
            threshold: isMobile ? 0.3 : 0.5,  // Mobile: 30%, Desktop: 50%
            rootMargin: isMobile ? '50px' : '100px',  // Mobile: 50px, Desktop: 100px
            once: true
        };

        const config = {
            ...defaultOptions,
            ...options
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    // Call callback function when element is visible
                    if (typeof callback === 'function') {
                        // Pass device info to callback
                        callback(entry.target, {
                            isMobile: isMobile,
                            deviceType: isMobile ? 'mobile' : 'desktop',
                            screenWidth: window.innerWidth
                        });
                    }

                    // If once = true, stop observing after trigger
                    if (config.once) {
                        observer.unobserve(entry.target);
                    }
                }
            });
        }, {
            threshold: config.threshold,
            rootMargin: config.rootMargin
        });

        // Find element by id and start observing
        const targetElement = document.getElementById(elementId);
        if (targetElement) {
            observer.observe(targetElement);
            return observer;
        } else {
            console.warn(`Element with id "${elementId}" not found`);
            return null;
        }
    }
    // Resize
    // Handle window resize
    $(window).resize(function() {
        if ($('#owl-comics-recommend').length) {
            $('#owl-comics-recommend').trigger('refresh.owl.carousel');
        }
        if ($('#owl-comics-recent-read').length) {
            $('#owl-comics-recent-read').trigger('refresh.owl.carousel');
        }
        if ($('#owl-comics-recent-chapter-read').length) {
            $('#owl-comics-recent-chapter-read').trigger('refresh.owl.carousel');
        }
    });
</script>
<script>
    // function check element visibility with desktop/mobile support
    function checkElementVisibility(elementId, callback, options = {}) {
        // Detect device type
        const isMobile = window.innerWidth <= 768;
        
        const defaultOptions = {
            threshold: isMobile ? 0.3 : 0.5,  // Mobile: 30%, Desktop: 50%
            rootMargin: isMobile ? '50px' : '100px',  // Mobile: 50px, Desktop: 100px
            once: true
        };

        const config = {
            ...defaultOptions,
            ...options
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    // Call callback function when element is visible
                    if (typeof callback === 'function') {
                        // Pass device info to callback
                        callback(entry.target, {
                            isMobile: isMobile,
                            deviceType: isMobile ? 'mobile' : 'desktop',
                            screenWidth: window.innerWidth
                        });
                    }

                    // If once = true, stop observing after trigger
                    if (config.once) {
                        observer.unobserve(entry.target);
                    }
                }
            });
        }, {
            threshold: config.threshold,
            rootMargin: config.rootMargin
        });

        // Find element by id and start observing
        const targetElement = document.getElementById(elementId);
        if (targetElement) {
            observer.observe(targetElement);
            return observer;
        } else {
            console.warn(`Element with id "${elementId}" not found`);
            return null;
        }
    }

    
</script>

<!-- PWA Registration -->
<!-- <script src="/public/js/pwa-register.js"></script> --><style>
    /* CSS for loading spinner (using classes of Bootstrap when possible) */
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(2px);
        z-index: 9999;
        display: none;
    }

    .loading-overlay.show {
        display: block;
    }

    .spinner-container {
        min-width: 180px;
    }

    /* Animation for spinner */
    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: scale(0.8);
        }

        to {
            opacity: 1;
            transform: scale(1);
        }
    }

    .spinner-container {
        animation: fadeIn 0.3s ease-out forwards;
    }
</style>

<!-- Loading Spinner -->
<div class="loading-overlay" id="loadingSpinner" style="display: none;">
    <div class="position-absolute top-50 start-50 translate-middle">
        <div class="spinner-container bg-white p-4 rounded-3 shadow-sm">
            <div class="d-flex flex-column align-items-center">
                <div class="spinner-border text-primary mb-3" role="status" style="width: 3rem; height: 3rem;">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mb-0 fw-medium text-secondary">Processing...</p>
            </div>
        </div>
    </div>
</div>
<script>
    // Function to show loading
    function showLoading() {
        // Add loading class to body or show spinner
        // $('body').addClass('loading');
        // Or if you have a custom spinner:
        $('#loadingSpinner').show();
    }

    // Function to hide loading
    function hideLoading() {
        // Remove loading class from body
        // $('body').removeClass('loading');
        // Or if you have a custom spinner:
        $('#loadingSpinner').hide();
    }
</script>
<style>
    .loader {
        display: block;
        position: relative;
        height: 12px;
        width: 80%;
        min-width: 300px;
        border: 1px solid #fff;
        border-radius: 10px;
        overflow: hidden;
    }

    .loader:after {
        content: '';
        position: absolute;
        left: 0;
        top: 0;
        height: 100%;
        width: 0;
        background: var(--primary-color);
        animation: 6s prog ease-in infinite;
    }

    @keyframes prog {
        to {
            width: 100%;
        }
    }
</style>
<!-- Loading Spinner -->
<div class="loading-overlay" id="loadingSpinnerDownload">
    <div class="position-absolute top-50 start-50 translate-middle">
        <div class="d-flex flex-column align-items-center">
            <span class="loader"></span>
            <p class="mb-0 fw-medium text-white">Downloading file in background, please wait...</p>
        </div>
    </div>
</div>
<script>
    // Function to show loading
    function showLoadingDownload() {
        // Add loading class to body or show spinner
        // $('body').addClass('loading');
        // Or if you have a custom spinner:
        $('#loadingSpinnerDownload').show();
    }

    // Function to hide loading
    function hideLoadingDownload() {
        // Remove loading class from body
        // $('body').removeClass('loading');
        // Or if you have a custom spinner:
        $('#loadingSpinnerDownload').hide();
    }
</script><!-- Large Modal -->
<div class="modal fade" id="largeModal" tabindex="-1" aria-labelledby="largeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="largeModalLabel">Large Modal Title</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Add content here
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Chapter Select Modal -->
<div class="modal fade" id="chapterSelectModal" tabindex="-1" aria-labelledby="chapterSelectModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-fullscreen">
        <div class="modal-content bg-dark text-white">
            <div class="modal-header border-secondary">
                <h5 class="modal-title" id="chapterSelectModalLabel">
                    <i class="fas fa-list me-2 text-primary"></i>Choose Chapter
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body d-flex flex-column">
                <!-- Search Chapter and Sort -->
                <div class="d-flex justify-content-between align-items-center mb-3 gap-2">
                    <div class="sort-toggle-container">
                        <button class="btn btn-outline-secondary btn-sm" type="button" id="sortToggleBtn" title="Toggle sort order">
                            <i class="fas fa-sort-amount-down"></i>
                            <span id="sortToggleText" class="d-none d-md-inline ms-1">Newest</span>
                        </button>
                    </div>
                    <div class="search-chapter-modal-container">
                    <div class="input-group input-group-sm">
                    <span class="input-group-text" title="To search exact, add # at the end" style="cursor: help;">
                        <i class="fas fa-info-circle"></i>
                    </span>
                    <input type="text" class="form-control" id="searchChapterInput" placeholder="Search chapter (e.g: 1, 10 or 1# for exact)">
                    <button class="btn" type="button" id="clearSearchBtn">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                    </div>
                </div>

                <div id="chaptersList" class="flex-grow-1" role="list" aria-label="Chapter list"><div class="volume-chapters" style="display:block;">
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 currentActive" style="background: rgba(255, 103, 64, 0.1) !important; border: 1px solid rgba(255, 103, 64, 0.3) !important;">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 37</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="685359506c8186610a03d5c4" style="background: rgba(255, 103, 64, 0.1) !important; border: 1px solid rgba(255, 103, 64, 0.5) !important;">
                <span class="badge" style="background:#d52b1e;color:#fff;">
            Russian
        </span><span class="badge" style="background:#00247d;color:#fff;">Vol 7</span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Vol. 7 Ch. 37 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/raikou.png" class="object-fit-contain" alt="Raikou" style="width: 18px;">
                Raikou
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>11 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>11
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '685359506c8186610a03d5c4')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '685359506c8186610a03d5c4')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-reading" onclick="window.location.href='https://mangaball.net/chapter-detail/685359506c8186610a03d5c4/'">
                    <i class="fas fa-book-open me-1"></i>Reading
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/685359506c8186610a03d5c4/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('685359506c8186610a03d5c4', 'Vol. 7 Ch. 37 ', 'https://mangaball.net/chapter-detail/685359506c8186610a03d5c4/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/685359506c8186610a03d5c4/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('685359506c8186610a03d5c4')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 36</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="6853594e6c8186610a03d57e">
                <span class="badge" style="background:#d52b1e;color:#fff;">
            Russian
        </span><span class="badge" style="background:#00247d;color:#fff;">Vol 6</span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Vol. 6 Ch. 36 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/raikou.png" class="object-fit-contain" alt="Raikou" style="width: 18px;">
                Raikou
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>11 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '6853594e6c8186610a03d57e')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '6853594e6c8186610a03d57e')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/6853594e6c8186610a03d57e/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/6853594e6c8186610a03d57e/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('6853594e6c8186610a03d57e', 'Vol. 6 Ch. 36 ', 'https://mangaball.net/chapter-detail/6853594e6c8186610a03d57e/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/6853594e6c8186610a03d57e/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('6853594e6c8186610a03d57e')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 35</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="685359516c8186610a03d5d8">
                <span class="badge" style="background:#d52b1e;color:#fff;">
            Russian
        </span><span class="badge" style="background:#00247d;color:#fff;">Vol 6</span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Vol. 6 Ch. 35 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/raikou.png" class="object-fit-contain" alt="Raikou" style="width: 18px;">
                Raikou
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>11 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '685359516c8186610a03d5d8')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '685359516c8186610a03d5d8')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/685359516c8186610a03d5d8/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/685359516c8186610a03d5d8/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('685359516c8186610a03d5d8', 'Vol. 6 Ch. 35 ', 'https://mangaball.net/chapter-detail/685359516c8186610a03d5d8/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/685359516c8186610a03d5d8/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('685359516c8186610a03d5d8')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 34</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="685359506c8186610a03d5ac">
                <span class="badge" style="background:#d52b1e;color:#fff;">
            Russian
        </span><span class="badge" style="background:#00247d;color:#fff;">Vol 6</span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Vol. 6 Ch. 34 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/raikou.png" class="object-fit-contain" alt="Raikou" style="width: 18px;">
                Raikou
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>11 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '685359506c8186610a03d5ac')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '685359506c8186610a03d5ac')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/685359506c8186610a03d5ac/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/685359506c8186610a03d5ac/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('685359506c8186610a03d5ac', 'Vol. 6 Ch. 34 ', 'https://mangaball.net/chapter-detail/685359506c8186610a03d5ac/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/685359506c8186610a03d5ac/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('685359506c8186610a03d5ac')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 33</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="6853594f6c8186610a03d597">
                <span class="badge" style="background:#d52b1e;color:#fff;">
            Russian
        </span><span class="badge" style="background:#00247d;color:#fff;">Vol 6</span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Vol. 6 Ch. 33 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/raikou.png" class="object-fit-contain" alt="Raikou" style="width: 18px;">
                Raikou
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>11 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '6853594f6c8186610a03d597')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '6853594f6c8186610a03d597')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/6853594f6c8186610a03d597/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/6853594f6c8186610a03d597/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('6853594f6c8186610a03d597', 'Vol. 6 Ch. 33 ', 'https://mangaball.net/chapter-detail/6853594f6c8186610a03d597/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/6853594f6c8186610a03d597/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('6853594f6c8186610a03d597')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 32</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="6853594e6c8186610a03d587">
                <span class="badge" style="background:#d52b1e;color:#fff;">
            Russian
        </span><span class="badge" style="background:#00247d;color:#fff;">Vol 6</span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Vol. 6 Ch. 32 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/raikou.png" class="object-fit-contain" alt="Raikou" style="width: 18px;">
                Raikou
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>11 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '6853594e6c8186610a03d587')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '6853594e6c8186610a03d587')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/6853594e6c8186610a03d587/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/6853594e6c8186610a03d587/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('6853594e6c8186610a03d587', 'Vol. 6 Ch. 32 ', 'https://mangaball.net/chapter-detail/6853594e6c8186610a03d587/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/6853594e6c8186610a03d587/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('6853594e6c8186610a03d587')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 31</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="685359516c8186610a03d5de">
                <span class="badge" style="background:#d52b1e;color:#fff;">
            Russian
        </span><span class="badge" style="background:#00247d;color:#fff;">Vol 6</span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Vol. 6 Ch. 31 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/raikou.png" class="object-fit-contain" alt="Raikou" style="width: 18px;">
                Raikou
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>11 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '685359516c8186610a03d5de')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '685359516c8186610a03d5de')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/685359516c8186610a03d5de/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/685359516c8186610a03d5de/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('685359516c8186610a03d5de', 'Vol. 6 Ch. 31 ', 'https://mangaball.net/chapter-detail/685359516c8186610a03d5de/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/685359516c8186610a03d5de/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('685359516c8186610a03d5de')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 30</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="685359506c8186610a03d5cc">
                <span class="badge" style="background:#d52b1e;color:#fff;">
            Russian
        </span><span class="badge" style="background:#00247d;color:#fff;">Vol 5</span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Vol. 5 Ch. 30 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/raikou.png" class="object-fit-contain" alt="Raikou" style="width: 18px;">
                Raikou
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>11 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '685359506c8186610a03d5cc')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '685359506c8186610a03d5cc')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/685359506c8186610a03d5cc/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/685359506c8186610a03d5cc/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('685359506c8186610a03d5cc', 'Vol. 5 Ch. 30 ', 'https://mangaball.net/chapter-detail/685359506c8186610a03d5cc/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/685359506c8186610a03d5cc/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('685359506c8186610a03d5cc')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 29</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="6853594e6c8186610a03d581">
                <span class="badge" style="background:#d52b1e;color:#fff;">
            Russian
        </span><span class="badge" style="background:#00247d;color:#fff;">Vol 5</span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Vol. 5 Ch. 29 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/raikou.png" class="object-fit-contain" alt="Raikou" style="width: 18px;">
                Raikou
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>11 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '6853594e6c8186610a03d581')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '6853594e6c8186610a03d581')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/6853594e6c8186610a03d581/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/6853594e6c8186610a03d581/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('6853594e6c8186610a03d581', 'Vol. 5 Ch. 29 ', 'https://mangaball.net/chapter-detail/6853594e6c8186610a03d581/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/6853594e6c8186610a03d581/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('6853594e6c8186610a03d581')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 28</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="685359506c8186610a03d5b0">
                <span class="badge" style="background:#d52b1e;color:#fff;">
            Russian
        </span><span class="badge" style="background:#00247d;color:#fff;">Vol 5</span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Vol. 5 Ch. 28 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/raikou.png" class="object-fit-contain" alt="Raikou" style="width: 18px;">
                Raikou
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>11 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '685359506c8186610a03d5b0')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '685359506c8186610a03d5b0')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/685359506c8186610a03d5b0/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/685359506c8186610a03d5b0/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('685359506c8186610a03d5b0', 'Vol. 5 Ch. 28 ', 'https://mangaball.net/chapter-detail/685359506c8186610a03d5b0/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/685359506c8186610a03d5b0/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('685359506c8186610a03d5b0')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 27</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="6853594f6c8186610a03d593">
                <span class="badge" style="background:#d52b1e;color:#fff;">
            Russian
        </span><span class="badge" style="background:#00247d;color:#fff;">Vol 5</span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Vol. 5 Ch. 27 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/raikou.png" class="object-fit-contain" alt="Raikou" style="width: 18px;">
                Raikou
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>11 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '6853594f6c8186610a03d593')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '6853594f6c8186610a03d593')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/6853594f6c8186610a03d593/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/6853594f6c8186610a03d593/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('6853594f6c8186610a03d593', 'Vol. 5 Ch. 27 ', 'https://mangaball.net/chapter-detail/6853594f6c8186610a03d593/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/6853594f6c8186610a03d593/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('6853594f6c8186610a03d593')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 26</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="6853594f6c8186610a03d5aa">
                <span class="badge" style="background:#d52b1e;color:#fff;">
            Russian
        </span><span class="badge" style="background:#00247d;color:#fff;">Vol 5</span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Vol. 5 Ch. 26 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/raikou.png" class="object-fit-contain" alt="Raikou" style="width: 18px;">
                Raikou
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>11 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '6853594f6c8186610a03d5aa')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '6853594f6c8186610a03d5aa')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/6853594f6c8186610a03d5aa/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/6853594f6c8186610a03d5aa/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('6853594f6c8186610a03d5aa', 'Vol. 5 Ch. 26 ', 'https://mangaball.net/chapter-detail/6853594f6c8186610a03d5aa/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/6853594f6c8186610a03d5aa/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('6853594f6c8186610a03d5aa')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 25</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="6853594e6c8186610a03d58c">
                <span class="badge" style="background:#d52b1e;color:#fff;">
            Russian
        </span><span class="badge" style="background:#00247d;color:#fff;">Vol 5</span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Vol. 5 Ch. 25 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/raikou.png" class="object-fit-contain" alt="Raikou" style="width: 18px;">
                Raikou
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>11 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '6853594e6c8186610a03d58c')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '6853594e6c8186610a03d58c')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/6853594e6c8186610a03d58c/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/6853594e6c8186610a03d58c/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('6853594e6c8186610a03d58c', 'Vol. 5 Ch. 25 ', 'https://mangaball.net/chapter-detail/6853594e6c8186610a03d58c/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/6853594e6c8186610a03d58c/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('6853594e6c8186610a03d58c')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 24</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="685359516c8186610a03d5d3">
                <span class="badge" style="background:#d52b1e;color:#fff;">
            Russian
        </span><span class="badge" style="background:#00247d;color:#fff;">Vol 4</span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Vol. 4 Ch. 24 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/raikou.png" class="object-fit-contain" alt="Raikou" style="width: 18px;">
                Raikou
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>11 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '685359516c8186610a03d5d3')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '685359516c8186610a03d5d3')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/685359516c8186610a03d5d3/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/685359516c8186610a03d5d3/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('685359516c8186610a03d5d3', 'Vol. 4 Ch. 24 ', 'https://mangaball.net/chapter-detail/685359516c8186610a03d5d3/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/685359516c8186610a03d5d3/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('685359516c8186610a03d5d3')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 23</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="6853594f6c8186610a03d5a3">
                <span class="badge" style="background:#d52b1e;color:#fff;">
            Russian
        </span><span class="badge" style="background:#00247d;color:#fff;">Vol 4</span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Vol. 4 Ch. 23 
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/raikou.png" class="object-fit-contain" alt="Raikou" style="width: 18px;">
                Raikou
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>11 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '6853594f6c8186610a03d5a3')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '6853594f6c8186610a03d5a3')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/6853594f6c8186610a03d5a3/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/6853594f6c8186610a03d5a3/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('6853594f6c8186610a03d5a3', 'Vol. 4 Ch. 23 ', 'https://mangaball.net/chapter-detail/6853594f6c8186610a03d5a3/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/6853594f6c8186610a03d5a3/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('6853594f6c8186610a03d5a3')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 22</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="685359506c8186610a03d5d2">
                <span class="badge" style="background:#d52b1e;color:#fff;">
            Russian
        </span><span class="badge" style="background:#00247d;color:#fff;">Vol 4</span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>В деревне демонов
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/raikou.png" class="object-fit-contain" alt="Raikou" style="width: 18px;">
                Raikou
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>11 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '685359506c8186610a03d5d2')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '685359506c8186610a03d5d2')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/685359506c8186610a03d5d2/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/685359506c8186610a03d5d2/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('685359506c8186610a03d5d2', 'В деревне демонов', 'https://mangaball.net/chapter-detail/685359506c8186610a03d5d2/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/685359506c8186610a03d5d2/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('685359506c8186610a03d5d2')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 21</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="6853594e6c8186610a03d588">
                <span class="badge" style="background:#d52b1e;color:#fff;">
            Russian
        </span><span class="badge" style="background:#00247d;color:#fff;">Vol 4</span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Коммуникационное оборудование и лесные походы
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/raikou.png" class="object-fit-contain" alt="Raikou" style="width: 18px;">
                Raikou
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>11 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '6853594e6c8186610a03d588')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '6853594e6c8186610a03d588')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/6853594e6c8186610a03d588/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/6853594e6c8186610a03d588/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('6853594e6c8186610a03d588', 'Коммуникационное оборудование и лесные походы', 'https://mangaball.net/chapter-detail/6853594e6c8186610a03d588/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/6853594e6c8186610a03d588/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('6853594e6c8186610a03d588')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 20</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="685359506c8186610a03d5c8">
                <span class="badge" style="background:#d52b1e;color:#fff;">
            Russian
        </span><span class="badge" style="background:#00247d;color:#fff;">Vol 4</span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>Зелёная земля
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/raikou.png" class="object-fit-contain" alt="Raikou" style="width: 18px;">
                Raikou
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>11 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '685359506c8186610a03d5c8')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '685359506c8186610a03d5c8')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/685359506c8186610a03d5c8/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/685359506c8186610a03d5c8/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('685359506c8186610a03d5c8', 'Зелёная земля', 'https://mangaball.net/chapter-detail/685359506c8186610a03d5c8/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/685359506c8186610a03d5c8/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('685359506c8186610a03d5c8')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 19</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="6853594f6c8186610a03d590">
                <span class="badge" style="background:#d52b1e;color:#fff;">
            Russian
        </span><span class="badge" style="background:#00247d;color:#fff;">Vol 4</span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>В деревне тёмных эльфов
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/raikou.png" class="object-fit-contain" alt="Raikou" style="width: 18px;">
                Raikou
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>11 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '6853594f6c8186610a03d590')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '6853594f6c8186610a03d590')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/6853594f6c8186610a03d590/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/6853594f6c8186610a03d590/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('6853594f6c8186610a03d590', 'В деревне тёмных эльфов', 'https://mangaball.net/chapter-detail/6853594f6c8186610a03d590/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/6853594f6c8186610a03d590/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('6853594f6c8186610a03d590')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div>
            <div class="chapter-block mb-2 p-1 rounded-3 bg-dark bg-opacity-75 ">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="chapter-number fw-bold">Ch. 18</div>
                </div>
                <div class="chapter-translations mt-2">
            <div class="chapter-translation d-flex align-items-center gap-2 mb-2 p-2 rounded-2 bg-secondary bg-opacity-10 flex-wrap" data-chapter-id="6853594e6c8186610a03d582">
                <span class="badge" style="background:#d52b1e;color:#fff;">
            Russian
        </span><span class="badge" style="background:#00247d;color:#fff;">Vol 3</span>
                
            <span class="group small text-primary">
                <i class="fas fa-pen me-1"></i>В деревню тёмных эльфов
            </span>
            <span class="group small text-info d-flex align-items-center gap-1">
                <img src="/storage/groups/icons/raikou.png" class="object-fit-contain" alt="Raikou" style="width: 18px;">
                Raikou
            </span>
            <span class="date small text-secondary">
                <i class="fas fa-clock me-1"></i>11 weeks ago
            </span>
            <span class="views small text-secondary">
                <i class="fas fa-eye me-1"></i>0
            </span>
            <span class="likes small text-danger" style="cursor: pointer;" onclick="callLikes(this, '6853594e6c8186610a03d582')">
                <i class="fas fa-heart me-1"></i>0
            </span>
            <span class="comments small text-info" onclick="showComments(this, '6853594e6c8186610a03d582')">
                <i class="fas fa-comment me-1"></i>0
            </span>
                
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-outline-primary btn-read" onclick="window.location.href='https://mangaball.net/chapter-detail/6853594e6c8186610a03d582/'">
                    <i class="fas fa-book-open me-1"></i>Read Now
                </button>
                
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="https://mangaball.net/chapter-detail/6853594e6c8186610a03d582/" target="_blank">
                            <i class="fas fa-external-link-alt me-2"></i>Open in New Tab
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="bookmarkChapter('6853594e6c8186610a03d582', 'В деревню тёмных эльфов', 'https://mangaball.net/chapter-detail/6853594e6c8186610a03d582/')">
                            <i class="fas fa-bookmark me-2"></i>Bookmark
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" onclick="copyChapterLink('https://mangaball.net/chapter-detail/6853594e6c8186610a03d582/')">
                            <i class="fas fa-copy me-2"></i>Copy Link
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item text-danger" href="#" onclick="reportChapter('6853594e6c8186610a03d582')">
                            <i class="fas fa-flag me-2"></i>Report
                        </a>
                    </li>
                </ul>
            </div>
            </div>
            </div></div></div></div></div>
                <div id="chaptersPagination" class="d-flex justify-content-center flex-shrink-0 mt-3" role="navigation" aria-label="Chapter pagination"><ul class="pagination pagination-sm mb-0"><li class="page-item disabled"><a class="page-link" style="cursor: pointer;" href="javascript:void(0)"><i class="fas fa-angles-left"></i></a></li><li class="page-item disabled"><a class="page-link" style="cursor: pointer;" href="javascript:void(0)"><i class="fas fa-angle-left"></i></a></li><li class="page-item active"><a class="page-link" style="cursor: pointer;" href="javascript:void(0)">1</a></li><li class="page-item"><a class="page-link" style="cursor: pointer;" onclick="setPageChapter(2)">2</a></li><li class="page-item"><a class="page-link" style="cursor: pointer;" onclick="setPageChapter(2)"><i class="fas fa-angle-right"></i></a></li><li class="page-item"><a class="page-link" style="cursor: pointer;" onclick="setPageChapter(2)"><i class="fas fa-angles-right"></i></a></li></ul></div>
            </div>
        </div>
    </div>
</div>
<style>
    /* Chapter Select Modal Styles */
    .nav-tabs .nav-link {
        color: #fff;
        border: 1px solid #444;
        background: transparent;
    }

    .nav-tabs .nav-link.active {
        background: linear-gradient(135deg, #ff6740, #ff8c42);
        border-color: #ff6740;
        color: white;
    }

    .nav-tabs .nav-link:hover {
        border-color: #ff6740;
        color: #ff6740;
    }

    .chapter-item {
        padding: 1rem;
        margin-bottom: 0.5rem;
        border-radius: 8px;
        border: 1px solid #444;
        background: rgba(255, 255, 255, 0.05);
        transition: all 0.3s ease;
        cursor: pointer;
    }

    .chapter-item:hover {
        background: rgba(255, 103, 64, 0.1);
        border-color: #ff6740;
        transform: translateX(5px);
    }

    .chapter-item.current {
        background: linear-gradient(135deg, rgba(255, 103, 64, 0.2), rgba(255, 140, 66, 0.2));
        border-color: #ff6740;
    }

    .translation-item {
        padding: 0.5rem;
        margin: 0.25rem 0;
        border-radius: 6px;
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid #555;
        transition: all 0.3s ease;
        cursor: pointer;
    }

    .translation-item:hover {
        background: rgba(255, 103, 64, 0.1);
        border-color: #ff6740;
    }

    .translation-item.current {
        background: rgba(255, 103, 64, 0.2);
        border-color: #ff6740;
    }

    .language-badge {
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
    }

    .volume-info {
        background: rgba(255, 103, 64, 0.1);
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
        border-left: 4px solid #ff6740;
    }
</style>

<!-- Share Modal -->
<div class="modal fade" id="shareModal" tabindex="-1" aria-labelledby="shareModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content bg-dark text-white">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="shareModalLabel">Share this content</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body text-center">
                <div class="d-flex justify-content-center gap-3 flex-wrap">
                    <a href="https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fmangaball.net%2Fchapter-detail%2F685359506c8186610a03d5c4%2F" id="share-facebook" class="btn btn-primary"><i class="fab fa-facebook-f"></i></a>
                    <a href="https://twitter.com/intent/tweet?url=https%3A%2F%2Fmangaball.net%2Fchapter-detail%2F685359506c8186610a03d5c4%2F" id="share-twitter" class="btn btn-info text-white"><i class="fab fa-twitter"></i></a>
                    <a href="https://t.me/share/url?url=https%3A%2F%2Fmangaball.net%2Fchapter-detail%2F685359506c8186610a03d5c4%2F" id="share-telegram" class="btn btn-primary"><i class="fab fa-telegram-plane"></i></a>
                    <a href="mailto:?subject=Check this out&amp;body=https%3A%2F%2Fmangaball.net%2Fchapter-detail%2F685359506c8186610a03d5c4%2F" id="share-email" class="btn btn-secondary"><i class="fas fa-envelope"></i></a>
                    <button class="btn btn-outline-light" id="copy-link"><i class="fas fa-link"></i></button>
                </div>
            </div>

            <div class="modal-footer border-0 justify-content-center">
                <small class="text-muted" id="share-url">https://mangaball.net/chapter-detail/685359506c8186610a03d5c4/</small>
            </div>
        </div>
    </div>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const url = window.location.href;

        document.getElementById('share-facebook').href = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`;
        document.getElementById('share-twitter').href = `https://twitter.com/intent/tweet?url=${encodeURIComponent(url)}`;
        document.getElementById('share-telegram').href = `https://t.me/share/url?url=${encodeURIComponent(url)}`;
        document.getElementById('share-email').href = `mailto:?subject=Check this out&body=${encodeURIComponent(url)}`;

        document.getElementById('share-url').textContent = url;

        document.getElementById('copy-link').addEventListener('click', function() {
            navigator.clipboard.writeText(url).then(function() {
                alert('Link copied to clipboard!');
            }).catch(function() {
                alert('Failed to copy link.');
            });
        });
    });
</script>
<!-- Comments Modal --> 
<!-- Modal -->
<div class="modal fade" id="commentsModal" tabindex="-1" aria-labelledby="commentsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable modal-fullscreen">
        <div class="modal-content bg-dark text-white">
            <div class="modal-header border-secondary">
                <h5 class="modal-title" id="commentsModalLabel">Comments</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>

                <input type="hidden" id="commentObjectId" value="">
                <input type="hidden" id="commentParentId" value="">
                <input type="hidden" id="commentStart" value="0">
                <input type="hidden" id="commentLimit" value="10">
            </div>
            <div class="modal-body d-flex flex-column" style="max-height: 100%;">
                <!-- Comment input -->
                <div class="mb-3 d-flex gap-2 align-items-center">
                    <div class="flex-grow-1">
                        <textarea id="commentInput" class="form-control bg-secondary text-white" rows="2" placeholder="Enter comment..."></textarea>
                    </div>
                    <div class="flex-shrink-0">
                        <button class="btn btn-primary btn-sm" id="submitCommentBtn">Send</button>
                    </div>
                </div>
                <!-- Comment list -->
                <div id="commentList" class="flex-grow-1 overflow-auto">
                    <div class="d-flex justify-content-center align-items-center">
                        <span class="spinner-border spinner-border-sm text-white"></span>
                        <span class="text-white ms-2">Loading...</span>
                    </div>
                </div>
                <!-- Load more -->
                <div class="mt-3 text-center">
                    <button id="loadMoreBtn" class="btn btn-outline-light btn-sm">Load more</button>
                </div>
            </div>
        </div>
    </div>
</div> 

<style>
    /* Search Chapter Modal Styles */
    .search-chapter-modal-container {
        width: 50%;
    }

    #sortChapterModalBtn {
        background-color: #232323;
        border: 1px solid #444;
        color: #fff;
        transition: all 0.3s ease;
        white-space: nowrap;
        padding: 0.375rem 0.75rem;
    }

    #sortChapterModalBtn:hover {
        background-color: #2a2a2a;
        border-color: #ff6740;
        color: #ff6740;
    }

    #sortChapterModalBtn.active {
        background-color: #ff6740;
        border-color: #ff6740;
        color: white;
    }

    .search-chapter-modal-container .input-group-text {
        background-color: #232323;
        border: 1px solid #444;
        border-right: 0 !important;
        color: #fff;
        transition: all 0.3s ease;
    }

    .search-chapter-modal-container .form-control {
        background-color: #232323;
        border: 1px solid #444 !important;
        border-left: 0 !important;
        border-right: 0 !important;
        color: #fff;
        transition: all 0.3s ease;
    }

    .search-chapter-modal-container .form-control::placeholder {
        color: #888;
    }

    .search-chapter-modal-container .form-control:focus {
        border-color: #ff6740 !important;
        border-left: 0 !important;
        border-right: 0 !important;
        box-shadow: 0 0 0 0.2rem rgba(255, 103, 64, 0.25);
        background-color: #2a2a2a;
        color: #fff;
        outline: none;
    }

    .search-chapter-modal-container .input-group:focus-within .input-group-text {
        border-color: #ff6740;
        border-right: 0 !important;
        background-color: #2a2a2a;
    }

    .search-chapter-modal-container .input-group:focus-within #clearSearchModalBtn {
        border-color: #ff6740;
        border-left: 0 !important;
    }

    #clearSearchModalBtn {
        background-color: #232323;
        border: 1px solid #444;
        border-left: 0 !important;
        color: #fff;
        transition: all 0.3s ease;
    }

    #clearSearchModalBtn:hover {
        background-color: #ff6740;
        border-color: #ff6740;
        color: white;
    }

    @media (max-width: 768px) {
        .search-chapter-modal-container {
            width: 100%;
        }
    }

    /* Comment Mention Highlight Styles */
    .mention-highlight {
        color: #ff6740;
        font-weight: 600;
        background: rgba(255, 103, 64, 0.15);
        padding: 2px 6px;
        border-radius: 4px;
        transition: all 0.2s ease;
        display: inline-block;
    }

    .mention-highlight:hover {
        background: rgba(255, 103, 64, 0.25);
        transform: scale(1.05);
    }
</style>

<script>
    $(document).ready(function() {
        // Search chapter modal input
        $('#searchChapterInput').on('input', function() {
            const value = $(this).val().trim();
            if (typeof handleSearchChapterModalChange === 'function') {
                handleSearchChapterModalChange(value);
            } else {
                console.log('Search chapter modal input changed:', value);
            }
        });

        // Clear search modal button
        $('#clearSearchBtn').on('click', function() {
            $('#searchChapterInput').val('');
            if (typeof handleSearchChapterModalChange === 'function') {
                handleSearchChapterModalChange('');
            }
        });
    });
</script><style>
    /* ------------------------------
   Bootstrap 5 Theme System
   Switchable via body class="theme-XYZ"
------------------------------ */
    /* Reset and helper: apply variables and transitions */
    body[class^="theme-"] {
        transition: background-color 0.3s, color 0.3s;
        background-color: var(--primary);
        color: var(--text);
    }

    /* ============================
   Theme Color Definitions
============================ */
    .theme-pokemon-1 {
        --primary: #191a1c;
        --primary-rgb: 25, 26, 28;
        --secondary: #111111;
        --secondary-rgb: 17, 17, 17;
        --accent: #ffc4a4;
        --accent-rgb: 255, 196, 164;
        --background: #000000;
        --text: #e0e0e0;
        --highlight: #e6a784;
        --highlight-rgb: 230, 167, 132;
        --button: #cc8a6b;
        --button-rgb: 204, 138, 107;
    }

    .theme-pokemon-2 {
        --primary: #191a1c;
        --primary-rgb: 25, 26, 28;
        --secondary: #111111;
        --secondary-rgb: 17, 17, 17;
        --accent: #5d7b6f;
        --accent-rgb: 93, 123, 96;
        --background: #000000;
        --text: #e0e0e0;
        --highlight: #a4c3a2;
        --highlight-rgb: 164, 195, 162;
        --button: #7b998c;
        --button-rgb: 123, 153, 140;
    }

    .theme-pokemon-3 {
        --primary: #191a1c;
        --primary-rgb: 25, 26, 28;
        --secondary: #111111;
        --secondary-rgb: 17, 17, 17;
        --accent: #b85b56;
        --accent-rgb: 184, 91, 86;
        --background: #000000;
        --text: #e0e0e0;
        --highlight: #de741c;
        --highlight-rgb: 222, 116, 28;
        --button: #fea8a7;
        --button-rgb: 254, 168, 167;
    }

    .theme-pokemon-4 {
        --primary: #191a1c;
        --primary-rgb: 25, 26, 28;
        --secondary: #111111;
        --secondary-rgb: 17, 17, 17;
        --accent: #2d99ae;
        --accent-rgb: 45, 153, 174;
        --background: #000000;
        --text: #e0e0e0;
        --highlight: #bcfefe;
        --highlight-rgb: 188, 239, 238;
        --button: #7fc1d2;
        --button-rgb: 127, 193, 210;
    }

    .theme-pokemon-5 {
        --primary: #191a1c;
        --primary-rgb: 25, 26, 28;
        --secondary: #111111;
        --secondary-rgb: 17, 17, 17;
        --accent: #5d4037;
        --accent-rgb: 255, 64, 129;
        --background: #000000;
        --text: #e0e0e0;
        --highlight: #4e342e;
        --highlight-rgb: 255, 47, 127;
        --button: #795548;
        --button-rgb: 255, 102, 154;
    }

    .theme-pokemon-6 {
        --primary: #191a1c;
        --primary-rgb: 25, 26, 28;
        --secondary: #111111;
        --secondary-rgb: 17, 17, 17;
        --accent: #e91e63;
        --accent-rgb: 233, 30, 99;
        --background: #000000;
        --text: #e0e0e0;
        --highlight: #d81b60;
        --highlight-rgb: 216, 27, 96;
        --button: #ff80ab;
        --button-rgb: 255, 128, 171;
    }

    .theme-pokemon-7 {
        --primary: #191a1c;
        --primary-rgb: 25, 26, 28;
        --secondary: #111111;
        --secondary-rgb: 17, 17, 17;
        --accent: #4caf50;
        --accent-rgb: 76, 175, 80;
        --background: #000000;
        --text: #e0e0e0;
        --highlight: #81c784;
        --highlight-rgb: 129, 199, 132;
        --button: #388e3c;
        --button-rgb: 56, 142, 60;
    }

    .theme-pokemon-8 {
        --primary: #191a1c;
        --primary-rgb: 25, 26, 28;
        --secondary: #111111;
        --secondary-rgb: 17, 17, 17;
        --accent: #6a1b9a;
        --accent-rgb: 106, 27, 154;
        --background: #000000;
        --text: #e0e0e0;
        --highlight: #8e24aa;
        --highlight-rgb: 142, 36, 170;
        --button: #4a148c;
        --button-rgb: 74, 20, 140;
    }

    /* .theme-fantasy-light {
        --primary: #;
        --primary-rgb: 106, 27, 154;
        --background: #fcf4ff;
        --text: #292929;
        --secondary: #e8e0f1;
        --secondary-rgb: 232, 224, 241;
        --accent: #03a9f4;
        --accent-rgb: 3, 169, 244;
    }

    .theme-cyberpunk-neon {
        --primary: #00e5ff;
        --primary-rgb: 0, 229, 255;
        --background: #0f0f0f;
        --text: #ffffff;
        --secondary: #1a1a1a;
        --secondary-rgb: 26, 26, 26;
        --accent: #ff4081;
        --accent-rgb: 255, 64, 129;
    }

    .theme-vintage-manga {
        --primary: #5d4037;
        --primary-rgb: 93, 64, 55;
        --background: #fdf6e3;
        --text: #3e3e3e;
        --secondary: #e0dcd3;
        --secondary-rgb: 224, 220, 211;
        --accent: #b59b85;
        --accent-rgb: 181, 155, 133;
    }

    .theme-calm-pastel {
        --primary: #a3c9a8;
        --primary-rgb: 163, 201, 168;
        --background: #fdfdfd;
        --text: #414141;
        --secondary: #e3fcec;
        --secondary-rgb: 227, 252, 236;
        --accent: #ffb3c1;
        --accent-rgb: 255, 179, 193;
    }

    .theme-pop-cartoon {
        --primary: #ff4081;
        --primary-rgb: 255, 64, 129;
        --background: #fffbec;
        --text: #2b2b2b;
        --secondary: #ffe082;
        --secondary-rgb: 255, 224, 130;
        --accent: #00e676;
        --accent-rgb: 0, 230, 118;
    }

    .theme-dark-gothic {
        --primary: #c51162;
        --primary-rgb: 197, 17, 98;
        --background: #0d0d0d;
        --text: #dddddd;
        --secondary: #1b1b1b;
        --secondary-rgb: 27, 27, 27;
        --accent: #6a1b9a;
        --accent-rgb: 106, 27, 154;
    }

    

    .theme-sepia-classic {
        --primary: #795548;
        --primary-rgb: 121, 85, 72;
        --background: #f8f1e7;
        --text: #3e3e3e;
        --secondary: #e0d6c4;
        --secondary-rgb: 224, 214, 196;
        --accent: #a1887f;
        --accent-rgb: 161, 136, 127;
    } */

    /* ============================
   Core Element Overrides
============================ */
    body[class^="theme-"] .bg-primary {
        background-color: var(--primary) !important;
        color: #fff;
    }

    body[class^="theme-"] .btn-primary {
        background-color: var(--primary) !important;
        border-color: var(--primary) !important;
        color: #fff;
        background: linear-gradient(90deg, var(--accent), rgba(var(--accent-rgb), 0.5)) !important;
    }

    body[class^="theme-"] .text-primary {
        color: var(--primary) !important;
    }

    body[class^="theme-"] .bg-secondary {
        background-color: var(--secondary) !important;
    }

    body[class^="theme-"] .text-accent {
        color: var(--accent) !important;
    }

    body[class^="theme-"] .border-accent {
        border-color: var(--accent) !important;
    }

    body[class^="theme-"] .bg-accent {
        background-color: var(--accent) !important;
        color: #fff;
    }

    /* Forms */
    body[class^="theme-"] .form-control {
        background-color: var(--secondary) !important;
        color: var(--text) !important;
        border: 1px solid var(--primary);
    }

    body[class^="theme-"] .form-control:focus {
        box-shadow: 0 0 0 .2rem rgba(var(--primary-rgb), .25) !important;
        border-color: var(--primary) !important;
    }

    body[class^="theme-"] .form-select {
        background-color: var(--secondary) !important;
        color: var(--text) !important;
        border: 1px solid var(--primary);
    }

    body[class^="theme-"] .form-check-input:checked {
        background-color: var(--accent) !important;
        border-color: var(--accent) !important;
    }

    /* Form Switch Styling */
    body[class^="theme-"].theme-dark-elegant .form-switch .form-check-input {
        background-color: var(--highlight) !important;
        border-color: var(--highlight) !important;
    }

    body[class^="theme-"].theme-dark-elegant .form-switch .form-check-input:checked {
        background-color: var(--accent) !important;
        border-color: var(--accent) !important;
    }

    /* Modal & Dropdown */
    body[class^="theme-"] .modal-content {
        background-color: var(--secondary) !important;
        color: var(--text);
    }

    body[class^="theme-"] .modal-header,
    body[class^="theme-"] .modal-footer {
        background-color: var(--primary) !important;
    }

    body[class^="theme-"] .modal-title {
        color: var(--accent) !important;
    }

    body[class^="theme-"] .dropdown-menu {
        background-color: var(--secondary) !important;
    }

    body[class^="theme-"] .dropdown-item {
        color: var(--text) !important;
    }

    body[class^="theme-"] .dropdown-item:hover,
    body[class^="theme-"] .dropdown-item:focus {
        background-color: var(--primary) !important;
        color: #fff;
    }

    /* Table & List */
    body[class^="theme-"] .table {
        color: var(--text) !important;
        background-color: var(--primary) !important;
    }

    body[class^="theme-"] .table-striped tbody tr:nth-of-type(odd) {
        background-color: var(--secondary) !important;
    }

    body[class^="theme-"] .table-hover tbody tr:hover {
        background-color: var(--accent) !important;
        color: #fff;
    }

    body[class^="theme-"] .list-group-item {
        background-color: var(--secondary) !important;
        color: var(--text) !important;
        border: 1px solid var(--primary);
    }

    body[class^="theme-"] .list-group-item.active {
        background-color: var(--primary) !important;
        border-color: var(--primary) !important;
        color: #fff;
    }

    /* RGB Variants for Box-Shadow */
    body[class^="theme-"] .shadow-primary-sm {
        box-shadow: 0 .125rem .25rem rgba(var(--primary-rgb), .15) !important;
    }

    body[class^="theme-"] .shadow-primary {
        box-shadow: 0 .5rem 1rem rgba(var(--primary-rgb), .15) !important;
    }

    body[class^="theme-"] .shadow-primary-lg {
        box-shadow: 0 1rem 3rem rgba(var(--primary-rgb), .15) !important;
    }

    body[class^="theme-"] .shadow-secondary-sm {
        box-shadow: 0 .125rem .25rem rgba(var(--secondary-rgb), .15) !important;
    }

    body[class^="theme-"] .shadow-secondary {
        box-shadow: 0 .5rem 1rem rgba(var(--secondary-rgb), .15) !important;
    }

    body[class^="theme-"] .shadow-secondary-lg {
        box-shadow: 0 1rem 3rem rgba(var(--secondary-rgb), .15) !important;
    }

    body[class^="theme-"] .shadow-accent-sm {
        box-shadow: 0 .125rem .25rem rgba(var(--accent-rgb), .15) !important;
    }

    body[class^="theme-"] .shadow-accent {
        box-shadow: 0 .5rem 1rem rgba(var(--accent-rgb), .15) !important;
    }

    body[class^="theme-"] .shadow-accent-lg {
        box-shadow: 0 1rem 3rem rgba(var(--accent-rgb), .15) !important;
    }

    /* Alerts */
    body[class^="theme-"] .alert-primary {
        background-color: var(--primary) !important;
        color: #fff;
        border-color: var(--primary) !important;
    }

    body[class^="theme-"] .alert-secondary {
        background-color: var(--secondary) !important;
        color: var(--text);
        border-color: var(--secondary) !important;
    }

    body[class^="theme-"] .alert-accent {
        background-color: var(--accent) !important;
        color: #fff;
        border-color: var(--accent) !important;
    }

    /* Badges */
    body[class^="theme-"] .badge-primary {
        background-color: var(--primary) !important;
    }

    body[class^="theme-"] .badge-secondary {
        background-color: var(--secondary) !important;
        color: var(--text);
    }

    body[class^="theme-"] .badge-accent {
        background-color: var(--accent) !important;
    }

    /* Progress Bars */
    body[class^="theme-"] .progress {
        background-color: var(--secondary) !important;
    }

    body[class^="theme-"] .progress-bar {
        background-color: var(--accent) !important;
        height: 100%;
        background: linear-gradient(90deg, var(--accent), rgba(var(--accent-rgb), 0.5));
        width: 0%;
        transition: width 0.3s ease;
        border-radius: 0;
    }

    /* Breadcrumbs */
    body[class^="theme-"] .breadcrumb {
        background-color: var(--secondary) !important;
    }

    body[class^="theme-"] .breadcrumb-item a {
        color: var(--primary) !important;
    }

    body[class^="theme-"] .breadcrumb-item.active {
        color: var(--text) !important;
    }

    /* Pagination */
    body[class^="theme-"] .pagination .page-link {
        color: var(--secondary) !important;
        background-color: var(--background) !important;
        border: 1px solid var(--secondary) !important;
        transition: background-color 0.3s, color 0.3s;
    }

    body[class^="theme-"] .custom-pagination .page-item.active .page-link {
        background-color: var(--accent) !important;
        color: #fff !important;
        /* background: linear-gradient(90deg, var(--accent), rgba(var(--accent-rgb), 0.5)) !important; */
        background: var(--accent) !important;
        border: none !important;
    }

    body[class^="theme-"] .pagination .page-link:hover,
    body[class^="theme-"] .pagination .page-link:focus {
        background-color: rgba(var(--accent-rgb), 0.3) !important;
        color: #fff !important;
        text-decoration: none;
    }

    body[class^="theme-"] .pagination .page-link:focus {
        box-shadow: 0 0 0 .2rem rgba(var(--primary-rgb), .25) !important;
    }

    body[class^="theme-"] .pagination .page-link {
        background-color: var(--highlight) !important;
        color: var(--text) !important;
    }

    /* Nav Tabs & Pills */
    body[class^="theme-"] .nav-tabs .nav-link.active {
        background-color: var(--primary) !important;
        color: #fff !important;
        border-color: var(--primary) var(--primary) transparent;
    }

    body[class^="theme-"] .nav-pills .nav-link.active {
        background-color: var(--primary) !important;
    }

    /* Carousel */
    body[class^="theme-"] .carousel-indicators [data-bs-target] {
        background-color: var(--primary);
    }

    body[class^="theme-"] .carousel-control-prev-icon,
    body[class^="theme-"] .carousel-control-next-icon {
        filter: invert(1);
    }

    /* Toasts */
    body[class^="theme-"] .toast {
        background-color: var(--secondary) !important;
        color: var(--text);
        border: 1px solid var(--primary);
    }

    body[class^="theme-"] .toast-header {
        background-color: var(--background) !important;
        border-bottom: 1px solid var(--primary);
    }

    body[class^="theme-"] .toast-body {
        background-color: var(--secondary) !important;
    }

    /* Spinner */
    body[class^="theme-"] .spinner-border,
    body[class^="theme-"] .spinner-grow {
        color: var(--primary) !important;
    }

    /* Accordion */
    body[class^="theme-"] .accordion-button {
        background-color: var(--secondary) !important;
        color: var(--text) !important;
    }

    body[class^="theme-"] .accordion-button:not(.collapsed) {
        background-color: var(--primary) !important;
        color: #fff !important;
    }

    /* Cards */
    body[class^="theme-"] .card {
        background-color: var(--secondary) !important;
        color: var(--text) !important;
        border: 1px solid var(--primary);
    }

    body[class^="theme-"] .card-header {
        background-color: var(--background) !important;
        border-bottom: 1px solid var(--primary);
    }

    body[class^="theme-"] .card-footer {
        background-color: var(--background) !important;
        border-top: 1px solid var(--primary);
    }

    /* Tooltips & Popovers */
    body[class^="theme-"] .tooltip-inner {
        background-color: var(--text) !important;
        color: var(--background) !important;
    }

    body[class^="theme-"] .popover-header {
        background-color: var(--primary) !important;
        color: #fff;
    }

    body[class^="theme-"] .popover-body {
        background-color: var(--secondary) !important;
        color: var(--text);
    }

    /* Theme Buttons */
    body[class^="theme-"] .btn-primary {
        color: #fff !important;
        background-color: var(--button) !important;
        border-color: var(--button) !important;
    }

    body[class^="theme-"] .btn-primary:hover,
    body[class^="theme-"] .btn-primary:focus {
        background-color: rgba(var(--button-rgb), 0.85) !important;
        border-color: var(--button) !important;
        color: #fff !important;
    }

    body[class^="theme-"] .btn-outline-primary {
        --bs-btn-color: var(--button);
        --bs-btn-border-color: var(--button);
        --bs-btn-hover-color: #fff;
        --bs-btn-hover-bg: var(--button);
        --bs-btn-hover-border-color: var(--button);
        --bs-btn-focus-shadow-rgb: var(--button-focus-shadow-rgb);
        --bs-btn-active-color: #fff;
        --bs-btn-active-bg: var(--button);
        --bs-btn-active-border-color: var(--button);
        --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
        --bs-btn-disabled-color: var(--button);
        --bs-btn-disabled-bg: transparent;
        --bs-btn-disabled-border-color: var(--button);
        --bs-gradient: none;
        color: var(--button) !important;
        border-color: var(--button) !important;
        background-color: transparent !important;
    }

    body[class^="theme-"] .btn-outline-primary:hover,
    body[class^="theme-"] .btn-outline-primary:focus {
        background-color: var(--button) !important;
        color: #fff !important;
    }

    body[class^="theme-"] .btn-secondary {
        color: #fff !important;
        background-color: var(--secondary) !important;
        border-color: var(--secondary) !important;
    }

    body[class^="theme-"] .btn-outline-secondary {
        color: rgba(var(--accent-rgb), 1) !important;
        border-color: rgba(var(--button-rgb), 0.8) !important;
        background-color: transparent !important;
    }

    body[class^="theme-"] .btn-outline-secondary:hover,
    body[class^="theme-"] .btn-outline-secondary:focus {
        background-color: rgba(var(--button-rgb), 0.8) !important;
        color: #fff !important;
    }

    body[class^="theme-"] .btn-accent {
        color: #fff !important;
        background-color: var(--accent) !important;
        border-color: var(--accent) !important;
    }

    body[class^="theme-"] .btn-outline-accent {
        color: var(--accent) !important;
        border-color: var(--accent) !important;
        background-color: transparent !important;
    }

    body[class^="theme-"] .btn-outline-accent:hover,
    body[class^="theme-"] .btn-outline-accent:focus {
        background-color: var(--accent) !important;
        color: #fff !important;
    }

    body[class^="theme-"] .btn-light {
        background-color: #f8f9fa !important;
        color: #000 !important;
        border-color: #f8f9fa !important;
    }

    body[class^="theme-"] .btn-dark {
        background-color: #212529 !important;
        color: #fff !important;
        border-color: #212529 !important;
    }

    body[class^="theme-"] .btn-outline-primary:disabled {
        color: rgba(var(--text-rgb), 0.8) !important;
        border-color: rgba(var(--text-rgb), 0.8) !important;
        background-color: transparent !important;
    }


    body[class^="theme-"] .btn-outline-primary.disabled {
        color: rgba(var(--button-rgb), 0.5) !important;
        border-color: rgba(var(--button-rgb), 0.3) !important;
        background-color: transparent !important;
    }

    body[class^="theme-"] .btn-outline-primary:active,
    body[class^="theme-"] .btn-outline-primary.active {
        background-color: rgba(var(--button-rgb), 0.85) !important;
        border-color: var(--button) !important;
        color: #fff !important;
    }



    /* Utilities examples */
    body[class^="theme-"] .text-muted {
        color: rgba(var(--text), .6) !important;
    }

    body[class^="theme-"] .link-underline {
        text-decoration: underline var(--accent);
    }

    /* BG Utility Variants for Bootstrap contexts */
    body[class^="theme-"] .bg-primary {
        background-color: var(--primary) !important;
    }

    body[class^="theme-"] .bg-secondary {
        background-color: var(--secondary) !important;
    }

    /* Semantic background colors (static, for consistency) */
    body[class^="theme-"] .bg-success {
        background-color: #198754 !important;
    }

    body[class^="theme-"] .bg-danger {
        background-color: #dc3545 !important;
    }

    body[class^="theme-"] .bg-warning {
        background-color: #ffc107 !important;
    }

    body[class^="theme-"] .bg-info {
        background-color: #0dcaf0 !important;
    }

    body[class^="theme-"] .bg-stealth {
        background-color: transparent !important;
    }

    /* SweetAlert Dark Mode Styling */
    body[class^="theme-"] .my-swal2-dark,
    body[class^="theme-"] .swal2-dark {
        background-color: var(--primary) !important;
        color: var(--text) !important;
        border: 1px solid var(--highlight) !important;
        box-shadow: 0 0 20px rgba(var(--accent-rgb), 0.2);
    }

    body[class^="theme-"] .swal2-title,
    body[class^="theme-"] .swal2-content {
        color: var(--text) !important;
    }

    body[class^="theme-"] .swal2-confirm,
    body[class^="theme-"] .swal2-cancel {
        background-color: var(--accent) !important;
        color: #fff !important;
        border: none !important;
    }


    /* Ensure text contrasts */
    body[class^="theme-"] .bg-primary.text-white,
    body[class^="theme-"] .bg-secondary.text-white,
    body[class^="theme-"] .bg-success.text-white,
    body[class^="theme-"] .bg-danger.text-white,
    body[class^="theme-"] .bg-warning.text-white,
    body[class^="theme-"] .bg-info.text-white,
    body[class^="theme-"] .bg-dark.text-white {
        color: #fff !important;
    }

    /* BG-DARK / TEXT-DARK / BORDER-DARK Overrides */
    body[class^="theme-"] .bg-dark {
        background-color: var(--primary) !important;
    }

    body[class^="theme-"] .text-dark {
        color: var(--text) !important;
    }

    body[class^="theme-"] .border-dark {
        border-color: var(--secondary) !important;
    }

    /* Custom: Sidebar Nav Active */
    body[class^="theme-"] .sidebar .nav-link.active,
    #userDropdown .btn,
    .nav-item.active {
        background-color: var(--accent) !important;
        color: #fff !important;
        border-radius: .25rem;
        box-shadow: 0 0 .25rem rgba(var(--accent-rgb), .5);
    }

    body[class^="theme-"] .bg-dark {
        background-color: var(--primary) !important;
        border-bottom: 2px solid var(--accent) !important;
    }


    body[class^="theme-"] .text-primary {
        color: var(--text) !important;
    }

    body[class^="theme-"] #userSettings .avatar-item.active {
        border: 2px solid var(--accent) !important;
        /* border-radius: .25rem; */
    }

    body[class^="theme-"] .highlight-item {
        border-left: 2px solid var(--accent) !important;
    }

    body[class^="theme-"] .totalChapters,
    .totalTranslations,
    #filteredCount,
    .filter-tag .remove-filter,
    .filter-stats .filter-tag,
    .updateTime,
    .chapter-number,
    #chapterTitle,
    .header-nav-btn:hover {
        color: var(--accent) !important;
    }

    body[class^="theme-"] .filter-tag,
    .filter-stats {
        background-color: rgba(var(--accent-rgb), 0.1) !important;
        color: var(--accent) !important;
        border: 1px solid rgba(var(--accent-rgb), 0.2) !important;
    }

    body[class^="theme-"] #comicDetailButtons .comic-btn-primary {
        background: var(--accent) !important;
        color: #fff !important;
    }

    body[class^="theme-"] #showRatingBtn,
    #showReportBtn,
    #showShareBtn,
    #showDownloadBtn,
    #translationGroup,
    #languageBadge {
        background-color: rgba(var(--accent-rgb), 0.3) !important;
        color: var(--accent) !important;
    }

    body[class^="theme-"] #languageBadge:hover {
        background-color: rgba(var(--accent-rgb), 0.5) !important;
    }

    body[class^="theme-"] .filters-container::before {
        background: rgba(var(--accent-rgb), 0.7) !important;
    }

    body[class^="theme-"] #searchBarInput:focus,
    body[class^="theme-"] #translationGroup:focus,
    body[class^="theme-"] #languageBadge:focus {
        border: 2px solid var(--accent) !important;
        box-shadow: 0 0 0 2px rgba(var(--accent-rgb), 0.3) !important;
    }

    body[class^="theme-"] #searchBarInput:focus-visible,
    #translationGroup:focus-visible {
        border: 2px solid var(--accent) !important;
        box-shadow: 0 0 0 2px rgba(var(--accent-rgb), 0.5) !important;
    }

    body[class^="theme-"] #chaptersPagination .pagination .page-item.active .page-link {
        background-color: rgba(var(--accent-rgb), 0.5) !important;
        color: #fff !important;
        border: 1px solid var(--highlight) !important;
    }

    body[class^="theme-"] .nextChapterBtnBottom {
        background: rgba(var(--accent-rgb), 1) !important;
        border: none !important;
    }

    body[class^="theme-"] .nextChapterBtnBottom:disabled {
        opacity: 0.5 !important;
        pointer-events: none !important;
        background-color: rgba(var(--accent-rgb), 0.5) !important;
        border: none !important;
        color: rgba(var(--text), 0.5) !important;
        box-shadow: 0 0 0 2px rgba(var(--accent-rgb), 0.5) !important;
    }

    body[class^="theme-"] #pageInfo {
        background: rgba(var(--accent-rgb), 0.1) !important;
        border-color: rgba(var(--accent-rgb), 0.3) !important;
        color: var(--text) !important;
        font-weight: 500 !important;
    }

    body[class^="theme-"] .btn-outline-light {
        background: rgba(var(--accent-rgb), 0.1) !important;
        border-color: rgba(var(--accent-rgb), 0.3) !important;
        color: var(--accent) !important;
    }

    body[class^="theme-"] ::placeholder {
        color: rgba(var(--accent-rgb), 0.5) !important;
    }

    body[class^="theme-"] .reading-mode-btn.active,
    body[class^="theme-"] .image-size-btn.active {
        background: rgba(var(--accent-rgb), 0.3) !important;
        border-color: rgba(var(--accent-rgb), 0.4) !important;
        color: #fff !important;
    }

    body[class^="theme-"] .chapter-item:hover {
        background: rgba(var(--accent-rgb), 0.3) !important;
        border-color: rgba(var(--accent-rgb), 0.4) !important;
        color: var(--accent) !important;
    }

    body[class^="theme-"] div:where(.swal2-container) div:where(.swal2-popup) {
        background: rgba(var(--primary-rgb), 1) !important;
        color: #fff !important;
    }

    body[class^="theme-"] .modal-header .btn-close {
        --bs-btn-close-bg: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='rgba(255,0,0,0.8)' viewBox='0 0 16 16'%3E%3Cpath d='M.293.293a1 1 0 0 1 1.414 0L8 6.586 14.293.293a1 1 0 1 1 1.414 1.414L9.414 8l6.293 6.293a1 1 0 0 1-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 0 1-1.414-1.414L6.586 8 .293 1.707a1 1 0 0 1 0-1.414z'/%3E%3C/svg%3E") !important;
    }

    body[class^="theme-"] .ts-control {
        background: none !important;
        border: none !important;
        padding: 0 !important;
        font-size: 1rem !important;
        line-height: unset !important;
    }

    body[class^="theme-"] .ts-control input {
        font-size: 1rem !important;
        color: var(--text) !important;
    }
</style>

</body></html>