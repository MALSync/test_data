<html lang="en">

<head>
  <meta http-equiv="origin-trial"
    content="Az520Inasey3TAyqLyojQa8MnmCALSEU29yQFW8dePZ7xQTvSt73pHazLFTK5f7SyLUJSo2uKLesEtEa9aUYcgMAAACPeyJvcmlnaW4iOiJodHRwczovL2dvb2dsZS5jb206NDQzIiwiZmVhdHVyZSI6IkRpc2FibGVUaGlyZFBhcnR5U3RvcmFnZVBhcnRpdGlvbmluZyIsImV4cGlyeSI6MTcyNTQwNzk5OSwiaXNTdWJkb21haW4iOnRydWUsImlzVGhpcmRQYXJ0eSI6dHJ1ZX0=">
  <title>Watch No Game, No Life English Sub/Dub online Free on Aniwatch.to</title>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta name="robots" content="index,follow">
  <meta http-equiv="content-language" content="en">
  <meta name="description"
    content="Best site to watch No Game, No Life English Sub/Dub online Free and download No Game, No Life English Sub/Dub anime.">
  <meta name="keywords"
    content="No Game, No Life English Sub/Dub, free No Game, No Life online, watch No Game, No Life online, watch No Game, No Life free, download No Game, No Life anime, download No Game, No Life free">
  <meta property="og:type" content="website">
  <meta property="og:url" content="https://aniwatch.to/watch/no-game-no-life-261?ep=5334">
  <meta property="og:title" content="Watch No Game, No Life English Sub/Dub online Free on Aniwatch.to">
  <meta property="og:image" content="https://aniwatch.to/images/capture.png">
  <meta property="og:image:width" content="650">
  <meta property="og:image:height" content="350">
  <meta property="og:description"
    content="Best site to watch No Game, No Life English Sub/Dub online Free and download No Game, No Life English Sub/Dub anime.">
  <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1">
  <meta name="apple-mobile-web-app-status-bar" content="#202125">
  <meta name="theme-color" content="#202125">
  <link rel="shortcut icon" href="/images/favicon.png?v=0.1" type="image/x-icon">
  <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png?v=0.1">
  <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
  <link rel="mask-icon" href="/safari-pinned-tab.svg?v=0.1" color="#5bbad5">
  <meta name="msapplication-TileColor" content="#da532c">
  <link rel="icon" sizes="192x192" href="/images/android-chrome-192x192.png">
  <link rel="icon" sizes="512x512" href="/images/android-chrome-512x512.png">
  <link rel="manifest" href="/manifest.json?v=0.3">
  <!-- Google tag (gtag.js) -->
  <script async=""
    src="https://count-server.sharethis.com/v2.0/get_counts?cb=window.__sharethis__.cb&amp;url=https%3A%2F%2Faniwatch.to%2Fwatch%2Fno-game-no-life-261%3Fep%3D5334"></script>
  <script async="" src="https://buttons-config.sharethis.com/js/64a3d891df473b0019d1b0da.js"></script>
  <script type="text/javascript" async=""
    src="https://www.gstatic.com/recaptcha/releases/lLirU0na9roYU3wDDisGJEVT/recaptcha__en.js" crossorigin="anonymous"
    integrity="sha384-lwJiw+OT2isqLl772nPjNV34ltQfNiSOLIjtbaIB6FcFv8R12U/NaJ6yYpei3RPl"></script>
  <script async="" src="https://www.googletagmanager.com/gtag/js?id=G-NCRY038TTP"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag() { dataLayer.push(arguments); }
    gtag('js', new Date());

    gtag('config', 'G-NCRY038TTP');
  </script>

  <script type="application/ld+json">
        {
            "@context": "https://schema.org",
            "@type": "WebSite",
            "url": "https://aniwatch.to/",
            "potentialAction": {
                "@type": "SearchAction",
                "target": "https://aniwatch.to/search?keyword={keyword}",
                "query-input": "required name=keyword"
            }
        }
    </script>


  <!--Begin: Stylesheet-->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css">
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.3.1/css/all.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <link rel="stylesheet" href="/css/styles.min.css?v=1.0">
  <!--End: Stylesheet-->
  <style type="text/css">
    #st-1 {
      font-family: "Helvetica Neue", Verdana, Helvetica, Arial, sans-serif;
      ;
      direction: ltr;
      display: block;
      opacity: 1;
      text-align: center;
      z-index: 94034;
    }

    #st-1.st-animated {
      -moz-transition: o 0.2s ease-in, p 0.2s ease-in, a 0.2s ease-in, c 0.2s ease-in, i 0.2s ease-in, t 0.2s ease-in, y 0.2s ease-in;
      -ms-transition: o 0.2s ease-in, p 0.2s ease-in, a 0.2s ease-in, c 0.2s ease-in, i 0.2s ease-in, t 0.2s ease-in, y 0.2s ease-in;
      -o-transition: o 0.2s ease-in, p 0.2s ease-in, a 0.2s ease-in, c 0.2s ease-in, i 0.2s ease-in, t 0.2s ease-in, y 0.2s ease-in;
      -webkit-transition: o 0.2s ease-in, p 0.2s ease-in, a 0.2s ease-in, c 0.2s ease-in, i 0.2s ease-in, t 0.2s ease-in, y 0.2s ease-in;
      transition: o 0.2s ease-in, p 0.2s ease-in, a 0.2s ease-in, c 0.2s ease-in, i 0.2s ease-in, t 0.2s ease-in, y 0.2s ease-in;
    }

    #st-1.st-hidden {
      opacity: 0;
    }

    #st-1.st-preview {
      display: none !important;
      opacity: 0 !important;
    }

    #st-1.st-hide {
      display: none;
    }

    #st-1 .st-btn {
      -moz-box-sizing: border-box;
      -webkit-box-sizing: border-box;
      box-sizing: border-box;
      -moz-transition: opacity 0.2s ease-in, top 0.2s ease-in;
      -ms-transition: opacity 0.2s ease-in, top 0.2s ease-in;
      -o-transition: opacity 0.2s ease-in, top 0.2s ease-in;
      -webkit-transition: opacity 0.2s ease-in, top 0.2s ease-in;
      transition: opacity 0.2s ease-in, top 0.2s ease-in;
      -moz-border-radius: 20px;
      -webkit-border-radius: 20px;
      border-radius: 20px;
      border: none;
      cursor: pointer;
      display: inline-block;
      font-size: 12px;
      height: 32px;
      line-height: 32px;
      margin-right: 8px;
      padding: 0 10px;
      position: relative;
      text-align: center;
      top: 0;
      vertical-align: top;
      white-space: nowrap;
    }

    #st-1 .st-btn:last-child {
      margin-right: 0;
    }

    #st-1 .st-btn>svg {
      height: 16px;
      width: 16px;
      position: relative;
      top: 8px;
      vertical-align: top;
    }

    #st-1 .st-btn>img {
      display: inline-block;
      height: 16px;
      width: 16px;
      position: relative;
      top: 8px;
      vertical-align: top;
    }

    #st-1 .st-btn>span {
      -moz-transition: all 0.2s ease-in;
      -ms-transition: all 0.2s ease-in;
      -o-transition: all 0.2s ease-in;
      -webkit-transition: all 0.2s ease-in;
      transition: all 0.2s ease-in;
      color: #fff;
      display: inline-block;
      font-weight: 500;
      letter-spacing: 0.5px;
      min-width: 60px;
      opacity: 1;
      padding: 0 6px;
      position: relative;
      vertical-align: top;
    }

    #st-1.st-has-labels .st-btn {
      min-width: 120px;
    }

    #st-1.st-has-labels .st-btn.st-remove-label {
      min-width: 50px;
    }

    #st-1.st-has-labels .st-btn.st-remove-label>span {
      display: none;
    }

    #st-1.st-has-labels .st-btn.st-hide-label>span {
      display: none;
    }

    #st-1 .st-total {
      color: #555;
      display: inline-block;
      font-weight: 500;
      line-height: 12px;
      margin-right: 0;
      max-width: 80px;
      padding: 4px 8px;
      text-align: center;
    }

    #st-1 .st-total.st-hidden {
      display: none;
    }

    #st-1 .st-total>span {
      font-size: 16px;
      line-height: 17px;
      display: block;
      padding: 0;
    }

    #st-1 .st-total>span.st-shares {
      font-size: 9px;
      line-height: 9px;
    }

    #st-1.st-justified {
      display: flex;
      text-align: center;
    }

    #st-1.st-justified .st-btn {
      -moz-flex: 1;
      -ms-flex: 1;
      -webkit-flex: 1;
      flex: 1;
    }

    #st-1 .st-btn:hover {
      opacity: .8;
      top: -4px;
    }

    #st-1 .st-btn[data-network='telegram'] {
      background-color: #0088cc
    }

    #st-1 .st-btn[data-network='telegram'] img {
      filter:
    }

    #st-1 .st-btn[data-network='telegram']>span {
      color: #fff
    }

    #st-1 .st-btn[data-network='twitter'] {
      background-color: #000000
    }

    #st-1 .st-btn[data-network='twitter'] img {
      filter:
    }

    #st-1 .st-btn[data-network='twitter']>span {
      color: #fff
    }

    #st-1 .st-btn[data-network='facebook'] {
      background-color: #4267B2
    }

    #st-1 .st-btn[data-network='facebook'] img {
      filter:
    }

    #st-1 .st-btn[data-network='facebook']>span {
      color: #fff
    }

    #st-1 .st-btn[data-network='reddit'] {
      background-color: #ff4500
    }

    #st-1 .st-btn[data-network='reddit'] img {
      filter:
    }

    #st-1 .st-btn[data-network='reddit']>span {
      color: #fff
    }

    #st-1 .st-btn[data-network='sharethis'] {
      background-color: #95D03A
    }

    #st-1 .st-btn[data-network='sharethis'] img {
      filter:
    }

    #st-1 .st-btn[data-network='sharethis']>span {
      color: #fff
    }

    #st-1 .st-btn[data-network='snapchat']>span {
      color: #333
    }

    ;
    }
  </style>
</head>

<body>
  <div id="sidebar_menu_bg"></div>
  <div id="sidebar_menu">
    <button class="btn btn-radius btn-sm btn-secondary toggle-sidebar"><i class="fas fa-angle-left mr-2"></i>Close
      menu</button>
    <div class="sb-setting">
      <div class="header-setting">
        <div class="hs-toggles">
          <a href="/watch2gether" class="hst-item" data-toggle="tooltip" title=""
            data-original-title="Watch with friends">
            <div class="hst-icon"><i class="zicon zicon-20 zicon-live"></i></div>
            <div class="name"><span>Watch2gether</span></div>
          </a>
          <a href="/random" class="hst-item" data-toggle="tooltip" data-original-title="Watch random anime">
            <div class="hst-icon"><i class="fas fa-random"></i></div>
            <div class="name"><span>Random</span></div>
          </a>
          <div class="hst-item mr-0" data-toggle="tooltip" title=""
            data-original-title="Select language of anime name to display.">
            <div class="select-anime-name toggle-lang"><span class="en">EN</span><span class="jp">JP</span></div>
            <div class="name"><span>Anime Name</span></div>
          </div>
          <div class="clearfix"></div>
        </div>
      </div>
    </div>
    <div class="sb-donate">
      <div class="hr-community"><a class="btn btn-sm" href="/community/board" title="AniWatch Connect"><i
            class="fas fa-comments mr-2"></i>Community</a></div>
    </div>
    <ul class="nav sidebar_menu-list">
      <li class="nav-item active"><a class="nav-link" href="/home" title="Home">Home</a></li>
      <li class="nav-item"><a class="nav-link" href="/subbed-anime" title="Subbed Anime">Subbed Anime</a></li>
      <li class="nav-item"><a class="nav-link" href="/dubbed-anime" title="Dubbed Anime">Dubbed Anime</a></li>
      <li class="nav-item"><a class="nav-link" href="/most-popular" title="Most Popular">Most Popular</a></li>
      <li class="nav-item"><a class="nav-link" href="/movie" title="Movies">Movies</a></li>
      <li class="nav-item"><a class="nav-link" href="/tv" title="TV Series">TV Series</a></li>
      <li class="nav-item"><a class="nav-link" href="/ova" title="OVAs">OVAs</a></li>
      <li class="nav-item"><a class="nav-link" href="/ona" title="ONAs">ONAs</a></li>
      <li class="nav-item"><a class="nav-link" href="/special" title="Specials">Specials</a></li>
      <li class="nav-item"><a class="nav-link" href="/events" title="Events">Events</a></li>
      <li class="nav-item"><a class="nav-link" href="/app-download" title="Events">Aniwatch App</a></li>
      <li class="nav-item">
        <div class="nav-link" title="Genre"><strong>Genre</strong></div>
        <div class="sidebar_menu-sub show" id="sidebar_subs_genre">
          <ul class="nav color-list sub-menu">

            <li class="nav-item"><a class="nav-link" href="/genre/action">Action</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/adventure">Adventure</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/cars">Cars</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/comedy">Comedy</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/dementia">Dementia</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/demons">Demons</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/drama">Drama</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/ecchi">Ecchi</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/fantasy">Fantasy</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/game">Game</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/harem">Harem</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/historical">Historical</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/horror">Horror</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/isekai">Isekai</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/josei">Josei</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/kids">Kids</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/magic">Magic</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/marial-arts">Martial Arts</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/mecha">Mecha</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/military">Military</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/music">Music</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/mystery">Mystery</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/parody">Parody</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/police">Police</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/psychological">Psychological</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/romance">Romance</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/samurai">Samurai</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/school">School</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/sci-fi">Sci-Fi</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/seinen">Seinen</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/shoujo">Shoujo</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/shoujo-ai">Shoujo Ai</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/shounen">Shounen</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/shounen-ai">Shounen Ai</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/slice-of-life">Slice of Life</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/space">Space</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/sports">Sports</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/super-power">Super Power</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/supernatural">Supernatural</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/thriller">Thriller</a></li>

            <li class="nav-item"><a class="nav-link" href="/genre/vampire">Vampire</a></li>

            <li class="nav-item nav-more">
              <a class="nav-link"><i class="fas fa-plus mr-2"></i>More</a>
            </li>
          </ul>
          <div class="clearfix"></div>
        </div>
      </li>
    </ul>
    <div class="clearfix"></div>
  </div>
  <div id="wrapper" data-id="261" data-page="watch">
    <div id="header" class="">
      <div class="container">
        <div id="mobile_menu"><i class="fa fa-bars"></i></div>
        <a href="/" id="logo">
          <img src="/images/logo.png" alt="AniWatch">
          <div class="clearfix"></div>
        </a>
        <div id="search">
          <div class="search-content">
            <form action="/search" autocomplete="off">
              <a href="/filter" class="filter-icon">Filter</a>
              <input type="text" class="form-control search-input" name="keyword" placeholder="Search anime..."
                required="">
              <button type="submit" class="search-icon"><i class="fas fa-search"></i></button>
            </form>
            <div class="nav search-result-pop" id="search-suggest" style="display: none;">
              <div class="loading-relative" id="search-loading" style="display: none;">
                <div class="loading">
                  <div class="span1"></div>
                  <div class="span2"></div>
                  <div class="span3"></div>
                </div>
              </div>
              <div class="result" style="display:none;"></div>
            </div>
          </div>
        </div>
        <div class="header-group">
          <div class="anw-group">
            <div class="zrg-title"><span class="top">Join now</span><span class="bottom">AniWatch Group</span></div>
            <div class="zrg-list">
              <div class="item"><a href="https://discord.gg/aniwatch" target="_blank" class="zr-social-button dc-btn"><i
                    class="fab fa-discord"></i></a>
              </div>
              <div class="item"><a href="#" target="_blank" class="zr-social-button tl-btn"><i
                    class="fab fa-telegram-plane"></i></a>
              </div>
              <div class="item"><a href="https://www.reddit.com/r/AniWatchZone/" target="_blank"
                  class="zr-social-button rd-btn"><i class="fab fa-reddit-alien"></i></a></div>
              <div class="item"><a href="https://twitter.com/AniWatchGo" target="_blank"
                  class="zr-social-button tw-btn"><i class="fab fa-twitter"></i></a></div>
            </div>
            <div class="clearfix"></div>
          </div>
        </div>
        <div class="header-setting">
          <div class="hs-toggles">
            <a href="/watch2gether" class="hst-item" data-toggle="tooltip" title=""
              data-original-title="Watch with friends">
              <div class="hst-icon"><i class="zicon zicon-20 zicon-live"></i></div>
              <div class="name"><span>Watch2gether</span></div>
            </a>
            <a href="/random" class="hst-item" data-toggle="tooltip" data-original-title="Watch random anime">
              <div class="hst-icon"><i class="fas fa-random"></i></div>
              <div class="name"><span>Random</span></div>
            </a>
            <div class="hst-item" data-toggle="tooltip" title=""
              data-original-title="Select language of anime name to display.">
              <div class="select-anime-name toggle-lang"><span class="en">EN</span><span class="jp">JP</span></div>
              <div class="name"><span>Anime Name</span></div>
            </div>
            <a href="/community/board" class="hst-item" data-toggle="tooltip" title=""
              data-original-title="AniWatch Connect">
              <div class="hst-icon"><i class="fas fa-comments"></i></div>
              <div class="name"><span>Community</span></div>
            </a>
            <div class="clearfix"></div>
          </div>
        </div>

        <div id="pick_menu">
          <div class="pick_menu-ul">
            <ul class="ulclear">
              <li class="pmu-item pmu-item-home">
                <a class="pmu-item-icon" href="/home" title="Home">
                  <img src="/images/pick-home.svg" data-toggle="tooltip" data-placement="right" title=""
                    data-original-title="Home">
                </a>
              </li>
              <li class="pmu-item pmu-item-movies">
                <a class="pmu-item-icon" href="/movie" title="Movies">
                  <img src="/images/pick-movies.svg" data-toggle="tooltip" data-placement="right" title=""
                    data-original-title="Movies">
                </a>
              </li>
              <li class="pmu-item pmu-item-show">
                <a class="pmu-item-icon" href="/tv" title="TV Series">
                  <img src="/images/pick-show.svg" data-toggle="tooltip" data-placement="right" title=""
                    data-original-title="TV Series">
                </a>
              </li>
              <li class="pmu-item pmu-item-popular">
                <a class="pmu-item-icon" href="/most-popular" title="Most Popular">
                  <img src="/images/pick-popular.svg" data-toggle="tooltip" data-placement="right" title=""
                    data-original-title="Most Popular">
                </a>
              </li>
            </ul>
          </div>
        </div>

        <div id="header_right">
          <div class="header_right-user">
            <a data-toggle="modal" data-target="#modallogin" class="btn-user btn btn-sm btn-primary btn-login">Login</a>
          </div>
        </div>
        <div id="mobile_search"><i class="fa fa-search"></i></div>
        <div class="clearfix"></div>
      </div>
    </div>
    <div class="clearfix"></div>
    <div id="main-wrapper" class="layout-page layout-page-detail layout-page-watchtv">
      <div id="ani_detail">
        <div class="ani_detail-stage">
          <div class="container">
            <div class="anis-cover-wrap">
              <div class="anis-cover"
                style="background-image: url(https://img.flawlessfiles.com/_r/300x400/100/44/7b/447bf7fd0d5e4ad52fb25e9f9f231ce1/447bf7fd0d5e4ad52fb25e9f9f231ce1.jpg)">
              </div>
            </div>
            <div class="anis-watch-wrap">
              <div class="prebreadcrumb">
                <nav aria-label="breadcrumb">
                  <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/home" title="Home">Home</a></li>
                    <li class="breadcrumb-item"><a href="/tv">TV</a>
                    </li>
                    <li class="breadcrumb-item dynamic-name active" data-jname="Watching No Game No Life">
                      Watching No Game, No Life</li>
                  </ol>
                </nav>
              </div>
              <div class="anis-watch anis-watch-tv">
                <div class="watch-player">
                  <div class="player-frame">
                    <div class="loading-relative loading-box" id="embed-loading" style="display: none;">
                      <div class="loading">
                        <div class="span1"></div>
                        <div class="span2"></div>
                        <div class="span3"></div>
                      </div>
                    </div>
                    <iframe id="iframe-embed"
                      src="https://megacloud.tv/embed-2/e-1/OuHLlTUpr1DW?k=1&amp;autoPlay=1&amp;oa=0&amp;asi=1"
                      frameborder="0" referrerpolicy="strict-origin"
                      allow="autoplay; fullscreen; geolocation; display-capture; picture-in-picture"
                      webkitallowfullscreen="" mozallowfullscreen="" style=""></iframe>
                  </div>
                  <div class="player-controls">
                    <div class="pc-item pc-resize">
                      <a href="javascript:;" id="media-resize" class="btn btn-sm"><i
                          class="fas fa-expand mr-1"></i>Expand</a>
                    </div>
                    <div class="pc-item pc-toggle pc-light">
                      <div id="turn-off-light" class="toggle-basic">
                        <span class="tb-name"><i class="fas fa-lightbulb mr-2"></i>Light</span>
                        <span class="tb-result"></span>
                      </div>
                    </div>
                    <div class="pc-item pc-toggle pc-autoplay">
                      <div class="toggle-basic quick-settings" data-option="auto_play">
                        <span class="tb-name">Auto Play</span>
                        <span class="tb-result"></span>
                      </div>
                    </div>
                    <div class="pc-item pc-toggle pc-autonext">
                      <div class="toggle-basic quick-settings" data-option="auto_next">
                        <span class="tb-name">Auto Next</span>
                        <span class="tb-result"></span>
                      </div>
                    </div>
                    <div class="pc-item pc-toggle pc-autoskipintro">
                      <div class="toggle-basic quick-settings" data-option="auto_skip_intro">
                        <span class="tb-name">Auto Skip Intro</span>
                        <span class="tb-result"></span>
                      </div>
                    </div>
                    <div class="pc-right">
                      <div class="pc-item pc-control block-prev" style="">
                        <a class="btn btn-sm btn-prev" href="javascript:;" onclick="prevEpisode()"><i
                            class="fas fa-backward mr-2"></i>Prev</a>
                      </div>
                      <div class="pc-item pc-control block-next" style="">
                        <a class="btn btn-sm btn-next" href="javascript:;" onclick="nextEpisode()">Next<i
                            class="fas fa-forward ml-2"></i></a>
                      </div>
                      <div class="pc-item pc-fav" id="watch-list-content">
                        <a data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" class="btn btn-sm">

                          <i class="fas fa-plus mr-2"></i>Add to List

                        </a>

                        <div class="dropdown-menu dropdown-menu-model dropdown-menu-normal" aria-labelledby="ssc-list">


                          <a class="wl-item dropdown-item" data-type="1" data-movieid="261" data-page="watch"
                            href="javascript:;">Watching
                          </a>



                          <a class="wl-item dropdown-item" data-type="2" data-movieid="261" data-page="watch"
                            href="javascript:;">On-Hold
                          </a>



                          <a class="wl-item dropdown-item" data-type="3" data-movieid="261" data-page="watch"
                            href="javascript:;">Plan to watch
                          </a>



                          <a class="wl-item dropdown-item" data-type="4" data-movieid="261" data-page="watch"
                            href="javascript:;">Dropped
                          </a>



                          <a class="wl-item dropdown-item" data-type="5" data-movieid="261" data-page="watch"
                            href="javascript:;">Completed
                          </a>



                        </div>

                      </div>
                      <div class="pc-item pc-live">
                        <a href="/watch2gether/create/261" class="btn btn-sm btn-watch2gether"><i
                            class="zicon zicon-20 zicon-live mr-2"></i><span class="m-hide">Watch2gether</span><span
                            class="w-hide">Live</span></a>
                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                </div>
                <div class="player-servers">
                  <div id="servers-content">
                    <div class="ps_-status">
                      <div class="content">
                        <div class="server-notice">

                          <strong>You are watching <b>Episode 7</b></strong>

                          If current server doesn't work please try other servers beside.
                        </div>
                      </div>
                    </div>

                    <div class="ps_-block ps_-block-sub servers-sub">

                      <div class="ps__-title"><i class="fas fa-closed-captioning mr-2"></i>SUB:</div>




                      <div class="ps__-list">

                        <div class="item server-item" data-type="sub" data-id="577525" data-server-id="4">
                          <a href="javascript:;" class="btn">Vidstreaming</a>
                        </div>

                        <div class="item server-item" data-type="sub" data-id="14775" data-server-id="1">
                          <a href="javascript:;" class="btn">MegaCloud</a>
                        </div>

                        <div class="item server-item" data-type="sub" data-id="710192" data-server-id="5">
                          <a href="javascript:;" class="btn">StreamSB</a>
                        </div>

                        <div class="item server-item" data-type="sub" data-id="728992" data-server-id="3">
                          <a href="javascript:;" class="btn">StreamTape</a>
                        </div>

                      </div>
                      <div class="clearfix"></div>

                    </div>

                    <div class="ps_-block ps_-block-sub servers-dub">


                      <div class="ps__-title"><i class="fas fa-microphone-alt mr-2"></i>DUB:</div>



                      <div class="ps__-list">

                        <div class="item server-item" data-type="dub" data-id="672666" data-server-id="4">
                          <a href="javascript:;" class="btn">Vidstreaming</a>
                        </div>

                        <div class="item server-item" data-type="dub" data-id="133855" data-server-id="1">
                          <a href="javascript:;" class="btn active">MegaCloud</a>
                        </div>

                        <div class="item server-item" data-type="dub" data-id="904869" data-server-id="5">
                          <a href="javascript:;" class="btn">StreamSB</a>
                        </div>

                        <div class="item server-item" data-type="dub" data-id="904871" data-server-id="3">
                          <a href="javascript:;" class="btn">StreamTape</a>
                        </div>

                      </div>
                      <div class="clearfix"></div>

                    </div>

                  </div>
                </div>


                <div id="episodes-content">
                  <div class="seasons-block ">
                    <div id="detail-ss-list" class="detail-seasons">
                      <div class="detail-infor-content">
                        <div class="ss-choice">
                          <div class="ssc-list">
                            <div id="ssc-list" class="ssc-button">
                              <div class="ssc-label">List of episodes:</div>

                            </div>
                          </div>

                          <div class="ssc-quick">
                            <div class="sscq-icon"><i class="fas fa-search"></i></div>
                            <input id="search-ep" class="form-control" type="text" placeholder="Number of Ep"
                              autocomplete="off">
                          </div>
                          <div class="clearfix"></div>
                        </div>

                        <div class="ss-list">

                          <a title="Beginner" class="ssl-item ep-item" data-number="1" data-id="5328"
                            href="/watch/no-game-no-life-261?ep=5328">
                            <div class="ssli-order">1</div>
                            <div class="ssli-detail">
                              <div class="ep-name e-dynamic-name" data-jname="Shirouto" title="Beginner"
                                style="opacity: 1;">Shirouto</div>
                            </div>
                            <div class="ssli-btn">
                              <div class="btn btn-circle"><i class="fas fa-play"></i></div>
                            </div>
                            <div class="clearfix"></div>
                          </a>

                          <a title="Challenger" class="ssl-item ep-item" data-number="2" data-id="5329"
                            href="/watch/no-game-no-life-261?ep=5329">
                            <div class="ssli-order">2</div>
                            <div class="ssli-detail">
                              <div class="ep-name e-dynamic-name" data-jname="Chousensha" title="Challenger"
                                style="opacity: 1;">Chousensha</div>
                            </div>
                            <div class="ssli-btn">
                              <div class="btn btn-circle"><i class="fas fa-play"></i></div>
                            </div>
                            <div class="clearfix"></div>
                          </a>

                          <a title="Expert" class="ssl-item ep-item" data-number="3" data-id="5330"
                            href="/watch/no-game-no-life-261?ep=5330">
                            <div class="ssli-order">3</div>
                            <div class="ssli-detail">
                              <div class="ep-name e-dynamic-name" data-jname="Jukurensha" title="Expert"
                                style="opacity: 1;">Jukurensha</div>
                            </div>
                            <div class="ssli-btn">
                              <div class="btn btn-circle"><i class="fas fa-play"></i></div>
                            </div>
                            <div class="clearfix"></div>
                          </a>

                          <a title="Grandmaster" class="ssl-item ep-item" data-number="4" data-id="5331"
                            href="/watch/no-game-no-life-261?ep=5331">
                            <div class="ssli-order">4</div>
                            <div class="ssli-detail">
                              <div class="ep-name e-dynamic-name" data-jname="Kokuou" title="Grandmaster"
                                style="opacity: 1;">Kokuou</div>
                            </div>
                            <div class="ssli-btn">
                              <div class="btn btn-circle"><i class="fas fa-play"></i></div>
                            </div>
                            <div class="clearfix"></div>
                          </a>

                          <a title="Weak Square" class="ssl-item ep-item" data-number="5" data-id="5332"
                            href="/watch/no-game-no-life-261?ep=5332">
                            <div class="ssli-order">5</div>
                            <div class="ssli-detail">
                              <div class="ep-name e-dynamic-name" data-jname="Komanarabe" title="Weak Square"
                                style="opacity: 1;">Komanarabe</div>
                            </div>
                            <div class="ssli-btn">
                              <div class="btn btn-circle"><i class="fas fa-play"></i></div>
                            </div>
                            <div class="clearfix"></div>
                          </a>

                          <a title="Interesting" class="ssl-item ep-item" data-number="6" data-id="5333"
                            href="/watch/no-game-no-life-261?ep=5333">
                            <div class="ssli-order">6</div>
                            <div class="ssli-detail">
                              <div class="ep-name e-dynamic-name" data-jname="Itte" title="Interesting"
                                style="opacity: 1;">Itte</div>
                            </div>
                            <div class="ssli-btn">
                              <div class="btn btn-circle"><i class="fas fa-play"></i></div>
                            </div>
                            <div class="clearfix"></div>
                          </a>

                          <a title="Sacrifice" class="ssl-item ep-item active" data-number="7" data-id="5334"
                            href="/watch/no-game-no-life-261?ep=5334">
                            <div class="ssli-order">7</div>
                            <div class="ssli-detail">
                              <div class="ep-name e-dynamic-name" data-jname="Shinite" title="Sacrifice"
                                style="opacity: 1;">Shinite</div>
                            </div>
                            <div class="ssli-btn">
                              <div class="btn btn-circle"><i class="fas fa-play"></i></div>
                            </div>
                            <div class="clearfix"></div>
                          </a>

                          <a title="Fake End" class="ssl-item ep-item" data-number="8" data-id="5335"
                            href="/watch/no-game-no-life-261?ep=5335">
                            <div class="ssli-order">8</div>
                            <div class="ssli-detail">
                              <div class="ep-name e-dynamic-name" data-jname="Kishikaisei" title="Fake End"
                                style="opacity: 1;">Kishikaisei</div>
                            </div>
                            <div class="ssli-btn">
                              <div class="btn btn-circle"><i class="fas fa-play"></i></div>
                            </div>
                            <div class="clearfix"></div>
                          </a>

                          <a title="Sky Walk" class="ssl-item ep-item" data-number="9" data-id="5336"
                            href="/watch/no-game-no-life-261?ep=5336">
                            <div class="ssli-order">9</div>
                            <div class="ssli-detail">
                              <div class="ep-name e-dynamic-name" data-jname="Kairihou" title="Sky Walk"
                                style="opacity: 1;">Kairihou</div>
                            </div>
                            <div class="ssli-btn">
                              <div class="btn btn-circle"><i class="fas fa-play"></i></div>
                            </div>
                            <div class="clearfix"></div>
                          </a>

                          <a title="Blue Rose" class="ssl-item ep-item" data-number="10" data-id="5337"
                            href="/watch/no-game-no-life-261?ep=5337">
                            <div class="ssli-order">10</div>
                            <div class="ssli-detail">
                              <div class="ep-name e-dynamic-name" data-jname="Shikouhou" title="Blue Rose"
                                style="opacity: 1;">Shikouhou</div>
                            </div>
                            <div class="ssli-btn">
                              <div class="btn btn-circle"><i class="fas fa-play"></i></div>
                            </div>
                            <div class="clearfix"></div>
                          </a>

                          <a title="Killing Giant" class="ssl-item ep-item" data-number="11" data-id="5338"
                            href="/watch/no-game-no-life-261?ep=5338">
                            <div class="ssli-order">11</div>
                            <div class="ssli-detail">
                              <div class="ep-name e-dynamic-name" data-jname="Yuudouhou" title="Killing Giant"
                                style="opacity: 1;">Yuudouhou</div>
                            </div>
                            <div class="ssli-btn">
                              <div class="btn btn-circle"><i class="fas fa-play"></i></div>
                            </div>
                            <div class="clearfix"></div>
                          </a>

                          <a title="Rule Number 10" class="ssl-item ep-item" data-number="12" data-id="5339"
                            href="/watch/no-game-no-life-261?ep=5339">
                            <div class="ssli-order">12</div>
                            <div class="ssli-detail">
                              <div class="ep-name e-dynamic-name" data-jname="Rule Number Juu" title="Rule Number 10"
                                style="opacity: 1;">Rule Number Juu</div>
                            </div>
                            <div class="ssli-btn">
                              <div class="btn btn-circle"><i class="fas fa-play"></i></div>
                            </div>
                            <div class="clearfix"></div>
                          </a>

                        </div>

                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                </div>
              </div>
              <div class="anis-watch-detail">
                <div class="anis-content">
                  <div class="anisc-poster">
                    <div class="film-poster">

                      <img
                        src="https://img.flawlessfiles.com/_r/300x400/100/44/7b/447bf7fd0d5e4ad52fb25e9f9f231ce1/447bf7fd0d5e4ad52fb25e9f9f231ce1.jpg"
                        class="film-poster-img" alt="No Game, No Life">
                    </div>
                  </div>
                  <div class="anisc-detail">
                    <h2 class="film-name">
                      <a href="/no-game-no-life-261" class="text-white dynamic-name" title="No Game, No Life"
                        data-jname="No Game No Life">No Game, No Life</a>
                    </h2>
                    <div class="film-stats">
                      <div class="tick">

                        <div class="tick-item tick-pg">PG-13</div>


                        <div class="tick-item tick-quality">HD</div>


                        <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>12</div>


                        <div class="tick-item tick-dub"><i class="fas fa-microphone mr-1"></i>12</div>


                        <div class="tick-item tick-eps">12</div>

                        <span class="dot"></span>
                        <span class="item">TV</span>
                        <span class="dot"></span>
                        <span class="item">23m</span>
                        <div class="clearfix"></div>
                      </div>
                    </div>
                    <div class="film-description m-hide">
                      <div class="text">
                        No Game No Life is a surreal comedy that follows Sora and Shiro, shut-in NEET siblings and the
                        online gamer duo behind the legendary username "Blank." They view the real world as just another
                        lousy game; however, a strange e-mail challenging them to a che...<span
                          class="btn-more-desc more">+ More</span></div>
                    </div>
                    <div class="film-text m-hide mb-3">
                      AniWatch is the best site to watch <strong>No Game, No Life</strong> SUB
                      online, or you can even watch <strong>No Game, No Life</strong> DUB in
                      HD quality.

                      You can also find

                      <a class="name" href="/producer/madhouse"><strong>Madhouse</strong></a>

                      anime on AniWatch website.

                    </div>
                    <div class="block"><a href="/no-game-no-life-261" class="btn btn-xs btn-light">View detail</a></div>
                    <div class="dt-rate">
                      <div id="vote-info">
                        <div class="block-rating ">
                          <div class="rating-result">
                            <div class="rr-mark float-left">
                              <strong><i class="fas fa-star text-warning mr-2"></i>9.3</strong>
                            </div>
                            <div class="rr-title float-right">Vote now</div>
                            <div class="clearfix"></div>
                          </div>
                          <div class="description">What do you think about this anime?</div>
                          <div class="button-rate">
                            <button type="button" class="btn btn-emo rate-bad btn-vote " data-mark="1"
                              data-id="261">😩<span class="ml-2">Boring</span>
                            </button>
                            <button type="button" class="btn btn-emo rate-normal btn-vote " data-mark="5"
                              data-id="261">😃<span class="ml-2">Great</span></button>
                            <button type="button" class="btn btn-emo rate-good btn-vote " data-mark="10"
                              data-id="261">🤩<span class="ml-2">Amazing</span></button>
                            <div class="clearfix"></div>
                          </div>
                          <div class="clearfix"></div>
                        </div>
                      </div>
                      <div class="loading-relative" id="vote-loading" style="display: none;">
                        <div class="loading">
                          <div class="span1"></div>
                          <div class="span2"></div>
                          <div class="span3"></div>
                        </div>
                      </div>
                    </div>
                    <a href="javascript:;" class="dt-comment">
                      <div class="icon"><i class="fas fa-comment"></i></div>
                      <div class="number">6,628</div>
                      <div class="text">Comments</div>
                    </a>
                  </div>
                  <div class="clearfix"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="share-buttons share-buttons-detail">
        <div class="container">
          <div class="share-buttons-block">
            <div class="share-icon"></div>
            <div class="sbb-title mr-3">
              <span>Share Anime</span>
              <p class="mb-0">to your friends</p>
            </div>
            <div class="sharethis-inline-share-buttons st-center st-has-labels st-hidden st-inline-share-buttons"
              id="st-1">
              <div class="st-total st-hidden">
                <span class="st-label"></span>
                <span class="st-shares">
                  Shares
                </span>
              </div>
              <div class="st-btn st-first" data-network="telegram" style="display: inline-block;">
                <img alt="telegram sharing button" src="https://platform-cdn.sharethis.com/img/telegram.svg">
                <span class="st-label">Share</span>
              </div>
              <div class="st-btn" data-network="twitter" style="display: inline-block;">
                <img alt="twitter sharing button" src="https://platform-cdn.sharethis.com/img/twitter.svg">
                <span class="st-label">Tweet</span>
              </div>
              <div class="st-btn" data-network="facebook" style="display: inline-block;">
                <img alt="facebook sharing button" src="https://platform-cdn.sharethis.com/img/facebook.svg">
                <span class="st-label">Share</span>
              </div>
              <div class="st-btn" data-network="reddit" style="display: inline-block;">
                <img alt="reddit sharing button" src="https://platform-cdn.sharethis.com/img/reddit.svg">
                <span class="st-label">Share</span>
              </div>
              <div class="st-btn st-last st-remove-label" data-network="sharethis" style="display: inline-block;">
                <img alt="sharethis sharing button" src="https://platform-cdn.sharethis.com/img/sharethis.svg">
                <span class="st-label">Share</span>
              </div>
            </div>
            <div class="clearfix"></div>
          </div>
        </div>
      </div>
      <div class="container">
        <div id="main-content">
          <section class="block_area block_area-comment" id="comment-block">
            <div class="block_area-header block_area-header-tabs">
              <div class="float-left bah-heading mr-4">
                <h2 class="cat-heading">Comments</h2>
              </div>
              <div class="clearfix"></div>
            </div>
            <div class="show-comments">
              <div id="content-comments" class="comments-wrap"></div>
            </div>
          </section>

          <section class="block_area block_area-actors">
            <div class="block_area-header">
              <div class="float-left bah-heading mr-4">
                <h2 class="cat-heading">Characters &amp; Voice Actors</h2>
              </div>
              <div class="float-right viewmore">
                <a class="btn" data-toggle="modal" data-target="#modalcharacters">View more<i
                    class="fas fa-angle-right ml-2"></i></a>
              </div>
              <div class="clearfix"></div>
            </div>
            <div class="block-actors-content">
              <div class="bac-list-wrap">

                <div class="bac-item">
                  <div class="per-info ltr">
                    <a href="/character/stephanie-dola-1111" class="pi-avatar">
                      <img
                        data-src="https://img.flawlessfiles.com/_r/100x100/100/5e/27/5e27716f525cf7d1e1ef49a38645fb39/5e27716f525cf7d1e1ef49a38645fb39.jpg"
                        alt="Dola, Stephanie" class=" ls-is-cached lazyloaded"
                        src="https://img.flawlessfiles.com/_r/100x100/100/5e/27/5e27716f525cf7d1e1ef49a38645fb39/5e27716f525cf7d1e1ef49a38645fb39.jpg"></a>
                    <div class="pi-detail">
                      <h4 class="pi-name"><a href="/character/stephanie-dola-1111">Dola, Stephanie</a></h4>
                      <span class="pi-cast">Main</span>
                    </div>
                  </div>

                  <div class="per-info rtl">
                    <a href="/people/yoko-hikasa-46" class="pi-avatar">
                      <img
                        data-src="https://img.flawlessfiles.com/_r/100x100/100/0f/45/0f4539ad1175c16fc66aae699c20ce63/0f4539ad1175c16fc66aae699c20ce63.jpg"
                        class=" ls-is-cached lazyloaded" alt="Hikasa, Yoko"
                        src="https://img.flawlessfiles.com/_r/100x100/100/0f/45/0f4539ad1175c16fc66aae699c20ce63/0f4539ad1175c16fc66aae699c20ce63.jpg"></a>
                    <div class="pi-detail">
                      <h4 class="pi-name"><a href="/people/yoko-hikasa-46">Hikasa, Yoko</a></h4>
                      <span class="pi-cast">Japanese</span>
                    </div>
                  </div>

                  <div class="clearfix"></div>
                </div>

                <div class="bac-item">
                  <div class="per-info ltr">
                    <a href="/character/shiro-87" class="pi-avatar">
                      <img
                        data-src="https://img.flawlessfiles.com/_r/100x100/100/b6/5c/b65c8bbfcb689aa3e0a4b4265a810eb0/b65c8bbfcb689aa3e0a4b4265a810eb0.jpg"
                        alt="Shiro" class=" ls-is-cached lazyloaded"
                        src="https://img.flawlessfiles.com/_r/100x100/100/b6/5c/b65c8bbfcb689aa3e0a4b4265a810eb0/b65c8bbfcb689aa3e0a4b4265a810eb0.jpg"></a>
                    <div class="pi-detail">
                      <h4 class="pi-name"><a href="/character/shiro-87">Shiro</a></h4>
                      <span class="pi-cast">Main</span>
                    </div>
                  </div>

                  <div class="per-info rtl">
                    <a href="/people/ai-kayano-18" class="pi-avatar">
                      <img
                        data-src="https://img.flawlessfiles.com/_r/100x100/100/f9/b4/f9b480a845cd23c36ee8fedf4ccc2b70/f9b480a845cd23c36ee8fedf4ccc2b70.jpg"
                        class=" ls-is-cached lazyloaded" alt="Kayano, Ai"
                        src="https://img.flawlessfiles.com/_r/100x100/100/f9/b4/f9b480a845cd23c36ee8fedf4ccc2b70/f9b480a845cd23c36ee8fedf4ccc2b70.jpg"></a>
                    <div class="pi-detail">
                      <h4 class="pi-name"><a href="/people/ai-kayano-18">Kayano, Ai</a></h4>
                      <span class="pi-cast">Japanese</span>
                    </div>
                  </div>

                  <div class="clearfix"></div>
                </div>

                <div class="bac-item">
                  <div class="per-info ltr">
                    <a href="/character/sora-84" class="pi-avatar">
                      <img
                        data-src="https://img.flawlessfiles.com/_r/100x100/100/2a/28/2a28670956ca174434f8babcb4ef6f31/2a28670956ca174434f8babcb4ef6f31.jpg"
                        alt="Sora" class=" ls-is-cached lazyloaded"
                        src="https://img.flawlessfiles.com/_r/100x100/100/2a/28/2a28670956ca174434f8babcb4ef6f31/2a28670956ca174434f8babcb4ef6f31.jpg"></a>
                    <div class="pi-detail">
                      <h4 class="pi-name"><a href="/character/sora-84">Sora</a></h4>
                      <span class="pi-cast">Main</span>
                    </div>
                  </div>

                  <div class="per-info rtl">
                    <a href="/people/yoshitsugu-matsuoka-14" class="pi-avatar">
                      <img
                        data-src="https://img.flawlessfiles.com/_r/100x100/100/3d/11/3d118bf7fd4328db615386b7305dc872/3d118bf7fd4328db615386b7305dc872.jpg"
                        class=" ls-is-cached lazyloaded" alt="Matsuoka, Yoshitsugu"
                        src="https://img.flawlessfiles.com/_r/100x100/100/3d/11/3d118bf7fd4328db615386b7305dc872/3d118bf7fd4328db615386b7305dc872.jpg"></a>
                    <div class="pi-detail">
                      <h4 class="pi-name"><a href="/people/yoshitsugu-matsuoka-14">Matsuoka, Yoshitsugu</a></h4>
                      <span class="pi-cast">Japanese</span>
                    </div>
                  </div>

                  <div class="clearfix"></div>
                </div>

                <div class="bac-item">
                  <div class="per-info ltr">
                    <a href="/character/former-king-13442" class="pi-avatar">
                      <img
                        data-src="https://img.flawlessfiles.com/_r/100x100/100/4e/3e/4e3e0e70e2e82a8f9e9e2ce5d785d530/4e3e0e70e2e82a8f9e9e2ce5d785d530.jpg"
                        alt="Former King" class=" ls-is-cached lazyloaded"
                        src="https://img.flawlessfiles.com/_r/100x100/100/4e/3e/4e3e0e70e2e82a8f9e9e2ce5d785d530/4e3e0e70e2e82a8f9e9e2ce5d785d530.jpg"></a>
                    <div class="pi-detail">
                      <h4 class="pi-name"><a href="/character/former-king-13442">Former King</a></h4>
                      <span class="pi-cast">Supporting</span>
                    </div>
                  </div>

                  <div class="per-info rtl">
                    <a href="/people/jun-fukushima-134" class="pi-avatar">
                      <img
                        data-src="https://img.flawlessfiles.com/_r/100x100/100/aa/30/aa3068e08141500a0a9a02d29afdd514/aa3068e08141500a0a9a02d29afdd514.jpg"
                        class=" ls-is-cached lazyloaded" alt="Fukushima, Jun"
                        src="https://img.flawlessfiles.com/_r/100x100/100/aa/30/aa3068e08141500a0a9a02d29afdd514/aa3068e08141500a0a9a02d29afdd514.jpg"></a>
                    <div class="pi-detail">
                      <h4 class="pi-name"><a href="/people/jun-fukushima-134">Fukushima, Jun</a></h4>
                      <span class="pi-cast">Japanese</span>
                    </div>
                  </div>

                  <div class="clearfix"></div>
                </div>

                <div class="bac-item">
                  <div class="per-info ltr">
                    <a href="/character/ino-hatsuse-20060" class="pi-avatar">
                      <img
                        data-src="https://img.flawlessfiles.com/_r/100x100/100/8e/18/8e18d979f6553985274018f35d671732/8e18d979f6553985274018f35d671732.jpg"
                        alt="Hatsuse, Ino" class=" ls-is-cached lazyloaded"
                        src="https://img.flawlessfiles.com/_r/100x100/100/8e/18/8e18d979f6553985274018f35d671732/8e18d979f6553985274018f35d671732.jpg"></a>
                    <div class="pi-detail">
                      <h4 class="pi-name"><a href="/character/ino-hatsuse-20060">Hatsuse, Ino</a></h4>
                      <span class="pi-cast">Supporting</span>
                    </div>
                  </div>

                  <div class="per-info rtl">
                    <a href="/people/john-swasey-1620" class="pi-avatar">
                      <img
                        data-src="https://img.flawlessfiles.com/_r/100x100/100/a9/32/a932a65b7371d590528a7a1d45773047/a932a65b7371d590528a7a1d45773047.jpg"
                        class=" ls-is-cached lazyloaded" alt="Swasey, John"
                        src="https://img.flawlessfiles.com/_r/100x100/100/a9/32/a932a65b7371d590528a7a1d45773047/a932a65b7371d590528a7a1d45773047.jpg"></a>
                    <div class="pi-detail">
                      <h4 class="pi-name"><a href="/people/john-swasey-1620">Swasey, John</a></h4>
                      <span class="pi-cast">English</span>
                    </div>
                  </div>

                  <div class="clearfix"></div>
                </div>

                <div class="bac-item">
                  <div class="per-info ltr">
                    <a href="/character/izuna-hatsuse-1622" class="pi-avatar">
                      <img
                        data-src="https://img.flawlessfiles.com/_r/100x100/100/57/df/57df959459bb31b221cd24ce6043ab31/57df959459bb31b221cd24ce6043ab31.jpg"
                        alt="Hatsuse, Izuna" class=" ls-is-cached lazyloaded"
                        src="https://img.flawlessfiles.com/_r/100x100/100/57/df/57df959459bb31b221cd24ce6043ab31/57df959459bb31b221cd24ce6043ab31.jpg"></a>
                    <div class="pi-detail">
                      <h4 class="pi-name"><a href="/character/izuna-hatsuse-1622">Hatsuse, Izuna</a></h4>
                      <span class="pi-cast">Supporting</span>
                    </div>
                  </div>

                  <div class="per-info rtl">
                    <a href="/people/miyuki-sawashiro-9" class="pi-avatar">
                      <img
                        data-src="https://img.flawlessfiles.com/_r/100x100/100/dd/21/dd2106c7f911d17d5a23ef1e0126f6b1/dd2106c7f911d17d5a23ef1e0126f6b1.jpg"
                        class=" ls-is-cached lazyloaded" alt="Sawashiro, Miyuki"
                        src="https://img.flawlessfiles.com/_r/100x100/100/dd/21/dd2106c7f911d17d5a23ef1e0126f6b1/dd2106c7f911d17d5a23ef1e0126f6b1.jpg"></a>
                    <div class="pi-detail">
                      <h4 class="pi-name"><a href="/people/miyuki-sawashiro-9">Sawashiro, Miyuki</a></h4>
                      <span class="pi-cast">Japanese</span>
                    </div>
                  </div>

                  <div class="clearfix"></div>
                </div>

                <div class="clearfix"></div>
              </div>
              <div class="clearfix"></div>
            </div>
          </section>

          <section class="block_area block_area_category">
            <div class="block_area-header">
              <div class="float-left bah-heading mr-4">
                <h2 class="cat-heading">Recommended for you</h2>
              </div>
              <div class="clearfix"></div>
            </div>
            <div class="tab-content">
              <div class="block_area-content block_area-list film_list film_list-grid film_list-wfeature">
                <div class="film_list-wrap">

                  <div class="flw-item">

                    <div class="film-poster">


                      <div class="tick ltr">



                        <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>12</div>



                        <div class="tick-item tick-eps">12</div>

                      </div>

                      <img
                        data-src="https://img.flawlessfiles.com/_r/300x400/100/d0/e6/d0e6c082bdca39a447b1ecb72dcafc4d/d0e6c082bdca39a447b1ecb72dcafc4d.jpg"
                        class="film-poster-img ls-is-cached lazyloaded" alt="New Cooking Master Boy 2nd Season"
                        src="https://img.flawlessfiles.com/_r/300x400/100/d0/e6/d0e6c082bdca39a447b1ecb72dcafc4d/d0e6c082bdca39a447b1ecb72dcafc4d.jpg">
                      <a href="/shin-chuuka-ichiban-2nd-season-15546" class="film-poster-ahref item-qtip"
                        data-id="15546" data-hasqtip="0" oldtitle="New Cooking Master Boy 2nd Season" title=""
                        aria-describedby="qtip-0"><i class="fas fa-play"></i></a>
                    </div>
                    <div class="film-detail">
                      <h3 class="film-name"><a href="/shin-chuuka-ichiban-2nd-season-15546"
                          title="New Cooking Master Boy 2nd Season" class="dynamic-name"
                          data-jname="Shin Chuuka Ichiban! 2nd Season">New Cooking Master Boy 2nd Season</a></h3>
                      <div class="fd-infor">

                        <span class="fdi-item">TV</span>
                        <span class="dot"></span>
                        <span class="fdi-item fdi-duration">24m</span>

                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>

                  <div class="flw-item">

                    <div class="film-poster">


                      <div class="tick ltr">



                        <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>2</div>


                        <div class="tick-item tick-dub"><i class="fas fa-microphone mr-1"></i>2</div>


                        <div class="tick-item tick-eps">2</div>

                      </div>

                      <img
                        data-src="https://img.flawlessfiles.com/_r/300x400/100/f5/38/f538794ec61cd267f24563059161e657/f538794ec61cd267f24563059161e657.jpg"
                        class="film-poster-img ls-is-cached lazyloaded"
                        alt="The New Prince of Tennis: Hyoutei vs. Rikkai - Game of Future"
                        src="https://img.flawlessfiles.com/_r/300x400/100/f5/38/f538794ec61cd267f24563059161e657/f538794ec61cd267f24563059161e657.jpg">
                      <a href="/the-new-prince-of-tennis-hyoutei-vs-rikkai-game-of-future-15547"
                        class="film-poster-ahref item-qtip" data-id="15547" data-hasqtip="1"
                        oldtitle="The New Prince of Tennis: Hyoutei vs. Rikkai - Game of Future" title=""
                        aria-describedby="qtip-1"><i class="fas fa-play"></i></a>
                    </div>
                    <div class="film-detail">
                      <h3 class="film-name"><a href="/the-new-prince-of-tennis-hyoutei-vs-rikkai-game-of-future-15547"
                          title="The New Prince of Tennis: Hyoutei vs. Rikkai - Game of Future" class="dynamic-name"
                          data-jname="Shin Tennis no Ouji-sama: Hyoutei vs. Rikkai - Game of Future">The New Prince of
                          Tennis: Hyoutei vs. Rikkai - Game of Future</a></h3>
                      <div class="fd-infor">

                        <span class="fdi-item">ONA</span>
                        <span class="dot"></span>
                        <span class="fdi-item fdi-duration">48m</span>

                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>

                  <div class="flw-item">

                    <div class="film-poster">


                      <div class="tick ltr">



                        <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>16</div>


                        <div class="tick-item tick-dub"><i class="fas fa-microphone mr-1"></i>16</div>


                        <div class="tick-item tick-eps">16</div>

                      </div>

                      <img
                        data-src="https://img.flawlessfiles.com/_r/300x400/100/83/da/83da53919d7a20332be01686141f18f6/83da53919d7a20332be01686141f18f6.jpg"
                        class="film-poster-img ls-is-cached lazyloaded" alt="Attack on Titan: Final Season, Part 1"
                        src="https://img.flawlessfiles.com/_r/300x400/100/83/da/83da53919d7a20332be01686141f18f6/83da53919d7a20332be01686141f18f6.jpg">
                      <a href="/attack-on-titan-final-season-part-1-15548" class="film-poster-ahref item-qtip"
                        data-id="15548" data-hasqtip="2" oldtitle="Attack on Titan: Final Season, Part 1" title=""
                        aria-describedby="qtip-2"><i class="fas fa-play"></i></a>
                    </div>
                    <div class="film-detail">
                      <h3 class="film-name"><a href="/attack-on-titan-final-season-part-1-15548"
                          title="Attack on Titan: Final Season, Part 1" class="dynamic-name"
                          data-jname="Shingeki no Kyojin: Final Season, Part 1">Attack on Titan: Final Season, Part
                          1</a></h3>
                      <div class="fd-infor">

                        <span class="fdi-item">TV</span>
                        <span class="dot"></span>
                        <span class="fdi-item fdi-duration">23m</span>

                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>

                  <div class="flw-item">

                    <div class="film-poster">


                      <div class="tick ltr">



                        <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>12</div>


                        <div class="tick-item tick-dub"><i class="fas fa-microphone mr-1"></i>12</div>


                        <div class="tick-item tick-eps">12</div>

                      </div>

                      <img
                        data-src="https://img.flawlessfiles.com/_r/300x400/100/bc/06/bc065259bd3424cd4827e62c107f1379/bc065259bd3424cd4827e62c107f1379.jpg"
                        class="film-poster-img ls-is-cached lazyloaded" alt="Show by Rock!! Stars!!"
                        src="https://img.flawlessfiles.com/_r/300x400/100/bc/06/bc065259bd3424cd4827e62c107f1379/bc065259bd3424cd4827e62c107f1379.jpg">
                      <a href="/show-by-rock-stars-15552" class="film-poster-ahref item-qtip" data-id="15552"
                        data-hasqtip="3" oldtitle="Show by Rock!! Stars!!" title="" aria-describedby="qtip-3"><i
                          class="fas fa-play"></i></a>
                    </div>
                    <div class="film-detail">
                      <h3 class="film-name"><a href="/show-by-rock-stars-15552" title="Show by Rock!! Stars!!"
                          class="dynamic-name" data-jname="Show by Rock!! Stars!!">Show by Rock!! Stars!!</a></h3>
                      <div class="fd-infor">

                        <span class="fdi-item">TV</span>
                        <span class="dot"></span>
                        <span class="fdi-item fdi-duration">23m</span>

                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>

                  <div class="flw-item">

                    <div class="film-poster">

                      <div class="tick tick-rate">18+</div>


                      <div class="tick ltr">



                        <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>11</div>



                        <div class="tick-item tick-eps">11</div>

                      </div>

                      <img
                        data-src="https://img.flawlessfiles.com/_r/300x400/100/36/14/3614507d32a8b43292bfa2d598edca81/3614507d32a8b43292bfa2d598edca81.jpg"
                        class="film-poster-img ls-is-cached lazyloaded" alt="World's End Harem (Uncensored)"
                        src="https://img.flawlessfiles.com/_r/300x400/100/36/14/3614507d32a8b43292bfa2d598edca81/3614507d32a8b43292bfa2d598edca81.jpg">
                      <a href="/worlds-end-harem-15553" class="film-poster-ahref item-qtip" data-id="15553"
                        data-hasqtip="4" oldtitle="World's End Harem (Uncensored)" title="" aria-describedby="qtip-4"><i
                          class="fas fa-play"></i></a>
                    </div>
                    <div class="film-detail">
                      <h3 class="film-name"><a href="/worlds-end-harem-15553" title="World's End Harem (Uncensored)"
                          class="dynamic-name" data-jname="Shuumatsu no Harem (Uncensored)">World's End Harem
                          (Uncensored)</a></h3>
                      <div class="fd-infor">

                        <span class="fdi-item">TV</span>
                        <span class="dot"></span>
                        <span class="fdi-item fdi-duration">24m</span>

                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>

                  <div class="flw-item">

                    <div class="film-poster">


                      <div class="tick ltr">



                        <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>12</div>


                        <div class="tick-item tick-dub"><i class="fas fa-microphone mr-1"></i>12</div>


                        <div class="tick-item tick-eps">12</div>

                      </div>

                      <img
                        data-src="https://img.flawlessfiles.com/_r/300x400/100/ef/91/ef91377db7bb377d807e95b8b568b60e/ef91377db7bb377d807e95b8b568b60e.jpg"
                        class="film-poster-img ls-is-cached lazyloaded" alt="Skate-Leading☆Stars"
                        src="https://img.flawlessfiles.com/_r/300x400/100/ef/91/ef91377db7bb377d807e95b8b568b60e/ef91377db7bb377d807e95b8b568b60e.jpg">
                      <a href="/skate-leadingstars-15555" class="film-poster-ahref item-qtip" data-id="15555"
                        data-hasqtip="5" oldtitle="Skate-Leading☆Stars" title="" aria-describedby="qtip-5"><i
                          class="fas fa-play"></i></a>
                    </div>
                    <div class="film-detail">
                      <h3 class="film-name"><a href="/skate-leadingstars-15555" title="Skate-Leading☆Stars"
                          class="dynamic-name" data-jname="Skate-Leading☆Stars">Skate-Leading☆Stars</a></h3>
                      <div class="fd-infor">

                        <span class="fdi-item">TV</span>
                        <span class="dot"></span>
                        <span class="fdi-item fdi-duration">23m</span>

                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>

                  <div class="flw-item">

                    <div class="film-poster">


                      <div class="tick ltr">



                        <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>12</div>


                        <div class="tick-item tick-dub"><i class="fas fa-microphone mr-1"></i>12</div>


                        <div class="tick-item tick-eps">12</div>

                      </div>

                      <img
                        data-src="https://img.flawlessfiles.com/_r/300x400/100/00/ba/00ba6901cb21416a6d76e7a325f2dc68/00ba6901cb21416a6d76e7a325f2dc68.jpg"
                        class="film-poster-img lazyload" alt="LBX Girls">
                      <a href="/lbx-girls-15560" class="film-poster-ahref item-qtip" data-id="15560" data-hasqtip="6"
                        oldtitle="LBX Girls" title="" aria-describedby="qtip-6"><i class="fas fa-play"></i></a>
                    </div>
                    <div class="film-detail">
                      <h3 class="film-name"><a href="/lbx-girls-15560" title="LBX Girls" class="dynamic-name"
                          data-jname="Soukou Musume Senki">LBX Girls</a></h3>
                      <div class="fd-infor">

                        <span class="fdi-item">TV</span>
                        <span class="dot"></span>
                        <span class="fdi-item fdi-duration">23m</span>

                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>

                  <div class="flw-item">

                    <div class="film-poster">


                      <div class="tick ltr">



                        <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>12</div>


                        <div class="tick-item tick-dub"><i class="fas fa-microphone mr-1"></i>12</div>


                        <div class="tick-item tick-eps">12</div>

                      </div>

                      <img
                        data-src="https://img.flawlessfiles.com/_r/300x400/100/75/a2/75a23fa4eb94eee8d8e9b973915052af/75a23fa4eb94eee8d8e9b973915052af.jpg"
                        class="film-poster-img lazyload" alt="That Time I Got Reincarnated as a Slime Season 2">
                      <a href="/that-time-i-got-reincarnated-as-a-slime-season-2-15575"
                        class="film-poster-ahref item-qtip" data-id="15575" data-hasqtip="7"
                        oldtitle="That Time I Got Reincarnated as a Slime Season 2" title=""
                        aria-describedby="qtip-7"><i class="fas fa-play"></i></a>
                    </div>
                    <div class="film-detail">
                      <h3 class="film-name"><a href="/that-time-i-got-reincarnated-as-a-slime-season-2-15575"
                          title="That Time I Got Reincarnated as a Slime Season 2" class="dynamic-name"
                          data-jname="Tensei shitara Slime Datta Ken 2nd Season">That Time I Got Reincarnated as a Slime
                          Season 2</a></h3>
                      <div class="fd-infor">

                        <span class="fdi-item">TV</span>
                        <span class="dot"></span>
                        <span class="fdi-item fdi-duration">23m</span>

                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>

                  <div class="flw-item">

                    <div class="film-poster">


                      <div class="tick ltr">



                        <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>12</div>


                        <div class="tick-item tick-dub"><i class="fas fa-microphone mr-1"></i>12</div>


                        <div class="tick-item tick-eps">12</div>

                      </div>

                      <img
                        data-src="https://img.flawlessfiles.com/_r/300x400/100/81/b5/81b54f6b3b5fa0767ae06ad39668eae8/81b54f6b3b5fa0767ae06ad39668eae8.jpg"
                        class="film-poster-img lazyload" alt="SK8 the Infinity">
                      <a href="/sk8-the-infinity-15556" class="film-poster-ahref item-qtip" data-id="15556"
                        data-hasqtip="8" oldtitle="SK8 the Infinity" title="" aria-describedby="qtip-8"><i
                          class="fas fa-play"></i></a>
                    </div>
                    <div class="film-detail">
                      <h3 class="film-name"><a href="/sk8-the-infinity-15556" title="SK8 the Infinity"
                          class="dynamic-name" data-jname="SK∞">SK8 the Infinity</a></h3>
                      <div class="fd-infor">

                        <span class="fdi-item">TV</span>
                        <span class="dot"></span>
                        <span class="fdi-item fdi-duration">23m</span>

                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>

                  <div class="flw-item">

                    <div class="film-poster">


                      <div class="tick ltr">



                        <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>12</div>


                        <div class="tick-item tick-dub"><i class="fas fa-microphone mr-1"></i>12</div>


                        <div class="tick-item tick-eps">12</div>

                      </div>

                      <img
                        data-src="https://img.flawlessfiles.com/_r/300x400/100/d7/5b/d75b2c818c650c8ff1468a5017c4e5e8/d75b2c818c650c8ff1468a5017c4e5e8.jpg"
                        class="film-poster-img lazyload"
                        alt="I've Been Killing Slimes for 300 Years and Maxed Out My Level">
                      <a href="/ive-been-killing-slimes-for-300-years-and-maxed-out-my-level-15557"
                        class="film-poster-ahref item-qtip" data-id="15557" data-hasqtip="9"
                        oldtitle="I've Been Killing Slimes for 300 Years and Maxed Out My Level" title=""
                        aria-describedby="qtip-9"><i class="fas fa-play"></i></a>
                    </div>
                    <div class="film-detail">
                      <h3 class="film-name"><a
                          href="/ive-been-killing-slimes-for-300-years-and-maxed-out-my-level-15557"
                          title="I've Been Killing Slimes for 300 Years and Maxed Out My Level" class="dynamic-name"
                          data-jname="Slime Taoshite 300-nen, Shiranai Uchi ni Level Max ni Nattemashita">I've Been
                          Killing Slimes for 300 Years and Maxed Out My Level</a></h3>
                      <div class="fd-infor">

                        <span class="fdi-item">TV</span>
                        <span class="dot"></span>
                        <span class="fdi-item fdi-duration">25m</span>

                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>

                  <div class="flw-item">

                    <div class="film-poster">


                      <div class="tick ltr">



                        <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>6</div>


                        <div class="tick-item tick-dub"><i class="fas fa-microphone mr-1"></i>6</div>


                        <div class="tick-item tick-eps">6</div>

                      </div>

                      <img
                        data-src="https://img.flawlessfiles.com/_r/300x400/100/3b/03/3b03461937f3fce0ab679004983c0b16/3b03461937f3fce0ab679004983c0b16.jpg"
                        class="film-poster-img lazyload" alt="Spriggan (ONA)">
                      <a href="/spriggan-ona-15562" class="film-poster-ahref item-qtip" data-id="15562"
                        data-hasqtip="10" oldtitle="Spriggan (ONA)" title="" aria-describedby="qtip-10"><i
                          class="fas fa-play"></i></a>
                    </div>
                    <div class="film-detail">
                      <h3 class="film-name"><a href="/spriggan-ona-15562" title="Spriggan (ONA)" class="dynamic-name"
                          data-jname="Spriggan (ONA)">Spriggan (ONA)</a></h3>
                      <div class="fd-infor">

                        <span class="fdi-item">ONA</span>
                        <span class="dot"></span>
                        <span class="fdi-item fdi-duration">45m</span>

                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>

                  <div class="flw-item">

                    <div class="film-poster">


                      <div class="tick ltr">



                        <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>1</div>



                      </div>

                      <img
                        data-src="https://img.flawlessfiles.com/_r/300x400/100/b5/02/b50299e8e457680b92e1742b9e7748da/b50299e8e457680b92e1742b9e7748da.jpg"
                        class="film-poster-img lazyload" alt="Doraemon: Stand by Me 2">
                      <a href="/doraemon-stand-by-me-2-15564" class="film-poster-ahref item-qtip" data-id="15564"
                        data-hasqtip="11" oldtitle="Doraemon: Stand by Me 2" title="" aria-describedby="qtip-11"><i
                          class="fas fa-play"></i></a>
                    </div>
                    <div class="film-detail">
                      <h3 class="film-name"><a href="/doraemon-stand-by-me-2-15564" title="Doraemon: Stand by Me 2"
                          class="dynamic-name" data-jname="Stand By Me Doraemon 2">Doraemon: Stand by Me 2</a></h3>
                      <div class="fd-infor">

                        <span class="fdi-item">Movie</span>
                        <span class="dot"></span>
                        <span class="fdi-item fdi-duration">90m</span>

                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>

                  <div class="flw-item">

                    <div class="film-poster">


                      <div class="tick ltr">



                        <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>12</div>


                        <div class="tick-item tick-dub"><i class="fas fa-microphone mr-1"></i>12</div>


                        <div class="tick-item tick-eps">12</div>

                      </div>

                      <img
                        data-src="https://img.flawlessfiles.com/_r/300x400/100/b4/93/b49331f51e585dfdfe51ff8683be0d63/b49331f51e585dfdfe51ff8683be0d63.png"
                        class="film-poster-img lazyload" alt="The World Ends with You The Animation">
                      <a href="/the-world-ends-with-you-the-animation-15566" class="film-poster-ahref item-qtip"
                        data-id="15566" data-hasqtip="12" oldtitle="The World Ends with You The Animation" title=""
                        aria-describedby="qtip-12"><i class="fas fa-play"></i></a>
                    </div>
                    <div class="film-detail">
                      <h3 class="film-name"><a href="/the-world-ends-with-you-the-animation-15566"
                          title="The World Ends with You The Animation" class="dynamic-name"
                          data-jname="Subarashiki Kono Sekai The Animation">The World Ends with You The Animation</a>
                      </h3>
                      <div class="fd-infor">

                        <span class="fdi-item">TV</span>
                        <span class="dot"></span>
                        <span class="fdi-item fdi-duration">24m</span>

                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>

                  <div class="flw-item">

                    <div class="film-poster">


                      <div class="tick ltr">



                        <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>1</div>


                        <div class="tick-item tick-dub"><i class="fas fa-microphone mr-1"></i>1</div>


                      </div>

                      <img
                        data-src="https://img.flawlessfiles.com/_r/300x400/100/d9/00/d90056d307fb7c0a71edec939d4a6266/d90056d307fb7c0a71edec939d4a6266.jpg"
                        class="film-poster-img lazyload" alt="Sword Art Online: Progressive">
                      <a href="/sword-art-online-progressive-15568" class="film-poster-ahref item-qtip" data-id="15568"
                        data-hasqtip="13" oldtitle="Sword Art Online: Progressive" title=""
                        aria-describedby="qtip-13"><i class="fas fa-play"></i></a>
                    </div>
                    <div class="film-detail">
                      <h3 class="film-name"><a href="/sword-art-online-progressive-15568"
                          title="Sword Art Online: Progressive" class="dynamic-name"
                          data-jname="Sword Art Online: Progressive Movie - Hoshi Naki Yoru no Aria">Sword Art Online:
                          Progressive</a></h3>
                      <div class="fd-infor">

                        <span class="fdi-item">Movie</span>
                        <span class="dot"></span>
                        <span class="fdi-item fdi-duration">97m</span>

                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>

                  <div class="flw-item">

                    <div class="film-poster">


                      <div class="tick ltr">



                        <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>13</div>


                        <div class="tick-item tick-dub"><i class="fas fa-microphone mr-1"></i>13</div>


                        <div class="tick-item tick-eps">13</div>

                      </div>

                      <img
                        data-src="https://img.flawlessfiles.com/_r/300x400/100/ff/fa/fffadff17fe026c2031fb44ff5d70175/fffadff17fe026c2031fb44ff5d70175.png"
                        class="film-poster-img lazyload" alt="The Rising of the Shield Hero 2nd Season">
                      <a href="/the-rising-of-the-shield-hero-2nd-season-15570" class="film-poster-ahref item-qtip"
                        data-id="15570" data-hasqtip="14" oldtitle="The Rising of the Shield Hero 2nd Season" title=""
                        aria-describedby="qtip-14"><i class="fas fa-play"></i></a>
                    </div>
                    <div class="film-detail">
                      <h3 class="film-name"><a href="/the-rising-of-the-shield-hero-2nd-season-15570"
                          title="The Rising of the Shield Hero 2nd Season" class="dynamic-name"
                          data-jname="Tate no Yuusha no Nariagari Season 2">The Rising of the Shield Hero 2nd Season</a>
                      </h3>
                      <div class="fd-infor">

                        <span class="fdi-item">TV</span>
                        <span class="dot"></span>
                        <span class="fdi-item fdi-duration">24m</span>

                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>

                  <div class="flw-item">

                    <div class="film-poster">


                      <div class="tick ltr">



                        <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>12</div>


                        <div class="tick-item tick-dub"><i class="fas fa-microphone mr-1"></i>12</div>


                        <div class="tick-item tick-eps">12</div>

                      </div>

                      <img
                        data-src="https://img.flawlessfiles.com/_r/300x400/100/fe/5a/fe5a936dab12028964d437b5fc8789e4/fe5a936dab12028964d437b5fc8789e4.jpg"
                        class="film-poster-img lazyload"
                        alt="Suppose a Kid from the Last Dungeon Boonies moved to a starter town?">
                      <a href="/suppose-a-kid-from-the-last-dungeon-boonies-moved-to-a-starter-town-15572"
                        class="film-poster-ahref item-qtip" data-id="15572" data-hasqtip="15"
                        oldtitle="Suppose a Kid from the Last Dungeon Boonies moved to a starter town?" title=""
                        aria-describedby="qtip-15"><i class="fas fa-play"></i></a>
                    </div>
                    <div class="film-detail">
                      <h3 class="film-name"><a
                          href="/suppose-a-kid-from-the-last-dungeon-boonies-moved-to-a-starter-town-15572"
                          title="Suppose a Kid from the Last Dungeon Boonies moved to a starter town?"
                          class="dynamic-name"
                          data-jname="Tatoeba Last Dungeon Mae no Mura no Shounen ga Joban no Machi de Kurasu Youna Monogatari">Suppose
                          a Kid from the Last Dungeon Boonies moved to a starter town?</a></h3>
                      <div class="fd-infor">

                        <span class="fdi-item">TV</span>
                        <span class="dot"></span>
                        <span class="fdi-item fdi-duration">24m</span>

                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>

                  <div class="flw-item">

                    <div class="film-poster">


                      <div class="tick ltr">



                        <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>12</div>



                        <div class="tick-item tick-eps">12</div>

                      </div>

                      <img
                        data-src="https://img.flawlessfiles.com/_r/300x400/100/71/0a/710a79d2cf4daf181f1e317a45bf0bb1/710a79d2cf4daf181f1e317a45bf0bb1.jpg"
                        class="film-poster-img lazyload" alt="Heaven's Design Team">
                      <a href="/heavens-design-team-15574" class="film-poster-ahref item-qtip" data-id="15574"
                        data-hasqtip="16" oldtitle="Heaven's Design Team" title="" aria-describedby="qtip-16"><i
                          class="fas fa-play"></i></a>
                    </div>
                    <div class="film-detail">
                      <h3 class="film-name"><a href="/heavens-design-team-15574" title="Heaven's Design Team"
                          class="dynamic-name" data-jname="Tenchi Souzou Design-bu">Heaven's Design Team</a></h3>
                      <div class="fd-infor">

                        <span class="fdi-item">TV</span>
                        <span class="dot"></span>
                        <span class="fdi-item fdi-duration">23m</span>

                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>

                  <div class="flw-item">

                    <div class="film-poster">


                      <div class="tick ltr">



                        <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>12</div>


                        <div class="tick-item tick-dub"><i class="fas fa-microphone mr-1"></i>12</div>


                        <div class="tick-item tick-eps">12</div>

                      </div>

                      <img
                        data-src="https://img.flawlessfiles.com/_r/300x400/100/e6/8f/e68f6d1a80303c65d654d94d2d71e1e0/e68f6d1a80303c65d654d94d2d71e1e0.jpg"
                        class="film-poster-img lazyload"
                        alt="That Time I Got Reincarnated as a Slime 2nd Season Part 2">
                      <a href="/that-time-i-got-reincarnated-as-a-slime-2nd-season-part-2-15576"
                        class="film-poster-ahref item-qtip" data-id="15576" data-hasqtip="17"
                        oldtitle="That Time I Got Reincarnated as a Slime 2nd Season Part 2" title=""
                        aria-describedby="qtip-17"><i class="fas fa-play"></i></a>
                    </div>
                    <div class="film-detail">
                      <h3 class="film-name"><a href="/that-time-i-got-reincarnated-as-a-slime-2nd-season-part-2-15576"
                          title="That Time I Got Reincarnated as a Slime 2nd Season Part 2" class="dynamic-name"
                          data-jname="Tensei shitara Slime Datta Ken 2nd Season Part 2">That Time I Got Reincarnated as
                          a Slime 2nd Season Part 2</a></h3>
                      <div class="fd-infor">

                        <span class="fdi-item">TV</span>
                        <span class="dot"></span>
                        <span class="fdi-item fdi-duration">22m</span>

                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>


                </div>
                <div class="clearfix"></div>
              </div>
            </div>
          </section>
          <div class="clearfix"></div>
        </div>
        <div id="main-sidebar">

          <section class="block_area block_area_sidebar block_area-realtime">
            <div class="block_area-header">
              <div class="float-left bah-heading mr-4">
                <h2 class="cat-heading">Related Anime</h2>
              </div>
              <div class="clearfix"></div>
            </div>
            <div class="block_area-content">
              <div class="cbox cbox-list cbox-realtime cbox-collapse">
                <div class="cbox-content">
                  <div class="anif-block-ul">
                    <ul class="ulclear">

                      <li>
                        <div class="film-poster item-qtip" data-id="160" data-hasqtip="18" aria-describedby="qtip-18">
                          <img
                            data-src="https://img.flawlessfiles.com/_r/300x400/100/42/cd/42cd9f574cb038d6074875ba2f125601/42cd9f574cb038d6074875ba2f125601.jpg"
                            class="film-poster-img ls-is-cached lazyloaded" alt="No Game No Life: Zero"
                            src="https://img.flawlessfiles.com/_r/300x400/100/42/cd/42cd9f574cb038d6074875ba2f125601/42cd9f574cb038d6074875ba2f125601.jpg">
                        </div>
                        <div class="film-detail">
                          <h3 class="film-name">
                            <a href="/no-game-no-life-zero-160" title="No Game No Life: Zero" class="dynamic-name"
                              data-jname="No Game No Life: Zero">No Game No Life: Zero</a>
                          </h3>
                          <div class="fd-infor mt-2">
                            <div class="tick">



                              <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>1</div>


                              <div class="tick-item tick-dub"><i class="fas fa-microphone mr-1"></i>1</div>


                              <div class="dot"></div>
                              Movie
                            </div>
                          </div>
                        </div>
                        <div class="film-fav wl-item" data-movieid="160"><i class="fa fa-plus"></i></div>
                        <div class="clearfix"></div>
                      </li>

                      <li>
                        <div class="film-poster item-qtip" data-id="4575" data-hasqtip="19" aria-describedby="qtip-19">
                          <img
                            data-src="https://img.flawlessfiles.com/_r/300x400/100/0e/d0/0ed06130af1c07ec5314b69fb39a1710/0ed06130af1c07ec5314b69fb39a1710.jpg"
                            class="film-poster-img ls-is-cached lazyloaded" alt="No Game No Life Specials"
                            src="https://img.flawlessfiles.com/_r/300x400/100/0e/d0/0ed06130af1c07ec5314b69fb39a1710/0ed06130af1c07ec5314b69fb39a1710.jpg">
                        </div>
                        <div class="film-detail">
                          <h3 class="film-name">
                            <a href="/no-game-no-life-specials-4575" title="No Game No Life Specials"
                              class="dynamic-name" data-jname="No Game No Life Specials">No Game No Life Specials</a>
                          </h3>
                          <div class="fd-infor mt-2">
                            <div class="tick">



                              <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>6</div>



                              <div class="tick-item tick-eps">6</div>

                              <div class="dot"></div>
                              Special
                            </div>
                          </div>
                        </div>
                        <div class="film-fav wl-item" data-movieid="4575"><i class="fa fa-plus"></i></div>
                        <div class="clearfix"></div>
                      </li>

                    </ul>
                    <div class="clearfix"></div>
                  </div>
                  <div class="clearfix"></div>

                </div>
              </div>
            </div>
          </section>

          <section class="block_area block_area_sidebar block_area-realtime">
            <div class="block_area-header">
              <div class="float-left bah-heading mr-4">
                <h2 class="cat-heading">Most Popular</h2>
              </div>
              <div class="clearfix"></div>
            </div>
            <div class="block_area-content">
              <div class="cbox cbox-list cbox-realtime">
                <div class="cbox-content">
                  <div class="anif-block-ul">
                    <ul class="ulclear">

                      <li>
                        <div class="film-poster item-qtip" data-id="100" data-hasqtip="20" aria-describedby="qtip-20">
                          <img
                            data-src="https://img.flawlessfiles.com/_r/300x400/100/54/90/5490cb32786d4f7fef0f40d7266df532/5490cb32786d4f7fef0f40d7266df532.jpg"
                            class="film-poster-img ls-is-cached lazyloaded" alt="One Piece"
                            src="https://img.flawlessfiles.com/_r/300x400/100/54/90/5490cb32786d4f7fef0f40d7266df532/5490cb32786d4f7fef0f40d7266df532.jpg">
                        </div>
                        <div class="film-detail">
                          <h3 class="film-name">
                            <a href="/one-piece-100" title="One Piece" class="dynamic-name" data-jname="One Piece">One
                              Piece</a>
                          </h3>
                          <div class="fd-infor mt-2">
                            <div class="tick">



                              <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>1078</div>


                              <div class="tick-item tick-dub"><i class="fas fa-microphone mr-1"></i>1030</div>


                              <div class="dot"></div>
                              TV
                            </div>
                          </div>
                        </div>
                        <div class="film-fav wl-item" data-movieid="100"><i class="fa fa-plus"></i></div>
                        <div class="clearfix"></div>
                      </li>

                      <li>
                        <div class="film-poster item-qtip" data-id="355" data-hasqtip="21" aria-describedby="qtip-21">
                          <img
                            data-src="https://img.flawlessfiles.com/_r/300x400/100/9c/bc/9cbcf87f54194742e7686119089478f8/9cbcf87f54194742e7686119089478f8.jpg"
                            class="film-poster-img ls-is-cached lazyloaded" alt="Naruto: Shippuuden"
                            src="https://img.flawlessfiles.com/_r/300x400/100/9c/bc/9cbcf87f54194742e7686119089478f8/9cbcf87f54194742e7686119089478f8.jpg">
                        </div>
                        <div class="film-detail">
                          <h3 class="film-name">
                            <a href="/naruto-shippuden-355" title="Naruto: Shippuuden" class="dynamic-name"
                              data-jname="Naruto: Shippuuden">Naruto: Shippuden</a>
                          </h3>
                          <div class="fd-infor mt-2">
                            <div class="tick">



                              <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>500</div>


                              <div class="tick-item tick-dub"><i class="fas fa-microphone mr-1"></i>500</div>


                              <div class="tick-item tick-eps">500</div>

                              <div class="dot"></div>
                              TV
                            </div>
                          </div>
                        </div>
                        <div class="film-fav wl-item" data-movieid="355"><i class="fa fa-plus"></i></div>
                        <div class="clearfix"></div>
                      </li>

                      <li>
                        <div class="film-poster item-qtip" data-id="18056" data-hasqtip="22" aria-describedby="qtip-22">
                          <img
                            data-src="https://img.flawlessfiles.com/_r/300x400/100/db/2f/db2f3ce7b9cab7fdc160b005bffb899a/db2f3ce7b9cab7fdc160b005bffb899a.png"
                            class="film-poster-img ls-is-cached lazyloaded"
                            alt="Kimetsu no Yaiba: Katanakaji no Sato-hen"
                            src="https://img.flawlessfiles.com/_r/300x400/100/db/2f/db2f3ce7b9cab7fdc160b005bffb899a/db2f3ce7b9cab7fdc160b005bffb899a.png">
                        </div>
                        <div class="film-detail">
                          <h3 class="film-name">
                            <a href="/demon-slayer-kimetsu-no-yaiba-swordsmith-village-arc-18056"
                              title="Kimetsu no Yaiba: Katanakaji no Sato-hen" class="dynamic-name"
                              data-jname="Kimetsu no Yaiba: Katanakaji no Sato-hen">Demon Slayer: Kimetsu no Yaiba
                              Swordsmith Village Arc</a>
                          </h3>
                          <div class="fd-infor mt-2">
                            <div class="tick">



                              <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>11</div>


                              <div class="tick-item tick-dub"><i class="fas fa-microphone mr-1"></i>11</div>


                              <div class="tick-item tick-eps">11</div>

                              <div class="dot"></div>
                              TV
                            </div>
                          </div>
                        </div>
                        <div class="film-fav wl-item" data-movieid="18056"><i class="fa fa-plus"></i></div>
                        <div class="clearfix"></div>
                      </li>

                      <li>
                        <div class="film-poster item-qtip" data-id="2404" data-hasqtip="23" aria-describedby="qtip-23">
                          <img
                            data-src="https://img.flawlessfiles.com/_r/300x400/100/f5/8b/f58b0204c20ae3310f65ae7b8cb9987e/f58b0204c20ae3310f65ae7b8cb9987e.jpg"
                            class="film-poster-img lazyload" alt="Black Clover">
                        </div>
                        <div class="film-detail">
                          <h3 class="film-name">
                            <a href="/black-clover-2404" title="Black Clover" class="dynamic-name"
                              data-jname="Black Clover">Black Clover</a>
                          </h3>
                          <div class="fd-infor mt-2">
                            <div class="tick">



                              <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>170</div>


                              <div class="tick-item tick-dub"><i class="fas fa-microphone mr-1"></i>170</div>


                              <div class="tick-item tick-eps">170</div>

                              <div class="dot"></div>
                              TV
                            </div>
                          </div>
                        </div>
                        <div class="film-fav wl-item" data-movieid="2404"><i class="fa fa-plus"></i></div>
                        <div class="clearfix"></div>
                      </li>

                      <li>
                        <div class="film-poster item-qtip" data-id="806" data-hasqtip="24" aria-describedby="qtip-24">
                          <img
                            data-src="https://img.flawlessfiles.com/_r/300x400/100/bd/5a/bd5ae1d387a59c5abcf5e1a6a616728c/bd5ae1d387a59c5abcf5e1a6a616728c.jpg"
                            class="film-poster-img lazyload" alt="Bleach">
                        </div>
                        <div class="film-detail">
                          <h3 class="film-name">
                            <a href="/bleach-806" title="Bleach" class="dynamic-name" data-jname="Bleach">Bleach</a>
                          </h3>
                          <div class="fd-infor mt-2">
                            <div class="tick">



                              <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>366</div>


                              <div class="tick-item tick-dub"><i class="fas fa-microphone mr-1"></i>366</div>


                              <div class="tick-item tick-eps">366</div>

                              <div class="dot"></div>
                              TV
                            </div>
                          </div>
                        </div>
                        <div class="film-fav wl-item" data-movieid="806"><i class="fa fa-plus"></i></div>
                        <div class="clearfix"></div>
                      </li>

                      <li>
                        <div class="film-poster item-qtip" data-id="8143" data-hasqtip="25" aria-describedby="qtip-25">
                          <img
                            data-src="https://img.flawlessfiles.com/_r/300x400/100/32/c8/32c83e2ad4a43229996356840db3982c/32c83e2ad4a43229996356840db3982c.jpg"
                            class="film-poster-img lazyload" alt="Boruto: Naruto Next Generations">
                        </div>
                        <div class="film-detail">
                          <h3 class="film-name">
                            <a href="/boruto-naruto-next-generations-8143" title="Boruto: Naruto Next Generations"
                              class="dynamic-name" data-jname="Boruto: Naruto Next Generations">Boruto: Naruto Next
                              Generations</a>
                          </h3>
                          <div class="fd-infor mt-2">
                            <div class="tick">



                              <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>293</div>


                              <div class="tick-item tick-dub"><i class="fas fa-microphone mr-1"></i>231</div>


                              <div class="tick-item tick-eps">293</div>

                              <div class="dot"></div>
                              TV
                            </div>
                          </div>
                        </div>
                        <div class="film-fav wl-item" data-movieid="8143"><i class="fa fa-plus"></i></div>
                        <div class="clearfix"></div>
                      </li>

                      <li>
                        <div class="film-poster item-qtip" data-id="677" data-hasqtip="26" aria-describedby="qtip-26">
                          <img
                            data-src="https://img.flawlessfiles.com/_r/300x400/100/5d/b4/5db400c33f7494bc8ae96f9e634958d0/5db400c33f7494bc8ae96f9e634958d0.jpg"
                            class="film-poster-img lazyload" alt="Naruto">
                        </div>
                        <div class="film-detail">
                          <h3 class="film-name">
                            <a href="/naruto-677" title="Naruto" class="dynamic-name" data-jname="Naruto">Naruto</a>
                          </h3>
                          <div class="fd-infor mt-2">
                            <div class="tick">



                              <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>220</div>


                              <div class="tick-item tick-dub"><i class="fas fa-microphone mr-1"></i>220</div>


                              <div class="tick-item tick-eps">220</div>

                              <div class="dot"></div>
                              TV
                            </div>
                          </div>
                        </div>
                        <div class="film-fav wl-item" data-movieid="677"><i class="fa fa-plus"></i></div>
                        <div class="clearfix"></div>
                      </li>

                      <li>
                        <div class="film-poster item-qtip" data-id="17977" data-hasqtip="27" aria-describedby="qtip-27">
                          <img
                            data-src="https://img.flawlessfiles.com/_r/300x400/100/88/bd/88bd17534dc4884f23027035d23d74e5/88bd17534dc4884f23027035d23d74e5.jpg"
                            class="film-poster-img lazyload" alt="Spy x Family">
                        </div>
                        <div class="film-detail">
                          <h3 class="film-name">
                            <a href="/spy-x-family-17977" title="Spy x Family" class="dynamic-name"
                              data-jname="Spy x Family">Spy x Family</a>
                          </h3>
                          <div class="fd-infor mt-2">
                            <div class="tick">



                              <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>12</div>


                              <div class="tick-item tick-dub"><i class="fas fa-microphone mr-1"></i>12</div>


                              <div class="tick-item tick-eps">12</div>

                              <div class="dot"></div>
                              TV
                            </div>
                          </div>
                        </div>
                        <div class="film-fav wl-item" data-movieid="17977"><i class="fa fa-plus"></i></div>
                        <div class="clearfix"></div>
                      </li>

                      <li>
                        <div class="film-poster item-qtip" data-id="534" data-hasqtip="28" aria-describedby="qtip-28">
                          <img
                            data-src="https://img.flawlessfiles.com/_r/300x400/100/82/40/82402f796b7d84d7071ab1e03ff7747a/82402f796b7d84d7071ab1e03ff7747a.jpg"
                            class="film-poster-img lazyload" alt="Jujutsu Kaisen (TV)">
                        </div>
                        <div class="film-detail">
                          <h3 class="film-name">
                            <a href="/jujutsu-kaisen-tv-534" title="Jujutsu Kaisen (TV)" class="dynamic-name"
                              data-jname="Jujutsu Kaisen (TV)">Jujutsu Kaisen (TV)</a>
                          </h3>
                          <div class="fd-infor mt-2">
                            <div class="tick">



                              <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>24</div>


                              <div class="tick-item tick-dub"><i class="fas fa-microphone mr-1"></i>24</div>


                              <div class="tick-item tick-eps">24</div>

                              <div class="dot"></div>
                              TV
                            </div>
                          </div>
                        </div>
                        <div class="film-fav wl-item" data-movieid="534"><i class="fa fa-plus"></i></div>
                        <div class="clearfix"></div>
                      </li>

                      <li>
                        <div class="film-poster item-qtip" data-id="17483" data-hasqtip="29" aria-describedby="qtip-29">
                          <img
                            data-src="https://img.flawlessfiles.com/_r/300x400/100/3e/13/3e13d0ab2ce8799c9da8ed59548b96e9/3e13d0ab2ce8799c9da8ed59548b96e9.jpg"
                            class="film-poster-img lazyload" alt="Kimetsu no Yaiba: Yuukaku-hen">
                        </div>
                        <div class="film-detail">
                          <h3 class="film-name">
                            <a href="/demon-slayer-entertainment-district-arc-17483"
                              title="Kimetsu no Yaiba: Yuukaku-hen" class="dynamic-name"
                              data-jname="Kimetsu no Yaiba: Yuukaku-hen">Demon Slayer: Entertainment District Arc</a>
                          </h3>
                          <div class="fd-infor mt-2">
                            <div class="tick">



                              <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>11</div>


                              <div class="tick-item tick-dub"><i class="fas fa-microphone mr-1"></i>11</div>


                              <div class="tick-item tick-eps">11</div>

                              <div class="dot"></div>
                              TV
                            </div>
                          </div>
                        </div>
                        <div class="film-fav wl-item" data-movieid="17483"><i class="fa fa-plus"></i></div>
                        <div class="clearfix"></div>
                      </li>

                    </ul>
                    <div class="clearfix"></div>
                  </div>
                  <div class="clearfix"></div>
                </div>
              </div>
            </div>
          </section>
        </div>
        <div class="clearfix"></div>
      </div>
    </div>
    <div id="footer">
      <div id="footer-about">
        <div class="container">
          <div class="footer-top">
            <a href="/home" class="footer-logo">
              <img src="/images/logo.png" alt="AniWatch">
              <div class="clearfix"></div>
            </a>
            <div class="footer-joingroup">
              <div class="anw-group">
                <div class="zrg-title"><span class="top">Join now</span><span class="bottom">AniWatch Group</span>
                </div>
                <div class="zrg-list">
                  <div class="item"><a href="https://discord.gg/aniwatch" target="_blank"
                      class="zr-social-button dc-btn"><i class="fab fa-discord"></i></a>
                  </div>
                  <div class="item"><a href="#" target="_blank" class="zr-social-button tl-btn"><i
                        class="fab fa-telegram-plane"></i></a></div>
                  <div class="item"><a href="https://www.reddit.com/r/AniWatchZone/" target="_blank"
                      class="zr-social-button rd-btn"><i class="fab fa-reddit-alien"></i></a>
                  </div>
                  <div class="item"><a href="https://twitter.com/AniWatchGo" target="_blank"
                      class="zr-social-button tw-btn"><i class="fab fa-twitter"></i></a>
                  </div>
                </div>
                <div class="clearfix"></div>
              </div>
            </div>
            <div class="clearfix"></div>
          </div>
          <div class="footer-az">
            <div class="block mb-3">
              <span class="ftaz">A-Z LIST</span><span class="size-s">Searching anime order by alphabet name A to
                Z.</span>
            </div>
            <ul class="ulclear az-list">
              <li><a href="/az-list">All</a></li>
              <li><a href="/az-list/other">#</a></li>
              <li><a href="/az-list/0-9">0-9</a></li>

              <li><a href="/az-list/A">A</a>
              </li>

              <li><a href="/az-list/B">B</a>
              </li>

              <li><a href="/az-list/C">C</a>
              </li>

              <li><a href="/az-list/D">D</a>
              </li>

              <li><a href="/az-list/E">E</a>
              </li>

              <li><a href="/az-list/F">F</a>
              </li>

              <li><a href="/az-list/G">G</a>
              </li>

              <li><a href="/az-list/H">H</a>
              </li>

              <li><a href="/az-list/I">I</a>
              </li>

              <li><a href="/az-list/J">J</a>
              </li>

              <li><a href="/az-list/K">K</a>
              </li>

              <li><a href="/az-list/L">L</a>
              </li>

              <li><a href="/az-list/M">M</a>
              </li>

              <li><a href="/az-list/N">N</a>
              </li>

              <li><a href="/az-list/O">O</a>
              </li>

              <li><a href="/az-list/P">P</a>
              </li>

              <li><a href="/az-list/Q">Q</a>
              </li>

              <li><a href="/az-list/R">R</a>
              </li>

              <li><a href="/az-list/S">S</a>
              </li>

              <li><a href="/az-list/T">T</a>
              </li>

              <li><a href="/az-list/U">U</a>
              </li>

              <li><a href="/az-list/V">V</a>
              </li>

              <li><a href="/az-list/W">W</a>
              </li>

              <li><a href="/az-list/X">X</a>
              </li>

              <li><a href="/az-list/Y">Y</a>
              </li>

              <li><a href="/az-list/Z">Z</a>
              </li>

            </ul>
            <div class="clearfix"></div>
          </div>
          <div class="footer-links">
            <ul class="ulclear">
              <li><a href="/terms" title="Terms of service">Terms of service</a></li>
              <li><a href="/dmca" title="DMCA">DMCA</a></li>
              <li><a href="/contact" title="Contact">Contact</a></li>
              <li><a href="/app-download" title="Aniwatch App">Aniwatch App</a></li>
            </ul>
            <div class="clearfix"></div>
          </div>
          <div class="about-text">
            AniWatch does not store any files on our server, we only linked to the media which is hosted on 3rd party
            services.
          </div>
          <p class="copyright">© AniWatch.to. All rights reserved.</p>
        </div>
      </div>
    </div>
    <div class="modal fade premodal" id="actionModal" tabindex="-1" aria-labelledby="exampleModalLabel"
      aria-hidden="true"></div>
    <div id="totop"><i class="fas fa-chevron-up"></i></div>

  </div>
  <div id="mask-overlay"></div>
  <div class="modal fade premodal premodal-login" id="modallogin" tabindex="-1" role="dialog"
    aria-labelledby="modallogintitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
      <div class="modal-content">
        <div class="tab-content">
          <div id="modal-tab-login" class="tab-pane active">
            <div class="modal-header">
              <h5 class="modal-title" id="modallogintitle">Welcome back!</h5>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">×</span>
              </button>
            </div>
            <div class="modal-body">
              <div class="alert alert-danger mb-3" id="login-error" style="display: none;"></div>
              <form class="preform" id="login-form" method="post">
                <div class="form-group">
                  <label class="prelabel" for="email">Email address</label>
                  <input type="email" class="form-control" id="email" placeholder="name@email.com" name="email"
                    required="">
                </div>
                <div class="form-group">
                  <label class="prelabel" for="password">Password</label>
                  <input type="password" class="form-control" id="password" placeholder="Password" name="password"
                    required="">
                </div>
                <div class="form-check custom-control custom-checkbox">
                  <div class="float-left">
                    <input type="checkbox" class="custom-control-input" name="remember" value="1" id="remember"
                      checked="">
                    <label class="custom-control-label" for="remember">Remember me</label>
                  </div>
                  <div class="float-right">
                    <a href="javascript:;" class="link-highlight text-forgot forgot-tab-link">Forgot password?</a>
                  </div>
                  <div class="clearfix"></div>
                </div>
                <div data-theme="dark" class="g-recaptcha mb-3 mt-3" id="login-recaptcha">
                  <div style="width: 304px; height: 78px;">
                    <div><iframe title="reCAPTCHA" width="304" height="78" role="presentation" name="a-vndf1gg110wp"
                        frameborder="0" scrolling="no"
                        sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation"
                        src="https://www.google.com/recaptcha/api2/anchor?ar=1&amp;k=6Lfz6fAmAAAAAKZdTpHpGUfe5OUYvosjXcpasbCd&amp;co=aHR0cHM6Ly9hbml3YXRjaC50bzo0NDM.&amp;hl=en&amp;v=lLirU0na9roYU3wDDisGJEVT&amp;theme=dark&amp;size=normal&amp;cb=tzufydq35jmx"></iframe>
                    </div><textarea id="g-recaptcha-response-3" name="g-recaptcha-response" class="g-recaptcha-response"
                      style="width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;"></textarea>
                  </div><iframe style="display: none;"></iframe>
                </div>
                <div class="form-group login-btn mb-0">
                  <button id="btn-login" class="btn btn-primary btn-block">Login</button>
                  <div class="loading-relative" id="login-loading" style="display: none;">
                    <div class="loading">
                      <div class="span1"></div>
                      <div class="span2"></div>
                      <div class="span3"></div>
                    </div>
                  </div>
                </div>
              </form>
            </div>
            <div class="modal-footer text-center">
              Don't have an account? <a class="link-highlight register-tab-link" title="Register">Register</a> or <a
                class="link-highlight verify-tab-link" title="Account Verification">Verify</a>
            </div>
          </div>
          <div id="modal-tab-register" class="tab-pane fade">
            <div class="modal-header">
              <h5 class="modal-title" id="modallogintitle2">Create an Account</h5>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">×</span>
              </button>
            </div>
            <div class="modal-body">
              <div class="alert alert-danger mb-3" id="register-error" style="display: none;"></div>
              <div class="alert alert-success mb-3" id="register-success" style="display: none;">
                An email has been sent to your email address containing an activation link. Please check your email and
                click on the link to activate your account (It may get in the email spam box).
              </div>
              <form class="preform" method="post" id="register-form">
                <div class="form-group">
                  <label class="prelabel" for="re-username">Your name</label>
                  <input type="text" class="form-control" id="re-username" placeholder="Name" name="name" required="">
                </div>
                <div class="form-group">
                  <label class="prelabel" for="re-email">Email address</label>
                  <input type="email" class="form-control" id="re-email" placeholder="name@email.com" name="email"
                    required="">
                </div>
                <div class="form-group">
                  <label class="prelabel" for="re-password">Password</label>
                  <input type="password" class="form-control" id="re-password" placeholder="Password" name="password"
                    required="">
                </div>
                <div class="form-group">
                  <label class="prelabel" for="re-confirmpassword">Confirm Password</label>
                  <input type="password" class="form-control" id="re-confirmpassword" placeholder="Confirm Password"
                    required="">
                </div>
                <div data-theme="dark" class="g-recaptcha mb-3" id="register-recaptcha">
                  <div style="width: 304px; height: 78px;">
                    <div><iframe title="reCAPTCHA" width="304" height="78" role="presentation" name="a-khlkp7c050xl"
                        frameborder="0" scrolling="no"
                        sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation"
                        src="https://www.google.com/recaptcha/api2/anchor?ar=1&amp;k=6Lfz6fAmAAAAAKZdTpHpGUfe5OUYvosjXcpasbCd&amp;co=aHR0cHM6Ly9hbml3YXRjaC50bzo0NDM.&amp;hl=en&amp;v=lLirU0na9roYU3wDDisGJEVT&amp;theme=dark&amp;size=normal&amp;cb=7epce29llg9n"></iframe>
                    </div><textarea id="g-recaptcha-response-2" name="g-recaptcha-response" class="g-recaptcha-response"
                      style="width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;"></textarea>
                  </div>
                </div>
                <div class="form-group login-btn mb-0">
                  <button id="btn-register" class="btn btn-primary btn-block">Register</button>
                  <div class="loading-relative" id="register-loading" style="display: none;">
                    <div class="loading">
                      <div class="span1"></div>
                      <div class="span2"></div>
                      <div class="span3"></div>
                    </div>
                  </div>
                </div>
              </form>
            </div>
            <div class="modal-footer text-center">
              Have an account? <a class="link-highlight login-tab-link" title="Login">Login</a>
            </div>
          </div>
          <div id="modal-tab-forgot" class="tab-pane fade">
            <div class="modal-header">
              <h5 class="modal-title" id="modallogintitle3">Reset Password</h5>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">×</span>
              </button>
            </div>
            <div class="modal-body" style="padding-bottom: 20px;">
              <form class="preform" method="post" id="forgot-form">
                <div class="alert alert-success mb-3" id="forgot-success" style="display:none"></div>
                <div class="alert alert-danger mb-3" id="forgot-error" style="display:none"></div>
                <div class="form-group">
                  <label class="prelabel" for="forgot-email">Your Email</label>
                  <input required="" type="text" class="form-control" id="forgot-email" name="email"
                    placeholder="name@email.com">
                </div>
                <div data-theme="dark" class="g-recaptcha mb-3" id="forgot-recaptcha">
                  <div style="width: 304px; height: 78px;">
                    <div><iframe title="reCAPTCHA" width="304" height="78" role="presentation" name="a-nz4buhu0jyz6"
                        frameborder="0" scrolling="no"
                        sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation"
                        src="https://www.google.com/recaptcha/api2/anchor?ar=1&amp;k=6Lfz6fAmAAAAAKZdTpHpGUfe5OUYvosjXcpasbCd&amp;co=aHR0cHM6Ly9hbml3YXRjaC50bzo0NDM.&amp;hl=en&amp;v=lLirU0na9roYU3wDDisGJEVT&amp;theme=dark&amp;size=normal&amp;cb=gltszto9lad6"></iframe>
                    </div><textarea id="g-recaptcha-response" name="g-recaptcha-response" class="g-recaptcha-response"
                      style="width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;"></textarea>
                  </div>
                </div>
                <div class="form-group login-btn mb-0">
                  <button class="btn btn-primary btn-block">Submit</button>
                  <div class="loading-relative" id="forgot-loading" style="display: none;">
                    <div class="loading">
                      <div class="span1"></div>
                      <div class="span2"></div>
                      <div class="span3"></div>
                    </div>
                  </div>
                </div>
              </form>
            </div>
            <div class="modal-footer text-center">
              <a class="link-highlight login-tab-link" title=""><i class="fas fa-angle-left mr-2"></i>Back to
                Sign-in</a>
            </div>
          </div>
          <div id="modal-tab-verify" class="tab-pane fade">
            <div class="modal-header">
              <h5 class="modal-title" id="modallogintitle3">Send Verification Email</h5>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">×</span>
              </button>
            </div>
            <div class="modal-body" style="padding-bottom: 20px;">
              <form class="preform" method="post" id="verify-form">
                <div class="alert alert-success mb-3" id="verify-success" style="display:none"></div>
                <div class="alert alert-danger mb-3" id="verify-error" style="display:none"></div>
                <div class="form-group">
                  <label class="prelabel" for="verify-email">Your Email</label>
                  <input required="" type="text" class="form-control" id="verify-email" name="email"
                    placeholder="name@email.com">
                </div>
                <div data-theme="dark" class="g-recaptcha mb-3" id="verify-recaptcha">
                  <div style="width: 304px; height: 78px;">
                    <div><iframe title="reCAPTCHA" width="304" height="78" role="presentation" name="a-gpfqi5y438zd"
                        frameborder="0" scrolling="no"
                        sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation"
                        src="https://www.google.com/recaptcha/api2/anchor?ar=1&amp;k=6Lfz6fAmAAAAAKZdTpHpGUfe5OUYvosjXcpasbCd&amp;co=aHR0cHM6Ly9hbml3YXRjaC50bzo0NDM.&amp;hl=en&amp;v=lLirU0na9roYU3wDDisGJEVT&amp;theme=dark&amp;size=normal&amp;cb=rck3sy85xtx2"></iframe>
                    </div><textarea id="g-recaptcha-response-1" name="g-recaptcha-response" class="g-recaptcha-response"
                      style="width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;"></textarea>
                  </div>
                </div>
                <div class="form-group login-btn mb-0">
                  <button class="btn btn-primary btn-block">Submit</button>
                  <div class="loading-relative" id="verify-loading" style="display: none;">
                    <div class="loading">
                      <div class="span1"></div>
                      <div class="span2"></div>
                      <div class="span3"></div>
                    </div>
                  </div>
                </div>
              </form>
            </div>
            <div class="modal-footer text-center">
              <a class="link-highlight login-tab-link" title=""><i class="fas fa-angle-left mr-2"></i>Back to
                Sign-in</a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="modal fade premodal premodal-manga" id="modalmanga" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
      <div class="modal-content">
        <div class="modal-body">
          <div class="d-flex align-items-center cr-title">
            <div class="manga-icon mr-3"><img src="/images/mgicon.png"></div>Available Manga Version
          </div>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">×</span>
          </button>
          <div id="manga-list" class="content-related"></div>
        </div>
      </div>
    </div>
  </div>
  <div class="modal fade premodal premodal-characters" id="modalcharacters" tabindex="-1" role="dialog"
    aria-labelledby="modalcharacterstitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title text-left" id="modalcharacterstitle">Characters &amp; Voice Actors</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">×</span>
          </button>
        </div>
        <div class="modal-body">
          <div class="modal-characters">
            <div id="characters-content">
              <div class="bac-list-wrap mb-3" id="character-list">

                <div class="bac-item">
                  <div class="per-info ltr">
                    <a href="/character/stephanie-dola-1111" class="pi-avatar">
                      <img class="lazyload"
                        data-src="https://img.flawlessfiles.com/_r/100x100/100/5e/27/5e27716f525cf7d1e1ef49a38645fb39/5e27716f525cf7d1e1ef49a38645fb39.jpg"
                        alt="Dola, Stephanie"></a>
                    <div class="pi-detail">
                      <h4 class="pi-name"><a href="/character/stephanie-dola-1111">Dola, Stephanie</a></h4>
                      <span class="pi-cast">Main</span>
                    </div>
                  </div>


                  <div class="per-info per-info-xx">
                    <div class="pix-list">

                      <a href="/people/yoko-hikasa-46" data-toggle="tooltip" title="Hikasa, Yoko" class="pi-avatar"><img
                          class="lazyload"
                          data-src="https://img.flawlessfiles.com/_r/100x100/100/0f/45/0f4539ad1175c16fc66aae699c20ce63/0f4539ad1175c16fc66aae699c20ce63.jpg"
                          alt="Hikasa, Yoko"></a>

                      <a href="/people/sara-ornelas-5305" data-toggle="tooltip" title="Ornelas, Sara"
                        class="pi-avatar"><img class="lazyload"
                          data-src="https://img.flawlessfiles.com/_r/100x100/100/dd/2f/dd2fe02e2274225c95378d873126089b/dd2fe02e2274225c95378d873126089b.jpg"
                          alt="Ornelas, Sara"></a>

                      <a href="/people/bau-eva-16411" data-toggle="tooltip" title="Bau, Eva" class="pi-avatar"><img
                          class="lazyload" data-src="/images/no-avatar.jpeg" alt="Bau, Eva"></a>

                      <a href="/people/winnie-brandes-5372" data-toggle="tooltip" title="Brandes, Winnie"
                        class="pi-avatar"><img class="lazyload"
                          data-src="https://img.flawlessfiles.com/_r/100x100/100/5c/59/5c5905dccf94f8d7d33d83a7f738c280/5c5905dccf94f8d7d33d83a7f738c280.jpg"
                          alt="Brandes, Winnie"></a>

                    </div>
                  </div>

                  <div class="clearfix"></div>
                </div>

                <div class="bac-item">
                  <div class="per-info ltr">
                    <a href="/character/shiro-87" class="pi-avatar">
                      <img class="lazyload"
                        data-src="https://img.flawlessfiles.com/_r/100x100/100/b6/5c/b65c8bbfcb689aa3e0a4b4265a810eb0/b65c8bbfcb689aa3e0a4b4265a810eb0.jpg"
                        alt="Shiro"></a>
                    <div class="pi-detail">
                      <h4 class="pi-name"><a href="/character/shiro-87">Shiro</a></h4>
                      <span class="pi-cast">Main</span>
                    </div>
                  </div>


                  <div class="per-info per-info-xx">
                    <div class="pix-list">

                      <a href="/people/ai-kayano-18" data-toggle="tooltip" title="Kayano, Ai" class="pi-avatar"><img
                          class="lazyload"
                          data-src="https://img.flawlessfiles.com/_r/100x100/100/f9/b4/f9b480a845cd23c36ee8fedf4ccc2b70/f9b480a845cd23c36ee8fedf4ccc2b70.jpg"
                          alt="Kayano, Ai"></a>

                      <a href="/people/caitlynn-french-1325" data-toggle="tooltip" title="French, Caitlynn"
                        class="pi-avatar"><img class="lazyload"
                          data-src="https://img.flawlessfiles.com/_r/100x100/100/58/af/58af3d30860b5786edbdef1fc1ec7b71/58af3d30860b5786edbdef1fc1ec7b71.jpg"
                          alt="French, Caitlynn"></a>

                      <a href="/people/paulina-rummelein-2387" data-toggle="tooltip" title="Rümmelein, Paulina"
                        class="pi-avatar"><img class="lazyload"
                          data-src="https://img.flawlessfiles.com/_r/100x100/100/44/e0/44e06a6fa637b0d89a4c8d80c1181bc5/44e06a6fa637b0d89a4c8d80c1181bc5.jpg"
                          alt="Rümmelein, Paulina"></a>

                      <a href="/people/eva-andres-6167" data-toggle="tooltip" title="Andrés, Eva" class="pi-avatar"><img
                          class="lazyload"
                          data-src="https://img.flawlessfiles.com/_r/100x100/100/e1/f5/e1f5289e92b9ae0114ba53d06971750e/e1f5289e92b9ae0114ba53d06971750e.jpg"
                          alt="Andrés, Eva"></a>

                    </div>
                  </div>

                  <div class="clearfix"></div>
                </div>

                <div class="bac-item">
                  <div class="per-info ltr">
                    <a href="/character/sora-84" class="pi-avatar">
                      <img class="lazyload"
                        data-src="https://img.flawlessfiles.com/_r/100x100/100/2a/28/2a28670956ca174434f8babcb4ef6f31/2a28670956ca174434f8babcb4ef6f31.jpg"
                        alt="Sora"></a>
                    <div class="pi-detail">
                      <h4 class="pi-name"><a href="/character/sora-84">Sora</a></h4>
                      <span class="pi-cast">Main</span>
                    </div>
                  </div>


                  <div class="per-info per-info-xx">
                    <div class="pix-list">

                      <a href="/people/yoshitsugu-matsuoka-14" data-toggle="tooltip" title="Matsuoka, Yoshitsugu"
                        class="pi-avatar"><img class="lazyload"
                          data-src="https://img.flawlessfiles.com/_r/100x100/100/3d/11/3d118bf7fd4328db615386b7305dc872/3d118bf7fd4328db615386b7305dc872.jpg"
                          alt="Matsuoka, Yoshitsugu"></a>

                      <a href="/people/scott-gibbs-1943" data-toggle="tooltip" title="Gibbs, Scott"
                        class="pi-avatar"><img class="lazyload"
                          data-src="https://img.flawlessfiles.com/_r/100x100/100/88/ac/88ac054c21a44ef63c1991862cc94d5e/88ac054c21a44ef63c1991862cc94d5e.jpg"
                          alt="Gibbs, Scott"></a>

                      <a href="/people/bjorn-schalla-4266" data-toggle="tooltip" title="Schalla, Björn"
                        class="pi-avatar"><img class="lazyload"
                          data-src="https://img.flawlessfiles.com/_r/100x100/100/64/8c/648c23b7c25b362f69d3599d5677600d/648c23b7c25b362f69d3599d5677600d.jpg"
                          alt="Schalla, Björn"></a>

                      <a href="/people/dario-torrent-4345" data-toggle="tooltip" title="Torrent, Darío"
                        class="pi-avatar"><img class="lazyload"
                          data-src="https://img.flawlessfiles.com/_r/100x100/100/4c/31/4c314b7b55e5f63231b9eb1f9950300a/4c314b7b55e5f63231b9eb1f9950300a.jpg"
                          alt="Torrent, Darío"></a>

                    </div>
                  </div>

                  <div class="clearfix"></div>
                </div>

                <div class="bac-item">
                  <div class="per-info ltr">
                    <a href="/character/former-king-13442" class="pi-avatar">
                      <img class="lazyload"
                        data-src="https://img.flawlessfiles.com/_r/100x100/100/4e/3e/4e3e0e70e2e82a8f9e9e2ce5d785d530/4e3e0e70e2e82a8f9e9e2ce5d785d530.jpg"
                        alt="Former King"></a>
                    <div class="pi-detail">
                      <h4 class="pi-name"><a href="/character/former-king-13442">Former King</a></h4>
                      <span class="pi-cast">Supporting</span>
                    </div>
                  </div>


                  <div class="per-info per-info-xx">
                    <div class="pix-list">

                      <a href="/people/jun-fukushima-134" data-toggle="tooltip" title="Fukushima, Jun"
                        class="pi-avatar"><img class="lazyload"
                          data-src="https://img.flawlessfiles.com/_r/100x100/100/aa/30/aa3068e08141500a0a9a02d29afdd514/aa3068e08141500a0a9a02d29afdd514.jpg"
                          alt="Fukushima, Jun"></a>

                      <a href="/people/josh-morrison-8935" data-toggle="tooltip" title="Morrison, Josh"
                        class="pi-avatar"><img class="lazyload"
                          data-src="https://img.flawlessfiles.com/_r/100x100/100/20/94/2094cb64b52ca4b5bc437d8357246b94/2094cb64b52ca4b5bc437d8357246b94.jpg"
                          alt="Morrison, Josh"></a>

                      <a href="/people/yann-pichon-5112" data-toggle="tooltip" title="Pichon, Yann"
                        class="pi-avatar"><img class="lazyload"
                          data-src="https://img.flawlessfiles.com/_r/100x100/100/88/37/88379a7981e7884f62c9aec638848c7e/88379a7981e7884f62c9aec638848c7e.jpg"
                          alt="Pichon, Yann"></a>

                    </div>
                  </div>

                  <div class="clearfix"></div>
                </div>

                <div class="bac-item">
                  <div class="per-info ltr">
                    <a href="/character/ino-hatsuse-20060" class="pi-avatar">
                      <img class="lazyload"
                        data-src="https://img.flawlessfiles.com/_r/100x100/100/8e/18/8e18d979f6553985274018f35d671732/8e18d979f6553985274018f35d671732.jpg"
                        alt="Hatsuse, Ino"></a>
                    <div class="pi-detail">
                      <h4 class="pi-name"><a href="/character/ino-hatsuse-20060">Hatsuse, Ino</a></h4>
                      <span class="pi-cast">Supporting</span>
                    </div>
                  </div>


                  <div class="per-info per-info-xx">
                    <div class="pix-list">

                      <a href="/people/john-swasey-1620" data-toggle="tooltip" title="Swasey, John"
                        class="pi-avatar"><img class="lazyload"
                          data-src="https://img.flawlessfiles.com/_r/100x100/100/a9/32/a932a65b7371d590528a7a1d45773047/a932a65b7371d590528a7a1d45773047.jpg"
                          alt="Swasey, John"></a>

                      <a href="/people/mugihito-2099" data-toggle="tooltip" title="Mugihito" class="pi-avatar"><img
                          class="lazyload"
                          data-src="https://img.flawlessfiles.com/_r/100x100/100/9b/5d/9b5db075ea6e28862431e161a8c5badc/9b5db075ea6e28862431e161a8c5badc.jpg"
                          alt="Mugihito"></a>

                      <a href="/people/wolfram-fuchs-10459" data-toggle="tooltip" title="Fuchs, Wolfram"
                        class="pi-avatar"><img class="lazyload"
                          data-src="https://img.flawlessfiles.com/_r/100x100/100/27/8e/278e5d0475a42bc5a57865f2cb123257/278e5d0475a42bc5a57865f2cb123257.jpg"
                          alt="Fuchs, Wolfram"></a>

                      <a href="/people/luis-porcar-8079" data-toggle="tooltip" title="Porcar, Luis"
                        class="pi-avatar"><img class="lazyload"
                          data-src="https://img.flawlessfiles.com/_r/100x100/100/28/b9/28b9b4ae3f2a9767fb54fd7ec65e417d/28b9b4ae3f2a9767fb54fd7ec65e417d.jpg"
                          alt="Porcar, Luis"></a>

                    </div>
                  </div>

                  <div class="clearfix"></div>
                </div>

                <div class="bac-item">
                  <div class="per-info ltr">
                    <a href="/character/izuna-hatsuse-1622" class="pi-avatar">
                      <img class="lazyload"
                        data-src="https://img.flawlessfiles.com/_r/100x100/100/57/df/57df959459bb31b221cd24ce6043ab31/57df959459bb31b221cd24ce6043ab31.jpg"
                        alt="Hatsuse, Izuna"></a>
                    <div class="pi-detail">
                      <h4 class="pi-name"><a href="/character/izuna-hatsuse-1622">Hatsuse, Izuna</a></h4>
                      <span class="pi-cast">Supporting</span>
                    </div>
                  </div>


                  <div class="per-info per-info-xx">
                    <div class="pix-list">

                      <a href="/people/miyuki-sawashiro-9" data-toggle="tooltip" title="Sawashiro, Miyuki"
                        class="pi-avatar"><img class="lazyload"
                          data-src="https://img.flawlessfiles.com/_r/100x100/100/dd/21/dd2106c7f911d17d5a23ef1e0126f6b1/dd2106c7f911d17d5a23ef1e0126f6b1.jpg"
                          alt="Sawashiro, Miyuki"></a>

                      <a href="/people/kira-vincent-davis-1353" data-toggle="tooltip" title="Vincent-Davis, Kira"
                        class="pi-avatar"><img class="lazyload"
                          data-src="https://img.flawlessfiles.com/_r/100x100/100/32/cf/32cffdbb6058fd66840fc8bedd4ccaef/32cffdbb6058fd66840fc8bedd4ccaef.jpg"
                          alt="Vincent-Davis, Kira"></a>

                      <a href="/people/celine-vogt-6843" data-toggle="tooltip" title="Vogt, Céline"
                        class="pi-avatar"><img class="lazyload"
                          data-src="https://img.flawlessfiles.com/_r/100x100/100/e5/68/e568a67e6b694d81f69ea68cf371b026/e568a67e6b694d81f69ea68cf371b026.jpg"
                          alt="Vogt, Céline"></a>

                      <a href="/people/silvia-cabrera-6793" data-toggle="tooltip" title="Cabrera, Silvia"
                        class="pi-avatar"><img class="lazyload"
                          data-src="https://img.flawlessfiles.com/_r/100x100/100/2a/12/2a12266a0adee90289d2ccd461f5719b/2a12266a0adee90289d2ccd461f5719b.jpg"
                          alt="Cabrera, Silvia"></a>

                    </div>
                  </div>

                  <div class="clearfix"></div>
                </div>

                <div class="bac-item">
                  <div class="per-info ltr">
                    <a href="/character/high-official-42204" class="pi-avatar">
                      <img class="lazyload"
                        data-src="https://img.flawlessfiles.com/_r/100x100/100/33/f7/33f7703fb9a5558b192e45f656822ed4/33f7703fb9a5558b192e45f656822ed4.jpg"
                        alt="High Official"></a>
                    <div class="pi-detail">
                      <h4 class="pi-name"><a href="/character/high-official-42204">High Official</a></h4>
                      <span class="pi-cast">Supporting</span>
                    </div>
                  </div>

                  <div class="per-info rtl">
                    <a href="/people/taketora-9896" class="pi-avatar">
                      <img class="lazyload"
                        data-src="https://img.flawlessfiles.com/_r/100x100/100/f5/ff/f5ffb48a6ee28c871c3df17591e49468/f5ffb48a6ee28c871c3df17591e49468.jpg"
                        alt="Taketora"></a>
                    <div class="pi-detail">
                      <h4 class="pi-name"><a href="/people/taketora-9896">Taketora</a>
                      </h4>
                      <span class="pi-cast">Japanese</span>
                    </div>
                  </div>


                  <div class="clearfix"></div>
                </div>

                <div class="bac-item">
                  <div class="per-info ltr">
                    <a href="/character/jibril-329" class="pi-avatar">
                      <img class="lazyload"
                        data-src="https://img.flawlessfiles.com/_r/100x100/100/c0/0b/c00b9c7080c81e7182b6fdd553792da2/c00b9c7080c81e7182b6fdd553792da2.jpg"
                        alt="Jibril"></a>
                    <div class="pi-detail">
                      <h4 class="pi-name"><a href="/character/jibril-329">Jibril</a></h4>
                      <span class="pi-cast">Supporting</span>
                    </div>
                  </div>


                  <div class="per-info per-info-xx">
                    <div class="pix-list">

                      <a href="/people/yukari-tamura-77" data-toggle="tooltip" title="Tamura, Yukari"
                        class="pi-avatar"><img class="lazyload"
                          data-src="https://img.flawlessfiles.com/_r/100x100/100/fb/57/fb579c9234f22964803115db71b863d0/fb579c9234f22964803115db71b863d0.jpg"
                          alt="Tamura, Yukari"></a>

                      <a href="/people/amelia-fischer-3996" data-toggle="tooltip" title="Fischer, Amelia"
                        class="pi-avatar"><img class="lazyload"
                          data-src="https://img.flawlessfiles.com/_r/100x100/100/43/90/4390738a3f4ce73cd7a1ffe2be75af2a/4390738a3f4ce73cd7a1ffe2be75af2a.jpg"
                          alt="Fischer, Amelia"></a>

                      <a href="/people/milena-karas-6840" data-toggle="tooltip" title="Karas, Milena"
                        class="pi-avatar"><img class="lazyload"
                          data-src="https://img.flawlessfiles.com/_r/100x100/100/46/97/46977c315ac263f550e1f77699409ec2/46977c315ac263f550e1f77699409ec2.jpg"
                          alt="Karas, Milena"></a>

                      <a href="/people/lopez-rosa-17202" data-toggle="tooltip" title="López, Rosa"
                        class="pi-avatar"><img class="lazyload" data-src="/images/no-avatar.jpeg" alt="López, Rosa"></a>

                    </div>
                  </div>

                  <div class="clearfix"></div>
                </div>

                <div class="bac-item">
                  <div class="per-info ltr">
                    <a href="/character/miko-5573" class="pi-avatar">
                      <img class="lazyload"
                        data-src="https://img.flawlessfiles.com/_r/100x100/100/9b/8e/9b8e778cdbb70aa97758e7acda340c38/9b8e778cdbb70aa97758e7acda340c38.jpg"
                        alt="Miko"></a>
                    <div class="pi-detail">
                      <h4 class="pi-name"><a href="/character/miko-5573">Miko</a></h4>
                      <span class="pi-cast">Supporting</span>
                    </div>
                  </div>


                  <div class="per-info per-info-xx">
                    <div class="pix-list">

                      <a href="/people/naomi-shindo-998" data-toggle="tooltip" title="Shindo, Naomi"
                        class="pi-avatar"><img class="lazyload"
                          data-src="https://img.flawlessfiles.com/_r/100x100/100/fc/4d/fc4d6884b8cd27477b37d947bc2dcf7e/fc4d6884b8cd27477b37d947bc2dcf7e.jpg"
                          alt="Shindo, Naomi"></a>

                      <a href="/people/suzelle-palacios-15108" data-toggle="tooltip" title="Palacios, Suzelle"
                        class="pi-avatar"><img class="lazyload"
                          data-src="https://img.flawlessfiles.com/_r/100x100/100/5e/66/5e668d5f84be1ce276476fc4abaf11e9/5e668d5f84be1ce276476fc4abaf11e9.jpg"
                          alt="Palacios, Suzelle"></a>

                      <a href="/people/daniela-bette-koch-11124" data-toggle="tooltip" title="Bette-Koch, Daniela"
                        class="pi-avatar"><img class="lazyload"
                          data-src="https://img.flawlessfiles.com/_r/100x100/100/8c/e8/8ce8ca6510b640b4ad5bd2424d42db1d/8ce8ca6510b640b4ad5bd2424d42db1d.jpg"
                          alt="Bette-Koch, Daniela"></a>

                      <a href="/people/marie-nonnenmacher-6226" data-toggle="tooltip" title="Nonnenmacher, Marie"
                        class="pi-avatar"><img class="lazyload"
                          data-src="https://img.flawlessfiles.com/_r/100x100/100/c4/40/c4403e618950c579a13dfa62f7237ff8/c4403e618950c579a13dfa62f7237ff8.jpg"
                          alt="Nonnenmacher, Marie"></a>

                    </div>
                  </div>

                  <div class="clearfix"></div>
                </div>

                <div class="bac-item">
                  <div class="per-info ltr">
                    <a href="/character/minister-of-agriculture-42267" class="pi-avatar">
                      <img class="lazyload"
                        data-src="https://img.flawlessfiles.com/_r/100x100/100/87/98/87989bb30a5dfb815d6469dc08a5f181/87989bb30a5dfb815d6469dc08a5f181.jpg"
                        alt="Minister of Agriculture"></a>
                    <div class="pi-detail">
                      <h4 class="pi-name"><a href="/character/minister-of-agriculture-42267">Minister of Agriculture</a>
                      </h4>
                      <span class="pi-cast">Supporting</span>
                    </div>
                  </div>

                  <div class="per-info rtl">
                    <a href="/people/haruki-ishiya-1883" class="pi-avatar">
                      <img class="lazyload"
                        data-src="https://img.flawlessfiles.com/_r/100x100/100/7a/78/7a78a7d6ea345146ed554f74dcfe8ba7/7a78a7d6ea345146ed554f74dcfe8ba7.jpg"
                        alt="Ishiya, Haruki"></a>
                    <div class="pi-detail">
                      <h4 class="pi-name"><a href="/people/haruki-ishiya-1883">Ishiya, Haruki</a>
                      </h4>
                      <span class="pi-cast">Japanese</span>
                    </div>
                  </div>


                  <div class="clearfix"></div>
                </div>

                <div class="clearfix"></div>
              </div>
              <div class="loading-relative" style="display: none;">
                <div class="loading">
                  <div class="span1"></div>
                  <div class="span2"></div>
                  <div class="span3"></div>
                </div>
              </div>
              <div class="pre-pagination">
                <nav aria-label="Page navigation">
                  <ul class="pagination mb-0">
                    <li class="page-item active"><a href="javascript:;" class="page-link">1</a></li>
                    <li class="page-item"><a title="Page 2" href="javascript:;" class="page-link"
                        onclick="paginationGetData(this)" data-container="#characters-content"
                        data-url="/ajax/character/list/261?page=2">2</a></li>
                    <li class="page-item"><a title="Next" href="javascript:;" class="page-link"
                        onclick="paginationGetData(this)" data-container="#characters-content"
                        data-url="/ajax/character/list/261?page=2">›</a></li>
                  </ul>
                </nav>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>var recaptchaSiteKey = '6Ldh6vAmAAAAAH7BbCmHGKNabF4g0Mk5_dIleJm_',
      recaptchaV2SiteKey = '6Lfz6fAmAAAAAKZdTpHpGUfe5OUYvosjXcpasbCd';</script>
  <script
    src="https://www.google.com/recaptcha/api.js?render=6Ldh6vAmAAAAAH7BbCmHGKNabF4g0Mk5_dIleJm_&amp;hl=en"></script>

  <script type="text/javascript"
    src="https://platform-api.sharethis.com/js/sharethis.js#property=64a3d891df473b0019d1b0da&amp;product=inline-share-buttons&amp;source=platform"
    async="async"></script>
  <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"
    integrity="sha384-/KNQL8Nu5gCHLqwqfQjA689Hhoqgi2S84SNUxC3roTe4EhJ9AfLkp8QiQcU8AMzI"
    crossorigin="anonymous"></script>
  <script type="text/javascript" src="/js/app.min.js?v=1.4"></script>
  <script>
    if ('serviceWorker' in navigator) {
      window.addEventListener('load', function () {
        navigator.serviceWorker.register('/sw.js?v=0.5');
      });
    }
    $('.anime-request-link').click(function (e) {
      e.preventDefault();
      if (isLoggedIn) {
        window.location.href = $(this).attr('href');
      } else {
        $('#modallogin').modal('show');
      }
    });
  </script>
  <script type="text/javascript" src="//potsaglu.net/5/5419283" async="" data-cfasync="false" defer=""></script>

  <script id="syncData"
    type="application/json">{"page":"episode","name":"No Game, No Life","anime_id":"261","mal_id":"19815","anilist_id":"19815","series_url":"https://aniwatch.to/watch/no-game-no-life-261","episode":7,"next_episode_url":"https://aniwatch.to/watch/no-game-no-life-261?ep=5335"}</script>

  <script type="text/javascript" src="/js/watch.min.js?v=3.4"></script>


  <div>
    <div class="grecaptcha-badge" data-style="bottomright"
      style="width: 256px; height: 60px; position: fixed; visibility: hidden; display: block; transition: right 0.3s ease 0s; bottom: 14px; right: -186px; box-shadow: gray 0px 0px 5px; border-radius: 2px; overflow: hidden;">
      <div class="grecaptcha-logo"><iframe title="reCAPTCHA" width="256" height="60" role="presentation"
          name="a-76yrxzxjzn4g" frameborder="0" scrolling="no"
          sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation"
          src="https://www.google.com/recaptcha/api2/anchor?ar=1&amp;k=6Ldh6vAmAAAAAH7BbCmHGKNabF4g0Mk5_dIleJm_&amp;co=aHR0cHM6Ly9hbml3YXRjaC50bzo0NDM.&amp;hl=en&amp;v=lLirU0na9roYU3wDDisGJEVT&amp;size=invisible&amp;cb=db6wt362npks"></iframe>
      </div>
      <div class="grecaptcha-error"></div><textarea id="g-recaptcha-response-100000" name="g-recaptcha-response"
        class="g-recaptcha-response"
        style="width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;"></textarea>
    </div>
  </div>
  <div id="qtip-0" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-0-content" aria-hidden="true" data-qtip-id="0" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-0-content" aria-atomic="true"></div>
  </div>
  <div id="qtip-1" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-1-content" aria-hidden="true" data-qtip-id="1" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-1-content" aria-atomic="true"></div>
  </div>
  <div id="qtip-2" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-2-content" aria-hidden="true" data-qtip-id="2" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-2-content" aria-atomic="true"></div>
  </div>
  <div id="qtip-3" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-3-content" aria-hidden="true" data-qtip-id="3" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-3-content" aria-atomic="true"></div>
  </div>
  <div id="qtip-4" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-4-content" aria-hidden="true" data-qtip-id="4" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-4-content" aria-atomic="true"></div>
  </div>
  <div id="qtip-5" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-5-content" aria-hidden="true" data-qtip-id="5" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-5-content" aria-atomic="true"></div>
  </div>
  <div id="qtip-6" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-6-content" aria-hidden="true" data-qtip-id="6" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-6-content" aria-atomic="true"></div>
  </div>
  <div id="qtip-7" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-7-content" aria-hidden="true" data-qtip-id="7" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-7-content" aria-atomic="true"></div>
  </div>
  <div id="qtip-8" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-8-content" aria-hidden="true" data-qtip-id="8" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-8-content" aria-atomic="true"></div>
  </div>
  <div id="qtip-9" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-9-content" aria-hidden="true" data-qtip-id="9" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-9-content" aria-atomic="true"></div>
  </div>
  <div id="qtip-10" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-10-content" aria-hidden="true" data-qtip-id="10" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-10-content" aria-atomic="true"></div>
  </div>
  <div id="qtip-11" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-11-content" aria-hidden="true" data-qtip-id="11" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-11-content" aria-atomic="true"></div>
  </div>
  <div id="qtip-12" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-12-content" aria-hidden="true" data-qtip-id="12" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-12-content" aria-atomic="true"></div>
  </div>
  <div id="qtip-13" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-13-content" aria-hidden="true" data-qtip-id="13" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-13-content" aria-atomic="true"></div>
  </div>
  <div id="qtip-14" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-14-content" aria-hidden="true" data-qtip-id="14" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-14-content" aria-atomic="true"></div>
  </div>
  <div id="qtip-15" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-15-content" aria-hidden="true" data-qtip-id="15" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-15-content" aria-atomic="true"></div>
  </div>
  <div id="qtip-16" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-16-content" aria-hidden="true" data-qtip-id="16" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-16-content" aria-atomic="true"></div>
  </div>
  <div id="qtip-17" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-17-content" aria-hidden="true" data-qtip-id="17" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-17-content" aria-atomic="true"></div>
  </div>
  <div id="qtip-18" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-18-content" aria-hidden="true" data-qtip-id="18" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-18-content" aria-atomic="true"></div>
  </div>
  <div id="qtip-19" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-19-content" aria-hidden="true" data-qtip-id="19" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-19-content" aria-atomic="true"></div>
  </div>
  <div id="qtip-20" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-20-content" aria-hidden="true" data-qtip-id="20" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-20-content" aria-atomic="true"></div>
  </div>
  <div id="qtip-21" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-21-content" aria-hidden="true" data-qtip-id="21" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-21-content" aria-atomic="true"></div>
  </div>
  <div id="qtip-22" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-22-content" aria-hidden="true" data-qtip-id="22" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-22-content" aria-atomic="true"></div>
  </div>
  <div id="qtip-23" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-23-content" aria-hidden="true" data-qtip-id="23" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-23-content" aria-atomic="true"></div>
  </div>
  <div id="qtip-24" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-24-content" aria-hidden="true" data-qtip-id="24" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-24-content" aria-atomic="true"></div>
  </div>
  <div id="qtip-25" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-25-content" aria-hidden="true" data-qtip-id="25" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-25-content" aria-atomic="true"></div>
  </div>
  <div id="qtip-26" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-26-content" aria-hidden="true" data-qtip-id="26" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-26-content" aria-atomic="true"></div>
  </div>
  <div id="qtip-27" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-27-content" aria-hidden="true" data-qtip-id="27" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-27-content" aria-atomic="true"></div>
  </div>
  <div id="qtip-28" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-28-content" aria-hidden="true" data-qtip-id="28" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-28-content" aria-atomic="true"></div>
  </div>
  <div id="qtip-29" class="qtip qtip-default qtip-pos-tl qtip-fixed" tracking="false" role="alert" aria-live="polite"
    aria-atomic="false" aria-describedby="qtip-29-content" aria-hidden="true" data-qtip-id="29" style="width: 300px;">
    <div class="qtip-tip" style="display: none;"><canvas></canvas></div>
    <div class="qtip-content" id="qtip-29-content" aria-atomic="true"></div>
  </div>
  <div
    style="background-color: rgb(255, 255, 255); border: 1px solid rgb(204, 204, 204); box-shadow: rgba(0, 0, 0, 0.2) 2px 2px 3px; position: absolute; transition: visibility 0s linear 0.3s, opacity 0.3s linear 0s; opacity: 0; visibility: hidden; z-index: 2000000000; left: 0px; top: -10000px;">
    <div
      style="width: 100%; height: 100%; position: fixed; top: 0px; left: 0px; z-index: 2000000000; background-color: rgb(255, 255, 255); opacity: 0.05;">
    </div>
    <div class="g-recaptcha-bubble-arrow"
      style="border: 11px solid transparent; width: 0px; height: 0px; position: absolute; pointer-events: none; margin-top: -11px; z-index: 2000000000;">
    </div>
    <div class="g-recaptcha-bubble-arrow"
      style="border: 10px solid transparent; width: 0px; height: 0px; position: absolute; pointer-events: none; margin-top: -10px; z-index: 2000000000;">
    </div>
    <div style="z-index: 2000000000; position: relative;"><iframe title="recaptcha challenge expires in two minutes"
        name="c-nz4buhu0jyz6" frameborder="0" scrolling="no"
        sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation"
        src="https://www.google.com/recaptcha/api2/bframe?hl=en&amp;v=lLirU0na9roYU3wDDisGJEVT&amp;k=6Lfz6fAmAAAAAKZdTpHpGUfe5OUYvosjXcpasbCd"
        style="width: 100%; height: 100%;"></iframe></div>
  </div>
  <div
    style="background-color: rgb(255, 255, 255); border: 1px solid rgb(204, 204, 204); box-shadow: rgba(0, 0, 0, 0.2) 2px 2px 3px; position: absolute; transition: visibility 0s linear 0.3s, opacity 0.3s linear 0s; opacity: 0; visibility: hidden; z-index: 2000000000; left: 0px; top: -10000px;">
    <div
      style="width: 100%; height: 100%; position: fixed; top: 0px; left: 0px; z-index: 2000000000; background-color: rgb(255, 255, 255); opacity: 0.05;">
    </div>
    <div class="g-recaptcha-bubble-arrow"
      style="border: 11px solid transparent; width: 0px; height: 0px; position: absolute; pointer-events: none; margin-top: -11px; z-index: 2000000000;">
    </div>
    <div class="g-recaptcha-bubble-arrow"
      style="border: 10px solid transparent; width: 0px; height: 0px; position: absolute; pointer-events: none; margin-top: -10px; z-index: 2000000000;">
    </div>
    <div style="z-index: 2000000000; position: relative;"><iframe title="recaptcha challenge expires in two minutes"
        name="c-gpfqi5y438zd" frameborder="0" scrolling="no"
        sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation"
        src="https://www.google.com/recaptcha/api2/bframe?hl=en&amp;v=lLirU0na9roYU3wDDisGJEVT&amp;k=6Lfz6fAmAAAAAKZdTpHpGUfe5OUYvosjXcpasbCd"
        style="width: 100%; height: 100%;"></iframe></div>
  </div>
  <div
    style="background-color: rgb(255, 255, 255); border: 1px solid rgb(204, 204, 204); box-shadow: rgba(0, 0, 0, 0.2) 2px 2px 3px; position: absolute; transition: visibility 0s linear 0.3s, opacity 0.3s linear 0s; opacity: 0; visibility: hidden; z-index: 2000000000; left: 0px; top: -10000px;">
    <div
      style="width: 100%; height: 100%; position: fixed; top: 0px; left: 0px; z-index: 2000000000; background-color: rgb(255, 255, 255); opacity: 0.05;">
    </div>
    <div class="g-recaptcha-bubble-arrow"
      style="border: 11px solid transparent; width: 0px; height: 0px; position: absolute; pointer-events: none; margin-top: -11px; z-index: 2000000000;">
    </div>
    <div class="g-recaptcha-bubble-arrow"
      style="border: 10px solid transparent; width: 0px; height: 0px; position: absolute; pointer-events: none; margin-top: -10px; z-index: 2000000000;">
    </div>
    <div style="z-index: 2000000000; position: relative;"><iframe title="recaptcha challenge expires in two minutes"
        name="c-khlkp7c050xl" frameborder="0" scrolling="no"
        sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation"
        src="https://www.google.com/recaptcha/api2/bframe?hl=en&amp;v=lLirU0na9roYU3wDDisGJEVT&amp;k=6Lfz6fAmAAAAAKZdTpHpGUfe5OUYvosjXcpasbCd"
        style="width: 100%; height: 100%;"></iframe></div>
  </div>
  <div
    style="background-color: rgb(255, 255, 255); border: 1px solid rgb(204, 204, 204); box-shadow: rgba(0, 0, 0, 0.2) 2px 2px 3px; position: absolute; transition: visibility 0s linear 0.3s, opacity 0.3s linear 0s; opacity: 0; visibility: hidden; z-index: 2000000000; left: 0px; top: -10000px;">
    <div
      style="width: 100%; height: 100%; position: fixed; top: 0px; left: 0px; z-index: 2000000000; background-color: rgb(255, 255, 255); opacity: 0.05;">
    </div>
    <div class="g-recaptcha-bubble-arrow"
      style="border: 11px solid transparent; width: 0px; height: 0px; position: absolute; pointer-events: none; margin-top: -11px; z-index: 2000000000;">
    </div>
    <div class="g-recaptcha-bubble-arrow"
      style="border: 10px solid transparent; width: 0px; height: 0px; position: absolute; pointer-events: none; margin-top: -10px; z-index: 2000000000;">
    </div>
    <div style="z-index: 2000000000; position: relative;"><iframe title="recaptcha challenge expires in two minutes"
        name="c-vndf1gg110wp" frameborder="0" scrolling="no"
        sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation"
        src="https://www.google.com/recaptcha/api2/bframe?hl=en&amp;v=lLirU0na9roYU3wDDisGJEVT&amp;k=6Lfz6fAmAAAAAKZdTpHpGUfe5OUYvosjXcpasbCd"
        style="width: 100%; height: 100%;"></iframe></div>
  </div>
</body>

</html>
