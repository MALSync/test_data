<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
        <title>The Concept-Grasping Magical Genius</title>
    <meta name="format-detection" content="telephone=no">
    <meta name="robots" content="follow, index, max-snippet:-1, max-video-preview:-1, max-image-preview:large">
    <link rel="icon" href="https://wsrv.nl/?url=cdn.meowing.org/uploads/a563fb09246&amp;w=20">
    <link rel="canonical" href="https://genzupdates.com/series/634504a70a7/">
    <meta name="description" content="Pauline became a mother figure to Rowan, who had lost everything.
After Pauline left, Rowan grieved her and awakened to a power called 'Mana'.
What's more, Rowan could even see the Mana of other people!
Through mana, even though he's apart from Pauline, he can always feel like she's with him...
One day, Rowan encounters a shocking sight of Pauline, who he believed had left for a noble family. - A Standard scanlation dedicated to providing high-quality translations, offering readers with the Best. Enjoy a vast library of series, updated regularly for an enhanced reading experience. - The Concept-Grasping Magical Genius">
    <meta name="keywords" content="Action, Adventure, Magic, manhua, webtoon, manga scanlations, manhwa scanlations, manhua scanlations, latest manga releases, manga chapters, manga online free, manga download, manga raw, manhwa updates, Korean manhwa, Japanese manga, Chinese manhua, high-quality manga, manga scans, manga translations online, webtoon translations, manga aggregator, manga discussion, shonen manga, seinen manga, manga genres, romance manga, action manga, fantasy manga, manga spoilers, manga release schedule, manga summaries, read manhwa online, new manga chapters, manga edits, manga raws to translated, manga reader app, manga reviews, popular manga series, top manhwa, manga bookmarks, manga search, webtoon reader, manhwa chapters, fantasy, manhwa online platform, manhwa recommendations, manhwa reviews, popular manhwa series, manhwa releases, manhwa reading site, manhwa library, Korean webtoons, manhwa collection, latest manhwa updates, free manhwa, Korean comics">
    <meta property="og:type" content="website">
    <meta property="og:title" content="The Concept-Grasping Magical Genius">
    <meta property="og:description" content="Pauline became a mother figure to Rowan, who had lost everything.
After Pauline left, Rowan grieved her and awakened to a power called 'Mana'.
What's more, Rowan could even see the Mana of other people!
Through mana, even though he's apart from Pauline, he can always feel like she's with him...
One day, Rowan encounters a shocking sight of Pauline, who he believed had left for a noble family. - A Standard scanlation dedicated to providing high-quality translations, offering readers with the Best. Enjoy a vast library of series, updated regularly for an enhanced reading experience. - The Concept-Grasping Magical Genius">
    <meta property="og:url" content="http://genzupdates.com/series/634504a70a7/">
    <meta property="og:site_name" content="Genz Toon">
    <meta property="og:image:alt" content="The Concept-Grasping Magical Genius">
    <meta property="og:image" content="https://wsrv.nl/?url=cdn.meowing.org/uploads/DLYi8Atxxz-">
    <meta property="og:image:secure_url" content="https://wsrv.nl/?url=cdn.meowing.org/uploads/DLYi8Atxxz-">
    <meta property="twitter:title" content="The Concept-Grasping Magical Genius">
    <meta property="twitter:description" content="Pauline became a mother figure to Rowan, who had lost everything.
After Pauline left, Rowan grieved her and awakened to a power called 'Mana'.
What's more, Rowan could even see the Mana of other people!
Through mana, even though he's apart from Pauline, he can always feel like she's with him...
One day, Rowan encounters a shocking sight of Pauline, who he believed had left for a noble family. - A Standard scanlation dedicated to providing high-quality translations, offering readers with the Best. Enjoy a vast library of series, updated regularly for an enhanced reading experience. - The Concept-Grasping Magical Genius">
    <meta property="twitter:image" content="https://wsrv.nl/?url=cdn.meowing.org/uploads/DLYi8Atxxz-">
        <meta property="twitter:card" content="summary_large_image">
        <script async="" src="https://count-server.sharethis.com/v2.0/get_counts?cb=window.__sharethis__.cb&amp;url=https%3A%2F%2Fgenzupdates.com%2Fseries%2F634504a70a7%2F"></script><script async="" src="https://buttons-config.sharethis.com/js/65dc466cf44fb1001a4c6a85.js"></script><script type="application/ld+json">
    {
        "@context": "https://schema.org",
        "@type": "Article",
        "headline": "The Concept-Grasping Magical Genius",
        "description": "Pauline became a mother figure to Rowan, who had lost everything.
After Pauline left, Rowan grieved her and awakened to a power called 'Mana'.
What's more, Rowan could even see the Mana of other people!
Through mana, even though he's apart from Pauline, he can always feel like she's with him...
One day, Rowan encounters a shocking sight of Pauline, who he believed had left for a noble family. - A Standard scanlation dedicated to providing high-quality translations, offering readers with the Best. Enjoy a vast library of series, updated regularly for an enhanced reading experience. - The Concept-Grasping Magical Genius",
        "url": "http://genzupdates.com/series/634504a70a7/",
        "datePublished": "2025-05-04T14:35:11+00:00",
        "dateModified": "2025-10-04T14:44:07+00:00",
        "image": "https://wsrv.nl/?url=cdn.meowing.org/uploads/DLYi8Atxxz-",
        "author": {
            "@type": "Person",
            "name": "Genz Toon",
            "url": "http://genzupdates.com/series/634504a70a7/"
        },
        "publisher": {
            "@type": "Organization",
            "name": "Genz Toon",
            "logo": {
                "@type": "ImageObject",
                "url": "https://wsrv.nl/?url=cdn.meowing.org/uploads/a563fb09246&w=20"
            }
        },
        "mainEntityOfPage": {
            "@type": "WebPage",
            "@id": "http://genzupdates.com/series/634504a70a7/"
        }
    }
    </script>
    <!-- <script src="https://unpkg.com/htmx.org@1.9.3/dist/htmx.min.js" async></script> -->
    <!-- <script src="https://unpkg.com/htmx.org/dist/ext/loading-states.js" defer></script> -->
        <script src="https://www.googletagmanager.com/gtag/js?id=G-6VPH7V4TGT" async="">
    </script>
    <script async="">
    function gtag() {
        window.dataLayer.push(arguments);
    }
    window.dataLayer = window.dataLayer || [];
    gtag("js", new Date());
    gtag("config", "G-6VPH7V4TGT");
    </script>
        <script async="" src="https://www.googletagmanager.com/gtag/js?id=G-WBZZWKCQVZ"></script>
    <script>
    window.dataLayer = window.dataLayer || [];

    function gtag2() {
        dataLayer.push(arguments);
    }
    gtag2('js', new Date());

    gtag2('config', 'G-WBZZWKCQVZ');
    </script>
    <script src="https://cdn.jsdelivr.net/npm/store2@2.14.2/dist/store2.min.js"></script>
                <link rel="stylesheet" href="https://f.feedmas.com/fw.css">
    
    <script src="/assets/scripts/index.js?clear=v3.8"></script>
    <script src="https://cdn.jsdelivr.net/npm/cleave.js@1.6.0"></script>
    <link rel="stylesheet" href="/assets/styles/output.css?clear=v5.2">

            <style>
    :root {
        --theme_color: #1f2937;
        --header: var(--theme_color);
        --footer: rgb(255 255 255 / 0.1);
        --button: #09090b;
    }

    iframe:not([src]) {
        display: none !important;
    }

    .fw .fw-z-10 {
        z-index: 200 !important;
    }
    </style>
    <style>
    @import url("https://fonts.googleapis.com/css2?family=Poppins:wght@100;200;300;400;500;600;700;800;900&display=swap");
    @import url("https://fonts.googleapis.com/css2?family=Bebas+Neue&family=Croissant+One&family=Young+Serif&display=swap");
    @import url('https://fonts.googleapis.com/css2?family=Bree+Serif&display=swap');
    @import url('https://fonts.googleapis.com/css2?family=Courier+Prime:ital,wght@0,400;0,700;1,400;1,700&display=swap');
    </style>
                <script async="">
    (async function() {
        let library = store.get('library');
        if (library) {
            let series_list = [];
            for (const id in library) {
                series_list.push(id);
            }

            if (series_list.length > 0) {
                let to_json_string = JSON.stringify(series_list);
                try {
                    // UNDER WORK
                    // let response = await fetch('/sync?series=' + encodeURIComponent(to_json_string));
                    // let {
                    //     success
                    // } = await response.json();
                    // if (success) {
                    //     store.remove('library');
                    // }
                } catch (error) {
                    console.error('Failed to sync series:', error);
                }
            }
        }
    })();
    </script>


<style>.\[\&_\.gdprAdTransparencyCogWheelButton\]\:\!pjra-z-\[5\],
AD-SLOT,
DFP-AD,
[class^="adDisplay-module"],
[class^="amp-ad-"],
[data-ad-cls],
[data-adbridg-ad-class],
[data-adshim],
[data-asg-ins],
[data-block-type="ad"],
[data-cl-spot-id],
[data-css-class="dfp-inarticle"],
[data-d-ad-id],
[data-desktop-ad-id],
[data-dynamic-ads],
[data-ez-name],
[data-freestar-ad][id],
[data-id^="div-gpt-ad"],
[data-identity="adhesive-ad"],
[data-m-ad-id],
[data-mobile-ad-id],
[data-rc-widget],
[data-role="tile-ads-module"],
[data-template-type="nativead"],
[data-testid="adBanner-wrapper"],
[data-testid="ad_testID"],
[data-testid="prism-ad-wrapper"],
[data-testid^="section-AdRowBillboard"],
[data-type="ad-vertical"],
[data-wpas-zoneid],
[href$="/sexdating.php"],
[id^="ad-wrap-"],
[id^="ad_sky"],
[id^="ad_slider"],
[id^="section-ad-banner"],
[onclick^="location.href='https://1337x.vpnonly.site/"],
a-ad,
a[data-href^="http://ads.trafficjunky.net/"],
a[data-url^="https://vulpix.bet/?ref="],
a[onclick^="window.location.replace('https://random-affiliate.atimaze.com/"],
a[style="width:100%;height:100%;z-index:10000000000000000;position:absolute;top:0;left:0;"],
ad-shield-ads,
ad-slot,
app-ad,
app-advertisement,
app-large-ad,
aside[id^="adrotate_widgets-"],
atf-ad-slot,
bottomadblock,
display-ad-component,
display-ads,
div[class$="-adlabel"],
div[class^="Adstyled__AdWrapper-"],
div[data-ad-placeholder],
div[data-ad-region],
div[data-ad-wrapper],
div[data-adname],
div[data-adunit-path],
div[data-adunit],
div[data-adzone],
div[data-alias="300x250 Ad 1"],
div[data-alias="300x250 Ad 2"],
div[data-contentexchange-widget],
div[data-dfp-id],
div[data-id-advertdfpconf],
div[id^="ad-div-"],
div[id^="ad-position-"],
div[id^="adngin-"],
div[id^="adrotate_widgets-"],
div[id^="adspot-"],
div[id^="crt-"][style],
div[id^="div-ads-"],
div[id^="google_dfp_"],
div[id^="gpt_ad_"],
div[id^="lazyad-"],
div[id^="optidigital-adslot"],
div[id^="rc-widget-"],
div[id^="st"][style^="z-index: 999999999;"],
div[id^="sticky_ad_"],
div[id^="vuukle-ad-"],
div[ow-ad-unit-wrapper],
gpt-ad,
guj-ad,
hl-adsense,
img[src^="https://images.purevpnaffiliates.com"],
img[src^="https://s-img.adskeeper.com/"],
ps-connatix-module,
span[data-ez-ph-id],
span[id^="ezoic-pub-ad-placeholder-"],
topadblock,
zeus-ad,
broadstreet-zone-container,
iframe[scrolling="no"][sandbox*="allow-popups allow-modals"][style^="width: 100%; height: 100%; border: none;"],
[class^="tile-picker__CitrusBannerContainer-sc-"],
citrus-ad-wrapper,
div[id*="MarketGid"],
[onclick*="content.ad/"],
AMP-AD,
amp-ad,
amp-ad-custom,
amp-connatix-player,
amp-fx-flying-carpet,
a[data-oburl^="https://paid.outbrain.com/network/redir?"],
a[data-redirect^="https://paid.outbrain.com/network/redir?"],
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"] + .ob_source,
[data-taboola-options],
[data-testid="commercial-label-taboola"],
[data-testid^="taboola-"],
amp-embed[type="taboola"],
div[id^="taboola-stream-"],
div[id^="zergnet-widget"],
html[lang] > body.ishome > div.adult + main.main,
html[lang] > body:not([class]):not([id]):not([style]) > div.background-container > div.container > div.captcha-box,
html[lang] > body.startnew > div#sections > section#section_uname,
html[lang] > body:not([style]) > div.captchaBody,
html[lang] > body#body > * > div.cv-xwrapper > div.cvc > div.cv-inner,
html[lang] > body#body > * > div.cvh.BlockClicksActivityBusy,
html#html[sti][vic][lang] > body#allbody,
html > body > div.container.m-p > #checkbox-window.checkbox-window,
html[lang] > body:not([class]):not([id]):not([style]) > div.container > div.recaptcha-box,
body > .security-container[style="opacity: 1; transform: translateY(0px);"],
html > body.hold-transition.theme-primary.bg-img[style^="background-image"][style*="wallpaperaccess.com"][style*="background-repeat"][style*="background-size"],
html > body > div.container > form#unsubscribe-form[onsubmit="submitUnsubscribeForm(event)"],
html > body > div.content > dl > dd.dd1 > div.min_sider > form#form1[action="unsubscribe.php"],
html > body.body > div.container > div.content > form > table.optoutForm,
div[id][style^="position: fixed; inset: 0px; z-index: 2147483647; background: black"][style*="opacity: 0.01"],
div[class$="player-promo-col"],
div#spot-holder.spot-holder[style="display: block;"],
a[dontfo=""][style$="position: absolute; z-index: 2147483647;"],
[data-ad-module]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-width]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-adblockkey]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(html):not(.adsbygoogle),
[data-advadstrackid]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-manager-id]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
div[style^="z-index: 999999; background-image: url(\"data:image/gif;base64,"][style$="position: absolute;"],
a[onclick="openAuc();"],
div[style="position: fixed; display: block; width: 100%; height: 100%; inset: 0px; background-color: rgba(0, 0, 0, 0); z-index: 300000;"],
div[style^="position:fixed;inset:0px;z-index:2147483647;background:black;opacity:0.01"],
div[style^="position: fixed; inset: 0px; z-index: 2147483647; background: black; opacity: 0.01"],
iframe.lazyloaded[data-src^="https://rcm-fe.amazon-adsystem.com/"],
#player div[style$="cursor: pointer; position: absolute; width: 100%; height: 100%; padding: 1rem; z-index: 2147483647;"],
html[lang][style^="--main-bg-color"] > body:not([class]):not([id]) > div#container[style="visibility: visible;"] > div#banner[style="opacity:0"] ~ main:not([class]):not([id]) > div#message,
[onclick*="postlnk.com"],
[data-lnguri*="vipbox"],
[class^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]) { display: none !important; }

[data-ad-name],
[data-revive-zoneid],
[name^="google_ads_iframe"],
div[aria-label="Ads"],
div[data-ad-targeting],
div[id^="ad_position_"],
div[id^="dfp-ad-"],
div[id^="ezoic-pub-ad-"],
ins.adsbygoogle[data-ad-client],
ins.adsbygoogle[data-ad-slot],
[class^="s2nPlayer"],
div[id*="ScriptRoot"],
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"],
div[id^="div-gpt-"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]):not([style="pointer-events: none; height: 1px; width: 0px; opacity: 0; visibility: hidden; position: fixed; bottom: 0px;"]),
[id^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]):not([style="pointer-events: none; height: 1px; width: 0px; opacity: 0; visibility: hidden; position: fixed; bottom: 0px;"]),
div[style^="height:    250px; width:    300px;"],
div[style^="width:    160px; height:    600px; margin: 0px auto; min-width: 160px; min-height: 600px;"],
div[style^="width:    300px; height:    250px;"],
html[class^="img_"][amp4ads=""][i-amphtml-layout=""][i-amphtml-no-boilerplate=""][amp-version="2502032353000"],
html[class^="img_"][amp4ads=""][i-amphtml-layout=""][i-amphtml-no-boilerplate=""][amp-version="2507172035000"],
html[class^="img_"][amp4ads=""][i-amphtml-layout=""][i-amphtml-no-boilerplate=""][amp-version="2509031727000"],
img[height="   250"][width="   300"],
img[height="   90"][width="   728"],
ins[style$="height:    90px; width:    728px;"],
*:not(body) > a[href^="https://content-loader.com/"],
*:not(body) > a[href^="https://html-load.com/"],
*:not(body) > a[href^="https://07c225f3.online/"] { display: none !important; }</style><style type="text/css">#st-1 {
  font-family: "Helvetica Neue", Verdana, Helvetica, Arial, sans-serif;;
  direction: ltr;
  display: block;
  opacity: 1;
  text-align: left;
  z-index: 94034;
}
#st-1.st-animated {
  -moz-transition: o 0.2s ease-in, p 0.2s ease-in, a 0.2s ease-in, c 0.2s ease-in, i 0.2s ease-in, t 0.2s ease-in, y 0.2s ease-in; -ms-transition: o 0.2s ease-in, p 0.2s ease-in, a 0.2s ease-in, c 0.2s ease-in, i 0.2s ease-in, t 0.2s ease-in, y 0.2s ease-in; -o-transition: o 0.2s ease-in, p 0.2s ease-in, a 0.2s ease-in, c 0.2s ease-in, i 0.2s ease-in, t 0.2s ease-in, y 0.2s ease-in; -webkit-transition: o 0.2s ease-in, p 0.2s ease-in, a 0.2s ease-in, c 0.2s ease-in, i 0.2s ease-in, t 0.2s ease-in, y 0.2s ease-in; transition: o 0.2s ease-in, p 0.2s ease-in, a 0.2s ease-in, c 0.2s ease-in, i 0.2s ease-in, t 0.2s ease-in, y 0.2s ease-in;
}
#st-1.st-hidden {
  opacity: 0;
}

#st-1.st-preview {
  display: none!important;
  opacity: 0!important;
}
#st-1.st-hide {
  display: none;
}
#st-1 .st-btn {
  -moz-box-sizing: border-box;
-webkit-box-sizing: border-box;
box-sizing: border-box;
  -moz-transition: opacity 0.2s ease-in, top 0.2s ease-in; -ms-transition: opacity 0.2s ease-in, top 0.2s ease-in; -o-transition: opacity 0.2s ease-in, top 0.2s ease-in; -webkit-transition: opacity 0.2s ease-in, top 0.2s ease-in; transition: opacity 0.2s ease-in, top 0.2s ease-in;
  -moz-border-radius: 20px;
-webkit-border-radius: 20px;
border-radius: 20px;
  border: none;
  cursor: pointer;
  display: inline-block;
  font-size: 12px;
  height: 40px;
  line-height: 40px;
  margin-right: 8px;
  padding: 0 10px;
  position: relative;
  text-align: center;
  top: 0;
  vertical-align: top;
  white-space: nowrap;
}
#st-1 .st-btn:last-child {
  margin-right: 0;
}
#st-1 .st-btn > svg {
  height: 20px;
  width: 20px;
  position: relative;
  top: 10px;
  vertical-align: top;
}
#st-1 .st-btn > img {
  display: inline-block;
  height: 20px;
  width: 20px;
  position: relative;
  top: 10px;
  vertical-align: top;
}
#st-1 .st-btn > span {
  -moz-transition: all 0.2s ease-in; -ms-transition: all 0.2s ease-in; -o-transition: all 0.2s ease-in; -webkit-transition: all 0.2s ease-in; transition: all 0.2s ease-in;
  color: #fff;
  display: inline-block;
  font-weight: 500;
  letter-spacing: 0.5px;
  min-width: 67px;
  opacity: 1;
  padding: 0 6px;
  position: relative;
  vertical-align: top;
}
#st-1.st-has-labels .st-btn {
  min-width: 135px;
}
#st-1.st-has-labels .st-btn.st-remove-label {
  min-width: 50px;
}
#st-1.st-has-labels .st-btn.st-remove-label > span {
  display: none;
}
#st-1.st-has-labels .st-btn.st-hide-label > span {
  display: none;
}
#st-1 .st-total {
  color: #555;
  display: inline-block;
  font-weight: 500;
  line-height: 15px;
  margin-right: 0;
  max-width: 80px;
  padding: 4px 8px;
  text-align: center;
}
#st-1 .st-total.st-hidden {
  display: none;
}
#st-1 .st-total > span {
  font-size: 20px;
  line-height: 22px;
  display: block;
  padding: 0;
}
#st-1 .st-total > span.st-shares {
  font-size: 12px;
  line-height: 12px;
}
#st-1.st-justified {
  display: flex;
  text-align: center;
}
#st-1.st-justified .st-btn {
  -moz-flex: 1;
-ms-flex: 1;
-webkit-flex: 1;
flex: 1;
}#st-1 .st-btn:hover {
  opacity: .8;
  top: -4px;
}#st-1 .st-btn[data-network='sharethis'] {
  background-color: #6366f1
}
#st-1 .st-btn[data-network='sharethis'] img {
  filter: invert(1%) sepia(5%) saturate(2%) hue-rotate(221deg) brightness(113%) contrast(100%);
}
#st-1 .st-btn[data-network='sharethis'] > span {
  color: #ffffff
}#st-1 .st-btn[data-network='snapchat'] > span {
  color: #333};
}</style><style>.grid > .container > #aside-promotion,
.sharethis-inline-share-buttons.st-hidden,
[href*="postlnk.com"],
[href*="passtechusa.com"] { display: none !important; }</style></head>
<body class="bg-[--theme_color] text-white select-none" hx-ext="loading-states">
    <header id="main_header" class="grid w-full bg-[--header] border-b border-white/10 transition-all duration-300 sticky top-0 z-[160]">
    <div class="grid">
        <div class="grid w-full 2xl:max-w-[100rem] sm:max-w-6xl mx-auto p-4 md:gap-2">
            <div class="flex gap-2 justify-between items-center">
                <div class="flex items-center gap-2 justify-start  w-full">
                    <a style="background-image: url(https://wsrv.nl/?url=cdn.meowing.org/uploads/a563fb09246&amp;w=44);" class="flex w-fit justify-center items-center h-11 aspect-square gap-3 border border-white/10 bg-center bg-cover bg-no-repeat rounded-full" href="/">

                    </a>
                    <button id="showPanelButton" class="pl-4 pr-6 sm:flex hidden justify-center items-center h-11 gap-2.5 bg-white/10 hover:bg-white/20 transition-all rounded-full sm:w-fit w-full">
                        <img class="w-6 h-6 sm:block hidden" src="https://api.iconify.design/ph:magnifying-glass-bold.svg?color=white">
                        <div class="text-base font-light">
                            Search
                        </div>
                    </button>
                    <div id="showPanelButton" class="sm:hidden flex justify-center items-center w-full h-11 bg-white/10 rounded-full">
                        <div class="text-base">
                            Search
                        </div>
                    </div>
                    <div class="flex justify-start items-center sm:gap-0 gap-2">
                        <div>
                            <a href="/latest" class="group sm:pl-2 sm:pr-1 p-0 w-11 overflow-hidden flex   justify-center items-center h-11 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer sm:rounded-r-none rounded-full">
                                <img class="w-6 transition-all" src="https://api.iconify.design/mdi:calendar-badge-outline.svg?color=white">
                            </a>
                        </div>
                                                    <div>
                                <a href="/series" class="group p-0 w-11 overflow-hidden flex   justify-center items-center h-11 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer sm:rounded-none rounded-full">
                                    <img class="w-6  transition-all" src="https://api.iconify.design/material-symbols:space-dashboard-rounded.svg?color=white">
                                </a>
                            </div>
                            <div>
                                <a href="/library/" class="group sm:pr-2 sm:pl-1 p-0 w-11 overflow-hidden flex   justify-center items-center h-11 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer sm:rounded-l-none rounded-full">
                                    <img class="w-6 transition-all" src="https://api.iconify.design/fluent:library-28-filled.svg?color=white" alt="library">
                                </a>
                            </div>
                                            </div>
                </div>
                <div class="lg:w-full flex justify-end items-center gap-4 relative">
                                                                                                                                        <button id="open_login_panel_button" class="sm:px-5 flex sm:w-fit sm:aspect-auto aspect-[1/1] a  justify-center items-center h-11 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full z-0">
            <img class="w-6" src="https://api.iconify.design/majesticons:login-half-circle.svg?color=white">
            <div class="font-medium sm:block hidden ">Sign in</div>
        </button>
                <div style="height: 100vh" id="login_panel_main" class="hidden justify-center items-center w-full h-full fixed top-0 left-0 z-[100] overflow-hidden">
    <div id="login_panel_background" class="w-full h-full absolute top-0 left-0 bg-[--theme_color] opacity-80">

    </div>
    
        <div id="login_panel" style="max-width: 40rem" class="grid bg-[--theme_color]  w-full sm:h-fit h-full relative sm:rounded-xl overflow-hidden">
        <div class="sm:border border-white/10 sm:rounded-[0.76rem] h-full w-full flex flex-col justify-center items-center">
                                                                                                                                    <div class="sm:h-fit h-[100vh] w-full grid relative overflow-hidden">
                            <div class="w-full flex justify-center items-center bg-white/10 overflow-hidden sm:h-80 h-full">
                                <div class="grid gap-2 grid-cols-4 p-2 w-full">

                                                                            <div class="grid gap-2 grid-slide-up">
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/XLyPJFSAI7g&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/GmiNmtq2uI_&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/4Fw7EWAx4XA&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/517981ea140&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/WmGZLGSLSPd&amp;w=300)">
                                                </div>
                                                                                    </div>
                                                                            <div class="grid gap-2 grid-slide-down">
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/IQJweuzmsAt&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/ec93d9b1186&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/a01ba7128cb&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/bc09b5780b0&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/112886e1581&amp;w=300)">
                                                </div>
                                                                                    </div>
                                                                            <div class="grid gap-2 grid-slide-up">
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/d8BKHPTZbCw&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/bqyzhwLhiYX&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/8B3rbm4a-9X&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/FcwKT4GYYyW&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/I3P3iR8qCVn&amp;w=300)">
                                                </div>
                                                                                    </div>
                                                                            <div class="grid gap-2 grid-slide-down">
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/DLYi8Atxxz-&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/ji4nDkB2qRE&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/nmCwsawD05c&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/qnYxOgWHevs&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/89283949208&amp;w=300)">
                                                </div>
                                                                                    </div>
                                                                    </div>
                            </div>
                            <div class="w-full absolute top-0 left-0 h-full bg-gradient-to-t from-[--theme_color] to-transparent">

                            </div>
                        </div>
                        <style>
                            .grid-slide-down {
                                transform: translateY(55px);
                            }
                        </style>

                                                    <div class="flex sm:justify-center items-center flex-col gap-6 w-full pt-0 p-8 sm:h-fit h-full">
                    <div class="gap-2 grid">
                        <div class="font-semibold text-2xl w-fit">
                            Sign in
                        </div>
                        <div class="">
                            Quick and easy – connect with your social account and get started in one click.
                        </div>
                    </div>
                    <div class="grid w-full">
                        <div class="grid md:grid-cols-2 gap-4 w-full">
                            <a href="/auth?type=discord" class="sm:px-5 px-[4vw] flex  w-full justify-center items-center h-11 gap-3 bg-[#5865F2] hover:bg-opacity-70 transition-all cursor-pointer rounded-full">
                                <img class="w-6" src="https://api.iconify.design/cbi:discord.svg?color=white">
                                <div class="font-medium">Continue with Discord</div>
                            </a>
                            <a href="/auth?type=google" class="sm:px-5 px-[4vw] flex  w-full justify-center items-center h-11 gap-3 text-black bg-white hover:bg-opacity-70 transition-all cursor-pointer rounded-full">
                                <img class="w-6" src="https://api.iconify.design/logos:google-icon.svg?color=white">
                                <div class="font-bold">Continue with Google</div>
                            </a>
                        </div>
                    </div>
                </div>
                                    <button id="close_login_panel_button" class="absolute top-0 right-0 m-4 flex w-fit aspect-square justify-center items-center h-11 gap-3 bg-[--theme_color] transition-all cursor-pointer rounded-full">
                        <img class="w-6" src="https://api.iconify.design/material-symbols:close-rounded.svg?color=white">
                    </button>
                                    </div>
    </div>
</div>                    </div>
            </div>
        </div>
    </div>
</header>
<div id="panel" class="w-full h-full fixed z-[161] top-0 left-0 hidden justify-center sm:items-center items-start sm:p-4">
    <div class="w-full h-full absolute bg-black/90 top-0 left-0">

    </div>
    <div id="panel_close" class="sm:p-4 flex justify-end absolute top-0 left-0 w-full h-full">
        <div class="sm:flex hidden w-fit justify-center items-center h-11 aspect-square gap-3 backdrop-blur bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full">
            <img class="w-6" src="https://api.iconify.design/mdi:close.svg?color=white">
        </div>
    </div>
    <div id="panel_block" class="relative w-full h-full sm:max-h-[31rem] 2xl:max-h-[32rem] 2xl:max-w-[64rem] max-w-[45rem] sm:border border-white/5 bg-[--theme_color] backdrop-blur overflow-hidden sm:rounded-xl flex flex-col justify-between">
        <div class="flex flex-col">
            <div>
                <form action="/series/" class="flex gap-4 backdrop-blur-xl h-[16vw] sm:h-12 sm:pt-4 sm:px-4 px-[4vw]">
                    <img class="w-7" src="https://api.iconify.design/ph:magnifying-glass-bold.svg?color=white">
                    <input id="searchInput" type="text" name="q" placeholder="Search Series" class="placeholder:font-light placeholder:text-white/40 text-lg w-full bg-transparent focus-within:outline-none">
                    <img id="panel_close" class="sm:hidden w-7" src="https://api.iconify.design/mdi:close.svg?color=white">
                </form>
            </div>
            <div id="searched_series" class="grid 2xl:grid-cols-4 sm:grid-cols-3 grid-cols-2 sm:gap-4 gap-[4vw] sm:p-4 sm:pt-4 p-[4vw] pt-0">
                                                                            <button id="63eed012bce" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm flex" alt="The Tale of the Skeleton Messenger" title="The Tale of the Skeleton Messenger 해골전령 이야기" tags="[]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63eed012bce/" alt="The Tale of the Skeleton Messenger" title="The Tale of the Skeleton Messenger" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/N_Ak8jj_Joi&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                            <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs">New</span>
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63eed012bce/" alt="The Tale of the Skeleton Messenger" title="The Tale of the Skeleton Messenger" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Tale of the Skeleton Messenger</h3>
                </a>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63ea98953fb" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm flex" alt="I’d Rather Live as a Villain" title="I’d Rather Live as a Villain 차라리 빌런으로 살겠다" tags="[]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63ea98953fb/" alt="I’d Rather Live as a Villain" title="I’d Rather Live as a Villain" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/c07TqsLf3H0&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                            <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs">New</span>
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63ea98953fb/" alt="I’d Rather Live as a Villain" title="I’d Rather Live as a Villain" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        I’d Rather Live as a Villain</h3>
                </a>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63e13baf219" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm flex" alt="The Mad Dog of the Duke’s Estate" title="The Mad Dog of the Duke’s Estate 공작가에는 미친개가 산다" tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Fantasy&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63e13baf219/" alt="The Mad Dog of the Duke’s Estate" title="The Mad Dog of the Duke’s Estate" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/mVWVl5eGP7I&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63e13baf219/" alt="The Mad Dog of the Duke’s Estate" title="The Mad Dog of the Duke’s Estate" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Mad Dog of the Duke’s Estate</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63dfbdae5cd" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm flex" alt="The Ordinary Noble Lady who was Reincarnated into an Unplayed Otome Game Stitches with Sacred Embroidery Thread" title="The Ordinary Noble Lady who was Reincarnated into an Unplayed Otome Game Stitches with Sacred Embroidery Thread " tags="[&quot;Drama&quot;,&quot;Romance&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63dfbdae5cd/" alt="The Ordinary Noble Lady who was Reincarnated into an Unplayed Otome Game Stitches with Sacred Embroidery Thread" title="The Ordinary Noble Lady who was Reincarnated into an Unplayed Otome Game Stitches with Sacred Embroidery Thread" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/ggalvHvqbrM&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manga                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63dfbdae5cd/" alt="The Ordinary Noble Lady who was Reincarnated into an Unplayed Otome Game Stitches with Sacred Embroidery Thread" title="The Ordinary Noble Lady who was Reincarnated into an Unplayed Otome Game Stitches with Sacred Embroidery Thread" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Ordinary Noble Lady who was Reincarnated into an Unplayed Otome Game Stitches with Sacred Embroidery Thread</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama,                            </a>
                                                    <a href="/series/?genre=romance" alt="Romance" title="Romance" class="flex">
                                Romance                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63dfb84523e" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Face Genius: Top Star from Age 0" title="Face Genius: Top Star from Age 0 얼굴천재 0살 톱스타" tags="[&quot;Drama&quot;,&quot;Comedy&quot;,&quot;ShowBiz&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63dfb84523e/" alt="Face Genius: Top Star from Age 0" title="Face Genius: Top Star from Age 0" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/FTXeI9nJq1e&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63dfb84523e/" alt="Face Genius: Top Star from Age 0" title="Face Genius: Top Star from Age 0" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Face Genius: Top Star from Age 0</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama,                            </a>
                                                    <a href="/series/?genre=comedy" alt="Comedy" title="Comedy" class="flex">
                                Comedy                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63dc142e3a5" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Cerberus" title="Cerberus ケルベロス" tags="[]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63dc142e3a5/" alt="Cerberus" title="Cerberus" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/GYcA5tfhUoo&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63dc142e3a5/" alt="Cerberus" title="Cerberus" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Cerberus</h3>
                </a>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63dab2853cb" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Warrior Grandpa And Supreme Granddaughter" title="Warrior Grandpa And Supreme Granddaughter 할배무사와 지존 손녀 " tags="[]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63dab2853cb/" alt="Warrior Grandpa And Supreme Granddaughter" title="Warrior Grandpa And Supreme Granddaughter" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/ZXMV0sppqsP&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63dab2853cb/" alt="Warrior Grandpa And Supreme Granddaughter" title="Warrior Grandpa And Supreme Granddaughter" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Warrior Grandpa And Supreme Granddaughter</h3>
                </a>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63daababbb9" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Memoir of the God of War" title="Memoir of the God of War Memoir of the King of War, 전왕전기 " tags="[]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63daababbb9/" alt="Memoir of the God of War" title="Memoir of the God of War" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/6aMPRigCJaQ&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63daababbb9/" alt="Memoir of the God of War" title="Memoir of the God of War" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Memoir of the God of War</h3>
                </a>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63daa843418" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Count's Youngest Son is A Player" title="The Count's Youngest Son is A Player 백작가 막내아들은 플레이어 " tags="[]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63daa843418/" alt="The Count's Youngest Son is A Player" title="The Count's Youngest Son is A Player" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/Jt3Tc86VDPi&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63daa843418/" alt="The Count's Youngest Son is A Player" title="The Count's Youngest Son is A Player" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Count's Youngest Son is A Player</h3>
                </a>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63d83542e26" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Subscribing To The Transcendent's Channel" title="Subscribing To The Transcendent's Channel 초월자의 채널을 구독했다 " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Fantasy&quot;,&quot;Comedy&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63d83542e26/" alt="Subscribing To The Transcendent's Channel" title="Subscribing To The Transcendent's Channel" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/2VHfcIFqn0j&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63d83542e26/" alt="Subscribing To The Transcendent's Channel" title="Subscribing To The Transcendent's Channel" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Subscribing To The Transcendent's Channel</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63d6f84b51d" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Super Hero: Black Friday" title="Super Hero: Black Friday 블랙 프라이데이" tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Supernatural&quot;,&quot;Heroes&quot;,&quot;Drama&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63d6f84b51d/" alt="Super Hero: Black Friday" title="Super Hero: Black Friday" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/SZUZMhZUfx7&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63d6f84b51d/" alt="Super Hero: Black Friday" title="Super Hero: Black Friday" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Super Hero: Black Friday</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63d675af667" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Reborn As The Heavenly Demon" title="Reborn As The Heavenly Demon 환생천마 , Reincarnated Murim Lord" tags="[]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63d675af667/" alt="Reborn As The Heavenly Demon" title="Reborn As The Heavenly Demon" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/sMM2yAp_Km8&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63d675af667/" alt="Reborn As The Heavenly Demon" title="Reborn As The Heavenly Demon" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Reborn As The Heavenly Demon</h3>
                </a>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63d5b42b863" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Transcension Academy" title="Transcension Academy 초월자 학원의 수강생이 되었다 " tags="[]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63d5b42b863/" alt="Transcension Academy" title="Transcension Academy" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/-v36h7s3GSW&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63d5b42b863/" alt="Transcension Academy" title="Transcension Academy" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Transcension Academy</h3>
                </a>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63d17b8a8e3" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Don't Breathe" title="Don't Breathe 숨쉬지마" tags="[]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63d17b8a8e3/" alt="Don't Breathe" title="Don't Breathe" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/ieVJCJ4jgzX&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63d17b8a8e3/" alt="Don't Breathe" title="Don't Breathe" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Don't Breathe</h3>
                </a>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63ce148ac3b" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Possessed Prodigy Actor" title="The Possessed Prodigy Actor 귀신들린 괴물배우 " tags="[]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63ce148ac3b/" alt="The Possessed Prodigy Actor" title="The Possessed Prodigy Actor" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/uOS-ukwe0MJ&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63ce148ac3b/" alt="The Possessed Prodigy Actor" title="The Possessed Prodigy Actor" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Possessed Prodigy Actor</h3>
                </a>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63ce13e45b8" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Cleaners Agent" title="The Cleaners Agent 청소요원" tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Drama&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63ce13e45b8/" alt="The Cleaners Agent" title="The Cleaners Agent" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/hjX1uFSl7Rt&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63ce13e45b8/" alt="The Cleaners Agent" title="The Cleaners Agent" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Cleaners Agent</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63ca484dd4e" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Freaky Killer" title="Freaky Killer 존X킬러" tags="[]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63ca484dd4e/" alt="Freaky Killer" title="Freaky Killer" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/YlK4AlUvJhS&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63ca484dd4e/" alt="Freaky Killer" title="Freaky Killer" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Freaky Killer</h3>
                </a>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63c7dd2dd4e" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="S-Rank Butler" title="S-Rank Butler S급 집사" tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Fantasy&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63c7dd2dd4e/" alt="S-Rank Butler" title="S-Rank Butler" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/SDvFG8YZkL3&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63c7dd2dd4e/" alt="S-Rank Butler" title="S-Rank Butler" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        S-Rank Butler</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63c4e92819e" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Chronicle of Runes" title="Chronicle of Runes 문양전" tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Fantasy&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63c4e92819e/" alt="Chronicle of Runes" title="Chronicle of Runes" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/Rv6Gf-ViK9a&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63c4e92819e/" alt="Chronicle of Runes" title="Chronicle of Runes" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Chronicle of Runes</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63c2a36b117" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Smiling Boxer" title="The Smiling Boxer 스마일 복서" tags="[&quot;Action&quot;,&quot;Sports&quot;,&quot;Drama&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63c2a36b117/" alt="The Smiling Boxer" title="The Smiling Boxer" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/svGaBt0Mx4G&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63c2a36b117/" alt="The Smiling Boxer" title="The Smiling Boxer" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Smiling Boxer</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=sports" alt="Sports" title="Sports" class="flex">
                                Sports                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63c0627ed4a" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Secret Family" title="Secret Family " tags="[]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63c0627ed4a/" alt="Secret Family" title="Secret Family" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/sKux-4ylgp_&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63c0627ed4a/" alt="Secret Family" title="Secret Family" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Secret Family</h3>
                </a>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63bca5dbd34" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Urban Hidden Dragon" title="Urban Hidden Dragon " tags="[]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63bca5dbd34/" alt="Urban Hidden Dragon" title="Urban Hidden Dragon" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/UFQ6WMeQAPk&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63bca5dbd34/" alt="Urban Hidden Dragon" title="Urban Hidden Dragon" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Urban Hidden Dragon</h3>
                </a>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63b66ff6e4c" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="A Prodigy Midfielder’s Pass Is Special" title="A Prodigy Midfielder’s Pass Is Special " tags="[]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63b66ff6e4c/" alt="A Prodigy Midfielder’s Pass Is Special" title="A Prodigy Midfielder’s Pass Is Special" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/X19t7Px0Q7P&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63b66ff6e4c/" alt="A Prodigy Midfielder’s Pass Is Special" title="A Prodigy Midfielder’s Pass Is Special" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        A Prodigy Midfielder’s Pass Is Special</h3>
                </a>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63b46ad4f22" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Surviving as a barbarian in a Fantasy World" title="Surviving as a barbarian in a Fantasy World " tags="[]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63b46ad4f22/" alt="Surviving as a barbarian in a Fantasy World" title="Surviving as a barbarian in a Fantasy World" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/nxreR826sBY&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63b46ad4f22/" alt="Surviving as a barbarian in a Fantasy World" title="Surviving as a barbarian in a Fantasy World" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Surviving as a barbarian in a Fantasy World</h3>
                </a>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63b3ef12d25" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Evil God's Heir" title="The Evil God's Heir 악신소년" tags="[&quot;Action&quot;,&quot;Revenge&quot;,&quot;Supernatural&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63b3ef12d25/" alt="The Evil God's Heir" title="The Evil God's Heir" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/5xHAdf_vB1d&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63b3ef12d25/" alt="The Evil God's Heir" title="The Evil God's Heir" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Evil God's Heir</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=revenge" alt="Revenge" title="Revenge" class="flex">
                                Revenge                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63ad736d818" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Zombie Papa" title="Zombie Papa 좀비파파" tags="[&quot;Action&quot;,&quot;Drama&quot;,&quot;Zombie&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63ad736d818/" alt="Zombie Papa" title="Zombie Papa" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/aj1A-xTDWe2&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63ad736d818/" alt="Zombie Papa" title="Zombie Papa" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Zombie Papa</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="639be77bed8" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Turn-Based Mage" title="The Turn-Based Mage 턴제의 마법사" tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Drama&quot;,&quot;Fantasy&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/639be77bed8/" alt="The Turn-Based Mage" title="The Turn-Based Mage" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/7JjYWN9WyYy&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/639be77bed8/" alt="The Turn-Based Mage" title="The Turn-Based Mage" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Turn-Based Mage</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63998011327" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="A Modern Man Who Transmigrated Into the Murim World" title="A Modern Man Who Transmigrated Into the Murim World 무림에 떨어진 현대인" tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Fantasy&quot;,&quot;Murim&quot;,&quot;Martial Arts&quot;,&quot;Drama&quot;,&quot;Historical&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63998011327/" alt="A Modern Man Who Transmigrated Into the Murim World" title="A Modern Man Who Transmigrated Into the Murim World" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/RbxWuC2-VMp&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63998011327/" alt="A Modern Man Who Transmigrated Into the Murim World" title="A Modern Man Who Transmigrated Into the Murim World" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        A Modern Man Who Transmigrated Into the Murim World</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="639579b97be" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Regressor Protects Only Me" title="The Regressor Protects Only Me 회귀자는 나만 지킨다" tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Fantasy&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/639579b97be/" alt="The Regressor Protects Only Me" title="The Regressor Protects Only Me" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/3kF0E234nhc&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/639579b97be/" alt="The Regressor Protects Only Me" title="The Regressor Protects Only Me" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Regressor Protects Only Me</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="638ba265156" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Emperor's Sword" title="The Emperor's Sword 황제의 검 (류신)" tags="[&quot;Action&quot;,&quot;Drama&quot;,&quot;Fantasy&quot;,&quot;Historical&quot;,&quot;Wuxia&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/638ba265156/" alt="The Emperor's Sword" title="The Emperor's Sword" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/j841Bko-M3n&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/638ba265156/" alt="The Emperor's Sword" title="The Emperor's Sword" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Emperor's Sword</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="636995f89db" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Sword God From the Destroyed World" title="The Sword God From the Destroyed World 멸망한 세계에서 온 검신" tags="[]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/636995f89db/" alt="The Sword God From the Destroyed World" title="The Sword God From the Destroyed World" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/IQJweuzmsAt&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/636995f89db/" alt="The Sword God From the Destroyed World" title="The Sword God From the Destroyed World" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Sword God From the Destroyed World</h3>
                </a>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63592e7e1a0" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Thousand Faces Actor" title="The Thousand Faces Actor 천의 얼굴" tags="[&quot;Drama&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63592e7e1a0/" alt="The Thousand Faces Actor" title="The Thousand Faces Actor" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/uEyy8fDnwf_&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63592e7e1a0/" alt="The Thousand Faces Actor" title="The Thousand Faces Actor" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Thousand Faces Actor</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="634cce22c74" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="This Is the Law" title="This Is the Law 이것이 법이다" tags="[&quot;Action&quot;,&quot;Drama&quot;,&quot;Fantasy&quot;,&quot;Crime&quot;,&quot;Law&quot;,&quot;Supernatural&quot;,&quot;Delinquents&quot;,&quot;Time Travel&quot;,&quot;Mafia&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/634cce22c74/" alt="This Is the Law" title="This Is the Law" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/cMJ9efCeU6D&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/634cce22c74/" alt="This Is the Law" title="This Is the Law" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        This Is the Law</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="634cc0d477e" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Reincarnated as a Genius Prodigy of a Prestigious Family" title="Reincarnated as a Genius Prodigy of a Prestigious Family 명가의 역대급 재능천재로 환생했다" tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Fantasy&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/634cc0d477e/" alt="Reincarnated as a Genius Prodigy of a Prestigious Family" title="Reincarnated as a Genius Prodigy of a Prestigious Family" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/NlS13zVyzXG&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/634cc0d477e/" alt="Reincarnated as a Genius Prodigy of a Prestigious Family" title="Reincarnated as a Genius Prodigy of a Prestigious Family" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Reincarnated as a Genius Prodigy of a Prestigious Family</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="634b671f9de" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Wrecker Driver" title="Wrecker Driver 렉카 드라이버" tags="[&quot;Action&quot;,&quot;Revenge&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/634b671f9de/" alt="Wrecker Driver" title="Wrecker Driver" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/gIxyuyZhbp1&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/634b671f9de/" alt="Wrecker Driver" title="Wrecker Driver" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Wrecker Driver</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=revenge" alt="Revenge" title="Revenge" class="flex">
                                Revenge                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="634504a70a7" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Concept-Grasping Magical Genius" title="The Concept-Grasping Magical Genius 개념 잡는 마법 천재" tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Magic&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/634504a70a7/" alt="The Concept-Grasping Magical Genius" title="The Concept-Grasping Magical Genius" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/DLYi8Atxxz-&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/634504a70a7/" alt="The Concept-Grasping Magical Genius" title="The Concept-Grasping Magical Genius" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Concept-Grasping Magical Genius</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="6326ce31884" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="God’s Cooking" title="God’s Cooking 신의 요리" tags="[&quot;Drama&quot;,&quot;Cooking&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/6326ce31884/" alt="God’s Cooking" title="God’s Cooking" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/nTjT0gs3zww&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/6326ce31884/" alt="God’s Cooking" title="God’s Cooking" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        God’s Cooking</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama,                            </a>
                                                    <a href="/series/?genre=cooking" alt="Cooking" title="Cooking" class="flex">
                                Cooking                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="6324510db21" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Apocalypse is Here" title="The Apocalypse is Here 종말이 찾아왔다" tags="[]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/6324510db21/" alt="The Apocalypse is Here" title="The Apocalypse is Here" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/bqyzhwLhiYX&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/6324510db21/" alt="The Apocalypse is Here" title="The Apocalypse is Here" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Apocalypse is Here</h3>
                </a>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63232d3c51c" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="My Wife Is the Leader of the Demonic Cult" title="My Wife Is the Leader of the Demonic Cult " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Historical&quot;,&quot;Murim&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63232d3c51c/" alt="My Wife Is the Leader of the Demonic Cult" title="My Wife Is the Leader of the Demonic Cult" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/JBMp5hT-vxc&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63232d3c51c/" alt="My Wife Is the Leader of the Demonic Cult" title="My Wife Is the Leader of the Demonic Cult" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        My Wife Is the Leader of the Demonic Cult</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="631a35ed79d" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Banished Gluttonous Aristocrat’s Labyrinth Adventure" title="The Banished Gluttonous Aristocrat’s Labyrinth Adventure 太っちょ貴族は迷宮でワルツを踊る" tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Fantasy&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/631a35ed79d/" alt="The Banished Gluttonous Aristocrat’s Labyrinth Adventure" title="The Banished Gluttonous Aristocrat’s Labyrinth Adventure" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/sCmwbr16miY&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manga                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/631a35ed79d/" alt="The Banished Gluttonous Aristocrat’s Labyrinth Adventure" title="The Banished Gluttonous Aristocrat’s Labyrinth Adventure" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Banished Gluttonous Aristocrat’s Labyrinth Adventure</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63167bc6c7e" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Script-Eating Actor" title="The Script-Eating Actor " tags="[&quot;Drama&quot;,&quot;Showbizz&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63167bc6c7e/" alt="The Script-Eating Actor" title="The Script-Eating Actor" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/8wBwlbi2xUD&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63167bc6c7e/" alt="The Script-Eating Actor" title="The Script-Eating Actor" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Script-Eating Actor</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama,                            </a>
                                                    <a href="/series/?genre=showbizz" alt="Showbizz" title="Showbizz" class="flex">
                                Showbizz                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="63159050520" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Reincarnated as a New Employee" title="Reincarnated as a New Employee 전생했더니 신입사원" tags="[&quot;Office Workers&quot;,&quot;Drama&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/63159050520/" alt="Reincarnated as a New Employee" title="Reincarnated as a New Employee" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/vt4Wx_gK3cl&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/63159050520/" alt="Reincarnated as a New Employee" title="Reincarnated as a New Employee" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Reincarnated as a New Employee</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=office workers" alt="Office Workers" title="Office Workers" class="flex">
                                Office Workers,                            </a>
                                                    <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="630ebcf57b1" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Even the Lottery Jackpot Winner Still Goes to Work" title="Even the Lottery Jackpot Winner Still Goes to Work " tags="[]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/630ebcf57b1/" alt="Even the Lottery Jackpot Winner Still Goes to Work" title="Even the Lottery Jackpot Winner Still Goes to Work" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/8B3rbm4a-9X&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/630ebcf57b1/" alt="Even the Lottery Jackpot Winner Still Goes to Work" title="Even the Lottery Jackpot Winner Still Goes to Work" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Even the Lottery Jackpot Winner Still Goes to Work</h3>
                </a>
                            </div>
        </div>
    </div>
    </button>                                            <button id="630c8cfcda8" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Zombie Won't Bite Me" title="The Zombie Won't Bite Me 좀비가 날 물지 않아" tags="[&quot;Zombies&quot;,&quot;Action&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/630c8cfcda8/" alt="The Zombie Won't Bite Me" title="The Zombie Won't Bite Me" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/5L1Dga3Sq-a&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                            <span class="border border-white/5 bg-blue-700/80 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            hiatus                        </span>
                                                        </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/630c8cfcda8/" alt="The Zombie Won't Bite Me" title="The Zombie Won't Bite Me" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Zombie Won't Bite Me</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=zombies" alt="Zombies" title="Zombies" class="flex">
                                Zombies,                            </a>
                                                    <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="62fb0b2eb50" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Reincarnation of the Sword Master" title="Reincarnation of the Sword Master 소드마스터의 환생" tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Drama&quot;,&quot;Fantasy&quot;,&quot;Reincarnation&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/62fb0b2eb50/" alt="Reincarnation of the Sword Master" title="Reincarnation of the Sword Master" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/hQCURhQUzCs&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/62fb0b2eb50/" alt="Reincarnation of the Sword Master" title="Reincarnation of the Sword Master" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Reincarnation of the Sword Master</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="62ecf8427be" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="I Regressed, but the World didn’t End" title="I Regressed, but the World didn’t End 회귀했는데 세상이 안 망함" tags="[&quot;Action&quot;,&quot;Fantasy&quot;,&quot;Modern&quot;,&quot;Game&quot;,&quot;Survival&quot;,&quot;Regression&quot;,&quot;Hunter&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/62ecf8427be/" alt="I Regressed, but the World didn’t End" title="I Regressed, but the World didn’t End" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/nmCwsawD05c&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/62ecf8427be/" alt="I Regressed, but the World didn’t End" title="I Regressed, but the World didn’t End" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        I Regressed, but the World didn’t End</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=fantasy" alt="Fantasy" title="Fantasy" class="flex">
                                Fantasy                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="62e937f795b" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Top Ranker's Guide to an Aspiring Writer Life" title="The Top Ranker's Guide to an Aspiring Writer Life 탑랭커의 작가지망생활백서" tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Fantasy&quot;,&quot;Hunter&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/62e937f795b/" alt="The Top Ranker's Guide to an Aspiring Writer Life" title="The Top Ranker's Guide to an Aspiring Writer Life" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/H58R7l0OHcb&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/62e937f795b/" alt="The Top Ranker's Guide to an Aspiring Writer Life" title="The Top Ranker's Guide to an Aspiring Writer Life" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Top Ranker's Guide to an Aspiring Writer Life</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="62e80851179" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Echoes of Footsteps" title="Echoes of Footsteps 눈에 밟힌 발걸음" tags="[&quot;Adventure&quot;,&quot;Drama&quot;,&quot;Psychological&quot;,&quot;Post Apocalyptic&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/62e80851179/" alt="Echoes of Footsteps" title="Echoes of Footsteps" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/PdmwxFDI8m4&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/62e80851179/" alt="Echoes of Footsteps" title="Echoes of Footsteps" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Echoes of Footsteps</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure,                            </a>
                                                    <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="62df1e85a21" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="A Corporate Underling Who Excels at Work" title="A Corporate Underling Who Excels at Work 대기업 말단이 일을 잘함" tags="[&quot;Drama&quot;,&quot;Slice of Life&quot;,&quot;Office Worker&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/62df1e85a21/" alt="A Corporate Underling Who Excels at Work" title="A Corporate Underling Who Excels at Work" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/ji4nDkB2qRE&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/62df1e85a21/" alt="A Corporate Underling Who Excels at Work" title="A Corporate Underling Who Excels at Work" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        A Corporate Underling Who Excels at Work</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama,                            </a>
                                                    <a href="/series/?genre=slice of life" alt="Slice of Life" title="Slice of Life" class="flex">
                                Slice of Life                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="62dbb12e9e5" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Meikyuu: Labyrinth Kingdom, a Tactical Fantasy World Survival Guide" title="Meikyuu: Labyrinth Kingdom, a Tactical Fantasy World Survival Guide Meikyuu Kingdom: Damu Tokushu Butai SAS no Ossan n" tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Isekai&quot;,&quot;Fantasy&quot;,&quot;Mystery&quot;,&quot;Sci-Fi&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/62dbb12e9e5/" alt="Meikyuu: Labyrinth Kingdom, a Tactical Fantasy World Survival Guide" title="Meikyuu: Labyrinth Kingdom, a Tactical Fantasy World Survival Guide" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/lBBtVshvAdi&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manga                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/62dbb12e9e5/" alt="Meikyuu: Labyrinth Kingdom, a Tactical Fantasy World Survival Guide" title="Meikyuu: Labyrinth Kingdom, a Tactical Fantasy World Survival Guide" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Meikyuu: Labyrinth Kingdom, a Tactical Fantasy World Survival Guide</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="62da243681b" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Veteran Healer Is Overpowered" title="The Veteran Healer Is Overpowered 고인물 힐러가 너무 강하다" tags="[&quot;Action&quot;,&quot;Fantasy&quot;,&quot;Adventure&quot;,&quot;Regression&quot;,&quot;Hunter&quot;,&quot;Isekai&quot;,&quot;Supernatural&quot;,&quot;Martial Arts&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/62da243681b/" alt="The Veteran Healer Is Overpowered" title="The Veteran Healer Is Overpowered" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/d8BKHPTZbCw&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/62da243681b/" alt="The Veteran Healer Is Overpowered" title="The Veteran Healer Is Overpowered" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Veteran Healer Is Overpowered</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=fantasy" alt="Fantasy" title="Fantasy" class="flex">
                                Fantasy                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="62d63bad83e" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Student Jo-Eun" title="Student Jo-Eun 조은학생" tags="[&quot;School Life&quot;,&quot;Romance&quot;,&quot;Drama&quot;,&quot;Psychological&quot;,&quot;Slice of Life&quot;,&quot;Comedy&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/62d63bad83e/" alt="Student Jo-Eun" title="Student Jo-Eun" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/gPF727bvSRF&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/62d63bad83e/" alt="Student Jo-Eun" title="Student Jo-Eun" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Student Jo-Eun</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=school life" alt="School Life" title="School Life" class="flex">
                                School Life,                            </a>
                                                    <a href="/series/?genre=romance" alt="Romance" title="Romance" class="flex">
                                Romance                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="62c102b6063" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The New Employee is Incredible?" title="The New Employee is Incredible? 신입사원이 이렇게 일을 잘했다고?" tags="[&quot;\uc2e0\uc785\uc0ac\uc6d0\uc774 \uc774\ub807\uac8c \uc77c\uc744 \uc798\ud588\ub2e4\uace0?&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/62c102b6063/" alt="The New Employee is Incredible?" title="The New Employee is Incredible?" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/qnYxOgWHevs&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/62c102b6063/" alt="The New Employee is Incredible?" title="The New Employee is Incredible?" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The New Employee is Incredible?</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=신입사원이 이렇게 일을 잘했다고?" alt="신입사원이 이렇게 일을 잘했다고?" title="신입사원이 이렇게 일을 잘했다고?" class="flex">
                                신입사원이 이렇게 일을 잘했다고?                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="62c0b2ab19f" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="May the Congressman Protect You" title="May the Congressman Protect You 의원님이 보우하사" tags="[&quot;Political&quot;,&quot;Supernatural&quot;,&quot;Time Travel&quot;,&quot;Revenge&quot;,&quot;Comedy&quot;,&quot;Drama&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/62c0b2ab19f/" alt="May the Congressman Protect You" title="May the Congressman Protect You" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/aVzASEk58Ig&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/62c0b2ab19f/" alt="May the Congressman Protect You" title="May the Congressman Protect You" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        May the Congressman Protect You</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=political" alt="Political" title="Political" class="flex">
                                Political,                            </a>
                                                    <a href="/series/?genre=supernatural" alt="Supernatural" title="Supernatural" class="flex">
                                Supernatural                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="62b81a9df61" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Dungeon Porter" title="Dungeon Porter 던전짐꾼" tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Comedy&quot;,&quot;Fantasy&quot;,&quot;Drama&quot;,&quot;Slice of Life&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/62b81a9df61/" alt="Dungeon Porter" title="Dungeon Porter" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/IYdJFFUndD_&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/62b81a9df61/" alt="Dungeon Porter" title="Dungeon Porter" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Dungeon Porter</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="62b0cd80370" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Indomitable Wanderer" title="The Indomitable Wanderer 불멸낭인" tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Murim&quot;,&quot;Martial Arts&quot;,&quot;Shounen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/62b0cd80370/" alt="The Indomitable Wanderer" title="The Indomitable Wanderer" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/V7Xg23oZlI5&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/62b0cd80370/" alt="The Indomitable Wanderer" title="The Indomitable Wanderer" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Indomitable Wanderer</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="62a592fd681" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="I'm Being Mistaken for a Soccer Genius" title="I'm Being Mistaken for a Soccer Genius 축구천재로 오해받는 중입니다" tags="[&quot;Drama&quot;,&quot;Sports&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/62a592fd681/" alt="I'm Being Mistaken for a Soccer Genius" title="I'm Being Mistaken for a Soccer Genius" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/WmGZLGSLSPd&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/62a592fd681/" alt="I'm Being Mistaken for a Soccer Genius" title="I'm Being Mistaken for a Soccer Genius" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        I'm Being Mistaken for a Soccer Genius</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama,                            </a>
                                                    <a href="/series/?genre=sports" alt="Sports" title="Sports" class="flex">
                                Sports                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="62a2a041277" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Face Slap" title="Face Slap 귀싸대기" tags="[&quot;Action&quot;,&quot;Drama&quot;,&quot;Supernatural&quot;,&quot;Mystery&quot;,&quot;Psychological&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/62a2a041277/" alt="Face Slap" title="Face Slap" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/cmN2zq6piLu&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/62a2a041277/" alt="Face Slap" title="Face Slap" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Face Slap</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="6296877d56b" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Laws of Cultivation" title="The Laws of Cultivation " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Cultivation&quot;,&quot;Fantasy&quot;,&quot;Shounen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/6296877d56b/" alt="The Laws of Cultivation" title="The Laws of Cultivation" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/ewi-_ODtbe0&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/6296877d56b/" alt="The Laws of Cultivation" title="The Laws of Cultivation" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Laws of Cultivation</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="6292a7b82df" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Academy's Reincarnated Hero" title="Academy's Reincarnated Hero 아카데미 환생영웅" tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;School Life&quot;,&quot;Fantasy&quot;,&quot;Monsters&quot;,&quot;Shounen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/6292a7b82df/" alt="Academy's Reincarnated Hero" title="Academy's Reincarnated Hero" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/GmiNmtq2uI_&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                            <span class="border border-white/5 bg-red-700/80 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            completed                        </span>
                                                        </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/6292a7b82df/" alt="Academy's Reincarnated Hero" title="Academy's Reincarnated Hero" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Academy's Reincarnated Hero</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="628e5339752" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Muscle Joseon" title="Muscle Joseon 근육 조선" tags="[&quot;Drama&quot;,&quot;Fantasy&quot;,&quot;Historical&quot;,&quot;Sports&quot;,&quot;Supernatural&quot;,&quot;Time Travel&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/628e5339752/" alt="Muscle Joseon" title="Muscle Joseon" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/FcwKT4GYYyW&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/628e5339752/" alt="Muscle Joseon" title="Muscle Joseon" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Muscle Joseon</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama,                            </a>
                                                    <a href="/series/?genre=fantasy" alt="Fantasy" title="Fantasy" class="flex">
                                Fantasy                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="6285ca9b602" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Return of the Runebound Professor" title="Return of the Runebound Professor Action, Adventure, Fantasy, Isekai" tags="[]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/6285ca9b602/" alt="Return of the Runebound Professor" title="Return of the Runebound Professor" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/JcFjNUjSdTA&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/6285ca9b602/" alt="Return of the Runebound Professor" title="Return of the Runebound Professor" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Return of the Runebound Professor</h3>
                </a>
                            </div>
        </div>
    </div>
    </button>                                            <button id="aaa64786eee" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="I am the Strongest Boss" title="I am the Strongest Boss 我！最强Boss !, Wǒ, Zuì Qiáng BOSS" tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Fantasy&quot;,&quot;Overpowered&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/aaa64786eee/" alt="I am the Strongest Boss" title="I am the Strongest Boss" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/yVquMXB3Zfm&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhua                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/aaa64786eee/" alt="I am the Strongest Boss" title="I am the Strongest Boss" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        I am the Strongest Boss</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="2cc5959578d" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="To Hell With Being a Saint, I'm a Doctor" title="To Hell With Being a Saint, I'm a Doctor " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Drama&quot;,&quot;Fantasy&quot;,&quot;Medical&quot;,&quot;Isekai&quot;,&quot;Magic&quot;,&quot;Monsters&quot;,&quot;Reincarnation&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/2cc5959578d/" alt="To Hell With Being a Saint, I'm a Doctor" title="To Hell With Being a Saint, I'm a Doctor" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/54748f9635c&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/2cc5959578d/" alt="To Hell With Being a Saint, I'm a Doctor" title="To Hell With Being a Saint, I'm a Doctor" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        To Hell With Being a Saint, I'm a Doctor</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="0d586c7a842" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Legendary Youngest Son of the Marquis House" title="Legendary Youngest Son of the Marquis House Jack Be Invincible, 후작가의 역대급 막내아들" tags="[&quot;Action&quot;,&quot;Drama&quot;,&quot;Fantasy&quot;,&quot;Magic&quot;,&quot;Monsters&quot;,&quot;Time Travel&quot;,&quot;Shounen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/0d586c7a842/" alt="Legendary Youngest Son of the Marquis House" title="Legendary Youngest Son of the Marquis House" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/37004ab0e1d&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/0d586c7a842/" alt="Legendary Youngest Son of the Marquis House" title="Legendary Youngest Son of the Marquis House" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Legendary Youngest Son of the Marquis House</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="feb52ea19b8" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="I'll Resign and Have a Fresh Start in This World" title="I'll Resign and Have a Fresh Start in This World 사표내고 이계에서 힐링합니다" tags="[&quot; \tAdventure&quot;,&quot;Comedy&quot;,&quot;Drama&quot;,&quot;Fantasy&quot;,&quot;Slice of Life&quot;,&quot;Isekai&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/feb52ea19b8/" alt="I'll Resign and Have a Fresh Start in This World" title="I'll Resign and Have a Fresh Start in This World" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/8ce0e4f715d&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/feb52ea19b8/" alt="I'll Resign and Have a Fresh Start in This World" title="I'll Resign and Have a Fresh Start in This World" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        I'll Resign and Have a Fresh Start in This World</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre= 	adventure" alt=" 	Adventure" title=" 	Adventure" class="flex">
                                 	Adventure,                            </a>
                                                    <a href="/series/?genre=comedy" alt="Comedy" title="Comedy" class="flex">
                                Comedy                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="9bc4592709c" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="I Am the Youngest Daughter of Murim’s Strongest, the Namgung Clan" title="I Am the Youngest Daughter of Murim’s Strongest, the Namgung Clan Action, Adventure, Martial Arts, Wuxia, Romance, Revenge, Fantasy, Drama, Reincarnation" tags="[]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/9bc4592709c/" alt="I Am the Youngest Daughter of Murim’s Strongest, the Namgung Clan" title="I Am the Youngest Daughter of Murim’s Strongest, the Namgung Clan" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/e56ab4bfaf0&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/9bc4592709c/" alt="I Am the Youngest Daughter of Murim’s Strongest, the Namgung Clan" title="I Am the Youngest Daughter of Murim’s Strongest, the Namgung Clan" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        I Am the Youngest Daughter of Murim’s Strongest, the Namgung Clan</h3>
                </a>
                            </div>
        </div>
    </div>
    </button>                                            <button id="6d328da27d9" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Reincarnation of the Murim Clan's Former Ranker" title="Reincarnation of the Murim Clan's Former Ranker 무림세가 전생랭커" tags="[&quot; \tAction&quot;,&quot;Adventure&quot;,&quot;Drama&quot;,&quot;Fantasy&quot;,&quot;Time Travel&quot;,&quot; Reincarnation&quot;,&quot;Monsters&quot;,&quot;Martial Arts&quot;,&quot;Supernatural&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/6d328da27d9/" alt="Reincarnation of the Murim Clan's Former Ranker" title="Reincarnation of the Murim Clan's Former Ranker" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/d1e19af3388&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/6d328da27d9/" alt="Reincarnation of the Murim Clan's Former Ranker" title="Reincarnation of the Murim Clan's Former Ranker" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Reincarnation of the Murim Clan's Former Ranker</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre= 	action" alt=" 	Action" title=" 	Action" class="flex">
                                 	Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="39cd2feb0e1" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Valhalla Saga" title="Valhalla Saga 발할라 사가" tags="[&quot;Fantasy&quot;,&quot;Action&quot;,&quot;Adventure&quot;,&quot;Mythology&quot;,&quot;Gaming&quot;,&quot;Magic&quot;,&quot;Apocalypse&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/39cd2feb0e1/" alt="Valhalla Saga" title="Valhalla Saga" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/knXOR_IAQrV&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/39cd2feb0e1/" alt="Valhalla Saga" title="Valhalla Saga" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Valhalla Saga</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=fantasy" alt="Fantasy" title="Fantasy" class="flex">
                                Fantasy,                            </a>
                                                    <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="ee187374baf" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Star of Zenith" title="Star of Zenith 정점의 별" tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Martial Arts&quot;,&quot;Sci-Fi&quot;,&quot;Fantasy&quot;,&quot;Survival&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/ee187374baf/" alt="Star of Zenith" title="Star of Zenith" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/bf7b47ae99f&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/ee187374baf/" alt="Star of Zenith" title="Star of Zenith" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Star of Zenith</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="2d25e23f01d" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Lord’s Coins Aren’t Decreasing?!" title="The Lord’s Coins Aren’t Decreasing?! 영주님의 코인이 줄지 않음?!" tags="[&quot; \tAction&quot;,&quot;Adventure&quot;,&quot;Fantasy&quot;,&quot; \tMartial Arts&quot;,&quot;Supernatural&quot;,&quot;Magic&quot;,&quot;Time Travel&quot;,&quot;Reincarnation&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/2d25e23f01d/" alt="The Lord’s Coins Aren’t Decreasing?!" title="The Lord’s Coins Aren’t Decreasing?!" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/89283949208&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/2d25e23f01d/" alt="The Lord’s Coins Aren’t Decreasing?!" title="The Lord’s Coins Aren’t Decreasing?!" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Lord’s Coins Aren’t Decreasing?!</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre= 	action" alt=" 	Action" title=" 	Action" class="flex">
                                 	Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="cfcedd0a127" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Extra Is Too Strong" title="The Extra Is Too Strong 엑스트라가 너무 강함" tags="[&quot;Action&quot;,&quot;Drama&quot;,&quot;Fantasy&quot;,&quot;Isekai&quot;,&quot;Magic&quot;,&quot;Reincarnation&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/cfcedd0a127/" alt="The Extra Is Too Strong" title="The Extra Is Too Strong" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/86159ab5a54&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/cfcedd0a127/" alt="The Extra Is Too Strong" title="The Extra Is Too Strong" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Extra Is Too Strong</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="47f85e9dc78" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Crown Prince That Sells Medicine " title="The Crown Prince That Sells Medicine  약파는황태자" tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Comedy&quot;,&quot;Drama&quot;,&quot;Fantasy&quot;,&quot;Magic&quot;,&quot;Reincarnation&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/47f85e9dc78/" alt="The Crown Prince That Sells Medicine " title="The Crown Prince That Sells Medicine " hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/49bbc0e592a&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/47f85e9dc78/" alt="The Crown Prince That Sells Medicine " title="The Crown Prince That Sells Medicine " hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Crown Prince That Sells Medicine </h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="be9e6fda968" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Superhuman Battlefield" title="Superhuman Battlefield 초인의 게임" tags="[&quot; \tAction&quot;,&quot;Sports&quot;,&quot;Fantasy&quot;,&quot;Magic&quot;,&quot;Monsters&quot;,&quot;Virtual Reality&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/be9e6fda968/" alt="Superhuman Battlefield" title="Superhuman Battlefield" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/b55b01819be&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/be9e6fda968/" alt="Superhuman Battlefield" title="Superhuman Battlefield" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Superhuman Battlefield</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre= 	action" alt=" 	Action" title=" 	Action" class="flex">
                                 	Action,                            </a>
                                                    <a href="/series/?genre=sports" alt="Sports" title="Sports" class="flex">
                                Sports                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="b17297eda5b" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Wicked Prosecutor Has Changed" title="The Wicked Prosecutor Has Changed 망나니 검사가 달라졌다" tags="[&quot;Revenge&quot;,&quot;Law&quot;,&quot;Fantasy&quot;,&quot;Reincarnation&quot;,&quot;Thriller&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/b17297eda5b/" alt="The Wicked Prosecutor Has Changed" title="The Wicked Prosecutor Has Changed" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/0a4b94227db&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/b17297eda5b/" alt="The Wicked Prosecutor Has Changed" title="The Wicked Prosecutor Has Changed" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Wicked Prosecutor Has Changed</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=revenge" alt="Revenge" title="Revenge" class="flex">
                                Revenge,                            </a>
                                                    <a href="/series/?genre=law" alt="Law" title="Law" class="flex">
                                Law                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="0463451e9e3" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Dark Fantasy Paladin" title="Dark Fantasy Paladin 다크 판타지 속 성기사, A Paladin in a Dark Fantasy World" tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Isekai&quot;,&quot;Fantasy&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/0463451e9e3/" alt="Dark Fantasy Paladin" title="Dark Fantasy Paladin" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/b38957eba78&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/0463451e9e3/" alt="Dark Fantasy Paladin" title="Dark Fantasy Paladin" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Dark Fantasy Paladin</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="58d9de5fd1c" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="I Became the Youngest Disciple of Mount Hua Sect" title="I Became the Youngest Disciple of Mount Hua Sect 화산파 막내제자가 되었다, I Became the Youngest Disciple of the Hwasan Sect, I Became the Youngest Disciple of the Volcanic Sec, Became the Youngest Disciple of the Hwasan Sect" tags="[&quot;Isekai&quot;,&quot; \tAdventure&quot;,&quot;Comedy&quot;,&quot;Drama&quot;,&quot;Fantasy&quot;,&quot;Martial Arts&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/58d9de5fd1c/" alt="I Became the Youngest Disciple of Mount Hua Sect" title="I Became the Youngest Disciple of Mount Hua Sect" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/7b490eab05e&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/58d9de5fd1c/" alt="I Became the Youngest Disciple of Mount Hua Sect" title="I Became the Youngest Disciple of Mount Hua Sect" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        I Became the Youngest Disciple of Mount Hua Sect</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=isekai" alt="Isekai" title="Isekai" class="flex">
                                Isekai,                            </a>
                                                    <a href="/series/?genre= 	adventure" alt=" 	Adventure" title=" 	Adventure" class="flex">
                                 	Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="5f6bea1ee3b" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="If I Don’t Die Soon, I’ll Really Become Invincible!" title="If I Don’t Die Soon, I’ll Really Become Invincible! " tags="[&quot;Action&quot;,&quot;Drama&quot;,&quot; Fantasy&quot;,&quot;Historical&quot;,&quot;Isekai&quot;,&quot;Wuxia&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/5f6bea1ee3b/" alt="If I Don’t Die Soon, I’ll Really Become Invincible!" title="If I Don’t Die Soon, I’ll Really Become Invincible!" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/0fa31628631&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhua                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/5f6bea1ee3b/" alt="If I Don’t Die Soon, I’ll Really Become Invincible!" title="If I Don’t Die Soon, I’ll Really Become Invincible!" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        If I Don’t Die Soon, I’ll Really Become Invincible!</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="4843d246d43" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Jackpot After Divorce" title="Jackpot After Divorce 이혼 후 코인 대박" tags="[&quot;Drama&quot;,&quot;Romance&quot;,&quot;Slice of Life&quot;,&quot;Luck&quot;,&quot;Shounen  &quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/4843d246d43/" alt="Jackpot After Divorce" title="Jackpot After Divorce" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/eae1c303788&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            comic                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/4843d246d43/" alt="Jackpot After Divorce" title="Jackpot After Divorce" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Jackpot After Divorce</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama,                            </a>
                                                    <a href="/series/?genre=romance" alt="Romance" title="Romance" class="flex">
                                Romance                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="da18d06deb3" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Investor Who Sees Future" title="The Investor Who Sees Future " tags="[&quot;Fantasy&quot;,&quot;Thriller&quot;,&quot;Drama&quot;,&quot;Business&quot;,&quot;Adventure&quot;,&quot;Supernatural&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/da18d06deb3/" alt="The Investor Who Sees Future" title="The Investor Who Sees Future" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/72236963297&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                        <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            english                        </span>
                                    </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/da18d06deb3/" alt="The Investor Who Sees Future" title="The Investor Who Sees Future" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Investor Who Sees Future</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=fantasy" alt="Fantasy" title="Fantasy" class="flex">
                                Fantasy,                            </a>
                                                    <a href="/series/?genre=thriller" alt="Thriller" title="Thriller" class="flex">
                                Thriller                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="38cb179c7b4" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Zombie Apocalypse 82-08" title="Zombie Apocalypse 82-08 " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Apocalypse&quot;,&quot;Zombies&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/38cb179c7b4/" alt="Zombie Apocalypse 82-08" title="Zombie Apocalypse 82-08" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/f2c0816269c&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/38cb179c7b4/" alt="Zombie Apocalypse 82-08" title="Zombie Apocalypse 82-08" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Zombie Apocalypse 82-08</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="5c0bf3235d8" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="What, You Dare Pretend in Front of Me, the Strongest in the Immortal World?" title="What, You Dare Pretend in Front of Me, the Strongest in the Immortal World? " tags="[&quot;Action&quot;,&quot;Drama&quot;,&quot;Fantasy&quot;,&quot;Martial Arts&quot;,&quot;Shounen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/5c0bf3235d8/" alt="What, You Dare Pretend in Front of Me, the Strongest in the Immortal World?" title="What, You Dare Pretend in Front of Me, the Strongest in the Immortal World?" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/3b3a2e29280&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/5c0bf3235d8/" alt="What, You Dare Pretend in Front of Me, the Strongest in the Immortal World?" title="What, You Dare Pretend in Front of Me, the Strongest in the Immortal World?" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        What, You Dare Pretend in Front of Me, the Strongest in the Immortal World?</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="4cc488e427e" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Unparalleled in the Online Gaming World [Remake]" title="Unparalleled in the Online Gaming World [Remake] " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Comedy&quot;,&quot;Drama&quot;,&quot;Fantasy&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/4cc488e427e/" alt="Unparalleled in the Online Gaming World [Remake]" title="Unparalleled in the Online Gaming World [Remake]" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/dda7c3e6045&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/4cc488e427e/" alt="Unparalleled in the Online Gaming World [Remake]" title="Unparalleled in the Online Gaming World [Remake]" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Unparalleled in the Online Gaming World [Remake]</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="71ab4c4bc91" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="This Life Starts as a Child Actor" title="This Life Starts as a Child Actor " tags="[&quot;Comedy&quot;,&quot;Drama&quot;,&quot;Shounen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/71ab4c4bc91/" alt="This Life Starts as a Child Actor" title="This Life Starts as a Child Actor" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/a01ba7128cb&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/71ab4c4bc91/" alt="This Life Starts as a Child Actor" title="This Life Starts as a Child Actor" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        This Life Starts as a Child Actor</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=comedy" alt="Comedy" title="Comedy" class="flex">
                                Comedy,                            </a>
                                                    <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="fa8eba114c4" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Villainous Warrior" title="The Villainous Warrior " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Martial Arts&quot;,&quot;Murim&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/fa8eba114c4/" alt="The Villainous Warrior" title="The Villainous Warrior" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/9efe41f6e4e&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                            <span class="border border-white/5 bg-red-700/80 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            completed                        </span>
                                                        </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/fa8eba114c4/" alt="The Villainous Warrior" title="The Villainous Warrior" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Villainous Warrior</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="4deeb08e610" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Screen-Writer with a spoiler Cheat" title="The Screen-Writer with a spoiler Cheat " tags="[&quot;Drama&quot;,&quot;Fantasy&quot;,&quot;Shounen&quot;,&quot;System&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/4deeb08e610/" alt="The Screen-Writer with a spoiler Cheat" title="The Screen-Writer with a spoiler Cheat" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/I3P3iR8qCVn&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/4deeb08e610/" alt="The Screen-Writer with a spoiler Cheat" title="The Screen-Writer with a spoiler Cheat" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Screen-Writer with a spoiler Cheat</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama,                            </a>
                                                    <a href="/series/?genre=fantasy" alt="Fantasy" title="Fantasy" class="flex">
                                Fantasy                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="ea7aedbd377" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Return of the Prodigious Swordmaster" title="The Return of the Prodigious Swordmaster " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Fantasy&quot;,&quot;Regression&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/ea7aedbd377/" alt="The Return of the Prodigious Swordmaster" title="The Return of the Prodigious Swordmaster" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/4264583b046&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/ea7aedbd377/" alt="The Return of the Prodigious Swordmaster" title="The Return of the Prodigious Swordmaster" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Return of the Prodigious Swordmaster</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="75254f51206" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Return Of Apocalypses Tyrant" title="The Return Of Apocalypses Tyrant " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Fantasy&quot;,&quot;Martial Arts&quot;,&quot;Reincarnation&quot;,&quot;Revenge&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/75254f51206/" alt="The Return Of Apocalypses Tyrant" title="The Return Of Apocalypses Tyrant" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/zNDy2Vndb7e&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/75254f51206/" alt="The Return Of Apocalypses Tyrant" title="The Return Of Apocalypses Tyrant" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Return Of Apocalypses Tyrant</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="bd1a75df1fb" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Outcast Is Too Good at Martial Arts" title="The Outcast Is Too Good at Martial Arts " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Drama&quot;,&quot;Fantasy&quot;,&quot;Martial Arts&quot;,&quot;Shounen&quot;,&quot;System&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/bd1a75df1fb/" alt="The Outcast Is Too Good at Martial Arts" title="The Outcast Is Too Good at Martial Arts" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/112886e1581&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/bd1a75df1fb/" alt="The Outcast Is Too Good at Martial Arts" title="The Outcast Is Too Good at Martial Arts" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Outcast Is Too Good at Martial Arts</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="967c6362656" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Non-Ability Fighter" title="The Non-Ability Fighter " tags="[&quot;Action&quot;,&quot;Comedy&quot;,&quot;Fighting&quot;,&quot;Overpowered&quot;,&quot;Seinen&quot;,&quot;Supernatural&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/967c6362656/" alt="The Non-Ability Fighter" title="The Non-Ability Fighter" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/d02d32362ce&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/967c6362656/" alt="The Non-Ability Fighter" title="The Non-Ability Fighter" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Non-Ability Fighter</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=comedy" alt="Comedy" title="Comedy" class="flex">
                                Comedy                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="0fda568e789" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Ninth-Rank Sword Master: Conquering the Sword Forms" title="The Ninth-Rank Sword Master: Conquering the Sword Forms " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Fantasy&quot;,&quot;Regression&quot;,&quot;Shounen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/0fda568e789/" alt="The Ninth-Rank Sword Master: Conquering the Sword Forms" title="The Ninth-Rank Sword Master: Conquering the Sword Forms" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/e55acb4274e&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/0fda568e789/" alt="The Ninth-Rank Sword Master: Conquering the Sword Forms" title="The Ninth-Rank Sword Master: Conquering the Sword Forms" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Ninth-Rank Sword Master: Conquering the Sword Forms</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="d8c047d90c4" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Miraculous Physical Therapist" title="The Miraculous Physical Therapist " tags="[&quot;Drama&quot;,&quot;Medical&quot;,&quot;Shounen&quot;,&quot;System&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/d8c047d90c4/" alt="The Miraculous Physical Therapist" title="The Miraculous Physical Therapist" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/336fbcd5462&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/d8c047d90c4/" alt="The Miraculous Physical Therapist" title="The Miraculous Physical Therapist" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Miraculous Physical Therapist</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama,                            </a>
                                                    <a href="/series/?genre=medical" alt="Medical" title="Medical" class="flex">
                                Medical                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="aa7ee4928a6" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Invincible Man" title="The Invincible Man " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Fantasy&quot;,&quot;Martial Arts&quot;,&quot;Seinen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/aa7ee4928a6/" alt="The Invincible Man" title="The Invincible Man" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/59c37213548&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/aa7ee4928a6/" alt="The Invincible Man" title="The Invincible Man" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Invincible Man</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="7a46b453229" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The inferior grade strongest sage ~from the lowest villager to the world’s strongest with ease~" title="The inferior grade strongest sage ~from the lowest villager to the world’s strongest with ease~ " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Drama&quot;,&quot;Magic&quot;,&quot;Overpowered&quot;,&quot;Reincarnation&quot;,&quot;Shounen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/7a46b453229/" alt="The inferior grade strongest sage ~from the lowest villager to the world’s strongest with ease~" title="The inferior grade strongest sage ~from the lowest villager to the world’s strongest with ease~" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/4800aa80116&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/7a46b453229/" alt="The inferior grade strongest sage ~from the lowest villager to the world’s strongest with ease~" title="The inferior grade strongest sage ~from the lowest villager to the world’s strongest with ease~" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The inferior grade strongest sage ~from the lowest villager to the world’s strongest with ease~</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="690db31e383" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Great Surgeon" title="The Great Surgeon " tags="[&quot;Drama&quot;,&quot;Medical&quot;,&quot;Shounen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/690db31e383/" alt="The Great Surgeon" title="The Great Surgeon" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/10d85cbd075&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/690db31e383/" alt="The Great Surgeon" title="The Great Surgeon" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Great Surgeon</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama,                            </a>
                                                    <a href="/series/?genre=medical" alt="Medical" title="Medical" class="flex">
                                Medical                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="a08b83d52a7" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Genius Idol’s Strategy to Stardom" title="The Genius Idol’s Strategy to Stardom " tags="[&quot;Drama&quot;,&quot;Fantasy&quot;,&quot;System&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/a08b83d52a7/" alt="The Genius Idol’s Strategy to Stardom" title="The Genius Idol’s Strategy to Stardom" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/4bfc24e96a5&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/a08b83d52a7/" alt="The Genius Idol’s Strategy to Stardom" title="The Genius Idol’s Strategy to Stardom" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Genius Idol’s Strategy to Stardom</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama,                            </a>
                                                    <a href="/series/?genre=fantasy" alt="Fantasy" title="Fantasy" class="flex">
                                Fantasy                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="efc486fb5d1" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Gaming Expert" title="The Gaming Expert " tags="[&quot;Action&quot;,&quot;Fantasy&quot;,&quot;Gaming&quot;,&quot;Shounen&quot;,&quot;Virtual Reality&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/efc486fb5d1/" alt="The Gaming Expert" title="The Gaming Expert" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/044cff52057&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/efc486fb5d1/" alt="The Gaming Expert" title="The Gaming Expert" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Gaming Expert</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=fantasy" alt="Fantasy" title="Fantasy" class="flex">
                                Fantasy                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="a1a00f3d58f" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Demon Lord who Returned after 3000 Years~ The Strongest Reincarnator Aims for World Domination~" title="The Demon Lord who Returned after 3000 Years~ The Strongest Reincarnator Aims for World Domination~ " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Demons&quot;,&quot;Ecchi&quot;,&quot;Fantasy&quot;,&quot;Harem&quot;,&quot;isekai&quot;,&quot;Magic&quot;,&quot;Monster Girls&quot;,&quot;Reincarnation&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/a1a00f3d58f/" alt="The Demon Lord who Returned after 3000 Years~ The Strongest Reincarnator Aims for World Domination~" title="The Demon Lord who Returned after 3000 Years~ The Strongest Reincarnator Aims for World Domination~" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/92e81ddc96a&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/a1a00f3d58f/" alt="The Demon Lord who Returned after 3000 Years~ The Strongest Reincarnator Aims for World Domination~" title="The Demon Lord who Returned after 3000 Years~ The Strongest Reincarnator Aims for World Domination~" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Demon Lord who Returned after 3000 Years~ The Strongest Reincarnator Aims for World Domination~</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="cee11303fab" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="The Baseball Team’s Newbie are Too Good" title="The Baseball Team’s Newbie are Too Good " tags="[&quot;Comedy&quot;,&quot;Drama&quot;,&quot;Shounen&quot;,&quot;Sports&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/cee11303fab/" alt="The Baseball Team’s Newbie are Too Good" title="The Baseball Team’s Newbie are Too Good" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/SWirKrpH3Qy&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/cee11303fab/" alt="The Baseball Team’s Newbie are Too Good" title="The Baseball Team’s Newbie are Too Good" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        The Baseball Team’s Newbie are Too Good</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=comedy" alt="Comedy" title="Comedy" class="flex">
                                Comedy,                            </a>
                                                    <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="fe0e5c38186" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Story of a “Jobless” Champion and a Princess Who Together Find Their Happiness" title="Story of a “Jobless” Champion and a Princess Who Together Find Their Happiness " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Drama&quot;,&quot;Fantasy&quot;,&quot;Magic&quot;,&quot;Manga&quot;,&quot;Romance&quot;,&quot;Shounen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/fe0e5c38186/" alt="Story of a “Jobless” Champion and a Princess Who Together Find Their Happiness" title="Story of a “Jobless” Champion and a Princess Who Together Find Their Happiness" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/9c81ec91a63&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/fe0e5c38186/" alt="Story of a “Jobless” Champion and a Princess Who Together Find Their Happiness" title="Story of a “Jobless” Champion and a Princess Who Together Find Their Happiness" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Story of a “Jobless” Champion and a Princess Who Together Find Their Happiness</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="a7bded7a802" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="SSS-Rank Artist Summoner" title="SSS-Rank Artist Summoner " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Fantasy&quot;,&quot;Mystery&quot;,&quot;Shounen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/a7bded7a802/" alt="SSS-Rank Artist Summoner" title="SSS-Rank Artist Summoner" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/11befa489bf&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/a7bded7a802/" alt="SSS-Rank Artist Summoner" title="SSS-Rank Artist Summoner" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        SSS-Rank Artist Summoner</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="67e6c8ef83e" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Spirit Farmer" title="Spirit Farmer " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Fantasy&quot;,&quot;loli&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/67e6c8ef83e/" alt="Spirit Farmer" title="Spirit Farmer" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/76ad012b879&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/67e6c8ef83e/" alt="Spirit Farmer" title="Spirit Farmer" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Spirit Farmer</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="1eee3126013" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="So What’s Wrong with Getting Reborn as a Goblin?" title="So What’s Wrong with Getting Reborn as a Goblin? " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Comedy&quot;,&quot;Drama&quot;,&quot;Fantasy&quot;,&quot;Magic&quot;,&quot;Seinen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/1eee3126013/" alt="So What’s Wrong with Getting Reborn as a Goblin?" title="So What’s Wrong with Getting Reborn as a Goblin?" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/fa1f5b8de0f&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/1eee3126013/" alt="So What’s Wrong with Getting Reborn as a Goblin?" title="So What’s Wrong with Getting Reborn as a Goblin?" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        So What’s Wrong with Getting Reborn as a Goblin?</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="06078974a64" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Snake Immortal: The Tale of a Snake’s Cultivation to Immortality" title="Snake Immortal: The Tale of a Snake’s Cultivation to Immortality " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Cultivation&quot;,&quot;Monsters&quot;,&quot;Transmigration&quot;,&quot;Weak To Strong&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/06078974a64/" alt="Snake Immortal: The Tale of a Snake’s Cultivation to Immortality" title="Snake Immortal: The Tale of a Snake’s Cultivation to Immortality" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/b75d747b671&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/06078974a64/" alt="Snake Immortal: The Tale of a Snake’s Cultivation to Immortality" title="Snake Immortal: The Tale of a Snake’s Cultivation to Immortality" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Snake Immortal: The Tale of a Snake’s Cultivation to Immortality</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="f1f45434fb4" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Secret Buddy" title="Secret Buddy " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Drama&quot;,&quot;Mystery&quot;,&quot;Psychological&quot;,&quot;Seinen&quot;,&quot;Supernatural&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/f1f45434fb4/" alt="Secret Buddy" title="Secret Buddy" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/4eab5c0b121&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/f1f45434fb4/" alt="Secret Buddy" title="Secret Buddy" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Secret Buddy</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="be88b773139" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Rookie Employee Kim Cheolsu" title="Rookie Employee Kim Cheolsu " tags="[&quot;Drama&quot;,&quot;Office Politics&quot;,&quot;Regression&quot;,&quot;Shounen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/be88b773139/" alt="Rookie Employee Kim Cheolsu" title="Rookie Employee Kim Cheolsu" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/bc09b5780b0&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/be88b773139/" alt="Rookie Employee Kim Cheolsu" title="Rookie Employee Kim Cheolsu" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Rookie Employee Kim Cheolsu</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama,                            </a>
                                                    <a href="/series/?genre=office politics" alt="Office Politics" title="Office Politics" class="flex">
                                Office Politics                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="4fc95ed9808" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Revenge Law Firm" title="Revenge Law Firm " tags="[&quot;Adventure&quot;,&quot;Drama&quot;,&quot;Law&quot;,&quot;Revenge&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/4fc95ed9808/" alt="Revenge Law Firm" title="Revenge Law Firm" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/2c64c1c05d8&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/4fc95ed9808/" alt="Revenge Law Firm" title="Revenge Law Firm" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Revenge Law Firm</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure,                            </a>
                                                    <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="3acdfb0725d" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Return of the Max-Level Doctor" title="Return of the Max-Level Doctor " tags="[&quot;Drama&quot;,&quot;Fantasy&quot;,&quot;Genius MC&quot;,&quot;Medical&quot;,&quot;Returner&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/3acdfb0725d/" alt="Return of the Max-Level Doctor" title="Return of the Max-Level Doctor" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/ed2e17c8d07&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                            <span class="border border-white/5 bg-red-700/80 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            completed                        </span>
                                                        </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/3acdfb0725d/" alt="Return of the Max-Level Doctor" title="Return of the Max-Level Doctor" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Return of the Max-Level Doctor</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama,                            </a>
                                                    <a href="/series/?genre=fantasy" alt="Fantasy" title="Fantasy" class="flex">
                                Fantasy                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="7d238f3b8c0" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Return of the Bloodthirsty Police" title="Return of the Bloodthirsty Police " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Revenge&quot;,&quot;Violence&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/7d238f3b8c0/" alt="Return of the Bloodthirsty Police" title="Return of the Bloodthirsty Police" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/742e539f867&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/7d238f3b8c0/" alt="Return of the Bloodthirsty Police" title="Return of the Bloodthirsty Police" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Return of the Bloodthirsty Police</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="338cae71721" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Reincarnation of a Martial Prodigy" title="Reincarnation of a Martial Prodigy " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Martial Arts&quot;,&quot;Regression&quot;,&quot;Reincarnation&quot;,&quot;Shounen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/338cae71721/" alt="Reincarnation of a Martial Prodigy" title="Reincarnation of a Martial Prodigy" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/85ff2fdcd5a&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                            <span class="border border-white/5 bg-red-700/80 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            completed                        </span>
                                                        </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/338cae71721/" alt="Reincarnation of a Martial Prodigy" title="Reincarnation of a Martial Prodigy" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Reincarnation of a Martial Prodigy</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="f80320ac135" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Reality Quest" title="Reality Quest " tags="[&quot;Action&quot;,&quot;Delinquents&quot;,&quot;Gaming&quot;,&quot;School Life&quot;,&quot;Shounen&quot;,&quot;System&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/f80320ac135/" alt="Reality Quest" title="Reality Quest" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/Z4EheqpzgUD&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/f80320ac135/" alt="Reality Quest" title="Reality Quest" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Reality Quest</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=delinquents" alt="Delinquents" title="Delinquents" class="flex">
                                Delinquents                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="4ad48fcbe1d" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Real Man" title="Real Man " tags="[&quot;Action&quot;,&quot;Drama&quot;,&quot;Sci-Fi&quot;,&quot;Shounen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/4ad48fcbe1d/" alt="Real Man" title="Real Man" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/XLyPJFSAI7g&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/4ad48fcbe1d/" alt="Real Man" title="Real Man" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Real Man</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="f7338a50f8e" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Quest Supremacy" title="Quest Supremacy " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Comedy&quot;,&quot;Drama&quot;,&quot;Fantasy&quot;,&quot;School Life&quot;,&quot;Shounen&quot;,&quot;Supernatural&quot;,&quot;System&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/f7338a50f8e/" alt="Quest Supremacy" title="Quest Supremacy" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/a5f8556f5c4&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/f7338a50f8e/" alt="Quest Supremacy" title="Quest Supremacy" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Quest Supremacy</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="91e268ee222" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Preview" title="Preview " tags="[&quot;Action&quot;,&quot;Delinquents&quot;,&quot;Drama&quot;,&quot;School Life&quot;,&quot;Shounen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/91e268ee222/" alt="Preview" title="Preview" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/9bd96338d1f&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/91e268ee222/" alt="Preview" title="Preview" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Preview</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=delinquents" alt="Delinquents" title="Delinquents" class="flex">
                                Delinquents                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="18237af1778" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="My Luck is Max Level" title="My Luck is Max Level " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Games&quot;,&quot;Shounen&quot;,&quot;System&quot;,&quot;Virtual Reality&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/18237af1778/" alt="My Luck is Max Level" title="My Luck is Max Level" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/a2e4e19efda&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/18237af1778/" alt="My Luck is Max Level" title="My Luck is Max Level" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        My Luck is Max Level</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="49272b02469" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Monarch" title="Monarch " tags="[&quot;Action&quot;,&quot;Drama&quot;,&quot;Shounen&quot;,&quot;Sports&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/49272b02469/" alt="Monarch" title="Monarch" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/c359fb38d4e&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/49272b02469/" alt="Monarch" title="Monarch" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Monarch</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="3200750c36a" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Modern Dude in the Murim" title="Modern Dude in the Murim " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Fantasy&quot;,&quot;Historical&quot;,&quot;Martial Arts&quot;,&quot;Murim&quot;,&quot;Shounen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/3200750c36a/" alt="Modern Dude in the Murim" title="Modern Dude in the Murim" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/a496dbf2d06&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                            <span class="border border-white/5 bg-blue-700/80 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            paused                        </span>
                                                        </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/3200750c36a/" alt="Modern Dude in the Murim" title="Modern Dude in the Murim" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Modern Dude in the Murim</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="80760f66373" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Merciless" title="Merciless " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Drama&quot;,&quot;Martial Arts&quot;,&quot;Seinen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/80760f66373/" alt="Merciless" title="Merciless" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/410ff88f880&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                            <span class="border border-white/5 bg-red-700/80 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            completed                        </span>
                                                        </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/80760f66373/" alt="Merciless" title="Merciless" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Merciless</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="7dae0b4e773" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Memoir of the Legendary Scholar" title="Memoir of the Legendary Scholar " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Drama&quot;,&quot;Fantasy&quot;,&quot;Historical&quot;,&quot;Martial Arts&quot;,&quot;Shounen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/7dae0b4e773/" alt="Memoir of the Legendary Scholar" title="Memoir of the Legendary Scholar" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/4710ec9f08b&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/7dae0b4e773/" alt="Memoir of the Legendary Scholar" title="Memoir of the Legendary Scholar" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Memoir of the Legendary Scholar</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="143a1418a00" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Lord of Money" title="Lord of Money " tags="[&quot;Action&quot;,&quot;Drama&quot;,&quot;Seinen&quot;,&quot;Supernatural&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/143a1418a00/" alt="Lord of Money" title="Lord of Money" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/f5c1e7f2178&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/143a1418a00/" alt="Lord of Money" title="Lord of Money" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Lord of Money</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="31ad113715e" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Leveling Up With Skills" title="Leveling Up With Skills " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Fantasy&quot;,&quot;Monsters&quot;,&quot;Regression&quot;,&quot;Shounen&quot;,&quot;System&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/31ad113715e/" alt="Leveling Up With Skills" title="Leveling Up With Skills" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/4Fw7EWAx4XA&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/31ad113715e/" alt="Leveling Up With Skills" title="Leveling Up With Skills" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Leveling Up With Skills</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="ba45e6f2f62" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Let’s Make a Contract?" title="Let’s Make a Contract? " tags="[&quot;Action&quot;,&quot;Broadcast Jockey&quot;,&quot;Drama&quot;,&quot;Martial Arts&quot;,&quot;Returner&quot;,&quot;Revenge&quot;,&quot;Thriller&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/ba45e6f2f62/" alt="Let’s Make a Contract?" title="Let’s Make a Contract?" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/7b2b5fcb927&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/ba45e6f2f62/" alt="Let’s Make a Contract?" title="Let’s Make a Contract?" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Let’s Make a Contract?</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=broadcast jockey" alt="Broadcast Jockey" title="Broadcast Jockey" class="flex">
                                Broadcast Jockey                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="7a656e37c76" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Judge Lee Han Young" title="Judge Lee Han Young " tags="[&quot;Action&quot;,&quot;Drama&quot;,&quot;Law&quot;,&quot;Seinen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/7a656e37c76/" alt="Judge Lee Han Young" title="Judge Lee Han Young" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/ab62fa4fee8&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/7a656e37c76/" alt="Judge Lee Han Young" title="Judge Lee Han Young" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Judge Lee Han Young</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="1d0c0524b66" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Ignorant me Became a Princess in another world" title="Ignorant me Became a Princess in another world " tags="[&quot;Adventure&quot;,&quot;Comedy&quot;,&quot;Drama&quot;,&quot;Fantasy&quot;,&quot;isekai&quot;,&quot;Shojo&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/1d0c0524b66/" alt="Ignorant me Became a Princess in another world" title="Ignorant me Became a Princess in another world" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/19cfb451f0c&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/1d0c0524b66/" alt="Ignorant me Became a Princess in another world" title="Ignorant me Became a Princess in another world" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Ignorant me Became a Princess in another world</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure,                            </a>
                                                    <a href="/series/?genre=comedy" alt="Comedy" title="Comedy" class="flex">
                                Comedy                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="0ec4a299ce6" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="I’ll Be a Villain in This Life" title="I’ll Be a Villain in This Life " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Drama&quot;,&quot;Gang&quot;,&quot;Thriller&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/0ec4a299ce6/" alt="I’ll Be a Villain in This Life" title="I’ll Be a Villain in This Life" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/aba35c86695&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                            <span class="border border-white/5 bg-red-700/80 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            completed                        </span>
                                                        </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/0ec4a299ce6/" alt="I’ll Be a Villain in This Life" title="I’ll Be a Villain in This Life" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        I’ll Be a Villain in This Life</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="e79be30d1c7" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="I Regressed As The Duke" title="I Regressed As The Duke " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Fantasy&quot;,&quot;Reincarnation&quot;,&quot;Shounen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/e79be30d1c7/" alt="I Regressed As The Duke" title="I Regressed As The Duke" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/85c901176cd&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/e79be30d1c7/" alt="I Regressed As The Duke" title="I Regressed As The Duke" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        I Regressed As The Duke</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="1e31310a9c6" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="I Became a Sales Prodigy" title="I Became a Sales Prodigy " tags="[&quot;Business&quot;,&quot;Comedy&quot;,&quot;Drama&quot;,&quot;Regression&quot;,&quot;Shounen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/1e31310a9c6/" alt="I Became a Sales Prodigy" title="I Became a Sales Prodigy" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/d9f8564ac2f&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/1e31310a9c6/" alt="I Became a Sales Prodigy" title="I Became a Sales Prodigy" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        I Became a Sales Prodigy</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=business" alt="Business" title="Business" class="flex">
                                Business,                            </a>
                                                    <a href="/series/?genre=comedy" alt="Comedy" title="Comedy" class="flex">
                                Comedy                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="b2a998c4e71" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="I became a Genius Salesman" title="I became a Genius Salesman " tags="[&quot;Comedy&quot;,&quot;Drama&quot;,&quot;Shounen&quot;,&quot;Supernatural&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/b2a998c4e71/" alt="I became a Genius Salesman" title="I became a Genius Salesman" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/984f2c6bfa1&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/b2a998c4e71/" alt="I became a Genius Salesman" title="I became a Genius Salesman" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        I became a Genius Salesman</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=comedy" alt="Comedy" title="Comedy" class="flex">
                                Comedy,                            </a>
                                                    <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="45419244c95" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="I am Unbeatable" title="I am Unbeatable " tags="[&quot;Action&quot;,&quot;Delinquents&quot;,&quot;Drama&quot;,&quot;Gang&quot;,&quot;Shounen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/45419244c95/" alt="I am Unbeatable" title="I am Unbeatable" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/016780a131c&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/45419244c95/" alt="I am Unbeatable" title="I am Unbeatable" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        I am Unbeatable</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=delinquents" alt="Delinquents" title="Delinquents" class="flex">
                                Delinquents                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="4a8ae2acb45" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="I am not the Son of Luck" title="I am not the Son of Luck " tags="[&quot;Adventure&quot;,&quot;Comedy&quot;,&quot;Cultivation&quot;,&quot;Drama&quot;,&quot;Martial Arts&quot;,&quot;Reincarnation&quot;,&quot;Shounen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/4a8ae2acb45/" alt="I am not the Son of Luck" title="I am not the Son of Luck" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/edee1b67358&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhua                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/4a8ae2acb45/" alt="I am not the Son of Luck" title="I am not the Son of Luck" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        I am not the Son of Luck</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure,                            </a>
                                                    <a href="/series/?genre=comedy" alt="Comedy" title="Comedy" class="flex">
                                Comedy                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="d0d9f59fcf5" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="How to Survive as a Dragon with Time-Limit" title="How to Survive as a Dragon with Time-Limit " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Comedy&quot;,&quot;Dragon&quot;,&quot;Drama&quot;,&quot;Fantasy&quot;,&quot;isekai&quot;,&quot;Reincarnation&quot;,&quot;Shounen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/d0d9f59fcf5/" alt="How to Survive as a Dragon with Time-Limit" title="How to Survive as a Dragon with Time-Limit" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/77ff9cb50f9&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/d0d9f59fcf5/" alt="How to Survive as a Dragon with Time-Limit" title="How to Survive as a Dragon with Time-Limit" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        How to Survive as a Dragon with Time-Limit</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="a5bf5ccca65" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="How a Former Pro takes advantage by doing an easy job" title="How a Former Pro takes advantage by doing an easy job " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Fantasy&quot;,&quot;Reincarnation&quot;,&quot;Shounen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/a5bf5ccca65/" alt="How a Former Pro takes advantage by doing an easy job" title="How a Former Pro takes advantage by doing an easy job" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/ec93d9b1186&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                            <span class="border border-white/5 bg-red-700/80 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            completed                        </span>
                                                        </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/a5bf5ccca65/" alt="How a Former Pro takes advantage by doing an easy job" title="How a Former Pro takes advantage by doing an easy job" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        How a Former Pro takes advantage by doing an easy job</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="efa2ecfda86" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="HELLCRAFT" title="HELLCRAFT " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Demons&quot;,&quot;Supernatural&quot;,&quot;Thriller&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/efa2ecfda86/" alt="HELLCRAFT" title="HELLCRAFT" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/ac585e1bfe5&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/efa2ecfda86/" alt="HELLCRAFT" title="HELLCRAFT" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        HELLCRAFT</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="a705dda9e01" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Hand over the Money!" title="Hand over the Money! " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Overpowered&quot;,&quot;Seinen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/a705dda9e01/" alt="Hand over the Money!" title="Hand over the Money!" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/fcbd89f0ac9&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/a705dda9e01/" alt="Hand over the Money!" title="Hand over the Money!" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Hand over the Money!</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="77966eb33e7" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Gambling 1945" title="Gambling 1945 " tags="[&quot;Action&quot;,&quot;Drama&quot;,&quot;Historical&quot;,&quot;Seinen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/77966eb33e7/" alt="Gambling 1945" title="Gambling 1945" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/33ea8b4ea6e&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/77966eb33e7/" alt="Gambling 1945" title="Gambling 1945" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Gambling 1945</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="26c0d023788" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Fork &amp; Knife" title="Fork &amp; Knife " tags="[&quot;Action&quot;,&quot;Fantasy&quot;,&quot;Medieval&quot;,&quot;Monsters&quot;,&quot;Shounen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/26c0d023788/" alt="Fork &amp; Knife" title="Fork &amp; Knife" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/94cf236e07e&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/26c0d023788/" alt="Fork &amp; Knife" title="Fork &amp; Knife" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Fork &amp; Knife</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=fantasy" alt="Fantasy" title="Fantasy" class="flex">
                                Fantasy                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="94152195c7b" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Fighters" title="Fighters " tags="[&quot;Action&quot;,&quot;Delinquents&quot;,&quot;Mature&quot;,&quot;School Life&quot;,&quot;Sports&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/94152195c7b/" alt="Fighters" title="Fighters" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/b6531021014&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/94152195c7b/" alt="Fighters" title="Fighters" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Fighters</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=delinquents" alt="Delinquents" title="Delinquents" class="flex">
                                Delinquents                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="564b3d40781" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Daechi-dong Class" title="Daechi-dong Class " tags="[&quot;Drama&quot;,&quot;Regression&quot;,&quot;School Life&quot;,&quot;Teacher&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/564b3d40781/" alt="Daechi-dong Class" title="Daechi-dong Class" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/115c0acacef&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/564b3d40781/" alt="Daechi-dong Class" title="Daechi-dong Class" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Daechi-dong Class</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama,                            </a>
                                                    <a href="/series/?genre=regression" alt="Regression" title="Regression" class="flex">
                                Regression                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="cd69ecd8daa" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Choose your husband Carefully." title="Choose your husband Carefully. " tags="[&quot;Adventure&quot;,&quot;Comedy&quot;,&quot;Drama&quot;,&quot;Fantasy&quot;,&quot;Shojo&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/cd69ecd8daa/" alt="Choose your husband Carefully." title="Choose your husband Carefully." hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/3871179c83e&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/cd69ecd8daa/" alt="Choose your husband Carefully." title="Choose your husband Carefully." hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Choose your husband Carefully.</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure,                            </a>
                                                    <a href="/series/?genre=comedy" alt="Comedy" title="Comedy" class="flex">
                                Comedy                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="880a6bc5435" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Chairman Kang: The Newcomer" title="Chairman Kang: The Newcomer " tags="[&quot;Drama&quot;,&quot;Office Politics&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/880a6bc5435/" alt="Chairman Kang: The Newcomer" title="Chairman Kang: The Newcomer" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/65faf09a8dc&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/880a6bc5435/" alt="Chairman Kang: The Newcomer" title="Chairman Kang: The Newcomer" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Chairman Kang: The Newcomer</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama,                            </a>
                                                    <a href="/series/?genre=office politics" alt="Office Politics" title="Office Politics" class="flex">
                                Office Politics                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="b71270b3a1a" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Avalon of Disaster" title="Avalon of Disaster " tags="[&quot;Action&quot;,&quot;Adventure&quot;,&quot;Comedy&quot;,&quot;Drama&quot;,&quot;Fantasy&quot;,&quot;isekai&quot;,&quot;School Life&quot;,&quot;Shounen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/b71270b3a1a/" alt="Avalon of Disaster" title="Avalon of Disaster" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/517981ea140&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manga                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/b71270b3a1a/" alt="Avalon of Disaster" title="Avalon of Disaster" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Avalon of Disaster</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="cdf04a46929" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="Artifact Reading Appraiser" title="Artifact Reading Appraiser " tags="[&quot;Adventure&quot;,&quot;Drama&quot;,&quot;Fantasy&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/cdf04a46929/" alt="Artifact Reading Appraiser" title="Artifact Reading Appraiser" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/a7d8c5636e1&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/cdf04a46929/" alt="Artifact Reading Appraiser" title="Artifact Reading Appraiser" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        Artifact Reading Appraiser</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                Adventure,                            </a>
                                                    <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="dd36f95d783" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="A.I. Doctor" title="A.I. Doctor " tags="[&quot;Drama&quot;,&quot;Fantasy&quot;,&quot;Medical&quot;,&quot;Sci-Fi&quot;,&quot;Supernatural&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/dd36f95d783/" alt="A.I. Doctor" title="A.I. Doctor" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/6EFFIEewHy3&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/dd36f95d783/" alt="A.I. Doctor" title="A.I. Doctor" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        A.I. Doctor</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=drama" alt="Drama" title="Drama" class="flex">
                                Drama,                            </a>
                                                    <a href="/series/?genre=fantasy" alt="Fantasy" title="Fantasy" class="flex">
                                Fantasy                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="7e80e1ac248" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="A Bad Person" title="A Bad Person " tags="[&quot;Action&quot;,&quot;Comedy&quot;,&quot;Drama&quot;,&quot;Gang&quot;,&quot;Romance&quot;,&quot;School Life&quot;,&quot;Slice of Life&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/7e80e1ac248/" alt="A Bad Person" title="A Bad Person" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/6f73b719036&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/7e80e1ac248/" alt="A Bad Person" title="A Bad Person" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        A Bad Person</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=comedy" alt="Comedy" title="Comedy" class="flex">
                                Comedy                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                            <button id="826ee765b65" class="group text-left relative h-fit w-full overflow-hidden grid transition-all sm:hover:bg-white/10 sm:hover:ring-white/10 sm:hover:ring-[0.5rem] sm:hover:scale-95 sm:hover:rounded-sm hidden" alt="99 Boss" title="99 Boss " tags="[&quot;Action&quot;,&quot;Delinquents&quot;,&quot;School Life&quot;,&quot;Shounen&quot;]">
    <div class="grid relative sm:gap-3.5 gap-[2.5vw] w-full h-fit">
        <a href="/series/826ee765b65/" alt="99 Boss" title="99 Boss" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid border aspect-[0.75/1] border-white/5 rounded-lg overflow-hidden">
            <div class="bg-white/10 w-full h-full relative overflow-hidden">
                <div style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/80f33b189e3&amp;w=300)" class="absolute top-0 left-0 h-full w-full bg-center bg-cover">

                </div>
                <div class="flex  flex-wrap gap-1 m-1 relative">
                                                                <span class="bg-zinc-950/50 border border-white/5 backdrop-blur-3xl w-fit h-fit px-1 rounded-md text-xs capitalize">
                            manhwa                        </span>
                                                                                                </div>
                            </div>
        </a>
        <div class="flex   sm:gap-2.5 gap-[2vw] justify-start items-start sm:-mt-0.5 -mt-[0.5vw] w-full">
            
            <div class="flex flex-col  gap-1.5">
                <a href="/series/826ee765b65/" alt="99 Boss" title="99 Boss" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" class="grid w-full">
                    <h3 class=" h-fit sm:text-base text-[3.5vw] leading-[3vw] truncate sm:leading-4 break-words">
                        99 Boss</h3>
                </a>
                                    <div class="sm:text-xs text-[2.2vw] leading-[2vw] flex  flex-wrap gap-1 sm:leading-none w-full">
                                                                            <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                Action,                            </a>
                                                    <a href="/series/?genre=delinquents" alt="Delinquents" title="Delinquents" class="flex">
                                Delinquents                            </a>
                                            </div>
                            </div>
        </div>
    </div>
    </button>                                                </div>
            <div id="no_results" class="h-full hidden justify-center items-center text-white/80 font-light">
                <p>No series found.</p>
            </div>
        </div>
        <button type="button" id="view_all_search" class="flex justify-center items-center pb-4">
            <div class="h-11 px-8 bg-blue-600 hover:bg-blue-500 transition-all flex justify-center items-center rounded-full">
                View all results
            </div>
        </button>
    </div>
</div>
<script>
    (function() {
        const panel = document.getElementById('panel');
        const panel_block = document.querySelector('#panel_block');
        const noResults = document.getElementById('no_results');
        const searchedSeries = document.getElementById('searched_series');
        const showPanelButtons = document.querySelectorAll('#showPanelButton');
        const searchInput = document.getElementById('searchInput');
        const panel_closeElements = document.querySelectorAll('#panel_close');
        const AllSeries = document.querySelector("#searched_series>a");
        const view_all_search = document.querySelector('#view_all_search');

        function funPanel(type) {
            if (type) {
                panel.classList.remove('hidden');
                panel.classList.add('flex'); // Show the panel
                document.body.classList.add('static'); // Add class to body
                searchInput.value = "";
                searchInput.focus();
                updateSearchResults();
            } else {
                panel.classList.add('hidden'); // Hide the panel on Escape key
                panel.classList.remove('flex'); // Show the panel
                document.body.classList.remove('static');
            }
        }
        for (const button of panel_closeElements) {
            button.addEventListener('click', function() {
                funPanel()
            });
        }
        for (showPanelButton of showPanelButtons) {
            showPanelButton.addEventListener('click', function() {
                funPanel(true)
            });
        }
        view_all_search.addEventListener('click', function() {
            const inputValue = searchInput.value.toLowerCase();
            location.href = '/series?q=' + inputValue;
        });
        document.addEventListener('keydown', function(event) {
            if (!panel.classList.contains('hidden')) {
                // Only run the event listener if the panel is not hidden
                if (event.key === 'Escape') {
                    funPanel()
                    console.log('Escape');
                } else if (event.key === 'ArrowUp') {
                    console.log('Up');
                } else if (event.key === 'ArrowDown') {
                    console.log('Down');
                } else if (event.key === 'Enter') {
                    console.log('Enter');
                }
            }
        });


        function updateSearchResults() {
            const inputValue = searchInput.value
                .toLowerCase(); // Convert the input value to lowercase for case-insensitive matching
            const anchorElements = document.querySelectorAll("#searched_series > button");
            let count = 0; // Initialize a count to keep track of the matched anchors

            // Check the window width
            const windowWidth = window.innerWidth;

            for (const anchor of anchorElements) {
                const title = anchor.getAttribute("title");
                if (inputValue === '' || (title && title.toLowerCase().includes(inputValue))) {
                    anchor.classList.remove('hidden');
                    anchor.classList.add('flex');
                    let listener = false;
                    count++;
                    if (windowWidth >= 1536) {
                        if (count > 4) {
                            listener = true
                        }
                    } else if (windowWidth < 640) {
                        if (count > 4) {
                            listener = true
                        }
                    } else {
                        if (count > 3) {
                            listener = true
                        }
                    }
                    if (listener) {
                        anchor.classList.add('hidden');
                        anchor.classList.remove('flex');
                    }
                } else {
                    anchor.classList.add('hidden');
                    anchor.classList.remove('flex');
                }
            }
            if (count === 0) {
                view_all_search.classList.add('hidden');
                panel_block.classList.add('grid');
                panel_block.classList.remove('flex');
                panel_block.classList.remove('flex-col');
                panel_block.classList.remove('justify-between');
                searchedSeries.classList.add('hidden');
                searchedSeries.classList.remove('grid');
                noResults.classList.remove('hidden');
                noResults.classList.add('flex');
            } else {
                view_all_search.classList.remove('hidden');
                panel_block.classList.add('flex');
                panel_block.classList.add('flex-col');
                panel_block.classList.add('justify-between');
                panel_block.classList.remove('grid');
                searchedSeries.classList.remove('hidden');
                searchedSeries.classList.add('grid');
                noResults.classList.add('hidden');
                noResults.classList.remove('flex');
            }
        }

        searchInput.addEventListener('input', updateSearchResults);

        updateSearchResults()
        funPanel()
    })();
</script>
    <div class="grid sm:gap-10 gap-[4vw] w-full 2xl:max-w-[100rem] max-w-6xl mx-auto sm:p-4 p-[4vw]">
                                <div class="layer_main bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/DLYi8Atxxz-)">
</div>
<div class="layer_2 layer_main">

</div>
<div class="layer_1 layer_main">

</div>
<div class="flex xl:flex-row flex-col  w-full sm:gap-10 gap-[4vw] relative">
    <div class="flex flex-col justify-center items-center gap-4 h-fit">
        <div>
            <div class="rounded-lg md:w-[24rem] w-44 bg-[image:--photoURL] aspect-[0.75/1] bg-cover bg-center bg-white/10" style="--photoURL:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/DLYi8Atxxz-&amp;w=384)">

            </div>
        </div>
        <div class="w-full grid gap-2">
            <div class="grid grid-cols-2 gap-2">
                    <a class="flex  justify-center items-center h-11 px-4 gap-3 bg-white/10 hover:bg-white/20 transition-all rounded-full" href="/chapter/634504a70a7-63451720fbb/" alt="Chapter 1" title="Chapter 1" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden">
        <img class="w-7 -mx-1" src="https://api.iconify.design/ic:round-play-arrow.svg?color=%23ffffff" alt="Start Reading">
        <span class="font-medium">
            Start Reading        </span>
    </a>
    <a class="flex  justify-center items-center h-11 px-4 gap-3 bg-white/10 hover:bg-white/20 transition-all rounded-full" href="/chapter/634504a70a7-6405576ac41/" alt="Chapter 38" title="Chapter 38" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden">
        <img class="w-7 -mx-1" src="https://api.iconify.design/ic:round-play-arrow.svg?color=%23ffffff" alt="New Chapter">
        <span class="font-medium">
            New Chapter
        </span>
    </a>
            </div>
            <div class="flex sm:flex-row flex-col  sm:mt-0 mt-2  sm:gap-4 gap-[4vw]">
                <div class="flex  w-full sm:gap-2 gap-[2vw]">
            <div id="libraryButtonAdd" class="flex w-full justify-center items-center h-11 px-4 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full">
                <img class="w-7 -mx-1" src="https://api.iconify.design/material-symbols:add-rounded.svg?color=white" alt="Add to Library">
                <span class="font-medium">
                    Add to Library                </span>
            </div>
            <div id="libraryButtonRemove" class="hidden w-full justify-center items-center h-11 px-4 gap-3 bg-red-500/70 hover:bg-red-500 transition-all cursor-pointer rounded-full">
                <img class="w-7 -mx-1" src="https://api.iconify.design/material-symbols:close-rounded.svg?color=white" alt="remove from libaray">
                <span class="font-medium">
                    Remove from Library                </span>
            </div>
            <div class="sm:w-fit w-1/3 opacity-50 flex justify-center items-center h-11 sm:px-4 gap-3 bg-white/10 transition-all rounded-full">
                <img class="w-5" src="https://api.iconify.design/ic:round-notifications.svg?color=white" alt="bell icon">
            </div>
        </div>
    </div>
    <script>
        let series_uid = '634504a70a7';
        let library = store.get('library');
        let libraryButtonAdd = document.querySelector('#libraryButtonAdd');
        let libraryButtonRemove = document.querySelector('#libraryButtonRemove');


        libraryButtonAdd.addEventListener('click', function() {
            store.set('library', {
                ...library,
                [series_uid]: true
            })
            toLibrary(true)
        })
        libraryButtonRemove.addEventListener('click', function() {
            let library = store.get('library');
            if (library) {
                delete library[series_uid]
                store.set('library', {
                    ...library
                })
                toLibrary(false)
            }
        })


        function toLibrary(type) {
            let firstElement = ((type ? libraryButtonAdd : libraryButtonRemove).classList);
            let secondElement = ((type ? libraryButtonRemove : libraryButtonAdd).classList);
            firstElement.add('hidden');
            firstElement.remove('flex');
            secondElement.remove('hidden');
            secondElement.add('flex');
        }

        if (library && library[series_uid]) {
            toLibrary(true)
        } else {
            toLibrary(false)
        }
    </script>

        </div>
    </div>
    <div class="grid sm:gap-4 gap-[4vw] w-full h-fit">
        <div class="flex md:flex-row flex-col justify-start items-center gap-6">
            <div class="flex gap-4 flex-col justify-between items-start h-full w-full">
                <div class="grid gap-4">
                    <h1 class="sm:text-4xl text-xl text-[length:10vw] font-black">
                        The Concept-Grasping Magical Genius                    </h1>
                    <div class="flex flex-wrap gap-3 justify-start items-start">
                                                                        <a href="/series/?genre=action" alt="Action" title="Action" class="leading-none h-8 px-3 flex justify-center items-center sm:gap-1.5 gap-[1.5vw] bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-lg">
                            <span>Action</span>
                        </a>
                                                <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="leading-none h-8 px-3 flex justify-center items-center sm:gap-1.5 gap-[1.5vw] bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-lg">
                            <span>Adventure</span>
                        </a>
                                                <a href="/series/?genre=magic" alt="Magic" title="Magic" class="leading-none h-8 px-3 flex justify-center items-center sm:gap-1.5 gap-[1.5vw] bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-lg">
                            <span>Magic</span>
                        </a>
                                                                    </div>
                    <div class="grid gap-2 h-fit">
                        <div class="font-medium">
                            Alternative titles
                        </div>
                        <div class="grid gap-2 h-fit">
                                                        <div class="grid flex-wrap gap-2 w-full mb-2 opacity-80">
                                                                                                <span class="text-md leading-none">개념 잡는 마법 천재</span>
                                                            </div>
                                                    </div>
                    </div>
                    <div class="w-full flex gap-3 flex-wrap">
                                                <div class="grid gap-2 h-fit">
                            <div class="font-medium flex gap-1 justify-start items-center">
                                <img src="https://api.iconify.design/material-symbols:edit-rounded.svg?color=white" class="h-auto">
                                <span>Author</span>
                            </div>
                            <div class="min-h-8 py-1 px-3 flex justify-center items-center bg-white/10 hover:bg-white/20 transition-all rounded-lg w-fit">
                                김정글                            </div>
                        </div>
                                                                        <div class="grid gap-2 h-fit">
                            <div class="font-medium flex gap-1 justify-start items-center">
                                <img src="https://api.iconify.design/pepicons-pop:paint-pallet.svg?color=white" class="h-auto">
                                <span>Artist</span>
                            </div>
                            <div class="min-h-8 py-1 px-3 flex justify-center items-center bg-white/10 hover:bg-white/20 transition-all rounded-lg w-fit">
                                인코,Jiya,김정글                            </div>
                        </div>
                                                                        <div class="grid gap-2 h-fit">
                            <div class="font-medium flex gap-1 justify-start items-center">
                                <img src="https://api.iconify.design/material-symbols:book-4-spark-rounded.svg?color=white" class="h-auto">
                                <span>Type</span>
                            </div>
                            <div class="min-h-8 py-1 px-3 flex justify-center items-center bg-white/10 hover:bg-white/20 transition-all rounded-lg w-fit uppercase">
                                manhwa                            </div>
                        </div>
                                                                        <div class="grid gap-2 h-fit">
                            <div class="font-medium flex gap-1.5 justify-start items-center">
                                <img src="https://api.iconify.design/pajamas:status-preparing-borderless.svg?color=white" class="h-auto">
                                <span>Status</span>
                            </div>
                            <div class="min-h-8 py-1 px-3 flex justify-center items-center bg-white/10 hover:bg-white/20 transition-all rounded-lg w-fit uppercase">
                                ongoing                            </div>
                        </div>
                                                <!-- <div class="grid gap-2 h-fit">
                            <div class="font-medium flex gap-1.5 justify-start items-center">
                                <img src="https://api.iconify.design/material-symbols:menu-book-rounded.svg?color=white"
                                    class="h-auto">
                                <span>Chapters</span>
                            </div>
                            <div
                                class="min-h-8 py-1 px-3 flex justify-center items-center bg-white/10 hover:bg-white/20 transition-all rounded-lg w-fit">
                                38                            </div>
                        </div> -->
                        <div class="grid gap-2 h-fit">
                            <div class="font-medium flex gap-1 justify-start items-center">
                                <img src="https://api.iconify.design/tabler:clock-up.svg?color=white" class="h-auto">
                                <span>Updated</span>
                            </div>
                            <div class="min-h-8 py-1 px-3 flex justify-center items-center bg-white/10 hover:bg-white/20 transition-all rounded-lg w-fit">
                                2025-10-04                            </div>
                        </div>
                        <div class="grid gap-2 h-fit">
                            <div class="font-medium flex gap-1 justify-start items-center">
                                <img src="https://api.iconify.design/tabler:clock-plus.svg?color=white" class="h-auto">
                                <span>Created</span>
                            </div>
                            <div class="min-h-8 py-1 px-3 flex justify-center items-center bg-white/10 hover:bg-white/20 transition-all rounded-lg w-fit">
                                2025-05-04                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="grid gap-2">
                        <div class="text-lg font-bold">
                Synopsis
            </div>
            <div class="grid">
                                <div class="overflow-hidden">
                    <p style="white-space: pre-wrap" class="p-4 bg-white/10 rounded-lg">Pauline became a mother figure to Rowan, who had lost everything.<br>After Pauline left, Rowan grieved her and awakened to a power called 'Mana'.<br>What's more, Rowan could even see the Mana of other people!<br>Through mana, even though he's apart from Pauline, he can always feel like she's with him...<br>One day, Rowan encounters a shocking sight of Pauline, who he believed had left for a noble family.</p>
                </div>
                            </div>
        </div>
        <div class="grid w-full my-2">
            <div class="grid md:grid-cols-2 sm:gap-4 gap-2">
    <div class="sm:flex  hidden justify-between bg-gradient-to-b from-white/10 to-transparent gap-6 p-4 rounded-t-2xl overflow-hidden z-[1] col-span-full md:-mb-4">
    <div class="flex gap-4 justify-center items-center ">
        <div class="h-full w-1 rounded-lg bg-white/20">

        </div>
        <div class="grid ">
            <div class="font-medium truncate">Share Genz Toon</div>
            <div class="text-sm truncate">to your friends</div>
        </div>
    </div>
    <div class="sharethis-inline-share-buttons st-left st-has-labels st-hidden st-inline-share-buttons" id="st-1"><div class="st-total st-hidden">
  <span class="st-label"></span>
  <span class="st-shares">
    Shares
  </span>
</div><div class="st-btn st-first st-last" data-network="sharethis">
  <img alt="sharethis sharing button" src="https://platform-cdn.sharethis.com/img/sharethis.svg">
  <span class="st-label">Share</span>
</div></div>
</div>
<style>
    #st-1 .st-total {
        color: white !important;
    }

    #st-1.st-hidden {
        opacity: 100 !important;
    }
</style>
<script type="text/javascript" src="https://platform-api.sharethis.com/js/sharethis.js#property=65dc466cf44fb1001a4c6a85&amp;product=inline-share-buttons&amp;source=platform" async="async"></script>    <!-- Report Section -->
        <div class="flex  justify-between gap-6 bg-white/10 p-4 rounded-2xl">
    <div class="flex gap-4  justify-center items-center">
        <div class="w-fit h-full">
            <div class="h-full w-1 rounded-lg bg-white/20">

            </div>
        </div>
        <div class="grid ">
            <div class="font-medium truncate">Facing an Issue?</div>
            <div class="text-sm truncate">Let us know, and we'll help ASAP</div>
        </div>
    </div>
    <button id="open_login_panel_button" class="h-10 gap-2 px-6 bg-rose-500 hover:bg-rose-600 hover:bg-opacity-80 flex justify-center items-center rounded-full">
        <div class="w-6">
            <img class="w-6" src="https://api.iconify.design/material-symbols:report.svg?color=white">
        </div>
        <div class="font-medium">Report</div>
    </button>
</div>        <!-- Social Section -->
        <div class="flex  justify-between gap-6 bg-white/10 p-4 rounded-2xl">
        <div class="flex gap-4  justify-center items-center">
            <div class="h-full w-1 rounded-lg bg-white/20">

            </div>
            <div class="grid ">
                <div class="font-medium truncate">Join Our Socials</div>
                <div class="text-sm truncate">to explore more</div>
            </div>
        </div>
        <a href="https://discord.gg/S8c2kGVr2g" target="_blank" alt="Discord" title="Discord" class="h-10 gap-2 px-6 bg-[#5865F2] hover:bg-opacity-80 flex justify-center items-center rounded-full">
            <div class="w-6">
                <img src="https://api.iconify.design/cbi:discord.svg?color=%23ffffff" class="w-6" alt="discord">
            </div>
            <div class="font-medium">Discord</div>
        </a>
    </div>
        <!-- Donation Section -->
    </div>
        </div>
        <div class="lg:flex gap-4 lg:justify-start lg:items-start">
            <div class="w-full">
                <div class="grid gap-4">
                    <div class="gap-4 grid">
                        <div class="flex gap-4 justify-start items-center">
                            <form method="get" class="flex px-4 w-full justify-center items-center h-11 gap-3 bg-white/10 transition-all rounded-full">
                                <img class="w-6" src="https://api.iconify.design/ph:magnifying-glass-bold.svg?color=white">
                                <input type="text" id="chapter_search" name="q" placeholder="Search chapter by number." class="placeholder:font-light placeholder:text-white/50 text-base w-full bg-transparent focus-within:outline-none">
                            </form>
                            <div class="flex justify-center items-center bg-white/10 hover:bg-white/20 transition-all rounded-full h-full aspect-square">
                                <div class="cursor-pointer group" id="sort">
                                    <img class="w-6 not-sorted transition-all" src="https://api.iconify.design/bi:sort-numeric-down-alt.svg?color=white" alt="">
                                </div>
                            </div>
                            <script>
                            (function() {
                                let element = document.querySelector('#sort');

                                element.addEventListener('click', function(event) {
                                    element = event.target.classList;
                                    if (element.contains('not-sorted')) {
                                        element.add('sorted');
                                        element.remove('not-sorted');
                                        event.target.setAttribute('src',
                                            'https://api.iconify.design/bi:sort-numeric-up.svg?color=white'
                                        )
                                    } else {
                                        element.remove('sorted');
                                        element.add('not-sorted');
                                        event.target.setAttribute('src',
                                            'https://api.iconify.design/bi:sort-numeric-down-alt.svg?color=white'
                                        )

                                    }
                                    let chapter = document.querySelector('#chapters');
                                    let arr = Array.from(chapter.childNodes);
                                    arr.reverse();
                                    chapter.append(...arr);
                                });
                            })();
                            </script>
                        </div>
                    </div>
                                        <div class="grid relative overflow-hidden min-h-[20rem]">
                                                <div id="chapters_panel" class="grid containerz overflow-hidden max-h-[20rem] h-fit">
                            <div id="chapters" class="grid 2xl:grid-cols-3 lg:grid-cols-2 grid-cols-1 sm:gap-4 gap-[3vw]">
                                                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-6405576ac41/" alt="Chapter 38" title="Chapter 38" p="lCgDFDEIWj9" d="1 day ago" c="50">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/lCgDFDEIWj9&amp;w=150)">

                </div>
                                                            <div class="flex justify-center items-center w-full h-full absolute top-0 left-0 bg-black/70">
                            <img src="https://api.iconify.design/material-symbols:lock.svg?color=white" class="w-6">
                        </div>
                                                </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 38                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        1 day ago                    </div>
                                            <div class="flex items-center justify-start gap-1.5 -ml-0.5">
                                                                                    <div class="flex gap-1 justify-center items-center w-fit bg-yellow-200 text-yellow-600 border-yellow-200 pl-1 pr-1.5 h-5 bg-opacity-90 rounded-full">
        <div class="w-3.5 h-fit">
                <img src="/assets/images/Coin.svg?clear=1" class="w-full" alt="Coin">
            </div>        <div class="text-xs uppercase">
                    <span class="font-bold">50</span>
            </div>
</div>                                                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-63fc8e59a62/" alt="Chapter 37" title="Chapter 37" p="tlxPiTLCxwi" d="Sep 27, 2025" c="50">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/tlxPiTLCxwi&amp;w=150)">

                </div>
                                                            <div class="flex justify-center items-center w-full h-full absolute top-0 left-0 bg-black/70">
                            <img src="https://api.iconify.design/material-symbols:lock.svg?color=white" class="w-6">
                        </div>
                                                </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 37                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        Sep 27, 2025                    </div>
                                            <div class="flex items-center justify-start gap-1.5 -ml-0.5">
                                                                                    <div class="flex gap-1 justify-center items-center w-fit bg-yellow-200 text-yellow-600 border-yellow-200 pl-1 pr-1.5 h-5 bg-opacity-90 rounded-full">
        <div class="w-3.5 h-fit">
                <img src="/assets/images/Coin.svg?clear=1" class="w-full" alt="Coin">
            </div>        <div class="text-xs uppercase">
                    <span class="font-bold">50</span>
            </div>
</div>                                                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-63f3c43d9c4/" alt="Chapter 36" title="Chapter 36" p="ofwIeWGRUFR" d="Sep 20, 2025" c="50">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/ofwIeWGRUFR&amp;w=150)">

                </div>
                                                            <div class="flex justify-center items-center w-full h-full absolute top-0 left-0 bg-black/70">
                            <img src="https://api.iconify.design/material-symbols:lock.svg?color=white" class="w-6">
                        </div>
                                                </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 36                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        Sep 20, 2025                    </div>
                                            <div class="flex items-center justify-start gap-1.5 -ml-0.5">
                                                                                    <div class="flex gap-1 justify-center items-center w-fit bg-yellow-200 text-yellow-600 border-yellow-200 pl-1 pr-1.5 h-5 bg-opacity-90 rounded-full">
        <div class="w-3.5 h-fit">
                <img src="/assets/images/Coin.svg?clear=1" class="w-full" alt="Coin">
            </div>        <div class="text-xs uppercase">
                    <span class="font-bold">50</span>
            </div>
</div>                                                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-63e225f2bd7/" alt="Chapter 35" title="Chapter 35" p="lybgdPaYEMh" d="Sep 6, 2025" c="50">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/lybgdPaYEMh&amp;w=150)">

                </div>
                                                            <div class="flex justify-center items-center w-full h-full absolute top-0 left-0 bg-black/70">
                            <img src="https://api.iconify.design/material-symbols:lock.svg?color=white" class="w-6">
                        </div>
                                                </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 35                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        Sep 6, 2025                    </div>
                                            <div class="flex items-center justify-start gap-1.5 -ml-0.5">
                                                                                    <div class="flex gap-1 justify-center items-center w-fit bg-yellow-200 text-yellow-600 border-yellow-200 pl-1 pr-1.5 h-5 bg-opacity-90 rounded-full">
        <div class="w-3.5 h-fit">
                <img src="/assets/images/Coin.svg?clear=1" class="w-full" alt="Coin">
            </div>        <div class="text-xs uppercase">
                    <span class="font-bold">50</span>
            </div>
</div>                                                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-63d08fcef4a/" alt="Chapter 34" title="Chapter 34" p="m_otqAFsDNU" d="Aug 23, 2025" c="50">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/m_otqAFsDNU&amp;w=150)">

                </div>
                                                            <div class="flex justify-center items-center w-full h-full absolute top-0 left-0 bg-black/70">
                            <img src="https://api.iconify.design/material-symbols:lock.svg?color=white" class="w-6">
                        </div>
                                                </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 34                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        Aug 23, 2025                    </div>
                                            <div class="flex items-center justify-start gap-1.5 -ml-0.5">
                                                                                    <div class="flex gap-1 justify-center items-center w-fit bg-yellow-200 text-yellow-600 border-yellow-200 pl-1 pr-1.5 h-5 bg-opacity-90 rounded-full">
        <div class="w-3.5 h-fit">
                <img src="/assets/images/Coin.svg?clear=1" class="w-full" alt="Coin">
            </div>        <div class="text-xs uppercase">
                    <span class="font-bold">50</span>
            </div>
</div>                                                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-63c7cfe8fc4/" alt="Chapter 33" title="Chapter 33" p="Hvga_V7ubfd" d="1 day ago" c="50">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/Hvga_V7ubfd&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 33                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        1 day ago                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-63bef8e2bd3/" alt="Chapter 32" title="Chapter 32" p="TFcikqvAqxL" d="Sep 27, 2025" c="50">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/TFcikqvAqxL&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 32                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        Sep 27, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-63b62a3c11a/" alt="Chapter 31" title="Chapter 31" p="rXocGCvQU96" d="Sep 20, 2025" c="50">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/rXocGCvQU96&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 31                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        Sep 20, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-63ad7b0e935/" alt="Chapter 30" title="Chapter 30" p="FOLD1UCP0NL" d="Sep 6, 2025" c="50">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/FOLD1UCP0NL&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 30                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        Sep 6, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-639bec3e95f/" alt="Chapter 29" title="Chapter 29" p="QC2zf-EDfYO" d="Aug 23, 2025" c="50">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/QC2zf-EDfYO&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 29                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        Aug 23, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-6393142d3b9/" alt="Chapter 28" title="Chapter 28" p="Bs13adqBjh7" d="Aug 16, 2025" c="50">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/Bs13adqBjh7&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 28                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        Aug 16, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-638a4ec1d05/" alt="Chapter 27" title="Chapter 27" p="VUf4e35YSem" d="Aug 9, 2025" c="50">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/VUf4e35YSem&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 27                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        Aug 9, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-638192cd72a/" alt="Chapter 26" title="Chapter 26" p="QoMckxvBtU0" d="Aug 2, 2025" c="50">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/QoMckxvBtU0&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 26                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        Aug 2, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-6378b76461f/" alt="Chapter 25" title="Chapter 25" p="2-dROl4Trjq" d="Jul 26, 2025" c="50">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/2-dROl4Trjq&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 25                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        Jul 26, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-63670d20961/" alt="Chapter 24" title="Chapter 24" p="SZoOSmd7zi-" d="Jul 12, 2025" c="50">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/SZoOSmd7zi-&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 24                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        Jul 12, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-635e4b76f21/" alt="Chapter 23" title="Chapter 23" p="Hi9nWyCjYpm" d="Jul 5, 2025" c="50">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/Hi9nWyCjYpm&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 23                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        Jul 5, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-635637ba03e/" alt="Chapter 22" title="Chapter 22" p="xq6vNyOOoeB" d="Jun 28, 2025" c="50">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/xq6vNyOOoeB&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 22                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        Jun 28, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-634ddb5f062/" alt="Chapter 21" title="Chapter 21" p="9Y9cd4E-Nnd" d="Jun 21, 2025" c="50">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/9Y9cd4E-Nnd&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 21                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        Jun 21, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-63456ae9e57/" alt="Chapter 20" title="Chapter 20" p="i-5NJHncr0D" d="Jun 9, 2025" c="50">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/i-5NJHncr0D&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 20                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        Jun 9, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-63456ae0437/" alt="Chapter 19" title="Chapter 19" p="8FKhJX3sING" d="Jun 9, 2025" c="50">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/8FKhJX3sING&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 19                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        Jun 9, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-63456ae760d/" alt="Chapter 18" title="Chapter 18" p="9Qa8IanuIT1" d="Jun 9, 2025" c="50">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/9Qa8IanuIT1&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 18                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        Jun 9, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-63456ae088d/" alt="Chapter 17" title="Chapter 17" p="zIRyq_MKT0e" d="Jun 9, 2025" c="50">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/zIRyq_MKT0e&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 17                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        Jun 9, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-63456ae6e02/" alt="Chapter 16" title="Chapter 16" p="Vd9adlRMAs3" d="May 31, 2025" c="50">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/Vd9adlRMAs3&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 16                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        May 31, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-63455371fc1/" alt="Chapter 15" title="Chapter 15" p="wgVdLoM3cYw" d="May 24, 2025" c="50">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/wgVdLoM3cYw&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 15                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        May 24, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-6345537968a/" alt="Chapter 14" title="Chapter 14" p="oFxqJZ9nnbu" d="May 18, 2025" c="50">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/oFxqJZ9nnbu&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 14                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        May 18, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-6345537d1ab/" alt="Chapter 13" title="Chapter 13" p="ADVvpUVb0rx" d="May 11, 2025" c="50">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/ADVvpUVb0rx&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 13                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        May 11, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-63455381521/" alt="Chapter 12" title="Chapter 12" p="y4rbGYuvw7U" d="May 4, 2025" c="1">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/y4rbGYuvw7U&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 12                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        May 4, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-63455379436/" alt="Chapter 11" title="Chapter 11" p="zw2tRoFLgZY" d="May 4, 2025" c="1">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/zw2tRoFLgZY&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 11                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        May 4, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-63453dff1c8/" alt="Chapter 10" title="Chapter 10" p="irqzV18CDNs" d="May 4, 2025" c="50">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/irqzV18CDNs&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 10                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        May 4, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-63453e01863/" alt="Chapter 9" title="Chapter 9" p="CYDm9Fb-R41" d="May 4, 2025" c="50">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/CYDm9Fb-R41&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 9                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        May 4, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-63453e08fd8/" alt="Chapter 8" title="Chapter 8" p="G9heG8QbrbB" d="May 4, 2025" c="1">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/G9heG8QbrbB&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 8                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        May 4, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-63453e04180/" alt="Chapter 7" title="Chapter 7" p="9gPKiKFW3N_" d="May 4, 2025" c="1">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/9gPKiKFW3N_&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 7                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        May 4, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-63453df2ec6/" alt="Chapter 6" title="Chapter 6" p="mQ1LkvwpVAn" d="May 4, 2025" c="1">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/mQ1LkvwpVAn&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 6                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        May 4, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-63453dd3a54/" alt="Chapter 5" title="Chapter 5" p="0leObDAkXUA" d="May 4, 2025" c="1">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/0leObDAkXUA&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 5                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        May 4, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-63453dd92c8/" alt="Chapter 4" title="Chapter 4" p="dMKKmhd8WTk" d="May 4, 2025" c="1">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/dMKKmhd8WTk&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 4                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        May 4, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-63453df0a02/" alt="Chapter 3" title="Chapter 3" p="dpEid9ksSY3" d="May 4, 2025" c="1">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/dpEid9ksSY3&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 3                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        May 4, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-63453ded994/" alt="Chapter 2" title="Chapter 2" p="Fk1CoxmeoGh" d="May 4, 2025" c="1">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/Fk1CoxmeoGh&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 2                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        May 4, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                <a class="group cursor-pointer relative overflow-hidden flex  items-center justify-between sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/634504a70a7-63451720fbb/" alt="Chapter 1" title="Chapter 1" p="_5dzApbrw6u" d="May 4, 2025" c="1">
    <div class="flex  items-center sm:gap-4 gap-[4vw]">
                    <div class="border inline-table border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[2/1.5] w-28 bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/_5dzApbrw6u&amp;w=150)">

                </div>
                            </div>
                <div class="grid h-fit ">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 1                    </span>
                                    </span>
                <div class="flex items-start flex-col justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        May 4, 2025                    </div>
                                    </div>
                    </div>
    </div>
    </a>                                                                                            </div>
                        </div>
                        <script>
                        (function() {
                            let chapters_input = document.getElementById('chapter_search');
                            chapters_input.addEventListener('input', (event) => {
                                let value = event.target.value
                                runSet(value)
                            })

                            function runSet(value = '') {

                                let items = document.querySelectorAll('#chapters>a');
                                let view = false;
                                for (item of items) {
                                    let text = item.getAttribute('alt');
                                    let search = value.length > 0 ? (text.toLowerCase()).includes(value
                                        .toLowerCase()) : true;
                                    if (search) {
                                        item.classList.add('flex');
                                        item.classList.remove('hidden');
                                        view = true;
                                    } else {
                                        item.classList.add('hidden');
                                        item.classList.remove('flex');
                                    }
                                }
                                console.log({
                                    view
                                })
                            }
                        })();
                        </script>
                                                                        <div id="expand_chapter_button" class="absolute flex justify-center items-center w-full h-24 bottom-0 left-0">
                            <div class="leading-none h-8 px-3 flex w-fit justify-center items-center sm:gap-1.5 gap-[1.5vw] backdrop-blur-3xl bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-lg">
                                <img src="https://api.iconify.design/mdi:arrow-down.svg?color=white" class="w-5 -ml-1" alt="Expend">
                                <span>Expand</span>
                            </div>
                        </div>
                        <style>
                        .containerz {
                            -webkit-mask-image: linear-gradient(to bottom, black 50%, transparent 100%);
                            mask-image: linear-gradient(to bottom, black 39%, transparent 100%);
                        }
                        </style>
                        <script>
                        (function() {
                            let expand_button = document.getElementById('expand_chapter_button');
                            let chapters_panel = document.getElementById('chapters_panel');
                            expand_button.addEventListener('click', () => {
                                chapters_panel.classList.remove('containerz');
                                chapters_panel.classList.remove('overflow-hidden');
                                chapters_panel.classList.remove('max-h-[20rem]');
                                expand_button.remove()
                            })
                        })();
                        </script>
                                                                                            </div>
                </div>
            </div>
        </div>
                    <div class="grid sm:rounded-xl sm:mx-0 -mx-[4vw] sm:w-full w-[calc(100%+8vw)] overflow-hidden">
        <div id="iframe-container"><iframe id="resizing-iframe" src="https://zmio.org/post?color=1f2937&amp;host=genzupdates.com&amp;path=/series/634504a70a7/" scrolling="no" style="width: 100%; border: none; overflow: hidden; display: block; height: 572px;"></iframe></div>
    </div>
    <script>
        const allowedOrigin = "https://zmio.org";
        const baseSrc =
            "https://zmio.org/post?color=1f2937&host=genzupdates.com&path=/series/634504a70a7/";

        // Track if iframe was initially made without token
        let iframeCreatedWithoutToken = false;

        function createIframe(token) {
            // Remove old iframe if exists
            const existing = document.getElementById("resizing-iframe");
            if (existing) {
                existing.remove();
            }

            const iframe = document.createElement("iframe");
            iframe.id = "resizing-iframe";

            const url = new URL(baseSrc);
            if (token) {
                url.searchParams.set("token", token);
            }

            iframe.src = url.toString();
            iframe.style.width = "100%";
            iframe.style.border = "none";
            iframe.style.overflow = "hidden";
            iframe.style.display = "none";
            iframe.setAttribute("scrolling", "no");

            document.getElementById("iframe-container").appendChild(iframe);

            iframe.addEventListener("load", () => {
                iframe.style.display = "block";
                if (token) {
                    iframe.contentWindow.postMessage({
                            type: "auth-token",
                            token
                        },
                        allowedOrigin
                    );
                }
            });

            // Update flag
            iframeCreatedWithoutToken = !token;
        }

        // Always listen for messages
        window.addEventListener("message", (event) => {
            if (event.origin !== allowedOrigin) return;

            const data = event.data;

            if (data.type === "resize-iframe") {
                const iframe = document.getElementById("resizing-iframe");
                if (iframe) {
                    iframe.style.height = data.height + "px";
                }
            }

            if (data.type === "auth-token" && data.token) {
                localStorage.setItem("zimo-auth-token", data.token);

                // Recreate iframe only if it was created earlier without a token
                if (iframeCreatedWithoutToken) {
                    createIframe(data.token);
                }
            }
        });

        // On load: check if token exists
        const token = localStorage.getItem("zimo-auth-token");
        createIframe(token); // If token is null, it'll set the flag to recreate later
    </script>
        <style>
        .layer_main {
            position: absolute;
            top: 0px;
            left: 0px;
            margin-left: -2.5rem;
            width: calc(100% + 2.5rem);
            height: 960px;
        }

        .layer_2 {
            height: 960px;
            background: var(--layer, rgba(0, 0, 0, .6));
        }

        .layer_1 {
            background: linear-gradient(rgba(0, 0, 0, 0.35) 30%, rgba(0, 0, 0, 0.4) 50%, var(--theme_color) 100%);
            -webkit-backdrop-filter: blur(36px);
            backdrop-filter: blur(36px);
        }
        </style>
    </div>
</div>    </div>
    <!-- sm:left-[calc(50%-15rem)] -->
    
<footer class="sm:mb-0  bg-gradient-to-t from-[--footer] to-transparent sm:mt-12 sm:h-fit">
    <div class="grid w-full 2xl:max-w-[100rem] max-w-6xl mx-auto sm:px-4 sm:py-10 px-[6vw] py-[6vw] h-full">
        <div class="grid sm:gap-10 gap-[4vw]">
            <div class="grid gap-8">
                <div class="flex flex-col justify-center items-center gap-4">
                    <a style="background-image: url(https://wsrv.nl/?url=cdn.meowing.org/uploads/a563fb09246&amp;w=100);" class="flex w-fit justify-center items-center h-16 aspect-square gap-3 bg-center bg-cover bg-no-repeat rounded-full" href="/">

                    </a>
                    <div class="flex flex-col justify-center items-center gap-2 w-full">
                        <a class="block w-fit font-semibold text-2xl" href="/">
                            Genz Toon                        </a>
                                                <div class="w-full sm:max-w-[50%] text-center">
                            A Standard scanlation dedicated to providing high-quality translations, offering readers with the Best. Enjoy a vast library of series, updated regularly for an enhanced reading experience.                        </div>
                                            </div>
                </div>
                <div class="flex flex-wrap gap-3 justify-center items-center">
                                                            <a href="https://discord.gg/S8c2kGVr2g" target="_blank" alt="Discord" title="Discord" class="bg-white/10 hover:bg-white/15 transition-all rounded-lg h-11 w-11 flex flex-col justify-center items-center">
                        <img src="https://api.iconify.design/fa6-brands:discord.svg?color=white" class="h-6">
                    </a>
                                                            <a href="/dmca" target="_blank" alt="DMCA" title="DMCA" class="bg-white/10 hover:bg-white/15 transition-all rounded-lg h-11 w-11 flex flex-col justify-center items-center">
                        <span class="font-bold text-xs">DMCA</span>
                    </a>
                </div>
                                                <!-- <div class="flex gap-4 justify-center items-center flex-wrap">
                                                    <a href="https://discord.gg/S8c2kGVr2g" target="_blank" class="font-semibold text-xl hover:text-blue-500"
                                alt="Discord">Discord</a>
                                                                        </div> -->
                                <!-- <div class="text-center flex flex-col justify-center items-center">
                    <span>This theme is designed by ----</span>
                    <span>Sooo unique that everyone wants to copy. 😉</span>
                </div> -->
            </div>
        </div>
    </div>
</footer>
<script>
(() => {
    let open_login_panel_button = document.querySelectorAll('#open_login_panel_button');

    let close_login_panel_button = document.getElementById('close_login_panel_button');
    let login_panel_main = document.getElementById('login_panel_main');
    let login_panel_background = document.getElementById('login_panel_background');
    let login_panel = document.getElementById('login_panel');
    runEl({
        show: {
            element: login_panel,
            function: () => {}
        },
        ignore: {
            elements: [...(Array.from(open_login_panel_button) ?? []), ...[
                close_login_panel_button,
                login_panel_background
            ]],
            function: async (data) => {
                data.preventDefault();
                login_panel_main.classList.toggle('flex');
                login_panel_main.classList.toggle('hidden');
                // Ignored elements function
            }
        }
    });
})();
</script>
<script src="https://www.hCaptcha.com/1/api.js" async="" defer=""></script>
<div id="main-report-element" class="w-full h-full fixed bg-black/40 top-0 left-0 z-[200] hidden justify-center items-center p-4">
    <div class="w-full h-full absolute top-0 left-0 overflow-hidden bg-[--theme_color] opacity-90" id="reportButton">

    </div>
    <div class="w-full max-w-[30rem] h-fit bg-[--theme_color] rounded-2xl relative">

        <!-- Loading Indicator -->
        <div id="report-loader" class="w-full h-full hidden flex justify-center items-center absolute top-0 left-0 z-10 border bg-[--theme_color] border-white/10 rounded-2xl">
            <img class="w-11 animate-spin" src="https://api.iconify.design/mingcute:loading-line.svg?color=white">
        </div>
        <!-- Success Indicator -->
        <div id="report-success" class="w-full h-full hidden flex flex gap-4 justify-center items-center absolute top-0 left-0 z-10 border bg-[--theme_color] border-white/10 rounded-2xl">
            <img class="w-11" src="https://api.iconify.design/material-symbols:check-circle-rounded.svg?color=white" alt="Success">
            <div>
                Report submitted!
            </div>
        </div>

        <div class="w-full h-fit p-6 border-white/10 border rounded-2xl grid">
            <div class="grid gap-3">
                <div class="w-full flex justify-between items-center mb-2">
                    <!-- Modal Title -->
                    <div class="text-white/90 font-bold text-2xl">
                        Report
                    </div>
                    <!-- Close Button -->
                    <button id="reportButton" class="flex w-fit aspect-square justify-center items-center h-11 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full">
                        <img class="w-6" src="https://api.iconify.design/material-symbols:close-rounded.svg?color=white">
                    </button>
                </div>

                <form class="grid gap-4" id="reportForm">
                    <div class="relative grid gap-2">
                        <label for="reportOption" class="flex items-center gap-2">
                            <img src="https://api.iconify.design/mdi:dots-vertical-circle.svg?color=white" alt="Icon" width="20" height="20">
                            Choose an option.
                        </label>
                        <div class="custom-select w-full bg-white/10 rounded-xl relative">
                            <div id="selectedOption" class="text-white cursor-pointer py-2 px-3 flex items-center gap-2">
                                <span class="flex gap-1"><span class="sm:hidden">Tap</span><span class="sm:block hidden">Click</span> to view options</span>
                            </div>
                            <div id="optionsList" class="options-list bg-[--theme_color] rounded-xl absolute w-full hidden mt-1 z-10 overflow-hidden">
                            <div class="option-item text-white py-2 px-3 cursor-pointer hover:bg-white/20 bg-white/10" data-value="1">Chapter Missing</div><div class="option-item text-white py-2 px-3 cursor-pointer hover:bg-white/20 bg-white/10" data-value="2">Suggestion</div><div class="option-item text-white py-2 px-3 cursor-pointer hover:bg-white/20 bg-white/10" data-value="3">Feedback</div><div class="option-item text-white py-2 px-3 cursor-pointer hover:bg-white/20 bg-white/10" data-value="4">Correction</div><div class="option-item text-white py-2 px-3 cursor-pointer hover:bg-white/20 bg-white/10" data-value="5">Other</div></div>
                        </div>
                        <p id="error-message" class="text-red-500 text-sm hidden mt-1">Please select an option.</p>
                    </div>

                    <div class="grid gap-2">
                        <label for="reportText" class="flex items-center gap-2">
                            <img src="https://api.iconify.design/material-symbols:edit-note.svg?color=white" alt="Icon" width="20" height="20">
                            Enter your report.
                        </label>
                        <textarea id="reportText" name="message" rows="4" class="w-full p-2 bg-white/10 rounded-xl" minlength="1" maxlength="200" required=""></textarea>
                    </div>

                    <div class="grid gap-2">
                        <label for="reportText" class="flex items-center gap-2">
                            <img src="https://api.iconify.design/logos:hcaptcha-icon.svg" alt="Icon" width="20" height="20">
                            Solve captcha.
                        </label>
                        <div class="grid gap-1">
                            <div class="h-captcha" data-sitekey="a9226c58-b3d8-4f9e-82d4-d92644dc8584"><iframe src="https://newassets.hcaptcha.com/captcha/v1/ee1a855b00b1ba8c779103181fc3ae671f71373f/static/hcaptcha.html#frame=checkbox&amp;id=0zso7ye7uyi&amp;host=genzupdates.com&amp;sentry=true&amp;reportapi=https%3A%2F%2Faccounts.hcaptcha.com&amp;recaptchacompat=true&amp;custom=false&amp;hl=de&amp;tplinks=on&amp;andint=off&amp;pstissuer=https%3A%2F%2Fpst-issuer.hcaptcha.com&amp;sitekey=a9226c58-b3d8-4f9e-82d4-d92644dc8584&amp;theme=light&amp;origin=https%3A%2F%2Fgenzupdates.com" tabindex="0" frameborder="0" scrolling="no" allow="private-state-token-issuance 'src'; private-state-token-redemption 'src'" title="Widget mit Kontrollkästchen für die hCaptcha-Sicherheitsabfrage" data-hcaptcha-widget-id="0zso7ye7uyi" data-hcaptcha-response="" style="pointer-events: auto; background-color: rgba(255, 255, 255, 0); border-radius: 4px; width: 302px; height: 76px; overflow: hidden;"></iframe><textarea id="g-recaptcha-response-0zso7ye7uyi" name="g-recaptcha-response" style="display: none;"></textarea><textarea id="h-captcha-response-0zso7ye7uyi" name="h-captcha-response" style="display: none;"></textarea></div>
                            <p id="captcha-error-message" class="text-red-500 text-sm hidden mt-1">Please complete the
                                captcha.</p>
                        </div>
                    </div>

                    <div class="text-center">
                        <button type="submit" class="bg-white/10 text-white px-6 h-11 rounded-full">
                            Submit Report
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<script>
    (() => {
        function report_view() {

            const reportElement = document.getElementById("main-report-element");
            const reportLoader = document.getElementById("report-loader");
            const reportText = document.getElementById("reportText");
            const selectedOption = document.getElementById("selectedOption");
            const errorMessage = document.getElementById("error-message");
            if (!reportLoader.classList.contains("hidden")) {
                return;
            }

            reportText.value = "";
            selectedOption.textContent = "Click to view options";
            errorMessage.classList.add("hidden");

            if (reportElement.classList.contains("hidden")) {
                reportElement.classList.add("flex");
                reportElement.classList.remove("hidden");
                reportElement.classList.add("transition-opacity", "opacity-0");
                setTimeout(() => {
                    reportElement.classList.remove("opacity-0");
                    reportElement.classList.add("opacity-100");
                }, 10);
            } else {
                reportElement.classList.remove("opacity-100");
                reportElement.classList.add("opacity-0");
                setTimeout(() => {
                    reportElement.classList.add("hidden");
                    reportElement.classList.remove("flex");
                }, 200);
            }
        }
                const optionsList = [{"value":1,"label":"Chapter Missing"},{"value":2,"label":"Suggestion"},{"value":3,"label":"Feedback"},{"value":4,"label":"Correction"},{"value":5,"label":"Other"}];

        const optionsListContainer = document.getElementById('optionsList');
        const selectedOption = document.getElementById('selectedOption');
        const errorMessage = document.getElementById('error-message');
        const captchaErrorMessage = document.getElementById('captcha-error-message');
        const reportText = document.getElementById('reportText');
        const submitButton = document.querySelector('button[type="submit"]');
        const selectContainer = document.querySelector('.custom-select');
        const reportLoader = document.getElementById('report-loader');
        const form = document.getElementById('reportForm');

        const report_view_buttons = document.querySelectorAll('.report_view_button');

        for (let button of report_view_buttons) {
            button.addEventListener('click', () => {
                console.log(true);
            });
        }



        let selectedValue = null;

        optionsList.forEach(option => {
            const optionElement = document.createElement('div');
            optionElement.classList.add('option-item', 'text-white', 'py-2', 'px-3', 'cursor-pointer',
                'hover:bg-white/20', 'bg-white/10');
            optionElement.setAttribute('data-value', option.value);
            optionElement.textContent = option.label;
            optionsListContainer.appendChild(optionElement);
        });

        selectedOption.addEventListener('click', () => {
            optionsListContainer.classList.toggle('hidden');
        });

        optionsListContainer.addEventListener('click', (e) => {
            if (e.target && e.target.classList.contains('option-item')) {
                const allOptions = optionsListContainer.querySelectorAll('.option-item');
                allOptions.forEach(opt => {
                    opt.classList.remove('bg-red-500');
                });

                e.target.classList.add('bg-red-500');

                selectedValue = e.target.getAttribute('data-value');
                const selectedLabel = e.target.textContent;
                selectedOption.textContent = selectedLabel;

                optionsListContainer.classList.add('hidden');
                errorMessage.classList.add('hidden');
            }
        });

        form.addEventListener('submit', async (e) => {
            e.preventDefault();

            if (!selectedValue) {
                errorMessage.classList.remove('hidden');
            } else if (!hcaptcha.getResponse()) {
                captchaErrorMessage.classList.remove('hidden');
            } else {
                captchaErrorMessage.classList.add('hidden');

                // Show loader and disable inputs
                reportLoader.classList.remove('hidden');
                reportText.disabled = true;
                submitButton.disabled = true;
                selectContainer.disabled = true;
                optionsListContainer.classList.add('disabled');
                selectedOption.classList.add('disabled');

                const message = reportText.value;
                let data = {
                    message,
                    type: selectedValue,
                    captcha: hcaptcha.getResponse(),
                    ...{"series_uid":"634504a70a7"}                };
                const params = new URLSearchParams(data).toString();
                const url = `/report?${params}`;

                try {
                    let {
                        success,
                        message: error_message
                    } = await fetch(url).then(response => response.json());
                    if (success) {
                        reportLoader.classList.add('hidden');

                        const reportSuccess = document.getElementById('report-success');
                        reportSuccess.classList.remove('hidden');

                        setTimeout(() => {
                            report_view();
                        }, 1000);
                    } else {
                        alert(error_message);
                        setTimeout(() => {
                            report_view();
                        }, 2000);
                    }
                } catch (error) {
                    alert(
                        'An error occurred while submitting the report, reload the page and try again.'
                    );
                    setTimeout(() => {
                        report_view();
                    }, 2000);
                } finally {
                    reportLoader.classList.add('hidden');
                }
            }
        });

        document.getElementById('reportButton')?.addEventListener('click', () => {
            report_view()
        });
    })();
</script>    <div id="cards_show" class="hidden justify-center items-center w-full h-full fixed top-0 left-0 z-[162] overflow-hidden opacity-0 transition-all duration-[250] ">
    <div id="cards_show_bg" class="absolute top-0 left-0 w-full h-full bg-[--theme_color] opacity-90">

    </div>
    <div id="cards_show_main" class="w-full h-full max-w-sm max-h-96 bg-[--theme_color] relative rounded-2xl">
                    <div class="flex flex-col justify-between items-start w-full h-full border border-white/10 rounded-2xl">
                                    <div class="w-full h-full flex flex-col gap-4 p-8 justify-center items-center">
                        <div class="w-full text-center">
                            You don't have any cards yet. <br> To purchase a chapter, purchase a card first.                        </div>
                        <button id="card_note_button" onclick="card_note_open()" class="px-5 flex w-fit justify-center items-center h-11 gap-3 bg-blue-600 hover:bg-blue-500 transition-all cursor-pointer rounded-full">
                            <img class="w-6" src="https://api.iconify.design/mdi:card-plus.svg?color=white">
                            <div class="font-medium">Purchase Card</div>
                        </button>
                    </div>
                                <div class="grid gap-3 h-fit w-full p-4 border-t border-white/10">
                    <div class="w-full">
                        <div class="flex gap-3 justify-start items-center">
                            <div id="main_card_chapter_cover" class="aspect-[2/1.5] h-11 bg-white/10 bg-cover bg-center rounded-xl">

                            </div>
                            <div class="grid">
                                <div class="flex gap-1 justify-start items-center">
                                    <span class="font-bold text-yellow-600" id="main_card_coins"></span>
                                    <span class="text-xs font-semibold">COINS</span>
                                </div>
                                <span class="text-xs"><span id="main_card_chapter_name"></span> - <span id="main_card_chapter_date"></span></span>
                            </div>
                        </div>
                    </div>
                                    </div>
            </div>
            </div>
</div>
<script>
    (async () => {
        let cards_show = document.querySelector('#cards_show');
        let cards_show_bg = document.querySelector('#cards_show_bg');
        let cards_show_main = document.querySelector('#cards_show_main');
        let paid_chapters = document.querySelectorAll("#paid-chapter");
        let cards = document.querySelectorAll("button#card");
        let purchase_button = document.querySelector('#purchase_button');

        let main_card_coins = document.querySelector('#main_card_coins');
        let main_card_chapter_cover = document.querySelector('#main_card_chapter_cover');
        let main_card_chapter_name = document.querySelector('#main_card_chapter_name');
        let main_card_chapter_date = document.querySelector('#main_card_chapter_date');

        await (async () => {
            if (cards) {
                for await (const card of cards) {
                    card.addEventListener('click', async (event) => {
                        const card_x = event.target.closest('[card_uid]');
                        await selectCard(card_x);
                        await setPurchase(card_x)
                    });
                }
            }
            if (purchase_button) {
                purchase_button.addEventListener('click', (event) => {
                    if (event.disabled) {} else {
                        let uid = purchase_button.getAttribute('card_uid');
                        let href = purchase_button.getAttribute('href');
                        if (href && uid) {
                            window.location = `${href}?card=${uid}`;
                        }
                    }
                });
            }
        })();

        async function setPurchase(card_x) {
            try {
                let uid = card_x.getAttribute('card_uid');
                let card_coins = Number(card_x.getAttribute('c')) ?? 0;
                let coins = Number(main_card_coins.textContent) ?? 1;
                if (purchase_button) {
                    if (card_coins >= coins) {
                        purchase_button.classList.add('hover:opacity-90');
                        purchase_button.classList.remove('opacity-50');
                        purchase_button.removeAttribute('disabled');
                        purchase_button.setAttribute('card_uid', uid);
                        return true;
                    } else {
                        purchase_button.classList.remove('hover:opacity-90');
                        purchase_button.classList.add('opacity-50');
                        purchase_button.setAttribute('disabled', 'true');
                        purchase_button.removeAttribute('card_uid');
                        return false;
                    }
                }
            } catch (error) {
                console.error(error);
            }
        }

        async function selectCard(card_x) {
            if (card_x) {
                let uid = card_x.getAttribute('card_uid');
                for await (const card_2 of cards) {
                    const card_uid = card_2.getAttribute('card_uid');
                    if (card_uid === uid) {
                        card_2.classList.add('ring-2');
                        card_2.classList.add('ring-offset-2');
                        card_2.classList.remove('ring-0');
                        card_2.classList.remove('ring-offset-0');
                    } else {
                        card_2.classList.add('ring-0');
                        card_2.classList.add('ring-offset-0');
                        card_2.classList.remove('ring-2');
                        card_2.classList.remove('ring-offset-2');
                    }
                }
                return uid;
            }
        }



        await runEl({
            ignore: {
                elements: [...(Array.from(paid_chapters) ?? []), ...[cards_show_bg]],
                function: async (data) => {
                    data.preventDefault();
                    let check = cards_show.classList.contains('flex');
                                            //-------------------------------------------//
                        let paid_chapter = data.target.closest('#paid-chapter');
                        if (paid_chapter && paid_chapter.getAttribute("id") === "paid-chapter") {
                            let displayName = paid_chapter.getAttribute('title');
                            let photoURL_string = paid_chapter.getAttribute('p');
                            let photoURL =
                                `https://i2.wp.com/cdn.meowing.org/uploads/${photoURL_string}?w=80`;
                            let createdAt = paid_chapter.getAttribute('d');
                            let href = paid_chapter.getAttribute('href');
                            let coins = Number(paid_chapter.getAttribute('c')) ?? 1;
                            main_card_coins.innerHTML = coins;
                            if (purchase_button && href) purchase_button.setAttribute('href', href);
                            if (String(photoURL_string).length === 0) {
                                main_card_chapter_cover.remove()
                            } else {
                                main_card_chapter_cover.style.backgroundImage = `url(${photoURL})`;
                            }
                            main_card_chapter_name.innerHTML = displayName;
                            main_card_chapter_date.innerHTML = createdAt;
                        }
                        //-------------------------------------------//
                                        if (check) {
                        setTimeout(() => {
                            cards_show.classList.toggle('opacity-0')
                            cards_show.classList.toggle('opacity-100')
                        }, 50)
                        setTimeout(() => {
                            cards_show.classList.toggle('hidden')
                            cards_show.classList.toggle('flex')
                        }, 300)
                    } else {
                                                    //-------------------------------------------//
                            await (async () => {
                                let paid_mark = false;
                                for await (const card of cards) {
                                    if (!card.disabled && paid_mark !== true) {
                                        await selectCard(card);
                                        paid_mark = await setPurchase(card);
                                    }
                                }
                            })();
                            //-------------------------------------------//
                                                cards_show.classList.toggle('hidden')
                        cards_show.classList.toggle('flex')
                        // setTimeout(() => {
                        //     cards_show.classList.toggle('backdrop-blur-2xl')
                        //     cards_show.classList.toggle('backdrop-blur-0')
                        // }, 100)
                        setTimeout(() => {
                            cards_show.classList.toggle('opacity-0')
                            cards_show.classList.toggle('opacity-100')
                        }, 150)
                    }
                }
            },
            show: {
                element: cards_show_main,
                function: () => {}
            },
        });
    })();
</script>
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js/vcd15cbe7772f49c399c6a5babf22c1241717689176015" integrity="sha512-ZpsOmlRQV6y907TI0dKBHq9Md29nnaEIPlkf84rnaERnq6zvWvPUqr2ft8M1aS28oN72PdrCzSjY4U6VaAw1EQ==" data-cf-beacon="{&quot;version&quot;:&quot;2024.11.0&quot;,&quot;token&quot;:&quot;fb178e16ae2b46e097ab4e0fe84d12ed&quot;,&quot;r&quot;:1,&quot;server_timing&quot;:{&quot;name&quot;:{&quot;cfCacheStatus&quot;:true,&quot;cfEdge&quot;:true,&quot;cfExtPri&quot;:true,&quot;cfL4&quot;:true,&quot;cfOrigin&quot;:true,&quot;cfSpeedBrain&quot;:true},&quot;location_startswith&quot;:null}}" crossorigin="anonymous"></script>


<div aria-hidden="true" style="background-color: rgb(255, 255, 255); border: 1px solid rgb(215, 215, 215); box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 4px; border-radius: 4px; left: auto; top: -10000px; z-index: -2147483648; position: absolute; pointer-events: auto; transition: opacity 0.15s ease-out; opacity: 0; visibility: hidden;"><div style="position: relative; z-index: 1;"><iframe src="https://newassets.hcaptcha.com/captcha/v1/ee1a855b00b1ba8c779103181fc3ae671f71373f/static/hcaptcha.html#frame=challenge&amp;id=0zso7ye7uyi&amp;host=genzupdates.com&amp;sentry=true&amp;reportapi=https%3A%2F%2Faccounts.hcaptcha.com&amp;recaptchacompat=true&amp;custom=false&amp;hl=de&amp;tplinks=on&amp;andint=off&amp;pstissuer=https%3A%2F%2Fpst-issuer.hcaptcha.com&amp;sitekey=a9226c58-b3d8-4f9e-82d4-d92644dc8584&amp;theme=light&amp;origin=https%3A%2F%2Fgenzupdates.com" frameborder="0" scrolling="no" allow="private-state-token-issuance 'src'; private-state-token-redemption 'src'" title="Hauptinhalt der hCaptcha Challenge" style="border: 0px; z-index: 2000000000; position: relative;"></iframe></div><div style="width: 100%; height: 100%; position: fixed; pointer-events: none; top: 0px; left: 0px; z-index: 0; background-color: rgb(255, 255, 255); opacity: 0.05;"></div><div style="border-width: 11px; position: absolute; pointer-events: none; margin-top: -11px; z-index: 1; right: 100%;"><div style="border-width: 10px; border-style: solid; border-color: transparent rgb(255, 255, 255) transparent transparent; position: relative; top: 10px; z-index: 1;"></div><div style="border-width: 11px; border-style: solid; border-color: transparent rgb(215, 215, 215) transparent transparent; position: relative; top: -11px; z-index: 0;"></div></div></div></body></html>