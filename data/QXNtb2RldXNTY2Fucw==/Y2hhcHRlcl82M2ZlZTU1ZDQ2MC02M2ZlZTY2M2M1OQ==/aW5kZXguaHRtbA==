<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
        <title>The Villainess, Who Is No Better Than an Extra, Cross-Dresses to Be a Love Interest Chapter 8.1</title>
    <meta name="format-detection" content="telephone=no">
    <meta name="robots" content="follow, index, max-snippet:-1, max-video-preview:-1, max-image-preview:large">
    <link rel="icon" href="https://wsrv.nl/?url=cdn.meowing.org/uploads/FjEdGmBduJD&amp;w=20">
    <link rel="canonical" href="https://asmotoon.com/chapter/63fee55d460-63fee663c59/">
    <meta name="description" content="The Villainess, Who Is No Better Than an Extra, Cross-Dresses to Be a Love Interest Chapter 8.1 - 'That's right. I can become a potential love interest as well.'

A ray of inspiration strikes, in an otome game where men are treated favorably, the side-villainess starts a crossdressing revolution?!

The world is unfair. Just because I am an extra villainess, I'm doomed to always face the bad ending... If that's the case, can't I just dress up as a man and capture the heart of the game's heroine by becoming a potential love interest and live happily ever after?

The fiancé with the temper of a kid; the tsundere classmate; the puppy-like brother-in-law; and the beautiful icy-hearted prince, they are all my rivals. Just wait and watch, you handsome heartthrobs! I, Elizabeth Burton, will become a seductive knight who'd softly whisper love and capture the hearts of maidens with a mischievous wink!

A heartwarming school romance comedy, where a crossdressing lady aims to become a noble and a fabulous love interest, begins!">
    <meta name="keywords" content="Romance, Comdey, Reverse Harem, Crossdressing, Asmotoon, Asmotoons, Asmodeus, Asmodeus scans">
    <meta property="og:type" content="website">
    <meta property="og:title" content="The Villainess, Who Is No Better Than an Extra, Cross-Dresses to Be a Love Interest Chapter 8.1">
    <meta property="og:description" content="The Villainess, Who Is No Better Than an Extra, Cross-Dresses to Be a Love Interest Chapter 8.1 - 'That's right. I can become a potential love interest as well.'

A ray of inspiration strikes, in an otome game where men are treated favorably, the side-villainess starts a crossdressing revolution?!

The world is unfair. Just because I am an extra villainess, I'm doomed to always face the bad ending... If that's the case, can't I just dress up as a man and capture the heart of the game's heroine by becoming a potential love interest and live happily ever after?

The fiancé with the temper of a kid; the tsundere classmate; the puppy-like brother-in-law; and the beautiful icy-hearted prince, they are all my rivals. Just wait and watch, you handsome heartthrobs! I, Elizabeth Burton, will become a seductive knight who'd softly whisper love and capture the hearts of maidens with a mischievous wink!

A heartwarming school romance comedy, where a crossdressing lady aims to become a noble and a fabulous love interest, begins!">
    <meta property="og:url" content="http://asmotoon.com/chapter/63fee55d460-63fee663c59/">
    <meta property="og:site_name" content="Asmodeus Scans">
    <meta property="og:image:alt" content="The Villainess, Who Is No Better Than an Extra, Cross-Dresses to Be a Love Interest Chapter 8.1">
    <meta property="og:image" content="https://wsrv.nl/?url=cdn.meowing.org/uploads/dcT4KLrD0b6">
    <meta property="og:image:secure_url" content="https://wsrv.nl/?url=cdn.meowing.org/uploads/dcT4KLrD0b6">
    <meta property="twitter:title" content="The Villainess, Who Is No Better Than an Extra, Cross-Dresses to Be a Love Interest Chapter 8.1">
    <meta property="twitter:description" content="The Villainess, Who Is No Better Than an Extra, Cross-Dresses to Be a Love Interest Chapter 8.1 - 'That's right. I can become a potential love interest as well.'

A ray of inspiration strikes, in an otome game where men are treated favorably, the side-villainess starts a crossdressing revolution?!

The world is unfair. Just because I am an extra villainess, I'm doomed to always face the bad ending... If that's the case, can't I just dress up as a man and capture the heart of the game's heroine by becoming a potential love interest and live happily ever after?

The fiancé with the temper of a kid; the tsundere classmate; the puppy-like brother-in-law; and the beautiful icy-hearted prince, they are all my rivals. Just wait and watch, you handsome heartthrobs! I, Elizabeth Burton, will become a seductive knight who'd softly whisper love and capture the hearts of maidens with a mischievous wink!

A heartwarming school romance comedy, where a crossdressing lady aims to become a noble and a fabulous love interest, begins!">
    <meta property="twitter:image" content="https://wsrv.nl/?url=cdn.meowing.org/uploads/dcT4KLrD0b6">
        <meta property="twitter:card" content="summary_large_image">
        <script async="" src="https://count-server.sharethis.com/v2.0/get_counts?cb=window.__sharethis__.cb&amp;url=https%3A%2F%2Fasmotoon.com%2Fchapter%2F63fee55d460-63fee663c59%2F"></script><script async="" src="https://buttons-config.sharethis.com/js/65dc466cf44fb1001a4c6a85.js"></script><script type="application/ld+json">
    {
        "@context": "https://schema.org",
        "@type": "Article",
        "headline": "The Villainess, Who Is No Better Than an Extra, Cross-Dresses to Be a Love Interest Chapter 8.1",
        "description": "The Villainess, Who Is No Better Than an Extra, Cross-Dresses to Be a Love Interest Chapter 8.1 - 'That's right. I can become a potential love interest as well.'

A ray of inspiration strikes, in an otome game where men are treated favorably, the side-villainess starts a crossdressing revolution?!

The world is unfair. Just because I am an extra villainess, I'm doomed to always face the bad ending... If that's the case, can't I just dress up as a man and capture the heart of the game's heroine by becoming a potential love interest and live happily ever after?

The fiancé with the temper of a kid; the tsundere classmate; the puppy-like brother-in-law; and the beautiful icy-hearted prince, they are all my rivals. Just wait and watch, you handsome heartthrobs! I, Elizabeth Burton, will become a seductive knight who'd softly whisper love and capture the hearts of maidens with a mischievous wink!

A heartwarming school romance comedy, where a crossdressing lady aims to become a noble and a fabulous love interest, begins!",
        "url": "http://asmotoon.com/chapter/63fee55d460-63fee663c59/",
        "datePublished": "2025-09-29T10:50:10+00:00",
        "dateModified": "2025-09-29T10:52:07+00:00",
        "image": "https://wsrv.nl/?url=cdn.meowing.org/uploads/dcT4KLrD0b6",
        "author": {
            "@type": "Person",
            "name": "Asmodeus Scans",
            "url": "http://asmotoon.com/chapter/63fee55d460-63fee663c59/"
        },
        "publisher": {
            "@type": "Organization",
            "name": "Asmodeus Scans",
            "logo": {
                "@type": "ImageObject",
                "url": "https://wsrv.nl/?url=cdn.meowing.org/uploads/FjEdGmBduJD&w=20"
            }
        },
        "mainEntityOfPage": {
            "@type": "WebPage",
            "@id": "http://asmotoon.com/chapter/63fee55d460-63fee663c59/"
        }
    }
    </script>
    <!-- <script src="https://unpkg.com/htmx.org@1.9.3/dist/htmx.min.js" async></script> -->
    <!-- <script src="https://unpkg.com/htmx.org/dist/ext/loading-states.js" defer></script> -->
        <script async="" src="https://www.googletagmanager.com/gtag/js?id=G-WBZZWKCQVZ"></script>
    <script>
    window.dataLayer = window.dataLayer || [];

    function gtag2() {
        dataLayer.push(arguments);
    }
    gtag2('js', new Date());

    gtag2('config', 'G-WBZZWKCQVZ');
    </script>
    <script src="https://cdn.jsdelivr.net/npm/store2@2.14.2/dist/store2.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/vanilla-lazyload@17.8.4/dist/lazyload.min.js"></script>
            <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/simplebar@latest/dist/simplebar.css">
    <script src="https://cdn.jsdelivr.net/npm/simplebar@latest/dist/simplebar.min.js"></script>
            <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.4/dist/css/splide.min.css">
    <script src="https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.4/dist/js/splide.min.js"></script>
        <link rel="stylesheet" href="https://f.feedmas.com/fw.css">
    
    <script src="/assets/scripts/index.js?clear=v3.8"></script>
    <script src="https://cdn.jsdelivr.net/npm/cleave.js@1.6.0"></script>
    <link rel="stylesheet" href="/assets/styles/output.css?clear=v5.2">

        <style>
    @import url('https://fonts.googleapis.com/css2?family=Comic+Neue:ital,wght@0,300;0,400;0,700;1,300;1,400;1,700&family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=Lora:ital,wght@0,400..700;1,400..700&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Roboto+Mono:ital,wght@0,100..700;1,100..700&display=swap');
    </style>
            <style>
    :root {
        --theme_color: #1f1e24;
        --header: var(--theme_color);
        --footer: rgb(255 255 255 / 0.1);
        --button: #09090b;
    }

    iframe:not([src]) {
        display: none !important;
    }

    .fw .fw-z-10 {
        z-index: 200 !important;
    }
    </style>
    <style>
    @import url("https://fonts.googleapis.com/css2?family=Poppins:wght@100;200;300;400;500;600;700;800;900&display=swap");
    @import url("https://fonts.googleapis.com/css2?family=Bebas+Neue&family=Croissant+One&family=Young+Serif&display=swap");
    @import url('https://fonts.googleapis.com/css2?family=Bree+Serif&display=swap');
    @import url('https://fonts.googleapis.com/css2?family=Courier+Prime:ital,wght@0,400;0,700;1,400;1,700&display=swap');
    </style>
                <script async="">
    (async function() {
        let library = store.get('library');
        if (library) {
            let series_list = [];
            for (const id in library) {
                series_list.push(id);
            }

            if (series_list.length > 0) {
                let to_json_string = JSON.stringify(series_list);
                try {
                    // UNDER WORK
                    // let response = await fetch('/sync?series=' + encodeURIComponent(to_json_string));
                    // let {
                    //     success
                    // } = await response.json();
                    // if (success) {
                    //     store.remove('library');
                    // }
                } catch (error) {
                    console.error('Failed to sync series:', error);
                }
            }
        }
    })();
    </script>


<style>.\[\&_\.gdprAdTransparencyCogWheelButton\]\:\!pjra-z-\[5\],
AD-SLOT,
DFP-AD,
[class^="adDisplay-module"],
[class^="amp-ad-"],
[data-ad-cls],
[data-adbridg-ad-class],
[data-adshim],
[data-asg-ins],
[data-block-type="ad"],
[data-cl-spot-id],
[data-css-class="dfp-inarticle"],
[data-d-ad-id],
[data-desktop-ad-id],
[data-dynamic-ads],
[data-ez-name],
[data-freestar-ad][id],
[data-id^="div-gpt-ad"],
[data-identity="adhesive-ad"],
[data-m-ad-id],
[data-mobile-ad-id],
[data-rc-widget],
[data-role="tile-ads-module"],
[data-template-type="nativead"],
[data-testid="adBanner-wrapper"],
[data-testid="ad_testID"],
[data-testid="prism-ad-wrapper"],
[data-testid^="section-AdRowBillboard"],
[data-type="ad-vertical"],
[data-wpas-zoneid],
[href$="/sexdating.php"],
[id^="ad-wrap-"],
[id^="ad_sky"],
[id^="ad_slider"],
[id^="section-ad-banner"],
[onclick^="location.href='https://1337x.vpnonly.site/"],
a-ad,
a[data-href^="http://ads.trafficjunky.net/"],
a[data-url^="https://vulpix.bet/?ref="],
a[onclick^="window.location.replace('https://random-affiliate.atimaze.com/"],
a[style="width:100%;height:100%;z-index:10000000000000000;position:absolute;top:0;left:0;"],
ad-shield-ads,
ad-slot,
app-ad,
app-advertisement,
app-large-ad,
aside[id^="adrotate_widgets-"],
atf-ad-slot,
bottomadblock,
display-ad-component,
display-ads,
div[class$="-adlabel"],
div[class^="Adstyled__AdWrapper-"],
div[data-ad-placeholder],
div[data-ad-region],
div[data-ad-wrapper],
div[data-adname],
div[data-adunit-path],
div[data-adunit],
div[data-adzone],
div[data-alias="300x250 Ad 1"],
div[data-alias="300x250 Ad 2"],
div[data-contentexchange-widget],
div[data-dfp-id],
div[data-id-advertdfpconf],
div[id^="ad-div-"],
div[id^="ad-position-"],
div[id^="adngin-"],
div[id^="adrotate_widgets-"],
div[id^="adspot-"],
div[id^="crt-"][style],
div[id^="div-ads-"],
div[id^="google_dfp_"],
div[id^="gpt_ad_"],
div[id^="lazyad-"],
div[id^="optidigital-adslot"],
div[id^="rc-widget-"],
div[id^="st"][style^="z-index: 999999999;"],
div[id^="sticky_ad_"],
div[id^="vuukle-ad-"],
div[ow-ad-unit-wrapper],
gpt-ad,
guj-ad,
hl-adsense,
img[src^="https://images.purevpnaffiliates.com"],
img[src^="https://s-img.adskeeper.com/"],
ps-connatix-module,
span[data-ez-ph-id],
span[id^="ezoic-pub-ad-placeholder-"],
topadblock,
zeus-ad,
broadstreet-zone-container,
iframe[scrolling="no"][sandbox*="allow-popups allow-modals"][style^="width: 100%; height: 100%; border: none;"],
[class^="tile-picker__CitrusBannerContainer-sc-"],
citrus-ad-wrapper,
div[id*="MarketGid"],
[onclick*="content.ad/"],
AMP-AD,
amp-ad,
amp-ad-custom,
amp-connatix-player,
amp-fx-flying-carpet,
a[data-oburl^="https://paid.outbrain.com/network/redir?"],
a[data-redirect^="https://paid.outbrain.com/network/redir?"],
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"] + .ob_source,
[data-taboola-options],
[data-testid="commercial-label-taboola"],
[data-testid^="taboola-"],
amp-embed[type="taboola"],
div[id^="taboola-stream-"],
div[id^="zergnet-widget"],
html[lang] > body.ishome > div.adult + main.main,
html[lang] > body:not([class]):not([id]):not([style]) > div.background-container > div.container > div.captcha-box,
html[lang] > body.startnew > div#sections > section#section_uname,
html[lang] > body:not([style]) > div.captchaBody,
html[lang] > body#body > * > div.cv-xwrapper > div.cvc > div.cv-inner,
html[lang] > body#body > * > div.cvh.BlockClicksActivityBusy,
html#html[sti][vic][lang] > body#allbody,
html > body > div.container.m-p > #checkbox-window.checkbox-window,
html[lang] > body:not([class]):not([id]):not([style]) > div.container > div.recaptcha-box,
body > .security-container[style="opacity: 1; transform: translateY(0px);"],
html > body.hold-transition.theme-primary.bg-img[style^="background-image"][style*="wallpaperaccess.com"][style*="background-repeat"][style*="background-size"],
html > body > div.container > form#unsubscribe-form[onsubmit="submitUnsubscribeForm(event)"],
html > body > div.content > dl > dd.dd1 > div.min_sider > form#form1[action="unsubscribe.php"],
html > body.body > div.container > div.content > form > table.optoutForm,
div[id][style^="position: fixed; inset: 0px; z-index: 2147483647; background: black"][style*="opacity: 0.01"],
div[class$="player-promo-col"],
div#spot-holder.spot-holder[style="display: block;"],
a[dontfo=""][style$="position: absolute; z-index: 2147483647;"],
[data-ad-module]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-width]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-adblockkey]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(html):not(.adsbygoogle),
[data-advadstrackid]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-manager-id]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
div[style^="z-index: 999999; background-image: url(\"data:image/gif;base64,"][style$="position: absolute;"],
a[onclick="openAuc();"],
div[style="position: fixed; display: block; width: 100%; height: 100%; inset: 0px; background-color: rgba(0, 0, 0, 0); z-index: 300000;"],
div[style^="position:fixed;inset:0px;z-index:2147483647;background:black;opacity:0.01"],
div[style^="position: fixed; inset: 0px; z-index: 2147483647; background: black; opacity: 0.01"],
iframe.lazyloaded[data-src^="https://rcm-fe.amazon-adsystem.com/"],
#player div[style$="cursor: pointer; position: absolute; width: 100%; height: 100%; padding: 1rem; z-index: 2147483647;"],
html[lang][style^="--main-bg-color"] > body:not([class]):not([id]) > div#container[style="visibility: visible;"] > div#banner[style="opacity:0"] ~ main:not([class]):not([id]) > div#message,
[onclick*="postlnk.com"],
[data-lnguri*="vipbox"],
[class^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]) { display: none !important; }

[data-ad-name],
[data-revive-zoneid],
[name^="google_ads_iframe"],
div[aria-label="Ads"],
div[data-ad-targeting],
div[id^="ad_position_"],
div[id^="dfp-ad-"],
div[id^="ezoic-pub-ad-"],
ins.adsbygoogle[data-ad-client],
ins.adsbygoogle[data-ad-slot],
[class^="s2nPlayer"],
div[id*="ScriptRoot"],
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"],
div[id^="div-gpt-"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]):not([style="pointer-events: none; height: 1px; width: 0px; opacity: 0; visibility: hidden; position: fixed; bottom: 0px;"]),
[id^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]):not([style="pointer-events: none; height: 1px; width: 0px; opacity: 0; visibility: hidden; position: fixed; bottom: 0px;"]),
div[style^="height:    250px; width:    300px;"],
div[style^="width:    160px; height:    600px; margin: 0px auto; min-width: 160px; min-height: 600px;"],
div[style^="width:    300px; height:    250px;"],
html[class^="img_"][amp4ads=""][i-amphtml-layout=""][i-amphtml-no-boilerplate=""][amp-version="2502032353000"],
html[class^="img_"][amp4ads=""][i-amphtml-layout=""][i-amphtml-no-boilerplate=""][amp-version="2507172035000"],
html[class^="img_"][amp4ads=""][i-amphtml-layout=""][i-amphtml-no-boilerplate=""][amp-version="2509031727000"],
img[height="   250"][width="   300"],
img[height="   90"][width="   728"],
ins[style$="height:    90px; width:    728px;"],
*:not(body) > a[href^="https://content-loader.com/"],
*:not(body) > a[href^="https://html-load.com/"],
*:not(body) > a[href^="https://07c225f3.online/"] { display: none !important; }</style><style>.grid > .container > #aside-promotion,
.sharethis-inline-share-buttons.st-hidden,
[href*="uselnk.com/"],
[href*="postlnk.com"],
[href*="passtechusa.com"] { display: none !important; }</style><style type="text/css">#st-1 {
  font-family: "Helvetica Neue", Verdana, Helvetica, Arial, sans-serif;;
  direction: ltr;
  display: block;
  opacity: 1;
  text-align: left;
  z-index: 94034;
}
#st-1.st-animated {
  -moz-transition: o 0.2s ease-in, p 0.2s ease-in, a 0.2s ease-in, c 0.2s ease-in, i 0.2s ease-in, t 0.2s ease-in, y 0.2s ease-in; -ms-transition: o 0.2s ease-in, p 0.2s ease-in, a 0.2s ease-in, c 0.2s ease-in, i 0.2s ease-in, t 0.2s ease-in, y 0.2s ease-in; -o-transition: o 0.2s ease-in, p 0.2s ease-in, a 0.2s ease-in, c 0.2s ease-in, i 0.2s ease-in, t 0.2s ease-in, y 0.2s ease-in; -webkit-transition: o 0.2s ease-in, p 0.2s ease-in, a 0.2s ease-in, c 0.2s ease-in, i 0.2s ease-in, t 0.2s ease-in, y 0.2s ease-in; transition: o 0.2s ease-in, p 0.2s ease-in, a 0.2s ease-in, c 0.2s ease-in, i 0.2s ease-in, t 0.2s ease-in, y 0.2s ease-in;
}
#st-1.st-hidden {
  opacity: 0;
}

#st-1.st-preview {
  display: none!important;
  opacity: 0!important;
}
#st-1.st-hide {
  display: none;
}
#st-1 .st-btn {
  -moz-box-sizing: border-box;
-webkit-box-sizing: border-box;
box-sizing: border-box;
  -moz-transition: opacity 0.2s ease-in, top 0.2s ease-in; -ms-transition: opacity 0.2s ease-in, top 0.2s ease-in; -o-transition: opacity 0.2s ease-in, top 0.2s ease-in; -webkit-transition: opacity 0.2s ease-in, top 0.2s ease-in; transition: opacity 0.2s ease-in, top 0.2s ease-in;
  -moz-border-radius: 20px;
-webkit-border-radius: 20px;
border-radius: 20px;
  border: none;
  cursor: pointer;
  display: inline-block;
  font-size: 12px;
  height: 40px;
  line-height: 40px;
  margin-right: 8px;
  padding: 0 10px;
  position: relative;
  text-align: center;
  top: 0;
  vertical-align: top;
  white-space: nowrap;
}
#st-1 .st-btn:last-child {
  margin-right: 0;
}
#st-1 .st-btn > svg {
  height: 20px;
  width: 20px;
  position: relative;
  top: 10px;
  vertical-align: top;
}
#st-1 .st-btn > img {
  display: inline-block;
  height: 20px;
  width: 20px;
  position: relative;
  top: 10px;
  vertical-align: top;
}
#st-1 .st-btn > span {
  -moz-transition: all 0.2s ease-in; -ms-transition: all 0.2s ease-in; -o-transition: all 0.2s ease-in; -webkit-transition: all 0.2s ease-in; transition: all 0.2s ease-in;
  color: #fff;
  display: inline-block;
  font-weight: 500;
  letter-spacing: 0.5px;
  min-width: 67px;
  opacity: 1;
  padding: 0 6px;
  position: relative;
  vertical-align: top;
}
#st-1.st-has-labels .st-btn {
  min-width: 135px;
}
#st-1.st-has-labels .st-btn.st-remove-label {
  min-width: 50px;
}
#st-1.st-has-labels .st-btn.st-remove-label > span {
  display: none;
}
#st-1.st-has-labels .st-btn.st-hide-label > span {
  display: none;
}
#st-1 .st-total {
  color: #555;
  display: inline-block;
  font-weight: 500;
  line-height: 15px;
  margin-right: 0;
  max-width: 80px;
  padding: 4px 8px;
  text-align: center;
}
#st-1 .st-total.st-hidden {
  display: none;
}
#st-1 .st-total > span {
  font-size: 20px;
  line-height: 22px;
  display: block;
  padding: 0;
}
#st-1 .st-total > span.st-shares {
  font-size: 12px;
  line-height: 12px;
}
#st-1.st-justified {
  display: flex;
  text-align: center;
}
#st-1.st-justified .st-btn {
  -moz-flex: 1;
-ms-flex: 1;
-webkit-flex: 1;
flex: 1;
}#st-1 .st-btn:hover {
  opacity: .8;
  top: -4px;
}#st-1 .st-btn[data-network='sharethis'] {
  background-color: #6366f1
}
#st-1 .st-btn[data-network='sharethis'] img {
  filter: invert(0%) sepia(14%) saturate(7500%) hue-rotate(224deg) brightness(121%) contrast(114%);
}
#st-1 .st-btn[data-network='sharethis'] > span {
  color: #ffffff
}#st-1 .st-btn[data-network='snapchat'] > span {
  color: #333};
}</style></head>
<body style="--width: 30%; --font_size_2: 16px; --line_height_2: 24px; --font_family: Poppins;" class="bg-[--theme_color] text-white select-none sm:pb-20 pb-16" hx-ext="loading-states">
    <!-- for sticky ad -->
                    <header id="main_header" class="grid w-full bg-[--header] border-b border-white/10 transition-all duration-300 sticky top-0 z-[161] all sm:relative">
    <div class="grid">
        <div class="flex justify-between items-center sm:gap-10 gap-[3vw] w-full 2xl:max-w-[100rem] max-w-6xl mx-auto sm:p-4 sm:py-4 px-[4vw] py-[4vw]">
            <div class="flex sm:justify-start justify-between items-center sm:gap-10 gap-[4vw]">
                <div class="flex sm:gap-2 gap-[3vw] justify-center items-center w-fit">
                    <a style="background-image: url(https://wsrv.nl/?url=cdn.meowing.org/uploads/FjEdGmBduJD&amp;w=44);" class="flex w-fit justify-center items-center h-11 aspect-square gap-3 border border-white/10 bg-white/10 bg-center bg-[size:calc(100%+2px)] bg-no-repeat rounded-full" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" href="/">

                    </a>
                </div>
                <div id="menu" class="sm:flex z-[50] sm:p-0 sm:bg-transparent sm:w-fit p-[4vw] w-full sm:border-x-0 sm:border-b-0 border-x border-b border-white/10 bg-[--header] hidden sm:rounded-none rounded-b-lg sm:relative absolute sm:top-0 top-[--top] left-0 gap-8 sm:justify-center sm:items-center text-base">
                                            <a href="/" alt="Home" title="Home" class="hover:text-white/80 text-center">
                            Home                        </a>
                                            <a href="/series/" alt="Series" title="Series" class="hover:text-white/80 text-center">
                            Series                        </a>
                                            <a href="/latest/" alt="Latest" title="Latest" class="hover:text-white/80 text-center">
                            Latest                        </a>
                                            <a href="/library/" alt="Library" title="Library" class="hover:text-white/80 text-center">
                            Library                        </a>
                    
                    <button alt="Feedback" title="Feedback" class="hover:text-white/80">
                        Feedback                    </button>
                </div>

            </div>
            <div class="flex sm:w-fit w-full sm:gap-3 gap-[3vw]">
                <div class="grid rounded-lg overflow-hidden max-w-60">
                    <form action="/series" method="get" class="sm:px-5 px-[4vw] flex w-full justify-center items-center h-11 gap-3 bg-white/10 transition-all rounded-full">
                        <img class="w-6" src="https://api.iconify.design/ph:magnifying-glass-bold.svg?color=white">
                        <input id="searchInput_page" type="text" name="q" placeholder="Search Series" class="placeholder:font-light placeholder:text-white/50 text-base w-full bg-transparent focus-within:outline-none">
                    </form>
                </div>
                                                                                                                                    <button id="open_login_panel_button" class="sm:px-5 flex sm:w-fit sm:aspect-auto aspect-[1/1] a  justify-center items-center h-11 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full z-0">
            <img class="w-6" src="https://api.iconify.design/majesticons:login-half-circle.svg?color=white">
            <div class="font-medium sm:block hidden ">Sign in</div>
        </button>
                <div style="height: 100vh" id="login_panel_main" class="hidden justify-center items-center w-full h-full fixed top-0 left-0 z-[100] overflow-hidden">
    <div id="login_panel_background" class="w-full h-full absolute top-0 left-0 bg-[--theme_color] opacity-80">

    </div>
    
        <div id="login_panel" style="max-width: 40rem" class="grid bg-[--theme_color]  w-full sm:h-fit h-full relative sm:rounded-xl overflow-hidden">
        <div class="sm:border border-white/10 sm:rounded-[0.76rem] h-full w-full flex flex-col justify-center items-center">
                                                                                                                                    <div class="sm:h-fit h-[100vh] w-full grid relative overflow-hidden">
                            <div class="w-full flex justify-center items-center bg-white/10 overflow-hidden sm:h-80 h-full">
                                <div class="grid gap-2 grid-cols-4 p-2 w-full">

                                                                            <div class="grid gap-2 grid-slide-up">
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/ILnXdLXsmvr&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/_Y-wKJmOpur&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/20MmtcDyIUD&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/CKNSji1nBzm&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/e8J23zNlkSP&amp;w=300)">
                                                </div>
                                                                                    </div>
                                                                            <div class="grid gap-2 grid-slide-down">
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/D7whnfq7rDw&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/aT5jw7AooSr&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/6EW78sBT3eK&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/x5nJJPAWeGJ&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/8wMzs9-7re1&amp;w=300)">
                                                </div>
                                                                                    </div>
                                                                            <div class="grid gap-2 grid-slide-up">
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/8orKBVFcayb&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/sWSePGvbuld&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/QKMuCleRTFP&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/GDRCc-tgulX&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/Hv3RgsPXXUL&amp;w=300)">
                                                </div>
                                                                                    </div>
                                                                            <div class="grid gap-2 grid-slide-down">
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/FofhDyB-rJN&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/4cYL6XWimwq&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/9YSwlKgkj2t&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/3p50ZzspX4t&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/ni6zUOnoutG&amp;w=300)">
                                                </div>
                                                                                    </div>
                                                                    </div>
                            </div>
                            <div class="w-full absolute top-0 left-0 h-full bg-gradient-to-t from-[--theme_color] to-transparent">

                            </div>
                        </div>
                        <style>
                            .grid-slide-down {
                                transform: translateY(55px);
                            }
                        </style>

                                                    <div class="flex sm:justify-center items-center flex-col gap-6 w-full pt-0 p-8 sm:h-fit h-full">
                    <div class="gap-2 grid">
                        <div class="font-semibold text-2xl w-fit">
                            Sign in
                        </div>
                        <div class="">
                            Quick and easy – connect with your social account and get started in one click.
                        </div>
                    </div>
                    <div class="grid w-full">
                        <div class="grid md:grid-cols-2 gap-4 w-full">
                            <a href="/auth?type=discord" class="sm:px-5 px-[4vw] flex  w-full justify-center items-center h-11 gap-3 bg-[#5865F2] hover:bg-opacity-70 transition-all cursor-pointer rounded-full">
                                <img class="w-6" src="https://api.iconify.design/cbi:discord.svg?color=white">
                                <div class="font-medium">Continue with Discord</div>
                            </a>
                            <a href="/auth?type=google" class="sm:px-5 px-[4vw] flex  w-full justify-center items-center h-11 gap-3 text-black bg-white hover:bg-opacity-70 transition-all cursor-pointer rounded-full">
                                <img class="w-6" src="https://api.iconify.design/logos:google-icon.svg?color=white">
                                <div class="font-bold">Continue with Google</div>
                            </a>
                        </div>
                    </div>
                </div>
                                    <button id="close_login_panel_button" class="absolute top-0 right-0 m-4 flex w-fit aspect-square justify-center items-center h-11 gap-3 bg-[--theme_color] transition-all cursor-pointer rounded-full">
                        <img class="w-6" src="https://api.iconify.design/material-symbols:close-rounded.svg?color=white">
                    </button>
                                    </div>
    </div>
</div>                                </div>
        </div>
    </div>
    <script>
        (async () => {
            let header = document.querySelector('header');
            let profile_menu = header.querySelector('#profile_menu');
            let menu_button = header.querySelector('#menu_button');
            let auth_elements = header.querySelector('#auth_elements');
            profile_menu.style.setProperty('--top',
                (window.innerWidth < 640 ? header.offsetHeight - 1 :
                    header.offsetHeight) + 'px'
            );
            // if (window.innerWidth < 640) {
            //     if (auth_elements && menu) {
            //         if (menu.firstChild) {
            //             menu.insertBefore(auth_elements, menu.firstChild);
            //         } else {
            //             menu.appendChild(auth_elements);
            //         }
            //     }
            // }
            // runEl({
            //     show: {
            //         element: menu,
            //         function: () => {}
            //     },
            //     hide: {
            //         function: (data) => {
            //             menu.classList.remove('grid');
            //             menu.classList.add('hidden');
            //         }
            //     },
            //     ignore: {
            //         elements: [
            //             menu_button
            //         ],
            //         function: (data) => {
            //             menu.classList.toggle('grid');
            //             menu.classList.toggle('hidden');
            //         }
            //     }
            // });
        })();
    </script>
</header>
    <!-- sm:left-[calc(50%-15rem)] -->
    <!-- for sticky ad -->
            <header id="chapter_header" class="grid transition-all sm:border-y border-t sm:sticky top-[--topSet] left-0 z-[49] bg-[--header] border-white/5 sm:border-t-0">
            <div class="flex text-center justify-center items-center w-full 2xl:max-w-[100rem] max-w-6xl mx-auto sm:p-4 p-[4vw]">
                <h1>
                    <span class="flex flex-wrap sm:gap-1.5 gap-[1.5vw] sm:justify-center items-center">
                        <span>
                            <a href="/series/63fee55d460/" alt="The Villainess, Who Is No Better Than an Extra, Cross-Dresses to Be a Love Interest" title="The Villainess, Who Is No Better Than an Extra, Cross-Dresses to Be a Love Interest" class="opacity-100 hover:opacity-50 transition-all">
                                The Villainess, Who Is No Better Than an Extra, Cross-Dresses to Be a Love Interest                            </a> - Chapter 8.1                        </span>
                    </span>
                </h1>
            </div>
        </header>
        <script>
            (function() {
                let header = document.getElementById('main_header');
                let chapter_header = document.getElementById('chapter_header');
                if (window.innerWidth < 640) {
                    chapter_header.remove();
                    header.appendChild(chapter_header);
                } else {
                                            header.classList.add('sm:relative');
                        chapter_header.classList.remove('sm:mt-4');
                        chapter_header.classList.add('sm:border-t-0');
                                    }
            })();
        </script>
        <div class="grid sm:gap-4 gap-[4vw] w-full 2xl:max-w-[100rem] max-w-6xl mx-auto sm:p-4 p-[4vw]">
                                                                    <div id="pages_panel" class="grid sm:gap-4 gap-[4vw] relative">
                
                    
                    
                                                <div class="flex justify-center items-center sm:w-full sm:mx-0 md:p-0 p-4 md:mb-0 -mb-[4vw] py-0 -mx-[4vw] w-[calc(100%+8vw)] overflow-hidden sm:rounded-lg relative">
                            <div class="relative max-w-[30rem] w-full">
                                <div class="lg:flex grid justify-between lg:gap-6 gap-4 bg-white/10 p-4 rounded-2xl">
                                    <div class="flex lg:gap-4 gap-3 justify-center items-center">
                                        <div class="grid gap-1">
                                            <div class="font-medium text-white">Attention!!!</div>
                                            <div class="text-sm">
                                                We've rolled out our new manga reader, which includes both single-page and two-page
                                                viewing modes. Click below to switch between readers at any time.
                                            </div>
                                            <button id="toggle-manga-reader" class="pl-4 mt-2 pr-6 flex justify-center items-center h-11 gap-2.5 bg-white/10 hover:bg-white/20 transition-all rounded-full w-full">
                                                <img class="w-6 h-6" src="https://api.iconify.design/mdi:book-open-page-variant.svg?color=white" alt="Manga Reader">
                                                <div class="text-base font-medium">
                                                    Switch to Manga Reader                                                </div>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <script>
                            (function() {
                                document.getElementById('toggle-manga-reader')?.addEventListener('click', function() {
                                    const current = getCookie('manga_reader');
                                    if (current === 'true') {
                                        setCookie('manga_reader', 'false', 365);
                                    } else {
                                        setCookie('manga_reader', 'true', 365);
                                    }
                                    location.reload();
                                });
                            })();
                        </script>
                    
                                            <div id="pages" show_bar_button="mobile" class="grid sm:max-w-[--width] relative overflow-hidden sm:w-full sm:mx-auto sm:rounded-lg sm:overflow-hidden -mx-[4vw] sm:cursor-[url(https://api.iconify.design/uim:arrow-circle-down.svg?color=red&amp;width=40),_pointer]">
                                                                                                <img src="https://cdn.meowing.org/uploads/dcT4KLrD0b6" count="0" uid="dcT4KLrD0b6" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-loading="false" data-ll-status="loaded">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/mhzYKuIC2qj" count="1" uid="mhzYKuIC2qj" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-loading="false" data-ll-status="loaded">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/frQ4vhOAVeU" count="2" uid="frQ4vhOAVeU" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-loading="false" data-ll-status="loaded">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/pHimNjQ9CW4" count="3" uid="pHimNjQ9CW4" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-loading="false" data-ll-status="loaded">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/J0fDes845Pg" count="4" uid="J0fDes845Pg" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-loading="false" data-ll-status="loaded">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/3zb3jtLQiwQ" count="5" uid="3zb3jtLQiwQ" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/-LUXSnGVbSp" count="6" uid="-LUXSnGVbSp" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/CTpezH3_eio" count="7" uid="CTpezH3_eio" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/MZFOZdZjrxU" count="8" uid="MZFOZdZjrxU" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/LAsxGRc7IFk" count="9" uid="LAsxGRc7IFk" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/EhUQQtohLht" count="10" uid="EhUQQtohLht" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/hZUMgcBmsrk" count="11" uid="hZUMgcBmsrk" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/RRW0VlieRhX" count="12" uid="RRW0VlieRhX" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/c0uCpzv39aN" count="13" uid="c0uCpzv39aN" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/_-NpC20oSZA" count="14" uid="_-NpC20oSZA" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/YI7dxgxljlr" count="15" uid="YI7dxgxljlr" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                                                                <img src="https://cdn.meowing.org/uploads/sKtGL22CzdI" count="16" uid="sKtGL22CzdI" class="lazy w-full myImage entered loaded" alt="Loading Page..." loading="lazy" data-ll-status="loaded" data-loading="false">
                                                                                        <script>
                                function loadImage(imgElement, count) {
                                    count++;
                                    const uid = imgElement.getAttribute('uid');
                                    let realUrl = `https://cdn.meowing.org/uploads/${uid}`;

                                    // Check if the image is already loading
                                    if (imgElement.dataset.loading === "true") {
                                        return; // Exit if already loading
                                    }
                                    // Set loading state
                                    imgElement.dataset.loading = "true";

                                    // Set the src to the real URL to start loading
                                    imgElement.src = realUrl;

                                    // Handle the load event
                                    imgElement.onload = function() {
                                        imgElement.dataset.loading = "false";
                                        const nextImg = getNextImage(imgElement);
                                        if (nextImg) {
                                            loadImage(nextImg, 1);
                                        }
                                    };

                                    imgElement.onerror = function() {
                                        imgElement.dataset.loading = "false";
                                        setTimeout(() => {
                                            loadImage(imgElement, count);
                                        }, 2000); // 10 
                                    };
                                }

                                function getNextImage(currentImg) {
                                    const images = document.querySelectorAll('.myImage');
                                    for (let i = 0; i < images.length; i++) {
                                        if (images[i] === currentImg && i + 1 < images.length) {
                                            return images[i + 1];
                                        }
                                    }
                                    return null; // No next image
                                }

                                document.addEventListener('DOMContentLoaded', function() {
                                    const images = document.querySelectorAll('.myImage');
                                    if (images.length > 0) {
                                        // Start loading the first image immediately
                                        loadImage(images[0], 1);
                                    }
                                });
                                const images = document.querySelectorAll('.myImage');
                                const observer = new IntersectionObserver((entries, observer) => {
                                    entries.forEach(entry => {
                                        if (entry.isIntersecting) {
                                            loadImage(entry.target, 1);
                                            observer.unobserve(entry
                                                .target); // Stop observing after loading
                                        }
                                    });
                                });

                                images.forEach(img => {
                                    observer.observe(img);
                                });
                            </script>
                        </div>
                        <script>
                            (function() {
                                let zoom_count = 3;
                                                                    zoom_count = store.get('zoom-0.2') ?? 3;
                                                                document.body.style.setProperty('--width', zoom_count * 10 + 'px');
                            })();
                        </script>
                                                    <script>
                                (function() {
                                    let scrollDownButton = document.getElementById('pages');
                                    scrollDownButton.addEventListener("click", () => {
                                        if (window.innerWidth > 640) {
                                            scrollToDown()
                                        }
                                    });
                                    const scrollToDown = () => {
                                        const currentY = window.scrollY;
                                        const destinationY = currentY + window
                                            .innerHeight; // Adjust this value to control the scroll amount

                                        const scroll = () => {
                                            const currentTime = Date.now();
                                            const timeElapsed = currentTime - startTime;
                                            if (timeElapsed < duration) {
                                                const nextY = easeInOutQuad(timeElapsed, currentY, destinationY - currentY,
                                                    duration);
                                                window.scrollTo(0, nextY);
                                                requestAnimationFrame(scroll);
                                            } else {
                                                window.scrollTo(0, destinationY);
                                            }
                                        };

                                        const duration = 1000;
                                        const startTime = Date.now();
                                        requestAnimationFrame(scroll);
                                    };
                                    const easeInOutQuad = (t, b, c, d) => {
                                        t /= d / 2;
                                        if (t < 1) return c / 2 * t * t + b;
                                        t--;
                                        return -c / 2 * (t * (t - 2) - 1) + b;
                                    };
                                })();
                            </script>
                                            

                            </div>
                                                                <div class="flex flex-col justify-center items-center gap-4 mt-8 mb-4 sm:max-w-[--width] w-full mx-auto">
                        <div class="font-medium text-lg">
                            Next Chapter                        </div>
                                                    <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/63fee55d460-63fee6db228/" alt="Chapter 8.2" title="Chapter 8.2" p="7nOKVe271VU" d="6 days ago" c="100">
    <div class="grid sm:gap-2 gap-[2vw]">
                    <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[1/1] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/7nOKVe271VU&amp;w=250)">

                </div>

                                                            <div class="flex justify-center items-center w-full h-full absolute top-0 left-0 bg-black/70 ">
                            <img src="https://api.iconify.design/material-symbols:lock.svg?color=white" class="w-6">
                        </div>
                                        <div class="flex justify-center items-center w-full h-full absolute top-0 left-0">
                        <div class="flex items-center justify-start gap-1.5 absolute bottom-0 right-0 m-2">
                                                                                    <div class="flex gap-1 justify-center items-center w-fit bg-yellow-200 text-yellow-600 border-yellow-200 pl-1 pr-1.5 h-5 bg-opacity-90 rounded-full">
        <div class="w-3.5 h-fit">
                <img src="/assets/images/Coin.svg?clear=1" class="w-full" alt="Coin">
            </div>        <div class="text-xs uppercase">
                    <span class="font-bold">100</span>
            </div>
</div>                                                    </div>
                    </div>
                            </div>
                <div class="grid h-fit px-1">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 8.2                    </span>
                                    </span>
                <div class="flex justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        6 days ago                    </div>
                </div>
                    </div>
    </div>
    </a>                                            </div>
                                        <div show_bar_button="pc" class="hidden w-fit h-10 sticky bg-blue-500 sm:hover:opacity-100 sm:opacity-80 bottom-4 right-4 z-10 mx-auto rounded-full overflow-hidden cursor-pointer transition-all">
                <div class="w-full h-full rounded-xl border border-white/10 px-4 flex justify-center items-center">
                    <!-- <img class="w-6 mt-1" src="https://api.iconify.design/material-symbols:filter-list-rounded.svg?color=white"> -->
                    <div>Options</div>
                </div>
            </div>

                                                                                                <div class="grid lg:grid-cols-3 md:grid-cols-2 sm:gap-4 gap-2">
    <div class="sm:flex  hidden justify-between bg-gradient-to-b from-white/10 to-transparent gap-6 p-4 rounded-t-2xl overflow-hidden z-[1] col-span-full md:-mb-4">
    <div class="flex gap-4 justify-center items-center ">
        <div class="h-full w-1 rounded-lg bg-white/20">

        </div>
        <div class="grid ">
            <div class="font-medium truncate">Share Asmodeus Scans</div>
            <div class="text-sm truncate">to your friends</div>
        </div>
    </div>
    <div class="sharethis-inline-share-buttons st-left st-has-labels st-hidden st-inline-share-buttons" id="st-1"><div class="st-total st-hidden">
  <span class="st-label"></span>
  <span class="st-shares">
    Shares
  </span>
</div><div class="st-btn st-first st-last" data-network="sharethis">
  <img alt="sharethis sharing button" src="https://platform-cdn.sharethis.com/img/sharethis.svg">
  <span class="st-label">Share</span>
</div></div>
</div>
<style>
    #st-1 .st-total {
        color: white !important;
    }

    #st-1.st-hidden {
        opacity: 100 !important;
    }
</style>
<script type="text/javascript" src="https://platform-api.sharethis.com/js/sharethis.js#property=65dc466cf44fb1001a4c6a85&amp;product=inline-share-buttons&amp;source=platform" async="async"></script>    <!-- Report Section -->
        <div class="flex  justify-between gap-6 bg-white/10 p-4 rounded-2xl">
    <div class="flex gap-4  justify-center items-center">
        <div class="w-fit h-full">
            <div class="h-full w-1 rounded-lg bg-white/20">

            </div>
        </div>
        <div class="grid ">
            <div class="font-medium truncate">Facing an Issue?</div>
            <div class="text-sm truncate">Let us know, and we'll help ASAP</div>
        </div>
    </div>
    <button id="open_login_panel_button" class="h-10 gap-2 px-6 bg-rose-500 hover:bg-rose-600 hover:bg-opacity-80 flex justify-center items-center rounded-full">
        <div class="w-6">
            <img class="w-6" src="https://api.iconify.design/material-symbols:report.svg?color=white">
        </div>
        <div class="font-medium">Report</div>
    </button>
</div>        <!-- Social Section -->
        <div class="flex  justify-between gap-6 bg-white/10 p-4 rounded-2xl">
        <div class="flex gap-4  justify-center items-center">
            <div class="h-full w-1 rounded-lg bg-white/20">

            </div>
            <div class="grid ">
                <div class="font-medium truncate">Join Our Socials</div>
                <div class="text-sm truncate">to explore more</div>
            </div>
        </div>
        <a href="https://discord.gg/asmotoon" target="_blank" alt="Discord" title="Discord" class="h-10 gap-2 px-6 bg-[#5865F2] hover:bg-opacity-80 flex justify-center items-center rounded-full">
            <div class="w-6">
                <img src="https://api.iconify.design/cbi:discord.svg?color=%23ffffff" class="w-6" alt="discord">
            </div>
            <div class="font-medium">Discord</div>
        </a>
    </div>
        <!-- Donation Section -->
        <div class="flex  justify-between gap-6 bg-white/10 p-4 rounded-2xl relative overflow-hidden ">
        <img src="/assets/images/senkoheart.png" class="h-full w-auto absolute top-0 left-0 [transform:scaleX(-1)]">
        <div class="flex ml-[4.5rem] gap-4 justify-center items-center relative">
            <div class="hidden h-full w-1 rounded-lg bg-white/20">

            </div>
            <div class="grid ">
                <div class="font-medium truncate">Donate Us</div>
                <div class="text-sm truncate">to support us</div>
            </div>
        </div>
        <div class="flex gap-2 relative">
                                    <a href="https://ko-fi.com/animatedglitchedscans" target="_blank" alt="Ko-Fi" title="Ko-Fi" class="h-10 gap-2 px-6 bg-blue-400 hover:bg-opacity-80 flex justify-center items-center rounded-full">
                <div class="w-7">
                    <img src="https://api.iconify.design/cib:ko-fi.svg?color=%23ffffff" class="w-7">
                </div>
                <div class="whitespace-nowrap font-medium">Ko-Fi</div>
            </a>
                                                        </div>
    </div>
    </div>
                    <div class="grid sm:rounded-xl sm:mx-0 -mx-[4vw] sm:w-full w-[calc(100%+8vw)] overflow-hidden">
        <div id="iframe-container"><iframe id="resizing-iframe" src="https://zmio.org/post?color=1f1e24&amp;host=asmotoon.com&amp;path=/series/63fee55d460-63fee663c59/" scrolling="no" style="width: 100%; border: none; overflow: hidden; display: block; height: 612px;"></iframe></div>
    </div>
    <script>
        const allowedOrigin = "https://zmio.org";
        const baseSrc =
            "https://zmio.org/post?color=1f1e24&host=asmotoon.com&path=/series/63fee55d460-63fee663c59/";

        // Track if iframe was initially made without token
        let iframeCreatedWithoutToken = false;

        function createIframe(token) {
            // Remove old iframe if exists
            const existing = document.getElementById("resizing-iframe");
            if (existing) {
                existing.remove();
            }

            const iframe = document.createElement("iframe");
            iframe.id = "resizing-iframe";

            const url = new URL(baseSrc);
            if (token) {
                url.searchParams.set("token", token);
            }

            iframe.src = url.toString();
            iframe.style.width = "100%";
            iframe.style.border = "none";
            iframe.style.overflow = "hidden";
            iframe.style.display = "none";
            iframe.setAttribute("scrolling", "no");

            document.getElementById("iframe-container").appendChild(iframe);

            iframe.addEventListener("load", () => {
                iframe.style.display = "block";
                if (token) {
                    iframe.contentWindow.postMessage({
                            type: "auth-token",
                            token
                        },
                        allowedOrigin
                    );
                }
            });

            // Update flag
            iframeCreatedWithoutToken = !token;
        }

        // Always listen for messages
        window.addEventListener("message", (event) => {
            if (event.origin !== allowedOrigin) return;

            const data = event.data;

            if (data.type === "resize-iframe") {
                const iframe = document.getElementById("resizing-iframe");
                if (iframe) {
                    iframe.style.height = data.height + "px";
                }
            }

            if (data.type === "auth-token" && data.token) {
                localStorage.setItem("zimo-auth-token", data.token);

                // Recreate iframe only if it was created earlier without a token
                if (iframeCreatedWithoutToken) {
                    createIframe(data.token);
                }
            }
        });

        // On load: check if token exists
        const token = localStorage.getItem("zimo-auth-token");
        createIframe(token); // If token is null, it'll set the flag to recreate later
    </script>
                    </div>
        <div id="chapters_panel" style="--panel_bottom: -100%;" class="fixed bottom-[--panel_bottom] transition-all duration-500 left-0 flex  justify-center items-end w-full h-full z-10">
            <div id="chapters_panel_scroll" class="bg-[--header] border border-white/10 mx-auto rounded-t-3xl w-full h-auto max-h-[50%] max-w-3xl sm:p-4 sm:pb-4 p-[4vw] pb-0 grid sm:gap-10 gap-[4vw] simplebar-scrollable-y" data-simplebar="init"><div class="simplebar-wrapper" style="margin: -16px;"><div class="simplebar-height-auto-observer-wrapper"><div class="simplebar-height-auto-observer"></div></div><div class="simplebar-mask"><div class="simplebar-offset" style="right: 0px; bottom: 0px;"><div class="simplebar-content-wrapper" tabindex="0" role="region" aria-label="scrollable content" style="height: auto; overflow: hidden scroll;"><div class="simplebar-content" style="padding: 16px;">
                <div class="flex items-center justify-between sm:mb-4 mb-[4vw]">
                    <h2 class="sm:text-2xl text-[5.5vw] font-bold">
                        6 Chapters                    </h2>
                    <div class="cursor-pointer group" id="sort">
                        <img class="w-10 not-sorted transition-all" src="https://api.iconify.design/bi:sort-numeric-down-alt.svg?color=white" alt="">
                    </div>
                    <script>
                        (function() {
                            let element = document.querySelector('#sort');

                            element.addEventListener('click', function(event) {
                                element = event.target.classList;
                                if (element.contains('not-sorted')) {
                                    element.add('sorted');
                                    element.remove('not-sorted');
                                    event.target.setAttribute('src',
                                        'https://api.iconify.design/bi:sort-numeric-up.svg?color=white')
                                } else {
                                    element.remove('sorted');
                                    element.add('not-sorted');
                                    event.target.setAttribute('src',
                                        'https://api.iconify.design/bi:sort-numeric-down-alt.svg?color=white')

                                }
                                let chapter = document.querySelector('#chapters');
                                let arr = Array.from(chapter.childNodes);
                                arr.reverse();
                                chapter.append(...arr);
                            });
                        })();
                    </script>
                </div>
                                <div id="chapters" class="grid sm:grid-cols-4 grid-cols-2 sm:gap-4 gap-[3vw] sm:pb-4 pb-[4vw]">
                                                                        <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/63fee55d460-63fee769609/" alt="Chapter 9.2" title="Chapter 9.2" p="GgbFT0pQzcs" d="6 days ago" c="100">
    <div class="grid sm:gap-2 gap-[2vw]">
                    <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[1/1] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/GgbFT0pQzcs&amp;w=250)">

                </div>

                                                            <div class="flex justify-center items-center w-full h-full absolute top-0 left-0 bg-black/70 ">
                            <img src="https://api.iconify.design/material-symbols:lock.svg?color=white" class="w-6">
                        </div>
                                        <div class="flex justify-center items-center w-full h-full absolute top-0 left-0">
                        <div class="flex items-center justify-start gap-1.5 absolute bottom-0 right-0 m-2">
                                                                                    <div class="flex gap-1 justify-center items-center w-fit bg-yellow-200 text-yellow-600 border-yellow-200 pl-1 pr-1.5 h-5 bg-opacity-90 rounded-full">
        <div class="w-3.5 h-fit">
                <img src="/assets/images/Coin.svg?clear=1" class="w-full" alt="Coin">
            </div>        <div class="text-xs uppercase">
                    <span class="font-bold">100</span>
            </div>
</div>                                                    </div>
                    </div>
                            </div>
                <div class="grid h-fit px-1">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 9.2                    </span>
                                    </span>
                <div class="flex justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        6 days ago                    </div>
                </div>
                    </div>
    </div>
    </a>                                                    <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/63fee55d460-63fee7279bd/" alt="Chapter 9.1" title="Chapter 9.1" p="wCOScKkcFVb" d="6 days ago" c="100">
    <div class="grid sm:gap-2 gap-[2vw]">
                    <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[1/1] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/wCOScKkcFVb&amp;w=250)">

                </div>

                                                            <div class="flex justify-center items-center w-full h-full absolute top-0 left-0 bg-black/70 ">
                            <img src="https://api.iconify.design/material-symbols:lock.svg?color=white" class="w-6">
                        </div>
                                        <div class="flex justify-center items-center w-full h-full absolute top-0 left-0">
                        <div class="flex items-center justify-start gap-1.5 absolute bottom-0 right-0 m-2">
                                                                                    <div class="flex gap-1 justify-center items-center w-fit bg-yellow-200 text-yellow-600 border-yellow-200 pl-1 pr-1.5 h-5 bg-opacity-90 rounded-full">
        <div class="w-3.5 h-fit">
                <img src="/assets/images/Coin.svg?clear=1" class="w-full" alt="Coin">
            </div>        <div class="text-xs uppercase">
                    <span class="font-bold">100</span>
            </div>
</div>                                                    </div>
                    </div>
                            </div>
                <div class="grid h-fit px-1">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 9.1                    </span>
                                    </span>
                <div class="flex justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        6 days ago                    </div>
                </div>
                    </div>
    </div>
    </a>                                                    <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/63fee55d460-63fee6db228/" alt="Chapter 8.2" title="Chapter 8.2" p="7nOKVe271VU" d="6 days ago" c="100">
    <div class="grid sm:gap-2 gap-[2vw]">
                    <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[1/1] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/7nOKVe271VU&amp;w=250)">

                </div>

                                                            <div class="flex justify-center items-center w-full h-full absolute top-0 left-0 bg-black/70 ">
                            <img src="https://api.iconify.design/material-symbols:lock.svg?color=white" class="w-6">
                        </div>
                                        <div class="flex justify-center items-center w-full h-full absolute top-0 left-0">
                        <div class="flex items-center justify-start gap-1.5 absolute bottom-0 right-0 m-2">
                                                                                    <div class="flex gap-1 justify-center items-center w-fit bg-yellow-200 text-yellow-600 border-yellow-200 pl-1 pr-1.5 h-5 bg-opacity-90 rounded-full">
        <div class="w-3.5 h-fit">
                <img src="/assets/images/Coin.svg?clear=1" class="w-full" alt="Coin">
            </div>        <div class="text-xs uppercase">
                    <span class="font-bold">100</span>
            </div>
</div>                                                    </div>
                    </div>
                            </div>
                <div class="grid h-fit px-1">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 8.2                    </span>
                                    </span>
                <div class="flex justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        6 days ago                    </div>
                </div>
                    </div>
    </div>
    </a>                                                    <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/63fee55d460-63fee663c59/" alt="Chapter 8.1" title="Chapter 8.1" p="0lDojfLnM-X" d="6 days ago" c="1">
    <div class="grid sm:gap-2 gap-[2vw]">
                    <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[1/1] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/0lDojfLnM-X&amp;w=250)">

                </div>

                            </div>
                <div class="grid h-fit px-1">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 8.1                    </span>
                                    </span>
                <div class="flex justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        6 days ago                    </div>
                </div>
                    </div>
    </div>
    </a>                                                    <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/63fee55d460-63fee61fd2f/" alt="Chapter 7.2" title="Chapter 7.2" p="wRo-Hubf7KZ" d="6 days ago" c="1">
    <div class="grid sm:gap-2 gap-[2vw]">
                    <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[1/1] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/wRo-Hubf7KZ&amp;w=250)">

                </div>

                            </div>
                <div class="grid h-fit px-1">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 7.2                    </span>
                                    </span>
                <div class="flex justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        6 days ago                    </div>
                </div>
                    </div>
    </div>
    </a>                                                    <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/63fee55d460-63fee5e6190/" alt="Chapter 7.1" title="Chapter 7.1" p="KwUH4d7fefl" d="6 days ago" c="1">
    <div class="grid sm:gap-2 gap-[2vw]">
                    <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[1/1] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/KwUH4d7fefl&amp;w=250)">

                </div>

                            </div>
                <div class="grid h-fit px-1">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 7.1                    </span>
                                    </span>
                <div class="flex justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        6 days ago                    </div>
                </div>
                    </div>
    </div>
    </a>                                                            </div>
            </div></div></div></div><div class="simplebar-placeholder" style="width: 767px; height: 551px;"></div></div><div class="simplebar-track simplebar-horizontal" style="visibility: hidden;"><div class="simplebar-scrollbar" style="width: 0px; display: none;"></div></div><div class="simplebar-track simplebar-vertical" style="visibility: visible;"><div class="simplebar-scrollbar" style="height: 527px; transform: translate3d(0px, 0px, 0px); display: block;"></div></div></div>
        </div>
                <header id="chapter_controls_header" style="--bottom_controls: 0px;" class="sm:mt-4 bottom-[--bottom_controls] transition-all duration-300 border-t fixed w-full left-0 z-[49] bg-[--header] border-white/5">
            <div class="grid w-full 2xl:max-w-[100rem] max-w-6xl mx-auto sm:p-4 p-[4vw]">
                <div class="flex gap-4 justify-center items-center">
                    
                        <a href="/chapter/63fee55d460-63fee61fd2f/" class="flex sm:w-full w-1/2 sm:max-w-[10rem] justify-center items-center h-11 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden">
                            <img class="w-6" src="https://api.iconify.design/mdi:arrow-left.svg?color=white">
                        </a>
                                        <button id="chapters_show" class="sm:px-5 px-[4vw] flex sm:w-fit w-full justify-center items-center h-11 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full">
                        <img class="w-6" src="https://api.iconify.design/ph:squares-four-fill.svg?color=white">
                        <div class="font-medium">Chapters</div>
                    </button>
                    <div class=" sm:flex hidden sm:w-fit w-full justify-center items-center h-11 gap-3 bg-white/10 transition-all  rounded-full overflow-hidden">
                        <div zoom="remove" class="flex text-lg justify-center items-center h-11 aspect-square cursor-pointer hover:bg-white/20">
                            -
                        </div>
                        <div zoom="value" class="w-10 text-center">30%</div>
                        <div zoom="add" class="flex text-lg justify-center items-center h-11 aspect-square cursor-pointer hover:bg-white/20 ">
                            +
                        </div>
                        <script>
                            (function() {
                                let zoom_count_start = 1;
                                let zoom_count_end = 10;
                                let zoom_count = 3;
                                                                    zoom_count = store.get('zoom-0.2') ?? 3;
                                                                for (let element of document.querySelectorAll('[zoom]')) {
                                    element.addEventListener('click', () => {
                                        let elementValue = element.getAttribute('zoom');
                                        if (elementValue === 'add' && zoom_count < zoom_count_end) {
                                            runZoom(zoom_count += 1)
                                        } else if (elementValue === 'remove' && zoom_count > zoom_count_start) {
                                            runZoom(zoom_count -= 1)
                                        }
                                    });
                                }

                                function runZoom(value) {
                                    let element = document.querySelector('[zoom="value"]');
                                    let width = value * 10 + '%';
                                    element.innerText = width;
                                    document.body.style.setProperty('--width', width);
                                                                            store.set('zoom-0.2', value)
                                                                    }
                                runZoom(zoom_count);
                            })();
                        </script>
                    </div>
                                            <a href="/chapter/63fee55d460-63fee6db228/" class="flex sm:w-full w-1/2 sm:max-w-[10rem] justify-center items-center h-11 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden">
                            <img class="w-6" src="https://api.iconify.design/mdi:arrow-right.svg?color=white">
                        </a>
                                    </div>
            </div>
        </header>
        <script>
            (function() {
                let bottomHeader = document.getElementById('bottomHeader');
                let chapter_controls_header = document.getElementById('chapter_controls_header');
                if (bottomHeader && window.innerWidth < 640) {
                    bottomHeader.remove();
                    bottomHeader.classList.add('pt-0');
                    bottomHeader.classList.remove('fixed');
                    bottomHeader.classList.remove('border-t');
                    chapter_controls_header.appendChild(bottomHeader);
                }
            })();
        </script>
        <script>
            (function() {




                let chapters_panel = document.getElementById('chapters_panel');
                let chapter_controls_header = document.getElementById('chapter_controls_header');
                let chapters_panel_scroll = document.getElementById('chapters_panel_scroll');
                new SimpleBar(chapters_panel_scroll);
                let chapters_show = document.getElementById('chapters_show');

                runEl({
                    show: {
                        element: chapters_panel,
                        function: (data) => {
                            hs_chapter_panel(false);
                        }
                    },
                    ignore: {
                        elements: [chapters_show, chapters_panel_scroll],
                        function: () => {
                            // Ignored elements function
                        }
                    }
                });

                chapters_show.addEventListener('click', function() {
                    hs_chapter_panel(!chapters_panel.classList.contains('panel_shown'));
                });

                function hs_chapter_panel(type) {
                    if (type) {
                        chapters_panel.style.setProperty('--panel_bottom',
                            `${chapter_controls_header.offsetHeight}px`);
                        chapters_panel.classList.add('panel_shown');
                    } else {
                        chapters_panel.style.setProperty('--panel_bottom',
                            `-${chapters_panel.offsetHeight}px`);
                        chapters_panel.classList.remove('panel_shown');
                    }
                }
                //////////////////////////////////////
                //////////////////////////////////////
                /////////////////////////////////////
                let chapter_header = document.getElementById('chapter_header');
                let main_header = document.getElementById('main_header');
                let sticky_ad = document.querySelector('#sticky-ad-head');
                let lastScrollTop = 0;
                if (window.innerWidth < 640) {
                    main_header.classList.add('top-[--topSet]');
                } else {
                    chapter_header.classList.add('top-[--topSet]');
                }

                async function hs_header_on_scroll(type) {
                    try {
                        if (type) {
                            hs_chapter_panel(false)
                            sticky_ad?.classList.remove('duration-[--durationSet]');
                            chapter_controls_header.style.setProperty('--bottom_controls',
                                `-${chapter_controls_header.offsetHeight}px`)
                            // bottom_controls
                            if (window.innerWidth < 640) {
                                main_header.style.setProperty('--topSet', `-${(main_header.offsetHeight)+2}px`);
                                sticky_ad?.style.setProperty('--durationSet', `050ms`);
                                sticky_ad?.style.setProperty('--bottom', `0px`);
                            } else {
                                chapter_header.style.setProperty('--topSet', `-${(chapter_header.offsetHeight)+2}px`);
                                sticky_ad?.classList.add('sm:!bottom-0');
                                sticky_ad?.classList.add('sm:duration-100');
                                sticky_ad?.classList.remove('sm:duration-[610ms]');
                            }
                        } else {
                            chapter_controls_header.style.setProperty('--bottom_controls', `0px`);
                            if (window.innerWidth < 640) {
                                main_header.style.setProperty('--topSet', `0px`);
                                sticky_ad?.style.setProperty('--durationSet', `200ms`);
                                setTimeout(() => {
                                    sticky_ad?.style.setProperty('--bottom',
                                        `${chapter_controls_header.offsetHeight}px`);
                                }, 90)
                            } else {
                                chapter_header.style.setProperty('--topSet', `0px`);
                                sticky_ad?.classList.remove('sm:!bottom-0');
                                sticky_ad?.classList.add('sm:duration-[610ms]');
                                sticky_ad?.classList.remove('sm:duration-100');
                            }
                        }
                    } catch (error) {
                        console.error(error)
                    }
                }

                let show_bar = true;

                window.addEventListener('scroll', () => {
                    if (window.scrollY > document.getElementById("main_header").offsetHeight) {
                        const currentScrollTop = window.pageYOffset || document.documentElement.scrollTop;
                        let show_bar_button_pc = document.querySelector('[show_bar_button="pc"]')
                        if (updateProgress() >= 100) {
                            // if (window.innerWidth >= 640) {
                            //     hs_header_on_scroll(false);
                            // } else {
                            show_bar_button_pc.classList.add('grid');
                            show_bar_button_pc.classList.remove('hidden');
                            // }
                        } else {
                            if (currentScrollTop <= 300) {
                                hs_header_on_scroll(false)
                            } else {
                                hs_header_on_scroll(true)
                                show_bar = true;
                            }
                            // if (window.innerWidth <= 640) {
                            show_bar_button_pc.classList.remove('grid');
                            show_bar_button_pc.classList.add('hidden');
                            // }
                        }
                        lastScrollTop = currentScrollTop;
                    }
                });

                let el_bar = document.querySelectorAll('[show_bar_button]');
                const DOUBLE_TAP_THRESHOLD = 300;
                for (const el of el_bar) {
                    let lastTapTime = 0;
                    el.addEventListener("click", function() {
                        const currentTime = new Date().getTime();
                        const timeSinceLastTap = currentTime - lastTapTime;
                        const isDoubleTap = timeSinceLastTap < DOUBLE_TAP_THRESHOLD && timeSinceLastTap > 0;

                        lastTapTime = currentTime;

                        let value = this.getAttribute('show_bar_button');
                        if (window.scrollY > document.getElementById("main_header")
                            .offsetHeight) {
                            if (value === "mobile") {
                                if (window.innerWidth < 640) {
                                    if (isDoubleTap && show_bar) {
                                        hs_header_on_scroll(false);
                                        console.log("Double tap detected");
                                    } else {
                                        hs_header_on_scroll(show_bar);
                                    }
                                } else {
                                    hs_header_on_scroll(true);
                                }
                            } else if (value === "pc") {
                                hs_header_on_scroll(false);
                            }
                        }
                    }.bind(el));
                }

                //---/////////////////////////
                /////////////////////////////
                //---////////////////////////
                let chapter = document.getElementById("pages");
                let progressPercentage = document.getElementById("progressPercentage");
                let scrolledHeight = 0;
                window.addEventListener("scroll", updateProgress);

                function updateProgress() {
                    let totalHeight = chapter.clientHeight;
                    let visibleHeight = window.innerHeight;
                    let scrollTop = window.scrollY;
                    let chapterOffset = chapter.getBoundingClientRect().top;

                    if (chapterOffset < 0) {
                        if (scrollTop < scrolledHeight) {
                            scrolledHeight = scrollTop;
                        } else {
                            scrolledHeight = scrollTop;
                        }
                        let progress = (scrolledHeight / (totalHeight - visibleHeight)) * 100;
                        let progress_count = progress.toFixed(2);
                        if (progress_count >= 100) progress_count = 100;
                        //set progress progress_count;
                        return Number(progress_count);
                    } else {
                        //set progress 0;
                        scrolledHeight = 0;
                        return 0;
                    }
                }

                // Initial progress update
                updateProgress();

            })();
        </script>
        <script>
            (function() {
                // var lazyLoadInstance = new LazyLoad();
                var myLazyLoad = new LazyLoad({
                    container: document.querySelector("#pages")
                });
                myLazyLoad.update();
            })();
        </script>
        
<footer class="sm:mb-0  bg-gradient-to-t from-[--footer] to-transparent sm:mt-12 sm:h-fit">
    <div class="grid w-full 2xl:max-w-[100rem] max-w-6xl mx-auto sm:px-4 sm:py-10 px-[6vw] py-[6vw] h-full">
        <div class="grid sm:gap-10 gap-[4vw]">
            <div class="grid gap-8">
                <div class="flex flex-col justify-center items-center gap-4">
                    <a style="background-image: url(https://wsrv.nl/?url=cdn.meowing.org/uploads/FjEdGmBduJD&amp;w=100);" class="flex w-fit justify-center items-center h-16 aspect-square gap-3 bg-center bg-cover bg-no-repeat rounded-full" href="/">

                    </a>
                    <div class="flex flex-col justify-center items-center gap-2 w-full">
                        <a class="block w-fit font-semibold text-2xl" href="/">
                            Asmodeus Scans                        </a>
                                                <div class="w-full sm:max-w-[50%] text-center">
                            Welcome to the world of Asmodeus Scans, also known as Asmotoon! Where quality meets speed. Dive into a collection of fascinating manga and novels, all at your fingertips.                        </div>
                                            </div>
                </div>
                <div class="flex flex-wrap gap-3 justify-center items-center">
                                                            <a href="https://ko-fi.com/animatedglitchedscans" target="_blank" alt="Ko-Fi" title="Ko-Fi" class="bg-white/10 hover:bg-white/15 transition-all rounded-lg h-11 w-11 flex flex-col justify-center items-center">
                        <img src="https://api.iconify.design/cib:ko-fi.svg?color=white" class="h-6">
                    </a>
                                                                                <a href="https://discord.gg/asmotoon" target="_blank" alt="Discord" title="Discord" class="bg-white/10 hover:bg-white/15 transition-all rounded-lg h-11 w-11 flex flex-col justify-center items-center">
                        <img src="https://api.iconify.design/fa6-brands:discord.svg?color=white" class="h-6">
                    </a>
                                                            <a href="/dmca" target="_blank" alt="DMCA" title="DMCA" class="bg-white/10 hover:bg-white/15 transition-all rounded-lg h-11 w-11 flex flex-col justify-center items-center">
                        <span class="font-bold text-xs">DMCA</span>
                    </a>
                </div>
                                                <!-- <div class="flex gap-4 justify-center items-center flex-wrap">
                                                    <a href="https://ko-fi.com/animatedglitchedscans" target="_blank" class="font-semibold text-xl hover:text-blue-500"
                                alt="Ko-Fi">Ko-Fi</a>
                            -                                                    <a href="https://discord.gg/asmotoon" target="_blank" class="font-semibold text-xl hover:text-blue-500"
                                alt="Discord">Discord</a>
                                                                        </div> -->
                                <!-- <div class="text-center flex flex-col justify-center items-center">
                    <span>This theme is designed by ----</span>
                    <span>Sooo unique that everyone wants to copy. 😉</span>
                </div> -->
            </div>
        </div>
    </div>
</footer>
<script>
(() => {
    let open_login_panel_button = document.querySelectorAll('#open_login_panel_button');

    let close_login_panel_button = document.getElementById('close_login_panel_button');
    let login_panel_main = document.getElementById('login_panel_main');
    let login_panel_background = document.getElementById('login_panel_background');
    let login_panel = document.getElementById('login_panel');
    runEl({
        show: {
            element: login_panel,
            function: () => {}
        },
        ignore: {
            elements: [...(Array.from(open_login_panel_button) ?? []), ...[
                close_login_panel_button,
                login_panel_background
            ]],
            function: async (data) => {
                data.preventDefault();
                login_panel_main.classList.toggle('flex');
                login_panel_main.classList.toggle('hidden');
                // Ignored elements function
            }
        }
    });
})();
</script>
<script src="https://www.hCaptcha.com/1/api.js" async="" defer=""></script>
<div id="main-report-element" class="w-full h-full fixed bg-black/40 top-0 left-0 z-[200] hidden justify-center items-center p-4">
    <div class="w-full h-full absolute top-0 left-0 overflow-hidden bg-[--theme_color] opacity-90" id="reportButton">

    </div>
    <div class="w-full max-w-[30rem] h-fit bg-[--theme_color] rounded-2xl relative">

        <!-- Loading Indicator -->
        <div id="report-loader" class="w-full h-full hidden flex justify-center items-center absolute top-0 left-0 z-10 border bg-[--theme_color] border-white/10 rounded-2xl">
            <img class="w-11 animate-spin" src="https://api.iconify.design/mingcute:loading-line.svg?color=white">
        </div>
        <!-- Success Indicator -->
        <div id="report-success" class="w-full h-full hidden flex flex gap-4 justify-center items-center absolute top-0 left-0 z-10 border bg-[--theme_color] border-white/10 rounded-2xl">
            <img class="w-11" src="https://api.iconify.design/material-symbols:check-circle-rounded.svg?color=white" alt="Success">
            <div>
                Report submitted!
            </div>
        </div>

        <div class="w-full h-fit p-6 border-white/10 border rounded-2xl grid">
            <div class="grid gap-3">
                <div class="w-full flex justify-between items-center mb-2">
                    <!-- Modal Title -->
                    <div class="text-white/90 font-bold text-2xl">
                        Report
                    </div>
                    <!-- Close Button -->
                    <button id="reportButton" class="flex w-fit aspect-square justify-center items-center h-11 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full">
                        <img class="w-6" src="https://api.iconify.design/material-symbols:close-rounded.svg?color=white">
                    </button>
                </div>

                <form class="grid gap-4" id="reportForm">
                    <div class="relative grid gap-2">
                        <label for="reportOption" class="flex items-center gap-2">
                            <img src="https://api.iconify.design/mdi:dots-vertical-circle.svg?color=white" alt="Icon" width="20" height="20">
                            Choose an option.
                        </label>
                        <div class="custom-select w-full bg-white/10 rounded-xl relative">
                            <div id="selectedOption" class="text-white cursor-pointer py-2 px-3 flex items-center gap-2">
                                <span class="flex gap-1"><span class="sm:hidden">Tap</span><span class="sm:block hidden">Click</span> to view options</span>
                            </div>
                            <div id="optionsList" class="options-list bg-[--theme_color] rounded-xl absolute w-full hidden mt-1 z-10 overflow-hidden">
                            <div class="option-item text-white py-2 px-3 cursor-pointer hover:bg-white/20 bg-white/10" data-value="1">General error (e.g grammatical, misaligned text)</div><div class="option-item text-white py-2 px-3 cursor-pointer hover:bg-white/20 bg-white/10" data-value="2">Missing/lost image (No page found)</div><div class="option-item text-white py-2 px-3 cursor-pointer hover:bg-white/20 bg-white/10" data-value="3">Wrong chapter</div><div class="option-item text-white py-2 px-3 cursor-pointer hover:bg-white/20 bg-white/10" data-value="4">Untranslated chapter (Other Language)</div><div class="option-item text-white py-2 px-3 cursor-pointer hover:bg-white/20 bg-white/10" data-value="5">Wrong page order</div><div class="option-item text-white py-2 px-3 cursor-pointer hover:bg-white/20 bg-white/10" data-value="6">Other</div></div>
                        </div>
                        <p id="error-message" class="text-red-500 text-sm hidden mt-1">Please select an option.</p>
                    </div>

                    <div class="grid gap-2">
                        <label for="reportText" class="flex items-center gap-2">
                            <img src="https://api.iconify.design/material-symbols:edit-note.svg?color=white" alt="Icon" width="20" height="20">
                            Enter your report.
                        </label>
                        <textarea id="reportText" name="message" rows="4" class="w-full p-2 bg-white/10 rounded-xl" minlength="1" maxlength="200" required=""></textarea>
                    </div>

                    <div class="grid gap-2">
                        <label for="reportText" class="flex items-center gap-2">
                            <img src="https://api.iconify.design/logos:hcaptcha-icon.svg" alt="Icon" width="20" height="20">
                            Solve captcha.
                        </label>
                        <div class="grid gap-1">
                            <div class="h-captcha" data-sitekey="a9226c58-b3d8-4f9e-82d4-d92644dc8584"><iframe src="https://newassets.hcaptcha.com/captcha/v1/ee1a855b00b1ba8c779103181fc3ae671f71373f/static/hcaptcha.html#frame=checkbox&amp;id=0ijecpzqw1ds&amp;host=asmotoon.com&amp;sentry=true&amp;reportapi=https%3A%2F%2Faccounts.hcaptcha.com&amp;recaptchacompat=true&amp;custom=false&amp;hl=de&amp;tplinks=on&amp;andint=off&amp;pstissuer=https%3A%2F%2Fpst-issuer.hcaptcha.com&amp;sitekey=a9226c58-b3d8-4f9e-82d4-d92644dc8584&amp;theme=light&amp;origin=https%3A%2F%2Fasmotoon.com" tabindex="0" frameborder="0" scrolling="no" allow="private-state-token-issuance 'src'; private-state-token-redemption 'src'" title="Widget mit Kontrollkästchen für die hCaptcha-Sicherheitsabfrage" data-hcaptcha-widget-id="0ijecpzqw1ds" data-hcaptcha-response="" style="pointer-events: auto; background-color: rgba(255, 255, 255, 0); border-radius: 4px; width: 302px; height: 76px; overflow: hidden;"></iframe><textarea id="g-recaptcha-response-0ijecpzqw1ds" name="g-recaptcha-response" style="display: none;"></textarea><textarea id="h-captcha-response-0ijecpzqw1ds" name="h-captcha-response" style="display: none;"></textarea></div>
                            <p id="captcha-error-message" class="text-red-500 text-sm hidden mt-1">Please complete the
                                captcha.</p>
                        </div>
                    </div>

                    <div class="text-center">
                        <button type="submit" class="bg-white/10 text-white px-6 h-11 rounded-full">
                            Submit Report
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<script>
    (() => {
        function report_view() {

            const reportElement = document.getElementById("main-report-element");
            const reportLoader = document.getElementById("report-loader");
            const reportText = document.getElementById("reportText");
            const selectedOption = document.getElementById("selectedOption");
            const errorMessage = document.getElementById("error-message");
            if (!reportLoader.classList.contains("hidden")) {
                return;
            }

            reportText.value = "";
            selectedOption.textContent = "Click to view options";
            errorMessage.classList.add("hidden");

            if (reportElement.classList.contains("hidden")) {
                reportElement.classList.add("flex");
                reportElement.classList.remove("hidden");
                reportElement.classList.add("transition-opacity", "opacity-0");
                setTimeout(() => {
                    reportElement.classList.remove("opacity-0");
                    reportElement.classList.add("opacity-100");
                }, 10);
            } else {
                reportElement.classList.remove("opacity-100");
                reportElement.classList.add("opacity-0");
                setTimeout(() => {
                    reportElement.classList.add("hidden");
                    reportElement.classList.remove("flex");
                }, 200);
            }
        }
                const optionsList = [{"value":1,"label":"General error (e.g grammatical, misaligned text)"},{"value":2,"label":"Missing\/lost image (No page found)"},{"value":3,"label":"Wrong chapter"},{"value":4,"label":"Untranslated chapter (Other Language)"},{"value":5,"label":"Wrong page order"},{"value":6,"label":"Other"}];

        const optionsListContainer = document.getElementById('optionsList');
        const selectedOption = document.getElementById('selectedOption');
        const errorMessage = document.getElementById('error-message');
        const captchaErrorMessage = document.getElementById('captcha-error-message');
        const reportText = document.getElementById('reportText');
        const submitButton = document.querySelector('button[type="submit"]');
        const selectContainer = document.querySelector('.custom-select');
        const reportLoader = document.getElementById('report-loader');
        const form = document.getElementById('reportForm');

        const report_view_buttons = document.querySelectorAll('.report_view_button');

        for (let button of report_view_buttons) {
            button.addEventListener('click', () => {
                console.log(true);
            });
        }



        let selectedValue = null;

        optionsList.forEach(option => {
            const optionElement = document.createElement('div');
            optionElement.classList.add('option-item', 'text-white', 'py-2', 'px-3', 'cursor-pointer',
                'hover:bg-white/20', 'bg-white/10');
            optionElement.setAttribute('data-value', option.value);
            optionElement.textContent = option.label;
            optionsListContainer.appendChild(optionElement);
        });

        selectedOption.addEventListener('click', () => {
            optionsListContainer.classList.toggle('hidden');
        });

        optionsListContainer.addEventListener('click', (e) => {
            if (e.target && e.target.classList.contains('option-item')) {
                const allOptions = optionsListContainer.querySelectorAll('.option-item');
                allOptions.forEach(opt => {
                    opt.classList.remove('bg-red-500');
                });

                e.target.classList.add('bg-red-500');

                selectedValue = e.target.getAttribute('data-value');
                const selectedLabel = e.target.textContent;
                selectedOption.textContent = selectedLabel;

                optionsListContainer.classList.add('hidden');
                errorMessage.classList.add('hidden');
            }
        });

        form.addEventListener('submit', async (e) => {
            e.preventDefault();

            if (!selectedValue) {
                errorMessage.classList.remove('hidden');
            } else if (!hcaptcha.getResponse()) {
                captchaErrorMessage.classList.remove('hidden');
            } else {
                captchaErrorMessage.classList.add('hidden');

                // Show loader and disable inputs
                reportLoader.classList.remove('hidden');
                reportText.disabled = true;
                submitButton.disabled = true;
                selectContainer.disabled = true;
                optionsListContainer.classList.add('disabled');
                selectedOption.classList.add('disabled');

                const message = reportText.value;
                let data = {
                    message,
                    type: selectedValue,
                    captcha: hcaptcha.getResponse(),
                    ...{"series_uid":"63fee55d460","chapter_uid":"63fee663c59"}                };
                const params = new URLSearchParams(data).toString();
                const url = `/report?${params}`;

                try {
                    let {
                        success,
                        message: error_message
                    } = await fetch(url).then(response => response.json());
                    if (success) {
                        reportLoader.classList.add('hidden');

                        const reportSuccess = document.getElementById('report-success');
                        reportSuccess.classList.remove('hidden');

                        setTimeout(() => {
                            report_view();
                        }, 1000);
                    } else {
                        alert(error_message);
                        setTimeout(() => {
                            report_view();
                        }, 2000);
                    }
                } catch (error) {
                    alert(
                        'An error occurred while submitting the report, reload the page and try again.'
                    );
                    setTimeout(() => {
                        report_view();
                    }, 2000);
                } finally {
                    reportLoader.classList.add('hidden');
                }
            }
        });

        document.getElementById('reportButton')?.addEventListener('click', () => {
            report_view()
        });
    })();
</script>    <div id="cards_show" class="hidden justify-center items-center w-full h-full fixed top-0 left-0 z-[162] overflow-hidden opacity-0 transition-all duration-[250] ">
    <div id="cards_show_bg" class="absolute top-0 left-0 w-full h-full bg-[--theme_color] opacity-90">

    </div>
    <div id="cards_show_main" class="w-full h-full max-w-sm max-h-96 bg-[--theme_color] relative rounded-2xl">
                    <div class="flex flex-col justify-between items-start w-full h-full border border-white/10 rounded-2xl">
                                    <div class="w-full h-full flex flex-col gap-4 p-8 justify-center items-center">
                        <div class="w-full text-center">
                            You don't have any cards yet. <br> To purchase a chapter, purchase a card first.                        </div>
                        <button id="card_note_button" onclick="card_note_open()" class="px-5 flex w-fit justify-center items-center h-11 gap-3 bg-blue-600 hover:bg-blue-500 transition-all cursor-pointer rounded-full">
                            <img class="w-6" src="https://api.iconify.design/mdi:card-plus.svg?color=white">
                            <div class="font-medium">Purchase Card</div>
                        </button>
                    </div>
                                <div class="grid gap-3 h-fit w-full p-4 border-t border-white/10">
                    <div class="w-full">
                        <div class="flex gap-3 justify-start items-center">
                            <div id="main_card_chapter_cover" class="aspect-[2/1.5] h-11 bg-white/10 bg-cover bg-center rounded-xl">

                            </div>
                            <div class="grid">
                                <div class="flex gap-1 justify-start items-center">
                                    <span class="font-bold text-yellow-600" id="main_card_coins"></span>
                                    <span class="text-xs font-semibold">COINS</span>
                                </div>
                                <span class="text-xs"><span id="main_card_chapter_name"></span> - <span id="main_card_chapter_date"></span></span>
                            </div>
                        </div>
                    </div>
                                    </div>
            </div>
            </div>
</div>
<script>
    (async () => {
        let cards_show = document.querySelector('#cards_show');
        let cards_show_bg = document.querySelector('#cards_show_bg');
        let cards_show_main = document.querySelector('#cards_show_main');
        let paid_chapters = document.querySelectorAll("#paid-chapter");
        let cards = document.querySelectorAll("button#card");
        let purchase_button = document.querySelector('#purchase_button');

        let main_card_coins = document.querySelector('#main_card_coins');
        let main_card_chapter_cover = document.querySelector('#main_card_chapter_cover');
        let main_card_chapter_name = document.querySelector('#main_card_chapter_name');
        let main_card_chapter_date = document.querySelector('#main_card_chapter_date');

        await (async () => {
            if (cards) {
                for await (const card of cards) {
                    card.addEventListener('click', async (event) => {
                        const card_x = event.target.closest('[card_uid]');
                        await selectCard(card_x);
                        await setPurchase(card_x)
                    });
                }
            }
            if (purchase_button) {
                purchase_button.addEventListener('click', (event) => {
                    if (event.disabled) {} else {
                        let uid = purchase_button.getAttribute('card_uid');
                        let href = purchase_button.getAttribute('href');
                        if (href && uid) {
                            window.location = `${href}?card=${uid}`;
                        }
                    }
                });
            }
        })();

        async function setPurchase(card_x) {
            try {
                let uid = card_x.getAttribute('card_uid');
                let card_coins = Number(card_x.getAttribute('c')) ?? 0;
                let coins = Number(main_card_coins.textContent) ?? 1;
                if (purchase_button) {
                    if (card_coins >= coins) {
                        purchase_button.classList.add('hover:opacity-90');
                        purchase_button.classList.remove('opacity-50');
                        purchase_button.removeAttribute('disabled');
                        purchase_button.setAttribute('card_uid', uid);
                        return true;
                    } else {
                        purchase_button.classList.remove('hover:opacity-90');
                        purchase_button.classList.add('opacity-50');
                        purchase_button.setAttribute('disabled', 'true');
                        purchase_button.removeAttribute('card_uid');
                        return false;
                    }
                }
            } catch (error) {
                console.error(error);
            }
        }

        async function selectCard(card_x) {
            if (card_x) {
                let uid = card_x.getAttribute('card_uid');
                for await (const card_2 of cards) {
                    const card_uid = card_2.getAttribute('card_uid');
                    if (card_uid === uid) {
                        card_2.classList.add('ring-2');
                        card_2.classList.add('ring-offset-2');
                        card_2.classList.remove('ring-0');
                        card_2.classList.remove('ring-offset-0');
                    } else {
                        card_2.classList.add('ring-0');
                        card_2.classList.add('ring-offset-0');
                        card_2.classList.remove('ring-2');
                        card_2.classList.remove('ring-offset-2');
                    }
                }
                return uid;
            }
        }



        await runEl({
            ignore: {
                elements: [...(Array.from(paid_chapters) ?? []), ...[cards_show_bg]],
                function: async (data) => {
                    data.preventDefault();
                    let check = cards_show.classList.contains('flex');
                                            //-------------------------------------------//
                        let paid_chapter = data.target.closest('#paid-chapter');
                        if (paid_chapter && paid_chapter.getAttribute("id") === "paid-chapter") {
                            let displayName = paid_chapter.getAttribute('title');
                            let photoURL_string = paid_chapter.getAttribute('p');
                            let photoURL =
                                `https://i2.wp.com/cdn.meowing.org/uploads/${photoURL_string}?w=80`;
                            let createdAt = paid_chapter.getAttribute('d');
                            let href = paid_chapter.getAttribute('href');
                            let coins = Number(paid_chapter.getAttribute('c')) ?? 1;
                            main_card_coins.innerHTML = coins;
                            if (purchase_button && href) purchase_button.setAttribute('href', href);
                            if (String(photoURL_string).length === 0) {
                                main_card_chapter_cover.remove()
                            } else {
                                main_card_chapter_cover.style.backgroundImage = `url(${photoURL})`;
                            }
                            main_card_chapter_name.innerHTML = displayName;
                            main_card_chapter_date.innerHTML = createdAt;
                        }
                        //-------------------------------------------//
                                        if (check) {
                        setTimeout(() => {
                            cards_show.classList.toggle('opacity-0')
                            cards_show.classList.toggle('opacity-100')
                        }, 50)
                        setTimeout(() => {
                            cards_show.classList.toggle('hidden')
                            cards_show.classList.toggle('flex')
                        }, 300)
                    } else {
                                                    //-------------------------------------------//
                            await (async () => {
                                let paid_mark = false;
                                for await (const card of cards) {
                                    if (!card.disabled && paid_mark !== true) {
                                        await selectCard(card);
                                        paid_mark = await setPurchase(card);
                                    }
                                }
                            })();
                            //-------------------------------------------//
                                                cards_show.classList.toggle('hidden')
                        cards_show.classList.toggle('flex')
                        // setTimeout(() => {
                        //     cards_show.classList.toggle('backdrop-blur-2xl')
                        //     cards_show.classList.toggle('backdrop-blur-0')
                        // }, 100)
                        setTimeout(() => {
                            cards_show.classList.toggle('opacity-0')
                            cards_show.classList.toggle('opacity-100')
                        }, 150)
                    }
                }
            },
            show: {
                element: cards_show_main,
                function: () => {}
            },
        });
    })();
</script>
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js/vcd15cbe7772f49c399c6a5babf22c1241717689176015" integrity="sha512-ZpsOmlRQV6y907TI0dKBHq9Md29nnaEIPlkf84rnaERnq6zvWvPUqr2ft8M1aS28oN72PdrCzSjY4U6VaAw1EQ==" data-cf-beacon="{&quot;version&quot;:&quot;2024.11.0&quot;,&quot;token&quot;:&quot;cbf2a5f983f8476d9b5d4c25ec844ea2&quot;,&quot;r&quot;:1,&quot;server_timing&quot;:{&quot;name&quot;:{&quot;cfCacheStatus&quot;:true,&quot;cfEdge&quot;:true,&quot;cfExtPri&quot;:true,&quot;cfL4&quot;:true,&quot;cfOrigin&quot;:true,&quot;cfSpeedBrain&quot;:true},&quot;location_startswith&quot;:null}}" crossorigin="anonymous"></script>


<div aria-hidden="true" style="background-color: rgb(255, 255, 255); border: 1px solid rgb(215, 215, 215); box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 4px; border-radius: 4px; left: auto; top: -10000px; z-index: -2147483648; position: absolute; pointer-events: auto; transition: opacity 0.15s ease-out; opacity: 0; visibility: hidden;"><div style="position: relative; z-index: 1;"><iframe src="https://newassets.hcaptcha.com/captcha/v1/ee1a855b00b1ba8c779103181fc3ae671f71373f/static/hcaptcha.html#frame=challenge&amp;id=0ijecpzqw1ds&amp;host=asmotoon.com&amp;sentry=true&amp;reportapi=https%3A%2F%2Faccounts.hcaptcha.com&amp;recaptchacompat=true&amp;custom=false&amp;hl=de&amp;tplinks=on&amp;andint=off&amp;pstissuer=https%3A%2F%2Fpst-issuer.hcaptcha.com&amp;sitekey=a9226c58-b3d8-4f9e-82d4-d92644dc8584&amp;theme=light&amp;origin=https%3A%2F%2Fasmotoon.com" frameborder="0" scrolling="no" allow="private-state-token-issuance 'src'; private-state-token-redemption 'src'" title="Hauptinhalt der hCaptcha Challenge" style="border: 0px; z-index: 2000000000; position: relative;"></iframe></div><div style="width: 100%; height: 100%; position: fixed; pointer-events: none; top: 0px; left: 0px; z-index: 0; background-color: rgb(255, 255, 255); opacity: 0.05;"></div><div style="border-width: 11px; position: absolute; pointer-events: none; margin-top: -11px; z-index: 1; right: 100%;"><div style="border-width: 10px; border-style: solid; border-color: transparent rgb(255, 255, 255) transparent transparent; position: relative; top: 10px; z-index: 1;"></div><div style="border-width: 11px; border-style: solid; border-color: transparent rgb(215, 215, 215) transparent transparent; position: relative; top: -11px; z-index: 0;"></div></div></div></body></html>