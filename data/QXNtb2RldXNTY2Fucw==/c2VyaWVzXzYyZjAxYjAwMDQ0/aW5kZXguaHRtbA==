<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
        <title>Yamamoto-san Gets Caught Up in a Death Game and Destroys the Game Balance</title>
    <meta name="format-detection" content="telephone=no">
    <meta name="robots" content="follow, index, max-snippet:-1, max-video-preview:-1, max-image-preview:large">
    <link rel="icon" href="https://wsrv.nl/?url=cdn.meowing.org/uploads/FjEdGmBduJD&amp;w=20">
    <link rel="canonical" href="https://asmotoon.com/series/62f01b00044/">
    <meta name="description" content="'...Is this a death game?' The full-dive RPG 'Life is Adventure' has 100,000 players due to the failure of management, and it has turned into a death game that is going out of control. Yamamoto Rinka, a beautiful player in her thirties, curses her fate and falls into despair -- or did she? 'It's a forced long vacation! If I'm going to do it, I might as well take my time and enjoy the game!' Moreover, due to a cheat skill that was activated despite her own will, she suddenly became an all-round player... This is the story of Yamamoto, who enjoys the death game world filled with vigor, and unconsciously becomes invincible. Game start! 
 - Welcome to the world of Asmodeus Scans, also known as Asmotoon! Where quality meets speed. Dive into a collection of fascinating manga and novels, all at your fingertips. - Yamamoto-san Gets Caught Up in a Death Game and Destroys the Game Balance">
    <meta name="keywords" content="Action, Adventure, Fantasy, Comedy, Isekai, Magic, Monsters, Video Games, Shounen, Asmotoon, Asmotoons, Asmodeus, Asmodeus scans">
    <meta property="og:type" content="website">
    <meta property="og:title" content="Yamamoto-san Gets Caught Up in a Death Game and Destroys the Game Balance">
    <meta property="og:description" content="'...Is this a death game?' The full-dive RPG 'Life is Adventure' has 100,000 players due to the failure of management, and it has turned into a death game that is going out of control. Yamamoto Rinka, a beautiful player in her thirties, curses her fate and falls into despair -- or did she? 'It's a forced long vacation! If I'm going to do it, I might as well take my time and enjoy the game!' Moreover, due to a cheat skill that was activated despite her own will, she suddenly became an all-round player... This is the story of Yamamoto, who enjoys the death game world filled with vigor, and unconsciously becomes invincible. Game start! 
 - Welcome to the world of Asmodeus Scans, also known as Asmotoon! Where quality meets speed. Dive into a collection of fascinating manga and novels, all at your fingertips. - Yamamoto-san Gets Caught Up in a Death Game and Destroys the Game Balance">
    <meta property="og:url" content="http://asmotoon.com/series/62f01b00044/">
    <meta property="og:site_name" content="Asmodeus Scans">
    <meta property="og:image:alt" content="Yamamoto-san Gets Caught Up in a Death Game and Destroys the Game Balance">
    <meta property="og:image" content="https://wsrv.nl/?url=cdn.meowing.org/uploads/H_X8n3chije">
    <meta property="og:image:secure_url" content="https://wsrv.nl/?url=cdn.meowing.org/uploads/H_X8n3chije">
    <meta property="twitter:title" content="Yamamoto-san Gets Caught Up in a Death Game and Destroys the Game Balance">
    <meta property="twitter:description" content="'...Is this a death game?' The full-dive RPG 'Life is Adventure' has 100,000 players due to the failure of management, and it has turned into a death game that is going out of control. Yamamoto Rinka, a beautiful player in her thirties, curses her fate and falls into despair -- or did she? 'It's a forced long vacation! If I'm going to do it, I might as well take my time and enjoy the game!' Moreover, due to a cheat skill that was activated despite her own will, she suddenly became an all-round player... This is the story of Yamamoto, who enjoys the death game world filled with vigor, and unconsciously becomes invincible. Game start! 
 - Welcome to the world of Asmodeus Scans, also known as Asmotoon! Where quality meets speed. Dive into a collection of fascinating manga and novels, all at your fingertips. - Yamamoto-san Gets Caught Up in a Death Game and Destroys the Game Balance">
    <meta property="twitter:image" content="https://wsrv.nl/?url=cdn.meowing.org/uploads/H_X8n3chije">
        <meta property="twitter:card" content="summary_large_image">
        <script type="application/ld+json">
    {
        "@context": "https://schema.org",
        "@type": "Article",
        "headline": "Yamamoto-san Gets Caught Up in a Death Game and Destroys the Game Balance",
        "description": "'...Is this a death game?' The full-dive RPG 'Life is Adventure' has 100,000 players due to the failure of management, and it has turned into a death game that is going out of control. Yamamoto Rinka, a beautiful player in her thirties, curses her fate and falls into despair -- or did she? 'It's a forced long vacation! If I'm going to do it, I might as well take my time and enjoy the game!' Moreover, due to a cheat skill that was activated despite her own will, she suddenly became an all-round player... This is the story of Yamamoto, who enjoys the death game world filled with vigor, and unconsciously becomes invincible. Game start! 
 - Welcome to the world of Asmodeus Scans, also known as Asmotoon! Where quality meets speed. Dive into a collection of fascinating manga and novels, all at your fingertips. - Yamamoto-san Gets Caught Up in a Death Game and Destroys the Game Balance",
        "url": "http://asmotoon.com/series/62f01b00044/",
        "datePublished": "2025-02-26T01:42:34+00:00",
        "dateModified": "2025-10-01T12:09:51+00:00",
        "image": "https://wsrv.nl/?url=cdn.meowing.org/uploads/H_X8n3chije",
        "author": {
            "@type": "Person",
            "name": "Asmodeus Scans",
            "url": "http://asmotoon.com/series/62f01b00044/"
        },
        "publisher": {
            "@type": "Organization",
            "name": "Asmodeus Scans",
            "logo": {
                "@type": "ImageObject",
                "url": "https://wsrv.nl/?url=cdn.meowing.org/uploads/FjEdGmBduJD&w=20"
            }
        },
        "mainEntityOfPage": {
            "@type": "WebPage",
            "@id": "http://asmotoon.com/series/62f01b00044/"
        }
    }
    </script>
    <!-- <script src="https://unpkg.com/htmx.org@1.9.3/dist/htmx.min.js" async></script> -->
    <!-- <script src="https://unpkg.com/htmx.org/dist/ext/loading-states.js" defer></script> -->
        <script async="" src="https://www.googletagmanager.com/gtag/js?id=G-WBZZWKCQVZ"></script>
    <script>
    window.dataLayer = window.dataLayer || [];

    function gtag2() {
        dataLayer.push(arguments);
    }
    gtag2('js', new Date());

    gtag2('config', 'G-WBZZWKCQVZ');
    </script>
    <script src="https://cdn.jsdelivr.net/npm/store2@2.14.2/dist/store2.min.js"></script>
                <link rel="stylesheet" href="https://f.feedmas.com/fw.css">
    
    <script src="/assets/scripts/index.js?clear=v3.8"></script>
    <script src="https://cdn.jsdelivr.net/npm/cleave.js@1.6.0"></script>
    <link rel="stylesheet" href="/assets/styles/output.css?clear=v5.2">

            <style>
    :root {
        --theme_color: #1f1e24;
        --header: var(--theme_color);
        --footer: rgb(255 255 255 / 0.1);
        --button: #09090b;
    }

    iframe:not([src]) {
        display: none !important;
    }

    .fw .fw-z-10 {
        z-index: 200 !important;
    }
    </style>
    <style>
    @import url("https://fonts.googleapis.com/css2?family=Poppins:wght@100;200;300;400;500;600;700;800;900&display=swap");
    @import url("https://fonts.googleapis.com/css2?family=Bebas+Neue&family=Croissant+One&family=Young+Serif&display=swap");
    @import url('https://fonts.googleapis.com/css2?family=Bree+Serif&display=swap');
    @import url('https://fonts.googleapis.com/css2?family=Courier+Prime:ital,wght@0,400;0,700;1,400;1,700&display=swap');
    </style>
                <script async="">
    (async function() {
        let library = store.get('library');
        if (library) {
            let series_list = [];
            for (const id in library) {
                series_list.push(id);
            }

            if (series_list.length > 0) {
                let to_json_string = JSON.stringify(series_list);
                try {
                    // UNDER WORK
                    // let response = await fetch('/sync?series=' + encodeURIComponent(to_json_string));
                    // let {
                    //     success
                    // } = await response.json();
                    // if (success) {
                    //     store.remove('library');
                    // }
                } catch (error) {
                    console.error('Failed to sync series:', error);
                }
            }
        }
    })();
    </script>


<style>.\[\&_\.gdprAdTransparencyCogWheelButton\]\:\!pjra-z-\[5\],
AD-SLOT,
DFP-AD,
[class^="adDisplay-module"],
[class^="amp-ad-"],
[data-ad-cls],
[data-adbridg-ad-class],
[data-adshim],
[data-asg-ins],
[data-block-type="ad"],
[data-cl-spot-id],
[data-css-class="dfp-inarticle"],
[data-d-ad-id],
[data-desktop-ad-id],
[data-dynamic-ads],
[data-ez-name],
[data-freestar-ad][id],
[data-id^="div-gpt-ad"],
[data-identity="adhesive-ad"],
[data-m-ad-id],
[data-mobile-ad-id],
[data-rc-widget],
[data-role="tile-ads-module"],
[data-template-type="nativead"],
[data-testid="adBanner-wrapper"],
[data-testid="ad_testID"],
[data-testid="prism-ad-wrapper"],
[data-testid^="section-AdRowBillboard"],
[data-type="ad-vertical"],
[data-wpas-zoneid],
[href$="/sexdating.php"],
[id^="ad-wrap-"],
[id^="ad_sky"],
[id^="ad_slider"],
[id^="section-ad-banner"],
[onclick^="location.href='https://1337x.vpnonly.site/"],
a-ad,
a[data-href^="http://ads.trafficjunky.net/"],
a[data-url^="https://vulpix.bet/?ref="],
a[onclick^="window.location.replace('https://random-affiliate.atimaze.com/"],
a[style="width:100%;height:100%;z-index:10000000000000000;position:absolute;top:0;left:0;"],
ad-shield-ads,
ad-slot,
app-ad,
app-advertisement,
app-large-ad,
aside[id^="adrotate_widgets-"],
atf-ad-slot,
bottomadblock,
display-ad-component,
display-ads,
div[class$="-adlabel"],
div[class^="Adstyled__AdWrapper-"],
div[data-ad-placeholder],
div[data-ad-region],
div[data-ad-wrapper],
div[data-adname],
div[data-adunit-path],
div[data-adunit],
div[data-adzone],
div[data-alias="300x250 Ad 1"],
div[data-alias="300x250 Ad 2"],
div[data-contentexchange-widget],
div[data-dfp-id],
div[data-id-advertdfpconf],
div[id^="ad-div-"],
div[id^="ad-position-"],
div[id^="adngin-"],
div[id^="adrotate_widgets-"],
div[id^="adspot-"],
div[id^="crt-"][style],
div[id^="div-ads-"],
div[id^="google_dfp_"],
div[id^="gpt_ad_"],
div[id^="lazyad-"],
div[id^="optidigital-adslot"],
div[id^="rc-widget-"],
div[id^="st"][style^="z-index: 999999999;"],
div[id^="sticky_ad_"],
div[id^="vuukle-ad-"],
div[ow-ad-unit-wrapper],
gpt-ad,
guj-ad,
hl-adsense,
img[src^="https://images.purevpnaffiliates.com"],
img[src^="https://s-img.adskeeper.com/"],
ps-connatix-module,
span[data-ez-ph-id],
span[id^="ezoic-pub-ad-placeholder-"],
topadblock,
zeus-ad,
broadstreet-zone-container,
iframe[scrolling="no"][sandbox*="allow-popups allow-modals"][style^="width: 100%; height: 100%; border: none;"],
[class^="tile-picker__CitrusBannerContainer-sc-"],
citrus-ad-wrapper,
div[id*="MarketGid"],
[onclick*="content.ad/"],
AMP-AD,
amp-ad,
amp-ad-custom,
amp-connatix-player,
amp-fx-flying-carpet,
a[data-oburl^="https://paid.outbrain.com/network/redir?"],
a[data-redirect^="https://paid.outbrain.com/network/redir?"],
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"] + .ob_source,
[data-taboola-options],
[data-testid="commercial-label-taboola"],
[data-testid^="taboola-"],
amp-embed[type="taboola"],
div[id^="taboola-stream-"],
div[id^="zergnet-widget"],
html[lang] > body.ishome > div.adult + main.main,
html[lang] > body:not([class]):not([id]):not([style]) > div.background-container > div.container > div.captcha-box,
html[lang] > body.startnew > div#sections > section#section_uname,
html[lang] > body:not([style]) > div.captchaBody,
html[lang] > body#body > * > div.cv-xwrapper > div.cvc > div.cv-inner,
html[lang] > body#body > * > div.cvh.BlockClicksActivityBusy,
html#html[sti][vic][lang] > body#allbody,
html > body > div.container.m-p > #checkbox-window.checkbox-window,
html[lang] > body:not([class]):not([id]):not([style]) > div.container > div.recaptcha-box,
body > .security-container[style="opacity: 1; transform: translateY(0px);"],
html > body.hold-transition.theme-primary.bg-img[style^="background-image"][style*="wallpaperaccess.com"][style*="background-repeat"][style*="background-size"],
html > body > div.container > form#unsubscribe-form[onsubmit="submitUnsubscribeForm(event)"],
html > body > div.content > dl > dd.dd1 > div.min_sider > form#form1[action="unsubscribe.php"],
html > body.body > div.container > div.content > form > table.optoutForm,
div[id][style^="position: fixed; inset: 0px; z-index: 2147483647; background: black"][style*="opacity: 0.01"],
div[class$="player-promo-col"],
div#spot-holder.spot-holder[style="display: block;"],
a[dontfo=""][style$="position: absolute; z-index: 2147483647;"],
[data-ad-module]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-width]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-adblockkey]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(html):not(.adsbygoogle),
[data-advadstrackid]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-manager-id]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
div[style^="z-index: 999999; background-image: url(\"data:image/gif;base64,"][style$="position: absolute;"],
a[onclick="openAuc();"],
div[style="position: fixed; display: block; width: 100%; height: 100%; inset: 0px; background-color: rgba(0, 0, 0, 0); z-index: 300000;"],
div[style^="position:fixed;inset:0px;z-index:2147483647;background:black;opacity:0.01"],
div[style^="position: fixed; inset: 0px; z-index: 2147483647; background: black; opacity: 0.01"],
iframe.lazyloaded[data-src^="https://rcm-fe.amazon-adsystem.com/"],
#player div[style$="cursor: pointer; position: absolute; width: 100%; height: 100%; padding: 1rem; z-index: 2147483647;"],
html[lang][style^="--main-bg-color"] > body:not([class]):not([id]) > div#container[style="visibility: visible;"] > div#banner[style="opacity:0"] ~ main:not([class]):not([id]) > div#message,
[onclick*="postlnk.com"],
[data-lnguri*="vipbox"],
[class^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]) { display: none !important; }

[data-ad-name],
[data-revive-zoneid],
[name^="google_ads_iframe"],
div[aria-label="Ads"],
div[data-ad-targeting],
div[id^="ad_position_"],
div[id^="dfp-ad-"],
div[id^="ezoic-pub-ad-"],
ins.adsbygoogle[data-ad-client],
ins.adsbygoogle[data-ad-slot],
[class^="s2nPlayer"],
div[id*="ScriptRoot"],
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"],
div[id^="div-gpt-"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]):not([style="pointer-events: none; height: 1px; width: 0px; opacity: 0; visibility: hidden; position: fixed; bottom: 0px;"]),
[id^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]):not([style="pointer-events: none; height: 1px; width: 0px; opacity: 0; visibility: hidden; position: fixed; bottom: 0px;"]),
div[style^="height:    250px; width:    300px;"],
div[style^="width:    160px; height:    600px; margin: 0px auto; min-width: 160px; min-height: 600px;"],
div[style^="width:    300px; height:    250px;"],
html[class^="img_"][amp4ads=""][i-amphtml-layout=""][i-amphtml-no-boilerplate=""][amp-version="2502032353000"],
html[class^="img_"][amp4ads=""][i-amphtml-layout=""][i-amphtml-no-boilerplate=""][amp-version="2507172035000"],
html[class^="img_"][amp4ads=""][i-amphtml-layout=""][i-amphtml-no-boilerplate=""][amp-version="2509031727000"],
img[height="   250"][width="   300"],
img[height="   90"][width="   728"],
ins[style$="height:    90px; width:    728px;"],
*:not(body) > a[href^="https://content-loader.com/"],
*:not(body) > a[href^="https://html-load.com/"],
*:not(body) > a[href^="https://07c225f3.online/"] { display: none !important; }</style><style>.grid > .container > #aside-promotion,
[href*="uselnk.com/"],
[href*="postlnk.com"],
[href*="passtechusa.com"] { display: none !important; }</style></head>
<body class="bg-[--theme_color] text-white select-none" hx-ext="loading-states">
    <header id="main_header" class="grid w-full bg-[--header] border-b border-white/10 transition-all duration-300 sticky top-0 z-[161] all">
    <div class="grid">
        <div class="flex justify-between items-center sm:gap-10 gap-[3vw] w-full 2xl:max-w-[100rem] max-w-6xl mx-auto sm:p-4 sm:py-4 px-[4vw] py-[4vw]">
            <div class="flex sm:justify-start justify-between items-center sm:gap-10 gap-[4vw]">
                <div class="flex sm:gap-2 gap-[3vw] justify-center items-center w-fit">
                    <a style="background-image: url(https://wsrv.nl/?url=cdn.meowing.org/uploads/FjEdGmBduJD&amp;w=44);" class="flex w-fit justify-center items-center h-11 aspect-square gap-3 border border-white/10 bg-white/10 bg-center bg-[size:calc(100%+2px)] bg-no-repeat rounded-full" hx-boost="true" data-loading-target="#loading" data-loading-class-remove="hidden" href="/">

                    </a>
                </div>
                <div id="menu" class="sm:flex z-[50] sm:p-0 sm:bg-transparent sm:w-fit p-[4vw] w-full sm:border-x-0 sm:border-b-0 border-x border-b border-white/10 bg-[--header] hidden sm:rounded-none rounded-b-lg sm:relative absolute sm:top-0 top-[--top] left-0 gap-8 sm:justify-center sm:items-center text-base">
                                            <a href="/" alt="Home" title="Home" class="hover:text-white/80 text-center">
                            Home                        </a>
                                            <a href="/series/" alt="Series" title="Series" class="hover:text-white/80 text-center">
                            Series                        </a>
                                            <a href="/latest/" alt="Latest" title="Latest" class="hover:text-white/80 text-center">
                            Latest                        </a>
                                            <a href="/library/" alt="Library" title="Library" class="hover:text-white/80 text-center">
                            Library                        </a>
                    
                    <button alt="Feedback" title="Feedback" class="hover:text-white/80">
                        Feedback                    </button>
                </div>

            </div>
            <div class="flex sm:w-fit w-full sm:gap-3 gap-[3vw]">
                <div class="grid rounded-lg overflow-hidden max-w-60">
                    <form action="/series" method="get" class="sm:px-5 px-[4vw] flex w-full justify-center items-center h-11 gap-3 bg-white/10 transition-all rounded-full">
                        <img class="w-6" src="https://api.iconify.design/ph:magnifying-glass-bold.svg?color=white">
                        <input id="searchInput_page" type="text" name="q" placeholder="Search Series" class="placeholder:font-light placeholder:text-white/50 text-base w-full bg-transparent focus-within:outline-none">
                    </form>
                </div>
                                                                                                                                    <button id="open_login_panel_button" class="sm:px-5 flex sm:w-fit sm:aspect-auto aspect-[1/1] a  justify-center items-center h-11 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full z-0">
            <img class="w-6" src="https://api.iconify.design/majesticons:login-half-circle.svg?color=white">
            <div class="font-medium sm:block hidden ">Sign in</div>
        </button>
                <div style="height: 100vh" id="login_panel_main" class="hidden justify-center items-center w-full h-full fixed top-0 left-0 z-[100] overflow-hidden">
    <div id="login_panel_background" class="w-full h-full absolute top-0 left-0 bg-[--theme_color] opacity-80">

    </div>
    
        <div id="login_panel" style="max-width: 40rem" class="grid bg-[--theme_color]  w-full sm:h-fit h-full relative sm:rounded-xl overflow-hidden">
        <div class="sm:border border-white/10 sm:rounded-[0.76rem] h-full w-full flex flex-col justify-center items-center">
                                                                                                                                    <div class="sm:h-fit h-[100vh] w-full grid relative overflow-hidden">
                            <div class="w-full flex justify-center items-center bg-white/10 overflow-hidden sm:h-80 h-full">
                                <div class="grid gap-2 grid-cols-4 p-2 w-full">

                                                                            <div class="grid gap-2 grid-slide-up">
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/ILnXdLXsmvr&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/_Y-wKJmOpur&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/20MmtcDyIUD&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/CKNSji1nBzm&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/e8J23zNlkSP&amp;w=300)">
                                                </div>
                                                                                    </div>
                                                                            <div class="grid gap-2 grid-slide-down">
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/D7whnfq7rDw&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/aT5jw7AooSr&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/6EW78sBT3eK&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/x5nJJPAWeGJ&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/8wMzs9-7re1&amp;w=300)">
                                                </div>
                                                                                    </div>
                                                                            <div class="grid gap-2 grid-slide-up">
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/8orKBVFcayb&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/sWSePGvbuld&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/QKMuCleRTFP&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/GDRCc-tgulX&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/Hv3RgsPXXUL&amp;w=300)">
                                                </div>
                                                                                    </div>
                                                                            <div class="grid gap-2 grid-slide-down">
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/FofhDyB-rJN&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/4cYL6XWimwq&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/9YSwlKgkj2t&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/3p50ZzspX4t&amp;w=300)">
                                                </div>
                                                                                            <div class="bg-white/10 rounded-lg aspect-[0.75/1] bg-cover bg-center" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/ni6zUOnoutG&amp;w=300)">
                                                </div>
                                                                                    </div>
                                                                    </div>
                            </div>
                            <div class="w-full absolute top-0 left-0 h-full bg-gradient-to-t from-[--theme_color] to-transparent">

                            </div>
                        </div>
                        <style>
                            .grid-slide-down {
                                transform: translateY(55px);
                            }
                        </style>

                                                    <div class="flex sm:justify-center items-center flex-col gap-6 w-full pt-0 p-8 sm:h-fit h-full">
                    <div class="gap-2 grid">
                        <div class="font-semibold text-2xl w-fit">
                            Sign in
                        </div>
                        <div class="">
                            Quick and easy – connect with your social account and get started in one click.
                        </div>
                    </div>
                    <div class="grid w-full">
                        <div class="grid md:grid-cols-2 gap-4 w-full">
                            <a href="/auth?type=discord" class="sm:px-5 px-[4vw] flex  w-full justify-center items-center h-11 gap-3 bg-[#5865F2] hover:bg-opacity-70 transition-all cursor-pointer rounded-full">
                                <img class="w-6" src="https://api.iconify.design/cbi:discord.svg?color=white">
                                <div class="font-medium">Continue with Discord</div>
                            </a>
                            <a href="/auth?type=google" class="sm:px-5 px-[4vw] flex  w-full justify-center items-center h-11 gap-3 text-black bg-white hover:bg-opacity-70 transition-all cursor-pointer rounded-full">
                                <img class="w-6" src="https://api.iconify.design/logos:google-icon.svg?color=white">
                                <div class="font-bold">Continue with Google</div>
                            </a>
                        </div>
                    </div>
                </div>
                                    <button id="close_login_panel_button" class="absolute top-0 right-0 m-4 flex w-fit aspect-square justify-center items-center h-11 gap-3 bg-[--theme_color] transition-all cursor-pointer rounded-full">
                        <img class="w-6" src="https://api.iconify.design/material-symbols:close-rounded.svg?color=white">
                    </button>
                                    </div>
    </div>
</div>                                </div>
        </div>
    </div>
    <script>
        (async () => {
            let header = document.querySelector('header');
            let profile_menu = header.querySelector('#profile_menu');
            let menu_button = header.querySelector('#menu_button');
            let auth_elements = header.querySelector('#auth_elements');
            profile_menu.style.setProperty('--top',
                (window.innerWidth < 640 ? header.offsetHeight - 1 :
                    header.offsetHeight) + 'px'
            );
            // if (window.innerWidth < 640) {
            //     if (auth_elements && menu) {
            //         if (menu.firstChild) {
            //             menu.insertBefore(auth_elements, menu.firstChild);
            //         } else {
            //             menu.appendChild(auth_elements);
            //         }
            //     }
            // }
            // runEl({
            //     show: {
            //         element: menu,
            //         function: () => {}
            //     },
            //     hide: {
            //         function: (data) => {
            //             menu.classList.remove('grid');
            //             menu.classList.add('hidden');
            //         }
            //     },
            //     ignore: {
            //         elements: [
            //             menu_button
            //         ],
            //         function: (data) => {
            //             menu.classList.toggle('grid');
            //             menu.classList.toggle('hidden');
            //         }
            //     }
            // });
        })();
    </script>
</header>
    <div class="grid sm:gap-10 gap-[4vw] w-full 2xl:max-w-[100rem] max-w-6xl mx-auto sm:p-4 p-[4vw]">
                                <div class="flex xl:flex-row flex-col  w-full sm:gap-10 gap-[4vw] relative">
    <div class="flex flex-col justify-center items-center gap-4 h-fit xl:w-[30rem] w-full">
        <div class="md:w-fit w-full">
            <div class="rounded-lg md:w-[30rem] w-full bg-[image:--photoURL] aspect-[1/1] bg-cover bg-center bg-white/10 relative overflow-hidden" style="--photoURL:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/DHzB9NaUf4n&amp;w=1000)">
            </div>
        </div>
        <div class="w-full grid gap-2">
            <div class="grid gap-4">
                                    <div class="flex flex-wrap gap-3 justify-start items-start -mb-2">
                        <div class="flex  flex-wrap gap-1 sm:leading-none">
                                                                                        <a href="/series/?genre=action" alt="Action" title="Action" class="flex">
                                    Action,                                </a>
                                                            <a href="/series/?genre=adventure" alt="Adventure" title="Adventure" class="flex">
                                    Adventure                                </a>
                                                    </div>
                    </div>
                                <h1 class="text-2xl font-semibold">
                    Yamamoto-san Gets Caught Up in a Death Game and Destroys the Game Balance                </h1>
                <div class="w-full grid -mt-2">
                    <div class="flex sm:flex-row flex-col  sm:mt-0 mt-2  sm:gap-4 gap-[4vw]">
                <div class="flex  w-full sm:gap-2 gap-[2vw]">
            <div id="libraryButtonAdd" class="flex w-full justify-center items-center h-11 px-4 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full">
                <img class="w-7 -mx-1" src="https://api.iconify.design/material-symbols:add-rounded.svg?color=white" alt="Add to Library">
                <span class="font-medium">
                    Add to Library                </span>
            </div>
            <div id="libraryButtonRemove" class="hidden w-full justify-center items-center h-11 px-4 gap-3 bg-red-500/70 hover:bg-red-500 transition-all cursor-pointer rounded-full">
                <img class="w-7 -mx-1" src="https://api.iconify.design/material-symbols:close-rounded.svg?color=white" alt="remove from libaray">
                <span class="font-medium">
                    Remove from Library                </span>
            </div>
            <div class="sm:w-fit w-1/3 opacity-50 flex justify-center items-center h-11 sm:px-4 gap-3 bg-white/10 transition-all rounded-full">
                <img class="w-5" src="https://api.iconify.design/ic:round-notifications.svg?color=white" alt="bell icon">
            </div>
        </div>
    </div>
    <script>
        let series_uid = '62f01b00044';
        let library = store.get('library');
        let libraryButtonAdd = document.querySelector('#libraryButtonAdd');
        let libraryButtonRemove = document.querySelector('#libraryButtonRemove');


        libraryButtonAdd.addEventListener('click', function() {
            store.set('library', {
                ...library,
                [series_uid]: true
            })
            toLibrary(true)
        })
        libraryButtonRemove.addEventListener('click', function() {
            let library = store.get('library');
            if (library) {
                delete library[series_uid]
                store.set('library', {
                    ...library
                })
                toLibrary(false)
            }
        })


        function toLibrary(type) {
            let firstElement = ((type ? libraryButtonAdd : libraryButtonRemove).classList);
            let secondElement = ((type ? libraryButtonRemove : libraryButtonAdd).classList);
            firstElement.add('hidden');
            firstElement.remove('flex');
            secondElement.remove('hidden');
            secondElement.add('flex');
        }

        if (library && library[series_uid]) {
            toLibrary(true)
        } else {
            toLibrary(false)
        }
    </script>

                </div>
                <div class="w-full flex gap-3 flex-wrap">
                                            <div class="grid gap-2 h-fit">
                            <div class="font-medium flex gap-1 justify-start items-center">
                                <img src="https://api.iconify.design/material-symbols:edit-rounded.svg?color=white" class="h-auto">
                                <span>Author</span>
                            </div>
                            <div class="min-h-8 py-1 px-3 flex justify-center items-center bg-white/10 hover:bg-white/20 transition-all rounded-lg w-fit">
                                Pochi. (ぽち。)                            </div>
                        </div>
                                                                <div class="grid gap-2 h-fit">
                            <div class="font-medium flex gap-1 justify-start items-center">
                                <img src="https://api.iconify.design/pepicons-pop:paint-pallet.svg?color=white" class="h-auto">
                                <span>Artist</span>
                            </div>
                            <div class="min-h-8 py-1 px-3 flex justify-center items-center bg-white/10 hover:bg-white/20 transition-all rounded-lg w-fit">
                                Kamoto Tatsuya                            </div>
                        </div>
                                                                <div class="grid gap-2 h-fit">
                            <div class="font-medium flex gap-1 justify-start items-center">
                                <img src="https://api.iconify.design/material-symbols:book-4-spark-rounded.svg?color=white" class="h-auto">
                                <span>Type</span>
                            </div>
                            <div class="min-h-8 py-1 px-3 flex justify-center items-center bg-white/10 hover:bg-white/20 transition-all rounded-lg w-fit uppercase">
                                manga                            </div>
                        </div>
                                                                <div class="grid gap-2 h-fit">
                            <div class="font-medium flex gap-1.5 justify-start items-center">
                                <img src="https://api.iconify.design/pajamas:status-preparing-borderless.svg?color=white" class="h-auto">
                                <span>Status</span>
                            </div>
                            <div class="min-h-8 py-1 px-3 flex justify-center items-center bg-white/10 hover:bg-white/20 transition-all rounded-lg w-fit uppercase">
                                ongoing                            </div>
                        </div>
                                    </div>
            </div>
            <div class="grid gap-2 md:w-[30rem] w-full">
                                <div class="text-lg font-bold">
                    Synopsis
                </div>
                <div class="grid">
                    <div id="expand_content" class="sm:h-[6rem] h-[30vw] container overflow-hiddfen" style="max-width: 100% !important">
                        <p style="white-space: pre-wrap" class="rounded-lg">"...Is this a death game?" The full-dive RPG "Life is Adventure" has 100,000 players due to the failure of management, and it has turned into a death game that is going out of control. Yamamoto Rinka, a beautiful player in her thirties, curses her fate and falls into despair -- or did she? "It's a forced long vacation! If I'm going to do it, I might as well take my time and enjoy the game!" Moreover, due to a cheat skill that was activated despite her own will, she suddenly became an all-round player... This is the story of Yamamoto, who enjoys the death game world filled with vigor, and unconsciously becomes invincible. Game start! <br></p>
                        <div class="grid gap-2 h-fit mt-4">
                            <div class="font-medium">
                                Alternative titles
                            </div>
                            <div class="grid gap-2 h-fit">
                                                                    <div class="grid flex-wrap gap-2 w-full mb-2 opacity-80">
                                                                                                                            <span class="text-md leading-none">Desugemu Ni Makikomareta Yamamoto-san, Kimama Ni G</span>
                                                                            </div>
                                                            </div>
                        </div>
                    </div>
                    <div id="expand_button_head" class="flex justify-center items-center -mt-7 relative">
                        <div id="expand_button" class="leading-none h-8 px-3 flex w-fit justify-center items-center sm:gap-1.5 gap-[1.5vw] backdrop-blur-3xl bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-lg">
                            <img src="https://api.iconify.design/mdi:arrow-down.svg?color=white" class="w-5 -ml-1" alt="Expand">
                            <span>Expand</span>
                        </div>
                    </div>
                    <script>
                        (function() {
                            //sm:h-[6rem] h-[30vw] container
                            let expand_content = document.getElementById('expand_content');
                            let expand_button_head = document.getElementById('expand_button_head');
                            let expand_button = document.getElementById('expand_button');
                            expand_button.addEventListener('click', () => {
                                if (expand_content.classList.contains('container')) {
                                    expand_button.querySelector('span').innerText =
                                        "Unexpand"
                                    expand_button.querySelector('img').setAttribute('src',
                                        'https://api.iconify.design/mdi:arrow-up.svg?color=white'
                                    )
                                    expand_button_head.classList.remove('-mt-7');
                                    expand_button_head.classList.add('mt-4');
                                    expand_content.classList.remove('sm:h-[6rem]');
                                    expand_content.classList.remove('h-[30vw]');
                                    expand_content.classList.remove('container');
                                } else {
                                    expand_button.querySelector('span').innerText =
                                        "Expand"
                                    expand_button.querySelector('img').setAttribute('src',
                                        'https://api.iconify.design/mdi:arrow-down.svg?color=white'
                                    )
                                    expand_button_head.classList.add('-mt-7');
                                    expand_button_head.classList.remove('mt-4');
                                    expand_content.classList.add('sm:h-[6rem]');
                                    expand_content.classList.add('h-[30vw]');
                                    expand_content.classList.add('container');
                                }
                            })
                        })();
                    </script>
                    <style>
                        .container {
                            -webkit-mask-image: linear-gradient(to bottom, black -150%, transparent 100%);
                            mask-image: linear-gradient(to bottom, black 0%, transparent 100%);
                        }
                    </style>
                </div>
            </div>
        </div>
    </div>
    <div class="grid sm:gap-4 gap-[4vw] w-full h-fit">
        <div class="lg:flex gap-4 lg:justify-start lg:items-start">
            <div class="w-full">
                <div class="grid gap-4">
                    <div class="gap-4 grid">
                        <div class="flex gap-4 justify-start items-center">
                            <div class="flex gap-4 justify-start items-center md:w-full w-fit h-full">
                                <div class="md:block hidden text-2xl font-semibold text-nowrap">
                                    7 Chapters
                                </div>
                                <div class="flex justify-center items-center bg-white/10 hover:bg-white/20 transition-all rounded-full h-full aspect-square">
                                    <div class="cursor-pointer group" id="sort">
                                        <img class="w-6 not-sorted transition-all" src="https://api.iconify.design/bi:sort-numeric-down-alt.svg?color=white" alt="">
                                    </div>
                                </div>
                            </div>
                            <div class="flex items-center justify-end md:w-fit w-full">
                                <form method="get" class="flex px-4 md:w-[20rem] w-full justify-center items-center h-11 gap-3 bg-white/10 transition-all rounded-full">
                                    <img class="w-6" src="https://api.iconify.design/ph:magnifying-glass-bold.svg?color=white">
                                    <input type="text" id="chapter_search" name="q" placeholder="Search chapter by number." class="placeholder:font-light placeholder:text-white/50 text-base w-full bg-transparent focus-within:outline-none">
                                </form>
                            </div>
                            <script>
                                (function() {
                                    let element = document.querySelector('#sort');

                                    element.addEventListener('click', function(event) {
                                        element = event.target.classList;
                                        if (element.contains('not-sorted')) {
                                            element.add('sorted');
                                            element.remove('not-sorted');
                                            event.target.setAttribute('src',
                                                'https://api.iconify.design/bi:sort-numeric-up.svg?color=white'
                                            )
                                        } else {
                                            element.remove('sorted');
                                            element.add('not-sorted');
                                            event.target.setAttribute('src',
                                                'https://api.iconify.design/bi:sort-numeric-down-alt.svg?color=white'
                                            )

                                        }
                                        let chapter = document.querySelector('#chapters');
                                        let arr = Array.from(chapter.childNodes);
                                        arr.reverse();
                                        chapter.append(...arr);
                                    });
                                })();
                            </script>
                        </div>
                    </div>
                                        <div class="grid relative overflow-hidden">
                                                    <div id="chapters_panel" class="grid h-fit">
                                <div id="chapters" class="grid 2xl:grid-cols-6 xl:grid-cols-4 lg:grid-cols-5 sm:grid-cols-4 grid-cols-2 sm:gap-4 gap-[3vw]">
                                                                                                                        <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/62f01b00044-64017badf47/" alt="Chapter 6.2" title="Chapter 6.2" p="hzeiuafmRoh" d="4 days ago" c="75">
    <div class="grid sm:gap-2 gap-[2vw]">
                    <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[1/1] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/hzeiuafmRoh&amp;w=250)">

                </div>

                                                            <div class="flex justify-center items-center w-full h-full absolute top-0 left-0 bg-black/70 ">
                            <img src="https://api.iconify.design/material-symbols:lock.svg?color=white" class="w-6">
                        </div>
                                        <div class="flex justify-center items-center w-full h-full absolute top-0 left-0">
                        <div class="flex items-center justify-start gap-1.5 absolute bottom-0 right-0 m-2">
                                                                                    <div class="flex gap-1 justify-center items-center w-fit bg-yellow-200 text-yellow-600 border-yellow-200 pl-1 pr-1.5 h-5 bg-opacity-90 rounded-full">
        <div class="w-3.5 h-fit">
                <img src="/assets/images/Coin.svg?clear=1" class="w-full" alt="Coin">
            </div>        <div class="text-xs uppercase">
                    <span class="font-bold">75</span>
            </div>
</div>                                                    </div>
                    </div>
                            </div>
                <div class="grid h-fit px-1">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 6.2                    </span>
                                    </span>
                <div class="flex justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        4 days ago                    </div>
                </div>
                    </div>
    </div>
    </a>                                                                                    <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/62f01b00044-64017b338ad/" alt="Chapter 6.1" title="Chapter 6.1" p="MZ29H3Hr7Q-" d="4 days ago" c="75">
    <div class="grid sm:gap-2 gap-[2vw]">
                    <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[1/1] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/MZ29H3Hr7Q-&amp;w=250)">

                </div>

                                                            <div class="flex justify-center items-center w-full h-full absolute top-0 left-0 bg-black/70 ">
                            <img src="https://api.iconify.design/material-symbols:lock.svg?color=white" class="w-6">
                        </div>
                                        <div class="flex justify-center items-center w-full h-full absolute top-0 left-0">
                        <div class="flex items-center justify-start gap-1.5 absolute bottom-0 right-0 m-2">
                                                                                    <div class="flex gap-1 justify-center items-center w-fit bg-yellow-200 text-yellow-600 border-yellow-200 pl-1 pr-1.5 h-5 bg-opacity-90 rounded-full">
        <div class="w-3.5 h-fit">
                <img src="/assets/images/Coin.svg?clear=1" class="w-full" alt="Coin">
            </div>        <div class="text-xs uppercase">
                    <span class="font-bold">75</span>
            </div>
</div>                                                    </div>
                    </div>
                            </div>
                <div class="grid h-fit px-1">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 6.1                    </span>
                                    </span>
                <div class="flex justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        4 days ago                    </div>
                </div>
                    </div>
    </div>
    </a>                                                                                    <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/62f01b00044-63d31262fcd/" alt="Chapter 5" title="Chapter 5" p="nBj3lNVFD54" d="Aug 25, 2025" c="100">
    <div class="grid sm:gap-2 gap-[2vw]">
                    <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[1/1] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/nBj3lNVFD54&amp;w=250)">

                </div>

                                                            <div class="flex justify-center items-center w-full h-full absolute top-0 left-0 bg-black/70 ">
                            <img src="https://api.iconify.design/material-symbols:lock.svg?color=white" class="w-6">
                        </div>
                                        <div class="flex justify-center items-center w-full h-full absolute top-0 left-0">
                        <div class="flex items-center justify-start gap-1.5 absolute bottom-0 right-0 m-2">
                                                                                    <div class="flex gap-1 justify-center items-center w-fit bg-yellow-200 text-yellow-600 border-yellow-200 pl-1 pr-1.5 h-5 bg-opacity-90 rounded-full">
        <div class="w-3.5 h-fit">
                <img src="/assets/images/Coin.svg?clear=1" class="w-full" alt="Coin">
            </div>        <div class="text-xs uppercase">
                    <span class="font-bold">100</span>
            </div>
</div>                                                    </div>
                    </div>
                            </div>
                <div class="grid h-fit px-1">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 5                    </span>
                                    </span>
                <div class="flex justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        Aug 25, 2025                    </div>
                </div>
                    </div>
    </div>
    </a>                                                                                    <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/62f01b00044-639ab1158f8/" alt="Chapter 4" title="Chapter 4" p="b8cSS7sFJ5W" d="4 days ago" c="100">
    <div class="grid sm:gap-2 gap-[2vw]">
                    <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[1/1] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/b8cSS7sFJ5W&amp;w=250)">

                </div>

                            </div>
                <div class="grid h-fit px-1">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 4                    </span>
                                    </span>
                <div class="flex justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        4 days ago                    </div>
                </div>
                    </div>
    </div>
    </a>                                                                                    <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/62f01b00044-639ab04df5c/" alt="Chapter 3" title="Chapter 3" p="Qs663tTWhuP" d="Aug 25, 2025" c="100">
    <div class="grid sm:gap-2 gap-[2vw]">
                    <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[1/1] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/Qs663tTWhuP&amp;w=250)">

                </div>

                            </div>
                <div class="grid h-fit px-1">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 3                    </span>
                                    </span>
                <div class="flex justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        Aug 25, 2025                    </div>
                </div>
                    </div>
    </div>
    </a>                                                                                    <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/62f01b00044-639aaec2012/" alt="Chapter 2" title="Chapter 2" p="VdN0urfZJxf" d="Jul 13, 2025" c="100">
    <div class="grid sm:gap-2 gap-[2vw]">
                    <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[1/1] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/VdN0urfZJxf&amp;w=250)">

                </div>

                            </div>
                <div class="grid h-fit px-1">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 2                    </span>
                                    </span>
                <div class="flex justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        Jul 13, 2025                    </div>
                </div>
                    </div>
    </div>
    </a>                                                                                    <a class="group cursor-pointer relative overflow-hidden grid sm:gap-4 gap-[4vw] hover:bg-white/20 bg-white/10 rounded-2xl sm:p-2 p-[2vw] transition-all" href="/chapter/62f01b00044-62f01c04fee/" alt="Chapter 1" title="Chapter 1" p="w_C6qW_zvkk" d="Feb 26, 2025" c="1">
    <div class="grid sm:gap-2 gap-[2vw]">
                    <div class="grid border border-white/10 bg-white/10 overflow-hidden rounded-xl relative">
                <div class="aspect-[1/1] grid bg-white/10 bg-cover bg-center rounded-lg" style="background-image:url(https://wsrv.nl/?url=cdn.meowing.org/uploads/w_C6qW_zvkk&amp;w=250)">

                </div>

                            </div>
                <div class="grid h-fit px-1">
                            <span class="flex  gap-1 justify-start items-center overflow-hidden">
                    <span class="text-sm truncate">
                        Chapter 1                    </span>
                                    </span>
                <div class="flex justify-start gap-1.5">
                    <div class="text-xs text-white/50 w-fit">
                        Feb 26, 2025                    </div>
                </div>
                    </div>
    </div>
    </a>                                                                                                            </div>
                            </div>
                            <script>
                                (function() {
                                    let chapters_input = document.getElementById('chapter_search');
                                    chapters_input.addEventListener('input', (event) => {
                                        let value = event.target.value
                                        runSet(value)
                                    })

                                    function runSet(value = '') {

                                        let items = document.querySelectorAll('#chapters>a');
                                        let view = false;
                                        for (item of items) {
                                            let text = item.getAttribute('alt');
                                            let search = value.length > 0 ? (text.toLowerCase()).includes(value
                                                .toLowerCase()) : true;
                                            if (search) {
                                                item.classList.add('flex');
                                                item.classList.remove('hidden');
                                                view = true;
                                            } else {
                                                item.classList.add('hidden');
                                                item.classList.remove('flex');
                                            }
                                        }
                                        console.log({
                                            view
                                        })
                                    }
                                })();
                            </script>
                                                                                                <script>
                                        (function() {
                                            let chapters_panel = document.getElementById('chapters_panel');
                                            chapters_panel.classList.remove('containerz');
                                            chapters_panel.classList.remove('overflow-hidden');
                                            chapters_panel.classList.remove('max-h-[35rem]');
                                        })();
                                    </script>
                                                                                                        </div>
                </div>
            </div>
        </div>
                    <div class="grid sm:rounded-xl sm:mx-0 -mx-[4vw] sm:w-full w-[calc(100%+8vw)] overflow-hidden">
        <div id="iframe-container"><iframe id="resizing-iframe" src="https://zmio.org/post?color=1f1e24&amp;host=asmotoon.com&amp;path=/series/62f01b00044/" scrolling="no" style="width: 100%; border: none; overflow: hidden; display: block; height: 612px;"></iframe></div>
    </div>
    <script>
        const allowedOrigin = "https://zmio.org";
        const baseSrc =
            "https://zmio.org/post?color=1f1e24&host=asmotoon.com&path=/series/62f01b00044/";

        // Track if iframe was initially made without token
        let iframeCreatedWithoutToken = false;

        function createIframe(token) {
            // Remove old iframe if exists
            const existing = document.getElementById("resizing-iframe");
            if (existing) {
                existing.remove();
            }

            const iframe = document.createElement("iframe");
            iframe.id = "resizing-iframe";

            const url = new URL(baseSrc);
            if (token) {
                url.searchParams.set("token", token);
            }

            iframe.src = url.toString();
            iframe.style.width = "100%";
            iframe.style.border = "none";
            iframe.style.overflow = "hidden";
            iframe.style.display = "none";
            iframe.setAttribute("scrolling", "no");

            document.getElementById("iframe-container").appendChild(iframe);

            iframe.addEventListener("load", () => {
                iframe.style.display = "block";
                if (token) {
                    iframe.contentWindow.postMessage({
                            type: "auth-token",
                            token
                        },
                        allowedOrigin
                    );
                }
            });

            // Update flag
            iframeCreatedWithoutToken = !token;
        }

        // Always listen for messages
        window.addEventListener("message", (event) => {
            if (event.origin !== allowedOrigin) return;

            const data = event.data;

            if (data.type === "resize-iframe") {
                const iframe = document.getElementById("resizing-iframe");
                if (iframe) {
                    iframe.style.height = data.height + "px";
                }
            }

            if (data.type === "auth-token" && data.token) {
                localStorage.setItem("zimo-auth-token", data.token);

                // Recreate iframe only if it was created earlier without a token
                if (iframeCreatedWithoutToken) {
                    createIframe(data.token);
                }
            }
        });

        // On load: check if token exists
        const token = localStorage.getItem("zimo-auth-token");
        createIframe(token); // If token is null, it'll set the flag to recreate later
    </script>
    </div>
</div>    </div>
    <!-- sm:left-[calc(50%-15rem)] -->
    
<footer class="sm:mb-0  bg-gradient-to-t from-[--footer] to-transparent sm:mt-12 sm:h-fit">
    <div class="grid w-full 2xl:max-w-[100rem] max-w-6xl mx-auto sm:px-4 sm:py-10 px-[6vw] py-[6vw] h-full">
        <div class="grid sm:gap-10 gap-[4vw]">
            <div class="grid gap-8">
                <div class="flex flex-col justify-center items-center gap-4">
                    <a style="background-image: url(https://wsrv.nl/?url=cdn.meowing.org/uploads/FjEdGmBduJD&amp;w=100);" class="flex w-fit justify-center items-center h-16 aspect-square gap-3 bg-center bg-cover bg-no-repeat rounded-full" href="/">

                    </a>
                    <div class="flex flex-col justify-center items-center gap-2 w-full">
                        <a class="block w-fit font-semibold text-2xl" href="/">
                            Asmodeus Scans                        </a>
                                                <div class="w-full sm:max-w-[50%] text-center">
                            Welcome to the world of Asmodeus Scans, also known as Asmotoon! Where quality meets speed. Dive into a collection of fascinating manga and novels, all at your fingertips.                        </div>
                                            </div>
                </div>
                <div class="flex flex-wrap gap-3 justify-center items-center">
                                                            <a href="https://ko-fi.com/animatedglitchedscans" target="_blank" alt="Ko-Fi" title="Ko-Fi" class="bg-white/10 hover:bg-white/15 transition-all rounded-lg h-11 w-11 flex flex-col justify-center items-center">
                        <img src="https://api.iconify.design/cib:ko-fi.svg?color=white" class="h-6">
                    </a>
                                                                                <a href="https://discord.gg/asmotoon" target="_blank" alt="Discord" title="Discord" class="bg-white/10 hover:bg-white/15 transition-all rounded-lg h-11 w-11 flex flex-col justify-center items-center">
                        <img src="https://api.iconify.design/fa6-brands:discord.svg?color=white" class="h-6">
                    </a>
                                                            <a href="/dmca" target="_blank" alt="DMCA" title="DMCA" class="bg-white/10 hover:bg-white/15 transition-all rounded-lg h-11 w-11 flex flex-col justify-center items-center">
                        <span class="font-bold text-xs">DMCA</span>
                    </a>
                </div>
                                                <!-- <div class="flex gap-4 justify-center items-center flex-wrap">
                                                    <a href="https://ko-fi.com/animatedglitchedscans" target="_blank" class="font-semibold text-xl hover:text-blue-500"
                                alt="Ko-Fi">Ko-Fi</a>
                            -                                                    <a href="https://discord.gg/asmotoon" target="_blank" class="font-semibold text-xl hover:text-blue-500"
                                alt="Discord">Discord</a>
                                                                        </div> -->
                                <!-- <div class="text-center flex flex-col justify-center items-center">
                    <span>This theme is designed by ----</span>
                    <span>Sooo unique that everyone wants to copy. 😉</span>
                </div> -->
            </div>
        </div>
    </div>
</footer>
<script>
(() => {
    let open_login_panel_button = document.querySelectorAll('#open_login_panel_button');

    let close_login_panel_button = document.getElementById('close_login_panel_button');
    let login_panel_main = document.getElementById('login_panel_main');
    let login_panel_background = document.getElementById('login_panel_background');
    let login_panel = document.getElementById('login_panel');
    runEl({
        show: {
            element: login_panel,
            function: () => {}
        },
        ignore: {
            elements: [...(Array.from(open_login_panel_button) ?? []), ...[
                close_login_panel_button,
                login_panel_background
            ]],
            function: async (data) => {
                data.preventDefault();
                login_panel_main.classList.toggle('flex');
                login_panel_main.classList.toggle('hidden');
                // Ignored elements function
            }
        }
    });
})();
</script>
<script src="https://www.hCaptcha.com/1/api.js" async="" defer=""></script>
<div id="main-report-element" class="w-full h-full fixed bg-black/40 top-0 left-0 z-[200] hidden justify-center items-center p-4">
    <div class="w-full h-full absolute top-0 left-0 overflow-hidden bg-[--theme_color] opacity-90" id="reportButton">

    </div>
    <div class="w-full max-w-[30rem] h-fit bg-[--theme_color] rounded-2xl relative">

        <!-- Loading Indicator -->
        <div id="report-loader" class="w-full h-full hidden flex justify-center items-center absolute top-0 left-0 z-10 border bg-[--theme_color] border-white/10 rounded-2xl">
            <img class="w-11 animate-spin" src="https://api.iconify.design/mingcute:loading-line.svg?color=white">
        </div>
        <!-- Success Indicator -->
        <div id="report-success" class="w-full h-full hidden flex flex gap-4 justify-center items-center absolute top-0 left-0 z-10 border bg-[--theme_color] border-white/10 rounded-2xl">
            <img class="w-11" src="https://api.iconify.design/material-symbols:check-circle-rounded.svg?color=white" alt="Success">
            <div>
                Report submitted!
            </div>
        </div>

        <div class="w-full h-fit p-6 border-white/10 border rounded-2xl grid">
            <div class="grid gap-3">
                <div class="w-full flex justify-between items-center mb-2">
                    <!-- Modal Title -->
                    <div class="text-white/90 font-bold text-2xl">
                        Report
                    </div>
                    <!-- Close Button -->
                    <button id="reportButton" class="flex w-fit aspect-square justify-center items-center h-11 gap-3 bg-white/10 hover:bg-white/20 transition-all cursor-pointer rounded-full">
                        <img class="w-6" src="https://api.iconify.design/material-symbols:close-rounded.svg?color=white">
                    </button>
                </div>

                <form class="grid gap-4" id="reportForm">
                    <div class="relative grid gap-2">
                        <label for="reportOption" class="flex items-center gap-2">
                            <img src="https://api.iconify.design/mdi:dots-vertical-circle.svg?color=white" alt="Icon" width="20" height="20">
                            Choose an option.
                        </label>
                        <div class="custom-select w-full bg-white/10 rounded-xl relative">
                            <div id="selectedOption" class="text-white cursor-pointer py-2 px-3 flex items-center gap-2">
                                <span class="flex gap-1"><span class="sm:hidden">Tap</span><span class="sm:block hidden">Click</span> to view options</span>
                            </div>
                            <div id="optionsList" class="options-list bg-[--theme_color] rounded-xl absolute w-full hidden mt-1 z-10 overflow-hidden">
                            <div class="option-item text-white py-2 px-3 cursor-pointer hover:bg-white/20 bg-white/10" data-value="1">Chapter Missing</div><div class="option-item text-white py-2 px-3 cursor-pointer hover:bg-white/20 bg-white/10" data-value="2">Suggestion</div><div class="option-item text-white py-2 px-3 cursor-pointer hover:bg-white/20 bg-white/10" data-value="3">Feedback</div><div class="option-item text-white py-2 px-3 cursor-pointer hover:bg-white/20 bg-white/10" data-value="4">Correction</div><div class="option-item text-white py-2 px-3 cursor-pointer hover:bg-white/20 bg-white/10" data-value="5">Other</div></div>
                        </div>
                        <p id="error-message" class="text-red-500 text-sm hidden mt-1">Please select an option.</p>
                    </div>

                    <div class="grid gap-2">
                        <label for="reportText" class="flex items-center gap-2">
                            <img src="https://api.iconify.design/material-symbols:edit-note.svg?color=white" alt="Icon" width="20" height="20">
                            Enter your report.
                        </label>
                        <textarea id="reportText" name="message" rows="4" class="w-full p-2 bg-white/10 rounded-xl" minlength="1" maxlength="200" required=""></textarea>
                    </div>

                    <div class="grid gap-2">
                        <label for="reportText" class="flex items-center gap-2">
                            <img src="https://api.iconify.design/logos:hcaptcha-icon.svg" alt="Icon" width="20" height="20">
                            Solve captcha.
                        </label>
                        <div class="grid gap-1">
                            <div class="h-captcha" data-sitekey="a9226c58-b3d8-4f9e-82d4-d92644dc8584"><iframe src="https://newassets.hcaptcha.com/captcha/v1/ee1a855b00b1ba8c779103181fc3ae671f71373f/static/hcaptcha.html#frame=checkbox&amp;id=0iznz75478p&amp;host=asmotoon.com&amp;sentry=true&amp;reportapi=https%3A%2F%2Faccounts.hcaptcha.com&amp;recaptchacompat=true&amp;custom=false&amp;hl=de&amp;tplinks=on&amp;andint=off&amp;pstissuer=https%3A%2F%2Fpst-issuer.hcaptcha.com&amp;sitekey=a9226c58-b3d8-4f9e-82d4-d92644dc8584&amp;theme=light&amp;origin=https%3A%2F%2Fasmotoon.com" tabindex="0" frameborder="0" scrolling="no" allow="private-state-token-issuance 'src'; private-state-token-redemption 'src'" title="Widget mit Kontrollkästchen für die hCaptcha-Sicherheitsabfrage" data-hcaptcha-widget-id="0iznz75478p" data-hcaptcha-response="" style="pointer-events: auto; background-color: rgba(255, 255, 255, 0); border-radius: 4px; width: 302px; height: 76px; overflow: hidden;"></iframe><textarea id="g-recaptcha-response-0iznz75478p" name="g-recaptcha-response" style="display: none;"></textarea><textarea id="h-captcha-response-0iznz75478p" name="h-captcha-response" style="display: none;"></textarea></div>
                            <p id="captcha-error-message" class="text-red-500 text-sm hidden mt-1">Please complete the
                                captcha.</p>
                        </div>
                    </div>

                    <div class="text-center">
                        <button type="submit" class="bg-white/10 text-white px-6 h-11 rounded-full">
                            Submit Report
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<script>
    (() => {
        function report_view() {

            const reportElement = document.getElementById("main-report-element");
            const reportLoader = document.getElementById("report-loader");
            const reportText = document.getElementById("reportText");
            const selectedOption = document.getElementById("selectedOption");
            const errorMessage = document.getElementById("error-message");
            if (!reportLoader.classList.contains("hidden")) {
                return;
            }

            reportText.value = "";
            selectedOption.textContent = "Click to view options";
            errorMessage.classList.add("hidden");

            if (reportElement.classList.contains("hidden")) {
                reportElement.classList.add("flex");
                reportElement.classList.remove("hidden");
                reportElement.classList.add("transition-opacity", "opacity-0");
                setTimeout(() => {
                    reportElement.classList.remove("opacity-0");
                    reportElement.classList.add("opacity-100");
                }, 10);
            } else {
                reportElement.classList.remove("opacity-100");
                reportElement.classList.add("opacity-0");
                setTimeout(() => {
                    reportElement.classList.add("hidden");
                    reportElement.classList.remove("flex");
                }, 200);
            }
        }
                const optionsList = [{"value":1,"label":"Chapter Missing"},{"value":2,"label":"Suggestion"},{"value":3,"label":"Feedback"},{"value":4,"label":"Correction"},{"value":5,"label":"Other"}];

        const optionsListContainer = document.getElementById('optionsList');
        const selectedOption = document.getElementById('selectedOption');
        const errorMessage = document.getElementById('error-message');
        const captchaErrorMessage = document.getElementById('captcha-error-message');
        const reportText = document.getElementById('reportText');
        const submitButton = document.querySelector('button[type="submit"]');
        const selectContainer = document.querySelector('.custom-select');
        const reportLoader = document.getElementById('report-loader');
        const form = document.getElementById('reportForm');

        const report_view_buttons = document.querySelectorAll('.report_view_button');

        for (let button of report_view_buttons) {
            button.addEventListener('click', () => {
                console.log(true);
            });
        }



        let selectedValue = null;

        optionsList.forEach(option => {
            const optionElement = document.createElement('div');
            optionElement.classList.add('option-item', 'text-white', 'py-2', 'px-3', 'cursor-pointer',
                'hover:bg-white/20', 'bg-white/10');
            optionElement.setAttribute('data-value', option.value);
            optionElement.textContent = option.label;
            optionsListContainer.appendChild(optionElement);
        });

        selectedOption.addEventListener('click', () => {
            optionsListContainer.classList.toggle('hidden');
        });

        optionsListContainer.addEventListener('click', (e) => {
            if (e.target && e.target.classList.contains('option-item')) {
                const allOptions = optionsListContainer.querySelectorAll('.option-item');
                allOptions.forEach(opt => {
                    opt.classList.remove('bg-red-500');
                });

                e.target.classList.add('bg-red-500');

                selectedValue = e.target.getAttribute('data-value');
                const selectedLabel = e.target.textContent;
                selectedOption.textContent = selectedLabel;

                optionsListContainer.classList.add('hidden');
                errorMessage.classList.add('hidden');
            }
        });

        form.addEventListener('submit', async (e) => {
            e.preventDefault();

            if (!selectedValue) {
                errorMessage.classList.remove('hidden');
            } else if (!hcaptcha.getResponse()) {
                captchaErrorMessage.classList.remove('hidden');
            } else {
                captchaErrorMessage.classList.add('hidden');

                // Show loader and disable inputs
                reportLoader.classList.remove('hidden');
                reportText.disabled = true;
                submitButton.disabled = true;
                selectContainer.disabled = true;
                optionsListContainer.classList.add('disabled');
                selectedOption.classList.add('disabled');

                const message = reportText.value;
                let data = {
                    message,
                    type: selectedValue,
                    captcha: hcaptcha.getResponse(),
                    ...{"series_uid":"62f01b00044"}                };
                const params = new URLSearchParams(data).toString();
                const url = `/report?${params}`;

                try {
                    let {
                        success,
                        message: error_message
                    } = await fetch(url).then(response => response.json());
                    if (success) {
                        reportLoader.classList.add('hidden');

                        const reportSuccess = document.getElementById('report-success');
                        reportSuccess.classList.remove('hidden');

                        setTimeout(() => {
                            report_view();
                        }, 1000);
                    } else {
                        alert(error_message);
                        setTimeout(() => {
                            report_view();
                        }, 2000);
                    }
                } catch (error) {
                    alert(
                        'An error occurred while submitting the report, reload the page and try again.'
                    );
                    setTimeout(() => {
                        report_view();
                    }, 2000);
                } finally {
                    reportLoader.classList.add('hidden');
                }
            }
        });

        document.getElementById('reportButton')?.addEventListener('click', () => {
            report_view()
        });
    })();
</script>    <div id="cards_show" class="hidden justify-center items-center w-full h-full fixed top-0 left-0 z-[162] overflow-hidden opacity-0 transition-all duration-[250] ">
    <div id="cards_show_bg" class="absolute top-0 left-0 w-full h-full bg-[--theme_color] opacity-90">

    </div>
    <div id="cards_show_main" class="w-full h-full max-w-sm max-h-96 bg-[--theme_color] relative rounded-2xl">
                    <div class="flex flex-col justify-between items-start w-full h-full border border-white/10 rounded-2xl">
                                    <div class="w-full h-full flex flex-col gap-4 p-8 justify-center items-center">
                        <div class="w-full text-center">
                            You don't have any cards yet. <br> To purchase a chapter, purchase a card first.                        </div>
                        <button id="card_note_button" onclick="card_note_open()" class="px-5 flex w-fit justify-center items-center h-11 gap-3 bg-blue-600 hover:bg-blue-500 transition-all cursor-pointer rounded-full">
                            <img class="w-6" src="https://api.iconify.design/mdi:card-plus.svg?color=white">
                            <div class="font-medium">Purchase Card</div>
                        </button>
                    </div>
                                <div class="grid gap-3 h-fit w-full p-4 border-t border-white/10">
                    <div class="w-full">
                        <div class="flex gap-3 justify-start items-center">
                            <div id="main_card_chapter_cover" class="aspect-[2/1.5] h-11 bg-white/10 bg-cover bg-center rounded-xl">

                            </div>
                            <div class="grid">
                                <div class="flex gap-1 justify-start items-center">
                                    <span class="font-bold text-yellow-600" id="main_card_coins"></span>
                                    <span class="text-xs font-semibold">COINS</span>
                                </div>
                                <span class="text-xs"><span id="main_card_chapter_name"></span> - <span id="main_card_chapter_date"></span></span>
                            </div>
                        </div>
                    </div>
                                    </div>
            </div>
            </div>
</div>
<script>
    (async () => {
        let cards_show = document.querySelector('#cards_show');
        let cards_show_bg = document.querySelector('#cards_show_bg');
        let cards_show_main = document.querySelector('#cards_show_main');
        let paid_chapters = document.querySelectorAll("#paid-chapter");
        let cards = document.querySelectorAll("button#card");
        let purchase_button = document.querySelector('#purchase_button');

        let main_card_coins = document.querySelector('#main_card_coins');
        let main_card_chapter_cover = document.querySelector('#main_card_chapter_cover');
        let main_card_chapter_name = document.querySelector('#main_card_chapter_name');
        let main_card_chapter_date = document.querySelector('#main_card_chapter_date');

        await (async () => {
            if (cards) {
                for await (const card of cards) {
                    card.addEventListener('click', async (event) => {
                        const card_x = event.target.closest('[card_uid]');
                        await selectCard(card_x);
                        await setPurchase(card_x)
                    });
                }
            }
            if (purchase_button) {
                purchase_button.addEventListener('click', (event) => {
                    if (event.disabled) {} else {
                        let uid = purchase_button.getAttribute('card_uid');
                        let href = purchase_button.getAttribute('href');
                        if (href && uid) {
                            window.location = `${href}?card=${uid}`;
                        }
                    }
                });
            }
        })();

        async function setPurchase(card_x) {
            try {
                let uid = card_x.getAttribute('card_uid');
                let card_coins = Number(card_x.getAttribute('c')) ?? 0;
                let coins = Number(main_card_coins.textContent) ?? 1;
                if (purchase_button) {
                    if (card_coins >= coins) {
                        purchase_button.classList.add('hover:opacity-90');
                        purchase_button.classList.remove('opacity-50');
                        purchase_button.removeAttribute('disabled');
                        purchase_button.setAttribute('card_uid', uid);
                        return true;
                    } else {
                        purchase_button.classList.remove('hover:opacity-90');
                        purchase_button.classList.add('opacity-50');
                        purchase_button.setAttribute('disabled', 'true');
                        purchase_button.removeAttribute('card_uid');
                        return false;
                    }
                }
            } catch (error) {
                console.error(error);
            }
        }

        async function selectCard(card_x) {
            if (card_x) {
                let uid = card_x.getAttribute('card_uid');
                for await (const card_2 of cards) {
                    const card_uid = card_2.getAttribute('card_uid');
                    if (card_uid === uid) {
                        card_2.classList.add('ring-2');
                        card_2.classList.add('ring-offset-2');
                        card_2.classList.remove('ring-0');
                        card_2.classList.remove('ring-offset-0');
                    } else {
                        card_2.classList.add('ring-0');
                        card_2.classList.add('ring-offset-0');
                        card_2.classList.remove('ring-2');
                        card_2.classList.remove('ring-offset-2');
                    }
                }
                return uid;
            }
        }



        await runEl({
            ignore: {
                elements: [...(Array.from(paid_chapters) ?? []), ...[cards_show_bg]],
                function: async (data) => {
                    data.preventDefault();
                    let check = cards_show.classList.contains('flex');
                                            //-------------------------------------------//
                        let paid_chapter = data.target.closest('#paid-chapter');
                        if (paid_chapter && paid_chapter.getAttribute("id") === "paid-chapter") {
                            let displayName = paid_chapter.getAttribute('title');
                            let photoURL_string = paid_chapter.getAttribute('p');
                            let photoURL =
                                `https://i2.wp.com/cdn.meowing.org/uploads/${photoURL_string}?w=80`;
                            let createdAt = paid_chapter.getAttribute('d');
                            let href = paid_chapter.getAttribute('href');
                            let coins = Number(paid_chapter.getAttribute('c')) ?? 1;
                            main_card_coins.innerHTML = coins;
                            if (purchase_button && href) purchase_button.setAttribute('href', href);
                            if (String(photoURL_string).length === 0) {
                                main_card_chapter_cover.remove()
                            } else {
                                main_card_chapter_cover.style.backgroundImage = `url(${photoURL})`;
                            }
                            main_card_chapter_name.innerHTML = displayName;
                            main_card_chapter_date.innerHTML = createdAt;
                        }
                        //-------------------------------------------//
                                        if (check) {
                        setTimeout(() => {
                            cards_show.classList.toggle('opacity-0')
                            cards_show.classList.toggle('opacity-100')
                        }, 50)
                        setTimeout(() => {
                            cards_show.classList.toggle('hidden')
                            cards_show.classList.toggle('flex')
                        }, 300)
                    } else {
                                                    //-------------------------------------------//
                            await (async () => {
                                let paid_mark = false;
                                for await (const card of cards) {
                                    if (!card.disabled && paid_mark !== true) {
                                        await selectCard(card);
                                        paid_mark = await setPurchase(card);
                                    }
                                }
                            })();
                            //-------------------------------------------//
                                                cards_show.classList.toggle('hidden')
                        cards_show.classList.toggle('flex')
                        // setTimeout(() => {
                        //     cards_show.classList.toggle('backdrop-blur-2xl')
                        //     cards_show.classList.toggle('backdrop-blur-0')
                        // }, 100)
                        setTimeout(() => {
                            cards_show.classList.toggle('opacity-0')
                            cards_show.classList.toggle('opacity-100')
                        }, 150)
                    }
                }
            },
            show: {
                element: cards_show_main,
                function: () => {}
            },
        });
    })();
</script>
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js/vcd15cbe7772f49c399c6a5babf22c1241717689176015" integrity="sha512-ZpsOmlRQV6y907TI0dKBHq9Md29nnaEIPlkf84rnaERnq6zvWvPUqr2ft8M1aS28oN72PdrCzSjY4U6VaAw1EQ==" data-cf-beacon="{&quot;version&quot;:&quot;2024.11.0&quot;,&quot;token&quot;:&quot;cbf2a5f983f8476d9b5d4c25ec844ea2&quot;,&quot;r&quot;:1,&quot;server_timing&quot;:{&quot;name&quot;:{&quot;cfCacheStatus&quot;:true,&quot;cfEdge&quot;:true,&quot;cfExtPri&quot;:true,&quot;cfL4&quot;:true,&quot;cfOrigin&quot;:true,&quot;cfSpeedBrain&quot;:true},&quot;location_startswith&quot;:null}}" crossorigin="anonymous"></script>


<div aria-hidden="true" style="background-color: rgb(255, 255, 255); border: 1px solid rgb(215, 215, 215); box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 4px; border-radius: 4px; left: auto; top: -10000px; z-index: -2147483648; position: absolute; pointer-events: auto; transition: opacity 0.15s ease-out; opacity: 0; visibility: hidden;"><div style="position: relative; z-index: 1;"><iframe src="https://newassets.hcaptcha.com/captcha/v1/ee1a855b00b1ba8c779103181fc3ae671f71373f/static/hcaptcha.html#frame=challenge&amp;id=0iznz75478p&amp;host=asmotoon.com&amp;sentry=true&amp;reportapi=https%3A%2F%2Faccounts.hcaptcha.com&amp;recaptchacompat=true&amp;custom=false&amp;hl=de&amp;tplinks=on&amp;andint=off&amp;pstissuer=https%3A%2F%2Fpst-issuer.hcaptcha.com&amp;sitekey=a9226c58-b3d8-4f9e-82d4-d92644dc8584&amp;theme=light&amp;origin=https%3A%2F%2Fasmotoon.com" frameborder="0" scrolling="no" allow="private-state-token-issuance 'src'; private-state-token-redemption 'src'" title="Hauptinhalt der hCaptcha Challenge" style="border: 0px; z-index: 2000000000; position: relative;"></iframe></div><div style="width: 100%; height: 100%; position: fixed; pointer-events: none; top: 0px; left: 0px; z-index: 0; background-color: rgb(255, 255, 255); opacity: 0.05;"></div><div style="border-width: 11px; position: absolute; pointer-events: none; margin-top: -11px; z-index: 1; right: 100%;"><div style="border-width: 10px; border-style: solid; border-color: transparent rgb(255, 255, 255) transparent transparent; position: relative; top: 10px; z-index: 1;"></div><div style="border-width: 11px; border-style: solid; border-color: transparent rgb(215, 215, 215) transparent transparent; position: relative; top: -11px; z-index: 0;"></div></div></div></body></html>