<head>
  <meta charset="utf-8">
  <title>Animeflix - Watch HD anime for free!</title>
  <link rel="icon" href="/favicon.ico">
  <link rel="manifest" href="/manifest.json">
  <meta name="title" content="Animeflix - Anywhere Anytime">
  <meta name="description"
    content="Animeflix - Anywhere Anytime. Animeflix is the best place to watch anime for free! English Subbed and Dubbed anime online. WATCH NOW!">
  <meta name="keywords"
    content="Animeflix, anime flix, anime, anime live, free anime, anime stream, anime hd, english sub, kissanime, gogoanime, animeultima, 9anime, 123animes, animefreak, vidstreaming, gogo-stream">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <meta property="og:title" content="Animeflix - Anywhere Anytime">
  <meta property="og:description"
    content="Animeflix - Anywhere Anytime. You can watch anime online free in HD. Best place for free find and one-click anime. English Subbed and Dubbed anime online. WATCH NOW!">
  <meta property="og:locale" content="en_US">
  <meta property="og:type" content="website">
  <meta property="og:site_name" content="Animeflix">
  <meta property="og:url" content="https://animeflix.live/">
  <meta itemprop="image" content="https://i.imgur.com/2w9KB9P.png">
  <meta property="og:image" content="https://i.imgur.com/2w9KB9P.png">
  <meta name="mobile-web-app-capable" content="yes">
  <meta property="og:image:secure_url" content="https://i.imgur.com/2w9KB9P.png">
  <meta property="og:image:width" content="650">
  <meta property="og:image:height" content="350">
  <meta property="twitter:title" content="Animeflix - Anywhere Anytime">
  <meta property="twitter:description"
    content="Browse thousands of animes here for free. High quality anime 24/7 without signing up or malicious ads.">
  <meta property="twitter:url" content="https://animeflix.live">
  <meta name="twitter:card" content="summary_large_image">
  <meta name="apple-mobile-web-app-status-bar" content="#c40808">
  <link rel="apple-touch-icon" href="logo250.png">
  <meta name="theme-color" content="#000000">
  <script type="text/javascript" id="www-widgetapi-script"
    src="https://www.youtube.com/s/player/99faf012/www-widgetapi.vflset/www-widgetapi.js" async=""></script>
  <script defer="defer" src="/static/js/main.0da9e2fb.js" type="text/javascript"></script>
  <link href="/static/css/main.1894bbd7.css" rel="stylesheet">
  <style type="text/css">
    * {
      <br>-webkit-user-select: text !important;
      <br>-moz-user-select: text !important;
      <br>-ms-user-select: text !important;
      <br>user-select: text !important;
      <br>
    }
  </style>
  <style id="_goober">
    @keyframes go2264125279 {
      from {
        transform: scale(0) rotate(45deg);
        opacity: 0;
      }

      to {
        transform: scale(1) rotate(45deg);
        opacity: 1;
      }
    }

    @keyframes go3020080000 {
      from {
        transform: scale(0);
        opacity: 0;
      }

      to {
        transform: scale(1);
        opacity: 1;
      }
    }

    @keyframes go463499852 {
      from {
        transform: scale(0) rotate(90deg);
        opacity: 0;
      }

      to {
        transform: scale(1) rotate(90deg);
        opacity: 1;
      }
    }

    @keyframes go1268368563 {
      from {
        transform: rotate(0deg);
      }

      to {
        transform: rotate(360deg);
      }
    }

    @keyframes go1310225428 {
      from {
        transform: scale(0) rotate(45deg);
        opacity: 0;
      }

      to {
        transform: scale(1) rotate(45deg);
        opacity: 1;
      }
    }

    @keyframes go651618207 {
      0% {
        height: 0;
        width: 0;
        opacity: 0;
      }

      40% {
        height: 0;
        width: 6px;
        opacity: 1;
      }

      100% {
        opacity: 1;
        height: 10px;
      }
    }

    @keyframes go901347462 {
      from {
        transform: scale(0.6);
        opacity: 0.4;
      }

      to {
        transform: scale(1);
        opacity: 1;
      }
    }

    .go4109123758 {
      z-index: 9999;
    }

    .go4109123758>* {
      pointer-events: auto;
    }
  </style>
  <style type="text/css">
    .Player__container___f3NHe {
      position: relative;
      overflow: hidden;
    }

    .Player__videoContainer___2TVqS {
      position: absolute;
      left: 0;
      top: 0;
      right: 0;
      bottom: 0;
      width: 100%;
      height: 100%;
      z-index: -1;

    }

    .Player__videoInnerContainer___3idnr {
      width: 100%;
      height: 100%;
    }

    .Player__overlay___3alO1 {
      position: absolute;
      left: 0;
      top: 0;
      right: 0;
      bottom: 0;
      z-index: 5
    }

    .Player__videoIframe___3_jFK {
      position: relative;
      left: 0;
      top: 0;
      right: 0;
      bottom: 0;
      width: 100%;
      height: 100%;
      z-index: 0;

    }
  </style>
  <style data-styled="active" data-styled-version="5.3.5"></style>
  <style data-jss="" data-meta="MuiSvgIcon">
    .MuiSvgIcon-root {
      fill: currentColor;
      width: 1em;
      height: 1em;
      display: inline-block;
      font-size: 1.5rem;
      transition: fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
      flex-shrink: 0;
      user-select: none;
    }

    .MuiSvgIcon-colorPrimary {
      color: #3f51b5;
    }

    .MuiSvgIcon-colorSecondary {
      color: #f50057;
    }

    .MuiSvgIcon-colorAction {
      color: rgba(0, 0, 0, 0.54);
    }

    .MuiSvgIcon-colorError {
      color: #f44336;
    }

    .MuiSvgIcon-colorDisabled {
      color: rgba(0, 0, 0, 0.26);
    }

    .MuiSvgIcon-fontSizeInherit {
      font-size: inherit;
    }

    .MuiSvgIcon-fontSizeSmall {
      font-size: 1.25rem;
    }

    .MuiSvgIcon-fontSizeLarge {
      font-size: 2.1875rem;
    }
  </style>
  <script type="text/javascript" charset="utf8" async="" src="https://www.youtube.com/iframe_api"></script>
  <link href="https://storage.ko-fi.com/cdn/scripts/floating-chat-wrapper.css" rel="stylesheet" type="text/css">
  <link href="https://fonts.googleapis.com/css?family=Nunito:400,700,800&amp;display=swap" rel="stylesheet"
    type="text/css">
</head>

<body><noscript>You need to enable JavaScript to run this app.</noscript>
  <div id="root">
    <header opacity="0" class="sc-gsnTZi jwWTyN">
      <main class="sc-eCYdqJ joKVDn">
        <div><button aria-label="Menu" class="sc-gKXOVf iJrkyW"><svg class="MuiSvgIcon-root" focusable="false"
              viewBox="0 0 24 24" aria-hidden="true" style="font-size: max(2rem, 2vw);">
              <path
                d="M4 18h16c.55 0 1-.45 1-1s-.45-1-1-1H4c-.55 0-1 .45-1 1s.45 1 1 1zm0-5h16c.55 0 1-.45 1-1s-.45-1-1-1H4c-.55 0-1 .45-1 1s.45 1 1 1zM3 7c0 .55.45 1 1 1h16c.55 0 1-.45 1-1s-.45-1-1-1H4c-.55 0-1 .45-1 1z">
              </path>
            </svg></button>
          <div class="sc-iBkjds kLfCHk">
            <section>
              <p>Login</p>
            </section>
            <section><a href="/">Home</a><a href="/movies">Movies</a><a href="/series">Series</a><a
                href="/schedule">Schedule</a><a href="/mylist">My List</a><a href="/genres">Genres</a><a target="_blank"
                href="https://discord.gg/SKcb2C7HjH">Discord</a></section>
          </div>
        </div>
        <div id="sidenav" class="sc-kDDrLX bfHUDj"><a class="sc-iqcoie isXgHy" href="/"
            style="margin-top: 15%;">Home</a><a class="sc-iqcoie isXgHy" href="/movies">Movies</a><a
            class="sc-iqcoie isXgHy" href="/series">Series</a><a class="sc-iqcoie isXgHy"
            href="/trending">Trending</a><a class="sc-iqcoie isXgHy" href="/schedule">Schedule</a><a
            class="sc-iqcoie isXgHy" href="/collections">Collections</a><a class="sc-iqcoie isXgHy"
            href="/genres">Genres</a><a class="sc-iqcoie isXgHy" href="/mylist">My List</a><a target="_blank"
            class="sc-iqcoie isXgHy" href="https://discord.gg/SKcb2C7HjH">Discord</a>
          <main class="sc-crXcEl jFlzyO" style="position: absolute; bottom: 3rem;">
            <p class="sc-evZas iZzenW">Donate</p>
            <p class="sc-evZas iZzenW">Settings</p>
            <p class="sc-evZas iZzenW">Contact Us</p>
          </main>
        </div><svg class="MuiSvgIcon-root sc-jqUVSM jSftIU" focusable="false" viewBox="0 0 24 24" aria-hidden="true"
          id="meow" style="font-size: max(3rem, 3vw); position: absolute; top: 50vh; left: 0px;">
          <path
            d="M9.29 6.71c-.39.39-.39 1.02 0 1.41L13.17 12l-3.88 3.88c-.39.39-.39 1.02 0 1.41.39.39 1.02.39 1.41 0l4.59-4.59c.39-.39.39-1.02 0-1.41L10.7 6.7c-.38-.38-1.02-.38-1.41.01z">
          </path>
        </svg>
        <div id="backgroundsh"
          style="width: 100vw; height: 100vh; top: 0px; left: 0px; z-index: 10; position: fixed; background: rgba(0, 0, 0, 0.5); overflow: auto; opacity: 0; transition: opacity 0.7s ease 0s; pointer-events: none;">
        </div><a title="Animeflix" class="sc-dkzDqf caIUWc" href="/"><img alt="animeflix-logo"
            src="/static/media/logo.ff4c5c6e9524142bb4480c86fdc841c8.svg" style="width: 6.98vw;"></a>
      </main><a title="Animeflix" class="sc-hKMtZM dAyAJd" href="/"><img alt="animeflix-logo"
          src="/static/media/logo.ff4c5c6e9524142bb4480c86fdc841c8.svg"></a>
      <div class="sc-jSMfEi hA-DUbx">
        <div id="searchcontainer" class="sc-breuTD enrScN" style="opacity: 1;"><button aria-label="Search" type="button"
            class="sc-ksZaOG gwfQDF"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24"
              aria-hidden="true" id="ignore" style="font-size: clamp(2rem, 1.5vw, 3rem);">
              <path
                d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z">
              </path>
            </svg></button>
          <form style="display: flex; height: 90%;"><input disabled="" placeholder="Search for media" id="ignore"
              class="sc-hAZoDl icfOzk"></form>
          <div id="placeholderdiv"></div>
        </div>
        <div class="sc-eKszNL kTRWuW"><button class="sc-hiMGwR dtQUFh"><img
              src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAIAAABMXPacAAAACXBIWXMAAC4jAAAuIwF4pT92AAAF+mlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMxNDUgNzkuMTYzNDk5LCAyMDE4LzA4LzEzLTE2OjQwOjIyICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdEV2dD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlRXZlbnQjIiB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iIHhtbG5zOnBob3Rvc2hvcD0iaHR0cDovL25zLmFkb2JlLmNvbS9waG90b3Nob3AvMS4wLyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ0MgMjAxOSAoV2luZG93cykiIHhtcDpDcmVhdGVEYXRlPSIyMDIwLTExLTAyVDIwOjQ1OjE3LTAzOjAwIiB4bXA6TWV0YWRhdGFEYXRlPSIyMDIwLTExLTAyVDIwOjQ1OjE3LTAzOjAwIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyMC0xMS0wMlQyMDo0NToxNy0wMzowMCIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo1MTE5NmRlYy04ZWIyLTJmNGUtYTdiMS04ZThiODg1MWNlYTQiIHhtcE1NOkRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDpiM2QxMTg1Zi1mZWMyLWY4NGMtOGNlYS1lOWU4OTE2YTNiMGYiIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDo5OTkyNzc5Zi1mZDIwLTNkNDgtOTg3YS04Y2ExMzc2MDE1YzQiIGRjOmZvcm1hdD0iaW1hZ2UvcG5nIiBwaG90b3Nob3A6Q29sb3JNb2RlPSIzIiBwaG90b3Nob3A6SUNDUHJvZmlsZT0ic1JHQiBJRUM2MTk2Ni0yLjEiPiA8eG1wTU06SGlzdG9yeT4gPHJkZjpTZXE+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJjcmVhdGVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjk5OTI3NzlmLWZkMjAtM2Q0OC05ODdhLThjYTEzNzYwMTVjNCIgc3RFdnQ6d2hlbj0iMjAyMC0xMS0wMlQyMDo0NToxNy0wMzowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIENDIDIwMTkgKFdpbmRvd3MpIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDo1MTE5NmRlYy04ZWIyLTJmNGUtYTdiMS04ZThiODg1MWNlYTQiIHN0RXZ0OndoZW49IjIwMjAtMTEtMDJUMjA6NDU6MTctMDM6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCBDQyAyMDE5IChXaW5kb3dzKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8L3JkZjpTZXE+IDwveG1wTU06SGlzdG9yeT4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz76LKIbAAAH/UlEQVR4nO2d13LbOBRAFwA72CGKKrFnks/Pb2Vk9WpRsqzifcBMxpPdWCy4ICXhPHMuCBwCRCOIfv78+Y+iPnDdN/DoKAE1owTUjBJQM0pAzWh130AuCCGO49i2bdu2aZqmaeq6rus6xhhjfLlcLpfL8Xg8Ho+Hw+FwOOz3+/1+v9vtzudz3fd+hUYLoJT6vu95nuu6tm3/7TKuQdO0P67Z7/fb7fb19XWz2WRZBn+/ZWiiANM0oygKwzAIAk0rf4e8xiRJcjqd1uv1arVaLpeHw0HgrVanWQIopYyxOI4ppQLDaprGGGOMZVm2WCzm83lzKkRTBDiOkyRJq9WyLAsuFUoppTRJktlsNp1Od7sdXFo5qV8AISRN03a7Lfap/wLLsr59+xZF0WQyGY/H9b6oaxYQBEGn02m1WvKTppR+//7d87zRaLRer+XfAKdOAd1ut9vtftG9kUCr1aKUDofD4XBYyw3UI8AwjH6/3+v1akn9D2zb/vHjh2VZg8Hg/f1dcuo1CKCU9vv9JEnkJ/0FvV5P1/XBYCC5gyRbgOd5T09PURRJTjcPSZJomvbr16/X11dpiUqdC/I87/n5uZmlz4mi6Pn52fM8aSnKE0ApfXp6CsNQWorlCMPw6elJWp9YkgD+1m3ys/+ZKIr6/b5hGBLSkiSggW/dr0mSpN/vS0hIhoBut9uQHmcher1et9uFTgVcQBAEErIBRLfbDYIANAlYAYSQTqdT71i3CrZtdzodQghcErAC0jStZZ5HIK1WK01TuPiAAhzHabfbcPGl0W63HccBCg4oIEkSab1pUPgSAlBwKAGU0ltvfD7DJ00hIkMJYIyBrm1JxrIsxhhEZBABpmnGcQwRuUbiODZNU3hYEAFRFN1H6/8ZSinEVAqIgObPuJUDIl/iBVBKoUePdREEgfCaLV6A7/tVdlM1GU3TfN8XG1O8AJmrGfIRnjvBAgghruuKjdkoXNcVOzUkWADfwyw2ZqOwbVvstIRgAfdd+hyxeVQCCtNoARBjxaYhNo9KQGEaLUDXdbEBG4jYPCoBhWm0AIzv/7NLsXlUAgrTaAGXy0VswAYiNo9KQGEaLeB4PIoN2EDE5lEJKEyjBTTtM2gIxOZRCShMowXs93uxARuI2DwqAYVptIDdbnffDvgpOAIDChZwPp+3263YmI1iu92KPdpA/MyBzG885SM8d+IFbDab0+kkPGwTOJ1Om81GbEzxArIsq/HsC1DW67Xw7+hBJi9XqxVE2NqByBeIgOVy2ZwjqUSRZdlyuRQeFkTA4XBYLBYQkWtksVhAjPOh1k/m8/nb2xtQcPm8vb3N53OIyFACsiybzWZAweUzm82AGlXAFcTpdHofb4Isy6bTKVBwQAG73W4ymcDFl8ZkMoE7XxF2DX08Ht96QzSbzcbjMVx8WAHn83k0Gt3u9Nx+vx+NRqDnWoLvIlmv13UdSFid4XAIPaqXsY1nOBy+vLxISEgsLy8vEh4dSfuoBoMBXEcCgul0OhgMJCQkScD7+/tgMIAYykOwXC6lnSEqbydhlmWDwaD5E6Xr9Vrm6aHyBBBCEELH47HJu+f4nzgQQqCHNH1G0ge9hmH8/jFAkzfwYoz5XyP4bwYktEIyBPB/AzDGbuILMl3XwzA0TdMwDAn/GIAVwD8bbrfbcRzf1ufz/LQ4wzAmk4nwhfjPABYKr86dTicMQ4QQXEJAaJqWJImu66PRaLVaAb26oAQQQqIoStPU87xbLH0OQsj3fYQQxni5XELUAxABuq5HUdRut/ndQyQhDUJIEAS/HQjf/i1egGEYv0tfePBaQAhxBwih5XIptmskWAAhJAzDdrt9f2em8Bx9fHzM53OBbZFgAUEQJEniuu6ttzz/BSHkuu7lcjmdTgK3HIgU4Pt+mqa+7zd5qFUFjLHv+9yBqC1yYgQghBzH4T3Oey19DsY4DMPz+Xw+n3e73cfHR9WAQm7Lsqw0TRlj9136HIwxYyxNUyEHowooL13X4ziO4/gRSp+DMeZZrn5sgYAi832fMfYI56R8xjRNxlj1rnZVAY7jMMbu75jWPPB/v1Y8wazSS5gQwhgLguBxGp/P8Mmu/X5/OBxKjwzKFxwfczHGHuGImr+h6zpjLAzD0gs45QUYhhHHsWVZ9zfmyg9CyLKsOI5L//OqpAD++FcxfzdULIqSAlzXraL9zuCNQbkTa8sIIIR4nveYPZ+/QSn1PK9EJSgjgFLq+/4jv3v/i67rvu+XeCgLC+BN3n0fEF0O13VLvAmKCeCTburx/194JXAcp1C3sJgAfoD+TewuqQXbtov+PqGYAC75tjaYyIQ/oIWahwICMMau63qe95gTD3nAGHue57pu/iIqUJSmaarW/yq8kcg/N1xMANwvFe8Jx3HEC+BL0mrwlQdKaf5tCXkF8Mdftf55wBjnrwR5C/Tufw4jlvy/mskrwLZtNfWWH8Mwcj6vuQQQQhzHUf2f/Oi67jhOnmmJ6wL4moNt24+88FIUhJBt23lWq64LwBhTStXjXxRd1/N8j5VLgGVZqv9TlJzllrcJUkuPRSGEiGmCCCG2basaUBSMsW3bVx/c68VqmqZpmuoNXBSEEC+6ry/LJUDNP5dD0zQBAlT/pwpXS++6ADUArsLV0lM1ABYBNUAJqIIAAZqmqS5QORBCV/svucYBgu7nEREwDlB90CqoGlAzAmqAegFUQcBckAIUJaBmlICaUQJqRgmomX8BgtUlNfYugF4AAAAASUVORK5CYII="
              alt="user-icon"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"
              style="position: absolute; font-size: max(2rem, 1.3vw);">
              <path d="M7 10l5 5 5-5z"></path>
            </svg>
            <div>
              <div class="sc-olbas hzTLND">
                <section>
                  <p>Login</p>
                  <p>Contact Us</p>
                </section>
              </div>
            </div>
          </button></div>
      </div>
    </header>
    <div style="position: fixed; z-index: 9999; inset: 16px; pointer-events: none;"></div>
    <div class="sc-bczRLJ kkAHba">
      <div disabled="" id="loadingscreen" class="sc-bhVIhj uzJqD">
        <p id="toolong" class="sc-eGAhfa eqzLjl">Site having issues? Join our Discord!</p><img alt="loading"
          src="/static/media/loading.53aaa85409c2f3405258.png" style="width: 100%;">
      </div>
      <div class="Player__container___f3NHe ">
        <div>
          <div id="container1" class="sc-hAsxaJ kxpEGa">
            <main class="sc-kYWVYA cVtXI">
              <div class="sc-dWINGa hQVafd"><img src="https://i.imgur.com/Ry5tdBb.png" alt="logo"
                  class="sc-yeoIj fZqzRl" style="margin-bottom: 0px; margin-left: -0.5vw;"><br><strong>87%
                  Match</strong><label>2023</label><label>12 episodes</label></div>
              <div class="sc-jGprRt bcrrrE">The second season of Jujutsu Kaisen.

                The past comes to light when second-year students Satoru Gojou and Suguru Getou are tasked with
                escorting young Riko Amanai to... </div>
              <div class="sc-bPyhqo kqnwFO"><button title="Watch Episode 1" class="sc-cTQhss iRJeIl">
                  <div style="margin-left: -5%;"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24"
                      aria-hidden="true" style="font-size: clamp(1.5rem, 3vw, 3rem); margin-right: 0.5vw;">
                      <path d="M8 5v14l11-7z"></path>
                    </svg><strong>Watch Episode 1</strong></div>
                </button><button type="button" class="sc-fWIMVQ kSOgsP"><svg class="MuiSvgIcon-root" focusable="false"
                    viewBox="0 0 24 24" aria-hidden="true"
                    style="font-size: clamp(1.2rem, 3vw, 2.5rem); margin-right: 0.5vw;">
                    <path
                      d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z">
                    </path>
                  </svg><strong>More Information</strong></button></div>
            </main>
          </div>
        </div>
        <div class="Player__videoContainer___2TVqS"
          style="height: 719px; width: 1278.22px; top: 0px; left: -175.111px;">
          <div class="Player__overlay___3alO1"></div>
          <div class="Player__videoInnerContainer___3idnr"><iframe class="Player__videoIframe___3_jFK" frameborder="0"
              allowfullscreen="1"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
              title="TVアニメ『呪術廻戦』「渋谷事変」第2期PV第3弾｜OPテーマ：King Gnu「SPECIALZ」｜毎週木曜夜11時56分～MBS/TBS系列全国28局にて放送中!!" width="640"
              height="360"
              src="https://www.youtube-nocookie.com/embed/PKHQuQF1S8k?autoplay=1&amp;controls=0&amp;rel=0&amp;showinfo=0&amp;mute=1&amp;modestbranding=1&amp;iv_load_policy=3&amp;playsinline=1&amp;enablejsapi=1&amp;origin=https%3A%2F%2Fanimeflix.live&amp;widgetid=1"
              id="widget2"></iframe></div>
        </div>
      </div>
      <div class="sc-ikjQzJ eEVjfm">
        <div class="sc-tsFYE bLycor">
          <h3 class="sc-fHsOPI eCpgKM">Continue Watching</h3>
          <div class="sc-hjriPb dDqdbq">
            <div class="sc-gUAEMC fUgnqN">
              <div class="sc-fWjsSh crsoha">
                <div class="sc-gkJlnC BSwej"><button id="19815" style="background: transparent; border: none;">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/nx19815-bIo51RMWWhLv.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/nx19815-bIo51RMWWhLv.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/nx19815-bIo51RMWWhLv.jpg"
                        id="imgcard" alt="19815">
                    </picture>
                    <h3 class="cardname">No Game, No Life</h3>
                    <p class="epname">Episode 1</p>
                    <div id="watchbar"
                      style="position: absolute; height: 0.35rem; width: 19%; background-color: red; border-radius: 0px 0px 0.5rem 0.5rem; bottom: 0px; float: left;">
                    </div>
                  </button></div>
                <div class="sc-gkJlnC BSwej"><button id="1535" style="background: transparent; border: none;">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://media.kitsu.io/anime/poster_images/1376/original.png">
                      <source media="(min-width: 236px)"
                        srcset="https://media.kitsu.io/anime/poster_images/1376/large.jpg"><img
                        src="https://media.kitsu.io/anime/poster_images/1376/medium.jpg" id="imgcard" alt="1535">
                    </picture>
                    <h3 class="cardname">Death Note</h3>
                    <p class="epname">Episode 1</p>
                    <div id="watchbar"
                      style="position: absolute; height: 0.35rem; width: 1%; background-color: red; border-radius: 0px 0px 0.5rem 0.5rem; bottom: 0px; float: left;">
                    </div>
                  </button></div>
              </div>
            </div>
          </div>
        </div>
        <div class="sc-tsFYE bLycor">
          <div style="display: flex; cursor: pointer; width: fit-content;">
            <h3 class="sc-fmRtwQ cHkJzm">Trending Anime</h3><svg class="MuiSvgIcon-root" focusable="false"
              viewBox="0 0 24 24" aria-hidden="true"
              style="color: gray; margin-top: 0.1em; margin-bottom: -0.2em; vertical-align: bottom; font-size: 1.17em;">
              <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"></path>
            </svg>
          </div>
          <div class="sc-ESujJ kaGqFq"><button aria-label="Go Right" type="button" class="sc-lkwKjF dPtIpd"><svg
                class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"
                style="font-size: 3vw;">
                <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"></path>
              </svg></button>
            <div class="sc-jWEIYm loaHIY">
              <div class="sc-eEOqmf iXxamA">
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx156039-R0hSOmQGALwe.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx156039-R0hSOmQGALwe.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx156039-R0hSOmQGALwe.jpg"
                        id="imgcard" alt="156039" loading="eager">
                    </picture>
                    <h3 class="cardname">Berserk of Gluttony</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx162694-7dx7dawGFylP.png">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx162694-7dx7dawGFylP.png">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx162694-7dx7dawGFylP.png"
                        id="imgcard" alt="162694" loading="eager">
                    </picture>
                    <h3 class="cardname">The 100 Girlfriends Who Really, Really, Really,</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/nx21-tXMN3Y20PIL9.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/nx21-tXMN3Y20PIL9.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/nx21-tXMN3Y20PIL9.jpg"
                        id="imgcard" alt="21" loading="eager">
                    </picture>
                    <h3 class="cardname">ONE PIECE</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx151970-qGhkXKWD9enA.png">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx151970-qGhkXKWD9enA.png">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx151970-qGhkXKWD9enA.png"
                        id="imgcard" alt="151970" loading="eager">
                    </picture>
                    <h3 class="cardname">Shangri-La Frontier</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx158927-VhtOEwPQ4tzo.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx158927-VhtOEwPQ4tzo.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx158927-VhtOEwPQ4tzo.jpg"
                        id="imgcard" alt="158927" loading="eager">
                    </picture>
                    <h3 class="cardname">SPY x FAMILY Season 2</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx145064-5fa4ZBbW4dqA.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx145064-5fa4ZBbW4dqA.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx145064-5fa4ZBbW4dqA.jpg"
                        id="imgcard" alt="145064" loading="eager">
                    </picture>
                    <h3 class="cardname">JUJUTSU KAISEN Season 2</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx143327-6gv1QzquNg2o.png">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx143327-6gv1QzquNg2o.png">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx143327-6gv1QzquNg2o.png"
                        id="imgcard" alt="143327" loading="eager">
                    </picture>
                    <h3 class="cardname">MF GHOST</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx154587-n1fmjRv4JQUd.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx154587-n1fmjRv4JQUd.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx154587-n1fmjRv4JQUd.jpg"
                        id="imgcard" alt="154587" loading="eager">
                    </picture>
                    <h3 class="cardname">Frieren: Beyond Journey’s End</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx160515-TBRBYWdOysg8.png">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx160515-TBRBYWdOysg8.png">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx160515-TBRBYWdOysg8.png"
                        id="imgcard" alt="160515" loading="eager">
                    </picture>
                    <h3 class="cardname">OVERTAKE!</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx154116-JAVIME9SBdfe.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx154116-JAVIME9SBdfe.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx154116-JAVIME9SBdfe.jpg"
                        id="imgcard" alt="154116" loading="eager">
                    </picture>
                    <h3 class="cardname">Undead Unluck</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx154454-u2Z5RSa0zTBY.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx154454-u2Z5RSa0zTBY.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx154454-u2Z5RSa0zTBY.jpg"
                        id="imgcard" alt="154454" loading="eager">
                    </picture>
                    <h3 class="cardname">The Family Circumstances of the Irregular Witch</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx146493-CqZyE9u7xgJ4.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx146493-CqZyE9u7xgJ4.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx146493-CqZyE9u7xgJ4.jpg"
                        id="imgcard" alt="146493" loading="lazy">
                    </picture>
                    <h3 class="cardname">Ragna Crimson</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx152802-qpOnEtQDbppP.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx152802-qpOnEtQDbppP.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx152802-qpOnEtQDbppP.jpg"
                        id="imgcard" alt="152802" loading="lazy">
                    </picture>
                    <h3 class="cardname">Dark Gathering</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx129188-qiPP63PuIvdL.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx129188-qiPP63PuIvdL.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx129188-qiPP63PuIvdL.jpg"
                        id="imgcard" alt="129188" loading="lazy">
                    </picture>
                    <h3 class="cardname">GOBLIN SLAYER II</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx160900-RVkEf6l1KbCv.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx160900-RVkEf6l1KbCv.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx160900-RVkEf6l1KbCv.jpg"
                        id="imgcard" alt="160900" loading="lazy">
                    </picture>
                    <h3 class="cardname">The Kingdoms of Ruin</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx163142-0IkEQ9xpcuT6.png">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx163142-0IkEQ9xpcuT6.png">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx163142-0IkEQ9xpcuT6.png"
                        id="imgcard" alt="163142" loading="lazy">
                    </picture>
                    <h3 class="cardname">A Returner's Magic Should Be Special</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx111322-2jQMDQva4YD7.png">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx111322-2jQMDQva4YD7.png">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx111322-2jQMDQva4YD7.png"
                        id="imgcard" alt="111322" loading="lazy">
                    </picture>
                    <h3 class="cardname">The Rising of the Shield Hero Season 3</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://image.tmdb.org/t/p/original/79d7F8z5ToV3H1UZl8KLKv5vVwr.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://image.tmdb.org/t/p/w780/79d7F8z5ToV3H1UZl8KLKv5vVwr.jpg"><img
                        src="https://image.tmdb.org/t/p/w92/79d7F8z5ToV3H1UZl8KLKv5vVwr.jpg" id="imgcard" alt="161964"
                        loading="lazy">
                    </picture>
                    <h3 class="cardname">The Eminence in Shadow Season 2</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://image.tmdb.org/t/p/w440_and_h660_face/rocRrglJfYkglKilmFaStvo5EvS.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://image.tmdb.org/t/p/w300/rocRrglJfYkglKilmFaStvo5EvS.jpg"><img
                        src="https://image.tmdb.org/t/p/w92/rocRrglJfYkglKilmFaStvo5EvS.jpg" id="imgcard" alt="162670"
                        loading="lazy">
                    </picture>
                    <h3 class="cardname">Dr. STONE New World Part 2</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx159808-QtmFeA4G8a5l.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx159808-QtmFeA4G8a5l.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx159808-QtmFeA4G8a5l.jpg"
                        id="imgcard" alt="159808" loading="lazy">
                    </picture>
                    <h3 class="cardname">The Vexations of a Shut-In Vampire Princess</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx159831-TxAC0ujoLTK6.png">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx159831-TxAC0ujoLTK6.png">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx159831-TxAC0ujoLTK6.png"
                        id="imgcard" alt="159831" loading="lazy">
                    </picture>
                    <h3 class="cardname">Zom 100: Bucket List of the Dead</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx154384-3tpmugzrVpE9.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx154384-3tpmugzrVpE9.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx154384-3tpmugzrVpE9.jpg"
                        id="imgcard" alt="154384" loading="lazy">
                    </picture>
                    <h3 class="cardname">Tearmoon Empire</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx143085-yvDDZJwUKRWL.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx143085-yvDDZJwUKRWL.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx143085-yvDDZJwUKRWL.jpg"
                        id="imgcard" alt="143085" loading="lazy">
                    </picture>
                    <h3 class="cardname">The Faraway Paladin: The Lord of Rust Mountains</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx142598-0jpRK2h0v1hd.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx142598-0jpRK2h0v1hd.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx142598-0jpRK2h0v1hd.jpg"
                        id="imgcard" alt="142598" loading="lazy">
                    </picture>
                    <h3 class="cardname">Reign of the Seven Spellblades</h3>
                  </button></div>
              </div>
            </div>
          </div>
        </div>
        <div class="sc-tsFYE bLycor">
          <div style="display: flex; cursor: pointer; width: fit-content;">
            <h3 class="sc-fmRtwQ cHkJzm">Popular Anime</h3><svg class="MuiSvgIcon-root" focusable="false"
              viewBox="0 0 24 24" aria-hidden="true"
              style="color: gray; margin-top: 0.1em; margin-bottom: -0.2em; vertical-align: bottom; font-size: 1.17em;">
              <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"></path>
            </svg>
          </div>
          <div class="sc-ESujJ kaGqFq"><button aria-label="Go Right" type="button" class="sc-lkwKjF dPtIpd"><svg
                class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"
                style="font-size: 3vw;">
                <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"></path>
              </svg></button>
            <div class="sc-jWEIYm loaHIY">
              <div class="sc-eEOqmf iXxamA">
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx16498-C6FPmWm59CyP.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx16498-C6FPmWm59CyP.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx16498-C6FPmWm59CyP.jpg"
                        id="imgcard" alt="16498" loading="eager">
                    </picture>
                    <h3 class="cardname">Attack on Titan</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx101922-PEn1CTc93blC.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx101922-PEn1CTc93blC.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx101922-PEn1CTc93blC.jpg"
                        id="imgcard" alt="101922" loading="eager">
                    </picture>
                    <h3 class="cardname">Demon Slayer: Kimetsu no Yaiba</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://media.kitsu.io/anime/poster_images/1376/original.png">
                      <source media="(min-width: 236px)"
                        srcset="https://media.kitsu.io/anime/poster_images/1376/large.jpg"><img
                        src="https://media.kitsu.io/anime/poster_images/1376/medium.jpg" id="imgcard" alt="1535"
                        loading="eager">
                    </picture>
                    <h3 class="cardname">Death Note</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx21459-DUKLgasrgeNO.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx21459-DUKLgasrgeNO.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx21459-DUKLgasrgeNO.jpg"
                        id="imgcard" alt="21459" loading="eager">
                    </picture>
                    <h3 class="cardname">My Hero Academia</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx113415-bbBWj4pEFseh.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx113415-bbBWj4pEFseh.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx113415-bbBWj4pEFseh.jpg"
                        id="imgcard" alt="113415" loading="eager">
                    </picture>
                    <h3 class="cardname">JUJUTSU KAISEN</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx11061-sIpBprNRfzCe.png">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx11061-sIpBprNRfzCe.png">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx11061-sIpBprNRfzCe.png"
                        id="imgcard" alt="11061" loading="eager">
                    </picture>
                    <h3 class="cardname">Hunter x Hunter (2011)</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx21087-UV2tu6exrfXz.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx21087-UV2tu6exrfXz.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx21087-UV2tu6exrfXz.jpg"
                        id="imgcard" alt="21087" loading="eager">
                    </picture>
                    <h3 class="cardname">One-Punch Man</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/nx20605-fmnHdfurM7m6.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/nx20605-fmnHdfurM7m6.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/nx20605-fmnHdfurM7m6.jpg"
                        id="imgcard" alt="20605" loading="eager">
                    </picture>
                    <h3 class="cardname">Tokyo Ghoul</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx20958-HuFJyr54Mmir.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx20958-HuFJyr54Mmir.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx20958-HuFJyr54Mmir.jpg"
                        id="imgcard" alt="20958" loading="eager">
                    </picture>
                    <h3 class="cardname">Attack on Titan Season 2</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/nx11757-Q9P2zjCPICq5.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/nx11757-Q9P2zjCPICq5.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/nx11757-Q9P2zjCPICq5.jpg"
                        id="imgcard" alt="11757" loading="eager">
                    </picture>
                    <h3 class="cardname">Sword Art Online</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx5114-KJTQz9AIm6Wk.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx5114-KJTQz9AIm6Wk.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx5114-KJTQz9AIm6Wk.jpg"
                        id="imgcard" alt="5114" loading="eager">
                    </picture>
                    <h3 class="cardname">Fullmetal Alchemist: Brotherhood</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx20-YJvLbgJQPCoI.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx20-YJvLbgJQPCoI.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx20-YJvLbgJQPCoI.jpg"
                        id="imgcard" alt="20" loading="lazy">
                    </picture>
                    <h3 class="cardname">Naruto</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx21519-XIr3PeczUjjF.png">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx21519-XIr3PeczUjjF.png">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx21519-XIr3PeczUjjF.png"
                        id="imgcard" alt="21519" loading="lazy">
                    </picture>
                    <h3 class="cardname">Your Name.</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx21856-gutauxhWAwn6.png">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx21856-gutauxhWAwn6.png">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx21856-gutauxhWAwn6.png"
                        id="imgcard" alt="21856" loading="lazy">
                    </picture>
                    <h3 class="cardname">My Hero Academia Season 2</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx99147-5RXELRvwjFl6.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx99147-5RXELRvwjFl6.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx99147-5RXELRvwjFl6.jpg"
                        id="imgcard" alt="99147" loading="lazy">
                    </picture>
                    <h3 class="cardname">Attack on Titan Season 3</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx20954-UMb6Kl7ZL8Ke.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx20954-UMb6Kl7ZL8Ke.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx20954-UMb6Kl7ZL8Ke.jpg"
                        id="imgcard" alt="20954" loading="lazy">
                    </picture>
                    <h3 class="cardname">A Silent Voice</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/nx21-tXMN3Y20PIL9.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/nx21-tXMN3Y20PIL9.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/nx21-tXMN3Y20PIL9.jpg"
                        id="imgcard" alt="21" loading="lazy">
                    </picture>
                    <h3 class="cardname">ONE PIECE</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx101759-NhSwxv7HY9y9.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx101759-NhSwxv7HY9y9.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx101759-NhSwxv7HY9y9.jpg"
                        id="imgcard" alt="101759" loading="lazy">
                    </picture>
                    <h3 class="cardname">The Promised Neverland</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx20755-q0b3Ok1cAbPd.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx20755-q0b3Ok1cAbPd.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx20755-q0b3Ok1cAbPd.jpg"
                        id="imgcard" alt="20755" loading="lazy">
                    </picture>
                    <h3 class="cardname">Assassination Classroom</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx100166-jUCZYbzn2XLw.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx100166-jUCZYbzn2XLw.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx100166-jUCZYbzn2XLw.jpg"
                        id="imgcard" alt="100166" loading="lazy">
                    </picture>
                    <h3 class="cardname">My Hero Academia Season 3</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx110277-qDRIhu50PXzz.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx110277-qDRIhu50PXzz.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx110277-qDRIhu50PXzz.jpg"
                        id="imgcard" alt="110277" loading="lazy">
                    </picture>
                    <h3 class="cardname">Attack on Titan Final Season</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx20665-CnzR2zVpdxtR.png">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx20665-CnzR2zVpdxtR.png">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx20665-CnzR2zVpdxtR.png"
                        id="imgcard" alt="20665" loading="lazy">
                    </picture>
                    <h3 class="cardname">Your lie in April</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/nx21234-v2NMgPyoVRoM.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/nx21234-v2NMgPyoVRoM.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/nx21234-v2NMgPyoVRoM.jpg"
                        id="imgcard" alt="21234" loading="lazy">
                    </picture>
                    <h3 class="cardname">ERASED</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx21507-BICFCVZY3xQb.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx21507-BICFCVZY3xQb.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx21507-BICFCVZY3xQb.jpg"
                        id="imgcard" alt="21507" loading="lazy">
                    </picture>
                    <h3 class="cardname">Mob Psycho 100</h3>
                  </button></div>
              </div>
            </div>
          </div>
        </div>
        <div class="sc-tsFYE bLycor">
          <div style="display: flex; cursor: pointer; width: fit-content;">
            <h3 class="sc-fmRtwQ cHkJzm">Currently Airing</h3><svg class="MuiSvgIcon-root" focusable="false"
              viewBox="0 0 24 24" aria-hidden="true"
              style="color: gray; margin-top: 0.1em; margin-bottom: -0.2em; vertical-align: bottom; font-size: 1.17em;">
              <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"></path>
            </svg>
          </div>
          <div class="sc-ESujJ kaGqFq"><button aria-label="Go Right" type="button" class="sc-lkwKjF dPtIpd"><svg
                class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"
                style="font-size: 3vw;">
                <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"></path>
              </svg></button>
            <div class="sc-jWEIYm loaHIY">
              <div class="sc-eEOqmf iXxamA">
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/nx21-tXMN3Y20PIL9.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/nx21-tXMN3Y20PIL9.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/nx21-tXMN3Y20PIL9.jpg"
                        id="imgcard" alt="21" loading="eager">
                    </picture>
                    <h3 class="cardname">ONE PIECE</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx145064-5fa4ZBbW4dqA.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx145064-5fa4ZBbW4dqA.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx145064-5fa4ZBbW4dqA.jpg"
                        id="imgcard" alt="145064" loading="eager">
                    </picture>
                    <h3 class="cardname">JUJUTSU KAISEN Season 2</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx159831-TxAC0ujoLTK6.png">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx159831-TxAC0ujoLTK6.png">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx159831-TxAC0ujoLTK6.png"
                        id="imgcard" alt="159831" loading="eager">
                    </picture>
                    <h3 class="cardname">Zom 100: Bucket List of the Dead</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx158927-VhtOEwPQ4tzo.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx158927-VhtOEwPQ4tzo.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx158927-VhtOEwPQ4tzo.jpg"
                        id="imgcard" alt="158927" loading="eager">
                    </picture>
                    <h3 class="cardname">SPY x FAMILY Season 2</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx111322-2jQMDQva4YD7.png">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx111322-2jQMDQva4YD7.png">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx111322-2jQMDQva4YD7.png"
                        id="imgcard" alt="111322" loading="eager">
                    </picture>
                    <h3 class="cardname">The Rising of the Shield Hero Season 3</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx154587-n1fmjRv4JQUd.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx154587-n1fmjRv4JQUd.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx154587-n1fmjRv4JQUd.jpg"
                        id="imgcard" alt="154587" loading="eager">
                    </picture>
                    <h3 class="cardname">Frieren: Beyond Journey’s End</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx129188-qiPP63PuIvdL.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx129188-qiPP63PuIvdL.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx129188-qiPP63PuIvdL.jpg"
                        id="imgcard" alt="129188" loading="eager">
                    </picture>
                    <h3 class="cardname">GOBLIN SLAYER II</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx235-XucEZpR3CRaV.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx235-XucEZpR3CRaV.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx235-XucEZpR3CRaV.jpg"
                        id="imgcard" alt="235" loading="eager">
                    </picture>
                    <h3 class="cardname">Case Closed</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://image.tmdb.org/t/p/original/79d7F8z5ToV3H1UZl8KLKv5vVwr.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://image.tmdb.org/t/p/w780/79d7F8z5ToV3H1UZl8KLKv5vVwr.jpg"><img
                        src="https://image.tmdb.org/t/p/w92/79d7F8z5ToV3H1UZl8KLKv5vVwr.jpg" id="imgcard" alt="161964"
                        loading="eager">
                    </picture>
                    <h3 class="cardname">The Eminence in Shadow Season 2</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://image.tmdb.org/t/p/w440_and_h660_face/rocRrglJfYkglKilmFaStvo5EvS.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://image.tmdb.org/t/p/w300/rocRrglJfYkglKilmFaStvo5EvS.jpg"><img
                        src="https://image.tmdb.org/t/p/w92/rocRrglJfYkglKilmFaStvo5EvS.jpg" id="imgcard" alt="162670"
                        loading="eager">
                    </picture>
                    <h3 class="cardname">Dr. STONE New World Part 2</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx154116-JAVIME9SBdfe.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx154116-JAVIME9SBdfe.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx154116-JAVIME9SBdfe.jpg"
                        id="imgcard" alt="154116" loading="eager">
                    </picture>
                    <h3 class="cardname">Undead Unluck</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx142877-wNH2KPu6LYF4.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx142877-wNH2KPu6LYF4.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx142877-wNH2KPu6LYF4.jpg"
                        id="imgcard" alt="142877" loading="lazy">
                    </picture>
                    <h3 class="cardname">Rurouni Kenshin (2023)</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx163329-IwFrtk7HkFQ9.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx163329-IwFrtk7HkFQ9.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx163329-IwFrtk7HkFQ9.jpg"
                        id="imgcard" alt="163329" loading="lazy">
                    </picture>
                    <h3 class="cardname">Tokyo Revengers: Tenjiku-hen</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx152802-qpOnEtQDbppP.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx152802-qpOnEtQDbppP.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx152802-qpOnEtQDbppP.jpg"
                        id="imgcard" alt="152802" loading="lazy">
                    </picture>
                    <h3 class="cardname">Dark Gathering</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx160900-RVkEf6l1KbCv.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx160900-RVkEf6l1KbCv.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx160900-RVkEf6l1KbCv.jpg"
                        id="imgcard" alt="160900" loading="lazy">
                    </picture>
                    <h3 class="cardname">The Kingdoms of Ruin</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx162694-7dx7dawGFylP.png">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx162694-7dx7dawGFylP.png">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx162694-7dx7dawGFylP.png"
                        id="imgcard" alt="162694" loading="lazy">
                    </picture>
                    <h3 class="cardname">The 100 Girlfriends Who Really, Really, Really,</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx146493-CqZyE9u7xgJ4.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx146493-CqZyE9u7xgJ4.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx146493-CqZyE9u7xgJ4.jpg"
                        id="imgcard" alt="146493" loading="lazy">
                    </picture>
                    <h3 class="cardname">Ragna Crimson</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx154459-Sd2RMvVpLYQM.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx154459-Sd2RMvVpLYQM.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx154459-Sd2RMvVpLYQM.jpg"
                        id="imgcard" alt="154459" loading="lazy">
                    </picture>
                    <h3 class="cardname">Our Dating Story: The Experienced You and The</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx151970-qGhkXKWD9enA.png">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx151970-qGhkXKWD9enA.png">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx151970-qGhkXKWD9enA.png"
                        id="imgcard" alt="151970" loading="lazy">
                    </picture>
                    <h3 class="cardname">Shangri-La Frontier</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx156039-R0hSOmQGALwe.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx156039-R0hSOmQGALwe.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx156039-R0hSOmQGALwe.jpg"
                        id="imgcard" alt="156039" loading="lazy">
                    </picture>
                    <h3 class="cardname">Berserk of Gluttony</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx145140-wLsUPyBs6jkv.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx145140-wLsUPyBs6jkv.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx145140-wLsUPyBs6jkv.jpg"
                        id="imgcard" alt="145140" loading="lazy">
                    </picture>
                    <h3 class="cardname">Helck</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx158926-PfOGyTRzxqZu.png">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx158926-PfOGyTRzxqZu.png">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx158926-PfOGyTRzxqZu.png"
                        id="imgcard" alt="158926" loading="lazy">
                    </picture>
                    <h3 class="cardname">Ron Kamonohashi's Forbidden Deductions</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx143085-yvDDZJwUKRWL.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx143085-yvDDZJwUKRWL.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx143085-yvDDZJwUKRWL.jpg"
                        id="imgcard" alt="143085" loading="lazy">
                    </picture>
                    <h3 class="cardname">The Faraway Paladin: The Lord of Rust Mountains</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx158704-rgAPxP3xAvRc.jpg">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx158704-rgAPxP3xAvRc.jpg">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx158704-rgAPxP3xAvRc.jpg"
                        id="imgcard" alt="158704" loading="lazy">
                    </picture>
                    <h3 class="cardname">I'm in Love with the Villainess</h3>
                  </button></div>
                <div class="sc-jmNpzm deBlwi"><button class="cardbutton" aria-label="Anime">
                    <picture id="imgcontainer">
                      <source media="(min-width: 1500px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx154692-H1d1F1DIGq3k.png">
                      <source media="(min-width: 236px)"
                        srcset="https://s4.anilist.co/file/anilistcdn/media/anime/cover/medium/bx154692-H1d1F1DIGq3k.png">
                      <img src="https://s4.anilist.co/file/anilistcdn/media/anime/cover/small/bx154692-H1d1F1DIGq3k.png"
                        id="imgcard" alt="154692" loading="lazy">
                    </picture>
                    <h3 class="cardname">Girlfriend, Girlfriend Season 2</h3>
                  </button></div>
              </div>
            </div>
          </div>
        </div>
        <div class="sc-tsFYE bLycor">
          <div style="display: flex; cursor: pointer;">
            <h3 class="sc-iqGgem igtnsv">Anime Collections</h3><svg class="MuiSvgIcon-root" focusable="false"
              viewBox="0 0 24 24" aria-hidden="true"
              style="color: gray; margin-top: 0.1em; margin-bottom: -0.2em; vertical-align: bottom; font-size: 1.17em;">
              <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"></path>
            </svg>
          </div>
          <div class="sc-fmrZth hUtgIy"><button type="button" class="sc-eVQfli nvDHv"><svg class="MuiSvgIcon-root"
                focusable="false" viewBox="0 0 24 24" aria-hidden="true" style="font-size: 3vw;">
                <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"></path>
              </svg></button>
            <div class="sc-eXBvqI jItCWE">
              <div class="sc-iFwKgL AFpzd"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div id="modal-root">
    <div id="modalbackground" class="sc-fnykZs bJdfMY">
      <div id="modalbackground" class="sc-idiyUo knRBNo">
        <div class="sc-dIouRR gTkoFs">
          <header class="sc-hHLeRK drMYFB">
            <div>
              <h2>No Game, No Life</h2>
              <h3>(ノーゲーム・ノーライフ)</h3>
              <div class="sc-dmRaPn hKgGHX"><button title="Continue Episode 1" class="sc-cTQhss iRJeIl">
                  <div style="margin-left: -5%;"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24"
                      aria-hidden="true" style="font-size: clamp(1.5rem, 3vw, 3rem); margin-right: 0.5vw;">
                      <path d="M8 5v14l11-7z"></path>
                    </svg><strong>Continue Episode 1</strong></div>
                </button><button type="button" title="Add to My List" class="sc-iAvgwm bObpRF"><svg
                    class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24" aria-hidden="true"
                    style="font-size: clamp(2rem, 2.5vw, 3.7rem);">
                    <path
                      d="M8.12 9.29L12 13.17l3.88-3.88c.39-.39 1.02-.39 1.41 0 .39.39.39 1.02 0 1.41l-4.59 4.59c-.39.39-1.02.39-1.41 0L6.7 10.7a.9959.9959 0 010-1.41c.39-.38 1.03-.39 1.42 0z">
                    </path>
                  </svg></button><button type="button" title="View on Anilist" class="sc-iAvgwm bObpRF"><svg
                    class="MuiSvgIcon-root MuiSvgIcon-fontSizeMedium MuiBox-root css-uqopch" viewBox="0 0 24 24"
                    role="img" xmlns="http://www.w3.org/2000/svg" style="font-size: clamp(1.5rem, 2vw, 3rem);">
                    <path
                      d="M6.361 2.943 0 21.056h4.942l1.077-3.133H11.4l1.052 3.133H22.9c.71 0 1.1-.392 1.1-1.101V17.53c0-.71-.39-1.101-1.1-1.101h-6.483V4.045c0-.71-.392-1.102-1.101-1.102h-2.422c-.71 0-1.101.392-1.101 1.102v1.064l-.758-2.166zm2.324 5.948 1.688 5.018H7.144z">
                    </path>
                  </svg></button><button type="button" title="Download Episodes" class="sc-iAvgwm bObpRF"><svg
                    class="MuiSvgIcon-root MuiSvgIcon-fontSizeMedium MuiBox-root css-uqopch" focusable="false"
                    aria-hidden="true" viewBox="0 0 24 24" data-testid="DownloadRoundedIcon"
                    style="font-size: clamp(1.5rem, 2vw, 3.5rem);">
                    <path
                      d="M16.59 9H15V4c0-.55-.45-1-1-1h-4c-.55 0-1 .45-1 1v5H7.41c-.89 0-1.34 1.08-.71 1.71l4.59 4.59c.39.39 1.02.39 1.41 0l4.59-4.59c.63-.63.19-1.71-.7-1.71zM5 19c0 .55.45 1 1 1h12c.55 0 1-.45 1-1s-.45-1-1-1H6c-.55 0-1 .45-1 1z">
                    </path>
                  </svg></button></div>
            </div><button type="button" class="sc-jOrMOR kChssf"><svg class="MuiSvgIcon-root" focusable="false"
                viewBox="0 0 24 24" aria-hidden="true" style="font-size: clamp(1.5rem, 2vw, 2.5rem);">
                <path
                  d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z">
                </path>
              </svg></button>
          </header>
          <main class="sc-kgflAQ ucfBW">
            <div>
              <div id="mal-sync"></div>
              <div class="sc-ivTmOn gAkuwQ"><strong>77% Match</strong><label>2014</label><label>12
                  episodes</label><label>24 minutes</label></div>
              <div class="sc-fLlhyt gxPSKX">
                <p>Bored with life and considering the real world to be just a “crappy game,” savvy sibling shut-ins
                  Sora and Shiro have withdrawn into their own fantasy world filled with video games.

                  However, one day they find themselves summoned to another world by a boy who calls himself “God,”
                  their... <button class="sc-bBrHrO jTTIvw">Show More</button></p>
              </div>
            </div>
            <div class="sc-cxabCf bnbVkF">
              <header class="sc-llJcti grpuYN">
                <h3 style="margin: auto 0.6% auto 0px;">Episodes</h3><svg class="MuiSvgIcon-root" focusable="false"
                  viewBox="0 0 24 24" aria-hidden="true" style="cursor: pointer; font-size: 1.5em;">
                  <path d="M16 17.01V10h-2v7.01h-3L15 21l4-3.99h-3zM9 3L5 6.99h3V14h2V6.99h3L9 3z"></path>
                </svg>
                <div style="float: right; display: flex; margin-left: auto;">
                  <div class="sc-jIZahH kCAzFP"><button type="button" class="sc-gXmSlM iXvhvb">Subtitles</button>
                    <div class="sc-himrzO fBvCCl" style="max-height: 1500%; overflow: auto;"><button
                        type="button">Subtitles</button><button type="button">Dubbed</button></div>
                  </div>
                </div>
              </header><a href="/watch/no-game-no-life-episode-1/269"
                title="Sora and Shiro are unemployed and never leave their house, but on the net, they're known as &quot;Blank&quot;, an invincible team of gamers. One day, these siblings are visited by a boy named Tet, who calls himself god. Tet summons them to a world where all war is banned, and everything is decided by games.">
                <div class="sc-ezWOiH cVtmeL">
                  <div class="sc-bZkfAO fripPp"><img alt="thumbnail"
                      src="https://artworks.thetvdb.com/banners/episodes/278155/4789306.jpg">
                    <div
                      style="position: absolute; height: 0.35rem; width: 19%; background-color: red; border-radius: 0px 0px 0.5rem 0.5rem; bottom: 0px; float: left;">
                    </div>
                  </div>
                  <div class="sc-kLLXSd iypdTa">
                    <h4 style="white-space: nowrap;">1. Beginner</h4>
                    <p>Sora and Shiro are unemployed and never leave their house, but on the net, they're known as
                      "Blank", an invincible team of gamers. One day, these siblings are visited by a boy named Tet, who
                      calls...</p>
                  </div>
                  <div class="sc-ikZpkk gWivFr">
                    <h4>1. Beginner</h4>
                    <p>Sora and Shiro are unemployed and never leave their house, but on the net, they're known as
                      "Blank", an invincible team of gamers. One day, these siblings are visited by a boy named Tet, who
                      calls himself god. Tet summons them to a world where all war is banned, and everything is decided
                      by games.</p>
                  </div>
                </div>
              </a><a href="/watch/no-game-no-life-episode-2/"
                title="Sora and Shiro have been abandoned in another world by Tet. In this world all war is forbidden, and everything is determined by games whose rules are determined by the &quot;Ten Pledges&quot; that Tet established. They find themselves in the country of humanity, the weakest of the 16 races in this new world.">
                <div class="sc-ezWOiH cVtmeL">
                  <div class="sc-bZkfAO fripPp"><img alt="thumbnail"
                      src="https://artworks.thetvdb.com/banners/episodes/278155/4845977.jpg">
                    <div
                      style="position: absolute; height: 0.35rem; width: 0px; background-color: red; border-radius: 0px 0px 0.5rem 0.5rem; bottom: 0px; float: left;">
                    </div>
                  </div>
                  <div class="sc-kLLXSd iypdTa">
                    <h4 style="white-space: nowrap;">2. Challenger</h4>
                    <p>Sora and Shiro have been abandoned in another world by Tet. In this world all war is forbidden,
                      and everything is determined by games whose rules are determined by the "Ten Pledges" that Tet...
                    </p>
                  </div>
                  <div class="sc-ikZpkk gWivFr">
                    <h4>2. Challenger</h4>
                    <p>Sora and Shiro have been abandoned in another world by Tet. In this world all war is forbidden,
                      and everything is determined by games whose rules are determined by the "Ten Pledges" that Tet
                      established. They find themselves in the country of humanity, the weakest of the 16 races in this
                      new world.</p>
                  </div>
                </div>
              </a><a href="/watch/no-game-no-life-episode-3/"
                title="A girl named Clamy has won the right to be the next king of Elukia by her overwhelming good luck. Steph lost to her and loses the chance to become the next ruler. Just as she defeats the last challenger, however, Sora and Shiro interrupt her.">
                <div class="sc-ezWOiH cVtmeL">
                  <div class="sc-bZkfAO fripPp"><img alt="thumbnail"
                      src="https://artworks.thetvdb.com/banners/episodes/278155/4845978.jpg">
                    <div
                      style="position: absolute; height: 0.35rem; width: 0px; background-color: red; border-radius: 0px 0px 0.5rem 0.5rem; bottom: 0px; float: left;">
                    </div>
                  </div>
                  <div class="sc-kLLXSd iypdTa">
                    <h4 style="white-space: nowrap;">3. Expert</h4>
                    <p>A girl named Clamy has won the right to be the next king of Elukia by her overwhelming good luck.
                      Steph lost to her and loses the chance to become the next ruler. Just as she defeats the last...
                    </p>
                  </div>
                  <div class="sc-ikZpkk gWivFr">
                    <h4>3. Expert</h4>
                    <p>A girl named Clamy has won the right to be the next king of Elukia by her overwhelming good luck.
                      Steph lost to her and loses the chance to become the next ruler. Just as she defeats the last
                      challenger, however, Sora and Shiro interrupt her.</p>
                  </div>
                </div>
              </a><a href="/watch/no-game-no-life-episode-4/"
                title="The game Clamy challenged them to wasn't normal chess. Shiro is a chess master, but even she is helpless against Clami's assault. But when Shiro understands the real rules of the game, things begind to turn around. The battle to determine the king of Elukia, and all of humanity, finally reaches its end.">
                <div class="sc-ezWOiH cVtmeL">
                  <div class="sc-bZkfAO fripPp"><img alt="thumbnail"
                      src="https://artworks.thetvdb.com/banners/episodes/278155/4845979.jpg">
                    <div
                      style="position: absolute; height: 0.35rem; width: 0px; background-color: red; border-radius: 0px 0px 0.5rem 0.5rem; bottom: 0px; float: left;">
                    </div>
                  </div>
                  <div class="sc-kLLXSd iypdTa">
                    <h4 style="white-space: nowrap;">4. Grandmaster</h4>
                    <p>The game Clamy challenged them to wasn't normal chess. Shiro is a chess master, but even she is
                      helpless against Clami's assault. But when Shiro understands the real rules of the game, things
                      begind...</p>
                  </div>
                  <div class="sc-ikZpkk gWivFr">
                    <h4>4. Grandmaster</h4>
                    <p>The game Clamy challenged them to wasn't normal chess. Shiro is a chess master, but even she is
                      helpless against Clami's assault. But when Shiro understands the real rules of the game, things
                      begind to turn around. The battle to determine the king of Elukia, and all of humanity, finally
                      reaches its end.</p>
                  </div>
                </div>
              </a><a href="/watch/no-game-no-life-episode-5/"
                title="Sora and Shiro leave the running of the country to Steph and spend every day playing video games. Steph's hope that they would become not only the saviors of Elukia, but all of humanity, crumbles away.">
                <div class="sc-ezWOiH cVtmeL">
                  <div class="sc-bZkfAO fripPp"><img alt="thumbnail"
                      src="https://artworks.thetvdb.com/banners/episodes/278155/4845980.jpg">
                    <div
                      style="position: absolute; height: 0.35rem; width: 0px; background-color: red; border-radius: 0px 0px 0.5rem 0.5rem; bottom: 0px; float: left;">
                    </div>
                  </div>
                  <div class="sc-kLLXSd iypdTa">
                    <h4 style="white-space: nowrap;">5. Weak Square</h4>
                    <p>Sora and Shiro leave the running of the country to Steph and spend every day playing video games.
                      Steph's hope that they would become not only the saviors of Elukia, but all of humanity,
                      crumbles...</p>
                  </div>
                  <div class="sc-ikZpkk gWivFr">
                    <h4>5. Weak Square</h4>
                    <p>Sora and Shiro leave the running of the country to Steph and spend every day playing video games.
                      Steph's hope that they would become not only the saviors of Elukia, but all of humanity, crumbles
                      away.</p>
                  </div>
                </div>
              </a>
              <div class="sc-cCsOjp isLDgQ">
                <div class="sc-jdAMXn kvNUXF"></div><button type="button" class="sc-ciZhAO czZxKJ">
                  <div class="sc-bZnhIo ArXrE"><svg class="MuiSvgIcon-root" focusable="false" viewBox="0 0 24 24"
                      aria-hidden="true" style="font-size: max(2rem, 1.8vw);">
                      <path d="M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z"></path>
                    </svg></div>
                </button>
              </div>
            </div>
            <div style="clear: both;">
              <h3 class="separator" style="white-space: nowrap; text-overflow: ellipsis; overflow: hidden;">About No
                Game, No Life</h3>
              <div class="sc-iTONeN jrpBWE">
                <li>Genres: <a href="/genre/Adventure">Adventure, </a><a href="/genre/Comedy">Comedy, </a><a
                    href="/genre/Ecchi">Ecchi, </a><a href="/genre/Fantasy">Fantasy</a></li>
                <li>Average Episode: <label>24 minutes</label></li>
              </div>
            </div>
          </main>
        </div>
      </div>
      <script id="syncData"
        type="application/json">{"page":"anime","slug":"no-game-no-life","anilistID":"19815","malID":"19815","name":"No Game No Life"}</script>
    </div>
  </div>
  <script src="https://storage.ko-fi.com/cdn/scripts/overlay-widget.js" type="text/javascript"></script>
  <script src="//whistlingmoderate.com/4e/94/aa/4e94aa34d1fd74e10209b793916bd64a.js"></script>
  <script src="//whistlingmoderate.com/a9/33/26/a933267b77dfd826e3ef933ebbdd591f.js"></script>
  <div id="kofi-widget-overlay-31b2f127-dc37-4daf-b267-74e146d3817a">
    <div class="floatingchat-container-wrap" style="z-index: 10000;"><iframe class="floatingchat-container" style=""
        id="kofi-wo-containerkofi-widget-overlay-31b2f127-dc37-4daf-b267-74e146d3817a"></iframe></div>
    <div class="floatingchat-container-wrap-mobi" style="z-index: 10000;"><iframe class="floatingchat-container-mobi"
        style="" id="kofi-wo-container-mobikofi-widget-overlay-31b2f127-dc37-4daf-b267-74e146d3817a"></iframe></div>
    <div id="kofi-widget-overlay-31b2f127-dc37-4daf-b267-74e146d3817a-kofi-popup-iframe"
      class="floating-chat-kofi-popup-iframe"
      style="z-index: 10000; height: 0px; width: 0px; opacity: 0; transition: all 0.6s ease 0s;">
      <div class="floating-chat-kofi-popup-iframe-notice"><a href="https://ko-fi.com/animeflixlive" target="_blank"
          class="kfds-text-is-link-dark">ko-fi.com/animeflixlive</a></div>
      <div class="floating-chat-kofi-popup-iframe-closer"><span><svg height="0px" width="15px">
            <line x1="2" y1="8" x2="13" y2="18" style="stroke:#000; stroke-width:3"></line>
            <line x1="13" y1="8" x2="2" y2="18" style="stroke:#000; stroke-width:3"></line>
          </svg></span></div>
      <div class="floating-chat-kofi-popup-iframe-container"
        id="kofi-widget-overlay-31b2f127-dc37-4daf-b267-74e146d3817a-kofi-popup-iframepopup-iframe-container"
        style="height: 100%;"></div>
    </div>
    <div id="kofi-widget-overlay-31b2f127-dc37-4daf-b267-74e146d3817a-kofi-popup-iframe-mobi"
      class="floating-chat-kofi-popup-iframe-mobi"
      style="z-index: 10000; height: 0px; width: 0px; opacity: 0; transition: all 0.6s ease 0s;">
      <div class="floating-chat-kofi-popup-iframe-notice-mobi"><a href="https://ko-fi.com/animeflixlive" target="_blank"
          class="kfds-text-is-link-dark">ko-fi.com/animeflixlive</a></div>
      <div class="floating-chat-kofi-popup-iframe-closer-mobi"><span><svg height="0px" width="15px">
            <line x1="2" y1="8" x2="13" y2="18" style="stroke:#000; stroke-width:3"></line>
            <line x1="13" y1="8" x2="2" y2="18" style="stroke:#000; stroke-width:3"></line>
          </svg></span></div>
      <div class="floating-chat-kofi-popup-iframe-container-mobi"
        id="kofi-widget-overlay-31b2f127-dc37-4daf-b267-74e146d3817a-kofi-popup-iframe-mobipopup-iframe-container-mobi"
        style="height: 100%;"></div>
    </div>
  </div>
</body>
