<html>

<head>
  <base href="https://proxer.me/watch/6587/2/gerdub">
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <meta name="keywords" content="watch,anime,online,stream,episode">
  <title>No Game No Life Episode 2 GerDub - Proxer.Me</title>
  <meta name="googlebot" content="noindex, nofollow">

  <link rel="alternate" type="application/rss+xml" title="Proxer.Me News Feed" href="/feed/news.rss">
  <link rel="alternate" type="application/rss+xml" title="Proxer.Me Podcast Feed" href="/feed/proxcast.rss">
  <link rel="stylesheet" href="/templates/proxer14/css/common.css?10" type="text/css" media="screen">
  <link rel="stylesheet" href="/templates/proxer14/css/print.css" type="text/css" media="print">
  <link rel="stylesheet" href="/templates/proxer14/css/jqueryui/smoothness/jquery-ui-1.10.3.custom.css" type="text/css">
  <link rel="stylesheet" href="/templates/proxer14/lib/font-awesome-4.6.3/css/font-awesome.min.css" type="text/css">
  <link rel="stylesheet" href="/templates/proxer14/css/color/gray.css?6" type="text/css" media="screen">
  <link rel="stylesheet" href="/templates/proxer14/css/ht.css" type="text/css" media="screen">
  <style type="text/css">
    #wrapper {
      background-image: url('//cdn.proxer.me/gallery/originals/other_stuff__memes_17/63/59195');
    }
  </style>
  <link rel="search" type="application/opensearchdescription+xml" title="Proxer.Me - Anime und Manga Suche"
    href="https://proxer.me/opensearch.xml">
  <link rel="icon" href="/images/favicon-32x32.png" sizes="32x32" type="image/png">
  <script type="text/javascript" src="/templates/proxer14/js/jquery-1.9.1.min.js"></script>
  <script type="text/javascript" src="/templates/proxer14/js/jquery-ui-1.10.3.custom.min.js"></script>
  <script type="text/javascript" src="/templates/proxer14/js/common.js"></script>
  <script type="text/javascript" src="/templates/proxer14/js/jquery.plugins.js?4"></script>
  <style>
    #malStatus,
    #malTotal,
    #malEpisodes,
    #malUserRating,
    #malRating,
    #malVolumes,
    #malTotalVol,
    #malTotalCha,
    #AddMal {
      color: inherit;
    }

    .mal-sync-active {
      background-color: #002966;
    }

    #malp select option {
      background-color: #111111;
    }

    #malp #malStatus,
    #malp #malUserRating,
    #malp #malEpisodes,
    #malp #malVolumes,
    #malp #malEpisodes {
      font-size: inherit;
      font-family: inherit;
      background: transparent;
      border-color: grey;
      text-decoration: none;
      outline: medium none;
      border-width: 0;
      height: auto;
      padding: 0;
      margin: 0;
      line-height: 1;
    }

    #malp #malEpisodes,
    #malp #malVolumes,
    #malp #malEpisodes {
      text-align: center;
      border-bottom-width: 1px;
    }

    #malp #malEpisodes:focus,
    #malp #malVolumes:focus,
    #malp #malEpisodes:focus {
      border-color: inherit;
    }

    #malSyncProgress.ms-loading {
      height: 4px;
      width: 100%;
      position: relative;
      overflow: hidden;
      background-color: #ddd;
    }

    #malSyncProgress.ms-loading::before {
      display: block;
      position: absolute;
      content: '';
      left: -200px;
      width: 200px;
      height: 4px;
      background-color: #2980b9;
      animation: loading-mal 2s linear infinite;
    }

    @keyframes loading-mal {
      0% {
        left: -200px;
        width: 30%;
      }

      50% {
        width: 30%;
      }

      70% {
        width: 70%;
      }

      80% {
        left: 50%;
      }

      95% {
        left: 120%;
      }

      100% {
        left: 100%;
      }
    }

    #malSyncProgress.ms-done .ms-progress {
      width: 100% !important;
      background-color: #ff4081 !important;
      transition: background-color 1s !important;
    }

    .mal-sync-active {
      border: 2px solid #002966 !important;
    }

    #malp {
      margin: 10px;
      max-width: 1000px;
    }

    #malp select option {
      color: white;
    }

    /*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9wYWdlcy9wYWdlcy5sZXNzIiwid2VicGFjazovLy4vc3JjL3BhZ2VzL1Byb3hlci9zdHlsZS5sZXNzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBOzs7Ozs7Ozs7RUFTRSxjQUFBO0FDSEY7QURNQTtFQUNFLHlCQUFBO0FDSkY7QURPQTtFQUdNLHlCQUFBO0FDUE47QURZQTs7Ozs7RUFNSSxrQkFBQTtFQUNBLG9CQUFBO0VBQ0EsdUJBQUE7RUFDQSxrQkFBQTtFQUNBLHFCQUFBO0VBQ0Esb0JBQUE7RUFDQSxlQUFBO0VBQ0EsWUFBQTtFQUNBLFVBQUE7RUFDQSxTQUFBO0VBQ0EsY0FBQTtBQ1hKO0FETEE7OztFQXNCSSxrQkFBQTtFQUNBLHdCQUFBO0FDWko7QURjSTs7O0VBQ0UscUJBQUE7QUNWTjtBRGdCRTtFQUNFLFdBQUE7RUFDQSxXQUFBO0VBQ0Esa0JBQUE7RUFDQSxnQkFBQTtFQUNBLHNCQUFBO0FDZEo7QURnQkk7RUFDRSxjQUFBO0VBQ0Esa0JBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLFlBQUE7RUFDQSxXQUFBO0VBQ0EseUJBQUE7RUFDQSx5Q0FBQTtBQ2ROO0FEaUJJO0VBQ0U7SUFDRSxZQUFBO0lBQ0EsVUFBQTtFQ2ZOO0VEa0JJO0lBQ0UsVUFBQTtFQ2hCTjtFRG1CSTtJQUNFLFVBQUE7RUNqQk47RURvQkk7SUFDRSxTQUFBO0VDbEJOO0VEcUJJO0lBQ0UsVUFBQTtFQ25CTjtFRHNCSTtJQUNFLFVBQUE7RUNwQk47QUFDRjtBRHdCRTtFQUVJLHNCQUFBO0VBQ0Esb0NBQUE7RUFDQSwwQ0FBQTtBQ3ZCTjtBQW5GQTtFQUNFLG9DQUFBO0FBcUZGO0FBbEZBO0VBQ0UsWUFBQTtFQUNBLGlCQUFBO0FBb0ZGO0FBdEZBO0VBSUksWUFBQTtBQXFGSiIsInNvdXJjZXNDb250ZW50IjpbIkB0ZXh0Q29sb3I6IGJsYWNrO1xuQGFjdGl2ZUVwOiAjMDAyOTY2O1xuQGlucHV0QmFja2dyb3VuZDogIzExMTExMTtcblxuI21hbFN0YXR1cyxcbiNtYWxUb3RhbCxcbiNtYWxFcGlzb2RlcyxcbiNtYWxVc2VyUmF0aW5nLFxuI21hbFJhdGluZyxcbiNtYWxWb2x1bWVzLFxuI21hbFRvdGFsVm9sLFxuI21hbFRvdGFsQ2hhLFxuI0FkZE1hbCB7XG4gIGNvbG9yOiBAdGV4dENvbG9yO1xufVxuXG4ubWFsLXN5bmMtYWN0aXZlIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogQGFjdGl2ZUVwO1xufVxuXG4jbWFscCB7XG4gIHNlbGVjdCB7XG4gICAgb3B0aW9uIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IEBpbnB1dEJhY2tncm91bmQ7XG4gICAgfVxuICB9XG59XG5cbiNtYWxwIHtcbiAgI21hbFN0YXR1cyxcbiAgI21hbFVzZXJSYXRpbmcsXG4gICNtYWxFcGlzb2RlcyxcbiAgI21hbFZvbHVtZXMsXG4gICNtYWxFcGlzb2RlcyB7XG4gICAgZm9udC1zaXplOiBpbmhlcml0O1xuICAgIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgIGJvcmRlci1jb2xvcjogZ3JleTtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgb3V0bGluZTogbWVkaXVtIG5vbmU7XG4gICAgYm9yZGVyLXdpZHRoOiAwO1xuICAgIGhlaWdodDogYXV0bztcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbjogMDtcbiAgICBsaW5lLWhlaWdodDogMTtcbiAgfVxuXG4gICNtYWxFcGlzb2RlcyxcbiAgI21hbFZvbHVtZXMsXG4gICNtYWxFcGlzb2RlcyB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGJvcmRlci1ib3R0b20td2lkdGg6IDFweDtcblxuICAgICY6Zm9jdXMge1xuICAgICAgYm9yZGVyLWNvbG9yOiBAdGV4dENvbG9yO1xuICAgIH1cbiAgfVxufVxuXG4jbWFsU3luY1Byb2dyZXNzIHtcbiAgJi5tcy1sb2FkaW5nIHtcbiAgICBoZWlnaHQ6IDRweDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGRkO1xuXG4gICAgJjo6YmVmb3JlIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgY29udGVudDogJyc7XG4gICAgICBsZWZ0OiAtMjAwcHg7XG4gICAgICB3aWR0aDogMjAwcHg7XG4gICAgICBoZWlnaHQ6IDRweDtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICMyOTgwYjk7XG4gICAgICBhbmltYXRpb246IGxvYWRpbmctbWFsIDJzIGxpbmVhciBpbmZpbml0ZTtcbiAgICB9XG5cbiAgICBAa2V5ZnJhbWVzIGxvYWRpbmctbWFsIHtcbiAgICAgIDAlIHtcbiAgICAgICAgbGVmdDogLTIwMHB4O1xuICAgICAgICB3aWR0aDogMzAlO1xuICAgICAgfVxuXG4gICAgICA1MCUge1xuICAgICAgICB3aWR0aDogMzAlO1xuICAgICAgfVxuXG4gICAgICA3MCUge1xuICAgICAgICB3aWR0aDogNzAlO1xuICAgICAgfVxuXG4gICAgICA4MCUge1xuICAgICAgICBsZWZ0OiA1MCU7XG4gICAgICB9XG5cbiAgICAgIDk1JSB7XG4gICAgICAgIGxlZnQ6IDEyMCU7XG4gICAgICB9XG5cbiAgICAgIDEwMCUge1xuICAgICAgICBsZWZ0OiAxMDAlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gICYubXMtZG9uZSB7XG4gICAgLm1zLXByb2dyZXNzIHtcbiAgICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmY0MDgxICFpbXBvcnRhbnQ7XG4gICAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDFzICFpbXBvcnRhbnQ7XG4gICAgfVxuICB9XG59XG5cbi5ib3hTdHlsZShAYmcpIHtcbiAgQGdhcDogMTBweDtcblxuICAjTWFsRGF0YSB7XG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0ICFpbXBvcnRhbnQ7XG4gICAgYWxpZ24taXRlbXM6IHN0cmV0Y2ggIWltcG9ydGFudDtcbiAgICBnYXA6IEBnYXA7XG5cbiAgICAubWFscC1ncm91cCB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbiAhaW1wb3J0YW50O1xuXG4gICAgICAmID4gLm1hbHAtZ3JvdXAtZmllbGQsXG4gICAgICAmID4gLm1hbHAtZ3JvdXAtdmFsdWUtc2VjdGlvbiB7XG4gICAgICAgIGZsZXgtZ3JvdzogMTtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogQGJnICFpbXBvcnRhbnQ7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICAgICAgcGFkZGluZzogNHB4IDhweCAhaW1wb3J0YW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIG9wdGlvbiB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBAYmcgIWltcG9ydGFudDtcbiAgICB9XG5cbiAgICAubWFscC1ncm91cC1sYWJlbCB7XG4gICAgICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50O1xuICAgIH1cblxuICAgIC5tYWxwLWdyb3VwLWxhYmVsIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrICFpbXBvcnRhbnQ7XG4gICAgICBmb250LXNpemU6IDEycHggIWltcG9ydGFudDtcbiAgICB9XG5cbiAgICAjQWRkTWFsRGl2IHtcbiAgICAgIG1hcmdpbi1sZWZ0OiBAZ2FwO1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrICFpbXBvcnRhbnQ7XG4gICAgICBmb250LXNpemU6IDA7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBAYmcgIWltcG9ydGFudDtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICAgIHBhZGRpbmc6IDRweCA4cHggIWltcG9ydGFudDtcblxuICAgICAgI0FkZE1hbCB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsIkBpbXBvcnQgJy4vLi4vcGFnZXMnO1xuXG5AdGV4dENvbG9yOiBpbmhlcml0O1xuXG4ubWFsLXN5bmMtYWN0aXZlIHtcbiAgYm9yZGVyOiAycHggc29saWQgQGFjdGl2ZUVwICFpbXBvcnRhbnQ7XG59XG5cbiNtYWxwIHtcbiAgbWFyZ2luOiAxMHB4O1xuICBtYXgtd2lkdGg6IDEwMDBweDtcbiAgc2VsZWN0IG9wdGlvbiB7XG4gICAgY29sb3I6IHdoaXRlO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9 */
  </style>
  <style>
    .modal-content-kal.fullscreen {
      width: 100% !important;
      height: 100% !important;
      bottom: 0 !important;
      left: 0 !important;
    }

    .modal-content-kal {
      -webkit-transition: all 0.5s ease;
      -moz-transition: all 0.5s ease;
      -o-transition: all 0.5s ease;
      transition: all 0.5s ease;
    }

    .floatbutton:hover {
      background-color: rgb(63, 81, 181) !important;
    }

    .floatbutton:hover div {
      background-color: white;
      border-color: white;
    }

    .floatbutton div {
      background-color: black;
      border-color: black;
      -webkit-transition: all 0.5s ease;
      -moz-transition: all 0.5s ease;
      -o-transition: all 0.5s ease;
      transition: all 0.5s ease;
    }

    .floatbutton {
      z-index: 9999;
      display: none;
      position: fixed;
      bottom: 40px;
      right: 40px;
      border-radius: 50%;
      font-size: 24px;
      height: 56px;
      margin: auto;
      min-width: 56px;
      width: 56px;
      padding: 0;
      overflow: hidden;
      background: rgba(158, 158, 158, .2);
      box-shadow: 0 1px 1.5px 0 rgba(0, 0, 0, .12), 0 1px 1px 0 rgba(0, 0, 0, .24);
      line-height: normal;
      border: none;
      font-weight: 500;
      text-transform: uppercase;
      letter-spacing: 0;
      will-change: box-shadow;
      transition: box-shadow .2s cubic-bezier(.4, 0, 1, 1), background-color .2s cubic-bezier(.4, 0, .2, 1), color .2s cubic-bezier(.4, 0, .2, 1);
      outline: none;
      cursor: pointer;
      text-decoration: none;
      text-align: center;
      vertical-align: middle;
      padding: 16px !important;
    }

    .floatbutton.stealth {
      background: rgba(158, 158, 158, .03);
    }

    .floatbutton.stealth .open-info-popup {
      visibility: hidden;
    }

    .floatbutton.floatHide {
      visibility: hidden !important;
    }
  </style>
</head>

<body>
  <div id="nav">
    <div id="innerNav">
      <ul id="leftNav">
        <li class="topmenu">
          <a href="/" title="Proxer.Me Startseite" class="navlogo">&nbsp; ▾</a>
          <ul>
            <li><a href="/#top" data-ajax="true">Startseite</a></li>
            <li><a href="https://status.proxer.me/" data-ajax="true">Serverstatus</a></li>
            <li><a href="/impressum#top" data-ajax="true">Impressum</a></li>
            <li><a href="/donate#top" data-ajax="true">Spenden</a></li>
            <li><a href="/files#top" data-ajax="true">Dateiupload</a></li>
            <li>
              <hr>
            </li>
            <li><a href="javascript:;" id="tmode" class="lt">Low-Traffic Modus</a></li>
            <li style="margin: 15px;">
              <span class="colorbox colorbox_gray colorbox_check">&nbsp;</span>
              <span class="colorbox colorbox_black">&nbsp;</span>
              <span class="colorbox colorbox_old_blue">&nbsp;</span>
              <span class="colorbox colorbox_pantsu">&nbsp;</span>
            </li>
          </ul>
        </li>
        <li class="topmenu">
          <a href="/anime#top" data-ajax="touch">Anime ▾</a>
          <ul>
            <li><a href="/anime/animeseries/rating/all#top" data-ajax="true">Top-Bewertungen</a></li>
            <li><a href="/anime/animeseries/clicks/all#top" data-ajax="true">Top-Zugriffe</a></li>
            <li><a href="/anime/airing#top" data-ajax="true">Airing-Anime</a></li>
            <li><a href="/season#top" data-ajax="true">Season</a></li>
            <li><a href="/calendar#top" data-ajax="true">Anime-Kalender</a></li>
            <li>
              <hr>
            </li>
            <li><a href="/provider/proxerstream#top" data-ajax="true">Proxer HD</a></li>
            <li><a href="/provider/aod#top" data-ajax="true">Anime-on-Demand</a></li>
            <li><a href="/provider/crunchyroll#top" data-ajax="true">Crunchyroll</a></li>
            <li><a href="/provider/netflix#top" data-ajax="true">Netflix</a></li>
          </ul>
        </li>
        <li class="topmenu">
          <a href="/manga#top" data-ajax="touch">Manga ▾</a>
          <ul>
            <li><a href="/manga/mangaseries/rating/all#top" data-ajax="true">Top-Bewertungen</a></li>
            <li><a href="/manga/mangaseries/clicks/all#top" data-ajax="true">Top-Zugriffe</a></li>
            <li><a href="/manga/airing#top" data-ajax="true">Airing-Manga</a></li>
          </ul>
        </li>
        <li class="topmenu">
          <a href="/forum#top">Forum &amp; Community ▾</a>
          <ul>
            <li><a href="https://discord.gg/XwrEDmA" target="_blank">Discord</a></li>
            <li><a href="/forum#top">Forum</a></li>
            <li><a href="/teamspeak#top" data-ajax="true">Teamspeak</a></li>
            <li>
              <hr>
            </li>
            <li><a href="/ucp?s=reminder&amp;utm_source=nav#top" data-ajax="true">Lesezeichen</a></li>
            <li><a href="/ucp?s=anime&amp;utm_source=nav#top" data-ajax="true">Animeliste</a></li>
            <li><a href="/ucp?s=manga&amp;utm_source=nav#top" data-ajax="true">Mangaliste</a></li>
            <li>
              <hr>
            </li>
            <li><a href="/team#top" data-ajax="true">Team</a></li>
            <li><a href="/users#top" data-ajax="true">Userliste</a></li>
          </ul>
        </li>
        <li class="topmenu">
          <a href="javascript:;">Mehr ▾</a>
          <ul>

            <li><a href="/gallery#top" data-ajax="true">Galerie</a></li>
            <li><a href="/proxcast#top" data-ajax="true">ProxCast</a></li>
            <li><a href="/subs#top" data-ajax="true">ProxerSubs</a></li>
            <li><a href="/review#top" data-ajax="true">Rezensionen</a></li>
            <li><a href="/touzai#top" data-ajax="true">Touzai</a></li>
            <li>
              <hr>
            </li>
            <li><a href="/character#top" data-ajax="true">Charaktere</a></li>
            <li><a href="/interprets#top" data-ajax="true">Interpreten</a></li>
            <li><a href="/novel#top" data-ajax="true">Novel</a></li>
            <li><a href="/persons#top" data-ajax="true">Personen</a></li>
            <li><a href="/translatorgroups#top" data-ajax="true">Sub-/Scanlationgruppen</a></li>
            <li><a href="/industry#top" data-ajax="true">Unternehmen</a></li>
            <li>
              <hr>
            </li>
            <li><a href="/article#top">Artikelübersicht</a></li>

          </ul>
        </li>
      </ul>
      <ul id="rightNav">
        <li class="borderLeft">
          <a class="showBubble" id="loginNav" href="javascript:;" title="Akkusativ"><img alt="avatar"
              src="//cdn.proxer.me/avatar/tn/nophoto.png"></a>
        </li>
        <li>
          <a class="showBubble" id="searchNav" href="javascript:;" title="Globale Suche">&nbsp;</a>
        </li>
        <li>
          <a class="showBubble" id="newsNav" href="javascript:;" title="Anime- und Manganews">&nbsp;</a>
        </li>
        <li>
          <a class="showBubble" id="messageNav" href="javascript:;" title="Nachrichten">&nbsp;</a>
        </li>
        <li>
          <a id="requestNav" href="/user/my/connections#top" data-ajax="true" title="Freundschaftsanfragen">&nbsp;</a>
        </li>
        <li>
          <a class="showBubble" id="miscNav" href="javascript:;" title="Benachrichtigungen">&nbsp;</a>
        </li>
      </ul>
    </div>
    <div id="outerNav">
      <div id="notificationBubble"></div>
      <div id="loginBubble">
        <ul>
          <li style="text-align:center;">
            Eingeloggt als: <b id="uname">Akkusativ</b>
            <br>
            <img alt="Avatar" src="//cdn.proxer.me/avatar/tn/nophoto.png" style="max-width:200px;max-height:200px;">
            <br>
            <input id="mod_logout_submit" type="submit" name="Submit" value="Abmelden">
          </li>
          <li><a href="/user#top" data-ajax="true">Profil anzeigen</a></li>
          <li><a href="/ucp?s=edit#top">Profil bearbeiten</a></li>
          <li><a href="/ucp#top" data-ajax="true">User-Control-Panel</a></li>
          <li><a href="/ucp?s=invite#top" data-ajax="true">Freunde einladen</a></li>
          <li>
            <hr>
          </li>
          <li><a href="/ucp?s=anime&amp;utm_source=loginbox#top" data-ajax="true">Animeliste</a></li>
          <li><a href="/ucp?s=manga&amp;utm_source=loginbox#top" data-ajax="true">Mangaliste</a></li>
          <li><a href="/ucp?s=reminder&amp;utm_source=loginbox#top" data-ajax="true">Lesezeichen</a></li>
        </ul>
      </div>
    </div>
  </div>
  <div id="topbg"></div>
  <div id="wrapper">
    <div id="headSection">
      <a href="/gallery?s=detail&amp;id=59195#top" data-ajax="true" id="headerInfo" class="customBubble fa fa-info"
        title="Infos zum Header"></a>
    </div>
    <div id="top"></div>
    <div id="main">
      <ul id="simple-navi">
        <li class="active"><a>Episode <span class="wEp">2</span></a></li>
        <li><a data-ajax="true" href="/info/6587/details#top">Details</a></li>
        <li><a data-ajax="true" href="/info/6587/list#top">Episoden</a></li>
      </ul><br><br><br><br>
      <table width="1040" align="center" id="wContainer">
        <colgroup>
          <col width="160">
          <col width="720">
          <col width="160">
        </colgroup>
        <tbody>
          <tr>
            <td colspan="3" align="center" style="font-size: 20px;">
              <span class="wName">No Game No Life</span> -
              <span class="wLanguage">GerDub</span> -
              <span class="wEp">2</span>/12
              <span class="wLinkerText" style="display: inline;"> - Verlinker:
                <span class="wLinker"><a href="/user/29185#top" target="_blank">Dravorle</a></span></span>
              <span class="wGroupText" style="display:none;"> - Subgruppe:
                <a class="wGroup" target="_blank"></a></span>
            </td>
          </tr>
          <tr>
            <td colspan="3" align="center" class="wMirror"> <a href="javascript:void(0);"
                class="menu changeMirror active" id="mirror_netflix" title="Netflix" style=""><img
                  style="width:30px;height:30px;" src="/images/hoster/netflix.png"></a></td>
          </tr>
          <tr>
            <td valign="top">
            </td>
            <td align="center" valign="top">
              <noscript>
                <h3>Bitte aktiviere Javascript um Proxer ordnungsgem&auml;&szlig; darstellen zu k&ouml;nnen.</h3>
              </noscript>
              <div style="margin:2px 2px; "><a href="/donate#top" target="_blank"><img
                    src="/images/misc/proxerdonate.png" style="width:728;height:90;"></a></div>
              <div class="wStream">
                <div style="border: 1px solid; margin:10px; padding:10px;">
                  <h3>Beachte bitte: Dieser Stream ist kostenpflichtig</h3>
                  Es wird eine Netflix Mitgliedschaft zum Schauen dieses Videos vorausgesetzt.
                </div><a style="width:720px;height:504px;" href="https://www.netflix.com/watch/80052730" target="_blank"
                  class="external_player"></a>
              </div>
            </td>
            <td valign="top">
            </td>
          </tr>
          <tr class="no_details">
            <td align="center">
              <a style="display:block;" href="/watch/6587/1/gerdub" class="menu"> &lt; Vorherige</a>
            </td>
            <td align="center">
              <a href="javascript:void(0);" class="menu reminder" title="reminder_this">Watchlist: Diese Episode</a>
              <a href="javascript:void(0);" class="menu reminder" title="reminder_next">Watchlist: Nächste Episode</a>
              <br>
            </td>
            <td align="center">
              <a style="display:block;" href="/watch/6587/3/gerdub" class="menu">Nächste &gt; </a>
            </td>
          </tr>
        </tbody>
      </table>
      <br>
      <table width="1000" align="center">
        <tbody>
          <tr>
            <td width="50%" valign="top">
              <span id="reportStream">
                <h3>Defekt melden</h3>
                <form method="post" action="javascript:void(0);">
                  <input type="text" name="reportReason">
                  <input type="submit" id="report" value="Absenden">
                  <br>
                  Damit deine Meldung angenommen wird, musst du einen Grund angeben. Gib dies bitte in das folgende
                  Textfeld ein. Beispiel: "Ton und Bild nicht synchron" oder "Stream wurde gelöscht" oder "Kapitel lädt
                  nicht.". Nutze bei Proxer-Streams die Schaltfläche <a href="https://cdn.proxer.me/f/hr5pEYrT"
                    target="_blank">"Ladezeiten melden"</a>, falls die Ladezeit schlecht ist. Wir gehen diesen
                  regelmäßig nach!
                  <br>
                  <br>
                  <a href="mailto:genesis@proxer.de?subject=DMCA-Report">Report DMCA Infringement</a>
                </form>
              </span>
            </td>
            <td width="50%" valign="top">
              <h3>Diskussionen und Social Media</h3>
              <p>Diskutiere über dieses Werk mit anderen im <a target="_blank" href="/info/6587/forum">Forum</a> oder <a
                  href="https://discord.com/invite/XwrEDmA" target="_blank">Discord</a>!</p>
            </td>
          </tr>
        </tbody>
      </table>
      <script type="text/javascript" src="/components/com_proxer/js/media/default.js?3"></script>
      <script type="text/javascript">

        var streams = [{ "id": "732990", "code": "80052730", "type": "netflix", "htype": "link", "name": "Netflix", "replace": "https:\/\/www.netflix.com\/watch\/#", "img": "netflix.png", "parts": "0", "ssl": "1", "text": "<h3>Beachte bitte: Dieser Stream ist kostenpflichtig<\/h3>\r\nEs wird eine Netflix Mitgliedschaft zum Schauen dieses Videos vorausgesetzt.", "legal": "1", "public": "1", "points": "1", "uploader": "29185", "username": "Dravorle", "tid": null, "tname": null }];
        var translator_text = "Diese Episode wurde &uuml;bersetzt von: #. <a href=" / ">Weitere Informationen</a>";
        var disableAds = 0;
        var s_id = 0;
        var u_id = 824649;
        var nav_nxt = "/watch/6587/3/gerdub";
        var ps_ssl = 1;
        var ps_fw = 0;
        var ps_fw_interval = '10';
        var ps_beta = 0;
        var ps_day = 7;

        var ps_title = "No Game No Life Episode 2 GerDub";

        jQuery(document).off("keydown");
        jQuery(document).on("keydown", function (e) {
          if (e.keyCode == 39 && getCurrentLink().indexOf('/watch/') != -1 && !$("input").is(":focus") && !$("textarea").is(":focus")) {
            //ajaxProxerRequest(nav_nxt);
            window.location = nav_nxt;
          }
        });
      </script>
      <script type="text/javascript" src="/components/com_proxer/js/watch/stream2.js?11"></script>
      <div id="pageMetaAjax" style="display:none;">No Game No Life Episode 2 GerDub - Proxer.Me</div>
    </div>
  </div>
  <div id="misc" class="sprechblase" style="display:none;"></div>
  <div id="messages"></div>
  <input type="hidden" value="a0561e79ccfcce196f0d6f7f25ca1e88" id="proxerToken">


  <div id="chatapp_toggle" class="chatapp_element">[+] Chat öffnen</div>
</body>
<div
  style="pointer-events: none;display: none; position: fixed;z-index: 9999;left: 0;top: 0;bottom: 0;width: 100%; height: 100%; background-color: transparent; padding: 0; margin: 0; border: 0;"
  id="info-popup" class="modal-kal">
  <div
    style="pointer-events: all; background-color: #f9f9f9; margin: 0; max-width: 100%; max-height: 100%; min-width: 500px; min-height: 300px; width: 550px; height: 90%; position: absolute; bottom: 0%; left: 0%"
    class="modal-content-kal" id="modal-content"></div>
</div><button style="display: inline-block;" class="open-info-popup floatbutton">
  <i style="display: flex; height: 8px; transform: rotate(-45deg); margin-left: -7px; margin-right: -5px; pointer-events: none;"
    class="my-float open-info-popup">
    <div style="width: 1px;
              margin-left: 2px;
              border-top: 4px solid transparent;
              border-bottom: 4px solid transparent;
              border-right-width: 4px;
              border-right-style: solid;
              background-color: transparent;"></div>
    <div style="flex-grow: 1; border-top-left-radius: 2px; border-bottom-left-radius: 2px; margin-left: -1px;"></div>
    <div style="width: 5px; margin-left: 2px; border-top-right-radius: 2px; border-bottom-right-radius: 2px;"></div>
  </i>
</button>

</html>
