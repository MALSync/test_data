<html>

<head>
  <base href="https://proxer.me/info/6587">
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <meta name="keywords" content="No,Game,No,Life,watch,read,anime,manga,novel,free,kostenlos,">
  <meta name="og:title" content="No Game No Life (Anime) - Details">
  <meta name="og:type" content="website">
  <meta name="og:locale" content="de_DE">
  <meta name="og:image" content="https://cdn.proxer.me/cover/6587.jpg">
  <meta name="og:url" content="https://proxer.me/info/6587/details">
  <meta name="og:description" content="Sie sind &amp;quot;NEET&amp;quot; (&amp;quot;Not in Education, Employment or Training&amp;quot;) und &amp;quot;Hikikomori&amp;quot; (&amp;quot;Menschen, die sich in ihrem Zimmer einschließen und den Kontakt zur Gesellschaft auf ein Minimum reduzieren&amp;quot;), also junge Menschen, die die Schule bzw. Ausbildung verweigern und sich am Rande der japanischen Gesellschaftbefinden. Aber die beiden genialen Gamer-Geschwister, Sora und Shiro besitzen ein Geschick, das über den normalen, gesunden Menschenverstand hinausgeht, weshalb man sie schon fast als eine urbane Legende bezeichnen könnte. Eines Tages begegnen sie Teto, einem Jungen, der sich selbst als einen &amp;quot;Gott&amp;quot; bezeichnet. Teto lädt Sora und Shiro nach &amp;quot;Disboard&amp;quot; ein - eine Welt auf einem Spielbrett, wo Gewalt und Kriege verboten sind und alles durch Spiele entschieden wird.

(Quelle: Watchbox)">
  <meta name="description" content="Sie sind &amp;quot;NEET&amp;quot; (&amp;quot;Not in Education, Employment or Training&amp;quot;) und &amp;quot;Hikikomori&amp;quot; (&amp;quot;Menschen, die sich in ihrem Zimmer einschließen und den Kontakt zur Gesellschaft auf ein Minimum reduzieren&amp;quot;), also junge Menschen, die die Schule bzw. Ausbildung verweigern und sich am Rande der japanischen Gesellschaftbefinden. Aber die beiden genialen Gamer-Geschwister, Sora und Shiro besitzen ein Geschick, das über den normalen, gesunden Menschenverstand hinausgeht, weshalb man sie schon fast als eine urbane Legende bezeichnen könnte. Eines Tages begegnen sie Teto, einem Jungen, der sich selbst als einen &amp;quot;Gott&amp;quot; bezeichnet. Teto lädt Sora und Shiro nach &amp;quot;Disboard&amp;quot; ein - eine Welt auf einem Spielbrett, wo Gewalt und Kriege verboten sind und alles durch Spiele entschieden wird.

(Quelle: Watchbox)">
  <title>No Game No Life (Anime) - Details - Proxer.Me</title>
  <meta name="googlebot" content="noindex, nofollow">

  <link rel="alternate" type="application/rss+xml" title="Proxer.Me News Feed" href="/feed/news.rss">
  <link rel="alternate" type="application/rss+xml" title="Proxer.Me Podcast Feed" href="/feed/proxcast.rss">
  <link rel="stylesheet" href="/templates/proxer14/css/common.css?10" type="text/css" media="screen">
  <link rel="stylesheet" href="/templates/proxer14/css/print.css" type="text/css" media="print">
  <link rel="stylesheet" href="/templates/proxer14/css/jqueryui/smoothness/jquery-ui-1.10.3.custom.css" type="text/css">
  <link rel="stylesheet" href="/templates/proxer14/lib/font-awesome-4.6.3/css/font-awesome.min.css" type="text/css">
  <link rel="stylesheet" href="/templates/proxer14/css/color/gray.css?6" type="text/css" media="screen">
  <link rel="stylesheet" href="/templates/proxer14/css/ht.css" type="text/css" media="screen">
  <style type="text/css">
    #wrapper {
      background-image: url('//cdn.proxer.me/gallery/originals/other_stuff__memes_17/63/59452');
    }
  </style>
  <link rel="search" type="application/opensearchdescription+xml" title="Proxer.Me - Anime und Manga Suche"
    href="https://proxer.me/opensearch.xml">
  <link rel="icon" href="/images/favicon-32x32.png" sizes="32x32" type="image/png">
  <script type="text/javascript" src="/templates/proxer14/js/jquery-1.9.1.min.js"></script>
  <script type="text/javascript" src="/templates/proxer14/js/jquery-ui-1.10.3.custom.min.js"></script>
  <script type="text/javascript" src="/templates/proxer14/js/common.js"></script>
  <script type="text/javascript" src="/templates/proxer14/js/jquery.plugins.js?4"></script>
</head>

<body>
  <div id="nav">
    <div id="innerNav">
      <ul id="leftNav">
        <li class="topmenu">
          <a href="/" title="Proxer.Me Startseite" class="navlogo">&nbsp; ▾</a>
          <ul>
            <li><a href="/#top" data-ajax="true">Startseite</a></li>
            <li><a href="https://status.proxer.me/" data-ajax="true">Serverstatus</a></li>
            <li><a href="/impressum#top" data-ajax="true">Impressum</a></li>
            <li><a href="/donate#top" data-ajax="true">Spenden</a></li>
            <li><a href="/files#top" data-ajax="true">Dateiupload</a></li>
            <li>
              <hr>
            </li>
            <li><a href="javascript:;" id="tmode" class="lt">Low-Traffic Modus</a></li>
            <li style="margin: 15px;">
              <span class="colorbox colorbox_gray colorbox_check">&nbsp;</span>
              <span class="colorbox colorbox_black">&nbsp;</span>
              <span class="colorbox colorbox_old_blue">&nbsp;</span>
              <span class="colorbox colorbox_pantsu">&nbsp;</span>
            </li>
          </ul>
        </li>
        <li class="topmenu">
          <a href="/anime#top" data-ajax="touch">Anime ▾</a>
          <ul>
            <li><a href="/anime/animeseries/rating/all#top" data-ajax="true">Top-Bewertungen</a></li>
            <li><a href="/anime/animeseries/clicks/all#top" data-ajax="true">Top-Zugriffe</a></li>
            <li><a href="/anime/airing#top" data-ajax="true">Airing-Anime</a></li>
            <li><a href="/season#top" data-ajax="true">Season</a></li>
            <li><a href="/calendar#top" data-ajax="true">Anime-Kalender</a></li>
            <li>
              <hr>
            </li>
            <li><a href="/provider/proxerstream#top" data-ajax="true">Proxer HD</a></li>
            <li><a href="/provider/aod#top" data-ajax="true">Anime-on-Demand</a></li>
            <li><a href="/provider/crunchyroll#top" data-ajax="true">Crunchyroll</a></li>
            <li><a href="/provider/netflix#top" data-ajax="true">Netflix</a></li>
          </ul>
        </li>
        <li class="topmenu">
          <a href="/manga#top" data-ajax="touch">Manga ▾</a>
          <ul>
            <li><a href="/manga/mangaseries/rating/all#top" data-ajax="true">Top-Bewertungen</a></li>
            <li><a href="/manga/mangaseries/clicks/all#top" data-ajax="true">Top-Zugriffe</a></li>
            <li><a href="/manga/airing#top" data-ajax="true">Airing-Manga</a></li>
          </ul>
        </li>
        <li class="topmenu">
          <a href="/forum#top">Forum &amp; Community ▾</a>
          <ul>
            <li><a href="https://discord.gg/XwrEDmA" target="_blank">Discord</a></li>
            <li><a href="/forum#top">Forum</a></li>
            <li><a href="/teamspeak#top" data-ajax="true">Teamspeak</a></li>
            <li>
              <hr>
            </li>
            <li><a href="/ucp?s=reminder&amp;utm_source=nav#top" data-ajax="true">Lesezeichen</a></li>
            <li><a href="/ucp?s=anime&amp;utm_source=nav#top" data-ajax="true">Animeliste</a></li>
            <li><a href="/ucp?s=manga&amp;utm_source=nav#top" data-ajax="true">Mangaliste</a></li>
            <li>
              <hr>
            </li>
            <li><a href="/team#top" data-ajax="true">Team</a></li>
            <li><a href="/users#top" data-ajax="true">Userliste</a></li>
          </ul>
        </li>
        <li class="topmenu">
          <a href="javascript:;">Mehr ▾</a>
          <ul>

            <li><a href="/gallery#top" data-ajax="true">Galerie</a></li>
            <li><a href="/proxcast#top" data-ajax="true">ProxCast</a></li>
            <li><a href="/subs#top" data-ajax="true">ProxerSubs</a></li>
            <li><a href="/review#top" data-ajax="true">Rezensionen</a></li>
            <li><a href="/touzai#top" data-ajax="true">Touzai</a></li>
            <li>
              <hr>
            </li>
            <li><a href="/character#top" data-ajax="true">Charaktere</a></li>
            <li><a href="/interprets#top" data-ajax="true">Interpreten</a></li>
            <li><a href="/novel#top" data-ajax="true">Novel</a></li>
            <li><a href="/persons#top" data-ajax="true">Personen</a></li>
            <li><a href="/translatorgroups#top" data-ajax="true">Sub-/Scanlationgruppen</a></li>
            <li><a href="/industry#top" data-ajax="true">Unternehmen</a></li>
            <li>
              <hr>
            </li>
            <li><a href="/article#top">Artikelübersicht</a></li>

          </ul>
        </li>
      </ul>
      <ul id="rightNav">
        <li class="borderLeft">
          <a class="showBubble" id="loginNav" href="javascript:;" title="Akkusativ"><img alt="avatar"
              src="//cdn.proxer.me/avatar/tn/nophoto.png"></a>
        </li>
        <li>
          <a class="showBubble" id="searchNav" href="javascript:;" title="Globale Suche">&nbsp;</a>
        </li>
        <li>
          <a class="showBubble" id="newsNav" href="javascript:;" title="Anime- und Manganews">&nbsp;</a>
        </li>
        <li>
          <a class="showBubble" id="messageNav" href="javascript:;" title="Nachrichten">&nbsp;</a>
        </li>
        <li>
          <a id="requestNav" href="/user/my/connections#top" data-ajax="true" title="Freundschaftsanfragen">&nbsp;</a>
        </li>
        <li>
          <a class="showBubble" id="miscNav" href="javascript:;" title="Benachrichtigungen">&nbsp;</a>
        </li>
      </ul>
    </div>
    <div id="outerNav">
      <div id="notificationBubble"></div>
      <div id="loginBubble">
        <ul>
          <li style="text-align:center;">
            Eingeloggt als: <b id="uname">Akkusativ</b>
            <br>
            <img alt="Avatar" src="//cdn.proxer.me/avatar/tn/nophoto.png" style="max-width:200px;max-height:200px;">
            <br>
            <input id="mod_logout_submit" type="submit" name="Submit" value="Abmelden">
          </li>
          <li><a href="/user#top" data-ajax="true">Profil anzeigen</a></li>
          <li><a href="/ucp?s=edit#top">Profil bearbeiten</a></li>
          <li><a href="/ucp#top" data-ajax="true">User-Control-Panel</a></li>
          <li><a href="/ucp?s=invite#top" data-ajax="true">Freunde einladen</a></li>
          <li>
            <hr>
          </li>
          <li><a href="/ucp?s=anime&amp;utm_source=loginbox#top" data-ajax="true">Animeliste</a></li>
          <li><a href="/ucp?s=manga&amp;utm_source=loginbox#top" data-ajax="true">Mangaliste</a></li>
          <li><a href="/ucp?s=reminder&amp;utm_source=loginbox#top" data-ajax="true">Lesezeichen</a></li>
        </ul>
      </div>
    </div>
  </div>
  <div id="topbg"></div>
  <div id="wrapper">
    <div id="headSection">
      <a href="/gallery?s=detail&amp;id=59452#top" data-ajax="true" id="headerInfo" class="customBubble fa fa-info"
        title="Infos zum Header"></a>
    </div>
    <div id="top"></div>
    <div id="main">
      <div id="pageMetaAjax" style="display:none;">No Game No Life (Anime) - Details - Proxer.Me</div>
      <ul id="simple-navi">
        <li class="active"><a data-ajax="true" href="/info/6587/details#top">Details</a></li>
        <li><a data-ajax="true" href="/info/6587/list#top">Episoden</a></li>
        <li><a data-ajax="true" href="/info/6587/relation#top">Verbindungen</a></li>
        <li><a data-ajax="true" href="/info/6587/recommendations#top">Empfehlungen</a></li>
        <li><a data-ajax="true" href="/info/6587/updates#top">Updates</a></li>
        <li><a data-ajax="true" href="/info/6587/comments#top">Kommentare</a></li>
        <li><a data-ajax="true" href="/info/6587/history#top">Chronik</a></li>
        <li><a data-ajax="true" href="/info/6587/music#top">Musik</a></li>
        <li><a data-ajax="true" href="/info/6587/article#top">Artikel</a></li>
        <li><a data-ajax="true" href="/info/6587/forum#top">Diskussionen</a></li>
        <li><a data-ajax="true" href="/info/6587/gallery#top">Bilder</a></li>
        <li><a data-ajax="true" href="/edit-beta/anime/6587#top">Bearbeiten</a></li>
      </ul><br><br><br><span class="hreview-aggregate">
        <span style="margin:10px; display: block; font-size:20px;">Detail zu <span class="fn">No Game No Life</span>
          (Animeserie/TV):</span>
        <table width="1000" align="center">
          <tbody>
            <tr>
              <td align="center" rowspan="15" valign="top" width="200">
                <table width="100%" class="no_details">
                  <tbody>
                    <tr>
                      <td align="center">
                        <img src="//cdn.proxer.me/cover/6587.jpg" style="width:200px; height:280px;">
                      </td>
                    </tr>
                    <tr>
                      <td align="center">
                        <img width="15" src="/images/misc/stern.png"><img width="15" src="/images/misc/stern.png"><img
                          width="15" src="/images/misc/stern.png"><img width="15" src="/images/misc/stern.png"><img
                          width="15" src="/images/misc/stern.png"><img width="15" src="/images/misc/stern.png"><img
                          width="15" src="/images/misc/stern.png"><img width="15" src="/images/misc/stern.png"><img
                          width="15" src="/images/misc/stern.png"><img width="15" src="/images/misc/stern_grau.png"><br>
                        <span class="rating">
                          <span class="average">8.73</span>/<span class="best">10</span>
                        </span>(<span class="votes">12707</span> Stimmen)
                      </td>
                    </tr>
                    <tr>
                      <td align="center" style="border:0;">
                        <a class="menu ajaxLink" style="display:block;" data-action="note" title="Note"
                          href="javascript:void(0);">Vermerken</a>
                        <br>
                        <a class="menu ajaxLink" style="display:block;" data-action="favor" title="Favor"
                          href="javascript:void(0);">Favorisieren</a>
                        <br>
                        <a class="menu ajaxLink" style="display:block;" data-action="finish" title="Finish"
                          href="javascript:void(0);">Abgeschlossen</a>
                        <br>
                        <a class="menu" id="newComment" style="display:block;" href="javascript:void(0);">Kommentar
                          schreiben</a>
                        <br><a href="/misc/request?id=6587#top" class="menu" style="display:block;"
                          target="_blank">Streamanfrage</a> <br>
                        <a class="menu entry_subscribe" style="display:block;" href="javascript:;"
                          title="Mit einem Abo wirst du über neue Staffeln und News über dieses Werk benachrichtigt.">Abonnieren</a>
                        <div class="ajaxResponse" style="display:none;"></div>
                        <div class="socialshareprivacy"></div>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </td>
              <td width="550" valign="top">
                <table width="100%" class="details">
                  <colgroup>
                    <col width="120">
                    <col>
                  </colgroup>
                  <tbody>
                    <tr>
                      <td><b>Original Titel</b></td>
                      <td>No Game No Life</td>
                    </tr>
                    <tr>
                      <td><b>Englischer Titel</b></td>
                      <td>No Game No Life</td>
                    </tr>
                    <tr>
                      <td><b>Deutscher Titel</b></td>
                      <td>No Game No Life</td>
                    </tr>
                    <tr>
                      <td><b>Japanischer Titel</b></td>
                      <td>ノーゲーム・ノーライフ</td>
                    </tr>
                    <tr>
                      <td><b>Synonym</b></td>
                      <td>No Game, No Life</td>
                    </tr>
                    <tr>
                      <td><b>Synonym</b></td>
                      <td>NGNL</td>
                    </tr>
                    <tr>
                      <td><b>Synonym</b></td>
                      <td>Nogenora</td>
                    </tr>
                    <tr>
                      <td valign="top"><b>Genre</b></td>
                      <td valign="top">
                        <div class="genreContainer" id="genreContainer6587"></div>
                        <div id="genreBubble" class="pointerBubble"
                          style="z-index: 1; position: absolute; display: none;"></div>
                        <a href="javascript:;" id="genreTag58288" class="genreTag"
                          data-description="Dynamische Szenen, spannende Wettkämpfe und beeindruckende Kampfszenen prägen dieses Genre.">Action</a>,
                        <a href="javascript:;" id="genreTag58287" class="genreTag"
                          data-description="Es handelt sich meist um eine Geschichte über eine Reise oder Suche. Kurzum ein Abenteuer, das es zu bestehen gilt.">Adventure</a>,
                        <a href="javascript:;" id="genreTag58289" class="genreTag"
                          data-description="Witze, lustige Szenen und so ziemlich alles, was das Zwerchfell attackiert, fällt in dieses Genre.">Comedy</a>,
                        <a href="javascript:;" id="genreTag58290" class="genreTag"
                          data-description="Anzüglichkeiten und diverse Andeutungen lassen allen Junggebliebenen die Herzen höher schlagen. ;)">Ecchi</a>,
                        <a href="javascript:;" id="genreTag58291" class="genreTag"
                          data-description="Zauberer, magische Wesen, tugendhafte Helden und fiese Bösewichte - all das wird euch im Fantasy-Genre präsentiert und entführt euch ins Wunderland der sagenhaften Dinge...">Fantasy</a>,
                        <a href="javascript:;" id="genreTag58292" class="genreTag"
                          data-description="Das Genre mit Hauptfokus auf Magie. Dies kann vom klassischen Zauberer bis hin zu unnatürlichen Ereignissen reichen.">Magic</a>,
                        <a href="javascript:;" id="genreTag58293" class="genreTag"
                          data-description="Fiktive Wissenschaften in der Zukunft. Aber auch allerhand andere Zukunfts-Szenarien werden diesem Genre zugeordnet.">SciFi</a>,
                        <a href="javascript:;" id="genreTag58294" class="genreTag"
                          data-description="Zielgruppe Mann: vor allem für das reifere männliche Publikum ausgelegt.">Seinen</a>,
                        <a href="javascript:;" id="genreTag145918" class="genreTag"
                          data-description="Enthält erstaunliche und ungeklärte Ereignisse, welche den Gesetzen der Physik trotzen. Mächte, die gegen die Regeln der Wirklichkeit verstoßen.">Supernatural</a>,
                        <a href="javascript:;" id="genreTag58295" class="genreTag"
                          data-description="Unmenschliche Kräfte haben bei diesem Genre ihre Finger im Spiel.">Superpower</a>
                      </td>
                    </tr>
                    <style>
                      .pointerBubble {
                        text-shadow: none;
                      }
                    </style>
                    <tr>
                      <td valign="top"><b>Tags</b></td>
                      <td valign="top">
                        <div class="tagContainer" id="tagContainer6587"><a href="javascript:;" id="triggerAllTags"
                            class="triggerTagsVisible">Tags anzeigen</a>
                          <div id="listAllTags" style="display:none;margin-top:5px;">
                            <hr>
                            <div id="tagField"><a href="javascript:;" id="entryTag6668" class="entryTag"
                                title="Der Stand von Personen spielt eine besondere Rolle.">Adel</a>, <a
                                href="javascript:;" id="entryTag312" class="entryTag"
                                title="Das Werk spielt in einer Welt, die sich von der unseren in relevanten Merkmalen unterscheidet, etwa geografisch, politisch oder physikalisch.">Alternative
                                Welt</a>, <a href="javascript:;" id="entryTag313" class="entryTag"
                                title="Ein Charakter oder eine Gruppe gelangt aus Versehen oder mit Absicht in eine andere Dimension.">Dimensionsreise</a>,
                              <a href="javascript:;" id="entryTag1412" class="entryTag"
                                title="Blicke unter den Rock, Duschszenen, die Hauptcharaktere in Bikinis oder Unterwäsche. Kann Frauen wie Männer betreffen.">Fanservice</a>,
                              <a href="javascript:;" id="entryTag1417" class="entryTag"
                                title="Alle fantastischen Wesen finden hier ein Zuhause: Feen, Kobolde, Drachen, Phönixe, Riesen und viele andere Gestalten.">Fantastische
                                Kreaturen</a>, <a href="javascript:;" id="entryTag8122" class="entryTag"
                                title="Das Werk beschäftigt sich mit einem oder auch mehreren Spielen. Es kann sich dabei um Brettspiele oder auch um Computerspiele handeln.">Game</a>,
                              <a href="javascript:;" id="entryTag1413" class="entryTag"
                                title="Der Protagonist in diesem Manga will sich an die Spitze kämpfen. Dies resultiert in Wettkämpfen und Rivalität.">Ganbatte</a>,
                              <a href="javascript:;" id="entryTag7161" class="entryTag"
                                title="Männliche oder weibliche (Halb-)Menschen mit Tier oder Monsterattributen.">Halbmenschen</a>,
                              <a href="javascript:;" id="entryTag314" class="entryTag"
                                title="Ein junger oder jung wirkender, flachbrüstiger und kleiner weiblicher Charakter.">Loli</a>,
                              <a href="javascript:;" id="entryTag2636" class="entryTag"
                                title="Dieses Werk hat mehr als einen Protagonisten.">Mehrere Protagonisten</a>, <a
                                href="javascript:;" id="entryTag19527" class="entryTag"
                                title="Katzenmädchen, beispielsweise mit Katzenohren oder einem Katzenschwanz.">Neko</a>,
                              <a href="javascript:;" id="entryTag17843" class="entryTag"
                                title="Der Protagonist oder eine andere handlungstragende Person ist ein waschechter Otaku.">Otaku</a>,
                              <a href="javascript:;" id="entryTag3385" class="entryTag"
                                title="Nichts ist größer als die sexuellen Fantasien unseres Protagonisten.">Perverser
                                Protagonist</a>, <a href="javascript:;" id="entryTag315" class="entryTag"
                                title="Der Protagonist ist enorm intelligent und einfallsreich.">Schlauer
                                Protagonist</a></div>
                            <hr><a href="javascript:;" id="triggerSpoilerTags" class="menu triggerTagsVisible"><i
                                class="fa fa-exclamation-triangle"></i> Spoiler Tags anzeigen <i
                                class="fa fa-exclamation-triangle"></i></a>
                            <div id="listSpoilerTags" style="display:none;margin-top:5px;"><a href="javascript:;"
                                id="entryTag383" class="entryTag" title="Dieses Werk hat ein offenes Ende.">Open End</a>
                            </div>
                            <hr><a href="javascript:;" id="triggerTrialTags" class="menu triggerTagsVisible">Unbewertete
                              Tags anzeigen</a>
                            <div id="listTrialTags" style="display:none;margin-top:5px;"><a href="javascript:;"
                                id="entryTag197705" class="entryTag"
                                title="Dieses Werk hat ein rein positives Ende.">Happy End</a>, <a href="javascript:;"
                                id="entryTag238456" class="entryTag"
                                title="Der Protagonist ist von Anfang an oder wird im Laufe des Werkes weit stärker als andere Charaktere.">Overpowered</a>,
                              <a href="javascript:;" id="entryTag10201" class="entryTag"
                                title="VR spielt in diesem Werk eine wichtige Rolle.">Virtual Reality</a></div>
                          </div>
                          <hr>
                        </div>
                        <div id="tagRateBubble" class="pointerBubble"
                          style="z-index: 1; position: absolute; display: none;"></div>
                        <div>
                          <a class="menu newEntryTag" href="javascript:;"><i class="fa fa-plus-square"></i> Neuen Tag
                            eintragen</a>
                          <div id="newEntryTagForm" style="margin-top:10px;display:none;">
                            <span role="status" aria-live="polite" class="ui-helper-hidden-accessible"></span><input
                              type="text" placeholder="Trage hier den Tag ein"
                              class="proxerField newEntryTagInput ui-autocomplete-input" autocomplete="off"
                              style="width:250px;">
                            <input type="button" class="newEntryTagSubmit" id="entry6587" value="Speichern">
                            <br>
                            <a data-ajax="true" href="/tags">Liste aller Tags</a>
                          </div>
                        </div>
                      </td>
                    </tr>
                    <tr>
                      <td valign="top"><b>Adaption</b></td>
                      <td valign="top"><a href="/info/36840">No Game No Life (Light Novel)</a></td>
                    </tr>
                    <tr>
                      <td valign="top"><b>PSK</b></td>
                      <td valign="top">
                        <span style="cursor: help; margin:5px;" class="tip"
                          title="Dieser Anime ist nicht für Personen unter 16 Jahren geeignet."><img
                            src="/images/fsk/fsk16.png" width="100" height="100"></span><span
                          style="cursor: help; margin:5px;" class="tip"
                          title="Dieser Anime beinhaltet vulgäre Ausdrücke."><img src="/images/fsk/bad_language.png"
                            width="100" height="100"></span><span style="cursor: help; margin:5px;" class="tip"
                          title="Der Anime enthält Gewaltdarstellungen."><img src="/images/fsk/violence.png" width="100"
                            height="100"></span>
                      </td>
                    </tr>
                    <tr>
                      <td valign="top"><b>Season</b></td>
                      <td valign="top">Start: <a href="/season?y1=2014&amp;s1=2#top" data-ajax="true">Frühling
                          2014</a><br>Ende: <a href="/season?y1=2014&amp;s1=2#top" data-ajax="true">Frühling
                          2014</a><br></td>
                    </tr>
                    <tr>
                      <td><b>Status</b></td>
                      <td>Abgeschlossen</td>
                    </tr>
                    <tr>
                      <td valign="top"><b>Gruppen</b></td>
                      <td valign="top">Proxer.Me bietet keinerlei Downloads an. Diesbezüglich leiten wir dich an die
                        betroffenen Sub- und Scanlationgruppen weiter.<br><img class="flag"
                          src="/images/flag/german.gif" alt="de"> <a
                          href="/translatorgroups?id=438#top">AOIDiamond-Subs</a> <br><img class="flag"
                          src="/images/flag/german.gif" alt="de"> <a
                          href="/translatorgroups?id=92#top">Chinurarete-Subs</a> <br><img class="flag"
                          src="/images/flag/german.gif" alt="de"> <a href="/translatorgroups?id=472#top">CosmicProject
                          Subs</a> <br><img class="flag" src="/images/flag/german.gif" alt="de"> <a
                          href="/translatorgroups?id=346#top">FutariAlone-Subs</a> <br><img class="flag"
                          src="/images/flag/german.gif" alt="de"> <a href="/translatorgroups?id=11#top">Gruppe
                          Kampfkuchen</a> <br><img class="flag" src="/images/flag/german.gif" alt="de"> <a
                          href="/translatorgroups?id=390#top">Mirai-Fansubs</a> <br><img class="flag"
                          src="/images/flag/english.gif" alt="en"> <a href="/translatorgroups?id=1231#top">Chihiro</a>
                        <br><img class="flag" src="/images/flag/english.gif" alt="en"> <a
                          href="/translatorgroups?id=670#top">Coalgirls</a> <br><img class="flag"
                          src="/images/flag/english.gif" alt="en"> <a href="/translatorgroups?id=955#top">DameDesuYo</a>
                      </td>
                    </tr>
                    <tr>
                      <td valign="top"><b>Industrie</b></td>
                      <td valign="top"><img class="flag" src="/images/flag/japanese.gif" alt="jp"> <a
                          href="/industry?id=59#top">Madhouse</a> (Studio)<br><img class="flag"
                          src="/images/flag/german.gif" alt="de"> <a href="/industry?id=344#top">Amazon Video</a>
                        (Streamingdienst)<br><img class="flag" src="/images/flag/german.gif" alt="de"> <a
                          href="/industry?id=52#top">KSM</a> (Publisher)<br><img class="flag"
                          src="/images/flag/german.gif" alt="de"> <a href="/industry?id=203#top">Netflix Deutschland</a>
                        (Streamingdienst)<br><img class="flag" src="/images/flag/german.gif" alt="de"> <a
                          href="/industry?id=1296#top">Watch Box</a> (Streamingdienst)<br><img class="flag"
                          src="/images/flag/english.gif" alt="en"> <a href="/industry?id=583#top">Anime Network</a>
                        (Streamingdienst)<br><a href="/info/6587/industry#top">Weitere anzeigen</a></td>
                    </tr>
                    <tr>
                      <td>
                        <b>Lizenz</b>
                      </td>
                      <td>
                        Lizenziert! <a href="/forum/94/355934#top" target="_blank">Warum?</a> </td>
                    </tr>
                    <tr>
                      <td colspan="2"><b>Beschreibung:</b><br>
                        Sie sind "NEET" ("Not in Education, Employment or Training") und "Hikikomori" ("Menschen, die
                        sich in ihrem Zimmer einschließen und den Kontakt zur Gesellschaft auf ein Minimum reduzieren"),
                        also junge Menschen, die die Schule bzw. Ausbildung verweigern und sich am Rande der japanischen
                        Gesellschaftbefinden. Aber die beiden genialen Gamer-Geschwister, Sora und Shiro besitzen ein
                        Geschick, das über den normalen, gesunden Menschenverstand hinausgeht, weshalb man sie schon
                        fast als eine urbane Legende bezeichnen könnte. Eines Tages begegnen sie Teto, einem Jungen, der
                        sich selbst als einen "Gott" bezeichnet. Teto lädt Sora und Shiro nach "Disboard" ein - eine
                        Welt auf einem Spielbrett, wo Gewalt und Kriege verboten sind und alles durch Spiele entschieden
                        wird.<br>
                        <br>
                        (Quelle: Watchbox)
                      </td>
                    </tr>
                  </tbody>
                </table>
              </td>
              <td align="center" rowspan="15" valign="top" width="200">
                <table width="100%" class="details">
                  <colgroup>
                    <col>
                    <col width="30">
                  </colgroup>
                  <tbody>
                    <tr>
                      <td colspan="2" align="center">
                        <h3>Mithelfen!</h3>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <a data-ajax="true" href="/edit-beta/anime/6587/name#top">Name</a>
                      </td>
                      <td>
                        <i class="fa fa-check fa-2x"></i>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <a data-ajax="true" href="/edit-beta/anime/6587/genre2#top">Genre</a>
                      </td>
                      <td>
                        <i class="fa fa-check fa-2x"></i>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <a data-ajax="true" href="/edit-beta/anime/6587/description#top">Beschreibung</a>
                      </td>
                      <td>
                        <i class="fa fa-check fa-2x"></i>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <a data-ajax="true" href="/edit-beta/anime/6587/season#top">Season</a>
                      </td>
                      <td>
                        <i class="fa fa-check fa-2x"></i>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <a data-ajax="true" href="/edit-beta/anime/6587/license#top">Lizenz</a>
                      </td>
                      <td>
                        <i class="fa fa-check fa-2x"></i>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <a data-ajax="true" href="/edit-beta/anime/6587/industry#top">Unternehmen</a>
                      </td>
                      <td>
                        <i class="fa fa-check fa-2x"></i>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <a data-ajax="true" href="/edit-beta/anime/6587/character#top">Charaktere</a>
                      </td>
                      <td>
                        <i class="fa fa-check fa-2x"></i>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <a data-ajax="true" href="/edit-beta/anime/6587/persons#top">Personen</a>
                      </td>
                      <td>
                        <i class="fa fa-check fa-2x"></i>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        Tags
                      </td>
                      <td>
                        <i class="fa fa-check fa-2x"></i>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </td>
            </tr>
          </tbody>
        </table>
      </span>
      <br>
      <div style="width:1000px; margin:0 auto;">
        <div style="font-weight: bold;">Personen | <a href="/info/6587/people#top" data-ajax="true">Alle Personen
            anzeigen</a></div>
        <div style="margin: 10px 0;">
          <div class="pGridCell">
            <a data-ajax="true" href="/persons?id=691#top"
              style="background-image: url('//cdn.proxer.me/person/th/691.jpg')" class="pGridImageLink"></a>
            <div class="pGridTextBig">
              <a data-ajax="true" href="/persons?id=691#top">Yoshitsugu Matsuoka</a>
            </div>
            <div class="pGridText">
              Synchronsprecher
            </div>
          </div>
          <div class="pGridCell">
            <a data-ajax="true" href="/persons?id=83#top"
              style="background-image: url('//cdn.proxer.me/person/th/83.jpg')" class="pGridImageLink"></a>
            <div class="pGridTextBig">
              <a data-ajax="true" href="/persons?id=83#top">Rie Kugimiya</a>
            </div>
            <div class="pGridText">
              Synchronsprecher
            </div>
          </div>
          <div class="pGridCell">
            <a data-ajax="true" href="/persons?id=681#top"
              style="background-image: url('//cdn.proxer.me/person/th/681.jpg')" class="pGridImageLink"></a>
            <div class="pGridTextBig">
              <a data-ajax="true" href="/persons?id=681#top">Yuka Iguchi</a>
            </div>
            <div class="pGridText">
              Synchronsprecher
            </div>
          </div>
          <div class="pGridCell">
            <a data-ajax="true" href="/persons?id=200#top"
              style="background-image: url('//cdn.proxer.me/person/th/200.jpg')" class="pGridImageLink"></a>
            <div class="pGridTextBig">
              <a data-ajax="true" href="/persons?id=200#top">Mamiko Noto</a>
            </div>
            <div class="pGridText">
              Synchronsprecher
            </div>
          </div>
          <div class="pGridCell">
            <a data-ajax="true" href="/persons?id=678#top"
              style="background-image: url('//cdn.proxer.me/person/th/678.jpg')" class="pGridImageLink"></a>
            <div class="pGridTextBig">
              <a data-ajax="true" href="/persons?id=678#top">Miyuki Sawashiro</a>
            </div>
            <div class="pGridText">
              Synchronsprecher
            </div>
          </div>
          <div style="clear:both;"></div>
        </div>
      </div>
      <div style="width:1000px; margin:0 auto;">
        <div style="font-weight: bold;">Charaktere | <a href="/info/6587/character#top" data-ajax="true">Alle Charaktere
            anzeigen</a></div>
        <div style="margin: 10px 0;">
          <div class="pGridCell">
            <a data-ajax="true" href="/character?id=168#top"
              style="background-image: url('//cdn.proxer.me/character/th/168.jpg')" class="pGridImageLink"></a>
            <div class="pGridTextBig">
              <a data-ajax="true" href="/character?id=168#top">Shiro</a>
            </div>
            <div class="pGridText">
              Hauptcharakter
            </div>
          </div>
          <div class="pGridCell">
            <a data-ajax="true" href="/character?id=50#top"
              style="background-image: url('//cdn.proxer.me/character/th/50.jpg')" class="pGridImageLink"></a>
            <div class="pGridTextBig">
              <a data-ajax="true" href="/character?id=50#top">Sora</a>
            </div>
            <div class="pGridText">
              Hauptcharakter
            </div>
          </div>
          <div class="pGridCell">
            <a data-ajax="true" href="/character?id=431#top"
              style="background-image: url('//cdn.proxer.me/character/th/431.jpg')" class="pGridImageLink"></a>
            <div class="pGridTextBig">
              <a data-ajax="true" href="/character?id=431#top">Stephanie Dola</a>
            </div>
            <div class="pGridText">
              Hauptcharakter
            </div>
          </div>
          <div class="pGridCell">
            <a data-ajax="true" href="/character?id=433#top"
              style="background-image: url('//cdn.proxer.me/character/th/433.jpg')" class="pGridImageLink"></a>
            <div class="pGridTextBig">
              <a data-ajax="true" href="/character?id=433#top">Chlammy Zell</a>
            </div>
            <div class="pGridText">
              Nebencharakter
            </div>
          </div>
          <div class="pGridCell">
            <a data-ajax="true" href="/character?id=434#top"
              style="background-image: url('//cdn.proxer.me/character/th/434.jpg')" class="pGridImageLink"></a>
            <div class="pGridTextBig">
              <a data-ajax="true" href="/character?id=434#top">Fiel Nilvalen</a>
            </div>
            <div class="pGridText">
              Nebencharakter
            </div>
          </div>
          <div style="clear:both;"></div>
        </div>
      </div>
      <div style="width:1000px; margin:0 auto;">
        <div style="font-weight: bold;">Diskussionen und News | <a
            href="/forum/43-themen-zu-einzelnen-anime-und-manga/topic/create?eid=6587#top" rel="nofollow">Neue
            Diskussion erstellen</a></div>
        <table width="100%" class="details">
          <colgroup>
            <col width="100">
            <col>
            <col width="100">
            <col width="300">
          </colgroup>
          <tbody>
            <tr>
              <th>Antworten</th>
              <th>Thema</th>
              <th>Aufrufe</th>
              <th>Letzter Beitrag</th>
            </tr>
            <tr>
              <td style="text-align:center;"><span style="font-size:20px">8</span></td>
              <td>
                <a
                  href="/forum/18-ankuendigungen-und-projekte/386531-die-freuden-und-leiden-des-isekai-genres-jculture-talk-6#top">Die
                  Freuden und Leiden des Isekai-Genres | JCulture Talk #6</a>
                <br>
                von <a href="/user/101731#top">SilentGray</a> in <a
                  href="/forum/18-ankuendigungen-und-projekte">Ankündigungen und Projekte</a>
              </td>
              <td style="text-align:center;"><span style="font-size:20px">4583</span></td>
              <td>
                <a
                  href="/forum/18-ankuendigungen-und-projekte/386531-die-freuden-und-leiden-des-isekai-genres-jculture-talk-6/832023">04.04.2019
                  22:19</a> von <a href="/user/484616#top">SilverRailegh</a>
              </td>
            </tr>
            <tr>
              <td style="text-align:center;"><span style="font-size:20px">19</span></td>
              <td>
                <a
                  href="/forum/96-news-archiv/382701-no-game-no-life-zero-standard-editionen-erscheinen-am-20-september#top">No
                  Game No Life Zero – Standard-Editionen erscheinen am 20. September</a>
                <br>
                von <a href="/user/399374#top">hYperCubeHD</a> in <a href="/forum/96-news-archiv">Archiv: Newsecke</a>
              </td>
              <td style="text-align:center;"><span style="font-size:20px">22848</span></td>
              <td>
                <a
                  href="/forum/96-news-archiv/382701-no-game-no-life-zero-standard-editionen-erscheinen-am-20-september/823332">24.07.2018
                  22:51</a> von <a href="/user/173383#top">Akko</a>
              </td>
            </tr>
            <tr>
              <td style="text-align:center;"><span style="font-size:20px">57</span></td>
              <td>
                <a
                  href="/forum/96-news-archiv/378875-no-game-no-life-zero-neues-promo-video-mit-englischen-untertiteln-zum-film#top">No
                  Game No Life Zero – neues Promo-Video mit englischen Untertiteln zum Film</a>
                <br>
                von <a href="/user/155334#top">Minato.</a> in <a href="/forum/96-news-archiv">Archiv: Newsecke</a>
              </td>
              <td style="text-align:center;"><span style="font-size:20px">46057</span></td>
              <td>
                <a
                  href="/forum/96-news-archiv/378875-no-game-no-life-zero-neues-promo-video-mit-englischen-untertiteln-zum-film/796233">12.06.2017
                  20:50</a> von <a href="/user/397100#top">MonkeyD.Ruffy2000</a>
              </td>
            </tr>
            <tr>
              <td style="text-align:center;"><span style="font-size:20px">66</span></td>
              <td>
                <a href="/forum/96-news-archiv/373651-no-game-no-life-trailer-zur-deutschen-veroeffentlichung#top">No
                  Game no Life – Trailer zur deutschen Veröffentlichung!</a>
                <br>
                von <a href="/user/75359#top">Layna</a> in <a href="/forum/96-news-archiv">Archiv: Newsecke</a>
              </td>
              <td style="text-align:center;"><span style="font-size:20px">27440</span></td>
              <td>
                <a href="/forum/96-news-archiv/373651-no-game-no-life-trailer-zur-deutschen-veroeffentlichung/740718">14.04.2016
                  17:22</a> von <a href="/user/302606#top">Jarik761</a>
              </td>
            </tr>
            <tr>
              <td style="text-align:center;"><span style="font-size:20px">15</span></td>
              <td>
                <a href="/forum/78-archiv-anime-und-manga/371386-no-game-no-life-fortsetzung#top">No Game No Life
                  Fortsetzung?</a>
                <br>
                von <a href="/user/394989#top">KingYasuo</a> in <a href="/forum/78-archiv-anime-und-manga">Archiv: Anime
                  und Manga</a>
              </td>
              <td style="text-align:center;"><span style="font-size:20px">21202</span></td>
              <td>
                <a href="/forum/78-archiv-anime-und-manga/371386-no-game-no-life-fortsetzung/728048">20.02.2016
                  03:08</a> von <a href="/user/253883#top">Olaf144</a>
              </td>
            </tr>
            <tr>
              <td colspan="4" align="center"><a href="/info/6587/forum#top" data-ajax="true">Weitere Diskussionen
                  anzeigen...</a></td>
            </tr>
          </tbody>
        </table><br>
        <link rel="stylesheet" type="text/css" href="/components/com_proxer/css/comment/comments.css">
        <div style="font-weight:bold;">Die neuesten Kommentare</div> <br>
        <table style="width: 1000px;" align="center" class="details">
          <tbody>
            <tr>
              <td width="200" valign="top" align="center">
                <br><a href="/user/611646#top">
                  <img src="//cdn.proxer.me/avatar/tn/611646_pxMGad.png" width="150">
                  <br><br>
                  Erstgewesener</a>
              </td>
              <td valign="top">
                <table class="no_details misc_rating">
                  <tbody>
                    <tr>
                      <td>Genre</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                          width="15" src="/images/misc/stern.png"> </td>
                    </tr>
                    <tr>
                      <td>Story</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern_grau.png">
                        <img width="15" src="/images/misc/stern_grau.png"> </td>
                    </tr>
                    <tr>
                      <td>Animation/Bilder</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                          width="15" src="/images/misc/stern.png"> </td>
                    </tr>
                    <tr>
                      <td>Charaktere</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                          width="15" src="/images/misc/stern.png"> </td>
                    </tr>
                    <tr>
                      <td>Musik</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern_grau.png">
                        <img width="15" src="/images/misc/stern_grau.png"> </td>
                    </tr>
                  </tbody>
                </table>
                <div style="width: 557px; overflow-wrap: break-word;">No Game No Life wird in einigen Folgen schon
                  richtiggehend anzüglich. Aber trotzdem kann ich diesen Anime nur weiterempfehlen. Denn die Charaktere
                  sind super. Ich liebe es, wie sehr die Hauptcharaktere von ihren eigenen Fähigkeiten überzeugt sind.
                  Dass grenzt schon beinahe an Narzissmus. Aber gleichzeitig haben sie wirklich enorme Fähigkeiten.
                  Außerdem ist die Serie stellenweise so komisch, dass ich nicht mehr mit dem Lachen aufhören konnte.
                  <br><br>Fazit: Seit langer Zeit habe ich keinen so kurzweiligen Anime mehr gesehen.</div>
              </td>
              <td width="200" valign="top" align="center">
                <p>Keine Bewertung</p>
                <b>Stand: </b>
                Geschaut
                <br><br>
                <a href="javascript:void(0);" class="menu ajaxComment" title="recommend:22469080"
                  style="display:block">Empfehlen! [1]</a>
                <br>
                <a href="/comment?id=22469080#top" class="menu" style="display:block"
                  data-ajax="true">Kommentarseite</a>
                <br>
                <a href="/comment?id=22469080&amp;s=report#top" class="menu" style="display:block"
                  data-ajax="true">Missbrauch melden</a>
                <br>
                <div class="ajaxResponse_22469080" style="display:none;"></div>
              </td>
            </tr>
          </tbody>
        </table>
        <br>
        <table style="width: 1000px;" align="center" class="details">
          <tbody>
            <tr>
              <td width="200" valign="top" align="center">
                <br><a href="/user/234906#top">
                  <img src="//cdn.proxer.me/avatar/tn/234906_5612cea4273a5.png" width="150">
                  <br><br>
                  nexarion</a>
              </td>
              <td valign="top">
                <table class="no_details misc_rating">
                  <tbody>
                    <tr>
                      <td>Genre</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                          width="15" src="/images/misc/stern.png"> </td>
                    </tr>
                    <tr>
                      <td>Story</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                          width="15" src="/images/misc/stern_grau.png"> </td>
                    </tr>
                    <tr>
                      <td>Animation/Bilder</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                          width="15" src="/images/misc/stern.png"> </td>
                    </tr>
                    <tr>
                      <td>Charaktere</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                          width="15" src="/images/misc/stern.png"> </td>
                    </tr>
                  </tbody>
                </table>
                <div style="width: 557px; overflow-wrap: break-word;">Der Anime hat mich einfach umgehauen.<br><br>Ich
                  habe schon viele Anime gesehen und No Game No Life gehört absolut zu meinen Favoriten.<br><br>Da ich
                  selbst Gamer bin und besonderst Strategie Spiele liebe hat das Genre mich sofort angesprochen und ist
                  perfekt umgesetzt.<br><br>Die Story ist super auch wenn ich sie für diesen Anime nicht wichtig
                  fand.<br><br>An den Animationen gibt´s nichts zu meckern.<br>Ist alles Klasse animiert.<br><br>Nun zu
                  den Charakteren.<br>Die zwei Hauptcharaktere sind für mich das Ausschlaggebende was diesen Anime von
                  den meisten abhebt.<br>Ich mag schlaue Charaktere die ihre Macken haben und da passen die beiden
                  perfekt, super smart und durchgeknallt. <br><br>Fazit<br>Ein Meisterwerk das man anschauen muss wenn
                  mann etwas für Gaming und Strategie übrig hat. <br> </div>
              </td>
              <td width="200" valign="top" align="center">
                <p><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                    width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                    width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                    width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                    width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> </p>
                <b>Stand: </b>
                Geschaut
                <br><br>
                <a href="javascript:void(0);" class="menu ajaxComment" title="recommend:12303581"
                  style="display:block">Empfehlen! [2]</a>
                <br>
                <a href="/comment?id=12303581#top" class="menu" style="display:block"
                  data-ajax="true">Kommentarseite</a>
                <br>
                <a href="/comment?id=12303581&amp;s=report#top" class="menu" style="display:block"
                  data-ajax="true">Missbrauch melden</a>
                <br>
                <div class="ajaxResponse_12303581" style="display:none;"></div>
              </td>
            </tr>
          </tbody>
        </table>
        <br>
        <table style="width: 1000px;" align="center" class="details">
          <tbody>
            <tr>
              <td width="200" valign="top" align="center">
                <br><a href="/user/284580#top">
                  <img src="//cdn.proxer.me/avatar/tn/284580_Kbea6D.jpg" width="150">
                  <br><br>
                  KiriOkami</a>
              </td>
              <td valign="top">
                <table class="no_details misc_rating">
                  <tbody>
                    <tr>
                      <td>Genre</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                          width="15" src="/images/misc/stern_grau.png"> </td>
                    </tr>
                    <tr>
                      <td>Story</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                          width="15" src="/images/misc/stern.png"> </td>
                    </tr>
                    <tr>
                      <td>Animation/Bilder</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                          width="15" src="/images/misc/stern.png"> </td>
                    </tr>
                    <tr>
                      <td>Charaktere</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                          width="15" src="/images/misc/stern_grau.png"> </td>
                    </tr>
                    <tr>
                      <td>Musik</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                          width="15" src="/images/misc/stern_grau.png"> </td>
                    </tr>
                  </tbody>
                </table>
                <div style="width: 557px; overflow-wrap: break-word;">
                  <div style="text-align:center;">
                    <font size="4"><b>No Game No Life</b></font>
                  </div><br><br>Damals als es raus kam, wurde es mega gehyped, es hatte eine tolle Story, einen
                  großartigen Soundtrack und schöne visuals. Nun bin ich hier, ein paar Jahre später, um den Anime
                  erneut zu schauen und einen Kommentar zu hinterlassen, damit ich den Anime auch abhaken
                  kann.<br><br>Story ist schön, ich bin zwar nicht der große Fan des Isekai-Genre aber hier mag ich die
                  Umsetzung sehr. Hikikomori, die versuchen in der normalen Welt klar zu kommen, denen es aber
                  Kotzlangweilig ist, und deswegen wieder geboren werden. Schade, dass die Story so begrenzt und kurz
                  ist. Es wäre schön mehr Hintergrundwissen zu den anderen Rassen zu haben, oder alle einmal richtig zu
                  sehen, da ich mich nicht erinnere da alle einmal gesehen zu haben. Auch so, der Anime hat ein gutes
                  Pacing aber gerade weil er so spannend ist, merkt man, dass alles sehr kurz gehalten ist. Es gab so
                  viel Potential und ich erinnere mich wie sehr sich alle ein Sequel gewünscht haben. Bis heute dazu
                  leider auch nix.<br><br>Animationsstil ist großartig. Das Farbspektrum ist extrem hoch, viele helle
                  Farben, was mir sehr gut gefällt, auch generell vom Artstyle her bin ich mega happy. Die Visuals zu
                  den Charakteren, Hintergründen und Effekten passt einfach.<br><br>Charaktere sind gut, es gibt welche
                  die ich weniger mag, und ich finde die Darstellung von Menschen eher schlecht als recht, aber für das
                  Setting macht es wieder sehr viel Sinn und deswegen beklage ich mich da mal nicht. Wie gesagt finde
                  ich, man hätte mehr über die anderen Rassen kennen lernen sollen aber dafür war ja die Staffel zu
                  kurz.<br><br>Musik ist sehr schön. Entspanntes Ending, gute Hintergrundmusik die Stimmung macht, und
                  das Opening ist toll. This Game wenn ich es richtig im Kopf hab von Konomi Suzuki. Sie war auch die
                  jenige die für Angel Beats das Opening gestellt hat. Sehr schöne Stimme.<br><br>Abschließend gibt es
                  nur ein wenig zu No Game No Life zu sagen, undzwar, ein Toller Anime der viel zu kurz gekommen ist,
                  dem mehr Justice gemacht gebracht hätte werden müssen (Guter Satzbau). Es bleibt abzuwarten ob es
                  irgendwann mal eine richtige 2. Staffel gibt, ich warte wie viele Andere und jaa.
                </div>
              </td>
              <td width="200" valign="top" align="center">
                <p><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                    width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                    width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                    width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                    width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> </p>
                <b>Stand: </b>
                Geschaut
                <br><br>
                <a href="javascript:void(0);" class="menu ajaxComment" title="recommend:5092755"
                  style="display:block">Empfehlen! [1]</a>
                <br>
                <a href="/comment?id=5092755#top" class="menu" style="display:block" data-ajax="true">Kommentarseite</a>
                <br>
                <a href="/comment?id=5092755&amp;s=report#top" class="menu" style="display:block"
                  data-ajax="true">Missbrauch melden</a>
                <br>
                <div class="ajaxResponse_5092755" style="display:none;"></div>
              </td>
            </tr>
          </tbody>
        </table>
        <br>
        <table style="width: 1000px;" align="center" class="details">
          <tbody>
            <tr>
              <td width="200" valign="top" align="center">
                <br><a href="/user/801063#top">
                  <img src="//cdn.proxer.me/avatar/tn/801063_k9k70R.jpg" width="150">
                  <br><br>
                  Dreadolus</a>
              </td>
              <td valign="top">
                <div style="width: 557px; overflow-wrap: break-word;">Definitiv sehenswert! Nur schade dass der Anime
                  nicht weitergeht :(<br><br>Vor Allem fand ich das Konzept hinter dem Anime höchst interessant und mit
                  vielen kreativen Momenten auschöpft.<br>Die Episoden weisen grösstenteils gute Spannungsbögen auf und
                  man bekommt Freude weiterzuschauen. Die Protagonisten als auch Antagonisten sind alle sympatisch und
                  witzig gestaltet, was ich bei manchen sogar etwas übertrieben fand. Hin und wieder gibt es unnötige
                  Echi szenen, vor Allem aber störte mich der Loli Aspekt, ist halt Geschmackssache. Insgesamt gute
                  Unterhaltung die ich aber nicht allzu ernst nehmen konnte.</div>
              </td>
              <td width="200" valign="top" align="center">
                <p><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                    width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                    width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                    width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern_grau.png"> <img
                    width="15" src="/images/misc/stern_grau.png"> <img width="15" src="/images/misc/stern_grau.png">
                </p>
                <b>Stand: </b>
                Geschaut
                <br><br>
                <a href="javascript:void(0);" class="menu ajaxComment" title="recommend:42348532"
                  style="display:block">Empfehlen! [0]</a>
                <br>
                <a href="/comment?id=42348532#top" class="menu" style="display:block"
                  data-ajax="true">Kommentarseite</a>
                <br>
                <a href="/comment?id=42348532&amp;s=report#top" class="menu" style="display:block"
                  data-ajax="true">Missbrauch melden</a>
                <br>
                <div class="ajaxResponse_42348532" style="display:none;"></div>
              </td>
            </tr>
          </tbody>
        </table>
        <br>
        <table style="width: 1000px;" align="center" class="details">
          <tbody>
            <tr>
              <td width="200" valign="top" align="center">
                <br><a href="/user/843557#top">
                  <img src="//cdn.proxer.me/avatar/tn/843557_T11x5Z.png" width="150">
                  <br><br>
                  TRPTC_Zarroc</a>
              </td>
              <td valign="top">
                <table class="no_details misc_rating">
                  <tbody>
                    <tr>
                      <td>Genre</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                          width="15" src="/images/misc/stern_grau.png"> </td>
                    </tr>
                    <tr>
                      <td>Story</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern_grau.png">
                        <img width="15" src="/images/misc/stern_grau.png"> </td>
                    </tr>
                    <tr>
                      <td>Animation/Bilder</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                          width="15" src="/images/misc/stern.png"> </td>
                    </tr>
                    <tr>
                      <td>Charaktere</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                          width="15" src="/images/misc/stern.png"> </td>
                    </tr>
                    <tr>
                      <td>Musik</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                          width="15" src="/images/misc/stern.png"> </td>
                    </tr>
                  </tbody>
                </table>
                <div style="width: 557px; overflow-wrap: break-word;">No Game No Life<br><br>Man sieht schon an meinem
                  Profilbild, ich bin ein großer Fan dieses Animes und würde sogar sagen, dass No Game No Life mein
                  Lieblingsanime ist. Ich werde allerdings versuchen auch die negativen Aspekte zu beleuchten und keinen
                  Fanboy-Kommentar zu schreiben.<br><br>Genre<br>Kann man nicht so viel zu sagen finde ich, Comedy steht
                  für mich im Vordergrund, ich fand den Anime echt witzig aber ist Geschmackssache. An den richtigen
                  Stellen ist allerdings auch meistens die nötige Ernsthaftigkeit vorhanden. Ecchi ist auf jeden Fall
                  auch mehr als nur vorhanden und immer zu den passenden Zeiten eingesetzt, wenn auch etwas häufig, aber
                  gerade dadurch fand ich diesen Anime so lustig.<br><br>Story<br>Naja bei der Story kann man noch am
                  ehesten meckern finde ich. Die Idee selbst ist gut und recht innovativ, ich war damals ziemlich
                  begeistert, aber das ist nun auch schon ein paar Jahre her. Die Story ist etwas gezogen teilweise,
                  jedoch nicht langweilig wenn man aufpasst und es werden einige kritische Themen thematisiert. Es ist
                  allerdings leider ein Fakt, dass man das wichtigste der Story in wenigen Sätzen zusammenfassen könnte.
                  Meiner Meinung nach muss ein Anime aber keine Top-Story haben um zu
                  begeistern.<br><br>Animation/Bilder<br>Ich würde sagen die Animation und der Zeichenstil sind relativ
                  unumstritten unglaublich gut. Es mag manchen zu bunt sein, aber ich finde bunt schön. Die Animationen
                  sind alle sehr schön und lassen wenig Raum sich zu beschweren.<br><br>Charaktere<br>Die
                  Hauptcharaktere Sora und Shiro sind einfach tolle Charaktere. Gut, sie haben nicht die krasseste
                  Backstory oder Character-Development, sind aber im vornerein schon sehr gut geschrieben. Ich finde vor
                  allem Sora ist unglaublich nachvollziehbar, außer dass er schon krass ist natürlich, in seiner Art und
                  Weise zu handeln. Er mag nicht in die Kategorie "Toller Held" passen, aber wenn man in seiner Position
                  wäre, kann man sein Handeln gut nachvollziehen finde ich. Shiro ist der Inbegriff von Niedlichkeit und
                  meiner Meinung nach unübertroffen. Die Nebencharaktere erscheinen eher flach und unwichtig, wenn man
                  die Light Novel lesen würde, würde man herausfinden, dass dem nicht so ist. <br><br>Musik<br>Das Intro
                  ist mein absolutes Lieblingsintro, ansonsten ist die Musik immer passend, nie zu aufdringlich, immer
                  präsent und schön.<br><br><br>Vielen Dank fürs Lesen, ich würde No Game No Life jedem empfehlen, der
                  entweder auf Isekai, Ecchi oder ziemlich overpowert schlaue Charaktere steht.</div>
              </td>
              <td width="200" valign="top" align="center">
                <p><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                    width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                    width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                    width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                    width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> </p>
                <b>Stand: </b>
                Geschaut
                <br><br>
                <a href="javascript:void(0);" class="menu ajaxComment" title="recommend:33062376"
                  style="display:block">Empfehlen! [3]</a>
                <br>
                <a href="/comment?id=33062376#top" class="menu" style="display:block"
                  data-ajax="true">Kommentarseite</a>
                <br>
                <a href="/comment?id=33062376&amp;s=report#top" class="menu" style="display:block"
                  data-ajax="true">Missbrauch melden</a>
                <br>
                <div class="ajaxResponse_33062376" style="display:none;"></div>
              </td>
            </tr>
          </tbody>
        </table>
        <br>
        <table style="width: 1000px;" align="center" class="details">
          <tbody>
            <tr>
              <td width="200" valign="top" align="center">
                <br><a href="/user/449026#top">
                  <img src="//cdn.proxer.me/avatar/tn/449026_zFXYvj.png" width="150">
                  <br><br>
                  Niggalas</a>
              </td>
              <td valign="top">
                <table class="no_details misc_rating">
                  <tbody>
                    <tr>
                      <td>Genre</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                          width="15" src="/images/misc/stern.png"> </td>
                    </tr>
                    <tr>
                      <td>Story</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                          width="15" src="/images/misc/stern_grau.png"> </td>
                    </tr>
                    <tr>
                      <td>Animation/Bilder</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                          width="15" src="/images/misc/stern.png"> </td>
                    </tr>
                    <tr>
                      <td>Charaktere</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                          width="15" src="/images/misc/stern.png"> </td>
                    </tr>
                    <tr>
                      <td>Musik</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                          width="15" src="/images/misc/stern.png"> </td>
                    </tr>
                  </tbody>
                </table>
                <div style="width: 557px; overflow-wrap: break-word;">No Game no Life ist meiner Meinung nach der BESTE
                  Anime(bzw Manga) den ich je gesehen habe.<br><br>Die genre sind alle sehr gut
                  erfüllt<br><br>Story:Diese finde ich auch absolut gelungen da es sich nicht wie andere
                  Videospiel-Anime um irgendwelche onlinegames handelt, sondern selbst die langweiligen Spiele richtig
                  cool darstellt.<br><br>Animation/Zeichenstil: Das ist wohl der Hauptgrund weshalb ich diesen Anime
                  jetzt so in den Himmel lobe.<br>Dieses knallbunte hat mir in diesen Anime echt so gut
                  reingepasst.<br><br>Charaktere:Vor allem Sora und shiro Feier ich so da ihre Charaktere einmalig
                  lustig und besonders sind(ich meine sehr euch meine <br>Anime Liste an:D)<br><br>Musik:Ich finde dass
                  in jeder Szene und auch für das opening jeweils die passende Musik gefunden wurde<br><br><br>Also mal
                  kurz.Anime ist perfekt nur etwas knapp</div>
              </td>
              <td width="200" valign="top" align="center">
                <p><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                    width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                    width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                    width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                    width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern_grau.png"> </p>
                <b>Stand: </b>
                Geschaut
                <br><br>
                <a href="javascript:void(0);" class="menu ajaxComment" title="recommend:11702467"
                  style="display:block">Empfehlen! [5]</a>
                <br>
                <a href="/comment?id=11702467#top" class="menu" style="display:block"
                  data-ajax="true">Kommentarseite</a>
                <br>
                <a href="/comment?id=11702467&amp;s=report#top" class="menu" style="display:block"
                  data-ajax="true">Missbrauch melden</a>
                <br>
                <div class="ajaxResponse_11702467" style="display:none;"></div>
              </td>
            </tr>
          </tbody>
        </table>
        <br>
        <table style="width: 1000px;" align="center" class="details">
          <tbody>
            <tr>
              <td width="200" valign="top" align="center">
                <br><a href="/user/882104#top">
                  <img src="//cdn.proxer.me/avatar/tn/882104_RPlmjX.jpg" width="150">
                  <br><br>
                  Shiruwa</a>
              </td>
              <td valign="top">
                <table class="no_details misc_rating">
                  <tbody>
                    <tr>
                      <td>Genre</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                          width="15" src="/images/misc/stern.png"> </td>
                    </tr>
                    <tr>
                      <td>Story</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                          width="15" src="/images/misc/stern.png"> </td>
                    </tr>
                    <tr>
                      <td>Animation/Bilder</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                          width="15" src="/images/misc/stern.png"> </td>
                    </tr>
                    <tr>
                      <td>Charaktere</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                          width="15" src="/images/misc/stern.png"> </td>
                    </tr>
                    <tr>
                      <td>Musik</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                          width="15" src="/images/misc/stern.png"> </td>
                    </tr>
                  </tbody>
                </table>
                <div style="width: 557px; overflow-wrap: break-word;">
                  <font color="#e53935">
                    <font size="5"><u>No Game No Life</u></font>
                  </font><br><br><br>Eine gute Anime-Serie, kurz aber dennoch seit langem <font color="#e53935">einer
                    meiner Favoriten</font>. Die weibliche Protagonistin ist <font color="#e53935">かわいい</font>。Nach
                  <font color="#e53935">12 Folgen</font>, <font color="#e53935">einen Film</font>, <font
                    color="#e53935">2 Mangas</font> und <font color="#e53935">10 Light Novels</font> ist das ganze
                  vorbei. Soll es irgendwann weitergehen, oder war das Ende bewusst? Ansonsten ist die Musikwahl einfach
                  nur <font color="#e53935">genial</font>.
                </div>
              </td>
              <td width="200" valign="top" align="center">
                <p><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                    width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                    width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                    width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                    width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> </p>
                <b>Stand: </b>
                Geschaut
                <br><br>
                <a href="javascript:void(0);" class="menu ajaxComment" title="recommend:36886302"
                  style="display:block">Empfehlen! [3]</a>
                <br>
                <a href="/comment?id=36886302#top" class="menu" style="display:block"
                  data-ajax="true">Kommentarseite</a>
                <br>
                <a href="/comment?id=36886302&amp;s=report#top" class="menu" style="display:block"
                  data-ajax="true">Missbrauch melden</a>
                <br>
                <div class="ajaxResponse_36886302" style="display:none;"></div>
              </td>
            </tr>
          </tbody>
        </table>
        <br>
        <table style="width: 1000px;" align="center" class="details">
          <tbody>
            <tr>
              <td width="200" valign="top" align="center">
                <br><a href="/user/895255#top">
                  <img src="//cdn.proxer.me/avatar/tn/nophoto.png" width="150">
                  <br><br>
                  Geldoydoener</a>
              </td>
              <td valign="top">
                <div style="width: 557px; overflow-wrap: break-word;"></div>
              </td>
              <td width="200" valign="top" align="center">
                <p><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern_grau.png"> <img
                    width="15" src="/images/misc/stern_grau.png"> <img width="15" src="/images/misc/stern_grau.png">
                  <img width="15" src="/images/misc/stern_grau.png"> <img width="15" src="/images/misc/stern_grau.png">
                  <img width="15" src="/images/misc/stern_grau.png"> <img width="15" src="/images/misc/stern_grau.png">
                  <img width="15" src="/images/misc/stern_grau.png"> <img width="15" src="/images/misc/stern_grau.png">
                </p>
                <b>Stand: </b>
                Geschaut
                <br><br>
                <a href="javascript:void(0);" class="menu ajaxComment" title="recommend:43117442"
                  style="display:block">Empfehlen! [3]</a>
                <br>
                <a href="/comment?id=43117442#top" class="menu" style="display:block"
                  data-ajax="true">Kommentarseite</a>
                <br>
                <a href="/comment?id=43117442&amp;s=report#top" class="menu" style="display:block"
                  data-ajax="true">Missbrauch melden</a>
                <br>
                <div class="ajaxResponse_43117442" style="display:none;"></div>
              </td>
            </tr>
          </tbody>
        </table>
        <br>
        <table style="width: 1000px;" align="center" class="details">
          <tbody>
            <tr>
              <td width="200" valign="top" align="center">
                <br><a href="/user/376767#top">
                  <img src="//cdn.proxer.me/avatar/tn/376767_54b7bdd541444.jpg" width="150">
                  <br><br>
                  ChronosXIII</a>
              </td>
              <td valign="top">
                <table class="no_details misc_rating">
                  <tbody>
                    <tr>
                      <td>Genre</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                          width="15" src="/images/misc/stern_grau.png"> </td>
                    </tr>
                    <tr>
                      <td>Story</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15"
                          src="/images/misc/stern_grau.png"> <img width="15" src="/images/misc/stern_grau.png"> <img
                          width="15" src="/images/misc/stern_grau.png"> <img width="15"
                          src="/images/misc/stern_grau.png"> </td>
                    </tr>
                    <tr>
                      <td>Animation/Bilder</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern_grau.png">
                        <img width="15" src="/images/misc/stern_grau.png"> </td>
                    </tr>
                    <tr>
                      <td>Charaktere</td>
                      <td><img width="15" src="/images/misc/stern_grau.png"> <img width="15"
                          src="/images/misc/stern_grau.png"> <img width="15" src="/images/misc/stern_grau.png"> <img
                          width="15" src="/images/misc/stern_grau.png"> <img width="15"
                          src="/images/misc/stern_grau.png"> </td>
                    </tr>
                    <tr>
                      <td>Musik</td>
                      <td><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png">
                        <img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                          width="15" src="/images/misc/stern_grau.png"> </td>
                    </tr>
                  </tbody>
                </table>
                <div style="width: 557px; overflow-wrap: break-word;">
                  <font size="5">No Game No Life -</font><br><br><br>Was kann man zu diesem Werk nur sagen? Ich bin sehr
                  gespaltener Meinung.<br><br>Mir gefällt die Grundidee dieses Werkes, sie könnte durchaus sehr
                  interessant sein, würde sie doch nur in fähigeren Händen liegen. Was hiermit leider alles andere als
                  der Fall ist. <br><br>Habe schon viele Werke gesehen ob gleich sie einen positiven oder negativen
                  Eindruck hinterließen. Dieser hier, gehört eindeutig nicht zum ersteren.<br><br><br><br>Wo fange ich
                  nur an? <br><br>Zuerst beim positiven.<br><br>+ Dieses Werk hat eine ansprechende und gute
                  Grundidee<br>+ Geschwister Duo<br>+ Ansehnliche Animationen <br>+ Solide Musik<br>+ Einige amüsante
                  und humorvolle Referenzen zu anderen Werken, unter anderem auch dem alt bekannten Jojos Bizarre
                  Adventure.<br><br>Und nun kommen wir zum negativen.<br><br>- <b>Schrecklich unsympathischer
                    Protagonist</b>. Soll wohl den typischen sozialen Versager zeigen, welcher keine Kontakte knüpfen
                  kann und seine stärken im Internet findet und schlichtweg pervers ist. <br>- <b>Protagonistin</b>
                  wirkt eigentlich recht liebenswert. Doch nur in den Szenen, in denen sie nicht aufs äußerste
                  sexualisiert wird. Wir reden hier nach wie vor von einer 11 jährigen, die man zig mal nackt sieht (mit
                  Zensur) und einen saftigen Ausschnitt ihres Höschens in der aller ersten Episode. Als ich die
                  Screenshots nach dem Werk gesehen habe, dachte ich sie seien schon bearbeitet worden. Bis ich mir die
                  Folge erneut angeschaut habe. Der Mangaka hatte nicht mal versucht seine Fetische zu verbergen.<br>-
                  <b>Geschwister Duo</b> / netter Einfall, aber mit der Umsetzung kann man beide direkt in die Tonne
                  treten. Perverser kranker großer Bruder und eine vollkommen sexualisierte kleine Loli Schwester. Na,
                  wonach riecht es hier nur? <br>- <b>Die Spiele</b>. Ahh, wie sehr hätte ich mir gewünscht, dass sie
                  wenigstens im Bereich der Duelle/Spiele sich etwas Mühe gegeben hätten. Der Aufbau ist ja ganz nett,
                  aber die Lösungen? Muss ich unter anderem die Szene mit dem "Luftaustausch" der Geschwister erwähnen?
                  Und dem stupiden Ende des Schachspiels? Ich könnte nicht genug trinken, damit das einen besseren
                  Eindruck auf mich hinterlässt. <br>- <b>Die Story</b>. Gewiss kommt sie erst im Film zum Vorschein.
                  Der Anime hat nämlich nichts mit einer Story am Hut. Man findet alles, nur dies nicht.<br>-
                  <b>Animationen hinsichtlich der Farben</b>. Kommt es nur mir so vor? Einige Szenen wirken auf mich
                  derart grell, ich könnte fast Kopfschmerzen davon bekommen.<br><br><br>Im Endfazit, bleibt mir gar die
                  Luft aus. Dieses Werk erinnert mich fast an den einen Streifen, in welchem eine minderjährige
                  Grundschülerin es mit ihrem Volljährigen Lehrer treiben wollte. Ungefähr das selbe Qualitäts
                  Niveau.<br>
                </div>
              </td>
              <td width="200" valign="top" align="center">
                <p><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern_grau.png"> <img
                    width="15" src="/images/misc/stern_grau.png"> <img width="15" src="/images/misc/stern_grau.png">
                  <img width="15" src="/images/misc/stern_grau.png"> <img width="15" src="/images/misc/stern_grau.png">
                  <img width="15" src="/images/misc/stern_grau.png"> <img width="15" src="/images/misc/stern_grau.png">
                  <img width="15" src="/images/misc/stern_grau.png"> <img width="15" src="/images/misc/stern_grau.png">
                </p>
                <b>Stand: </b>
                Geschaut
                <br><br>
                <a href="javascript:void(0);" class="menu ajaxComment" title="recommend:33572542"
                  style="display:block">Empfehlen! [10]</a>
                <br>
                <a href="/comment?id=33572542#top" class="menu" style="display:block"
                  data-ajax="true">Kommentarseite</a>
                <br>
                <a href="/comment?id=33572542&amp;s=report#top" class="menu" style="display:block"
                  data-ajax="true">Missbrauch melden</a>
                <br>
                <div class="ajaxResponse_33572542" style="display:none;"></div>
              </td>
            </tr>
          </tbody>
        </table>
        <br>
        <table style="width: 1000px;" align="center" class="details">
          <tbody>
            <tr>
              <td width="200" valign="top" align="center">
                <br><a href="/user/774440#top">
                  <img src="//cdn.proxer.me/avatar/tn/nophoto.png" width="150">
                  <br><br>
                  DustinSenpai</a>
              </td>
              <td valign="top">
                <div style="width: 557px; overflow-wrap: break-word;">Hm... Leider hat mich der Anime nicht wirklich
                  gecatched. Ich meine, eigentlich hatte ich nach der ersten Folge keine wirkliche Lust mehr weiter zu
                  schauen, weil mich die Folge irgendwie nicht in den Bann gezogen hat'. Naja, trotzdem habe ich die
                  Serie weitergeschaut. Die Story von dem Anime fand ich jetzt eigentlich nicht wirklich vielsagend und
                  fand es eher langweilig. Ich meine versteht mich nicht falsch, von den Animationen und Bildern her ist
                  der Anime wirklich gut, nur mich hat diese ganze Handlung irgendwie nicht wirklich mitgenommen (bin
                  auch irgendwann nicht mehr wirklich mitbekommen wegen diesen unendlich langen und vielen Gesprächen)
                  Ich würde jetzt also nicht sagen, dass der Anime schrecklich war, denn er hatte mich schon ein wenig
                  unterhalten, aber ich glaube ich bin einfach nicht für so ein Genre geeignet. [Also das alle ist meine
                  Meinung]</div>
              </td>
              <td width="200" valign="top" align="center">
                <p><img width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                    width="15" src="/images/misc/stern.png"> <img width="15" src="/images/misc/stern.png"> <img
                    width="15" src="/images/misc/stern_grau.png"> <img width="15" src="/images/misc/stern_grau.png">
                  <img width="15" src="/images/misc/stern_grau.png"> <img width="15" src="/images/misc/stern_grau.png">
                  <img width="15" src="/images/misc/stern_grau.png"> <img width="15" src="/images/misc/stern_grau.png">
                </p>
                <b>Stand: </b>
                Geschaut
                <br><br>
                <a href="javascript:void(0);" class="menu ajaxComment" title="recommend:29015951"
                  style="display:block">Empfehlen! [0]</a>
                <br>
                <a href="/comment?id=29015951#top" class="menu" style="display:block"
                  data-ajax="true">Kommentarseite</a>
                <br>
                <a href="/comment?id=29015951&amp;s=report#top" class="menu" style="display:block"
                  data-ajax="true">Missbrauch melden</a>
                <br>
                <div class="ajaxResponse_29015951" style="display:none;"></div>
              </td>
            </tr>
          </tbody>
        </table>
        <script type="text/javascript" src="/components/com_proxer/js/comment/links.js"></script>
        <script>var medium = "animeseries"; var entryTags = [{ "id": "6668", "eid": "6587", "tid": "67", "uid": "428049", "timestamp": "2016-06-30 16:13:40", "rate_sum": "27", "rate_count": "30", "spoiler_sum": "3", "spoiler_count": "15", "rate_force": "0", "spoiler_force": "0", "rate_flag": "1", "spoiler_flag": "0", "tag": "Adel", "description": "Der Stand von Personen spielt eine besondere Rolle." }, { "id": "312", "eid": "6587", "tid": "241", "uid": "86735", "timestamp": "2016-06-17 18:14:47", "rate_sum": "72", "rate_count": "72", "spoiler_sum": "4", "spoiler_count": "32", "rate_force": "0", "spoiler_force": "0", "rate_flag": "1", "spoiler_flag": "0", "tag": "Alternative Welt", "description": "Das Werk spielt in einer Welt, die sich von der unseren in relevanten Merkmalen unterscheidet, etwa geografisch, politisch oder physikalisch." }, { "id": "313", "eid": "6587", "tid": "288", "uid": "86735", "timestamp": "2016-06-17 18:14:54", "rate_sum": "67", "rate_count": "67", "spoiler_sum": "2", "spoiler_count": "31", "rate_force": "0", "spoiler_force": "0", "rate_flag": "1", "spoiler_flag": "0", "tag": "Dimensionsreise", "description": "Ein Charakter oder eine Gruppe gelangt aus Versehen oder mit Absicht in eine andere Dimension." }, { "id": "1412", "eid": "6587", "tid": "166", "uid": "510955", "timestamp": "2016-06-18 00:18:59", "rate_sum": "65", "rate_count": "65", "spoiler_sum": "0", "spoiler_count": "29", "rate_force": "0", "spoiler_force": "0", "rate_flag": "1", "spoiler_flag": "0", "tag": "Fanservice", "description": "Blicke unter den Rock, Duschszenen, die Hauptcharaktere in Bikinis oder Unterw\u00e4sche. Kann Frauen wie M\u00e4nner betreffen." }, { "id": "1417", "eid": "6587", "tid": "291", "uid": "510955", "timestamp": "2016-06-18 00:20:02", "rate_sum": "53", "rate_count": "55", "spoiler_sum": "1", "spoiler_count": "27", "rate_force": "0", "spoiler_force": "0", "rate_flag": "1", "spoiler_flag": "0", "tag": "Fantastische Kreaturen", "description": "Alle fantastischen Wesen finden hier ein Zuhause: Feen, Kobolde, Drachen, Ph\u00f6nixe, Riesen und viele andere Gestalten." }, { "id": "8122", "eid": "6587", "tid": "313", "uid": "384199", "timestamp": "2016-07-13 17:05:42", "rate_sum": "35", "rate_count": "35", "spoiler_sum": "0", "spoiler_count": "24", "rate_force": "0", "spoiler_force": "0", "rate_flag": "1", "spoiler_flag": "0", "tag": "Game", "description": "Das Werk besch\u00e4ftigt sich mit einem oder auch mehreren Spielen. Es kann sich dabei um Brettspiele oder auch um Computerspiele handeln." }, { "id": "1413", "eid": "6587", "tid": "298", "uid": "510955", "timestamp": "2016-06-18 00:19:12", "rate_sum": "57", "rate_count": "58", "spoiler_sum": "1", "spoiler_count": "26", "rate_force": "0", "spoiler_force": "0", "rate_flag": "1", "spoiler_flag": "0", "tag": "Ganbatte", "description": "Der Protagonist in diesem Manga will sich an die Spitze k\u00e4mpfen. Dies resultiert in Wettk\u00e4mpfen und Rivalit\u00e4t." }, { "id": "7161", "eid": "6587", "tid": "234", "uid": "239513", "timestamp": "2016-07-04 23:23:50", "rate_sum": "37", "rate_count": "37", "spoiler_sum": "6", "spoiler_count": "24", "rate_force": "0", "spoiler_force": "0", "rate_flag": "1", "spoiler_flag": "0", "tag": "Halbmenschen", "description": "M\u00e4nnliche oder weibliche (Halb-)Menschen mit Tier oder Monsterattributen." }, { "id": "197705", "eid": "6587", "tid": "295", "uid": "171581", "timestamp": "2020-02-21 19:09:19", "rate_sum": "2", "rate_count": "3", "spoiler_sum": "2", "spoiler_count": "2", "rate_force": "0", "spoiler_force": "0", "rate_flag": "0", "spoiler_flag": "0", "tag": "Happy End", "description": "Dieses Werk hat ein rein positives Ende." }, { "id": "314", "eid": "6587", "tid": "6", "uid": "86735", "timestamp": "2016-06-17 18:15:00", "rate_sum": "76", "rate_count": "76", "spoiler_sum": "0", "spoiler_count": "34", "rate_force": "0", "spoiler_force": "0", "rate_flag": "1", "spoiler_flag": "0", "tag": "Loli", "description": "Ein junger oder jung wirkender, flachbr\u00fcstiger und kleiner weiblicher Charakter." }, { "id": "2636", "eid": "6587", "tid": "305", "uid": "406546", "timestamp": "2016-06-18 17:43:17", "rate_sum": "51", "rate_count": "53", "spoiler_sum": "0", "spoiler_count": "28", "rate_force": "0", "spoiler_force": "0", "rate_flag": "1", "spoiler_flag": "0", "tag": "Mehrere Protagonisten", "description": "Dieses Werk hat mehr als einen Protagonisten." }, { "id": "19527", "eid": "6587", "tid": "9", "uid": "653404", "timestamp": "2017-05-01 18:58:22", "rate_sum": "8", "rate_count": "9", "spoiler_sum": "1", "spoiler_count": "8", "rate_force": "0", "spoiler_force": "0", "rate_flag": "1", "spoiler_flag": "0", "tag": "Neko", "description": "Katzenm\u00e4dchen, beispielsweise mit Katzenohren oder einem Katzenschwanz." }, { "id": "383", "eid": "6587", "tid": "296", "uid": "187151", "timestamp": "2016-06-17 18:44:43", "rate_sum": "73", "rate_count": "75", "spoiler_sum": "51", "spoiler_count": "58", "rate_force": "0", "spoiler_force": "0", "rate_flag": "1", "spoiler_flag": "1", "tag": "Open End", "description": "Dieses Werk hat ein offenes Ende." }, { "id": "17843", "eid": "6587", "tid": "251", "uid": "457453", "timestamp": "2017-02-25 15:36:57", "rate_sum": "11", "rate_count": "11", "spoiler_sum": "0", "spoiler_count": "10", "rate_force": "0", "spoiler_force": "0", "rate_flag": "1", "spoiler_flag": "0", "tag": "Otaku", "description": "Der Protagonist oder eine andere handlungstragende Person ist ein waschechter Otaku." }, { "id": "238456", "eid": "6587", "tid": "287", "uid": "928737", "timestamp": "2021-04-30 18:02:22", "rate_sum": "0", "rate_count": "1", "spoiler_sum": "0", "spoiler_count": "0", "rate_force": "0", "spoiler_force": "0", "rate_flag": "0", "spoiler_flag": "0", "tag": "Overpowered", "description": "Der Protagonist ist von Anfang an oder wird im Laufe des Werkes weit st\u00e4rker als andere Charaktere." }, { "id": "3385", "eid": "6587", "tid": "259", "uid": "382047", "timestamp": "2016-06-19 05:01:42", "rate_sum": "49", "rate_count": "51", "spoiler_sum": "1", "spoiler_count": "24", "rate_force": "0", "spoiler_force": "0", "rate_flag": "1", "spoiler_flag": "0", "tag": "Perverser Protagonist", "description": "Nichts ist gr\u00f6\u00dfer als die sexuellen Fantasien unseres Protagonisten." }, { "id": "315", "eid": "6587", "tid": "261", "uid": "86735", "timestamp": "2016-06-17 18:15:26", "rate_sum": "91", "rate_count": "91", "spoiler_sum": "1", "spoiler_count": "32", "rate_force": "0", "spoiler_force": "0", "rate_flag": "1", "spoiler_flag": "0", "tag": "Schlauer Protagonist", "description": "Der Protagonist ist enorm intelligent und einfallsreich." }, { "id": "10201", "eid": "6587", "tid": "255", "uid": "185758", "timestamp": "2016-08-09 16:54:46", "rate_sum": "18", "rate_count": "37", "spoiler_sum": "11", "spoiler_count": "19", "rate_force": "0", "spoiler_force": "0", "rate_flag": "0", "spoiler_flag": "1", "tag": "Virtual Reality", "description": "VR spielt in diesem Werk eine wichtige Rolle." }];</script>
        <script type="text/javascript" src="/components/com_proxer/js/info/details.js?7"></script>
        <script type="text/javascript" src="/components/com_proxer/js/info/tags.js?3"></script>
        <script type="text/javascript" src="/components/com_proxer/js/info/genres.js?1"></script>
        <link rel="stylesheet" type="text/css" href="/components/com_proxer/css/info/characterpeople.css">
        <input type="hidden" id="entry_id" value="6587">
      </div>
    </div>
    <div id="misc" class="sprechblase" style="display:none;"></div>
    <div id="messages"></div>
    <input type="hidden" value="a0561e79ccfcce196f0d6f7f25ca1e88" id="proxerToken">


  </div>
  <ul class="ui-autocomplete ui-front ui-menu ui-widget ui-widget-content ui-corner-all" id="ui-id-1" tabindex="0"
    style="display: none;"></ul>
  <div id="chatapp_toggle" class="chatapp_element">[+] Chat öffnen</div>
</body>

</html>
