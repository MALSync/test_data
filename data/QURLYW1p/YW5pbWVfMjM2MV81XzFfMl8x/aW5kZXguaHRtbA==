<html lang="fr" prefix="og: http://ogp.me/ns#">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no, viewport-fit=cover">
  <link rel="icon" type="image/png" href="https://www.adkami.com/image/favicon.png">
  <title>Youkoso Jitsuryoku Shijou Shugi no Kyoushitsu e - Episode 5 vostfr - ADKami</title>
  <link rel="manifest" href="/manifest.json">
  <meta name="mobile-web-app-capable" content="yes">
  <meta name="theme-color" content="#262626">
  <meta name="msapplication-nav-status-bar-style" content="#262626">
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
  <meta name="Description"
    content="Le prestigieux lycée Koudo Ikusei est à la pointe de la technologie ou presque 100% des élèves passent ensuite à l’université ou trouvent un travail. Les élèves y ont une large liberté mais la vérité est que seul l’élite des élèves y reçoit des traitements favorables. Nous suivons le quotidien de Kiyotaka Ayanokoji qui fait partie de la Classe D, qui est celle dans laquelle l’école met les élèves dit « inférieur » afin de les ridiculiser. Kiyotaka Ayanokoji a été négligent lors de ses examens d’entrée et a fini dans la Classe D. Dans cette classe atypique, il se lie notamment d’amitié avec Suzune Horikita et Kikyo Kushida.">
  <meta name="Keywords" content="anime, manga , streaming, lecture, voir, one piece, beelzebub, another">
  <meta property="og:locale" content="fr_FR">
  <meta property="og:site_name" content="ADKami">
  <meta name="twitter:site" content="@ADKamiOfficiel">
  <meta name="twitter:title" content="Youkoso Jitsuryoku Shijou Shugi no Kyoushitsu e - Episode 5 vostfr - ADKami">
  <meta property="og:title" content="Youkoso Jitsuryoku Shijou Shugi no Kyoushitsu e - Episode 5 vostfr - ADKami">
  <meta property="og:type" content="video.tv_show">
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:image:src" content="https://image.adkami.com/mini/2361.jpg?=1499875271">
  <meta property="og:image" content="https://image.adkami.com/mini/2361.jpg?=1499875271" itemprop="thumbnailUrl">
  <meta property="og:url" content="https://www.adkami.com/anime/2361/5/1/2/1/">
  <meta property="og:description"
    content="Le prestigieux lycée Koudo Ikusei est à la pointe de la technologie ou presque 100% des élèves passent ensuite à l’université ou trouvent un travail. Les élèves y ont une large liberté mais la vérité est que seul l’élite des élèves y reçoit des traitements favorables. Nous suivons le quotidien de Kiyotaka Ayanokoji qui fait partie de la Classe D, qui est celle dans laquelle l’école met les élèves dit « inférieur » afin de les ridiculiser. Kiyotaka Ayanokoji a été négligent lors de ses examens d’entrée et a fini dans la Classe D. Dans cette classe atypique, il se lie notamment d’amitié avec Suzune Horikita et Kikyo Kushida.">
  <!--[if lt IE 9]>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv.min.js?1530481638"></script>
	<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/livingston-css3-mediaqueries-js/1.0.0/css3-mediaqueries.min.js?1530481638"></script>
	<![endif]-->
  <link rel="stylesheet" href="https://www.adkami.com/main.css?1646043484">
  <link rel="alternate" type="application/rss+xml" title="ADKami" href="https://www.adkami.com/rss.xml">
  <script>
    // var url = ["h","t","t","p","s",":","/","/","w","w","w",".","a","d","k","a","m","i",".","c","o","m"];
    // url = url.join('');
    // if (window.location.href.indexOf(url) < 0)
    //      document.location.href=url + window.location.pathname + window.location.search;
  </script>
  <script
    type="application/ld+json">{
		"@context":"https:\/\/schema.org","@type":"Organization",
		"url":"https://www.adkami.com","sameAs": "https://www.facebook.com/ADKamiOfficiel",
		"@id":"https://www.adkami.com/#organization","name":"ADKami.com","logo":"https://www.adkami.com/image/logo.png"}</script>
  <script async="" src="https://www.googletagmanager.com/gtag/js?id=UA-28025168-2"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag() { dataLayer.push(arguments); }
    gtag('js', new Date());

    gtag('config', 'UA-28025168-2');
  </script>
  <script async="" src="https://www.google-analytics.com/analytics.js"></script>
</head>

<body class="">
  <div id="modal">
    <div class="background-modal"></div>
    <div class="modal-body">
      <button class="btn close">✖ fermer</button>
      <div class="content"></div>
    </div>
  </div>
  <header class="toolbar">
    <div id="nav-mobile"><i class="nav-icon"></i></div>
    <a href="https://www.adkami.com">
      <div id="logo">ADKami</div>
    </a>
    <div id="beelzebub"></div>
    <div id="login">
      <span class="link activebox dropdown" data-for="login-login">Connexion</span>
      <form id="login-login" action="https://www.adkami.com/login?q=%2Fanime%2F2361%2F5%2F1%2F2%2F1%2F" method="post"
        class="connection dropdown-content">

        <input type="text" name="pseudo" value="" placeholder="pseudo">
        <input type="password" name="password" value="" placeholder="password">
        <input type="hidden" name="token_connection" value="MTY5NjI2NDc3NHc4aHZQQWNsRk9INHBuMGJVTFRxQzExY0NwVWxKU1FC">
        <p>
          <label for="autologin">Connexion Automatique</label>
          <input id="autologin" type="checkbox" name="auto">
        </p>
        <button>Connexion</button>
        <a href="https://www.adkami.com/register">Inscription</a>
        <button style="display: inline-block;" id="webauthn-login">Webauthn</button>
      </form>
    </div>
    <nav>
      <form action="https://www.adkami.com/video" method="get">
        <input id="search-header2" type="search" name="search" placeholder="Recherche">
        <button type="submit"><i class="icon-search"></i></button>
      </form>
      <a href="https://www.adkami.com">Accueil</a>
      <a href="https://www.adkami.com/anime">Anime</a>
      <a href="https://hentai.adkami.com/hentai-streaming">Hentai</a>
      <a href="https://www.adkami.com/drama-streaming">Drama</a>
      <a style="color: #ff9b9b;" href="https://www.adkami.com/agenda">Agenda</a>


      <a href="https://www.adkami.com/club">Club</a>
      <span class="nav-plus">
        <a class="dropdown" id="plus-button-header" data-for="info-plus-head">+ plus</a>
        <span id="info-plus-head" class="dropdown-menu2 dropdown-content">
          <a href="https://www.adkami.com/flux">Flux</a>
          <a href="https://www.adkami.com/team">Team</a>
          <a href="https://www.adkami.com/anime/season">Saison</a>
        </span>
      </span>
      <form class="mobile-hide" action="https://www.adkami.com/video" method="get">
        <input id="search-header" type="search" name="search" placeholder="Recherche" autocomplete="off">
        <button type="submit"><i class="icon-search"></i></button>
        <div id="search-header-content"></div>
      </form>
    </nav>
  </header>
  <div id="body">
    <div class="m-hidden wallpaper-fiche"
      style="background-image: url('https://image.adkami.com/2361.jpg?1499875596');">
      <div></div>
    </div>
    <style>
      .video-iframe .cover {
        background-image: url('https://image.adkami.com/2361.jpg?1499875596');
      }
    </style>
    <script id="syncData"
      type="application/ld+json">{"name":"Youkoso Jitsuryoku Shijou Shugi no Kyoushitsu e","id":"2361-1-1","episode":5,"season":1,"isStreaming":true,"mal_id":"35507","anilist_id":false,"main_url":"https:\/\/www.adkami.com\/anime\/2361","selector_position":"#watchlist-block","nextEpisode":true}</script>
    <section class="row">
      <div id="openModal">⇦</div>
      <div class="col-12 col-l-9 fiche-look">

        <ul class="normal" itemscope="" itemtype="http://schema.org/BreadcrumbList">
          <li itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem">
            <a itemprop="item" typeof="WebPage" href="https://www.adkami.com/anime">
              <span itemprop="name">Anime</span>
            </a>
            <meta itemprop="position" content="1">
          </li> ›
          <li itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem">
            <a itemprop="item" typeof="WebPage" href="https://www.adkami.com/anime/2361">
              <span itemprop="name">Youkoso Jitsuryoku Shijou Shugi no Kyoushitsu e</span>
            </a>
            <meta itemprop="position" content="2">
          </li>
          ›
          <li itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem">
            <a itemprop="item" typeof="WebPage" href="https://www.adkami.com/anime/2361/5/1/2/1/">
              <span itemprop="name">Episode 5 vostfr</span>
            </a>
            <meta itemprop="position" content="3">
          </li>
        </ul>
        <div class="row blocshadow">
          <div class="col-12">
            <img width="1005" height="335" class="col-12  m-hidden"
              alt="Youkoso Jitsuryoku Shijou Shugi no Kyoushitsu e" src="https://image.adkami.com/2361.jpg?1499875596">
            <img width="240" height="80" class="col-12  m-display"
              alt="Youkoso Jitsuryoku Shijou Shugi no Kyoushitsu emini"
              src="https://image.adkami.com/mini/2361.jpg?=1499875271">

            <h1 class="title-header-video">Youkoso Jitsuryoku Shijou Shugi no Kyoushitsu e - Episode 5 vostfr</h1>
            <meta itemprop="name" content="Youkoso Jitsuryoku Shijou Shugi no Kyoushitsu e">
          </div>
        </div>
        <div class="bloc">
          <div class="bold licensier-text">
            Cet anime est licencié en France.
          </div>
          <article id="look-video">
            <div class="row">
              <div class="anime-information-icon">
                <span class="age0" title="age 0"></span>
                <span class="Seinen" title="Seinen"></span>
                <span class="Terminer" title="Terminé"></span>
              </div>
              <div>
                <a href="https://www.adkami.com/anime/2361/4/1/2/1/">
                  <div id="before-video">
                    <i class="icon-before"></i>
                    <span>
                      Episode 4 vostfr </span>
                  </div>
                </a>
                <a href="https://www.adkami.com/anime/2361/6/1/2/1/">
                  <div id="after-video">
                    <i class="icon-next"></i>
                    <span>
                      Episode 6 vostfr </span>
                  </div>
                </a>
                <a>
                  <div id="cinema-button"><i class="icon-film"></i> <span></span></div>
                </a>
              </div>
              <div class="both"></div>
            </div>
            <div id="video">
              <div id="pub-top-video" class="pub-adk"></div>
              <div>
                <p class="h-t-v-a">
                  <a class="team" href="https://www.adkami.com/team/250">[Crunchyroll]</a>
                  <a href="https://www.adkami.com/profil/OtakuArt" rel="nofollow">OtakuArt</a>
                </p>
                <a rel="external nofollow" target="_back"
                  href="https://www.crunchyroll.com/classroom-of-the-elite/episode-742263"
                  class="lecteur-redirection large">Redirection Crunchyroll</a>
              </div>
              <div class="pub-adk" id="pubtest" style="text-align: center;margin: 0;overflow: auto;"><ins id="761014"
                  data-width="600" data-height="100"></ins></div>
            </div>
            <div class="dropdown link" id="nav-episode-btn2" data-for="row-nav-episode">Ouvrir la liste des épisodes.
            </div>
            <div class="row">
              <div class="list2 v2 col-12 row">
              </div>
              <div class="news-block col-12 v2 row" style="overflow-y: auto;max-height: 138px;width: 98%;margin: 0 1%;">
                <div class="row">
                  <a title="Actualités" class="col-12 col-s-6 col-l-4 " href="https://www.adkami.com/club/b/5187">
                    <span class="image"
                      style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.nautiljon.com/images/breves/00/13/medium/une_saison_3_pour_classroom_of_the_elite_15531.webp&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                    <span class="block-left">
                      <p>Nouveau visuel pour la saison 3 de Classroom of the Elite</p>
                      <div>
                        <span class="bottom-line">
                          <span class="name">Actualités</span>
                          <span class="counter">4 💬</span>
                        </span>
                      </div>
                    </span>
                  </a>
                  <a title="Actualités" class="col-12 col-s-6 col-l-4 " href="https://www.adkami.com/club/b/5107">
                    <span class="image"
                      style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.nautiljon.com/images/breves/00/75/medium/la_seconde_saison_de_classroom_of_the_elite_debutera_le_4_juillet_prochain_15957.webp&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                    <span class="block-left">
                      <p>La saison 3 de Classroom of the Elite reportée</p>
                      <div>
                        <span class="bottom-line">
                          <span class="name">Actualités</span>
                          <span class="counter">27 💬</span>
                        </span>
                      </div>
                    </span>
                  </a>
                  <a title="Actualités" class="col-12 col-s-6 col-l-4 " href="https://www.adkami.com/club/b/4184">
                    <span class="image"
                      style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://img1.ak.crunchyroll.com/i/spire2/a22da3aa8203fa157cb2941b2de2b57d1656338502_large.png&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                    <span class="block-left">
                      <p>Nouveau visuel et PV pour Classroom of the Elite II</p>
                      <div>
                        <span class="bottom-line">
                          <span class="name">Actualités</span>
                          <span class="counter">12 💬</span>
                        </span>
                      </div>
                    </span>
                  </a>
                  <a title="Actualités" class="col-12 col-s-6 col-l-4 " href="https://www.adkami.com/club/b/4076">
                    <span class="image"
                      style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.nautiljon.com/images/breves/00/75/medium/la_seconde_saison_de_classroom_of_the_elite_debutera_le_4_juillet_prochain_15957.jpg&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                    <span class="block-left">
                      <p>La seconde saison de Classroom of the Elite débutera le 4 juillet</p>
                      <div>
                        <span class="bottom-line">
                          <span class="name">Actualités</span>
                          <span class="counter">9 💬</span>
                        </span>
                      </div>
                    </span>
                  </a>
                  <a title="Actualités" class="col-12 col-s-6 col-l-4 " href="https://www.adkami.com/club/b/3882">
                    <span class="image"
                      style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.nautiljon.com/images/breves/00/57/medium/enfin_une_suite_pour_l_anime_classroom_of_the_elite_15475.jpg&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                    <span class="block-left">
                      <p>La saison 2 et 3 de Classroom of the Elite daté</p>
                      <div>
                        <span class="bottom-line">
                          <span class="name">Actualités</span>
                          <span class="counter">41 💬</span>
                        </span>
                      </div>
                    </span>
                  </a>
                  <a title="Actualités" class="col-12 col-s-6 col-l-4 " href="https://www.adkami.com/club/b/3846">
                    <span class="image"
                      style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://img1.ak.crunchyroll.com/i/spire2/82688ebc47c1832d9cafeb34ea6624731645402305_large.png&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                    <span class="block-left">
                      <p>La saison 2 de Classroom of the Elite annoncée</p>
                      <div>
                        <span class="bottom-line">
                          <span class="name">Actualités</span>
                          <span class="counter">50 💬</span>
                        </span>
                      </div>
                    </span>
                  </a>
                </div>
              </div>
            </div>
            <div id="comments" data-id="2361">
              <div data-token="MTY5NjI2NDc3NExzOUhLR1hLUDFhM05YYnFoTnFSV0Y1SElwMmpqdnhW">
                <h3 class="title">Commentaire</h3>
                <h5 style="text-align:center;">Tu dois te connecter pour commenter </h5>
                <form>
                  <textarea disabled="" name="comm" maxlength="1300" id="comm"
                    placeholder="Ajoutez votre commentaire  ... (Tu dois te connecter pour commenter !)"></textarea>
                </form>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/85371.jpg?1i51kp7"
                      src="https://image.adkami.com/avatar/85371.jpg?1i51kp7" style="">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Kusho" rel="nofollow">
                        Kusho </a>
                    </h4>
                    <p class="date" data-time="1683018679" title="Mardi 02 mai 2023 11:11">Le 02 mai 2023</p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    On peut avoir la saison 3 ouuuu ??? <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <span class="comm-ava-void"></span>
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Detajas" rel="nofollow">
                        Detajas </a>
                    </h4>
                    <p class="date" data-time="1674589980" title="Mardi 24 janvier 2023 20:53">Le 24 janvier 2023</p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    Dans cette école, il y a environ 5 profs max, pas d'éducateur, pas d'arbitre lors des matchs, rien
                    tout est vide le seule truc que cette anime à ce sont des énigmes, et le fait que chara principale
                    soit super intelligent et fasse des mystères de tout pour son grand plan à la fin... <div
                      class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <span class="comm-ava-void"></span>
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Poutchoue" rel="nofollow">
                        Poutchoue </a>
                    </h4>
                    <p class="date" data-time="1673201920" title="Dimanche 08 janvier 2023 19:18">Le 08 janvier 2023</p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    @Matth54 : je te ferais remarquer que le MC de l'animé et du night Novel non pas la même façon de
                    raisonner <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <span class="comm-ava-void"></span>
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Poutchoue" rel="nofollow">
                        Poutchoue </a>
                    </h4>
                    <p class="date" data-time="1673201666" title="Dimanche 08 janvier 2023 19:14">Le 08 janvier 2023</p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    @Matth54 D'accord j'ai compris. mais toi tu aime quel genre d'anime <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <span class="comm-ava-void"></span>
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Poutchoue" rel="nofollow">
                        Poutchoue </a>
                    </h4>
                    <p class="date" data-time="1673201663" title="Dimanche 08 janvier 2023 19:14">Le 08 janvier 2023</p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    @Matth54 D'accord j'ai compris. mais toi tu aime quel genre d'anime <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/19263.jpg?1hrh90e"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Kamingen" rel="nofollow">
                        Kamingen </a>
                    </h4>
                    <p class="date" data-time="1668177973" title="Vendredi 11 novembre 2022 15:46">Le 11 novembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    Je viens de finir le volume 7.5 du LN et me suis donc enfin mis à cette fameuse saison 2 de l'anime.
                    Au final, mon avis va être le même que celui de la saison 1 : bon anime (scénario original, plot
                    twit intéressants, persos charismatiques, ...), mais le LN est bien meilleur. <br>Je veux bien que
                    tout ne peut pas être adapté fidèlement sinon ca serait trop long, mais ils ont enlevé/modifié des
                    choses sans vrai justification et c'est embêtant. <br> <br>Je suis quand même un peu soulagé que le
                    volume 7.5 a été adapté même si condensé sur le dernier épisode (le volume 4.5 n'avait pas été
                    adapté pour rappel), cela aurait vraiment créé un manque. <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/39878.jpg?1h72epl"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Matth54" rel="nofollow">
                        Matth54 </a>
                    </h4>
                    <p class="date" data-time="1667344824" title="Mercredi 02 novembre 2022 00:20">Le 02 novembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    @Poutchoue T’as vu que ça fessait plus d’un mois que j’ai posté mon com ? Chui passe à autre chose
                    depuis... <br> <br>Sinon, t’es qui pour savoir si j’ai une culture en script ou non ? Tu me connais
                    ? Tu sais comment je réfléchis ? Moi aussi, je peux balancer des affirmations sans te connaître du
                    genre: <br>“En-tout-cas, j’ai l'air de mieux mi ne connaître que toi en script. Parce que l’objectif
                    du perso c'est pas d'avoir une vie tranquille, c’est de passer en classe A. Ou alors on n'a pas
                    suivi le même anime." <br> <br>Je ferais de mauvais choix à sa place ? Encore une fois, tu connais
                    ma vie ? J'ai dit qu’à l'époque, j’étais comme lui. La vie c’est pas comme un dessin animé. Être
                    comme ça avec des jeunes de ton âge, tu vas pas être vu comme un mec cool et intelligent et les
                    meufs vont pas venir te tomber dans les bras parce que t'es un solitaire ténébreux. Tu vas juste
                    passer pour bouffon doublé d’un connard froid et méprisant avec les autres. <br> <br>Ne plus être
                    comme ça à était meilleur choix de ma vie. Du coup, pour parler script, il est éclaté comme pour
                    n’importe quelle histoire avec un ado edgy. 3/4 du temps, c’est fait pour faire rêver les jeunes en
                    recherche d’identité ou alors c’est l’auteur qui écrit ses fantasmes. Dans la réalité agir comme ça
                    te conduit à un mur. <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <span class="comm-ava-void"></span>
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Poutchoue" rel="nofollow">
                        Poutchoue </a>
                    </h4>
                    <p class="date" data-time="1667332379" title="Mardi 01 novembre 2022 20:52">Le 01 novembre 2022</p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    @Matth54 : aucune culture en terme de scripts. <br>Il veut juste vivre sa vie sans soucie et si tu
                    était à sa place tu ferais pire. <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <span class="comm-ava-void"></span>
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Poutchoue" rel="nofollow">
                        Poutchoue </a>
                    </h4>
                    <p class="date" data-time="1667332360" title="Mardi 01 novembre 2022 20:52">Le 01 novembre 2022</p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    @Matth54 : aucune culture en terme de scripts. <br>Il veut juste vivre sa vie sans soucie et si tu
                    était à sa place tu ferais pire. <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/90582.jpg?1g4cv1u"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/jemexcusemaitre" rel="nofollow">
                        jemexcusemaitre </a>
                    </h4>
                    <p class="date" data-time="1666214239" title="Mercredi 19 octobre 2022 23:17">Le 19 octobre 2022</p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    <span class="comm-spoil pointer"
                      onclick="this.nextSibling.style.display=((this.nextSibling.style.display=='none')?'':'none');">
                      SPOIL</span><span style="display:none;" class="comm-spoil-text"> Pas ouf en vrai cet anime</span>
                    <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/67413.jpg?1ih6aj3"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/saso" rel="nofollow">
                        saso </a>
                    </h4>
                    <p class="date" data-time="1664917737" title="Mardi 04 octobre 2022 23:08">Le 04 octobre 2022</p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    @dydynamo justement on peut dire qu à l epoque comme c était plus controversé on va dire ,ils
                    avaient donc moins les moyens finnancièrement qu aujourd hui. Vu que depuis le marché à juste
                    explosé sur tout les niveaux. <br>Mais oui je pense que t as raison et que c est un problème de
                    mentalité, avant ça m avait plus l air considéré comme un art , alors que maintenant on va juste
                    regardé les profits potentiel. <br> <br>Ouais au final c est a peut près ce qui c est passé et se
                    passe toujours avec les productions de films et séries americaine. C est produit en masse , aucune
                    originalité car on prend pas risque etc etc c est juste à des fins commercial pour comblé une
                    attente qui se résume au niveau du consommateur à avoir sa petite dose régulièrement qui sont de
                    toute façon près à tout prendre du moment qu on leur refile un truc qui va leurs anesthésié le
                    cerveau mdr <br> <br>Franchement c est exactement ça avec l animation jap ,les gens prendrait n imp
                    du moment c est un anime jap avec un minimum de fan service. <br> <br>Après c est la société qui
                    veut ça et au final ca se retrouve dans enormement de domaine. <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/65592.jpg?1hm0o3j"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/dydynamo" rel="nofollow">
                        dydynamo </a>
                    </h4>
                    <p class="date" data-time="1664914246" title="Mardi 04 octobre 2022 22:10">Le 04 octobre 2022</p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    @saso De même pour moi. Je comprends pas en quoi c'est plus rentable qu'une adaptation fidèle mais
                    si ils le font c'est que ça marche bien d'un côté sinon ils l'utiliseraient pas. <br> <br>C'était
                    pas la même chose en ces temps là, je te rappel que avant le big 3 les mangas/animés n'était pas si
                    populaires et très mal vue pour le reste du monde même DB, donc il y avait pas les même demandes
                    qu'aujoud'hui. Moi aussi je trouve ça ouf mais on peut rien y faire, les temps change et les
                    mentalité évolue. L'argent change les gens pour le mieux ou le pire et l'animations japonaise à
                    clairement pris la pente descendante au fils du temps. <br> <br>Les pépites se font de plus en plus
                    rare, on use les studios pour qu'ils produisent plus, au lieu de chose original on conseille, si
                    c'est pas obliger, aux auteurs de s'en temir aux clichés qui sont déjà sur-utilisé, les animateurs
                    sont essoré à sec à cause des commités de productions avec leur décision plus insensé les uns que
                    les autres. <div class="comm-text-footer">
                      Membre - Ajouteur </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/67413.jpg?1ih6aj3"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/saso" rel="nofollow">
                        saso </a>
                    </h4>
                    <p class="date" data-time="1664903091" title="Mardi 04 octobre 2022 19:04">Le 04 octobre 2022</p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    @dydynamo bah le genre c est comme pour les manga je dirais, les 3/4 sont pas ou et ils n y en a que
                    quelques uns qui ressortent vraiment du lot , jpense que ca se vaut. <br> <br> <br>Je pense aussi
                    que c est ça mais j ai toujours du mal à capté en quoi c est pmus rentable de faire une vrai bonne
                    adaptation , perso moi quand jvois ca ca me donne pas envi de le cassé le cul à lire les bouquins ,
                    ça me deg plus qu autre chose. Il y en a pas mal si j avais pas commencé par le bouquin et matté l
                    anime à la place je les aurait jamais lu mdr. <br>Pour moi c est juste que pour tout produit , on
                    fait de plus en plus dans le fast food au détriment de la qualité . <br> <br>Le pire c est en
                    comparaison avec des animes des années 80/90. Jveux pas faire le mec nostalgique car jm en fou mais
                    c etait quand même autre chose , il y avait de qualité, des soucis du détail , que ca soit effet de
                    lumière ou bruitage etc il y en a qui sont encore loin au dessus de ce qui se fait actuellement ,
                    jtrouve ca ouf quand même mdr. <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/65592.jpg?1hm0o3j"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/dydynamo" rel="nofollow">
                        dydynamo </a>
                    </h4>
                    <p class="date" data-time="1664897743" title="Mardi 04 octobre 2022 17:35">Le 04 octobre 2022</p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    @saso C'est tout de même triste de ce dire qu'on fini par s'habituer quand-même. Déjà que le genre
                    est critiqué par beaucoup pour sa médiocrité c'est pas en faisant de la boucherie de ceux qui valent
                    le coup d'être qu'on va s'ensortir. <br> <br>Après moi je penserai toujours qu'ils le font exprès
                    pour obligé les gens à lire l'original puisque qu'on arrête jamais de chanter qu'il est meilleur, ce
                    qui est vrai, donc une pierre deux coups. <div class="comm-text-footer">
                      Membre - Ajouteur </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/47282.jpg?1hrjht9"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Akeryu" rel="nofollow">
                        Akeryu </a>
                    </h4>
                    <p class="date" data-time="1664833655" title="Lundi 03 octobre 2022 23:47">Le 03 octobre 2022</p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    Pas d'argent, pas de budgets, pas de Leads/Seniors Animateurs intéressés par ton projet, salaires
                    trop faible, ambiances dans le studio/équipe lamentable, des Heures supp pas payés, etc. <br> <br>Il
                    n'y a pas vraiment de secret, pour la formule. <br> <br>J'étais dans une boite dont je tairais le
                    nom qui s'occupe de faire la série House of the Dragon, qui a mis en place un système tellement
                    merdique au niveau de la charge de travail, augmentation de salaires que tous les bon artistes se
                    barrent, pourquoi restèrent-ils quand tu peux passer de 70k ans a 90k 100k ailleurs. Ils ne peuvent
                    ensuite que recruter des juniors qui sont encore inexpérimenté ou acceptent des salaires plus bas.
                    Le résultat est ce qui est, hein des séries pas oof. Des clients qui donnent de moins en moins
                    d'argent à la boite car elle produit pas le meilleur de ce qu'elle devrait. <br> <br>Je ne suis pas
                    au japon, mais je suis sur que c'est exactement la même chose que chez nous, ce n'est pas de
                    l'animation 3d, mais cela reste de l'animation. Pourquoi on irait dans une boite claque pour faire
                    du Classroom of the Elite, quand on peut aller sur Bleach chez Pierrot. <br> <br>J'ai du mal a voir.
                    <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/67413.jpg?1ih6aj3"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/saso" rel="nofollow">
                        saso </a>
                    </h4>
                    <p class="date" data-time="1664829134" title="Lundi 03 octobre 2022 22:32">Le 03 octobre 2022</p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    @dydynamo bah on fini par s habitué c est toujours pareil pour les anime qui adaptent des light
                    novels , carnage sur carnage . Faut juste espéré tombé sur les 10% qui sont réussi, mais là c est
                    pas le cas mdr <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/65592.jpg?1hm0o3j"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/dydynamo" rel="nofollow">
                        dydynamo </a>
                    </h4>
                    <p class="date" data-time="1664728900" title="Dimanche 02 octobre 2022 18:41">Le 02 octobre 2022</p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    Bon je m'attendais à rien et j'ai eu raison. En vrai l'animé est pas mal quand tu es un only animé,
                    mais quand tu as lu le LN et que tu vois ça franchement c'est moche, mais que peut-on faire hein ?
                    <div class="comm-text-footer">
                      Membre - Ajouteur </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/64562.jpg?=1d64foi"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Warrior4" rel="nofollow">
                        Warrior4 </a>
                    </h4>
                    <p class="date" data-time="1664711192" title="Dimanche 02 octobre 2022 13:46">Le 02 octobre 2022</p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    En soit, c'est une saison 2, plutôt tranquille avec un très bon épisode dessus, mais j'ai vraiment
                    hâte de la saison 3. <div class="comm-text-footer">
                      Membre - Ajouteur </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/31096.jpg?1hfg3aj"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/melissaselina" rel="nofollow">
                        melissaselina </a>
                    </h4>
                    <p class="date" data-time="1664633622" title="Samedi 01 octobre 2022 16:13">Le 01 octobre 2022</p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    tomlora: merci ! <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/103529.jpg?1ibiok6"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Cisseroi4" rel="nofollow">
                        Cisseroi4 </a>
                    </h4>
                    <p class="date" data-time="1664558479" title="Vendredi 30 septembre 2022 19:21">Le 30 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    @LeMangaman j'adore ton profil mon ref <div class="comm-text-footer">
                      Membre - Ajouteur </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/65412.jpeg?=1ddhjfq"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/LeMangaman" rel="nofollow">
                        LeMangaman </a>
                    </h4>
                    <p class="date" data-time="1664524263" title="Vendredi 30 septembre 2022 09:51">Le 30 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    @Argonn je disais juste que le kravmaga pour vraiment apprendre à te battre (et donc te défendre) c
                    clairement pas le efficace, après si toi tu kiffes en faire c tant mieux pour toi, le sport c un
                    hobby avant tout <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/65412.jpeg?=1ddhjfq"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/LeMangaman" rel="nofollow">
                        LeMangaman </a>
                    </h4>
                    <p class="date" data-time="1664524142" title="Vendredi 30 septembre 2022 09:49">Le 30 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    @Argonn @FFBI à aucun moment j'ai parlé de ceux qui font du mma me mettez pas les mots à la bouche
                    mdrrr je m'y connais plus qu'assez en sport de combat. Je parlais du self défense typique qu'on
                    apprend aux femmes avec des techniques éclatés. Et y a bcp d'art martiaux qui puent la merde en
                    combat hein g jamais dit le contraire (le aïkido grosse fraude par exemple) mais viens pas me dire
                    que quelqu'un qui fait du judo ou jiu jitsu n'a aucune chance face à un boxeur. Le tout premier
                    combat mma à l'ufc (où tous les coups étaient permis et sans catégorie de poids) c'est Royce Gracie
                    (jsp si jl'ai bien écrit) un pratiquant de jiu jitsu qui l'a gagné et assez facilement en plus. La
                    boxe c'est beau mais dès que tu finis au sol c'est terminé. Après pour le mma c différent mais meme
                    là ça dépend, t'en as bcp qui sont juste des strikers et qui n'ont quasi pas de compétences au sol
                    <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/45530.jpg?1h2qaa7"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Tomlora" rel="nofollow">
                        Tomlora </a>
                    </h4>
                    <p class="date" data-time="1664498342" title="Vendredi 30 septembre 2022 02:39">Le 30 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    @melissaselina : Check la J-Garden sur Google. <br> <br>Ca ne fait pas bizarre dans le LN puisque
                    plein d'éléments au sein de leur relation ont sauté dans l'animé. <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/31096.jpg?1hfg3aj"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/melissaselina" rel="nofollow">
                        melissaselina </a>
                    </h4>
                    <p class="date" data-time="1664461005" title="Jeudi 29 septembre 2022 16:16">Le 29 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    Parce qu’elle a quand même vécu un truc horrible mais y a pas eu plus de focus sur ça, elle s’en
                    serait remis oklm&nbsp;? Y a que moi que ça choque j’ai l’impression&nbsp;:’) <div
                      class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/31096.jpg?1hfg3aj"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/melissaselina" rel="nofollow">
                        melissaselina </a>
                    </h4>
                    <p class="date" data-time="1664460952" title="Jeudi 29 septembre 2022 16:15">Le 29 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    <span class="comm-spoil pointer"
                      onclick="this.nextSibling.style.display=((this.nextSibling.style.display=='none')?'':'none');">
                      SPOIL</span><span style="display:none;" class="comm-spoil-text"> De ce que j'ai vu, Ryuen a l'air
                      vraiment ridicule, tout se passe comme le mc l’aurait voulu, et tout est trop facile. Il passe
                      d’un antagonisme qui fait «&nbsp;peur&nbsp;» à un mec qui fait un peu de la peine… <br> <br>Du
                      coup moi je suis vraiment à contre courant&nbsp;: j’ai adoré le début de la S2, par contre, après
                      l’arc de kushida, bah bof. <br> <br>J’aime bien le prototype de base de kyotaka mais comme on ne
                      connaît absolument rien de ses objectifs, bah je ressens moins d’attachement, on aimerait bien le
                      soutenir mais dans quoi&nbsp;? C’est dommage. Avant, on avait au moins la ligne directrice de
                      «&nbsp;on monte en classe A&nbsp;» mais là y a 0 buts. <br> <br>Qu’il soit intelligent, ok, qu’il
                      est des capacités hors norme, ok aussi, mais battre 4 personnes d’un coup en mode yolo, mouais…
                      <br> <br>Pour la romance, j’aimais bien Kei, mais en faite, bah je suis pas ultra fan de leur
                      relation, le côté «&nbsp;pion&nbsp;», c’était sympa, mais perso, après la scène qu’elle a vécu,
                      bah j’avoue que je serais pas tombé in love, le côté curiosité, je comprends, mais moi, si on met
                      100 ans à venir me «&nbsp;sauver&nbsp;» en sachant que c’est de sa responsabilité, ça faisait bien
                      parti du contrat, bah la 1er chose qui se produit, ce sera certainement pas la dépendance mais
                      plutot l’évitement et le traumatisme bien sur.</span>
                    <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/31096.jpg?1hfg3aj"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/melissaselina" rel="nofollow">
                        melissaselina </a>
                    </h4>
                    <p class="date" data-time="1664460713" title="Jeudi 29 septembre 2022 16:11">Le 29 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    Tomlora : est ce que tu peux me passer le lien du LN si c'est possible ? <br>Je préfère la version
                    ayanakoji sur Kei dans le ln que dans l'anime mais en même temps ça m'aurait fait trop bizarre si à
                    ce stade il soit déjà en mode "romantique" vu qu'il a un côté moins humain. <div
                      class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/63819.jpeg?1if9min"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/kamran11111" rel="nofollow">
                        kamran11111 </a>
                    </h4>
                    <p class="date" data-time="1664446556" title="Jeudi 29 septembre 2022 12:15">Le 29 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    C’était tout beau tout rose jusqu’à ce qu’il sorte son monologue de fin <div
                      class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/66826.png?1g3v3k7"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Alexor" rel="nofollow">
                        Alexor </a>
                    </h4>
                    <p class="date" data-time="1664386689" title="Mercredi 28 septembre 2022 19:38">Le 28 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    Ouais j'voie, bah du coup, j'vais attendre la saison 3 puis j'irai lire le LN. <div
                      class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/6014.jpg"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Souling" rel="nofollow">
                        Souling </a>
                    </h4>
                    <p class="date" data-time="1664368194" title="Mercredi 28 septembre 2022 14:29">Le 28 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    la saison 1 m'a paru bien meilleur que la 2e <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/81177.jpg?1fdf2kn"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Aimdeair" rel="nofollow">
                        Aimdeair </a>
                    </h4>
                    <p class="date" data-time="1664306428" title="Mardi 27 septembre 2022 21:20">Le 27 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    De manière générale, je rejoins les avis des autres. J’attends la suite, malgré une hype
                    redescendue. <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/45530.jpg?1h2qaa7"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Tomlora" rel="nofollow">
                        Tomlora </a>
                    </h4>
                    <p class="date" data-time="1664304687" title="Mardi 27 septembre 2022 20:51">Le 27 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    @Alexor : Le manga pour l'année 1 est nul. Les dessins sont pas terribles, Ayano n'a aucun flow.
                    Bref, c'est la seule version à absolument éviter. <br> <br>Pour l'année 2, le manga est bien. Mais
                    c'est bien plus tard. <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/66826.png?1g3v3k7"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Alexor" rel="nofollow">
                        Alexor </a>
                    </h4>
                    <p class="date" data-time="1664302791" title="Mardi 27 septembre 2022 20:19">Le 27 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    Quelqu'un peut me parler du manga ? Car j'suis anime only et Tomlora me fait envie mais lire un LN
                    ca m'a l'air insurmontable pour moi x) <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/45530.jpg?1h2qaa7"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Tomlora" rel="nofollow">
                        Tomlora </a>
                    </h4>
                    <p class="date" data-time="1664292193" title="Mardi 27 septembre 2022 17:23">Le 27 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    Le dernier point, c'est les side stories à la fin de chaque tome. <br> <br>En bref, l'auteur prend 4
                    personnages "importants" du tome, et réécrit une scène avec exclusivement le point de vue du
                    personnage en question. <br> <br>Par exemple, pour les derniers ep, dans le LN, on a : <br>- Le
                    point de vue de Mlle Chabashira (la prof) quand elle attend Ayano après la rencontre avec son père
                    <br>- Kei, quand elle voit le rencard Ayano/Sato + la dernière scène de l'épisode sur le banc. C'est
                    d'ailleurs là qu'elle arrête de douter, et qu'elle comprend définitivement qu'elle est tombée
                    amoureuse de lui. Tout comme elle se dit qu'elle devra lui apprendre ce qu'est la romance, car son
                    cadeau (le médoc) n'a rien d'un cadeau qu'un garçon donnerait à une fille pour Noel. <br> <br> <br>
                    <br>Bref, je n'ai pas pour objectif de te motiver à lire ou changer d'avis sur l'oeuvre... Mais
                    comme dit pour Fenrir, il faut bien dissocier anime et LN. <br> <br>Le LN a une grosse commu, donc
                    grosse hype lorsqu'un animé de Classrooms va sortir. <br>Néanmoins, que ce soit pour la s1 et s2, on
                    se rend vite compte que les valeurs du LN et ses points forts ne sont pas vraiment retranscrits dans
                    l'animé, ce qui en fait au final deux oeuvres plus ou moins différentes. <div
                      class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/45530.jpg?1h2qaa7"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Tomlora" rel="nofollow">
                        Tomlora </a>
                    </h4>
                    <p class="date" data-time="1664291784" title="Mardi 27 septembre 2022 17:16">Le 27 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    @Matth54 : Ca peut se comprendre :) <br> <br>Mais au moins tu as compris ce que je voulais dire :P.
                    <br>Il est plus humain dans le LN, car comme dit, on a ses réflexions internes, les éventuelles
                    choses qu'il ne comprend pas et on a surtout de longs monologues assez bien écrits, qui permettent
                    de mieux comprendre le personnage. <br> <br>J'avais pas prévu d'en dire plus ici pour les
                    anime-only, mais pour continuer sur tes remarques : <br> <br>Oui certains personnages ont l'air très
                    bêtes dans l'animé. Mais ce qui fait la force du LN, c'est aussi 3 éléments : <br>- Tous les
                    personnages sont utiles et ont des rôles bien précis. <br>- On a également le process interne des
                    différents personnages, ça permet de mieux cerner leur personnalité mais également comment ils
                    réfléchissent et voient les scènes. C'est très différent de l'animé où on a surtout le point de vue
                    d'Ayano (et encore, pas son côté humain) et quelques fois Kei. <br>Avec autant de détails et
                    d'informations, cela nous permet plus facilement de se mettre à la place du personnage, de
                    comprendre ses forces et ses faiblesses. Evidemment, dans un format animé, c'est hyper dur à mettre
                    en place. <br> <br>L'exemple de s2, comme évoqué plus bas, c'est Ryuuen, qui passe pour un con avec
                    des muscles, alors qu'il est en réalité bien plus calculateur que ça. <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/39878.jpg?1h72epl"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Matth54" rel="nofollow">
                        Matth54 </a>
                    </h4>
                    <p class="date" data-time="1664290722" title="Mardi 27 septembre 2022 16:58">Le 27 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    @Tomlora le truc c'est que j'ai du mal à me plonger dans la lecture, au bout d'1h je ne tiens plus
                    en place. C'est pour ça d'ailleurs que j'ai déjà une douzaine de romans à terminer d'abord. Alors
                    lire un LN qui ne m'intéresse pas spécialement ça serait clairement pas pour maintenant si je devais
                    le lire. <br> <br>Parcontre effectivement avec ton exemple le MC a l'air d'être beaucoup mieux dans
                    le LN que dans l'anime du coup c'est vraiment bête qu'ils détruisent l'anime comme ça. Ça fait plus
                    de la mauvaise pub pour le LN qu'autre chose. <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <span class="comm-ava-void"></span>
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Psychdreamer" rel="nofollow">
                        Psychdreamer </a>
                    </h4>
                    <p class="date" data-time="1664286630" title="Mardi 27 septembre 2022 15:50">Le 27 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    <span class="comm-spoil pointer"
                      onclick="this.nextSibling.style.display=((this.nextSibling.style.display=='none')?'':'none');">
                      SPOIL</span><span style="display:none;" class="comm-spoil-text"> J’attends la saison 3 avec
                      impatience et j’espère qu’ils augmenteront le budget et la qualité de celle-ci car ils peuvent pas
                      rater cette partie.Ce serait impardonnable.Et j’espère qu’on verra la bataille des
                      dinosaures.:)</span>
                    <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/45530.jpg?1h2qaa7"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Tomlora" rel="nofollow">
                        Tomlora </a>
                    </h4>
                    <p class="date" data-time="1664283144" title="Mardi 27 septembre 2022 14:52">Le 27 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    <span class="comm-spoil pointer"
                      onclick="this.nextSibling.style.display=((this.nextSibling.style.display=='none')?'':'none');">
                      SPOIL</span><span style="display:none;" class="comm-spoil-text"> Sinon, petite différence animé/LN
                      pour illustrer mon message précédent : <br> <br>Anime : <br>"Karuizawa ressent une véritable
                      confiance envers moi maintenant. Elle ne me trahira pas facilement. Elle est un pion efficace.
                      Mais, en fin de compte, Je suppose que je suis toujours piégé dans la WR. Est-ce que ma perception
                      des autres comme n'étant rien d'autre que des pions changera ? Est-ce que notre relation changera
                      un jour ?" <br> <br>LN : <br>"Kei était la personne dont je m'étais le plus rapproché au cours de
                      l'année écoulée, et elle ressentait probablement la même chose pour moi. Elle est devenue
                      indispensable, en quelque sorte, avant même que je ne le réalise. Peut-être que si je visais la
                      classe A, nous pourrions éventuellement être amis. Peut-être même quelque chose de plus."</span>
                    <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/45530.jpg?1h2qaa7"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Tomlora" rel="nofollow">
                        Tomlora </a>
                    </h4>
                    <p class="date" data-time="1664283064" title="Mardi 27 septembre 2022 14:51">Le 27 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    @Matth54 : L'animé le rend comme ça, alors que dans le LN, on a ses pensées "internes" et est en
                    réalité beaucoup plus humain que l'animé le montre. <br> <br>Peut-être que tu comprendrais mieux en
                    lisant le LN ^^ <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/39878.jpg?1h72epl"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Matth54" rel="nofollow">
                        Matth54 </a>
                    </h4>
                    <p class="date" data-time="1664281911" title="Mardi 27 septembre 2022 14:31">Le 27 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    @Soolic oui mais je suis aigri claire ou aigri foncé ? <br> <br>laul mdr t'as compris la blague?
                    <br>Est-ce que avec mon humour je deviens aussi cringe que le MC ? Personne ne sait... <div
                      class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/63518.jpg?1ia2tfg"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Katana" rel="nofollow">
                        Katana </a>
                    </h4>
                    <p class="date" data-time="1664267403" title="Mardi 27 septembre 2022 10:30">Le 27 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    Saison 02 moyenne. <br>Les premiers épisodes étaient beaucoup trop compliqués pour pas grand chose
                    au final. <br> <br>Un jeu un peu plus intéressant et moins réglementé aurait largement fait le café,
                    surtout au vu du dénouement de chaques batailles; que ce soit contre la fille au trouble bipolaire
                    ou encore contre Ryuuen. En s'en sort à chaque fois d'une manière un peu facile tout en exploitant
                    au strict minimum toute les règles inutiles qui nous ont été exposées au préalable. <br> <br>Le
                    passage sur la peur aurait aussi pu être mieux développé que ça. Je dois dire qu'elle est un peu
                    merdique la backstory de 5 secs avec le reptile pour justifier la non-existence de peur chez Ryuuen,
                    ça fait un peu trop justification bâclé même pour un public ouvert d'esprit. <br> <br>Fort
                    heuresement, Ayakanoji nous a epargné le cliché du héro flegme qui découvre ses sentiments amoureux
                    sur une scène random. Ça nous montre qu'on pas encore atteint le fond et c'est une bonne chose. <br>
                    <br>En tout cas, j'étais hypé pour cette 2ème saison mais je dois dire que la première m'avait
                    laissée de meilleurs souvenirs. <br> <br> <br>Petit + pour l'opening qui je trouve est l'un des plus
                    agréables de la saison. <div class="comm-text-footer">
                      Membre - Ajouteur </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <span class="comm-ava-void"></span>
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Soolic" rel="nofollow">
                        Soolic </a>
                    </h4>
                    <p class="date" data-time="1664249033" title="Mardi 27 septembre 2022 05:23">Le 27 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    @Matth54 Ah ouais t'es aigri toi mdr <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/9483.jpeg?=1425931454"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/AceTenshiro" rel="nofollow">
                        AceTenshiro </a>
                    </h4>
                    <p class="date" data-time="1664246239" title="Mardi 27 septembre 2022 04:37">Le 27 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    Bref encore une fois dommage... pourquoi les adaptations animés sont quasiment jamais bonnes ? <br>
                    <br>A un moment donné va falloir qu'ils arrêtent de penser qu'en enlevant toute la substance de
                    l'oeuvre originale ça va pas se voir ... même si il est plus probable qu'ils s'en foutent juste
                    c'est affligeant... <br> <br>A ce rythme là qu'ils poursuivent en enlevant les couleurs, les seiyuu,
                    les OST etc... peut être que ça ne se verra pas non plus et comme ça ils pourront encore accélérer
                    le rythme de production ... lamentable... <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/47282.jpg?1hrjht9"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Akeryu" rel="nofollow">
                        Akeryu </a>
                    </h4>
                    <p class="date" data-time="1664244081" title="Mardi 27 septembre 2022 04:01">Le 27 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    Que Dieu te garde. <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/39878.jpg?1h72epl"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Matth54" rel="nofollow">
                        Matth54 </a>
                    </h4>
                    <p class="date" data-time="1664240921" title="Mardi 27 septembre 2022 03:08">Le 27 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    Putain j'ai encore plus détesté que la S1. C'est moi ou les meufs de cet anime sont toutes
                    extrêmement connes mais d'une puissance et les mecs, on le charisme de phasmes asthmatiques. <br>
                    <br>Et puis le MC mon dieu, qu'il est cringe mais qu'il est cringe. vraiment on dirait moi quand
                    j'étais au lycée et rien que d'y repenser ça fait grincer des dents et me donne envie de me
                    fracasser le crâne contre un mur tellement j'ai honte. Si je pouvais retourner dans le passé je me
                    frapperai moi-même d'avoir été comme ça. <br>Le mec c'est juste un putain de dark sasuke qui fait le
                    mec edgie blasé trop intelligent et trop fort alors que c'est juste un bouffon de 15 piges en veste
                    rouge. <br> <br>Et les "égnimes/complots/jeux" sont nuls à chier et d'une évidence... Le scénar
                    visible à des kilomètres, j'ai quasi tout prèshot. <br>Ça veut faire genre que c'est un anime super
                    sérieux et intelligent avec un MC badass alors qu'enfaite c'est juste de la fumisterie. <br>Les
                    persos sont tellement tous nuls, débiles et nivellés par le bas qu'on a l'impression que le MC est
                    méga fort alors qu'il est juste normal. <br> <br>Vraiment je ne comprends pas la hype autour de ça
                    et déjà à la 1er saison je comprenais pas. Qu'est-ce qui a de bien là dedans ? <br> <br>Bon enfin
                    bref, maintenant je veux vraiment juste oublier cet anime et surtout ce MC. <div
                      class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/67413.jpg?1ih6aj3"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/saso" rel="nofollow">
                        saso </a>
                    </h4>
                    <p class="date" data-time="1664238561" title="Mardi 27 septembre 2022 02:29">Le 27 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    @Fenrir C est pas logique, les lecteurs de LN vende l oeuvre d origine et non l anime , donc c est
                    même tout l inverse. <br>Pour moi c est plus les anime only qui on bien aimé la s1 qui se sont hype
                    pour la s2 car ils ont pas l habitude de voir un MC qui n est pas coincé et immature avec un QI d
                    huitre comme on voit les 3/4 du temps (bien que dans cette s2 il a rien de vraiment exceptionnel et
                    c est beaucoup de bruit pour pas grand chose). Ce qui peut se comprendre d ailleurs . <div
                      class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/45530.jpg?1h2qaa7"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Tomlora" rel="nofollow">
                        Tomlora </a>
                    </h4>
                    <p class="date" data-time="1664238069" title="Mardi 27 septembre 2022 02:21">Le 27 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    Et les modifications d'ailleurs, assez nombreuses. <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/45530.jpg?1h2qaa7"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Tomlora" rel="nofollow">
                        Tomlora </a>
                    </h4>
                    <p class="date" data-time="1664237910" title="Mardi 27 septembre 2022 02:18">Le 27 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    @Fenrir : Vu tous les raccourcis et skip, je doute qu'il faut comparer l'animé avec ce qu'en
                    disaient les lecteurs du LN. <br> <br>Ryuen passe juste pour un abruti avec des muscles, alors que
                    dans le LN, il est loin d'être aussi simpliste et caricatural. <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <span class="comm-ava-void"></span>
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/draken" rel="nofollow">
                        draken </a>
                    </h4>
                    <p class="date" data-time="1664233719" title="Mardi 27 septembre 2022 01:08">Le 27 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    <span class="comm-spoil pointer"
                      onclick="this.nextSibling.style.display=((this.nextSibling.style.display=='none')?'':'none');">
                      SPOIL</span><span style="display:none;" class="comm-spoil-text"> on espère qu'elle aussi elle se
                      fera vite refroidir, la vieille boiteuse, vive le maître " Ayanokoji" !</span>
                    <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/114426.jpg?1hhqmto"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Hvnkboy" rel="nofollow">
                        Hvnkboy </a>
                    </h4>
                    <p class="date" data-time="1664232025" title="Mardi 27 septembre 2022 00:40">Le 27 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    Bon je vais pas mentir, <br>Ca commence à devenir légèrement surcoté, c'était bien au début de la
                    saison, mais plus ca allait moins j'étais hype chaque semaine, vivement les animes d'automne... <br>
                    <br>La fin rattrape bien cela dit. <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/43052.jpg?1ehvf4u"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/wazuto" rel="nofollow">
                        wazuto </a>
                    </h4>
                    <p class="date" data-time="1664231106" title="Mardi 27 septembre 2022 00:25">Le 27 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    Un excellent anime, personnellement j'aime énormément l'univers de l'anime avec des personnages très
                    intéressants et un mc qui apporte un bon bol d'air frais. J'ai hâte de découvrir les autres classes
                    et la suite des aventures de Kiyotaka le bricoleur et sa trousse à outils. <div
                      class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/3743.jpg?1ihd0ak"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Fenrir" rel="nofollow">
                        Fenrir </a>
                    </h4>
                    <p class="date" data-time="1664228256" title="Lundi 26 septembre 2022 23:37">Le 26 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    Bon heureusement que la fin fait remonter le tout car franchement elle était pas dingue cette saison
                    2. Encore une fois les lecteurs du LN nous ont survendu l'œuvre pour pas changer. Déjà graphiquement
                    ça pique pas mal dans l'ensemble mais en plus c'est pas fou scénaristiquement. <br> <br>C'est bien
                    d'avoir un MC "intelligent" mais l'idéal c'est qu'il y ai d'autre perso de la même trempe pour faire
                    une bonne tambouille parce que bon la totalité de ces derniers que l'on a vu jusqu'à maintenant
                    était vraiment débile ou complètement naïf. Du coup c'est facile de dire que le MC est cool quand
                    les autres ne vaux rien à coté de lui. <br> <br>Bref à voir avec la saison 3 car au vu de cette fin
                    de saison, il y a l'air d'avoir une petit quelque chose d'intéressant qui va venir mais j'en attends
                    pas grand chose comme ça je serai pas déçu. <div class="comm-text-footer">
                      Modo - Ajouteur </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/67413.jpg?1ih6aj3"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/saso" rel="nofollow">
                        saso </a>
                    </h4>
                    <p class="date" data-time="1664227425" title="Lundi 26 septembre 2022 23:23">Le 26 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    @Tomlora oui il y a quelques exception après tout ce que fais kadokawa n est pas à jeté, mais ça c
                    est surtout pour les adaptations manga en fait , sinon hormi eighty six et quelques uns par ci par
                    là c est clairement pas ouf mdr <br> <br> <br> <br>@Xburner-sama non jpaye pas pour ça mdr déjà d un
                    , de deux j ai pas tout regardé non plus, pas mal d épisode où j ai check par ci par là voir où ça
                    en était et ce que ça donnait. Mais j avou t étais sans doute derrière moi pour check ce que je
                    matte ou pas mdr. <br> <br>De plus je suis pas psy ni assistant social, tes complexes garde les pour
                    toi , car justement tu me sors "change ton comportement et après dis ça aux autres" bah suis déjà
                    tes propres conseil car pour ragé non stop ici et ne jamais être content en faisant le mec "moi
                    jcritique , mes gouts son au dessus de la masse , vous regardez que de la merde" ca me fait bien
                    rire car au final t aimes un sacré paquet de truc de merde , et fait souvent le mec " ca c est nul "
                    sans même savoir de quoi ça parle . Franchement si tu veux te donné un genre ou te défoulé car ta
                    une vie qui te convient pas ou claqué , libre à toi mais fais le ailleurs ou me tag pas car moi jm
                    en tape pas mal . <br> <br>Et innove un peu c est toujours le même disque rayé que tu ressorts à
                    tout le monde, on dirait un bot mdr <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/47282.jpg?1hrjht9"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Akeryu" rel="nofollow">
                        Akeryu </a>
                    </h4>
                    <p class="date" data-time="1664227020" title="Lundi 26 septembre 2022 23:17">Le 26 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    Très bonne saison vivement la saison 3. <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/23804.gif?1i9orqt"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Xburner-sama" rel="nofollow">
                        Xburner-sama </a>
                    </h4>
                    <p class="date" data-time="1664226260" title="Lundi 26 septembre 2022 23:04">Le 26 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    @saso "Pour moi la réel faute revient au consommateur après, si les gens n'achetaient pas tous comme
                    des pigeons". T'as bien regardé l'anime? <br>Tu peux arrêter de dire ça H24 comme si t'en faisais
                    pas partie? Change ton comportement et après dis ça aux autres, tu rend fou avec tes mot. T'es un
                    Yenclit accepte le. <div class="comm-text-footer">
                      Membre - Ajouteur </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/110824.jpg?1h5439f"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/erwann6" rel="nofollow">
                        erwann6 </a>
                    </h4>
                    <p class="date" data-time="1664222616" title="Lundi 26 septembre 2022 22:03">Le 26 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    Le final une pépite , hâte la saison. 3 l’an prochain <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/26019.jpg?1hl0lr1"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/gogar" rel="nofollow">
                        gogar </a>
                    </h4>
                    <p class="date" data-time="1664221994" title="Lundi 26 septembre 2022 21:53">Le 26 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    J'ai u peur, mais finalement incroyable tout reste dans le calcul est, l'anime, est fidèle au héros.
                    <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/45530.jpg?1h2qaa7"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Tomlora" rel="nofollow">
                        Tomlora </a>
                    </h4>
                    <p class="date" data-time="1664221170" title="Lundi 26 septembre 2022 21:39">Le 26 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    @saso : Je pense qu'ils sont plus dans le mood que c'est ça ou rien. <br> <br> <br>Après à
                    contrario, Made in abyss, c'est également Kadokawa, et pourtant... <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/67413.jpg?1ih6aj3"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/saso" rel="nofollow">
                        saso </a>
                    </h4>
                    <p class="date" data-time="1664218636" title="Lundi 26 septembre 2022 20:57">Le 26 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    @Tomlora ouais mais ils pourraient se faire tellement plus de tune en faisant un truc vraiment
                    propre mais bon oui kadokawa fait vraiment de la merde à ce niveau là, le problème c est qu ils ont
                    une bonne partie des grosse licenses et ca va duré à mon avis. Quand ils annonces un anime jme dis
                    pmus "a quel oeuvre ils vont ruiné cette fois" contrairement au adaptation que fait exemple Jump en
                    me disant " a tiens cool quel oeuvre ils vont adapté ?" :/ <br> <br>Pour moi la réel faute revient
                    au consommateur après, si les gens n achetaient pas tous comme des pigeons ils n auraient pas d
                    autre choix que de revoir leur politique vis à vis des adaptations anime... mais bon. <br> <br>Et
                    ouais l auteur jpense qu il est content de se faire des tunes facile, c est difficile de le lui
                    reproché mais pour moi c est un peu vendre son âme mdr. J ai plus de respect pour des auteurs qui
                    vont jusqu à refusé toute adaptationd si elles ont pas pour but d etre fidèle, surtout que bien
                    souvent c est leurs carrière qui sont en jeu. <div class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/20791.jpg?1iggpmi"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/Lawki" rel="nofollow">
                        Lawki </a>
                    </h4>
                    <p class="date" data-time="1664217325" title="Lundi 26 septembre 2022 20:35">Le 26 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    Fin de saison plutôt bonne. C'était pas gagner au début. <br> <br>J'espère un développement de
                    Ayanokoji parce que, dur d'accepter la façon dont y vois les gens. <div class="comm-text-footer">
                      Membre - Ajouteur </div>
                  </div>
                </div>
                <div class="comm row">
                  <div class="comm-ava">
                    <img class="image lazy" data-original="https://image.adkami.com/avatar/69351.jpg?1i40ahr"
                      src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXYzh8+PB/AAffA0nNPuCLAAAAAElFTkSuQmCC">
                  </div>
                  <div class="comm-login">
                    <h4>
                      <a href="https://www.adkami.com/profil/MrSoGravity" rel="nofollow">
                        MrSoGravity </a>
                    </h4>
                    <p class="date" data-time="1664215829" title="Lundi 26 septembre 2022 20:10">Le 26 septembre 2022
                    </p>
                  </div>
                  <div class="comm-text msg-bbcode">
                    Cette saison 2 était cool. <br>Le début était vraiment à chier mais la fin a vraiment tout
                    rattraper, et on commence à vraiment comprendre kiyotaka et ses objectifs.. <div
                      class="comm-text-footer">
                      Membre </div>
                  </div>
                </div>
              </div>
              <div class="link"
                style="margin-top:10px;padding: 30px;background-color: rgba(0,0,0,0.3);display:none;box-shadow: 7px 7px 0 #0000008f;margin: 9px;border-radius: 3px;"
                id="opencommentaire">Ouvrir les commentaires</div>
            </div>
            <script>
              window.addEventListener('load', function () {
                window.addEventListener('blur', function () {
                  try {
                    let video = document.activeElement.parentNode.parentNode.parentNode.parentNode;
                    if (["streamtape", "upstream", "dood stream", "saruch"].indexOf(video.getAttribute('data-name')) != -1) {
                      var pub = document.createElement('script');
                      pub.setAttribute('data-cfasync', 'false');
                      pub.setAttribute('type', 'text/javascript');
                      pub.setAttribute('async', 'true')
                      pub.innerText = "var _0x45ac=['mousedown',false,\"451207\",0,\"//acdcdn.com\",'random','click'];(function(_0x4b72e9,_0x57322f){var _0x34bc6f=function(_0x378ab9){while(--_0x378ab9){_0x4b72e9['push'](_0x4b72e9['shift']());}};_0x34bc6f(++_0x57322f);}(_0x45ac,0xaa));var _0x53fc=function(_0x3bb541,_0xc3a158){_0x3bb541=_0x3bb541-0x0;var _0x538763=_0x45ac[_0x3bb541];return _0x538763;};var adcashMacros={'sub1':'','sub2':''};var zoneSett={'r':_0x53fc('0x0'),'d':_0x53fc('0x1')};var urls={'cdnUrls':[\"//achcdn.com\",_0x53fc('0x2')],'cdnIndex':0x0,'rand':Math[_0x53fc('0x3')](),'events':[_0x53fc('0x4'),_0x53fc('0x5'),'touchstart'],'onlyFixer':false,'fixerBeneath':_0x53fc('0x6')};var _0x3fc9=['events','init','createElement','link','undefined','head','rel','dns-prefetch','href','appendChild','preconnect','random','msgPops','_allowedParams','getFirstScript','scripts','script','cdnUrls','length','data-cfasync','false','src','cdnIndex','/script/compatibility.js','onerror','attachCdnScript','parentNode','insertBefore','uniformAttachEvent','addEventListener','uniformDetachEvent','removeEventListener','detachEvent','loader','getRand'];(function(_0x532df1,_0x3ad61c){var _0x5e51f2=function(_0x376ea7){while(--_0x376ea7){_0x532df1['push'](_0x532df1['shift']());}};_0x5e51f2(++_0x3ad61c);}(_0x3fc9,0xb1));var _0x46cc=function(_0x213ffd,_0x36b849){_0x213ffd=_0x213ffd-0x0;var _0x4f4482=_0x3fc9[_0x213ffd];return _0x4f4482;};function acPrefetch(_0x14af47){var _0x1b2a6e=document[_0x46cc('0x0')](_0x46cc('0x1'));var _0x17508e;if(typeof document['head']!==_0x46cc('0x2')){_0x17508e=document[_0x46cc('0x3')];}else{_0x17508e=document['getElementsByTagName'](_0x46cc('0x3'))[0x0];}_0x1b2a6e[_0x46cc('0x4')]=_0x46cc('0x5');_0x1b2a6e[_0x46cc('0x6')]=_0x14af47;_0x17508e[_0x46cc('0x7')](_0x1b2a6e);var _0x1f450f=document[_0x46cc('0x0')](_0x46cc('0x1'));_0x1f450f[_0x46cc('0x4')]=_0x46cc('0x8');_0x1f450f['href']=_0x14af47;_0x17508e[_0x46cc('0x7')](_0x1f450f);}var CTABPu=new function(){var _0x5be662=this;var _0x9158b7=Math[_0x46cc('0x9')]();var _0x54443b=6666;var _0x45966a=1800;this[_0x46cc('0xa')]=0x15b38;this[_0x46cc('0xb')]={'sub1':!![],'sub2':!![],'excluded_countries':!![],'allowed_countries':!![],'pu':!![],'lang':!![],'lon':!![],'lat':!![],'storeurl':!![],'c1':!![],'c2':!![],'c3':!![],'pub_hash':!![],'pub_clickid':!![],'pub_value':!![]};_0x5be662['getRand']=function(){return _0x9158b7;};this[_0x46cc('0xc')]=function(){var _0x176aee;if(typeof document[_0x46cc('0xd')]!==_0x46cc('0x2')){_0x176aee=document['scripts'][0x0];}if(typeof _0x176aee==='undefined'){_0x176aee=document['getElementsByTagName'](_0x46cc('0xe'))[0x0];}return _0x176aee;};this['attachCdnScript']=function(){if(urls['cdnIndex']<urls[_0x46cc('0xf')][_0x46cc('0x10')]){try{var _0x4d0cf0=document[_0x46cc('0x0')]('script');_0x4d0cf0['setAttribute'](_0x46cc('0x11'),_0x46cc('0x12'));_0x4d0cf0[_0x46cc('0x13')]=urls[_0x46cc('0xf')][urls[_0x46cc('0x14')]]+_0x46cc('0x15');_0x4d0cf0[_0x46cc('0x16')]=function(){urls[_0x46cc('0x14')]++;_0x5be662[_0x46cc('0x17')]();};var _0x3e3884=_0x5be662[_0x46cc('0xc')]();_0x3e3884[_0x46cc('0x18')][_0x46cc('0x19')](_0x4d0cf0,_0x3e3884);}catch(_0x16f474){}}};this[_0x46cc('0x1a')]=function(_0x39bf6a,_0x4a1f5f,_0x2b96c5){_0x2b96c5=_0x2b96c5||document;if(!_0x2b96c5[_0x46cc('0x1b')]){return _0x2b96c5['attachEvent']('on'+_0x39bf6a,_0x4a1f5f);}return _0x2b96c5[_0x46cc('0x1b')](_0x39bf6a,_0x4a1f5f,!![]);};this[_0x46cc('0x1c')]=function(_0xeea0b2,_0xa24381,_0x19b218){_0x19b218=_0x19b218||document;if(!_0x19b218[_0x46cc('0x1d')]){return _0x19b218[_0x46cc('0x1e')]('on'+_0xeea0b2,_0xa24381);}return _0x19b218[_0x46cc('0x1d')](_0xeea0b2,_0xa24381,!![]);};this[_0x46cc('0x1f')]=function(_0x4bd91d){if(typeof window['jonIUBFjnvJDNvluc'+_0x5be662[_0x46cc('0x20')]()]==='function'){var _0x501fad=window['jonIUBFjnvJDNvluc'+_0x5be662[_0x46cc('0x20')]()](_0x4bd91d);if(_0x501fad!==![]){for(var _0x52fd89=0x0;_0x52fd89<urls[_0x46cc('0x21')]['length'];_0x52fd89++){_0x5be662[_0x46cc('0x1c')](urls[_0x46cc('0x21')][_0x52fd89],_0x5be662[_0x46cc('0x1f')]);}}}};var _0x30fe2c=function(){for(var _0x373e53=0x0;_0x373e53<urls['cdnUrls'][_0x46cc('0x10')];_0x373e53++){acPrefetch(urls[_0x46cc('0xf')][_0x373e53]);}_0x5be662[_0x46cc('0x17')]();};var _0x4cdf1e=function(){for(var _0x1d0c7a=0x0;_0x1d0c7a<urls[_0x46cc('0x21')][_0x46cc('0x10')];_0x1d0c7a++){_0x5be662['uniformAttachEvent'](urls[_0x46cc('0x21')][_0x1d0c7a],_0x5be662[_0x46cc('0x1f')]);}};this[_0x46cc('0x22')]=function(){var _0x5bd3a0=zoneSett['d']?parseInt(zoneSett['d']):0x0;setTimeout(_0x4cdf1e,_0x5bd3a0*0x3e8);_0x30fe2c();};}();CTABPu[_0x46cc('0x22')]()";
                      let truc = document.getElementById('pubtest');
                      if (truc) truc.appendChild(pub);
                    }
                  } catch (e) {
                    console.log(e);
                  }
                });
              });
            </script>
          </article>
          <div class="dropdown link" id="nav-episode-btn" data-for="row-nav-episode">📋</div>
          <div id="row-nav-episode" class="dropdown-content">
            <div id="nav-episode"
              class="scroll-perso os-host os-theme-dark os-host-resize-disabled os-host-scrollbar-horizontal-hidden os-host-scrollbar-vertical-hidden os-host-transition">
              <div class="os-resize-observer-host observed">
                <div class="os-resize-observer" style="left: 0px; right: auto;"></div>
              </div>
              <div class="os-size-auto-observer observed" style="height: calc(100% + 1px); float: left;">
                <div class="os-resize-observer"></div>
              </div>
              <div class="os-content-glue" style="margin: 0px; width: 159px; height: 12071px;"></div>
              <div class="os-padding">
                <div class="os-viewport os-viewport-native-scrollbars-invisible">
                  <div class="os-content" style="padding: 0px; height: 100%; width: 100%;">
                    <img width="240" height="80" src="https://image.adkami.com/mini/2361.jpg?=1499875271"
                      style="width:100%;" alt="Youkoso Jitsuryoku Shijou Shugi no Kyoushitsu e">
                    <div class="ul-episodes">
                      <div class="saison-container">
                        <ul>
                        </ul>
                      </div>
                      <div class="saison-container">
                        <ul>
                          <li class="saison">saison 1</li>
                        </ul>
                        <ul>
                          <li><a href="https://www.adkami.com/anime/2361/1/1/2/1/" title="">Episode 001 vostfr</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/1/1/1/1/" title="">Episode 001 vf</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/2/1/2/1/" title="">Episode 002 vostfr</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/2/1/1/1/" title="">Episode 002 vf</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/3/1/2/1/" title="">Episode 003 vostfr</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/3/1/1/1/" title="">Episode 003 vf</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/4/1/2/1/" title="">Episode 004 vostfr</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/4/1/1/1/" title="">Episode 004 vf</a></li>
                          <li class="actived"><a href="https://www.adkami.com/anime/2361/5/1/2/1/" title="">Episode 005
                              vostfr</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/5/1/1/1/" title="">Episode 005 vf</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/6/1/2/1/" title="">Episode 006 vostfr</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/6/1/1/1/" title="">Episode 006 vf</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/7/1/2/1/" title="">Episode 007 vostfr</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/7/1/1/1/" title="">Episode 007 vf</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/8/1/2/1/" title="">Episode 008 vostfr</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/8/1/1/1/" title="">Episode 008 vf</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/9/1/2/1/" title="">Episode 009 vostfr</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/9/1/1/1/" title="">Episode 009 vf</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/10/1/2/1/" title="">Episode 010 vostfr</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/10/1/1/1/" title="">Episode 010 vf</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/11/1/2/1/" title="">Episode 011 vostfr</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/11/1/1/1/" title="">Episode 011 vf</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/12/1/2/1/" title="">Episode 012 vostfr</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/12/1/1/1/" title="">Episode 012 vf</a></li>
                        </ul>
                        <ul>
                          <li><a href="https://www.adkami.com/anime/2361/1/6/2/1/" title="">Opening 001 vostfr</a></li>
                        </ul>
                        <ul>
                          <li><a href="https://www.adkami.com/anime/2361/1/7/2/1/" title="">Ending 001 vostfr</a></li>
                        </ul>
                      </div>
                      <div class="saison-container">
                        <ul>
                          <li class="saison">saison 2</li>
                        </ul>
                        <ul>
                          <li><a href="https://www.adkami.com/anime/2361/1/1/2/2/" title="">Episode 001 vostfr</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/1/1/1/2/" title="">Episode 001 vf</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/2/1/2/2/" title="">Episode 002 vostfr</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/2/1/1/2/" title="">Episode 002 vf</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/3/1/2/2/" title="">Episode 003 vostfr</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/3/1/1/2/" title="">Episode 003 vf</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/4/1/2/2/" title="">Episode 004 vostfr</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/4/1/1/2/" title="">Episode 004 vf</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/5/1/2/2/" title="">Episode 005 vostfr</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/5/1/1/2/" title="">Episode 005 vf</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/6/1/2/2/" title="">Episode 006 vostfr</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/6/1/1/2/" title="">Episode 006 vf</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/7/1/2/2/" title="">Episode 007 vostfr</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/7/1/1/2/" title="">Episode 007 vf</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/8/1/2/2/" title="">Episode 008 vostfr</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/8/1/1/2/" title="">Episode 008 vf</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/9/1/2/2/" title="">Episode 009 vostfr</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/9/1/1/2/" title="">Episode 009 vf</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/10/1/2/2/" title="">Episode 010 vostfr</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/10/1/1/2/" title="">Episode 010 vf</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/11/1/2/2/" title="">Episode 011 vostfr</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/11/1/1/2/" title="">Episode 011 vf</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/12/1/2/2/" title="">Episode 012 vostfr</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/12/1/1/2/" title="">Episode 012 vf</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/13/1/2/2/" title="">Episode 013 vostfr</a></li>
                          <li><a href="https://www.adkami.com/anime/2361/13/1/1/2/" title="">Episode 013 vf</a></li>
                        </ul>
                        <ul>
                          <li><a href="https://www.adkami.com/anime/2361/1/6/2/2/" title="">Opening 001 vostfr</a></li>
                        </ul>
                        <ul>
                          <li><a href="https://www.adkami.com/anime/2361/1/7/2/2/" title="">Ending 001 vostfr</a></li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="os-scrollbar os-scrollbar-horizontal os-scrollbar-unusable">
                <div class="os-scrollbar-track os-scrollbar-track-off">
                  <div class="os-scrollbar-handle" style="width: 100%; transform: translate(0px, 0px);"></div>
                </div>
              </div>
              <div class="os-scrollbar os-scrollbar-vertical os-scrollbar-unusable">
                <div class="os-scrollbar-track os-scrollbar-track-off">
                  <div class="os-scrollbar-handle" style="height: 100%; transform: translate(0px, 0px);"></div>
                </div>
              </div>
              <div class="os-scrollbar-corner"></div>
            </div>
            <div class="both"></div>
          </div>
          <div class="both"></div>
        </div>
      </div>
      <div class="col-12 col-l-3" id="col-droit">
        <div class="col-12 blocm">
          <ul class="list">
            <li><a href="https://www.adkami.com/anime/2361/info">Information &amp; critique</a></li>
          </ul>
        </div>
        <div class="col-12 bloc bloc-left fiche-info">
          <br>
          <h4>You Jitsu / Classroom of the Elite / ようこそ実力至上主義の教室へ</h4>
          <div class="star">
            <div class="mcenter background-likel">
              <div class="likel" style="width:84.7001%"><span class="count"><span>8.47</span> avec <br> 1334
                  votes</span></div>
            </div>
          </div>
          <button class="plus btn spoil-nav" data-for="description-anime">plus</button>
          <div class="spoil-panel" id="description-anime">
            <p class="description justify">
              <strong>Le prestigieux lycée Koudo Ikusei est à la pointe de la technologie ou presque 100% des élèves
                passent ensuite à l’université ou trouvent un travail. Les élèves y ont une large liberté mais la vérité
                est que seul l’élite des élèves y reçoit des traitements favorables. Nous suivons le quotidien de
                Kiyotaka Ayanokoji qui fait partie de la Classe D, qui est celle dans laquelle l’école met les élèves
                dit « inférieur » afin de les ridiculiser. Kiyotaka Ayanokoji a été négligent lors de ses examens
                d’entrée et a fini dans la Classe D. Dans cette classe atypique, il se lie notamment d’amitié avec
                Suzune Horikita et Kikyo Kushida.</strong>
            </p>
            <div class="row">
              <p>Date: <b class="date" data-time="1499810400" title="Mercredi 12 juillet 2017 00:00">Le 12 juillet
                  2017</b></p>
              <p>Saison: <a style="display: inline;" href="https://www.adkami.com/anime/season/2017/summer"><b>Été
                    2017</b></a></p>
              <p>Auteur: <b>Kinugasa Shougo</b></p>
              <p>Studio: <b>Lerche</b></p>
              <p>Pays: <a class="link" href="https://www.adkami.com/video?p=1&amp;t=0">
                  <b>Japon</b><span class="pays-flag pays-jp"></span></a></p>
            </div>
            <ul class="list">
              <li class="col-12 col-m col-xl-6" title=""><a href="https://www.adkami.com/video?genres[]=5"><span
                    itemprop="genre">Comédie</span></a></li>
              <li class="col-12 col-m col-xl-6" title=""><a href="https://www.adkami.com/video?genres[]=9"><span
                    itemprop="genre">Drame</span></a></li>
              <li class="col-12 col-m col-xl-6" title=""><a href="https://www.adkami.com/video?genres[]=24"><span
                    itemprop="genre">Tranche de vie</span></a></li>
              <li class="col-12 col-m col-xl-6" title=""><a href="https://www.adkami.com/video?genres[]=29"><span
                    itemprop="genre">School Life</span></a></li>
              <li class="col-12 col-m " title=""><a href="https://www.adkami.com/video?genres[]=34"><span
                    itemprop="genre">Romance</span></a></li>
            </ul>
          </div>
        </div>
        <div class="col-12 bloc">
          <a href="https://www.adkami.com/anime/2361/info">
            <h3>Dernières Critiques</h3>
          </a>
          <ul class="list2 v2">
            <li>
              <a class="" href="https://www.adkami.com/anime/2361/info">
                <b class="label">Note 6</b> <b>ImRyu_</b> Bon, cela fait quand même depuis un certain temps que j'avais
                terminé cet anime et que je devai... </a>
            </li>
            <li>
              <a class="" href="https://www.adkami.com/anime/2361/info">
                <b class="label">Note 8</b> <b>Helmia</b> Il y a beaucoup de choses à dire sur cet anime.
                (Les graphismes étaient juste, sublimes. Les yeux m... </a>
            </li>
            <li>
              <a class="" href="https://www.adkami.com/anime/2361/info">
                <b class="label">Note 7</b> <b>kevin451</b> Une série qui est très difficile à noter. L'animation est
                belle, surtout les yeux des personnag... </a>
            </li>
            <li>
              <a class="" href="https://www.adkami.com/anime/2361/info">
                <b class="label">Note 7</b> <b>Fenrir</b> Un Anime qui démarrais plutôt bien mais qui baisse en intérêt
                au fur et à mesure que l'histoire... </a>
            </li>
            <li>
              <a class="" href="https://www.adkami.com/anime/2361/info">
                <b class="label">Note 7</b> <b>Greteck</b>
                En regardant les critiques et les commentaires qui tournaient autour de cet animé au cours de la sa...
              </a>
            </li>
            <li>
              <a class="" href="https://www.adkami.com/anime/2361/info">
                <b class="label">Note 7</b> <b>Captain_Harlock</b> L'univers est très intéressant à explorer, on a de
                quoi réfléchir !
                L'obsession des perso... </a>
            </li>
            <li>
              <a class="" href="https://www.adkami.com/anime/2361/info">
                <b class="label">Note 7</b> <b>Aedhys</b> S1 CRITIQUE (NE PREND PAS EN COMPTE LA S2)
                Comme il a été très bien dit précédemment, Youkoso Jitsu... </a>
            </li>
          </ul>
        </div>
        <div class="bloc bloc-left-club col-12">
          <a href="https://www.adkami.com/anime/2361/info">
            <h3>Derniers Posts</h3>
          </a>
          <ul class="list2 v2 col-12 col-l-12">
            <li>
              <a href="https://www.adkami.com/club/b/5187">
                <span class="right">Actualités</span>
                Nouveau visuel pour la saison 3 de Classroom of the Elite </a>
            </li>
            <li>
              <a href="https://www.adkami.com/club/b/5107">
                <span class="right">Actualités</span>
                La saison 3 de Classroom of the Elite reportée </a>
            </li>
            <li>
              <a href="https://www.adkami.com/club/b/4184">
                <span class="right">Actualités</span>
                Nouveau visuel et PV pour Classroom of the Elite II </a>
            </li>

            <li>
              <a href="https://www.adkami.com/club/b/4076">
                <span class="right">Actualités</span>
                La seconde saison de Classroom of the Elite débutera le 4 juillet </a>
            </li>
            <li>
              <a href="https://www.adkami.com/club/b/3882">
                <span class="right">Actualités</span>
                La saison 2 et 3 de Classroom of the Elite daté </a>
            </li>
            <li>
              <a href="https://www.adkami.com/club/b/3846">
                <span class="right">Actualités</span>
                La saison 2 de Classroom of the Elite annoncée </a>
            </li>
          </ul>
        </div>
        <div class="col-12">
          <div class="col-12 fiche-info bloc">
            <h3 class="compact">Série Aléatoire</h3>
            <a href="https://www.adkami.com/anime/105">
              <h4>Karin</h4>
              <img alt="Karin" src="https://image.adkami.com/mini/105.jpg">
            </a>
            <h4>かりん</h4>
            <div class="row">
              <p class="row description justify">
                Maaka Karin, jeune étudiante aimerait avoir une vie normale, mais cela est difficile pour elle. Celle-ci
                cache un secret qu'elle ne veut dévoiler à personne.<br>
                Par la suite, dans son établissement sco...
              </p>
            </div>
          </div>
        </div>
        <div class="lastfiche col-6 col-l-6 bloc">
          <h3>Derniers Animes</h3>
          <a class="" href="https://www.adkami.com/anime/4993">
            <h5>Toaru Ossan no VRMMO Katsudouki</h5>
            <p style="background-image: url(https://image.adkami.com/mini/4993.jpg?1696254921);"></p>
          </a>
          <a class="" href="https://www.adkami.com/anime/4992">
            <h5>Migi to Dali</h5>
            <p style="background-image: url(https://image.adkami.com/mini/4992.jpg?1696254680);"></p>
          </a>
          <a class="" href="https://www.adkami.com/anime/4991">
            <h5>Watashi no Oshi wa Akuyaku Reijou.</h5>
            <p style="background-image: url(https://image.adkami.com/mini/4991.jpg?1696254358);"></p>
          </a>
        </div>
        <div class="lastfiche col-6 col-l-6 bloc">
          <h3>Dernières Séries</h3>
          <a class="" href="https://www.adkami.com/drama/4994">
            <h5>Nirvana in Fire (Drama)</h5>
            <p style="background-image: url(https://image.adkami.com/mini/4994.jpg?1696262925);"></p>
          </a>
          <a class="" href="https://www.adkami.com/drama/4978">
            <h5>Once Upon a Crime (Film Live)</h5>
            <p style="background-image: url(https://image.adkami.com/mini/4978.jpg?1695313504);"></p>
          </a>
          <a class="" href="https://www.adkami.com/serie/4971">
            <h5>One piece (Live Action)</h5>
            <p style="background-image: url(https://image.adkami.com/mini/4971.jpg?1693425671);"></p>
          </a>
        </div>
        <div class="col-12 col-xl-12 bloc">
          <a href="https://www.adkami.com/news">
            <h3 class="compact">Actualités</h3>
          </a>
          <div
            class="news-block scroll-perso petit os-host os-theme-dark os-host-overflow os-host-overflow-x os-host-overflow-y os-host-resize-disabled os-host-transition">
            <div class="os-resize-observer-host observed">
              <div class="os-resize-observer" style="left: 0px; right: auto;"></div>
            </div>
            <div class="os-size-auto-observer observed" style="height: calc(100% + 1px); float: left;">
              <div class="os-resize-observer"></div>
            </div>
            <div class="os-content-glue" style="margin: 0px; height: 1180px; width: 230px;"></div>
            <div class="os-padding">
              <div class="os-viewport os-viewport-native-scrollbars-invisible" style="overflow: scroll;">
                <div class="os-content" style="padding: 0px; height: auto; width: 100%;">
                  <div class="row">
                    <a title="Actualités" class="col-12 col-l-6 up" href="https://www.adkami.com/club/b/5341">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://i0.wp.com/anitrendz.net/news/wp-content/uploads/2023/09/ourrainyprotocol_mainpvscreenshot.png&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>L'anime Bokura no Ameiro Protocol, en Trailer</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">TheAnimeOtaku</span>
                            <span class="counter">4 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a title="Actualités" class="col-12 col-l-6 up" href="https://www.adkami.com/club/b/5340">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://i0.wp.com/anitrendz.net/news/wp-content/uploads/2023/08/kamierabigodapp_actionmoviegorovshonokascreenshot.png&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>L'anime KamiErabi God.app, en Trailer</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">TheAnimeOtaku</span>
                            <span class="counter">5 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a title="Actualités" class="col-12 col-l-6 up" href="https://www.adkami.com/club/b/5339">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://i0.wp.com/anitrendz.net/news/wp-content/uploads/2023/09/therisingoftheshieldheroseason3_pv2screenshot.png&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>L'anime The Rising of the Shield Hero (S3), en Trailer 2</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">TheAnimeOtaku</span>
                            <span class="counter">5 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a title="Actualités" class="col-12 col-l-6 " href="https://www.adkami.com/club/b/5338">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://i3.ytimg.com/vi/oyHqh8ue4zw/maxresdefault.jpg&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>Un nouveau trailer pour l'anime Les Carnets de l'Apothicaire</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">Tatsuya-kun</span>
                            <span class="counter">3 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a title="Actualités" class="col-12 col-l-6 " href="https://www.adkami.com/club/b/5337">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://i0.wp.com/anitrendz.net/news/wp-content/uploads/2023/09/laidbackcampseason3_teaserpvscreenshot.png&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>L'anime Yuru Camp (S3), en PV</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">TheAnimeOtaku</span>
                            <span class="counter">3 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a title="Actualités" class="col-12 col-l-6 " href="https://www.adkami.com/club/b/5336">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://animotaku.fr/wp-content/uploads/2023/09/Film-My-Next-Life-As-A-Villainess-premier-trailer.jpeg&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>Le film My Next Life As A Villainess, en Trailer</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">TheAnimeOtaku</span>
                            <span class="counter">4 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a title="Actualités" class="col-12 col-l-6 " href="https://www.adkami.com/club/b/5335">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://i0.wp.com/anitrendz.net/news/wp-content/uploads/2023/06/spiceandwolf_pv1screenshot.png&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>Le nouvel anime Spice and Wolf, en Visuels 2</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">TheAnimeOtaku</span>
                            <span class="counter">6 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a title="Actualités" class="col-12 col-l-6 " href="https://www.adkami.com/club/b/5334">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://i3.ytimg.com/vi/xS6F81CV6Sw/maxresdefault.jpg&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>L'anime Bleach sera de retour l'année prochaine !</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">Tatsuya-kun</span>
                            <span class="counter">9 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a title="Actualités" class="col-12 col-l-6 " href="https://www.adkami.com/club/b/5333">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.nautiljon.com/images/breves/00/23/medium/une_seconde_saison_pour_maou_gakuin_no_futekigousha_14032.webp?1615031597&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>La partie 2 saison 2 de The Misfit of Demon King Academy daté</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">Fenrir</span>
                            <span class="counter">5 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a title="Actualités" class="col-12 col-l-6 " href="https://www.adkami.com/club/b/5332">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://i0.wp.com/anitrendz.net/news/wp-content/uploads/2023/09/konosubaseason3_tokuhoupvscreenshot.png&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>L'anime KonoSuba (S3), en Teaser</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">TheAnimeOtaku</span>
                            <span class="counter">11 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a title="Actualités" class="col-12 col-l-6 " href="https://www.adkami.com/club/b/5331">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://i0.wp.com/anitrendz.net/news/wp-content/uploads/2023/09/azur-lane-slow-ahead-season-two-visual.jpg&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>Une 2ème saison annoncée pour l'anime Azur Lane : Bisoku Zenshin!</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">TheAnimeOtaku</span>
                            <span class="counter">6 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a title="Actualités" class="col-12 col-l-6 " href="https://www.adkami.com/club/b/5330">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://animotaku.fr/wp-content/uploads/2023/09/anime-Boushoku-no-berserk-trailer.jpeg&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>L’anime Boushoku no Berserk, en Trailers</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">TheAnimeOtaku</span>
                            <span class="counter">7 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a title="Actualités" class="col-12 col-l-6 " href="https://www.adkami.com/club/b/5329">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://animotaku.fr/wp-content/uploads/2023/09/anime-good-night-world-trailer.jpeg&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>L’anime GOOD NIGHT WORLD, en Trailer 2</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">TheAnimeOtaku</span>
                            <span class="counter">4 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a title="Actualités" class="col-12 col-l-6 " href="https://www.adkami.com/club/b/5328">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://i0.wp.com/anitrendz.net/news/wp-content/uploads/2023/08/komadaawhiskeyfamily_tokuhouscreenshot.png&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>Le film Komada Joryusho e Yokoso, en Trailer</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">TheAnimeOtaku</span>
                            <span class="counter">3 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a title="Actualités" class="col-12 col-l-6 " href="https://www.adkami.com/club/b/5327">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://animotaku.fr/wp-content/uploads/2023/09/anime-migi-and-dali-nouveau-trailer.jpeg&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>L’anime Migi to Dali, en Trailer</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">TheAnimeOtaku</span>
                            <span class="counter">1 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a title="Actualités" class="col-12 col-l-6 " href="https://www.adkami.com/club/b/5326">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://cdn.whats-on-netflix.com/wp-content/uploads/2023/04/03121136/blue-eye-samurai-netflix-series-everything-we-know-so-far-min-jpg.webp&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>Une bande annonce pour l'anime Blue Eye Samurai</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">Matth54</span>
                            <span class="counter">2 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a title="Actualités" class="col-12 col-l-6 " href="https://www.adkami.com/club/b/5324">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://animotaku.fr/wp-content/uploads/2021/06/anime-captain-laserhawk-a-blood-dragon-remix-annonce.jpeg&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>Un trailer pour l'anime Captain Laserhawk: A Blood Dragon Remix</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">Matth54</span>
                            <span class="counter">8 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a title="Actualités" class="col-12 col-l-6 " href="https://www.adkami.com/club/b/5323">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.ecranlarge.com/media/cache/1600x1200/uploads/image/001/381/les-maitres-de-lunivers-revelation-photo-1381927.jpg&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>Une bande annonce pour l'anime Les Maitres de l'univers: revolution</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">Matth54</span>
                            <span class="counter">5 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a title="Actualités" class="col-12 col-l-6 " href="https://www.adkami.com/club/b/5322">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://i.ytimg.com/vi/cb9AUAZBcOk/maxresdefault.jpg&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>Une bande annonce pour l'anime TOMB RAIDER: THE LEGEND OF LARA CROFT</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">Matth54</span>
                            <span class="counter">6 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a title="Actualités" class="col-12 col-l-6 " href="https://www.adkami.com/club/b/5321">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.pcgamesn.com/wp-content/sites/pcgamesn/2023/09/Devil-May-Cry-anime.jpg&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>Une bande annonce pour l'anime Devil May Cry</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">Matth54</span>
                            <span class="counter">9 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a title="Actualités" class="col-12 col-l-6 " href="https://www.adkami.com/club/b/5320">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.ten-sura.com/4GfGdAp7/wp-content/uploads/2023/09/TS_coleus_PV_10.jpg&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>Un trailer pour les nouveaux OAV Moi, quand je me réincarne en Slime</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">Tatsuya-kun</span>
                            <span class="counter">12 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a title="Actualités" class="col-12 col-l-6 " href="https://www.adkami.com/club/b/5319">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.zupimages.net/up/23/39/dh6i.jpg&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>L'anime Frieren fera environ 24 épisodes !</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">Tatsuya-kun</span>
                            <span class="counter">7 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a title="Actualités" class="col-12 col-l-6 " href="https://www.adkami.com/club/b/5318">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.nautiljon.com/images/breves/00/01/medium/un_premier_teaser_pour_shinmai_ossan_boukensha_saikyou_party_ni_shinu_hodo_kitaerarete_muteki_ni_naru_17910.webp?1695656399&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>Un premier teaser pour Shinmai Ossan Boukensha</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">Fenrir</span>
                            <span class="counter">6 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a title="Actualités" class="col-12 col-l-6 " href="https://www.adkami.com/club/b/5317">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.manga-news.com/public/images/news/Kingdom-saison-4-anime-news.jpg&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>Visuel pour la saison 5 de Kingdom</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">Fenrir</span>
                            <span class="counter">9 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a title="Actualités" class="col-12 col-l-6 " href="https://www.adkami.com/club/b/5316">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://culturedvultures.com/wp-content/uploads/2023/08/image_2023-08-23_104017192.jpg&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>Nouveau trailer pour la saison 2 de Spy x Family</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">Fenrir</span>
                            <span class="counter">5 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a title="Actualités" class="col-12 col-l-6 " href="https://www.adkami.com/club/b/5315">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://animotaku.fr/wp-content/uploads/2023/03/anime-The-Seven-Deadly-Sins-Four-Knights-of-the-Apocalypse-date-sortie.jpeg&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>Trailer pour l'anime Mokushiroku no Yon-kishi</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">Fenrir</span>
                            <span class="counter">4 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a title="Actualités" class="col-12 col-l-6 " href="https://www.adkami.com/club/b/5311">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://communaute.icotaku.com/uploads/news/news_10238/news_PQtBpPPfJzxSJFl.jpg&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>Une saison 3 annoncée pour The Duke of Death and His Maid</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">Fenrir</span>
                            <span class="counter">8 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a title="Actualités" class="col-12 col-l-6 " href="https://www.adkami.com/club/b/5310">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.mangaspace.fr/wp-content/uploads/2021/11/Banished-from-the-Heros-Party-Season-2-release-date.jpg&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>Une date pour la saison 2 de Banished From The Hero's Party</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">Fenrir</span>
                            <span class="counter">7 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a title="Actualités" class="col-12 col-l-6 " href="https://www.adkami.com/club/b/5309">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://animotaku.fr/wp-content/uploads/2020/11/anime-haikyu-to-the-top-climax-trailer.jpeg&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>Une affiche et un premier trailer pour le film Haikyu!!</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">Fenrir</span>
                            <span class="counter">3 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a title="Actualités" class="col-12 col-l-6 " href="https://www.adkami.com/club/b/5308">
                      <span class="image"
                        style="background-image:url('https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.zupimages.net/up/23/38/k24q.png&amp;container=focus&amp;resize_h=70&amp;refresh=2592000');"></span>
                      <span class="block-left">
                        <p>Un premier visuel pour l'anime Roshidere</p>
                        <div>
                          <span class="bottom-line">
                            <span class="name">Tatsuya-kun</span>
                            <span class="counter">16 💬</span>
                          </span>
                        </div>
                      </span>
                    </a>
                    <a href="https://www.adkami.com/news" class="col-12 col-l-6 plus-news">plus d'actualité</a>
                  </div>
                </div>
              </div>
            </div>
            <div class="os-scrollbar os-scrollbar-horizontal">
              <div class="os-scrollbar-track os-scrollbar-track-off">
                <div class="os-scrollbar-handle" style="width: 85.5556%; transform: translate(0px, 0px);"></div>
              </div>
            </div>
            <div class="os-scrollbar os-scrollbar-vertical">
              <div class="os-scrollbar-track os-scrollbar-track-off">
                <div class="os-scrollbar-handle" style="height: 16.9492%; transform: translate(0px, 0px);"></div>
              </div>
            </div>
            <div class="os-scrollbar-corner"></div>
          </div>
        </div>
        <div class="blocm col-12">
          <div class="link share share-gplus" data-url="https://www.adkami.com/anime/2361/5/1/2/1/"><i
              class="icon-gplus"></i></div>
          <div class="link share share-twitter" data-url=""><i class="icon-twitter"></i></div>
          <a target="_back" href="https://www.adkami.com/rss.xml" class="share share-rss"><i class="icon-rss"></i></a>
          <a target="_back" href="https://discord.gg/9zpgFYc" class="share share-discord"><i
              class="icon-discord">Discord</i></a>
          <a target="_back" href="https://www.facebook.com/ADKamiOfficiel/" class="share share-facebook"><i
              class="icon-facebook"></i></a>
          <a target="_back"
            href="https://chrome.google.com/webstore/detail/notificateur-dadkami/fbiojdpnocfbocbpdgofeibdlenogkja"
            class="share transparent"><i class="icon-chrome">Extention chrome</i></a>
        </div>
        <div class="col-12 col-xl-6 bloc">
          <h3 class="compact">Commentaires</h3>
          <ul class="list2">
            <li title="[IDOLiSH7] kook97: On veux la suite !!!!
s'il vous plait je veux connaitre l'histoire de Nagi">
              <a class="" href="https://www.adkami.com/anime/2533">
                On veux la suite !!!!
                s'il vous plait je veux connaitre l'histoire de Nagi </a>
            </li>
            <li title="[Migi to Dali] Sinalko: Ouah c'est chelou, mais j'ai bien rigolé. Je vais lui laissé ça chance.

P.S. Mattez jusqu'à la fin, il y a une petite surprise après le générique.">
              <a class="" href="https://www.adkami.com/anime/4992">
                Ouah c'est chelou, mais j'ai bien rigolé. Je vais lui laissé ça chance.
                P.S. Mattez jus </a>
            </li>
            <li
              title="[MF Ghost] Xburner-sama: @Matth54 Oh lo lo tu régale de zinzin. Tu me donne envie de le faire pour les prochaine course même si je suis pas sur de comprendre

Sinon dans Initial D les course se passait toujours sur colline pour les descendre en 1 Vs 1 et sans chrono. Avec ça, l'AE86 se faisait pas trop bouffer en ligne droite et maximisait sa vitesse dans les virages. Et effectivement comme elle était plus légère il pouvait plus facilement la faire drifter">
              <a class="" href="https://www.adkami.com/anime/4984">
                @Matth54 Oh lo lo tu régale de zinzin. Tu me donne envie de le faire pour les prochaine course même </a>
            </li>
            <li title="[Ohoku] Warrior4: Une petite histoire sympa avec un long premier épisode.">
              <a class="" href="https://www.adkami.com/anime/4937">
                Une petite histoire sympa avec un long premier épisode. </a>
            </li>
            <li
              title="[MF Ghost] Matth54: @JDONxX j'ai pas encore vue initial D. Par jouer sur la descente, tu veux dire qu'il fait du freinage tardif et du frein moteur parce que sa voiture est plus légère que les autres ?



@Xburner-sama sans connaître la piste ça risque d'être compliqué d'évaluer sa perf, y'a tellement de facteurs entre le pilote, la voiture, les conditions, la forme et taille du circuit...

J'ai été voir sur le wiki les modèles précis pour pouvoir les comparer sur le site FastestLaps sur le Nürburgring Nordschleife (circuit le plus long et complexe du monde utilisé comme laboratoire mondial en test de perf). La GT86 fait 8min45 là où les autres sont entre 7min47 et 7min21 voir 7min08 pour la GT-R.

Déjà 20s c'est colossal en écart, alors 1min à 1min40... En mécanique pure y'a le site ZePerfs et la GT86 ce fait exploser partout.
Et encore sur le wiki j'ai vue qu'elles étaient toutes modifiées pour la course sauf la GT86 sur une très grosse partie du manga, ça accentue l'écart de perf.

Après la GT86 est la descendante de l'AE86 popularisé par initial D. Elle a donc été conçue exprès pour les déniveler japonais et faire comme dans l'anime. Son avantage c'est la technique du terrain alors que les autres ont la perf pure. Elle est plus maniable, fiable et constante mais très nettement moins puissante.">
              <a class="" href="https://www.adkami.com/anime/4984">
                @JDONxX j'ai pas encore vue initial D. Par jouer sur la descente, tu veux dire qu'il fait </a>
            </li>
            <li
              title="[Aishang Ta de Liyou] Chany-Chou: j'ai vraiment adorer c'est totalement mon style d'anime et franchement je me suis demandée pourquoi j'ai pas laissé sa chance a cet anime plus tôt 10/10
je trouve le mc un peu simplet niveau design alors que shiya est magnifique ils ont mis tout les efforts sur elle et pas sur lui">
              <a class="" href="https://www.adkami.com/anime/4879">
                j'ai vraiment adorer c'est totalement mon style d'anime et franchement je me suis dem </a>
            </li>
            <li
              title="[Captain Tsubasa (2018)] migwel: C'est trop rusch mais je suis quand même mdr quand je me souvient de la vf à l'ancienne qui inventait des noms de joueurs et d'équipe en fonction des lettres sur le maillot! Nostalgique un peu ! Après, c vrai que si on le regarde &quot;à petite dose&quot; ca va ...">
              <a class="" href="https://www.adkami.com/anime/2822">
                C'est trop rusch mais je suis quand même mdr quand je me souvient de la vf à l'ancienne qu </a>
            </li>
          </ul>
        </div>
        <div class="col-12 col-xl-6 bloc">
          <h3 class="compact">Posts</h3>
          <ul class="list2">
            <li>
              <a title="L'anime Bokura no Ameiro Protocol, en Trailer" class="up"
                href="https://www.adkami.com/club/b/5341">
                <span class="right">Actualités</span>
                L'anime Bokura no Ameiro Protocol, en Trailer </a>
            </li>
            <li>
              <a title="Bar d'ADkami cloturer pour cause de 10001 message" href="https://www.adkami.com/club/b/330">
                <span class="right">Le coin du lémurien</span>
                Bar d'ADkami cloturer pour cause de 10001 message </a>
            </li>
            <li>
              <a title="L'anime The Rising of the Shield Hero (S3), en Trailer 2" class="up"
                href="https://www.adkami.com/club/b/5339">
                <span class="right">Actualités</span>
                L'anime The Rising of the Shield Hero (S3), en Trailer 2 </a>
            </li>
            <li>
              <a title="L'anime KamiErabi God.app, en Trailer" class="up" href="https://www.adkami.com/club/b/5340">
                <span class="right">Actualités</span>
                L'anime KamiErabi God.app, en Trailer </a>
            </li>
            <li>
              <a title="Poubelle" href="https://www.adkami.com/club/b/2788">
                <span class="right">Bla-bla</span>
                Poubelle </a>
            </li>
            <li>
              <a title="Le nouvel anime Spice and Wolf, en Visuels 2" href="https://www.adkami.com/club/b/5335">
                <span class="right">Actualités</span>
                Le nouvel anime Spice and Wolf, en Visuels 2 </a>
            </li>
            <li>
              <a title="Vous avez reçu un message." href="https://www.adkami.com/club/b/2612">
                <span class="right">Ununity !</span>
                Vous avez reçu un message. </a>
            </li>
          </ul>
        </div>
        <div class="col-12 bloc">
          <h3>Dernières Critiques</h3>
          <ul class="list2 v2">
            <li>
              <a href="https://www.adkami.com/anime/3692/info">
                <span class="moitier">Runway de Waratte </span> <b class="label">Note 7</b> <b>Fantome97</b> Umu, Quand
                j'ai vu que l'anime parlait de mode, mais qu'il n'avait pas de tag &amp;q... </a>
            </li>
            <li>
              <a href="https://www.adkami.com/anime/1794/info">
                <span class="moitier">Harmony </span> <b class="label">Note 9</b> <b>MudaMudaMuda</b> j'ai été
                mesmériser par la fille au cheveux bleu Miach Mihie à l'époque où je l'avais... </a>
            </li>
            <li>
              <a href="https://www.adkami.com/anime/73/info">
                <span class="moitier">Inuyasha </span> <b class="label">Note 10</b> <b>ChiseHatori</b> Je trouve que cet
                animé est très réussi mais peut-être, parfois, un peu répétitif. On s'attache... </a>
            </li>
            <li>
              <a href="https://www.adkami.com/anime/76/info">
                <span class="moitier">Clannad </span> <b class="label">Note 10</b> <b>ChiseHatori</b> Excellent anime,
                l’histoire nous permet d’évoluer et de prendre conscience de certaines choses mais ... </a>
            </li>
            <li>
              <a href="https://www.adkami.com/anime/188/info">
                <span class="moitier">Kamisama Hajimemashita </span> <b class="label">Note 10</b> <b>ChiseHatori</b>
                Kamisama hajimemashita c'est juste un des meilleur anime de type romance / surnaturel qui exist... </a>
            </li>
            <li>
              <a href="https://www.adkami.com/anime/1273/info">
                <span class="moitier">Akatsuki no Yona </span> <b class="label">Note 10</b> <b>ChiseHatori</b>
                Visuellement très agréable, l'univers m'a transporté ! L'histoire est prenante, l&amp;apo... </a>
            </li>
            <li>
              <a href="https://www.adkami.com/anime/1876/info">
                <span class="moitier">Mahou Tsukai no Yome </span> <b class="label">Note 10</b> <b>ChiseHatori</b> The
                Ancent Magus Bride est parmi les plus beaux animés que je que j'ai pu voire au côté de Akat... </a>
            </li>
          </ul>
        </div>
        <div class="col-12 bloc">
          <a href="https://www.adkami.com/topanime">
            <h3>Top Hebdomadaire</h3>
          </a>
          <a class="t-hidden" style="float: right;padding: 4px 10px;background-color: rgba(0,0,0,0.2);margin: 0 5px;"
            href="https://www.adkami.com/topanime">Top anime</a>
          <ul class="tabs">
            <li class="tab active" data-id="top-24">24h</li>
            <li class="tab" data-id="top-anime">Anime</li>
            <li class="tab" data-id="top-drama">Séries</li>
          </ul>
          <div class="tabs-content">
            <div id="top-24" class="tab-content active">
              <ul class="list2 top">
                <li>
                  <a class="" href="https://www.adkami.com/anime/4990">
                    Kamonohashi Ron no Kindan Suiri </a>
                </li>
                <li>
                  <a class="" href="https://www.adkami.com/anime/4992">
                    Migi to Dali </a>
                </li>
                <li>
                  <a class="" href="https://www.adkami.com/anime/4988">
                    Boushoku no Berserk </a>
                </li>
                <li>
                  <a class="" href="https://www.adkami.com/anime/4986">
                    Dekoboko Majo no Oyako Jijou </a>
                </li>
                <li>
                  <a class="" href="https://www.adkami.com/anime/4987">
                    <span class="right pos">+1</span>
                    Overtake! </a>
                </li>
                <li>
                  <a class="" href="https://www.adkami.com/anime/4985">
                    <span class="right pos">+2</span>
                    Shangri-La Frontier: Kusoge Hunter, Kamige ni Idoman to su </a>
                </li>
                <li>
                  <a class="" href="https://www.adkami.com/anime/4983">
                    <span class="right neg">-6</span>
                    Ragna Crimson </a>
                </li>
                <li>
                  <a class="" href="https://www.adkami.com/anime/1809">
                    B-PROJECT : Kodou Ambitious </a>
                </li>
                <li>
                  <a class="" href="https://www.adkami.com/anime/4989">
                    Shy </a>
                </li>
                <li>
                  <a class="" href="https://www.adkami.com/anime/3">
                    One Piece </a>
                </li>
                <li>
                  <a class="" href="https://www.adkami.com/anime/4981">
                    <span class="right neg">-4</span>
                    Sousou no Frieren </a>
                </li>
                <li>
                  <a class="" href="https://www.adkami.com/anime/7">
                    <span class="right pos">+10</span>
                    Detective Conan </a>
                </li>
                <li>
                  <a class="" href="https://www.adkami.com/anime/4982">
                    <span class="right neg">-11</span>
                    Megumi no Daigo: Kyuukoku no Orange </a>
                </li>
                <li>
                  <a class="" href="https://www.adkami.com/anime/4980">
                    <span class="right neg">-2</span>
                    Boukensha ni Naritai to Miyako ni Deteitta Musume ga S-Rank ni Natteta </a>
                </li>
                <li>
                  <a class="" href="https://www.adkami.com/anime/4984">
                    <span class="right neg">-10</span>
                    MF Ghost </a>
                </li>
              </ul>
            </div>
            <div id="top-anime" class="tab-content">
              <ul class="list2 top">
                <li>
                  <a href="https://www.adkami.com/anime/4981">
                    Sousou no Frieren </a>
                </li>
                <li>
                  <a href="https://www.adkami.com/anime/4980">
                    Boukensha ni Naritai to Miyako ni Deteitta Musume ga S-Rank ni Natteta </a>
                </li>
                <li>
                  <a href="https://www.adkami.com/anime/4983">
                    Ragna Crimson </a>
                </li>
                <li>
                  <a href="https://www.adkami.com/anime/4979">
                    Ojou to Banken-kun </a>
                </li>
                <li>
                  <a href="https://www.adkami.com/anime/4988">
                    Boushoku no Berserk </a>
                </li>
                <li>
                  <a href="https://www.adkami.com/anime/3">
                    <span class="right neg">-5</span>
                    One Piece </a>
                </li>
                <li>
                  <a href="https://www.adkami.com/anime/4986">
                    Dekoboko Majo no Oyako Jijou </a>
                </li>
                <li>
                  <a href="https://www.adkami.com/anime/4533">
                    Sasaki to Miyano </a>
                </li>
                <li>
                  <a href="https://www.adkami.com/anime/4982">
                    Megumi no Daigo: Kyuukoku no Orange </a>
                </li>
                <li>
                  <a href="https://www.adkami.com/anime/4987">
                    Overtake! </a>
                </li>
                <li>
                  <a href="https://www.adkami.com/anime/4985">
                    Shangri-La Frontier: Kusoge Hunter, Kamige ni Idoman to su </a>
                </li>
                <li>
                  <a href="https://www.adkami.com/anime/3912">
                    <span class="right neg">-9</span>
                    Yi Nian Yong Heng </a>
                </li>
                <li>
                  <a href="https://www.adkami.com/anime/4984">
                    MF Ghost </a>
                </li>
                <li>
                  <a href="https://www.adkami.com/anime/3922">
                    <span class="right neg">-9</span>
                    Jujutsu Kaisen </a>
                </li>
                <li>
                  <a href="https://www.adkami.com/anime/7">
                    <span class="right neg">-11</span>
                    Detective Conan </a>
                </li>
              </ul>
            </div>
            <div id="top-drama" class="tab-content">
              <ul class="list2 top">
                <li>
                  <a href="https://www.adkami.com/serie/767">
                    Power Rangers </a>
                </li>
                <li>
                  <a href="https://www.adkami.com/serie/457">
                    Supernatural </a>
                </li>
                <li>
                  <a href="https://www.adkami.com/serie/406">
                    <span class="right pos">+2</span>
                    The Walking Dead </a>
                </li>
                <li>
                  <a href="https://www.adkami.com/serie/405">
                    <span class="right pos">+3</span>
                    The Simpsons </a>
                </li>
                <li>
                  <a href="https://www.adkami.com/serie/420">
                    <span class="right pos">+3</span>
                    NCIS : Enquêtes spéciales </a>
                </li>
                <li>
                  <a href="https://www.adkami.com/serie/482">
                    <span class="right neg">-2</span>
                    Game of Thrones </a>
                </li>
                <li>
                  <a href="https://www.adkami.com/serie/403">
                    <span class="right pos">+3</span>
                    South Park </a>
                </li>
                <li>
                  <a href="https://www.adkami.com/serie/428">
                    <span class="right neg">-2</span>
                    Kaamelott </a>
                </li>
                <li>
                  <a href="https://www.adkami.com/serie/509">
                    <span class="right neg">-6</span>
                    The Big Bang Theory </a>
                </li>
                <li>
                  <a href="https://www.adkami.com/serie/527">
                    <span class="right pos">+2</span>
                    Grey’s Anatomy </a>
                </li>
                <li>
                  <a href="https://www.adkami.com/serie/442">
                    <span class="right neg">-2</span>
                    American Dad! </a>
                </li>
                <li>
                  <a href="https://www.adkami.com/serie/602">
                    <span class="right pos">+3</span>
                    NCIS : Los Angeles </a>
                </li>
                <li>
                  <a href="https://www.adkami.com/serie/1780">
                    Soy Luna </a>
                </li>
                <li>
                  <a href="https://www.adkami.com/serie/603">
                    <span class="right pos">+2</span>
                    Vikings </a>
                </li>
                <li>
                  <a href="https://www.adkami.com/serie/464">
                    <span class="right neg">-1</span>
                    Vampire Diaries </a>
                </li>
              </ul>
            </div>
          </div>
        </div>
        <div class="col-12 tchat bloc">
          <div>
            <h3 data-id="adkami-com" class="link tchat-load">Ouvrir le Tchat</h3>
          </div>
          <div class="row">
            <span><span data-id="adkami-rp" class="label link tchat-load">Tchat RP</span></span>
            <span><span data-id="coinsamis" class="label link tchat-load">Conseil d'anime</span></span>
            <a class="label link" href="https://www.adkami.com/tchat">tous les tchat</a>


          </div>
        </div>
        <div class="col-12 bloc">
          <a href="https://www.adkami.com/topajouter">
            <h3>Top Ajouteurs</h3>
          </a>
          <ul class="list2 nl col-12 col-xl-6">
            <li><b class="right">173095</b>Anime</li>
            <li><b class="right">133039</b>MxMxM</li>
            <li><b class="right">103387</b>Kurumi</li>
            <li><b class="right">84138</b>nicksam274</li>
            <li><b class="right">63700</b>ShiryuTetsu</li>
          </ul>
          <ul class="list2 nl col-12 col-xl-6">
            <li><b class="right">57433</b>Fenrir</li>
            <li><b class="right">30574</b>hickoman</li>
            <li><b class="right">25690</b>MrNeko</li>
            <li><b class="right">19609</b>darking42</li>
            <li><b class="right">16690</b>Xemn</li>
          </ul>
        </div>
      </div>
    </section>
  </div>
  <footer>
    <div class="row">
      <div class="col-12 list">
        <div class="col-12 col-l-2">
          <h6>STATISTIQUES</h6>
          <p>Membres : <b>121298</b></p>
          <p>Anime : <b>4990</b></p>
          <p>Vidéos : <b>254990</b></p>
          <p>Execution : <b>0.0495s</b> (11)</p>
        </div>
        <div class="col-12 col-l-4">
          <h6>COMMUNAUTÉ</h6>
          <p>© les illustrations sont la propriété de leurs auteurs et éditeurs respectifs.</p>
          <p>Ce site d'anime en streaming ne consiste qu'en un référencement de liens vidéos hébergés par des sites
            publics et légalement reconnus: Dailymotion, Google Video, Rutube... Nous n'hébergeons aucune vidéo. Nous
            n'uploadons aucune vidéo.</p>
          <a rel="nofollow" target="_blank" href="https://discord.gg/z4ny57K6Vy">
            <p class="col-4 link">Discord</p>
          </a>
          <a rel="nofollow" target="_blank" href="https://discord.gg/9zpgFYc">
            <p class="col-4 link">Discord Divertisement</p>
          </a>
          <a rel="nofollow" target="_blank" href="https://discord.gg/aUjKbSv">
            <p class="col-4 link">Discord RP</p>
          </a>
        </div>
        <div
          class="col-12 col-l-2 scroll-perso os-host os-theme-dark os-host-overflow os-host-overflow-y os-host-resize-disabled os-host-scrollbar-horizontal-hidden os-host-transition"
          style="max-height:150px;overflow-y:scroll;">
          <div class="os-resize-observer-host observed">
            <div class="os-resize-observer" style="left: 0px; right: auto;"></div>
          </div>
          <div class="os-size-auto-observer observed" style="height: calc(100% + 1px); float: left;">
            <div class="os-resize-observer"></div>
          </div>
          <div class="os-content-glue" style="margin: 0px 0px 0px -30px; height: 175px; width: 171px;"></div>
          <div class="os-padding">
            <div class="os-viewport os-viewport-native-scrollbars-invisible" style="overflow-y: scroll;">
              <div class="os-content" style="padding: 0px 0px 0px 30px; height: auto; width: 100%;">
                <h6>PARTENAIRES</h6>

                <a rel="nofollow" target="_blank" href="http://saiko-no-chimu-fansub.over-blog.com/">
                  <p class="link">Saiko no Chimu Fansub</p>
                </a>
                <a rel="nofollow" target="_blank" href="http://www.meda-fansub.com/">
                  <p class="link">Meda-Fansub</p>
                </a>
                <a rel="nofollow" target="_blank" href="http://www.kfrfansub.com/">
                  <p class="link">KFR Fansub</p>
                </a>
                <a rel="nofollow" target="_blank" href="https://www.mugetsu-no-fansub.com">
                  <p class="link">Mugetsu No Fansub</p>
                </a>
                <a rel="nofollow" target="_blank" href="https://ida-fansub.blogspot.fr/">
                  <p class="link">Ida Fansub</p>
                </a>
              </div>
            </div>
          </div>
          <div class="os-scrollbar os-scrollbar-horizontal os-scrollbar-unusable">
            <div class="os-scrollbar-track os-scrollbar-track-off">
              <div class="os-scrollbar-handle" style="width: 100%; transform: translate(0px, 0px);"></div>
            </div>
          </div>
          <div class="os-scrollbar os-scrollbar-vertical">
            <div class="os-scrollbar-track os-scrollbar-track-off">
              <div class="os-scrollbar-handle" style="height: 85.7143%; transform: translate(0px, 0px);"></div>
            </div>
          </div>
          <div class="os-scrollbar-corner"></div>
        </div>
        <div class="col-12 col-l-2">
          <h6>LIEN UTILE</h6>
          <a href="https://www.adkami.com/video?t=0&amp;v=1">
            <p class="link">Anime VF</p>
          </a>
          <a href="https://www.adkami.com/video?t=0&amp;q=2">
            <p class="link">Anime Blu-Ray</p>
          </a>
          <a href="https://www.adkami.com/video?t=0&amp;q=1">
            <p class="link">Anime non censuré (NC)</p>
          </a>
          <a href="https://www.adkami.com/video?t=0&amp;p=2">
            <p class="link">Anime Chinois</p>
          </a>
        </div>
        <div class="col-12 col-l-2">
          <h6>INFORMATION</h6>
          <a href="/faq">
            <p class="link">FAQ - AIDE</p>
          </a>
          <a href="/cgu">
            <p class="link">CGU - Mentions légales</p>
          </a>
          <p id="enable-nfsw" class="col-12 link" style="display:none;">Désactivé NSFW</p>
          <p id="themeList" class="col-12">
            <span style="background-color: transparent;" data-id="">
            </span><span style="background-color: #8e8e8e;" data-id="tm-old" title="Old thème"></span>
            <span style="background-color: #d11e24;" data-id="tm-red" title="Rouge"></span>
            <span style="background-color: #778083;" data-id="tm-green"></span>
            <span style="background-color: #a85353;" data-id="tm-rio" title="Rio x Rose"></span>
            <span style="background-color: #000;" data-id="tm-dark" title="Dark"></span>
            <span style="background-color: #2196f3;" data-id="tm-blue" title="Bleu"></span>
            <span style="background-color: #fff;" data-id="tm-white" title="Le Shin Blanc"></span>
          </p>
        </div>
      </div>
      <div class="col-12 copy">Copyright © 2012-2023 ADKami.com v2.12</div>
    </div>
    <div id="go-top-header">❰</div>
  </footer>
  <style>
    .text-box {
      word-break: break-word;
    }
  </style>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.6.15/browser-polyfill.min.js"></script>
  <script src="https://www.adkami.com/js/jquery-3.2.1.min.js"></script>
  <script src="https://www.adkami.com/js/jquery.plugin.min.js?2"></script>
  <script src="https://www.adkami.com/js/main.min.js?1646043484"></script>
  <div></div>
  <script defer=""
    src="https://static.cloudflareinsights.com/beacon.min.js/v8b253dfea2ab4077af8c6f58422dfbfd1689876627854"
    integrity="sha512-bjgnUKX4azu3dLTVtie9u6TKqgx29RBwfj3QXYt5EKfWM/9hPSAI/4qcV5NACjwAo8UtTeWefx6Zq5PHcMm7Tg=="
    data-cf-beacon="{&quot;rayId&quot;:&quot;80fe61d7fa2ae1df&quot;,&quot;version&quot;:&quot;2023.8.0&quot;,&quot;r&quot;:1,&quot;token&quot;:&quot;30d7627f9cb442f0a525a8feac70ca16&quot;,&quot;si&quot;:100}"
    crossorigin="anonymous"></script>


</body>

</html>
