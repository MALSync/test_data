<html lang="en-US" prefix="og: https://ogp.me/ns#">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description"
    content="Read the best manga, manhua, and manhwa &amp; novel translations on Philia scans! Follow exclusive chapters of popular series, translated into English with top quality.">
  <title>Philia Scans - Read the best manga, manhua, and manhwa &amp; novel translations on Philia scans! Follow
    exclusive chapters of popular series, translated into English with top quality.</title>
  <meta property="og:locale" content="en_US">
  <meta property="og:type" content="website">
  <meta property="og:title"
    content="Philia Scans - Read the best manga, manhua, and manhwa &amp; novel translations on Philia scans! Follow exclusive chapters of popular series, translated into English with top quality.">
  <meta property="og:description"
    content="Read the best manga, manhua, and manhwa &amp; novel translations on Philia scans! Follow exclusive chapters of popular series, translated into English with top quality.">
  <meta property="og:url" content="https://philiascans.org">
  <meta property="og:site_name" content="Philia Scans">
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title"
    content="Philia Scans - Read the best manga, manhua, and manhwa &amp; novel translations on Philia scans! Follow exclusive chapters of popular series, translated into English with top quality.">
  <meta name="twitter:description"
    content="Read the best manga, manhua, and manhwa &amp; novel translations on Philia scans! Follow exclusive chapters of popular series, translated into English with top quality.">
  <style>
    img:is([sizes="auto" i], [sizes^="auto," i]) {
      contain-intrinsic-size: 3000px 1500px
    }
  </style>

  <!-- Search Engine Optimization by Rank Math - https://rankmath.com/ -->
  <meta name="description"
    content="Stella was never given any love from her family or any skills given by God. When her sister loses the heart of her fiancé and she runs away to a monastery,">
  <meta name="robots" content="follow, index, max-snippet:-1, max-video-preview:-1, max-image-preview:large">
  <link rel="canonical" href="https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/">
  <meta property="og:locale" content="en_US">
  <meta property="og:type" content="article">
  <meta property="og:title" content="Sanctuary Of The Unloved Noble Lady - Philia Scans">
  <meta property="og:description"
    content="Stella was never given any love from her family or any skills given by God. When her sister loses the heart of her fiancé and she runs away to a monastery,">
  <meta property="og:url" content="https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/">
  <meta property="og:site_name" content="Philia Scans">
  <meta property="article:publisher" content="https://www.facebook.com/profile.php?id=61562880424291#">
  <meta property="og:updated_time" content="2025-09-16T11:32:45+03:00">
  <meta property="og:image"
    content="https://philiascans.org/wp-content/uploads/2025/08/image_2025-08-25_161228991-719x1024.png">
  <meta property="og:image:secure_url"
    content="https://philiascans.org/wp-content/uploads/2025/08/image_2025-08-25_161228991-719x1024.png">
  <meta property="og:image:width" content="719">
  <meta property="og:image:height" content="1024">
  <meta property="og:image:alt" content="Sanctuary of the Unloved Noble Lady">
  <meta property="og:image:type" content="image/png">
  <meta property="article:published_time" content="2025-08-25T16:12:36+03:00">
  <meta property="article:modified_time" content="2025-09-16T11:32:45+03:00">
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content="Sanctuary Of The Unloved Noble Lady - Philia Scans">
  <meta name="twitter:description"
    content="Stella was never given any love from her family or any skills given by God. When her sister loses the heart of her fiancé and she runs away to a monastery,">
  <meta name="twitter:image"
    content="https://philiascans.org/wp-content/uploads/2025/08/image_2025-08-25_161228991-719x1024.png">
  <script type="application/ld+json"
    class="rank-math-schema">{"@context":"https://schema.org","@graph":[{"@type":"Organization","@id":"https://philiascans.org/#organization","name":"Philia Scans","url":"https://philiascans.org","sameAs":["https://www.facebook.com/profile.php?id=61562880424291#"],"logo":{"@type":"ImageObject","@id":"https://philiascans.org/#logo","url":"https://philiascans.org/wp-content/uploads/2025/01/logo.webp","contentUrl":"https://philiascans.org/wp-content/uploads/2025/01/logo.webp","caption":"Philia Scans","inLanguage":"en-US","width":"500","height":"500"},"description":"Read the best manga, manhua, and manhwa &amp; novel translations on Philia scans! Follow exclusive chapters of popular series, translated into English with top quality."},{"@type":"WebSite","@id":"https://philiascans.org/#website","url":"https://philiascans.org","name":"Philia Scans","alternateName":"PhiliaScans | phillia scans | philascans | philascan | philiascand | philla scans | philias scans | philias scans | philiascans sashimi | philiadcans | philiascnas | philisscans","publisher":{"@id":"https://philiascans.org/#organization"},"inLanguage":"en-US"},{"@type":"ImageObject","@id":"https://philiascans.org/wp-content/uploads/2025/08/image_2025-08-25_161228991.png","url":"https://philiascans.org/wp-content/uploads/2025/08/image_2025-08-25_161228991.png","width":"1500","height":"2137","inLanguage":"en-US"},{"@type":"WebPage","@id":"https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/#webpage","url":"https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/","name":"Sanctuary Of The Unloved Noble Lady - Philia Scans","datePublished":"2025-08-25T16:12:36+03:00","dateModified":"2025-09-16T11:32:45+03:00","isPartOf":{"@id":"https://philiascans.org/#website"},"primaryImageOfPage":{"@id":"https://philiascans.org/wp-content/uploads/2025/08/image_2025-08-25_161228991.png"},"inLanguage":"en-US"},{"@type":"Person","@id":"https://philiascans.org/author/philia-scan/","name":"Philia Scan","url":"https://philiascans.org/author/philia-scan/","image":{"@type":"ImageObject","@id":"https://secure.gravatar.com/avatar/82f6f745c9385176f6cadae4547b2f0a5ea9788cc87527f065d21fd7fcf4441a?s=96&amp;d=mm&amp;r=g","url":"https://secure.gravatar.com/avatar/82f6f745c9385176f6cadae4547b2f0a5ea9788cc87527f065d21fd7fcf4441a?s=96&amp;d=mm&amp;r=g","caption":"Philia Scan","inLanguage":"en-US"},"worksFor":{"@id":"https://philiascans.org/#organization"}},{"@type":"Article","headline":"Sanctuary Of The Unloved Noble Lady - Philia Scans","datePublished":"2025-08-25T16:12:36+03:00","dateModified":"2025-09-16T11:32:45+03:00","author":{"@id":"https://philiascans.org/author/philia-scan/","name":"Philia Scan"},"publisher":{"@id":"https://philiascans.org/#organization"},"description":"Stella was never given any love from her family or any skills given by God. When her sister loses the heart of her fianc\u00e9 and she runs away to a monastery,","name":"Sanctuary Of The Unloved Noble Lady - Philia Scans","@id":"https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/#richSnippet","isPartOf":{"@id":"https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/#webpage"},"image":{"@id":"https://philiascans.org/wp-content/uploads/2025/08/image_2025-08-25_161228991.png"},"inLanguage":"en-US","mainEntityOfPage":{"@id":"https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/#webpage"}}]}</script>
  <!-- /Rank Math WordPress SEO plugin -->

  <link rel="dns-prefetch" href="//cdnjs.cloudflare.com">
  <link rel="dns-prefetch" href="//code.jquery.com">
  <link rel="dns-prefetch" href="//cdn.jsdelivr.net">
  <link rel="dns-prefetch" href="//www.googletagmanager.com">
  <link rel="dns-prefetch" href="//fonts.googleapis.com">
  <link rel="dns-prefetch" href="//pagead2.googlesyndication.com">
  <link rel="alternate" type="application/rss+xml"
    title="Philia Scans » Sanctuary of the Unloved Noble Lady Comments Feed"
    href="https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/feed/">
  <script type="text/javascript">
    /* <![CDATA[ */
    window._wpemojiSettings = { "baseUrl": "https:\/\/s.w.org\/images\/core\/emoji\/16.0.1\/72x72\/", "ext": ".png", "svgUrl": "https:\/\/s.w.org\/images\/core\/emoji\/16.0.1\/svg\/", "svgExt": ".svg", "source": { "concatemoji": "https:\/\/philiascans.org\/wp-includes\/js\/wp-emoji-release.min.js?ver=6.8.3" } };
    /*! This file is auto-generated */
    !function (s, n) { var o, i, e; function c(e) { try { var t = { supportTests: e, timestamp: (new Date).valueOf() }; sessionStorage.setItem(o, JSON.stringify(t)) } catch (e) { } } function p(e, t, n) { e.clearRect(0, 0, e.canvas.width, e.canvas.height), e.fillText(t, 0, 0); var t = new Uint32Array(e.getImageData(0, 0, e.canvas.width, e.canvas.height).data), a = (e.clearRect(0, 0, e.canvas.width, e.canvas.height), e.fillText(n, 0, 0), new Uint32Array(e.getImageData(0, 0, e.canvas.width, e.canvas.height).data)); return t.every(function (e, t) { return e === a[t] }) } function u(e, t) { e.clearRect(0, 0, e.canvas.width, e.canvas.height), e.fillText(t, 0, 0); for (var n = e.getImageData(16, 16, 1, 1), a = 0; a < n.data.length; a++)if (0 !== n.data[a]) return !1; return !0 } function f(e, t, n, a) { switch (t) { case "flag": return n(e, "\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f", "\ud83c\udff3\ufe0f\u200b\u26a7\ufe0f") ? !1 : !n(e, "\ud83c\udde8\ud83c\uddf6", "\ud83c\udde8\u200b\ud83c\uddf6") && !n(e, "\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f", "\ud83c\udff4\u200b\udb40\udc67\u200b\udb40\udc62\u200b\udb40\udc65\u200b\udb40\udc6e\u200b\udb40\udc67\u200b\udb40\udc7f"); case "emoji": return !a(e, "\ud83e\udedf") }return !1 } function g(e, t, n, a) { var r = "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? new OffscreenCanvas(300, 150) : s.createElement("canvas"), o = r.getContext("2d", { willReadFrequently: !0 }), i = (o.textBaseline = "top", o.font = "600 32px Arial", {}); return e.forEach(function (e) { i[e] = t(o, e, n, a) }), i } function t(e) { var t = s.createElement("script"); t.src = e, t.defer = !0, s.head.appendChild(t) } "undefined" != typeof Promise && (o = "wpEmojiSettingsSupports", i = ["flag", "emoji"], n.supports = { everything: !0, everythingExceptFlag: !0 }, e = new Promise(function (e) { s.addEventListener("DOMContentLoaded", e, { once: !0 }) }), new Promise(function (t) { var n = function () { try { var e = JSON.parse(sessionStorage.getItem(o)); if ("object" == typeof e && "number" == typeof e.timestamp && (new Date).valueOf() < e.timestamp + 604800 && "object" == typeof e.supportTests) return e.supportTests } catch (e) { } return null }(); if (!n) { if ("undefined" != typeof Worker && "undefined" != typeof OffscreenCanvas && "undefined" != typeof URL && URL.createObjectURL && "undefined" != typeof Blob) try { var e = "postMessage(" + g.toString() + "(" + [JSON.stringify(i), f.toString(), p.toString(), u.toString()].join(",") + "));", a = new Blob([e], { type: "text/javascript" }), r = new Worker(URL.createObjectURL(a), { name: "wpTestEmojiSupports" }); return void (r.onmessage = function (e) { c(n = e.data), r.terminate(), t(n) }) } catch (e) { } c(n = g(i, f, p, u)) } t(n) }).then(function (e) { for (var t in e) n.supports[t] = e[t], n.supports.everything = n.supports.everything && n.supports[t], "flag" !== t && (n.supports.everythingExceptFlag = n.supports.everythingExceptFlag && n.supports[t]); n.supports.everythingExceptFlag = n.supports.everythingExceptFlag && !n.supports.flag, n.DOMReady = !1, n.readyCallback = function () { n.DOMReady = !0 } }).then(function () { return e }).then(function () { var e; n.supports.everything || (n.readyCallback(), (e = n.source || {}).concatemoji ? t(e.concatemoji) : e.wpemoji && e.twemoji && (t(e.twemoji), t(e.wpemoji))) })) }((window, document), window._wpemojiSettings);
    /* ]]> */
  </script>
  <link rel="stylesheet" id="mycred-rank-shortcodes-css"
    href="https://philiascans.org/wp-content/plugins/mycred/addons/rank-plus/assets/css/mycred-rank-shortcodes.css?ver=1.0.2"
    type="text/css" media="all">
  <style id="wp-emoji-styles-inline-css" type="text/css">
    img.wp-smiley,
    img.emoji {
      display: inline !important;
      border: none !important;
      box-shadow: none !important;
      height: 1em !important;
      width: 1em !important;
      margin: 0 0.07em !important;
      vertical-align: -0.1em !important;
      background: none !important;
      padding: 0 !important;
    }
  </style>
  <link rel="stylesheet" id="wp-block-library-css"
    href="https://philiascans.org/wp-includes/css/dist/block-library/style.min.css?ver=6.8.3" type="text/css"
    media="all">
  <style id="classic-theme-styles-inline-css" type="text/css">
    /*! This file is auto-generated */
    .wp-block-button__link {
      color: #fff;
      background-color: #32373c;
      border-radius: 9999px;
      box-shadow: none;
      text-decoration: none;
      padding: calc(.667em + 2px) calc(1.333em + 2px);
      font-size: 1.125em
    }

    .wp-block-file__button {
      background: #32373c;
      color: #fff;
      text-decoration: none
    }
  </style>
  <style id="global-styles-inline-css" type="text/css">
    :root {
      --wp--preset--aspect-ratio--square: 1;
      --wp--preset--aspect-ratio--4-3: 4/3;
      --wp--preset--aspect-ratio--3-4: 3/4;
      --wp--preset--aspect-ratio--3-2: 3/2;
      --wp--preset--aspect-ratio--2-3: 2/3;
      --wp--preset--aspect-ratio--16-9: 16/9;
      --wp--preset--aspect-ratio--9-16: 9/16;
      --wp--preset--color--black: #000000;
      --wp--preset--color--cyan-bluish-gray: #abb8c3;
      --wp--preset--color--white: #ffffff;
      --wp--preset--color--pale-pink: #f78da7;
      --wp--preset--color--vivid-red: #cf2e2e;
      --wp--preset--color--luminous-vivid-orange: #ff6900;
      --wp--preset--color--luminous-vivid-amber: #fcb900;
      --wp--preset--color--light-green-cyan: #7bdcb5;
      --wp--preset--color--vivid-green-cyan: #00d084;
      --wp--preset--color--pale-cyan-blue: #8ed1fc;
      --wp--preset--color--vivid-cyan-blue: #0693e3;
      --wp--preset--color--vivid-purple: #9b51e0;
      --wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg, rgba(6, 147, 227, 1) 0%, rgb(155, 81, 224) 100%);
      --wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg, rgb(122, 220, 180) 0%, rgb(0, 208, 130) 100%);
      --wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg, rgba(252, 185, 0, 1) 0%, rgba(255, 105, 0, 1) 100%);
      --wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg, rgba(255, 105, 0, 1) 0%, rgb(207, 46, 46) 100%);
      --wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg, rgb(238, 238, 238) 0%, rgb(169, 184, 195) 100%);
      --wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg, rgb(74, 234, 220) 0%, rgb(151, 120, 209) 20%, rgb(207, 42, 186) 40%, rgb(238, 44, 130) 60%, rgb(251, 105, 98) 80%, rgb(254, 248, 76) 100%);
      --wp--preset--gradient--blush-light-purple: linear-gradient(135deg, rgb(255, 206, 236) 0%, rgb(152, 150, 240) 100%);
      --wp--preset--gradient--blush-bordeaux: linear-gradient(135deg, rgb(254, 205, 165) 0%, rgb(254, 45, 45) 50%, rgb(107, 0, 62) 100%);
      --wp--preset--gradient--luminous-dusk: linear-gradient(135deg, rgb(255, 203, 112) 0%, rgb(199, 81, 192) 50%, rgb(65, 88, 208) 100%);
      --wp--preset--gradient--pale-ocean: linear-gradient(135deg, rgb(255, 245, 203) 0%, rgb(182, 227, 212) 50%, rgb(51, 167, 181) 100%);
      --wp--preset--gradient--electric-grass: linear-gradient(135deg, rgb(202, 248, 128) 0%, rgb(113, 206, 126) 100%);
      --wp--preset--gradient--midnight: linear-gradient(135deg, rgb(2, 3, 129) 0%, rgb(40, 116, 252) 100%);
      --wp--preset--font-size--small: 13px;
      --wp--preset--font-size--medium: 20px;
      --wp--preset--font-size--large: 36px;
      --wp--preset--font-size--x-large: 42px;
      --wp--preset--spacing--20: 0.44rem;
      --wp--preset--spacing--30: 0.67rem;
      --wp--preset--spacing--40: 1rem;
      --wp--preset--spacing--50: 1.5rem;
      --wp--preset--spacing--60: 2.25rem;
      --wp--preset--spacing--70: 3.38rem;
      --wp--preset--spacing--80: 5.06rem;
      --wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);
      --wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);
      --wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);
      --wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);
      --wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);
    }

    :where(.is-layout-flex) {
      gap: 0.5em;
    }

    :where(.is-layout-grid) {
      gap: 0.5em;
    }

    body .is-layout-flex {
      display: flex;
    }

    .is-layout-flex {
      flex-wrap: wrap;
      align-items: center;
    }

    .is-layout-flex> :is(*, div) {
      margin: 0;
    }

    body .is-layout-grid {
      display: grid;
    }

    .is-layout-grid> :is(*, div) {
      margin: 0;
    }

    :where(.wp-block-columns.is-layout-flex) {
      gap: 2em;
    }

    :where(.wp-block-columns.is-layout-grid) {
      gap: 2em;
    }

    :where(.wp-block-post-template.is-layout-flex) {
      gap: 1.25em;
    }

    :where(.wp-block-post-template.is-layout-grid) {
      gap: 1.25em;
    }

    .has-black-color {
      color: var(--wp--preset--color--black) !important;
    }

    .has-cyan-bluish-gray-color {
      color: var(--wp--preset--color--cyan-bluish-gray) !important;
    }

    .has-white-color {
      color: var(--wp--preset--color--white) !important;
    }

    .has-pale-pink-color {
      color: var(--wp--preset--color--pale-pink) !important;
    }

    .has-vivid-red-color {
      color: var(--wp--preset--color--vivid-red) !important;
    }

    .has-luminous-vivid-orange-color {
      color: var(--wp--preset--color--luminous-vivid-orange) !important;
    }

    .has-luminous-vivid-amber-color {
      color: var(--wp--preset--color--luminous-vivid-amber) !important;
    }

    .has-light-green-cyan-color {
      color: var(--wp--preset--color--light-green-cyan) !important;
    }

    .has-vivid-green-cyan-color {
      color: var(--wp--preset--color--vivid-green-cyan) !important;
    }

    .has-pale-cyan-blue-color {
      color: var(--wp--preset--color--pale-cyan-blue) !important;
    }

    .has-vivid-cyan-blue-color {
      color: var(--wp--preset--color--vivid-cyan-blue) !important;
    }

    .has-vivid-purple-color {
      color: var(--wp--preset--color--vivid-purple) !important;
    }

    .has-black-background-color {
      background-color: var(--wp--preset--color--black) !important;
    }

    .has-cyan-bluish-gray-background-color {
      background-color: var(--wp--preset--color--cyan-bluish-gray) !important;
    }

    .has-white-background-color {
      background-color: var(--wp--preset--color--white) !important;
    }

    .has-pale-pink-background-color {
      background-color: var(--wp--preset--color--pale-pink) !important;
    }

    .has-vivid-red-background-color {
      background-color: var(--wp--preset--color--vivid-red) !important;
    }

    .has-luminous-vivid-orange-background-color {
      background-color: var(--wp--preset--color--luminous-vivid-orange) !important;
    }

    .has-luminous-vivid-amber-background-color {
      background-color: var(--wp--preset--color--luminous-vivid-amber) !important;
    }

    .has-light-green-cyan-background-color {
      background-color: var(--wp--preset--color--light-green-cyan) !important;
    }

    .has-vivid-green-cyan-background-color {
      background-color: var(--wp--preset--color--vivid-green-cyan) !important;
    }

    .has-pale-cyan-blue-background-color {
      background-color: var(--wp--preset--color--pale-cyan-blue) !important;
    }

    .has-vivid-cyan-blue-background-color {
      background-color: var(--wp--preset--color--vivid-cyan-blue) !important;
    }

    .has-vivid-purple-background-color {
      background-color: var(--wp--preset--color--vivid-purple) !important;
    }

    .has-black-border-color {
      border-color: var(--wp--preset--color--black) !important;
    }

    .has-cyan-bluish-gray-border-color {
      border-color: var(--wp--preset--color--cyan-bluish-gray) !important;
    }

    .has-white-border-color {
      border-color: var(--wp--preset--color--white) !important;
    }

    .has-pale-pink-border-color {
      border-color: var(--wp--preset--color--pale-pink) !important;
    }

    .has-vivid-red-border-color {
      border-color: var(--wp--preset--color--vivid-red) !important;
    }

    .has-luminous-vivid-orange-border-color {
      border-color: var(--wp--preset--color--luminous-vivid-orange) !important;
    }

    .has-luminous-vivid-amber-border-color {
      border-color: var(--wp--preset--color--luminous-vivid-amber) !important;
    }

    .has-light-green-cyan-border-color {
      border-color: var(--wp--preset--color--light-green-cyan) !important;
    }

    .has-vivid-green-cyan-border-color {
      border-color: var(--wp--preset--color--vivid-green-cyan) !important;
    }

    .has-pale-cyan-blue-border-color {
      border-color: var(--wp--preset--color--pale-cyan-blue) !important;
    }

    .has-vivid-cyan-blue-border-color {
      border-color: var(--wp--preset--color--vivid-cyan-blue) !important;
    }

    .has-vivid-purple-border-color {
      border-color: var(--wp--preset--color--vivid-purple) !important;
    }

    .has-vivid-cyan-blue-to-vivid-purple-gradient-background {
      background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;
    }

    .has-light-green-cyan-to-vivid-green-cyan-gradient-background {
      background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;
    }

    .has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background {
      background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;
    }

    .has-luminous-vivid-orange-to-vivid-red-gradient-background {
      background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;
    }

    .has-very-light-gray-to-cyan-bluish-gray-gradient-background {
      background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;
    }

    .has-cool-to-warm-spectrum-gradient-background {
      background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;
    }

    .has-blush-light-purple-gradient-background {
      background: var(--wp--preset--gradient--blush-light-purple) !important;
    }

    .has-blush-bordeaux-gradient-background {
      background: var(--wp--preset--gradient--blush-bordeaux) !important;
    }

    .has-luminous-dusk-gradient-background {
      background: var(--wp--preset--gradient--luminous-dusk) !important;
    }

    .has-pale-ocean-gradient-background {
      background: var(--wp--preset--gradient--pale-ocean) !important;
    }

    .has-electric-grass-gradient-background {
      background: var(--wp--preset--gradient--electric-grass) !important;
    }

    .has-midnight-gradient-background {
      background: var(--wp--preset--gradient--midnight) !important;
    }

    .has-small-font-size {
      font-size: var(--wp--preset--font-size--small) !important;
    }

    .has-medium-font-size {
      font-size: var(--wp--preset--font-size--medium) !important;
    }

    .has-large-font-size {
      font-size: var(--wp--preset--font-size--large) !important;
    }

    .has-x-large-font-size {
      font-size: var(--wp--preset--font-size--x-large) !important;
    }

    :where(.wp-block-post-template.is-layout-flex) {
      gap: 1.25em;
    }

    :where(.wp-block-post-template.is-layout-grid) {
      gap: 1.25em;
    }

    :where(.wp-block-columns.is-layout-flex) {
      gap: 2em;
    }

    :where(.wp-block-columns.is-layout-grid) {
      gap: 2em;
    }

    :root :where(.wp-block-pullquote) {
      font-size: 1.5em;
      line-height: 1.6;
    }
  </style>
  <link rel="stylesheet" id="ct-shortcode-css"
    href="https://philiascans.org/wp-content/plugins/madara-shortcodes/shortcodes/css/shortcodes.css?ver=6.8.3"
    type="text/css" media="all">
  <link rel="stylesheet" id="manga-character-gallery-frontend-style-css"
    href="https://philiascans.org/wp-content/plugins/manga-character-gallery/css/style.css?ver=6.8.3" type="text/css"
    media="all">
  <link rel="stylesheet" id="wp-manga-chapter-thumbnail-css"
    href="https://philiascans.org/wp-content/plugins/wp-manga-chapter-thumbnail/assets/css/chapter_thumbnail.css?ver=6.8.3"
    type="text/css" media="all">
  <link rel="stylesheet" id="madara_user_upload_pro_styles-css"
    href="https://philiascans.org/wp-content/plugins/wp-manga-user-upload-pro/assets/styles.css?ver=6.8.3"
    type="text/css" media="all">
  <style type="text/css">
    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 100;
      src: url(/cf-fonts/s/poppins/5.0.11/devanagari/100/normal.woff2);
      unicode-range: U+0900-097F, U+1CD0-1CF9, U+200C-200D, U+20A8, U+20B9, U+25CC, U+A830-A839, U+A8E0-A8FF;
      font-display: swap;
    }

    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 100;
      src: url(/cf-fonts/s/poppins/5.0.11/latin/100/normal.woff2);
      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      font-display: swap;
    }

    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 100;
      src: url(/cf-fonts/s/poppins/5.0.11/latin-ext/100/normal.woff2);
      unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
      font-display: swap;
    }

    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 200;
      src: url(/cf-fonts/s/poppins/5.0.11/devanagari/200/normal.woff2);
      unicode-range: U+0900-097F, U+1CD0-1CF9, U+200C-200D, U+20A8, U+20B9, U+25CC, U+A830-A839, U+A8E0-A8FF;
      font-display: swap;
    }

    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 200;
      src: url(/cf-fonts/s/poppins/5.0.11/latin/200/normal.woff2);
      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      font-display: swap;
    }

    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 200;
      src: url(/cf-fonts/s/poppins/5.0.11/latin-ext/200/normal.woff2);
      unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
      font-display: swap;
    }

    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 300;
      src: url(/cf-fonts/s/poppins/5.0.11/latin-ext/300/normal.woff2);
      unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
      font-display: swap;
    }

    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 300;
      src: url(/cf-fonts/s/poppins/5.0.11/latin/300/normal.woff2);
      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      font-display: swap;
    }

    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 300;
      src: url(/cf-fonts/s/poppins/5.0.11/devanagari/300/normal.woff2);
      unicode-range: U+0900-097F, U+1CD0-1CF9, U+200C-200D, U+20A8, U+20B9, U+25CC, U+A830-A839, U+A8E0-A8FF;
      font-display: swap;
    }

    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 400;
      src: url(/cf-fonts/s/poppins/5.0.11/latin-ext/400/normal.woff2);
      unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
      font-display: swap;
    }

    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 400;
      src: url(/cf-fonts/s/poppins/5.0.11/latin/400/normal.woff2);
      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      font-display: swap;
    }

    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 400;
      src: url(/cf-fonts/s/poppins/5.0.11/devanagari/400/normal.woff2);
      unicode-range: U+0900-097F, U+1CD0-1CF9, U+200C-200D, U+20A8, U+20B9, U+25CC, U+A830-A839, U+A8E0-A8FF;
      font-display: swap;
    }

    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 500;
      src: url(/cf-fonts/s/poppins/5.0.11/devanagari/500/normal.woff2);
      unicode-range: U+0900-097F, U+1CD0-1CF9, U+200C-200D, U+20A8, U+20B9, U+25CC, U+A830-A839, U+A8E0-A8FF;
      font-display: swap;
    }

    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 500;
      src: url(/cf-fonts/s/poppins/5.0.11/latin-ext/500/normal.woff2);
      unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
      font-display: swap;
    }

    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 500;
      src: url(/cf-fonts/s/poppins/5.0.11/latin/500/normal.woff2);
      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      font-display: swap;
    }

    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 600;
      src: url(/cf-fonts/s/poppins/5.0.11/latin/600/normal.woff2);
      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      font-display: swap;
    }

    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 600;
      src: url(/cf-fonts/s/poppins/5.0.11/latin-ext/600/normal.woff2);
      unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
      font-display: swap;
    }

    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 600;
      src: url(/cf-fonts/s/poppins/5.0.11/devanagari/600/normal.woff2);
      unicode-range: U+0900-097F, U+1CD0-1CF9, U+200C-200D, U+20A8, U+20B9, U+25CC, U+A830-A839, U+A8E0-A8FF;
      font-display: swap;
    }

    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 700;
      src: url(/cf-fonts/s/poppins/5.0.11/latin/700/normal.woff2);
      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      font-display: swap;
    }

    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 700;
      src: url(/cf-fonts/s/poppins/5.0.11/devanagari/700/normal.woff2);
      unicode-range: U+0900-097F, U+1CD0-1CF9, U+200C-200D, U+20A8, U+20B9, U+25CC, U+A830-A839, U+A8E0-A8FF;
      font-display: swap;
    }

    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 700;
      src: url(/cf-fonts/s/poppins/5.0.11/latin-ext/700/normal.woff2);
      unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
      font-display: swap;
    }

    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 800;
      src: url(/cf-fonts/s/poppins/5.0.11/latin-ext/800/normal.woff2);
      unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
      font-display: swap;
    }

    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 800;
      src: url(/cf-fonts/s/poppins/5.0.11/latin/800/normal.woff2);
      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      font-display: swap;
    }

    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 800;
      src: url(/cf-fonts/s/poppins/5.0.11/devanagari/800/normal.woff2);
      unicode-range: U+0900-097F, U+1CD0-1CF9, U+200C-200D, U+20A8, U+20B9, U+25CC, U+A830-A839, U+A8E0-A8FF;
      font-display: swap;
    }

    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 900;
      src: url(/cf-fonts/s/poppins/5.0.11/latin-ext/900/normal.woff2);
      unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
      font-display: swap;
    }

    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 900;
      src: url(/cf-fonts/s/poppins/5.0.11/devanagari/900/normal.woff2);
      unicode-range: U+0900-097F, U+1CD0-1CF9, U+200C-200D, U+20A8, U+20B9, U+25CC, U+A830-A839, U+A8E0-A8FF;
      font-display: swap;
    }

    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 900;
      src: url(/cf-fonts/s/poppins/5.0.11/latin/900/normal.woff2);
      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      font-display: swap;
    }
  </style>
  <link rel="stylesheet" id="swiper-css-css"
    href="https://cdnjs.cloudflare.com/ajax/libs/Swiper/5.4.4/css/swiper.min.css" type="text/css" media="all">
  <link rel="stylesheet" id="tooltipster-css-css"
    href="https://cdnjs.cloudflare.com/ajax/libs/tooltipster/4.0.0/css/tooltipster.bundle.min.css" type="text/css"
    media="all">
  <link rel="stylesheet" id="fontawesome-brands-css-css"
    href="https://philiascans.org/wp-content/themes/wp-esco/assets/css/brands.min.css?ver=6.8.3" type="text/css"
    media="all">
  <link rel="stylesheet" id="fire-fontawesome-css"
    href="https://philiascans.org/wp-content/themes/wp-esco/assets/css/fontawesome.min.css?ver=6.8.3" type="text/css"
    media="all">
  <link rel="stylesheet" id="fire-regular-css"
    href="https://philiascans.org/wp-content/themes/wp-esco/assets/css/regular.min.css?ver=6.8.3" type="text/css"
    media="all">
  <link rel="stylesheet" id="fire-solid-css"
    href="https://philiascans.org/wp-content/themes/wp-esco/assets/css/solid.min.css?ver=6.8.3" type="text/css"
    media="all">
  <link rel="stylesheet" id="fire-styles-fire-css"
    href="https://philiascans.org/wp-content/themes/wp-esco/assets/css/styles.css?ver=6.8.3" type="text/css"
    media="all">
  <link rel="stylesheet" id="fire-style-css"
    href="https://philiascans.org/wp-content/themes/wp-esco/style.css?ver=1748622978" type="text/css" media="all">
  <link rel="stylesheet" id="wp-fire-temp-style-css"
    href="https://philiascans.org/wp-content/themes/wp-esco/temp.css?ver=1747668494" type="text/css" media="all">
  <link rel="stylesheet" id="mycred-front-css"
    href="https://philiascans.org/wp-content/plugins/mycred/assets/css/mycred-front.css?ver=2.9.5" type="text/css"
    media="all">
  <link rel="stylesheet" id="mycred-social-share-icons-css"
    href="https://philiascans.org/wp-content/plugins/mycred/assets/css/mycred-social-icons.css?ver=2.9.5"
    type="text/css" media="all">
  <link rel="stylesheet" id="mycred-social-share-style-css"
    href="https://philiascans.org/wp-content/plugins/mycred/assets/css/mycred-social-share.css?ver=2.9.5"
    type="text/css" media="all">
  <link rel="stylesheet" id="wp-pagenavi-css"
    href="https://philiascans.org/wp-content/plugins/wp-pagenavi/pagenavi-css.css?ver=2.70" type="text/css" media="all">
  <link rel="stylesheet" id="wpdiscuz-frontend-css-css"
    href="https://philiascans.org/wp-content/plugins/wpdiscuz/themes/default/style.css?ver=7.6.34" type="text/css"
    media="all">
  <style id="wpdiscuz-frontend-css-inline-css" type="text/css">
    #wpdcom .wpd-blog-administrator .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-administrator .wpd-comment-author,
    #wpdcom .wpd-blog-administrator .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-1 .wpd-comment .wpd-blog-administrator .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment.wpd-reply .wpd-comment-wrap.wpd-blog-administrator {
      border-left: 3px solid #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-administrator .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-administrator .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-reply .wpd-blog-administrator .wpd-comment-right {
      border-left: 1px solid #00B38F
    }

    #wpdcom .wpd-blog-editor .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-editor .wpd-comment-author,
    #wpdcom .wpd-blog-editor .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-1 .wpd-comment .wpd-blog-editor .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment.wpd-reply .wpd-comment-wrap.wpd-blog-editor {
      border-left: 3px solid #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-editor .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-editor .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-reply .wpd-blog-editor .wpd-comment-right {
      border-left: 1px solid #00B38F
    }

    #wpdcom .wpd-blog-author .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-author .wpd-comment-author,
    #wpdcom .wpd-blog-author .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-1 .wpd-comment .wpd-blog-author .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-author .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-author .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-reply .wpd-blog-author .wpd-comment-right {
      border-left: 1px solid #00B38F
    }

    #wpdcom .wpd-blog-contributor .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-contributor .wpd-comment-author,
    #wpdcom .wpd-blog-contributor .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-1 .wpd-comment .wpd-blog-contributor .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-contributor .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-contributor .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-reply .wpd-blog-contributor .wpd-comment-right {
      border-left: 1px solid #00B38F
    }

    #wpdcom .wpd-blog-subscriber .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-subscriber .wpd-comment-author,
    #wpdcom .wpd-blog-subscriber .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-subscriber .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-subscriber .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom .wpd-blog-campaign_manager .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-campaign_manager .wpd-comment-author,
    #wpdcom .wpd-blog-campaign_manager .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-1 .wpd-comment .wpd-blog-campaign_manager .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-campaign_manager .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-campaign_manager .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-reply .wpd-blog-campaign_manager .wpd-comment-right {
      border-left: 1px solid #00B38F
    }

    #wpdcom .wpd-blog-donor .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-donor .wpd-comment-author,
    #wpdcom .wpd-blog-donor .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-1 .wpd-comment .wpd-blog-donor .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-donor .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-donor .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-reply .wpd-blog-donor .wpd-comment-right {
      border-left: 1px solid #00B38F
    }

    #wpdcom .wpd-blog-banned .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-banned .wpd-comment-author,
    #wpdcom .wpd-blog-banned .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-1 .wpd-comment .wpd-blog-banned .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-banned .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-banned .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-reply .wpd-blog-banned .wpd-comment-right {
      border-left: 1px solid #00B38F
    }

    #wpdcom .wpd-blog-post_author .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-post_author .wpd-comment-author,
    #wpdcom .wpd-blog-post_author .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom .wpd-blog-post_author .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-1 .wpd-comment .wpd-blog-post_author .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment.wpd-reply .wpd-comment-wrap.wpd-blog-post_author {
      border-left: 3px solid #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-post_author .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-post_author .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-reply .wpd-blog-post_author .wpd-comment-right {
      border-left: 1px solid #00B38F
    }

    #wpdcom .wpd-blog-guest .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-guest .wpd-comment-author,
    #wpdcom .wpd-blog-guest .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-guest .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #comments,
    #respond,
    .comments-area,
    #wpdcom.wpd-dark {
      background: #111111;
      color: #CCCCCC
    }

    #wpdcom .ql-editor>* {
      color: #000000
    }

    #wpdcom .ql-editor::before {
      opacity: 1;
      color: #DDDDDD
    }

    #wpdcom .ql-toolbar {
      border: 1px solid #D1D1D1;
      border-top: none
    }

    #wpdcom .ql-container {
      background: #999999;
      border: 1px solid #D1D1D1;
      border-bottom: none
    }

    #wpdcom .wpd-form-row .wpdiscuz-item input[type="text"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="email"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="url"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="color"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="date"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="datetime"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="datetime-local"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="month"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="number"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="time"],
    #wpdcom textarea,
    #wpdcom select {
      background: #999999;
      border: 1px solid #D1D1D1;
      color: #000000
    }

    #wpdcom.wpd-dark .wpdiscuz-item.wpd-field-select select.wpdiscuz_select,
    #wpdcom.wpd-dark select {
      background: #999999 !important;
      border: 1px solid #D1D1D1 !important;
      color: #000000 !important
    }

    #wpdcom .wpd-form-row .wpdiscuz-item textarea {
      border: 1px solid #D1D1D1
    }

    #wpdcom input::placeholder,
    #wpdcom textarea::placeholder,
    #wpdcom input::-moz-placeholder,
    #wpdcom textarea::-webkit-input-placeholder {
      opacity: 1;
      color: #DDDDDD
    }

    #wpdcom .wpd-comment-text {
      color: #CCCCCC
    }

    .lity-wrap .wpd-item a {
      color: #666
    }

    .lity-wrap .wpd-item a:hover {
      color: #222
    }

    .wpd-inline-shortcode.wpd-active {
      background-color: #666
    }

    #wpdcom .wpd-thread-head .wpd-thread-info {
      border-bottom: 2px solid #00B38F
    }

    #wpdcom .wpd-thread-head .wpd-thread-info.wpd-reviews-tab svg {
      fill: #00B38F
    }

    #wpdcom .wpd-thread-head .wpdiscuz-user-settings {
      border-bottom: 2px solid #00B38F
    }

    #wpdcom .wpd-thread-head .wpdiscuz-user-settings:hover {
      color: #00B38F
    }

    #wpdcom .wpd-comment .wpd-follow-link:hover {
      color: #00B38F
    }

    #wpdcom .wpd-comment-status .wpd-sticky {
      color: #00B38F
    }

    #wpdcom .wpd-thread-filter .wpdf-active {
      color: #00B38F;
      border-bottom-color: #00B38F
    }

    #wpdcom .wpd-comment-info-bar {
      border: 1px dashed #33c3a6;
      background: #e6f8f4
    }

    #wpdcom .wpd-comment-info-bar .wpd-current-view i {
      color: #00B38F
    }

    #wpdcom .wpd-filter-view-all:hover {
      background: #00B38F
    }

    #wpdcom .wpdiscuz-item .wpdiscuz-rating>label {
      color: #DDDDDD
    }

    #wpdcom .wpdiscuz-item .wpdiscuz-rating:not(:checked)>label:hover,
    .wpdiscuz-rating:not(:checked)>label:hover~label {}

    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input~label:hover,
    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input:not(:checked)~label:hover~label,
    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input:not(:checked)~label:hover~label {
      color: #FFED85
    }

    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input:checked~label:hover,
    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input:checked~label:hover,
    #wpdcom .wpdiscuz-item .wpdiscuz-rating>label:hover~input:checked~label,
    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input:checked+label:hover~label,
    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input:checked~label:hover~label,
    .wpd-custom-field .wcf-active-star,
    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input:checked~label {
      color: #FFD700
    }

    #wpd-post-rating .wpd-rating-wrap .wpd-rating-stars svg .wpd-star {
      fill: #DDDDDD
    }

    #wpd-post-rating .wpd-rating-wrap .wpd-rating-stars svg .wpd-active {
      fill: #FFD700
    }

    #wpd-post-rating .wpd-rating-wrap .wpd-rate-starts svg .wpd-star {
      fill: #DDDDDD
    }

    #wpd-post-rating .wpd-rating-wrap .wpd-rate-starts:hover svg .wpd-star {
      fill: #FFED85
    }

    #wpd-post-rating.wpd-not-rated .wpd-rating-wrap .wpd-rate-starts svg:hover~svg .wpd-star {
      fill: #DDDDDD
    }

    .wpdiscuz-post-rating-wrap .wpd-rating .wpd-rating-wrap .wpd-rating-stars svg .wpd-star {
      fill: #DDDDDD
    }

    .wpdiscuz-post-rating-wrap .wpd-rating .wpd-rating-wrap .wpd-rating-stars svg .wpd-active {
      fill: #FFD700
    }

    #wpdcom .wpd-comment .wpd-follow-active {
      color: #ff7a00
    }

    #wpdcom .page-numbers {
      color: #555;
      border: #555 1px solid
    }

    #wpdcom span.current {
      background: #555
    }

    #wpdcom.wpd-layout-1 .wpd-new-loaded-comment>.wpd-comment-wrap>.wpd-comment-right {
      background: #FFFAD6
    }

    #wpdcom.wpd-layout-2 .wpd-new-loaded-comment.wpd-comment>.wpd-comment-wrap>.wpd-comment-right {
      background: #FFFAD6
    }

    #wpdcom.wpd-layout-2 .wpd-new-loaded-comment.wpd-comment.wpd-reply>.wpd-comment-wrap>.wpd-comment-right {
      background: transparent
    }

    #wpdcom.wpd-layout-2 .wpd-new-loaded-comment.wpd-comment.wpd-reply>.wpd-comment-wrap {
      background: #FFFAD6
    }

    #wpdcom.wpd-layout-3 .wpd-new-loaded-comment.wpd-comment>.wpd-comment-wrap>.wpd-comment-right {
      background: #FFFAD6
    }

    #wpdcom .wpd-follow:hover i,
    #wpdcom .wpd-unfollow:hover i,
    #wpdcom .wpd-comment .wpd-follow-active:hover i {
      color: #00B38F
    }

    #wpdcom .wpdiscuz-readmore {
      cursor: pointer;
      color: #00B38F
    }

    .wpd-custom-field .wcf-pasiv-star,
    #wpcomm .wpdiscuz-item .wpdiscuz-rating>label {
      color: #DDDDDD
    }

    .wpd-wrapper .wpd-list-item.wpd-active {
      border-top: 3px solid #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment.wpd-reply.wpd-unapproved-comment .wpd-comment-wrap {
      border-left: 3px solid #FFFAD6
    }

    #wpdcom.wpd-layout-3 .wpd-comment.wpd-reply.wpd-unapproved-comment .wpd-comment-right {
      border-left: 1px solid #FFFAD6
    }

    #wpdcom .wpd-prim-button {
      background-color: #07B290;
      color: #FFFFFF
    }

    #wpdcom .wpd_label__check i.wpdicon-on {
      color: #07B290;
      border: 1px solid #83d9c8
    }

    #wpd-bubble-wrapper #wpd-bubble-all-comments-count {
      color: #1DB99A
    }

    #wpd-bubble-wrapper>div {
      background-color: #1DB99A
    }

    #wpd-bubble-wrapper>#wpd-bubble #wpd-bubble-add-message {
      background-color: #1DB99A
    }

    #wpd-bubble-wrapper>#wpd-bubble #wpd-bubble-add-message::before {
      border-left-color: #1DB99A;
      border-right-color: #1DB99A
    }

    #wpd-bubble-wrapper.wpd-right-corner>#wpd-bubble #wpd-bubble-add-message::before {
      border-left-color: #1DB99A;
      border-right-color: #1DB99A
    }

    .wpd-inline-icon-wrapper path.wpd-inline-icon-first {
      fill: #1DB99A
    }

    .wpd-inline-icon-count {
      background-color: #1DB99A
    }

    .wpd-inline-icon-count::before {
      border-right-color: #1DB99A
    }

    .wpd-inline-form-wrapper::before {
      border-bottom-color: #1DB99A
    }

    .wpd-inline-form-question {
      background-color: #1DB99A
    }

    .wpd-inline-form {
      background-color: #1DB99A
    }

    .wpd-last-inline-comments-wrapper {
      border-color: #1DB99A
    }

    .wpd-last-inline-comments-wrapper::before {
      border-bottom-color: #1DB99A
    }

    .wpd-last-inline-comments-wrapper .wpd-view-all-inline-comments {
      background: #1DB99A
    }

    .wpd-last-inline-comments-wrapper .wpd-view-all-inline-comments:hover,
    .wpd-last-inline-comments-wrapper .wpd-view-all-inline-comments:active,
    .wpd-last-inline-comments-wrapper .wpd-view-all-inline-comments:focus {
      background-color: #1DB99A
    }

    #wpdcom .ql-snow .ql-tooltip[data-mode="link"]::before {
      content: "Enter link:"
    }

    #wpdcom .ql-snow .ql-tooltip.ql-editing a.ql-action::after {
      content: "Save"
    }

    .comments-area {
      width: auto
    }
  </style>
  <link rel="stylesheet" id="wpdiscuz-fa-css"
    href="https://philiascans.org/wp-content/plugins/wpdiscuz/assets/third-party/font-awesome-5.13.0/css/fa.min.css?ver=7.6.34"
    type="text/css" media="all">
  <link rel="stylesheet" id="wpdiscuz-combo-css-css"
    href="https://philiascans.org/wp-content/plugins/wpdiscuz/assets/css/wpdiscuz-combo.min.css?ver=6.8.3"
    type="text/css" media="all">
  <link rel="stylesheet" id="wp-manga-font-awesome-css"
    href="https://philiascans.org/wp-content/plugins/madara-core/assets/font-awesome/css/all.min.css?ver=5.15.3"
    type="text/css" media="all">
  <link rel="stylesheet" id="wp-manga-ionicons-css"
    href="https://philiascans.org/wp-content/plugins/madara-core/assets/css/ionicons/css/ionicons.min.css?ver=4.5.10"
    type="text/css" media="all">
  <style type="text/css">
    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 400;
      src: url(/cf-fonts/s/poppins/5.0.11/latin-ext/400/normal.woff2);
      unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
      font-display: swap;
    }

    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 400;
      src: url(/cf-fonts/s/poppins/5.0.11/devanagari/400/normal.woff2);
      unicode-range: U+0900-097F, U+1CD0-1CF9, U+200C-200D, U+20A8, U+20B9, U+25CC, U+A830-A839, U+A8E0-A8FF;
      font-display: swap;
    }

    @font-face {
      font-family: Poppins;
      font-style: normal;
      font-weight: 400;
      src: url(/cf-fonts/s/poppins/5.0.11/latin/400/normal.woff2);
      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      font-display: swap;
    }
  </style>
  <script type="text/javascript" src="https://code.jquery.com/jquery-3.7.1.min.js?ver=3.7.1" id="jquery-js"></script>
  <script type="text/javascript" src="https://philiascans.org/wp-includes/js/jquery/ui/core.min.js?ver=1.13.3"
    id="jquery-ui-core-js"></script>
  <script type="text/javascript" src="https://philiascans.org/wp-includes/js/jquery/ui/menu.min.js?ver=1.13.3"
    id="jquery-ui-menu-js"></script>
  <script type="text/javascript"
    src="https://philiascans.org/wp-includes/js/dist/dom-ready.min.js?ver=f77871ff7694fffea381"
    id="wp-dom-ready-js"></script>
  <script type="text/javascript" src="https://philiascans.org/wp-includes/js/dist/hooks.min.js?ver=4d63a3d491d11ffd8ac6"
    id="wp-hooks-js"></script>
  <script type="text/javascript" src="https://philiascans.org/wp-includes/js/dist/i18n.min.js?ver=5e580eb46a90c2b997e6"
    id="wp-i18n-js"></script>
  <script type="text/javascript" id="wp-i18n-js-after">
    /* <![CDATA[ */
    wp.i18n.setLocaleData({ 'text direction\u0004ltr': ['ltr'] });
    /* ]]> */
  </script>
  <script type="text/javascript" src="https://philiascans.org/wp-includes/js/dist/a11y.min.js?ver=3156534cc54473497e14"
    id="wp-a11y-js"></script>
  <script type="text/javascript" src="https://philiascans.org/wp-includes/js/jquery/ui/autocomplete.min.js?ver=1.13.3"
    id="jquery-ui-autocomplete-js"></script>
  <script type="text/javascript" id="wp-manga-js-extra">
    /* <![CDATA[ */
    var manga = { "ajax_url": "https:\/\/philiascans.org\/wp-admin\/admin-ajax.php", "home_url": "https:\/\/philiascans.org", "base_url": "https:\/\/philiascans.org\/series\/sanctuary-of-the-unloved-noble-lady\/", "manga_paged_var": "manga-paged", "enable_manga_view": "0", "manga_id": "10288" };
    /* ]]> */
  </script>
  <script type="text/javascript"
    src="https://philiascans.org/wp-content/plugins/madara-core/assets/js/script.js?ver=1.7.1"
    id="wp-manga-js"></script>
  <script type="text/javascript"
    src="https://philiascans.org/wp-content/plugins/wp-manga-chapter-coin/assets/js/frontend.js?ver=1.0"
    id="chapter-coin-js-js"></script>
  <script type="text/javascript"
    src="https://philiascans.org/wp-content/plugins/wp-manga-user-upload-pro//assets/helpers.js?ver=1.0"
    id="madara-user-upload-pro-helpers-js"></script>
  <script type="text/javascript" id="muupro-add-manga-form-js-extra">
    /* <![CDATA[ */
    var muupro_addmangaform = { "url": "https:\/\/philiascans.org\/wp-admin\/admin-ajax.php", "messages": { "badge_maximum_characters": "Maximum 5 characters for badge" } };
    /* ]]> */
  </script>
  <script type="text/javascript"
    src="https://philiascans.org/wp-content/plugins/wp-manga-user-upload-pro//assets/add-manga.js?ver=1.0"
    id="muupro-add-manga-form-js"></script>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.5/js/select2.min.js?ver=4.0.5"
    id="select2-js"></script>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/dragula/3.7.2/dragula.min.js?ver=3.7.2"
    id="dragula-js"></script>
  <script type="text/javascript" id="muupro-chapter-form-js-extra">
    /* <![CDATA[ */
    var uploadChapter = { "url": "https:\/\/philiascans.org\/wp-admin\/admin-ajax.php", "nonce": "c8fa9ccfff", "messages": { "remove_image": "Remove image", "confirm_remove_image": "Confirm to remove this image", "missing_value": "%s cannot be empty", "missing_files": "Please select chapter images", "invalid_number": "Chapter number must be numeric", "select_manga": "Select manga", "no_volume": "-- No Volume --", "please_enter_volume": "If you want to create a new volume, please enter volume name" } };
    /* ]]> */
  </script>
  <script type="text/javascript"
    src="https://philiascans.org/wp-content/plugins/wp-manga-user-upload-pro//assets/upload-chapter.js?ver=2.4"
    id="muupro-chapter-form-js"></script>
  <script type="text/javascript"
    src="https://philiascans.org/wp-content/plugins/mycred/addons/badges/assets/js/front.js?ver=1.3"
    id="mycred-badge-front-js"></script>

  <!-- Google tag (gtag.js) snippet added by Site Kit -->
  <!-- Google Analytics snippet added by Site Kit -->
  <script type="text/javascript" src="https://www.googletagmanager.com/gtag/js?id=GT-M632X6CB" id="google_gtagjs-js"
    async=""></script>
  <script type="text/javascript" id="google_gtagjs-js-after">
    /* <![CDATA[ */
    window.dataLayer = window.dataLayer || []; function gtag() { dataLayer.push(arguments); }
    gtag("set", "linker", { "domains": ["philiascans.org"] });
    gtag("js", new Date());
    gtag("set", "developer_id.dZTNiMT", true);
    gtag("config", "GT-M632X6CB", { "googlesitekit_post_type": "wp-manga" });
    window._googlesitekit = window._googlesitekit || {}; window._googlesitekit.throttledEvents = []; window._googlesitekit.gtagEvent = (name, data) => { var key = JSON.stringify({ name, data }); if (!!window._googlesitekit.throttledEvents[key]) { return; } window._googlesitekit.throttledEvents[key] = true; setTimeout(() => { delete window._googlesitekit.throttledEvents[key]; }, 5); gtag("event", name, { ...data, event_source: "site-kit" }); };
    /* ]]> */
  </script>
  <link rel="https://api.w.org/" href="https://philiascans.org/wp-json/">
  <link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://philiascans.org/xmlrpc.php?rsd">
  <meta name="generator" content="WordPress 6.8.3">
  <link rel="shortlink" href="https://philiascans.org/?p=10288">
  <link rel="alternate" title="oEmbed (JSON)" type="application/json+oembed"
    href="https://philiascans.org/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fphiliascans.org%2Fseries%2Fsanctuary-of-the-unloved-noble-lady%2F">
  <link rel="alternate" title="oEmbed (XML)" type="text/xml+oembed"
    href="https://philiascans.org/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fphiliascans.org%2Fseries%2Fsanctuary-of-the-unloved-noble-lady%2F&amp;format=xml">
  <meta name="generator" content="Site Kit by Google 1.163.0">
  <script>
    if (location.pathname.includes("/home")) location.href = "/";
  </script>
  <style type="text/css">
    .wp-manga-chapter.free-chap .coin {
      background-color: #DCDCDC;
      color: #999999
    }

    .wp-manga-chapter.premium .coin {
      background-color: #DCDCDC;
      color: #999999
    }

    .wp-manga-chapter.premium.premium-block .coin {
      background-color: #fe6a10;
      color: #ffffff
    }

    .shortcode-top-bought .item-thumb .index {
      background-color: rgba(255, 248, 26, 0.6);
      color: #333333
    }
  </style>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- Google AdSense meta tags added by Site Kit -->
  <meta name="google-adsense-platform-account" content="ca-host-pub-2644536267352236">
  <meta name="google-adsense-platform-domain" content="sitekit.withgoogle.com">
  <!-- End Google AdSense meta tags added by Site Kit -->

  <!-- Google AdSense snippet added by Site Kit -->
  <script type="text/javascript" async="async"
    src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7276181233694530&amp;host=ca-host-pub-2644536267352236"
    crossorigin="anonymous"></script>

  <!-- End Google AdSense snippet added by Site Kit -->
  <link rel="icon" href="https://philiascans.org/wp-content/uploads/2025/01/cropped-logo-1-32x32.png" sizes="32x32">
  <link rel="icon" href="https://philiascans.org/wp-content/uploads/2025/01/cropped-logo-1-192x192.png" sizes="192x192">
  <link rel="apple-touch-icon" href="https://philiascans.org/wp-content/uploads/2025/01/cropped-logo-1-180x180.png">
  <meta name="msapplication-TileImage"
    content="https://philiascans.org/wp-content/uploads/2025/01/cropped-logo-1-270x270.png">
  <style type="text/css" id="wp-custom-css">
    #primary .button.btn.btn-block.btn-lg {
      background: #ff9b00;
      color: white;
      font-size: 20px;
    }

    #primary .form-group input {
      background: white;
      color: #3c3c3c;
    }

    #primary .hentry form {
      background: none !important;
      box-shadow: none !important;
    }

    #primary .mycred-point-type {
      display: none;
    }
  </style>
  <style id="yellow-pencil">
    /*
	The following CSS codes are created by the YellowPencil plugin.
	https://yellowpencil.waspthemes.com/
*/
    .form .form-group .btn-block {
      background-color: #06b106 !important;
    }

    .form .form-group input[type=text] {
      min-width: 452px;
    }

    .wrapper #primary .container .hentry .entry-content div div #buy div .row .col-xs-12 .form .form-group input[type=text] {
      max-width: 845px !important;
    }

    @media (max-width:1600px) {
      .wrapper #primary .container .hentry .entry-content div div #buy div .row .col-xs-12 .form .form-group input[type=text] {
        max-width: 1062px !important;
      }
    }

    @media (max-width:1480px) {
      .wrapper #primary .container .hentry .entry-content div div #buy div .row .col-xs-12 .form .form-group input[type=text] {
        max-width: 877px !important;
      }
    }

    @media (max-width:1399px) {
      .wrapper #primary .container .hentry .entry-content div div #buy div .row .col-xs-12 .form .form-group input[type=text] {
        max-width: 925px !important;
      }
    }

    @media (max-width:600px) {
      .form .form-group input[type=text] {
        min-width: 250px !important;
      }
    }

    @media (max-width:575px) {
      .form .form-group input[type=text] {
        min-width: 452px;
      }
    }

    @media (max-width:500px) {
      .form .form-group input[type=text] {
        min-width: 250px !important;
      }
    }

    @media (max-width:480px) {
      .form .form-group input[type=text] {
        min-width: 452px;
      }
    }

    @media (max-width:440px) {
      .form .form-group input[type=text] {
        min-width: 250px;
      }
    }

    @media (max-width:428px) {
      .form .form-group input[type=text] {
        min-width: 452px;
      }
    }

    @media (max-width:410px) {
      .form .form-group input[type=text] {
        position: relative;
        top: 1px;
        min-width: 250px !important;
      }
    }

    @media (max-width:400px) {
      .form .form-group input[type=text] {
        min-width: 319px;
      }
    }

    @media (max-width:370px) {
      .form .form-group input[type=text] {
        min-width: 206px !important;
      }
    }

    @media (max-width:360px) {
      .form .form-group input[type=text] {
        min-width: 251px;
      }
    }
  </style>
  <style id="googleidentityservice_button_styles">
    .qJTHM {
      -moz-user-select: none;
      color: #202124;
      direction: ltr;
      font-family: "Roboto-Regular", arial, sans-serif;
      font-weight: 400;
      margin: 0;
      overflow: hidden
    }

    .ynRLnc {
      left: -9999px;
      position: absolute;
      top: -9999px
    }

    .L6cTce {
      display: none
    }

    .bltWBb {
      overflow-wrap: break-word;
      word-break: break-word
    }

    .hSRGPd {
      color: #1a73e8;
      cursor: pointer;
      font-weight: 500;
      text-decoration: none
    }

    .Bz112c-W3lGp {
      height: 16px;
      width: 16px
    }

    .Bz112c-E3DyYd {
      height: 20px;
      width: 20px
    }

    .Bz112c-r9oPif {
      height: 24px;
      width: 24px
    }

    .Bz112c-u2z5K {
      height: 36px;
      width: 36px
    }

    .Bz112c-uaxL4e {
      -moz-border-radius: 10px;
      border-radius: 10px
    }

    .LgbsSe-Bz112c {
      display: block
    }

    .S9gUrf-YoZ4jf,
    .S9gUrf-YoZ4jf * {
      border: none;
      margin: 0;
      padding: 0
    }

    .fFW7wc-ibnC6b>.aZ2wEe>div {
      border-color: #4285f4
    }

    .P1ekSe-ZMv3u {
      transition: height linear 200ms
    }

    .P1ekSe-ZMv3u>div:nth-child(1) {
      background-color: #1a73e8 !important;
      transition: width linear 300ms
    }

    .P1ekSe-ZMv3u>div:nth-child(2),
    .P1ekSe-ZMv3u>div:nth-child(3) {
      background-image: linear-gradient(to right, rgba(255, 255, 255, .7), rgba(255, 255, 255, .7)), linear-gradient(to right, #1a73e8, #1a73e8) !important
    }

    .haAclf {
      display: inline-block
    }

    .nsm7Bb-HzV7m-LgbsSe {
      border-radius: 4px;
      -moz-box-sizing: border-box;
      box-sizing: border-box;
      transition: background-color .218s, border-color .218s;
      -moz-user-select: none;
      -webkit-user-select: none;
      -ms-user-select: none;
      -webkit-appearance: none;
      background-color: #fff;
      background-image: none;
      border: 1px solid #dadce0;
      color: #3c4043;
      cursor: pointer;
      font-family: "Google Sans", arial, sans-serif;
      font-size: 14px;
      height: 40px;
      letter-spacing: .25px;
      outline: none;
      overflow: hidden;
      padding: 0 12px;
      position: relative;
      text-align: center;
      vertical-align: middle;
      white-space: nowrap;
      width: auto
    }

    @media screen and (-ms-high-contrast:active) {
      .nsm7Bb-HzV7m-LgbsSe {
        border: 2px solid windowText;
        color: windowText
      }
    }

    @media screen and (preferes-contrast:more) {
      .nsm7Bb-HzV7m-LgbsSe {
        color: #000
      }
    }

    .nsm7Bb-HzV7m-LgbsSe.pSzOP-SxQuSe {
      font-size: 14px;
      height: 32px;
      letter-spacing: .25px;
      padding: 0 10px
    }

    .nsm7Bb-HzV7m-LgbsSe.purZT-SxQuSe {
      font-size: 11px;
      height: 20px;
      letter-spacing: .3px;
      padding: 0 8px
    }

    .nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe {
      padding: 0;
      width: 40px
    }

    .nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe.pSzOP-SxQuSe {
      width: 32px
    }

    .nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe.purZT-SxQuSe {
      width: 20px
    }

    .nsm7Bb-HzV7m-LgbsSe.JGcpL-RbRzK {
      border-radius: 20px
    }

    .nsm7Bb-HzV7m-LgbsSe.JGcpL-RbRzK.pSzOP-SxQuSe {
      border-radius: 16px
    }

    .nsm7Bb-HzV7m-LgbsSe.JGcpL-RbRzK.purZT-SxQuSe {
      border-radius: 10px
    }

    .nsm7Bb-HzV7m-LgbsSe.MFS4be-Ia7Qfc {
      border: none;
      color: #fff
    }

    .nsm7Bb-HzV7m-LgbsSe.MFS4be-v3pZbf-Ia7Qfc {
      background-color: #1a73e8
    }

    .nsm7Bb-HzV7m-LgbsSe.MFS4be-JaPV2b-Ia7Qfc {
      background-color: #202124;
      color: #e8eaed
    }

    @media screen and (prefers-contrast:more) {
      .nsm7Bb-HzV7m-LgbsSe.MFS4be-JaPV2b-Ia7Qfc {
        color: #fff
      }
    }

    .nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c {
      height: 18px;
      margin-right: 8px;
      min-width: 18px;
      width: 18px
    }

    .nsm7Bb-HzV7m-LgbsSe.pSzOP-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c {
      height: 14px;
      min-width: 14px;
      width: 14px
    }

    .nsm7Bb-HzV7m-LgbsSe.purZT-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c {
      height: 10px;
      min-width: 10px;
      width: 10px
    }

    .nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-Bz112c {
      margin-left: 8px;
      margin-right: -4px
    }

    .nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c {
      margin: 0;
      padding: 10px
    }

    .nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe.pSzOP-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c {
      padding: 8px
    }

    .nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe.purZT-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c {
      padding: 4px
    }

    .nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf {
      border-top-left-radius: 3px;
      border-bottom-left-radius: 3px;
      display: -moz-box;
      display: flex;
      -moz-box-pack: center;
      justify-content: center;
      -moz-box-align: center;
      align-items: center;
      background-color: #fff;
      height: 36px;
      margin-left: -10px;
      margin-right: 12px;
      min-width: 36px;
      width: 36px
    }

    .nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf .nsm7Bb-HzV7m-LgbsSe-Bz112c,
    .nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf .nsm7Bb-HzV7m-LgbsSe-Bz112c {
      margin: 0;
      padding: 0
    }

    .nsm7Bb-HzV7m-LgbsSe.pSzOP-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf {
      height: 28px;
      margin-left: -8px;
      margin-right: 10px;
      min-width: 28px;
      width: 28px
    }

    .nsm7Bb-HzV7m-LgbsSe.purZT-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf {
      height: 16px;
      margin-left: -6px;
      margin-right: 8px;
      min-width: 16px;
      width: 16px
    }

    .nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf {
      border-radius: 3px;
      margin-left: 2px;
      margin-right: 0;
      padding: 0
    }

    .nsm7Bb-HzV7m-LgbsSe.JGcpL-RbRzK .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf {
      border-radius: 18px
    }

    .nsm7Bb-HzV7m-LgbsSe.pSzOP-SxQuSe.JGcpL-RbRzK .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf {
      border-radius: 14px
    }

    .nsm7Bb-HzV7m-LgbsSe.purZT-SxQuSe.JGcpL-RbRzK .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf {
      border-radius: 8px
    }

    .nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-bN97Pc-sM5MNb {
      display: -moz-box;
      display: flex;
      -moz-box-align: center;
      align-items: center;
      -moz-box-orient: horizontal;
      -moz-box-direction: normal;
      flex-direction: row;
      -moz-box-pack: justify;
      justify-content: space-between;
      flex-wrap: nowrap;
      height: 100%;
      position: relative;
      width: 100%
    }

    .nsm7Bb-HzV7m-LgbsSe .oXtfBe-l4eHX {
      -moz-box-pack: center;
      justify-content: center
    }

    .nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-BPrWId {
      -moz-box-flex: 1;
      flex-grow: 1;
      font-family: "Google Sans", arial, sans-serif;
      font-weight: 500;
      overflow: hidden;
      text-overflow: ellipsis;
      vertical-align: top
    }

    .nsm7Bb-HzV7m-LgbsSe.purZT-SxQuSe .nsm7Bb-HzV7m-LgbsSe-BPrWId {
      font-weight: 300
    }

    .nsm7Bb-HzV7m-LgbsSe .oXtfBe-l4eHX .nsm7Bb-HzV7m-LgbsSe-BPrWId {
      -moz-box-flex: 0;
      flex-grow: 0
    }

    .nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-MJoBVe {
      transition: background-color .218s;
      bottom: 0;
      left: 0;
      position: absolute;
      right: 0;
      top: 0
    }

    .nsm7Bb-HzV7m-LgbsSe:hover,
    .nsm7Bb-HzV7m-LgbsSe:focus {
      box-shadow: none;
      border-color: rgb(210, 227, 252);
      outline: none
    }

    .nsm7Bb-HzV7m-LgbsSe:focus-within {
      outline: 2px solid #00639b;
      border-color: transparent
    }

    .nsm7Bb-HzV7m-LgbsSe:hover .nsm7Bb-HzV7m-LgbsSe-MJoBVe {
      background: rgba(66, 133, 244, .08)
    }

    .nsm7Bb-HzV7m-LgbsSe:active .nsm7Bb-HzV7m-LgbsSe-MJoBVe,
    .nsm7Bb-HzV7m-LgbsSe:focus .nsm7Bb-HzV7m-LgbsSe-MJoBVe {
      background: rgba(66, 133, 244, .1)
    }

    .nsm7Bb-HzV7m-LgbsSe.MFS4be-Ia7Qfc:hover .nsm7Bb-HzV7m-LgbsSe-MJoBVe {
      background: rgba(255, 255, 255, .24)
    }

    .nsm7Bb-HzV7m-LgbsSe.MFS4be-Ia7Qfc:active .nsm7Bb-HzV7m-LgbsSe-MJoBVe,
    .nsm7Bb-HzV7m-LgbsSe.MFS4be-Ia7Qfc:focus .nsm7Bb-HzV7m-LgbsSe-MJoBVe {
      background: rgba(255, 255, 255, .32)
    }

    .nsm7Bb-HzV7m-LgbsSe .n1UuX-DkfjY {
      border-radius: 50%;
      display: -moz-box;
      display: flex;
      height: 20px;
      margin-left: -4px;
      margin-right: 8px;
      min-width: 20px;
      width: 20px
    }

    .nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-BPrWId {
      font-family: "Roboto";
      font-size: 12px;
      text-align: left
    }

    .nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-BPrWId .ssJRIf,
    .nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-BPrWId .K4efff .fmcmS {
      overflow: hidden;
      text-overflow: ellipsis
    }

    .nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-BPrWId .K4efff {
      display: -moz-box;
      display: flex;
      -moz-box-align: center;
      align-items: center;
      color: #5f6368;
      fill: #5f6368;
      font-size: 11px;
      font-weight: 400
    }

    .nsm7Bb-HzV7m-LgbsSe.jVeSEe.MFS4be-Ia7Qfc .nsm7Bb-HzV7m-LgbsSe-BPrWId .K4efff {
      color: #e8eaed;
      fill: #e8eaed
    }

    @media screen and (prefers-contrast:more) {

      .nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-BPrWId .K4efff,
      .nsm7Bb-HzV7m-LgbsSe.jVeSEe.MFS4be-Ia7Qfc .nsm7Bb-HzV7m-LgbsSe-BPrWId .K4efff {
        color: #000;
        fill: #000
      }
    }

    .nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-BPrWId .K4efff .Bz112c {
      height: 18px;
      margin: -3px -3px -3px 2px;
      min-width: 18px;
      width: 18px
    }

    .nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf {
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
      border-top-right-radius: 3px;
      border-bottom-right-radius: 3px;
      margin-left: 12px;
      margin-right: -10px
    }

    .nsm7Bb-HzV7m-LgbsSe.jVeSEe.JGcpL-RbRzK .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf {
      border-radius: 18px
    }

    .L5Fo6c-sM5MNb {
      border: 0;
      display: block;
      left: 0;
      position: relative;
      top: 0
    }

    .L5Fo6c-bF1uUb {
      -moz-border-radius: 4px;
      border-radius: 4px;
      bottom: 0;
      cursor: pointer;
      left: 0;
      position: absolute;
      right: 0;
      top: 0
    }

    .L5Fo6c-bF1uUb:focus {
      border: none;
      outline: none
    }

    sentinel {}
  </style>
  <link id="googleidentityservice" type="text/css" media="all" href="https://accounts.google.com/gsi/style"
    rel="stylesheet">
  <meta http-equiv="origin-trial"
    content="A8o5T4MyEkRZqLA9WeG2XTFdV5tsX2Prg85xyQ+RL1btVuybB1K/EQ+7JUsPK+J32oBMTnsoF9B4A+qTlL6efgQAAABweyJvcmlnaW4iOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb206NDQzIiwiZmVhdHVyZSI6IkZlZENtQnV0dG9uTW9kZSIsImV4cGlyeSI6MTc0NDY3NTIwMCwiaXNUaGlyZFBhcnR5Ijp0cnVlfQ==">
  <script src="https://philiascans.org/wp-includes/js/wp-emoji-release.min.js?ver=6.8.3" defer=""></script>
</head>

<body class="dark wpdiscuz_7.6.34">
  <div class="wrapper">
    <header>
      <div class="container">
        <div class="component">
          <button id="nav-menu-btn" class="btn nav-btn">
            <i class="fa-solid fa-bars fa-lg"></i>
          </button>


          <a class="logo" href="https://philiascans.org">
            <img src="https://philiascans.org/wp-content/uploads/2025/06/cropped-philiascans-logo-1.png"
              alt="Philia Scans">
          </a>


          <div id="nav-menu">
            <ul>
              <li>
                <a href="https://philiascans.org/" class="" data-target="ul-8cf04a97">
                  <span>Home</span>
                </a>
              </li>
              <li>
                <a href="https://philiascans.org/coins/" class="" data-target="ul-7104099e">
                  <i class="mr-1 fas fa-coins"></i> <span>BUY COINS</span>
                </a>
              </li>
              <li>
                <a href="https://philiascans.org/all-mangas/" class="" data-target="ul-4da3a453">
                  <span>All Mangas</span>
                </a>
              </li>
              <li>
                <a href="https://philiascans.org/new/" class="" data-target="ul-03c2e7e4">
                  <span>New</span>
                </a>
              </li>
              <li>
                <a href="https://philiascans.org/ranking/" class="" data-target="ul-37ae66f0">
                  <span>Ranking</span>
                </a>
              </li>
              <li>
                <a href="https://philiascans.org/links/" class="" data-target="ul-8919e5f1">
                  <span>FREE COINS</span>
                </a>
              </li>
              <li>
                <a href="" class="random-manga-link" data-target="ul-64663f46">
                  <i class="mr-1 fa-regular fa-shuffle"></i> <span>Random</span>
                </a>
              </li>
            </ul>
          </div>

          <script>
            document.addEventListener('DOMContentLoaded', function () {
              document.querySelector('.random-manga-link').addEventListener('click', function (event) {
                event.preventDefault();
                var xhr = new XMLHttpRequest();
                xhr.open('GET', 'https://philiascans.org/wp-admin/admin-ajax.php?action=random_manga', true);
                xhr.onload = function () {
                  if (xhr.status === 200) {
                    window.location.href = xhr.responseText;
                  } else {
                    console.error('Failed to fetch random manga URL');
                  }
                };
                xhr.send();
              });
            });
          </script>
          <div id="nav-search">
            <div class="modal show">

              <div class="modal-content">
                <button class="close-modal">
                  <i class="fa-solid fa-xmark"></i>
                </button>
                <div class="search-inner">
                  <form role="search" method="get" id="searchform" action="https://philiascans.org/">
                    <div class="command-bar">
                      <i class="fa-solid fa-magnifying-glass"></i>
                      <input type="text" name="s" id="live-search-input" placeholder="Search" autocomplete="off">
                      <button type="button" class="cancel-button">
                        <i class="fa-solid fa-xmark"></i>
                        <span>Cancel</span>
                      </button>
                    </div>
                  </form>
                  <div class="search-content">
                    <div class="search-results">
                      <div class="results-section">
                        <div class="manga-grid" id="search-results" style="opacity: 1;">
                        </div>
                      </div>
                    </div>
                    <div class="command-footer">
                      <div class="shortcuts">
                        <span class="shortcut">
                          <kbd>↑</kbd>
                          <kbd>↓</kbd>
                          <span>To Navigate</span>
                        </span>
                        <span class="shortcut">
                          <kbd>↵</kbd>
                          <span>Select</span>
                        </span>
                        <span class="shortcut">
                          <kbd>esc</kbd>
                          <span>Close</span>
                        </span>
                      </div>
                      <button class="view-all-results" onclick="redirectToSearchPage()">
                        See all
                        <i class="fa-solid fa-arrow-right"></i>
                      </button>
                    </div>
                  </div>
                </div>
              </div>


            </div>
          </div>

          <script>
            function redirectToSearchPage() {
              const searchInput = document.getElementById('live-search-input').value;
              const searchQuery = encodeURIComponent(searchInput.trim());
              const searchUrl = `https://philiascans.org/?post_type=wp-manga&s=${searchQuery}`;
              window.location.href = searchUrl;
            }
          </script>

          <style>
            /* Header Search */
            #nav-search-btn {
              display: block !important;
            }

            #nav-search {
              position: fixed !important;
              left: 0 !important;
              right: 0 !important;
              margin: -5rem 0 0 0 !important;
              padding: 1rem !important;
              top: 0 !important;
              bottom: 0 !important;
              pointer-events: none !important;
              z-index: 9999 !important;
              opacity: 0 !important;
              visibility: hidden !important;
              transition: margin .3s, opacity .3s, visibility .3s !important;
            }

            #nav-search .search-inner form {
              min-height: 5rem !important;
            }

            #nav-search.active {
              pointer-events: unset !important;
              margin-top: 0 !important;
              opacity: 1 !important;
              visibility: visible !important;
            }

            #nav-search.active:after {
              opacity: 1 !important;
            }

            #nav-search:after {
              position: absolute !important;
              content: "" !important;
              background: rgba(0, 0, 0, 0.9) !important;
              top: 0 !important;
              height: 100% !important;
              left: 0 !important;
              width: 100% !important;
              opacity: 0 !important;
              transition: opacity .3s, display .3s !important;
            }

            /* Search container */
            #search-results {
              position: relative;
            }

            /* Focus styling */
            .search-result-card.focused {
              background: rgba(255, 255, 255, 0.1);
              outline: 2px solid var(--color-7);
            }

            /* Loading and error states */
            .search-loading,
            .search-error,
            .no-results {
              padding: 20px;
              text-align: center;
              color: #fff;
            }

            .search-error {
              color: #ff6b6b;
            }

            /* Genre styling */
            .search-result-genre {
              display: inline-block;
              margin-left: 5px;
              padding: 2px 5px;
              border-radius: 3px;
              font-size: 10px;
              background-color: rgba(255, 255, 255, 0.1);
              color: #ccc;
            }

            /* Animation for search results */
            .search-result-card,
            .no-results,
            .search-error {
              transition: opacity 0.2s, transform 0.2s;
              opacity: 1;
              will-change: opacity, transform;
            }

            .search-result-card.fade-in,
            .no-results.fade-in,
            .search-error.fade-in {
              opacity: 0;
              transform: translateY(10px);
              animation: fadeInResult 0.2s forwards;
            }

            @keyframes fadeInResult {
              to {
                opacity: 1;
                transform: translateY(0);
              }
            }

            .search-result-card.fade-out,
            .no-results.fade-out,
            .search-error.fade-out {
              opacity: 0;
              transform: translateY(-10px);
              pointer-events: none;
            }
          </style>
          <button id="nav-search-btn" class="btn nav-btn"><i class="fa-solid fa-magnifying-glass"></i></button>

          <a href="/coins" class="btn nav-btn"><i class="fas fa-coins"></i></a>

          <div class="nav-user" id="user">

            <div class="dropdown u-menu">
              <button class="btn nav-btn ani-toggle" type="button" data-placeholder="false" data-toggle="dropdown"
                aria-expanded="false" data-target="user-ul">
                <i class="fa-solid fa-user-vneck"></i>
              </button>
              <div id="user-menu" class="dropdown-menu user-ul dropdown-menu-right">
                <a class="dropdown-item " href="https://philiascans.org/login"><i
                    class="fa-solid fa-right-to-bracket"></i> <span>Login</span></a><a class="dropdown-item "
                  href="https://philiascans.org/register"><i class="fa-solid fa-user-plus"></i>
                  <span>Register</span></a><a class="dropdown-item disabled" href=""><i
                    class="fa-solid fa-bookmark"></i> <span>Bookmarks</span></a><a class="dropdown-item "
                  href="https://philiascans.org/coins/"><i class="fas fa-coins"></i> <span>BUY COINS</span></a>
              </div>

            </div>
          </div>
        </div>
      </div>
    </header>
    <main>
      <div id="manga-page" data-id="10288">
        <div class="manga-detail">
          <div class="detail-bg hidden">
            <img src="https://philiascans.org/wp-content/uploads/2025/08/image_2025-08-25_161228991-280x400.png"
              alt="Manga Cover">
          </div>
          <div class="container">
            <div class="main-inner">

              <aside class="content hcontent">

                <div class="hposter">
                  <div class="covers">
                    <div class="cover-background"
                      style="background-image: url('https://philiascans.org/wp-content/uploads/2025/08/image_2025-08-25_161228991.png');">
                    </div>
                    <div class="main-cover">
                      <div class="manga-flag" data-type="manga">
                        <img src="https://philiascans.org/wp-content/themes/wp-esco/assets/svg/jp.svg" alt="Manga"
                          title="Manga" class="flag-icon">
                      </div>
                      <img class="cover"
                        src="https://philiascans.org/wp-content/uploads/2025/08/image_2025-08-25_161228991.png"
                        alt="Sanctuary of the Unloved Noble Lady">
                    </div>
                  </div>
                  <div class="actions">
                    <a class="btn btn-lg btn-primary readnow bhs"
                      href="https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/chapter-1"><span
                        class="sort-text">Start Reading</span><span class="sort-text">Read Now</span><i
                        class="fa-solid fa-play fa-xs"></i></a><button
                      class="bookmark-button btn btn-lg btn-secondary1 h-100 bhs-2" type="button"
                      data-post-id="10288"><span class="sort-text">Bookmark</span><i
                        class="fa-solid fa-bookmark fa-xs"></i></button>
                  </div>
                </div>

                <div class="serie-info">
                  <h1 class="serie-title">Sanctuary of the Unloved Noble Lady</h1>
                  <h6 class="alternative-title">Dare ni mo Aisarenai no de Yuka wo Migaite Itara Soko ga Seiiki-ka shita
                    Reijou no Hanashi • 誰にも愛されないので床を磨いていたらそこが聖域化した令嬢の話</h6>

                  <div class="genre-list">
                    <span class="grx">
                      <a class="genre-link" href="https://philiascans.org/manga-genre/comedy/">Comedy</a>
                      <a class="genre-link" href="https://philiascans.org/manga-genre/drama/">Drama</a>
                      <a class="genre-link" href="https://philiascans.org/manga-genre/fantasy/">Fantasy</a>
                      <a class="genre-link" href="https://philiascans.org/manga-genre/romance/">Romance</a>
                    </span>
                  </div>
                  <br>

                  <div class="description">
                    <div class="description-content collapsed">
                      Stella was never given any love from her family or any skills given by God. When her sister loses
                      the heart of her fiancé and she runs away to a monastery, Stella awakens to the joys of cleaning
                      and becomes a maid to Cecil, a prince with a reason to stay in a room filled... </div>
                  </div>

                  <a class="readmore" data-toggle="modal" href="#synopsis">Read More +</a>


                  <div class="manga-stats">
                    <div class="stat-item">
                      <div class="stat-details">
                        <span class="stat-label">Type</span>
                        <span class="manga">Manga</span>
                      </div>
                      <img class="m-icons"
                        src="https://philiascans.org/wp-content/themes/wp-esco/assets/svg/manga-info/type.svg"
                        alt="Type">
                    </div>

                    <div class="stat-item">
                      <div class="stat-details">
                        <span class="stat-label">Status</span>
                        <span class="manga">Releasing</span>
                      </div>
                      <img class="m-icons"
                        src="https://philiascans.org/wp-content/themes/wp-esco/assets/svg/manga-info/status.svg"
                        alt="Status">
                    </div>

                    <div class="stat-item">
                      <div class="stat-details">
                        <span class="stat-label">Edition</span>
                        <span class="stat-value">Scanlation</span>
                      </div>
                      <img class="m-icons"
                        src="https://philiascans.org/wp-content/themes/wp-esco/assets/svg/manga-info/ts-status.svg"
                        alt="Edition">
                    </div>

                    <div class="stat-item">
                      <div class="stat-details">
                        <span class="stat-label">Format</span>
                        <span class="stat-value">
                          Black &amp; White </span>
                      </div>
                      <img class="m-icons"
                        src="https://philiascans.org/wp-content/themes/wp-esco/assets/svg/manga-info/format.svg"
                        alt="Format">
                    </div>

                    <div class="stat-item">
                      <div class="rating-box" itemprop="aggregateRating" itemscope=""
                        itemtype="https://schema.org/AggregateRating" data-id="10288" data-score="9.5">
                        <div class="score">
                          <span class="live-label stat-label">
                            by <span itemprop="reviewCount">2</span> reviews </span>
                        </div>
                        <div class="rating-section">
                          <div class="stars" id="rating-stars">
                            <span class="active" data-value="2">
                              <i class="fa-solid fa-star"></i>
                            </span>
                            <span class="active" data-value="4">
                              <i class="fa-solid fa-star"></i>
                            </span>
                            <span class="active" data-value="6">
                              <i class="fa-solid fa-star"></i>
                            </span>
                            <span class="active" data-value="8">
                              <i class="fa-solid fa-star"></i>
                            </span>
                            <span class="active half" data-value="10">
                              <i class="fa-regular fa-star-half-stroke"></i>
                            </span>
                          </div>
                          <div>
                            <span class="live-score" itemprop="ratingValue">9.50</span>
                          </div>
                        </div>
                      </div>
                      <img class="m-icons"
                        src="https://philiascans.org/wp-content/themes/wp-esco/assets/svg/manga-info/reviews.svg"
                        alt="Reviews">
                    </div>

                    <div class="stat-item">
                      <div class="stat-details">
                        <span class="stat-label">Author</span>
                        <span class="stat-value">
                          Hidamari (II) </span>
                      </div>
                      <img class="m-icons"
                        src="https://philiascans.org/wp-content/themes/wp-esco/assets/svg/manga-info/author.svg"
                        alt="Author">
                    </div>

                    <div class="stat-item">
                      <div class="stat-details">
                        <span class="stat-label">Artist</span>
                        <span class="stat-value">
                          SATSUKI Yuki </span>
                      </div>
                      <img class="m-icons"
                        src="https://philiascans.org/wp-content/themes/wp-esco/assets/svg/manga-info/artist.svg"
                        alt="Artist">
                    </div>

                    <div class="stat-item">
                      <div class="stat-details">
                        <span class="stat-label">Release</span>
                        <span class="stat-value">
                          2022 </span>
                      </div>
                      <img class="m-icons"
                        src="https://philiascans.org/wp-content/themes/wp-esco/assets/svg/manga-info/release.svg"
                        alt="Release">
                    </div>
                  </div>

                  <div class="main-inner manga-bottom">
                    <aside class="content">
                      <section class="m-list">
                        <div class="tab-content">
                          <div class="list-menu">
                            <form class="form-inline">
                              <input class="form-control ch-filter cairo" type="text" placeholder="Number...">
                              <button class="btn">
                                <i class="fa-regular fa-magnifying-glass"></i>
                              </button>
                            </form>
                            <button class="btn btn-secondary1 ch-order">
                              <i class="fa-solid fa-arrow-down-arrow-up"></i>
                              <span class="sort-text">Newest</span>
                            </button>
                          </div>

                          <div class="list-body-hh">
                            <ul class="scroll-sm max-height-none" style="max-height: none;">
                              <li class="chapters-separator premium-separator toggle-header"
                                data-target="#premium-list">
                                <div class="separator-content">
                                  <span class="separator-line"></span>
                                  <span class="separator-text premium-text">Premium Chapters</span>
                                  <span class="separator-line"></span>
                                </div>
                              </li>
                              <div id="premium-list" class="chapter-group columns-3">
                                <li
                                  class="item premium-chapter  has-thumb premium coin-50 data-chapter-3812 premium-block"
                                  data-number="3812"
                                  data-chapter="Chapter 26.1 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                                  <a href="#" title="">
                                    <span class="contain-zeb">

                                      <div class="chapter-thumbnail">
                                        <img class="thumb"
                                          src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp">
                                      </div>
                                      <span class="coin"><i class="fas fa-coins"></i>50</span>
                                      <zebi>
                                        Chapter 26.1 <i class="fas fa-lock"></i>: </zebi>
                                    </span>
                                    <div class="ch-info">
                                      <span class="time"></span>
                                    </div>
                                  </a>
                                </li>
                                <li
                                  class="item premium-chapter  has-thumb premium coin-50 data-chapter-3427 premium-block"
                                  data-number="3427"
                                  data-chapter="Chapter 25 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                                  <a href="#" title="">
                                    <span class="contain-zeb">

                                      <div class="chapter-thumbnail">
                                        <img class="thumb"
                                          src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp">
                                      </div>
                                      <span class="coin"><i class="fas fa-coins"></i>50</span>
                                      <zebi>
                                        Chapter 25 <i class="fas fa-lock"></i>: </zebi>
                                    </span>
                                    <div class="ch-info">
                                      <span class="time"></span>
                                    </div>
                                  </a>
                                </li>
                                <li
                                  class="item premium-chapter  has-thumb premium coin-50 data-chapter-3426 premium-block"
                                  data-number="3426"
                                  data-chapter="Chapter 24 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                                  <a href="#" title="">
                                    <span class="contain-zeb">

                                      <div class="chapter-thumbnail">
                                        <img class="thumb"
                                          src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp">
                                      </div>
                                      <span class="coin"><i class="fas fa-coins"></i>50</span>
                                      <zebi>
                                        Chapter 24 <i class="fas fa-lock"></i>: </zebi>
                                    </span>
                                    <div class="ch-info">
                                      <span class="time"></span>
                                    </div>
                                  </a>
                                </li>
                                <li
                                  class="item premium-chapter  has-thumb premium coin-50 data-chapter-3424 premium-block"
                                  data-number="3424"
                                  data-chapter="Chapter 23 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                                  <a href="#" title="">
                                    <span class="contain-zeb">

                                      <div class="chapter-thumbnail">
                                        <img class="thumb"
                                          src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp">
                                      </div>
                                      <span class="coin"><i class="fas fa-coins"></i>50</span>
                                      <zebi>
                                        Chapter 23 <i class="fas fa-lock"></i>: </zebi>
                                    </span>
                                    <div class="ch-info">
                                      <span class="time"></span>
                                    </div>
                                  </a>
                                </li>
                                <li
                                  class="item premium-chapter  has-thumb premium coin-50 data-chapter-3423 premium-block"
                                  data-number="3423"
                                  data-chapter="Chapter 22 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                                  <a href="#" title="">
                                    <span class="contain-zeb">

                                      <div class="chapter-thumbnail">
                                        <img class="thumb"
                                          src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp">
                                      </div>
                                      <span class="coin"><i class="fas fa-coins"></i>50</span>
                                      <zebi>
                                        Chapter 22 <i class="fas fa-lock"></i>: </zebi>
                                    </span>
                                    <div class="ch-info">
                                      <span class="time"></span>
                                    </div>
                                  </a>
                                </li>
                                <li
                                  class="item premium-chapter  has-thumb premium coin-50 data-chapter-3422 premium-block"
                                  data-number="3422"
                                  data-chapter="Chapter 21 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                                  <a href="#" title="">
                                    <span class="contain-zeb">

                                      <div class="chapter-thumbnail">
                                        <img class="thumb"
                                          src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp">
                                      </div>
                                      <span class="coin"><i class="fas fa-coins"></i>50</span>
                                      <zebi>
                                        Chapter 21 <i class="fas fa-lock"></i>: </zebi>
                                    </span>
                                    <div class="ch-info">
                                      <span class="time"></span>
                                    </div>
                                  </a>
                                </li>
                                <li
                                  class="item premium-chapter  has-thumb premium coin-50 data-chapter-3408 premium-block"
                                  data-number="3408"
                                  data-chapter="Chapter 20 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                                  <a href="#" title="">
                                    <span class="contain-zeb">

                                      <div class="chapter-thumbnail">
                                        <img class="thumb"
                                          src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp">
                                      </div>
                                      <span class="coin"><i class="fas fa-coins"></i>50</span>
                                      <zebi>
                                        Chapter 20 <i class="fas fa-lock"></i>: </zebi>
                                    </span>
                                    <div class="ch-info">
                                      <span class="time"></span>
                                    </div>
                                  </a>
                                </li>
                                <li
                                  class="item premium-chapter  has-thumb premium coin-50 data-chapter-3407 premium-block"
                                  data-number="3407"
                                  data-chapter="Chapter 19 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                                  <a href="#" title="">
                                    <span class="contain-zeb">

                                      <div class="chapter-thumbnail">
                                        <img class="thumb"
                                          src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp">
                                      </div>
                                      <span class="coin"><i class="fas fa-coins"></i>50</span>
                                      <zebi>
                                        Chapter 19 <i class="fas fa-lock"></i>: </zebi>
                                    </span>
                                    <div class="ch-info">
                                      <span class="time"></span>
                                    </div>
                                  </a>
                                </li>
                                <li
                                  class="item premium-chapter  has-thumb premium coin-50 data-chapter-3397 premium-block"
                                  data-number="3397"
                                  data-chapter="Chapter 18 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                                  <a href="#" title="">
                                    <span class="contain-zeb">

                                      <div class="chapter-thumbnail">
                                        <img class="thumb"
                                          src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp">
                                      </div>
                                      <span class="coin"><i class="fas fa-coins"></i>50</span>
                                      <zebi>
                                        Chapter 18 <i class="fas fa-lock"></i>: </zebi>
                                    </span>
                                    <div class="ch-info">
                                      <span class="time"></span>
                                    </div>
                                  </a>
                                </li>
                                <li
                                  class="item premium-chapter  has-thumb premium coin-50 data-chapter-3396 premium-block"
                                  data-number="3396"
                                  data-chapter="Chapter 17 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                                  <a href="#" title="">
                                    <span class="contain-zeb">

                                      <div class="chapter-thumbnail">
                                        <img class="thumb"
                                          src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp">
                                      </div>
                                      <span class="coin"><i class="fas fa-coins"></i>50</span>
                                      <zebi>
                                        Chapter 17 <i class="fas fa-lock"></i>: </zebi>
                                    </span>
                                    <div class="ch-info">
                                      <span class="time"></span>
                                    </div>
                                  </a>
                                </li>
                                <li
                                  class="item premium-chapter  has-thumb premium coin-50 data-chapter-3395 premium-block"
                                  data-number="3395"
                                  data-chapter="Chapter 16 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                                  <a href="#" title="">
                                    <span class="contain-zeb">

                                      <div class="chapter-thumbnail">
                                        <img class="thumb"
                                          src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp">
                                      </div>
                                      <span class="coin"><i class="fas fa-coins"></i>50</span>
                                      <zebi>
                                        Chapter 16 <i class="fas fa-lock"></i>: </zebi>
                                    </span>
                                    <div class="ch-info">
                                      <span class="time"></span>
                                    </div>
                                  </a>
                                </li>
                                <li
                                  class="item premium-chapter  has-thumb premium coin-50 data-chapter-3394 premium-block"
                                  data-number="3394"
                                  data-chapter="Chapter 15 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                                  <a href="#" title="">
                                    <span class="contain-zeb">

                                      <div class="chapter-thumbnail">
                                        <img class="thumb"
                                          src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp">
                                      </div>
                                      <span class="coin"><i class="fas fa-coins"></i>50</span>
                                      <zebi>
                                        Chapter 15 <i class="fas fa-lock"></i>: </zebi>
                                    </span>
                                    <div class="ch-info">
                                      <span class="time"></span>
                                    </div>
                                  </a>
                                </li>
                                <li
                                  class="item premium-chapter  has-thumb premium coin-50 data-chapter-3393 premium-block"
                                  data-number="3393"
                                  data-chapter="Chapter 14 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                                  <a href="#" title="">
                                    <span class="contain-zeb">

                                      <div class="chapter-thumbnail">
                                        <img class="thumb"
                                          src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp">
                                      </div>
                                      <span class="coin"><i class="fas fa-coins"></i>50</span>
                                      <zebi>
                                        Chapter 14 <i class="fas fa-lock"></i>: </zebi>
                                    </span>
                                    <div class="ch-info">
                                      <span class="time"></span>
                                    </div>
                                  </a>
                                </li>
                                <li
                                  class="item premium-chapter  has-thumb premium coin-50 data-chapter-3392 premium-block"
                                  data-number="3392"
                                  data-chapter="Chapter 13 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                                  <a href="#" title="">
                                    <span class="contain-zeb">

                                      <div class="chapter-thumbnail">
                                        <img class="thumb"
                                          src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp">
                                      </div>
                                      <span class="coin"><i class="fas fa-coins"></i>50</span>
                                      <zebi>
                                        Chapter 13 <i class="fas fa-lock"></i>: </zebi>
                                    </span>
                                    <div class="ch-info">
                                      <span class="time"></span>
                                    </div>
                                  </a>
                                </li>
                                <li
                                  class="item premium-chapter  has-thumb premium coin-50 data-chapter-3274 premium-block"
                                  data-number="3274"
                                  data-chapter="Chapter 12 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                                  <a href="#" title="">
                                    <span class="contain-zeb">

                                      <div class="chapter-thumbnail">
                                        <img class="thumb"
                                          src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp">
                                      </div>
                                      <span class="coin"><i class="fas fa-coins"></i>50</span>
                                      <zebi>
                                        Chapter 12 <i class="fas fa-lock"></i>: </zebi>
                                    </span>
                                    <div class="ch-info">
                                      <span class="time"></span>
                                    </div>
                                  </a>
                                </li>
                              </div>

                              <li class="chapters-separator toggle-header" data-target="#free-list">
                                <div class="separator-content">
                                  <span class="separator-line"></span>
                                  <span class="separator-text">Free Chapters</span>
                                  <span class="separator-line"></span>
                                </div>
                              </li>

                              <div id="free-list" class="chapter-group columns-3">
                                <li class="item free-chapter  has-thumb free-chap" data-number="3273"
                                  data-chapter="Chapter 11">
                                  <a href="https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/chapter-11/"
                                    title="">
                                    <span class="contain-zeb">
                                      <div class="chapter-thumbnail">
                                        <img class="thumb"
                                          src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp">
                                      </div>
                                      <span class="coin free">Free</span>
                                      <zebi>
                                        Chapter 11: </zebi>
                                    </span>
                                    <div class="ch-info">
                                      <span class="time"></span>
                                    </div>
                                  </a>
                                </li>
                                <li class="item free-chapter  has-thumb free-chap" data-number="3268"
                                  data-chapter="Chapter 10">
                                  <a href="https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/chapter-10/"
                                    title="">
                                    <span class="contain-zeb">
                                      <div class="chapter-thumbnail">
                                        <img class="thumb"
                                          src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp">
                                      </div>
                                      <span class="coin free">Free</span>
                                      <zebi>
                                        Chapter 10: </zebi>
                                    </span>
                                    <div class="ch-info">
                                      <span class="time"></span>
                                    </div>
                                  </a>
                                </li>
                                <li class="item free-chapter  has-thumb free-chap" data-number="3267"
                                  data-chapter="Chapter 9">
                                  <a href="https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/chapter-9/"
                                    title="">
                                    <span class="contain-zeb">
                                      <div class="chapter-thumbnail">
                                        <img class="thumb"
                                          src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp">
                                      </div>
                                      <span class="coin free">Free</span>
                                      <zebi>
                                        Chapter 9: </zebi>
                                    </span>
                                    <div class="ch-info">
                                      <span class="time"></span>
                                    </div>
                                  </a>
                                </li>
                                <li class="item free-chapter  has-thumb free-chap" data-number="3272"
                                  data-chapter="Chapter 8">
                                  <a href="https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/chapter-8/"
                                    title="FIXED">
                                    <span class="contain-zeb">
                                      <div class="chapter-thumbnail">
                                        <img class="thumb"
                                          src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp">
                                      </div>
                                      <span class="coin free">Free</span>
                                      <zebi>
                                        Chapter 8: FIXED </zebi>
                                    </span>
                                    <div class="ch-info">
                                      <span class="time"></span>
                                    </div>
                                  </a>
                                </li>
                                <li class="item free-chapter  has-thumb free-chap" data-number="3238"
                                  data-chapter="Chapter 7">
                                  <a href="https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/chapter-7/"
                                    title="">
                                    <span class="contain-zeb">
                                      <div class="chapter-thumbnail">
                                        <img class="thumb"
                                          src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp">
                                      </div>
                                      <span class="coin free">Free</span>
                                      <zebi>
                                        Chapter 7: </zebi>
                                    </span>
                                    <div class="ch-info">
                                      <span class="time"></span>
                                    </div>
                                  </a>
                                </li>
                                <li class="item free-chapter  has-thumb free-chap" data-number="3095"
                                  data-chapter="Chapter 6">
                                  <a href="https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/chapter-6/"
                                    title="FIXED">
                                    <span class="contain-zeb">
                                      <div class="chapter-thumbnail">
                                        <img class="thumb"
                                          src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp">
                                      </div>
                                      <span class="coin free">Free</span>
                                      <zebi>
                                        Chapter 6: FIXED </zebi>
                                    </span>
                                    <div class="ch-info">
                                      <span class="time"></span>
                                    </div>
                                  </a>
                                </li>
                                <li class="item free-chapter  has-thumb free-chap" data-number="3094"
                                  data-chapter="Chapter 5">
                                  <a href="https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/chapter-5/"
                                    title="">
                                    <span class="contain-zeb">
                                      <div class="chapter-thumbnail">
                                        <img class="thumb"
                                          src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp">
                                      </div>
                                      <span class="coin free">Free</span>
                                      <zebi>
                                        Chapter 5: </zebi>
                                    </span>
                                    <div class="ch-info">
                                      <span class="time"></span>
                                    </div>
                                  </a>
                                </li>
                                <li class="item free-chapter  has-thumb free-chap" data-number="3093"
                                  data-chapter="Chapter 4">
                                  <a href="https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/chapter-4/"
                                    title="">
                                    <span class="contain-zeb">
                                      <div class="chapter-thumbnail">
                                        <img class="thumb"
                                          src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp">
                                      </div>
                                      <span class="coin free">Free</span>
                                      <zebi>
                                        Chapter 4: </zebi>
                                    </span>
                                    <div class="ch-info">
                                      <span class="time"></span>
                                    </div>
                                  </a>
                                </li>
                                <li class="item free-chapter  has-thumb free-chap" data-number="3092"
                                  data-chapter="Chapter 3">
                                  <a href="https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/chapter-3/"
                                    title="">
                                    <span class="contain-zeb">
                                      <div class="chapter-thumbnail">
                                        <img class="thumb"
                                          src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp">
                                      </div>
                                      <span class="coin free">Free</span>
                                      <zebi>
                                        Chapter 3: </zebi>
                                    </span>
                                    <div class="ch-info">
                                      <span class="time"></span>
                                    </div>
                                  </a>
                                </li>
                                <li class="item free-chapter  has-thumb free-chap" data-number="3091"
                                  data-chapter="Chapter 2">
                                  <a href="https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/chapter-2/"
                                    title="">
                                    <span class="contain-zeb">
                                      <div class="chapter-thumbnail">
                                        <img class="thumb"
                                          src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp">
                                      </div>
                                      <span class="coin free">Free</span>
                                      <zebi>
                                        Chapter 2: </zebi>
                                    </span>
                                    <div class="ch-info">
                                      <span class="time"></span>
                                    </div>
                                  </a>
                                </li>
                                <li class="item free-chapter  has-thumb free-chap" data-number="3090"
                                  data-chapter="Chapter 1">
                                  <a href="https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/chapter-1/"
                                    title="">
                                    <span class="contain-zeb">
                                      <div class="chapter-thumbnail">
                                        <img class="thumb"
                                          src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp">
                                      </div>
                                      <span class="coin free">Free</span>
                                      <zebi>
                                        Chapter 1: </zebi>
                                    </span>
                                    <div class="ch-info">
                                      <span class="time"></span>
                                    </div>
                                  </a>
                                </li>
                              </div>
                            </ul>
                          </div>

                          <style>
                            .chapters-separator {
                              padding: 15px 0;
                              list-style: none;
                              cursor: pointer;
                            }

                            .separator-content {
                              display: flex;
                              align-items: center;
                              justify-content: center;
                            }

                            .separator-line {
                              flex-grow: 1;
                              height: 1px;
                              background-color: #ffffff;
                            }

                            .separator-text {
                              margin: 0 10px;
                              font-size: 14px;
                              color: #aaa;
                              text-transform: uppercase;
                              letter-spacing: 1px;
                              padding: 0 10px;
                              background-color: #222;
                            }

                            .premium-text {
                              color: gold;
                            }

                            .premium-separator .separator-line {
                              background-color: #ffd700;
                            }

                            .chapter-group {
                              transition: max-height 0.3s ease;
                              display: flex;
                              flex-direction: column;
                              gap: 6px;
                            }

                            .chapter-group.hidden {
                              display: none;
                            }
                          </style>

                          <script>
                            /*--------------------------------------------------------------
                            >>> Manga Single - Chapter/volume order
                            ----------------------------------------------------------------*/
                            const orderButton = document.querySelector('.ch-order');
                            const filterInput = document.querySelector('.ch-filter');
                            const premiumList = document.querySelector('#premium-list');
                            const freeList = document.querySelector('#free-list');

                            if (orderButton && filterInput && (premiumList || freeList)) {
                              function extractNumber(item) {
                                return parseFloat(item.dataset.chapter) || 0;
                              }

                              function sortSection(section) {
                                const items = Array.from(section.querySelectorAll('.item'));
                                const isAscending = orderButton.classList.contains('asc');

                                items.sort((a, b) => {
                                  const aNumber = extractNumber(a);
                                  const bNumber = extractNumber(b);
                                  return isAscending ? aNumber - bNumber : bNumber - aNumber;
                                }).forEach(item => section.appendChild(item));
                              }

                              function sortItems() {
                                const isAscending = orderButton.classList.toggle('asc');
                                const sortTextElement = orderButton.querySelector('.sort-text');

                                if (sortTextElement) {
                                  sortTextElement.textContent = isAscending
                                    ? ajax_manga_params.messages.oldest
                                    : ajax_manga_params.messages.newest;
                                }

                                if (premiumList) sortSection(premiumList);
                                if (freeList) sortSection(freeList);
                              }

                              function filterItems() {
                                const filterText = filterInput.value.toLowerCase();
                                [premiumList, freeList].forEach(section => {
                                  if (section) {
                                    Array.from(section.querySelectorAll('.item')).forEach(item => {
                                      const numberText = extractNumber(item).toString();
                                      item.style.display = numberText.includes(filterText) ? '' : 'none';
                                    });
                                  }
                                });
                              }

                              orderButton.addEventListener('click', sortItems);
                              filterInput.addEventListener('input', filterItems);
                            }

                            document.querySelectorAll('.toggle-header').forEach(header => {
                              header.addEventListener('click', () => {
                                const target = document.querySelector(header.dataset.target);
                                if (target) {
                                  target.classList.toggle('hidden');
                                }
                              });
                            });

                          </script>
                        </div>
                      </section>
                    </aside>
                    <section class="default-style comments-section">
                      <div class="body p-4 comments">


                        <div class="wpdiscuz_top_clearing"></div>
                        <div id="comments" class="comments-area">
                          <div id="respond" style="width: 0;height: 0;clear: both;margin: 0;padding: 0;"></div>
                          <style type="text/css">
                            /* Wpdcom */
                            #wpdcom {
                              width: auto !important;
                              max-width: none;
                            }

                            /* Comments */
                            #comments {
                              max-width: none;
                              Padding: 25px;
                              margin-top: 25px !important;
                            }
                          </style>
                          <div id="wpd-post-rating" class="wpd-not-rated">
                            <div class="wpd-rating-wrap">
                              <div class="wpd-rating-left"></div>
                              <div class="wpd-rating-data">
                                <div class="wpd-rating-value">
                                  <span class="wpdrv">5</span>
                                  <span class="wpdrc">1</span>
                                  <span class="wpdrt">vote</span>
                                </div>
                                <div class="wpd-rating-title">Article Rating</div>
                                <div class="wpd-rating-stars"><svg xmlns="https://www.w3.org/2000/svg"
                                    viewBox="0 0 24 24">
                                    <path d="M0 0h24v24H0z" fill="none"></path>
                                    <path class="wpd-star wpd-active"
                                      d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z">
                                    </path>
                                    <path d="M0 0h24v24H0z" fill="none"></path>
                                  </svg><svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                    <path d="M0 0h24v24H0z" fill="none"></path>
                                    <path class="wpd-star wpd-active"
                                      d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z">
                                    </path>
                                    <path d="M0 0h24v24H0z" fill="none"></path>
                                  </svg><svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                    <path d="M0 0h24v24H0z" fill="none"></path>
                                    <path class="wpd-star wpd-active"
                                      d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z">
                                    </path>
                                    <path d="M0 0h24v24H0z" fill="none"></path>
                                  </svg><svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                    <path d="M0 0h24v24H0z" fill="none"></path>
                                    <path class="wpd-star wpd-active"
                                      d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z">
                                    </path>
                                    <path d="M0 0h24v24H0z" fill="none"></path>
                                  </svg><svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                    <path d="M0 0h24v24H0z" fill="none"></path>
                                    <path class="wpd-star wpd-active"
                                      d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z">
                                    </path>
                                    <path d="M0 0h24v24H0z" fill="none"></path>
                                  </svg></div>
                                <div class="wpd-rate-starts"><svg xmlns="https://www.w3.org/2000/svg"
                                    viewBox="0 0 24 24">
                                    <path d="M0 0h24v24H0z" fill="none"></path>
                                    <path class="wpd-star"
                                      d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z">
                                    </path>
                                    <path d="M0 0h24v24H0z" fill="none"></path>
                                  </svg><svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                    <path d="M0 0h24v24H0z" fill="none"></path>
                                    <path class="wpd-star"
                                      d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z">
                                    </path>
                                    <path d="M0 0h24v24H0z" fill="none"></path>
                                  </svg><svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                    <path d="M0 0h24v24H0z" fill="none"></path>
                                    <path class="wpd-star"
                                      d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z">
                                    </path>
                                    <path d="M0 0h24v24H0z" fill="none"></path>
                                  </svg><svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                    <path d="M0 0h24v24H0z" fill="none"></path>
                                    <path class="wpd-star"
                                      d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z">
                                    </path>
                                    <path d="M0 0h24v24H0z" fill="none"></path>
                                  </svg><svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                    <path d="M0 0h24v24H0z" fill="none"></path>
                                    <path class="wpd-star"
                                      d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z">
                                    </path>
                                    <path d="M0 0h24v24H0z" fill="none"></path>
                                  </svg></div>
                              </div>
                              <div class="wpd-rating-right"></div>
                            </div>
                          </div>
                          <div id="wpdcom" class="wpdiscuz_unauth wpd-dark wpd-layout-3 wpd-comments-open">
                            <div class="wc_social_plugin_wrapper">
                            </div>
                            <div class="wpd-form-wrap">
                              <div class="wpd-form-head">
                                <div class="wpd-sbs-toggle">
                                  <i class="far fa-envelope"></i> <span class="wpd-sbs-title">Subscribe</span>
                                  <i class="fas fa-caret-down"></i>
                                </div>
                                <div class="wpd-auth">
                                  <div class="wpd-login">
                                    <a rel="nofollow"
                                      href="https://philiascans.org/wp-login.php?redirect_to=https%3A%2F%2Fphiliascans.org%2Fseries%2Fsanctuary-of-the-unloved-noble-lady%2F"><i
                                        class="fas fa-sign-in-alt"></i> Login</a>
                                  </div>
                                </div>
                              </div>
                              <div class="wpdiscuz-subscribe-bar wpdiscuz-hidden">
                                <form action="https://philiascans.org/wp-admin/admin-ajax.php?action=wpdAddSubscription"
                                  method="post" id="wpdiscuz-subscribe-form">
                                  <div class="wpdiscuz-subscribe-form-intro">Notify of </div>
                                  <div class="wpdiscuz-subscribe-form-option" style="width:40%;">
                                    <select class="wpdiscuz_select" name="wpdiscuzSubscriptionType">
                                      <option value="post">new follow-up comments</option>
                                      <option value="all_comment">new replies to my comments</option>
                                    </select>
                                  </div>
                                  <div class="wpdiscuz-item wpdiscuz-subscribe-form-email">
                                    <input class="email" type="email" name="wpdiscuzSubscriptionEmail"
                                      required="required" value="" placeholder="Email">
                                  </div>
                                  <div class="wpdiscuz-subscribe-form-button">
                                    <input id="wpdiscuz_subscription_button" class="wpd-prim-button wpd_not_clicked"
                                      type="submit" value="›" name="wpdiscuz_subscription_button">
                                  </div>
                                  <input type="hidden" id="wpdiscuz_subscribe_form_nonce"
                                    name="wpdiscuz_subscribe_form_nonce" value="24a74e8a7c"><input type="hidden"
                                    name="_wp_http_referer" value="/series/sanctuary-of-the-unloved-noble-lady/">
                                </form>
                              </div>
                              <div class="wpd-form wpd-form-wrapper wpd-main-form-wrapper"
                                id="wpd-main-form-wrapper-0_0">
                                <form method="post" enctype="multipart/form-data" data-uploading="false"
                                  class="wpd_comm_form wpd_main_comm_form">
                                  <div class="wpd-field-comment">
                                    <div class="wpdiscuz-item wc-field-textarea">
                                      <div class="wpdiscuz-textarea-wrap ">
                                        <div class="wpd-avatar">
                                          <img alt="guest"
                                            src="https://secure.gravatar.com/avatar/f32d953a5842cf1a3c72802ac478911a53174b0dd8476848ac1b7701c5da11aa?s=56&amp;d=mm&amp;r=g"
                                            srcset="https://secure.gravatar.com/avatar/f32d953a5842cf1a3c72802ac478911a53174b0dd8476848ac1b7701c5da11aa?s=112&amp;d=mm&amp;r=g 2x"
                                            class="avatar avatar-56 photo" height="56" width="56" decoding="async">
                                        </div>
                                        <div id="wpd-editor-wraper-0_0" style="">

                                          <label style="display: none;" for="wc-textarea-0_0">Label</label>

                                          <div id="wpd-editor-0_0" class="ql-container ql-snow">
                                            <div class="ql-editor ql-blank" data-gramm="false" contenteditable="true"
                                              data-placeholder="Join the discussion">
                                              <p><br></p>
                                            </div>
                                            <div class="ql-clipboard" contenteditable="true" tabindex="-1"></div>
                                            <div class="ql-tooltip ql-hidden"><a class="ql-preview" target="_blank"
                                                href="about:blank"></a><input type="text" data-formula="e=mc^2"
                                                data-link="https://example.com" data-video="Embed URL"><a
                                                class="ql-action"></a><a class="ql-remove"></a></div>
                                            <div class="ql-texteditor"><textarea id="wc-textarea-0_0" name="wc_comment"
                                                class="wc_comment wpd-field" style="display: none;"></textarea></div>
                                          </div>
                                          <div id="wpd-editor-toolbar-0_0" class="ql-toolbar ql-snow">
                                            <button title="Bold" class="ql-bold" type="button"><svg viewBox="0 0 18 18">
                                                <path class="ql-stroke"
                                                  d="M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z">
                                                </path>
                                                <path class="ql-stroke"
                                                  d="M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z">
                                                </path>
                                              </svg></button>
                                            <button title="Italic" class="ql-italic" type="button"><svg
                                                viewBox="0 0 18 18">
                                                <line class="ql-stroke" x1="7" x2="13" y1="4" y2="4"></line>
                                                <line class="ql-stroke" x1="5" x2="11" y1="14" y2="14"></line>
                                                <line class="ql-stroke" x1="8" x2="10" y1="14" y2="4"></line>
                                              </svg></button>
                                            <button title="Underline" class="ql-underline" type="button"><svg
                                                viewBox="0 0 18 18">
                                                <path class="ql-stroke"
                                                  d="M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3"></path>
                                                <rect class="ql-fill" height="1" rx="0.5" ry="0.5" width="12" x="3"
                                                  y="15"></rect>
                                              </svg></button>
                                            <button title="Strike" class="ql-strike" type="button"><svg
                                                viewBox="0 0 18 18">
                                                <line class="ql-stroke ql-thin" x1="15.5" x2="2.5" y1="8.5" y2="9.5">
                                                </line>
                                                <path class="ql-fill"
                                                  d="M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z">
                                                </path>
                                                <path class="ql-fill"
                                                  d="M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z">
                                                </path>
                                              </svg></button>
                                            <button title="Ordered List" class="ql-list" value="ordered"
                                              type="button"><svg viewBox="0 0 18 18">
                                                <line class="ql-stroke" x1="7" x2="15" y1="4" y2="4"></line>
                                                <line class="ql-stroke" x1="7" x2="15" y1="9" y2="9"></line>
                                                <line class="ql-stroke" x1="7" x2="15" y1="14" y2="14"></line>
                                                <line class="ql-stroke ql-thin" x1="2.5" x2="4.5" y1="5.5" y2="5.5">
                                                </line>
                                                <path class="ql-fill"
                                                  d="M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z">
                                                </path>
                                                <path class="ql-stroke ql-thin"
                                                  d="M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156">
                                                </path>
                                                <path class="ql-stroke ql-thin"
                                                  d="M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109">
                                                </path>
                                              </svg></button>
                                            <button title="Unordered List" class="ql-list" value="bullet"
                                              type="button"><svg viewBox="0 0 18 18">
                                                <line class="ql-stroke" x1="6" x2="15" y1="4" y2="4"></line>
                                                <line class="ql-stroke" x1="6" x2="15" y1="9" y2="9"></line>
                                                <line class="ql-stroke" x1="6" x2="15" y1="14" y2="14"></line>
                                                <line class="ql-stroke" x1="3" x2="3" y1="4" y2="4"></line>
                                                <line class="ql-stroke" x1="3" x2="3" y1="9" y2="9"></line>
                                                <line class="ql-stroke" x1="3" x2="3" y1="14" y2="14"></line>
                                              </svg></button>
                                            <button title="Blockquote" class="ql-blockquote" type="button"><svg
                                                viewBox="0 0 18 18">
                                                <rect class="ql-fill ql-stroke" height="3" width="3" x="4" y="5"></rect>
                                                <rect class="ql-fill ql-stroke" height="3" width="3" x="11" y="5">
                                                </rect>
                                                <path class="ql-even ql-fill ql-stroke" d="M7,8c0,4.031-3,5-3,5"></path>
                                                <path class="ql-even ql-fill ql-stroke" d="M14,8c0,4.031-3,5-3,5">
                                                </path>
                                              </svg></button>
                                            <button title="Code Block" class="ql-code-block" type="button"><svg
                                                viewBox="0 0 18 18">
                                                <polyline class="ql-even ql-stroke" points="5 7 3 9 5 11"></polyline>
                                                <polyline class="ql-even ql-stroke" points="13 7 15 9 13 11"></polyline>
                                                <line class="ql-stroke" x1="10" x2="8" y1="5" y2="13"></line>
                                              </svg></button>
                                            <button title="Link" class="ql-link" type="button"><svg viewBox="0 0 18 18">
                                                <line class="ql-stroke" x1="7" x2="11" y1="7" y2="11"></line>
                                                <path class="ql-even ql-stroke"
                                                  d="M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z">
                                                </path>
                                                <path class="ql-even ql-stroke"
                                                  d="M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z">
                                                </path>
                                              </svg></button>
                                            <button title="Source Code" class="ql-sourcecode"
                                              data-wpde_button_name="sourcecode" type="button">{}</button>
                                            <button title="Spoiler" class="ql-spoiler" data-wpde_button_name="spoiler"
                                              type="button">[+]</button>
                                            <div class="wpd-editor-buttons-right">
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="wpd-form-foot">
                                    <div class="wpdiscuz-textarea-foot">
                                      <div class="wpdiscuz-button-actions"></div>
                                    </div>
                                    <div class="wpd-form-row">
                                      <div class="wpd-form-col-left">
                                        <div class="wpdiscuz-item wc_name-wrapper wpd-has-icon">
                                          <div class="wpd-field-icon"><i class="fas fa-user"></i>
                                          </div>
                                          <input id="wc_name-0_0" value="" required="required" aria-required="true"
                                            class="wc_name wpd-field" type="text" name="wc_name" placeholder="Name*"
                                            maxlength="50" pattern=".{3,50}" title="">
                                          <label for="wc_name-0_0" class="wpdlb">Name*</label>
                                        </div>
                                        <div class="wpdiscuz-item wc_email-wrapper wpd-has-icon">
                                          <div class="wpd-field-icon"><i class="fas fa-at"></i>
                                          </div>
                                          <input id="wc_email-0_0" value="" required="required" aria-required="true"
                                            class="wc_email wpd-field" type="email" name="wc_email"
                                            placeholder="Email*">
                                          <label for="wc_email-0_0" class="wpdlb">Email*</label>
                                        </div>
                                        <div class="wpdiscuz-item wc_website-wrapper wpd-has-icon">
                                          <div class="wpd-field-icon"><i class="fas fa-link"></i>
                                          </div>
                                          <input id="wc_website-0_0" value="" class="wc_website wpd-field" type="text"
                                            name="wc_website" placeholder="Website">
                                          <label for="wc_website-0_0" class="wpdlb">Website</label>
                                        </div>
                                      </div>
                                      <div class="wpd-form-col-right">
                                        <div class="wc-field-submit">
                                          <label class="wpd_label" wpd-tooltip="Notify of new replies to this comment">
                                            <input id="wc_notification_new_comment-0_0"
                                              class="wc_notification_new_comment-0_0 wpd_label__checkbox"
                                              value="comment" type="checkbox" name="wpdiscuz_notification_type">
                                            <span class="wpd_label__text">
                                              <span class="wpd_label__check">
                                                <i class="fas fa-bell wpdicon wpdicon-on"></i>
                                                <i class="fas fa-bell-slash wpdicon wpdicon-off"></i>
                                              </span>
                                            </span>
                                          </label>
                                          <input id="wpd-field-submit-0_0"
                                            class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit"
                                            name="submit" value="Post Comment" aria-label="Post Comment">
                                        </div>
                                      </div>
                                      <div class="clearfix"></div>
                                    </div>
                                  </div>
                                  <input type="hidden" class="wpdiscuz_unique_id" value="0_0" name="wpdiscuz_unique_id">
                                  <input type="hidden" name="wp_manga_chapter_id" value="0">
                                </form>
                              </div>
                              <div id="wpdiscuz_hidden_secondary_form" style="display: none;">
                                <div class="wpd-form wpd-form-wrapper wpd-secondary-form-wrapper"
                                  id="wpd-secondary-form-wrapper-wpdiscuzuniqueid" style="display: none;">
                                  <div class="wpd-secondary-forms-social-content"></div>
                                  <div class="clearfix"></div>
                                  <form method="post" enctype="multipart/form-data" data-uploading="false"
                                    class="wpd_comm_form wpd-secondary-form-wrapper">
                                    <div class="wpd-field-comment">
                                      <div class="wpdiscuz-item wc-field-textarea">
                                        <div class="wpdiscuz-textarea-wrap ">
                                          <div class="wpd-avatar">
                                            <img alt="guest"
                                              src="https://secure.gravatar.com/avatar/48f4b44f8f299c3641278c07fe055960db1c4b4e04cbc75b1e4b20f570ce4b55?s=56&amp;d=mm&amp;r=g"
                                              srcset="https://secure.gravatar.com/avatar/48f4b44f8f299c3641278c07fe055960db1c4b4e04cbc75b1e4b20f570ce4b55?s=112&amp;d=mm&amp;r=g 2x"
                                              class="avatar avatar-56 photo" height="56" width="56" decoding="async">
                                          </div>
                                          <div id="wpd-editor-wraper-wpdiscuzuniqueid" style="display: none;">
                                            <div id="wpd-editor-char-counter-wpdiscuzuniqueid"
                                              class="wpd-editor-char-counter"></div>
                                            <label style="display: none;"
                                              for="wc-textarea-wpdiscuzuniqueid">Label</label>
                                            <textarea id="wc-textarea-wpdiscuzuniqueid" name="wc_comment"
                                              class="wc_comment wpd-field"></textarea>
                                            <div id="wpd-editor-wpdiscuzuniqueid"></div>
                                            <div id="wpd-editor-toolbar-wpdiscuzuniqueid">
                                              <button title="Bold" class="ql-bold"></button>
                                              <button title="Italic" class="ql-italic"></button>
                                              <button title="Underline" class="ql-underline"></button>
                                              <button title="Strike" class="ql-strike"></button>
                                              <button title="Ordered List" class="ql-list" value="ordered"></button>
                                              <button title="Unordered List" class="ql-list" value="bullet"></button>
                                              <button title="Blockquote" class="ql-blockquote"></button>
                                              <button title="Code Block" class="ql-code-block"></button>
                                              <button title="Link" class="ql-link"></button>
                                              <button title="Source Code" class="ql-sourcecode"
                                                data-wpde_button_name="sourcecode">{}</button>
                                              <button title="Spoiler" class="ql-spoiler"
                                                data-wpde_button_name="spoiler">[+]</button>
                                              <div class="wpd-editor-buttons-right">
                                              </div>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                    <div class="wpd-form-foot">
                                      <div class="wpdiscuz-textarea-foot">
                                        <div class="wpdiscuz-button-actions"></div>
                                      </div>
                                      <div class="wpd-form-row">
                                        <div class="wpd-form-col-left">
                                          <div class="wpdiscuz-item wc_name-wrapper wpd-has-icon">
                                            <div class="wpd-field-icon"><i class="fas fa-user"></i>
                                            </div>
                                            <input id="wc_name-wpdiscuzuniqueid" value="" required="required"
                                              aria-required="true" class="wc_name wpd-field" type="text" name="wc_name"
                                              placeholder="Name*" maxlength="50" pattern=".{3,50}" title="">
                                            <label for="wc_name-wpdiscuzuniqueid" class="wpdlb">Name*</label>
                                          </div>
                                          <div class="wpdiscuz-item wc_email-wrapper wpd-has-icon">
                                            <div class="wpd-field-icon"><i class="fas fa-at"></i>
                                            </div>
                                            <input id="wc_email-wpdiscuzuniqueid" value="" required="required"
                                              aria-required="true" class="wc_email wpd-field" type="email"
                                              name="wc_email" placeholder="Email*">
                                            <label for="wc_email-wpdiscuzuniqueid" class="wpdlb">Email*</label>
                                          </div>
                                          <div class="wpdiscuz-item wc_website-wrapper wpd-has-icon">
                                            <div class="wpd-field-icon"><i class="fas fa-link"></i>
                                            </div>
                                            <input id="wc_website-wpdiscuzuniqueid" value=""
                                              class="wc_website wpd-field" type="text" name="wc_website"
                                              placeholder="Website">
                                            <label for="wc_website-wpdiscuzuniqueid" class="wpdlb">Website</label>
                                          </div>
                                        </div>
                                        <div class="wpd-form-col-right">
                                          <div class="wc-field-submit">
                                            <label class="wpd_label"
                                              wpd-tooltip="Notify of new replies to this comment">
                                              <input id="wc_notification_new_comment-wpdiscuzuniqueid"
                                                class="wc_notification_new_comment-wpdiscuzuniqueid wpd_label__checkbox"
                                                value="comment" type="checkbox" name="wpdiscuz_notification_type">
                                              <span class="wpd_label__text">
                                                <span class="wpd_label__check">
                                                  <i class="fas fa-bell wpdicon wpdicon-on"></i>
                                                  <i class="fas fa-bell-slash wpdicon wpdicon-off"></i>
                                                </span>
                                              </span>
                                            </label>
                                            <input id="wpd-field-submit-wpdiscuzuniqueid"
                                              class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit"
                                              name="submit" value="Post Comment" aria-label="Post Comment">
                                          </div>
                                        </div>
                                        <div class="clearfix"></div>
                                      </div>
                                    </div>
                                    <input type="hidden" class="wpdiscuz_unique_id" value="wpdiscuzuniqueid"
                                      name="wpdiscuz_unique_id">
                                    <input type="hidden" name="wp_manga_chapter_id" value="0">
                                  </form>
                                </div>
                              </div>
                            </div>
                            <div id="wpd-threads" class="wpd-thread-wrapper">
                              <div class="wpd-thread-head">
                                <div class="wpd-thread-info " data-comments-count="3">
                                  <span class="wpdtc" title="3">3</span> Comments
                                </div>
                                <div class="wpd-space"></div>
                                <div class="wpd-thread-filter">
                                  <div class="wpd-filter wpdf-reacted wpd_not_clicked "
                                    wpd-tooltip="Most reacted comment">
                                    <i class="fas fa-bolt"></i>
                                  </div>
                                  <div class="wpd-filter wpdf-hottest wpd_not_clicked "
                                    wpd-tooltip="Hottest comment thread">
                                    <i class="fas fa-fire"></i>
                                  </div>
                                  <div class="wpd-filter wpdf-sorting ">
                                    <span
                                      class="wpdiscuz-sort-button wpdiscuz-date-sort-asc wpdiscuz-sort-button-active"
                                      data-sorting="oldest">Oldest</span>
                                    <i class="fas fa-sort-down"></i>
                                    <div class="wpdiscuz-sort-buttons">
                                      <span class="wpdiscuz-sort-button wpdiscuz-date-sort-desc"
                                        data-sorting="newest">Newest</span>
                                      <span class="wpdiscuz-sort-button wpdiscuz-vote-sort-up"
                                        data-sorting="by_vote">Most Voted</span>
                                    </div>
                                  </div>
                                </div>
                              </div>
                              <div class="wpd-comment-info-bar">
                                <div class="wpd-current-view"><i class="fas fa-quote-left"></i> Inline Feedbacks </div>
                                <div class="wpd-filter-view-all">View all comments</div>
                              </div>
                              <div class="wpd-thread-list">
                                <div id="wpd-comm-14699_0"
                                  class="comment even thread-even depth-1 wpd-comment wpd_comment_level-1">
                                  <div class="wpd-comment-wrap wpd-blog-guest">
                                    <div class="wpd-comment-left ">
                                      <div class="wpd-avatar ">
                                        <img alt="Fksoakwow"
                                          src="https://secure.gravatar.com/avatar/d6bf19991aaba32475c0f71da536d2d66bb6e5faaba36bef15660856ca2c4b54?s=64&amp;d=mm&amp;r=g"
                                          srcset="https://secure.gravatar.com/avatar/d6bf19991aaba32475c0f71da536d2d66bb6e5faaba36bef15660856ca2c4b54?s=128&amp;d=mm&amp;r=g 2x"
                                          class="avatar avatar-64 photo" height="64" width="64" decoding="async">
                                      </div>
                                    </div>
                                    <div id="comment-14699" class="wpd-comment-right">
                                      <div class="wpd-comment-header">
                                        <div class="wpd-comment-author ">
                                          Fksoakwow
                                        </div>


                                        <div class="wpd-comment-share wpd-hidden wpd-tooltip wpd-top">
                                          <i class="fas fa-share-alt" aria-hidden="true"></i>
                                          <div class="wpd-tooltip-content">
                                            <a class="wc_tw" rel="noreferrer" target="_blank" href="https://twitter.com/intent/tweet?text=So wholesome
&amp;url=https%3A%2F%2Fphiliascans.org%2Fseries%2Fsanctuary-of-the-unloved-noble-lady%2F%23comment-14699"
                                              title="Share On X"><i class="wpf-cta" aria-hidden="true"><svg
                                                  xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                                                  <path
                                                    d="M389.2 48h70.6L305.6 224.2 487 464H345L233.7 318.6 106.5 464H35.8L200.7 275.5 26.8 48H172.4L272.9 180.9 389.2 48zM364.4 421.8h39.1L151.1 88h-42L364.4 421.8z">
                                                  </path>
                                                </svg></i></a><a class="wc_vk" rel="noreferrer" target="_blank"
                                              href="https://vk.com/share.php?url=https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/"
                                              title="Share On VKontakte"><i class="wpf-cta" aria-hidden="true"><svg
                                                  xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
                                                  <path
                                                    d="M31.5 63.5C0 95 0 145.7 0 247V265C0 366.3 0 417 31.5 448.5C63 480 113.7 480 215 480H233C334.3 480 385 480 416.5 448.5C448 417 448 366.3 448 265V247C448 145.7 448 95 416.5 63.5C385 32 334.3 32 233 32H215C113.7 32 63 32 31.5 63.5zM75.6 168.3H126.7C128.4 253.8 166.1 290 196 297.4V168.3H244.2V242C273.7 238.8 304.6 205.2 315.1 168.3H363.3C359.3 187.4 351.5 205.6 340.2 221.6C328.9 237.6 314.5 251.1 297.7 261.2C316.4 270.5 332.9 283.6 346.1 299.8C359.4 315.9 369 334.6 374.5 354.7H321.4C316.6 337.3 306.6 321.6 292.9 309.8C279.1 297.9 262.2 290.4 244.2 288.1V354.7H238.4C136.3 354.7 78 284.7 75.6 168.3z">
                                                  </path>
                                                </svg></i></a><a class="wc_ok" rel="noreferrer" target="_blank"
                                              href="https://connect.ok.ru/offer?url=https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/"
                                              title="Share On Odnoklassniki"><i class="wpf-cta" aria-hidden="true"><svg
                                                  xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
                                                  <path
                                                    d="M275.1 334c-27.4 17.4-65.1 24.3-90 26.9l20.9 20.6 76.3 76.3c27.9 28.6-17.5 73.3-45.7 45.7-19.1-19.4-47.1-47.4-76.3-76.6L84 503.4c-28.2 27.5-73.6-17.6-45.4-45.7 19.4-19.4 47.1-47.4 76.3-76.3l20.6-20.6c-24.6-2.6-62.9-9.1-90.6-26.9-32.6-21-46.9-33.3-34.3-59 7.4-14.6 27.7-26.9 54.6-5.7 0 0 36.3 28.9 94.9 28.9s94.9-28.9 94.9-28.9c26.9-21.1 47.1-8.9 54.6 5.7 12.4 25.7-1.9 38-34.5 59.1zM30.3 129.7C30.3 58 88.6 0 160 0s129.7 58 129.7 129.7c0 71.4-58.3 129.4-129.7 129.4s-129.7-58-129.7-129.4zm66 0c0 35.1 28.6 63.7 63.7 63.7s63.7-28.6 63.7-63.7c0-35.4-28.6-64-63.7-64s-63.7 28.6-63.7 64z">
                                                  </path>
                                                </svg></i></a>
                                          </div>
                                        </div>

                                        <div class="wpd-space"></div>
                                        <div class="wpd-comment-link wpd-hidden">
                                          <span wpd-tooltip="Comment Link" wpd-tooltip-position="left"><i
                                              class="fas fa-link" aria-hidden="true"
                                              data-wpd-clipboard="https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/#comment-14699"></i></span>
                                        </div>
                                      </div>
                                      <div class="wpd-comment-subheader">

                                        <div class="wpd-comment-date" title="August 26, 2025 12:46 am">
                                          <i class="far fa-clock" aria-hidden="true"></i>
                                          1 month ago
                                        </div>

                                      </div>

                                      <div class="wpd-comment-text">
                                        <p>So wholesome</p>

                                      </div>
                                      <div class="wpd-comment-footer">
                                        <div class="wpd-vote">
                                          <div class="wpd-vote-up wpd_not_clicked">
                                            <svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                              <path fill="none" d="M0 0h24v24H0V0z"></path>
                                              <path
                                                d="M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2z">
                                              </path>
                                            </svg>
                                          </div>
                                          <div class="wpd-vote-result" title="0">0</div>
                                          <div class="wpd-vote-down wpd_not_clicked">
                                            <svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                              <path fill="none" d="M0 0h24v24H0z"></path>
                                              <path
                                                d="M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v2c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z">
                                              </path>
                                            </svg>
                                          </div>
                                        </div>
                                        <div class="wpd-reply-button">
                                          <svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                            <path d="M10 9V5l-7 7 7 7v-4.1c5 0 8.5 1.6 11 5.1-1-5-4-10-11-11z"></path>
                                            <path d="M0 0h24v24H0z" fill="none"></path>
                                          </svg>
                                          <span>Reply</span>
                                        </div>
                                        <div class="wpd-wpanel"></div>
                                        <div class="wpd-space"></div>

                                      </div>
                                    </div>
                                  </div>
                                  <div id="wpdiscuz_form_anchor-14699_0"></div>
                                </div>
                                <div id="wpd-comm-16976_0"
                                  class="comment odd alt thread-odd thread-alt depth-1 wpd-comment wpd_comment_level-1">
                                  <div class="wpd-comment-wrap wpd-blog-guest">
                                    <div class="wpd-comment-left ">
                                      <div class="wpd-avatar ">
                                        <img alt="guestguest123"
                                          src="https://philiascans.org/wp-content/uploads/2025/09/pfp_68cbbcb0741fb.jpg"
                                          class="avatar avatar-64 photo" height="64" width="64">
                                      </div>
                                    </div>
                                    <div id="comment-16976" class="wpd-comment-right">
                                      <div class="wpd-comment-header">
                                        <div class="wpd-comment-author ">
                                          guestguest123
                                        </div>


                                        <div class="wpd-comment-share wpd-hidden wpd-tooltip wpd-top">
                                          <i class="fas fa-share-alt" aria-hidden="true"></i>
                                          <div class="wpd-tooltip-content">
                                            <a class="wc_tw" rel="noreferrer" target="_blank" href="https://twitter.com/intent/tweet?text=Quite interesting
&amp;url=https%3A%2F%2Fphiliascans.org%2Fseries%2Fsanctuary-of-the-unloved-noble-lady%2F%23comment-16976"
                                              title="Share On X"><i class="wpf-cta" aria-hidden="true"><svg
                                                  xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                                                  <path
                                                    d="M389.2 48h70.6L305.6 224.2 487 464H345L233.7 318.6 106.5 464H35.8L200.7 275.5 26.8 48H172.4L272.9 180.9 389.2 48zM364.4 421.8h39.1L151.1 88h-42L364.4 421.8z">
                                                  </path>
                                                </svg></i></a><a class="wc_vk" rel="noreferrer" target="_blank"
                                              href="https://vk.com/share.php?url=https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/"
                                              title="Share On VKontakte"><i class="wpf-cta" aria-hidden="true"><svg
                                                  xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
                                                  <path
                                                    d="M31.5 63.5C0 95 0 145.7 0 247V265C0 366.3 0 417 31.5 448.5C63 480 113.7 480 215 480H233C334.3 480 385 480 416.5 448.5C448 417 448 366.3 448 265V247C448 145.7 448 95 416.5 63.5C385 32 334.3 32 233 32H215C113.7 32 63 32 31.5 63.5zM75.6 168.3H126.7C128.4 253.8 166.1 290 196 297.4V168.3H244.2V242C273.7 238.8 304.6 205.2 315.1 168.3H363.3C359.3 187.4 351.5 205.6 340.2 221.6C328.9 237.6 314.5 251.1 297.7 261.2C316.4 270.5 332.9 283.6 346.1 299.8C359.4 315.9 369 334.6 374.5 354.7H321.4C316.6 337.3 306.6 321.6 292.9 309.8C279.1 297.9 262.2 290.4 244.2 288.1V354.7H238.4C136.3 354.7 78 284.7 75.6 168.3z">
                                                  </path>
                                                </svg></i></a><a class="wc_ok" rel="noreferrer" target="_blank"
                                              href="https://connect.ok.ru/offer?url=https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/"
                                              title="Share On Odnoklassniki"><i class="wpf-cta" aria-hidden="true"><svg
                                                  xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
                                                  <path
                                                    d="M275.1 334c-27.4 17.4-65.1 24.3-90 26.9l20.9 20.6 76.3 76.3c27.9 28.6-17.5 73.3-45.7 45.7-19.1-19.4-47.1-47.4-76.3-76.6L84 503.4c-28.2 27.5-73.6-17.6-45.4-45.7 19.4-19.4 47.1-47.4 76.3-76.3l20.6-20.6c-24.6-2.6-62.9-9.1-90.6-26.9-32.6-21-46.9-33.3-34.3-59 7.4-14.6 27.7-26.9 54.6-5.7 0 0 36.3 28.9 94.9 28.9s94.9-28.9 94.9-28.9c26.9-21.1 47.1-8.9 54.6 5.7 12.4 25.7-1.9 38-34.5 59.1zM30.3 129.7C30.3 58 88.6 0 160 0s129.7 58 129.7 129.7c0 71.4-58.3 129.4-129.7 129.4s-129.7-58-129.7-129.4zm66 0c0 35.1 28.6 63.7 63.7 63.7s63.7-28.6 63.7-63.7c0-35.4-28.6-64-63.7-64s-63.7 28.6-63.7 64z">
                                                  </path>
                                                </svg></i></a>
                                          </div>
                                        </div>

                                        <div class="wpd-space"></div>
                                        <div class="wpd-comment-link wpd-hidden">
                                          <span wpd-tooltip="Comment Link" wpd-tooltip-position="left"><i
                                              class="fas fa-link" aria-hidden="true"
                                              data-wpd-clipboard="https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/#comment-16976"></i></span>
                                        </div>
                                      </div>
                                      <div class="wpd-comment-subheader">

                                        <div class="wpd-comment-date" title="September 17, 2025 10:16 am">
                                          <i class="far fa-clock" aria-hidden="true"></i>
                                          22 days ago
                                        </div>

                                      </div>

                                      <div class="wpd-comment-text">
                                        <p>Quite interesting</p>

                                      </div>
                                      <div class="wpd-comment-footer">
                                        <div class="wpd-vote">
                                          <div class="wpd-vote-up wpd_not_clicked">
                                            <svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                              <path fill="none" d="M0 0h24v24H0V0z"></path>
                                              <path
                                                d="M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2z">
                                              </path>
                                            </svg>
                                          </div>
                                          <div class="wpd-vote-result wpd-up" title="2">2</div>
                                          <div class="wpd-vote-down wpd_not_clicked">
                                            <svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                              <path fill="none" d="M0 0h24v24H0z"></path>
                                              <path
                                                d="M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v2c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z">
                                              </path>
                                            </svg>
                                          </div>
                                        </div>
                                        <div class="wpd-reply-button">
                                          <svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                            <path d="M10 9V5l-7 7 7 7v-4.1c5 0 8.5 1.6 11 5.1-1-5-4-10-11-11z"></path>
                                            <path d="M0 0h24v24H0z" fill="none"></path>
                                          </svg>
                                          <span>Reply</span>
                                        </div>
                                        <div class="wpd-wpanel"></div>
                                        <div class="wpd-space"></div>
                                        <div class="wpd-tool-wrap">

                                          <div class="wpd-toggle wpd-hidden wpd_not_clicked" wpd-tooltip="Hide Replies">
                                            <i class="fas fa-chevron-up"></i>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <div id="wpdiscuz_form_anchor-16976_0"></div>
                                  <div id="wpd-comm-17049_16976"
                                    class="comment even depth-2 wpd-comment wpd-reply wpd_comment_level-2">
                                    <div class="wpd-comment-wrap wpd-blog-guest">
                                      <div class="wpd-comment-left ">
                                        <div class="wpd-avatar ">
                                          <img alt="SenpaiXD"
                                            src="https://secure.gravatar.com/avatar/5312aa4a09a4f7c3fe1490cd9e711d43c7305de4c0307b689c3884bdae4cf664?s=64&amp;d=mm&amp;r=g"
                                            srcset="https://secure.gravatar.com/avatar/5312aa4a09a4f7c3fe1490cd9e711d43c7305de4c0307b689c3884bdae4cf664?s=128&amp;d=mm&amp;r=g 2x"
                                            class="avatar avatar-64 photo" height="64" width="64" decoding="async">
                                        </div>
                                      </div>
                                      <div id="comment-17049" class="wpd-comment-right">
                                        <div class="wpd-comment-header">
                                          <div class="wpd-comment-author ">
                                            SenpaiXD
                                          </div>


                                          <div class="wpd-comment-share wpd-hidden wpd-tooltip wpd-top">
                                            <i class="fas fa-share-alt" aria-hidden="true"></i>
                                            <div class="wpd-tooltip-content">
                                              <a class="wc_tw" rel="noreferrer" target="_blank" href="https://twitter.com/intent/tweet?text=Nice art
&amp;url=https%3A%2F%2Fphiliascans.org%2Fseries%2Fsanctuary-of-the-unloved-noble-lady%2F%23comment-17049"
                                                title="Share On X"><i class="wpf-cta" aria-hidden="true"><svg
                                                    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                                                    <path
                                                      d="M389.2 48h70.6L305.6 224.2 487 464H345L233.7 318.6 106.5 464H35.8L200.7 275.5 26.8 48H172.4L272.9 180.9 389.2 48zM364.4 421.8h39.1L151.1 88h-42L364.4 421.8z">
                                                    </path>
                                                  </svg></i></a><a class="wc_vk" rel="noreferrer" target="_blank"
                                                href="https://vk.com/share.php?url=https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/"
                                                title="Share On VKontakte"><i class="wpf-cta" aria-hidden="true"><svg
                                                    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
                                                    <path
                                                      d="M31.5 63.5C0 95 0 145.7 0 247V265C0 366.3 0 417 31.5 448.5C63 480 113.7 480 215 480H233C334.3 480 385 480 416.5 448.5C448 417 448 366.3 448 265V247C448 145.7 448 95 416.5 63.5C385 32 334.3 32 233 32H215C113.7 32 63 32 31.5 63.5zM75.6 168.3H126.7C128.4 253.8 166.1 290 196 297.4V168.3H244.2V242C273.7 238.8 304.6 205.2 315.1 168.3H363.3C359.3 187.4 351.5 205.6 340.2 221.6C328.9 237.6 314.5 251.1 297.7 261.2C316.4 270.5 332.9 283.6 346.1 299.8C359.4 315.9 369 334.6 374.5 354.7H321.4C316.6 337.3 306.6 321.6 292.9 309.8C279.1 297.9 262.2 290.4 244.2 288.1V354.7H238.4C136.3 354.7 78 284.7 75.6 168.3z">
                                                    </path>
                                                  </svg></i></a><a class="wc_ok" rel="noreferrer" target="_blank"
                                                href="https://connect.ok.ru/offer?url=https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/"
                                                title="Share On Odnoklassniki"><i class="wpf-cta"
                                                  aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg"
                                                    viewBox="0 0 320 512">
                                                    <path
                                                      d="M275.1 334c-27.4 17.4-65.1 24.3-90 26.9l20.9 20.6 76.3 76.3c27.9 28.6-17.5 73.3-45.7 45.7-19.1-19.4-47.1-47.4-76.3-76.6L84 503.4c-28.2 27.5-73.6-17.6-45.4-45.7 19.4-19.4 47.1-47.4 76.3-76.3l20.6-20.6c-24.6-2.6-62.9-9.1-90.6-26.9-32.6-21-46.9-33.3-34.3-59 7.4-14.6 27.7-26.9 54.6-5.7 0 0 36.3 28.9 94.9 28.9s94.9-28.9 94.9-28.9c26.9-21.1 47.1-8.9 54.6 5.7 12.4 25.7-1.9 38-34.5 59.1zM30.3 129.7C30.3 58 88.6 0 160 0s129.7 58 129.7 129.7c0 71.4-58.3 129.4-129.7 129.4s-129.7-58-129.7-129.4zm66 0c0 35.1 28.6 63.7 63.7 63.7s63.7-28.6 63.7-63.7c0-35.4-28.6-64-63.7-64s-63.7 28.6-63.7 64z">
                                                    </path>
                                                  </svg></i></a>
                                            </div>
                                          </div>

                                          <div class="wpd-space"></div>
                                          <div class="wpd-comment-link wpd-hidden">
                                            <span wpd-tooltip="Comment Link" wpd-tooltip-position="left"><i
                                                class="fas fa-link" aria-hidden="true"
                                                data-wpd-clipboard="https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/#comment-17049"></i></span>
                                          </div>
                                        </div>

                                        <div class="wpd-reply-to">
                                          <i class="far fa-comments"></i>
                                          Reply to&nbsp;
                                          <a href="#comment-16976">
                                            guestguest123
                                          </a>
                                          <div class="wpd-comment-date" title="September 17, 2025 10:15 pm">
                                            <i class="far fa-clock" aria-hidden="true"></i>
                                            21 days ago
                                          </div>
                                        </div>
                                        <div class="wpd-comment-text">
                                          <p>Nice art</p>

                                        </div>
                                        <div class="wpd-comment-footer">
                                          <div class="wpd-vote">
                                            <div class="wpd-vote-up wpd_not_clicked">
                                              <svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                                <path fill="none" d="M0 0h24v24H0V0z"></path>
                                                <path
                                                  d="M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2z">
                                                </path>
                                              </svg>
                                            </div>
                                            <div class="wpd-vote-result" title="0">0</div>
                                            <div class="wpd-vote-down wpd_not_clicked">
                                              <svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                                <path fill="none" d="M0 0h24v24H0z"></path>
                                                <path
                                                  d="M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v2c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z">
                                                </path>
                                              </svg>
                                            </div>
                                          </div>
                                          <div class="wpd-reply-button">
                                            <svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                              <path d="M10 9V5l-7 7 7 7v-4.1c5 0 8.5 1.6 11 5.1-1-5-4-10-11-11z"></path>
                                              <path d="M0 0h24v24H0z" fill="none"></path>
                                            </svg>
                                            <span>Reply</span>
                                          </div>

                                          <div class="wpd-space"></div>

                                        </div>
                                      </div>
                                    </div>
                                    <div id="wpdiscuz_form_anchor-17049_16976"></div>
                                  </div>
                                </div>
                                <div class="wpdiscuz-comment-pagination">
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                        <div id="wpdiscuz-loading-bar" class="wpdiscuz-loading-bar-unauth"></div>
                        <div id="wpdiscuz-comment-message" class="wpdiscuz-comment-message-unauth"></div>
                      </div>
                    </section>
                  </div>

                </div>

              </aside>
            </div>
          </div>
        </div>
        <div class="container">
          <!-- <div class="main-inner manga-bottom">
                <aside class="content">
                    <section class="m-list">
                        <div class="tab-content">
                            <div class="list-menu">
    <form class="form-inline">
        <input class="form-control ch-filter cairo" type="text" placeholder="Number..." />
        <button class="btn">
            <i class="fa-regular fa-magnifying-glass"></i>
        </button>
    </form>
    <button class="btn btn-secondary1 ch-order">
        <i class="fa-solid fa-arrow-down-arrow-up"></i>
        <span class="sort-text">Newest</span>
    </button>
</div>

<div class="list-body-hh">
    <ul class="scroll-sm max-height-none" style="max-height: none;">
                    <li class="chapters-separator premium-separator toggle-header" data-target="#premium-list">
                <div class="separator-content">
                    <span class="separator-line"></span>
                    <span class="separator-text premium-text">Premium Chapters</span>
                    <span class="separator-line"></span>
                </div>
            </li>
            <div id="premium-list" class="chapter-group columns-3">
                            <li class="item premium-chapter  has-thumb premium coin-50 data-chapter-3812 premium-block" data-number="3812" data-chapter="Chapter 26.1 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                    <a href="#" title="">
                        <span class="contain-zeb">

                            			<div class="chapter-thumbnail">
			<img class="thumb" src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp"/>
			</div>
			<span class="coin"><i class="fas fa-coins"></i>50</span>
                            <zebi>
                                Chapter 26.1 <i class="fas fa-lock"></i>:                             </zebi>
                        </span>
                        <div class="ch-info">
                            <span class="time"></span>
                        </div>
                    </a>
                </li>
                            <li class="item premium-chapter  has-thumb premium coin-50 data-chapter-3427 premium-block" data-number="3427" data-chapter="Chapter 25 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                    <a href="#" title="">
                        <span class="contain-zeb">

                            			<div class="chapter-thumbnail">
			<img class="thumb" src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp"/>
			</div>
			<span class="coin"><i class="fas fa-coins"></i>50</span>
                            <zebi>
                                Chapter 25 <i class="fas fa-lock"></i>:                             </zebi>
                        </span>
                        <div class="ch-info">
                            <span class="time"></span>
                        </div>
                    </a>
                </li>
                            <li class="item premium-chapter  has-thumb premium coin-50 data-chapter-3426 premium-block" data-number="3426" data-chapter="Chapter 24 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                    <a href="#" title="">
                        <span class="contain-zeb">

                            			<div class="chapter-thumbnail">
			<img class="thumb" src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp"/>
			</div>
			<span class="coin"><i class="fas fa-coins"></i>50</span>
                            <zebi>
                                Chapter 24 <i class="fas fa-lock"></i>:                             </zebi>
                        </span>
                        <div class="ch-info">
                            <span class="time"></span>
                        </div>
                    </a>
                </li>
                            <li class="item premium-chapter  has-thumb premium coin-50 data-chapter-3424 premium-block" data-number="3424" data-chapter="Chapter 23 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                    <a href="#" title="">
                        <span class="contain-zeb">

                            			<div class="chapter-thumbnail">
			<img class="thumb" src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp"/>
			</div>
			<span class="coin"><i class="fas fa-coins"></i>50</span>
                            <zebi>
                                Chapter 23 <i class="fas fa-lock"></i>:                             </zebi>
                        </span>
                        <div class="ch-info">
                            <span class="time"></span>
                        </div>
                    </a>
                </li>
                            <li class="item premium-chapter  has-thumb premium coin-50 data-chapter-3423 premium-block" data-number="3423" data-chapter="Chapter 22 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                    <a href="#" title="">
                        <span class="contain-zeb">

                            			<div class="chapter-thumbnail">
			<img class="thumb" src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp"/>
			</div>
			<span class="coin"><i class="fas fa-coins"></i>50</span>
                            <zebi>
                                Chapter 22 <i class="fas fa-lock"></i>:                             </zebi>
                        </span>
                        <div class="ch-info">
                            <span class="time"></span>
                        </div>
                    </a>
                </li>
                            <li class="item premium-chapter  has-thumb premium coin-50 data-chapter-3422 premium-block" data-number="3422" data-chapter="Chapter 21 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                    <a href="#" title="">
                        <span class="contain-zeb">

                            			<div class="chapter-thumbnail">
			<img class="thumb" src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp"/>
			</div>
			<span class="coin"><i class="fas fa-coins"></i>50</span>
                            <zebi>
                                Chapter 21 <i class="fas fa-lock"></i>:                             </zebi>
                        </span>
                        <div class="ch-info">
                            <span class="time"></span>
                        </div>
                    </a>
                </li>
                            <li class="item premium-chapter  has-thumb premium coin-50 data-chapter-3408 premium-block" data-number="3408" data-chapter="Chapter 20 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                    <a href="#" title="">
                        <span class="contain-zeb">

                            			<div class="chapter-thumbnail">
			<img class="thumb" src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp"/>
			</div>
			<span class="coin"><i class="fas fa-coins"></i>50</span>
                            <zebi>
                                Chapter 20 <i class="fas fa-lock"></i>:                             </zebi>
                        </span>
                        <div class="ch-info">
                            <span class="time"></span>
                        </div>
                    </a>
                </li>
                            <li class="item premium-chapter  has-thumb premium coin-50 data-chapter-3407 premium-block" data-number="3407" data-chapter="Chapter 19 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                    <a href="#" title="">
                        <span class="contain-zeb">

                            			<div class="chapter-thumbnail">
			<img class="thumb" src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp"/>
			</div>
			<span class="coin"><i class="fas fa-coins"></i>50</span>
                            <zebi>
                                Chapter 19 <i class="fas fa-lock"></i>:                             </zebi>
                        </span>
                        <div class="ch-info">
                            <span class="time"></span>
                        </div>
                    </a>
                </li>
                            <li class="item premium-chapter  has-thumb premium coin-50 data-chapter-3397 premium-block" data-number="3397" data-chapter="Chapter 18 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                    <a href="#" title="">
                        <span class="contain-zeb">

                            			<div class="chapter-thumbnail">
			<img class="thumb" src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp"/>
			</div>
			<span class="coin"><i class="fas fa-coins"></i>50</span>
                            <zebi>
                                Chapter 18 <i class="fas fa-lock"></i>:                             </zebi>
                        </span>
                        <div class="ch-info">
                            <span class="time"></span>
                        </div>
                    </a>
                </li>
                            <li class="item premium-chapter  has-thumb premium coin-50 data-chapter-3396 premium-block" data-number="3396" data-chapter="Chapter 17 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                    <a href="#" title="">
                        <span class="contain-zeb">

                            			<div class="chapter-thumbnail">
			<img class="thumb" src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp"/>
			</div>
			<span class="coin"><i class="fas fa-coins"></i>50</span>
                            <zebi>
                                Chapter 17 <i class="fas fa-lock"></i>:                             </zebi>
                        </span>
                        <div class="ch-info">
                            <span class="time"></span>
                        </div>
                    </a>
                </li>
                            <li class="item premium-chapter  has-thumb premium coin-50 data-chapter-3395 premium-block" data-number="3395" data-chapter="Chapter 16 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                    <a href="#" title="">
                        <span class="contain-zeb">

                            			<div class="chapter-thumbnail">
			<img class="thumb" src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp"/>
			</div>
			<span class="coin"><i class="fas fa-coins"></i>50</span>
                            <zebi>
                                Chapter 16 <i class="fas fa-lock"></i>:                             </zebi>
                        </span>
                        <div class="ch-info">
                            <span class="time"></span>
                        </div>
                    </a>
                </li>
                            <li class="item premium-chapter  has-thumb premium coin-50 data-chapter-3394 premium-block" data-number="3394" data-chapter="Chapter 15 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                    <a href="#" title="">
                        <span class="contain-zeb">

                            			<div class="chapter-thumbnail">
			<img class="thumb" src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp"/>
			</div>
			<span class="coin"><i class="fas fa-coins"></i>50</span>
                            <zebi>
                                Chapter 15 <i class="fas fa-lock"></i>:                             </zebi>
                        </span>
                        <div class="ch-info">
                            <span class="time"></span>
                        </div>
                    </a>
                </li>
                            <li class="item premium-chapter  has-thumb premium coin-50 data-chapter-3393 premium-block" data-number="3393" data-chapter="Chapter 14 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                    <a href="#" title="">
                        <span class="contain-zeb">

                            			<div class="chapter-thumbnail">
			<img class="thumb" src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp"/>
			</div>
			<span class="coin"><i class="fas fa-coins"></i>50</span>
                            <zebi>
                                Chapter 14 <i class="fas fa-lock"></i>:                             </zebi>
                        </span>
                        <div class="ch-info">
                            <span class="time"></span>
                        </div>
                    </a>
                </li>
                            <li class="item premium-chapter  has-thumb premium coin-50 data-chapter-3392 premium-block" data-number="3392" data-chapter="Chapter 13 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                    <a href="#" title="">
                        <span class="contain-zeb">

                            			<div class="chapter-thumbnail">
			<img class="thumb" src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp"/>
			</div>
			<span class="coin"><i class="fas fa-coins"></i>50</span>
                            <zebi>
                                Chapter 13 <i class="fas fa-lock"></i>:                             </zebi>
                        </span>
                        <div class="ch-info">
                            <span class="time"></span>
                        </div>
                    </a>
                </li>
                            <li class="item premium-chapter  has-thumb premium coin-50 data-chapter-3274 premium-block" data-number="3274" data-chapter="Chapter 12 &lt;i class=&quot;fas fa-lock&quot;&gt;&lt;/i&gt;">
                    <a href="#" title="">
                        <span class="contain-zeb">

                            			<div class="chapter-thumbnail">
			<img class="thumb" src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp"/>
			</div>
			<span class="coin"><i class="fas fa-coins"></i>50</span>
                            <zebi>
                                Chapter 12 <i class="fas fa-lock"></i>:                             </zebi>
                        </span>
                        <div class="ch-info">
                            <span class="time"></span>
                        </div>
                    </a>
                </li>
                        </div>

                    <li class="chapters-separator toggle-header" data-target="#free-list">
                <div class="separator-content">
                    <span class="separator-line"></span>
                    <span class="separator-text">Free Chapters</span>
                    <span class="separator-line"></span>
                </div>
            </li>

                    <div id="free-list" class="chapter-group columns-3">
                            <li class="item free-chapter  has-thumb free-chap" data-number="3273" data-chapter="Chapter 11">
                    <a href="https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/chapter-11/" title="">
                        <span class="contain-zeb">
                            			<div class="chapter-thumbnail">
			<img class="thumb" src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp"/>
			</div>
			<span class="coin free">Free</span>                            <zebi>
                                Chapter 11:                             </zebi>
                        </span>
                        <div class="ch-info">
                            <span class="time"></span>
                        </div>
                    </a>
                </li>
                            <li class="item free-chapter  has-thumb free-chap" data-number="3268" data-chapter="Chapter 10">
                    <a href="https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/chapter-10/" title="">
                        <span class="contain-zeb">
                            			<div class="chapter-thumbnail">
			<img class="thumb" src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp"/>
			</div>
			<span class="coin free">Free</span>                            <zebi>
                                Chapter 10:                             </zebi>
                        </span>
                        <div class="ch-info">
                            <span class="time"></span>
                        </div>
                    </a>
                </li>
                            <li class="item free-chapter  has-thumb free-chap" data-number="3267" data-chapter="Chapter 9">
                    <a href="https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/chapter-9/" title="">
                        <span class="contain-zeb">
                            			<div class="chapter-thumbnail">
			<img class="thumb" src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp"/>
			</div>
			<span class="coin free">Free</span>                            <zebi>
                                Chapter 9:                             </zebi>
                        </span>
                        <div class="ch-info">
                            <span class="time"></span>
                        </div>
                    </a>
                </li>
                            <li class="item free-chapter  has-thumb free-chap" data-number="3272" data-chapter="Chapter 8">
                    <a href="https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/chapter-8/" title="FIXED">
                        <span class="contain-zeb">
                            			<div class="chapter-thumbnail">
			<img class="thumb" src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp"/>
			</div>
			<span class="coin free">Free</span>                            <zebi>
                                Chapter 8: FIXED                            </zebi>
                        </span>
                        <div class="ch-info">
                            <span class="time"></span>
                        </div>
                    </a>
                </li>
                            <li class="item free-chapter  has-thumb free-chap" data-number="3238" data-chapter="Chapter 7">
                    <a href="https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/chapter-7/" title="">
                        <span class="contain-zeb">
                            			<div class="chapter-thumbnail">
			<img class="thumb" src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp"/>
			</div>
			<span class="coin free">Free</span>                            <zebi>
                                Chapter 7:                             </zebi>
                        </span>
                        <div class="ch-info">
                            <span class="time"></span>
                        </div>
                    </a>
                </li>
                            <li class="item free-chapter  has-thumb free-chap" data-number="3095" data-chapter="Chapter 6">
                    <a href="https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/chapter-6/" title="FIXED">
                        <span class="contain-zeb">
                            			<div class="chapter-thumbnail">
			<img class="thumb" src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp"/>
			</div>
			<span class="coin free">Free</span>                            <zebi>
                                Chapter 6: FIXED                            </zebi>
                        </span>
                        <div class="ch-info">
                            <span class="time"></span>
                        </div>
                    </a>
                </li>
                            <li class="item free-chapter  has-thumb free-chap" data-number="3094" data-chapter="Chapter 5">
                    <a href="https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/chapter-5/" title="">
                        <span class="contain-zeb">
                            			<div class="chapter-thumbnail">
			<img class="thumb" src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp"/>
			</div>
			<span class="coin free">Free</span>                            <zebi>
                                Chapter 5:                             </zebi>
                        </span>
                        <div class="ch-info">
                            <span class="time"></span>
                        </div>
                    </a>
                </li>
                            <li class="item free-chapter  has-thumb free-chap" data-number="3093" data-chapter="Chapter 4">
                    <a href="https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/chapter-4/" title="">
                        <span class="contain-zeb">
                            			<div class="chapter-thumbnail">
			<img class="thumb" src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp"/>
			</div>
			<span class="coin free">Free</span>                            <zebi>
                                Chapter 4:                             </zebi>
                        </span>
                        <div class="ch-info">
                            <span class="time"></span>
                        </div>
                    </a>
                </li>
                            <li class="item free-chapter  has-thumb free-chap" data-number="3092" data-chapter="Chapter 3">
                    <a href="https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/chapter-3/" title="">
                        <span class="contain-zeb">
                            			<div class="chapter-thumbnail">
			<img class="thumb" src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp"/>
			</div>
			<span class="coin free">Free</span>                            <zebi>
                                Chapter 3:                             </zebi>
                        </span>
                        <div class="ch-info">
                            <span class="time"></span>
                        </div>
                    </a>
                </li>
                            <li class="item free-chapter  has-thumb free-chap" data-number="3091" data-chapter="Chapter 2">
                    <a href="https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/chapter-2/" title="">
                        <span class="contain-zeb">
                            			<div class="chapter-thumbnail">
			<img class="thumb" src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp"/>
			</div>
			<span class="coin free">Free</span>                            <zebi>
                                Chapter 2:                             </zebi>
                        </span>
                        <div class="ch-info">
                            <span class="time"></span>
                        </div>
                    </a>
                </li>
                            <li class="item free-chapter  has-thumb free-chap" data-number="3090" data-chapter="Chapter 1">
                    <a href="https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/chapter-1/" title="">
                        <span class="contain-zeb">
                            			<div class="chapter-thumbnail">
			<img class="thumb" src="https://philiascans.org/wp-content/uploads/2025/01/logo.webp"/>
			</div>
			<span class="coin free">Free</span>                            <zebi>
                                Chapter 1:                             </zebi>
                        </span>
                        <div class="ch-info">
                            <span class="time"></span>
                        </div>
                    </a>
                </li>
                        </div>
            </ul>
</div>

<style>
    .chapters-separator {
        padding: 15px 0;
        list-style: none;
        cursor: pointer;
    }

    .separator-content {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .separator-line {
        flex-grow: 1;
        height: 1px;
        background-color: #ffffff;
    }

    .separator-text {
        margin: 0 10px;
        font-size: 14px;
        color: #aaa;
        text-transform: uppercase;
        letter-spacing: 1px;
        padding: 0 10px;
        background-color: #222;
    }

    .premium-text {
        color: gold;
    }

    .premium-separator .separator-line {
        background-color: #ffd700;
    }

    .chapter-group {
        transition: max-height 0.3s ease;
        display: flex;
        flex-direction: column;
        gap: 6px;
    }

    .chapter-group.hidden {
        display: none;
    }
</style>

<script>
    /*--------------------------------------------------------------
    >>> Manga Single - Chapter/volume order
    ----------------------------------------------------------------*/
    const orderButton = document.querySelector('.ch-order');
    const filterInput = document.querySelector('.ch-filter');
    const premiumList = document.querySelector('#premium-list');
    const freeList = document.querySelector('#free-list');

    if (orderButton && filterInput && (premiumList || freeList)) {
        function extractNumber(item) {
            return parseFloat(item.dataset.chapter) || 0;
        }

        function sortSection(section) {
            const items = Array.from(section.querySelectorAll('.item'));
            const isAscending = orderButton.classList.contains('asc');

            items.sort((a, b) => {
                const aNumber = extractNumber(a);
                const bNumber = extractNumber(b);
                return isAscending ? aNumber - bNumber : bNumber - aNumber;
            }).forEach(item => section.appendChild(item));
        }

        function sortItems() {
            const isAscending = orderButton.classList.toggle('asc');
            const sortTextElement = orderButton.querySelector('.sort-text');

            if (sortTextElement) {
                sortTextElement.textContent = isAscending
                    ? ajax_manga_params.messages.oldest
                    : ajax_manga_params.messages.newest;
            }

            if (premiumList) sortSection(premiumList);
            if (freeList) sortSection(freeList);
        }

        function filterItems() {
            const filterText = filterInput.value.toLowerCase();
            [premiumList, freeList].forEach(section => {
                if (section) {
                    Array.from(section.querySelectorAll('.item')).forEach(item => {
                        const numberText = extractNumber(item).toString();
                        item.style.display = numberText.includes(filterText) ? '' : 'none';
                    });
                }
            });
        }

        orderButton.addEventListener('click', sortItems);
        filterInput.addEventListener('input', filterItems);
    }

    document.querySelectorAll('.toggle-header').forEach(header => {
        header.addEventListener('click', () => {
            const target = document.querySelector(header.dataset.target);
            if (target) {
                target.classList.toggle('hidden');
            }
        });
    });

</script>                        </div>
                    </section>
                    <section class="default-style comments-section">
                        <div class="body p-4 comments">

									            <div id="manga-discussion" class="manga-discussion wrapper">
				    <div class="wpdiscuz_top_clearing"></div>
    <div id='comments' class='comments-area'><div id='respond' style='width: 0;height: 0;clear: both;margin: 0;padding: 0;'></div><style type='text/css'>/* Wpdcom */
#wpdcom{
	width:auto !important;
	max-width:none;
}

/* Comments */
#comments{
	max-width:none;
	Padding:25px;
	margin-top:25px !important;
}</style><div id='wpd-post-rating' class='wpd-not-rated'>
            <div class='wpd-rating-wrap'>
            <div class='wpd-rating-left'></div>
            <div class='wpd-rating-data'>
                <div class='wpd-rating-value'>
                    <span class='wpdrv'>5</span>
                    <span class='wpdrc'>1</span>
                    <span class='wpdrt'>vote</span></div>
                <div class='wpd-rating-title'>Article Rating</div>
                <div class='wpd-rating-stars'><svg xmlns='https://www.w3.org/2000/svg' viewBox='0 0 24 24'><path d='M0 0h24v24H0z' fill='none'/><path class='wpd-star wpd-active' d='M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z'/><path d='M0 0h24v24H0z' fill='none'/></svg><svg xmlns='https://www.w3.org/2000/svg' viewBox='0 0 24 24'><path d='M0 0h24v24H0z' fill='none'/><path class='wpd-star wpd-active' d='M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z'/><path d='M0 0h24v24H0z' fill='none'/></svg><svg xmlns='https://www.w3.org/2000/svg' viewBox='0 0 24 24'><path d='M0 0h24v24H0z' fill='none'/><path class='wpd-star wpd-active' d='M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z'/><path d='M0 0h24v24H0z' fill='none'/></svg><svg xmlns='https://www.w3.org/2000/svg' viewBox='0 0 24 24'><path d='M0 0h24v24H0z' fill='none'/><path class='wpd-star wpd-active' d='M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z'/><path d='M0 0h24v24H0z' fill='none'/></svg><svg xmlns='https://www.w3.org/2000/svg' viewBox='0 0 24 24'><path d='M0 0h24v24H0z' fill='none'/><path class='wpd-star wpd-active' d='M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z'/><path d='M0 0h24v24H0z' fill='none'/></svg></div><div class='wpd-rate-starts'><svg xmlns='https://www.w3.org/2000/svg' viewBox='0 0 24 24'><path d='M0 0h24v24H0z' fill='none'/><path class='wpd-star' d='M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z'/><path d='M0 0h24v24H0z' fill='none'/></svg><svg xmlns='https://www.w3.org/2000/svg' viewBox='0 0 24 24'><path d='M0 0h24v24H0z' fill='none'/><path class='wpd-star' d='M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z'/><path d='M0 0h24v24H0z' fill='none'/></svg><svg xmlns='https://www.w3.org/2000/svg' viewBox='0 0 24 24'><path d='M0 0h24v24H0z' fill='none'/><path class='wpd-star' d='M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z'/><path d='M0 0h24v24H0z' fill='none'/></svg><svg xmlns='https://www.w3.org/2000/svg' viewBox='0 0 24 24'><path d='M0 0h24v24H0z' fill='none'/><path class='wpd-star' d='M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z'/><path d='M0 0h24v24H0z' fill='none'/></svg><svg xmlns='https://www.w3.org/2000/svg' viewBox='0 0 24 24'><path d='M0 0h24v24H0z' fill='none'/><path class='wpd-star' d='M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z'/><path d='M0 0h24v24H0z' fill='none'/></svg></div></div>
            <div class='wpd-rating-right'></div></div></div>    <div id="wpdcom" class="wpdiscuz_unauth wpd-dark wpd-layout-3 wpd-comments-open">
                    <div class="wc_social_plugin_wrapper">
                            </div>
            <div class="wpd-form-wrap">
                <div class="wpd-form-head">
                                            <div class="wpd-sbs-toggle">
                            <i class="far fa-envelope"></i> <span
                                class="wpd-sbs-title">Subscribe</span>
                            <i class="fas fa-caret-down"></i>
                        </div>
                                            <div class="wpd-auth">
                                                <div class="wpd-login">
                            <a rel="nofollow" href="https://philiascans.org/wp-login.php?redirect_to=https%3A%2F%2Fphiliascans.org%2Fseries%2Fsanctuary-of-the-unloved-noble-lady%2F"><i class='fas fa-sign-in-alt'></i> Login</a>                        </div>
                    </div>
                </div>
                                                    <div class="wpdiscuz-subscribe-bar wpdiscuz-hidden">
                                                    <form action="https://philiascans.org/wp-admin/admin-ajax.php?action=wpdAddSubscription"
                                  method="post" id="wpdiscuz-subscribe-form">
                                <div class="wpdiscuz-subscribe-form-intro">Notify of </div>
                                <div class="wpdiscuz-subscribe-form-option"
                                     style="width:40%;">
                                    <select class="wpdiscuz_select" name="wpdiscuzSubscriptionType">
                                                                                    <option value="post">new follow-up comments</option>
                                                                                                                                <option
                                                value="all_comment" >new replies to my comments</option>
                                                                                </select>
                                </div>
                                                                    <div class="wpdiscuz-item wpdiscuz-subscribe-form-email">
                                        <input class="email" type="email" name="wpdiscuzSubscriptionEmail"
                                               required="required" value=""
                                               placeholder="Email"/>
                                    </div>
                                                                    <div class="wpdiscuz-subscribe-form-button">
                                    <input id="wpdiscuz_subscription_button" class="wpd-prim-button wpd_not_clicked"
                                           type="submit"
                                           value="&rsaquo;"
                                           name="wpdiscuz_subscription_button"/>
                                </div>
                                <input type="hidden" id="wpdiscuz_subscribe_form_nonce" name="wpdiscuz_subscribe_form_nonce" value="24a74e8a7c" /><input type="hidden" name="_wp_http_referer" value="/series/sanctuary-of-the-unloved-noble-lady/" />                            </form>
                                                </div>
                            <div
            class="wpd-form wpd-form-wrapper wpd-main-form-wrapper" id='wpd-main-form-wrapper-0_0'>
                                        <form  method="post" enctype="multipart/form-data" data-uploading="false" class="wpd_comm_form wpd_main_comm_form"                >
                                        <div class="wpd-field-comment">
                        <div class="wpdiscuz-item wc-field-textarea">
                            <div class="wpdiscuz-textarea-wrap ">
                                                                                                        <div class="wpd-avatar">
                                        <img alt='guest' src='https://secure.gravatar.com/avatar/0cbcc2714949ca167add2d76d505cca4648f37b6cde645e63f265d578c213a4f?s=56&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/0cbcc2714949ca167add2d76d505cca4648f37b6cde645e63f265d578c213a4f?s=112&#038;d=mm&#038;r=g 2x' class='avatar avatar-56 photo' height='56' width='56' decoding='async'/>                                    </div>
                                                <div id="wpd-editor-wraper-0_0" style="display: none;">
                <div id="wpd-editor-char-counter-0_0"
                     class="wpd-editor-char-counter"></div>
                <label style="display: none;" for="wc-textarea-0_0">Label</label>
                <textarea id="wc-textarea-0_0" name="wc_comment"
                          class="wc_comment wpd-field"></textarea>
                <div id="wpd-editor-0_0"></div>
                        <div id="wpd-editor-toolbar-0_0">
                            <button title="Bold"
                        class="ql-bold"  ></button>
                                <button title="Italic"
                        class="ql-italic"  ></button>
                                <button title="Underline"
                        class="ql-underline"  ></button>
                                <button title="Strike"
                        class="ql-strike"  ></button>
                                <button title="Ordered List"
                        class="ql-list" value='ordered' ></button>
                                <button title="Unordered List"
                        class="ql-list" value='bullet' ></button>
                                <button title="Blockquote"
                        class="ql-blockquote"  ></button>
                                <button title="Code Block"
                        class="ql-code-block"  ></button>
                                <button title="Link"
                        class="ql-link"  ></button>
                                <button title="Source Code"
                        class="ql-sourcecode"  data-wpde_button_name='sourcecode'>{}</button>
                                <button title="Spoiler"
                        class="ql-spoiler"  data-wpde_button_name='spoiler'>[+]</button>
                            <div class="wpd-editor-buttons-right">
                            </div>
        </div>
                    </div>
                                        </div>
                        </div>
                    </div>
                    <div class="wpd-form-foot" >
                        <div class="wpdiscuz-textarea-foot">
                                                        <div class="wpdiscuz-button-actions"></div>
                        </div>
                                <div class="wpd-form-row">
                    <div class="wpd-form-col-left">
                        <div class="wpdiscuz-item wc_name-wrapper wpd-has-icon">
                                    <div class="wpd-field-icon"><i
                            class="fas fa-user"></i>
                    </div>
                                    <input id="wc_name-0_0" value="" required='required' aria-required='true'                       class="wc_name wpd-field" type="text"
                       name="wc_name"
                       placeholder="Name*"
                       maxlength="50" pattern='.{3,50}'                       title="">
                <label for="wc_name-0_0"
                       class="wpdlb">Name*</label>
                            </div>
                        <div class="wpdiscuz-item wc_email-wrapper wpd-has-icon">
                                    <div class="wpd-field-icon"><i
                            class="fas fa-at"></i>
                    </div>
                                    <input id="wc_email-0_0" value="" required='required' aria-required='true'                       class="wc_email wpd-field" type="email"
                       name="wc_email"
                       placeholder="Email*"/>
                <label for="wc_email-0_0"
                       class="wpdlb">Email*</label>
                            </div>
                            <div class="wpdiscuz-item wc_website-wrapper wpd-has-icon">
                                            <div class="wpd-field-icon"><i
                                class="fas fa-link"></i>
                        </div>
                                        <input id="wc_website-0_0" value=""
                           class="wc_website wpd-field" type="text"
                           name="wc_website"
                           placeholder="Website"/>
                    <label for="wc_website-0_0"
                           class="wpdlb">Website</label>
                                    </div>
                        </div>
                <div class="wpd-form-col-right">
                    <div class="wc-field-submit">
                                                                                    <label class="wpd_label"
                               wpd-tooltip="Notify of new replies to this comment">
                            <input id="wc_notification_new_comment-0_0"
                                   class="wc_notification_new_comment-0_0 wpd_label__checkbox"
                                   value="comment" type="checkbox"
                                   name="wpdiscuz_notification_type" />
                            <span class="wpd_label__text">
                                <span class="wpd_label__check">
                                    <i class="fas fa-bell wpdicon wpdicon-on"></i>
                                    <i class="fas fa-bell-slash wpdicon wpdicon-off"></i>
                                </span>
                            </span>
                        </label>
                                                                <input id="wpd-field-submit-0_0"
                   class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit"
                   name="submit" value="Post Comment"
                   aria-label="Post Comment"/>
        </div>
                </div>
                    <div class="clearfix"></div>
        </div>
                            </div>
                                        <input type="hidden" class="wpdiscuz_unique_id" value="0_0"
                           name="wpdiscuz_unique_id">
                                    <input type="hidden" name="wp_manga_chapter_id" value="0">
                            </form>
                        </div>
                <div id="wpdiscuz_hidden_secondary_form" style="display: none;">
                    <div
            class="wpd-form wpd-form-wrapper wpd-secondary-form-wrapper" id='wpd-secondary-form-wrapper-wpdiscuzuniqueid' style='display: none;'>
                            <div class="wpd-secondary-forms-social-content"></div>
                <div class="clearfix"></div>
                                        <form  method="post" enctype="multipart/form-data" data-uploading="false" class="wpd_comm_form wpd-secondary-form-wrapper"                >
                                        <div class="wpd-field-comment">
                        <div class="wpdiscuz-item wc-field-textarea">
                            <div class="wpdiscuz-textarea-wrap ">
                                                                                                        <div class="wpd-avatar">
                                        <img alt='guest' src='https://secure.gravatar.com/avatar/e302489727584b2728259cf9825408f8cb7d869bd082f43ffcf4fd6fe5dbc272?s=56&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/e302489727584b2728259cf9825408f8cb7d869bd082f43ffcf4fd6fe5dbc272?s=112&#038;d=mm&#038;r=g 2x' class='avatar avatar-56 photo' height='56' width='56' decoding='async'/>                                    </div>
                                                <div id="wpd-editor-wraper-wpdiscuzuniqueid" style="display: none;">
                <div id="wpd-editor-char-counter-wpdiscuzuniqueid"
                     class="wpd-editor-char-counter"></div>
                <label style="display: none;" for="wc-textarea-wpdiscuzuniqueid">Label</label>
                <textarea id="wc-textarea-wpdiscuzuniqueid" name="wc_comment"
                          class="wc_comment wpd-field"></textarea>
                <div id="wpd-editor-wpdiscuzuniqueid"></div>
                        <div id="wpd-editor-toolbar-wpdiscuzuniqueid">
                            <button title="Bold"
                        class="ql-bold"  ></button>
                                <button title="Italic"
                        class="ql-italic"  ></button>
                                <button title="Underline"
                        class="ql-underline"  ></button>
                                <button title="Strike"
                        class="ql-strike"  ></button>
                                <button title="Ordered List"
                        class="ql-list" value='ordered' ></button>
                                <button title="Unordered List"
                        class="ql-list" value='bullet' ></button>
                                <button title="Blockquote"
                        class="ql-blockquote"  ></button>
                                <button title="Code Block"
                        class="ql-code-block"  ></button>
                                <button title="Link"
                        class="ql-link"  ></button>
                                <button title="Source Code"
                        class="ql-sourcecode"  data-wpde_button_name='sourcecode'>{}</button>
                                <button title="Spoiler"
                        class="ql-spoiler"  data-wpde_button_name='spoiler'>[+]</button>
                            <div class="wpd-editor-buttons-right">
                            </div>
        </div>
                    </div>
                                        </div>
                        </div>
                    </div>
                    <div class="wpd-form-foot" >
                        <div class="wpdiscuz-textarea-foot">
                                                        <div class="wpdiscuz-button-actions"></div>
                        </div>
                                <div class="wpd-form-row">
                    <div class="wpd-form-col-left">
                        <div class="wpdiscuz-item wc_name-wrapper wpd-has-icon">
                                    <div class="wpd-field-icon"><i
                            class="fas fa-user"></i>
                    </div>
                                    <input id="wc_name-wpdiscuzuniqueid" value="" required='required' aria-required='true'                       class="wc_name wpd-field" type="text"
                       name="wc_name"
                       placeholder="Name*"
                       maxlength="50" pattern='.{3,50}'                       title="">
                <label for="wc_name-wpdiscuzuniqueid"
                       class="wpdlb">Name*</label>
                            </div>
                        <div class="wpdiscuz-item wc_email-wrapper wpd-has-icon">
                                    <div class="wpd-field-icon"><i
                            class="fas fa-at"></i>
                    </div>
                                    <input id="wc_email-wpdiscuzuniqueid" value="" required='required' aria-required='true'                       class="wc_email wpd-field" type="email"
                       name="wc_email"
                       placeholder="Email*"/>
                <label for="wc_email-wpdiscuzuniqueid"
                       class="wpdlb">Email*</label>
                            </div>
                            <div class="wpdiscuz-item wc_website-wrapper wpd-has-icon">
                                            <div class="wpd-field-icon"><i
                                class="fas fa-link"></i>
                        </div>
                                        <input id="wc_website-wpdiscuzuniqueid" value=""
                           class="wc_website wpd-field" type="text"
                           name="wc_website"
                           placeholder="Website"/>
                    <label for="wc_website-wpdiscuzuniqueid"
                           class="wpdlb">Website</label>
                                    </div>
                        </div>
                <div class="wpd-form-col-right">
                    <div class="wc-field-submit">
                                                                                    <label class="wpd_label"
                               wpd-tooltip="Notify of new replies to this comment">
                            <input id="wc_notification_new_comment-wpdiscuzuniqueid"
                                   class="wc_notification_new_comment-wpdiscuzuniqueid wpd_label__checkbox"
                                   value="comment" type="checkbox"
                                   name="wpdiscuz_notification_type" />
                            <span class="wpd_label__text">
                                <span class="wpd_label__check">
                                    <i class="fas fa-bell wpdicon wpdicon-on"></i>
                                    <i class="fas fa-bell-slash wpdicon wpdicon-off"></i>
                                </span>
                            </span>
                        </label>
                                                                <input id="wpd-field-submit-wpdiscuzuniqueid"
                   class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit"
                   name="submit" value="Post Comment"
                   aria-label="Post Comment"/>
        </div>
                </div>
                    <div class="clearfix"></div>
        </div>
                            </div>
                                        <input type="hidden" class="wpdiscuz_unique_id" value="wpdiscuzuniqueid"
                           name="wpdiscuz_unique_id">
                                    <input type="hidden" name="wp_manga_chapter_id" value="0">
                            </form>
                        </div>
                </div>
                    </div>
                        <div id="wpd-threads" class="wpd-thread-wrapper">
                <div class="wpd-thread-head">
                    <div class="wpd-thread-info "
                         data-comments-count="3">
                        <span class='wpdtc' title='3'>3</span> Comments                    </div>
                                        <div class="wpd-space"></div>
                    <div class="wpd-thread-filter">
                                                    <div class="wpd-filter wpdf-reacted wpd_not_clicked "
                                 wpd-tooltip="Most reacted comment">
                                <i class="fas fa-bolt"></i></div>
                                                        <div class="wpd-filter wpdf-hottest wpd_not_clicked "
                                 wpd-tooltip="Hottest comment thread">
                                <i class="fas fa-fire"></i></div>
                                                        <div class="wpd-filter wpdf-sorting ">
                                                                        <span class="wpdiscuz-sort-button wpdiscuz-date-sort-asc wpdiscuz-sort-button-active"
                                              data-sorting="oldest">Oldest</span>
                                                                        <i class="fas fa-sort-down"></i>
                                <div class="wpdiscuz-sort-buttons">
                                                                            <span class="wpdiscuz-sort-button wpdiscuz-date-sort-desc"
                                              data-sorting="newest">Newest</span>
                                                                                <span class="wpdiscuz-sort-button wpdiscuz-vote-sort-up"
                                              data-sorting="by_vote">Most Voted</span>
                                                                        </div>
                            </div>
                                                </div>
                </div>
                <div class="wpd-comment-info-bar">
                    <div class="wpd-current-view"><i
                            class="fas fa-quote-left"></i> Inline Feedbacks                    </div>
                    <div class="wpd-filter-view-all">View all comments</div>
                </div>
                                <div class="wpd-thread-list">
                    <div id='wpd-comm-14699_0' class='comment even thread-even depth-1 wpd-comment wpd_comment_level-1'><div class="wpd-comment-wrap wpd-blog-guest">
    <div class="wpd-comment-left ">
    <div class="wpd-avatar ">
    <img alt='Fksoakwow' src='https://secure.gravatar.com/avatar/d6bf19991aaba32475c0f71da536d2d66bb6e5faaba36bef15660856ca2c4b54?s=64&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/d6bf19991aaba32475c0f71da536d2d66bb6e5faaba36bef15660856ca2c4b54?s=128&#038;d=mm&#038;r=g 2x' class='avatar avatar-64 photo' height='64' width='64' decoding='async'/>
</div>
</div>
    <div id="comment-14699" class="wpd-comment-right">
    <div class="wpd-comment-header">
    <div class="wpd-comment-author ">
    Fksoakwow
</div>


    <div class="wpd-comment-share wpd-hidden wpd-tooltip wpd-top">
    <i class='fas fa-share-alt' aria-hidden='true'></i>
    <div class="wpd-tooltip-content">
        <a class='wc_tw' rel='noreferrer' target='_blank' href='https://twitter.com/intent/tweet?text=So wholesome
&url=https%3A%2F%2Fphiliascans.org%2Fseries%2Fsanctuary-of-the-unloved-noble-lady%2F%23comment-14699' title='Share On X'><i class='wpf-cta' aria-hidden='true'><svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path d='M389.2 48h70.6L305.6 224.2 487 464H345L233.7 318.6 106.5 464H35.8L200.7 275.5 26.8 48H172.4L272.9 180.9 389.2 48zM364.4 421.8h39.1L151.1 88h-42L364.4 421.8z'/></svg></i></a><a class='wc_vk' rel='noreferrer' target='_blank' href='https://vk.com/share.php?url=https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/' title='Share On VKontakte'><i class='wpf-cta' aria-hidden='true'><svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 448 512'><path d='M31.5 63.5C0 95 0 145.7 0 247V265C0 366.3 0 417 31.5 448.5C63 480 113.7 480 215 480H233C334.3 480 385 480 416.5 448.5C448 417 448 366.3 448 265V247C448 145.7 448 95 416.5 63.5C385 32 334.3 32 233 32H215C113.7 32 63 32 31.5 63.5zM75.6 168.3H126.7C128.4 253.8 166.1 290 196 297.4V168.3H244.2V242C273.7 238.8 304.6 205.2 315.1 168.3H363.3C359.3 187.4 351.5 205.6 340.2 221.6C328.9 237.6 314.5 251.1 297.7 261.2C316.4 270.5 332.9 283.6 346.1 299.8C359.4 315.9 369 334.6 374.5 354.7H321.4C316.6 337.3 306.6 321.6 292.9 309.8C279.1 297.9 262.2 290.4 244.2 288.1V354.7H238.4C136.3 354.7 78 284.7 75.6 168.3z'/></svg></i></a><a class='wc_ok' rel='noreferrer' target='_blank' href='https://connect.ok.ru/offer?url=https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/' title='Share On Odnoklassniki'><i class='wpf-cta' aria-hidden='true'><svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 320 512'><path d='M275.1 334c-27.4 17.4-65.1 24.3-90 26.9l20.9 20.6 76.3 76.3c27.9 28.6-17.5 73.3-45.7 45.7-19.1-19.4-47.1-47.4-76.3-76.6L84 503.4c-28.2 27.5-73.6-17.6-45.4-45.7 19.4-19.4 47.1-47.4 76.3-76.3l20.6-20.6c-24.6-2.6-62.9-9.1-90.6-26.9-32.6-21-46.9-33.3-34.3-59 7.4-14.6 27.7-26.9 54.6-5.7 0 0 36.3 28.9 94.9 28.9s94.9-28.9 94.9-28.9c26.9-21.1 47.1-8.9 54.6 5.7 12.4 25.7-1.9 38-34.5 59.1zM30.3 129.7C30.3 58 88.6 0 160 0s129.7 58 129.7 129.7c0 71.4-58.3 129.4-129.7 129.4s-129.7-58-129.7-129.4zm66 0c0 35.1 28.6 63.7 63.7 63.7s63.7-28.6 63.7-63.7c0-35.4-28.6-64-63.7-64s-63.7 28.6-63.7 64z'/></svg></i></a>
    </div>
</div>

    <div class="wpd-space"></div>
    <div class="wpd-comment-link wpd-hidden">
    <span wpd-tooltip='Comment Link' wpd-tooltip-position='left'><i class='fas fa-link' aria-hidden='true' data-wpd-clipboard='https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/#comment-14699'></i></span>
</div>
</div>
    <div class="wpd-comment-subheader">

    <div class="wpd-comment-date" title="August 26, 2025 12:46 am">
    <i class='far fa-clock' aria-hidden='true'></i>
    1 month ago
</div>

</div>

    <div class="wpd-comment-text">
    <p>So wholesome</p>

</div>
    <div class="wpd-comment-footer">
    <div class="wpd-vote">
    <div class="wpd-vote-up wpd_not_clicked">
        <svg xmlns='https://www.w3.org/2000/svg' viewBox='0 0 24 24'><path fill='none' d='M0 0h24v24H0V0z'/><path d='M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2z'/></svg>
    </div>
    <div class='wpd-vote-result' title='0'>0</div>
    <div class="wpd-vote-down wpd_not_clicked">
        <svg xmlns='https://www.w3.org/2000/svg' viewBox='0 0 24 24'><path fill='none' d='M0 0h24v24H0z'/><path d='M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v2c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z'/></svg>
    </div>
</div>
    <div class="wpd-reply-button">
    <svg xmlns='https://www.w3.org/2000/svg' viewBox='0 0 24 24'><path d='M10 9V5l-7 7 7 7v-4.1c5 0 8.5 1.6 11 5.1-1-5-4-10-11-11z'/><path d='M0 0h24v24H0z' fill='none'/></svg>
    <span>Reply</span>
</div>
<div class='wpd-wpanel'></div>
    <div class="wpd-space"></div>

</div>
</div>
</div><div id='wpdiscuz_form_anchor-14699_0'></div></div><div id='wpd-comm-16976_0' class='comment odd alt thread-odd thread-alt depth-1 wpd-comment wpd_comment_level-1'><div class="wpd-comment-wrap wpd-blog-guest">
    <div class="wpd-comment-left ">
    <div class="wpd-avatar ">
    <img alt="guestguest123" src="https://philiascans.org/wp-content/uploads/2025/09/pfp_68cbbcb0741fb.jpg" class="avatar avatar-64 photo" height="64" width="64" />
</div>
</div>
    <div id="comment-16976" class="wpd-comment-right">
    <div class="wpd-comment-header">
    <div class="wpd-comment-author ">
    guestguest123
</div>


    <div class="wpd-comment-share wpd-hidden wpd-tooltip wpd-top">
    <i class='fas fa-share-alt' aria-hidden='true'></i>
    <div class="wpd-tooltip-content">
        <a class='wc_tw' rel='noreferrer' target='_blank' href='https://twitter.com/intent/tweet?text=Quite interesting
&url=https%3A%2F%2Fphiliascans.org%2Fseries%2Fsanctuary-of-the-unloved-noble-lady%2F%23comment-16976' title='Share On X'><i class='wpf-cta' aria-hidden='true'><svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path d='M389.2 48h70.6L305.6 224.2 487 464H345L233.7 318.6 106.5 464H35.8L200.7 275.5 26.8 48H172.4L272.9 180.9 389.2 48zM364.4 421.8h39.1L151.1 88h-42L364.4 421.8z'/></svg></i></a><a class='wc_vk' rel='noreferrer' target='_blank' href='https://vk.com/share.php?url=https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/' title='Share On VKontakte'><i class='wpf-cta' aria-hidden='true'><svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 448 512'><path d='M31.5 63.5C0 95 0 145.7 0 247V265C0 366.3 0 417 31.5 448.5C63 480 113.7 480 215 480H233C334.3 480 385 480 416.5 448.5C448 417 448 366.3 448 265V247C448 145.7 448 95 416.5 63.5C385 32 334.3 32 233 32H215C113.7 32 63 32 31.5 63.5zM75.6 168.3H126.7C128.4 253.8 166.1 290 196 297.4V168.3H244.2V242C273.7 238.8 304.6 205.2 315.1 168.3H363.3C359.3 187.4 351.5 205.6 340.2 221.6C328.9 237.6 314.5 251.1 297.7 261.2C316.4 270.5 332.9 283.6 346.1 299.8C359.4 315.9 369 334.6 374.5 354.7H321.4C316.6 337.3 306.6 321.6 292.9 309.8C279.1 297.9 262.2 290.4 244.2 288.1V354.7H238.4C136.3 354.7 78 284.7 75.6 168.3z'/></svg></i></a><a class='wc_ok' rel='noreferrer' target='_blank' href='https://connect.ok.ru/offer?url=https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/' title='Share On Odnoklassniki'><i class='wpf-cta' aria-hidden='true'><svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 320 512'><path d='M275.1 334c-27.4 17.4-65.1 24.3-90 26.9l20.9 20.6 76.3 76.3c27.9 28.6-17.5 73.3-45.7 45.7-19.1-19.4-47.1-47.4-76.3-76.6L84 503.4c-28.2 27.5-73.6-17.6-45.4-45.7 19.4-19.4 47.1-47.4 76.3-76.3l20.6-20.6c-24.6-2.6-62.9-9.1-90.6-26.9-32.6-21-46.9-33.3-34.3-59 7.4-14.6 27.7-26.9 54.6-5.7 0 0 36.3 28.9 94.9 28.9s94.9-28.9 94.9-28.9c26.9-21.1 47.1-8.9 54.6 5.7 12.4 25.7-1.9 38-34.5 59.1zM30.3 129.7C30.3 58 88.6 0 160 0s129.7 58 129.7 129.7c0 71.4-58.3 129.4-129.7 129.4s-129.7-58-129.7-129.4zm66 0c0 35.1 28.6 63.7 63.7 63.7s63.7-28.6 63.7-63.7c0-35.4-28.6-64-63.7-64s-63.7 28.6-63.7 64z'/></svg></i></a>
    </div>
</div>

    <div class="wpd-space"></div>
    <div class="wpd-comment-link wpd-hidden">
    <span wpd-tooltip='Comment Link' wpd-tooltip-position='left'><i class='fas fa-link' aria-hidden='true' data-wpd-clipboard='https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/#comment-16976'></i></span>
</div>
</div>
    <div class="wpd-comment-subheader">

    <div class="wpd-comment-date" title="September 17, 2025 10:16 am">
    <i class='far fa-clock' aria-hidden='true'></i>
    22 days ago
</div>

</div>

    <div class="wpd-comment-text">
    <p>Quite interesting</p>

</div>
    <div class="wpd-comment-footer">
    <div class="wpd-vote">
    <div class="wpd-vote-up wpd_not_clicked">
        <svg xmlns='https://www.w3.org/2000/svg' viewBox='0 0 24 24'><path fill='none' d='M0 0h24v24H0V0z'/><path d='M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2z'/></svg>
    </div>
    <div class='wpd-vote-result wpd-up' title='2'>2</div>
    <div class="wpd-vote-down wpd_not_clicked">
        <svg xmlns='https://www.w3.org/2000/svg' viewBox='0 0 24 24'><path fill='none' d='M0 0h24v24H0z'/><path d='M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v2c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z'/></svg>
    </div>
</div>
    <div class="wpd-reply-button">
    <svg xmlns='https://www.w3.org/2000/svg' viewBox='0 0 24 24'><path d='M10 9V5l-7 7 7 7v-4.1c5 0 8.5 1.6 11 5.1-1-5-4-10-11-11z'/><path d='M0 0h24v24H0z' fill='none'/></svg>
    <span>Reply</span>
</div>
<div class='wpd-wpanel'></div>
    <div class="wpd-space"></div>
    <div class="wpd-tool-wrap">

    <div class="wpd-toggle wpd-hidden wpd_not_clicked" wpd-tooltip="Hide Replies">
    <i class='fas fa-chevron-up'></i>
</div>
</div>
</div>
</div>
</div><div id='wpdiscuz_form_anchor-16976_0'></div><div id='wpd-comm-17049_16976' class='comment even depth-2 wpd-comment wpd-reply wpd_comment_level-2'><div class="wpd-comment-wrap wpd-blog-guest">
    <div class="wpd-comment-left ">
    <div class="wpd-avatar ">
    <img alt='SenpaiXD' src='https://secure.gravatar.com/avatar/5312aa4a09a4f7c3fe1490cd9e711d43c7305de4c0307b689c3884bdae4cf664?s=64&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/5312aa4a09a4f7c3fe1490cd9e711d43c7305de4c0307b689c3884bdae4cf664?s=128&#038;d=mm&#038;r=g 2x' class='avatar avatar-64 photo' height='64' width='64' decoding='async'/>
</div>
</div>
    <div id="comment-17049" class="wpd-comment-right">
    <div class="wpd-comment-header">
    <div class="wpd-comment-author ">
    SenpaiXD
</div>


    <div class="wpd-comment-share wpd-hidden wpd-tooltip wpd-top">
    <i class='fas fa-share-alt' aria-hidden='true'></i>
    <div class="wpd-tooltip-content">
        <a class='wc_tw' rel='noreferrer' target='_blank' href='https://twitter.com/intent/tweet?text=Nice art
&url=https%3A%2F%2Fphiliascans.org%2Fseries%2Fsanctuary-of-the-unloved-noble-lady%2F%23comment-17049' title='Share On X'><i class='wpf-cta' aria-hidden='true'><svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path d='M389.2 48h70.6L305.6 224.2 487 464H345L233.7 318.6 106.5 464H35.8L200.7 275.5 26.8 48H172.4L272.9 180.9 389.2 48zM364.4 421.8h39.1L151.1 88h-42L364.4 421.8z'/></svg></i></a><a class='wc_vk' rel='noreferrer' target='_blank' href='https://vk.com/share.php?url=https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/' title='Share On VKontakte'><i class='wpf-cta' aria-hidden='true'><svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 448 512'><path d='M31.5 63.5C0 95 0 145.7 0 247V265C0 366.3 0 417 31.5 448.5C63 480 113.7 480 215 480H233C334.3 480 385 480 416.5 448.5C448 417 448 366.3 448 265V247C448 145.7 448 95 416.5 63.5C385 32 334.3 32 233 32H215C113.7 32 63 32 31.5 63.5zM75.6 168.3H126.7C128.4 253.8 166.1 290 196 297.4V168.3H244.2V242C273.7 238.8 304.6 205.2 315.1 168.3H363.3C359.3 187.4 351.5 205.6 340.2 221.6C328.9 237.6 314.5 251.1 297.7 261.2C316.4 270.5 332.9 283.6 346.1 299.8C359.4 315.9 369 334.6 374.5 354.7H321.4C316.6 337.3 306.6 321.6 292.9 309.8C279.1 297.9 262.2 290.4 244.2 288.1V354.7H238.4C136.3 354.7 78 284.7 75.6 168.3z'/></svg></i></a><a class='wc_ok' rel='noreferrer' target='_blank' href='https://connect.ok.ru/offer?url=https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/' title='Share On Odnoklassniki'><i class='wpf-cta' aria-hidden='true'><svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 320 512'><path d='M275.1 334c-27.4 17.4-65.1 24.3-90 26.9l20.9 20.6 76.3 76.3c27.9 28.6-17.5 73.3-45.7 45.7-19.1-19.4-47.1-47.4-76.3-76.6L84 503.4c-28.2 27.5-73.6-17.6-45.4-45.7 19.4-19.4 47.1-47.4 76.3-76.3l20.6-20.6c-24.6-2.6-62.9-9.1-90.6-26.9-32.6-21-46.9-33.3-34.3-59 7.4-14.6 27.7-26.9 54.6-5.7 0 0 36.3 28.9 94.9 28.9s94.9-28.9 94.9-28.9c26.9-21.1 47.1-8.9 54.6 5.7 12.4 25.7-1.9 38-34.5 59.1zM30.3 129.7C30.3 58 88.6 0 160 0s129.7 58 129.7 129.7c0 71.4-58.3 129.4-129.7 129.4s-129.7-58-129.7-129.4zm66 0c0 35.1 28.6 63.7 63.7 63.7s63.7-28.6 63.7-63.7c0-35.4-28.6-64-63.7-64s-63.7 28.6-63.7 64z'/></svg></i></a>
    </div>
</div>

    <div class="wpd-space"></div>
    <div class="wpd-comment-link wpd-hidden">
    <span wpd-tooltip='Comment Link' wpd-tooltip-position='left'><i class='fas fa-link' aria-hidden='true' data-wpd-clipboard='https://philiascans.org/series/sanctuary-of-the-unloved-noble-lady/#comment-17049'></i></span>
</div>
</div>

    <div class="wpd-reply-to">
    <i class='far fa-comments'></i>
    Reply to&nbsp;
    <a href="#comment-16976">
        guestguest123
    </a>
    <div class="wpd-comment-date" title="September 17, 2025 10:15 pm">
    <i class='far fa-clock' aria-hidden='true'></i>
    21 days ago
</div>
</div>
    <div class="wpd-comment-text">
    <p>Nice art</p>

</div>
    <div class="wpd-comment-footer">
    <div class="wpd-vote">
    <div class="wpd-vote-up wpd_not_clicked">
        <svg xmlns='https://www.w3.org/2000/svg' viewBox='0 0 24 24'><path fill='none' d='M0 0h24v24H0V0z'/><path d='M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-2z'/></svg>
    </div>
    <div class='wpd-vote-result' title='0'>0</div>
    <div class="wpd-vote-down wpd_not_clicked">
        <svg xmlns='https://www.w3.org/2000/svg' viewBox='0 0 24 24'><path fill='none' d='M0 0h24v24H0z'/><path d='M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v2c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z'/></svg>
    </div>
</div>
    <div class="wpd-reply-button">
    <svg xmlns='https://www.w3.org/2000/svg' viewBox='0 0 24 24'><path d='M10 9V5l-7 7 7 7v-4.1c5 0 8.5 1.6 11 5.1-1-5-4-10-11-11z'/><path d='M0 0h24v24H0z' fill='none'/></svg>
    <span>Reply</span>
</div>

    <div class="wpd-space"></div>

</div>
</div>
</div><div id='wpdiscuz_form_anchor-17049_16976'></div></div></div>                    <div class="wpdiscuz-comment-pagination">
                                            </div>
                </div>
            </div>
                </div>
        </div>
    <div id="wpdiscuz-loading-bar"
         class="wpdiscuz-loading-bar-unauth"></div>
    <div id="wpdiscuz-comment-message"
         class="wpdiscuz-comment-message-unauth"></div>
                </div>

									                        </div>
                    </section>
                </aside>
            </div> -->
        </div>
      </div>
    </main>

    <div class="modal fade" id="synopsis" style="display: none;" aria-hidden="true">
      <div class="modal-dialog limit-w modal-dialog-centered">
        <div class="modal-content p-4">
          <div class="modal-close" data-dismiss="modal"><i class="fa-solid fa-xmark"></i></div>
          <p>Stella was never given any love from her family or any skills given by God. When her sister loses the heart
            of her fiancé and she runs away to a monastery, Stella awakens to the joys of cleaning and becomes a maid to
            Cecil, a prince with a reason to stay in a room filled with a noxious gas! Before she knows it, she has
            acquired the skill of “purification” – a skill that, when combined with his “destruction” skill, transforms
            a magical beast into a fluffy holy beast! Stella, who possesses such saintly powers, has a secret about her
            origins…?</p>
        </div>
      </div>
    </div>

    <footer>
      <div class="gotop">
      </div>

      <!-- Footer Top Section -->
      <div class="footer-top">
        <!-- Logo and Tagline -->
        <div class="footer-brand">

          <a class="logo" href="https://philiascans.org">
            <img src="https://philiascans.org/wp-content/uploads/2025/06/cropped-philiascans-logo-1.png"
              alt="Philia Scans">
          </a>
          <p class="tagline">Dive into the ultimate world of Manga, Doujinshi, Adventure &amp; Fantasy!</p>
        </div>

        <!-- Footer Links -->
        <div class="footer-links">
          <li id="menu-item-628"
            class="menu-item menu-item-type-post_type menu-item-object-page menu-item-home menu-item-628"><a
              href="https://philiascans.org/">Home</a></li>
          <li id="menu-item-625"
            class="menu-item menu-item-type-post_type menu-item-object-page menu-item-privacy-policy menu-item-625"><a
              rel="privacy-policy" href="https://philiascans.org/privacy-policy/">Privacy Policy</a></li>
          <li id="menu-item-626" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-626"><a
              href="https://philiascans.org/about-us/">About Us</a></li>
          <li id="menu-item-3823" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-3823"><a
              href="https://philiascans.org/dmca/">DMCA</a></li>
        </div>
      </div>

      <!-- Footer Bottom Section -->
      <div class="footer-bottom">
        <div class="copyright">
          <p>© 2025 Philia Scans. All rights reserved</p>
          <p class="subtitle">All rights reserved</p>
          <span>
            Coded by <a href="https://ko-fi.com/shidodono" target="_blank" style="color: var(--color-7);">Shido</a>
          </span>
        </div>
        <div class="social-links">
        </div>
      </div>

    </footer>

    <script type="speculationrules">
{"prefetch":[{"source":"document","where":{"and":[{"href_matches":"\/*"},{"not":{"href_matches":["\/wp-*.php","\/wp-admin\/*","\/wp-content\/uploads\/*","\/wp-content\/*","\/wp-content\/plugins\/*","\/wp-content\/themes\/wp-esco\/*","\/*\\?(.+)"]}},{"not":{"selector_matches":"a[rel~=\"nofollow\"]"}},{"not":{"selector_matches":".no-prefetch, .no-prefetch a"}}]},"eagerness":"conservative"}]}
</script>



    <script>
      document.addEventListener('DOMContentLoaded', function () {
        function loadImagesSequentially(images, index = 0) {
          if (index >= images.length) return;
          const image = images[index];
          const img = new Image();
          img.src = image.getAttribute('data-src');
          img.onload = function () {
            image.src = img.src;
            image.style.display = 'block';
            image.closest('.img').classList.add('loaded');
            loadImagesSequentially(images, index + 1);
          };
          img.onerror = function () {
            console.error('Error loading image:', img.src);
            loadImagesSequentially(images, index + 1);
          };
        }
        window.addEventListener('load', function () {
          const preloadImages = document.querySelectorAll('.preload-image');
          loadImagesSequentially(preloadImages);
        });
      });
    </script>
    <script>
      function copy_to_clipBoard(btn) {
        var copyText = btn.previousSibling;
        copyText.select();
        document.execCommand("copy");
      }
    </script>

    <div class="modal fade" id="frm-wp-manga-buy-coin" tabindex="-1" role="dialog">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content text-center p-4">
          <input type="hidden" name="wp-manga-coin-nonce" value="f944db2b7f">
          <input type="hidden" name="wp-manga-chapter" value="">

          <h4 class="text-white mb-3">
            Premium Chapter </h4>

          <p class="message-login mb-3">
            You are required to login first </p>

          <a href="https://philiascans.org/login" class="btn btn-primary w-100">
            Login </a>

          <button class="btn btn-secondary w-100 mt-2 btn-cancel" data-dismiss="modal">
            Cancel </button>
        </div>
      </div>
    </div><span id="wpdUserContentInfoAnchor" style="display:none;" rel="#wpdUserContentInfo"
      data-wpd-lity="">wpDiscuz</span>
    <div id="wpdUserContentInfo"
      style="overflow:auto;background:#FDFDF6;padding:20px;width:600px;max-width:100%;border-radius:6px;"
      class="lity-hide"></div>
    <div id="wpd-editor-source-code-wrapper-bg"></div>
    <div id="wpd-editor-source-code-wrapper"><textarea id="wpd-editor-source-code"></textarea><button
        id="wpd-insert-source-code">Insert</button><input type="hidden" id="wpd-editor-uid"></div>
    <!-- Sign in with Google button added by Site Kit -->
    <script type="text/javascript" src="https://accounts.google.com/gsi/client"></script>
    <script type="text/javascript">
      /* <![CDATA[ */
      (() => { async function handleCredentialResponse(response) { try { const res = await fetch('https://philiascans.org/wp-login.php?action=googlesitekit_auth', { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }, body: new URLSearchParams(response) }); if (res.ok && res.redirected) { location.assign(res.url); } } catch (error) { console.error(error); } } google.accounts.id.initialize({ client_id: '696088855323-ko9l1qrl2i32md396dplmdn9debu4l1r.apps.googleusercontent.com', callback: handleCredentialResponse, library_name: 'Site-Kit' }); document.querySelectorAll('.googlesitekit-sign-in-with-google__frontend-output-button').forEach((siwgButtonDiv) => { google.accounts.id.renderButton(siwgButtonDiv, { "theme": "outline", "text": "signin_with", "shape": "rectangular" }); }); })();
      /* ]]> */
    </script>

    <!-- End Sign in with Google button added by Site Kit -->
    <script type="text/javascript" id="wp-manga-single-js-js-extra">
      /* <![CDATA[ */
      var wpMangaSingle = { "ajax_url": "https:\/\/philiascans.org\/wp-admin\/admin-ajax.php", "home_url": "https:\/\/philiascans.org" };
      /* ]]> */
    </script>
    <script type="text/javascript"
      src="https://philiascans.org/wp-content/plugins/madara-core/assets/js/manga-single.js?ver=6.8.3"
      id="wp-manga-single-js-js"></script>
    <script type="text/javascript"
      src="https://philiascans.org/wp-content/plugins/wp-manga-chapter-thumbnail/assets/js/frontend.js?ver=6.8.3"
      id="wp-manga-chapter-thumbnail-frontend-js"></script>
    <script type="text/javascript"
      src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.6.1/js/bootstrap.bundle.min.js"
      id="bootstrap-js-js"></script>
    <script type="text/javascript"
      src="https://cdnjs.cloudflare.com/ajax/libs/tooltipster/4.2.0/js/tooltipster.bundle.min.js"
      id="tooltipster-js-js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/Swiper/5.4.4/js/swiper.min.js"
      id="swiper-js-min-js"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/swiper@latest/swiper-bundle.min.js"
      id="swiper-js-js"></script>
    <script type="text/javascript" id="ajax-sh-js-extra">
      /* <![CDATA[ */
      var ajax_manga_params = { "ajax_url": "https:\/\/philiascans.org\/wp-admin\/admin-ajax.php", "comment_nonce": "e071f96f95", "nonce": "66d6ead117", "save_rating_nonce": "1188d4a9d3", "is_logged_in": "false", "site_url": "https:\/\/philiascans.org", "messages": { "login_required": "Please log in first.", "error_occurred": "An error occurred.", "process_error": "An error occurred while processing your request.", "manga_name_required": "Manga title is required.", "manga_name_too_long": "Manga title is too long.", "generic_error": "An error occurred while processing your request. Please try again later.", "success_login": "You have successfully logged in! You will be redirected...", "success_register": "Registration successful! You will be redirected...", "rating_saved": "Rating saved successfully!.", "oldest": "Oldest", "newest": "Newest", "confirm_delete": "Are you sure you want to delete this comment?" } };
      /* ]]> */
    </script>
    <script type="text/javascript" src="https://philiascans.org/wp-content/themes/wp-esco/js/ajax.js?ver=1747994116"
      id="ajax-sh-js"></script>
    <script type="text/javascript" id="live-search-js-extra">
      /* <![CDATA[ */
      var liveSearchData = { "ajaxurl": "https:\/\/philiascans.org\/wp-admin\/admin-ajax.php", "nonce": "c55bd0fe2f" };
      /* ]]> */
    </script>
    <script type="text/javascript"
      src="https://philiascans.org/wp-content/themes/wp-esco/assets/js/live-search.js?ver=6.8.3"
      id="live-search-js"></script>
    <script type="text/javascript" id="wpdiscuz-combo-js-js-extra">
      /* <![CDATA[ */
      var wpdiscuzAjaxObj = { "wc_hide_replies_text": "Hide Replies", "wc_show_replies_text": "View Replies", "wc_msg_required_fields": "Please fill out required fields", "wc_invalid_field": "Some of field value is invalid", "wc_error_empty_text": "please fill out this field to comment", "wc_error_url_text": "url is invalid", "wc_error_email_text": "email address is invalid", "wc_invalid_captcha": "Invalid Captcha Code", "wc_login_to_vote": "You Must Be Logged In To Vote", "wc_deny_voting_from_same_ip": "You are not allowed to vote for this comment", "wc_self_vote": "You cannot vote for your comment", "wc_vote_only_one_time": "You've already voted for this comment", "wc_voting_error": "Voting Error", "wc_banned_user": "You are banned", "wc_comment_edit_not_possible": "Sorry, this comment is no longer possible to edit", "wc_comment_not_updated": "Sorry, the comment was not updated", "wc_comment_not_edited": "You've not made any changes", "wc_msg_input_min_length": "Input is too short", "wc_msg_input_max_length": "Input is too long", "wc_spoiler_title": "Spoiler Title", "wc_cannot_rate_again": "You cannot rate again", "wc_not_allowed_to_rate": "You're not allowed to rate here", "wc_confirm_rate_edit": "Are you sure you want to edit your rate?", "wc_follow_user": "Follow this user", "wc_unfollow_user": "Unfollow this user", "wc_follow_success": "You started following this comment author", "wc_follow_canceled": "You stopped following this comment author.", "wc_follow_email_confirm": "Please check your email and confirm the user following request.", "wc_follow_email_confirm_fail": "Sorry, we couldn't send confirmation email.", "wc_follow_login_to_follow": "Please login to follow users.", "wc_follow_impossible": "We are sorry, but you can't follow this user.", "wc_follow_not_added": "Following failed. Please try again later.", "is_user_logged_in": "", "commentListLoadType": "0", "commentListUpdateType": "0", "commentListUpdateTimer": "60", "liveUpdateGuests": "0", "wordpressThreadCommentsDepth": "5", "wordpressIsPaginate": "0", "commentTextMaxLength": "0", "replyTextMaxLength": "0", "commentTextMinLength": "1", "replyTextMinLength": "1", "storeCommenterData": "100000", "socialLoginAgreementCheckbox": "1", "enableFbLogin": "0", "fbUseOAuth2": "0", "enableFbShare": "0", "facebookAppID": "", "facebookUseOAuth2": "0", "enableGoogleLogin": "0", "googleClientID": "", "googleClientSecret": "", "cookiehash": "3d4b7dd31db6c648b469d8563c6ac9b4", "isLoadOnlyParentComments": "0", "scrollToComment": "1", "commentFormView": "expanded", "enableDropAnimation": "1", "isNativeAjaxEnabled": "1", "userInteractionCheck": "1", "enableBubble": "0", "bubbleLiveUpdate": "0", "bubbleHintTimeout": "45", "bubbleHintHideTimeout": "10", "cookieHideBubbleHint": "wpdiscuz_hide_bubble_hint", "bubbleHintShowOnce": "1", "bubbleHintCookieExpires": "7", "bubbleShowNewCommentMessage": "1", "bubbleLocation": "content_left", "firstLoadWithAjax": "0", "wc_copied_to_clipboard": "Copied to clipboard!", "inlineFeedbackAttractionType": "blink", "loadRichEditor": "1", "wpDiscuzReCaptchaSK": "", "wpDiscuzReCaptchaTheme": "light", "wpDiscuzReCaptchaVersion": "2.0", "wc_captcha_show_for_guest": "0", "wc_captcha_show_for_members": "0", "wpDiscuzIsShowOnSubscribeForm": "0", "wmuEnabled": "1", "wmuInput": "wmu_files", "wmuMaxFileCount": "1", "wmuMaxFileSize": "2097152", "wmuPostMaxSize": "1073741824", "wmuIsLightbox": "1", "wmuMimeTypes": { "jpg": "image\/jpeg", "jpeg": "image\/jpeg", "jpe": "image\/jpeg", "gif": "image\/gif", "png": "image\/png", "bmp": "image\/bmp", "tiff": "image\/tiff", "tif": "image\/tiff", "ico": "image\/x-icon" }, "wmuPhraseConfirmDelete": "Are you sure you want to delete this attachment?", "wmuPhraseNotAllowedFile": "Not allowed file type", "wmuPhraseMaxFileCount": "Maximum number of uploaded files is 1", "wmuPhraseMaxFileSize": "Maximum upload file size is 2MB", "wmuPhrasePostMaxSize": "Maximum post size is 1024MB", "wmuPhraseDoingUpload": "Uploading in progress! Please wait.", "msgEmptyFile": "File is empty. Please upload something more substantial. This error could also be caused by uploads being disabled in your php.ini or by post_max_size being defined as smaller than upload_max_filesize in php.ini.", "msgPostIdNotExists": "Post ID not exists", "msgUploadingNotAllowed": "Sorry, uploading not allowed for this post", "msgPermissionDenied": "You do not have sufficient permissions to perform this action", "wmuKeyImages": "images", "wmuSingleImageWidth": "auto", "wmuSingleImageHeight": "200", "previewTemplate": "<div class=\"wmu-preview [PREVIEW_TYPE_CLASS]\" title=\"[PREVIEW_TITLE]\" data-wmu-type=\"[PREVIEW_TYPE]\" data-wmu-attachment=\"[PREVIEW_ID]\">\r\n    <div class=\"wmu-preview-remove\">\r\n        <img class=\"wmu-preview-img\" src=\"[PREVIEW_ICON]\">\r\n        <div class=\"wmu-file-name\">[PREVIEW_FILENAME]<\/div>\r\n        <!--        <div class=\"wmu-delete\">\u00a0<\/div>-->\r\n    <\/div>\r\n<\/div>\r\n" ,"isUserRated" :"0" ,"version" :"7.6.34" ,"wc_post_id" :"10288" ,"isCookiesEnabled" :"1" ,"loadLastCommentId" :"0" ,"dataFilterCallbacks" : {"wpdLoadMoreComments" :["wp_manga_chapter_comment" ]} ,"phraseFilters" :[] ,"scrollSize" :"32" ,"url" :"https:\/\/philiascans.org\/wp-admin\/admin-ajax.php" ,"customAjaxUrl" :"https:\/\/philiascans.org\/wp-content\/plugins\/wpdiscuz\/utils\/ajax\/wpdiscuz-ajax.php" ,"bubbleUpdateUrl" :"https:\/\/philiascans.org\/wp-json\/wpdiscuz\/v1\/update" ,"restNonce" :"189398e1cd" ,"is_rate_editable" :"0" ,"menu_icon" :"https:\/\/philiascans.org\/wp-content\/plugins\/wpdiscuz\/assets\/img\/plugin-icon\/wpdiscuz-svg.svg" ,"menu_icon_hover" :"https:\/\/philiascans.org\/wp-content\/plugins\/wpdiscuz\/assets\/img\/plugin-icon\/wpdiscuz-svg_hover.svg" ,"is_email_field_required" :"1 "};
      var wpdiscuzUCObj = { "msgConfirmDeleteComment": "Are you sure you want to delete this comment?", "msgConfirmCancelSubscription": "Are you sure you want to cancel this subscription?", "msgConfirmCancelFollow": "Are you sure you want to cancel this follow?", "additionalTab": "0" };
      /* ]]> */
    </script>
    <script type="text/javascript" id="wpdiscuz-combo-js-js-before">
      /* <![CDATA[ */
      var wpdiscuzEditorOptions = {
        modules: {
          toolbar: "",
          counter: {
            uniqueID: "",
            commentmaxcount: 0,
            replymaxcount: 0,
            commentmincount: 1,
            replymincount: 1,
          },
        },
        wc_be_the_first_text: "Be the First to Comment!",
        wc_comment_join_text: "Join the discussion",
        theme: 'snow',
        debug: 'error'
      };

      /* ]]> */
    </script>
    <script type="text/javascript"
      src="https://philiascans.org/wp-content/plugins/wpdiscuz/assets/js/wpdiscuz-combo.min.js?ver=7.6.34"
      id="wpdiscuz-combo-js-js"></script>

    <div id="toast"></div>

    <div class="progress-group">
      <div class="progress-wrap" id="progress-circle">
        <svg class="progress-circle svg-content" width="100%" height="100%" viewBox="-1 -1 102 102">
          <path id="progress-path" d="M50,1 a49,49 0 0,1 0,98 a49,49 0 0,1 0,-98"
            style="stroke-dasharray: 307.919px; stroke-dashoffset: 307.919px;"></path>
        </svg>
      </div>
    </div>
    <script>
      let lastScrollTop = 0;
      let showProgress = false;

      document.addEventListener('scroll', function () {
        const scrollTop = window.scrollY;
        const docHeight = document.documentElement.scrollHeight - document.documentElement.clientHeight;
        const scrollPercent = (scrollTop / docHeight) * 100;
        const progressPath = document.getElementById('progress-path');
        const dashArray = 307.919;
        const dashOffset = dashArray - (scrollPercent / 100) * dashArray;
        progressPath.style.strokeDashoffset = dashOffset;

        const progressWrap = document.getElementById('progress-circle');
        if (scrollTop > 100 && scrollTop < lastScrollTop) {
          if (!showProgress) {
            progressWrap.classList.add('active-progress');
            showProgress = true;
          }
        } else {
          if (showProgress) {
            progressWrap.classList.remove('active-progress');
            showProgress = false;
          }
        }

        lastScrollTop = scrollTop;
      });

      document.getElementById('progress-circle').addEventListener('click', function () {
        window.scrollTo({ top: 0, behavior: 'smooth' });
      });
    </script>

    <script defer=""
      src="https://static.cloudflareinsights.com/beacon.min.js/vcd15cbe7772f49c399c6a5babf22c1241717689176015"
      integrity="sha512-ZpsOmlRQV6y907TI0dKBHq9Md29nnaEIPlkf84rnaERnq6zvWvPUqr2ft8M1aS28oN72PdrCzSjY4U6VaAw1EQ=="
      data-cf-beacon="{&quot;rayId&quot;:&quot;98be480bacdc6403&quot;,&quot;version&quot;:&quot;2025.9.1&quot;,&quot;r&quot;:1,&quot;token&quot;:&quot;d4c00a29ba8d4fa3b94bd8e0f1ec27fd&quot;,&quot;serverTiming&quot;:{&quot;name&quot;:{&quot;cfExtPri&quot;:true,&quot;cfEdge&quot;:true,&quot;cfOrigin&quot;:true,&quot;cfL4&quot;:true,&quot;cfSpeedBrain&quot;:true,&quot;cfCacheStatus&quot;:true}}}"
      crossorigin="anonymous"></script>
  </div>
  <p id="a11y-speak-intro-text" class="a11y-speak-intro-text"
    style="position: absolute;margin: -1px;padding: 0;height: 1px;width: 1px;overflow: hidden;clip: rect(1px, 1px, 1px, 1px);-webkit-clip-path: inset(50%);clip-path: inset(50%);border: 0;word-wrap: normal !important;"
    hidden="hidden">Notifications</p>
  <div id="a11y-speak-assertive" class="a11y-speak-region"
    style="position: absolute;margin: -1px;padding: 0;height: 1px;width: 1px;overflow: hidden;clip: rect(1px, 1px, 1px, 1px);-webkit-clip-path: inset(50%);clip-path: inset(50%);border: 0;word-wrap: normal !important;"
    aria-live="assertive" aria-relevant="additions text" aria-atomic="true"></div>
  <div id="a11y-speak-polite" class="a11y-speak-region"
    style="position: absolute;margin: -1px;padding: 0;height: 1px;width: 1px;overflow: hidden;clip: rect(1px, 1px, 1px, 1px);-webkit-clip-path: inset(50%);clip-path: inset(50%);border: 0;word-wrap: normal !important;"
    aria-live="polite" aria-relevant="additions text" aria-atomic="true"></div>
  <div id="cboxOverlay" style="display: none;"></div>
  <div id="colorbox" class="" role="dialog" tabindex="-1" style="display: none;">
    <div id="cboxWrapper">
      <div>
        <div id="cboxTopLeft" style="float: left;"></div>
        <div id="cboxTopCenter" style="float: left;"></div>
        <div id="cboxTopRight" style="float: left;"></div>
      </div>
      <div style="clear: left;">
        <div id="cboxMiddleLeft" style="float: left;"></div>
        <div id="cboxContent" style="float: left;">
          <div id="cboxTitle" style="float: left;"></div>
          <div id="cboxCurrent" style="float: left;"></div><button type="button" id="cboxPrevious"></button><button
            type="button" id="cboxNext"></button><button type="button" id="cboxSlideshow"></button>
          <div id="cboxLoadingOverlay" style="float: left;"></div>
          <div id="cboxLoadingGraphic" style="float: left;"></div>
        </div>
        <div id="cboxMiddleRight" style="float: left;"></div>
      </div>
      <div style="clear: left;">
        <div id="cboxBottomLeft" style="float: left;"></div>
        <div id="cboxBottomCenter" style="float: left;"></div>
        <div id="cboxBottomRight" style="float: left;"></div>
      </div>
    </div>
    <div style="position: absolute; width: 9999px; visibility: hidden; display: none; max-width: none;"></div>
  </div>
</body>

</html>
