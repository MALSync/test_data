<!DOCTYPE html><html lang="it"><head>
        <title>Otome Game Sekai wa Mob ni Kibishii Sekai desu Episodio 1 Streaming &amp; Download SUB ITA - AnimeWorld</title>
        <meta name="description" content="Trama di Otome Game Sekai wa Mob ni Kibishii Sekai desu SUB ITA: Leon, un ex lavoratore giapponese, si è reincarnato in un &quot;otome game&quot;, e ora si dispera per il fatto che in questo mondo siano le donne a dominare gli uomini. È come se gli uomini fossero solo bestiame che serve da trampolino di lancio per le donne. Le uniche eccezioni sono gli &quot;obiettivi romantici&quot; del gioco, un gruppo di aitanti uomini guidati dal principe ereditario. In queste bizzarre circostanze, Leon possiede un'arma: la sua conoscenza dal mondo precedente, dove la sua sfacciata sorella lo aveva costretto a completare questo gioco. Leon, che vuole solamente vivere come recluso in campagna, usa tale conoscenza per suscitare una feroce rivolta contro le donne e gli uomini belli.">

        <meta name="og:title" content="Otome Game Sekai wa Mob ni Kibishii Sekai desu Episodio 1 Streaming &amp; Download SUB ITA - AnimeWorld">
        <meta name="og:image" content="https://img.animeworld.so/copertine/5z9UH.jpg">
        <meta name="og:description" content="Trama di Otome Game Sekai wa Mob ni Kibishii Sekai desu SUB ITA: Leon, un ex lavoratore giapponese, si è reincarnato in un &quot;otome game&quot;, e ora si dispera per il fatto che in questo mondo siano le donne a dominare gli uomini. È come se gli uomini fossero solo bestiame che serve da trampolino di lancio per le donne. Le uniche eccezioni sono gli &quot;obiettivi romantici&quot; del gioco, un gruppo di aitanti uomini guidati dal principe ereditario. In queste bizzarre circostanze, Leon possiede un'arma: la sua conoscenza dal mondo precedente, dove la sua sfacciata sorella lo aveva costretto a completare questo gioco. Leon, che vuole solamente vivere come recluso in campagna, usa tale conoscenza per suscitare una feroce rivolta contro le donne e gli uomini belli.">
        <meta name="twitter:title" content="Otome Game Sekai wa Mob ni Kibishii Sekai desu Episodio 1 Streaming &amp; Download SUB ITA - AnimeWorld">
        <meta name="twitter:description" content="Trama di Otome Game Sekai wa Mob ni Kibishii Sekai desu SUB ITA: Leon, un ex lavoratore giapponese, si è reincarnato in un &quot;otome game&quot;, e ora si dispera per il fatto che in questo mondo siano le donne a dominare gli uomini. È come se gli uomini fossero solo bestiame che serve da trampolino di lancio per le donne. Le uniche eccezioni sono gli &quot;obiettivi romantici&quot; del gioco, un gruppo di aitanti uomini guidati dal principe ereditario. In queste bizzarre circostanze, Leon possiede un'arma: la sua conoscenza dal mondo precedente, dove la sua sfacciata sorella lo aveva costretto a completare questo gioco. Leon, che vuole solamente vivere come recluso in campagna, usa tale conoscenza per suscitare una feroce rivolta contro le donne e gli uomini belli.">

        <script src="/cdn-cgi/apps/head/gUD1_Roqbz07nfDP76H2_1gkwKw.js"></script><script type="application/ld+json">
         {
            "@context": "http://schema.org",
            "@type": "TVEpisode",
            "@id": "https://www.animeworld.so/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/htfv9X",
            "url": "https://www.animeworld.so/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/htfv9X/",
            "name": "Otome Game Sekai wa Mob ni Kibishii Sekai desu Episodio 1",
            "alternateName": "Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Episodio 1",
            "episodeNumber": "1",
            "image": "https://img.animeworld.so/locandine/5z9UH.jpg",
            "potentialAction": {
                "@type": "SearchAction",
                "target": "https://www.animeworld.so/search?keyword={keyword}",
                "query-input": "required name=keyword"
            },
            "partOfSeries":{
                "@type": "TVSeries",
                "@id": "https://www.animeworld.so/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/",
                "name": "Otome Game Sekai wa Mob ni Kibishii Sekai desu",
                "alternateName": "Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs",
                "description": "Trama di Otome Game Sekai wa Mob ni Kibishii Sekai desu SUB ITA: Leon, un ex lavoratore giapponese, si è reincarnato in un &quot;otome game&quot;, e ora si dispera per il fatto che in questo mondo siano le donne a dominare gli uomini. È come se gli uomini fossero solo bestiame che serve da trampolino di lancio per le donne. Le uniche eccezioni sono gli &quot;obiettivi romantici&quot; del gioco, un gruppo di aitanti uomini guidati dal principe ereditario. In queste bizzarre circostanze, Leon possiede un&#x27;arma: la sua conoscenza dal mondo precedente, dove la sua sfacciata sorella lo aveva costretto a completare questo gioco. Leon, che vuole solamente vivere come recluso in campagna, usa tale conoscenza per suscitare una feroce rivolta contro le donne e gli uomini belli.",
                "aggregateRating": {
                    "@type": "AggregateRating",
                    "ratingCount": "1820",
                    "ratingValue": "7.91",
                    "bestRating": "10",
                    "worstRating": "0"
                }
            },
            "description": "Trama di Otome Game Sekai wa Mob ni Kibishii Sekai desu SUB ITA: Leon, un ex lavoratore giapponese, si è reincarnato in un &quot;otome game&quot;, e ora si dispera per il fatto che in questo mondo siano le donne a dominare gli uomini. È come se gli uomini fossero solo bestiame che serve da trampolino di lancio per le donne. Le uniche eccezioni sono gli &quot;obiettivi romantici&quot; del gioco, un gruppo di aitanti uomini guidati dal principe ereditario. In queste bizzarre circostanze, Leon possiede un&#x27;arma: la sua conoscenza dal mondo precedente, dove la sua sfacciata sorella lo aveva costretto a completare questo gioco. Leon, che vuole solamente vivere come recluso in campagna, usa tale conoscenza per suscitare una feroce rivolta contro le donne e gli uomini belli.",
            "aggregateRating": {
                "@type": "AggregateRating",
                "ratingCount": "1820",
                "ratingValue": "7.91",
                "bestRating": "10",
                "worstRating": "0"
            }
         }
        </script>

        <meta name="keywords" content="Animeworld, Animesaturn, Animepertutti, Animeleggendari, Animeforce, Animeunity, Bam, Anime, Naruto, Onepiece, Episodi, Puntate, Toriko, Kuroko no basket, Inazuma Eleven, Ova, Ona, Special, Movie, Fansub, Traduttori, Fairy Tail, Bleach, Hunter x Hunter, Sword Art Online, Pokémon, Ecchi, Hentai, Anime Sub ITA, Dragon Ball Super, Anime Streaming, Anime ITA, Anime Streaming ITA, Streaming anime SUB ITA, Streaming Anime ITALIANI, Lista Anime ITA, Lista Anime SUB ITA, Dr. Stone, One Piece, Naruto, Boruto, Detective Conan, Nanatsu no taizai, Dororo, Fire Force, Anime Streaming gratis ITA, Guarda anime gratis, Re:Zero, Demon Slayer, Otome Game Sekai wa Mob ni Kibishii Sekai desu Episodio 1 SUB ITA, Otome Game Sekai wa Mob ni Kibishii Sekai desu Episodio 1 ITA, Otome Game Sekai wa Mob ni Kibishii Sekai desu Streaming Episodio 1 SUB ITA, Otome Game Sekai wa Mob ni Kibishii Sekai desu Streaming Episodio 1 ITA, Otome Game Sekai wa Mob ni Kibishii Sekai desu Download Episodio 1 SUB ITA, Otome Game Sekai wa Mob ni Kibishii Sekai desu Download Episodio 1 ITA, Otome Game Sekai wa Mob ni Kibishii Sekai desu SUB ITA, Otome Game Sekai wa Mob ni Kibishii Sekai desu ITA, Otome Game Sekai wa Mob ni Kibishii Sekai desu Streaming SUB ITA, Otome Game Sekai wa Mob ni Kibishii Sekai desu Download SUB ITA, Otome Game Sekai wa Mob ni Kibishii Sekai desu Streaming ITA, Otome Game Sekai wa Mob ni Kibishii Sekai desu Download ITA, Otome Game Sekai wa Mob ni Kibishii Sekai desu Streaming &amp; Download SUB ITA, Otome Game Sekai wa Mob ni Kibishii Sekai desu Streaming &amp; Download ITA, Otome Game Sekai wa Mob ni Kibishii Sekai desu Fansub ITA, Otome Game Sekai wa Mob ni Kibishii Sekai desu Fansub SUB ITA - Otome Game Sekai wa Mob ni Kibishii Sekai desu Streaming Episodi SUB ITA, Otome Game Sekai wa Mob ni Kibishii Sekai desu Download Episodi SUB ITA, Otome Game Sekai wa Mob ni Kibishii Sekai desu Sottotitoli Italiani, Lista Episodi Otome Game Sekai wa Mob ni Kibishii Sekai desu SUB ITA, Lista Episodi Otome Game Sekai wa Mob ni Kibishii Sekai desu ITA, Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Episodio 1 SUB ITA, Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Episodio 1 ITA, Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Streaming Episodio 1 SUB ITA, Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Streaming Episodio 1 ITA, Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Download Episodio 1 SUB ITA, Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Download Episodio 1 ITA, Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs SUB ITA, Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs ITA, Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Streaming SUB ITA, Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Download SUB ITA, Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Streaming ITA, Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Download ITA, Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Streaming &amp; Download SUB ITA, Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Streaming &amp; Download ITA, Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Fansub ITA, Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Fansub SUB ITA, Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Streaming Episodi SUB ITA, Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Download Episodi SUB ITA, Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Sottotitoli Italiani, Lista Episodi Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs SUB ITA, Lista Episodi Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs ITA">


        
            <base id="base" href="https://www.animeworld.so">
        
            <meta charset="utf-8">
        
            <meta name="siteName" id="siteName" content="AnimeWorld">
            <meta name="copyright" content="AnimeWorld">
            <meta name="language" content="IT">
        
            <meta name="reply-to" content="info@animeworld.it">
            <meta name="robots" content="index,follow">
        
            <meta name="revisit-after" content="1 days">
            <meta name="csrf-token" id="csrf-token" content="FLldeDU9-Eyy40rsQCS8iWrFORdnC7krcT7w">
            <meta name="referrer" content="always">
        
            <style data-tippy-stylesheet="">.tippy-tooltip[data-animation=fade][data-state=hidden]{opacity:0}.tippy-iOS{cursor:pointer!important;-webkit-tap-highlight-color:transparent}.tippy-popper{pointer-events:none;max-width:calc(100vw - 10px);transition-timing-function:cubic-bezier(.165,.84,.44,1);transition-property:transform}.tippy-tooltip{position:relative;color:#fff;border-radius:4px;font-size:14px;line-height:1.4;background-color:#333;transition-property:visibility,opacity,transform;outline:0}.tippy-tooltip[data-placement^=top]>.tippy-arrow{border-width:8px 8px 0;border-top-color:#333;margin:0 3px;transform-origin:50% 0;bottom:-7px}.tippy-tooltip[data-placement^=bottom]>.tippy-arrow{border-width:0 8px 8px;border-bottom-color:#333;margin:0 3px;transform-origin:50% 7px;top:-7px}.tippy-tooltip[data-placement^=left]>.tippy-arrow{border-width:8px 0 8px 8px;border-left-color:#333;margin:3px 0;transform-origin:0 50%;right:-7px}.tippy-tooltip[data-placement^=right]>.tippy-arrow{border-width:8px 8px 8px 0;border-right-color:#333;margin:3px 0;transform-origin:7px 50%;left:-7px}.tippy-tooltip[data-interactive][data-state=visible]{pointer-events:auto}.tippy-tooltip[data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.54,1.5,.38,1.11)}.tippy-arrow{position:absolute;border-color:transparent;border-style:solid}.tippy-content{padding:5px 9px}</style><link rel="apple-touch-icon" class="favicon" sizes="57x57" href="https://static.animeworld.so/assets/images/favicon/apple-icon-57x57.png?3">
            <link rel="apple-touch-icon" class="favicon" sizes="60x60" href="https://static.animeworld.so/assets/images/favicon/apple-icon-60x60.png?3">
            <link rel="apple-touch-icon" class="favicon" sizes="72x72" href="https://static.animeworld.so/assets/images/favicon/apple-icon-72x72.png?3">
            <link rel="apple-touch-icon" class="favicon" sizes="76x76" href="https://static.animeworld.so/assets/images/favicon/apple-icon-76x76.png?3">
            <link rel="apple-touch-icon" class="favicon" sizes="114x114" href="https://static.animeworld.so/assets/images/favicon/apple-icon-114x114.png?3">
            <link rel="apple-touch-icon" class="favicon" sizes="120x120" href="https://static.animeworld.so/assets/images/favicon/apple-icon-120x120.png?3">
            <link rel="apple-touch-icon" class="favicon" sizes="144x144" href="https://static.animeworld.so/assets/images/favicon/apple-icon-144x144.png?3">
            <link rel="apple-touch-icon" class="favicon" sizes="152x152" href="https://static.animeworld.so/assets/images/favicon/apple-icon-152x152.png?3">
            <link rel="apple-touch-icon" class="favicon" sizes="180x180" href="https://static.animeworld.so/assets/images/favicon/apple-icon-180x180.png?3">
            <link rel="icon" type="image/png" class="favicon" sizes="192x192" href="https://static.animeworld.so/assets/images/favicon/android-icon-192x192.png?4">
            <link rel="icon" type="image/png" class="favicon" sizes="32x32" href="https://static.animeworld.so/assets/images/favicon/favicon-32x32.png?3">
            <link rel="icon" type="image/png" class="favicon" sizes="96x96" href="https://static.animeworld.so/assets/images/favicon/favicon-96x96.png?3">
            <link rel="icon" type="image/png" class="favicon" sizes="16x16" href="https://static.animeworld.so/assets/images/favicon/favicon-16x16.png?3">
            <meta name="msapplication-TileImage" class="favicon" content="https://static.animeworld.so/assets/images/favicon/ms-icon-144x144.png?4">
            <link rel="manifest" class="favicon" href="https://static.animeworld.so/dist/frontend/views/partials/js/manifest.json?11">
            <meta name="msapplication-TileColor" content="#165fa7">
            <meta name="theme-color" content="#165fa7">
        
            <meta charset="UTF-8">
        
            <meta name="google-site-verification" content="-6zMVhGTJJ9mkspjXOtqIKcGV5KzmdQ-L1lo4PqEAag">
        
            <meta name="og:site_name" content="AnimeWorld">
            <meta name="og:type" content="website">
            <meta name="og:url" content="https://www.animeworld.so/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/htfv9X">
            
            <meta name="twitter:card" content="summary">
        
        
            <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
        
            <link rel="stylesheet" href="https://static.animeworld.so/dist/frontend/vendor/animate/animate.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
            <noscript><link rel="stylesheet" href="https://static.animeworld.so/dist/frontend/vendor/animate/animate.css"></noscript>
        
            <script type="application/ld+json">
                 {
                   "@context": "http://schema.org",
                   "@type": "WebSite",
                   "name": "AnimeWorld",
                   "url": "https://www.animeworld.so/",
                   "potentialAction": {
                     "@type": "SearchAction",
                     "target": "https://www.animeworld.so/search?keyword={keyword}",
                     "query-input": "required name=keyword"
                   }
                 }
             </script>
        
            <style>
                @font-face {
                    font-family:"animeworldv2";src:url(https://static.animeworld.so/dist/frontend/font/animeworld/animeworldv2.eot);src:url(https://static.animeworld.so/dist/frontend/font/animeworld/animeworldv2.eot?#iefix) format("embedded-opentype"),url(https://static.animeworld.so/dist/frontend/font/animeworld/animeworldv2.woff) format("woff"),url(https://static.animeworld.so/dist/frontend/font/animeworld/animeworldv2.ttf) format("truetype"),url(https://static.animeworld.so/dist/frontend/font/animeworld/animeworldv2.svg#animeworldv2) format("svg");font-weight:400;font-style:normal;
                }
        
                @font-face {
                    font-family: "VAG Rounded Next Semibold";
                    src: url(https://static.animeworld.so/dist/frontend/font/logo-footer/VAGRoundedNext-SemiBold.eot?#iefix) format("embedded-opentype"),
                        url(https://static.animeworld.so/dist/frontend/font/logo-footer/VAGRoundedNext-SemiBold.woff) format("woff"),
                        url(https://static.animeworld.so/dist/frontend/font/logo-footer/VAGRoundedNext-SemiBold.ttf) format("truetype");
                    font-weight: 400;
                    font-style: normal;
                }
        
                @font-face {
                    font-family: Roobert;
                    font-weight: 400;
                    src: url(https://static.animeworld.so/dist/frontend/font/Roobert-Regular-3fe213a3618624fd7b71.woff2) format("woff2"), url(https://static.animeworld.so/dist/frontend/font/Roobert-Regular-014ea096b0f865fa4dd9.woff) format("woff");
                    font-display: swap;
                }
        
                @font-face {
                    font-family: Roobert;
                    font-weight: 600;
                    src: url(https://static.animeworld.so/dist/frontend/font/Roobert-SemiBold-df85158a0012c224b021.woff2) format("woff2"), url(https://static.animeworld.so/dist/frontend/font/Roobert-SemiBold-48a406bf82c48cfaa849.woff) format("woff");
                    font-display: swap;
                }
        
                @font-face {
                    font-family: Roobert;
                    font-weight: 700;
                    src: url(https://static.animeworld.so/dist/frontend/font/Roobert-Bold-7fda562c82c09fbabec2.woff2) format("woff2"), url(https://static.animeworld.so/dist/frontend/font/Roobert-SemiBold-48a406bf82c48cfaa849.woff) format("woff");
                    font-display: swap;
                }
            </style>
            <link href="https://fonts.googleapis.com/css?family=Nunito+Sans:300,400,700|Montserrat" rel="stylesheet">
        
            <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
            <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.2/css/all.css">
            <link href="https://static.animeworld.so/dist/frontend/all.css?11111" rel="stylesheet">
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css" as="style" onload="this.onload=null;this.rel='stylesheet'" media="screen">
            <noscript><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css" type="text/css"></noscript>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js"></script>
            <script src="https://static.animeworld.so/dist/frontend/jquery/jquery-ui.min.js"></script>
            <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery-cookie/1.4.1/jquery.cookie.min.js"></script>
        
            <link href="https://static.animeworld.so/dist/frontend/dark.css?11" rel="stylesheet" id="dark-theme" disabled="">
        
            <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.1/umd/popper.min.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/tippy.js/5.2.1/tippy-bundle.iife.min.js"></script>
        
            <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
        
            <link rel="stylesheet" href="https://static.animeworld.so/dist/frontend/vendor/tooltipster/css/tooltipster.bundle.min.css">
            <script type="text/javascript" src="https://static.animeworld.so/dist/frontend/vendor/tooltipster/js/tooltipster.bundle.min.js"></script>
        
            <script type="text/javascript" src="https://static.animeworld.so/dist/frontend/vendor/sweetalert/sweetalert2.all.min.js"></script><style>.swal2-popup.swal2-toast{-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-webkit-box-align:center;align-items:center;width:auto;padding:.625em;overflow-y:hidden;background:#fff;box-shadow:0 0 .625em #d9d9d9}.swal2-popup.swal2-toast .swal2-header{-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row}.swal2-popup.swal2-toast .swal2-title{-webkit-box-flex:1;flex-grow:1;-webkit-box-pack:start;justify-content:flex-start;margin:0 .6em;font-size:1em}.swal2-popup.swal2-toast .swal2-footer{margin:.5em 0 0;padding:.5em 0 0;font-size:.8em}.swal2-popup.swal2-toast .swal2-close{position:static;width:.8em;height:.8em;line-height:.8}.swal2-popup.swal2-toast .swal2-content{-webkit-box-pack:start;justify-content:flex-start;font-size:1em}.swal2-popup.swal2-toast .swal2-icon{width:2em;min-width:2em;height:2em;margin:0}.swal2-popup.swal2-toast .swal2-icon .swal2-icon-content{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;font-size:1.8em;font-weight:700}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.swal2-popup.swal2-toast .swal2-icon .swal2-icon-content{font-size:.25em}}.swal2-popup.swal2-toast .swal2-icon.swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line]{top:.875em;width:1.375em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:.3125em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:.3125em}.swal2-popup.swal2-toast .swal2-actions{flex-basis:auto!important;width:auto;height:auto;margin:0 .3125em}.swal2-popup.swal2-toast .swal2-styled{margin:0 .3125em;padding:.3125em .625em;font-size:1em}.swal2-popup.swal2-toast .swal2-styled:focus{box-shadow:0 0 0 1px #fff,0 0 0 3px rgba(50,100,150,.4)}.swal2-popup.swal2-toast .swal2-success{border-color:#a5dc86}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line]{position:absolute;width:1.6em;height:3em;-webkit-transform:rotate(45deg);transform:rotate(45deg);border-radius:50%}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=left]{top:-.8em;left:-.5em;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);-webkit-transform-origin:2em 2em;transform-origin:2em 2em;border-radius:4em 0 0 4em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=right]{top:-.25em;left:.9375em;-webkit-transform-origin:0 1.5em;transform-origin:0 1.5em;border-radius:0 4em 4em 0}.swal2-popup.swal2-toast .swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-success .swal2-success-fix{top:0;left:.4375em;width:.4375em;height:2.6875em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line]{height:.3125em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=tip]{top:1.125em;left:.1875em;width:.75em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=long]{top:.9375em;right:.1875em;width:1.375em}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-tip{-webkit-animation:swal2-toast-animate-success-line-tip .75s;animation:swal2-toast-animate-success-line-tip .75s}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-long{-webkit-animation:swal2-toast-animate-success-line-long .75s;animation:swal2-toast-animate-success-line-long .75s}.swal2-popup.swal2-toast.swal2-show{-webkit-animation:swal2-toast-show .5s;animation:swal2-toast-show .5s}.swal2-popup.swal2-toast.swal2-hide{-webkit-animation:swal2-toast-hide .1s forwards;animation:swal2-toast-hide .1s forwards}.swal2-container{display:-webkit-box;display:flex;position:fixed;z-index:1060;top:0;right:0;bottom:0;left:0;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-webkit-box-align:center;align-items:center;-webkit-box-pack:center;justify-content:center;padding:.625em;overflow-x:hidden;-webkit-transition:background-color .1s;transition:background-color .1s;-webkit-overflow-scrolling:touch}.swal2-container.swal2-backdrop-show{background:rgba(0,0,0,.4)}.swal2-container.swal2-backdrop-hide{background:0 0!important}.swal2-container.swal2-top{-webkit-box-align:start;align-items:flex-start}.swal2-container.swal2-top-left,.swal2-container.swal2-top-start{-webkit-box-align:start;align-items:flex-start;-webkit-box-pack:start;justify-content:flex-start}.swal2-container.swal2-top-end,.swal2-container.swal2-top-right{-webkit-box-align:start;align-items:flex-start;-webkit-box-pack:end;justify-content:flex-end}.swal2-container.swal2-center{-webkit-box-align:center;align-items:center}.swal2-container.swal2-center-left,.swal2-container.swal2-center-start{-webkit-box-align:center;align-items:center;-webkit-box-pack:start;justify-content:flex-start}.swal2-container.swal2-center-end,.swal2-container.swal2-center-right{-webkit-box-align:center;align-items:center;-webkit-box-pack:end;justify-content:flex-end}.swal2-container.swal2-bottom{-webkit-box-align:end;align-items:flex-end}.swal2-container.swal2-bottom-left,.swal2-container.swal2-bottom-start{-webkit-box-align:end;align-items:flex-end;-webkit-box-pack:start;justify-content:flex-start}.swal2-container.swal2-bottom-end,.swal2-container.swal2-bottom-right{-webkit-box-align:end;align-items:flex-end;-webkit-box-pack:end;justify-content:flex-end}.swal2-container.swal2-bottom-end>:first-child,.swal2-container.swal2-bottom-left>:first-child,.swal2-container.swal2-bottom-right>:first-child,.swal2-container.swal2-bottom-start>:first-child,.swal2-container.swal2-bottom>:first-child{margin-top:auto}.swal2-container.swal2-grow-fullscreen>.swal2-modal{display:-webkit-box!important;display:flex!important;-webkit-box-flex:1;flex:1;align-self:stretch;-webkit-box-pack:center;justify-content:center}.swal2-container.swal2-grow-row>.swal2-modal{display:-webkit-box!important;display:flex!important;-webkit-box-flex:1;flex:1;align-content:center;-webkit-box-pack:center;justify-content:center}.swal2-container.swal2-grow-column{-webkit-box-flex:1;flex:1;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column}.swal2-container.swal2-grow-column.swal2-bottom,.swal2-container.swal2-grow-column.swal2-center,.swal2-container.swal2-grow-column.swal2-top{-webkit-box-align:center;align-items:center}.swal2-container.swal2-grow-column.swal2-bottom-left,.swal2-container.swal2-grow-column.swal2-bottom-start,.swal2-container.swal2-grow-column.swal2-center-left,.swal2-container.swal2-grow-column.swal2-center-start,.swal2-container.swal2-grow-column.swal2-top-left,.swal2-container.swal2-grow-column.swal2-top-start{-webkit-box-align:start;align-items:flex-start}.swal2-container.swal2-grow-column.swal2-bottom-end,.swal2-container.swal2-grow-column.swal2-bottom-right,.swal2-container.swal2-grow-column.swal2-center-end,.swal2-container.swal2-grow-column.swal2-center-right,.swal2-container.swal2-grow-column.swal2-top-end,.swal2-container.swal2-grow-column.swal2-top-right{-webkit-box-align:end;align-items:flex-end}.swal2-container.swal2-grow-column>.swal2-modal{display:-webkit-box!important;display:flex!important;-webkit-box-flex:1;flex:1;align-content:center;-webkit-box-pack:center;justify-content:center}.swal2-container:not(.swal2-top):not(.swal2-top-start):not(.swal2-top-end):not(.swal2-top-left):not(.swal2-top-right):not(.swal2-center-start):not(.swal2-center-end):not(.swal2-center-left):not(.swal2-center-right):not(.swal2-bottom):not(.swal2-bottom-start):not(.swal2-bottom-end):not(.swal2-bottom-left):not(.swal2-bottom-right):not(.swal2-grow-fullscreen)>.swal2-modal{margin:auto}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.swal2-container .swal2-modal{margin:0!important}}.swal2-popup{display:none;position:relative;box-sizing:border-box;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;width:32em;max-width:100%;padding:1.25em;border:none;border-radius:.3125em;background:#fff;font-family:inherit;font-size:1rem}.swal2-popup:focus{outline:0}.swal2-popup.swal2-loading{overflow-y:hidden}.swal2-header{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-align:center;align-items:center}.swal2-title{position:relative;max-width:100%;margin:0 0 .4em;padding:0;color:#595959;font-size:1.875em;font-weight:600;text-align:center;text-transform:none;word-wrap:break-word}.swal2-actions{display:-webkit-box;display:flex;z-index:1;flex-wrap:wrap;-webkit-box-align:center;align-items:center;-webkit-box-pack:center;justify-content:center;width:100%;margin:1.25em auto 0}.swal2-actions:not(.swal2-loading) .swal2-styled[disabled]{opacity:.4}.swal2-actions:not(.swal2-loading) .swal2-styled:hover{background-image:-webkit-gradient(linear,left top,left bottom,from(rgba(0,0,0,.1)),to(rgba(0,0,0,.1)));background-image:linear-gradient(rgba(0,0,0,.1),rgba(0,0,0,.1))}.swal2-actions:not(.swal2-loading) .swal2-styled:active{background-image:-webkit-gradient(linear,left top,left bottom,from(rgba(0,0,0,.2)),to(rgba(0,0,0,.2)));background-image:linear-gradient(rgba(0,0,0,.2),rgba(0,0,0,.2))}.swal2-actions.swal2-loading .swal2-styled.swal2-confirm{box-sizing:border-box;width:2.5em;height:2.5em;margin:.46875em;padding:0;-webkit-animation:swal2-rotate-loading 1.5s linear 0s infinite normal;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border:.25em solid transparent;border-radius:100%;border-color:transparent;background-color:transparent!important;color:transparent;cursor:default;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.swal2-actions.swal2-loading .swal2-styled.swal2-cancel{margin-right:30px;margin-left:30px}.swal2-actions.swal2-loading :not(.swal2-styled).swal2-confirm::after{content:"";display:inline-block;width:15px;height:15px;margin-left:5px;-webkit-animation:swal2-rotate-loading 1.5s linear 0s infinite normal;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border:3px solid #999;border-radius:50%;border-right-color:transparent;box-shadow:1px 1px 1px #fff}.swal2-styled{margin:.3125em;padding:.625em 2em;box-shadow:none;font-weight:500}.swal2-styled:not([disabled]){cursor:pointer}.swal2-styled.swal2-confirm{border:0;border-radius:.25em;background:initial;background-color:#3085d6;color:#fff;font-size:1.0625em}.swal2-styled.swal2-cancel{border:0;border-radius:.25em;background:initial;background-color:#aaa;color:#fff;font-size:1.0625em}.swal2-styled:focus{outline:0;box-shadow:0 0 0 1px #fff,0 0 0 3px rgba(50,100,150,.4)}.swal2-styled::-moz-focus-inner{border:0}.swal2-footer{-webkit-box-pack:center;justify-content:center;margin:1.25em 0 0;padding:1em 0 0;border-top:1px solid #eee;color:#545454;font-size:1em}.swal2-timer-progress-bar{position:absolute;bottom:0;left:0;width:100%;height:.25em;background:rgba(0,0,0,.2)}.swal2-image{max-width:100%;margin:1.25em auto}.swal2-close{position:absolute;z-index:2;top:0;right:0;-webkit-box-pack:center;justify-content:center;width:1.2em;height:1.2em;padding:0;overflow:hidden;-webkit-transition:color .1s ease-out;transition:color .1s ease-out;border:none;border-radius:0;outline:initial;background:0 0;color:#ccc;font-family:serif;font-size:2.5em;line-height:1.2;cursor:pointer}.swal2-close:hover{-webkit-transform:none;transform:none;background:0 0;color:#f27474}.swal2-close::-moz-focus-inner{border:0}.swal2-content{z-index:1;-webkit-box-pack:center;justify-content:center;margin:0;padding:0;color:#545454;font-size:1.125em;font-weight:400;line-height:normal;text-align:center;word-wrap:break-word}.swal2-checkbox,.swal2-file,.swal2-input,.swal2-radio,.swal2-select,.swal2-textarea{margin:1em auto}.swal2-file,.swal2-input,.swal2-textarea{box-sizing:border-box;width:100%;-webkit-transition:border-color .3s,box-shadow .3s;transition:border-color .3s,box-shadow .3s;border:1px solid #d9d9d9;border-radius:.1875em;background:inherit;box-shadow:inset 0 1px 1px rgba(0,0,0,.06);color:inherit;font-size:1.125em}.swal2-file.swal2-inputerror,.swal2-input.swal2-inputerror,.swal2-textarea.swal2-inputerror{border-color:#f27474!important;box-shadow:0 0 2px #f27474!important}.swal2-file:focus,.swal2-input:focus,.swal2-textarea:focus{border:1px solid #b4dbed;outline:0;box-shadow:0 0 3px #c4e6f5}.swal2-file::-webkit-input-placeholder,.swal2-input::-webkit-input-placeholder,.swal2-textarea::-webkit-input-placeholder{color:#ccc}.swal2-file::-moz-placeholder,.swal2-input::-moz-placeholder,.swal2-textarea::-moz-placeholder{color:#ccc}.swal2-file:-ms-input-placeholder,.swal2-input:-ms-input-placeholder,.swal2-textarea:-ms-input-placeholder{color:#ccc}.swal2-file::-ms-input-placeholder,.swal2-input::-ms-input-placeholder,.swal2-textarea::-ms-input-placeholder{color:#ccc}.swal2-file::placeholder,.swal2-input::placeholder,.swal2-textarea::placeholder{color:#ccc}.swal2-range{margin:1em auto;background:#fff}.swal2-range input{width:80%}.swal2-range output{width:20%;color:inherit;font-weight:600;text-align:center}.swal2-range input,.swal2-range output{height:2.625em;padding:0;font-size:1.125em;line-height:2.625em}.swal2-input{height:2.625em;padding:0 .75em}.swal2-input[type=number]{max-width:10em}.swal2-file{background:inherit;font-size:1.125em}.swal2-textarea{height:6.75em;padding:.75em}.swal2-select{min-width:50%;max-width:100%;padding:.375em .625em;background:inherit;color:inherit;font-size:1.125em}.swal2-checkbox,.swal2-radio{-webkit-box-align:center;align-items:center;-webkit-box-pack:center;justify-content:center;background:#fff;color:inherit}.swal2-checkbox label,.swal2-radio label{margin:0 .6em;font-size:1.125em}.swal2-checkbox input,.swal2-radio input{margin:0 .4em}.swal2-validation-message{display:none;-webkit-box-align:center;align-items:center;-webkit-box-pack:center;justify-content:center;padding:.625em;overflow:hidden;background:#f0f0f0;color:#666;font-size:1em;font-weight:300}.swal2-validation-message::before{content:"!";display:inline-block;width:1.5em;min-width:1.5em;height:1.5em;margin:0 .625em;border-radius:50%;background-color:#f27474;color:#fff;font-weight:600;line-height:1.5em;text-align:center}.swal2-icon{position:relative;box-sizing:content-box;-webkit-box-pack:center;justify-content:center;width:5em;height:5em;margin:1.25em auto 1.875em;border:.25em solid transparent;border-radius:50%;font-family:inherit;line-height:5em;cursor:default;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.swal2-icon .swal2-icon-content{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;font-size:3.75em}.swal2-icon.swal2-error{border-color:#f27474;color:#f27474}.swal2-icon.swal2-error .swal2-x-mark{position:relative;-webkit-box-flex:1;flex-grow:1}.swal2-icon.swal2-error [class^=swal2-x-mark-line]{display:block;position:absolute;top:2.3125em;width:2.9375em;height:.3125em;border-radius:.125em;background-color:#f27474}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:1.0625em;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:1em;-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}.swal2-icon.swal2-error.swal2-icon-show{-webkit-animation:swal2-animate-error-icon .5s;animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-error.swal2-icon-show .swal2-x-mark{-webkit-animation:swal2-animate-error-x-mark .5s;animation:swal2-animate-error-x-mark .5s}.swal2-icon.swal2-warning{border-color:#facea8;color:#f8bb86}.swal2-icon.swal2-info{border-color:#9de0f6;color:#3fc3ee}.swal2-icon.swal2-question{border-color:#c9dae1;color:#87adbd}.swal2-icon.swal2-success{border-color:#a5dc86;color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-circular-line]{position:absolute;width:3.75em;height:7.5em;-webkit-transform:rotate(45deg);transform:rotate(45deg);border-radius:50%}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=left]{top:-.4375em;left:-2.0635em;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);-webkit-transform-origin:3.75em 3.75em;transform-origin:3.75em 3.75em;border-radius:7.5em 0 0 7.5em}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=right]{top:-.6875em;left:1.875em;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);-webkit-transform-origin:0 3.75em;transform-origin:0 3.75em;border-radius:0 7.5em 7.5em 0}.swal2-icon.swal2-success .swal2-success-ring{position:absolute;z-index:2;top:-.25em;left:-.25em;box-sizing:content-box;width:100%;height:100%;border:.25em solid rgba(165,220,134,.3);border-radius:50%}.swal2-icon.swal2-success .swal2-success-fix{position:absolute;z-index:1;top:.5em;left:1.625em;width:.4375em;height:5.625em;-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}.swal2-icon.swal2-success [class^=swal2-success-line]{display:block;position:absolute;z-index:2;height:.3125em;border-radius:.125em;background-color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-line][class$=tip]{top:2.875em;left:.8125em;width:1.5625em;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.swal2-icon.swal2-success [class^=swal2-success-line][class$=long]{top:2.375em;right:.5em;width:2.9375em;-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-line-tip{-webkit-animation:swal2-animate-success-line-tip .75s;animation:swal2-animate-success-line-tip .75s}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-line-long{-webkit-animation:swal2-animate-success-line-long .75s;animation:swal2-animate-success-line-long .75s}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-circular-line-right{-webkit-animation:swal2-rotate-success-circular-line 4.25s ease-in;animation:swal2-rotate-success-circular-line 4.25s ease-in}.swal2-progress-steps{-webkit-box-align:center;align-items:center;margin:0 0 1.25em;padding:0;background:inherit;font-weight:600}.swal2-progress-steps li{display:inline-block;position:relative}.swal2-progress-steps .swal2-progress-step{z-index:20;width:2em;height:2em;border-radius:2em;background:#3085d6;color:#fff;line-height:2em;text-align:center}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step{background:#3085d6}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step{background:#add8e6;color:#fff}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step-line{background:#add8e6}.swal2-progress-steps .swal2-progress-step-line{z-index:10;width:2.5em;height:.4em;margin:0 -1px;background:#3085d6}[class^=swal2]{-webkit-tap-highlight-color:transparent}.swal2-show{-webkit-animation:swal2-show .3s;animation:swal2-show .3s}.swal2-hide{-webkit-animation:swal2-hide .15s forwards;animation:swal2-hide .15s forwards}.swal2-noanimation{-webkit-transition:none;transition:none}.swal2-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}.swal2-rtl .swal2-close{right:auto;left:0}.swal2-rtl .swal2-timer-progress-bar{right:0;left:auto}@supports (-ms-accelerator:true){.swal2-range input{width:100%!important}.swal2-range output{display:none}}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.swal2-range input{width:100%!important}.swal2-range output{display:none}}@-moz-document url-prefix(){.swal2-close:focus{outline:2px solid rgba(50,100,150,.4)}}@-webkit-keyframes swal2-toast-show{0%{-webkit-transform:translateY(-.625em) rotateZ(2deg);transform:translateY(-.625em) rotateZ(2deg)}33%{-webkit-transform:translateY(0) rotateZ(-2deg);transform:translateY(0) rotateZ(-2deg)}66%{-webkit-transform:translateY(.3125em) rotateZ(2deg);transform:translateY(.3125em) rotateZ(2deg)}100%{-webkit-transform:translateY(0) rotateZ(0);transform:translateY(0) rotateZ(0)}}@keyframes swal2-toast-show{0%{-webkit-transform:translateY(-.625em) rotateZ(2deg);transform:translateY(-.625em) rotateZ(2deg)}33%{-webkit-transform:translateY(0) rotateZ(-2deg);transform:translateY(0) rotateZ(-2deg)}66%{-webkit-transform:translateY(.3125em) rotateZ(2deg);transform:translateY(.3125em) rotateZ(2deg)}100%{-webkit-transform:translateY(0) rotateZ(0);transform:translateY(0) rotateZ(0)}}@-webkit-keyframes swal2-toast-hide{100%{-webkit-transform:rotateZ(1deg);transform:rotateZ(1deg);opacity:0}}@keyframes swal2-toast-hide{100%{-webkit-transform:rotateZ(1deg);transform:rotateZ(1deg);opacity:0}}@-webkit-keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@-webkit-keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}@keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}@-webkit-keyframes swal2-show{0%{-webkit-transform:scale(.7);transform:scale(.7)}45%{-webkit-transform:scale(1.05);transform:scale(1.05)}80%{-webkit-transform:scale(.95);transform:scale(.95)}100%{-webkit-transform:scale(1);transform:scale(1)}}@keyframes swal2-show{0%{-webkit-transform:scale(.7);transform:scale(.7)}45%{-webkit-transform:scale(1.05);transform:scale(1.05)}80%{-webkit-transform:scale(.95);transform:scale(.95)}100%{-webkit-transform:scale(1);transform:scale(1)}}@-webkit-keyframes swal2-hide{0%{-webkit-transform:scale(1);transform:scale(1);opacity:1}100%{-webkit-transform:scale(.5);transform:scale(.5);opacity:0}}@keyframes swal2-hide{0%{-webkit-transform:scale(1);transform:scale(1);opacity:1}100%{-webkit-transform:scale(.5);transform:scale(.5);opacity:0}}@-webkit-keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.8125em;width:1.5625em}}@keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.8125em;width:1.5625em}}@-webkit-keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@-webkit-keyframes swal2-rotate-success-circular-line{0%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}5%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}12%{-webkit-transform:rotate(-405deg);transform:rotate(-405deg)}100%{-webkit-transform:rotate(-405deg);transform:rotate(-405deg)}}@keyframes swal2-rotate-success-circular-line{0%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}5%{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}12%{-webkit-transform:rotate(-405deg);transform:rotate(-405deg)}100%{-webkit-transform:rotate(-405deg);transform:rotate(-405deg)}}@-webkit-keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;-webkit-transform:scale(.4);transform:scale(.4);opacity:0}50%{margin-top:1.625em;-webkit-transform:scale(.4);transform:scale(.4);opacity:0}80%{margin-top:-.375em;-webkit-transform:scale(1.15);transform:scale(1.15)}100%{margin-top:0;-webkit-transform:scale(1);transform:scale(1);opacity:1}}@keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;-webkit-transform:scale(.4);transform:scale(.4);opacity:0}50%{margin-top:1.625em;-webkit-transform:scale(.4);transform:scale(.4);opacity:0}80%{margin-top:-.375em;-webkit-transform:scale(1.15);transform:scale(1.15)}100%{margin-top:0;-webkit-transform:scale(1);transform:scale(1);opacity:1}}@-webkit-keyframes swal2-animate-error-icon{0%{-webkit-transform:rotateX(100deg);transform:rotateX(100deg);opacity:0}100%{-webkit-transform:rotateX(0);transform:rotateX(0);opacity:1}}@keyframes swal2-animate-error-icon{0%{-webkit-transform:rotateX(100deg);transform:rotateX(100deg);opacity:0}100%{-webkit-transform:rotateX(0);transform:rotateX(0);opacity:1}}@-webkit-keyframes swal2-rotate-loading{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes swal2-rotate-loading{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow:hidden}body.swal2-height-auto{height:auto!important}body.swal2-no-backdrop .swal2-container{top:auto;right:auto;bottom:auto;left:auto;max-width:calc(100% - .625em * 2);background-color:transparent!important}body.swal2-no-backdrop .swal2-container>.swal2-modal{box-shadow:0 0 10px rgba(0,0,0,.4)}body.swal2-no-backdrop .swal2-container.swal2-top{top:0;left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%)}body.swal2-no-backdrop .swal2-container.swal2-top-left,body.swal2-no-backdrop .swal2-container.swal2-top-start{top:0;left:0}body.swal2-no-backdrop .swal2-container.swal2-top-end,body.swal2-no-backdrop .swal2-container.swal2-top-right{top:0;right:0}body.swal2-no-backdrop .swal2-container.swal2-center{top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}body.swal2-no-backdrop .swal2-container.swal2-center-left,body.swal2-no-backdrop .swal2-container.swal2-center-start{top:50%;left:0;-webkit-transform:translateY(-50%);transform:translateY(-50%)}body.swal2-no-backdrop .swal2-container.swal2-center-end,body.swal2-no-backdrop .swal2-container.swal2-center-right{top:50%;right:0;-webkit-transform:translateY(-50%);transform:translateY(-50%)}body.swal2-no-backdrop .swal2-container.swal2-bottom{bottom:0;left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%)}body.swal2-no-backdrop .swal2-container.swal2-bottom-left,body.swal2-no-backdrop .swal2-container.swal2-bottom-start{bottom:0;left:0}body.swal2-no-backdrop .swal2-container.swal2-bottom-end,body.swal2-no-backdrop .swal2-container.swal2-bottom-right{right:0;bottom:0}@media print{body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow-y:scroll!important}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown)>[aria-hidden=true]{display:none}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown) .swal2-container{position:static!important}}body.swal2-toast-shown .swal2-container{background-color:transparent}body.swal2-toast-shown .swal2-container.swal2-top{top:0;right:auto;bottom:auto;left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-top-end,body.swal2-toast-shown .swal2-container.swal2-top-right{top:0;right:0;bottom:auto;left:auto}body.swal2-toast-shown .swal2-container.swal2-top-left,body.swal2-toast-shown .swal2-container.swal2-top-start{top:0;right:auto;bottom:auto;left:0}body.swal2-toast-shown .swal2-container.swal2-center-left,body.swal2-toast-shown .swal2-container.swal2-center-start{top:50%;right:auto;bottom:auto;left:0;-webkit-transform:translateY(-50%);transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-center{top:50%;right:auto;bottom:auto;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}body.swal2-toast-shown .swal2-container.swal2-center-end,body.swal2-toast-shown .swal2-container.swal2-center-right{top:50%;right:0;bottom:auto;left:auto;-webkit-transform:translateY(-50%);transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-left,body.swal2-toast-shown .swal2-container.swal2-bottom-start{top:auto;right:auto;bottom:0;left:0}body.swal2-toast-shown .swal2-container.swal2-bottom{top:auto;right:auto;bottom:0;left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-end,body.swal2-toast-shown .swal2-container.swal2-bottom-right{top:auto;right:0;bottom:0;left:auto}body.swal2-toast-column .swal2-toast{-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-align:stretch;align-items:stretch}body.swal2-toast-column .swal2-toast .swal2-actions{-webkit-box-flex:1;flex:1;align-self:stretch;height:2.2em;margin-top:.3125em}body.swal2-toast-column .swal2-toast .swal2-loading{-webkit-box-pack:center;justify-content:center}body.swal2-toast-column .swal2-toast .swal2-input{height:2em;margin:.3125em auto;font-size:1em}body.swal2-toast-column .swal2-toast .swal2-validation-message{font-size:1em}</style>
            <link rel="stylesheet" href="https://static.animeworld.so/dist/frontend/vendor/sweetalert/sweetalert2.min.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
            <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@sweetalert2/theme-dark@3/dark.css" id="swal-dark-theme" disabled="">
            <noscript>
                <link rel="stylesheet" href="https://static.animeworld.so/dist/frontend/vendor/sweetalert/sweetalert2.min.css">
                <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@sweetalert2/theme-dark@3/dark.css" id="swal-dark-theme" disabled>
            </noscript>
            <script src="https://static.animeworld.so/dist/frontend/sweetalert2-aw-presets.js?0"></script>
        
        
            <link rel="stylesheet" href="https://static.animeworld.so/dist/frontend/views/partials/header/header.css?6">
            <link rel="stylesheet" href="https://static.animeworld.so/dist/frontend/views/partials/header/alert.css?344443">
        
            <script src="https://cdn.jsdelivr.net/npm/es6-promise-polyfill@1.2.0/promise.min.js"></script>
        
            <style>
                .loading {
                    background-image: url(https://static.animeworld.so/assets/loading2.svg);
                    background-repeat: no-repeat;
                }
            </style>
        
            <script>
                window.csrfToken = "FLldeDU9-Eyy40rsQCS8iWrFORdnC7krcT7w" /*|| $("#csrf-token").attr("content")*/;
                window.baseURL = "https://www.animeworld.so" || $("#base").attr("href");
                window.STATIC_URL = "https://static.animeworld.so";
                window.CDN = "https://img.animeworld.so";
                window.siteName = "AnimeWorld" || $("#siteName").attr("content");
                window.vapidKey = "BLCywTMNrumNlP9UwRYdTphcRgv1r3Qgcp7wCY2Rsp8kJcSgLYSAuxyrKtq2jbhK1EbB5tMHSrRTQ48sTSMKa8c";
            </script>
        
        
            <script src="https://static.animeworld.so/dist/frontend/views/partials/js/pwa.js?14" id="pwa-script"></script>
            <script>
                if (navigator && navigator.serviceWorker && localStorage) {
                    if (!localStorage.getItem("didUpdatePWA10")) {
                        navigator.serviceWorker.getRegistrations().then(function (registrations) {
                            for (let registration of registrations) {
                                registration.update();
                            }
                            localStorage.setItem("didUpdatePWA10", true);
                        });
                    }
                }
            </script>
        
        
        

        <link rel="stylesheet" href="https://static.animeworld.so/dist/frontend/vendor/emojionearea/emojionearea.min.css">
        <script type="text/javascript" src="https://static.animeworld.so/dist/frontend/vendor/emojionearea/emojionearea.min.js"></script>

        

        <link rel="stylesheet" type="text/css" href="https://static.animeworld.so/dist/frontend/vendor/jssocials/jssocials.css">
        <link rel="stylesheet" type="text/css" href="https://static.animeworld.so/dist/frontend/vendor/jssocials/jssocials-theme-flat.css">
        <script src="https://static.animeworld.so/dist/frontend/vendor/jssocials/jssocials.min.js"></script>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-star-rating/4.0.6/js/star-rating.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-star-rating/4.0.6/themes/krajee-fas/theme.min.js"></script>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-star-rating/4.0.6/themes/krajee-fas/theme.min.css">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-star-rating/4.0.6/css/star-rating.min.css">
        <script src="https://static.animeworld.so/dist/frontend/views/play/rate.js?56472452534"></script>

        <link rel="stylesheet" href="https://static.animeworld.so/dist/frontend/views/play/watch.css?3">


        <script id="page-data">
            window.siteName = "AnimeWorld";
            window.animeId = "4017";
            window.animeName = decodeURIComponent("Otome%20Game%20Sekai%20wa%20Mob%20ni%20Kibishii%20Sekai%20desu");
            window.animeLink = "otome-game-sekai-wa-mob-ni-kibishii-sekai-desu";
            window.animeIdentifier = "5z9UH";
            window.animeDub = false;
            window.episodeToken = "htfv9X";
            window.requestedWithNoEpisodeToken = parseInt("0");
            window.activeTrailer = false;
            window.commentsURL = "anime";
            window.defaultYurikoCommentBackgroundImage = "https://img.animeworld.so/comments-background/1.png";
        </script>
    <style>.ajs-no-overflow {padding-right: 6px }</style><style>AD-SLOT,
AD-TRIPLE-BOX,
DFP-AD,
[class^="adDisplay-module"],
[class^="amp-ad-"],
[data-ad-cls],
[data-adbridg-ad-class],
[data-css-class="dfp-inarticle"],
[data-d-ad-id],
[data-desktop-ad-id],
[data-dynamic-ads],
[data-ez-name],
[data-freestar-ad],
[data-id^="div-gpt-ad"],
[data-m-ad-id],
[data-mobile-ad-id],
[data-name="adaptiveConstructorAd"],
[data-rc-widget],
[data-role="tile-ads-module"],
[data-template-type="nativead"],
[data-testid="ad_testID"],
[data-type="ad-vertical"],
[id^="ad-wrap-"],
[id^="ad_sky"],
[id^="ad_slider"],
[id^="section-ad-banner"],
[onclick^="location.href='http://www.reimageplus.com"],
a-ad,
a[style="width:100%;height:100%;z-index:10000000000000000;position:absolute;top:0;left:0;"],
ad-shield-ads,
app-ad,
app-advertisement,
app-large-ad,
ark-top-ad,
article.ad,
aside[id^="adrotate_widgets-"],
atf-ad-slot,
bottomadblock,
display-ads,
div[class^="Adstyled__AdWrapper-"],
div[class^="Display_displayAd"],
div[class^="kiwi-ad-wrapper"],
div[class^="native-ad-"],
div[data-ad-placeholder],
div[data-ad-wrapper],
div[data-adname],
div[data-adunit-path],
div[data-adunit],
div[data-adzone],
div[data-alias="300x250 Ad 1"],
div[data-alias="300x250 Ad 2"],
div[data-content="Advertisement"],
div[data-contentexchange-widget],
div[data-dfp-id],
div[data-id-advertdfpconf],
div[data-insertion],
div[data-mini-ad-unit],
div[data-native-ad],
div[data-spotim-slot],
div[id^="_vdo_ads_player_ai_"],
div[id^="ad-div-"],
div[id^="ad-position-"],
div[id^="adngin-"],
div[id^="adrotate_widgets-"],
div[id^="ads250_250-widget-"],
div[id^="ads300_100-widget-"],
div[id^="ads300_250-widget-"],
div[id^="adspot-"],
div[id^="advads_ad_"],
div[id^="crt-"][style],
div[id^="div-ads-"],
div[id^="google_dfp_"],
div[id^="gpt_ad_"],
div[id^="lazyad-"],
div[id^="optidigital-adslot"],
div[id^="pa_sticky_ad_box_middle_"],
div[id^="rc-widget-"],
div[id^="sticky_ad_"],
div[id^="vuukle-ad-"],
div[recirculation-ad-container],
gpt-ad,
guj-ad,
hl-adsense,
img[src^="https://images.purevpnaffiliates.com"],
ps-connatix-module,
span[data-ez-ph-id],
span[id^="ezoic-pub-ad-placeholder-"],
topadblock,
zeus-ad,
[class^="tile-picker__CitrusBannerContainer-sc-"],
citrus-ad-wrapper,
[class^="s2nPlayer"],
div[id*="MarketGid"],
[onclick*="content.ad/"],
AMP-AD,
amp-ad,
amp-ad-custom,
amp-connatix-player,
amp-fx-flying-carpet,
a[data-obtrack^="http://paid.outbrain.com/network/redir?"],
a[data-oburl^="https://paid.outbrain.com/network/redir?"],
a[data-redirect^="https://paid.outbrain.com/network/redir?"],
a[data-url^="http://paid.outbrain.com/network/redir?"] + .author,
a[data-widget-outbrain-redirect^="http://paid.outbrain.com/network/redir?"],
a[onmousedown^="this.href='http://paid.outbrain.com/network/redir?"][target="_blank"],
a[onmousedown^="this.href='http://paid.outbrain.com/network/redir?"][target="_blank"] + .ob_source,
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"][target="_blank"] + .ob_source,
a[target="_blank"][onmousedown="this.href^='http://paid.outbrain.com/network/redir?"],
div[id^="taboola-stream-"],
display-ad-component,
div[id^="zergnet-widget"],
a[aria-label="Werbelink"],
[onclick*="window.open('http://deloplen.com/"],
[data-uri^="https://s3.amazonaws.com"],
[data-lnguri^="https://s3.amazonaws.com"],
[onclick*="postlnk.com"],
[class^="DisplayAd"],
div[class*="displayAdRight"],
[data-lnguri*="vipbox"],
[src^="https://aff1xstavka.com"],
[class^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]),
[id^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]),
div[id^="div-gpt-"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]),
.samBannerUnit, .samCodeUnit,
[src^="//dombnrs.com/"],
[src^="https://forum.picbaron.com/Banner"],
div[id][style^="position: fixed; inset: 0px; z-index: 2147483647; background: black"][style*="opacity: 0.01"],
div[class$="player-promo-col"],
div#spot-holder.spot-holder[style="display: block;"],
a[dontfo=""][style$="position: absolute; z-index: 2147483647;"],
[data-ad-module]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-width]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-adblockkey]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(html):not(.adsbygoogle),
[data-advadstrackid]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-manager-id]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
div[style^="z-index: 999999; background-image: url(\"data:image/gif;base64,"][style$="position: absolute;"],
a[onclick="openAuc();"],
div[style="position: fixed; display: block; width: 100%; height: 100%; inset: 0px; background-color: rgba(0, 0, 0, 0); z-index: 300000;"],
div[style^="position:fixed;inset:0px;z-index:2147483647;background:black;opacity:0.01"],
a[id][href="https://chpadblock.com/"][rel^="noopener noreferrer"],
a[id][href="https://toolkitspro.com"][rel^="noopener noreferrer"],
a[id][href="https://hamrocsit.com"][rel^="noopener noreferrer"],
iframe.lazyloaded[data-src^="https://rcm-fe.amazon-adsystem.com/"],
[style="position:absolute;top:0;left:0;width: 100%;height: 100%;z-index:2147483647"],
[style="top: 0px; left: 0px; width: 940px; height: 600px; position: absolute; z-index: 2147483647;"],
div[style="position: fixed;top: 0;left: 0;right: 0;bottom:0;z-index: 99999999;background: rgba(0,0,0,.6);"] { display: none !important; }

[data-ad-name],
[data-revive-zoneid],
[name^="google_ads_iframe"],
div[aria-label="Ads"],
div[data-ad-targeting],
div[data-google-query-id],
div[data-native_ad],
div[id^="ad_position_"],
div[id^="dfp-ad-"],
div[id^="ezoic-pub-ad-"],
div[id^="yandex_ad"],
ins.adsbygoogle,
div[id*="ScriptRoot"],
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"][target="_blank"],
.trc_related_container div[data-item-syndicated="true"],
amp-embed[type="taboola"],
[id^="google_ads_iframe"]:not(.rb-adbanner) { display: none !important; }</style><style>.widget.carbonads-widget,
a[href^="https://m.do.co/c/"] > img,
[href="https://t.me/Russia_Vs_Ukraine_War3"],
[href*="uselnk.com/"],
a[href^="http://com-1.pro/"],
a[href^="https://bc.game/"],
a[href^="http://www.onwebcam.com/random?t_link="],
[href*="postlnk.com"],
[href*="passtechusa.com"],
[href*="speenphorbin.com"] { display: none !important; }</style><style>[href*="postlnk.com"],
[href*="passtechusa.com"],
[href*="speenphorbin.com"] { display: none !important; }</style></head>

    <body class="">
        
            <div id="wrapper">
                <div id="header">
                    <div class="head">
                        <div class="container">
                            <a href="https://www.animeworld.so" id="logo"><span>La tua fonte illimitata di Anime</span></a>
                            <form id="search" autocomplete="off" action="https://www.animeworld.so/search">
                                <div class="mobile-control"> <button type="button" data-type="close" data-target="#search" class="control close">×</button> </div>
                                <div class="inner"> <label for="search-bar" class="hidden">Ricerca nel sito</label> <input type="text" id="search-bar" name="keyword" placeholder="Cerca un anime o un utente..." data-suggestion="#search .suggestions" data-autocomplete="true"> <button type="submit"> <i class="icon icon-search"></i> </button> </div>
        
                                <div class="suggestions" style="display: none">
                                    <span class="tabs" data-target="#search .suggestions .content">
                                        <span class="tab active" data-name="animes">Anime</span>
                                        <span class="tab" data-name="users">Utenti</span>
                                    </span>
                                    <div class="search-contents">
                                        <div class="content" data-name="animes">
                                        </div>
                                        <div class="content hidden" data-name="users">
                                        </div>
                                    </div>
                                </div>
                            </form>
                            <script src="https://static.animeworld.so/dist/frontend/views/partials/header/search.js?12314"></script>
                            <div id="social">
                                <div class="addthis_inline_share_toolbox"></div>
                            </div>
                            <div id="sign">
                                    <a href="https://www.animeworld.so/login">
                                        <div class="signin">
                                            <i class="icon icon-user-outline"></i><span>&nbsp;&nbsp;Accedi al tuo account</span>
                                        </div>
                                    </a>
        
                            </div>
                        </div>
                        <div class="mobile-control">
                            <div class="search control" data-type="toggle" data-target="#search">
                                <i class="icon icon-search"></i>
                            </div>
                                <div class="sign control" data-type="toggle" data-user="true" onclick="window.location.href = 'https://www.animeworld.so/login';">
                                    <i class="icon icon-user-outline"></i>
                                </div>
                            <div class="menu control" id="open-nav-mobile">
                                <i class="icon icon-menu"></i>
                            </div>
                        </div>
                        <script src="https://static.animeworld.so/dist/frontend/views/partials/header/notifications.js?21"></script>
                    </div>
        
                    <div class="nav">
                        <div class="mobile-control"> <button type="button" id="close-nav-mobile" class="control close">×</button> </div>
                        <div class="container">
                            <ul id="menu">
                                <li class="nav-menu-mobile-divider nav-menu-mobile">Menu</li>
                                <li id="categories-menu">
                                    <a style="cursor: default;"><i class="fas fa-tags nav-menu-mobile-icon nav-menu-mobile"></i><i class="fas fa-bars nav-menu-pc"></i><span class="nav-menu-pc">&nbsp;&nbsp;</span> Generi<span class="nav-menu-mobile">&nbsp;&nbsp;&nbsp;<i class="fas fa-angle-down"></i></span></a>
                                    <ul class="sub">
                                            <li>
                                                <a href="/genre/arti-marziali">Arti Marziali</a>
                                            </li>
                                            <li>
                                                <a href="/genre/avanguardia">Avanguardia</a>
                                            </li>
                                            <li>
                                                <a href="/genre/adventure">Avventura</a>
                                            </li>
                                            <li>
                                                <a href="/genre/action">Azione</a>
                                            </li>
                                            <li>
                                                <a href="/genre/bambini">Bambini</a>
                                            </li>
                                            <li>
                                                <a href="/genre/commedia">Commedia</a>
                                            </li>
                                            <li>
                                                <a href="/genre/demoni">Demoni</a>
                                            </li>
                                            <li>
                                                <a href="/genre/drama">Drammatico</a>
                                            </li>
                                            <li>
                                                <a href="/genre/ecchi">Ecchi</a>
                                            </li>
                                            <li>
                                                <a href="/genre/fantasy">Fantasy</a>
                                            </li>
                                            <li>
                                                <a href="/genre/game">Gioco</a>
                                            </li>
                                            <li>
                                                <a href="/genre/harem">Harem</a>
                                            </li>
                                            <li>
                                                <a href="/genre/hentai">Hentai</a>
                                            </li>
                                            <li>
                                                <a href="/genre/horror">Horror</a>
                                            </li>
                                            <li>
                                                <a href="/genre/josei">Josei</a>
                                            </li>
                                            <li>
                                                <a href="/genre/magic">Magia</a>
                                            </li>
                                            <li>
                                                <a href="/genre/mecha">Mecha</a>
                                            </li>
                                            <li>
                                                <a href="/genre/military">Militari</a>
                                            </li>
                                            <li>
                                                <a href="/genre/mistery">Mistero</a>
                                            </li>
                                            <li>
                                                <a href="/genre/music">Musicale</a>
                                            </li>
                                            <li>
                                                <a href="/genre/parody">Parodia</a>
                                            </li>
                                            <li>
                                                <a href="/genre/police">Polizia</a>
                                            </li>
                                            <li>
                                                <a href="/genre/psychological">Psicologico</a>
                                            </li>
                                            <li>
                                                <a href="/genre/romance">Romantico</a>
                                            </li>
                                            <li>
                                                <a href="/genre/samurai">Samurai</a>
                                            </li>
                                            <li>
                                                <a href="/genre/sci-fi">Sci-Fi</a>
                                            </li>
                                            <li>
                                                <a href="/genre/school">Scolastico</a>
                                            </li>
                                            <li>
                                                <a href="/genre/seinen">Seinen</a>
                                            </li>
                                            <li>
                                                <a href="/genre/sentimental">Sentimentale</a>
                                            </li>
                                            <li>
                                                <a href="/genre/shoujo">Shoujo</a>
                                            </li>
                                            <li>
                                                <a href="/genre/shoujo-ai">Shoujo Ai</a>
                                            </li>
                                            <li>
                                                <a href="/genre/shounen">Shounen</a>
                                            </li>
                                            <li>
                                                <a href="/genre/shounen-ai">Shounen Ai</a>
                                            </li>
                                            <li>
                                                <a href="/genre/slice-of-life">Slice of Life</a>
                                            </li>
                                            <li>
                                                <a href="/genre/space">Spazio</a>
                                            </li>
                                            <li>
                                                <a href="/genre/supernatural">Soprannaturale</a>
                                            </li>
                                            <li>
                                                <a href="/genre/sports">Sport</a>
                                            </li>
                                            <li>
                                                <a href="/genre/historical">Storico</a>
                                            </li>
                                            <li>
                                                <a href="/genre/super-power">Superpoteri</a>
                                            </li>
                                            <li>
                                                <a href="/genre/thriller">Thriller</a>
                                            </li>
                                            <li>
                                                <a href="/genre/vampire">Vampiri</a>
                                            </li>
                                            <li>
                                                <a href="/genre/veicoli">Veicoli</a>
                                            </li>
                                            <li>
                                                <a href="/genre/yaoi">Yaoi</a>
                                            </li>
                                            <li>
                                                <a href="/genre/yuri">Yuri</a>
                                            </li>
                                    </ul>
                                </li>
                                <li>
                                    <a href="https://www.animeworld.so/newest"><i class="fas fa-clock nav-menu-mobile-icon nav-menu-mobile"></i> Nuove aggiunte</a>
                                </li>
                                <li>
                                    <a href="https://www.animeworld.so/updated"><i class="fas fa-hourglass-end nav-menu-mobile-icon nav-menu-mobile"></i> Ultimi episodi</a>
                                </li>
                                <li>
                                    <a href="https://www.animeworld.so/ongoing"><i class="fas fa-hourglass-half nav-menu-mobile-icon nav-menu-mobile"></i> Anime In Corso</a>
                                </li>
                                <li id="types-menu">
                                    <a style="cursor: default;"><i class="fas fa-folder-open nav-menu-mobile-icon nav-menu-mobile"></i> Categorie<span class="nav-menu-mobile">&nbsp;&nbsp;&nbsp;<i class="fas fa-angle-down"></i></span></a>
                                    <ul class="sub c1">
                                        <li> <a href="https://www.animeworld.so/animes">Anime</a> </li>
                                        <li> <a href="https://www.animeworld.so/movies">Movie</a> </li>
                                        <li> <a href="https://www.animeworld.so/ova">OVA</a> </li>
                                        <li> <a href="https://www.animeworld.so/ona">ONA</a> </li>
                                        <li> <a href="https://www.animeworld.so/specials">Special</a> </li>
                                        <li> <a href="https://www.animeworld.so/music">Music</a> </li>
                                    </ul>
                                </li>
                                <li>
                                    <a href="https://www.animeworld.so/schedule"><i class="fas fa-calendar-alt nav-menu-mobile-icon nav-menu-mobile"></i> Calendario</a>
                                </li>
                                <li>
                                    <a href="https://www.animeworld.so/az-list"><i class="fas fa-archive nav-menu-mobile-icon nav-menu-mobile"></i> Archivio Anime</a>
                                </li>
                                <li>
                                    <a href="https://www.animeworld.so/news"><i class="fas fa-newspaper nav-menu-mobile-icon nav-menu-mobile"></i> News</a>
                                </li>
                                <li class="nav-menu-mobile">
                                    <a href="https://www.animeworld.so/upcoming"><i class="fas fa-bullhorn nav-menu-mobile-icon"></i> Prossime uscite</a>
                                </li>
                                <li class="nav-menu-mobile">
                                    <a href="https://www.animeworld.so/tops/all"><i class="fas fa-star nav-menu-mobile-icon"></i> Top anime</a>
                                </li>
                                <li class="item tip" data-tippy-content="Anime casuale">
                                    <a href="https://www.animeworld.so/random"><i class="fas fa-random nav-menu-mobile-icon"></i> <span class="nav-menu-mobile">Anime casuale</span></a>
                                </li>
                                <li class="nav-menu-mobile-divider nav-menu-mobile">Socials</li>
                                <li class="item nav-menu-mobile">
                                    <a href="https://t.me/AnimeWorldITA2" target="_blank" rel="noopener noreferrer" aria-label="Discord"><i class="fab fa-telegram nav-menu-mobile-icon" style="font-size: 17px;"></i> Telegram</a>
                                </li>
                                <li class="item nav-menu-mobile">
                                    <a href="https://www.instagram.com/animeworlditofficial" target="_blank" rel="noopener noreferrer" aria-label="Instagram"><i class="fab fa-instagram nav-menu-mobile-icon"></i> Instagram</a>
                                </li>
                                <li class="nav-menu-mobile-divider nav-menu-mobile">Altro</li>
                                <li class="item nav-menu-mobile">
                                    <a href="https://www.animeworld.so/sfondi" target="_blank" rel="noopener noreferrer" aria-label="Sfondi scaricabili"><i class="fa fa-file-image nav-menu-mobile-icon" style="font-size: 17px;"></i> Sfondi scaricabili</a>
                                </li>
                                <li class="item nav-menu-mobile">
                                    <a href="https://www.animeworld.so/changelogs" target="_blank" rel="noopener noreferrer" aria-label="Aggiornamenti al sito"><i class="fa fa-code nav-menu-mobile-icon" style="font-size: 17px;"></i> Aggiornamenti al sito</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
        
                <div class="spazio-alert"></div>
        
                <div class="container" id="body-container">
                    <div class="content">
        
        
                        <div id="cookieAcceptBar" class="cookieAcceptBar">
                            <div class="alert alert-home" style="">
                                <a href="https://t.me/AnimeWorldITA2" target="_blank" rel="noopener noreferrer">
                                   <i class="fab fa-telegram-plane"></i>&nbsp;
                                    SEGUICI SUL NOSTRO <b>CANALE TELEGRAM</b> PER RESTARE SEMPRE AGGIORNATO SULLE ULTIME USCITE!
                                </a>
                                <span class="close-alert" id="cookieAcceptBarClose"></span>
        
                                <script src="https://static.animeworld.so/dist/frontend/views/partials/header/alert.js?2"></script>
                            </div>
                        </div>
                    </div>
        
        
                </div>
        
        
                    <script type="text/javascript" src="//padsims.com/e0/be/0a/e0be0a55294349662de08a87a6bf6147.js"></script>    </div>


        <div id="body">
            <div class="container" id="body-container">
                <div id="main" style="position: relative;">
                    <div class="content">

                            <div id="height-mantainer" style=""></div><div class="widget player" style="">
                                <div class="widget-title">
                                    <h1 class="title" id="anime-title" data-jtitle="Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs">Otome Game Sekai wa Mob ni Kibishii Sekai desu</h1>
                                    <link rel="stylesheet" href="https://static.animeworld.so/dist/frontend/views/play/like.css?0">

<div id="loveButton" class="like " style="float:right;" data-tippy-content="Aggiungi ai preferiti" data-id="4017" data-is="">
    <i class="icon icon-heart"></i>
</div>

<script src="https://static.animeworld.so/dist/frontend/views/play/like.js?4"></script>

                                </div>
                                <div class="widget-body">
                                    <div class="player-show">
                                        <div id="player" class="d-flex justify-content-center align-items-center player-box" data-id="htfv9X" data-episode-id="65785" data-num="1" data-anime-id="4017" style="">
                                            <div class="cover" id="player-cover" data-dark="https://img.animeworld.so/general/Player_Dark.png" data-light="https://img.animeworld.so/general/Player_Light.png" style="background-image: url('https://img.animeworld.so/general/Player_Light.png')"></div>
                                            
                                            <script type="text/javascript" src="https://static.animeworld.so/dist/frontend/views/partials/theme/themed-cover-switch.js"></script>    <div id="jw"></div>
                                        </div>
                                    </div>
                                        <div class="trailer-show" style="display: none;">
                                            <div class="player-box" data-id="htfv9X" data-episode-id="65785" data-num="1" data-anime-id="4017" style="">
                                                <iframe src="https://www.youtube.com/embed/MWI9DRlSvx8?enablejsapi=1&amp;wmode=opaque" style="width: 100%; height: 100%; border: 0;" allowfullscreen=""></iframe>
                                            </div>
                                        </div>
                                    <div id="controls">
                                        <div id="alternativ">
                                            <div class="control active tippy-desktop-only" id="alternative" data-tippy-content="Utilizza il player alternativo per guardare l'episodio" data-id="htfv9X" data-base="1" data-comment="'1" data-title="0" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/htfv9X" data-target="#player" data-off="Light Off" data-value="alternative">
                                                <i style="color:#ec4f4f;" class="icon icon-random"></i> <span>Player alternativo</span>
                                            </div>
                                        </div>
                                        <div class="prevnext prev control tip tippy-desktop-only" style="" data-tippy-content="Vai indietro di un episodio" data-target="#player" data-off="Light off" data-value="prev"> <i class="icon icon-step-backward"></i> <span>Precedente</span> </div>
                                        <div class="prevnext next control tip tippy-desktop-only" style="" data-tippy-content="Vai avanti di un episodio" data-target="#player" data-off="Light off" data-value="next"> <i class="icon icon-step-forward"></i> <span>Successivo</span> </div>
                                        <link rel="stylesheet" href="https://static.animeworld.so/dist/frontend/views/play/bookmark.css">
                                        
                                        <div class="userbookmark control dropdown tip" style="display: block;">
                                            <div data-toggle="dropdown" class="text"> <i class="icon icon-plus"></i> <span data-label-placement="true">Watchlist</span> </div>
                                            <ul class="dropdown-menu bookmark choices " data-id="4017">
                                                <li data-value="watching" data-value-alt="1"><a title="Segna come &quot;In corso&quot;"><i class="fa fa-eye"></i>&nbsp;&nbsp;In corso</a></li>
                                                <li data-value="watched" data-value-alt="2"><a title="Segna come &quot;Completato&quot;"><i class="fa fa-check"></i>&nbsp;&nbsp;Completati</a></li>
                                                <li data-value="onhold" data-value-alt="3"><a title="Segna come &quot;In pausa&quot;"><i class="fa fa-hand-rock"></i>&nbsp;&nbsp;In pausa</a></li>
                                                <li data-value="dropped" data-value-alt="4"><a title="Segna come &quot;Droppato&quot;"><i class="fa fa-eye-slash"></i>&nbsp;&nbsp;Droppati</a></li>
                                                <li data-value="planned" data-value-alt="5"><a title="Segna come &quot;Da guardare&quot;"><i class="fa fa-bookmark"></i>&nbsp;&nbsp;Da guardare</a></li>
                                                <li role="separator" class="divider"></li>
                                                <li data-value="advanced"><a title="Modifiche avanzate"><i class="fa fa-pencil-alt"></i>&nbsp;&nbsp;Modifiche avanzate</a></li>
                                                <li role="separator" class="divider"></li>
                                                <li data-value="remove"><a title="Rimuovi dalla lista"><i class="fa fa-times"></i>&nbsp;&nbsp;Rimuovi dalla lista</a></li>
                                            </ul>
                                        </div>
                                        
                                        <link rel="stylesheet" href="https://static.animeworld.so/dist/frontend/views/watchlist/edit-modal.css?12314">
                                        
                                        <script>
                                            window.isInList = false;
                                        </script>
                                        
                                        <div class="watchlist-edit-modal hidden" data-id="" data-animes-id="4017">
                                            <div class="watchlist-edit-modal-body px-3 pb-3">
                                                <div class="px-3 pb-3 pt-2 text-white watchlist-edit-modal-header-row mb-4">
                                                    <div class="d-flex justify-content-end watchlist-edit-modal-close-row">
                                                        <i class="fa fa-times watchlist-edit-modal-close-button"></i>
                                                    </div>
                                                    <div class="image">
                                                        <img src="https://img.animeworld.so/locandine/5z9UH.jpg">
                                                    </div>
                                                    <div class="d-flex flex-column flex-grow-1 ml-3 watchlist-edit-info-wrapper">
                                                        <h4 class="font-weight-bold watchlist-edit-modal-anime-title mb-3" data-jtitle="Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs">Otome Game Sekai wa Mob ni Kibishii Sekai desu</h4>
                                                        <dl class="watchlist-edit-info">
                                                            <div class="d-flex align-items-center my-1 animeType">
                                                                <dt>
                                                                    Tipo:
                                                                </dt>
                                                                <dd>
                                        
                                                                            <div class="watchlist-tag anime">Anime</div>
                                                                </dd>
                                                            </div>
                                                            <div class="d-flex align-items-center my-1 state">
                                                                <dt>
                                                                    Stato:
                                                                </dt>
                                                                <dd>
                                                                        Finito
                                                                </dd>
                                                            </div>
                                                            <div class="d-flex align-items-center my-1 categories">
                                                                <dt>
                                                                    Generi:
                                                                </dt>
                                                                <dd>
                                                                                <a class="watchlist-edit-modal-tag" href="/genre/fantasy">Fantasy</a>
                                                                                <a class="watchlist-edit-modal-tag" href="/genre/harem">Harem</a>
                                                                                <a class="watchlist-edit-modal-tag" href="/genre/romance">Romantico</a>
                                                                </dd>
                                                            </div>
                                                            <div class="d-flex align-items-center my-1 year">
                                                                <dt>
                                                                    Anno:
                                                                </dt>
                                                                <dd>
                                                                        2022
                                                                </dd>
                                                            </div>
                                                        </dl>
                                                        <div class="watchlist-edit-modal-like-wrapper">
                                                            <i class="far fa-heart watchlist-edit-modal-like-heart"></i>
                                                        </div>
                                                    </div>
                                                    <div class="d-flex flex-column ml-auto watchlist-edit-modal-hyperlinks-row">
                                                        <a class="d-flex watchlist-edit-mal" href="https://myanimelist.net/anime/50461" target="_blank">
                                                            <img class="mr-1" loading="lazy" src="https://static.animeworld.so/assets/images/svg/mal.svg" style="width: 17px;" alt="MyAnimeList">&nbsp;MyAnimeList
                                                        </a>
                                                        <a class="d-flex watchlist-edit-anilist" href="https://anilist.co/anime/142074" target="_blank">
                                                            <img class="mr-1" loading="lazy" src="https://static.animeworld.so/assets/images/svg/anilist.svg" style="width: 17px;" alt="AniList">&nbsp;AniList
                                                        </a>
                                                        <a class="d-flex watchlist-edit-mangaworld" href="https://www.mangaworld.in/manga/2013" target="_blank">
                                                            <img class="mr-1" loading="lazy" src="https://static.animeworld.so/assets/images/svg/mangaworld.svg?3" style="width: 17px;" alt="MangaWorld">&nbsp;MangaWorld
                                                        </a>
                                                    </div>
                                                </div>
                                        
                                                <div class="row">
                                                    <div class="form-group col-6 col-md-3">
                                                        <label for="watchlist-edit-folder">Lista</label>
                                                        <select class="selectpicker form-control" id="watchlist-edit-folder">
                                                            <option value="1">In corso</option>
                                                            <option value="2">Completato</option>
                                                            <option value="3">In pausa</option>
                                                            <option value="4">Droppato</option>
                                                            <option value="5">Da guardare</option>
                                                        </select>
                                                    </div>
                                                    <div class="form-group col-6 col-md-3">
                                                        <label for="watchlist-edit-score">Voto</label>
                                                        <div class="input-group mb-3">
                                                            <input type="number" class="form-control single-appended-item" id="watchlist-edit-score" placeholder="0" min="0" max="10" step="1" value="">
                                                            <div class="input-group-append">
                                                                <div class="d-flex flex-column justify-content-center watchlist-number-spinner single-appended-item">
                                                                    <span class="spin-button up">
                                                                        <i class="fa fa-angle-up"></i>
                                                                    </span>
                                                                    <span class="spin-button down">
                                                                        <i class="fa fa-angle-down"></i>
                                                                    </span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="form-group col-6 col-md-3">
                                                        <label for="watchlist-edit-episodes">Episodi visti</label>
                                                        <div class="input-group mb-3">
                                                            <input type="number" class="form-control" id="watchlist-edit-episodes" placeholder="0" min="0" max="12" value="">
                                                            <div class="input-group-append">
                                                                <div class="d-flex flex-column justify-content-center watchlist-number-spinner">
                                                                    <span class="spin-button up">
                                                                        <i class="fa fa-angle-up"></i>
                                                                    </span>
                                                                    <span class="spin-button down">
                                                                        <i class="fa fa-angle-down"></i>
                                                                    </span>
                                                                </div>
                                                                <span class="input-group-text">/<span class="watchlist-edit-modal-max-episodes">12</span></span>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="form-group col-6 col-md-3">
                                                        <label for="watchlist-edit-rewatches">Rewatch fatti</label>
                                                        <div class="input-group mb-3">
                                                            <input type="number" class="form-control single-appended-item" id="watchlist-edit-rewatches" placeholder="0" min="0" value="">
                                                            <div class="input-group-append">
                                                                <div class="d-flex flex-column justify-content-center watchlist-number-spinner single-appended-item">
                                                                    <span class="spin-button up">
                                                                        <i class="fa fa-angle-up"></i>
                                                                    </span>
                                                                    <span class="spin-button down">
                                                                        <i class="fa fa-angle-down"></i>
                                                                    </span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row px-3">
                                                    <div class="form-group col-12 p-0">
                                                        <label for="watchlist-edit-notes">Note</label>
                                                        <textarea class="form-control" id="watchlist-edit-notes"></textarea>
                                                    </div>
                                                </div>
                                                <div class="row justify-content-end px-3 mt-2">
                                                    <button class="btn btn-danger mr-2" id="watchlist-edit-modal-remove">
                                                        <i class="fa fa-trash mr-1"></i>
                                                        Rimuovi dalla lista
                                                    </button>
                                                    <button class="btn btn-primary" id="watchlist-edit-modal-save">
                                                        <i class="fa fa-save mr-1"></i>
                                                        Salva
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                        
                                        <script src="https://static.animeworld.so/dist/frontend/views/watchlist/edit-modal.js?12315"></script>
                                        <script src="https://static.animeworld.so/dist/frontend/views/play/bookmark.js?12318"></script>                                        <div class="share control tip tippy-desktop-only" data-tippy-content="Condividi la serie con i tuoi amici"> <i class="icon icon-share-alt"></i> <span>Condividi</span> </div>
                                        <div class="resize control tip tippy-desktop-only" data-key="resize" data-tippy-content="Ingrandisci il player" data-target=".widget.player" data-on="<i class='icon icon-arrows-in'></i> <span>Diminuisci</span>" data-off="<i class='icon icon-arrows-out'></i> <span>Espandi</span>" style="display: block;"> <span><i class="icon icon-arrows-out"></i> <span>Espandi</span></span></div>
                                        <div class="light control tip tippy-desktop-only" data-tippy-content="Spegni o accendi la luce" data-target="#player" data-off="Spegni le luci" data-on="Accendi le luci" style="display: block;"> <i class="icon icon-light-2"></i> <span>Spegni le luci</span> </div>
                                        <div class="report control tip tippy-desktop-only" data-tippy-content="Segnala un episodio o la serie" id="report-modal-open-button"> <i class="icon icon-info-circle"></i> <span>Segnala</span> </div>
                                            <a class="mal control tip tippy-desktop-only" data-tippy-content="Scheda MyAnimeList" id="mal-button" href="https://myanimelist.net/anime/50461" target="_blank" rel="noopener noreferrer" aria-label="MyAnimeList" style="width: 110px;"> <img loading="lazy" src="https://static.animeworld.so/assets/images/svg/mal.svg" style="width: 13px;" alt="MyAnimeList">&nbsp;<span>MyAnimeList</span> </a>
                                            <a class="anilist control tip tippy-desktop-only" data-tippy-content="Scheda AniList" id="anilist-button" href="https://anilist.co/anime/142074" target="_blank" rel="noopener noreferrer" aria-label="AniList" style="width: 75px;"> <img loading="lazy" src="https://static.animeworld.so/assets/images/svg/anilist.svg" style="width: 13px;" alt="AniList">&nbsp;<span>AniList</span> </a>
                                            <a class="mangaworld control tip tippy-desktop-only" data-tippy-content="Vai al manga" id="mangaworld-button" href="https://www.mangaworld.in/manga/2013" target="_blank" rel="noopener noreferrer" aria-label="MangaWorld" style="width: 115px;"> <img loading="lazy" src="https://static.animeworld.so/assets/images/svg/mangaworld.svg?3" style="width: 13px;" alt="MangaWorld">&nbsp;<span>MangaWorld</span> </a>
                                            <div class="trailer control tip tippy-desktop-only" data-url="https://www.youtube.com/embed/MWI9DRlSvx8?enablejsapi=1&amp;wmode=opaque" data-state="0" data-target="#player" data-off="Guarda il trailer" data-on="Guarda lo streaming"> <i class="fab fa-youtube"></i> <span>Guarda il trailer</span> </div>


                                        <span class="clearfix"></span>
                                    </div>
                                </div>
                            </div>

                            <link rel="stylesheet" href="https://static.animeworld.so/dist/frontend/views/play/share.css?1">
                            
                            <div class="widget socials" style="display: none;" data-url="https://www.animeworld.so/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH">
                                <div class="widget-body text-center">
                                    <h4 style="font-family: 'Nunito Sans', sans-serif; font-weight: bold;">Condividi la serie con i tuoi amici!</h4>
                                    <div id="share" class="jssocials"><div class="jssocials-shares"><div class="jssocials-share jssocials-share-whatsapp"><a href="#" class="jssocials-share-link"><i class="fa fa-whatsapp jssocials-share-logo"></i></a></div><div class="jssocials-share jssocials-share-telegram"><a href="#" class="jssocials-share-link"><i class="fab fa-telegram-plane jssocials-share-logo"></i></a></div><div class="jssocials-share jssocials-share-email"><a href="#" class="jssocials-share-link"><i class="fa fa-at jssocials-share-logo"></i></a></div><div class="jssocials-share jssocials-share-twitter"><a href="#" class="jssocials-share-link"><i class="fa fa-twitter jssocials-share-logo"></i></a></div><div class="jssocials-share jssocials-share-facebook"><a href="#" class="jssocials-share-link"><i class="fab fa-facebook-f jssocials-share-logo"></i></a></div><div class="jssocials-share jssocials-share-linkedin"><a href="#" class="jssocials-share-link"><i class="fa fa-linkedin jssocials-share-logo"></i></a></div><div class="jssocials-share jssocials-share-stumbleupon"><a href="#" class="jssocials-share-link"><i class="fa fa-stumbleupon jssocials-share-logo"></i></a></div><div class="jssocials-share jssocials-share-pocket"><a href="#" class="jssocials-share-link"><i class="fa fa-get-pocket jssocials-share-logo"></i></a></div></div></div>
                                </div>
                            </div>
                            
                            <script src="https://static.animeworld.so/dist/frontend/views/play/share.js?3"></script>



                            <div class="widget servers" id="animeId" data-id="5z9UH" data-bind-api="#player">
                                <div class="widget-title">
                                    <span class="title">Server</span>
                                    <span class="tabs servers-tabs">
                                             
                                                                     
                                                        <span class="tab server-tab active" data-name="9">AnimeWorld Server</span>
                                             
                                                                     
                                             
                                                                     
                                             
                                                                     
                                                        <span class="tab server-tab" data-name="8">Streamtape</span>
                                             
                                                                     
                                                        <span class="tab server-tab" data-name="2">Doodstream</span>
                                             
                                                                     
                                             
                                                                     
                                             
                                                                     
                                             
                                                                     
                                             
                                                                     
                                    </span>
                                </div>
                                <div class="widget-body">
                            
                                        <div class="server hidden" data-name="2" data-type="iframe" data-id="2" style="display: none;">
                                            <div class="range"></div><ul class="episodes range active" data-range-id="0" style="display: block;">
                            <li class="episode"><a data-episode-id="65785" data-id="68eIxD" data-episode-num="1" data-num="1" data-base="1" data-comment="1" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/68eIxD">1</a></li>
                                            
                            <li class="episode"><a data-episode-id="65884" data-id="5tGmvs" data-episode-num="2" data-num="2" data-base="2" data-comment="2" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/5tGmvs">2</a></li>
                                            
                            <li class="episode"><a data-episode-id="65987" data-id="9jFaCt" data-episode-num="3" data-num="3" data-base="3" data-comment="3" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/9jFaCt">3</a></li>
                                            
                            <li class="episode"><a data-episode-id="66061" data-id="142oHo" data-episode-num="4" data-num="4" data-base="4" data-comment="4" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/142oHo">4</a></li>
                                            
                            <li class="episode"><a data-episode-id="66225" data-id="JxFK8M" data-episode-num="5" data-num="5" data-base="5" data-comment="5" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/JxFK8M">5</a></li>
                                            
                            <li class="episode"><a data-episode-id="66365" data-id="Z02Js6" data-episode-num="6" data-num="6" data-base="6" data-comment="6" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/Z02Js6">6</a></li>
                                            
                            <li class="episode"><a data-episode-id="66812" data-id="aqLcoI" data-episode-num="7" data-num="7" data-base="7" data-comment="7" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/aqLcoI">7</a></li>
                                            
                            <li class="episode"><a data-episode-id="67253" data-id="VWBxy7" data-episode-num="8" data-num="8" data-base="8" data-comment="8" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/VWBxy7">8</a></li>
                                            
                            <li class="episode"><a data-episode-id="67391" data-id="QFwGXv" data-episode-num="9" data-num="9" data-base="9" data-comment="9" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/QFwGXv">9</a></li>
                                            
                            <li class="episode"><a data-episode-id="67454" data-id="o09otJ" data-episode-num="10" data-num="10" data-base="10" data-comment="10" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/o09otJ">10</a></li>
                                            
                            <li class="episode"><a data-episode-id="67619" data-id="d4IlMt" data-episode-num="11" data-num="11" data-base="11" data-comment="11" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/d4IlMt">11</a></li>
                                            
                            <li class="episode"><a data-episode-id="67873" data-id="KMipAu" data-episode-num="12" data-num="12" data-base="12" data-comment="12" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/KMipAu">12</a></li>
                                            </ul>
                                        </div>
                                        <div class="server hidden" data-name="8" data-type="iframe" data-id="8" style="display: none;">
                                            <div class="range"></div><ul class="episodes range active" data-range-id="0" style="display: block;">
                            <li class="episode"><a data-episode-id="65785" data-id="Vqc3vG" data-episode-num="1" data-num="1" data-base="1" data-comment="1" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/Vqc3vG">1</a></li>
                                            
                            <li class="episode"><a data-episode-id="65884" data-id="gdjzkD" data-episode-num="2" data-num="2" data-base="2" data-comment="2" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/gdjzkD">2</a></li>
                                            
                            <li class="episode"><a data-episode-id="65987" data-id="k64tDp" data-episode-num="3" data-num="3" data-base="3" data-comment="3" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/k64tDp">3</a></li>
                                            
                            <li class="episode"><a data-episode-id="66061" data-id="ud4hTs" data-episode-num="4" data-num="4" data-base="4" data-comment="4" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/ud4hTs">4</a></li>
                                            
                            <li class="episode"><a data-episode-id="66225" data-id="vH9CUx" data-episode-num="5" data-num="5" data-base="5" data-comment="5" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/vH9CUx">5</a></li>
                                            
                            <li class="episode"><a data-episode-id="66365" data-id="z8QvQh" data-episode-num="6" data-num="6" data-base="6" data-comment="6" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/z8QvQh">6</a></li>
                                            
                            <li class="episode"><a data-episode-id="66812" data-id="bVUJKs" data-episode-num="7" data-num="7" data-base="7" data-comment="7" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/bVUJKs">7</a></li>
                                            
                            <li class="episode"><a data-episode-id="67253" data-id="kr9TlE" data-episode-num="8" data-num="8" data-base="8" data-comment="8" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/kr9TlE">8</a></li>
                                            
                            <li class="episode"><a data-episode-id="67391" data-id="yLcwT8" data-episode-num="9" data-num="9" data-base="9" data-comment="9" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/yLcwT8">9</a></li>
                                            
                            <li class="episode"><a data-episode-id="67454" data-id="dBWXoR" data-episode-num="10" data-num="10" data-base="10" data-comment="10" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/dBWXoR">10</a></li>
                                            
                            <li class="episode"><a data-episode-id="67619" data-id="weMcVG" data-episode-num="11" data-num="11" data-base="11" data-comment="11" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/weMcVG">11</a></li>
                                            
                            <li class="episode"><a data-episode-id="67873" data-id="m5IQ-V" data-episode-num="12" data-num="12" data-base="12" data-comment="12" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/m5IQ-V">12</a></li>
                                            </ul>
                                        </div>
                                        <div class="server active" data-name="9" data-type="iframe" data-id="9" style="display: block;">
                                            <div class="range"></div><ul class="episodes range active" data-range-id="0" style="display: block;">
                            <li class="episode"><a data-episode-id="65785" data-id="htfv9X" data-episode-num="1" data-num="1" data-base="1" data-comment="1" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/htfv9X" class="active">1</a></li>
                                            
                            <li class="episode"><a data-episode-id="65884" data-id="VtbQmF" data-episode-num="2" data-num="2" data-base="2" data-comment="2" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/VtbQmF">2</a></li>
                                            
                            <li class="episode"><a data-episode-id="65987" data-id="TgLlxE" data-episode-num="3" data-num="3" data-base="3" data-comment="3" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/TgLlxE">3</a></li>
                                            
                            <li class="episode"><a data-episode-id="66061" data-id="umMb9H" data-episode-num="4" data-num="4" data-base="4" data-comment="4" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/umMb9H">4</a></li>
                                            
                            <li class="episode"><a data-episode-id="66225" data-id="hOQMqC" data-episode-num="5" data-num="5" data-base="5" data-comment="5" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/hOQMqC">5</a></li>
                                            
                            <li class="episode"><a data-episode-id="66365" data-id="6hU16x" data-episode-num="6" data-num="6" data-base="6" data-comment="6" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/6hU16x">6</a></li>
                                            
                            <li class="episode"><a data-episode-id="66812" data-id="ObcMSA" data-episode-num="7" data-num="7" data-base="7" data-comment="7" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/ObcMSA">7</a></li>
                                            
                            <li class="episode"><a data-episode-id="67253" data-id="rQI1kE" data-episode-num="8" data-num="8" data-base="8" data-comment="8" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/rQI1kE">8</a></li>
                                            
                            <li class="episode"><a data-episode-id="67391" data-id="6gUkHV" data-episode-num="9" data-num="9" data-base="9" data-comment="9" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/6gUkHV">9</a></li>
                                            
                            <li class="episode"><a data-episode-id="67454" data-id="nofEdJ" data-episode-num="10" data-num="10" data-base="10" data-comment="10" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/nofEdJ">10</a></li>
                                            
                            <li class="episode"><a data-episode-id="67619" data-id="DDEjCe" data-episode-num="11" data-num="11" data-base="11" data-comment="11" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/DDEjCe">11</a></li>
                                            
                            <li class="episode"><a data-episode-id="67873" data-id="EM34uY" data-episode-num="12" data-num="12" data-base="12" data-comment="12" href="/play/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu.5z9UH/EM34uY">12</a></li>
                                            </ul>
                                        </div>
                                </div>
                            </div>
                            <link rel="stylesheet" href="https://static.animeworld.so/dist/frontend/views/play/downloads.css?2">
                            
                                <div id="download">
                                    <div class="widget downloads">
                                        <div class="widget-title">
                                            <span class="title">Download</span>
                                            <span class="tabs" data-target=".widget.downloads .download"> <span class="tab active">Otome Game Sekai wa Mob ni Kibishii Sekai desu</span> </span>
                                        </div>
                                        <div class="widget-body" style="padding-top: 17px;padding-bottom: 17px;">
                                            <center>
                                                <a href="https://server16.cherrycloud.net/download-file.php?id=DDL/ANIME/OtomeGameSekaiWaMobNiKibishiiSekaiDesu/OtomeGameSekaiWaMobNiKibishiiSekaiDesu_Ep_01_SUB_ITA.mp4" id="downloadLink" class="m-1 btn btn-sm btn-primary" target="_blank"><i class="fas fa-download"></i>&nbsp;&nbsp;Download Diretto - Ep. <span class="episodeNum">1</span></a>
                                                <a href="https://server16.cherrycloud.net/DDL/ANIME/OtomeGameSekaiWaMobNiKibishiiSekaiDesu/OtomeGameSekaiWaMobNiKibishiiSekaiDesu_Ep_01_SUB_ITA.mp4" id="alternativeDownloadLink" class="m-1 btn btn-sm btn-primary" target="_blank" download=""><i class="fas fa-download"></i>&nbsp;&nbsp;Download Alternativo - Ep. <span class="episodeNum">1</span></a>
                                                <a href="" id="customDownloadButton" class="m-1 btn btn-sm btn-primary hidden" target="_blank"><i class="fas fa-download"></i>&nbsp;&nbsp;Download - Ep. <span class="episodeNum">1</span></a>
                                            </center>
                            
                                            <hr id="mainServerHr" class="" style="margin-top: 10px; margin-bottom: 10px;">
                            
                                            <div id="external-downloads">
                                                <center>
                                <a href="https://doods.pro/d/gookg33elfmb" class="m-1 btn btn-sm btn-primary btn-doodstream" target="_blank"><i class="fas fa-download"></i>&nbsp;&nbsp;Download Doodstream - Ep. <span class="episodeNum">1</span></a>
                            
                                <a href="https://streamtape.com/v/W6VAWvKyPxTA1Y/OtomeGameSekaiWaMobNiKibishiiSekaiDesu_Ep_01_SUB_ITA.mp4" class="m-1 btn btn-sm btn-primary btn-streamtape" target="_blank"><i class="fas fa-download"></i>&nbsp;&nbsp;Download Streamtape - Ep. <span class="episodeNum">1</span></a>
                            </center>
                                            </div>
                            
                                            <br>
                                            <div class="download-info">Se in alcune serie il tasto <b>Download Diretto</b> porta in una pagina 404, utilizzate il tasto <b>Download Alternativo</b>.</div>
                                        </div>
                                    </div>
                                </div>

                                <script src="https://static.animeworld.so/dist/frontend/views/play/report_block.js"></script>
                            
                            
                            

                        <style>
                            @media (max-width: 767px) {
                                .c1 {
                                    float: unset!important;
                                }
                        
                                #mobile-thumbnail-watch {
                                    width: 20%!important;
                                }
                            }
                        
                            @media (max-width: 575px) {
                                #mobile-thumbnail-watch {
                                    width: 30%!important;
                                }
                            }
                        </style>
                        
                        <div class="widget info">
                            <div class="widget-body">
                                <div class="row">
                                    <div class="thumb col-md-3 d-md-block d-sm-none d-xs-none d-none h-100" id="thumbnail-watch">
                                        <img loading="lazy" src="https://img.animeworld.so/locandine/5z9UH.jpg" alt="Otome Game Sekai wa Mob ni Kibishii Sekai desu">
                                    </div>
                                    <div class="info col-md-9">
                                        <div class="head">
                                            <div class="c1">
                                                <h2 class="title" data-jtitle="Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs">Otome Game Sekai wa Mob ni Kibishii Sekai desu</h2>
                                            </div>
                                            <div class="thumb d-md-none d-block float-left p-0 mt-3" id="mobile-thumbnail-watch">
                                                <img loading="lazy" src="https://img.animeworld.so/locandine/5z9UH.jpg" alt="Otome Game Sekai wa Mob ni Kibishii Sekai desu">
                                            </div>
                                                <div class="rating mt-3 mt-md-0" data-id="4017" data-value="7.91" data-count="1820">
                                                    <link rel="stylesheet" href="https://static.animeworld.so/dist/frontend/views/play/rate.css?3">
                                            
                                                    <div id="rate-loading" class="spinner-border loading-bootstrap" style="width: 3rem; height: 3rem; font-size: 15px; display: none;" role="status">
                                                        <span class="sr-only">Caricamento...</span>
                                                    </div>
                                                    <div class="rating-container theme-krajee-fas rating-xs rating-animate is-star"><div class="rating-stars"><span class="empty-stars"><span class="star"><i class="fa fa-star empty-star"></i></span><span class="star"><i class="fa fa-star empty-star"></i></span><span class="star"><i class="fa fa-star empty-star"></i></span><span class="star"><i class="fa fa-star empty-star"></i></span><span class="star"><i class="fa fa-star empty-star"></i></span></span><span class="filled-stars" style="width: 0%;"><span class="star"><i class="fa fa-star filled-star"></i></span><span class="star"><i class="fa fa-star filled-star"></i></span><span class="star"><i class="fa fa-star filled-star"></i></span><span class="star"><i class="fa fa-star filled-star"></i></span><span class="star"><i class="fa fa-star filled-star"></i></span></span><input id="rate-input" class="kv-ltr-theme-fas-star rating-input" value="0" dir="ltr" data-size="xs" style="display: none;"></div></div>
                                            
                                                    <div class="text rate-on-load" style="padding-top: 0px !important;"><span class="votes-count" id="single-vote-count">1820</span> <span id="votes-name">voti</span></div>
                                                </div>
                                        </div>
                                        <div class="clearfix"></div>
                                        <div class="row">
                                            <dl class="meta col-sm-6">
                                                <dt>Categoria:</dt>
                                                <dd>
                                                        Anime
                                                </dd>
                                                <dt>Audio:</dt>
                                                <dd><a href="/filter?language=jp">Giapponese</a></dd>
                                                <dt>Data di Uscita:</dt>
                                                <dd>03 Aprile 2022</dd>
                                                <dt>Stagione:</dt>
                                                <dd><a href="/filter?season=spring&amp;year=2022">Primavera 2022</a></dd>
                                                <dt>Studio:</dt>
                                                <dd>
                                                        <a href="/filter?studio=ENGI">ENGI</a>
                                                </dd>
                                                <dt>Genere:</dt>
                                                <dd>
                                                        <a href="/genre/fantasy">Fantasy</a>,
                                                        <a href="/genre/harem">Harem</a>,
                                                        <a href="/genre/romance">Romantico</a>,
                                                        <a href="/genre/school">Scolastico</a>,
                                                        <a href="/genre/sentimental">Sentimentale</a>
                                                </dd>
                                            </dl>
                                            <dl class="meta col-sm-6">
                                                <dt>Voto:</dt>
                                                    <dd class="rating"> <span id="average-vote">7.91</span> / 10 </dd>
                                                <dt>Durata:</dt>
                                                <dd>23 min/ep </dd>
                                                <dt>Episodi:</dt>
                                                <dd>12</dd>
                                                <dt>Stato:</dt>
                                                <dd>
                                                        <a href="/filter?status=1">Finito</a>
                                                </dd>
                                                <dt>Visualizzazioni:</dt>
                                                <dd>424.127</dd>
                                            </dl>
                                        </div>
                                        <hr style="margin-top: 10px;margin-bottom: 10px;">
                                        <div class="desc"><div class="short">Leon, un ex lavoratore giapponese, si è reincarnato in un "otome game", e ora si dispera per il fatto che in questo mondo siano le donne a dominare gli uomini. È come se gli uomini fossero solo bestiame che serve da trampolino di lancio per le donne. Le uniche eccezioni sono gli "obiettivi romantici...</div> <div class="long" style="display: none;">Leon, un ex lavoratore giapponese, si è reincarnato in un "otome game", e ora si dispera per il fatto che in questo mondo siano le donne a dominare gli uomini. È come se gli uomini fossero solo bestiame che serve da trampolino di lancio per le donne. Le uniche eccezioni sono gli "obiettivi romantici" del gioco, un gruppo di aitanti uomini guidati dal principe ereditario. In queste bizzarre circostanze, Leon possiede un'arma: la sua conoscenza dal mondo precedente, dove la sua sfacciata sorella lo aveva costretto a completare questo gioco. Leon, che vuole solamente vivere come recluso in campagna, usa tale conoscenza per suscitare una feroce rivolta contro le donne e gli uomini belli.</div> <span class="morelink" style="cursor: pointer;">Mostra di più</span></div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-12">
                                        <div id="tags"> <label style="color: #367dc3;"><b>Keywords:</b></label>
                                            <p id="tagsReload" style="max-height: 100px; overflow-y: auto; font-size: 10px; font-family: 'Nunito Sans', sans-serif;">Otome Game Sekai wa Mob ni Kibishii Sekai desu SUB ITA - Otome Game Sekai wa Mob ni Kibishii Sekai desu ITA - Otome Game Sekai wa Mob ni Kibishii Sekai desu Streaming SUB ITA - Otome Game Sekai wa Mob ni Kibishii Sekai desu Download SUB ITA - Otome Game Sekai wa Mob ni Kibishii Sekai desu Streaming ITA - Otome Game Sekai wa Mob ni Kibishii Sekai desu Download ITA - Otome Game Sekai wa Mob ni Kibishii Sekai desu Streaming &amp; Download SUB ITA - Otome Game Sekai wa Mob ni Kibishii Sekai desu Streaming &amp; Download ITA - Otome Game Sekai wa Mob ni Kibishii Sekai desu Fansub ITA - Otome Game Sekai wa Mob ni Kibishii Sekai desu Fansub SUB ITA - Otome Game Sekai wa Mob ni Kibishii Sekai desu Streaming Episodi SUB ITA - Otome Game Sekai wa Mob ni Kibishii Sekai desu Download Episodi SUB ITA - Otome Game Sekai wa Mob ni Kibishii Sekai desu Sottotitoli Italiani - Lista Episodi Otome Game Sekai wa Mob ni Kibishii Sekai desu SUB ITA - Lista Episodi Otome Game Sekai wa Mob ni Kibishii Sekai desu ITA - Otome Game Sekai wa Mob ni Kibishii Sekai desu Episodio <span class="episode-num-keywords">1</span> SUB ITA - Otome Game Sekai wa Mob ni Kibishii Sekai desu Episodio <span class="episode-num-keywords">1</span> ITA - Otome Game Sekai wa Mob ni Kibishii Sekai desu Streaming Episodio <span class="episode-num-keywords">1</span> SUB ITA - Otome Game Sekai wa Mob ni Kibishii Sekai desu Streaming Episodio <span class="episode-num-keywords">1</span> ITA - Otome Game Sekai wa Mob ni Kibishii Sekai desu Download Episodio <span class="episode-num-keywords">1</span> SUB ITA - Otome Game Sekai wa Mob ni Kibishii Sekai desu Download Episodio <span class="episode-num-keywords">1</span> ITA
                                                Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs SUB ITA - Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs ITA - Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Streaming SUB ITA - Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Download SUB ITA - Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Streaming ITA - Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Download ITA - Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Streaming &amp; Download SUB ITA - Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Streaming &amp; Download ITA - Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Fansub ITA - Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Fansub SUB ITA - Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Streaming Episodi SUB ITA - Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Download Episodi SUB ITA - Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Sottotitoli Italiani - Lista Episodi Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs SUB ITA - Lista Episodi Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs ITA - Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Episodio <span class="episode-num-keywords">1</span> SUB ITA - Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Episodio <span class="episode-num-keywords">1</span> ITA - Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Streaming Episodio <span class="episode-num-keywords">1</span> SUB ITA - Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Streaming Episodio <span class="episode-num-keywords">1</span> ITA - Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Download Episodio <span class="episode-num-keywords">1</span> SUB ITA - Trapped in a Dating Sim: The World of Otome Games Is Tough for Mobs Download Episodio <span class="episode-num-keywords">1</span> ITA
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                            <script src="https://static.animeworld.so/dist/frontend/views/play/info.js?1"></script>

                        <div class="widget text-center">
                            <div style="overflow: auto;">
                            <center>
                                <div id="ts_ad_native_b97x5"></div>
                                <script src="//cdn.runative-syndicate.com/sdk/v1/n.js"></script>
                                <script>
                                NativeAd({
                                    element_id: "ts_ad_native_b97x5",
                                    spot: "38f6f55da51e4537bee13b8847ac8cec",
                                    type: "label-under",
                                    cols: 4,
                                    rows: 1,
                                    title: "",
                                    titlePosition: "left",
                                    adsByPosition: "right",
                                    breakpoints: [
                                            {
                                                        "cols": 2,
                                                        "width": 770
                                            }
                                    ],
                                });
                                </script>
                            </center>
                            </div>
                        </div>
                        <link rel="stylesheet" href="https://static.animeworld.so/dist/frontend/views/partials/comments/comments.css?12318">
                        
                        <script src="https://cdn.jsdelivr.net/npm/vanilla-lazyload@17.5.0/dist/lazyload.min.js"></script>
                        <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery-throttle-debounce/1.1/jquery.ba-throttle-debounce.min.js"></script>
                        <script type="text/javascript" src="https://static.animeworld.so/dist/frontend/views/partials/comments/widget_comments.js?12359"></script>
                        <script type="text/javascript" src="https://static.animeworld.so/dist/frontend/views/play/widget_comments.js?12359"></script>
                        
                        <div class="widget comment comment-resource-vessel" data-resource-id="4017" data-resource-discovery="episode">
                            <div class="widget-title">
                                <span class="title">Commenti</span>
                                <span class="tabs" data-target=".widget.comment .content">
                                    <span class="tab comment-vessel" id="anime-comment" data-name="comment">Anime</span>
                                        <span class="tab comment-vessel active" id="episode-comment" data-name="comment">Episodio
                                            <span>1</span>
                                        </span>
                                    <span class="tab" id="rules" data-toggle="tab" data-name="rules">Regole</span>
                                    <a class="more show-more-comments-button" style="display: inline;">Espandi</a>
                                </span>
                            </div>
                            <div class="widget-body">
                                <div class="content comments-wrapper" data-name="comment">
                                        <p id="cant-comment-alert"><i class="fas fa-lock"></i>&nbsp;&nbsp;Effettua l'accesso per commentare.</p>
                                    
                                    <script src="https://static.animeworld.so/dist/frontend/views/partials/comments/form.js?252215"></script>
                                    <hr>
                        
                                    <div id="comments-scrollover-wrapper"><div id="scrollover" class="comments-scroll-over">
    <div class="widget comment-wrapper" data-id="261303">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/136402.jpg?1696094426000" loading="lazy" alt="Tandeko">

            <div class="comment-author-name"><a href="/profile/136402">Tandeko</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">21/09/2023 17:51:39</p>

            <hr class="comment-separator">

            <span class="comment-content">bello... secoda stagione obbligatoria

</span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="261207">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/138454.jpg?1696197720000" loading="lazy" alt="alkions0">

            <div class="comment-author-name"><a href="/profile/138454">alkions0</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">20/09/2023 23:28:55</p>

            <hr class="comment-separator">

            <span class="comment-content">NOOO BURGER COSA COMBINI</span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="253909">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/136373.jpg?1694205662000" loading="lazy" alt="MyLine">

            <div class="comment-author-name"><a href="/profile/136373">MyLine</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">17/08/2023 05:02:23</p>

            <hr class="comment-separator">

            <span class="comment-content">Ciao!</span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="249499">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/119561.jpg?1696188808000" loading="lazy" alt="Like_the_oppai">

            <div class="comment-author-name"><a href="/profile/119561">Like_the_oppai</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">30/07/2023 23:34:21</p>

            <hr class="comment-separator">

            <span class="comment-content">buonavisone a tutti ★    

</span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="240296">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/53462.jpg?1696182166000" loading="lazy" alt="GLG">

            <div class="comment-author-name"><a href="/profile/53462">GLG</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">24/06/2023 13:40:40</p>

            <hr class="comment-separator">

            <span class="comment-content">Saluti a tutti <img class="emojione" alt="🐲" title=":dragon_face:" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/32/1f432.png"></span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="232692">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/40.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/107235.png?1696190725000" loading="lazy" alt="Lory_Reed">

            <div class="comment-author-name"><a href="/profile/107235">Lory_Reed</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">10/05/2023 19:28:03</p>

            <hr class="comment-separator">

            <span class="comment-content">oh no down d' stairs ha fatto un'altra vittima <img class="emojione" alt="😱" title=":scream:" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/32/1f631.png"></span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="203036">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/3.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/118872.gif?1696196258000" loading="lazy" alt="Deleterioo">

            <div class="comment-author-name"><a href="/profile/118872">Deleterioo</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">09/12/2022 14:44:57</p>

            <hr class="comment-separator">

            <span class="comment-content">Intriganteeee</span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="189231">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/73190.jpg?1696148898000" loading="lazy" alt="Lele205">

            <div class="comment-author-name"><a href="/profile/73190">Lele205</a></div>

            <div class="user-state-dot comment stato-utente-invisible"></div>

            <p class="comment-date">26/09/2022 16:26:12</p>

            <hr class="comment-separator">

            <span class="comment-content">Ceh, ha fatto tutto questo per andare a SCUOLA. Ma ci rendiamo conto? <img class="emojione" alt="😂" title=":joy:" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/32/1f602.png"></span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="184617">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/74039.gif?1696195985000" loading="lazy" alt="Sasuke_Uchiha">

            <div class="comment-author-name"><a href="/profile/74039">Sasuke_Uchiha</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">04/09/2022 00:02:26</p>

            <hr class="comment-separator">

            <span class="comment-content">iniziamo... spero mi piaccia P.S. già sto adorando<img class="emojione" alt="😂" title=":joy:" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/32/1f602.png"></span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="183507">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/67563.jpg?1696066360000" loading="lazy" alt="IJIN">

            <div class="comment-author-name"><a href="/profile/67563">IJIN</a></div>

            <div class="user-state-dot comment stato-utente-invisible"></div>

            <p class="comment-date">29/08/2022 02:40:05</p>

            <hr class="comment-separator">

            <span class="comment-content">primo episodio interessante, anche l'MC mi piace, sa come farsi rispettare e zittire i nobili pur essendo solo un "Mob", poi quel cazzo di sorriso alla fine mi ha fatto morire <img class="emojione" alt="😂" title=":joy:" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/32/1f602.png"></span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="179155">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://static.animeworld.so/default_avatar/PFP-VAR-ARANCIONE_2.png?1696197441000" loading="lazy" alt="Iomss">

            <div class="comment-author-name"><a href="/profile/43544">Iomss</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">06/08/2022 00:04:52</p>

            <hr class="comment-separator">

            <span class="comment-content">ma ci sarà la 2 stagione?</span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="174609">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/54.jpg">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/107434.jpg?1677695734000" loading="lazy" alt="y4sh1r0.4l3x">

            <div class="comment-author-name"><a href="/profile/107434">y4sh1r0.4l3x</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">12/07/2022 22:26:10</p>

            <hr class="comment-separator">

            <span class="comment-content">Inizialmente ero molto scettica nel vedere quest'anime. Avevo l'impressione che non valesse la pena perdere tempo con un anime sugli otome. Inaspettatamente mi sono trovata a guardarlo con molto interesse e ad aspettare ogni episodio con molta ansia. LO CONSIGLIO </span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="174040">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/50143.png?1696178256000" loading="lazy" alt="Apeiron">

            <div class="comment-author-name"><a href="/profile/50143">Apeiron</a></div>

            <div class="user-state-dot comment stato-utente-invisible"></div>

            <p class="comment-date">10/07/2022 18:39:54</p>

            <hr class="comment-separator">

            <span class="comment-content">È stata una piacevolissima sorpresa.
Come penso tutti non gli avrei dato un soldo bucato, ma mi ha davvero stupito in positivo. 
Ho letteralmente amato il protagonista. 
Spesso gli MC negli isekai partono a razzo e finisco a .. , ma questo ha mantenuto le sue peculiarità. 
Voglio dire che è rimasto lo stesso “male necessario”, senza lasciarsi troppo tangere dai sentimenti e le situazioni. 
Penso che mi recupererò l’opera non animate (nell’attesa di una seconda stagione). 
Credo si sia capito che mi è piaciuto e lo consiglio vivamente a chiunque si vuole fare due risate e vuole passare il tempo senza nulla di pensate o impegnato. Voto 8 (anche se per alcuni potrebbe essere troppo per me è giusto, dopotutto rispecchia perfettamente il mio pensiero.) 
Ps. Penso di essermi seriamente innamorato della regina.</span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="169809">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/27618.jpg?1696190784000" loading="lazy" alt="Rroberto">

            <div class="comment-author-name"><a href="/profile/27618">Rroberto</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">20/06/2022 23:56:37</p>

            <hr class="comment-separator">

            <span class="comment-content">non male <img class="emojione" alt="🦉" title=":owl:" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/32/1f989.png"> spero in un seguito
</span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="169711">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/1332.png?1696195483000" loading="lazy" alt="Jemo">

            <div class="comment-author-name"><a href="/profile/1332">Jemo</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">20/06/2022 12:04:20</p>

            <hr class="comment-separator">

            <span class="comment-content">all'inizio mi sembrava un po noioso, poi pero mi sono ricreduto
</span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="169683">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/3448.jpg?1696197132000" loading="lazy" alt="Hokuto05">

            <div class="comment-author-name"><a href="/profile/3448">Hokuto05</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">20/06/2022 01:23:52</p>

            <hr class="comment-separator">

            <span class="comment-content">sembra interess come anime, spero non deluda</span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="159782">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/38713.jpg?1695567250000" loading="lazy" alt="Tron">

            <div class="comment-author-name"><a href="/profile/38713">Tron</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">11/04/2022 21:52:42</p>

            <hr class="comment-separator">

            <span class="comment-content">Finalmente, ero stufo di leggere il manga.</span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="159702">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/28.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/88839.png?1683450573000" loading="lazy" alt="NerY_05">

            <div class="comment-author-name"><a href="/profile/88839">NerY_05</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">11/04/2022 13:33:45</p>

            <hr class="comment-separator">

            <span class="comment-content">e c'è il primo episodio. avendo letto il manga (che è palesemente meglio dell'animazione) posso dire che hanno tralasciato alcuni dettagli importanti e temo che continueranno anche nei prossimi episodi. opening 5/10 e animazioni 8/10 (vedo che non hanno usato cgi per i mostri e i robot). a prima vista mi sebra fatto meglio di un normale isekai ma non di quanto dovrebbe. vedremo come va avanti.</span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="158626">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/16.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://static.animeworld.so/default_avatar/PFP-VAR-VERDE.png?1695922002000" loading="lazy" alt="MisterF">

            <div class="comment-author-name"><a href="/profile/12355">MisterF</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">06/04/2022 20:12:55</p>

            <hr class="comment-separator">

            <span class="comment-content">Da lettore del manga,  dopo aver visto l'episodio, ci sono delle pizzole differenze rispetto al manga.
La opening è un 6 / 10, tuttavia vedendo l'opening, mi sono reso conto che la serie andrà più avanti di quanto mi sarei aspettato, quindi mi preoccupa di quanto taglieranno dei capitoli originali.
Per le animazioni e aspetto dei personaggi, dò 9/10. Vedremo per i combattimenti.</span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="158294">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/15.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/57105.jpg?1696195973000" loading="lazy" alt="francifigo02">

            <div class="comment-author-name"><a href="/profile/57105">francifigo02</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">05/04/2022 17:42:12</p>

            <hr class="comment-separator">

            <span class="comment-content">RAGA ma è palesemete kirito ahaha</span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="158183">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://static.animeworld.so/default_avatar/PFP-VAR-BLU.png?1696122970000" loading="lazy" alt="sica">

            <div class="comment-author-name"><a href="/profile/46604">sica</a></div>

            <div class="user-state-dot comment stato-utente-invisible"></div>

            <p class="comment-date">04/04/2022 22:21:50</p>

            <hr class="comment-separator">

            <span class="comment-content">sembra davvero interessante 

</span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="158162">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/16.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/4076.gif?1696183672000" loading="lazy" alt="Giuggi">

            <div class="comment-author-name"><a href="/profile/4076">Giuggi</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">04/04/2022 20:32:24</p>

            <hr class="comment-separator">

            <span class="comment-content">Da trama e copertina ero molto vicino a skipparlo, meno male ho deciso di dargli una possibilità, ora sono ottimista per questo anime</span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="158114">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/17778.png?1679222208000" loading="lazy" alt="Sober">

            <div class="comment-author-name"><a href="/profile/17778">Sober</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">04/04/2022 17:45:11</p>

            <hr class="comment-separator">

            <span class="comment-content">quale cosa?? hahahaha  comunque molto banale troppi anime morte -&gt; nuovo mondo vedremmo come proseguirà </span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="158103">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/35884.jpg?1696194179000" loading="lazy" alt="ZOIDS">

            <div class="comment-author-name"><a href="/profile/35884">ZOIDS</a></div>

            <div class="user-state-dot comment stato-utente-invisible"></div>

            <p class="comment-date">04/04/2022 17:13:44</p>

            <hr class="comment-separator">

            <span class="comment-content">hahhahahaha stupenda l'espressione dell'ultima scena <img class="emojione" alt="🤣" title=":rofl:" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/32/1f923.png"><img class="emojione" alt="🤣" title=":rofl:" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/32/1f923.png"><img class="emojione" alt="🤣" title=":rofl:" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/32/1f923.png"><img class="emojione" alt="🤣" title=":rofl:" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/32/1f923.png"><img class="emojione" alt="🤣" title=":rofl:" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/32/1f923.png"><img class="emojione" alt="🤣" title=":rofl:" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/32/1f923.png"><img class="emojione" alt="👹" title=":japanese_ogre:" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/32/1f479.png"><img class="emojione" alt="👹" title=":japanese_ogre:" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/32/1f479.png"><img class="emojione" alt="👹" title=":japanese_ogre:" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/32/1f479.png"><img class="emojione" alt="👹" title=":japanese_ogre:" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/32/1f479.png"><img class="emojione" alt="👹" title=":japanese_ogre:" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/32/1f479.png"><img class="emojione" alt="👹" title=":japanese_ogre:" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/32/1f479.png"></span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="158021">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/12.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://static.animeworld.so/default_avatar/PFP-VAR-MARRONE.png?1660180720000" loading="lazy" alt="Leyfon Alseif">

            <div class="comment-author-name"><a href="/profile/16577">Leyfon Alseif</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">04/04/2022 04:17:50</p>

            <hr class="comment-separator">

            <span class="comment-content">Fantastico,non vedo l'ora di vedere i prossimi episodi,spero che riprendano da DIO le scene e le espressioni facciali del protagonista dal manga,uno dei BEST personaggi isekai per come risolve a modo suo le situazioni e per come tratta gli altri.</span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="158019">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/31.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/44116.gif?1696196275000" loading="lazy" alt="Keychain">

            <div class="comment-author-name"><a href="/profile/44116">Keychain</a></div>

            <div class="user-state-dot comment stato-utente-invisible"></div>

            <p class="comment-date">04/04/2022 02:40:05</p>

            <hr class="comment-separator">

            <span class="comment-content">Per me è sì, grazie.
Assolutamente promosso, ho riso troppo, la faccia della vecchia quando lui torna a casa è impagabile, da quanto era incazzata ha rotto il ventaglio con 2 dita (rido ancora). 
Per quanto assurda sia l'ambientazione e ovviamente l'esasperazione del protagonista dall'eccessivo insensatismo di 200 epoche diverse, mi ha fatto una buona impressione come primo episodio, credo che sia uno scenario troppo esilarante, molto curiosa <img class="emojione" alt="🦊" title=":fox:" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/32/1f98a.png"></span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="157988">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/17934.jpg?1696196815000" loading="lazy" alt="Tsuchinokowo">

            <div class="comment-author-name"><a href="/profile/17934">Tsuchinokowo</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">04/04/2022 01:08:00</p>

            <hr class="comment-separator">

            <span class="comment-content">Per chi se lo chiedesse per mob intende personaggio di sfondo/irrilevante alla "vera" trama del gioco. </span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="157777">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/34473.jpg?1686688597000" loading="lazy" alt="RyoutaKurobayashi">

            <div class="comment-author-name"><a href="/profile/34473">RyoutaKurobayashi</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">03/04/2022 20:05:06</p>

            <hr class="comment-separator">

            <span class="comment-content">Ryouta è stato qua
</span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="157753">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/79616.jpg?1696187060000" loading="lazy" alt="Mamango">

            <div class="comment-author-name"><a href="/profile/79616">Mamango</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">03/04/2022 18:42:32</p>

            <hr class="comment-separator">

            <span class="comment-content">primo episodio che fa sperare bene... veriamo come continua</span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="157750">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/78661.gif?1696192812000" loading="lazy" alt="Ikki葵">

            <div class="comment-author-name"><a href="/profile/78661">Ikki葵</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">03/04/2022 18:39:48</p>

            <hr class="comment-separator">

            <span class="comment-content">È bello, in questa stagione primaverile ci aspettano tanti bei anime di vario genere che bella cosa.</span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="157745">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/53726.png?1696197160000" loading="lazy" alt="Xdark_exe">

            <div class="comment-author-name"><a href="/profile/53726">Xdark_exe</a></div>

            <div class="user-state-dot comment stato-utente-invisible"></div>

            <p class="comment-date">03/04/2022 18:21:34</p>

            <hr class="comment-separator">

            <span class="comment-content">Chi ha letto  il manga sa cosa succederà...<img class="emojione" alt="😏" title=":smirk:" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/32/1f60f.png"><img class="emojione" alt="😏" title=":smirk:" src="https://cdn.jsdelivr.net/emojione/assets/4.5/png/32/1f60f.png"></span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="157743">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/36614.jpg?1696191678000" loading="lazy" alt="Robycasi">

            <div class="comment-author-name"><a href="/profile/36614">Robycasi</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">03/04/2022 18:14:57</p>

            <hr class="comment-separator">

            <span class="comment-content">praticamente sà già tutto sa già cosa accadrà gg</span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="157725">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/33165.jpg?1682272712000" loading="lazy" alt="ananasbrodo">

            <div class="comment-author-name"><a href="/profile/33165">ananasbrodo</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">03/04/2022 17:25:20</p>

            <hr class="comment-separator">

            <span class="comment-content">il secondo isekai bizzarro della stagione, procediamo bene dai</span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="157724">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/1175.png?1696183263000" loading="lazy" alt="Myphuszara">

            <div class="comment-author-name"><a href="/profile/1175">Myphuszara</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">03/04/2022 17:22:56</p>

            <hr class="comment-separator">

            <span class="comment-content">Carino</span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="157718">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://lh3.googleusercontent.com/a-/AOh14Gg9oY4J__Tg9xAICkClvJ29TdlCFPFFEDRv6ySn" loading="lazy" alt="dragonpoll125">

            <div class="comment-author-name"><a href="/profile/34983">dragonpoll125</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">03/04/2022 16:50:57</p>

            <hr class="comment-separator">

            <span class="comment-content">per il momento e andato tutto bene

</span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="157714">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/87311.jpg?1696187901000" loading="lazy" alt="AnimeSukida">

            <div class="comment-author-name"><a href="/profile/87311">AnimeSukida</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">03/04/2022 16:29:52</p>

            <hr class="comment-separator">

            <span class="comment-content">Cosa abbiamo? Isekai, harem, Mecha romanticismo... tutto nella norma direi. Né bene né male, si lascia guardare e chissà che risvolti avrà questo otome. </span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="157711">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://static.animeworld.so/default_avatar/PFP-VAR-ARANCIONE.png?1692562540000" loading="lazy" alt="Ervin">

            <div class="comment-author-name"><a href="/profile/25905">Ervin</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">03/04/2022 16:25:00</p>

            <hr class="comment-separator">

            <span class="comment-content">godo</span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="157709">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://static.animeworld.so/default_avatar/PFP-VAR-FUCSIA.png?1696175244000" loading="lazy" alt="Ganz_fa323">

            <div class="comment-author-name"><a href="/profile/93338">Ganz_fa323</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">03/04/2022 16:19:16</p>

            <hr class="comment-separator">

            <span class="comment-content">non vedo l'ora che esca il 2 episodio

</span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="157700">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/95758.jpg?1693750256000" loading="lazy" alt="Gabry484">

            <div class="comment-author-name"><a href="/profile/95758">Gabry484</a></div>

            <div class="user-state-dot comment stato-utente-invisible"></div>

            <p class="comment-date">03/04/2022 16:04:58</p>

            <hr class="comment-separator">

            <span class="comment-content">Finalmente</span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper" data-id="157696">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/10.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/63607.jpg?1695907566000" loading="lazy" alt="Justsikko">

            <div class="comment-author-name"><a href="/profile/63607">Justsikko</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">03/04/2022 15:55:59</p>

            <hr class="comment-separator">

            <span class="comment-content">si gode</span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="widget comment-wrapper last" data-id="157694">
      <div class="widget-body comment-background-wrapper lazy" data-bg="https://img.animeworld.so/comments-background/1.png">

        <div class="col-sm-9 p-0 widget comment-inner-wrapper comment-style">
          <div class="widget-body comment-body">
            <div class="comment-actions">
            </div>

            <img class="comment-author-image" src="https://img.animeworld.so/avatars/15730.jpg?1696188787000" loading="lazy" alt="andreaalonci">

            <div class="comment-author-name"><a href="/profile/15730">andreaalonci</a></div>

            <div class="user-state-dot comment stato-utente-off"></div>

            <p class="comment-date">03/04/2022 15:54:09</p>

            <hr class="comment-separator">

            <span class="comment-content">finalmente 

</span>
            <div class="comment-content-edit" style="display: none;">
              <textarea class="comment-edit-input"></textarea>

              <div class="comment-edit-actions">
                <i class="fas fa-check save-edit"></i>
                <i class="fas fa-times cancel-edit"></i>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>


</div></div>
                                </div>
                        
                                <div class="content hidden" data-name="rules" id="rules">
                                    <ul>
                                        <li>
                                            <span class="rule">Report / segnalazione</span>
                                            <p>Se vedete qualcuno che viola le regole, utilizzate il pulsante di segnalazione (il triangolino rosso col punto esclamativo all'interno). L'inaffidabilità di un'opinione non è un motivo valido per segnalare.</p>
                                        </li>
                                
                                        <hr>
                                
                                        <li>
                                            <span class="rule">Spoiler</span>
                                            <p><b>Non inviateli!</b> Non importa se qualcuno li ha chiesti o meno - si tradurrà comunque in un avvertimento e/o un divieto. Commenti contenenti spoiler intenzionali e non provocati (messaggi come "X è il Titano Bestia", "X è il fratello di Y") che chiaramente non sono teorie o congetture saranno rimossi.</p>
                                            <p>Non sono ammessi testi che possono essere identificabili come spoilers come "Tutti muoiono".</p>
                                        </li>
                                
                                        <hr>
                                
                                        <li>
                                            <span class="rule">Flame / insulti</span>
                                            <p>Il flame verso altri utenti è severamente vietato. In alcun modo, non iniziare o unirti a litigi qui nei commenti.</p>
                                        </li>
                                
                                        <hr>
                                
                                        <li>
                                            <span class="rule">Spam / pubblicità</span>
                                            <p>È severamente vietato spammare/pubblicizzare altri siti di anime.</p>
                                        </li>
                                
                                        <hr>
                                
                                        <li>
                                            <span class="rule">Immagini di profilo</span>
                                            <p>I commenti fatti dagli utenti con immagini di profilo NSFW saranno rimossi, a seconda del contenuto dell'immagine. È consentito un leggero ecchi o fanservice, ma non hentai.</p>
                                        </li>
                                    </ul>
                                </div>    </div>
                        </div>
                            <script type="text/javascript" src="https://static.animeworld.so/dist/frontend/views/play/playerServersAndDownloads.js?57"></script>

                        <div class="widget">
                            <div class="widget-title">
                                <span class="title">Serie simili che potrebbero interessarti</span>
                            </div>
                            <div class="widget-body">
                                <div class="list-film">
                                    <div class="film-list interesting">
                                            <div class="item">
                                                <div class="inner">
                                                    <a href="/play/tokimeki-memorial-only-love.a4d7x" class="poster tooltipstered" data-tip="api/tooltip/2686">
                                                        <img loading="lazy" src="https://img.animeworld.so/locandine/21080l.jpg" alt="Tokimeki Memorial: Only Love">
                                                        <div class="status">
                        
                        
                                                            <span class="bar"></span>
                                                        </div>
                                                    </a>
                                                    <a href="/play/tokimeki-memorial-only-love.a4d7x" data-jtitle="Tokimeki Memorial" class="name" title="Tokimeki Memorial: Only Love">Tokimeki Memorial: Only Love</a>
                                                </div>
                                            </div>
                                            <div class="item">
                                                <div class="inner">
                                                    <a href="/play/ore-wo-suki-nano-wa-omae-dake-ka-yo.OZj-h" class="poster tooltipstered" data-tip="api/tooltip/2304">
                                                        <img loading="lazy" src="https://img.animeworld.so/locandine/237687.jpg" alt="Ore wo Suki nano wa Omae dake ka yo">
                                                        <div class="status">
                        
                        
                                                            <span class="bar"></span>
                                                        </div>
                                                    </a>
                                                    <a href="/play/ore-wo-suki-nano-wa-omae-dake-ka-yo.OZj-h" data-jtitle="ORESUKI Are you the only one who loves me?" class="name" title="Ore wo Suki nano wa Omae dake ka yo">Ore wo Suki nano wa Omae dake ka yo</a>
                                                </div>
                                            </div>
                                            <div class="item">
                                                <div class="inner">
                                                    <a href="/play/school-days.FyLvK" class="poster tooltipstered" data-tip="api/tooltip/807">
                                                        <img loading="lazy" src="https://img.animeworld.so/locandine/17594.jpg" alt="School Days">
                                                        <div class="status">
                        
                        
                                                            <span class="bar"></span>
                                                        </div>
                                                    </a>
                                                    <a href="/play/school-days.FyLvK" data-jtitle="School Days" class="name" title="School Days">School Days</a>
                                                </div>
                                            </div>
                                            <div class="item">
                                                <div class="inner">
                                                    <a href="/play/kanojo-ga-flag-wo-oraretara.csm4m" class="poster tooltipstered" data-tip="api/tooltip/641">
                                                        <img loading="lazy" src="https://img.animeworld.so/locandine/56513l.jpg" alt="Kanojo ga Flag wo Oraretara">
                                                        <div class="status">
                        
                        
                                                            <span class="bar"></span>
                                                        </div>
                                                    </a>
                                                    <a href="/play/kanojo-ga-flag-wo-oraretara.csm4m" data-jtitle="If Her Flag Breaks" class="name" title="Kanojo ga Flag wo Oraretara">Kanojo ga Flag wo Oraretara</a>
                                                </div>
                                            </div>
                                            <div class="item">
                                                <div class="inner">
                                                    <a href="/play/oreshura.6WTV9" class="poster tooltipstered" data-tip="api/tooltip/636">
                                                        <img loading="lazy" src="https://img.animeworld.so/locandine/44187l.jpg" alt="OreShura">
                                                        <div class="status">
                        
                        
                                                            <span class="bar"></span>
                                                        </div>
                                                    </a>
                                                    <a href="/play/oreshura.6WTV9" data-jtitle="Ore no Kanojo to Osananajimi ga Shuraba Sugiru" class="name" title="OreShura">OreShura</a>
                                                </div>
                                            </div>
                                            <div class="item">
                                                <div class="inner">
                                                    <a href="/play/cupid-s-chocolates.SfjMz" class="poster tooltipstered" data-tip="api/tooltip/597">
                                                        <img loading="lazy" src="https://img.animeworld.so/locandine/78011l.jpg" alt="Cupid's Chocolates">
                                                        <div class="status">
                        
                        
                                                            <span class="bar"></span>
                                                        </div>
                                                    </a>
                                                    <a href="/play/cupid-s-chocolates.SfjMz" data-jtitle="Aishen Qiaokeli-ing..." class="name" title="Cupid's Chocolates">Cupid's Chocolates</a>
                                                </div>
                                            </div>
                                            <div class="item">
                                                <div class="inner">
                                                    <a href="/play/mashiro-iro-symphony-the-color-of-lovers.AjDlV" class="poster tooltipstered" data-tip="api/tooltip/535">
                                                        <img loading="lazy" src="https://img.animeworld.so/locandine/39303l.jpg" alt="Mashiro-iro Symphony: The Color of Lovers">
                                                        <div class="status">
                        
                        
                                                            <span class="bar"></span>
                                                        </div>
                                                    </a>
                                                    <a href="/play/mashiro-iro-symphony-the-color-of-lovers.AjDlV" data-jtitle="Mashiroiro Symphony: The Color of Lovers" class="name" title="Mashiro-iro Symphony: The Color of Lovers">Mashiro-iro Symphony: The Color of Lovers</a>
                                                </div>
                                            </div>
                                            <div class="item">
                                                <div class="inner">
                                                    <a href="/play/h2o-footprints-in-the-sand.skal3" class="poster tooltipstered" data-tip="api/tooltip/2856">
                                                        <img loading="lazy" src="https://img.animeworld.so/locandine/5962l.jpg?0" alt="H2O: Footprints in the Sand">
                                                        <div class="status">
                        
                        
                                                            <span class="bar"></span>
                                                        </div>
                                                    </a>
                                                    <a href="/play/h2o-footprints-in-the-sand.skal3" data-jtitle="H2O: Footprints in the Sand" class="name" title="H2O: Footprints in the Sand">H2O: Footprints in the Sand</a>
                                                </div>
                                            </div>
                                            <div class="item">
                                                <div class="inner">
                                                    <a href="/play/juuou-mujin-no-fafnir.puJCk" class="poster tooltipstered" data-tip="api/tooltip/105">
                                                        <img loading="lazy" src="https://img.animeworld.so/locandine/63869l.jpg" alt="Juuou Mujin no Fafnir">
                                                        <div class="status">
                        
                        
                                                            <span class="bar"></span>
                                                        </div>
                                                    </a>
                                                    <a href="/play/juuou-mujin-no-fafnir.puJCk" data-jtitle="Unlimited Fafnir" class="name" title="Juuou Mujin no Fafnir">Juuou Mujin no Fafnir</a>
                                                </div>
                                            </div>
                                            <div class="item">
                                                <div class="inner">
                                                    <a href="/play/daitoshokan-no-hitsujikai.FEUvs" class="poster tooltipstered" data-tip="api/tooltip/85">
                                                        <img loading="lazy" src="https://img.animeworld.so/locandine/47481l.jpg" alt="Daitoshokan no Hitsujikai">
                                                        <div class="status">
                        
                        
                                                            <span class="bar"></span>
                                                        </div>
                                                    </a>
                                                    <a href="/play/daitoshokan-no-hitsujikai.FEUvs" data-jtitle="A Good Librarian Like a Good Shepherd" class="name" title="Daitoshokan no Hitsujikai">Daitoshokan no Hitsujikai</a>
                                                </div>
                                            </div>
                                        <div class="clearfix"></div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="widget crop text-center">
                            <div>
                                <script data-cfasync="false" async="" type="text/javascript" src="//oc.moonjahaphodal.com/tR2GKvzMJ7A7/41800"></script>
                            </div>
                        </div>                    </div>
                </div>

                <div id="sidebar" style="margin-top: 0px;">
                    <div class="widget crop text-center">
                        <center>
                            <script type="text/javascript" src="//cdn.runative-syndicate.com/sdk/v1/bi.js" data-ts-spot="4912c4bab1d14f57b3dfb1eb4aa7a8f1" data-ts-width="300" data-ts-height="250" async="" defer=""></script>
                        </center>
                    </div>
                    
                    <div class="widget crop text-center">
                        <center>
                            <ins class="aso-zone" data-zone="100518"></ins>
                            <script data-cfasync="false" async="" src="https://media.amntx1.net/js/code.min.js"></script>
                        </center>
                    </div>
                    
                    <!---
                    <div class="widget">
                        <div class="widget-body p-0">
                            <center>
                                <img src="https://i.imgur.com/6IliQFm.png">
                            </center>
                        </div>
                    </div>
                    --->                </div>

                <div id="sidebar">
                </div>

                <div id="sidebar">
                    <div class="widget simple-film-list">
                        <div class="widget-title">
                            <div class="title">SEGUICI SU</div>
                        </div>
                        <div class="widget-body">
                            <div class="social-aw">
                                <a href="https://www.instagram.com/animeworlditofficial" target="_blank" class="fab fa-instagram social1 share-button" data-tippy-content="Instagram" aria-label="Instagram" rel="noopener noreferrer" title="Instagram"></a>
                                <a href="https://t.me/AnimeWorldITA2" target="_blank" class="fab fa-telegram social3 share-button" data-tippy-content="Telegram" aria-label="Telegram" rel="noopener noreferrer" title="Telegram"></a>
                            </div>
                        </div>
                    </div>
                    <div class="widget text-center">
                        <div style="overflow: auto;">
                        <center>
                            <div id="ts_ad_native_huo90"></div>
                            <script src="//cdn.runative-syndicate.com/sdk/v1/n.js"></script>
                            <script>
                            NativeAd({
                                element_id: "ts_ad_native_huo90",
                                spot: "b9e13cab01eb4f8ca6a7bcb357b71b36",
                                type: "label-under",
                                cols: 1,
                                rows: 4,
                                title: "",
                                titlePosition: "left",
                                adsByPosition: "right",
                                breakpoints: [
                                        {
                                                    "cols": 1,
                                                    "width": 770
                                        }
                                ],
                            });
                            </script>
                        </center>
                        </div>
                    </div>                </div>
            </div>

        </div>


        <div class="img-right"></div>
        
        <div id="footer">
            <div class="bar">
                <div class="container">
                    <div class="jtitle quicktoggler">
                        <label class="switch">
                            <input id="jtitle-checkbox" type="checkbox">
                            <span class="slider round"></span>
                        </label>
                        <span class="text">TITOLO ALTERNATIVO</span>
                    </div>
                    <div class="theme quicktoggler" style="z-index: 2;">
                        <span class="text">Cambia tema</span>
                        <label class="switch" style="z-index: 2;">
                            <input id="theme-checkbox" type="checkbox">
                            <span class="slider round"></span>
                        </label>
                    </div>
                </div>
            </div>
        
            <script src="https://static.animeworld.so/dist/frontend/views/partials/footer/checkbox.js?12"></script>
        
            <div class="inner">
                <div class="container">
                    <div class="content">
                        <div class="azlist d-md-block d-sm-none d-xs-none d-none">
                            <div class="heading"> <b>Lista A-Z</b> <span>Cerca un anime in ordine alfabetico dalla A alla Z.</span> </div>
                            <ul>
                                <li>
                                    <a href="https://www.animeworld.so/az-list" title="Lista Anime A-Z">Tutti</a>
                                </li>
                                    <li>
                                        <a href="/az-list/0-9" title="Lista Anime con la 0-9">0-9</a>
                                    </li>
                                    <li>
                                        <a href="/az-list/A" title="Lista Anime con la A">A</a>
                                    </li>
                                    <li>
                                        <a href="/az-list/B" title="Lista Anime con la B">B</a>
                                    </li>
                                    <li>
                                        <a href="/az-list/C" title="Lista Anime con la C">C</a>
                                    </li>
                                    <li>
                                        <a href="/az-list/D" title="Lista Anime con la D">D</a>
                                    </li>
                                    <li>
                                        <a href="/az-list/E" title="Lista Anime con la E">E</a>
                                    </li>
                                    <li>
                                        <a href="/az-list/F" title="Lista Anime con la F">F</a>
                                    </li>
                                    <li>
                                        <a href="/az-list/G" title="Lista Anime con la G">G</a>
                                    </li>
                                    <li>
                                        <a href="/az-list/H" title="Lista Anime con la H">H</a>
                                    </li>
                                    <li>
                                        <a href="/az-list/I" title="Lista Anime con la I">I</a>
                                    </li>
                                    <li>
                                        <a href="/az-list/J" title="Lista Anime con la J">J</a>
                                    </li>
                                    <li>
                                        <a href="/az-list/K" title="Lista Anime con la K">K</a>
                                    </li>
                                    <li>
                                        <a href="/az-list/L" title="Lista Anime con la L">L</a>
                                    </li>
                                    <li>
                                        <a href="/az-list/M" title="Lista Anime con la M">M</a>
                                    </li>
                                    <li>
                                        <a href="/az-list/N" title="Lista Anime con la N">N</a>
                                    </li>
                                    <li>
                                        <a href="/az-list/O" title="Lista Anime con la O">O</a>
                                    </li>
                                    <li>
                                        <a href="/az-list/P" title="Lista Anime con la P">P</a>
                                    </li>
                                    <li>
                                        <a href="/az-list/Q" title="Lista Anime con la Q">Q</a>
                                    </li>
                                    <li>
                                        <a href="/az-list/R" title="Lista Anime con la R">R</a>
                                    </li>
                                    <li>
                                        <a href="/az-list/S" title="Lista Anime con la S">S</a>
                                    </li>
                                    <li>
                                        <a href="/az-list/T" title="Lista Anime con la T">T</a>
                                    </li>
                                    <li>
                                        <a href="/az-list/U" title="Lista Anime con la U">U</a>
                                    </li>
                                    <li>
                                        <a href="/az-list/V" title="Lista Anime con la V">V</a>
                                    </li>
                                    <li>
                                        <a href="/az-list/W" title="Lista Anime con la W">W</a>
                                    </li>
                                    <li>
                                        <a href="/az-list/X" title="Lista Anime con la X">X</a>
                                    </li>
                                    <li>
                                        <a href="/az-list/Y" title="Lista Anime con la Y">Y</a>
                                    </li>
                                    <li>
                                        <a href="/az-list/Z" title="Lista Anime con la Z">Z</a>
                                    </li>
                            </ul>
                        </div>
                        <div class="main row flex-row-reverse justify-content-end">
                            <div class="mainc col-lg-7 col-md-7 col-sm-12">
                                <h1 class="logo">AnimeWorld</h1>
                                <div class="socials">
                                    <a href="https://www.instagram.com/animeworlditofficial" target="_blank" rel="nofollow noopener noreferrer" aria-label="Instagram" data-tippy-content="Instagram"> <i class="fab fa-instagram"></i></a>
                                    <a href="https://t.me/AnimeWorldITA2" target="_blank" rel="nofollow noopener noreferrer" aria-label="Telegram" data-tippy-content="Telegram"> <i class="fab fa-telegram-plane"></i></a>
                                    <a href="mailto:staff@animeworld.cc" target="_blank" rel="nofollow noopener noreferrer" aria-label="E-mail" data-tippy-content="E-mail"> <i class="fas fa-envelope"></i></a>
                                    <a href="https://www.animeworld.so/rss" target="_blank" rel="nofollow noopener noreferrer" aria-label="Feed RSS" data-tippy-content="Feed RSS"> <i class="fas fa-rss"></i></a>
                                </div>
                                <p class="copyright">Copyright © animeworld.so. All Rights Reserved</p>
                                <p class="disclaimer">All files on this site are the property of their respective and rightful owners. <br>In case of copyright infringement, please directly send a mail to <b>staff@animeworld.cc</b>.</p>
                                <p class="copyright">Made with <b style="color: #ff2d2d;">❤</b> by AnimeWorld Team</p>
                                <p class="small">
                                    <a target="_blank" href="https://www.hentaiworld.me" data-tippy-content="HentaiWorld" rel="noopener noreferrer">HentaiWorld</a>,
                                    <a target="_blank" href="https://www.mangaworld.bz" data-tippy-content="MangaWorld" rel="noopener noreferrer">MangaWorld</a>,
                                    <a target="_blank" href="https://www.mangaworldadult.com" data-tippy-content="MangaWorldAdult" rel="noopener noreferrer">MangaWorldAdult</a>
                                </p>
                            </div>
                            <div class="linkc col-lg-3 col-md-4 col-sm-12">
                                <div class="row">
                                    <div class="links col-md-6 col-sm-12 mb-3">
                                        <div class="heading">Aiuto</div>
                                        <ul>
                                            <li> <a href="https://www.animeworld.so/contact">Contattaci</a> </li>
                                            <li> <a href="https://www.animeworld.so/termini">Termini e Condizioni &amp; FAQ</a> </li>
                                            <li> <a href="https://www.animeworld.so/cookie">Policy sulla privacy e i cookie</a> </li>
                                            <li> <a href="https://www.animeworld.so/request-serie">Richiedi una serie</a> </li>
                                        </ul>
                                    </div>
                                    <div class="links col-md-6 col-sm-12">
                                        <div class="heading">Link</div>
                                        <ul>
                                            <li> <a href="https://www.animeworld.so/newest">Nuove aggiunte</a> </li>
                                            <li> <a href="https://www.animeworld.so/updated">Ultimi episodi</a> </li>
                                            <li> <a href="https://www.animeworld.so/ongoing">Anime in corso</a> </li>
                                            <li> <a href="https://www.animeworld.so/upcoming">Prossime uscite</a> </li>
                                            <li> <a href="https://www.animeworld.so/schedule">Calendario</a> </li>
                                            <li> <a href="https://www.animeworld.so/az-list">Lista A-Z</a> </li>
                                            <li> <a href="https://www.animeworld.so/sfondi">Sfondi</a> </li>
                                            <li> <a href="https://www.animeworld.so/changelogs">Changelog</a> </li>
                                            <li> <a href="https://www.instagram.com/reikacchan/" target="_blank" rel="noopener noreferrer">Artista</a> </li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="clearfix"></div>
                    </div>
                </div>
            </div>
        </div>
        
        <script src="https://apis.google.com/js/platform.js?onload=renderButton" async="" defer="" gapi_processed="true"></script>
        <script src="https://static.animeworld.so/dist/frontend/views/partials/header/tooltips.js?14"></script>
        <script src="https://static.animeworld.so/dist/frontend/all.js?3223422851"></script>
        <script src="https://static.animeworld.so/dist/frontend/views/partials/header/nav.js?33"></script>
        
        <!-- Google tag (gtag.js) -->
        <script async="" src="https://www.googletagmanager.com/gtag/js?id=G-ZWP0EVD4M9"></script>
        <script>
          window.dataLayer = window.dataLayer || [];
          function gtag(){dataLayer.push(arguments);}
          gtag('js', new Date());
        
          gtag('config', 'G-ZWP0EVD4M9');
        </script>
    

<div id="light-mode-background" style="width: 100%; height: 100%; position: fixed; left: 0px; top: 0px; z-index: 3; background: rgb(0, 0, 0); opacity: 0.97; display: none;"></div></body></html>