<!DOCTYPE html><html lang="de" class="dark" dir="ltr"><head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf-token" content="jemUMRSUaNtsOC0hXd7Qv9fvgpH35bDWxsnDxRfN">

    <title>            The Do-Over Damsel Conquers the Dragon Emperor Aninexus
        </title>

    <meta itemprop="name" content="The Do-Over Damsel Conquers the Dragon Emperor Aninexus">
    <meta itemprop="description" content="Auf der Flucht vor ihrer Hinrichtung durch ihren ehemaligen Verlobten Kronprinz Gerald wird Jill von einem Speer getroffen. Doch statt zu sterben, wird sie sechs Jahre zurückversetzt, just an den Abend, an dem Gerald um ihre Hand anhielt. Mit dem verzweifelten Wunsch, ihr Schicksal zu verändern, macht sie dem nächstbesten Mann einen Antrag. Nur ist dieser Mann ihr zukünftiger größter Feind …">
            <meta itemprop="image" content="https://image.tmdb.org/t/p/w1280_and_h720_bestv2/w4NHQXOhfPuXsH8DqUAZCfr1kfS.jpg">
    
    <meta property="og:title" content="The Do-Over Damsel Conquers the Dragon Emperor Aninexus">
    <meta property="og:description" content="Auf der Flucht vor ihrer Hinrichtung durch ihren ehemaligen Verlobten Kronprinz Gerald wird Jill von einem Speer getroffen. Doch statt zu sterben, wird sie sechs Jahre zurückversetzt, just an den Abend, an dem Gerald um ihre Hand anhielt. Mit dem verzweifelten Wunsch, ihr Schicksal zu verändern, macht sie dem nächstbesten Mann einen Antrag. Nur ist dieser Mann ihr zukünftiger größter Feind …">
            <meta property="og:image" content="https://image.tmdb.org/t/p/w1280_and_h720_bestv2/w4NHQXOhfPuXsH8DqUAZCfr1kfS.jpg">
        <meta property="og:url" content="https://aninexus.to/episode/the-do-over-damsel-conquers-the-dragon-emperor/1-1">
    <meta property="og:locale" content="de_DE">
    <meta property="og:type" content="article">
    <meta name="twitter:card" content="summary_large_image">

    <link rel="canonical" href="https://aninexus.to/episode/the-do-over-damsel-conquers-the-dragon-emperor/1-1">

    <link rel="apple-touch-icon" sizes="180x180" href="https://aninexus.to/favicon/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="https://aninexus.to/favicon/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="https://aninexus.to/favicon/favicon-16x16.png">
<link rel="manifest" href="https://aninexus.to/site.webmanifest">
<link rel="preload" as="style" href="https://aninexus.to/build/assets/app-40b5d136.css"><link rel="modulepreload" href="https://aninexus.to/build/assets/app-78822604.js"><link rel="stylesheet" href="https://aninexus.to/build/assets/app-40b5d136.css" data-navigate-track="reload"><script type="module" src="https://aninexus.to/build/assets/app-78822604.js" data-navigate-track="reload"></script>
<style>
    :root {
                        --color-gray-50:250 250 250;
                    --color-gray-100:244 244 245;
                    --color-gray-200:228 228 231;
                    --color-gray-300:212 212 216;
                    --color-gray-400:161 161 170;
                    --color-gray-500:113 113 122;
                    --color-gray-600:82 82 91;
                    --color-gray-700:63 63 70;
                    --color-gray-800:39 39 42;
                    --color-gray-900:24 24 27;
                    --color-gray-950:9 9 11;
                       --color-primary-500: 22 93 224;
    }
</style>
<!-- Google tag (gtag.js) -->
<script async="" src="https://www.googletagmanager.com/gtag/js?id=G-97SQPS4Q8Y"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-97SQPS4Q8Y');
</script>
<script type="application/ld+json">
    {
        "@context": "https://schema.org",
        "@type": "WebSite",
        "url": "https://anistream.moe/",
        "potentialAction": {
        "@type": "SearchAction",
        "target": {
            "@type": "EntryPoint",
            "urlTemplate": "https://anistream.moe/search/{search_term_string}"
        },
        "query-input": "required name=search_term_string"
        }
    }
</script>
    <!-- Livewire Styles --><style>[wire\:loading][wire\:loading], [wire\:loading\.delay][wire\:loading\.delay], [wire\:loading\.inline-block][wire\:loading\.inline-block], [wire\:loading\.inline][wire\:loading\.inline], [wire\:loading\.block][wire\:loading\.block], [wire\:loading\.flex][wire\:loading\.flex], [wire\:loading\.table][wire\:loading\.table], [wire\:loading\.grid][wire\:loading\.grid], [wire\:loading\.inline-flex][wire\:loading\.inline-flex] {display: none;}[wire\:loading\.delay\.none][wire\:loading\.delay\.none], [wire\:loading\.delay\.shortest][wire\:loading\.delay\.shortest], [wire\:loading\.delay\.shorter][wire\:loading\.delay\.shorter], [wire\:loading\.delay\.short][wire\:loading\.delay\.short], [wire\:loading\.delay\.default][wire\:loading\.delay\.default], [wire\:loading\.delay\.long][wire\:loading\.delay\.long], [wire\:loading\.delay\.longer][wire\:loading\.delay\.longer], [wire\:loading\.delay\.longest][wire\:loading\.delay\.longest] {display: none;}[wire\:offline][wire\:offline] {display: none;}[wire\:dirty]:not(textarea):not(input):not(select) {display: none;}:root {--livewire-progress-bar-color: #2299dd;}[x-cloak] {display: none !important;}</style>
    <script data-navigate-once="true">window.livewireScriptConfig = {"csrf":"jemUMRSUaNtsOC0hXd7Qv9fvgpH35bDWxsnDxRfN","uri":"\/livewire\/update","progressBar":"","nonce":""};</script>
<style>/* Make clicks pass-through */

    #nprogress {
      pointer-events: none;
    }

    #nprogress .bar {
      background: var(--livewire-progress-bar-color, #29d);

      position: fixed;
      z-index: 1031;
      top: 0;
      left: 0;

      width: 100%;
      height: 2px;
    }

    /* Fancy blur effect */
    #nprogress .peg {
      display: block;
      position: absolute;
      right: 0px;
      width: 100px;
      height: 100%;
      box-shadow: 0 0 10px #29d, 0 0 5px #29d;
      opacity: 1.0;

      -webkit-transform: rotate(3deg) translate(0px, -4px);
          -ms-transform: rotate(3deg) translate(0px, -4px);
              transform: rotate(3deg) translate(0px, -4px);
    }

    /* Remove these to get rid of the spinner */
    #nprogress .spinner {
      display: block;
      position: fixed;
      z-index: 1031;
      top: 15px;
      right: 15px;
    }

    #nprogress .spinner-icon {
      width: 18px;
      height: 18px;
      box-sizing: border-box;

      border: solid 2px transparent;
      border-top-color: var(--livewire-progress-bar-color, #29d);
      border-left-color: var(--livewire-progress-bar-color, #29d);
      border-radius: 50%;

      -webkit-animation: nprogress-spinner 400ms linear infinite;
              animation: nprogress-spinner 400ms linear infinite;
    }

    .nprogress-custom-parent {
      overflow: hidden;
      position: relative;
    }

    .nprogress-custom-parent #nprogress .spinner,
    .nprogress-custom-parent #nprogress .bar {
      position: absolute;
    }

    @-webkit-keyframes nprogress-spinner {
      0%   { -webkit-transform: rotate(0deg); }
      100% { -webkit-transform: rotate(360deg); }
    }
    @keyframes nprogress-spinner {
      0%   { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    </style><style>.\[\&_\.gdprAdTransparencyCogWheelButton\]\:\!pjra-z-\[5\],
AD-SLOT,
DFP-AD,
[class^="adDisplay-module"],
[class^="amp-ad-"],
[data-ad-cls],
[data-adbridg-ad-class],
[data-adshim],
[data-block-type="ad"],
[data-css-class="dfp-inarticle"],
[data-d-ad-id],
[data-desktop-ad-id],
[data-dynamic-ads],
[data-ez-name],
[data-freestar-ad][id],
[data-id^="div-gpt-ad"],
[data-identity="adhesive-ad"],
[data-m-ad-id],
[data-mobile-ad-id],
[data-name="adaptiveConstructorAd"],
[data-rc-widget="data-rc-widget"],
[data-rc-widget],
[data-role="tile-ads-module"],
[data-template-type="nativead"],
[data-testid="adBanner-wrapper"],
[data-testid="ad_testID"],
[data-testid="prism-ad-wrapper"],
[data-type="ad-vertical"],
[data-wpas-zoneid],
[id^="ad-wrap-"],
[id^="ad_sky"],
[id^="ad_slider"],
[id^="section-ad-banner"],
[onclick^="location.href='https://1337x.vpnonly.site/"],
a-ad,
a[data-href^="http://ads.trafficjunky.net/"],
a[data-url^="https://vulpix.bet/?ref="],
a[style="width:100%;height:100%;z-index:10000000000000000;position:absolute;top:0;left:0;"],
ad-shield-ads,
ad-slot,
app-ad,
app-advertisement,
app-large-ad,
ark-top-ad,
aside[id^="adrotate_widgets-"],
atf-ad-slot,
bottomadblock,
display-ads,
div[class^="Adstyled__AdWrapper-"],
div[class^="Display_displayAd"],
div[class^="kiwi-ad-wrapper"],
div[class^="native-ad-"],
div[data-ad-placeholder],
div[data-ad-wrapper],
div[data-adname],
div[data-adunit-path],
div[data-adunit],
div[data-adzone],
div[data-alias="300x250 Ad 1"],
div[data-alias="300x250 Ad 2"],
div[data-contentexchange-widget],
div[data-dfp-id],
div[data-id-advertdfpconf],
div[id^="ad-div-"],
div[id^="ad-position-"],
div[id^="adngin-"],
div[id^="adrotate_widgets-"],
div[id^="adspot-"],
div[id^="crt-"][style],
div[id^="div-ads-"],
div[id^="google_dfp_"],
div[id^="gpt_ad_"],
div[id^="lazyad-"],
div[id^="optidigital-adslot"],
div[id^="pa_sticky_ad_box_middle_"],
div[id^="rc-widget-"],
div[id^="st"][style^="z-index: 999999999;"],
div[id^="sticky_ad_"],
div[id^="vuukle-ad-"],
gpt-ad,
guj-ad,
hl-adsense,
img[src^="https://images.purevpnaffiliates.com"],
ps-connatix-module,
span[data-ez-ph-id],
span[id^="ezoic-pub-ad-placeholder-"],
topadblock,
zeus-ad,
[class^="tile-picker__CitrusBannerContainer-sc-"],
citrus-ad-wrapper,
[class^="s2nPlayer"],
[data-taboola-options],
div[id*="MarketGid"],
[onclick*="content.ad/"],
AMP-AD,
amp-ad,
amp-ad-custom,
amp-connatix-player,
amp-fx-flying-carpet,
a[data-oburl^="https://paid.outbrain.com/network/redir?"],
a[data-redirect^="https://paid.outbrain.com/network/redir?"],
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"][target="_blank"] + .ob_source,
div[id^="taboola-stream-"],
div[id^="zergnet-widget"],
html[lang] > body.ishome > div.adult + main.main,
html[lang] > body.startnew > div#sections > section#section_uname,
html[lang] > body:not([style]) > div.captchaBody,
html[lang] > body#body > * > div.cv-xwrapper > div.cvc > div.cv-inner,
html[lang] > body#body > * > div.cvh.BlockClicksActivityBusy,
html#html[sti][vic][lang] > body#allbody,
html > body > div.container.m-p > #checkbox-window.checkbox-window,
html > body.hold-transition.theme-primary.bg-img[style^="background-image"][style*="wallpaperaccess.com"][style*="background-repeat"][style*="background-size"],
html > body > div.container > form#unsubscribe-form[onsubmit="submitUnsubscribeForm(event)"],
html > body > div.content > dl > dd.dd1 > div.min_sider > form#form1[action="unsubscribe.php"],
html > body.body > div.container > div.content > form > table.optoutForm,
[src^="https://forum.picbaron.com/Banner"],
div[id][style^="position: fixed; inset: 0px; z-index: 2147483647; background: black"][style*="opacity: 0.01"],
div[class$="player-promo-col"],
div#spot-holder.spot-holder[style="display: block;"],
a[dontfo=""][style$="position: absolute; z-index: 2147483647;"],
[data-ad-module]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-width]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-adblockkey]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(html):not(.adsbygoogle),
[data-advadstrackid]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-manager-id]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
div[style^="z-index: 999999; background-image: url(\"data:image/gif;base64,"][style$="position: absolute;"],
a[onclick="openAuc();"],
div[style="position: fixed; display: block; width: 100%; height: 100%; inset: 0px; background-color: rgba(0, 0, 0, 0); z-index: 300000;"],
body > div[style$="z-index: 2147483647; top: 0px; left: 0px; position: fixed; display: block;"],
div[style^="position:fixed;inset:0px;z-index:2147483647;background:black;opacity:0.01"],
div[style^="position: fixed; inset: 0px; z-index: 2147483647; background: black; opacity: 0.01"],
a[id][href="https://chpadblock.com/"][rel^="noopener noreferrer"],
a[id][href="https://hamrocsit.com"][rel^="noopener noreferrer"],
a[id][href="https://toolkitspro.com"][rel^="noopener noreferrer"],
iframe.lazyloaded[data-src^="https://rcm-fe.amazon-adsystem.com/"],
div[style="top: 0px; left: 0px; width: 1287px; height: 500px; position: fixed; z-index: 2147483647;"],
div[style="position: fixed; inset: 0px; z-index: 2147483647; pointer-events: auto;"],
#player div[style$="cursor: pointer; position: absolute; width: 100%; height: 100%; padding: 1rem; z-index: 2147483647;"],
html[lang][style^="--main-bg-color"] > body:not([class]):not([id]) > div#container[style="visibility: visible;"] > div#banner[style="opacity:0"] ~ main:not([class]):not([id]) > div#message,
[data-uri^="https://s3.amazonaws.com"],
[data-lnguri^="https://s3.amazonaws.com"],
[onclick*="postlnk.com"],
[data-lnguri*="vipbox"],
[class^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]),
div[id^="div-gpt-"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]):not([style="pointer-events: none; height: 1px; width: 0px; opacity: 0; visibility: hidden; position: fixed; bottom: 0px;"]),
[id^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]):not([style="pointer-events: none; height: 1px; width: 0px; opacity: 0; visibility: hidden; position: fixed; bottom: 0px;"]),
[src^="//dombnrs.com/"] { display: none !important; }

[data-ad-name],
[data-revive-zoneid],
[name^="google_ads_iframe"],
display-ad-component,
div[aria-label="Ads"],
div[data-ad-targeting],
div[id^="ad_position_"],
div[id^="dfp-ad-"],
div[id^="ezoic-pub-ad-"],
div[id^="yandex_ad"],
ins.adsbygoogle[data-ad-client],
ins.adsbygoogle[data-ad-slot],
div[id*="ScriptRoot"],
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"][target="_blank"],
amp-embed[type="taboola"] { display: none !important; }</style><style>.grid > .container > #aside-promotion,
a[href^="https://service.bv-aff-trx.com/"],
a[href^="https://www.dating-finder.com/?ai_d="],
a[href^="https://www.dating-finder.com/signup/?ai_d="],
[href*="postlnk.com"],
[href*="passtechusa.com"] { display: none !important; }</style></head>
<body class="min-h-screen dark:bg-gray-950 flex flex-col relative" x-data="{ searchOpen: false,loading:false,'sidebarToggle': false,compactToggle: localStorage.getItem('compactToggle') === 'true', cookiePolicy: localStorage.getItem('cookiePolicy'), promote: localStorage.getItem('promote')}" x-init="$watch('cookiePolicy', val =&gt; {
  localStorage.setItem('cookiePolicy', val);
}) ; $watch('promote', val =&gt; {
  localStorage.setItem('promote', val);
}); $watch('compactToggle', val =&gt; {
  localStorage.setItem('compactToggle', val);
})">
        <!-- End Announcement Banner -->
<header class="w-full z-40 bg-white dark:bg-gray-950 xl:dark:bg-gray-950/80 backdrop-blur-lg sticky top-0  ">
    <div class="px-6 lg:px-8">
        <div class="flex items-center relative h-16">

                        <div class="lg:hidden mr-5">
                <!-- Hamburger button -->
                <button class="hamburger text-gray-700 dark:text-gray-100" :class="{ 'active': sidebarToggle }" @click.stop="sidebarToggle = !sidebarToggle" aria-controls="mobile-nav" :aria-expanded="sidebarToggle" aria-expanded="false">
                    <span class="sr-only">Menu</span>
                    <svg class="w-5 h-5 fill-current" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <rect y="4" width="24" height="1.5"></rect>
                        <rect y="11" width="24" height="1.5"></rect>
                        <rect y="18" width="24" height="1.5"></rect>
                    </svg>
                </button>
            </div>
                        <!-- Site branding -->
            <div class="shrink-0 lg:ml-0 flex items-center gap-x-5">

                                                            <button class="hamburger text-gray-700 dark:text-white dark:hover:text-gray-300 transition hidden lg:block" @click="compactToggle = !compactToggle; localStorage.setItem('compactToggle', compactToggle ? 'true' : 'false')">
                            <span class="sr-only">Menu</span>
                            <svg class="w-5 h-5 fill-current" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <rect y="4" width="24" height="1.5"></rect>
                                <rect y="11" width="24" height="1.5"></rect>
                                <rect y="18" width="24" height="1.5"></rect>
                            </svg>
                        </button>
                                                    <!-- Logo -->
                <a class="" href="https://aninexus.to">
                                            <img src="https://aninexus.to/static/img/logo-1732824705.png" class="h-7" alt="Aninexus">
                                    </a>
            </div>
            
            
                <div class="hidden lg:block max-w-sm xl:max-w-xl w-full absolute left-1/2 -translate-x-1/2">
                    <button type="button" class="hidden sm:flex items-center w-full text-left space-x-5 px-6 py-3.5 bg-gray-100 hover:bg-gray-200/50 rounded-full text-gray-400 dark:bg-gray-800/70 dark:hover:bg-gray-900 transition-all duration-300 text-sm  dark:text-gray-300/40 text-gray-400" @click.prevent="searchOpen = true;if (searchOpen) $nextTick(()=&gt;{ $refs.searchInput?.focus() });" aria-controls="search-modal" @keydown.window.ctrl.q="searchOpen = true;if (searchOpen) $nextTick(()=&gt;{$refs.searchInput?.focus()});">

                        <svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-width="1.75" stroke-linejoin="round" class="w-5 h-5">
    <use xlink:href="https://aninexus.to/static/sprite/sprite.svg#search"></use>
</svg>
                        <span class="flex-auto">Suche ..</span>
                        <span class="font-sans text-xs whitespace-nowrap opacity-70 block rtl:hidden">Ctrl + Q</span>
                    </button>
                </div>
                        <nav class="flex ml-auto rtl:mr-auto rtl:ml-0 lg:w-96">
                <ul class="flex grow justify-end flex-wrap items-center text-sm gap-x-6 lg:gap-x-7">

                                        <li class="block lg:hidden">
                        <button type="button" class="w-5 h-5 flex items-center text-gray-500 dark:text-gray-400 dark:hover:text-primary-500 hover:text-primary-500 justify-center hover:text-primary-500 transition duration-150 rounded-full" @click.prevent="searchOpen = true;if (searchOpen) $nextTick(()=&gt;{$refs.searchInput.focus()});" aria-controls="search-modal" @keydown.window.ctrl.q="searchOpen = true;if (searchOpen) $nextTick(()=&gt;{$refs.searchInput.focus()});">

                            <svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-width="1.75" stroke-linejoin="round" class="w-5 h-5">
    <use xlink:href="https://aninexus.to/static/sprite/sprite.svg#search"></use>
</svg>
                        </button>
                    </li>
                                            <li class="hidden lg:block">
                            <a href="https://aninexus.to/login" class="text-gray-700 dark:text-gray-400 dark:hover:text-white hover:text-primary-500 inline-flex items-center px-1 py-2 text-sm">Anmelden</a>
                        </li>
                                                    <li class="hidden lg:block">
                                <a href="https://aninexus.to/register" class="bg-primary-500 rounded-full border-transparent text-white dark:text-gray-200 hover:text-white hover:bg-primary-500 transition-all inline-flex items-center px-6 lg:px-8 py-3.5 text-sm group ">

                                    <span>Registrieren</span>
                                    <span class="tracking-normal  group-hover:translate-x-0.5 transition-transform duration-150 ease-in-out ml-3">-&gt;</span>
                                </a>
                            </li>
                                                <li class="block lg:hidden">
                            <a href="https://aninexus.to/login" class="bg-primary-500 rounded-full border-transparent text-white dark:text-gray-200 hover:text-white hover:bg-primary-500 transition-all inline-flex items-center w-10 h-10 flex items-center justify-center text-sm group ">
                                <svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-width="1.75" stroke-linejoin="round" class="w-5 h-5" stroke="currentColor">
    <use xlink:href="https://aninexus.to/static/sprite/sprite.svg#user"></use>
</svg>
                            </a>
                        </li>
                                    </ul>
            </nav>
        </div>
    </div>
</header>

                            <aside id="sidebar" class="fixed shrink-0 top-16 max-h-[calc(100vh-theme(space.16))] min-h-[calc(100vh-theme(space.16))] bottom-0 group top-0 left-0 bg-white md:flex md:translate-x-0 md:right-auto md:bottom-0 dark:scrollbar-y flex flex-col z-40 dark:bg-gray-950 w-full lg:w-64 transition-all duration-200 ease-out rtl:left-auto rtl:right-0 -translate-x-full" :class="[sidebarToggle ? 'translate-x-0' : '-translate-x-full', compactToggle ? 'lg:!w-auto group' : '']" @click.outside="sidebarToggle = false">
    <div class="flex flex-col overflow-y-auto scrollbar-y h-full px-2 lg:px-4 scrollbar scrollbar-thumb-gray-100 dark:scrollbar-thumb-white/10 scrollbar-thin scrollbar-track-transparent">
                                                        <a href="https://aninexus.to/browse" class="px-3 gap-x-4 py-2.5 text-sm text-gray-700 dark:text-gray-300 hover:text-gray-900 hover:bg-gray-50/70 hover:border-primary-500 dark:hover:text-gray-100 dark:hover:bg-gray-900 transition rounded-lg flex items-center ">
                        <svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-width="1.75" stroke-linejoin="round" class="w-[22px] h-[22px]" stroke="currentColor" x-bind:class="compactToggle ? '!w-6 !h-6' : ''">
    <use xlink:href="https://aninexus.to/static/sprite/sprite.svg#browse"></use>
</svg>
                        <div class="tracking-tighter whitespace-nowrap flex-1 line-clamp-1 block" :class="compactToggle ? 'lg:hidden' : 'block'">Durchsuchen</div>
                    </a>
                                                                                                <a href="https://aninexus.to/trending" class="px-3 gap-x-4 py-2.5 text-sm text-gray-700 dark:text-gray-300 hover:text-gray-900 hover:bg-gray-50/70 hover:border-primary-500 dark:hover:text-gray-100 dark:hover:bg-gray-900 transition rounded-lg flex items-center ">
                        <svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-width="1.75" stroke-linejoin="round" class="w-[22px] h-[22px]" stroke="currentColor" x-bind:class="compactToggle ? '!w-6 !h-6' : ''">
    <use xlink:href="https://aninexus.to/static/sprite/sprite.svg#trending"></use>
</svg>
                        <div class="tracking-tighter whitespace-nowrap flex-1 line-clamp-1 block" :class="compactToggle ? 'lg:hidden' : 'block'">Im Trend</div>
                    </a>
                                                                                                <a href="https://aninexus.to/tv-shows" class="px-3 gap-x-4 py-2.5 text-sm text-gray-700 dark:text-gray-300 hover:text-gray-900 hover:bg-gray-50/70 hover:border-primary-500 dark:hover:text-gray-100 dark:hover:bg-gray-900 transition rounded-lg flex items-center ">
                        <svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-width="1.75" stroke-linejoin="round" class="w-[22px] h-[22px]" stroke="currentColor" x-bind:class="compactToggle ? '!w-6 !h-6' : ''">
    <use xlink:href="https://aninexus.to/static/sprite/sprite.svg#tv"></use>
</svg>
                        <div class="tracking-tighter whitespace-nowrap flex-1 line-clamp-1 block" :class="compactToggle ? 'lg:hidden' : 'block'">Serien</div>
                    </a>
                                                                                                <a href="https://aninexus.to/movies" class="px-3 gap-x-4 py-2.5 text-sm text-gray-700 dark:text-gray-300 hover:text-gray-900 hover:bg-gray-50/70 hover:border-primary-500 dark:hover:text-gray-100 dark:hover:bg-gray-900 transition rounded-lg flex items-center ">
                        <svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-width="1.75" stroke-linejoin="round" class="w-[22px] h-[22px]" stroke="currentColor" x-bind:class="compactToggle ? '!w-6 !h-6' : ''">
    <use xlink:href="https://aninexus.to/static/sprite/sprite.svg#movie"></use>
</svg>
                        <div class="tracking-tighter whitespace-nowrap flex-1 line-clamp-1 block" :class="compactToggle ? 'lg:hidden' : 'block'">Filme</div>
                    </a>
                                                                                                <a href="https://aninexus.to/collections" class="px-3 gap-x-4 py-2.5 text-sm text-gray-700 dark:text-gray-300 hover:text-gray-900 hover:bg-gray-50/70 hover:border-primary-500 dark:hover:text-gray-100 dark:hover:bg-gray-900 transition rounded-lg flex items-center ">
                        <svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-width="1.75" stroke-linejoin="round" class="w-[22px] h-[22px]" stroke="currentColor" x-bind:class="compactToggle ? '!w-6 !h-6' : ''">
    <use xlink:href="https://aninexus.to/static/sprite/sprite.svg#collection"></use>
</svg>
                        <div class="tracking-tighter whitespace-nowrap flex-1 line-clamp-1 block" :class="compactToggle ? 'lg:hidden' : 'block'">Sammlungen</div>
                    </a>
                                                                                                <a href="https://hentai.aninexus.to" class="px-3 gap-x-4 py-3 text-sm text-gray-700 dark:text-gray-300 hover:text-gray-900 hover:bg-gray-50/70 hover:border-primary-500 dark:hover:text-gray-100 dark:hover:bg-gray-900 transition rounded-lg flex items-center ">
                                                    <svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-width="1.75" stroke-linejoin="round" class="w-[22px] h-[22px]" stroke="currentColor" x-bind:class="compactToggle ? '!w-6 !h-6' : ''">
    <use xlink:href="https://aninexus.to/static/sprite/sprite.svg#fire"></use>
</svg>
                                                <div class="tracking-tighter whitespace-nowrap flex-1 line-clamp-1 block" :class="compactToggle ? 'lg:hidden' : 'block'">Hentais</div>
                    </a>
                                                        <div class="border-t border-gray-100 dark:border-gray-900/70 mx-2 my-6"></div>
                                                                    <a href="https://aninexus.to/request" class="px-3 gap-x-4 py-2.5 text-sm text-gray-700 dark:text-gray-300 hover:text-gray-900 hover:bg-gray-50/70 hover:border-primary-500 dark:hover:text-gray-100 dark:hover:bg-gray-900 transition rounded-lg flex items-center ">
                        <svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-width="1.75" stroke-linejoin="round" class="w-[22px] h-[22px]" stroke="currentColor" x-bind:class="compactToggle ? '!w-6 !h-6' : ''">
    <use xlink:href="https://aninexus.to/static/sprite/sprite.svg#refresh"></use>
</svg>
                        <div class="tracking-tighter whitespace-nowrap flex-1 line-clamp-1 block" :class="compactToggle ? 'lg:hidden' : 'block'">Anfrage</div>
                    </a>
                                                                                                <a href="https://aninexus.to/blog" class="px-3 gap-x-4 py-2.5 text-sm text-gray-700 dark:text-gray-300 hover:text-gray-900 hover:bg-gray-50/70 hover:border-primary-500 dark:hover:text-gray-100 dark:hover:bg-gray-900 transition rounded-lg flex items-center ">
                        <svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-width="1.75" stroke-linejoin="round" class="w-[22px] h-[22px]" stroke="currentColor" x-bind:class="compactToggle ? '!w-6 !h-6' : ''">
    <use xlink:href="https://aninexus.to/static/sprite/sprite.svg#blog"></use>
</svg>
                        <div class="tracking-tighter whitespace-nowrap flex-1 line-clamp-1 block" :class="compactToggle ? 'lg:hidden' : 'block'">Changelog</div>
                    </a>
                                                                                                <a href="https://discord.gg/msvAajT58A" class="px-3 gap-x-4 py-3 text-sm text-gray-700 dark:text-gray-300 hover:text-gray-900 hover:bg-gray-50/70 hover:border-primary-500 dark:hover:text-gray-100 dark:hover:bg-gray-900 transition rounded-lg flex items-center ">
                                                    <svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-width="1.75" stroke-linejoin="round" class="w-[22px] h-[22px]" stroke="currentColor" x-bind:class="compactToggle ? '!w-6 !h-6' : ''">
    <use xlink:href="https://aninexus.to/static/sprite/sprite.svg#chat-2"></use>
</svg>
                                                <div class="tracking-tighter whitespace-nowrap flex-1 line-clamp-1 block" :class="compactToggle ? 'lg:hidden' : 'block'">Discord</div>
                    </a>
                                                                <div class="border-t border-gray-100 dark:border-gray-900/70 mx-2 my-6"></div>
            <div class="h-full px-4 overflow-y-auto scrollbar-thumb-gray-100 dark:scrollbar-thumb-white/10 scrollbar-thin scrollbar-track-transparent block" :class="compactToggle ? 'lg:hidden' : 'block'">
                <div class="text-gray-300 dark:text-gray-500 text-sm mb-1">
                    Am beliebtesten
                </div>
                                    <a href="https://aninexus.to/tv-show/the-do-over-damsel-conquers-the-dragon-emperor" class="py-1.5 block">
                        <div class="text-gray-500 dark:text-gray-400 text-sm hover:underline hover:text-white line-clamp-1">The Do-Over Damsel Conquers the Dragon Emperor</div>
                        <div class="flex items-center gap-x-2 text-gray-400 dark:text-gray-500">
                            <svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-width="1.75" stroke-linejoin="round" class="w-3.5 h-3.5" stroke="currentColor">
    <use xlink:href="https://aninexus.to/static/sprite/sprite.svg#trending"></use>
</svg>
                            <div class="text-xs">23-Aufrufe</div>
                        </div>
                    </a>
                                    <a href="https://aninexus.to/tv-show/our-dating-story-meine-erfahrene-freundin-und-ich" class="py-1.5 block">
                        <div class="text-gray-500 dark:text-gray-400 text-sm hover:underline hover:text-white line-clamp-1">Our Dating Story: Meine erfahrene Freundin und Ich</div>
                        <div class="flex items-center gap-x-2 text-gray-400 dark:text-gray-500">
                            <svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-width="1.75" stroke-linejoin="round" class="w-3.5 h-3.5" stroke="currentColor">
    <use xlink:href="https://aninexus.to/static/sprite/sprite.svg#trending"></use>
</svg>
                            <div class="text-xs">20-Aufrufe</div>
                        </div>
                    </a>
                                    <a href="https://aninexus.to/tv-show/2-5-dimensional-seduction" class="py-1.5 block">
                        <div class="text-gray-500 dark:text-gray-400 text-sm hover:underline hover:text-white line-clamp-1">2.5 Dimensional Seduction</div>
                        <div class="flex items-center gap-x-2 text-gray-400 dark:text-gray-500">
                            <svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-width="1.75" stroke-linejoin="round" class="w-3.5 h-3.5" stroke="currentColor">
    <use xlink:href="https://aninexus.to/static/sprite/sprite.svg#trending"></use>
</svg>
                            <div class="text-xs">17-Aufrufe</div>
                        </div>
                    </a>
                                    <a href="https://aninexus.to/tv-show/zom-100-bucket-list-of-the-dead" class="py-1.5 block">
                        <div class="text-gray-500 dark:text-gray-400 text-sm hover:underline hover:text-white line-clamp-1">Zom 100: Bucket List of the Dead</div>
                        <div class="flex items-center gap-x-2 text-gray-400 dark:text-gray-500">
                            <svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-width="1.75" stroke-linejoin="round" class="w-3.5 h-3.5" stroke="currentColor">
    <use xlink:href="https://aninexus.to/static/sprite/sprite.svg#trending"></use>
</svg>
                            <div class="text-xs">16-Aufrufe</div>
                        </div>
                    </a>
                                    <a href="https://aninexus.to/movie/suzume" class="py-1.5 block">
                        <div class="text-gray-500 dark:text-gray-400 text-sm hover:underline hover:text-white line-clamp-1">Suzume</div>
                        <div class="flex items-center gap-x-2 text-gray-400 dark:text-gray-500">
                            <svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-width="1.75" stroke-linejoin="round" class="w-3.5 h-3.5" stroke="currentColor">
    <use xlink:href="https://aninexus.to/static/sprite/sprite.svg#trending"></use>
</svg>
                            <div class="text-xs">16-Aufrufe</div>
                        </div>
                    </a>
                                    <a href="https://aninexus.to/tv-show/the-iceblade-sorcerer-shall-rule-the-world" class="py-1.5 block">
                        <div class="text-gray-500 dark:text-gray-400 text-sm hover:underline hover:text-white line-clamp-1">The Iceblade Sorcerer Shall Rule the World</div>
                        <div class="flex items-center gap-x-2 text-gray-400 dark:text-gray-500">
                            <svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-width="1.75" stroke-linejoin="round" class="w-3.5 h-3.5" stroke="currentColor">
    <use xlink:href="https://aninexus.to/static/sprite/sprite.svg#trending"></use>
</svg>
                            <div class="text-xs">14-Aufrufe</div>
                        </div>
                    </a>
                                    <a href="https://aninexus.to/tv-show/studio-apartment-good-lighting-angel-included" class="py-1.5 block">
                        <div class="text-gray-500 dark:text-gray-400 text-sm hover:underline hover:text-white line-clamp-1">Studio Apartment, Good Lighting, Angel Included</div>
                        <div class="flex items-center gap-x-2 text-gray-400 dark:text-gray-500">
                            <svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-width="1.75" stroke-linejoin="round" class="w-3.5 h-3.5" stroke="currentColor">
    <use xlink:href="https://aninexus.to/static/sprite/sprite.svg#trending"></use>
</svg>
                            <div class="text-xs">12-Aufrufe</div>
                        </div>
                    </a>
                                    <a href="https://aninexus.to/tv-show/seirei-gensouki-spirit-chronicles" class="py-1.5 block">
                        <div class="text-gray-500 dark:text-gray-400 text-sm hover:underline hover:text-white line-clamp-1">Seirei Gensouki: Spirit Chronicles</div>
                        <div class="flex items-center gap-x-2 text-gray-400 dark:text-gray-500">
                            <svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-width="1.75" stroke-linejoin="round" class="w-3.5 h-3.5" stroke="currentColor">
    <use xlink:href="https://aninexus.to/static/sprite/sprite.svg#trending"></use>
</svg>
                            <div class="text-xs">12-Aufrufe</div>
                        </div>
                    </a>
                            </div>
                    </div>
</aside>
                        <div class="">
                <div class="flex-1 lg:ml-64 rtl:lg:ml-o rtl:lg:mr-64" :class="compactToggle ? 'lg:!ml-0 rtl:lg:!ml-0 rtl:lg:!mr-0' : ''">
                        <div x-data="{selectedStream:'0',trailerOpen:false,iframeSrc: '',downloadOpen:false}">
        <div class="container">
            <div wire:snapshot="{&quot;data&quot;:{&quot;cover&quot;:&quot;https:\/\/image.tmdb.org\/t\/p\/w1280_and_h720_bestv2\/w4NHQXOhfPuXsH8DqUAZCfr1kfS.jpg&quot;,&quot;listing&quot;:[null,{&quot;class&quot;:&quot;App\\Models\\PostEpisode&quot;,&quot;key&quot;:473,&quot;s&quot;:&quot;mdl&quot;}],&quot;videos&quot;:[[[{&quot;label&quot;:&quot;GerSub&quot;,&quot;lang&quot;:&quot;GerSub&quot;,&quot;type&quot;:&quot;embed&quot;,&quot;link&quot;:&quot;https:\/\/aninexus.to\/embed\/1763&quot;},{&quot;s&quot;:&quot;arr&quot;}],[{&quot;label&quot;:&quot;GerSub&quot;,&quot;lang&quot;:&quot;GerSub&quot;,&quot;type&quot;:&quot;embed&quot;,&quot;link&quot;:&quot;https:\/\/aninexus.to\/embed\/1764&quot;},{&quot;s&quot;:&quot;arr&quot;}]],{&quot;s&quot;:&quot;arr&quot;}],&quot;isPreloader&quot;:true},&quot;memo&quot;:{&quot;id&quot;:&quot;NpwN4nGEk9ZaYI42MZgb&quot;,&quot;name&quot;:&quot;watch-component&quot;,&quot;path&quot;:&quot;episode\/the-do-over-damsel-conquers-the-dragon-emperor\/1-1&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;de&quot;},&quot;checksum&quot;:&quot;cb8820c4f9fe00f4f9ca6f6780ffa8affb7d039a9a339e7fd2f6a4322db91549&quot;}" wire:effects="[]" wire:id="NpwN4nGEk9ZaYI42MZgb" class="mb-6" x-data="{stream:'0'}">
    <!--[if BLOCK]><![endif]-->        <!--[if BLOCK]><![endif]-->            <div class="aspect-video relative before:absolute transition before:inset-0 before:bg-gradient-to-b before:from-gray-950 before:to-transparent before:z-10">
                <div class="absolute inset-0 before:absolute before:right-0 before:top-0 before:bottom-0 before:w-1/5 before:bg-gradient-to-l before:from-gray-950 before:to-transparent after:absolute after:left-0 after:top-0 after:bottom-0 after:w-1/2 after:bg-gradient-to-r after:from-gray-950 after:to-transparent z-10"></div>
                <img src="https://image.tmdb.org/t/p/w1280_and_h720_bestv2/w4NHQXOhfPuXsH8DqUAZCfr1kfS.jpg" class="absolute h-full w-full object-cover">
                <div class="flex absolute left-1/2 top-1/2 -translate-x-1/2 z-20 -translate-y-1/2 h-16 w-16 lg:w-24 lg:h-24 items-center justify-center hover:scale-110 cursor-pointer rounded-full bg-gray-300/25 text-white transition" wire:click="watching">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="lg:h-9 lg:w-9 w-6 h-6 translate-x-0.5">
                        <path d="M6.3 2.841A1.5 1.5 0 004 4.11V15.89a1.5 1.5 0 002.3 1.269l9.344-5.89a1.5 1.5 0 000-2.538L6.3 2.84z"></path>
                    </svg>
                </div>
            </div>
        <!--[if ENDBLOCK]><![endif]-->
    <!--[if ENDBLOCK]><![endif]-->
</div>
            <!-- Weiter / Letzte Button -->
            <div class="flex justify-between mb-4">
                                    <div></div>
                                                    <a href="https://aninexus.to/episode/the-do-over-damsel-conquers-the-dragon-emperor/1-2" class="flex transition items-center px-3 py-2.5 space-x-4 line-clamp-1 text-gray-400 text-sm bg-primary-500/10 hover:text-primary-500 hover:bg-primary-500/10 rounded-md">
                        <div class="min-w-[90px] font-medium">Next EP: #2</div>
                    </a>
                            </div>
            <div id="mal-sync"></div>
            <script id="syncData" type="application/json">
            {
                "page": "episode",
                "name": "The Do-Over Damsel Conquers the Dragon Emperor",
                "anime_id": 33,
                "mal_id": 55150,
                "series_url": "https://aninexus.to/tv-show/the-do-over-damsel-conquers-the-dragon-emperor",
                                "next_episode_url": "https://aninexus.to/episode/the-do-over-damsel-conquers-the-dragon-emperor/1-2",
                                "episode": 1,
                "selector_position": "#mal-sync"
            }
            </script>
            <div class="flex lg:hidden gap-x-8">

                <div class="max-w-[6rem] w-full mx-auto">
                    <div class="aspect-[2/3] relative rounded-md transition overflow-hidden cursor-pointer ">
                        <img src="https://image.tmdb.org/t/p/w300/w4NHQXOhfPuXsH8DqUAZCfr1kfS.jpg" class="absolute  h-full w-full object-cover">
                    </div>
                </div>
                <div class="flex-1">
                    <h3 class="text-xl tracking-tighter font-semibold text-gray-100 line-clamp-1">The Do-Over Damsel Conquers the Dragon Emperor</h3>

                    <div class="flex items-center text-gray-400 dark:text-gray-400 text-xs mt-3 space-x-4">
                                                    <span class="bg-gray-500/50 backdrop-blur-lg text-gray-200 text-xxs font-semibold tracking-wide py-0.5 px-1.5 rounded">HD</span>
                                                                                                    <span>2024</span>
                                                <span class="hidden lg:block">Veröffentlicht am, vor 1 Monat</span>
                    </div>
                                            <button class="inline-flex whitespace-nowrap gap-x-3 items-center justify-center px-6 py-3.5 text-sm rounded-base font-[450] disabled:opacity-50 disabled:pointer-events-none transition border bg-white text-gray-700 shadow-sm align-middle hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-white focus:ring-primary-600 transition-all text-sm dark:bg-gray-800 dark:hover:bg-gray-700 dark:hover:border-gray-700 dark:border-gray-800 dark:text-gray-300 dark:hover:text-white dark:focus:ring-offset-gray-800  mt-3" type="button" @click="trailerOpen = true;iframeSrc = 'https://www.youtube.com/embed/n5zMbsLvrJY'">
        Trailer ansehen
    </button>
                                    </div>
            </div>
                        <div class="lg:flex gap-6 xl:gap-12 relative">
                <div class="max-w-[16rem] w-full mx-auto hidden lg:block">
                    <div class="aspect-[2/3] relative rounded-md transition overflow-hidden cursor-pointer ">
                        <img src="https://image.tmdb.org/t/p/w300/w4NHQXOhfPuXsH8DqUAZCfr1kfS.jpg" class="absolute  h-full w-full object-cover">
                    </div>
                                            <button class="inline-flex whitespace-nowrap gap-x-3 items-center justify-center px-6 py-3.5 text-sm rounded-base font-[450] disabled:opacity-50 disabled:pointer-events-none transition border bg-white text-gray-700 shadow-sm align-middle hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-white focus:ring-primary-600 transition-all text-sm dark:bg-gray-800 dark:hover:bg-gray-700 dark:hover:border-gray-700 dark:border-gray-800 dark:text-gray-300 dark:hover:text-white dark:focus:ring-offset-gray-800 w-full mt-4" type="button" @click="trailerOpen = true;iframeSrc = 'https://www.youtube.com/embed/n5zMbsLvrJY'">
        Trailer ansehen
    </button>
                                    </div>
                <div class="flex-1">
                    <h2 class="text-sm tracking-tighter font-medium text-gray-400 line-clamp-1 before:content-['#'] hidden lg:block"><a href="https://aninexus.to/tv-show/the-do-over-damsel-conquers-the-dragon-emperor" class="hover:underline">The Do-Over Damsel Conquers the Dragon Emperor</a></h2>
                    <h1 class="text-3xl tracking-tighter font-semibold text-gray-100 line-clamp-1 hidden lg:block">Beim Versuch, dem Verderben zu entkommen, hielt ich um die Hand meines größten Feindes an <span class="text-xl text-gray-300 ml-2 before:content-['#']">1 Season 1 Episode</span></h1>
                    <div class="hidden lg:flex items-center text-gray-400 dark:text-gray-400 text-xs mt-3 space-x-4">
                                                                            <span>24 Min.</span>
                                                                            <span>2024</span>
                                                <span class="hidden lg:block">Veröffentlicht am, vor 1 Monat</span>
                    </div>
                    <div class="flex items-center gap-6 my-5">

                        <div class="flex relative w-10 h-10 items-center justify-center text-white ">
                            <span class="text-xs">8.3</span>
                            <svg x="0px" y="0px" viewBox="0 0 36 36" class="absolute -inset-0 text-amber-400 bg-amber-400/20 w-10 h-10 rounded-full">
                                <circle fill="none" stroke="currentColor" stroke-width="3" cx="18" cy="18" r="16" stroke-dasharray="83 100" stroke-linecap="round" stroke-dashoffset="0" transform="rotate(-90 18 18)"></circle>
                            </svg>
                        </div>

                        <div class="flex flex-1 items-center gap-x-1">
                            <button wire:snapshot="{&quot;data&quot;:{&quot;model&quot;:[null,{&quot;class&quot;:&quot;App\\Models\\Post&quot;,&quot;key&quot;:22,&quot;s&quot;:&quot;mdl&quot;}],&quot;isWatchlist&quot;:false},&quot;memo&quot;:{&quot;id&quot;:&quot;C0hkTBgjnfYpEkn6ei2K&quot;,&quot;name&quot;:&quot;watchlist-component&quot;,&quot;path&quot;:&quot;episode\/the-do-over-damsel-conquers-the-dragon-emperor\/1-1&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;de&quot;},&quot;checksum&quot;:&quot;a02efc3d5572745cdac648ad0b849c5b73916c3c59c132a5170ff350e28c1ba3&quot;}" wire:effects="[]" wire:id="C0hkTBgjnfYpEkn6ei2K" class="w-10 h-10 rounded-full text-gray-500 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-gray-200 flex items-center justify-center  tooltip" data-tippy-content="Zur Watchlist hinzufügen" wire:click.debounce.200ms="watchlist" wire:loading.attr="disabled" @click="event.preventDefault();">
    <svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-width="1.75" stroke-linejoin="round" class="w-5 h-5" stroke="currentColor">
    <use xlink:href="https://aninexus.to/static/sprite/sprite.svg#library-add"></use>
</svg>
</button>
                            <div wire:snapshot="{&quot;data&quot;:{&quot;model&quot;:[null,{&quot;class&quot;:&quot;App\\Models\\PostEpisode&quot;,&quot;key&quot;:473,&quot;s&quot;:&quot;mdl&quot;}],&quot;type&quot;:null,&quot;description&quot;:null,&quot;reportModal&quot;:false},&quot;memo&quot;:{&quot;id&quot;:&quot;CCqE3Hyx8WddTlt3KN0T&quot;,&quot;name&quot;:&quot;report-component&quot;,&quot;path&quot;:&quot;episode\/the-do-over-damsel-conquers-the-dragon-emperor\/1-1&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;de&quot;},&quot;checksum&quot;:&quot;05033cef41798b6324592d882dbc1a0ef2e062a258a3e73b49502852957d5030&quot;}" wire:effects="[]" wire:id="CCqE3Hyx8WddTlt3KN0T" x-data="{reportModal:window.Livewire.find('CCqE3Hyx8WddTlt3KN0T').entangle('reportModal').live}">
    <!--[if BLOCK]><![endif]-->        <a href="https://aninexus.to/login" class="w-10 h-10 rounded-full text-gray-500 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-gray-200 flex items-center justify-center">
            <svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-width="1.75" stroke-linejoin="round" class="w-5 h-5" fill="currentColor">
    <use xlink:href="https://aninexus.to/static/sprite/sprite.svg#report"></use>
</svg>
        </a>
    <!--[if ENDBLOCK]><![endif]-->
</div>
                            <div class="mx-6 hidden lg:block"></div>
                            <div wire:snapshot="{&quot;data&quot;:{&quot;model&quot;:[null,{&quot;class&quot;:&quot;App\\Models\\PostEpisode&quot;,&quot;key&quot;:473,&quot;s&quot;:&quot;mdl&quot;}],&quot;reaction&quot;:null,&quot;isReaction&quot;:null},&quot;memo&quot;:{&quot;id&quot;:&quot;3voeaobIAxESK8Vv7JCT&quot;,&quot;name&quot;:&quot;reaction-component&quot;,&quot;path&quot;:&quot;episode\/the-do-over-damsel-conquers-the-dragon-emperor\/1-1&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;de&quot;},&quot;checksum&quot;:&quot;ea02800c9f2cd2fe2abf0179d22b9e19e5cb587cdb04ac68ad7f8a81cce54dbf&quot;}" wire:effects="[]" wire:id="3voeaobIAxESK8Vv7JCT" class="flex items-center gap-x-1">
    <button id="like" class="px-4 h-10 rounded-full order-first lg:order-none gap-2 mr-3 lg:mr-0 bg-gray-50 hover:bg-gray-700 hover:text-white dark:bg-gray-800 text-gray-500 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white flex items-center justify-center  " wire:click="reactionButton('like')" wire:loading.attr="disabled">
        <svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-width="1.75" stroke-linejoin="round" class="w-4 h-4" fill="currentColor" stroke="none">
    <use xlink:href="https://aninexus.to/static/sprite/sprite.svg#like"></use>
</svg>
        <span class="text-xs opacity-70 min-w-[10px]">0</span>
    </button>
    <button id="dislike" class="w-10 h-10 rounded-full order-first lg:order-none  mr-2 lg:mr-0 lg:ml-2 bg-gray-50 hover:bg-gray-700 hover:text-white dark:bg-gray-800 text-gray-500 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white flex items-center justify-center  " wire:click="reactionButton('dislike')" wire:loading.attr="disabled">
        <svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-width="1.75" stroke-linejoin="round" class="w-4 h-4" fill="currentColor" stroke="none">
    <use xlink:href="https://aninexus.to/static/sprite/sprite.svg#dislike"></use>
</svg>
    </button>
</div>
                        </div>
                    </div>
                    <p class="text-x text-gray-400 mt-3">Verraten von ihrem ehemaligen Verlobten Gerald und dazu verurteilt, hingerichtet zu werden, blickt Jill schon dem Tod ins Auge, als sie plötzlich in die Zeit vor sechs Jahren zurückversetzt wird; just an den Abend, an dem Gerald ihr den Heiratsantrag machte. Dies will sie nun unbedingt verhindern …</p>
                    <div class="my-6 space-y-2 text-sm tracking-tighter">
                                                    <div class="grid sm:flex gap-x-3">
                                <div class="min-w-[150px] max-w-[200px] text-gray-500">
                                    Land
                                </div>
                                <div class="font-medium text-gray-800 dark:text-gray-300">
                                    <a href="https://aninexus.to/country/japan" class="hover:underline">Japan</a>
                                </div>
                            </div>
                                                                            <div class="grid sm:flex gap-x-3">
                                <div class="min-w-[150px] max-w-[200px] text-gray-500">
                                    Genre
                                </div>
                                <div class="font-medium text-gray-800 dark:text-gray-300">
                                                                            <a href="https://aninexus.to/genre/adventure" class="not-last-child-after inline-block mr-1 after:content-[','] last:mr-0 last:after:hidden hover:underline">Adventure</a>
                                                                            <a href="https://aninexus.to/genre/romance" class="not-last-child-after inline-block mr-1 after:content-[','] last:mr-0 last:after:hidden hover:underline">Romance</a>
                                                                    </div>
                            </div>
                                                                            <div class="grid sm:flex gap-x-3">
                                <div class="min-w-[150px] max-w-[200px] text-gray-500">
                                    Veröffentlicht
                                </div>
                                <div class="font-medium text-gray-800 dark:text-gray-400">
                                    09 Okt, 2024
                                </div>
                            </div>
                                                                    </div>
                                        <div class="flex flex-wrap gap-2 mt-5 mb-6">
                        <a class="bg-gray-100 hover:bg-primary-500 hover:text-white dark:hover:bg-gray-700 dark:hover:text-white dark:bg-gray-800 dark:border-gray-800 dark:text-gray-300/80 text-xs py-2 px-3.5 rounded-lg" href="https://aninexus.to/tag/romance">romance</a>
            <a class="bg-gray-100 hover:bg-primary-500 hover:text-white dark:hover:bg-gray-700 dark:hover:text-white dark:bg-gray-800 dark:border-gray-800 dark:text-gray-300/80 text-xs py-2 px-3.5 rounded-lg" href="https://aninexus.to/tag/shoujo">shoujo</a>
            <a class="bg-gray-100 hover:bg-primary-500 hover:text-white dark:hover:bg-gray-700 dark:hover:text-white dark:bg-gray-800 dark:border-gray-800 dark:text-gray-300/80 text-xs py-2 px-3.5 rounded-lg" href="https://aninexus.to/tag/based-on-light-novel">based on light novel</a>
                        </div>

                    <div class="pb-6">
                        <div wire:snapshot="{&quot;data&quot;:{&quot;model&quot;:[null,{&quot;class&quot;:&quot;App\\Models\\PostEpisode&quot;,&quot;key&quot;:473,&quot;s&quot;:&quot;mdl&quot;}],&quot;orderable&quot;:&quot;id&quot;,&quot;users&quot;:[[],{&quot;s&quot;:&quot;arr&quot;}],&quot;showDropdown&quot;:false,&quot;newCommentState&quot;:[{&quot;body&quot;:&quot;&quot;},{&quot;s&quot;:&quot;arr&quot;}],&quot;paginators&quot;:[{&quot;page&quot;:1},{&quot;s&quot;:&quot;arr&quot;}]},&quot;memo&quot;:{&quot;id&quot;:&quot;DM3Iji5PaESD8I3jr1aM&quot;,&quot;name&quot;:&quot;comments&quot;,&quot;path&quot;:&quot;episode\/the-do-over-damsel-conquers-the-dragon-emperor\/1-1&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;de&quot;},&quot;checksum&quot;:&quot;158608c11e9f5d5f14af916ee808ab21ad9b5093384292c673e0a4338487d8b6&quot;}" wire:effects="{&quot;url&quot;:{&quot;paginators.page&quot;:{&quot;as&quot;:&quot;page&quot;,&quot;use&quot;:&quot;push&quot;,&quot;alwaysShow&quot;:false,&quot;except&quot;:null}},&quot;listeners&quot;:[&quot;refresh&quot;]}" wire:id="DM3Iji5PaESD8I3jr1aM">
    <!--[if BLOCK]><![endif]-->        <div class="flex items-center text-sm gap-x-2 mb-4">
            <div class="relative flex gap-x-3">
                <button class="text-gray-400 hover:text-gray-200 hover:underline cursor-pointer !text-gray-100" wire:click="orderablex('id')">Neueste</button>
                <button class="text-gray-400 hover:text-gray-200 hover:underline cursor-pointer " wire:click="orderablex('likes_count')">Am meisten geliked</button>
            </div>
            <div class="py-2 flex items-center text-xs text-gray-400 uppercase before:flex-[1_1_0%] before:border-t before:border-gray-200 before:mx-5 dark:text-gray-500 dark:before:border-gray-900 dark:after:border-gray-600 flex-1"></div>
            <div class="text-gray-500">0 Kommentare</div>
        </div>
        <!--[if BLOCK]><![endif]-->            <a href="https://aninexus.to/login" class="inline-flex whitespace-nowrap gap-x-3 items-center justify-center px-6 py-3.5 text-sm rounded-base font-[450] disabled:opacity-50 disabled:pointer-events-none transition border bg-white text-gray-700 shadow-sm align-middle hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-white focus:ring-primary-600 transition-all text-sm dark:bg-gray-800 dark:hover:bg-gray-700 dark:hover:border-gray-700 dark:border-gray-800 dark:text-gray-300 dark:hover:text-white dark:focus:ring-offset-gray-800 !rounded-full !px-6 !py-2.5 mb-6 !text-sm" type="button">
        Log in to comment !
    </a>
        <!--[if ENDBLOCK]><![endif]-->
        <!--[if BLOCK]><![endif]-->            <p class="text-gray-500">Noch keine Kommentare!</p>
        <!--[if ENDBLOCK]><![endif]-->
    <!--[if ENDBLOCK]><![endif]-->
</div>
                    </div>
                </div>
                <div class="max-w-sm w-full">
                    <div wire:snapshot="{&quot;data&quot;:{&quot;model&quot;:[null,{&quot;class&quot;:&quot;App\\Models\\Post&quot;,&quot;key&quot;:22,&quot;s&quot;:&quot;mdl&quot;}],&quot;type&quot;:&quot;episode&quot;,&quot;seasonId&quot;:33,&quot;selectEpisode&quot;:&quot;1&quot;,&quot;openSort&quot;:null,&quot;episode_number&quot;:null,&quot;season_number&quot;:&quot;1&quot;,&quot;noMal&quot;:true},&quot;memo&quot;:{&quot;id&quot;:&quot;yIllwjZYEWh6Q3agDFGp&quot;,&quot;name&quot;:&quot;season-component&quot;,&quot;path&quot;:&quot;episode\/the-do-over-damsel-conquers-the-dragon-emperor\/1-1&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;de&quot;},&quot;checksum&quot;:&quot;257f85754be86afe738e661d879d47d36bbbca996a7fd7826305042ee4713e0f&quot;}" wire:effects="[]" wire:id="yIllwjZYEWh6Q3agDFGp">
    <!--[if BLOCK]><![endif]--><!--[if ENDBLOCK]><![endif]-->
    <!--[if BLOCK]><![endif]-->        <div class="bg-gray-900 h-full max-h-[30rem] rounded-lg" x-data="{ openSort: window.Livewire.find('yIllwjZYEWh6Q3agDFGp').entangle('openSort').live }">
            <div class="relative">
                <button class="h-14 w-full px-5 flex items-center justify-start rtl:justify-end gap-5 text-sm text-gray-500 dark:bg-gray-900 rounded-md hover:bg-gray-50 dark:text-gray-300 dark:hover:text-gray-200 tracking-tight font-medium" @click.prevent="openSort = !openSort" :aria-expanded="openSort" aria-expanded="null">
                    <svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-width="1.75" stroke-linejoin="round" class="w-4 h-4" stroke="currentColor">
    <use xlink:href="https://aninexus.to/static/sprite/sprite.svg#sort-2"></use>
</svg>
                    <div class="flex-1 text-left rtl:text-right">Staffel 1</div>
                </button>
                <div class="origin-top-right z-40 absolute inset-x-0 top-full mt-1 bg-white py-3 w-48 px-3 right-auto rtl:right-0 rtl:left-auto left-0 rounded-lg shadow-lg border border-gray-100 text-sm dark:bg-gray-800 dark:border-gray-800" @click.outside="openSort = false" @keydown.escape.window="openSort = false" x-show="openSort" x-transition:enter="transition ease-out duration-200 transform" x-transition:enter-start="opacity-0 -trangray-y-2" x-transition:enter-end="opacity-100 trangray-y-0" x-transition:leave="transition ease-out duration-200" x-transition:leave-start="opacity-100" x-transition:leave-end="opacity-0" style="display: none;">
                                        <div class="flex flex-col">
                        <!--[if BLOCK]><![endif]-->                            <!--[if BLOCK]><![endif]-->                                                                <button class="w-full py-2.5 px-4 inline-flex items-center gap-5 text-sm text-center text-gray-500 rounded-lg hover:bg-gray-50 relative  dark:text-gray-400 dark:hover:text-gray-300 dark:hover:bg-gray-800/50" wire:click="updateSeason('33')">
                                    Staffel 1
                                    <div class="flex gap-1">
                                        <!--[if BLOCK]><![endif]--><!--[if ENDBLOCK]><![endif]-->
                                        <!--[if BLOCK]><![endif]-->                                            <img src="https://i.ibb.co/1JGrNnG/japanese-german.png" class="w-6 h-4 mr-1" alt="Japan Flag">
                                        <!--[if ENDBLOCK]><![endif]-->
                                    </div>
                                </button>
                            <!--[if ENDBLOCK]><![endif]-->
                        <!--[if ENDBLOCK]><![endif]-->
                    </div>
                </div>
            </div>

            <div class="overflow-y-auto scrollbar-y h-[calc(30rem-7rem)] scrollbar scrollbar-thumb-gray-100 dark:scrollbar-thumb-white/10 scrollbar-thin scrollbar-track-transparent">
                <div class="mx-3">
                    <!--[if BLOCK]><![endif]-->                        <a href="https://aninexus.to/episode/the-do-over-damsel-conquers-the-dragon-emperor/1-1" class="flex transition items-center px-3 py-2.5 space-x-4 line-clamp-1 text-gray-400 text-sm hover:text-primary-500 hover:bg-primary-500/10 
                            
                           rounded-md text-primary-500 bg-primary-500/10 !opacity-100">
                            <div class="min-w-[90px] font-medium">Episode #1</div>
                            <div class="line-clamp-1">Beim Versuch, dem Verderben zu entkommen, hielt ich um die Hand meines größten Feindes an</div>
                        </a>
                                            <a href="https://aninexus.to/episode/the-do-over-damsel-conquers-the-dragon-emperor/1-2" class="flex transition items-center px-3 py-2.5 space-x-4 line-clamp-1 text-gray-400 text-sm hover:text-primary-500 hover:bg-primary-500/10 
                            
                           rounded-md ">
                            <div class="min-w-[90px] font-medium">Episode #2</div>
                            <div class="line-clamp-1">Da ich bereits weiß, was für eine Tragödie sich ereignen wird,  will ich versuchen, sie abzuwenden</div>
                        </a>
                                            <a href="https://aninexus.to/episode/the-do-over-damsel-conquers-the-dragon-emperor/1-3" class="flex transition items-center px-3 py-2.5 space-x-4 line-clamp-1 text-gray-400 text-sm hover:text-primary-500 hover:bg-primary-500/10 
                            
                           rounded-md ">
                            <div class="min-w-[90px] font-medium">Episode #3</div>
                            <div class="line-clamp-1">Die Lage ist hoffnungslos, aber als Schildmaid des Kriegsgotts werde ich einfach auf die handfeste Art triumphieren</div>
                        </a>
                                            <a href="https://aninexus.to/episode/the-do-over-damsel-conquers-the-dragon-emperor/1-4" class="flex transition items-center px-3 py-2.5 space-x-4 line-clamp-1 text-gray-400 text-sm hover:text-primary-500 hover:bg-primary-500/10 
                            
                           rounded-md ">
                            <div class="min-w-[90px] font-medium">Episode #4</div>
                            <div class="line-clamp-1">Weil mein Verlobter ernsthaft versucht, mich zu verführen, weiß ich einfach nicht, wie ich damit umgehen soll</div>
                        </a>
                                            <a href="https://aninexus.to/episode/the-do-over-damsel-conquers-the-dragon-emperor/1-5" class="flex transition items-center px-3 py-2.5 space-x-4 line-clamp-1 text-gray-400 text-sm hover:text-primary-500 hover:bg-primary-500/10 
                            
                           rounded-md ">
                            <div class="min-w-[90px] font-medium">Episode #5</div>
                            <div class="line-clamp-1">Als ich versuchte, die Wahrheit zu erfahren, kam es zum Streit,  und nun kann ich nichts mehr ausrichten</div>
                        </a>
                                            <a href="https://aninexus.to/episode/the-do-over-damsel-conquers-the-dragon-emperor/1-6" class="flex transition items-center px-3 py-2.5 space-x-4 line-clamp-1 text-gray-400 text-sm hover:text-primary-500 hover:bg-primary-500/10 
                            
                           rounded-md ">
                            <div class="min-w-[90px] font-medium">Episode #6</div>
                            <div class="line-clamp-1">Da sich jemand an meinen Verlobten heranmachen will, gedenke ich, diese Person zu töten, bevor sie mich umbringt</div>
                        </a>
                                            <a href="https://aninexus.to/episode/the-do-over-damsel-conquers-the-dragon-emperor/1-7" class="flex transition items-center px-3 py-2.5 space-x-4 line-clamp-1 text-gray-400 text-sm hover:text-primary-500 hover:bg-primary-500/10 
                            
                           rounded-md ">
                            <div class="min-w-[90px] font-medium">Episode #7</div>
                            <div class="line-clamp-1">Episode 7</div>
                        </a>
                                            <a href="https://aninexus.to/episode/the-do-over-damsel-conquers-the-dragon-emperor/1-8" class="flex transition items-center px-3 py-2.5 space-x-4 line-clamp-1 text-gray-400 text-sm hover:text-primary-500 hover:bg-primary-500/10 
                            
                           rounded-md ">
                            <div class="min-w-[90px] font-medium">Episode #8</div>
                            <div class="line-clamp-1">Die Drachen können mich, die Drachenkaiserin, nicht leiden,  darum will ich es irgendwie schaffen, ihre Gunst zu gewinnen</div>
                        </a>
                                            <a href="https://aninexus.to/episode/the-do-over-damsel-conquers-the-dragon-emperor/1-9" class="flex transition items-center px-3 py-2.5 space-x-4 line-clamp-1 text-gray-400 text-sm hover:text-primary-500 hover:bg-primary-500/10 
                            
                           rounded-md ">
                            <div class="min-w-[90px] font-medium">Episode #9</div>
                            <div class="line-clamp-1">Fast wäre es zu einem Blutbad mit meinem Verlobten gekommen.  Nein … Es wird wohl tatsächlich zum Blutbad kommen</div>
                        </a>
                    <!--[if ENDBLOCK]><![endif]-->
                </div>
            </div>
            <div class="flex items-center gap-x-6 h-14 px-6">
                <div class="flex-1 text-gray-400/50 text-sm">
                    Go to episode
                </div>
                <form method="post" class="bg-gray-800 rounded-lg relative text-white flex items-center py-2 px-3" wire:submit="goto">
                    <input type="hidden" name="_token" value="jemUMRSUaNtsOC0hXd7Qv9fvgpH35bDWxsnDxRfN" autocomplete="off">                    <input type="number" required="" wire:model.live="episode_number" class="bg-transparent w-8 text-center py-0.5 px-1 text-sm border-0 focus:ring-0" value="">
                    <button type="submit" class="text-gray-300">
                        <svg aria-hidden="true" class="w-4 h-4 rotate-90" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                            <path d="M10.894 2.553a1 1 0 00-1.788 0l-7 14a1 1 0 001.169 1.409l-5-1.429A1 1 0 009 15.571V11a1 1 0 112 0v4.571a1 1 0 00.725.962l5 1.428a1 1 0 001.17-1.408l-7-14z"></path>
                        </svg>
                    </button>
                </form>
            </div>
        </div>
    <!--[if ENDBLOCK]><![endif]-->
</div>
                </div>
            </div>
                        </div>
        <div class="custom-container">
            <div class="py-6 lg:py-14">
                <div class="flex flex-col lg:flex-row lg:items-center mb-6">
                    <h3 class="text-lg xl:text-xl dark:text-white font-semibold lg:text-left rtl:text-right capitalize flex-1">Empfohlen für dich</h3>
                </div>
                <div class="grid grid-cols-2 xl:grid-cols-6 2xl:grid-cols-8 gap-6">
                                            <div class="relative group overflow-hidden">
    <a href="https://aninexus.to/tv-show/16bit-sensation-another-layer" class="aspect-poster relative transition overflow-hidden cursor-pointer before:absolute before:-inset-px before:bg-gradient-to-b  before:to-gray-950/[.4] before:from-gray-950 before:-m-px before:z-[1] before:opacity-0 group-hover:before:opacity-100 block">

        <picture>
                <img src="https://image.tmdb.org/t/p/w300/9WQiKz1N9rwZJK4Kr7eMrAXEHae.jpg" data-src="https://image.tmdb.org/t/p/w300/9WQiKz1N9rwZJK4Kr7eMrAXEHae.jpg" alt="16bit Sensation: Another Layer" class="absolute h-full w-full object-cover rounded-md ls-is-cached lazyloaded" width="300" height="450">
            </picture>

        <div class="absolute right-3 top-3 w-10 h-10 items-center justify-center text-white z-20 hidden group-hover:flex">

            <span class="text-xs">6.2</span>
            <svg x="0px" y="0px" viewBox="0 0 36 36" class="absolute -inset-0 text-amber-400 bg-amber-400/20 w-10 h-10 rounded-full">
                <circle fill="none" stroke="currentColor" stroke-width="3" cx="18" cy="18" r="16" stroke-dasharray="62 100" stroke-linecap="round" stroke-dashoffset="0" transform="rotate(-90 18 18)"></circle>
            </svg>
        </div>
        <div class="hidden group-hover:flex absolute left-1/2 top-1/2 -translate-x-1/2 z-20 -translate-y-1/2 h-14 w-14 items-center justify-center cursor-pointer rounded-full bg-white/50 text-white transition">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="hi-mini hi-play h-5 w-5 translate-x-0.5">
                <path d="M6.3 2.841A1.5 1.5 0 004 4.11V15.89a1.5 1.5 0 002.3 1.269l9.344-5.89a1.5 1.5 0 000-2.538L6.3 2.84z"></path>
            </svg>
        </div>
    </a>
        <div class="pt-4 transition">
        <div class="text-xs text-white/50 gap-x-3 mb-0.5">
                                        <span>2023</span>
                    </div>
        <h3 class="text-sm tracking-tighter font-medium text-gray-300 line-clamp-1">16bit Sensation: Another Layer</h3>
        <div class="text-xs text-white/50 gap-x-3 mt-1 flex items-center">
                            <span>Adventure</span>
                        <span class="text-xxs bg-gray-800 rounded py-0.5 px-1.5 text-gray-300 !ml-auto">Serie</span>
        </div>
    </div>
    </div>
                                            <div class="relative group overflow-hidden">
    <a href="https://aninexus.to/tv-show/a-centaur-s-life" class="aspect-poster relative transition overflow-hidden cursor-pointer before:absolute before:-inset-px before:bg-gradient-to-b  before:to-gray-950/[.4] before:from-gray-950 before:-m-px before:z-[1] before:opacity-0 group-hover:before:opacity-100 block">

        <picture>
                <img src="https://image.tmdb.org/t/p/w300/wmyH7pdCo1RAqlD1rXwmFH9x8OO.jpg" data-src="https://image.tmdb.org/t/p/w300/wmyH7pdCo1RAqlD1rXwmFH9x8OO.jpg" alt="A Centaur's Life" class="absolute h-full w-full object-cover rounded-md lazyloaded" width="300" height="450">
            </picture>

        <div class="absolute right-3 top-3 w-10 h-10 items-center justify-center text-white z-20 hidden group-hover:flex">

            <span class="text-xs">7.3</span>
            <svg x="0px" y="0px" viewBox="0 0 36 36" class="absolute -inset-0 text-amber-400 bg-amber-400/20 w-10 h-10 rounded-full">
                <circle fill="none" stroke="currentColor" stroke-width="3" cx="18" cy="18" r="16" stroke-dasharray="73 100" stroke-linecap="round" stroke-dashoffset="0" transform="rotate(-90 18 18)"></circle>
            </svg>
        </div>
        <div class="hidden group-hover:flex absolute left-1/2 top-1/2 -translate-x-1/2 z-20 -translate-y-1/2 h-14 w-14 items-center justify-center cursor-pointer rounded-full bg-white/50 text-white transition">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="hi-mini hi-play h-5 w-5 translate-x-0.5">
                <path d="M6.3 2.841A1.5 1.5 0 004 4.11V15.89a1.5 1.5 0 002.3 1.269l9.344-5.89a1.5 1.5 0 000-2.538L6.3 2.84z"></path>
            </svg>
        </div>
    </a>
        <div class="pt-4 transition">
        <div class="text-xs text-white/50 gap-x-3 mb-0.5">
                                        <span>2017</span>
                    </div>
        <h3 class="text-sm tracking-tighter font-medium text-gray-300 line-clamp-1">A Centaur's Life</h3>
        <div class="text-xs text-white/50 gap-x-3 mt-1 flex items-center">
                            <span>Adventure</span>
                        <span class="text-xxs bg-gray-800 rounded py-0.5 px-1.5 text-gray-300 !ml-auto">Serie</span>
        </div>
    </div>
    </div>
                                            <div class="relative group overflow-hidden">
    <a href="https://aninexus.to/tv-show/absolute-duo" class="aspect-poster relative transition overflow-hidden cursor-pointer before:absolute before:-inset-px before:bg-gradient-to-b  before:to-gray-950/[.4] before:from-gray-950 before:-m-px before:z-[1] before:opacity-0 group-hover:before:opacity-100 block">

        <picture>
                <img src="https://image.tmdb.org/t/p/w300/lbtRPdxPYwhzflTQRmQpKrskzJm.jpg" data-src="https://image.tmdb.org/t/p/w300/lbtRPdxPYwhzflTQRmQpKrskzJm.jpg" alt="Absolute Duo" class="absolute h-full w-full object-cover rounded-md lazyloaded" width="300" height="450">
            </picture>

        <div class="absolute right-3 top-3 w-10 h-10 items-center justify-center text-white z-20 hidden group-hover:flex">

            <span class="text-xs">7.8</span>
            <svg x="0px" y="0px" viewBox="0 0 36 36" class="absolute -inset-0 text-amber-400 bg-amber-400/20 w-10 h-10 rounded-full">
                <circle fill="none" stroke="currentColor" stroke-width="3" cx="18" cy="18" r="16" stroke-dasharray="78 100" stroke-linecap="round" stroke-dashoffset="0" transform="rotate(-90 18 18)"></circle>
            </svg>
        </div>
        <div class="hidden group-hover:flex absolute left-1/2 top-1/2 -translate-x-1/2 z-20 -translate-y-1/2 h-14 w-14 items-center justify-center cursor-pointer rounded-full bg-white/50 text-white transition">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="hi-mini hi-play h-5 w-5 translate-x-0.5">
                <path d="M6.3 2.841A1.5 1.5 0 004 4.11V15.89a1.5 1.5 0 002.3 1.269l9.344-5.89a1.5 1.5 0 000-2.538L6.3 2.84z"></path>
            </svg>
        </div>
    </a>
        <div class="pt-4 transition">
        <div class="text-xs text-white/50 gap-x-3 mb-0.5">
                                        <span>2015</span>
                    </div>
        <h3 class="text-sm tracking-tighter font-medium text-gray-300 line-clamp-1">Absolute Duo</h3>
        <div class="text-xs text-white/50 gap-x-3 mt-1 flex items-center">
                            <span>Action</span>
                        <span class="text-xxs bg-gray-800 rounded py-0.5 px-1.5 text-gray-300 !ml-auto">Serie</span>
        </div>
    </div>
    </div>
                                            <div class="relative group overflow-hidden">
    <a href="https://aninexus.to/tv-show/rick-and-morty-the-anime" class="aspect-poster relative transition overflow-hidden cursor-pointer before:absolute before:-inset-px before:bg-gradient-to-b  before:to-gray-950/[.4] before:from-gray-950 before:-m-px before:z-[1] before:opacity-0 group-hover:before:opacity-100 block">

        <picture>
                <img src="https://image.tmdb.org/t/p/w300/bGf8CzFaqdTgINZOq4zvK7H0UFH.jpg" data-src="https://image.tmdb.org/t/p/w300/bGf8CzFaqdTgINZOq4zvK7H0UFH.jpg" alt="Rick and Morty: The Anime" class="absolute h-full w-full object-cover rounded-md lazyloaded" width="300" height="450">
            </picture>

        <div class="absolute right-3 top-3 w-10 h-10 items-center justify-center text-white z-20 hidden group-hover:flex">

            <span class="text-xs">5.9</span>
            <svg x="0px" y="0px" viewBox="0 0 36 36" class="absolute -inset-0 text-amber-400 bg-amber-400/20 w-10 h-10 rounded-full">
                <circle fill="none" stroke="currentColor" stroke-width="3" cx="18" cy="18" r="16" stroke-dasharray="59 100" stroke-linecap="round" stroke-dashoffset="0" transform="rotate(-90 18 18)"></circle>
            </svg>
        </div>
        <div class="hidden group-hover:flex absolute left-1/2 top-1/2 -translate-x-1/2 z-20 -translate-y-1/2 h-14 w-14 items-center justify-center cursor-pointer rounded-full bg-white/50 text-white transition">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="hi-mini hi-play h-5 w-5 translate-x-0.5">
                <path d="M6.3 2.841A1.5 1.5 0 004 4.11V15.89a1.5 1.5 0 002.3 1.269l9.344-5.89a1.5 1.5 0 000-2.538L6.3 2.84z"></path>
            </svg>
        </div>
    </a>
        <div class="pt-4 transition">
        <div class="text-xs text-white/50 gap-x-3 mb-0.5">
                                        <span>2024</span>
                    </div>
        <h3 class="text-sm tracking-tighter font-medium text-gray-300 line-clamp-1">Rick and Morty: The Anime</h3>
        <div class="text-xs text-white/50 gap-x-3 mt-1 flex items-center">
                            <span>Action</span>
                        <span class="text-xxs bg-gray-800 rounded py-0.5 px-1.5 text-gray-300 !ml-auto">Serie</span>
        </div>
    </div>
    </div>
                                            <div class="relative group overflow-hidden">
    <a href="https://aninexus.to/tv-show/a-nobody-s-way-up-to-an-exploration-hero" class="aspect-poster relative transition overflow-hidden cursor-pointer before:absolute before:-inset-px before:bg-gradient-to-b  before:to-gray-950/[.4] before:from-gray-950 before:-m-px before:z-[1] before:opacity-0 group-hover:before:opacity-100 block">

        <picture>
                <img src="https://image.tmdb.org/t/p/w300/hY8rN6dkGHp8LC1fE24cqeFoSfJ.jpg" data-src="https://image.tmdb.org/t/p/w300/hY8rN6dkGHp8LC1fE24cqeFoSfJ.jpg" alt="A Nobody's Way Up to an Exploration Hero" class="absolute h-full w-full object-cover rounded-md lazyloaded" width="300" height="450">
            </picture>

        <div class="absolute right-3 top-3 w-10 h-10 items-center justify-center text-white z-20 hidden group-hover:flex">

            <span class="text-xs">6.0</span>
            <svg x="0px" y="0px" viewBox="0 0 36 36" class="absolute -inset-0 text-amber-400 bg-amber-400/20 w-10 h-10 rounded-full">
                <circle fill="none" stroke="currentColor" stroke-width="3" cx="18" cy="18" r="16" stroke-dasharray="60 100" stroke-linecap="round" stroke-dashoffset="0" transform="rotate(-90 18 18)"></circle>
            </svg>
        </div>
        <div class="hidden group-hover:flex absolute left-1/2 top-1/2 -translate-x-1/2 z-20 -translate-y-1/2 h-14 w-14 items-center justify-center cursor-pointer rounded-full bg-white/50 text-white transition">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="hi-mini hi-play h-5 w-5 translate-x-0.5">
                <path d="M6.3 2.841A1.5 1.5 0 004 4.11V15.89a1.5 1.5 0 002.3 1.269l9.344-5.89a1.5 1.5 0 000-2.538L6.3 2.84z"></path>
            </svg>
        </div>
    </a>
        <div class="pt-4 transition">
        <div class="text-xs text-white/50 gap-x-3 mb-0.5">
                                        <span>2024</span>
                    </div>
        <h3 class="text-sm tracking-tighter font-medium text-gray-300 line-clamp-1">A Nobody's Way Up to an Exploration Hero</h3>
        <div class="text-xs text-white/50 gap-x-3 mt-1 flex items-center">
                            <span>Adventure</span>
                        <span class="text-xxs bg-gray-800 rounded py-0.5 px-1.5 text-gray-300 !ml-auto">Serie</span>
        </div>
    </div>
    </div>
                                            <div class="relative group overflow-hidden">
    <a href="https://aninexus.to/tv-show/train-to-the-end-of-the-world" class="aspect-poster relative transition overflow-hidden cursor-pointer before:absolute before:-inset-px before:bg-gradient-to-b  before:to-gray-950/[.4] before:from-gray-950 before:-m-px before:z-[1] before:opacity-0 group-hover:before:opacity-100 block">

        <picture>
                <img src="https://image.tmdb.org/t/p/w300/jS0XEpSCBgWWpiiX6LjmrNt805K.jpg" data-src="https://image.tmdb.org/t/p/w300/jS0XEpSCBgWWpiiX6LjmrNt805K.jpg" alt="Train to the End of the World" class="absolute h-full w-full object-cover rounded-md lazyloaded" width="300" height="450">
            </picture>

        <div class="absolute right-3 top-3 w-10 h-10 items-center justify-center text-white z-20 hidden group-hover:flex">

            <span class="text-xs">6.9</span>
            <svg x="0px" y="0px" viewBox="0 0 36 36" class="absolute -inset-0 text-amber-400 bg-amber-400/20 w-10 h-10 rounded-full">
                <circle fill="none" stroke="currentColor" stroke-width="3" cx="18" cy="18" r="16" stroke-dasharray="69 100" stroke-linecap="round" stroke-dashoffset="0" transform="rotate(-90 18 18)"></circle>
            </svg>
        </div>
        <div class="hidden group-hover:flex absolute left-1/2 top-1/2 -translate-x-1/2 z-20 -translate-y-1/2 h-14 w-14 items-center justify-center cursor-pointer rounded-full bg-white/50 text-white transition">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="hi-mini hi-play h-5 w-5 translate-x-0.5">
                <path d="M6.3 2.841A1.5 1.5 0 004 4.11V15.89a1.5 1.5 0 002.3 1.269l9.344-5.89a1.5 1.5 0 000-2.538L6.3 2.84z"></path>
            </svg>
        </div>
    </a>
        <div class="pt-4 transition">
        <div class="text-xs text-white/50 gap-x-3 mb-0.5">
                                        <span>2024</span>
                    </div>
        <h3 class="text-sm tracking-tighter font-medium text-gray-300 line-clamp-1">Train to the End of the World</h3>
        <div class="text-xs text-white/50 gap-x-3 mt-1 flex items-center">
                            <span>Adventure</span>
                        <span class="text-xxs bg-gray-800 rounded py-0.5 px-1.5 text-gray-300 !ml-auto">Serie</span>
        </div>
    </div>
    </div>
                                            <div class="relative group overflow-hidden">
    <a href="https://aninexus.to/tv-show/konosuba-an-explosion-on-this-wonderful-world" class="aspect-poster relative transition overflow-hidden cursor-pointer before:absolute before:-inset-px before:bg-gradient-to-b  before:to-gray-950/[.4] before:from-gray-950 before:-m-px before:z-[1] before:opacity-0 group-hover:before:opacity-100 block">

        <picture>
                <img src="https://image.tmdb.org/t/p/w300/xcPT8KuiYAKvhCRaYa9SOtiEWSO.jpg" data-src="https://image.tmdb.org/t/p/w300/xcPT8KuiYAKvhCRaYa9SOtiEWSO.jpg" alt="KonoSuba – An Explosion on This Wonderful World!" class="absolute h-full w-full object-cover rounded-md lazyloaded" width="300" height="450">
            </picture>

        <div class="absolute right-3 top-3 w-10 h-10 items-center justify-center text-white z-20 hidden group-hover:flex">

            <span class="text-xs">7.3</span>
            <svg x="0px" y="0px" viewBox="0 0 36 36" class="absolute -inset-0 text-amber-400 bg-amber-400/20 w-10 h-10 rounded-full">
                <circle fill="none" stroke="currentColor" stroke-width="3" cx="18" cy="18" r="16" stroke-dasharray="73 100" stroke-linecap="round" stroke-dashoffset="0" transform="rotate(-90 18 18)"></circle>
            </svg>
        </div>
        <div class="hidden group-hover:flex absolute left-1/2 top-1/2 -translate-x-1/2 z-20 -translate-y-1/2 h-14 w-14 items-center justify-center cursor-pointer rounded-full bg-white/50 text-white transition">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="hi-mini hi-play h-5 w-5 translate-x-0.5">
                <path d="M6.3 2.841A1.5 1.5 0 004 4.11V15.89a1.5 1.5 0 002.3 1.269l9.344-5.89a1.5 1.5 0 000-2.538L6.3 2.84z"></path>
            </svg>
        </div>
    </a>
        <div class="pt-4 transition">
        <div class="text-xs text-white/50 gap-x-3 mb-0.5">
                                        <span>2023</span>
                    </div>
        <h3 class="text-sm tracking-tighter font-medium text-gray-300 line-clamp-1">KonoSuba – An Explosion on This Wonderful World!</h3>
        <div class="text-xs text-white/50 gap-x-3 mt-1 flex items-center">
                            <span>Adventure</span>
                        <span class="text-xxs bg-gray-800 rounded py-0.5 px-1.5 text-gray-300 !ml-auto">Serie</span>
        </div>
    </div>
    </div>
                                            <div class="relative group overflow-hidden">
    <a href="https://aninexus.to/tv-show/dahlia-in-bloom-crafting-a-fresh-start-with-magical-tools" class="aspect-poster relative transition overflow-hidden cursor-pointer before:absolute before:-inset-px before:bg-gradient-to-b  before:to-gray-950/[.4] before:from-gray-950 before:-m-px before:z-[1] before:opacity-0 group-hover:before:opacity-100 block">

        <picture>
                <img src="https://image.tmdb.org/t/p/w300/m7Kh9um0MCzIz81ZVTB1dxFtaGT.jpg" data-src="https://image.tmdb.org/t/p/w300/m7Kh9um0MCzIz81ZVTB1dxFtaGT.jpg" alt="Dahlia in Bloom: Crafting a Fresh Start with Magical Tools" class="absolute h-full w-full object-cover rounded-md lazyloaded" width="300" height="450">
            </picture>

        <div class="absolute right-3 top-3 w-10 h-10 items-center justify-center text-white z-20 hidden group-hover:flex">

            <span class="text-xs">7.3</span>
            <svg x="0px" y="0px" viewBox="0 0 36 36" class="absolute -inset-0 text-amber-400 bg-amber-400/20 w-10 h-10 rounded-full">
                <circle fill="none" stroke="currentColor" stroke-width="3" cx="18" cy="18" r="16" stroke-dasharray="73 100" stroke-linecap="round" stroke-dashoffset="0" transform="rotate(-90 18 18)"></circle>
            </svg>
        </div>
        <div class="hidden group-hover:flex absolute left-1/2 top-1/2 -translate-x-1/2 z-20 -translate-y-1/2 h-14 w-14 items-center justify-center cursor-pointer rounded-full bg-white/50 text-white transition">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="hi-mini hi-play h-5 w-5 translate-x-0.5">
                <path d="M6.3 2.841A1.5 1.5 0 004 4.11V15.89a1.5 1.5 0 002.3 1.269l9.344-5.89a1.5 1.5 0 000-2.538L6.3 2.84z"></path>
            </svg>
        </div>
    </a>
        <div class="pt-4 transition">
        <div class="text-xs text-white/50 gap-x-3 mb-0.5">
                                        <span>2024</span>
                    </div>
        <h3 class="text-sm tracking-tighter font-medium text-gray-300 line-clamp-1">Dahlia in Bloom: Crafting a Fresh Start with Magical Tools</h3>
        <div class="text-xs text-white/50 gap-x-3 mt-1 flex items-center">
                            <span>Adventure</span>
                        <span class="text-xxs bg-gray-800 rounded py-0.5 px-1.5 text-gray-300 !ml-auto">Serie</span>
        </div>
    </div>
    </div>
                                    </div>
            </div>
        </div>
        <div class="fixed inset-0 bg-gray-800/40 backdrop-blur-md z-50 transition-opacity" x-show="trailerOpen" x-transition:enter="transition ease-out duration-200" x-transition:enter-start="opacity-0" x-transition:enter-end="opacity-100" x-transition:leave="transition ease-out duration-100" x-transition:leave-start="opacity-100" x-transition:leave-end="opacity-0" aria-hidden="true" style="display: none;"></div>
        <!-- Modal dialog -->
        <div id="trailer-modal" class="fixed inset-0 z-50 overflow-hidden flex items-start top-20 justify-center px-4 sm:px-6" role="dialog" aria-modal="true" x-show="trailerOpen" x-transition:enter="transition ease-in-out duration-200" x-transition:enter-start="opacity-0 trangray-y-4" x-transition:enter-end="opacity-100 trangray-y-0" x-transition:leave="transition ease-in-out duration-200" x-transition:leave-start="opacity-100 trangray-y-0" x-transition:leave-end="opacity-0 trangray-y-4" style="display: none;">
            <div class="bg-white dark:bg-gray-900 overflow-auto max-w-6xl w-full rounded-xl" @click.outside="trailerOpen = false; iframeSrc = ''" @keydown.escape.window="trailerOpen = false; iframeSrc = ''">

                <iframe :src="iframeSrc" title="Trailer embed" frameborder="0" class="w-full aspect-video" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" src=""></iframe>

            </div>
        </div>

        <div class="fixed inset-0 bg-gray-800/40 backdrop-blur-md z-50 transition-opacity" x-show="downloadOpen" x-transition:enter="transition ease-out duration-200" x-transition:enter-start="opacity-0" x-transition:enter-end="opacity-100" x-transition:leave="transition ease-out duration-100" x-transition:leave-start="opacity-100" x-transition:leave-end="opacity-0" aria-hidden="true" style="display: none;"></div>
        <!-- Modal dialog -->
        <div id="download-modal" class="fixed inset-0 z-50 overflow-hidden flex items-center top-20 justify-center px-4 sm:px-6" role="dialog" aria-modal="true" x-show="downloadOpen" x-transition:enter="transition ease-in-out duration-200" x-transition:enter-start="opacity-0 trangray-y-4" x-transition:enter-end="opacity-100 trangray-y-0" x-transition:leave="transition ease-in-out duration-200" x-transition:leave-start="opacity-100 trangray-y-0" x-transition:leave-end="opacity-0 trangray-y-4" style="display: none;">
            <div class="bg-white dark:bg-gray-900 overflow-auto max-w-xl w-full rounded-xl p-6 lg:p-10" @click.outside="downloadOpen = false" @keydown.escape.window="downloadOpen = false">

                <h3 class="text-lg xl:text-xl dark:text-white font-semibold mb-3 text-center capitalize flex-1">Download Link</h3>
                <ul class="flex flex-col divide-y divide-gray-200 dark:divide-gray-800 max-h-[60vh] overflow-auto scrollbar-thumb-gray-700 scrollbar-track-transparent -mr-4 pr-4 scrollbar-rounded-lg scrollbar-thin">
                                    </ul>
            </div>
        </div>
    </div>

    
                </div>
                <div class="lg:ml-64 rtl:lg:ml-o rtl:lg:mr-64 mt-auto" :class="compactToggle ? 'lg:!ml-0 rtl:lg:!ml-0 rtl:lg:!mr-0' : ''">
                    <footer class="w-full lg:py-10 custom-container mt-auto">
    <!-- Grid -->
    <div class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-12 gap-10 mb-10">
        <div class="col-span-full hidden lg:col-span-4 lg:block">
            <a class="flex-none text-xl text-gray-700 font-semibold dark:text-white" href="https://aninexus.to" aria-label="Brand">

                                    <img src="https://aninexus.to/static/img/logo-1732824705.png" class="w-auto h-10" alt="Aninexus">
                            </a>
            <p class="mt-5 text-sm text-gray-400 leading-6 max-w-sm w-full">Aninexus deine Seite für kostenlose Animes in 1080p</p>
            <!-- Language Dropdown -->
            <div class="text-white ml-auto inline-flex relative mt-4" x-data="{ open: false }">

                <button class="inline-flex whitespace-nowrap gap-x-3 items-center justify-center px-6 py-3.5 text-sm rounded-base font-[450] disabled:opacity-50 disabled:pointer-events-none transition border bg-white text-gray-700 shadow-sm align-middle hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-white focus:ring-primary-600 transition-all text-sm dark:bg-gray-800 dark:hover:bg-gray-700 dark:hover:border-gray-700 dark:border-gray-800 dark:text-gray-300 dark:hover:text-white dark:focus:ring-offset-gray-800 !py-2.5 tracking-tighter !rounded-full !font-normal !px-5 gap-x-3" type="button" @click.prevent="open = !open" aria-expanded="false">
        <span>Deutschland</span>
                    <svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-width="1.75" stroke-linejoin="round" class="w-4 h-4" stroke="currentColor">
    <use xlink:href="https://aninexus.to/static/sprite/sprite.svg#swap"></use>
</svg>
    </button>
                <div class="z-10 absolute inset-x-0 w-52 bottom-full mb-3 bg-white p-3 left-0 rounded-lg shadow-lg border border-gray-100 text-sm dark:bg-gray-800 dark:border-gray-800" @click.outside="open = false" @keydown.escape.window="open = false" x-show="open" x-transition:enter="transition ease-out duration-200 transform" x-transition:enter-start="opacity-0 -trangray-y-2" x-transition:enter-end="opacity-100 trangray-y-0" x-transition:leave="transition ease-out duration-200" x-transition:leave-start="opacity-100" x-transition:leave-end="opacity-0" style="display: none;">
                    <div class="w-full max-w-xs">
                        <ul class="grid grid-cols-1">
                                                            <li>
                                    <a href="https://aninexus.to/lang/en" class="text-gray-500 dark:text-gray-300 hover:text-primary-500 dark:hover:text-white dark:hover:bg-gray-700/50 py-2.5 px-3 rounded-lg flex gap-x-3 items-center tracking-tighter">
                                        <img src="https://aninexus.to/static/img/flags/en.svg" class="h-4 w-auto rounded-full">
                                        <span>English</span>
                                    </a>
                                </li>
                                                            <li>
                                    <a href="https://aninexus.to/lang/tr" class="text-gray-500 dark:text-gray-300 hover:text-primary-500 dark:hover:text-white dark:hover:bg-gray-700/50 py-2.5 px-3 rounded-lg flex gap-x-3 items-center tracking-tighter">
                                        <img src="https://aninexus.to/static/img/flags/tr.svg" class="h-4 w-auto rounded-full">
                                        <span>Türkçe</span>
                                    </a>
                                </li>
                                                            <li>
                                    <a href="https://aninexus.to/lang/de" class="text-gray-500 dark:text-gray-300 hover:text-primary-500 dark:hover:text-white dark:hover:bg-gray-700/50 py-2.5 px-3 rounded-lg flex gap-x-3 items-center tracking-tighter">
                                        <img src="https://aninexus.to/static/img/flags/de.svg" class="h-4 w-auto rounded-full">
                                        <span>Deutschland</span>
                                    </a>
                                </li>
                                                            <li>
                                    <a href="https://aninexus.to/lang/fr" class="text-gray-500 dark:text-gray-300 hover:text-primary-500 dark:hover:text-white dark:hover:bg-gray-700/50 py-2.5 px-3 rounded-lg flex gap-x-3 items-center tracking-tighter">
                                        <img src="https://aninexus.to/static/img/flags/fr.svg" class="h-4 w-auto rounded-full">
                                        <span>France</span>
                                    </a>
                                </li>
                                                            <li>
                                    <a href="https://aninexus.to/lang/ja" class="text-gray-500 dark:text-gray-300 hover:text-primary-500 dark:hover:text-white dark:hover:bg-gray-700/50 py-2.5 px-3 rounded-lg flex gap-x-3 items-center tracking-tighter">
                                        <img src="https://aninexus.to/static/img/flags/ja.svg" class="h-4 w-auto rounded-full">
                                        <span>日本</span>
                                    </a>
                                </li>
                                                            <li>
                                    <a href="https://aninexus.to/lang/ar" class="text-gray-500 dark:text-gray-300 hover:text-primary-500 dark:hover:text-white dark:hover:bg-gray-700/50 py-2.5 px-3 rounded-lg flex gap-x-3 items-center tracking-tighter">
                                        <img src="https://aninexus.to/static/img/flags/ar.svg" class="h-4 w-auto rounded-full">
                                        <span>عربي</span>
                                    </a>
                                </li>
                                                    </ul>
                    </div>
                </div>
            </div>
            <p class="mt-3 text-xs sm:text-sm text-gray-500 dark:text-gray-500">
                © 2024 Aninexus. All rights reserved.</p>

            <!-- Social Brands -->
            <div class="space-x-1 mt-3">
                                                                            </div>
            <!-- End Social Brands -->
        </div>
        <!-- End Col -->
        <div class=" lg:col-span-3">
            <h4 class="text-sm font-medium text-gray-700 dark:text-gray-100">Durchsuchen</h4>
            <div class="mt-4 grid grid-cols-2 gap-3 text-sm">
                                                                                                                            <a href="https://aninexus.to/trending" class="inline-flex gap-x-2 text-gray-600 hover:text-gray-800 hover:underline dark:text-gray-400 dark:hover:text-gray-200">
                                Im Trend
                            </a>
                                                                                                                                                                                                                                                <a href="https://hentai.aninexus.to" class="inline-flex gap-x-2 text-gray-600 hover:text-gray-800 hover:underline dark:text-gray-400 dark:hover:text-gray-200">
                                Hentais
                            </a>
                                                                                                                                    <a href="https://aninexus.to/request" class="inline-flex gap-x-2 text-gray-600 hover:text-gray-800 hover:underline dark:text-gray-400 dark:hover:text-gray-200">
                                Anfrage
                            </a>
                                                                                                                                    <a href="https://aninexus.to/blog" class="inline-flex gap-x-2 text-gray-600 hover:text-gray-800 hover:underline dark:text-gray-400 dark:hover:text-gray-200">
                                Changelog
                            </a>
                                                                                                                                    <a href="https://discord.gg/msvAajT58A" class="inline-flex gap-x-2 text-gray-600 hover:text-gray-800 hover:underline dark:text-gray-400 dark:hover:text-gray-200">
                                Discord
                            </a>
                                                            
            </div>
        </div>
        <!-- End Col -->

        <div class=" lg:col-span-3">
            <h4 class="text-sm font-medium text-gray-700 dark:text-gray-100">Über</h4>
            <div class="mt-4 grid grid-cols-2 gap-3 text-sm">
                                    <a href="https://aninexus.to/page/terms-of-service" class="inline-flex gap-x-2 text-gray-600 hover:text-gray-800 hover:underline dark:text-gray-400 dark:hover:text-gray-200">
                        Terms of service
                    </a>
                                    <a href="https://aninexus.to/page/dmca" class="inline-flex gap-x-2 text-gray-600 hover:text-gray-800 hover:underline dark:text-gray-400 dark:hover:text-gray-200">
                        DMCA
                    </a>
                                    <a href="https://aninexus.to/page/privacy-policy" class="inline-flex gap-x-2 text-gray-600 hover:text-gray-800 hover:underline dark:text-gray-400 dark:hover:text-gray-200">
                        Privacy policy
                    </a>
                                    <a href="https://aninexus.to/page/cookie-policy" class="inline-flex gap-x-2 text-gray-600 hover:text-gray-800 hover:underline dark:text-gray-400 dark:hover:text-gray-200">
                        Cookie policy
                    </a>
                            </div>
        </div>

    </div>
    <!-- End Grid -->

</footer>
                </div>
            </div>


<div wire:snapshot="{&quot;data&quot;:{&quot;q&quot;:&quot;&quot;},&quot;memo&quot;:{&quot;id&quot;:&quot;y6etsx0yTtR8I5FTiuIr&quot;,&quot;name&quot;:&quot;search-component&quot;,&quot;path&quot;:&quot;episode\/the-do-over-damsel-conquers-the-dragon-emperor\/1-1&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;de&quot;},&quot;checksum&quot;:&quot;1feee3e294f5667c89397a864c72a5a15c801d9417a934933662e35d01e35008&quot;}" wire:effects="[]" wire:id="y6etsx0yTtR8I5FTiuIr">

    <div class="fixed inset-0 bg-gray-950/30 backdrop-blur-sm z-50 transition-opacity" x-show="searchOpen" x-transition:enter="transition ease-out duration-200" x-transition:enter-start="opacity-0" x-transition:enter-end="opacity-100" x-transition:leave="transition ease-out duration-100" x-transition:leave-start="opacity-100" x-transition:leave-end="opacity-0" aria-hidden="true" style="display: none;"></div>
    <!-- Modal dialog -->
    <div id="search-modal" class="fixed inset-0 z-50 overflow-hidden flex items-start top-20 mb-4 justify-center px-4 sm:px-6" role="dialog" aria-modal="true" x-show="searchOpen" x-transition:enter="transition ease-in-out duration-200" x-transition:enter-start="opacity-0 trangray-y-4" x-transition:enter-end="opacity-100 trangray-y-0" x-transition:leave="transition ease-in-out duration-200" x-transition:leave-start="opacity-100 trangray-y-0" x-transition:leave-end="opacity-0 trangray-y-4" style="display: none;" x-init="$watch('searchOpen', value =&gt; { if (value) $nextTick(() =&gt; { $refs.searchInput?.focus(); }); })">
        <div class="bg-white overflow-auto max-w-3xl w-full max-h-full rounded-xl px-2 py-1" @click.outside="searchOpen = false" @keydown.escape.window="searchOpen = false">
            <!-- Search form -->
            <div class="relative">
                <label for="modal-search" class="sr-only">Search</label>
                <input id="modal-search" class="w-full border-0 focus:ring-transparent bg-transparent placeholder-gray-400/50 text-sm appearance-none py-3 pl-14 pr-4" type="search" placeholder="Suche .." x-ref="searchInput" x-init="$nextTick(() =&gt; { if ($el.offsetParent !== null) $el.focus(); })" name="q" wire:model.live.debounce.500ms="q">
                <button class="absolute inset-0 right-auto group" type="submit" aria-label="Search">
                    <svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-width="1.75" stroke-linejoin="round" class="w-5 h-5 shrink-0 fill-current text-gray-400 group-hover:text-gray-500 ml-4 mr-4">
    <use xlink:href="https://aninexus.to/static/sprite/sprite.svg#search"></use>
</svg>
                </button>
                <div role="status" class="absolute right-0 top-1/2 -translate-y-1/2" wire:loading="">
                    <svg aria-hidden="true" class="inline w-6 h-6 mr-3 text-gray-200 animate-spin dark:text-gray-100 fill-primary-500" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor"></path>
                        <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill"></path>
                    </svg>
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
            <!--[if BLOCK]><![endif]--><!--[if ENDBLOCK]><![endif]-->
        </div>
    </div>
</div>
<script src="https://aninexus.to/static/js/lazysizes.js"></script>
<div wire:snapshot="{&quot;data&quot;:{&quot;message&quot;:null,&quot;showToastr&quot;:false},&quot;memo&quot;:{&quot;id&quot;:&quot;IDLd2yAyX4SWX6jJwiPT&quot;,&quot;name&quot;:&quot;notify-component&quot;,&quot;path&quot;:&quot;episode\/the-do-over-damsel-conquers-the-dragon-emperor\/1-1&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;children&quot;:[],&quot;scripts&quot;:[],&quot;assets&quot;:[],&quot;errors&quot;:[],&quot;locale&quot;:&quot;de&quot;},&quot;checksum&quot;:&quot;26c8f73151fe9513680838649b3c2a0aeea8b2d88ab422eb13f127b3d5218f89&quot;}" wire:effects="{&quot;listeners&quot;:[&quot;show-toast&quot;]}" wire:id="IDLd2yAyX4SWX6jJwiPT" class="notify fixed bottom-0 right-0 flex items-center w-full max-w-sm justify-center px-6 py-8 pointer-events-none z-50">
    <div x-data="{ showToastr:false, countdown: 4000,intervalx:100 }" x-init="
            window.Livewire.find('IDLd2yAyX4SWX6jJwiPT').on('show-toast', () =&gt; {
                showToastr = true;
                countdown = 5000;
                intervalx = 100;
                const interval = setInterval(() =&gt; {
                    countdown = countdown - intervalx;
                    if (countdown === 0) {
                        showToastr = false;
                        clearInterval(interval);
                    }
                }, intervalx);
            });
         " x-show="showToastr" x-description="Notification panel, show/hide based on alert state." x-transition:enter="transform ease-out duration-300 transition" x-transition:enter-start="translate-y-2 opacity-0 sm:translate-y-0 sm:translate-x-2" x-transition:enter-end="translate-y-0 opacity-100 sm:translate-x-0" x-transition:leave="transition ease-in duration-100" x-transition:leave-start="opacity-100" x-transition:leave-end="opacity-0" class="flex items-center overflow-hidden relative w-full max-w-sm py-5 px-5 space-x-4 max-w-xs bg-gray-800 text-sm text-white rounded-md shadow-lg dark:bg-gray-700 pointer-events-auto" style="display: none;">
        <div class="bg-white/30 rounded-full transition-all duration-150 ease-linear absolute top-0 left-0" id="toast-timer" :style="{ height:`3px`,width: `${(100 * countdown) / 5000}%` }" style="height: 3px; width: 80%;">
        </div>
        <!--[if BLOCK]><![endif]--><!--[if ENDBLOCK]><![endif]-->
        <div class="ml-5 flex-shrink-0 flex">
            <button @click="showToastr = false;" class="inline-flex text-white/50 hover:text-white focus:outline-none focus:text-gray-500 transition ease-in-out duration-150">
                <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                </svg>
            </button>
        </div>
    </div>

</div>

        <script>



            function shareClick(event) {
                var $this = event.target,
                    dataType = $this.getAttribute('data-type'),
                    dataTitle = $this.getAttribute('data-title'),
                    dataMedia = $this.getAttribute('data-media'),
                    dataSef = $this.getAttribute('data-sef');

                switch (dataType) {
                    case 'facebook':
                        shareWindow('https://www.facebook.com/sharer/sharer.php?u=' + dataSef);
                        break;

                    case 'twitter':
                        shareWindow('https://twitter.com/intent/tweet?text=' + encodeURIComponent(dataTitle) + ' ' + encodeURIComponent(dataSef));
                        break;

                    case 'pinterest':
                        shareWindow('http://pinterest.com/pin/create/button/?url=' + encodeURIComponent(dataSef) + '&media=' + dataMedia + '&description=' + encodeURIComponent(dataTitle));
                        break;

                    case 'whatsapp':
                        shareWindow('whatsapp://send?text=' + encodeURIComponent(dataTitle) + ' ' + encodeURIComponent(dataSef));
                        break;

                    case 'telegram':
                        shareWindow('https://t.me/share/url?url=' + encodeURIComponent(dataSef) + ' ' + '&text=' + encodeURIComponent(dataTitle) + ' 🎮 ');
                        break;
                }

                function shareWindow(url) {
                    window.open(url, "_blank");
                }
            }
        </script>
    <script>
    function toastNotification() {
        return {
            show: true,
            init() {
                this.show = true
                var progressBarElem = document.getElementById("toast-timer");
                var interval_time = 100; // ms
                var duration = 5000; // ms
                var total_duration = duration; // Keeps track of the total duration
                var update_timer = setInterval(function () {

                        duration = duration - interval_time;
                        // Update the progress bar if there is one
                        if (progressBarElem !== null) {
                            progressBarElem.style.width = (100 * duration) / total_duration + "%";
                        }

                    if (duration <= 0) {
                        // Stop updating the timer
                        clearInterval(update_timer);
                    }
                }, interval_time);

                setTimeout(() => {
                    this.show = false
                }, 5000)
            }
        }
    }
</script>


</body></html>