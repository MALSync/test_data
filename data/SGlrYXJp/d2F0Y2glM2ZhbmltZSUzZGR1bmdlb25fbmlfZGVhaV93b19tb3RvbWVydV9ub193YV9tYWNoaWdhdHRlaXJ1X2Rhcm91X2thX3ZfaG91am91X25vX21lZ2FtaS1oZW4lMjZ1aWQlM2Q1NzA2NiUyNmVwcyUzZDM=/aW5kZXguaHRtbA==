<!DOCTYPE html><html prefix="og: http://ogp.me/ns#" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head>

<script type="text/javascript" src="https://hikari.gg/js/aclib.js"></script>

<script>
    aclib.runPop({zoneId: '9253542'});
</script>

<!-- Google tag (gtag.js) -->
<script async="" src="https://www.googletagmanager.com/gtag/js?id=G-H9487Q59WW"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-H9487Q59WW');
</script>


    <!-- FullCalendar CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.4.1/css/bootstrap.min.css" type="text/css"><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta2/css/all.min.css" type="text/css"><link href="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/6.1.4/index.global.min.css" rel="stylesheet">
    
    <!-- FullCalendar JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/6.1.4/index.global.min.js"></script><style>:root{--fc-small-font-size:.85em;--fc-page-bg-color:#fff;--fc-neutral-bg-color:hsla(0,0%,82%,.3);--fc-neutral-text-color:grey;--fc-border-color:#ddd;--fc-button-text-color:#fff;--fc-button-bg-color:#2c3e50;--fc-button-border-color:#2c3e50;--fc-button-hover-bg-color:#1e2b37;--fc-button-hover-border-color:#1a252f;--fc-button-active-bg-color:#1a252f;--fc-button-active-border-color:#151e27;--fc-event-bg-color:#3788d8;--fc-event-border-color:#3788d8;--fc-event-text-color:#fff;--fc-event-selected-overlay-color:rgba(0,0,0,.25);--fc-more-link-bg-color:#d0d0d0;--fc-more-link-text-color:inherit;--fc-event-resizer-thickness:8px;--fc-event-resizer-dot-total-width:8px;--fc-event-resizer-dot-border-width:1px;--fc-non-business-color:hsla(0,0%,84%,.3);--fc-bg-event-color:#8fdf82;--fc-bg-event-opacity:0.3;--fc-highlight-color:rgba(188,232,241,.3);--fc-today-bg-color:rgba(255,220,40,.15);--fc-now-indicator-color:red}.fc-not-allowed,.fc-not-allowed .fc-event{cursor:not-allowed}.fc-unselectable{-webkit-touch-callout:none;-webkit-tap-highlight-color:rgba(0,0,0,0);-webkit-user-select:none;-moz-user-select:none;user-select:none}.fc{display:flex;flex-direction:column;font-size:1em}.fc,.fc *,.fc :after,.fc :before{box-sizing:border-box}.fc table{border-collapse:collapse;border-spacing:0;font-size:1em}.fc th{text-align:center}.fc td,.fc th{padding:0;vertical-align:top}.fc a[data-navlink]{cursor:pointer}.fc a[data-navlink]:hover{text-decoration:underline}.fc-direction-ltr{direction:ltr;text-align:left}.fc-direction-rtl{direction:rtl;text-align:right}.fc-theme-standard td,.fc-theme-standard th{border:1px solid var(--fc-border-color)}.fc-liquid-hack td,.fc-liquid-hack th{position:relative}@font-face{font-family:fcicons;font-style:normal;font-weight:400;src:url("data:application/x-font-ttf;charset=utf-8;base64,AAEAAAALAIAAAwAwT1MvMg8SBfAAAAC8AAAAYGNtYXAXVtKNAAABHAAAAFRnYXNwAAAAEAAAAXAAAAAIZ2x5ZgYydxIAAAF4AAAFNGhlYWQUJ7cIAAAGrAAAADZoaGVhB20DzAAABuQAAAAkaG10eCIABhQAAAcIAAAALGxvY2ED4AU6AAAHNAAAABhtYXhwAA8AjAAAB0wAAAAgbmFtZXsr690AAAdsAAABhnBvc3QAAwAAAAAI9AAAACAAAwPAAZAABQAAApkCzAAAAI8CmQLMAAAB6wAzAQkAAAAAAAAAAAAAAAAAAAABEAAAAAAAAAAAAAAAAAAAAABAAADpBgPA/8AAQAPAAEAAAAABAAAAAAAAAAAAAAAgAAAAAAADAAAAAwAAABwAAQADAAAAHAADAAEAAAAcAAQAOAAAAAoACAACAAIAAQAg6Qb//f//AAAAAAAg6QD//f//AAH/4xcEAAMAAQAAAAAAAAAAAAAAAQAB//8ADwABAAAAAAAAAAAAAgAANzkBAAAAAAEAAAAAAAAAAAACAAA3OQEAAAAAAQAAAAAAAAAAAAIAADc5AQAAAAABAWIAjQKeAskAEwAAJSc3NjQnJiIHAQYUFwEWMjc2NCcCnuLiDQ0MJAz/AA0NAQAMJAwNDcni4gwjDQwM/wANIwz/AA0NDCMNAAAAAQFiAI0CngLJABMAACUBNjQnASYiBwYUHwEHBhQXFjI3AZ4BAA0N/wAMJAwNDeLiDQ0MJAyNAQAMIw0BAAwMDSMM4uINIwwNDQAAAAIA4gC3Ax4CngATACcAACUnNzY0JyYiDwEGFB8BFjI3NjQnISc3NjQnJiIPAQYUHwEWMjc2NCcB87e3DQ0MIw3VDQ3VDSMMDQ0BK7e3DQ0MJAzVDQ3VDCQMDQ3zuLcMJAwNDdUNIwzWDAwNIwy4twwkDA0N1Q0jDNYMDA0jDAAAAgDiALcDHgKeABMAJwAAJTc2NC8BJiIHBhQfAQcGFBcWMjchNzY0LwEmIgcGFB8BBwYUFxYyNwJJ1Q0N1Q0jDA0Nt7cNDQwjDf7V1Q0N1QwkDA0Nt7cNDQwkDLfWDCMN1Q0NDCQMt7gMIw0MDNYMIw3VDQ0MJAy3uAwjDQwMAAADAFUAAAOrA1UAMwBoAHcAABMiBgcOAQcOAQcOARURFBYXHgEXHgEXHgEzITI2Nz4BNz4BNz4BNRE0JicuAScuAScuASMFITIWFx4BFx4BFx4BFREUBgcOAQcOAQcOASMhIiYnLgEnLgEnLgE1ETQ2Nz4BNz4BNz4BMxMhMjY1NCYjISIGFRQWM9UNGAwLFQkJDgUFBQUFBQ4JCRULDBgNAlYNGAwLFQkJDgUFBQUFBQ4JCRULDBgN/aoCVgQIBAQHAwMFAQIBAQIBBQMDBwQECAT9qgQIBAQHAwMFAQIBAQIBBQMDBwQECASAAVYRGRkR/qoRGRkRA1UFBAUOCQkVDAsZDf2rDRkLDBUJCA4FBQUFBQUOCQgVDAsZDQJVDRkLDBUJCQ4FBAVVAgECBQMCBwQECAX9qwQJAwQHAwMFAQICAgIBBQMDBwQDCQQCVQUIBAQHAgMFAgEC/oAZEhEZGRESGQAAAAADAFUAAAOrA1UAMwBoAIkAABMiBgcOAQcOAQcOARURFBYXHgEXHgEXHgEzITI2Nz4BNz4BNz4BNRE0JicuAScuAScuASMFITIWFx4BFx4BFx4BFREUBgcOAQcOAQcOASMhIiYnLgEnLgEnLgE1ETQ2Nz4BNz4BNz4BMxMzFRQWMzI2PQEzMjY1NCYrATU0JiMiBh0BIyIGFRQWM9UNGAwLFQkJDgUFBQUFBQ4JCRULDBgNAlYNGAwLFQkJDgUFBQUFBQ4JCRULDBgN/aoCVgQIBAQHAwMFAQIBAQIBBQMDBwQECAT9qgQIBAQHAwMFAQIBAQIBBQMDBwQECASAgBkSEhmAERkZEYAZEhIZgBEZGREDVQUEBQ4JCRUMCxkN/asNGQsMFQkIDgUFBQUFBQ4JCBUMCxkNAlUNGQsMFQkJDgUEBVUCAQIFAwIHBAQIBf2rBAkDBAcDAwUBAgICAgEFAwMHBAMJBAJVBQgEBAcCAwUCAQL+gIASGRkSgBkSERmAEhkZEoAZERIZAAABAOIAjQMeAskAIAAAExcHBhQXFjI/ARcWMjc2NC8BNzY0JyYiDwEnJiIHBhQX4uLiDQ0MJAzi4gwkDA0N4uINDQwkDOLiDCQMDQ0CjeLiDSMMDQ3h4Q0NDCMN4uIMIw0MDOLiDAwNIwwAAAABAAAAAQAAa5n0y18PPPUACwQAAAAAANivOVsAAAAA2K85WwAAAAADqwNVAAAACAACAAAAAAAAAAEAAAPA/8AAAAQAAAAAAAOrAAEAAAAAAAAAAAAAAAAAAAALBAAAAAAAAAAAAAAAAgAAAAQAAWIEAAFiBAAA4gQAAOIEAABVBAAAVQQAAOIAAAAAAAoAFAAeAEQAagCqAOoBngJkApoAAQAAAAsAigADAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAA4ArgABAAAAAAABAAcAAAABAAAAAAACAAcAYAABAAAAAAADAAcANgABAAAAAAAEAAcAdQABAAAAAAAFAAsAFQABAAAAAAAGAAcASwABAAAAAAAKABoAigADAAEECQABAA4ABwADAAEECQACAA4AZwADAAEECQADAA4APQADAAEECQAEAA4AfAADAAEECQAFABYAIAADAAEECQAGAA4AUgADAAEECQAKADQApGZjaWNvbnMAZgBjAGkAYwBvAG4Ac1ZlcnNpb24gMS4wAFYAZQByAHMAaQBvAG4AIAAxAC4AMGZjaWNvbnMAZgBjAGkAYwBvAG4Ac2ZjaWNvbnMAZgBjAGkAYwBvAG4Ac1JlZ3VsYXIAUgBlAGcAdQBsAGEAcmZjaWNvbnMAZgBjAGkAYwBvAG4Ac0ZvbnQgZ2VuZXJhdGVkIGJ5IEljb01vb24uAEYAbwBuAHQAIABnAGUAbgBlAHIAYQB0AGUAZAAgAGIAeQAgAEkAYwBvAE0AbwBvAG4ALgAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=") format("truetype")}.fc-icon{speak:none;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:inline-block;font-family:fcicons!important;font-style:normal;font-variant:normal;font-weight:400;height:1em;line-height:1;text-align:center;text-transform:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;width:1em}.fc-icon-chevron-left:before{content:"\e900"}.fc-icon-chevron-right:before{content:"\e901"}.fc-icon-chevrons-left:before{content:"\e902"}.fc-icon-chevrons-right:before{content:"\e903"}.fc-icon-minus-square:before{content:"\e904"}.fc-icon-plus-square:before{content:"\e905"}.fc-icon-x:before{content:"\e906"}.fc .fc-button{border-radius:0;font-family:inherit;font-size:inherit;line-height:inherit;margin:0;overflow:visible;text-transform:none}.fc .fc-button:focus{outline:1px dotted;outline:5px auto -webkit-focus-ring-color}.fc .fc-button{-webkit-appearance:button}.fc .fc-button:not(:disabled){cursor:pointer}.fc .fc-button::-moz-focus-inner{border-style:none;padding:0}.fc .fc-button{background-color:transparent;border:1px solid transparent;border-radius:.25em;display:inline-block;font-size:1em;font-weight:400;line-height:1.5;padding:.4em .65em;text-align:center;-webkit-user-select:none;-moz-user-select:none;user-select:none;vertical-align:middle}.fc .fc-button:hover{text-decoration:none}.fc .fc-button:focus{box-shadow:0 0 0 .2rem rgba(44,62,80,.25);outline:0}.fc .fc-button:disabled{opacity:.65}.fc .fc-button-primary{background-color:var(--fc-button-bg-color);border-color:var(--fc-button-border-color);color:var(--fc-button-text-color)}.fc .fc-button-primary:hover{background-color:var(--fc-button-hover-bg-color);border-color:var(--fc-button-hover-border-color);color:var(--fc-button-text-color)}.fc .fc-button-primary:disabled{background-color:var(--fc-button-bg-color);border-color:var(--fc-button-border-color);color:var(--fc-button-text-color)}.fc .fc-button-primary:focus{box-shadow:0 0 0 .2rem rgba(76,91,106,.5)}.fc .fc-button-primary:not(:disabled).fc-button-active,.fc .fc-button-primary:not(:disabled):active{background-color:var(--fc-button-active-bg-color);border-color:var(--fc-button-active-border-color);color:var(--fc-button-text-color)}.fc .fc-button-primary:not(:disabled).fc-button-active:focus,.fc .fc-button-primary:not(:disabled):active:focus{box-shadow:0 0 0 .2rem rgba(76,91,106,.5)}.fc .fc-button .fc-icon{font-size:1.5em;vertical-align:middle}.fc .fc-button-group{display:inline-flex;position:relative;vertical-align:middle}.fc .fc-button-group>.fc-button{flex:1 1 auto;position:relative}.fc .fc-button-group>.fc-button.fc-button-active,.fc .fc-button-group>.fc-button:active,.fc .fc-button-group>.fc-button:focus,.fc .fc-button-group>.fc-button:hover{z-index:1}.fc-direction-ltr .fc-button-group>.fc-button:not(:first-child){border-bottom-left-radius:0;border-top-left-radius:0;margin-left:-1px}.fc-direction-ltr .fc-button-group>.fc-button:not(:last-child){border-bottom-right-radius:0;border-top-right-radius:0}.fc-direction-rtl .fc-button-group>.fc-button:not(:first-child){border-bottom-right-radius:0;border-top-right-radius:0;margin-right:-1px}.fc-direction-rtl .fc-button-group>.fc-button:not(:last-child){border-bottom-left-radius:0;border-top-left-radius:0}.fc .fc-toolbar{align-items:center;display:flex;justify-content:space-between}.fc .fc-toolbar.fc-header-toolbar{margin-bottom:1.5em}.fc .fc-toolbar.fc-footer-toolbar{margin-top:1.5em}.fc .fc-toolbar-title{font-size:1.75em;margin:0}.fc-direction-ltr .fc-toolbar>*>:not(:first-child){margin-left:.75em}.fc-direction-rtl .fc-toolbar>*>:not(:first-child){margin-right:.75em}.fc-direction-rtl .fc-toolbar-ltr{flex-direction:row-reverse}.fc .fc-scroller{-webkit-overflow-scrolling:touch;position:relative}.fc .fc-scroller-liquid{height:100%}.fc .fc-scroller-liquid-absolute{bottom:0;left:0;position:absolute;right:0;top:0}.fc .fc-scroller-harness{direction:ltr;overflow:hidden;position:relative}.fc .fc-scroller-harness-liquid{height:100%}.fc-direction-rtl .fc-scroller-harness>.fc-scroller{direction:rtl}.fc-theme-standard .fc-scrollgrid{border:1px solid var(--fc-border-color)}.fc .fc-scrollgrid,.fc .fc-scrollgrid table{table-layout:fixed;width:100%}.fc .fc-scrollgrid table{border-left-style:hidden;border-right-style:hidden;border-top-style:hidden}.fc .fc-scrollgrid{border-bottom-width:0;border-collapse:separate;border-right-width:0}.fc .fc-scrollgrid-liquid{height:100%}.fc .fc-scrollgrid-section,.fc .fc-scrollgrid-section table,.fc .fc-scrollgrid-section>td{height:1px}.fc .fc-scrollgrid-section-liquid>td{height:100%}.fc .fc-scrollgrid-section>*{border-left-width:0;border-top-width:0}.fc .fc-scrollgrid-section-footer>*,.fc .fc-scrollgrid-section-header>*{border-bottom-width:0}.fc .fc-scrollgrid-section-body table,.fc .fc-scrollgrid-section-footer table{border-bottom-style:hidden}.fc .fc-scrollgrid-section-sticky>*{background:var(--fc-page-bg-color);position:sticky;z-index:3}.fc .fc-scrollgrid-section-header.fc-scrollgrid-section-sticky>*{top:0}.fc .fc-scrollgrid-section-footer.fc-scrollgrid-section-sticky>*{bottom:0}.fc .fc-scrollgrid-sticky-shim{height:1px;margin-bottom:-1px}.fc-sticky{position:sticky}.fc .fc-view-harness{flex-grow:1;position:relative}.fc .fc-view-harness-active>.fc-view{bottom:0;left:0;position:absolute;right:0;top:0}.fc .fc-col-header-cell-cushion{display:inline-block;padding:2px 4px}.fc .fc-bg-event,.fc .fc-highlight,.fc .fc-non-business{bottom:0;left:0;position:absolute;right:0;top:0}.fc .fc-non-business{background:var(--fc-non-business-color)}.fc .fc-bg-event{background:var(--fc-bg-event-color);opacity:var(--fc-bg-event-opacity)}.fc .fc-bg-event .fc-event-title{font-size:var(--fc-small-font-size);font-style:italic;margin:.5em}.fc .fc-highlight{background:var(--fc-highlight-color)}.fc .fc-cell-shaded,.fc .fc-day-disabled{background:var(--fc-neutral-bg-color)}a.fc-event,a.fc-event:hover{text-decoration:none}.fc-event.fc-event-draggable,.fc-event[href]{cursor:pointer}.fc-event .fc-event-main{position:relative;z-index:2}.fc-event-dragging:not(.fc-event-selected){opacity:.75}.fc-event-dragging.fc-event-selected{box-shadow:0 2px 7px rgba(0,0,0,.3)}.fc-event .fc-event-resizer{display:none;position:absolute;z-index:4}.fc-event-selected .fc-event-resizer,.fc-event:hover .fc-event-resizer{display:block}.fc-event-selected .fc-event-resizer{background:var(--fc-page-bg-color);border-color:inherit;border-radius:calc(var(--fc-event-resizer-dot-total-width)/2);border-style:solid;border-width:var(--fc-event-resizer-dot-border-width);height:var(--fc-event-resizer-dot-total-width);width:var(--fc-event-resizer-dot-total-width)}.fc-event-selected .fc-event-resizer:before{bottom:-20px;content:"";left:-20px;position:absolute;right:-20px;top:-20px}.fc-event-selected,.fc-event:focus{box-shadow:0 2px 5px rgba(0,0,0,.2)}.fc-event-selected:before,.fc-event:focus:before{bottom:0;content:"";left:0;position:absolute;right:0;top:0;z-index:3}.fc-event-selected:after,.fc-event:focus:after{background:var(--fc-event-selected-overlay-color);bottom:-1px;content:"";left:-1px;position:absolute;right:-1px;top:-1px;z-index:1}.fc-h-event{background-color:var(--fc-event-bg-color);border:1px solid var(--fc-event-border-color);display:block}.fc-h-event .fc-event-main{color:var(--fc-event-text-color)}.fc-h-event .fc-event-main-frame{display:flex}.fc-h-event .fc-event-time{max-width:100%;overflow:hidden}.fc-h-event .fc-event-title-container{flex-grow:1;flex-shrink:1;min-width:0}.fc-h-event .fc-event-title{display:inline-block;left:0;max-width:100%;overflow:hidden;right:0;vertical-align:top}.fc-h-event.fc-event-selected:before{bottom:-10px;top:-10px}.fc-direction-ltr .fc-daygrid-block-event:not(.fc-event-start),.fc-direction-rtl .fc-daygrid-block-event:not(.fc-event-end){border-bottom-left-radius:0;border-left-width:0;border-top-left-radius:0}.fc-direction-ltr .fc-daygrid-block-event:not(.fc-event-end),.fc-direction-rtl .fc-daygrid-block-event:not(.fc-event-start){border-bottom-right-radius:0;border-right-width:0;border-top-right-radius:0}.fc-h-event:not(.fc-event-selected) .fc-event-resizer{bottom:0;top:0;width:var(--fc-event-resizer-thickness)}.fc-direction-ltr .fc-h-event:not(.fc-event-selected) .fc-event-resizer-start,.fc-direction-rtl .fc-h-event:not(.fc-event-selected) .fc-event-resizer-end{cursor:w-resize;left:calc(var(--fc-event-resizer-thickness)*-.5)}.fc-direction-ltr .fc-h-event:not(.fc-event-selected) .fc-event-resizer-end,.fc-direction-rtl .fc-h-event:not(.fc-event-selected) .fc-event-resizer-start{cursor:e-resize;right:calc(var(--fc-event-resizer-thickness)*-.5)}.fc-h-event.fc-event-selected .fc-event-resizer{margin-top:calc(var(--fc-event-resizer-dot-total-width)*-.5);top:50%}.fc-direction-ltr .fc-h-event.fc-event-selected .fc-event-resizer-start,.fc-direction-rtl .fc-h-event.fc-event-selected .fc-event-resizer-end{left:calc(var(--fc-event-resizer-dot-total-width)*-.5)}.fc-direction-ltr .fc-h-event.fc-event-selected .fc-event-resizer-end,.fc-direction-rtl .fc-h-event.fc-event-selected .fc-event-resizer-start{right:calc(var(--fc-event-resizer-dot-total-width)*-.5)}.fc .fc-popover{box-shadow:0 2px 6px rgba(0,0,0,.15);position:absolute;z-index:9999}.fc .fc-popover-header{align-items:center;display:flex;flex-direction:row;justify-content:space-between;padding:3px 4px}.fc .fc-popover-title{margin:0 2px}.fc .fc-popover-close{cursor:pointer;font-size:1.1em;opacity:.65}.fc-theme-standard .fc-popover{background:var(--fc-page-bg-color);border:1px solid var(--fc-border-color)}.fc-theme-standard .fc-popover-header{background:var(--fc-neutral-bg-color)}</style><style>:root{--fc-daygrid-event-dot-width:8px}.fc-daygrid-day-events:after,.fc-daygrid-day-events:before,.fc-daygrid-day-frame:after,.fc-daygrid-day-frame:before,.fc-daygrid-event-harness:after,.fc-daygrid-event-harness:before{clear:both;content:"";display:table}.fc .fc-daygrid-body{position:relative;z-index:1}.fc .fc-daygrid-day.fc-day-today{background-color:var(--fc-today-bg-color)}.fc .fc-daygrid-day-frame{min-height:100%;position:relative}.fc .fc-daygrid-day-top{display:flex;flex-direction:row-reverse}.fc .fc-day-other .fc-daygrid-day-top{opacity:.3}.fc .fc-daygrid-day-number{padding:4px;position:relative;z-index:4}.fc .fc-daygrid-month-start{font-size:1.1em;font-weight:700}.fc .fc-daygrid-day-events{margin-top:1px}.fc .fc-daygrid-body-balanced .fc-daygrid-day-events{left:0;position:absolute;right:0}.fc .fc-daygrid-body-unbalanced .fc-daygrid-day-events{min-height:2em;position:relative}.fc .fc-daygrid-body-natural .fc-daygrid-day-events{margin-bottom:1em}.fc .fc-daygrid-event-harness{position:relative}.fc .fc-daygrid-event-harness-abs{left:0;position:absolute;right:0;top:0}.fc .fc-daygrid-bg-harness{bottom:0;position:absolute;top:0}.fc .fc-daygrid-day-bg .fc-non-business{z-index:1}.fc .fc-daygrid-day-bg .fc-bg-event{z-index:2}.fc .fc-daygrid-day-bg .fc-highlight{z-index:3}.fc .fc-daygrid-event{margin-top:1px;z-index:6}.fc .fc-daygrid-event.fc-event-mirror{z-index:7}.fc .fc-daygrid-day-bottom{font-size:.85em;margin:0 2px}.fc .fc-daygrid-day-bottom:after,.fc .fc-daygrid-day-bottom:before{clear:both;content:"";display:table}.fc .fc-daygrid-more-link{border-radius:3px;cursor:pointer;line-height:1;margin-top:1px;max-width:100%;overflow:hidden;padding:2px;position:relative;white-space:nowrap;z-index:4}.fc .fc-daygrid-more-link:hover{background-color:rgba(0,0,0,.1)}.fc .fc-daygrid-week-number{background-color:var(--fc-neutral-bg-color);color:var(--fc-neutral-text-color);min-width:1.5em;padding:2px;position:absolute;text-align:center;top:0;z-index:5}.fc .fc-more-popover .fc-popover-body{min-width:220px;padding:10px}.fc-direction-ltr .fc-daygrid-event.fc-event-start,.fc-direction-rtl .fc-daygrid-event.fc-event-end{margin-left:2px}.fc-direction-ltr .fc-daygrid-event.fc-event-end,.fc-direction-rtl .fc-daygrid-event.fc-event-start{margin-right:2px}.fc-direction-ltr .fc-daygrid-more-link{float:left}.fc-direction-ltr .fc-daygrid-week-number{border-radius:0 0 3px 0;left:0}.fc-direction-rtl .fc-daygrid-more-link{float:right}.fc-direction-rtl .fc-daygrid-week-number{border-radius:0 0 0 3px;right:0}.fc-liquid-hack .fc-daygrid-day-frame{position:static}.fc-daygrid-event{border-radius:3px;font-size:var(--fc-small-font-size);position:relative;white-space:nowrap}.fc-daygrid-block-event .fc-event-time{font-weight:700}.fc-daygrid-block-event .fc-event-time,.fc-daygrid-block-event .fc-event-title{padding:1px}.fc-daygrid-dot-event{align-items:center;display:flex;padding:2px 0}.fc-daygrid-dot-event .fc-event-title{flex-grow:1;flex-shrink:1;font-weight:700;min-width:0;overflow:hidden}.fc-daygrid-dot-event.fc-event-mirror,.fc-daygrid-dot-event:hover{background:rgba(0,0,0,.1)}.fc-daygrid-dot-event.fc-event-selected:before{bottom:-10px;top:-10px}.fc-daygrid-event-dot{border:calc(var(--fc-daygrid-event-dot-width)/2) solid var(--fc-event-border-color);border-radius:calc(var(--fc-daygrid-event-dot-width)/2);box-sizing:content-box;height:0;margin:0 4px;width:0}.fc-direction-ltr .fc-daygrid-event .fc-event-time{margin-right:3px}.fc-direction-rtl .fc-daygrid-event .fc-event-time{margin-left:3px}</style><style>.fc-v-event{background-color:var(--fc-event-bg-color);border:1px solid var(--fc-event-border-color);display:block}.fc-v-event .fc-event-main{color:var(--fc-event-text-color);height:100%}.fc-v-event .fc-event-main-frame{display:flex;flex-direction:column;height:100%}.fc-v-event .fc-event-time{flex-grow:0;flex-shrink:0;max-height:100%;overflow:hidden}.fc-v-event .fc-event-title-container{flex-grow:1;flex-shrink:1;min-height:0}.fc-v-event .fc-event-title{bottom:0;max-height:100%;overflow:hidden;top:0}.fc-v-event:not(.fc-event-start){border-top-left-radius:0;border-top-right-radius:0;border-top-width:0}.fc-v-event:not(.fc-event-end){border-bottom-left-radius:0;border-bottom-right-radius:0;border-bottom-width:0}.fc-v-event.fc-event-selected:before{left:-10px;right:-10px}.fc-v-event .fc-event-resizer-start{cursor:n-resize}.fc-v-event .fc-event-resizer-end{cursor:s-resize}.fc-v-event:not(.fc-event-selected) .fc-event-resizer{height:var(--fc-event-resizer-thickness);left:0;right:0}.fc-v-event:not(.fc-event-selected) .fc-event-resizer-start{top:calc(var(--fc-event-resizer-thickness)/-2)}.fc-v-event:not(.fc-event-selected) .fc-event-resizer-end{bottom:calc(var(--fc-event-resizer-thickness)/-2)}.fc-v-event.fc-event-selected .fc-event-resizer{left:50%;margin-left:calc(var(--fc-event-resizer-dot-total-width)/-2)}.fc-v-event.fc-event-selected .fc-event-resizer-start{top:calc(var(--fc-event-resizer-dot-total-width)/-2)}.fc-v-event.fc-event-selected .fc-event-resizer-end{bottom:calc(var(--fc-event-resizer-dot-total-width)/-2)}.fc .fc-timegrid .fc-daygrid-body{z-index:2}.fc .fc-timegrid-divider{padding:0 0 2px}.fc .fc-timegrid-body{min-height:100%;position:relative;z-index:1}.fc .fc-timegrid-axis-chunk{position:relative}.fc .fc-timegrid-axis-chunk>table,.fc .fc-timegrid-slots{position:relative;z-index:1}.fc .fc-timegrid-slot{border-bottom:0;height:1.5em}.fc .fc-timegrid-slot:empty:before{content:"\00a0"}.fc .fc-timegrid-slot-minor{border-top-style:dotted}.fc .fc-timegrid-slot-label-cushion{display:inline-block;white-space:nowrap}.fc .fc-timegrid-slot-label{vertical-align:middle}.fc .fc-timegrid-axis-cushion,.fc .fc-timegrid-slot-label-cushion{padding:0 4px}.fc .fc-timegrid-axis-frame-liquid{height:100%}.fc .fc-timegrid-axis-frame{align-items:center;display:flex;justify-content:flex-end;overflow:hidden}.fc .fc-timegrid-axis-cushion{flex-shrink:0;max-width:60px}.fc-direction-ltr .fc-timegrid-slot-label-frame{text-align:right}.fc-direction-rtl .fc-timegrid-slot-label-frame{text-align:left}.fc-liquid-hack .fc-timegrid-axis-frame-liquid{bottom:0;height:auto;left:0;position:absolute;right:0;top:0}.fc .fc-timegrid-col.fc-day-today{background-color:var(--fc-today-bg-color)}.fc .fc-timegrid-col-frame{min-height:100%;position:relative}.fc-media-screen.fc-liquid-hack .fc-timegrid-col-frame{bottom:0;height:auto;left:0;position:absolute;right:0;top:0}.fc-media-screen .fc-timegrid-cols{bottom:0;left:0;position:absolute;right:0;top:0}.fc-media-screen .fc-timegrid-cols>table{height:100%}.fc-media-screen .fc-timegrid-col-bg,.fc-media-screen .fc-timegrid-col-events,.fc-media-screen .fc-timegrid-now-indicator-container{left:0;position:absolute;right:0;top:0}.fc .fc-timegrid-col-bg{z-index:2}.fc .fc-timegrid-col-bg .fc-non-business{z-index:1}.fc .fc-timegrid-col-bg .fc-bg-event{z-index:2}.fc .fc-timegrid-col-bg .fc-highlight{z-index:3}.fc .fc-timegrid-bg-harness{left:0;position:absolute;right:0}.fc .fc-timegrid-col-events{z-index:3}.fc .fc-timegrid-now-indicator-container{bottom:0;overflow:hidden}.fc-direction-ltr .fc-timegrid-col-events{margin:0 2.5% 0 2px}.fc-direction-rtl .fc-timegrid-col-events{margin:0 2px 0 2.5%}.fc-timegrid-event-harness{position:absolute}.fc-timegrid-event-harness>.fc-timegrid-event{bottom:0;left:0;position:absolute;right:0;top:0}.fc-timegrid-event-harness-inset .fc-timegrid-event,.fc-timegrid-event.fc-event-mirror,.fc-timegrid-more-link{box-shadow:0 0 0 1px var(--fc-page-bg-color)}.fc-timegrid-event,.fc-timegrid-more-link{border-radius:3px;font-size:var(--fc-small-font-size)}.fc-timegrid-event{margin-bottom:1px}.fc-timegrid-event .fc-event-main{padding:1px 1px 0}.fc-timegrid-event .fc-event-time{font-size:var(--fc-small-font-size);margin-bottom:1px;white-space:nowrap}.fc-timegrid-event-short .fc-event-main-frame{flex-direction:row;overflow:hidden}.fc-timegrid-event-short .fc-event-time:after{content:"\00a0-\00a0"}.fc-timegrid-event-short .fc-event-title{font-size:var(--fc-small-font-size)}.fc-timegrid-more-link{background:var(--fc-more-link-bg-color);color:var(--fc-more-link-text-color);cursor:pointer;margin-bottom:1px;position:absolute;z-index:9999}.fc-timegrid-more-link-inner{padding:3px 2px;top:0}.fc-direction-ltr .fc-timegrid-more-link{right:0}.fc-direction-rtl .fc-timegrid-more-link{left:0}.fc .fc-timegrid-now-indicator-line{border-color:var(--fc-now-indicator-color);border-style:solid;border-width:1px 0 0;left:0;position:absolute;right:0;z-index:4}.fc .fc-timegrid-now-indicator-arrow{border-color:var(--fc-now-indicator-color);border-style:solid;margin-top:-5px;position:absolute;z-index:4}.fc-direction-ltr .fc-timegrid-now-indicator-arrow{border-bottom-color:transparent;border-top-color:transparent;border-width:5px 0 5px 6px;left:0}.fc-direction-rtl .fc-timegrid-now-indicator-arrow{border-bottom-color:transparent;border-top-color:transparent;border-width:5px 6px 5px 0;right:0}</style><style>:root{--fc-list-event-dot-width:10px;--fc-list-event-hover-bg-color:#f5f5f5}.fc-theme-standard .fc-list{border:1px solid var(--fc-border-color)}.fc .fc-list-empty{align-items:center;background-color:var(--fc-neutral-bg-color);display:flex;height:100%;justify-content:center}.fc .fc-list-empty-cushion{margin:5em 0}.fc .fc-list-table{border-style:hidden;width:100%}.fc .fc-list-table tr>*{border-left:0;border-right:0}.fc .fc-list-sticky .fc-list-day>*{background:var(--fc-page-bg-color);position:sticky;top:0}.fc .fc-list-table thead{left:-10000px;position:absolute}.fc .fc-list-table tbody>tr:first-child th{border-top:0}.fc .fc-list-table th{padding:0}.fc .fc-list-day-cushion,.fc .fc-list-table td{padding:8px 14px}.fc .fc-list-day-cushion:after{clear:both;content:"";display:table}.fc-theme-standard .fc-list-day-cushion{background-color:var(--fc-neutral-bg-color)}.fc-direction-ltr .fc-list-day-text,.fc-direction-rtl .fc-list-day-side-text{float:left}.fc-direction-ltr .fc-list-day-side-text,.fc-direction-rtl .fc-list-day-text{float:right}.fc-direction-ltr .fc-list-table .fc-list-event-graphic{padding-right:0}.fc-direction-rtl .fc-list-table .fc-list-event-graphic{padding-left:0}.fc .fc-list-event.fc-event-forced-url{cursor:pointer}.fc .fc-list-event:hover td{background-color:var(--fc-list-event-hover-bg-color)}.fc .fc-list-event-graphic,.fc .fc-list-event-time{white-space:nowrap;width:1px}.fc .fc-list-event-dot{border:calc(var(--fc-list-event-dot-width)/2) solid var(--fc-event-border-color);border-radius:calc(var(--fc-list-event-dot-width)/2);box-sizing:content-box;display:inline-block;height:0;width:0}.fc .fc-list-event-title a{color:inherit;text-decoration:none}.fc .fc-list-event.fc-event-forced-url:hover a{text-decoration:underline}</style><style>.fc .fc-multimonth{border:1px solid var(--fc-border-color);display:flex;flex-wrap:wrap;overflow-x:hidden;overflow-y:auto}.fc .fc-multimonth-title{font-size:1.2em;font-weight:700;padding:1em 0;text-align:center}.fc .fc-multimonth-daygrid{background:var(--fc-page-bg-color)}.fc .fc-multimonth-daygrid-table,.fc .fc-multimonth-header-table{table-layout:fixed;width:100%}.fc .fc-multimonth-daygrid-table{border-top-style:hidden!important}.fc .fc-multimonth-singlecol .fc-multimonth{position:relative}.fc .fc-multimonth-singlecol .fc-multimonth-header{background:var(--fc-page-bg-color);position:relative;top:0;z-index:2}.fc .fc-multimonth-singlecol .fc-multimonth-daygrid{position:relative;z-index:1}.fc .fc-multimonth-singlecol .fc-multimonth-daygrid-table,.fc .fc-multimonth-singlecol .fc-multimonth-header-table{border-left-style:hidden;border-right-style:hidden}.fc .fc-multimonth-singlecol .fc-multimonth-month:last-child .fc-multimonth-daygrid-table{border-bottom-style:hidden}.fc .fc-multimonth-multicol{line-height:1}.fc .fc-multimonth-multicol .fc-multimonth-month{padding:0 1.2em 1.2em}.fc .fc-multimonth-multicol .fc-daygrid-more-link{border:1px solid var(--fc-event-border-color);display:block;float:none;padding:1px}.fc .fc-multimonth-compact{line-height:1}.fc .fc-multimonth-compact .fc-multimonth-daygrid-table,.fc .fc-multimonth-compact .fc-multimonth-header-table{font-size:.9em}.fc-media-screen .fc-multimonth-singlecol .fc-multimonth-header{position:sticky}.fc-media-print .fc-multimonth{overflow:visible}</style>
    
    <!-- Include Axios for API requests -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>


    <title>Hikari</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta name="charset" content="UTF-8">
    <meta name="robots" content="index,follow">
    <meta http-equiv="content-language" content="en">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="keywords" content="anime to watch, watch anime,anime online, free anime online, online anime, anime streaming, stream anime online, english anime, english dubbed anime">
    <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.3.1/css/all.css">
    <link rel="stylesheet" href="https://hikari.gg/assest/aniwatch/css/style.css">
    <link rel="stylesheet" href="https://hikari.gg/assest/aniwatch/css/min.css">
    <link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css">
    <link rel="icon" sizes="192x192" href="https://cdn.discordapp.com/icons/1073723529557721118/7bf49235e19a3c2724aec290a2c42f72.webp?size=96">
    <script type="text/javascript">
        setTimeout(function() {
            var wpse326013 = document.createElement('link');
            wpse326013.rel = 'stylesheet';
            wpse326013.href = 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta2/css/all.min.css';
            wpse326013.type = 'text/css';
            var godefer = document.getElementsByTagName('link')[0];
            godefer.parentNode.insertBefore(wpse326013, godefer);
            var wpse326013_2 = document.createElement('link');
            wpse326013_2.rel = 'stylesheet';
            wpse326013_2.href =
                'https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.4.1/css/bootstrap.min.css';
            wpse326013_2.type = 'text/css';
            var godefer2 = document.getElementsByTagName('link')[0];
            godefer2.parentNode.insertBefore(wpse326013_2, godefer2);
        }, 500);
    </script>
    <noscript>
        <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta2/css/all.min.css" />
        <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.4.1/css/bootstrap.min.css" />
    </noscript>
	
<script type="text/javascript" src="https://hikari.gg/js/aclib.js"></script><script>
    aclib.runPop({zoneId: '9253542'});
</script><script async="" src="https://www.googletagmanager.com/gtag/js?id=G-H9487Q59WW"></script><script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-H9487Q59WW');
</script><script src="https://hikaritv.disqus.com/embed.js" id="dsq-embed-scr" data-timestamp="1738180870967"></script><script src="https://c.disquscdn.com/next/embed/alfie_v4.63f1ab6d6b9d5807dc0c94ef3fe0b851.js" async="" charset="UTF-8"></script><style>.\[\&_\.gdprAdTransparencyCogWheelButton\]\:\!pjra-z-\[5\],
AD-SLOT,
DFP-AD,
[class^="adDisplay-module"],
[class^="amp-ad-"],
[data-ad-cls],
[data-adbridg-ad-class],
[data-adshim],
[data-asg-ins],
[data-block-type="ad"],
[data-css-class="dfp-inarticle"],
[data-d-ad-id],
[data-desktop-ad-id],
[data-dynamic-ads],
[data-ez-name],
[data-freestar-ad][id],
[data-id^="div-gpt-ad"],
[data-identity="adhesive-ad"],
[data-m-ad-id],
[data-mobile-ad-id],
[data-name="adaptiveConstructorAd"],
[data-rc-widget],
[data-role="tile-ads-module"],
[data-template-type="nativead"],
[data-testid="adBanner-wrapper"],
[data-testid="ad_testID"],
[data-testid="prism-ad-wrapper"],
[data-type="ad-vertical"],
[data-wpas-zoneid],
[id^="ad-wrap-"],
[id^="ad_sky"],
[id^="ad_slider"],
[id^="section-ad-banner"],
[onclick^="location.href='https://1337x.vpnonly.site/"],
a-ad,
a[data-href^="http://ads.trafficjunky.net/"],
a[data-url^="https://vulpix.bet/?ref="],
a[style="width:100%;height:100%;z-index:10000000000000000;position:absolute;top:0;left:0;"],
ad-shield-ads,
ad-slot,
app-ad,
app-advertisement,
app-large-ad,
ark-top-ad,
aside[id^="adrotate_widgets-"],
atf-ad-slot,
bottomadblock,
display-ads,
div[class^="Adstyled__AdWrapper-"],
div[data-ad-placeholder],
div[data-ad-wrapper],
div[data-adname],
div[data-adunit-path],
div[data-adunit],
div[data-adzone],
div[data-alias="300x250 Ad 1"],
div[data-alias="300x250 Ad 2"],
div[data-contentexchange-widget],
div[data-dfp-id],
div[data-id-advertdfpconf],
div[id^="ad-div-"],
div[id^="ad-position-"],
div[id^="adngin-"],
div[id^="adrotate_widgets-"],
div[id^="adspot-"],
div[id^="crt-"][style],
div[id^="div-ads-"],
div[id^="google_dfp_"],
div[id^="gpt_ad_"],
div[id^="lazyad-"],
div[id^="optidigital-adslot"],
div[id^="rc-widget-"],
div[id^="st"][style^="z-index: 999999999;"],
div[id^="sticky_ad_"],
div[id^="vuukle-ad-"],
div[ow-ad-unit-wrapper],
gpt-ad,
guj-ad,
hl-adsense,
img[src^="https://images.purevpnaffiliates.com"],
ps-connatix-module,
span[data-ez-ph-id],
span[id^="ezoic-pub-ad-placeholder-"],
topadblock,
zeus-ad,
[class^="tile-picker__CitrusBannerContainer-sc-"],
citrus-ad-wrapper,
[class^="s2nPlayer"],
div[id*="MarketGid"],
[onclick*="content.ad/"],
AMP-AD,
amp-ad,
amp-ad-custom,
amp-connatix-player,
amp-fx-flying-carpet,
a[data-oburl^="https://paid.outbrain.com/network/redir?"],
a[data-redirect^="https://paid.outbrain.com/network/redir?"],
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"][target="_blank"] + .ob_source,
[data-taboola-options],
[data-testid="commercial-label-taboola"],
[data-testid^="taboola-"],
div[id^="taboola-stream-"],
div[id^="zergnet-widget"],
html[lang] > body.ishome > div.adult + main.main,
html[lang] > body:not([class]):not([id]):not([style]) > div.background-container > div.container > div.captcha-box,
html[lang] > body.startnew > div#sections > section#section_uname,
html[lang] > body:not([style]) > div.captchaBody,
html[lang] > body#body > * > div.cv-xwrapper > div.cvc > div.cv-inner,
html[lang] > body#body > * > div.cvh.BlockClicksActivityBusy,
html#html[sti][vic][lang] > body#allbody,
html > body > div.container.m-p > #checkbox-window.checkbox-window,
html[lang] > body:not([class]):not([id]):not([style]) > div.container > div.recaptcha-box,
html > body.hold-transition.theme-primary.bg-img[style^="background-image"][style*="wallpaperaccess.com"][style*="background-repeat"][style*="background-size"],
html > body > div.container > form#unsubscribe-form[onsubmit="submitUnsubscribeForm(event)"],
html > body > div.content > dl > dd.dd1 > div.min_sider > form#form1[action="unsubscribe.php"],
html > body.body > div.container > div.content > form > table.optoutForm,
[src^="https://forum.picbaron.com/Banner"],
div[id][style^="position: fixed; inset: 0px; z-index: 2147483647; background: black"][style*="opacity: 0.01"],
div[class$="player-promo-col"],
div#spot-holder.spot-holder[style="display: block;"],
a[dontfo=""][style$="position: absolute; z-index: 2147483647;"],
[data-ad-module]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-width]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-adblockkey]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(html):not(.adsbygoogle),
[data-advadstrackid]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-manager-id]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
div[style^="z-index: 999999; background-image: url(\"data:image/gif;base64,"][style$="position: absolute;"],
a[onclick="openAuc();"],
div[style="position: fixed; display: block; width: 100%; height: 100%; inset: 0px; background-color: rgba(0, 0, 0, 0); z-index: 300000;"],
body > div[style$="z-index: 2147483647; top: 0px; left: 0px; position: fixed; display: block;"],
div[style^="position:fixed;inset:0px;z-index:2147483647;background:black;opacity:0.01"],
div[style^="position: fixed; inset: 0px; z-index: 2147483647; background: black; opacity: 0.01"],
a[id][href="https://chpadblock.com/"][rel^="noopener noreferrer"],
a[id][href="https://hamrocsit.com"][rel^="noopener noreferrer"],
a[id][href="https://toolkitspro.com"][rel^="noopener noreferrer"],
iframe.lazyloaded[data-src^="https://rcm-fe.amazon-adsystem.com/"],
div[style="top: 0px; left: 0px; width: 1287px; height: 500px; position: fixed; z-index: 2147483647;"],
div[style="position: fixed; inset: 0px; z-index: 2147483647; pointer-events: auto;"],
#player div[style$="cursor: pointer; position: absolute; width: 100%; height: 100%; padding: 1rem; z-index: 2147483647;"],
html[lang][style^="--main-bg-color"] > body:not([class]):not([id]) > div#container[style="visibility: visible;"] > div#banner[style="opacity:0"] ~ main:not([class]):not([id]) > div#message,
[data-uri^="https://s3.amazonaws.com"],
[data-lnguri^="https://s3.amazonaws.com"],
[onclick*="postlnk.com"],
[data-lnguri*="vipbox"],
[class^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]),
div[id^="div-gpt-"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]):not([style="pointer-events: none; height: 1px; width: 0px; opacity: 0; visibility: hidden; position: fixed; bottom: 0px;"]),
[id^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]):not([style="pointer-events: none; height: 1px; width: 0px; opacity: 0; visibility: hidden; position: fixed; bottom: 0px;"]),
[src^="//dombnrs.com/"] { display: none !important; }

[data-ad-name],
[data-revive-zoneid],
[name^="google_ads_iframe"],
display-ad-component,
div[aria-label="Ads"],
div[data-ad-targeting],
div[id^="ad_position_"],
div[id^="dfp-ad-"],
div[id^="ezoic-pub-ad-"],
ins.adsbygoogle[data-ad-client],
ins.adsbygoogle[data-ad-slot],
div[id*="ScriptRoot"],
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"][target="_blank"],
amp-embed[type="taboola"] { display: none !important; }</style><style>[href*="uselnk.com/"],
[href*="postlnk.com"],
[href*="passtechusa.com"] { display: none !important; }</style></head>




<!-- Google tag (gtag.js) -->



<body data-page="watch_page">
    <div id="sidebar_menu_bg"></div>
    <div id="wrapper">
        <div id="sidebar_menu">
    <div class="sidebar-menu">
        <ul class="menu">
            <li class="menu-item" title="Home">
                <a href="/" class="menu-link">
                    <i class="fas fa-home"></i>
                    <span class="menu-text">Home</span>
                </a>
            </li>
            <li class="menu-item" title="TV">
                <a href="/type/tv" class="menu-link">
                    <i class="fas fa-tv"></i>
                    <span class="menu-text">TV</span>
                </a>
            </li>
            <li class="menu-item" title="Movies">
                <a href="/type/movies" class="menu-link">
                    <i class="fas fa-film"></i>
                    <span class="menu-text">Movies</span>
                </a>
            </li>
            <li class="menu-item" title="OVA">
                <a href="/type/ova" class="menu-link">
                    <i class="fas fa-video"></i>
                    <span class="menu-text">OVA</span>
                </a>
            </li>
            <li class="menu-item" title="ONA">
                <a href="/type/ona" class="menu-link">
                    <i class="fas fa-video"></i>
                    <span class="menu-text">ONA</span>
                </a>
            </li>
            <li class="menu-item" title="Special">
                <a href="/type/special" class="menu-link">
                    <i class="fas fa-star"></i>
                    <span class="menu-text">Special</span>
                </a>
            </li>
            <li class="menu-item" title="Random">
                <a href="/random" class="menu-link">
                    <i class="fas fa-random"></i>
                    <span class="menu-text">Random</span>
                </a>
            </li>
            <li class="menu-item" title="Filter">
                <a href="/filter" class="menu-link">
                    <i class="fa-solid fa-filter"></i>
                    <span class="menu-text">Filter</span>
                </a>
            </li>
        </ul>
    </div>
</div>

<style>
    /* Sidebar styling */
    #sidebar_menu {
        position: fixed;
        top: 0;
        left: 0;
        height: 100%;
        width: 200px; /* Sidebar is always expanded */
        background-color: #1c1c1c;
        display: flex;
        flex-direction: column;
        align-items: center;
        z-index: 1000;
    }

    .sidebar-menu .menu {
        list-style: none;
        padding: 0;
        margin: 0;
        width: 100%;
    }

    .menu-item {
        display: flex;
        margin-left: -30px;
        align-items: center;
        justify-content: flex-start;
        height: 60px;
        position: relative;
        transition: all 0.3s;
    }

    .menu-item .menu-link {
        display: flex;
        align-items: center;
        text-decoration: none;
        color: white;
        width: 100%;
        height: 100%;
        padding-left: 20px;
    }

    .menu-item .menu-link i {
        font-size: 20px;
        margin-right: 10px;
        transition: transform 0.3s;
    }

    .menu-item:hover .menu-link i {
        transform: scale(1.1);
    }

    .menu-item .menu-text {
        color: white;
        font-size: 16px;
    }

    /* Request Anime Button */
    .request-anime {
        margin-top: 350px;
    }

    .request-anime-btn {
        background-color: #a958a5;
        color: white;
        border-radius: 15px;
        padding: 10px 20px;
        cursor: pointer;
        border: none;
        font-size: 14px;
    }

    /* Discord link */
    .discord-link {
        color: white;
        font-size: 24px;
        margin: 20px 0;
        text-decoration: none;
    }

    .discord-link i {
        line-height: 1;
    }
</style>

<script>
    // Open and close the popup
    function openPopup() {
        document.getElementById("popupBackground").style.display = "block";
    }

    function closePopup() {
        document.getElementById("popupBackground").style.display = "none";
    }
</script>
<div id="header" class="header-home" style="z-index:50;">
    <div class="container" style="max-width:100%!important;width:100%!important;">
        <div id="mobile_menu"><i class="fa-solid fa-bars-staggered"></i></div>
        <a href="/home" id="logo-2" title="">
            <img src="/assest/images/logo.png" width="30%" height="auto" alt="">
            <div class="clearfix"></div>
        </a>
        <div id="search" class="">
            <div class="search-content">
                <form id="searchForm" action="/search" autocomplete="off">
                    <a href="/filter" class="filter-icon">Filter</a>
                    <input id="input-a-ield" type="text" class="form-control search-input" name="keyword" placeholder="Search Anime..." required="">
                    <button type="submit" class="search-icon"><i class="fas fa-search"></i></button>
                </form>
                <div class="nav search-result-pop" id="search-suggest" style="display: none;">
                    <div id="suggestedItems"></div>
                    <a href="/search?keyword=" class="nav-item nav-bottom">
                        View all results<i class="fa fa-angle-right ml-2"></i>
                    </a>
                </div>
            </div>
        </div>
        <div id="pick_menu">
            <div class="pick_menu-ul">
                <ul class="ulclear">
                    <li class="pmu-item pmu-item-home">
                        <a class="pmu-item-icon" href="/" title="Home">
                            <img src="https://hikari.gg/files/images/pick-home.svg">
                        </a>
                    </li>
                    <li class="pmu-item pmu-item-movies">
                        <a class="pmu-item-icon" href="/movies" title="Movies">
                            <img src="https://hikari.gg/files/images/pick-movies.svg">
                        </a>
                    </li>
                    <li class="pmu-item pmu-item-show">
                        <a class="pmu-item-icon" href="/tv" title="TV">
                            <img src="https://hikari.gg/files/images/pick-show.svg">
                        </a>
                    </li>
                </ul>
            </div>
        </div>
		
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

        
<style>
    @media (max-width: 768px) { /* Adjust max-width as per your requirements */
        .btn-login {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .btn-login i { /* Ensure the icon is always visible */
            margin-right: 0; /* Remove extra spacing */
        }

        .btn-login::after {
            content: ''; /* Clear the "Sign In" text */
        }

        .btn-login span { /* Hide the "Sign In" text */
            display: none;
        }
    }
</style>

    <div id="header_right">
        <div id="user-slot">
		<div class="dropdown">
			<a class="btn-user btn btn-sm btn-primary btn-login" data-toggle="modallogin" data-target="#modallogin" data-tab-show="#modal-tab-login">
				<i style="color:#000000;" class="fa-solid fa-right-to-bracket"></i>
				<span>&nbsp;&nbsp;Sign In</span>
			</a>
		</div>
            </div>
        </div>
    </div>

        <div id="mobile_search" class=""><i class="fa fa-search"></i></div>
        <div class="clearfix"></div>
    </div>
</div>
    <div class="modal fade premodal premodal-login" id="modallogin" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="tab-content">
                    <div id="modal-tab-login" class="tab-pane active">
                        <div class="modal-header">
                            <h5 class="modal-title" id="modallogintitle">Log in to Hikari!</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">×</span>
                            </button>
                        </div>
                        <div class="modal-body">
                                                        <form class="preform" action="https://hikari.gg/login" method="post">
                                <input type="hidden" name="csrf_test_name" value="c9c11b94479b34a1f5006f054c18b047">                                <div class="mb-2">
                                    <input type="email" class="form-control" name="email" inputmode="email" autocomplete="email" placeholder="Email Address" value="" required="">
                                </div>
                                <div class="mb-2">
                                    <input type="password" class="form-control" name="password" inputmode="text" autocomplete="current-password" placeholder="Password" required="">
                                </div>
                                                                    <div class="form-check">
                                        <label class="form-check-label control control-checkbox">
                                            <input type="checkbox" name="remember" class="form-check-input">
                                            <div class="control_indicator"></div>
                                            Remember me?                                        </label>
                                    </div>
                                                                <div class="d-grid col-12 col-md-8 mx-auto m-3">
                                    <button type="submit" class="btn btn-primary btn-block">Login</button>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer text-center">
                            Forgot your password? <a class="link-highlight emaillogin-tab-link" title="Email login">I forgot!</a>
                        </div>
                        <div class="modal-footer text-center">
                            Don't have an account? <a class="link-highlight register-tab-link" title="Register">Register</a>
                        </div>
                    </div>
                    <div id="modal-tab-register" class="tab-pane fade">
                        <div class="modal-header">
                            <h5 class="modal-title" id="modallogintitle2">Sign up with Hikari!</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">×</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <form class="preform" action="https://hikari.gg/register" method="post">
                                <input type="hidden" name="csrf_test_name" value="c9c11b94479b34a1f5006f054c18b047">                                <div class="form-floating mb-2">
                                    <input type="email" class="form-control" id="floatingEmailInput" name="email" inputmode="email" autocomplete="email" placeholder="Email Address" value="" required="">
                                </div>
                                <div class="form-floating mb-4">
                                    <input type="text" class="form-control" id="floatingUsernameInput" name="username" inputmode="text" autocomplete="username" placeholder="Username" value="" required="">
                                </div>
                                <div class="form-floating mb-2">
                                    <input type="password" class="form-control" id="floatingPasswordInput" name="password" inputmode="text" autocomplete="new-password" placeholder="Password" required="">
                                </div>
                                <div class="form-floating mb-5">
                                    <input type="password" class="form-control" id="floatingPasswordConfirmInput" name="password_confirm" inputmode="text" autocomplete="new-password" placeholder="Password (again)" required="">
                                </div>
                                <div class="d-grid col-12 col-md-8 mx-auto m-3">
                                    <button type="submit" class="btn btn-primary btn-block">Register</button>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer text-center">
                            Have an account? <a class="link-highlight login-tab-link" title="Login">Login</a>
                        </div>
                    </div>
                    <div id="modal-tab-emaillogin" class="tab-pane fade">
                        <div class="modal-header">
                            <h5 class="modal-title" id="modallogintitle2">I forgot my password!</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">×</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <form class="preform" action="https://hikari.gg/login/magic-link" method="post">
                                <input type="hidden" name="csrf_test_name" value="c9c11b94479b34a1f5006f054c18b047">                                <div class="form-floating mb-2">
                                    <input type="email" class="form-control" id="floatingEmailInput" name="email" autocomplete="email" placeholder="Email Address" value="" required="">
                                </div>
                                <div class="d-grid col-12 col-md-8 mx-auto m-3">
                                    <button type="submit" class="btn btn-primary btn-block">Send</button>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer text-center">
                            Don't have an account? <a class="link-highlight register-tab-link" title="Register">Register</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
<div class="qtip qtip-default qtip-pos-tl qtip-fixed qtip-pos-bl qtip-focus" style="width: 300px; z-index: 15064;">
    <div class="qtip-tip"><canvas></canvas></div>
</div>        <div class="clearfix"></div>
        <div id="main-wrapper" class="layout-page layout-page-detail layout-page-watchtv">
            <div id="ani_detail">
			    <style>
        .banner {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 15px;
            background-color: #2c2f33; /* Dark background */
            color: white;
            font-family: Arial, sans-serif;
            font-size: 16px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .banner .icon {
            font-size: 24px;
            margin-right: 10px;
            color: #7289da; /* Discord blue color */
        }
        .banner a {
            color: #7289da; /* Discord blue color */
            text-decoration: none;
            font-weight: bold;
        }
        .banner a:hover {
            text-decoration: underline;
        }
		
		    /* Hide the banner on screens smaller than 768px */
		@media (max-width: 768px) {
        .banner {
            display: none;
        }
    }
	
    </style>
                <div class="banner">
                    <i class="fab fa-discord icon"></i>
                    If you find any broken subtitles, please&nbsp;
                    <a href="https://discord.gg/UAPNesVmQ3" target="_blank">join our Discord</a>
                    &nbsp;and report it.
                </div>

                <div class="ani_detail-stage">
                    <div class="container">
                        <div class="anis-watch-wrap">
                            <div class="prebreadcrumb">
                                <nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem" class="breadcrumb-item">
            <a itemprop="item" href="/"><span itemprop="name">Home</span></a>
            <meta itemprop="position" content="1">
        </li>
        <li itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem" class="breadcrumb-item">
            <a itemprop="item" href="https://hikari.gg/type/tv"><span itemprop="name">TV</span></a>
            <meta itemprop="position" content="2">
        </li>
        <li itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem" class="breadcrumb-item" aria-current="page">
            <a itemprop="item"><span itemprop="name">Dungeon ni Deai wo Motomeru no wa Machigatteiru Darou ka V: Houjou no Megami-hen</span></a>
            <meta itemprop="position" content="3">
        </li>
    </ol>
</nav>                            </div>
                            <div class="anis-watch anis-watch-tv">
                                <div class="watch-player">
    <div class="player-frame">
        <div id="iframe-embed">
            <div class="loading-relative loading-box" id="embed-loading">
                <div class="loading">
                    <div class="span1"></div>
                    <div class="span2"></div>
                    <div class="span3"></div>
                </div>
            </div>
        </div>
    </div>
    <div class="player-controls">
        <div class="pc-item pc-resize">
            <a href="javascript:;" id="media-resize" class="btn btn-sm"><i class="fas fa-expand mr-1"></i>Expand</a>
        </div>
        <div class="pc-item pc-toggle pc-light">
            <div id="turn-off-light" class="toggle-basic">
                <span class="tb-name"><i class="fas fa-lightbulb mr-2"></i>Light</span>
                <span class="tb-result"></span>
            </div>
        </div>
        <div class="pc-report" style="float: right;">
            <div class="pc-item pc-control block-report">
    <a href="#" id="reportBtn" class="btn btn-primary"><i class="fa-solid fa-bug"></i></a>
</div>
<div id="reportModal" class="epreportmodal">
    <div class="epreportmodalmodal-content">
        <span class="close">×</span>
        <h2 style="color: black;">Report an Issue</h2>
        <form action="https://hikari.gg/report/episode-report" method="post" style="max-width:100%;max-height:100%;overflow:auto;">
            <label for="report_url" style="width: 100%; color: black; font-size: larger;">Report Episode URL</label>
            <input type="text" id="report_url" name="report_url">
            <label for="report_type" style="width: 100%; color: black; font-size: larger;">Report Type:</label>
            <select id="report_type" name="report_type" style="width: 100%; display:block; margin-bottom: 10px; font-size: larger;">
                <option value="" selected="selected" disabled="">Select a report type</option>
                <option value="1" style="color: black;">Broken Episode</option>
                <option value="2" style="color: black;">Broken Embed</option>
                <option value="3" style="color: black;">Broken Sound</option>
            </select>
            <label for="report_head" style="width: 100%; color: black; font-size: larger;">Input Head:</label>
            <input type="text" id="report_head" name="report_head" style="width: 100%; color: black; display:block; margin-bottom: 10px; font-size: larger;">
            <label for="report_content" style="width: 100%; color: black; font-size: larger;">Input Text:</label>
            <textarea id="report_content" name="report_content" style="width: 100%; color: black; display:block; margin-bottom: 10px; font-size: larger;"></textarea>
            <input type="submit" value="Submit" style="color: black; font-size: larger;">
        </form>
    </div>
</div>

<style>
    .epreportmodal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        width: 25%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
    }

    .epreportmodalmodal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 100%;
        height: 100%;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

    .close:hover,
    .close:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
    }
</style>

<script>
    document.getElementById("reportBtn").addEventListener("click", function(event) {
        event.preventDefault();
        document.getElementById("reportModal").style.display = "block";
    });

    document.getElementsByClassName("close")[0].addEventListener("click", function() {
        document.getElementById("reportModal").style.display = "none";
    });

    window.addEventListener("click", function(event) {
        if (event.target == document.getElementById("reportModal")) {
            document.getElementById("reportModal").style.display = "none";
        }
    });
</script>        </div>

        <div class="pc-right">
            <div id="episode-prev-next"></div>
        </div>

        <div class="clearfix"></div>
    </div>
</div>                                <div id="fansub_translator"></div>
                                <div id="player-servers" class="player-servers"></div>
                                                                <div id="episodes-content">
                                    <div class="loading">
                                        <div class="span1"></div>
                                        <div class="span2"></div>
                                        <div class="span3"></div>
                                    </div>
                                    <div class="clearfix"></div>
                                </div>
                            </div>
								<div class="anis-watch-detail">
									<div class="anis-content">
                                    <div class="anisc-poster">
<div class="film-poster" style="position: relative; width: 190px;">
    <img src="https://cdn.myanimelist.net/images/anime/1299/144738l.jpg" class="film-poster-img" style="width: 100%; height: auto; border-radius: 6px;">
</div>
    </div>
<div class="anisc-detail">
    <div class="film-name">
        <h7><a href="/anime/57066/Dungeon_ni_Deai_wo_Motomeru_no_wa_Machigatteiru_Darou_ka_V_Houjou_no_Megami-hen" class="text-white dynamic-name" title="">Dungeon ni Deai wo Motomeru no wa Machigatteiru Darou ka V: Houjou no Megami-hen</a></h7>
    </div>
    <div class="film-stats">
        <div class="tick" style="padding: 0 110px">
            <div class="tick-item tick-sub"><i class="fas fa-closed-captioning mr-1"></i>11</div><div class="tick-item tick-dub"><i class="fas fa-microphone mr-1"></i>5</div><div class="tick-item tick-turk"><i class="fas fa-globe-asia mr-1"></i>4</div>            <div class="tick-item tick-eps">11 Episodes</div>
        </div>
    </div>
    <div class="clearfix"></div>
<!-- Example inline style for a "description box" -->
<style>
  .film-description-box {
    background-color: #2c2c2c; /* Dark background color */
    border-radius: 8px;
    padding: 15px;
    margin-top: 15px;
  }
  .film-description-box h6 {
    margin-bottom: 10px;
    font-weight: bold;
    font-size: 15px;
    color: #fff;
  }
  .film-description-box .text {
    color: #ccc; /* Slightly lighter text color */
    line-height: 1.6;
  }
</style>

<!-- Wrap your existing film-description div in a "film-description-box" -->
<div class="film-description m-hide" style="padding: 0 110px">
  <div class="film-description-box">
    <h6>Description</h6>
    <div class="text">
      Goddess Festival—A fruit festival that brings the labyrinth city of Orario to life. Goddesses symbolizing fertility are enshrined on the altar, and among them is the Goddess of Beauty. Bell Cranel, who has survived and returned to his daily life from the dead depths of the dungeon, is here and rea...    </div>
  </div>
  <div id="ms-position"></div>
</div>
    </div>
    <div class="block">
    </div>                                </div>
                            </div>
						<br><br>
                </div>
            </div>
            <div class="container">
                <div id="main-content">
                    <div id="disqus_thread"><iframe id="dsq-app9254" name="dsq-app9254" allowtransparency="true" frameborder="0" scrolling="no" tabindex="0" title="Disqus" width="100%" src="https://disqus.com/embed/comments/?base=default&amp;f=hikaritv&amp;t_u=https%3A%2F%2Fwatch.hikaritv.xyz%2Fwatch%3Fanime%3DDungeon_ni_Deai_wo_Motomeru_no_wa_Machigatteiru_Darou_ka_V_Houjou_no_Megami-hen%26uid%3D57066%26eps%3D3&amp;t_d=Hikari&amp;t_t=Hikari&amp;s_o=default#version=2f54d43b17c298fa4a839abab8ed97ea" style="width: 1px !important; min-width: 100% !important; border: none !important; overflow: hidden !important; height: 616px !important;" horizontalscrolling="no" verticalscrolling="no"></iframe></div>
<script>
    function loadDisqus() {
        // Remove existing Disqus iframe and script if present
        var disqusFrame = document.getElementById('dsq-embed-scr');
        if (disqusFrame) {
            disqusFrame.remove();
        }

        // Reinitialize Disqus configuration
        var disqus_config = function () {
            var params = new URLSearchParams(window.location.search);  // Extract URL parameters
            var anime = params.get('anime');                         // Extract 'anime' parameter
            var uid = params.get('uid');                             // Extract 'uid' parameter
            var eps = params.get('eps');                             // Extract 'eps' parameter

            this.page.url = window.location.href;  // Set the current page URL dynamically
            this.page.identifier = `${anime}_${uid}_${eps}`;  // Unique identifier combining anime, uid, eps
        };

        // Recreate the Disqus embed script dynamically
        var d = document, s = d.createElement('script');
        s.src = 'https://hikaritv.disqus.com/embed.js';
        s.id = 'dsq-embed-scr'; // Set an ID to make it easier to remove later
        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
    }

    // Load Disqus for the first time
    loadDisqus();

    // Reload Disqus every 5 minutes (300,000 milliseconds)
    setInterval(loadDisqus, 60000); // 300000 ms = 5 minutes
</script>
<noscript>Please enable JavaScript to view the comments powered by Disqus.</noscript><br><br>
                    <style>
  /* Rounded corners for anime posters */
.film-poster img {
    border-radius: 10px; /* Adjust the value to change the roundness */
    overflow: hidden; /* Ensure content doesn't overflow the rounded corners */
}

/* Rounded corners for the entire container */
.flw-item {
    border-radius: 10px; /* Same value for consistency */
    overflow: hidden; /* Ensure content stays within the rounded corners */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Optional: Add some shadow for a lifted effect */
}

/* Optional: Rounded corners for rating and episode ticks */
.tick {
    border-radius: 5px; /* Slightly smaller rounding for these elements */
}
    
  /* General font settings for the section */
  section.block_area {
      font-family: 'Poppins', Arial, sans-serif; /* Set Poppins as the primary font and Arial as fallback */
      font-size: 12px;
      font-weight: 600;
  }

  /* Font styling for the headings */
  .block_area-header .cat-heading {
      font-size: 24px;
      font-weight: 600;
      color: #ffffff; /* Ensure white color for the heading */
  }

  /* Font styling for anime titles */
  .film-name a {
      font-size: 16px; /* Adjust size as needed */
      font-weight: 600; /* Semi-bold for better emphasis */
      color: #ffffff; /* White for readability */
      text-decoration: none; /* No underline */
      font-family: 'Poppins', Arial, sans-serif; /* Apply the font */
  }

  .film-name a:hover {
      color: #ffcc00; /* Highlight color on hover */
  }

  /* Font styling for additional information */
  .fd-infor, .fd-infor .fdi-item {
      font-size: 14px; /* Slightly smaller size for supplementary info */
      font-weight: 400; /* Regular weight for readability */
      color: #cccccc; /* Light gray */
      font-family: 'Poppins', Arial, sans-serif; /* Apply the font */
  }

  /* Font styling for ratings and episode ticks */
  .tick {
      font-size: 12px; /* Smaller size for badges */
      font-weight: 700; /* Bold for emphasis */
      color: #ffffff; /* White text */
      padding: 2px 5px;
      border-radius: 3px; /* Rounded corners */
      font-family: 'Poppins', Arial, sans-serif; /* Apply the font */
  }

  /* Additional text details for responsiveness */
  @media screen and (max-width: 576px) {
      .film-name a {
          font-size: 14px; /* Reduce size on smaller screens */
      }
      .fd-infor, .fd-infor .fdi-item {
          font-size: 12px; /* Adjust supplementary info size */
      }
  }
</style>

<section class="block_area block_area_home">
    <div class="block_area-header">
        <div class="float-left bah-heading mr-4">
            <h2 class="cat-heading" style="color: white;">Recommended</h2>
        </div>
        <div class="clearfix"></div>
    </div>
    <div class="tab-content">
        <div class="block_area-content block_area-list film_list film_list-grid">
            <!-- Swiper Container -->
            <div class="swiper-container swiper-container-initialized swiper-container-horizontal">
                <div class="swiper-wrapper" style="transform: translate3d(0px, 0px, 0px);">
                                            <div class="swiper-slide swiper-slide-active" style="width: 216.875px; margin-right: 5px;">
                            <div class="flw-item">
                                <div class="film-poster">
                                                                        <!-- Display Episode Count -->
                                    <div class="tick tick-eps">
                                        1 Episodes
                                    </div>
                                    <!-- Anime Poster Image -->
                                    <img class="film-poster-img lazyload" src="https://cdn.myanimelist.net/images/anime/1273/137427l.jpg" alt="Watashi wa Saikyou" loading="lazy" <!--="" native="" lazy="" --="">
                                    &gt;
                                    <!-- Play Button Link -->
                                    <a href="/anime/52871/Watashi_wa_Saikyou" class="film-poster-ahref" data-id="52871" aria-label="Play Watashi wa Saikyou">
                                        <i class="fas fa-play"></i>
                                    </a>
                                </div>
                                <div class="film-detail">
                                    <h3 class="film-name">
                                        <a href="/anime/52871/Watashi_wa_Saikyou" class="dynamic-name">
                                            Watashi wa Saikyou                                        </a>
                                    </h3>
                                    <div class="fd-infor">
                                                                                        <span class="fdi-item fdi-duration">
                                                    22 Jun, 2022                                                </span>
                                                                            </div>
                                </div>
                            </div>
                        </div>
                                            <div class="swiper-slide swiper-slide-next" style="width: 216.875px; margin-right: 5px;">
                            <div class="flw-item">
                                <div class="film-poster">
                                                                            <div class="tick tick-rate">
                                            R+                                        </div>
                                                                        <!-- Display Episode Count -->
                                    <div class="tick tick-eps">
                                        4 Episodes
                                    </div>
                                    <!-- Anime Poster Image -->
                                    <img class="film-poster-img lazyload" src="https://cdn.myanimelist.net/images/anime/1926/94933l.jpg" alt="Akai Hayate" loading="lazy" <!--="" native="" lazy="" --="">
                                    &gt;
                                    <!-- Play Button Link -->
                                    <a href="/anime/4923/Akai_Hayate" class="film-poster-ahref" data-id="4923" aria-label="Play Akai Hayate">
                                        <i class="fas fa-play"></i>
                                    </a>
                                </div>
                                <div class="film-detail">
                                    <h3 class="film-name">
                                        <a href="/anime/4923/Akai_Hayate" class="dynamic-name">
                                            Akai Hayate                                        </a>
                                    </h3>
                                    <div class="fd-infor">
                                                                                        <span class="fdi-item fdi-duration">
                                                    21 May, 1991                                                </span>
                                                                            </div>
                                </div>
                            </div>
                        </div>
                                            <div class="swiper-slide" style="width: 216.875px; margin-right: 5px;">
                            <div class="flw-item">
                                <div class="film-poster">
                                                                        <!-- Display Episode Count -->
                                    <div class="tick tick-eps">
                                        1 Episodes
                                    </div>
                                    <!-- Anime Poster Image -->
                                    <img class="film-poster-img lazyload" src="https://cdn.myanimelist.net/images/anime/1687/117356l.jpg" alt="Battle Fighters Garou Densetsu" loading="lazy" <!--="" native="" lazy="" --="">
                                    &gt;
                                    <!-- Play Button Link -->
                                    <a href="/anime/1799/Battle_Fighters_Garou_Densetsu" class="film-poster-ahref" data-id="1799" aria-label="Play Battle Fighters Garou Densetsu">
                                        <i class="fas fa-play"></i>
                                    </a>
                                </div>
                                <div class="film-detail">
                                    <h3 class="film-name">
                                        <a href="/anime/1799/Battle_Fighters_Garou_Densetsu" class="dynamic-name">
                                            Battle Fighters Garou Densetsu                                        </a>
                                    </h3>
                                    <div class="fd-infor">
                                                                                        <span class="fdi-item fdi-duration">
                                                    23 Dec, 1992                                                </span>
                                                                            </div>
                                </div>
                            </div>
                        </div>
                                            <div class="swiper-slide" style="width: 216.875px; margin-right: 5px;">
                            <div class="flw-item">
                                <div class="film-poster">
                                                                        <!-- Display Episode Count -->
                                    <div class="tick tick-eps">
                                        12 Episodes
                                    </div>
                                    <!-- Anime Poster Image -->
                                    <img class="film-poster-img lazyload" src="https://cdn.myanimelist.net/images/anime/1406/146839l.jpg" alt="Farmagia" loading="lazy" <!--="" native="" lazy="" --="">
                                    &gt;
                                    <!-- Play Button Link -->
                                    <a href="/anime/59113/Farmagia" class="film-poster-ahref" data-id="59113" aria-label="Play Farmagia">
                                        <i class="fas fa-play"></i>
                                    </a>
                                </div>
                                <div class="film-detail">
                                    <h3 class="film-name">
                                        <a href="/anime/59113/Farmagia" class="dynamic-name">
                                            Farmagia                                        </a>
                                    </h3>
                                    <div class="fd-infor">
                                                                                        <span class="fdi-item fdi-duration">
                                                    10 Jan, 2025                                                </span>
                                                                            </div>
                                </div>
                            </div>
                        </div>
                                            <div class="swiper-slide" style="width: 216.875px; margin-right: 5px;">
                            <div class="flw-item">
                                <div class="film-poster">
                                                                            <div class="tick tick-rate">
                                            R+                                        </div>
                                                                        <!-- Display Episode Count -->
                                    <div class="tick tick-eps">
                                        12 Episodes
                                    </div>
                                    <!-- Anime Poster Image -->
                                    <img class="film-poster-img lazyload" src="https://cdn.myanimelist.net/images/anime/1670/112160l.jpg" alt="Bikini Warriors" loading="lazy" <!--="" native="" lazy="" --="">
                                    &gt;
                                    <!-- Play Button Link -->
                                    <a href="/anime/30782/Bikini_Warriors" class="film-poster-ahref" data-id="30782" aria-label="Play Bikini Warriors">
                                        <i class="fas fa-play"></i>
                                    </a>
                                </div>
                                <div class="film-detail">
                                    <h3 class="film-name">
                                        <a href="/anime/30782/Bikini_Warriors" class="dynamic-name">
                                            Bikini Warriors                                        </a>
                                    </h3>
                                    <div class="fd-infor">
                                                                                        <span class="fdi-item fdi-duration">
                                                    8 Jul, 2015                                                </span>
                                                                            </div>
                                </div>
                            </div>
                        </div>
                                            <div class="swiper-slide" style="width: 216.875px; margin-right: 5px;">
                            <div class="flw-item">
                                <div class="film-poster">
                                                                        <!-- Display Episode Count -->
                                    <div class="tick tick-eps">
                                        12 Episodes
                                    </div>
                                    <!-- Anime Poster Image -->
                                    <img class="film-poster-img lazyload" src="https://cdn.myanimelist.net/images/anime/1680/110451l.jpg" alt="Eizouken ni wa Te wo Dasu na!" loading="lazy" <!--="" native="" lazy="" --="">
                                    &gt;
                                    <!-- Play Button Link -->
                                    <a href="/anime/39792/Eizouken_ni_wa_Te_wo_Dasu_na" class="film-poster-ahref" data-id="39792" aria-label="Play Eizouken ni wa Te wo Dasu na!">
                                        <i class="fas fa-play"></i>
                                    </a>
                                </div>
                                <div class="film-detail">
                                    <h3 class="film-name">
                                        <a href="/anime/39792/Eizouken_ni_wa_Te_wo_Dasu_na" class="dynamic-name">
                                            Eizouken ni wa Te wo Dasu na!                                        </a>
                                    </h3>
                                    <div class="fd-infor">
                                                                                        <span class="fdi-item fdi-duration">
                                                    6 Jan, 2020                                                </span>
                                                                            </div>
                                </div>
                            </div>
                        </div>
                                            <div class="swiper-slide" style="width: 216.875px; margin-right: 5px;">
                            <div class="flw-item">
                                <div class="film-poster">
                                                                        <!-- Display Episode Count -->
                                    <div class="tick tick-eps">
                                        1 Episodes
                                    </div>
                                    <!-- Anime Poster Image -->
                                    <img class="film-poster-img lazyload" src="https://cdn.myanimelist.net/images/anime/3/14379l.jpg" alt="Tetsuwan Birdy Decode: The Cipher" loading="lazy" <!--="" native="" lazy="" --="">
                                    &gt;
                                    <!-- Play Button Link -->
                                    <a href="/anime/6380/Tetsuwan_Birdy_Decode_The_Cipher" class="film-poster-ahref" data-id="6380" aria-label="Play Tetsuwan Birdy Decode: The Cipher">
                                        <i class="fas fa-play"></i>
                                    </a>
                                </div>
                                <div class="film-detail">
                                    <h3 class="film-name">
                                        <a href="/anime/6380/Tetsuwan_Birdy_Decode_The_Cipher" class="dynamic-name">
                                            Tetsuwan Birdy Decode: The Cipher                                        </a>
                                    </h3>
                                    <div class="fd-infor">
                                                                                        <span class="fdi-item fdi-duration">
                                                    22 Jul, 2009                                                </span>
                                                                            </div>
                                </div>
                            </div>
                        </div>
                                            <div class="swiper-slide" style="width: 216.875px; margin-right: 5px;">
                            <div class="flw-item">
                                <div class="film-poster">
                                                                        <!-- Display Episode Count -->
                                    <div class="tick tick-eps">
                                        13 Episodes
                                    </div>
                                    <!-- Anime Poster Image -->
                                    <img class="film-poster-img lazyload" src="https://cdn.myanimelist.net/images/anime/1415/102477l.jpg" alt="Orange" loading="lazy" <!--="" native="" lazy="" --="">
                                    &gt;
                                    <!-- Play Button Link -->
                                    <a href="/anime/32729/Orange" class="film-poster-ahref" data-id="32729" aria-label="Play Orange">
                                        <i class="fas fa-play"></i>
                                    </a>
                                </div>
                                <div class="film-detail">
                                    <h3 class="film-name">
                                        <a href="/anime/32729/Orange" class="dynamic-name">
                                            Orange                                        </a>
                                    </h3>
                                    <div class="fd-infor">
                                                                                        <span class="fdi-item fdi-duration">
                                                    4 Jul, 2016                                                </span>
                                                                            </div>
                                </div>
                            </div>
                        </div>
                                            <div class="swiper-slide" style="width: 216.875px; margin-right: 5px;">
                            <div class="flw-item">
                                <div class="film-poster">
                                                                        <!-- Display Episode Count -->
                                    <div class="tick tick-eps">
                                        12 Episodes
                                    </div>
                                    <!-- Anime Poster Image -->
                                    <img class="film-poster-img lazyload" src="https://cdn.myanimelist.net/images/anime/1696/136634l.jpg" alt="Kanojo, Okarishimasu 3rd Season" loading="lazy" <!--="" native="" lazy="" --="">
                                    &gt;
                                    <!-- Play Button Link -->
                                    <a href="/anime/53050/Kanojo_Okarishimasu_3rd_Season" class="film-poster-ahref" data-id="53050" aria-label="Play Kanojo, Okarishimasu 3rd Season">
                                        <i class="fas fa-play"></i>
                                    </a>
                                </div>
                                <div class="film-detail">
                                    <h3 class="film-name">
                                        <a href="/anime/53050/Kanojo_Okarishimasu_3rd_Season" class="dynamic-name">
                                            Kanojo, Okarishimasu 3rd Season                                        </a>
                                    </h3>
                                    <div class="fd-infor">
                                                                                        <span class="fdi-item fdi-duration">
                                                    8 Jul, 2023                                                </span>
                                                                            </div>
                                </div>
                            </div>
                        </div>
                                            <div class="swiper-slide" style="width: 216.875px; margin-right: 5px;">
                            <div class="flw-item">
                                <div class="film-poster">
                                                                            <div class="tick tick-rate">
                                            R-17+                                        </div>
                                                                        <!-- Display Episode Count -->
                                    <div class="tick tick-eps">
                                        26 Episodes
                                    </div>
                                    <!-- Anime Poster Image -->
                                    <img class="film-poster-img lazyload" src="https://cdn.myanimelist.net/images/anime/1286/99889l.jpg" alt="Kimetsu no Yaiba" loading="lazy" <!--="" native="" lazy="" --="">
                                    &gt;
                                    <!-- Play Button Link -->
                                    <a href="/anime/38000/Kimetsu_no_Yaiba" class="film-poster-ahref" data-id="38000" aria-label="Play Kimetsu no Yaiba">
                                        <i class="fas fa-play"></i>
                                    </a>
                                </div>
                                <div class="film-detail">
                                    <h3 class="film-name">
                                        <a href="/anime/38000/Kimetsu_no_Yaiba" class="dynamic-name">
                                            Kimetsu no Yaiba                                        </a>
                                    </h3>
                                    <div class="fd-infor">
                                                                                        <span class="fdi-item fdi-duration">
                                                    6 Apr, 2019                                                </span>
                                                                            </div>
                                </div>
                            </div>
                        </div>
                                            <div class="swiper-slide" style="width: 216.875px; margin-right: 5px;">
                            <div class="flw-item">
                                <div class="film-poster">
                                                                        <!-- Display Episode Count -->
                                    <div class="tick tick-eps">
                                        1 Episodes
                                    </div>
                                    <!-- Anime Poster Image -->
                                    <img class="film-poster-img lazyload" src="https://cdn.myanimelist.net/images/anime/8/80064l.jpg" alt="Macross 7 Movie: Ginga ga Ore wo Yondeiru!" loading="lazy" <!--="" native="" lazy="" --="">
                                    &gt;
                                    <!-- Play Button Link -->
                                    <a href="/anime/1400/Macross_7_Movie_Ginga_ga_Ore_wo_Yondeiru" class="film-poster-ahref" data-id="1400" aria-label="Play Macross 7 Movie: Ginga ga Ore wo Yondeiru!">
                                        <i class="fas fa-play"></i>
                                    </a>
                                </div>
                                <div class="film-detail">
                                    <h3 class="film-name">
                                        <a href="/anime/1400/Macross_7_Movie_Ginga_ga_Ore_wo_Yondeiru" class="dynamic-name">
                                            Macross 7 Movie: Ginga ga Ore wo Yondeiru!                                        </a>
                                    </h3>
                                    <div class="fd-infor">
                                                                                        <span class="fdi-item fdi-duration">
                                                    30 Sep, 1995                                                </span>
                                                                            </div>
                                </div>
                            </div>
                        </div>
                                            <div class="swiper-slide" style="width: 216.875px; margin-right: 5px;">
                            <div class="flw-item">
                                <div class="film-poster">
                                                                            <div class="tick tick-rate">
                                            R-17+                                        </div>
                                                                        <!-- Display Episode Count -->
                                    <div class="tick tick-eps">
                                        13 Episodes
                                    </div>
                                    <!-- Anime Poster Image -->
                                    <img class="film-poster-img lazyload" src="https://cdn.myanimelist.net/images/anime/1296/142674l.jpg" alt="Panty &amp; Stocking with Garterbelt" loading="lazy" <!--="" native="" lazy="" --="">
                                    &gt;
                                    <!-- Play Button Link -->
                                    <a href="/anime/8795/Panty_Stocking_with_Garterbelt" class="film-poster-ahref" data-id="8795" aria-label="Play Panty &amp; Stocking with Garterbelt">
                                        <i class="fas fa-play"></i>
                                    </a>
                                </div>
                                <div class="film-detail">
                                    <h3 class="film-name">
                                        <a href="/anime/8795/Panty_Stocking_with_Garterbelt" class="dynamic-name">
                                            Panty &amp; Stocking with Garterbelt                                        </a>
                                    </h3>
                                    <div class="fd-infor">
                                                                                        <span class="fdi-item fdi-duration">
                                                    2 Oct, 2010                                                </span>
                                                                            </div>
                                </div>
                            </div>
                        </div>
                                            <div class="swiper-slide" style="width: 216.875px; margin-right: 5px;">
                            <div class="flw-item">
                                <div class="film-poster">
                                                                            <div class="tick tick-rate">
                                            R+                                        </div>
                                                                        <!-- Display Episode Count -->
                                    <div class="tick tick-eps">
                                        24 Episodes
                                    </div>
                                    <!-- Anime Poster Image -->
                                    <img class="film-poster-img lazyload" src="https://cdn.myanimelist.net/images/anime/3/73995l.jpg" alt="Kiddy Grade" loading="lazy" <!--="" native="" lazy="" --="">
                                    &gt;
                                    <!-- Play Button Link -->
                                    <a href="/anime/274/Kiddy_Grade" class="film-poster-ahref" data-id="274" aria-label="Play Kiddy Grade">
                                        <i class="fas fa-play"></i>
                                    </a>
                                </div>
                                <div class="film-detail">
                                    <h3 class="film-name">
                                        <a href="/anime/274/Kiddy_Grade" class="dynamic-name">
                                            Kiddy Grade                                        </a>
                                    </h3>
                                    <div class="fd-infor">
                                                                                        <span class="fdi-item fdi-duration">
                                                    9 Oct, 2002                                                </span>
                                                                            </div>
                                </div>
                            </div>
                        </div>
                                            <div class="swiper-slide" style="width: 216.875px; margin-right: 5px;">
                            <div class="flw-item">
                                <div class="film-poster">
                                                                        <!-- Display Episode Count -->
                                    <div class="tick tick-eps">
                                        12 Episodes
                                    </div>
                                    <!-- Anime Poster Image -->
                                    <img class="film-poster-img lazyload" src="https://cdn.myanimelist.net/images/anime/3/88434l.jpg" alt="Shokugeki no Souma: San no Sara" loading="lazy" <!--="" native="" lazy="" --="">
                                    &gt;
                                    <!-- Play Button Link -->
                                    <a href="/anime/35788/Shokugeki_no_Souma_San_no_Sara" class="film-poster-ahref" data-id="35788" aria-label="Play Shokugeki no Souma: San no Sara">
                                        <i class="fas fa-play"></i>
                                    </a>
                                </div>
                                <div class="film-detail">
                                    <h3 class="film-name">
                                        <a href="/anime/35788/Shokugeki_no_Souma_San_no_Sara" class="dynamic-name">
                                            Shokugeki no Souma: San no Sara                                        </a>
                                    </h3>
                                    <div class="fd-infor">
                                                                                        <span class="fdi-item fdi-duration">
                                                    4 Oct, 2017                                                </span>
                                                                            </div>
                                </div>
                            </div>
                        </div>
                                            <div class="swiper-slide" style="width: 216.875px; margin-right: 5px;">
                            <div class="flw-item">
                                <div class="film-poster">
                                                                            <div class="tick tick-rate">
                                            R-17+                                        </div>
                                                                        <!-- Display Episode Count -->
                                    <div class="tick tick-eps">
                                        24 Episodes
                                    </div>
                                    <!-- Anime Poster Image -->
                                    <img class="film-poster-img lazyload" src="https://cdn.myanimelist.net/images/anime/5/30238l.jpg" alt="Mawaru Penguindrum" loading="lazy" <!--="" native="" lazy="" --="">
                                    &gt;
                                    <!-- Play Button Link -->
                                    <a href="/anime/10721/Mawaru_Penguindrum" class="film-poster-ahref" data-id="10721" aria-label="Play Mawaru Penguindrum">
                                        <i class="fas fa-play"></i>
                                    </a>
                                </div>
                                <div class="film-detail">
                                    <h3 class="film-name">
                                        <a href="/anime/10721/Mawaru_Penguindrum" class="dynamic-name">
                                            Mawaru Penguindrum                                        </a>
                                    </h3>
                                    <div class="fd-infor">
                                                                                        <span class="fdi-item fdi-duration">
                                                    8 Jul, 2011                                                </span>
                                                                            </div>
                                </div>
                            </div>
                        </div>
                                            <div class="swiper-slide" style="width: 216.875px; margin-right: 5px;">
                            <div class="flw-item">
                                <div class="film-poster">
                                                                            <div class="tick tick-rate">
                                            R+                                        </div>
                                                                        <!-- Display Episode Count -->
                                    <div class="tick tick-eps">
                                        1 Episodes
                                    </div>
                                    <!-- Anime Poster Image -->
                                    <img class="film-poster-img lazyload" src="https://cdn.myanimelist.net/images/anime/1058/94433l.jpg" alt="Mahou Shoujo Lyrical Nanoha: The Movie 1st" loading="lazy" <!--="" native="" lazy="" --="">
                                    &gt;
                                    <!-- Play Button Link -->
                                    <a href="/anime/4985/Mahou_Shoujo_Lyrical_Nanoha_The_Movie_1st" class="film-poster-ahref" data-id="4985" aria-label="Play Mahou Shoujo Lyrical Nanoha: The Movie 1st">
                                        <i class="fas fa-play"></i>
                                    </a>
                                </div>
                                <div class="film-detail">
                                    <h3 class="film-name">
                                        <a href="/anime/4985/Mahou_Shoujo_Lyrical_Nanoha_The_Movie_1st" class="dynamic-name">
                                            Mahou Shoujo Lyrical Nanoha: The Movie 1st                                        </a>
                                    </h3>
                                    <div class="fd-infor">
                                                                                        <span class="fdi-item fdi-duration">
                                                    23 Jan, 2010                                                </span>
                                                                            </div>
                                </div>
                            </div>
                        </div>
                                            <div class="swiper-slide" style="width: 216.875px; margin-right: 5px;">
                            <div class="flw-item">
                                <div class="film-poster">
                                                                        <!-- Display Episode Count -->
                                    <div class="tick tick-eps">
                                        52 Episodes
                                    </div>
                                    <!-- Anime Poster Image -->
                                    <img class="film-poster-img lazyload" src="https://cdn.myanimelist.net/images/anime/1249/134561l.jpg" alt="Hakushon Daimaou" loading="lazy" <!--="" native="" lazy="" --="">
                                    &gt;
                                    <!-- Play Button Link -->
                                    <a href="/anime/2892/Hakushon_Daimaou" class="film-poster-ahref" data-id="2892" aria-label="Play Hakushon Daimaou">
                                        <i class="fas fa-play"></i>
                                    </a>
                                </div>
                                <div class="film-detail">
                                    <h3 class="film-name">
                                        <a href="/anime/2892/Hakushon_Daimaou" class="dynamic-name">
                                            Hakushon Daimaou                                        </a>
                                    </h3>
                                    <div class="fd-infor">
                                                                                        <span class="fdi-item fdi-duration">
                                                    5 Oct, 1969                                                </span>
                                                                            </div>
                                </div>
                            </div>
                        </div>
                                            <div class="swiper-slide" style="width: 216.875px; margin-right: 5px;">
                            <div class="flw-item">
                                <div class="film-poster">
                                                                            <div class="tick tick-rate">
                                            R-17+                                        </div>
                                                                        <!-- Display Episode Count -->
                                    <div class="tick tick-eps">
                                        13 Episodes
                                    </div>
                                    <!-- Anime Poster Image -->
                                    <img class="film-poster-img lazyload" src="https://cdn.myanimelist.net/images/anime/10/75492l.jpg" alt="Mouryou no Hako" loading="lazy" <!--="" native="" lazy="" --="">
                                    &gt;
                                    <!-- Play Button Link -->
                                    <a href="/anime/4879/Mouryou_no_Hako" class="film-poster-ahref" data-id="4879" aria-label="Play Mouryou no Hako">
                                        <i class="fas fa-play"></i>
                                    </a>
                                </div>
                                <div class="film-detail">
                                    <h3 class="film-name">
                                        <a href="/anime/4879/Mouryou_no_Hako" class="dynamic-name">
                                            Mouryou no Hako                                        </a>
                                    </h3>
                                    <div class="fd-infor">
                                                                                        <span class="fdi-item fdi-duration">
                                                    8 Oct, 2008                                                </span>
                                                                            </div>
                                </div>
                            </div>
                        </div>
                                            <div class="swiper-slide" style="width: 216.875px; margin-right: 5px;">
                            <div class="flw-item">
                                <div class="film-poster">
                                                                        <!-- Display Episode Count -->
                                    <div class="tick tick-eps">
                                        3 Episodes
                                    </div>
                                    <!-- Anime Poster Image -->
                                    <img class="film-poster-img lazyload" src="https://cdn.myanimelist.net/images/anime/8/34993l.jpg" alt="Slayers Excellent" loading="lazy" <!--="" native="" lazy="" --="">
                                    &gt;
                                    <!-- Play Button Link -->
                                    <a href="/anime/1171/Slayers_Excellent" class="film-poster-ahref" data-id="1171" aria-label="Play Slayers Excellent">
                                        <i class="fas fa-play"></i>
                                    </a>
                                </div>
                                <div class="film-detail">
                                    <h3 class="film-name">
                                        <a href="/anime/1171/Slayers_Excellent" class="dynamic-name">
                                            Slayers Excellent                                        </a>
                                    </h3>
                                    <div class="fd-infor">
                                                                                        <span class="fdi-item fdi-duration">
                                                    25 Oct, 1998                                                </span>
                                                                            </div>
                                </div>
                            </div>
                        </div>
                                            <div class="swiper-slide" style="width: 216.875px; margin-right: 5px;">
                            <div class="flw-item">
                                <div class="film-poster">
                                                                        <!-- Display Episode Count -->
                                    <div class="tick tick-eps">
                                        22 Episodes
                                    </div>
                                    <!-- Anime Poster Image -->
                                    <img class="film-poster-img lazyload" src="https://cdn.myanimelist.net/images/anime/1467/90338l.jpg" alt="Cardcaptor Sakura: Clear Card-hen" loading="lazy" <!--="" native="" lazy="" --="">
                                    &gt;
                                    <!-- Play Button Link -->
                                    <a href="/anime/33354/Cardcaptor_Sakura_Clear_Card-hen" class="film-poster-ahref" data-id="33354" aria-label="Play Cardcaptor Sakura: Clear Card-hen">
                                        <i class="fas fa-play"></i>
                                    </a>
                                </div>
                                <div class="film-detail">
                                    <h3 class="film-name">
                                        <a href="/anime/33354/Cardcaptor_Sakura_Clear_Card-hen" class="dynamic-name">
                                            Cardcaptor Sakura: Clear Card-hen                                        </a>
                                    </h3>
                                    <div class="fd-infor">
                                                                                        <span class="fdi-item fdi-duration">
                                                    7 Jan, 2018                                                </span>
                                                                            </div>
                                </div>
                            </div>
                        </div>
                                            <div class="swiper-slide" style="width: 216.875px; margin-right: 5px;">
                            <div class="flw-item">
                                <div class="film-poster">
                                                                        <!-- Display Episode Count -->
                                    <div class="tick tick-eps">
                                        1 Episodes
                                    </div>
                                    <!-- Anime Poster Image -->
                                    <img class="film-poster-img lazyload" src="https://cdn.myanimelist.net/images/anime/2/88494l.jpg" alt="Hamaneko" loading="lazy" <!--="" native="" lazy="" --="">
                                    &gt;
                                    <!-- Play Button Link -->
                                    <a href="/anime/36622/Hamaneko" class="film-poster-ahref" data-id="36622" aria-label="Play Hamaneko">
                                        <i class="fas fa-play"></i>
                                    </a>
                                </div>
                                <div class="film-detail">
                                    <h3 class="film-name">
                                        <a href="/anime/36622/Hamaneko" class="dynamic-name">
                                            Hamaneko                                        </a>
                                    </h3>
                                    <div class="fd-infor">
                                                                                        <span class="fdi-item fdi-duration">
                                                    27 Nov, 2014                                                </span>
                                                                            </div>
                                </div>
                            </div>
                        </div>
                                            <div class="swiper-slide" style="width: 216.875px; margin-right: 5px;">
                            <div class="flw-item">
                                <div class="film-poster">
                                                                        <!-- Display Episode Count -->
                                    <div class="tick tick-eps">
                                        12 Episodes
                                    </div>
                                    <!-- Anime Poster Image -->
                                    <img class="film-poster-img lazyload" src="https://cdn.myanimelist.net/images/anime/4/68837l.jpg" alt="Military!" loading="lazy" <!--="" native="" lazy="" --="">
                                    &gt;
                                    <!-- Play Button Link -->
                                    <a href="/anime/26085/Military" class="film-poster-ahref" data-id="26085" aria-label="Play Military!">
                                        <i class="fas fa-play"></i>
                                    </a>
                                </div>
                                <div class="film-detail">
                                    <h3 class="film-name">
                                        <a href="/anime/26085/Military" class="dynamic-name">
                                            Military!                                        </a>
                                    </h3>
                                    <div class="fd-infor">
                                                                                        <span class="fdi-item fdi-duration">
                                                    7 Jan, 2015                                                </span>
                                                                            </div>
                                </div>
                            </div>
                        </div>
                                            <div class="swiper-slide" style="width: 216.875px; margin-right: 5px;">
                            <div class="flw-item">
                                <div class="film-poster">
                                                                        <!-- Display Episode Count -->
                                    <div class="tick tick-eps">
                                        68 Episodes
                                    </div>
                                    <!-- Anime Poster Image -->
                                    <img class="film-poster-img lazyload" src="https://cdn.myanimelist.net/images/anime/3/39489l.jpg" alt="Gekitou! Crush Gear Turbo" loading="lazy" <!--="" native="" lazy="" --="">
                                    &gt;
                                    <!-- Play Button Link -->
                                    <a href="/anime/3012/Gekitou_Crush_Gear_Turbo" class="film-poster-ahref" data-id="3012" aria-label="Play Gekitou! Crush Gear Turbo">
                                        <i class="fas fa-play"></i>
                                    </a>
                                </div>
                                <div class="film-detail">
                                    <h3 class="film-name">
                                        <a href="/anime/3012/Gekitou_Crush_Gear_Turbo" class="dynamic-name">
                                            Gekitou! Crush Gear Turbo                                        </a>
                                    </h3>
                                    <div class="fd-infor">
                                                                                        <span class="fdi-item fdi-duration">
                                                    7 Oct, 2001                                                </span>
                                                                            </div>
                                </div>
                            </div>
                        </div>
                                            <div class="swiper-slide" style="width: 216.875px; margin-right: 5px;">
                            <div class="flw-item">
                                <div class="film-poster">
                                                                        <!-- Display Episode Count -->
                                    <div class="tick tick-eps">
                                        1 Episodes
                                    </div>
                                    <!-- Anime Poster Image -->
                                    <img class="film-poster-img lazyload" src="https://cdn.myanimelist.net/images/anime/5/81968l.jpg" alt="Meitantei Conan: Episode One - Chiisaku Natta Meitantei" loading="lazy" <!--="" native="" lazy="" --="">
                                    &gt;
                                    <!-- Play Button Link -->
                                    <a href="/anime/34036/Meitantei_Conan_Episode_One_Chiisaku_Natta_Meitantei" class="film-poster-ahref" data-id="34036" aria-label="Play Meitantei Conan: Episode One - Chiisaku Natta Meitantei">
                                        <i class="fas fa-play"></i>
                                    </a>
                                </div>
                                <div class="film-detail">
                                    <h3 class="film-name">
                                        <a href="/anime/34036/Meitantei_Conan_Episode_One_-_Chiisaku_Natta_Meitantei" class="dynamic-name">
                                            Meitantei Conan: Episode One - Chiisaku Natta Meitantei                                        </a>
                                    </h3>
                                    <div class="fd-infor">
                                                                                        <span class="fdi-item fdi-duration">
                                                    9 Dec, 2016                                                </span>
                                                                            </div>
                                </div>
                            </div>
                        </div>
                                    </div>
            <span class="swiper-notification" aria-live="assertive" aria-atomic="true"></span></div>
            <div class="clearfix"></div>
        </div>
    </div></section>
    
    <!-- Swiper JS -->
    <script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>
    
    <!-- Initialization Script -->
    <script>
      document.addEventListener('DOMContentLoaded', function () {
        var swiper = new Swiper('.swiper-container', {
          // Enable looping
          loop: false,
          // Number of slides per view
          slidesPerView: 7, // Adjust number of visible items
          // Space between slides (in px)
          spaceBetween: 5,
          // Responsive breakpoints
          breakpoints: {
            // when window width is <= 1200px
            1200: {
              slidesPerView: 8,
              spaceBetween: 5
            },
            // when window width is <= 992px
            992: {
              slidesPerView: 5,
              spaceBetween: 5
            },
            // when window width is <= 768px
            768: {
              slidesPerView: 3,
              spaceBetween: 5
            },
            // when window width is <= 576px
            576: {
              slidesPerView: 2,
              spaceBetween: 5
            },
            320: {
              slidesPerView: 2,
              spaceBetween: 5
            }
          },
          // Pagination (dots)
          pagination: {
            el: '.swiper-pagination',
            clickable: true,
          },
          // Navigation arrows
          navigation: {
            nextEl: '.swiper-button-next',
            prevEl: '.swiper-button-prev',
          },
        });
      });
    </script>                    <div class="clearfix"></div>
                </div>
            </div>
        </div>
    </div>
    <!-- Footer Section -->
<div id="footer">
    <div class="footer-container">
        <!-- Logo Section -->
        <div class="logo-section">
            <a href="/home" id="logo" title="Home">
                <img src="/assest/images/logo.png" alt="Logo">
            </a>
            <p class="logo-text">
                Hikari does not store any files on it's servers. The media linked is hosted on 3rd party services.
            </p>
        </div>

        <!-- Footer About Section -->
        <div id="footer-about">
            <ul class="footer-links">
                <li><a href="/dmca" title="DMCA">DMCA</a></li>
                <li><a href="/tos" title="Terms of Service">Terms of Service</a></li>
            </ul>
            <p class="copyright">
                © Copyright 2025 Hikari. All Rights Reserved
            </p>
            <a href="https://discord.com/invite/UAPNesVmQ3" target="_blank" class="discord-link" style="margin-left: -15px; margin-bottom: 30px;">
            <i class="fa-brands fa-discord"></i>
        </a>
<div class="language-toggle" style="display: none">
  <label class="switch">
    <input type="checkbox" id="languageToggle">
    <span class="slider">
      <span class="lang-label" id="lang-en">EN</span>
      <span class="lang-label" id="lang-jp">JP</span>
    </span>
  </label>
</div>
        </div>
    </div>
</div>

<!-- CSS Styling -->
<style>
    /* Footer Background with Gray Fade-In Effect */
    #footer {
        position: relative; /* Establishes a positioning context for pseudo-elements */
        background: 
            /* Top Layer: Existing Gradient */
            linear-gradient(to right, rgba(108, 122, 137, 1) 30%, rgba(0, 0, 0, 0) 80%),
            /* Middle Layer: Gray Fade-In Gradient */
            linear-gradient(to bottom, rgba(108, 122, 137, 0.5), rgba(128, 128, 128, 0)),
        background-attachment: inherit;
        background-repeat: no-repeat;
        background-size: cover;
        padding: 20px 0; /* Adds vertical padding */
        color: #ffffff; /* Ensures text is readable against the background */
    }

    .footer-container {
    display: flex;
    justify-content: space-between; /* Items stay apart */
    align-items: flex-start; /* Align items to the top */
    max-width: 1850px; /* Max width for larger screens */
    margin: 0 auto; /* Center the footer horizontally */
    padding: 0 20px; /* Add padding for spacing */
    flex-wrap: nowrap; /* Prevent wrapping by default */
}

/* Logo Section */
.logo-section {
    display: flex;
    flex-direction: column; /* Stack logo and text vertically */
    align-items: flex-start; /* Align content to the left */
    max-width: 200px; /* Prevent logo section from growing too large */
    margin-bottom: 10px; /* Add spacing below logo section */
}

/* Logo Image */
#logo img {
    width: 100%; /* Make sure logo is responsive */
    height: auto; /* Keep image aspect ratio */
}

/* Logo Text */
.logo-text {
    margin-top: 10px;
    font-size: 14px;
    color: #ddd;
    line-height: 1.5;
    padding-left: 0; /* Remove extra padding */
    white-space: nowrap; /* Prevent wrapping by default */
    overflow: hidden; /* Hide overflow if too long */
    text-overflow: ellipsis; /* Show "..." if text overflows */
}

/* Footer About Section */
#footer-about {
    text-align: left; /* Align text to the left */
    flex: 1; /* Take up remaining space */
    margin-left: 20px; /* Add some spacing */
    text-align: right;
}

/* Footer Links */
.footer-links {
    list-style: none;
    padding: 0;
    margin: 0;
}

.footer-links li {
    margin-bottom: 10px; /* Add space between links */
}

.footer-links a {
    color: #ffffff;
    text-decoration: none;
    font-size: 16px;
    transition: color 0.3s ease;
}

.footer-links a:hover {
    text-decoration: underline;
    color: #dddddd;
}

/* Copyright */
.copyright {
    color: #cccccc;
    font-size: 14px;
}


    /* Responsive Design */
    @media (max-width: 768px) {
        .footer-container {
        flex-wrap: wrap; /* Enable wrapping */
    }

        .logo-section {
            align-items: flex-start;
            max-width: 100%;
            margin-bottom: 20px;
        }

        #footer-about {
        margin-left: 0; /* Remove margin for better alignment */
        margin-top: 10px; /* Add spacing for stacked layout */
        text-align: left;
    }

        .footer-links li {
            margin-bottom: 5px;
            text-align: left;
        }

        #logo img {
            margin-left: 0; /* Removes left margin on smaller screens */
            margin-bottom: 10px; /* Adds space below the logo */
        }

		.logo-text {
			font-size: 13px; /* Adjust font size for better readability */
			line-height: 1.5; /* Spacing between lines */
			max-width: 90%; /* Prevents text from stretching too wide */
			word-wrap: break-word; /* Ensures long words break instead of overflowing */
			white-space: normal; /* Allows text to wrap to the next line */
			overflow: visible; /* Makes sure no text is hidden */
		}
</style>    <div id="mask-overlay"></div>
    <script>
    function showHideItems(event, type, categoryId) {
        event.preventDefault();

        var items = document.querySelectorAll('[id^="items-category-' + type + '-"]');
        items.forEach(function(item) {
            var children = item.querySelectorAll('.item');
            children.forEach(function(child) {
                if (item.id === 'items-category-' + type + '-' + categoryId) {
                    child.style.display = child.style.display === "none" ? "block" : "none";
                } else {
                    child.style.display = "none";
                }
            });
        });

        var categories = document.querySelectorAll('[id^="category-' + type + '-"]');
        categories.forEach(function(category) {
            if (category.id !== 'category-' + type + '-' + categoryId) {
                category.style.display = category.style.display === "none" ? "block" : "none";
            }
        });
    }
</script>

<script>
    //Anime Listesini Çekmektedir. Bekleme süresi 1 saniyedir.
    const getAnimeList = async (uid) => {
        try {
            let data = await apiFetch(`ajax/episodelist/` + uid);
            document.getElementById('episodes-content').innerHTML = data.html;
            getEmbedServer(null, 57066, 3);
        } catch (error) {
            console.error('Error:', error);
        }
    }
    document.addEventListener('DOMContentLoaded', () => setTimeout(() => getAnimeList(57066), 2000));
</script>
<script>
    // Embed Server Listesini Alıyor. Ve Embed, Yorumlar, Rating ve Prev-Next Button çekmektedir.
    let currentRequest = null;
    let activeEps = null;

    const getEmbedServer = async (event, uid, eps) => {

        if (activeEps !== null) {
            document.querySelectorAll(`.ep-item-${activeEps}`).forEach(item => item.classList.remove('active'));
        }

        if (event) {
            event.preventDefault();
            document.querySelectorAll(`.ep-item-${eps}`).forEach(item => item.classList.add('active'));
            activeEps = eps;
        }

        let newUrl = '/watch?anime=Dungeon_ni_Deai_wo_Motomeru_no_wa_Machigatteiru_Darou_ka_V_Houjou_no_Megami-hen&uid=' + uid + '&eps=' + eps;
        history.pushState({
            path: newUrl
        }, '', newUrl);

        try {
            const thisRequest = {};
            currentRequest = thisRequest;

            let data = await apiFetch(`ajax/embedserver/${uid}/${eps}`);

            if (thisRequest === currentRequest) {
                if (document.querySelectorAll(`.ep-item-${eps}`).length > 0 && !event) {
                    document.querySelector(`.ep-item-${eps}`).classList.add('active');
                    activeEps = eps;
                }

                document.getElementById('player-servers').innerHTML = data.html;
                if (data.embedFirst) {
                    document.getElementById('iframe-embed').innerHTML =
                        '<div class="loading-relative loading-box" id="embed-loading">' +
                        '<div class="loading">' +
                        '<div class="span1"></div>' +
                        '<div class="span2"></div>' +
                        '<div class="span3"></div>' +
                        '</div>' +
                        '</div>';
                    getEmbed(uid, eps, data.embedFirst);
                    getRating(uid, eps);
                    getEpisodeCommentSystem(uid, eps);
                    getEpisodePrevNext(uid, eps);
                } else {
                    document.getElementById('embed-loading').innerHTML = '<img src="https://i.hizliresim.com/6bfh4ym.gif" style="width:100%; height:100%;position: absolute;">';
                    document.getElementById('actor-lists').innerHTML = '';
                }
            }
        } catch (error) {
            console.error('Error:', error);
        }
    }

    const getEpisodePrevNext = async (uid, eps) => {
        try {
            let data = await apiFetch(`ajax/episodeprevnext/${uid}/${eps}`);
            document.getElementById('episode-prev-next').innerHTML = data.html;

        } catch (error) {
            console.error('Error:', error);
        }
    }
</script>
<script>
    // Embed ve MultiEmbed Çeker.
    let activeBtn;
    const apiFetch = async (url) => await (await fetch(url)).json();

    const replaceActiveBtn = (embedId) => {
        if (activeBtn) activeBtn.className = activeBtn.className.replace(' active', '');
        activeBtn = document.getElementById('embed-' + embedId);
        if (activeBtn) activeBtn.className += ' active';
    }

    const extractIframeUrl = (url) => {
        let iframeSrcRegExp = /<iframe[^>]*src="([^"]*)"[^>]*><\/iframe>/i;
        let srcName = '',
            iframeMatch = url.match(iframeSrcRegExp);
        if (iframeMatch) {
            let hostname_parts = new URL(iframeMatch[1]).hostname.split('.');
            srcName = hostname_parts.length >= 2 ? hostname_parts[hostname_parts.length - 2] : hostname_parts[0];
        }
        return srcName.charAt(0).toUpperCase() + srcName.slice(1);
    }

    const getEmbed = async (uid, eps, embedId, translator) => {
        try {
            if (translator) {
                let html = translator.trim() === "" ? "" :
                    `<div class="alert alert-primary" role="alert">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                    </button>
                    <span aria-hidden="true">${translator}</span>
                    </div>`;
                document.getElementById('fansub_translator').innerHTML = html;
            } else {
                document.getElementById('fansub_translator').innerHTML = '';
            }
            document.getElementById('iframe-embed').innerHTML =
                '<div class=\"loading-relative loading-box\" id=\"embed-loading\">' +
                '<div class=\"loading\">' +
                '<div class=\"span1\"></div>' +
                '<div class=\"span2\"></div>' +
                '<div class=\"span3\"></div>' +
                '</div>' +
                '</div>';
            replaceActiveBtn(embedId);
            let data = await apiFetch(`ajax/embed/${uid}/${eps}/${embedId}`);
            document.getElementById('iframe-embed').innerHTML = data[0];
            let ulContainer = document.getElementById("embed-list");
            ulContainer.innerHTML = '';
            if (Array.isArray(data)) {
                data.forEach((url, index) => {
                    if (index === 1) {
                        let firstElement = ulContainer.getElementsByTagName('span')[0];
                        if (firstElement) firstElement.remove();
                    }
                    let li = document.createElement("span");
                    li.className = "toggle-basic";
                    li.style.margin = '10px';
                    li.style.border = '1px solid #000';
                    let icon = document.createElement("i");
                    icon.className = "fa-solid fa-circle-play";
                    icon.style.color = "lightgrey";
                    let link = document.createElement("a");
                    link.href = "#";
                    link.innerText = extractIframeUrl(url);
                    link.onclick = function(e) {
                        e.preventDefault();
                        document.getElementById('iframe-embed').innerHTML = url;
                    };
                    link.appendChild(icon);
                    li.appendChild(link);
                    ulContainer.appendChild(li);
                });
            }
        } catch (error) {
            console.error('Error:', error);
        }
    }
</script>
<script>
    //Episode Sezon Listesi olduğu zaman "Select" içindeki "1-100 veya 401-500 gibi yerleri seçiyor."
    document.addEventListener('click', function(event) {
        if (event.target.matches('.ep-page-item')) {
            let clickedElement = event.target;

            document.querySelectorAll('.ep-page-item').forEach((element) => {
                element.classList.remove('active');
            });
            document.querySelectorAll('.ep-page-item .ic-active').forEach((element) => {
                element.style.display = 'none';
            });
            clickedElement.classList.add('active');
            clickedElement.querySelector('.ic-active').style.display = 'block';
            document.querySelectorAll('.ss-list-min').forEach((element) => {
                element.style.display = 'none';
            });
            document.querySelectorAll('.ss-list-min').forEach((element) => {
                element.classList.remove('active');
            });
            let pageId = `episodes-page-${clickedElement.dataset.page}`;
            document.getElementById(pageId).style.display = 'block';
            document.getElementById(pageId).classList.add('active');
            document.getElementById('current-page').textContent = clickedElement.textContent.trim();
        }
    });
</script>
<script>
    //Episode Rating çekiyor ayrıca POST yaparak oy verebiliyor.
    const getRating = (uid, epIdName) => {
        let fn = function() {
            if (this.readyState === 4 && this.status === 200) {
                let data = JSON.parse(this.responseText);
                document.getElementById("vote-info").innerHTML = data['html'];
            }
        };
        let xhr = new XMLHttpRequest();
        xhr.onreadystatechange = fn;
        xhr.open("GET", "/ajax/episodegetvote/" + uid + "/" + epIdName, true);
        xhr.send();
    }

    const EpisodeVote = (voteValue, epUID, epID) => {
        let xhr = new XMLHttpRequest();
        xhr.open("POST", '/ajax/episodevote/' + voteValue + '/' + epUID + '/' + epID, true);
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.setRequestHeader("Accept", "application/json");
        xhr.onerror = function() {
            console.error('Request failed.');
        }
        xhr.onload = function() {
            if (this.readyState === 4 && this.status === 200) getRating(epUID, epID);
            else console.error('Error:', xhr.status, xhr.statusText);
        };
        xhr.send();
    }
</script>
<script>
    $(document).ready(function() {
        $('.nav-button').click(function() {
            $('.nav-button.active').removeClass('active');
            $(this).addClass('active');
            $('.content').hide();
            $($(this).data('content')).show();
        });
    });
</script>
<script>
    const textarea = document.getElementById('df-cm-content');
    const buttonClose = document.getElementById('df-cm-close');
    const divCiRight = document.querySelector('.ci-b-right');
    textarea.addEventListener('click', () => {
        divCiRight.style.display = 'block';
    });
    buttonClose.addEventListener('click', () => {
        divCiRight.style.display = 'none';
    });
</script>
<script>
    function toggleReplies(postId) {
        var replies = document.getElementById("replies-" + postId);
        if (replies.style.display === "none") {
            replies.style.display = "block";
        } else {
            replies.style.display = "none";
        }
    }
</script>



<script>
    const getEpisodeCommentSystem = async (uid, eps) => {
        try {
            let data = await apiFetch(`/ajax/episodecommentsystem/${uid}/${eps}`);
            document.getElementById('anitium-comment-system').innerHTML = data.html;
            getEpisodeMoreComment(uid, eps, nextPage = 1);
        } catch (error) {
            console.error('Error:', error);
        }
    }

    function getEpisodeMoreComment(uid, eps) {
        var xhr = new XMLHttpRequest();
        var url = "/ajax/episodemorecomment/" + uid + "/" + eps + "?page=" + nextPage;
        xhr.open("GET", url, true);
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4 && xhr.status === 200) {
                var data = JSON.parse(xhr.responseText);
                var htmlData = data['html'];
                var htmlData2 = data['page']['status'];
                var resultElements = document.getElementsByClassName("cw_list");
                for (let element of resultElements) {
                    element.innerHTML += htmlData;
                }

                nextPage++;

                if (htmlData2 === false) {
                    var buttonElement = document.getElementById("cm-view-more");
                    buttonElement.style.display = "none";
                }
            }
        };
        xhr.send();
    }
</script>




<script>
    function sendRequest(postid, url, callback) {
        var xhr = new XMLHttpRequest();
        xhr.open("POST", url + postid, true);
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.setRequestHeader("Accept", "application/json");
        xhr.onerror = function() {
            console.error('Request failed.');
        }
        xhr.onload = function() {
            if (this.readyState === 4 && this.status === 200) {
                callback(postid);
            } else {
                console.error('Error:', xhr.status, xhr.statusText);
            }
        };
        xhr.send();
    }

    function addRepyLike(postid) {
        sendRequest(postid, 'ajax/epmainlike/', getMainLike);
    }

    function addRepyDislike(postid) {
        sendRequest(postid, 'ajax/epmaindislike/', getMainLike);
    }

    function addRepycLike(postid) {
        sendRequest(postid, 'ajax/eprepylike/', getRepyLike);
    }

    function addRepycDislike(postid) {
        sendRequest(postid, 'ajax/eprepydislike/', getRepyLike);
    }

    function fetchData(postid, url) {
        var fn = function() {
            if (this.readyState === 4 && this.status === 200) {
                var data = JSON.parse(this.responseText);
                var htmlData = data['html'];
                var resultElement = document.getElementById(postid);
                resultElement.innerHTML = htmlData;
            }
        };

        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = fn;
        xhr.open("GET", url + postid, true);
        xhr.send();
    }

    function getMainLike(postid) {
        fetchData(postid, "ajax/getepmainlike/");
    }

    function getRepyLike(postid) {
        fetchData(postid, "ajax/geteprepylike/");
    }
</script>    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/js-cookie@rc/dist/js.cookie.min.js"></script>
<script src="https://hikari.gg/assest/aniwatch/js/app.js"></script>
<script src="https://hikari.gg/assest/aniwatch/js/comman.js"></script>
<link rel="stylesheet" href="https://hikari.gg/assest/aniwatch/css/jquery-ui.css">
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>


    <!-- JavaScript to track the user's watching progress -->
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            console.log('Page loaded. Starting 15 seconds timer...');
            // Wait for 15 seconds before sending the request to track watching
            setTimeout(function() {
                console.log('15 seconds elapsed. Sending tracking request...');
                // Extract anime information from the URL
                let urlParams = new URLSearchParams(window.location.search);
                let anime = urlParams.get('anime');
                let uid = urlParams.get('uid');
                let eps = urlParams.get('eps');
                
                // Validate parameters before proceeding
                if (anime && uid && eps) {
                    // Make a call to the server to track progress
                    fetch(`/watch/track?anime=${anime}&uid=${uid}&eps=${eps}`, {
                        method: 'GET',
                        credentials: 'same-origin'
                    })
                    .then(response => response.json())
                    .then(data => {
                        console.log('Watching progress tracked:', data);
                    })
                    .catch(error => {
                        console.error('Error tracking watching progress:', error);
                    });
                } else {
                    console.error('Missing URL parameters: anime, uid, or eps.');
                }
            }, 15000); 
        });
    </script>


<script id="syncData" type="application/json">{
    "page": "episode",
    "episode": 3,
    "name": "Dungeon ni Deai wo Motomeru no wa Machigatteiru Darou ka V: Houjou no Megami-hen",
    "id": "57066",
    "mal": "57066",
    "series_url": "https://watch.hikaritv.xyz/anime/57066",
    "next_episode_url": "https://watch.hikaritv.xyz/watch?anime=Dungeon%20ni%20Deai%20wo%20Motomeru%20no%20wa%20Machigatteiru%20Darou%20ka%20V%3A%20Houjou%20no%20Megami-hen&uid=57066&eps=4"
}</script>
<script>
    (function updateSyncData() {
        const animeName = "Dungeon ni Deai wo Motomeru no wa Machigatteiru Darou ka V: Houjou no Megami-hen";
        const currentUrl = window.location.href;
        const urlParams = new URLSearchParams(window.location.search);
        const episode = urlParams.get('eps'); 
        const malId = urlParams.get('uid'); 
        const baseAnimeUrl = 'https://watch.hikaritv.xyz' + '/anime';

        if (episode && malId) {
            const nextEpisode = parseInt(episode) + 1; 
            const seriesUrl = `${baseAnimeUrl}/${malId}`;
            const nextEpisodeUrl = `${currentUrl.split('?')[0]}?anime=${encodeURIComponent(animeName)}&uid=${malId}&eps=${nextEpisode}`;

            const syncData = {
                page: "episode",
                episode: parseInt(episode),
                name: animeName,
                id: malId,
                mal: malId,
                series_url: seriesUrl,
                next_episode_url: nextEpisodeUrl
            };

            const syncScript = document.getElementById("syncData");
            syncScript.textContent = JSON.stringify(syncData, null, 4);

            setTimeout(updateSyncData, 30000); 
        } else {
            console.error("Failed to extract episode or 'mal' ID from the URL.");
        }
    })();
</script>

</div><iframe style="display: none;"></iframe></body></html>