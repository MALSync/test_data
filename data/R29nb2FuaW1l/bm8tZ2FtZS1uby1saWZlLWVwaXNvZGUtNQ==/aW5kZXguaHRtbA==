<!DOCTYPE html><html lang="en-US" xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/WebPage"><head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# article: http://ogp.me/ns/article#"><meta http-equiv="origin-trial" content="Az520Inasey3TAyqLyojQa8MnmCALSEU29yQFW8dePZ7xQTvSt73pHazLFTK5f7SyLUJSo2uKLesEtEa9aUYcgMAAACPeyJvcmlnaW4iOiJodHRwczovL2dvb2dsZS5jb206NDQzIiwiZmVhdHVyZSI6IkRpc2FibGVUaGlyZFBhcnR5U3RvcmFnZVBhcnRpdGlvbmluZyIsImV4cGlyeSI6MTcyNTQwNzk5OSwiaXNTdWJkb21haW4iOnRydWUsImlzVGhpcmRQYXJ0eSI6dHJ1ZX0=">
    <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
<link rel="profile" href="http://gmpg.org/xfn/11">

<link rel="shortcut icon" href="https://cdn.gogocdn.net/files/gogo/img/favicon.ico">
<meta name="google-site-verification" content="shHYF9VOwfpFOdBpleH5jZ2CBuy6nVjX4PrkxMSRqHQ">

<title>Watch No Game No Life Episode 5 English Subbed at Gogoanime</title>

<meta name="robots" content="noodp, noydir">
<meta name="description" content="<p style=&quot;text-align: justify;&quot;>The story of No Game, No Life centers around Sora and Shiro, a brother and sister whose reputations as brilliant NEET (Not in Education, Employment, or Training) hikikomori (shut-in) gamers have spawned urban legends a ... at Gogoanime">
<meta name="keywords" content="No Game No Life Episode 5, No Game No Life ep 5, Ep 5,English Subbed">
<meta itemprop="image" content="https://gogocdn.net/images/spring/No Game No Life.jpg">

<meta property="og:site_name" content="Gogoanime">
<meta property="og:locale" content="en_US">
<meta property="og:type" content="website">
<meta property="fb:admins" content="">
<meta property="og:title" content="Watch No Game No Life Episode 5 English Subbed at Gogoanime">
<meta property="og:description" content="<p style=&quot;text-align: justify;&quot;>The story of No Game, No Life centers around Sora and Shiro, a brother and sister whose reputations as brilliant NEET (Not in Education, Employment, or Training) hikikomori (shut-in) gamers have spawned urban legends a ... at Gogoanime">
<meta property="og:url" content="">
<meta property="og:image" content="https://gogocdn.net/images/spring/No Game No Life.jpg">
<meta property="og:image:secure_url" content="https://gogocdn.net/images/spring/No Game No Life.jpg">

<meta property="twitter:card" content="summary">
<meta property="twitter:title" content="Watch No Game No Life Episode 5 English Subbed at Gogoanime">
<meta property="twitter:description" content="<p style=&quot;text-align: justify;&quot;>The story of No Game, No Life centers around Sora and Shiro, a brother and sister whose reputations as brilliant NEET (Not in Education, Employment, or Training) hikikomori (shut-in) gamers have spawned urban legends a ... at Gogoanime">
<meta name="referrer" content="origin">
<meta name="csrf-token" content="651d764643717">

<link rel="canonical" href="https://gogoanime3.net/no-game-no-life-episode-5">
<link rel="alternate" hreflang="en-us" href="https://gogoanime3.net/no-game-no-life-episode-5">
    
        <link rel="stylesheet" type="text/css" href="https://gogoanime3.net/css/style.css?v=9.6">
    
    <meta name="clckd" content="b8cf41ef95da6b56160e95d806f0bf1e">
<script type="text/javascript" async="" src="https://www.gstatic.com/recaptcha/releases/lLirU0na9roYU3wDDisGJEVT/recaptcha__de.js" crossorigin="anonymous" integrity="sha384-GdV15gXliOPfpfOpqFhqY9dS3FCI2YwTGtVcyzj5ab0yiuc+vZVJm97rcCa1WL2G"></script><script src="//gogoanimetv.disqus.com/embed.js" data-timestamp="1696429649196"></script><script src="https://gogoanimetv.disqus.com/count-data.js?2=https%3A%2F%2Fgogoanime.vc%2Fno-game-no-life-episode-5"></script><style>AD-SLOT,
AD-TRIPLE-BOX,
DFP-AD,
[class^="adDisplay-module"],
[class^="amp-ad-"],
[data-ad-cls],
[data-adbridg-ad-class],
[data-css-class="dfp-inarticle"],
[data-d-ad-id],
[data-desktop-ad-id],
[data-dynamic-ads],
[data-ez-name],
[data-freestar-ad],
[data-id^="div-gpt-ad"],
[data-m-ad-id],
[data-mobile-ad-id],
[data-name="adaptiveConstructorAd"],
[data-rc-widget],
[data-role="tile-ads-module"],
[data-template-type="nativead"],
[data-testid="ad_testID"],
[data-type="ad-vertical"],
[id^="ad-wrap-"],
[id^="ad_sky"],
[id^="ad_slider"],
[id^="section-ad-banner"],
[onclick^="location.href='http://www.reimageplus.com"],
a-ad,
a[style="width:100%;height:100%;z-index:10000000000000000;position:absolute;top:0;left:0;"],
ad-shield-ads,
app-ad,
app-advertisement,
app-large-ad,
ark-top-ad,
article.ad,
aside[id^="adrotate_widgets-"],
atf-ad-slot,
bottomadblock,
display-ads,
div[class^="Adstyled__AdWrapper-"],
div[class^="Display_displayAd"],
div[class^="kiwi-ad-wrapper"],
div[class^="native-ad-"],
div[data-ad-placeholder],
div[data-ad-wrapper],
div[data-adname],
div[data-adunit-path],
div[data-adunit],
div[data-adzone],
div[data-alias="300x250 Ad 1"],
div[data-alias="300x250 Ad 2"],
div[data-content="Advertisement"],
div[data-contentexchange-widget],
div[data-dfp-id],
div[data-id-advertdfpconf],
div[data-insertion],
div[data-mini-ad-unit],
div[data-native-ad],
div[data-spotim-slot],
div[id^="_vdo_ads_player_ai_"],
div[id^="ad-div-"],
div[id^="ad-position-"],
div[id^="adngin-"],
div[id^="adrotate_widgets-"],
div[id^="ads250_250-widget-"],
div[id^="ads300_100-widget-"],
div[id^="ads300_250-widget-"],
div[id^="adspot-"],
div[id^="advads_ad_"],
div[id^="crt-"][style],
div[id^="div-ads-"],
div[id^="google_dfp_"],
div[id^="gpt_ad_"],
div[id^="lazyad-"],
div[id^="optidigital-adslot"],
div[id^="pa_sticky_ad_box_middle_"],
div[id^="rc-widget-"],
div[id^="sticky_ad_"],
div[id^="vuukle-ad-"],
div[recirculation-ad-container],
gpt-ad,
guj-ad,
hl-adsense,
img[src^="https://images.purevpnaffiliates.com"],
ps-connatix-module,
span[data-ez-ph-id],
span[id^="ezoic-pub-ad-placeholder-"],
topadblock,
zeus-ad,
[class^="tile-picker__CitrusBannerContainer-sc-"],
citrus-ad-wrapper,
[class^="s2nPlayer"],
div[id*="MarketGid"],
[onclick*="content.ad/"],
AMP-AD,
amp-ad,
amp-ad-custom,
amp-connatix-player,
amp-fx-flying-carpet,
a[data-obtrack^="http://paid.outbrain.com/network/redir?"],
a[data-oburl^="https://paid.outbrain.com/network/redir?"],
a[data-redirect^="https://paid.outbrain.com/network/redir?"],
a[data-url^="http://paid.outbrain.com/network/redir?"] + .author,
a[data-widget-outbrain-redirect^="http://paid.outbrain.com/network/redir?"],
a[onmousedown^="this.href='http://paid.outbrain.com/network/redir?"][target="_blank"],
a[onmousedown^="this.href='http://paid.outbrain.com/network/redir?"][target="_blank"] + .ob_source,
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"][target="_blank"] + .ob_source,
a[target="_blank"][onmousedown="this.href^='http://paid.outbrain.com/network/redir?"],
div[id^="taboola-stream-"],
display-ad-component,
div[id^="zergnet-widget"],
a[aria-label="Werbelink"],
[onclick*="window.open('http://deloplen.com/"],
[data-uri^="https://s3.amazonaws.com"],
[data-lnguri^="https://s3.amazonaws.com"],
[onclick*="postlnk.com"],
[class^="DisplayAd"],
div[class*="displayAdRight"],
[data-lnguri*="vipbox"],
[src^="https://aff1xstavka.com"],
[class^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]),
[id^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]),
div[id^="div-gpt-"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]),
.samBannerUnit, .samCodeUnit,
[src^="//dombnrs.com/"],
[src^="https://forum.picbaron.com/Banner"],
div[id][style^="position: fixed; inset: 0px; z-index: 2147483647; background: black"][style*="opacity: 0.01"],
div[class$="player-promo-col"],
div#spot-holder.spot-holder[style="display: block;"],
a[dontfo=""][style$="position: absolute; z-index: 2147483647;"],
[data-ad-module]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-width]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-adblockkey]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(html):not(.adsbygoogle),
[data-advadstrackid]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-manager-id]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
div[style^="z-index: 999999; background-image: url(\"data:image/gif;base64,"][style$="position: absolute;"],
a[onclick="openAuc();"],
div[style="position: fixed; display: block; width: 100%; height: 100%; inset: 0px; background-color: rgba(0, 0, 0, 0); z-index: 300000;"],
div[style^="position:fixed;inset:0px;z-index:2147483647;background:black;opacity:0.01"],
a[id][href="https://chpadblock.com/"][rel^="noopener noreferrer"],
a[id][href="https://toolkitspro.com"][rel^="noopener noreferrer"],
a[id][href="https://hamrocsit.com"][rel^="noopener noreferrer"],
iframe.lazyloaded[data-src^="https://rcm-fe.amazon-adsystem.com/"],
[style="position:absolute;top:0;left:0;width: 100%;height: 100%;z-index:2147483647"],
[style="top: 0px; left: 0px; width: 940px; height: 600px; position: absolute; z-index: 2147483647;"],
div[style="position: fixed;top: 0;left: 0;right: 0;bottom:0;z-index: 99999999;background: rgba(0,0,0,.6);"] { display: none !important; }

[data-ad-name],
[data-revive-zoneid],
[name^="google_ads_iframe"],
div[aria-label="Ads"],
div[data-ad-targeting],
div[data-google-query-id],
div[data-native_ad],
div[id^="ad_position_"],
div[id^="dfp-ad-"],
div[id^="ezoic-pub-ad-"],
div[id^="yandex_ad"],
ins.adsbygoogle,
div[id*="ScriptRoot"],
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"][target="_blank"],
.trc_related_container div[data-item-syndicated="true"],
amp-embed[type="taboola"],
[id^="google_ads_iframe"]:not(.rb-adbanner) { display: none !important; }</style><style>.adsverting,
.ad-text,
.adSense,
.adBlock,
.adContent,
[href="https://t.me/Russia_Vs_Ukraine_War3"],
a[href^="http://bc.vc/?r="],
[href*="uselnk.com/"],
a[href^="http://com-1.pro/"],
a[href^="https://bc.game/"],
[href*="postlnk.com"],
[href*="passtechusa.com"],
[href*="speenphorbin.com"] { display: none !important; }</style><script src="https://c.disquscdn.com/next/embed/alfie_v4.63f1ab6d6b9d5807dc0c94ef3fe0b851.js" async="" charset="UTF-8"></script></head>
<body>
<div class="clr"></div>
<div id="wrapper_inside">
        <div id="wrapper">
            <div id="wrapper_bg">
                <header>
  <div class="menu_top_link">
    <div class="user_auth">
      <ul class="auth">
            <li class="userss">
        <i class="icongec-login"></i>
        <a href="/login.html" title="login">Login</a> <a class="fix">|</a>
        <a href="/register.html" title="Sign up" class="reg">Sign up</a>
    </li>

      </ul>
    </div>
    <div class="link_face intro">
      <a class="btn twitter hidden-phone" href="https://twitter.com/anime_around" target="_blank" data-url=""></a>
      <a class="btn reddit hidden-phone" href="https://www.reddit.com/r/AroundAnimeTV/" target="_blank" data-url=""></a>
      <a class="btn facebook hidden-phone" href="https://www.facebook.com/groups/409309663623039" target="_blank"></a>
      <a class="btn discord hidden-phone" style="margin-right:5px;" href="https://discord.gg/gogo" target="_blank" data-url=""></a>
      <a class="btn telegram hidden-phone" style="margin-right:5px;" href="https://t.me/joinchat/W4lYQ-RGOQ05MmI9" target="_blank" data-url=""></a>
    </div>

    <div class="submenu_intro">
	  <a href="https://gogotaku.info/login.html" target="_blank">Request</a>
	  <span>|</span>
      <a href="https://gogoanime3.net/contact-us.html">Contact us</a>
    <span>|</span>
      <a href="https://gogotaku.info" target="_blank">Gogotaku</a>
    </div>
  </div>
  <div class="clr"></div>
  <!-- banner -->
  <section class="headnav">
    <div class="page_menu_items show">
      <a href="javascript:void(0)" class="menu_mobile">
        <i class="icongec-menu-show"></i>
      </a>
    </div>
    <div class="headnav_left">
      <a href="/"><img src="https://gogoanime3.net/img/icon/logo.png" class="logo show ads-evt" alt="gogoanime - Watch Anime Online"></a>
    </div>
    <div class="headnav_menu">
      <!-- menu top -->
      <nav class="menu_top">
        <ul>
              <li class="userss">
        <i class="icongec-login"></i>
        <a href="/login.html" title="login">Login</a> <a class="fix">|</a>
        <a href="/register.html" title="Sign up" class="reg">Sign up</a>
    </li>

          <li class="home "><a href="https://gogoanime3.net/" title="Home" class="home ads-evt">Home</a></li>
          <li class="list "><a href="https://gogoanime3.net/anime-list.html" title="Anime list" class="list ads-evt">Anime list</a></li>
          <li class="seri "><a href="https://gogoanime3.net/new-season.html" title="New season" class="series ads-evt">New season</a></li>
          <li class="movies"><a href="https://gogoanime3.net/anime-movies.html" title="Movies" class="movie ads-evt">Movies</a></li>
          <li class="movies "><a href="https://gogoanime3.net/popular.html" title="Popular" class="popular ads-evt">Popular</a></li>
          <li class="movie genre hide">
		    <a href="#" class="genre">Genre</a>
              <ul>
                                  <li class=""><a href="/genre/action" title="Action">Action</a></li>
                                  <li class=""><a href="/genre/adult-cast" title="Adult Cast">Adult Cast</a></li>
                                  <li class=""><a href="/genre/adventure" title="Adventure">Adventure</a></li>
                                  <li class=""><a href="/genre/anthropomorphic" title="Anthropomorphic">Anthropomorphic</a></li>
                                  <li class=""><a href="/genre/avant-garde" title="Avant Garde">Avant Garde</a></li>
                                  <li class=""><a href="/genre/shounen-ai" title="Boys Love">Boys Love</a></li>
                                  <li class=""><a href="/genre/cars" title="Cars">Cars</a></li>
                                  <li class=""><a href="/genre/cgdct" title="CGDCT">CGDCT</a></li>
                                  <li class=""><a href="/genre/childcare" title="Childcare">Childcare</a></li>
                                  <li class=""><a href="/genre/comedy" title="Comedy">Comedy</a></li>
                                  <li class=""><a href="/genre/comic" title="Comic">Comic</a></li>
                                  <li class=""><a href="/genre/crime" title="Crime">Crime</a></li>
                                  <li class=""><a href="/genre/crossdressing" title="Crossdressing">Crossdressing</a></li>
                                  <li class=""><a href="/genre/delinquents" title="Delinquents">Delinquents</a></li>
                                  <li class=""><a href="/genre/dementia" title="Dementia">Dementia</a></li>
                                  <li class=""><a href="/genre/demons" title="Demons">Demons</a></li>
                                  <li class=""><a href="/genre/detective" title="Detective">Detective</a></li>
                                  <li class=""><a href="/genre/drama" title="Drama">Drama</a></li>
                                  <li class=""><a href="/genre/dub" title="Dub">Dub</a></li>
                                  <li class=""><a href="/genre/ecchi" title="Ecchi">Ecchi</a></li>
                                  <li class=""><a href="/genre/erotica" title="Erotica">Erotica</a></li>
                                  <li class=""><a href="/genre/family" title="Family">Family</a></li>
                                  <li class=""><a href="/genre/fantasy" title="Fantasy">Fantasy</a></li>
                                  <li class=""><a href="/genre/gag-humor" title="Gag Humor">Gag Humor</a></li>
                                  <li class=""><a href="/genre/game" title="Game">Game</a></li>
                                  <li class=""><a href="/genre/gender-bender" title="Gender Bender">Gender Bender</a></li>
                                  <li class=""><a href="/genre/gore" title="Gore">Gore</a></li>
                                  <li class=""><a href="/genre/gourmet" title="Gourmet">Gourmet</a></li>
                                  <li class=""><a href="/genre/harem" title="Harem">Harem</a></li>
                                  <li class=""><a href="/genre/hentai" title="Hentai">Hentai</a></li>
                                  <li class=""><a href="/genre/high-stakes-game" title="High Stakes Game">High Stakes Game</a></li>
                                  <li class=""><a href="/genre/historical" title="Historical">Historical</a></li>
                                  <li class=""><a href="/genre/horror" title="Horror">Horror</a></li>
                                  <li class=""><a href="/genre/isekai" title="Isekai">Isekai</a></li>
                                  <li class=""><a href="/genre/iyashikei" title="Iyashikei">Iyashikei</a></li>
                                  <li class=""><a href="/genre/josei" title="Josei">Josei</a></li>
                                  <li class=""><a href="/genre/kids" title="Kids">Kids</a></li>
                                  <li class=""><a href="/genre/magic" title="Magic">Magic</a></li>
                                  <li class=""><a href="/genre/magical-sex-shift" title="Magical Sex Shift">Magical Sex Shift</a></li>
                                  <li class=""><a href="/genre/mahou-shoujo" title="Mahou Shoujo">Mahou Shoujo</a></li>
                                  <li class=""><a href="/genre/martial-arts" title="Martial Arts">Martial Arts</a></li>
                                  <li class=""><a href="/genre/mecha" title="Mecha">Mecha</a></li>
                                  <li class=""><a href="/genre/medical" title="Medical">Medical</a></li>
                                  <li class=""><a href="/genre/military" title="Military">Military</a></li>
                                  <li class=""><a href="/genre/music" title="Music">Music</a></li>
                                  <li class=""><a href="/genre/mystery" title="Mystery">Mystery</a></li>
                                  <li class=""><a href="/genre/mythology" title="Mythology">Mythology</a></li>
                                  <li class=""><a href="/genre/organized-crime" title="Organized Crime">Organized Crime</a></li>
                                  <li class=""><a href="/genre/parody" title="Parody">Parody</a></li>
                                  <li class=""><a href="/genre/performing-arts" title="Performing Arts">Performing Arts</a></li>
                                  <li class=""><a href="/genre/pets" title="Pets">Pets</a></li>
                                  <li class=""><a href="/genre/police" title="Police">Police</a></li>
                                  <li class=""><a href="/genre/psychological" title="Psychological">Psychological</a></li>
                                  <li class=""><a href="/genre/racing" title="Racing">Racing</a></li>
                                  <li class=""><a href="/genre/reincarnation" title="Reincarnation">Reincarnation</a></li>
                                  <li class=""><a href="/genre/romance" title="Romance">Romance</a></li>
                                  <li class=""><a href="/genre/romantic-subtext" title="Romantic Subtext">Romantic Subtext</a></li>
                                  <li class=""><a href="/genre/samurai" title="Samurai">Samurai</a></li>
                                  <li class=""><a href="/genre/school" title="School">School</a></li>
                                  <li class=""><a href="/genre/sci-fi" title="Sci-Fi">Sci-Fi</a></li>
                                  <li class=""><a href="/genre/seinen" title="Seinen">Seinen</a></li>
                                  <li class=""><a href="/genre/shoujo" title="Shoujo">Shoujo</a></li>
                                  <li class=""><a href="/genre/shoujo-ai" title="Shoujo Ai">Shoujo Ai</a></li>
                                  <li class=""><a href="/genre/shounen" title="Shounen">Shounen</a></li>
                                  <li class=""><a href="/genre/showbiz" title="Showbiz">Showbiz</a></li>
                                  <li class=""><a href="/genre/slice-of-life" title="Slice of Life">Slice of Life</a></li>
                                  <li class=""><a href="/genre/space" title="Space">Space</a></li>
                                  <li class=""><a href="/genre/sports" title="Sports">Sports</a></li>
                                  <li class=""><a href="/genre/strategy-game" title="Strategy Game">Strategy Game</a></li>
                                  <li class=""><a href="/genre/super-power" title="Super Power">Super Power</a></li>
                                  <li class=""><a href="/genre/supernatural" title="Supernatural">Supernatural</a></li>
                                  <li class=""><a href="/genre/survival" title="Survival">Survival</a></li>
                                  <li class=""><a href="/genre/suspense" title="Suspense">Suspense</a></li>
                                  <li class=""><a href="/genre/team-sports" title="Team Sports">Team Sports</a></li>
                                  <li class=""><a href="/genre/thriller" title="Thriller">Thriller</a></li>
                                  <li class=""><a href="/genre/time-travel" title="Time Travel">Time Travel</a></li>
                                  <li class=""><a href="/genre/vampire" title="Vampire">Vampire</a></li>
                                  <li class=""><a href="/genre/visual-arts" title="Visual Arts">Visual Arts</a></li>
                                  <li class=""><a href="/genre/work-life" title="Work Life">Work Life</a></li>
                                  <li class=""><a href="/genre/workplace" title="Workplace">Workplace</a></li>
                                  <li class=""><a href="/genre/yaoi" title="Yaoi">Yaoi</a></li>
                                  <li class=""><a href="/genre/yuri" title="Yuri">Yuri</a></li>
                              </ul>
            </li>
          </ul>	
        </nav>
        <!-- /menu top -->
      </div>
      <div class="headnav_right">
        <!-- form search--->
        <div class="form">
          <form onsubmit="" id="search-form" action="https://gogoanime3.net/search.html" method="get">
            <div class="row">
              <input placeholder="search" name="keyword" id="keyword" type="text" value="" autocomplete="off">            
              <input class="btngui" value="" type="button" name="" onclick="do_search();">
              <input id="key_pres" name="key_pres" value="" type="hidden">
              <input id="link_alias" name="link_alias" value="" type="hidden">
              <input id="keyword_search_replace" name="keyword_search_replace" value="" type="hidden">
            </div>
            <div class="hide_search hide"><i class="icongec-muiten"></i></div>
            <div id="header_search_autocomplete"></div>
			<div class="loader"></div>
          </form>
          <div class="clr"></div>
          <div class="search-iph"><a href="javascript:void(0)"><i class="icongec-search-mb"></i></a></div>
        </div>
		<div class="clr"></div>                        
        <!-- /form search--->
      </div>
    </section>
  <!-- /banner -->
</header>
                <section class="content">
                    <section class="content_left">
                        
    <div class="main_body">
        <div class="anime_name anime_video">
            <i class="icongec-anime_video i_pos"></i>
            <div class="title_name">
                <h2>No Game No Life Episode 5 English Subbed</h2>
            </div>
            <div class="link_face"><a class="btn facebook hidden-phone" href="javascript:;" onclick="window.open('https://www.facebook.com/sharer/sharer.php?u=' + encodeURIComponent('gogoanime3.net/no-game-no-life-episode-5') + '', 'facebook-share-dialog', 'width=626,height=436');return false;">
</a>

<a class="btn twitter hidden-phone" href="https://twitter.com/share" target="_blank" data-url="gogoanime3.net/no-game-no-life-episode-5"></a></div>
        </div>
        <div class="anime_video_body">
            <h1>No Game No Life Episode 5 English Subbed at gogoanime</h1>
            <div class="anime_video_body_cate">
                <span>Category:</span>  <a href="/sub-category/spring-2014-anime" title="Spring 2014 Anime">Spring 2014 Anime</a>
                <div class="anime-info">
                    <span>Anime info:</span>
                    <a href="/category/no-game-no-life" title="No Game No Life">No Game No Life</a>
                </div>
                
                                &nbsp;
                <div class="anime_video_note_watch">
                Please, <a onclick="freload()" href="javascript:void(0)">reload page</a> if you can't watch the video
                    <div class="anime_video_body_report">
                       <a class="report-ajax" title="" href="">Report this Episode!</a>
                    </div>
                </div>    
            </div>
            <div style="max-height:250px;overflow:hidden;"><div id="bg_315794424"></div><script data-cfasync="false" type="text/javascript" src="//platform.bidgear.com/ads.php?domainid=3157&amp;sizeid=9&amp;zoneid=4424"></script></div>            <div class="download-anime">
                <div class="favorites_book">
                    <ul>
                        <li class="dowloads"><a href="https://goone.pro/download?id=NDMzOTQ=&amp;typesub=Gogoanime-SUB&amp;title=No+Game+No+Life+Episode+5" target="_blank"><i class="icongec-dowload"></i><span>Download</span></a></li>
                        <li class="favorites"><i class="icongec-fa-heart"></i><span>Add to Favorites</span></li>
                   </ul>
                </div>
            </div>
            <div class="clr"></div>
                        <div class="anime_video_body_watch">
                <div id="load_anime">
<!------------------ vidstream.io server type = 1  display --------------->
<div class="anime_video_body_watch_items load">
    <div class="play-video">
            <iframe src="https://goone.pro/streaming.php?id=NDMzOTQ=&amp;title=No+Game+No+Life+Episode+5&amp;typesub=SUB" allowfullscreen="true" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>

    </div>
</div>
</div>
            </div>
            <div class="anime_video_body_episodes">
                <div class="anime_video_body_episodes_l">
             <a href="/no-game-no-life-episode-4">&lt;&lt; No Game No Life Episode 4</a>
     </div>
<div class="anime_video_body_episodes_r">
            <a href="/no-game-no-life-episode-6">No Game No Life Episode 6 &gt;&gt;</a>
    </div>
            </div>
			<div class="clr"></div>
<div class="list_dowload">
	      		      <div><span>For downloading this video, please <a href="/login.html" title="login">login</a> first.</span></div>
		  </div>
<div class="clr"></div>
            <div class="clr"></div>
            <style>
    #M891653ScriptRootC1477543 {
        min-height: 300px;
    }
</style>
<!-- Composite Start -->
<div id="M891653ScriptRootC1477543"></div>
<script src="https://jsc.adskeeper.com/m/g/m.gogoanime.llc.1477543.js" async=""></script>
<!-- Composite End -->            <div class="clr"></div>
            <div class="anime_muti_link">
                <ul>
    <li class="anime"> 
        <a href="#" class="active" rel="1" data-video="https://goone.pro/streaming.php?id=NDMzOTQ=&amp;title=No+Game+No+Life+Episode+5&amp;typesub=SUB"><i class="iconlayer-anime"></i>Vidstreaming<span>Choose this server</span></a>
    </li>
    <li class="vidcdn">
        <a href="#" rel="100" data-video="https://goone.pro/embedplus?id=NDMzOTQ=&amp;token=8FVMiy_YYs3PIO2buMk9nw&amp;expires=1696436849"><i class="iconlayer-anime"></i>Gogo server<span>Choose this server</span></a>
    </li>
    
    		        <li class="streamwish">
            <a href="#" rel="13" data-video="https://awish.pro/e/61xb5md40jvd">
            <i class="iconlayer-streamwish"></i>Streamwish<span>Choose this server</span></a>
        </li>
    		        <li class="mp4upload">
            <a href="#" rel="3" data-video="https://www.mp4upload.com/embed-4ptby7x63xf1.html">
            <i class="iconlayer-mp4upload"></i>Mp4Upload<span>Choose this server</span></a>
        </li>
    		        <li class="doodstream">
            <a href="#" rel="14" data-video="https://dood.wf/e/px9tllw1tfq5">
            <i class="iconlayer-doodstream"></i>Doodstream<span>Choose this server</span></a>
        </li>
    		        <li class="filelions">
            <a href="#" rel="15" data-video="https://alions.pro/v/t0x0fh0yf7qn">
            <i class="iconlayer-filelions"></i>Filelions<span>Choose this server</span></a>
        </li>
        
</ul>
            </div>
            <div class="clr"></div>
<div class="anime_video_body_comment">
    <div class="anime_video_body_comment_name">
		<div class="btm-center">
			
                <div id="specialButton" class="specialButton">
                        <span class="txt">Show</span> <a href="https://gogoanime.vc/no-game-no-life-episode-5#disqus_thread">46 Comments</a>
                    </div> 
                </div>
    </div>
    <div class="anime_video_body_comment_center">
        <div id="disqus_thread"><iframe id="dsq-app2075" name="dsq-app2075" allowtransparency="true" frameborder="0" scrolling="no" tabindex="0" title="Disqus" width="100%" src="https://disqus.com/embed/comments/?base=default&amp;f=gogoanimetv&amp;t_u=https%3A%2F%2Fgogoanime.vc%2Fno-game-no-life-episode-5&amp;t_d=No%20Game%20No%20Life%20Episode%205%20English%20Subbed%20at%20gogoanime&amp;t_t=No%20Game%20No%20Life%20Episode%205%20English%20Subbed%20at%20gogoanime&amp;s_o=default#version=4699de2a86f3c790aa59c8d1312129e4" horizontalscrolling="no" verticalscrolling="no" style="width: 1px !important; min-width: 100% !important; border: none !important; overflow: hidden !important; height: 0px !important;"></iframe></div>
        <script>
            var disqus_config = function () {
                this.page.url = 'https://gogoanime.vc/no-game-no-life-episode-5';
            };                  
            (function () {  // DON'T EDIT BELOW THIS LINE
                var d = document, s = d.createElement('script');

                s.src = '//gogoanimetv.disqus.com/embed.js';

                s.setAttribute('data-timestamp', +new Date());
                (d.head || d.body).appendChild(s);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript"
                                                          rel="nofollow">comments powered by Disqus.</a>
        </noscript>

    </div>
</div>
        </div>
    </div>
    <div class="clr"></div>
    <div class="main_body">
        <div class="anime_name episode_video">
            <i class="icongec-episode_video i_pos"></i>
            <h2>Related episode</h2>
        </div>
        <div class="clr"></div>
        <div class="anime_video_body">
            <input type="hidden" value="2497" id="movie_id" class="movie_id">
            <input type="hidden" value="5" id="default_ep" class="default_ep">
			<input type="hidden" value="no-game-no-life" id="alias_anime" class="alias_anime">
                        <ul id="episode_page">
                                                <li>
                                <a href="#" class="active" ep_start="0" ep_end="12">0-12</a>
                            </li>
                                    </ul>
                <div class="clr"></div>
                <div id="load_ep"><ul id="episode_related"><li><a href=" /no-game-no-life-episode-12" class="">
				<div class="name"><span>EP</span> 12</div>
                <div class="vien"></div>
                <div class="cate">SUB</div>
              </a></li><li><a href=" /no-game-no-life-episode-11" class="">
				<div class="name"><span>EP</span> 11</div>
                <div class="vien"></div>
                <div class="cate">SUB</div>
              </a></li><li><a href=" /no-game-no-life-episode-10" class="">
				<div class="name"><span>EP</span> 10</div>
                <div class="vien"></div>
                <div class="cate">SUB</div>
              </a></li><li><a href=" /no-game-no-life-episode-9" class="">
				<div class="name"><span>EP</span> 9</div>
                <div class="vien"></div>
                <div class="cate">SUB</div>
              </a></li><li><a href=" /no-game-no-life-episode-8" class="">
				<div class="name"><span>EP</span> 8</div>
                <div class="vien"></div>
                <div class="cate">SUB</div>
              </a></li><li><a href=" /no-game-no-life-episode-7" class="">
				<div class="name"><span>EP</span> 7</div>
                <div class="vien"></div>
                <div class="cate">SUB</div>
              </a></li><li><a href=" /no-game-no-life-episode-6" class="">
				<div class="name"><span>EP</span> 6</div>
                <div class="vien"></div>
                <div class="cate">SUB</div>
              </a></li><li><a href=" /no-game-no-life-episode-5" class="active">
				<div class="name"><span>EP</span> 5</div>
                <div class="vien"></div>
                <div class="cate">SUB</div>
              </a></li><li><a href=" /no-game-no-life-episode-4" class="">
				<div class="name"><span>EP</span> 4</div>
                <div class="vien"></div>
                <div class="cate">SUB</div>
              </a></li><li><a href=" /no-game-no-life-episode-3" class="">
				<div class="name"><span>EP</span> 3</div>
                <div class="vien"></div>
                <div class="cate">SUB</div>
              </a></li><li><a href=" /no-game-no-life-episode-2" class="">
				<div class="name"><span>EP</span> 2</div>
                <div class="vien"></div>
                <div class="cate">SUB</div>
              </a></li><li><a href=" /no-game-no-life-episode-1" class="">
				<div class="name"><span>EP</span> 1</div>
                <div class="vien"></div>
                <div class="cate">SUB</div>
              </a></li></ul></div>
                <div class="clr"></div>
        </div>
    </div>
    <div class="clr"></div>
    <div class="headnav_info">
            </div>
    
    <div class="login-popup modal-close">
        <h2>Log in to Gogoanime</h2>

        <a href="/login-google.html" class="btn-google">
            <span><img src="https://gogoanime3.net/img/google.png" alt="google"></span>Log in with Google
        </a>

        <form method="post" action="/login.html"><input type="hidden" name="_csrf" value="651d764643717">
        <input type="email" name="email" placeholder="Email" value="">
        <input type="password" name="password" placeholder="Password">
        <div><input type="checkbox" name="remember" value="1"> <span class="remember-me">Remember me</span></div>

        <button type="submit">Sign in</button>
        <a class="link-forget" href="/forget.html">Forgot password?</a>

        <a class="link-signup" href="/register.html">Sign up</a>
        </form>    </div>
    
    <div class="reportForm modal-close">
  <div id="wc-form-wrapper">
    <div class="title">Report <span class="close-poup" onclick="closePoup();">✖</span></div>
      <div id="msg_eror"></div> 
      <form method="post" id="contact-form"><input type="hidden" name="_csrf" value="651d764643717">    
        <div id="msg_eror"></div> 
        <div class="row">
          <label>Select an option</label>
          <select name="message" id="message" class="text">
        	<option value="Video broken">Video broken</option>
            <option value="Subtitle out of sync">Subtitle out of sync</option>
            <option value="Wrong Video">Wrong Video</option>
         </select>
        </div>
        <div class="row">
          <input name="title_report" id="title_report" value="no-game-no-life-episode-5" type="hidden">
          <input name="name_report" id="name_report" value="No Game No Life - Episode 5" type="hidden">
          <input name="server_report" id="server_report" value="" type="hidden">
        </div>
        <div class="row">
          <label>Other problem</label>
          <textarea placeholder="" name="body" id="body"></textarea>
        </div>
        <div class="row">
          <label>Email</label>
          <input type="text" name="email_report" id="email_report">
        </div>
        <div class="row row_cap">
          <label>&nbsp;</label>
          <div class="captcha"><div class="g-recaptcha" data-sitekey="6Lchz0McAAAAAGegCbOQJ8ovc8W5jIJHMMsHdMwh"><div style="width: 304px; height: 78px;"><div><iframe title="reCAPTCHA" width="304" height="78" role="presentation" name="a-6sem8cfwur21" frameborder="0" scrolling="no" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation" src="https://www.google.com/recaptcha/api2/anchor?ar=1&amp;k=6Lchz0McAAAAAGegCbOQJ8ovc8W5jIJHMMsHdMwh&amp;co=aHR0cHM6Ly9nb2dvYW5pbWUzLm5ldDo0NDM.&amp;hl=de&amp;v=lLirU0na9roYU3wDDisGJEVT&amp;size=normal&amp;cb=camxw39sb887"></iframe></div><textarea id="g-recaptcha-response" name="g-recaptcha-response" class="g-recaptcha-response" style="width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;"></textarea></div><iframe style="display: none;"></iframe></div></div>
        </div>
        <div class="clr"></div>
        <div class="row row_btn">
          <label>&nbsp;</label>
          <input value="Report" class="btngui" type="button">
          <input value="Reset" class="reset" type="reset">
        </div>
      </form>      <div class="clr"></div>
  </div>
</div>

                    </section>
                     <section class="content_right">
                         <div class="headnav_center">
                            <div class="anime_name adsverting">
                                <i class="icongec-adsverting i_pos"></i>
                                <h2>ADVERTISEMENTS</h2>
                            </div>
							                            <div class="headnav_items">
                                 <div id="bg_315724245"></div><script data-cfasync="false" type="text/javascript" src="//platform.bidgear.com/ads.php?domainid=3157&amp;sizeid=2&amp;zoneid=4245"></script>                            </div>
							                        </div>
                       
                                                <div class="clr"></div>
                                                    <div class="main_body">
     <div class="main_body_black">
          <div class="anime_name ongoing">
              <i class="icongec-ongoing i_pos"></i><h2>RECENT RELEASE</h2>
          </div>
          <div class="recent">
           <!-- begon -->
          <div id="scrollbar2">
          <div class="scrollbar" style="height: 1000px;"><div class="track" style="height: 1000px;"><div class="thumb" style="top: 0px; height: 217.865px;"><div class="end"></div></div></div></div>
            <div class="viewport">
                 <div class="overview" style="top: 0px;">
               			<nav class="menu_recent">
                                    <ul>
                                    	                                        <li>
                                        <a href="/konyaku-haki-sareta-reijou-wo-hirotta-ore-ga-ikenai-koto-wo-oshiekomu-episode-1" title="Konyaku Haki sareta Reijou wo Hirotta Ore ga, Ikenai Koto wo Oshiekomu">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/konyaku-haki-sareta-reijou-wo-hirotta-ore-ga-ikenai-koto-wo-oshiekomu-1696009482.png');"></div>
                               		     Konyaku Haki sareta Reijou wo Hirotta Ore ga, Ikenai Koto wo Oshiekomu                                        </a>
                                    <a href="/konyaku-haki-sareta-reijou-wo-hirotta-ore-ga-ikenai-koto-wo-oshiekomu-episode-1" title="Konyaku Haki sareta Reijou wo Hirotta Ore ga, Ikenai Koto wo Oshiekomu">
                                     <p class="time_2">Episode 1</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/bullbuster-episode-1" title="Bullbuster">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/bullbuster.png');"></div>
                               		     Bullbuster                                        </a>
                                    <a href="/bullbuster-episode-1" title="Bullbuster">
                                     <p class="time_2">Episode 1</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/wowo-2022-episode-68" title="WOWO (2022)">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/wowo-2022.png');"></div>
                               		     WOWO (2022)                                        </a>
                                    <a href="/wowo-2022-episode-68" title="WOWO (2022)">
                                     <p class="time_2">Episode 68</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/fake-identity-2-episode-74-episode-70" title="Fake Identity 2 Episode 74">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/fake-identity-2.png');"></div>
                               		     Fake Identity 2 Episode 74                                        </a>
                                    <a href="/fake-identity-2-episode-74-episode-70" title="Fake Identity 2 Episode 74">
                                     <p class="time_2">Episode 70</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/peerless-martial-spirit-episode-311" title="Peerless Martial Spirit">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/peerless-martial-spirit.png');"></div>
                               		     Peerless Martial Spirit                                        </a>
                                    <a href="/peerless-martial-spirit-episode-311" title="Peerless Martial Spirit">
                                     <p class="time_2">Episode 311</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/i-am-straight-z-episode-81" title="I AM Straight Z">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/i-am-straight-z.png');"></div>
                               		     I AM Straight Z                                        </a>
                                    <a href="/i-am-straight-z-episode-81" title="I AM Straight Z">
                                     <p class="time_2">Episode 81</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/i-got-you-2022-episode-124" title="I Got You (2022)">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/i-got-you-2022.png');"></div>
                               		     I Got You (2022)                                        </a>
                                    <a href="/i-got-you-2022-episode-124" title="I Got You (2022)">
                                     <p class="time_2">Episode 124</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/exclusive-possession-young-master-jis-beloved-wife-s3-episode-46" title="Exclusive Possession: Young Master Ji's Beloved Wife S3">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/exclusive-possession-young-master-jis-beloved-wife-s3.png');"></div>
                               		     Exclusive Possession: Young Master Ji's Beloved Wife S3                                        </a>
                                    <a href="/exclusive-possession-young-master-jis-beloved-wife-s3-episode-46" title="Exclusive Possession: Young Master Ji's Beloved Wife S3">
                                     <p class="time_2">Episode 46</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/the-supreme-master-episode-80" title="The Supreme Master">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/the-supreme-master.png');"></div>
                               		     The Supreme Master                                        </a>
                                    <a href="/the-supreme-master-episode-80" title="The Supreme Master">
                                     <p class="time_2">Episode 80</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/return-of-the-immortal-episode-46" title="Return of the Immortal">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/return-of-the-immortal.png');"></div>
                               		     Return of the Immortal                                        </a>
                                    <a href="/return-of-the-immortal-episode-46" title="Return of the Immortal">
                                     <p class="time_2">Episode 46</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/im-just-an-immortal-episode-90" title="I’m Just an Immortal">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/im-just-an-immortal.png');"></div>
                               		     I’m Just an Immortal                                        </a>
                                    <a href="/im-just-an-immortal-episode-90" title="I’m Just an Immortal">
                                     <p class="time_2">Episode 90</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/the-miracle-doctor-episode-126" title="The Miracle Doctor">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/the-miracle-doctor.png');"></div>
                               		     The Miracle Doctor                                        </a>
                                    <a href="/the-miracle-doctor-episode-126" title="The Miracle Doctor">
                                     <p class="time_2">Episode 126</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/my-master-is-an-emperor-episode-53" title="My Master Is An Emperor">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/my-master-is-an-emperor.png');"></div>
                               		     My Master Is An Emperor                                        </a>
                                    <a href="/my-master-is-an-emperor-episode-53" title="My Master Is An Emperor">
                                     <p class="time_2">Episode 53</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/god-of-war-episode-65" title="God Of War">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/god-of-war.png');"></div>
                               		     God Of War                                        </a>
                                    <a href="/god-of-war-episode-65" title="God Of War">
                                     <p class="time_2">Episode 65</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/nitian-xie-shen-2nd-season-episode-140" title="Nitian Xie Shen 2nd Season">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/nitian-xie-shen-2nd-season.png');"></div>
                               		     Nitian Xie Shen 2nd Season                                        </a>
                                    <a href="/nitian-xie-shen-2nd-season-episode-140" title="Nitian Xie Shen 2nd Season">
                                     <p class="time_2">Episode 140</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/hundred-refined-gods-episode-55" title="Hundred Refined Gods">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/hundred-refined-gods.png');"></div>
                               		     Hundred Refined Gods                                        </a>
                                    <a href="/hundred-refined-gods-episode-55" title="Hundred Refined Gods">
                                     <p class="time_2">Episode 55</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/shrouding-the-heavens-episode-25" title="Shrouding The Heavens">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/shrouding-the-heavens-1691729443.png');"></div>
                               		     Shrouding The Heavens                                        </a>
                                    <a href="/shrouding-the-heavens-episode-25" title="Shrouding The Heavens">
                                     <p class="time_2">Episode 25</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/honghuang-ling-zun-episode-11" title="Honghuang Ling Zun">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/honghuang-ling-zun.png');"></div>
                               		     Honghuang Ling Zun                                        </a>
                                    <a href="/honghuang-ling-zun-episode-11" title="Honghuang Ling Zun">
                                     <p class="time_2">Episode 11</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/wangzhe-da-shixiong-episode-3" title="Wangzhe Da Shixiong">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/wangzhe-da-shixiong.png');"></div>
                               		     Wangzhe Da Shixiong                                        </a>
                                    <a href="/wangzhe-da-shixiong-episode-3" title="Wangzhe Da Shixiong">
                                     <p class="time_2">Episode 3</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/the-strongest-physical-training-ancestor-in-history-episode-35" title="The Strongest Physical Training Ancestor In History">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/the-strongest-physical-training-ancestor-in-history-1678096358.png');"></div>
                               		     The Strongest Physical Training Ancestor In History                                        </a>
                                    <a href="/the-strongest-physical-training-ancestor-in-history-episode-35" title="The Strongest Physical Training Ancestor In History">
                                     <p class="time_2">Episode 35</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/the-emperor-of-creation-episode-105" title="The Emperor of Creation">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/the-emperor-of-creation.png');"></div>
                               		     The Emperor of Creation                                        </a>
                                    <a href="/the-emperor-of-creation-episode-105" title="The Emperor of Creation">
                                     <p class="time_2">Episode 105</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/yi-jian-duzun-episode-70" title="Yi Jian Duzun">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/yi-jian-duzun.png');"></div>
                               		     Yi Jian Duzun                                        </a>
                                    <a href="/yi-jian-duzun-episode-70" title="Yi Jian Duzun">
                                     <p class="time_2">Episode 70</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/first-class-taker-episode-95-episode-75" title="First Class Taker Episode 95">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/first-class-taker.png');"></div>
                               		     First Class Taker Episode 95                                        </a>
                                    <a href="/first-class-taker-episode-95-episode-75" title="First Class Taker Episode 95">
                                     <p class="time_2">Episode 75</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/detective-conan-remastered-episode-303" title="Detective Conan Remastered">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/detective-conan-remastered.png');"></div>
                               		     Detective Conan Remastered                                        </a>
                                    <a href="/detective-conan-remastered-episode-303" title="Detective Conan Remastered">
                                     <p class="time_2">Episode 303</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/zhen-wu-dianfeng-2nd-season-episode-37" title="Zhen Wu Dianfeng 2nd Season">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/zhen-wu-dianfeng-2nd-season.png');"></div>
                               		     Zhen Wu Dianfeng 2nd Season                                        </a>
                                    <a href="/zhen-wu-dianfeng-2nd-season-episode-37" title="Zhen Wu Dianfeng 2nd Season">
                                     <p class="time_2">Episode 37</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/mo-zhuang-chuanshuo-episode-17" title="Mo Zhuang Chuanshuo">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/mo-zhuang-chuanshuo.png');"></div>
                               		     Mo Zhuang Chuanshuo                                        </a>
                                    <a href="/mo-zhuang-chuanshuo-episode-17" title="Mo Zhuang Chuanshuo">
                                     <p class="time_2">Episode 17</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/odekake-kozame-episode-10" title="Odekake Kozame">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/odekake-kozame.png');"></div>
                               		     Odekake Kozame                                        </a>
                                    <a href="/odekake-kozame-episode-10" title="Odekake Kozame">
                                     <p class="time_2">Episode 10</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/duo-xuan-shi-episode-15" title="Duo Xuan Shi">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/duo-xuan-shi.png');"></div>
                               		     Duo Xuan Shi                                        </a>
                                    <a href="/duo-xuan-shi-episode-15" title="Duo Xuan Shi">
                                     <p class="time_2">Episode 15</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/ling-jian-zun-episode-423" title="Ling Jian Zun">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/ling-jian-zun.png');"></div>
                               		     Ling Jian Zun                                        </a>
                                    <a href="/ling-jian-zun-episode-423" title="Ling Jian Zun">
                                     <p class="time_2">Episode 423</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/wan-jie-du-zun-2nd-season-episode-120" title="Wan Jie Du Zun 2nd Season">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/wan-jie-du-zun-2nd-season.png');"></div>
                               		     Wan Jie Du Zun 2nd Season                                        </a>
                                    <a href="/wan-jie-du-zun-2nd-season-episode-120" title="Wan Jie Du Zun 2nd Season">
                                     <p class="time_2">Episode 120</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/tokyo-revengers-tenjiku-hen-episode-1" title="Tokyo Revengers: Tenjiku-hen">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/tokyo-revengers-tenjiku-hen-1696013171.png');"></div>
                               		     Tokyo Revengers: Tenjiku-hen                                        </a>
                                    <a href="/tokyo-revengers-tenjiku-hen-episode-1" title="Tokyo Revengers: Tenjiku-hen">
                                     <p class="time_2">Episode 1</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/helck-episode-13" title="Helck">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/helck-1688154157.png');"></div>
                               		     Helck                                        </a>
                                    <a href="/helck-episode-13" title="Helck">
                                     <p class="time_2">Episode 13</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/seijo-no-maryoku-wa-bannou-desu-2nd-season-episode-1" title="Seijo no Maryoku wa Bannou Desu 2nd Season">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/seijo-no-maryoku-wa-bannou-desu-2nd-season-1696012310.png');"></div>
                               		     Seijo no Maryoku wa Bannou Desu 2nd Season                                        </a>
                                    <a href="/seijo-no-maryoku-wa-bannou-desu-2nd-season-episode-1" title="Seijo no Maryoku wa Bannou Desu 2nd Season">
                                     <p class="time_2">Episode 1</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/paradox-live-the-animation-episode-1" title="Paradox Live the Animation">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/paradox-live-the-animation-1696011100.png');"></div>
                               		     Paradox Live the Animation                                        </a>
                                    <a href="/paradox-live-the-animation-episode-1" title="Paradox Live the Animation">
                                     <p class="time_2">Episode 1</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/records-of-tang-dynasty-legacy-cases-episode-1-20-episode-1" title="Records Of Tang Dynasty Legacy Cases Episode 1-20">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/records-of-tang-dynasty-legacy-cases.png');"></div>
                               		     Records Of Tang Dynasty Legacy Cases Episode 1-20                                        </a>
                                    <a href="/records-of-tang-dynasty-legacy-cases-episode-1-20-episode-1" title="Records Of Tang Dynasty Legacy Cases Episode 1-20">
                                     <p class="time_2">Episode 1</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/wan-sheng-jie-japanese-dub-episode-8" title="Wan Sheng Jie (Japanese Dub)">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/wan-sheng-jie-japanese-dub.png');"></div>
                               		     Wan Sheng Jie (Japanese Dub)                                        </a>
                                    <a href="/wan-sheng-jie-japanese-dub-episode-8" title="Wan Sheng Jie (Japanese Dub)">
                                     <p class="time_2">Episode 8</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/aoshi-jiu-chong-tian-episode-2" title="Aoshi Jiu Chong Tian">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/aoshi-jiu-chong-tian.png');"></div>
                               		     Aoshi Jiu Chong Tian                                        </a>
                                    <a href="/aoshi-jiu-chong-tian-episode-2" title="Aoshi Jiu Chong Tian">
                                     <p class="time_2">Episode 2</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/the-queens-harem-episode-17" title="The Queen's Harem">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/the-queens-harem.png');"></div>
                               		     The Queen's Harem                                        </a>
                                    <a href="/the-queens-harem-episode-17" title="The Queen's Harem">
                                     <p class="time_2">Episode 17</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/wu-shen-zhu-zai-episode-373" title="Wu Shen Zhu Zai">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/wu-shen-zhu-zai.png');"></div>
                               		     Wu Shen Zhu Zai                                        </a>
                                    <a href="/wu-shen-zhu-zai-episode-373" title="Wu Shen Zhu Zai">
                                     <p class="time_2">Episode 373</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/huanmeng-shan-hai-yao-episode-1-15-episode-1" title="Huanmeng Shan Hai Yao Episode 1-15">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/huanmeng-shan-hai-yao.png');"></div>
                               		     Huanmeng Shan Hai Yao Episode 1-15                                        </a>
                                    <a href="/huanmeng-shan-hai-yao-episode-1-15-episode-1" title="Huanmeng Shan Hai Yao Episode 1-15">
                                     <p class="time_2">Episode 1</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/i-got-god-pulse-in-beginninginvincible-episode-7" title="i Got God Pulse In Beginning,Invincible">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/i-got-god-pulse-in-beginninginvincible.png');"></div>
                               		     i Got God Pulse In Beginning,Invincible                                        </a>
                                    <a href="/i-got-god-pulse-in-beginninginvincible-episode-7" title="i Got God Pulse In Beginning,Invincible">
                                     <p class="time_2">Episode 7</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/i-feel-so-good-in-mysterious-world-episode-4" title="I Feel So Good In Mysterious World">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/i-feel-so-good-in-mysterious-world.png');"></div>
                               		     I Feel So Good In Mysterious World                                        </a>
                                    <a href="/i-feel-so-good-in-mysterious-world-episode-4" title="I Feel So Good In Mysterious World">
                                     <p class="time_2">Episode 4</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/tunshi-xingkong-2nd-season-episode-61" title="Tunshi Xingkong 2nd Season">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/tunshi-xingkong-2nd-season.png');"></div>
                               		     Tunshi Xingkong 2nd Season                                        </a>
                                    <a href="/tunshi-xingkong-2nd-season-episode-61" title="Tunshi Xingkong 2nd Season">
                                     <p class="time_2">Episode 61</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/ququ-bucai-zaixia-yeguai-2nd-season-episode-14" title="Ququ Bucai, Zaixia Yeguai 2nd Season">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/ququ-bucai-zaixia-yeguai-2nd-season.png');"></div>
                               		     Ququ Bucai, Zaixia Yeguai 2nd Season                                        </a>
                                    <a href="/ququ-bucai-zaixia-yeguai-2nd-season-episode-14" title="Ququ Bucai, Zaixia Yeguai 2nd Season">
                                     <p class="time_2">Episode 14</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/jiu-chen-fengyun-lu-episode-26" title="Jiu Chen Fengyun Lu">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/jiu-chen-fengyun-lu.png');"></div>
                               		     Jiu Chen Fengyun Lu                                        </a>
                                    <a href="/jiu-chen-fengyun-lu-episode-26" title="Jiu Chen Fengyun Lu">
                                     <p class="time_2">Episode 26</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/jian-gu-episode-35" title="Jian Gu">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/jian-gu.png');"></div>
                               		     Jian Gu                                        </a>
                                    <a href="/jian-gu-episode-35" title="Jian Gu">
                                     <p class="time_2">Episode 35</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/azur-lane-queens-orders-episode-2" title="Azur Lane: Queen's Orders">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/azur-lane-queens-orders.png');"></div>
                               		     Azur Lane: Queen's Orders                                        </a>
                                    <a href="/azur-lane-queens-orders-episode-2" title="Azur Lane: Queen's Orders">
                                     <p class="time_2">Episode 2</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/wuhang-zhanshen-episode-33" title="Wuhang Zhanshen">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/wuhang-zhanshen.png');"></div>
                               		     Wuhang Zhanshen                                        </a>
                                    <a href="/wuhang-zhanshen-episode-33" title="Wuhang Zhanshen">
                                     <p class="time_2">Episode 33</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/bai-lian-feisheng-lu-episode-59" title="Bai Lian Feisheng Lu">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/bai-lian-feisheng-lu.png');"></div>
                               		     Bai Lian Feisheng Lu                                        </a>
                                    <a href="/bai-lian-feisheng-lu-episode-59" title="Bai Lian Feisheng Lu">
                                     <p class="time_2">Episode 59</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/lian-qi-shi-wan-nian-episode-69" title="Lian Qi Shi Wan Nian">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/lian-qi-shi-wan-nian.png');"></div>
                               		     Lian Qi Shi Wan Nian                                        </a>
                                    <a href="/lian-qi-shi-wan-nian-episode-69" title="Lian Qi Shi Wan Nian">
                                     <p class="time_2">Episode 69</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/xiuluo-wu-shen-episode-3" title="Xiuluo Wu Shen">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/xiuluo-wu-shen.png');"></div>
                               		     Xiuluo Wu Shen                                        </a>
                                    <a href="/xiuluo-wu-shen-episode-3" title="Xiuluo Wu Shen">
                                     <p class="time_2">Episode 3</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/rebirth-city-deity-episode-36" title="Rebirth: City Deity">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/rebirth-city-deity.png');"></div>
                               		     Rebirth: City Deity                                        </a>
                                    <a href="/rebirth-city-deity-episode-36" title="Rebirth: City Deity">
                                     <p class="time_2">Episode 36</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/xian-ni-episode-4" title="Xian Ni">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/xian-ni.png');"></div>
                               		     Xian Ni                                        </a>
                                    <a href="/xian-ni-episode-4" title="Xian Ni">
                                     <p class="time_2">Episode 4</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/b-project-netsuretsulove-call-episode-1" title="B-Project: Netsuretsu*Love Call">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/b-project-netsuretsulove-call.png');"></div>
                               		     B-Project: Netsuretsu*Love Call                                        </a>
                                    <a href="/b-project-netsuretsulove-call-episode-1" title="B-Project: Netsuretsu*Love Call">
                                     <p class="time_2">Episode 1</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/flcl-shoegaze-episode-1" title="FLCL: Shoegaze">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/flcl-shoegaze.png');"></div>
                               		     FLCL: Shoegaze                                        </a>
                                    <a href="/flcl-shoegaze-episode-1" title="FLCL: Shoegaze">
                                     <p class="time_2">Episode 1</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/toaru-ossan-no-vrmmo-katsudouki-episode-1" title="Toaru Ossan no VRMMO Katsudouki">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/toaru-ossan-no-vrmmo-katsudouki-1696013064.png');"></div>
                               		     Toaru Ossan no VRMMO Katsudouki                                        </a>
                                    <a href="/toaru-ossan-no-vrmmo-katsudouki-episode-1" title="Toaru Ossan no VRMMO Katsudouki">
                                     <p class="time_2">Episode 1</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/watashi-no-oshi-wa-akuyaku-reijou-episode-1" title="Watashi no Oshi wa Akuyaku Reijou.">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/watashi-no-oshi-wa-akuyaku-reijou-1696013523.png');"></div>
                               		     Watashi no Oshi wa Akuyaku Reijou.                                        </a>
                                    <a href="/watashi-no-oshi-wa-akuyaku-reijou-episode-1" title="Watashi no Oshi wa Akuyaku Reijou.">
                                     <p class="time_2">Episode 1</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/shy-episode-1" title="Shy">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/shy-1696012610.png');"></div>
                               		     Shy                                        </a>
                                    <a href="/shy-episode-1" title="Shy">
                                     <p class="time_2">Episode 1</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/kamonohashi-ron-no-kindan-suiri-episode-1" title="Kamonohashi Ron no Kindan Suiri">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/kamonohashi-ron-no-kindan-suiri-1696008665.png');"></div>
                               		     Kamonohashi Ron no Kindan Suiri                                        </a>
                                    <a href="/kamonohashi-ron-no-kindan-suiri-episode-1" title="Kamonohashi Ron no Kindan Suiri">
                                     <p class="time_2">Episode 1</p>
                                     </a>
                                       </li>
                                                                                <li>
                                        <a href="/migi-to-dali-episode-1" title="Migi to Dali">
                                        <div class="thumbnail-recent" style="background: url('https://gogocdn.net/cover/migi-to-dali-1696010832.png');"></div>
                               		     Migi to Dali                                        </a>
                                    <a href="/migi-to-dali-episode-1" title="Migi to Dali">
                                     <p class="time_2">Episode 1</p>
                                     </a>
                                       </li>
                                                                            </ul>
                                </nav>
                 </div>
            </div>
        </div>  
          </div>
     </div>
</div>
<div class="clr"></div>
<div id="load_ads_2">
	<div id="media.net sticky ad" style="display: inline-block">
	</div>
</div>
<style type="text/css">
	#load_ads_2{width: 300px;}
	#load_ads_2.sticky{position:fixed;top: 0;}
	#scrollbar2 .viewport { height: 1000px !important; }
</style>
                                                <div class="main_body">
  <div class="main_body_black">
    <div class="anime_name new_series">
      <i class="icongec-new_series i_pos"></i><h2>Season</h2>
    </div>
    <div class="series">
      <div class="recent" style="padding:10px 0;">
        <div class="viewport">
          <div class="overview">
            <nav class="menu_series cron">
              <ul>
                <li>
                  <span style="color:#898989;">Anime 2023:</span>
                  <a style="display:inline;" href="/sub-category/winter-2023-anime" title="Winter 2023 Anime">Winter</a> | 
                  <a style="display:inline;" href="/sub-category/spring-2023-anime" title="Spring 2023 Anime">Spring</a> | 
                  <a style="display:inline;" href="/sub-category/summer-2023-anime" title="Summer 2023 Anime">Summer</a>
                </li>
                                  <li>
          				  <span style="color:#898989;">Anime 2022:</span>
                            <a style="display:inline;" href="/sub-category/winter-2022-anime" title="Winter 2022 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2022-anime" title="Spring 2022 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2022-anime" title="Summer 2022 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2022-anime" title="Fall 2022 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2021:</span>
                            <a style="display:inline;" href="/sub-category/winter-2021-anime" title="Winter 2021 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2021-anime" title="Spring 2021 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2021-anime" title="Summer 2021 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2021-anime" title="Fall 2021 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2020:</span>
                            <a style="display:inline;" href="/sub-category/winter-2020-anime" title="Winter 2020 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2020-anime" title="Spring 2020 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2020-anime" title="Summer 2020 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2020-anime" title="Fall 2020 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2019:</span>
                            <a style="display:inline;" href="/sub-category/winter-2019-anime" title="Winter 2019 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2019-anime" title="Spring 2019 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2019-anime" title="Summer 2019 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2019-anime" title="Fall 2019 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2018:</span>
                            <a style="display:inline;" href="/sub-category/winter-2018-anime" title="Winter 2018 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2018-anime" title="Spring 2018 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2018-anime" title="Summer 2018 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2018-anime" title="Fall 2018 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2017:</span>
                            <a style="display:inline;" href="/sub-category/winter-2017-anime" title="Winter 2017 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2017-anime" title="Spring 2017 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2017-anime" title="Summer 2017 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2017-anime" title="Fall 2017 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2016:</span>
                            <a style="display:inline;" href="/sub-category/winter-2016-anime" title="Winter 2016 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2016-anime" title="Spring 2016 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2016-anime" title="Summer 2016 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2016-anime" title="Fall 2016 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2015:</span>
                            <a style="display:inline;" href="/sub-category/winter-2015-anime" title="Winter 2015 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2015-anime" title="Spring 2015 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2015-anime" title="Summer 2015 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2015-anime" title="Fall 2015 Anime">Fall</a>
                            
          				</li>
                                  <li>
          				  <span style="color:#898989;">Anime 2014:</span>
                            <a style="display:inline;" href="/sub-category/winter-2014-anime" title="Winter 2014 Anime">Winter</a> | 
                            <a style="display:inline;" href="/sub-category/spring-2014-anime" title="Spring 2014 Anime">Spring</a> |
                            <a style="display:inline;" href="/sub-category/summer-2014-anime" title="Summer 2014 Anime">Summer</a> |
          				    <a style="display:inline;" href="/sub-category/fall-2014-anime" title="Fall 2014 Anime">Fall</a>
                            
          				</li>
                              </ul>
            </nav>
          </div>
        </div>	
      </div>
    </div>
  </div>
</div>
                     </section>                                                                              
                </section>                
                <div class="clr"></div>
<footer>
  <div class="menu_bottom">
    <a href="/about-us.html"><h3>Abouts us</h3></a>
    <a href="/contact-us.html"><h3>Contact us</h3></a>
    <a href="/privacy.html"><h3>Privacy</h3></a>
  </div>
  <div class="croll">
    <div class="big"><i class="icongec-backtop"></i></div>
    <div class="small"><i class="icongec-backtop_mb"></i></div>
  </div>
</footer>
            </div>
        </div>
</div>
<div id="off_light"></div>
<div class="clr"></div>
<div class="mask"></div>
    <script type="text/javascript" src="https://cdn.gogocdn.net/files/gogo/cdn/jquery.min.js"></script>
	<script>
	 var base_url = 'https://' + document.domain + '/';
	 var base_url_cdn_api = 'https://ajax.gogo-load.com/';
     var api_anclytic = 'https://ajax.gogo-load.com/anclytic-ajax.html';
	</script>
	<script type="text/javascript" src="https://cdn.gogocdn.net/files/gogo/js/main.js?v=9.6"></script>
    <script type="text/javascript" src="https://cdn.gogocdn.net/files/gogo/js/combo.js?v=9.6"></script>
    <script type="text/javascript" src="https://cdn.gogocdn.net/files/gogo/js/crollvertical/js/jquery.tinyscrollbar.min.js?v=9.6"></script>
    <script>
    if(document.getElementById('scrollbar2')){
        $('#scrollbar2').tinyscrollbar();
    }
    </script>

    <script type="text/javascript" src="https://www.google.com/recaptcha/api.js"></script>
    <script type="text/javascript">
          $(".favorites").click(function (e) {$(".mask").fadeIn();$('.login-popup').fadeIn();e.stopPropagation()});
      $(".watchs").click(function (e) {$(".mask").fadeIn();$('.login-popup').fadeIn();e.stopPropagation()});   
        $('.report-ajax').click(function (e) {e.preventDefault();$(".mask").fadeIn();$('.reportForm').fadeIn()});   
    $(".btngui").click(function(e) {var plays = $(".play-video iframe").attr('src');$("#server_report").val(plays);disabledHome('.btngui');var elm_other = '#contact-form textarea',recaptcha = $("#g-recaptcha-response").val();if($(elm_other).val() == ''){$("#msg_eror").html('Other problem cannot be blank.')}else if(recaptcha === ""){$("#msg_eror").html('Please check the recaptcha.')}else{dulieu = $("#contact-form").serialize();$.post(base_url+"report.html",dulieu, xuly)}}); 
	function xuly(data){if (data=="OK"){ $("#contact-form input:text").val('');$("#contact-form input:text").val('');$("#contact-form input:radio").prop( "checked", false);$("#contact-form textarea").val('');$("#contact-form").hide();$("#msg_eror").html('Thank you for report.We will check and fix this episode asap');setTimeout(function(){ $('.mask').fadeOut();$('.reportForm').fadeOut(); }, 3000)}else{$("#msg_eror").html(data)}} 
  </script>
  <script id="dsq-count-scr" src="//gogoanimetv.disqus.com/count.js" async=""></script>
  <script>
if(document.getElementById('episode_page')){
  var ep_start = $('#episode_page a.active').attr('ep_start');
  var ep_end = $('#episode_page a.active').attr('ep_end');
  var id = $("input#movie_id").val();
  var default_ep = $("input#default_ep").val();
  var alias = $("input#alias_anime").val();
  loadListEpisode('#episode_page a.active',ep_start,ep_end,id,default_ep,alias);
}
</script>

<!-- Google tag (gtag.js) -->
<script async="" src="https://www.googletagmanager.com/gtag/js?id=G-SG2BZV0XPF"></script>
<script>
window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-SG2BZV0XPF');
</script><script type="text/javascript">
$(document).ready(function () {
  $('.btn-notice').click(function (e) {
    $('.bg-notice').hide();
    $(this).hide();
  });
});
</script>
<style type="text/css">
  @media only screen and (min-width: 387px) {
    .btn-notice {bottom:36px;}  
  }
  @media only screen and (max-width: 386px) {
    .btn-notice {bottom: 52px;}
  }
</style>
<div class="bg-notice" style="position:fixed;z-index:9999;background:#ffc119;bottom:0;text-align:center;color:#000;width:100%;padding:10px 0;font-weight:600;">We moved site to <a href="https://gogoanime3.net" title="Gogoanime" alt="Gogoanime">Gogoanime3.net</a>. Please bookmark new site. Thank you!</div><div class="btn-notice" style="position:fixed;z-index:9999;background:#00a651;color:#fff;cursor:pointer;right:0;padding:3px 8px;">x</div>
<iframe style="display: none;"></iframe><div style="background-color: rgb(255, 255, 255); border: 1px solid rgb(204, 204, 204); box-shadow: rgba(0, 0, 0, 0.2) 2px 2px 3px; position: absolute; transition: visibility 0s linear 0.3s, opacity 0.3s linear 0s; opacity: 0; visibility: hidden; z-index: 2000000000; left: 0px; top: -10000px;"><div style="width: 100%; height: 100%; position: fixed; top: 0px; left: 0px; z-index: 2000000000; background-color: rgb(255, 255, 255); opacity: 0.05;"></div><div class="g-recaptcha-bubble-arrow" style="border: 11px solid transparent; width: 0px; height: 0px; position: absolute; pointer-events: none; margin-top: -11px; z-index: 2000000000;"></div><div class="g-recaptcha-bubble-arrow" style="border: 10px solid transparent; width: 0px; height: 0px; position: absolute; pointer-events: none; margin-top: -10px; z-index: 2000000000;"></div><div style="z-index: 2000000000; position: relative;"><iframe title="reCAPTCHA-Aufgabe läuft in zwei Minuten ab" name="c-6sem8cfwur21" frameborder="0" scrolling="no" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation" src="https://www.google.com/recaptcha/api2/bframe?hl=de&amp;v=lLirU0na9roYU3wDDisGJEVT&amp;k=6Lchz0McAAAAAGegCbOQJ8ovc8W5jIJHMMsHdMwh" style="width: 100%; height: 100%;"></iframe></div></div></body></html>