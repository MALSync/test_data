<!DOCTYPE html><!--[if lte IE 9]>     <html lang="de" class="ie9 has-notifications"> <![endif]--><!--[if gt IE 9]><!--><html lang="de" class="async-hide fixedsticky-withoutfixedfixed skrollr skrollr-desktop"><!--<![endif]--><head><script async="" src="//www.google-analytics.com/analytics.js"></script><script async="" type="text/javascript" src="https://quantcast.mgr.consensu.org/choice/gH4R7G3BR7zkZ/www.wakanim.tv/choice.js"></script><script async="" src="https://www.googletagmanager.com/gtm.js?id=GTM-P33BJ9N"></script><script type="text/javascript">try { document.__defineGetter__("referrer",function(){return "";}); } catch (exception) {try {Object.defineProperties(document, {referrer:   { get: function() { return ""; } } } );} catch (exception) {} } </script><script src="/tugger-Sleeds-to-like-and-his-mings-eld-by-are-C" async=""></script>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <link rel="preconnect" href="https://cdn1.wakanim.tv/" crossorigin="">
    <link rel="preconnect" href="https://cdncontent.wakanim.tv/" crossorigin="">
    <link rel="preconnect" href="https://d2y6mqrpjbqoe6.cloudfront.net/" crossorigin="">
    <link rel="dns-prefetch" href="https://cdn1.wakanim.tv/">
    <link rel="dns-prefetch" href="https://cdncontent.wakanim.tv/">
    <link rel="dns-prefetch" href="https://d2y6mqrpjbqoe6.cloudfront.net/">
    <link rel="manifest" href="/manifest.json">
    <meta name="description" content="AFTERLOST (OmU.) / Shoumetsu Toshi">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="theme-color" content="#ffffff">
    <title>AFTERLOST (OmU.) Staffel 1 - Wakanim.TV</title>
    <link rel="apple-touch-icon" href="//d2y6mqrpjbqoe6.cloudfront.net/image/upload/f_auto,q_auto/content/images/apple-touch-icon.png">
    <link rel="apple-touch-icon-precomposed" href="//d2y6mqrpjbqoe6.cloudfront.net/image/upload/f_auto,q_auto/content/images/apple-touch-icon.png">
    <link rel="icon" href="//d2y6mqrpjbqoe6.cloudfront.net/image/upload/f_auto,q_auto/content/images/favicon.png">
    <link href="//fonts.googleapis.com/css?family=Asap:400,700&amp;display=swap" rel="stylesheet" type="text/css">
    <link rel="preload" href="//cdncontent.wakanim.tv/fonts/geomanist-medium-webfont.woff2" as="font" type="font/woff2" crossorigin="">
    <link rel="preload" href="//cdncontent.wakanim.tv/fonts/geomanist-bold-webfont.woff2" as="font" type="font/woff2" crossorigin="">
    <link rel="preload" href="//cdncontent.wakanim.tv/fonts/geomanist-regular-webfont.woff2" as="font" type="font/woff2" crossorigin="">

    <link rel="stylesheet" href="//cdncontent.wakanim.tv/styles/dist/main.css?v14.47">
    <link rel="stylesheet" href="//cdncontent.wakanim.tv/styles/dist/jwplayer.css?v14.47">
    <meta property="al:android:package" content="wakanimapp.wakanimapp">
    <meta property="al:android:url" content="wakanimapp://wakanim">
    
    <meta http-equiv="content-type" content="text/html; charset=utf-8">
    <meta name="apple-itunes-app" content="app-id=1182134583">
    <meta name="copyright" content="Copyright (c) Wakanim.TV. All rights reserved.">
    <meta name="google-site-verification" content="vdl5w5ayFfyN3_wQr3cZbd9tnlBV6EGuHcS_yjqFuq4">
    <meta name="msvalidate.01" content="19513BF05D9EFE988CEB2C720B991EB8">
    <link rel="alternate" type="application/rss+xml" href="/de/v2/home/rss" title="Wakanim.TV, legaler und kostenloser Anbieter von Animes!">
    <meta property="fb:app_id" content="125809965451">
    <meta property="fb:admins" content="100000056453622">
    <meta property="og:site_name" content="Wakanim.TV">
    <meta property="og:title" content="AFTERLOST (OmU.) Staffel 1 - Wakanim.TV">
        <meta property="og:image" content="https://d2y6mqrpjbqoe6.cloudfront.net/image/upload/f_auto,q_auto/cdn1/library/216_636967441250086118After-Lost_Small.png">
    <meta property="og:description" content="AFTERLOST (OmU.) / Shoumetsu Toshi">
    <meta property="og:url" content="https://www.wakanim.tv/de/v2/catalogue/show/493/afterlost-omu/season/870/staffel-1">
        <meta property="og:type" content=" video.tv_show">
    <meta name="twitter:site" content="@wakanim">
    <meta name="twitter:title" content="AFTERLOST (OmU.) Staffel 1 - Wakanim.TV">
    <meta name="twitter:description" content="AFTERLOST (OmU.) / Shoumetsu Toshi">
        <meta name="twitter:card" content="summary_large_image">
        <meta name="twitter:image" content="https://d2y6mqrpjbqoe6.cloudfront.net/image/upload/f_auto,q_auto/cdn1/library/216_636967441250086118After-Lost_Small.png">
    <script type="text/javascript" charset="utf-8">
        //Thanks Twitter / No iframe needed
        function bust() {
            return;
        }
        if (window.top !== window.self) {
            try {
                if (window.top.location.host) {

                } else {
                    bust();
                }
            } catch (ex) {
                bust();
            }
        }
        function fbShare(url, title, descr) {
            var winTop = (screen.height / 2) - (350 / 2);
            var winLeft = (screen.width / 2) - (520 / 2);
            window.open('http://www.facebook.com/sharer.php?s=100&p[title]=' + title + '&p[summary]=' + descr + '&p[url]=' + url, 'Partager sur Facebook', 'top=' + winTop + ',left=' + winLeft + ',toolbar=0,status=0,width=' + 520 + ',height=' + 350);
        };
        function twShare(url, title) {
            var winTop = (screen.height / 2) - (350 / 2);
            var winLeft = (screen.width / 2) - (520 / 2);
            var handle = 'Wakanim';
                handle = 'WakanimDE';

            window.open('https://twitter.com/intent/tweet?text=' + title + ' &tw_p=tweetbutton&url=' + url + '&via=' + handle, 'Partager sur twitter', 'top=' + winTop + ',left=' + winLeft + ',toolbar=0,status=0,width=' + 520 + ',height=' + 350);
        };
        function gpShare(url, title) {
            var winTop = (screen.height / 2) - (350 / 2);
            var winLeft = (screen.width / 2) - (520 / 2);
            window.open('https://plus.google.com/share?text=' + title + ' &url=' + url, 'Partager sur Google Plus', 'top=' + winTop + ',left=' + winLeft + ',toolbar=0,status=0,width=' + 520 + ',height=' + 350);
        };
        function vkShare(url, title) {
            var winTop = (screen.height / 2) - (350 / 2);
            var winLeft = (screen.width / 2) - (520 / 2);
            window.open('https://vk.com/share.php?title=' + title + ' &url=' + url, 'Partager sur Vkontakte', 'top=' + winTop + ',left=' + winLeft + ',toolbar=0,status=0,width=' + 520 + ',height=' + 350);
        };
        var websiteRootUrl = '/de/v2';
        var isGDPR = 1;

    </script>
    <style type="text/css">
        .input {
            text-transform: none;
        }

        .comment_footer_link span, .comment_dot span {
            line-height: 18px;
            float: left;
            display: block;
        }

        .comment_dot {
            display: inline;
        }

        .comment-actions-active {
            border: 1px #000 dashed;
            margin-bottom: 10px;
            margin-top: 10px;
            padding: 10px;
        }

        .contest-list-item_image img {
            width: 100%
        }
    </style>
    <script type="text/javascript" src="https://js.stripe.com/v3/"></script>
    <script type="text/javascript">


  var appInsights=window.appInsights||function(config){
        function r(config){t[config]=function(){var i=arguments;t.queue.push(function(){t[config].apply(t,i)})}}var t={config:config},u=document,e=window,o="script",s=u.createElement(o),i,f;for(s.src=config.url||"//az416426.vo.msecnd.net/scripts/a/ai.0.js",u.getElementsByTagName(o)[0].parentNode.appendChild(s),t.cookie=u.cookie,t.queue=[],i=["Event","Exception","Metric","PageView","Trace"];i.length;)r("track"+i.pop());return r("setAuthenticatedUserContext"),r("clearAuthenticatedUserContext"),config.disableExceptionTracking||(i="onerror",r("_"+i),f=e[i],e[i]=function(config,r,u,e,o){var s=f&&f(config,r,u,e,o);return s!==!0&&t["_"+i](config,r,u,e,o),s}),t
    }({
      instrumentationKey: "8c0d1801-64ac-4fa5-bfbe-c7a0a5c0682e",
      maxAjaxCallsPerView: 4,
      samplingPercentage: 25
    });

  window.appInsights = appInsights;
    appInsights.trackPageView();
    </script><script src="//az416426.vo.msecnd.net/scripts/a/ai.0.js"></script>
    <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="Wakanim.TV">
    <!-- Google Tag Manager -->
    <script type="text/javascript">
        var dataLayer = [];
        dataLayer.push({
            'cwid': 'DE',
			'ut': 'No account'
        });
    </script>
    
    <style>
        .async-hide {
            opacity: 0 !important
        }
    </style>
    <script>
        (function (a, s, y, n, c, h, i, d, e) {
            s.className += ' ' + y;
            h.end = i = function () { s.className = s.className.replace(RegExp(' ?' + y), '') };
            (a[n] = a[n] || []).hide = h; setTimeout(function () { i(); h.end = null }, c);
        })(window, document.documentElement, 'async-hide', 'dataLayer', 10, { 'GTM-P33BJ9N': true });
    </script>
    <script>
        (function (w, d, s, l, i) {
            w[l] = w[l] || []; w[l].push({
                'gtm.start':
                    new Date().getTime(), event: 'gtm.js'
            }); var f = d.getElementsByTagName(s)[0],
                j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : ''; j.async = true; j.src =
                    'https://www.googletagmanager.com/gtm.js?id=' + i + dl; f.parentNode.insertBefore(j, f);
        })(window, document, 'script', 'dataLayer', 'GTM-P33BJ9N');
        var OneSignal = window.OneSignal || [];
    </script>
        <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
        <script>
            var googletag = googletag || {};
            googletag.cmd = googletag.cmd || [];
            googletag.cmd.push(function () {
                googletag.defineSlot('/21820461854/content300x250', [300, 250], 'div-gpt-ad-1562689189310-0').addService(googletag.pubads());
                googletag.pubads().enableSingleRequest();
                googletag.pubads().setTargeting('URL', ['http%3a%2f%2fwww.wakanim.tv%2fde%2fv2%2fcatalogue%2fshow%2f493%2fafterlost-omu%2fseason%2f870%2fstaffel-1']);
                googletag.pubads().collapseEmptyDivs();
                googletag.enableServices();
            });
        </script>
    <!-- Quantcast Choice. Consent Manager Tag v2.0 (for TCF 2.0) -->
    <script type="text/javascript" async="true">
        (function () {
            var host = window.location.hostname;
            var element = document.createElement('script');
            var firstScript = document.getElementsByTagName('script')[0];
            var url = 'https://quantcast.mgr.consensu.org'
                .concat('/choice/', 'gH4R7G3BR7zkZ', '/', host, '/choice.js')
            var uspTries = 0;
            var uspTriesLimit = 3;
            element.async = true;
            element.type = 'text/javascript';
            element.src = url;

            firstScript.parentNode.insertBefore(element, firstScript);

            function makeStub() {
                var TCF_LOCATOR_NAME = '__tcfapiLocator';
                var queue = [];
                var win = window;
                var cmpFrame;

                function addFrame() {
                    var doc = win.document;
                    var otherCMP = !!(win.frames[TCF_LOCATOR_NAME]);

                    if (!otherCMP) {
                        if (doc.body) {
                            var iframe = doc.createElement('iframe');

                            iframe.style.cssText = 'display:none';
                            iframe.name = TCF_LOCATOR_NAME;
                            doc.body.appendChild(iframe);
                        } else {
                            setTimeout(addFrame, 5);
                        }
                    }
                    return !otherCMP;
                }

                function tcfAPIHandler() {
                    var gdprApplies;
                    var args = arguments;

                    if (!args.length) {
                        return queue;
                    } else if (args[0] === 'setGdprApplies') {
                        if (
                            args.length > 3 &&
                            args[2] === 2 &&
                            typeof args[3] === 'boolean'
                        ) {
                            gdprApplies = args[3];
                            if (typeof args[2] === 'function') {
                                args[2]('set', true);
                            }
                        }
                    } else if (args[0] === 'ping') {
                        var retr = {
                            gdprApplies: gdprApplies,
                            cmpLoaded: false,
                            cmpStatus: 'stub'
                        };

                        if (typeof args[2] === 'function') {
                            args[2](retr);
                        }
                    } else {
                        queue.push(args);
                    }
                }

                function postMessageEventHandler(event) {
                    var msgIsString = typeof event.data === 'string';
                    var json = {};

                    try {
                        if (msgIsString) {
                            json = JSON.parse(event.data);
                        } else {
                            json = event.data;
                        }
                    } catch (ignore) { }

                    var payload = json.__tcfapiCall;

                    if (payload) {
                        window.__tcfapi(
                            payload.command,
                            payload.version,
                            function (retValue, success) {
                                var returnMsg = {
                                    __tcfapiReturn: {
                                        returnValue: retValue,
                                        success: success,
                                        callId: payload.callId
                                    }
                                };
                                if (msgIsString) {
                                    returnMsg = JSON.stringify(returnMsg);
                                }
                                if (event && event.source && event.source.postMessage) {
                                    event.source.postMessage(returnMsg, '*');
                                }
                            },
                            payload.parameter
                        );
                    }
                }

                while (win) {
                    try {
                        if (win.frames[TCF_LOCATOR_NAME]) {
                            cmpFrame = win;
                            break;
                        }
                    } catch (ignore) { }

                    if (win === window.top) {
                        break;
                    }
                    win = win.parent;
                }
                if (!cmpFrame) {
                    addFrame();
                    win.__tcfapi = tcfAPIHandler;
                    win.addEventListener('message', postMessageEventHandler, false);
                }
            };

            makeStub();

            var uspStubFunction = function () {
                var arg = arguments;
                if (typeof window.__uspapi !== uspStubFunction) {
                    setTimeout(function () {
                        if (typeof window.__uspapi !== 'undefined') {
                            window.__uspapi.apply(window.__uspapi, arg);
                        }
                    }, 500);
                }
            };

            var checkIfUspIsReady = function () {
                uspTries++;
                if (window.__uspapi === uspStubFunction && uspTries < uspTriesLimit) {
                    console.warn('USP is not accessible');
                } else {
                    clearInterval(uspInterval);
                }
            };

            if (typeof window.__uspapi === 'undefined') {
                window.__uspapi = uspStubFunction;
                var uspInterval = setInterval(checkIfUspIsReady, 6000);
            }
        })();
    </script>
    <!-- End Quantcast Choice. Consent Manager Tag v2.0 (for TCF 2.0) -->
    
                    
                    
                
                
                    <!-- Start VWO Async Smartcode -->
<script type="text/javascript">
window._vwo_code = window._vwo_code || (function(){
var account_id=502176,
settings_tolerance=2000,
library_tolerance=2500,
use_existing_jquery=false,
is_spa=1,
hide_element='body',

/* DO NOT EDIT BELOW THIS LINE */
f=false,d=document,code={use_existing_jquery:function(){return use_existing_jquery;},library_tolerance:function(){return library_tolerance;},finish:function(){if(!f){f=true;var a=d.getElementById('_vis_opt_path_hides');if(a)a.parentNode.removeChild(a);}},finished:function(){return f;},load:function(a){var b=d.createElement('script');b.src=a;b.type='text/javascript';b.innerText;b.onerror=function(){_vwo_code.finish();};d.getElementsByTagName('head')[0].appendChild(b);},init:function(){
window.settings_timer=setTimeout('_vwo_code.finish()',settings_tolerance);var a=d.createElement('style'),b=hide_element?hide_element+'{opacity:0 !important;filter:alpha(opacity=0) !important;background:none !important;}':'',h=d.getElementsByTagName('head')[0];a.setAttribute('id','_vis_opt_path_hides');a.setAttribute('type','text/css');if(a.styleSheet)a.styleSheet.cssText=b;else a.appendChild(d.createTextNode(b));h.appendChild(a);this.load('https://dev.visualwebsiteoptimizer.com/j.php?a='+account_id+'&u='+encodeURIComponent(d.URL)+'&f='+(+is_spa)+'&r='+Math.random());return settings_timer; }};window._vwo_settings_timer = code.init(); return code; }());
</script><script src="https://dev.visualwebsiteoptimizer.com/j.php?a=502176&amp;u=https%3A%2F%2Fwww.wakanim.tv%2Fde%2Fv2%2Fcatalogue%2Fshow%2F493%2Fafterlost-omu%2Fseason%2F870%2Fstaffel-1&amp;f=1&amp;r=0.0036083809039553216" type="text/javascript"></script>
<!-- End VWO Async Smartcode -->
                
<style>AD-SLOT,
AD-TRIPLE-BOX,
DFP-AD,
[class^="adDisplay-module"],
[class^="amp-ad-"],
[data-ad-cls],
[data-adbridg-ad-class],
[data-css-class="dfp-inarticle"],
[data-d-ad-id],
[data-desktop-ad-id],
[data-dynamic-ads],
[data-ez-name],
[data-freestar-ad],
[data-id^="div-gpt-ad"],
[data-m-ad-id],
[data-mobile-ad-id],
[data-name="adaptiveConstructorAd"],
[data-rc-widget],
[data-role="tile-ads-module"],
[data-template-type="nativead"],
[data-testid="ad_testID"],
[data-type="ad-vertical"],
[id^="ad-wrap-"],
[id^="ad_sky"],
[id^="ad_slider"],
[id^="section-ad-banner"],
[onclick^="location.href='http://www.reimageplus.com"],
a-ad,
a[style="width:100%;height:100%;z-index:10000000000000000;position:absolute;top:0;left:0;"],
ad-shield-ads,
app-ad,
app-advertisement,
app-large-ad,
ark-top-ad,
article.ad,
aside[id^="adrotate_widgets-"],
atf-ad-slot,
bottomadblock,
display-ads,
div[class^="Adstyled__AdWrapper-"],
div[class^="Display_displayAd"],
div[class^="kiwi-ad-wrapper"],
div[class^="native-ad-"],
div[data-ad-placeholder],
div[data-ad-wrapper],
div[data-adname],
div[data-adunit-path],
div[data-adunit],
div[data-adzone],
div[data-alias="300x250 Ad 1"],
div[data-alias="300x250 Ad 2"],
div[data-content="Advertisement"],
div[data-contentexchange-widget],
div[data-dfp-id],
div[data-id-advertdfpconf],
div[data-insertion],
div[data-mini-ad-unit],
div[data-native-ad],
div[data-spotim-slot],
div[id^="_vdo_ads_player_ai_"],
div[id^="ad-div-"],
div[id^="ad-position-"],
div[id^="adngin-"],
div[id^="adrotate_widgets-"],
div[id^="ads250_250-widget-"],
div[id^="ads300_100-widget-"],
div[id^="ads300_250-widget-"],
div[id^="adspot-"],
div[id^="advads_ad_"],
div[id^="crt-"][style],
div[id^="div-ads-"],
div[id^="google_dfp_"],
div[id^="gpt_ad_"],
div[id^="lazyad-"],
div[id^="optidigital-adslot"],
div[id^="pa_sticky_ad_box_middle_"],
div[id^="rc-widget-"],
div[id^="sticky_ad_"],
div[id^="vuukle-ad-"],
div[recirculation-ad-container],
gpt-ad,
guj-ad,
hl-adsense,
img[src^="https://images.purevpnaffiliates.com"],
ps-connatix-module,
span[data-ez-ph-id],
span[id^="ezoic-pub-ad-placeholder-"],
topadblock,
zeus-ad,
[class^="tile-picker__CitrusBannerContainer-sc-"],
citrus-ad-wrapper,
[class^="s2nPlayer"],
div[id*="MarketGid"],
[onclick*="content.ad/"],
AMP-AD,
amp-ad,
amp-ad-custom,
amp-connatix-player,
amp-fx-flying-carpet,
a[data-obtrack^="http://paid.outbrain.com/network/redir?"],
a[data-oburl^="https://paid.outbrain.com/network/redir?"],
a[data-redirect^="https://paid.outbrain.com/network/redir?"],
a[data-url^="http://paid.outbrain.com/network/redir?"] + .author,
a[data-widget-outbrain-redirect^="http://paid.outbrain.com/network/redir?"],
a[onmousedown^="this.href='http://paid.outbrain.com/network/redir?"][target="_blank"],
a[onmousedown^="this.href='http://paid.outbrain.com/network/redir?"][target="_blank"] + .ob_source,
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"][target="_blank"] + .ob_source,
a[target="_blank"][onmousedown="this.href^='http://paid.outbrain.com/network/redir?"],
div[id^="taboola-stream-"],
display-ad-component,
div[id^="zergnet-widget"],
a[aria-label="Werbelink"],
[onclick*="window.open('http://deloplen.com/"],
[data-uri^="https://s3.amazonaws.com"],
[data-lnguri^="https://s3.amazonaws.com"],
[onclick*="postlnk.com"],
[class^="DisplayAd"],
div[class*="displayAdRight"],
[data-lnguri*="vipbox"],
[src^="https://aff1xstavka.com"],
[class^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]),
[id^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]),
div[id^="div-gpt-"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]),
.samBannerUnit, .samCodeUnit,
[src^="//dombnrs.com/"],
[src^="https://forum.picbaron.com/Banner"],
div[id][style^="position: fixed; inset: 0px; z-index: 2147483647; background: black"][style*="opacity: 0.01"],
div[class$="player-promo-col"],
div#spot-holder.spot-holder[style="display: block;"],
a[dontfo=""][style$="position: absolute; z-index: 2147483647;"],
[data-ad-module]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-width]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-adblockkey]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(html):not(.adsbygoogle),
[data-advadstrackid]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-manager-id]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
div[style^="z-index: 999999; background-image: url(\"data:image/gif;base64,"][style$="position: absolute;"],
a[onclick="openAuc();"],
div[style="position: fixed; display: block; width: 100%; height: 100%; inset: 0px; background-color: rgba(0, 0, 0, 0); z-index: 300000;"],
div[style^="position:fixed;inset:0px;z-index:2147483647;background:black;opacity:0.01"],
a[id][href="https://chpadblock.com/"][rel^="noopener noreferrer"],
a[id][href="https://toolkitspro.com"][rel^="noopener noreferrer"],
a[id][href="https://hamrocsit.com"][rel^="noopener noreferrer"],
iframe.lazyloaded[data-src^="https://rcm-fe.amazon-adsystem.com/"],
[style="position:absolute;top:0;left:0;width: 100%;height: 100%;z-index:2147483647"],
[style="top: 0px; left: 0px; width: 940px; height: 600px; position: absolute; z-index: 2147483647;"],
div[style="position: fixed;top: 0;left: 0;right: 0;bottom:0;z-index: 99999999;background: rgba(0,0,0,.6);"] { display: none !important; }

[data-ad-name],
[data-revive-zoneid],
[name^="google_ads_iframe"],
div[aria-label="Ads"],
div[data-ad-targeting],
div[data-google-query-id],
div[data-native_ad],
div[id^="ad_position_"],
div[id^="dfp-ad-"],
div[id^="ezoic-pub-ad-"],
div[id^="yandex_ad"],
ins.adsbygoogle,
div[id*="ScriptRoot"],
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"][target="_blank"],
.trc_related_container div[data-item-syndicated="true"],
amp-embed[type="taboola"],
[id^="google_ads_iframe"]:not(.rb-adbanner) { display: none !important; }</style><style>a[href^="https://www.vavoo.tv/promo/"] > img,
a[href^="http://www.rotlichtkartei.com/?sc="],
[href*="uselnk.com/"],
a[href^="http://adtrack"],
a[href^="https://www.mrskin.com/account/"],
a[href^="https://clk.wrenchsound.store/"],
[href*="postlnk.com"],
[href*="passtechusa.com"],
[href*="speenphorbin.com"] { display: none !important; }</style></head>
<body class="websiteDE showFreeTrialBanner">
    <!-- Google Tag Manager (noscript) -->
    <style>
        .async-hide {
            opacity: 0 !important
        }
    </style>
    <script>
        (function (a, s, y, n, c, h, i, d, e) {
            s.className += ' ' + y; h.start = 1 * new Date;
            h.end = i = function () { s.className = s.className.replace(RegExp(' ?' + y), '') };
            (a[n] = a[n] || []).hide = h; setTimeout(function () { i(); h.end = null }, c); h.timeout = c;
        })(window, document.documentElement, 'async-hide', 'dataLayer', 4000,
            { 'GTM-56KXTWV': true });</script>

    <noscript>
        <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-P33BJ9N"
                height="0" width="0" style="display:none;visibility:hidden"></iframe>
    </noscript>
    <!-- End Google Tag Manager (noscript) -->
    <script type="text/javascript">
        (function (i, s, o, g, r, a, m) {
            i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
        (i[r].q = i[r].q || []).push(arguments)
            }, i[r].l = 1 * new Date(); a = s.createElement(o),
            m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
        })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

        ga('create', 'UA-13025081-1', 'auto');



    ga('require', 'GTM-56KXTWV');
    ga('send', 'pageview');
    </script>

    <a href="#" class="FreeTrialBanner" id="headerFreeTrial" style="cursor:default">
        <text>

        </text>
    </a>




<header class="header-main js-header-main">
    <div class="header-main_left">

        <a class="header-main_nav-button js-header-main-button" href="#js-nav-main">
            <span class="header-main_nav-button_lines">
                <span class="header-main_nav-button_line -one"></span>
                <span class="header-main_nav-button_line -two"></span>
                <span class="header-main_nav-button_line -three"></span>

            </span>
        </a>
        <a class="header-main_logo" href="/de/v2">
            <svg role="img" title="Wakanim"><use xlink:href="/assets/images/dist/svgs.svg#logo"></use></svg>
        </a>
    </div>
        <div class="header-main_right">
            <div class="header-main_grid">
                <div class="header-main_item -desktop">
<form action="/de/v2/catalogue/search" class="nav-main_search" method="post" style="">                        <div class="typeahead__container">
                            <div class="typeahead__field">
                                <div class="typeahead__query">
                                    <span class="typeahead__cancel-button">×</span><input class="nav-main_search_input" type="text" placeholder="Suchen" name="search" id="searchtxtheader" autocomplete="off">
                                </div>
                                <div class="typeahead__button">
                                    <button class="nav-main_search_button" type="submit" disabled="disabled">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#search"></use></svg>
                                    </button>
                                </div>
                            </div>
                        </div>
</form>                </div>
                        <div class="header-main_item -desktop">
                            <a class="header-main_button" href="/de/v2/agenda/agenda">
                                <span class="header-main_notifications calendar-icon">
                                    <span class="header-main_notifications_icon">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#calendarico"></use></svg>
                                    </span>
                                </span>
                            </a>
                        </div>
                        <div class="header-main_item -mobile-half">
                            <a class="header-main_button js-header-main-button" href="#js-nav-user">
                                <span class="header-main_login">
                                    Login
                                </span>
                            </a>
                        </div>
                </div>
            </div>
    </header>




<nav class="nav-main js-header-main-component" id="js-nav-main">
    <div class="nav-main_wrap js-scrollbar ps-container ps-theme-default" data-ps-id="269c7ec2-f97f-7769-c25e-9fcb940eaada">
        <form action="/de/v2/catalogue/search" class="nav-main_search" method="post" style="">            <input class="nav-main_search_input" type="text" placeholder="Suchen" name="search" id="searchtxt">
            <button class="nav-main_search_button" type="submit" disabled="disabled">
                <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#search"></use></svg>
            </button>
</form>                    <ul class="nav_menu">
                <li class="nav_menu_item -mobile">
                    <a class="nav_menu_link" href="/">Home</a>
                </li>
                <li class="nav_menu_item">
                    <a class="nav_menu_link nav_menu_link-WhatsNew" href="/de/v2/whats-new">
                        Neuigkeiten
                    </a>
                </li>
                <li class="nav_menu_item js-dropdown-item is-open">
                    <a class="nav_menu_link is-current" href="/de/v2/catalogue">Katalog</a>
                    <button class="nav_menu_dropdown-button js-dropdown-button" type="button"></button>
                    <div class="nav_menu_dropdown js-dropdown -open">
                        <ul class="nav_menu_dropdown_list">

                            <text>
                                <li class="nav_menu_dropdown_item">
                                    <a class="nav_menu_dropdown_link is-current" href="/de/v2/catalogue">Anime</a>
                                </li>
                                <li class="nav_menu_dropdown_item nav_menu_item js-dropdown-item">
                                    <span class="nav_menu_dropdown_link --nolink">Staffeln</span>
                                    <button class="nav_menu_dropdown-button js-dropdown-button" type="button"></button>
                                    <div class="nav_menu_dropdown js-dropdown">
                                        <ul class="nav_menu_dropdown_list">
                                                        <li class="nav_menu_dropdown_item nav_menu_item js-dropdown-item">
                                                            <span class="nav_menu_dropdown_link nav_menu_dropdown_link_year --nolink">2022</span>
                                                            <button class="nav_menu_dropdown-button js-dropdown-button" type="button"></button>
                                                            <div class="nav_menu_dropdown js-dropdown">
                                                                <ul class="nav_menu_dropdown_list">
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/summer-2022">Sommer 2022</a>
                                                                        </li>
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/spring-2022">Frühjahr 2022</a>
                                                                        </li>
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/winter-2022">Winter 2022</a>
                                                                        </li>
                                                                </ul>
                                                            </div>
                                                        </li>
                                                        <li class="nav_menu_dropdown_item nav_menu_item js-dropdown-item">
                                                            <span class="nav_menu_dropdown_link nav_menu_dropdown_link_year --nolink">2021</span>
                                                            <button class="nav_menu_dropdown-button js-dropdown-button" type="button"></button>
                                                            <div class="nav_menu_dropdown js-dropdown">
                                                                <ul class="nav_menu_dropdown_list">
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/fall-2021">Herbst 2021</a>
                                                                        </li>
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/summer-2021">Sommer 2021</a>
                                                                        </li>
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/spring-2021">Frühjahr 2021</a>
                                                                        </li>
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/winter-2021">Winter 2021</a>
                                                                        </li>
                                                                </ul>
                                                            </div>
                                                        </li>
                                                        <li class="nav_menu_dropdown_item nav_menu_item js-dropdown-item">
                                                            <span class="nav_menu_dropdown_link nav_menu_dropdown_link_year --nolink">2020</span>
                                                            <button class="nav_menu_dropdown-button js-dropdown-button" type="button"></button>
                                                            <div class="nav_menu_dropdown js-dropdown">
                                                                <ul class="nav_menu_dropdown_list">
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/fall-2020">Herbst 2020</a>
                                                                        </li>
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/summer-2020">Sommer 2020</a>
                                                                        </li>
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/spring-2020">Frühjahr 2020</a>
                                                                        </li>
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/winter-2020">Winter 2020</a>
                                                                        </li>
                                                                </ul>
                                                            </div>
                                                        </li>
                                                        <li class="nav_menu_dropdown_item nav_menu_item js-dropdown-item">
                                                            <span class="nav_menu_dropdown_link nav_menu_dropdown_link_year --nolink">2019</span>
                                                            <button class="nav_menu_dropdown-button js-dropdown-button" type="button"></button>
                                                            <div class="nav_menu_dropdown js-dropdown">
                                                                <ul class="nav_menu_dropdown_list">
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/fall-2019">Herbst 2019</a>
                                                                        </li>
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/summer-2019">Sommer 2019</a>
                                                                        </li>
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/spring-2019">Frühjahr 2019</a>
                                                                        </li>
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/winter-2019">Winter 2019</a>
                                                                        </li>
                                                                </ul>
                                                            </div>
                                                        </li>
                                                        <li class="nav_menu_dropdown_item nav_menu_item js-dropdown-item">
                                                            <span class="nav_menu_dropdown_link nav_menu_dropdown_link_year --nolink">2018</span>
                                                            <button class="nav_menu_dropdown-button js-dropdown-button" type="button"></button>
                                                            <div class="nav_menu_dropdown js-dropdown">
                                                                <ul class="nav_menu_dropdown_list">
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/fall-2018">Herbst 2018</a>
                                                                        </li>
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/summer-2018">Sommer 2018</a>
                                                                        </li>
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/spring-2018">Frühjahr 2018</a>
                                                                        </li>
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/winter-2018">Winter 2018</a>
                                                                        </li>
                                                                </ul>
                                                            </div>
                                                        </li>
                                                        <li class="nav_menu_dropdown_item nav_menu_item js-dropdown-item">
                                                            <span class="nav_menu_dropdown_link nav_menu_dropdown_link_year --nolink">2017</span>
                                                            <button class="nav_menu_dropdown-button js-dropdown-button" type="button"></button>
                                                            <div class="nav_menu_dropdown js-dropdown">
                                                                <ul class="nav_menu_dropdown_list">
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/fall-2017">Herbst 2017</a>
                                                                        </li>
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/spring-2017">Frühjahr 2017</a>
                                                                        </li>
                                                                </ul>
                                                            </div>
                                                        </li>
                                                        <li class="nav_menu_dropdown_item nav_menu_item js-dropdown-item">
                                                            <span class="nav_menu_dropdown_link nav_menu_dropdown_link_year --nolink">2016</span>
                                                            <button class="nav_menu_dropdown-button js-dropdown-button" type="button"></button>
                                                            <div class="nav_menu_dropdown js-dropdown">
                                                                <ul class="nav_menu_dropdown_list">
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/fall-2016">Herbst 2016</a>
                                                                        </li>
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/spring-2016">Frühjahr 2016</a>
                                                                        </li>
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/winter-2016">Winter 2016</a>
                                                                        </li>
                                                                </ul>
                                                            </div>
                                                        </li>
                                                        <li class="nav_menu_dropdown_item nav_menu_item js-dropdown-item">
                                                            <span class="nav_menu_dropdown_link nav_menu_dropdown_link_year --nolink">2015</span>
                                                            <button class="nav_menu_dropdown-button js-dropdown-button" type="button"></button>
                                                            <div class="nav_menu_dropdown js-dropdown">
                                                                <ul class="nav_menu_dropdown_list">
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/fall-2015">Herbst 2015</a>
                                                                        </li>
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/spring-2015">Frühjahr 2015</a>
                                                                        </li>
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/winter-2015">Winter 2015</a>
                                                                        </li>
                                                                </ul>
                                                            </div>
                                                        </li>
                                                        <li class="nav_menu_dropdown_item nav_menu_item js-dropdown-item">
                                                            <span class="nav_menu_dropdown_link nav_menu_dropdown_link_year --nolink">2014</span>
                                                            <button class="nav_menu_dropdown-button js-dropdown-button" type="button"></button>
                                                            <div class="nav_menu_dropdown js-dropdown">
                                                                <ul class="nav_menu_dropdown_list">
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/fall-2014">Herbst 2014</a>
                                                                        </li>
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/summer-2014">Sommer 2014</a>
                                                                        </li>
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/spring-2014">Frühjahr 2014</a>
                                                                        </li>
                                                                </ul>
                                                            </div>
                                                        </li>
                                                        <li class="nav_menu_dropdown_item nav_menu_item js-dropdown-item">
                                                            <span class="nav_menu_dropdown_link nav_menu_dropdown_link_year --nolink">2013</span>
                                                            <button class="nav_menu_dropdown-button js-dropdown-button" type="button"></button>
                                                            <div class="nav_menu_dropdown js-dropdown">
                                                                <ul class="nav_menu_dropdown_list">
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/fall-2013">Herbst 2013</a>
                                                                        </li>
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/spring-2013">Frühjahr 2013</a>
                                                                        </li>
                                                                </ul>
                                                            </div>
                                                        </li>
                                                        <li class="nav_menu_dropdown_item nav_menu_item js-dropdown-item">
                                                            <span class="nav_menu_dropdown_link nav_menu_dropdown_link_year --nolink">2011</span>
                                                            <button class="nav_menu_dropdown-button js-dropdown-button" type="button"></button>
                                                            <div class="nav_menu_dropdown js-dropdown">
                                                                <ul class="nav_menu_dropdown_list">
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/summer-2011">Sommer 2011</a>
                                                                        </li>
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/spring-2011">Frühjahr 2011</a>
                                                                        </li>
                                                                </ul>
                                                            </div>
                                                        </li>
                                                        <li class="nav_menu_dropdown_item nav_menu_item js-dropdown-item">
                                                            <span class="nav_menu_dropdown_link nav_menu_dropdown_link_year --nolink">2008</span>
                                                            <button class="nav_menu_dropdown-button js-dropdown-button" type="button"></button>
                                                            <div class="nav_menu_dropdown js-dropdown">
                                                                <ul class="nav_menu_dropdown_list">
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/fall-2008">Herbst 2008</a>
                                                                        </li>
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/winter-2008">Winter 2008</a>
                                                                        </li>
                                                                </ul>
                                                            </div>
                                                        </li>
                                                        <li class="nav_menu_dropdown_item nav_menu_item js-dropdown-item">
                                                            <span class="nav_menu_dropdown_link nav_menu_dropdown_link_year --nolink">2000</span>
                                                            <button class="nav_menu_dropdown-button js-dropdown-button" type="button"></button>
                                                            <div class="nav_menu_dropdown js-dropdown">
                                                                <ul class="nav_menu_dropdown_list">
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/summer-2000">Sommer 2000</a>
                                                                        </li>
                                                                        <li class="nav_menu_dropdown_item">
                                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/season/winter-2000">Winter 2000</a>
                                                                        </li>
                                                                </ul>
                                                            </div>
                                                        </li>
                                        </ul>
                                    </div>
                                </li>
                                <li class="nav_menu_dropdown_item nav_menu_item js-dropdown-item">
                                    <span class="nav_menu_dropdown_link --nolink">Genre</span>
                                    <button class="nav_menu_dropdown-button js-dropdown-button" type="button"></button>
                                    <div class="nav_menu_dropdown js-dropdown">
                                        <ul class="nav_menu_dropdown_list">
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/genre/abenteuer">Abenteuer</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/genre/action">Action</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/genre/alternativweltgeschichte">Alternativweltgeschichte</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/genre/drama">Drama</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/genre/ecchi">Ecchi</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/genre/fantasy">Fantasy</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/genre/historisch">Historisch</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/genre/horror">Horror</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/genre/isekai">Isekai</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/genre/josei">Josei</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/genre/kampfsportarten">Kampfsportarten</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/genre/komodie">Komödie</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/genre/kriminal">Kriminal</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/genre/magie">Magie</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/genre/mecha">Mecha</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/genre/musik">Musik</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/genre/original">Original</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/genre/romantik">Romantik</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/genre/sci-fi">Sci-Fi</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/genre/seinen">Seinen</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/genre/shoujo">Shoujo</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/genre/shounen">Shounen</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/genre/slice-of-life">Slice of Life</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/genre/sport">Sport</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/genre/thriller">Thriller</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/genre/ubernaturliche">Übernatürliche</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/genre/vampir">Vampir</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/genre/yaoi">Yaoi</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/genre/yuri">Yuri</a>
                                                        </li>
                                                    
                                        </ul>
                                    </div>
                                </li>
                                <li class="nav_menu_dropdown_item nav_menu_item js-dropdown-item">
                                    <span class="nav_menu_dropdown_link --nolink">Jahr</span>
                                    <button class="nav_menu_dropdown-button js-dropdown-button" type="button"></button>
                                    <div class="nav_menu_dropdown js-dropdown">
                                        <ul class="nav_menu_dropdown_list">
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/year/2022">2022</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/year/2021">2021</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/year/2020">2020</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/year/2019">2019</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/year/2018">2018</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/year/2017">2017</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/year/2016">2016</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/year/2015">2015</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/year/2014">2014</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/year/2013">2013</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/year/2011">2011</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/year/2010">2010</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/year/2008">2008</a>
                                                        </li>
                                                    
                                                    
                                                        <li class="nav_menu_dropdown_item">
                                                            <a class="nav_menu_dropdown_link" href="/de/v2/catalogue/by/year/2001">2001</a>
                                                        </li>
                                                    
                                        </ul>
                                    </div>
                                </li>
                                <li class="nav_menu_dropdown_item">
                                    <a class="nav_menu_dropdown_link" href="/de/v2/podcasts">Serien</a>
                                </li>
                        </text></ul>
                    </div>
                </li>




                <li class="nav_menu_item">
                    <a class="nav_menu_link" href="/de/v2/agenda">Kalender</a>
                </li>
                    <li class="nav_menu_item">
                        <a class="nav_menu_link" href="/de/v2/news">News</a>
                    </li>
                                    <li class="nav_menu_item js-dropdown-item">
                        <a class="nav_menu_link" href="/de/v2/community">Community</a>
                        <button class="nav_menu_dropdown-button js-dropdown-button" type="button"></button>
                        <div class="nav_menu_dropdown js-dropdown">
                            <ul class="nav_menu_dropdown_list">
                                    <li class="nav_menu_dropdown_item">
                                        <a class="nav_menu_dropdown_link" href="/de/v2/community/latestactivities">Aktivität auf der Seite</a>
                                    </li>
                                                                    <li class="nav_menu_dropdown_item">
                                        <a class="nav_menu_dropdown_link" href="/de/v2/forum" target="_self">Forum</a>
                                    </li>
                            </ul>
                        </div>
                    </li>
                <li class="nav_menu_item">
                    <a class="nav_menu_link" href="/de/v2/discover">Unsere Angebote</a>
                </li>

                
                    <li class="nav_menu_item">
                        <a class="nav_menu_link" href="https://shop.akibapass.de" target="_blank">Shop</a>
                    </li>
            </ul>
                <ul class="nav-main_social">
                                            <li class="nav-main_social_item">
                            <a class="nav-main_social_link" href="https://www.facebook.com/WakanimDE" target="_blank">
                                <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#facebook"></use></svg>
                            </a>
                        </li>
                                                                <li class="nav-main_social_item">
                            <a class="nav-main_social_link" href="https://www.instagram.com/wakanim/" target="_blank">
                                <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#instagram"></use></svg>
                            </a>
                        </li>
                                                                <li class="nav-main_social_item">
                            <a class="nav-main_social_link" href="https://twitter.com/WakanimDE" target="_blank">
                                <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#twitter"></use></svg>
                            </a>
                        </li>
                                            <li class="nav-main_social_item">
                            <a class="nav-main_social_link" href="http://youtube.com/c/WakanimDE?sub_confirmation=1" target="_blank">
                                <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#youtube"></use></svg>
                            </a>
                        </li>
                                            <li class="nav-main_social_item">
                            <a class="nav-main_social_link" href="https://discord.gg/D9uvDaX" target="_blank">
                                <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#discord"></use></svg>
                            </a>
                        </li>
                </ul>
                <div class="Akibapass">
                    <a href="//shop.akibapass.de" target="_blank"><img src="//d2y6mqrpjbqoe6.cloudfront.net/image/upload/f_auto,q_auto/content/images/logo_akibapass.png" alt="Logo Akibapass"></a>
                </div>
                <div class="HpRecommend hprecommend">
                    <span class="hprecommend">Beliebte Anime</span>
                    <ul class="HpRecommend-list">
                            <li class="HpRecommend-item">
                                <a href="/de/v2/catalogue/show/398/haikyu-omudt" class="hprecommend">Haikyu!! (OmU./Dt.)</a>
                            </li>
                            <li class="HpRecommend-item">
                                <a href="/de/v2/catalogue/show/1171/mushoku-tensei-jobless-reincarnation" class="hprecommend">Mushoku Tensei: Jobless Reincarnation</a>
                            </li>
                            <li class="HpRecommend-item">
                                <a href="/de/v2/catalogue/show/1202/horimiya" class="hprecommend">Horimiya</a>
                            </li>
                            <li class="HpRecommend-item">
                                <a href="/de/v2/catalogue/show/505/wise-mans-grandchild-omu" class="hprecommend">Wise Man’s Grandchild (OmU.)</a>
                            </li>
                    </ul>
                </div>
                <br><br>
            <div class="HpGeoloc">
                <span>Identifiziert als: Deutschland</span><br>

                <div class="clearfix">


                </div>
            </div>
    <div class="ps-scrollbar-x-rail" style="left: 0px; bottom: 3px;"><div class="ps-scrollbar-x" tabindex="0" style="left: 0px; width: 0px;"></div></div><div class="ps-scrollbar-y-rail" style="top: 0px; right: 0px;"><div class="ps-scrollbar-y" tabindex="0" style="top: 0px; height: 0px;"></div></div></div>
</nav>



<nav class="nav-user js-header-main-component" id="js-nav-user">
    <div class="nav-user_wrap">
<form action="/de/v2/account/login?ReturnUrl=%2Fde%2Fv2%2Fcatalogue%2Fshow%2F493%2Fafterlost-omu%2Fseason%2F870%2Fstaffel-1" class="nav-user_login" method="post" role="form">            <div class="input-group">
                <label class="label" for="username">Benutzername/E-Mail-Adresse</label>
                <input class="input" type="text" id="username" name="Username">
            </div>
            <div class="input-group">
                <label class="label" for="password">Passwort</label>
                <input class="input" type="password" id="password" name="Password">
            </div>
                    <input type="hidden" name="ddd806f0c9d73f6d32788012bea26040" value="7LnwaXW/GaHPbgvG7Z3RBghPQdhWl4Dt9S13P6JotzOftV4mxCOEt+EJx4HMD3tSvngCqgbWcxmKiuLtHecavQXoT4ZuibehbiS9BRRj6hQEYyR6k/F+bOp2TUqvlVr5JYUQLvdMSTp1uUZe+wCC0xaJkJjRag2HdGlxCCCj25bGFFq2Dc0PNNQ3tHYCKNh1zGNiffEaRUxWUEXROUVbnHGjwjl15OUy/mQx/NSRvV6QfJs6U3L+tIMkUBcKa61eW+anbLJ+GaNJ9vAQ7+SBPhiLw3KcY02pzMAqNKGnFq+XldCRXVnBDX/ZwSY55wx0wTeHuzq6py9NQcDf68i17g==">
                    <input type="hidden" name="e3a6a957b3c7a160f1744c96cefa27aa" value="7LnwaXW/GaHPbgvG7Z3RBghPQdhWl4Dt9S13P6JotzOftV4mxCOEt+EJx4HMD3tSvngCqgbWcxmKiuLtHecavQXoT4ZuibehbiS9BRRj6hQEYyR6k/F+bOp2TUqvlVr5JYUQLvdMSTp1uUZe+wCC0xaJkJjRag2HdGlxCCCj25bGFFq2Dc0PNNQ3tHYCKNh1zGNiffEaRUxWUEXROUVbnEg52nBocMDmZ+neLkkEsmex+DwgjxrsX6pKhSWNTMiFiRFSfry3n9uPY9xNTFpPmY34UQJHoDGL3cM3pPOlkyS3cnzk79UYhnNrdKBRYcbu+Bp4ELw01Zga6zIVrN+23A==">
                    <input type="hidden" name="2cf31ec8cce98c0767773833a376f684" value="7LnwaXW/GaHPbgvG7Z3RBghPQdhWl4Dt9S13P6JotzOftV4mxCOEt+EJx4HMD3tSvngCqgbWcxmKiuLtHecavQXoT4ZuibehbiS9BRRj6hQEYyR6k/F+bOp2TUqvlVr5JYUQLvdMSTp1uUZe+wCC0xaJkJjRag2HdGlxCCCj25bGFFq2Dc0PNNQ3tHYCKNh1zGNiffEaRUxWUEXROUVbnCmkVbcgR7QrPIfw0cAQakIWvtzdkj2aw+AAEpDj8gLpb+0jwCR1xiYQMCeiQs0mSJSKps3dA85jgdcRu0tJLY2lyncc0Q2mb0Vs9KBWSXLPQs6GdOMOEHwYAOcn/6K0pQ==">
            <button class="button" type="submit" name="login">Verbindung</button>
            <div class="nav-user_login_checkbox">
                <input class="checkbox" type="checkbox" id="remember" name="RememberMe" value="true">
                <label class="checkbox-label" for="remember">Daten speichern?</label>
                <input type="hidden" value="false" name="RememberMe">
            </div>
            <a class="nav-user_login_link" href="/de/v2/account/forgotpassword">Passwort vergessen?</a>
</form>    </div>
</nav>    
        <div class="alert-location" style="background-color: #21AEF9">
            <span class="closebtn" onclick="this.parentElement.style.display='none';">×</span><strong>Wakanim wird abgeschaltet </strong>
            Liebes Wakanim-Mitglied, nach gründlicher Überlegung und zahlreichen Jahren als Anime-Dienst haben wir uns dazu entschieden, Wakanim am 3. November einzustellen. Weitere Informationen sind in unseren <a href="https://www.wakanim.tv/de/v2/support/faq">FAQs</a> zu finden.
        </div>


    

<style type="text/css">
    a.active {
        color: red;
    }
</style>
<div class="SerieV2">
    <section class="serie">
        <div class="SerieV2-bg" style=""></div>
        <div class="container" itemscope="" itemtype="http://schema.org/TVSeries">
            <meta itemprop="name" content="AFTERLOST (OmU.)">
            <link itemprop="url" href="https://www.wakanim.tv/de/v2/catalogue/show/493/afterlost-omu" rel="canonical">
            <meta itemprop="description" content="Eines Tages wurde eine Stadt vernichtet. Yuki ist eine junge Frau, von der gesagt wird, dass sie die einzige Person ist, die nach der Vernichtung der Stadt noch übrig geblieben ist. Takuya ist ein Einzelgänger und Schmuggler. Zusammen mit dem Brief, den Yukis Vater hinterlassen hat, gehen sie auf die Stadt zu, die jetzt Lost heißt, aber unerwartete Hindernisse stehen ihnen im Weg. Die Gedanken der Zurückgelassenen, geheime und mysteriöse Organisationen und versteckte Verschwörungen erwarten Yuki und Takuya, während sie sich dem Geheimnis hinter Lost nähern.
">
            <meta itemprop="thumbnailUrl" content="//d2y6mqrpjbqoe6.cloudfront.net/image/upload/f_auto,q_auto/media/library-200/216_636967441250086118After-Lost_Small_hq.jpg">
            <span itemprop="author" itemscope="" itemtype="http://schema.org/Person">
                <meta itemprop="name" content="WAKANIM">
                <link itemprop="url" href="https://www.wakanim.tv" rel="canonical">
            </span>
                <meta itemprop="isFamilyFriendly" content="yes">
            <meta itemprop="genre" content="Abenteuer, Drama, Sci-Fi, Übernatürliche">
            <meta itemprop="alternativeHeadline" content="消滅都市">
            <meta itemprop="startDate" content="2019-04-07T00:00:00.0000000">
            <meta itemprop="numberOfEpisodes" content="12">
            <meta itemprop="numberOfSeasons" content="1">
            <span itemprop="aggregateRating" itemscope="" itemtype="http://schema.org/AggregateRating">
                    <meta itemprop="ratingValue" content="3.6">
                    <meta itemprop="ratingCount" content="36">
            </span>
            <div class="SerieV2-body">
                <div class="SerieV2-header SerieHeader clearfix" style="min-height: 582px;">
                    <div class="SerieHeader-left">
                        <img class="SerieHeader-thumb" alt="AFTERLOST" src="//d2y6mqrpjbqoe6.cloudfront.net/image/upload/f_auto,q_auto/media/library-400/216_636967441250086118After-Lost_Small_hq.jpg">
                    </div>
                    <div class="SerieHeader-minimizeContent" style="top: 119px;">
                        <h1>
                                <img alt="AFTERLOST" class="SerieHeader-titleImg" title="AFTERLOST" src="//d2y6mqrpjbqoe6.cloudfront.net/image/upload/f_auto,q_auto/media/logos-500/493_ENG_LOGO_V2.png">
                        </h1>
                        <div class="SerieHeader-rating">

<div class="Stars stars -dark -big">
    <div class="Stars-emptyWrap">
        <span class="star -no"><svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#star"></use></svg></span>
        <span class="star -no"><svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#star"></use></svg></span>
        <span class="star -no"><svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#star"></use></svg></span>
        <span class="star -no"><svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#star"></use></svg></span>
        <span class="star -no"><svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#star"></use></svg></span>
    </div>
    <div class="Stars-filledWrap" style="width: 72%">
        <span class="star"><svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#star"></use></svg></span>
        <span class="star"><svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#star"></use></svg></span>
        <span class="star"><svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#star"></use></svg></span>
        <span class="star"><svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#star"></use></svg></span>
        <span class="star"><svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#star"></use></svg></span>
    </div>
</div>
                        </div>
                        <div class="SerieHeader-actionsPos">

                        <div class="SerieHeader-actions">

                                    <a class="SerieHeader-action --red resume" href="/de/v2/catalogue/episode/8784/afterlost-omu-staffel-1-folge-1-omu" title="abspielen">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#play-show"></use></svg>
                                        <span>abspielen</span>
                                    </a>
                                                                    <a class="SerieHeader-action trailer js-open-iframebox-lightbox" href="https://www.youtube.com/embed/7PTyZNHiirQ" title="Trailer" rel="#js-trailer-lightbox">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#icon_video_unfilled"></use></svg>
                                        <span>Trailer</span>
                                    </a>
                                                                    <a class="SerieHeader-action buy js-open-lightbox" title="Einkauf" href="#js-connect" rel="">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#credit"></use></svg>
                                        <span>Einkauf</span>
                                    </a>
                                                            </div></div>
                    </div>
                    <div class="SerieHeader-right">
                        <div class="SerieHeader-rightContent">
                            <div class="SerieHeader-titleImgFake">
                                    <img alt="AFTERLOST" class="SerieHeader-titleImg" title="AFTERLOST" src="//d2y6mqrpjbqoe6.cloudfront.net/image/upload/f_auto,q_auto/media/logos-500/493_ENG_LOGO_V2.png">
                            </div>
                            <p class="SerieHeader-spotlight">Auf Abruf und als Download für deine Sammlung verfügbar</p>
                            <div class="SerieHeader-actions">

                                    <a class="SerieHeader-action --red resume" href="/de/v2/catalogue/episode/8784/afterlost-omu-staffel-1-folge-1-omu" title="abspielen">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#play-show"></use></svg>
                                        <span>abspielen</span>
                                    </a>
                                                                    <a class="SerieHeader-action trailer js-open-iframebox-lightbox" href="https://www.youtube.com/embed/7PTyZNHiirQ" title="Trailer" rel="#js-trailer-lightbox">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#icon_video_unfilled"></use></svg>
                                        <span>Trailer</span>
                                    </a>
                                                                    <a class="SerieHeader-action buy js-open-lightbox" title="Einkauf" href="#js-connect" rel="">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#credit"></use></svg>
                                        <span>Einkauf</span>
                                    </a>
                                                            </div>
                                                    </div>
                    </div>
                </div>
                <div class="SerieV2-content">
                        <div class="SerieV2-advertising">
                        </div>
                    <hr class="SerieV2-hr">
                    <ul id="nav-show" class="SerieV2-nav SerieNav">
                        <li>
                            <a class="SerieNav-btn" data-showfull="1" href="/de/v2/catalogue/show/493/afterlost-omu">
                                <span class="SerieNav-text">
                                    Infos
                                </span>
                            </a>
                        </li>
                            <li>
                                <a class="SerieNav-btn active" href="/de/v2/catalogue/show/493/afterlost-omu/season/870/staffel-1">
                                    <span class="SerieNav-text">
                                        Episoden
                                    </span>
                                </a>
                            </li>
                        <li>
                            <a class="SerieNav-btn" href="/de/v2/catalogue/show/493/afterlost-omu/reviews">
                                <span class="SerieNav-text">
                                    Bewertungen
                                </span>
                            </a>
                        </li>
                                            </ul>
                    <div class="SerieV2-ajaxBlock" style="min-height: 1437px;">
                        <div class="SerieV2-loader">
                            <div id="SerieV2-loaderLottie" class="SerieV2-loaderLottie lottieLoaded" data-loader-src="//cdncontent.wakanim.tv/images/lottie/wakanim_logo_animation.json">

                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 919 711" width="919" height="711" preserveAspectRatio="xMidYMid meet" style="width: 100%; height: 100%; transform: translate3d(0px, 0px, 0px);"><defs><clipPath id="animationMask_jlelpW34p5"><rect width="919" height="711" x="0" y="0"></rect></clipPath></defs><g clip-path="url(#animationMask_jlelpW34p5)"><g style="display: none;"><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g></g><g style="display: none;"><g><path></path></g><g><path></path></g><g><path></path></g></g><g style="display: none;"><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g></g><g style="display: none;"><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g></g><g style="display: none;"><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g></g><g style="display: none;"><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g></g><g style="display: none;"><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g></g><g style="display: none;"><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g></g><g style="display: none;"><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g></g><g style="display: none;"><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g></g><g style="display: none;"><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g></g><g style="display: none;"><g><path></path></g><g><path></path></g></g><g style="display: none;"><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g></g><g style="display: none;"><g><path></path></g><g><path></path></g><g><path></path></g></g><g style="display: none;"><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g></g><g style="display: none;"><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g></g><g style="display: none;"><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g></g><g style="display: none;"><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g></g><g style="display: none;"><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g></g><g style="display: none;"><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g></g><g style="display: none;"><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g></g><g style="display: none;"><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g></g><g style="display: none;"><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g><g><path></path></g></g><g style="display: none;"><g><path></path><path stroke-linecap="butt" stroke-linejoin="miter" fill-opacity="0" stroke-miterlimit="4"></path></g></g><g style="display: none;"><g><path></path><path stroke-linecap="butt" stroke-linejoin="miter" fill-opacity="0" stroke-miterlimit="4"></path></g></g><g style="display: none;"><g><path></path><path stroke-linecap="butt" stroke-linejoin="miter" fill-opacity="0" stroke-miterlimit="4"></path></g></g><g style="display: none;"><g><path></path><path stroke-linecap="butt" stroke-linejoin="miter" fill-opacity="0" stroke-miterlimit="4"></path></g></g><g style="display: none;"><g><path></path><path stroke-linecap="butt" stroke-linejoin="miter" fill-opacity="0" stroke-miterlimit="4"></path></g></g></g></svg></div>
                        </div>
                        <div id="container-show" class="SerieV2-ajaxContent">

<div id="container-sub" data-title="AFTERLOST (OmU.) Staffel 1 - Wakanim.TV">
    <div id="list-season-container" class="SeasonList-container">
        <div class="select-wrap">
            <select class="select" data-ajaxselect="true" data-ajax-update="#container-sub">
                <option value="" disabled="">Suche dir eine Staffel aus</option>
                    <option value="/de/v2/catalogue/show/493/afterlost-omu/season/870/staffel-1" selected="">Staffel 1</option>
            </select>
        </div>
    </div>
    <div id="seasonSectionList">
        <section>
            <header class="slider-section_header">
                <h2 class="slider-section_title">
                    <span class="slider-section_pourcentage ">0 %</span>
                    Staffel 1
                            <span class="slider-section_subtitled">
                                <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#subtitled-icon"></use></svg>
                            </span>
                </h2>
                        <a class="slider-section_link js-open-lightbox" href="#js-connect" rel="">
                            10
                            <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#credit"></use></svg>
                                Kaufe die kompletten Staffel!
                        </a>
            </header>
        </section>
    </div>
        <div class="list-episodes SerieV2-episodesList">
            <ul class="list-episodes-container">

    <li class="slider_item -big ">
        <div class="slider_item_inner">
                

                
                <a class="slider_item_link " title="AFTERLOST (OmU.) Staffel 1 Folge 1 (OmU.)" href="/de/v2/catalogue/episode/8784/afterlost-omu-staffel-1-folge-1-omu" rel="#js-episode-lightbox">
                    </a><div class="slider_item_image"><a class="slider_item_link " title="AFTERLOST (OmU.) Staffel 1 Folge 1 (OmU.)" href="/de/v2/catalogue/episode/8784/afterlost-omu-staffel-1-folge-1-omu" rel="#js-episode-lightbox">
                        <img src="//d2y6mqrpjbqoe6.cloudfront.net/image/upload/f_auto,q_auto/cdn1/movies-pictures/e8b184f2-6dde-41df-a452-7226603dc086.jpg" alt="AFTERLOST (OmU.) Folge 1">
                        <span class="slider_item_image_overlay">
                            <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#play" xlink:title="AFTERLOST (OmU.) Staffel 1 Folge 1 (OmU.)"></use></svg>
                        </span>
                        <span class="slider_item_image_sub-overlay">
                            <div>
                                Folge für Abonnenten reserviert. Erhalte Zugang zum ganzen Katalog  <span class="gold">ab 5€ pro Monat</span>
                            </div>
                        </span>
                        </a><a href="/de/v2/catalogue/episode/8784/afterlost-omu-staffel-1-folge-1-omu" title="AFTERLOST (OmU.) Staffel 1 Folge 1 (OmU.)">
                            <span class="slider_item_number">
                                01
                            </span>
                        </a>
                        <div class="ProgressBar" data-progress="0">
                            <div class="ProgressBar-progress" style="width: 0%;"></div>
                        </div>
                    </div>
                    <div class="slider_item_resolution clearfix">
                        
                                        <svg class="slider_item_resolution_icon -r20" role="img" title="2.0"><use xlink:href="/assets/images/dist/svgs.svg#icon-20"></use></svg>
                                        <svg class="slider_item_resolution_icon -rhd" role="img" title="HD"><use xlink:href="/assets/images/dist/svgs.svg#icon-hd"></use></svg>
                        <span class="slider_item_duration">23:47</span>
                    </div>

                    <div class="slider_item_description -white">
                        <div class="slider_item_text">
                            <div class="slider_item_showTitle-wrapper">
                                <a class="slider_item_showTitle" href="/de/v2/catalogue/show/493/afterlost-omu" title="AFTERLOST (OmU.)"><strong>AFTERLOST (OmU.)</strong></a>
                            </div>
                            <div class="slider_item_season-wrapper">
                                <a class="slider_item_season" title="AFTERLOST (OmU.) Staffel 1" href="/de/v2/catalogue/show/493/afterlost-omu/season/870/staffel-1">Staffel 1</a>
                            </div>
                        </div>
                        <div class="slider_item_info">
                                            <span class="slider_item_info_text">(OmU.)</span>

                            <div class="slider_item_info_icons">
                                    <span class="slider_item_info_icon">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#icon-download"></use></svg>
                                    </span>
                                                                    <a class="slider_item_info_icon js-open-lightbox" href="#js-connect" rel="#js-episode-lightbox">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#icon-credit"></use></svg>
                                        <span>1</span>
                                    </a>
                            </div>
                        </div>
                    </div>
                
        </div>
    </li>
    <li class="slider_item -big ">
        <div class="slider_item_inner">
                

                
                <a class="slider_item_link " title="AFTERLOST (OmU.) Staffel 1 Folge 2 (OmU.)" href="/de/v2/catalogue/episode/8785/afterlost-omu-staffel-1-folge-2-omu" rel="#js-episode-lightbox">
                    </a><div class="slider_item_image"><a class="slider_item_link " title="AFTERLOST (OmU.) Staffel 1 Folge 2 (OmU.)" href="/de/v2/catalogue/episode/8785/afterlost-omu-staffel-1-folge-2-omu" rel="#js-episode-lightbox">
                        <img src="//d2y6mqrpjbqoe6.cloudfront.net/image/upload/f_auto,q_auto/cdn1/movies-pictures/8eab7752-a507-4e33-9caa-746e8ace4364.jpg" alt="AFTERLOST (OmU.) Folge 2">
                        <span class="slider_item_image_overlay">
                            <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#play" xlink:title="AFTERLOST (OmU.) Staffel 1 Folge 2 (OmU.)"></use></svg>
                        </span>
                        <span class="slider_item_image_sub-overlay">
                            <div>
                                Folge für Abonnenten reserviert. Erhalte Zugang zum ganzen Katalog  <span class="gold">ab 5€ pro Monat</span>
                            </div>
                        </span>
                        </a><a href="/de/v2/catalogue/episode/8785/afterlost-omu-staffel-1-folge-2-omu" title="AFTERLOST (OmU.) Staffel 1 Folge 2 (OmU.)">
                            <span class="slider_item_number">
                                02
                            </span>
                        </a>
                        <div class="ProgressBar" data-progress="0">
                            <div class="ProgressBar-progress" style="width: 0%;"></div>
                        </div>
                    </div>
                    <div class="slider_item_resolution clearfix">
                        
                                        <svg class="slider_item_resolution_icon -r20" role="img" title="2.0"><use xlink:href="/assets/images/dist/svgs.svg#icon-20"></use></svg>
                                        <svg class="slider_item_resolution_icon -rhd" role="img" title="HD"><use xlink:href="/assets/images/dist/svgs.svg#icon-hd"></use></svg>
                        <span class="slider_item_duration">23:47</span>
                    </div>

                    <div class="slider_item_description -white">
                        <div class="slider_item_text">
                            <div class="slider_item_showTitle-wrapper">
                                <a class="slider_item_showTitle" href="/de/v2/catalogue/show/493/afterlost-omu" title="AFTERLOST (OmU.)"><strong>AFTERLOST (OmU.)</strong></a>
                            </div>
                            <div class="slider_item_season-wrapper">
                                <a class="slider_item_season" title="AFTERLOST (OmU.) Staffel 1" href="/de/v2/catalogue/show/493/afterlost-omu/season/870/staffel-1">Staffel 1</a>
                            </div>
                        </div>
                        <div class="slider_item_info">
                                            <span class="slider_item_info_text">(OmU.)</span>

                            <div class="slider_item_info_icons">
                                    <span class="slider_item_info_icon">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#icon-download"></use></svg>
                                    </span>
                                                                    <a class="slider_item_info_icon js-open-lightbox" href="#js-connect" rel="#js-episode-lightbox">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#icon-credit"></use></svg>
                                        <span>1</span>
                                    </a>
                            </div>
                        </div>
                    </div>
                
        </div>
    </li>
    <li class="slider_item -big ">
        <div class="slider_item_inner">
                

                
                <a class="slider_item_link " title="AFTERLOST (OmU.) Staffel 1 Folge 3 (OmU.)" href="/de/v2/catalogue/episode/8786/afterlost-omu-staffel-1-folge-3-omu" rel="#js-episode-lightbox">
                    </a><div class="slider_item_image"><a class="slider_item_link " title="AFTERLOST (OmU.) Staffel 1 Folge 3 (OmU.)" href="/de/v2/catalogue/episode/8786/afterlost-omu-staffel-1-folge-3-omu" rel="#js-episode-lightbox">
                        <img src="//d2y6mqrpjbqoe6.cloudfront.net/image/upload/f_auto,q_auto/cdn1/movies-pictures/54c238be-7d34-4bb8-9aa9-2f12fc22c5e0.jpg" alt="AFTERLOST (OmU.) Folge 3">
                        <span class="slider_item_image_overlay">
                            <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#play" xlink:title="AFTERLOST (OmU.) Staffel 1 Folge 3 (OmU.)"></use></svg>
                        </span>
                        <span class="slider_item_image_sub-overlay">
                            <div>
                                Folge für Abonnenten reserviert. Erhalte Zugang zum ganzen Katalog  <span class="gold">ab 5€ pro Monat</span>
                            </div>
                        </span>
                        </a><a href="/de/v2/catalogue/episode/8786/afterlost-omu-staffel-1-folge-3-omu" title="AFTERLOST (OmU.) Staffel 1 Folge 3 (OmU.)">
                            <span class="slider_item_number">
                                03
                            </span>
                        </a>
                        <div class="ProgressBar" data-progress="0">
                            <div class="ProgressBar-progress" style="width: 0%;"></div>
                        </div>
                    </div>
                    <div class="slider_item_resolution clearfix">
                        
                                        <svg class="slider_item_resolution_icon -r20" role="img" title="2.0"><use xlink:href="/assets/images/dist/svgs.svg#icon-20"></use></svg>
                                        <svg class="slider_item_resolution_icon -rhd" role="img" title="HD"><use xlink:href="/assets/images/dist/svgs.svg#icon-hd"></use></svg>
                        <span class="slider_item_duration">23:47</span>
                    </div>

                    <div class="slider_item_description -white">
                        <div class="slider_item_text">
                            <div class="slider_item_showTitle-wrapper">
                                <a class="slider_item_showTitle" href="/de/v2/catalogue/show/493/afterlost-omu" title="AFTERLOST (OmU.)"><strong>AFTERLOST (OmU.)</strong></a>
                            </div>
                            <div class="slider_item_season-wrapper">
                                <a class="slider_item_season" title="AFTERLOST (OmU.) Staffel 1" href="/de/v2/catalogue/show/493/afterlost-omu/season/870/staffel-1">Staffel 1</a>
                            </div>
                        </div>
                        <div class="slider_item_info">
                                            <span class="slider_item_info_text">(OmU.)</span>

                            <div class="slider_item_info_icons">
                                    <span class="slider_item_info_icon">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#icon-download"></use></svg>
                                    </span>
                                                                    <a class="slider_item_info_icon js-open-lightbox" href="#js-connect" rel="#js-episode-lightbox">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#icon-credit"></use></svg>
                                        <span>1</span>
                                    </a>
                            </div>
                        </div>
                    </div>
                
        </div>
    </li>
    <li class="slider_item -big ">
        <div class="slider_item_inner">
                

                
                <a class="slider_item_link " title="AFTERLOST (OmU.) Staffel 1 Folge 4 (OmU.)" href="/de/v2/catalogue/episode/8787/afterlost-omu-staffel-1-folge-4-omu" rel="#js-episode-lightbox">
                    </a><div class="slider_item_image"><a class="slider_item_link " title="AFTERLOST (OmU.) Staffel 1 Folge 4 (OmU.)" href="/de/v2/catalogue/episode/8787/afterlost-omu-staffel-1-folge-4-omu" rel="#js-episode-lightbox">
                        <img src="//d2y6mqrpjbqoe6.cloudfront.net/image/upload/f_auto,q_auto/cdn1/movies-pictures/76bccee9-50d5-493c-ba06-001918857a63.jpg" alt="AFTERLOST (OmU.) Folge 4">
                        <span class="slider_item_image_overlay">
                            <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#play" xlink:title="AFTERLOST (OmU.) Staffel 1 Folge 4 (OmU.)"></use></svg>
                        </span>
                        <span class="slider_item_image_sub-overlay">
                            <div>
                                Folge für Abonnenten reserviert. Erhalte Zugang zum ganzen Katalog  <span class="gold">ab 5€ pro Monat</span>
                            </div>
                        </span>
                        </a><a href="/de/v2/catalogue/episode/8787/afterlost-omu-staffel-1-folge-4-omu" title="AFTERLOST (OmU.) Staffel 1 Folge 4 (OmU.)">
                            <span class="slider_item_number">
                                04
                            </span>
                        </a>
                        <div class="ProgressBar" data-progress="0">
                            <div class="ProgressBar-progress" style="width: 0%;"></div>
                        </div>
                    </div>
                    <div class="slider_item_resolution clearfix">
                        
                                        <svg class="slider_item_resolution_icon -r20" role="img" title="2.0"><use xlink:href="/assets/images/dist/svgs.svg#icon-20"></use></svg>
                                        <svg class="slider_item_resolution_icon -rhd" role="img" title="HD"><use xlink:href="/assets/images/dist/svgs.svg#icon-hd"></use></svg>
                        <span class="slider_item_duration">23:47</span>
                    </div>

                    <div class="slider_item_description -white">
                        <div class="slider_item_text">
                            <div class="slider_item_showTitle-wrapper">
                                <a class="slider_item_showTitle" href="/de/v2/catalogue/show/493/afterlost-omu" title="AFTERLOST (OmU.)"><strong>AFTERLOST (OmU.)</strong></a>
                            </div>
                            <div class="slider_item_season-wrapper">
                                <a class="slider_item_season" title="AFTERLOST (OmU.) Staffel 1" href="/de/v2/catalogue/show/493/afterlost-omu/season/870/staffel-1">Staffel 1</a>
                            </div>
                        </div>
                        <div class="slider_item_info">
                                            <span class="slider_item_info_text">(OmU.)</span>

                            <div class="slider_item_info_icons">
                                    <span class="slider_item_info_icon">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#icon-download"></use></svg>
                                    </span>
                                                                    <a class="slider_item_info_icon js-open-lightbox" href="#js-connect" rel="#js-episode-lightbox">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#icon-credit"></use></svg>
                                        <span>1</span>
                                    </a>
                            </div>
                        </div>
                    </div>
                
        </div>
    </li>
    <li class="slider_item -big ">
        <div class="slider_item_inner">
                

                
                <a class="slider_item_link " title="AFTERLOST (OmU.) Staffel 1 Folge 5 (OmU.)" href="/de/v2/catalogue/episode/8788/afterlost-omu-staffel-1-folge-5-omu" rel="#js-episode-lightbox">
                    </a><div class="slider_item_image"><a class="slider_item_link " title="AFTERLOST (OmU.) Staffel 1 Folge 5 (OmU.)" href="/de/v2/catalogue/episode/8788/afterlost-omu-staffel-1-folge-5-omu" rel="#js-episode-lightbox">
                        <img src="//d2y6mqrpjbqoe6.cloudfront.net/image/upload/f_auto,q_auto/cdn1/movies-pictures/bedea550-8058-4c55-be4b-52b7c1605f85.jpg" alt="AFTERLOST (OmU.) Folge 5">
                        <span class="slider_item_image_overlay">
                            <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#play" xlink:title="AFTERLOST (OmU.) Staffel 1 Folge 5 (OmU.)"></use></svg>
                        </span>
                        <span class="slider_item_image_sub-overlay">
                            <div>
                                Folge für Abonnenten reserviert. Erhalte Zugang zum ganzen Katalog  <span class="gold">ab 5€ pro Monat</span>
                            </div>
                        </span>
                        </a><a href="/de/v2/catalogue/episode/8788/afterlost-omu-staffel-1-folge-5-omu" title="AFTERLOST (OmU.) Staffel 1 Folge 5 (OmU.)">
                            <span class="slider_item_number">
                                05
                            </span>
                        </a>
                        <div class="ProgressBar" data-progress="0">
                            <div class="ProgressBar-progress" style="width: 0%;"></div>
                        </div>
                    </div>
                    <div class="slider_item_resolution clearfix">
                        
                                        <svg class="slider_item_resolution_icon -r20" role="img" title="2.0"><use xlink:href="/assets/images/dist/svgs.svg#icon-20"></use></svg>
                                        <svg class="slider_item_resolution_icon -rhd" role="img" title="HD"><use xlink:href="/assets/images/dist/svgs.svg#icon-hd"></use></svg>
                        <span class="slider_item_duration">23:47</span>
                    </div>

                    <div class="slider_item_description -white">
                        <div class="slider_item_text">
                            <div class="slider_item_showTitle-wrapper">
                                <a class="slider_item_showTitle" href="/de/v2/catalogue/show/493/afterlost-omu" title="AFTERLOST (OmU.)"><strong>AFTERLOST (OmU.)</strong></a>
                            </div>
                            <div class="slider_item_season-wrapper">
                                <a class="slider_item_season" title="AFTERLOST (OmU.) Staffel 1" href="/de/v2/catalogue/show/493/afterlost-omu/season/870/staffel-1">Staffel 1</a>
                            </div>
                        </div>
                        <div class="slider_item_info">
                                            <span class="slider_item_info_text">(OmU.)</span>

                            <div class="slider_item_info_icons">
                                    <span class="slider_item_info_icon">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#icon-download"></use></svg>
                                    </span>
                                                                    <a class="slider_item_info_icon js-open-lightbox" href="#js-connect" rel="#js-episode-lightbox">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#icon-credit"></use></svg>
                                        <span>1</span>
                                    </a>
                            </div>
                        </div>
                    </div>
                
        </div>
    </li>
    <li class="slider_item -big ">
        <div class="slider_item_inner">
                

                
                <a class="slider_item_link " title="AFTERLOST (OmU.) Staffel 1 Folge 6 (OmU.)" href="/de/v2/catalogue/episode/8789/afterlost-omu-staffel-1-folge-6-omu" rel="#js-episode-lightbox">
                    </a><div class="slider_item_image"><a class="slider_item_link " title="AFTERLOST (OmU.) Staffel 1 Folge 6 (OmU.)" href="/de/v2/catalogue/episode/8789/afterlost-omu-staffel-1-folge-6-omu" rel="#js-episode-lightbox">
                        <img src="//d2y6mqrpjbqoe6.cloudfront.net/image/upload/f_auto,q_auto/cdn1/movies-pictures/3adcaaab-20dc-4115-b1af-9dd0529db3c3.jpg" alt="AFTERLOST (OmU.) Folge 6">
                        <span class="slider_item_image_overlay">
                            <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#play" xlink:title="AFTERLOST (OmU.) Staffel 1 Folge 6 (OmU.)"></use></svg>
                        </span>
                        <span class="slider_item_image_sub-overlay">
                            <div>
                                Folge für Abonnenten reserviert. Erhalte Zugang zum ganzen Katalog  <span class="gold">ab 5€ pro Monat</span>
                            </div>
                        </span>
                        </a><a href="/de/v2/catalogue/episode/8789/afterlost-omu-staffel-1-folge-6-omu" title="AFTERLOST (OmU.) Staffel 1 Folge 6 (OmU.)">
                            <span class="slider_item_number">
                                06
                            </span>
                        </a>
                        <div class="ProgressBar" data-progress="0">
                            <div class="ProgressBar-progress" style="width: 0%;"></div>
                        </div>
                    </div>
                    <div class="slider_item_resolution clearfix">
                        
                                        <svg class="slider_item_resolution_icon -r20" role="img" title="2.0"><use xlink:href="/assets/images/dist/svgs.svg#icon-20"></use></svg>
                                        <svg class="slider_item_resolution_icon -rhd" role="img" title="HD"><use xlink:href="/assets/images/dist/svgs.svg#icon-hd"></use></svg>
                        <span class="slider_item_duration">23:47</span>
                    </div>

                    <div class="slider_item_description -white">
                        <div class="slider_item_text">
                            <div class="slider_item_showTitle-wrapper">
                                <a class="slider_item_showTitle" href="/de/v2/catalogue/show/493/afterlost-omu" title="AFTERLOST (OmU.)"><strong>AFTERLOST (OmU.)</strong></a>
                            </div>
                            <div class="slider_item_season-wrapper">
                                <a class="slider_item_season" title="AFTERLOST (OmU.) Staffel 1" href="/de/v2/catalogue/show/493/afterlost-omu/season/870/staffel-1">Staffel 1</a>
                            </div>
                        </div>
                        <div class="slider_item_info">
                                            <span class="slider_item_info_text">(OmU.)</span>

                            <div class="slider_item_info_icons">
                                    <span class="slider_item_info_icon">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#icon-download"></use></svg>
                                    </span>
                                                                    <a class="slider_item_info_icon js-open-lightbox" href="#js-connect" rel="#js-episode-lightbox">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#icon-credit"></use></svg>
                                        <span>1</span>
                                    </a>
                            </div>
                        </div>
                    </div>
                
        </div>
    </li>
    <li class="slider_item -big ">
        <div class="slider_item_inner">
                

                
                <a class="slider_item_link " title="AFTERLOST (OmU.) Staffel 1 Folge 7 (OmU.)" href="/de/v2/catalogue/episode/8790/afterlost-omu-staffel-1-folge-7-omu" rel="#js-episode-lightbox">
                    </a><div class="slider_item_image"><a class="slider_item_link " title="AFTERLOST (OmU.) Staffel 1 Folge 7 (OmU.)" href="/de/v2/catalogue/episode/8790/afterlost-omu-staffel-1-folge-7-omu" rel="#js-episode-lightbox">
                        <img src="//d2y6mqrpjbqoe6.cloudfront.net/image/upload/f_auto,q_auto/cdn1/movies-pictures/8b073666-b8e4-4329-b737-9d6a2cdf6de7.jpg" alt="AFTERLOST (OmU.) Folge 7">
                        <span class="slider_item_image_overlay">
                            <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#play" xlink:title="AFTERLOST (OmU.) Staffel 1 Folge 7 (OmU.)"></use></svg>
                        </span>
                        <span class="slider_item_image_sub-overlay">
                            <div>
                                Folge für Abonnenten reserviert. Erhalte Zugang zum ganzen Katalog  <span class="gold">ab 5€ pro Monat</span>
                            </div>
                        </span>
                        </a><a href="/de/v2/catalogue/episode/8790/afterlost-omu-staffel-1-folge-7-omu" title="AFTERLOST (OmU.) Staffel 1 Folge 7 (OmU.)">
                            <span class="slider_item_number">
                                07
                            </span>
                        </a>
                        <div class="ProgressBar" data-progress="0">
                            <div class="ProgressBar-progress" style="width: 0%;"></div>
                        </div>
                    </div>
                    <div class="slider_item_resolution clearfix">
                        
                                        <svg class="slider_item_resolution_icon -r20" role="img" title="2.0"><use xlink:href="/assets/images/dist/svgs.svg#icon-20"></use></svg>
                                        <svg class="slider_item_resolution_icon -rhd" role="img" title="HD"><use xlink:href="/assets/images/dist/svgs.svg#icon-hd"></use></svg>
                        <span class="slider_item_duration">23:47</span>
                    </div>

                    <div class="slider_item_description -white">
                        <div class="slider_item_text">
                            <div class="slider_item_showTitle-wrapper">
                                <a class="slider_item_showTitle" href="/de/v2/catalogue/show/493/afterlost-omu" title="AFTERLOST (OmU.)"><strong>AFTERLOST (OmU.)</strong></a>
                            </div>
                            <div class="slider_item_season-wrapper">
                                <a class="slider_item_season" title="AFTERLOST (OmU.) Staffel 1" href="/de/v2/catalogue/show/493/afterlost-omu/season/870/staffel-1">Staffel 1</a>
                            </div>
                        </div>
                        <div class="slider_item_info">
                                            <span class="slider_item_info_text">(OmU.)</span>

                            <div class="slider_item_info_icons">
                                    <span class="slider_item_info_icon">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#icon-download"></use></svg>
                                    </span>
                                                                    <a class="slider_item_info_icon js-open-lightbox" href="#js-connect" rel="#js-episode-lightbox">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#icon-credit"></use></svg>
                                        <span>1</span>
                                    </a>
                            </div>
                        </div>
                    </div>
                
        </div>
    </li>
    <li class="slider_item -big ">
        <div class="slider_item_inner">
                

                
                <a class="slider_item_link " title="AFTERLOST (OmU.) Staffel 1 Folge 8 (OmU.)" href="/de/v2/catalogue/episode/8791/afterlost-omu-staffel-1-folge-8-omu" rel="#js-episode-lightbox">
                    </a><div class="slider_item_image"><a class="slider_item_link " title="AFTERLOST (OmU.) Staffel 1 Folge 8 (OmU.)" href="/de/v2/catalogue/episode/8791/afterlost-omu-staffel-1-folge-8-omu" rel="#js-episode-lightbox">
                        <img src="//d2y6mqrpjbqoe6.cloudfront.net/image/upload/f_auto,q_auto/cdn1/movies-pictures/436d27c4-bfd0-48e2-b4e4-a798c5cbcba5.jpg" alt="AFTERLOST (OmU.) Folge 8">
                        <span class="slider_item_image_overlay">
                            <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#play" xlink:title="AFTERLOST (OmU.) Staffel 1 Folge 8 (OmU.)"></use></svg>
                        </span>
                        <span class="slider_item_image_sub-overlay">
                            <div>
                                Folge für Abonnenten reserviert. Erhalte Zugang zum ganzen Katalog  <span class="gold">ab 5€ pro Monat</span>
                            </div>
                        </span>
                        </a><a href="/de/v2/catalogue/episode/8791/afterlost-omu-staffel-1-folge-8-omu" title="AFTERLOST (OmU.) Staffel 1 Folge 8 (OmU.)">
                            <span class="slider_item_number">
                                08
                            </span>
                        </a>
                        <div class="ProgressBar" data-progress="0">
                            <div class="ProgressBar-progress" style="width: 0%;"></div>
                        </div>
                    </div>
                    <div class="slider_item_resolution clearfix">
                        
                                        <svg class="slider_item_resolution_icon -r20" role="img" title="2.0"><use xlink:href="/assets/images/dist/svgs.svg#icon-20"></use></svg>
                                        <svg class="slider_item_resolution_icon -rhd" role="img" title="HD"><use xlink:href="/assets/images/dist/svgs.svg#icon-hd"></use></svg>
                        <span class="slider_item_duration">23:47</span>
                    </div>

                    <div class="slider_item_description -white">
                        <div class="slider_item_text">
                            <div class="slider_item_showTitle-wrapper">
                                <a class="slider_item_showTitle" href="/de/v2/catalogue/show/493/afterlost-omu" title="AFTERLOST (OmU.)"><strong>AFTERLOST (OmU.)</strong></a>
                            </div>
                            <div class="slider_item_season-wrapper">
                                <a class="slider_item_season" title="AFTERLOST (OmU.) Staffel 1" href="/de/v2/catalogue/show/493/afterlost-omu/season/870/staffel-1">Staffel 1</a>
                            </div>
                        </div>
                        <div class="slider_item_info">
                                            <span class="slider_item_info_text">(OmU.)</span>

                            <div class="slider_item_info_icons">
                                    <span class="slider_item_info_icon">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#icon-download"></use></svg>
                                    </span>
                                                                    <a class="slider_item_info_icon js-open-lightbox" href="#js-connect" rel="#js-episode-lightbox">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#icon-credit"></use></svg>
                                        <span>1</span>
                                    </a>
                            </div>
                        </div>
                    </div>
                
        </div>
    </li>
    <li class="slider_item -big ">
        <div class="slider_item_inner">
                

                
                <a class="slider_item_link " title="AFTERLOST (OmU.) Staffel 1 Folge 9 (OmU.)" href="/de/v2/catalogue/episode/8792/afterlost-omu-staffel-1-folge-9-omu" rel="#js-episode-lightbox">
                    </a><div class="slider_item_image"><a class="slider_item_link " title="AFTERLOST (OmU.) Staffel 1 Folge 9 (OmU.)" href="/de/v2/catalogue/episode/8792/afterlost-omu-staffel-1-folge-9-omu" rel="#js-episode-lightbox">
                        <img src="//d2y6mqrpjbqoe6.cloudfront.net/image/upload/f_auto,q_auto/cdn1/movies-pictures/ee3c0772-a4d2-441d-b02e-62f293f9ae08.jpg" alt="AFTERLOST (OmU.) Folge 9">
                        <span class="slider_item_image_overlay">
                            <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#play" xlink:title="AFTERLOST (OmU.) Staffel 1 Folge 9 (OmU.)"></use></svg>
                        </span>
                        <span class="slider_item_image_sub-overlay">
                            <div>
                                Folge für Abonnenten reserviert. Erhalte Zugang zum ganzen Katalog  <span class="gold">ab 5€ pro Monat</span>
                            </div>
                        </span>
                        </a><a href="/de/v2/catalogue/episode/8792/afterlost-omu-staffel-1-folge-9-omu" title="AFTERLOST (OmU.) Staffel 1 Folge 9 (OmU.)">
                            <span class="slider_item_number">
                                09
                            </span>
                        </a>
                        <div class="ProgressBar" data-progress="0">
                            <div class="ProgressBar-progress" style="width: 0%;"></div>
                        </div>
                    </div>
                    <div class="slider_item_resolution clearfix">
                        
                                        <svg class="slider_item_resolution_icon -r20" role="img" title="2.0"><use xlink:href="/assets/images/dist/svgs.svg#icon-20"></use></svg>
                                        <svg class="slider_item_resolution_icon -rhd" role="img" title="HD"><use xlink:href="/assets/images/dist/svgs.svg#icon-hd"></use></svg>
                        <span class="slider_item_duration">23:47</span>
                    </div>

                    <div class="slider_item_description -white">
                        <div class="slider_item_text">
                            <div class="slider_item_showTitle-wrapper">
                                <a class="slider_item_showTitle" href="/de/v2/catalogue/show/493/afterlost-omu" title="AFTERLOST (OmU.)"><strong>AFTERLOST (OmU.)</strong></a>
                            </div>
                            <div class="slider_item_season-wrapper">
                                <a class="slider_item_season" title="AFTERLOST (OmU.) Staffel 1" href="/de/v2/catalogue/show/493/afterlost-omu/season/870/staffel-1">Staffel 1</a>
                            </div>
                        </div>
                        <div class="slider_item_info">
                                            <span class="slider_item_info_text">(OmU.)</span>

                            <div class="slider_item_info_icons">
                                    <span class="slider_item_info_icon">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#icon-download"></use></svg>
                                    </span>
                                                                    <a class="slider_item_info_icon js-open-lightbox" href="#js-connect" rel="#js-episode-lightbox">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#icon-credit"></use></svg>
                                        <span>1</span>
                                    </a>
                            </div>
                        </div>
                    </div>
                
        </div>
    </li>
    <li class="slider_item -big ">
        <div class="slider_item_inner">
                

                
                <a class="slider_item_link " title="AFTERLOST (OmU.) Staffel 1 Folge 10 (OmU.)" href="/de/v2/catalogue/episode/8793/afterlost-omu-staffel-1-folge-10-omu" rel="#js-episode-lightbox">
                    </a><div class="slider_item_image"><a class="slider_item_link " title="AFTERLOST (OmU.) Staffel 1 Folge 10 (OmU.)" href="/de/v2/catalogue/episode/8793/afterlost-omu-staffel-1-folge-10-omu" rel="#js-episode-lightbox">
                        <img src="//d2y6mqrpjbqoe6.cloudfront.net/image/upload/f_auto,q_auto/cdn1/movies-pictures/b18be16b-75fb-46f7-9c31-796091e32f8f.jpg" alt="AFTERLOST (OmU.) Folge 10">
                        <span class="slider_item_image_overlay">
                            <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#play" xlink:title="AFTERLOST (OmU.) Staffel 1 Folge 10 (OmU.)"></use></svg>
                        </span>
                        <span class="slider_item_image_sub-overlay">
                            <div>
                                Folge für Abonnenten reserviert. Erhalte Zugang zum ganzen Katalog  <span class="gold">ab 5€ pro Monat</span>
                            </div>
                        </span>
                        </a><a href="/de/v2/catalogue/episode/8793/afterlost-omu-staffel-1-folge-10-omu" title="AFTERLOST (OmU.) Staffel 1 Folge 10 (OmU.)">
                            <span class="slider_item_number">
                                10
                            </span>
                        </a>
                        <div class="ProgressBar" data-progress="0">
                            <div class="ProgressBar-progress" style="width: 0%;"></div>
                        </div>
                    </div>
                    <div class="slider_item_resolution clearfix">
                        
                                        <svg class="slider_item_resolution_icon -r20" role="img" title="2.0"><use xlink:href="/assets/images/dist/svgs.svg#icon-20"></use></svg>
                                        <svg class="slider_item_resolution_icon -rhd" role="img" title="HD"><use xlink:href="/assets/images/dist/svgs.svg#icon-hd"></use></svg>
                        <span class="slider_item_duration">23:47</span>
                    </div>

                    <div class="slider_item_description -white">
                        <div class="slider_item_text">
                            <div class="slider_item_showTitle-wrapper">
                                <a class="slider_item_showTitle" href="/de/v2/catalogue/show/493/afterlost-omu" title="AFTERLOST (OmU.)"><strong>AFTERLOST (OmU.)</strong></a>
                            </div>
                            <div class="slider_item_season-wrapper">
                                <a class="slider_item_season" title="AFTERLOST (OmU.) Staffel 1" href="/de/v2/catalogue/show/493/afterlost-omu/season/870/staffel-1">Staffel 1</a>
                            </div>
                        </div>
                        <div class="slider_item_info">
                                            <span class="slider_item_info_text">(OmU.)</span>

                            <div class="slider_item_info_icons">
                                    <span class="slider_item_info_icon">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#icon-download"></use></svg>
                                    </span>
                                                                    <a class="slider_item_info_icon js-open-lightbox" href="#js-connect" rel="#js-episode-lightbox">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#icon-credit"></use></svg>
                                        <span>1</span>
                                    </a>
                            </div>
                        </div>
                    </div>
                
        </div>
    </li>
    <li class="slider_item -big ">
        <div class="slider_item_inner">
                

                
                <a class="slider_item_link " title="AFTERLOST (OmU.) Staffel 1 Folge 11 (OmU.)" href="/de/v2/catalogue/episode/8794/afterlost-omu-staffel-1-folge-11-omu" rel="#js-episode-lightbox">
                    </a><div class="slider_item_image"><a class="slider_item_link " title="AFTERLOST (OmU.) Staffel 1 Folge 11 (OmU.)" href="/de/v2/catalogue/episode/8794/afterlost-omu-staffel-1-folge-11-omu" rel="#js-episode-lightbox">
                        <img src="//d2y6mqrpjbqoe6.cloudfront.net/image/upload/f_auto,q_auto/cdn1/movies-pictures/e3b5bd29-26a1-4b31-b058-1c23c4dbc952.jpg" alt="AFTERLOST (OmU.) Folge 11">
                        <span class="slider_item_image_overlay">
                            <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#play" xlink:title="AFTERLOST (OmU.) Staffel 1 Folge 11 (OmU.)"></use></svg>
                        </span>
                        <span class="slider_item_image_sub-overlay">
                            <div>
                                Folge für Abonnenten reserviert. Erhalte Zugang zum ganzen Katalog  <span class="gold">ab 5€ pro Monat</span>
                            </div>
                        </span>
                        </a><a href="/de/v2/catalogue/episode/8794/afterlost-omu-staffel-1-folge-11-omu" title="AFTERLOST (OmU.) Staffel 1 Folge 11 (OmU.)">
                            <span class="slider_item_number">
                                11
                            </span>
                        </a>
                        <div class="ProgressBar" data-progress="0">
                            <div class="ProgressBar-progress" style="width: 0%;"></div>
                        </div>
                    </div>
                    <div class="slider_item_resolution clearfix">
                        
                                        <svg class="slider_item_resolution_icon -r20" role="img" title="2.0"><use xlink:href="/assets/images/dist/svgs.svg#icon-20"></use></svg>
                                        <svg class="slider_item_resolution_icon -rhd" role="img" title="HD"><use xlink:href="/assets/images/dist/svgs.svg#icon-hd"></use></svg>
                        <span class="slider_item_duration">23:47</span>
                    </div>

                    <div class="slider_item_description -white">
                        <div class="slider_item_text">
                            <div class="slider_item_showTitle-wrapper">
                                <a class="slider_item_showTitle" href="/de/v2/catalogue/show/493/afterlost-omu" title="AFTERLOST (OmU.)"><strong>AFTERLOST (OmU.)</strong></a>
                            </div>
                            <div class="slider_item_season-wrapper">
                                <a class="slider_item_season" title="AFTERLOST (OmU.) Staffel 1" href="/de/v2/catalogue/show/493/afterlost-omu/season/870/staffel-1">Staffel 1</a>
                            </div>
                        </div>
                        <div class="slider_item_info">
                                            <span class="slider_item_info_text">(OmU.)</span>

                            <div class="slider_item_info_icons">
                                    <span class="slider_item_info_icon">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#icon-download"></use></svg>
                                    </span>
                                                                    <a class="slider_item_info_icon js-open-lightbox" href="#js-connect" rel="#js-episode-lightbox">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#icon-credit"></use></svg>
                                        <span>1</span>
                                    </a>
                            </div>
                        </div>
                    </div>
                
        </div>
    </li>
    <li class="slider_item -big ">
        <div class="slider_item_inner">
                

                
                <a class="slider_item_link " title="AFTERLOST (OmU.) Staffel 1 Folge 12 (OmU.)" href="/de/v2/catalogue/episode/8795/afterlost-omu-staffel-1-folge-12-omu" rel="#js-episode-lightbox">
                    </a><div class="slider_item_image"><a class="slider_item_link " title="AFTERLOST (OmU.) Staffel 1 Folge 12 (OmU.)" href="/de/v2/catalogue/episode/8795/afterlost-omu-staffel-1-folge-12-omu" rel="#js-episode-lightbox">
                        <img src="//d2y6mqrpjbqoe6.cloudfront.net/image/upload/f_auto,q_auto/cdn1/movies-pictures/7f6d095e-3292-4f5a-b9b0-00a08acf7a5f.jpg" alt="AFTERLOST (OmU.) Folge 12">
                        <span class="slider_item_image_overlay">
                            <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#play" xlink:title="AFTERLOST (OmU.) Staffel 1 Folge 12 (OmU.)"></use></svg>
                        </span>
                        <span class="slider_item_image_sub-overlay">
                            <div>
                                Folge für Abonnenten reserviert. Erhalte Zugang zum ganzen Katalog  <span class="gold">ab 5€ pro Monat</span>
                            </div>
                        </span>
                        </a><a href="/de/v2/catalogue/episode/8795/afterlost-omu-staffel-1-folge-12-omu" title="AFTERLOST (OmU.) Staffel 1 Folge 12 (OmU.)">
                            <span class="slider_item_number">
                                12
                            </span>
                        </a>
                        <div class="ProgressBar" data-progress="0">
                            <div class="ProgressBar-progress" style="width: 0%;"></div>
                        </div>
                    </div>
                    <div class="slider_item_resolution clearfix">
                        
                                        <svg class="slider_item_resolution_icon -r20" role="img" title="2.0"><use xlink:href="/assets/images/dist/svgs.svg#icon-20"></use></svg>
                                        <svg class="slider_item_resolution_icon -rhd" role="img" title="HD"><use xlink:href="/assets/images/dist/svgs.svg#icon-hd"></use></svg>
                        <span class="slider_item_duration">23:47</span>
                    </div>

                    <div class="slider_item_description -white">
                        <div class="slider_item_text">
                            <div class="slider_item_showTitle-wrapper">
                                <a class="slider_item_showTitle" href="/de/v2/catalogue/show/493/afterlost-omu" title="AFTERLOST (OmU.)"><strong>AFTERLOST (OmU.)</strong></a>
                            </div>
                            <div class="slider_item_season-wrapper">
                                <a class="slider_item_season" title="AFTERLOST (OmU.) Staffel 1" href="/de/v2/catalogue/show/493/afterlost-omu/season/870/staffel-1">Staffel 1</a>
                            </div>
                        </div>
                        <div class="slider_item_info">
                                            <span class="slider_item_info_text">(OmU.)</span>

                            <div class="slider_item_info_icons">
                                    <span class="slider_item_info_icon">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#icon-download"></use></svg>
                                    </span>
                                                                    <a class="slider_item_info_icon js-open-lightbox" href="#js-connect" rel="#js-episode-lightbox">
                                        <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#icon-credit"></use></svg>
                                        <span>1</span>
                                    </a>
                            </div>
                        </div>
                    </div>
                
        </div>
    </li>

            </ul>
        </div>
</div>
                        </div>
                    </div>
                        <div class="SerieV2-advertising-2">
                        </div>
                </div>
            </div>

        </div>
    </section>
    <div class="SerieV2-extraProducts">

    </div>
    <div class="SerieV2-playlist">
    </div>
</div>
<script type="application/ld+json">
    {"@context":"http://schema.org","@type":"TVSeries","name":"AFTERLOST (OmU.)","description":"Eines Tages wurde eine Stadt vernichtet. Yuki ist eine junge Frau, von der gesagt wird, dass sie die einzige Person ist, die nach der Vernichtung der Stadt noch übrig geblieben ist. Takuya ist ein Einzelgänger und Schmuggler. Zusammen mit dem Brief, den Yukis Vater hinterlassen hat, gehen sie auf die Stadt zu, die jetzt Lost heißt, aber unerwartete Hindernisse stehen ihnen im Weg. Die Gedanken der Zurückgelassenen, geheime und mysteriöse Organisationen und versteckte Verschwörungen erwarten Yuki und Takuya, während sie sich dem Geheimnis hinter Lost nähern.","url":"http%3a%2f%2fwww.wakanim.tv%2fde%2fv2%2fcatalogue%2fshow%2f493%2fafterlost-omu%2fseason%2f870%2fstaffel-1","image":"//d2y6mqrpjbqoe6.cloudfront.net/image/upload/f_auto,q_auto/cdn1/library/216_636967441250086118After-Lost_Small.png","potentialAction":{"@type":"ViewAction","target":[{"url":"http%3a%2f%2fwww.wakanim.tv%2fde%2fv2%2fcatalogue%2fshow%2f493%2fafterlost-omu%2fseason%2f870%2fstaffel-1","actionPlatform":"http://schema.org/DesktopWebPlatform","inLanguage":"de"},{"url":"http%3a%2f%2fwww.wakanim.tv%2fde%2fv2%2fcatalogue%2fshow%2f493%2fafterlost-omu%2fseason%2f870%2fstaffel-1","actionPlatform":"http://schema.org/MobileWebPlatform","inLanguage":"de"},{"url":"http%3a%2f%2fwww.wakanim.tv%2fde%2fv2%2fcatalogue%2fshow%2f493%2fafterlost-omu%2fseason%2f870%2fstaffel-1","actionPlatform":"http://schema.org/IOSPlatform","inLanguage":"de"},{"url":"http%3a%2f%2fwww.wakanim.tv%2fde%2fv2%2fcatalogue%2fshow%2f493%2fafterlost-omu%2fseason%2f870%2fstaffel-1","actionPlatform":"http://schema.org/AndroidPlatform","inLanguage":"de"}],"expectsAcceptanceOf":[{"@type":"Offer","availabilityStarts":"07.04.2019 15:30:00","availabilityEnds":"01.04.2024 00:00:00","category":"subscription","name":"Wakanim","price":5,"priceCurrency":"EUR","seller":{"@type":"Organization","name":"Wakanim","sameAs":"https://www.wakanim.tv/"}},{"@type":"Offer","availabilityStarts":"14.04.2019 15:30:00","availabilityEnds":"01.04.2024 00:00:00","category":"free","name":"Wakanim","seller":{"@type":"Organization","name":"Wakanim","sameAs":"https://www.wakanim.tv/"}},{"@type":"Offer","availabilityStarts":"07.04.2019 15:30:00","availabilityEnds":"01.04.2024 00:00:00","category":"premium","name":"Wakanim","seller":{"@type":"Organization","name":"Wakanim","sameAs":"https://www.wakanim.tv/"}}]},"aggregateRating":{"@type":"AggregateRating","ratingValue":3.6,"ratingCount":36,"bestRating":"5"}}

</script>


    <footer class="footer-main">
        <div class="container">
            <div class="footer-main_grid">
                <div class="footer-main_item">
                    <span class="footer-main_item_title">Wakanim</span>
                    <ul class="footer-main_item_list">
                        <li class="footer-main_item_list_item">
                            <a class="footer-main_item_list_link" href="/de/v2/static/whoarewe">Wer wir sind</a>
                        </li>
                        
                        
                            <li class="footer-main_item_list_item">
                                <a class="footer-main_item_list_link" href="https://wakanim.blog" target="_blank">Technischer Blog</a>
                            </li>
                                                    <li class="footer-main_item_list_item">
                                <a class="footer-main_item_list_link" href="https://shop.akibapass.de" target="_blank">Wakanim Store</a>
                            </li>
                        <li class="footer-main_item_list_item">
                            <a class="footer-main_item_list_link" href="https://www.wakanim.tv/fr/v2" title="Regardez vos animes préférés depuis la France, Belgique, Suisse ou Québec sur Wakanim France" target="_blank">Wakanim France</a>
                        </li>
                        <li class="footer-main_item_list_item">
                            <a class="footer-main_item_list_link" href="https://www.wakanim.tv/sc/v2" title="Watch your favorite anime from Sweden, Norway,Iceland, Finland or Denmark on Wakanim Nordic" target="_blank">Wakanim Nordic</a>
                        </li>
                        <li class="footer-main_item_list_item">
                            <a class="footer-main_item_list_link" href="https://www.wakanim.tv/de/v2" title="Watch your favorite anime from Germany, Switzerland, Austria in german on Wakanim DE" target="_blank">Wakanim DE</a>
                        </li>
                        <li class="footer-main_item_list_item">
                            <a class="footer-main_item_list_link" href="https://www.wakanim.tv/ru/v2" title="Смотрите любимые аниме из Албании, Армении, Азербайджана, Беларуси, Боснии и Герцеговины, Болгарии, Хорватии, Кипра, Чехии, Грузии, Венгрии, Латвии, Литвы, Македонии, Молдовы, Польши, Румынии, России, Сан-Марино, Сербии, Словакии, Словении и Украины на Wakanim RU!" target="_blank">Wakanim RU</a>
                        </li>
                    </ul>
                </div>
                <div class="footer-main_item">
                    <span class="footer-main_item_title">Rechtliches</span>
                    <ul class="footer-main_item_list">
                        <li class="footer-main_item_list_item">
                            <a class="footer-main_item_list_link" href="/de/v2/static/privacypolicy">Datenschutz- und cookies-erklärung</a>
                        </li>
                        <li class="footer-main_item_list_item">
                            <a class="footer-main_item_list_link" href="/de/v2/static/cgv">Nutzungsbedingungen</a>
                        </li>
                        
                        <li class="footer-main_item_list_item">
                            <a class="footer-main_item_list_link" href="/de/v2/legal/rightowners">Rechteinhaber</a>
                        </li>
                            <li class="footer-main_item_list_item">
                                <a class="footer-main_item_list_link" href="/de/v2/legal/impressum">Impressum</a>
                            </li>
                    </ul>
                </div>
                <div class="footer-main_item">
                    <span class="footer-main_item_title">Wie lege ich los?</span>
                    <ul class="footer-main_item_list">
                        <li class="footer-main_item_list_item">
                        </li>
                        
                        <li class="footer-main_item_list_item">
                            <a class="footer-main_item_list_link" href="/de/v2/discover">Entdecke unsere Angebote</a>
                        </li>
                        <li class="footer-main_item_list_item">
                            <a class="footer-main_item_list_link" href="/de/v2/devices">Unsere Anwendungen</a>
                        </li>
                    </ul>
                </div>
                <div class="footer-main_item">
                    <span class="footer-main_item_title">Hilfe</span>
                    <ul class="footer-main_item_list">
                        <li class="footer-main_item_list_item">
                                <a class="footer-main_item_list_link" href="/de/v2/support/faq">FAQ</a>
                        </li>
                        <li class="footer-main_item_list_item">
                            <a class="footer-main_item_list_link" href="/de/v2/static/contactus">Kontaktiere uns</a>
                        </li>
                    </ul>
                </div>
                <div class="footer-main_item">
                    <span class="footer-main_item_title">Wakanim App</span>
                    <ul class="footer-main_item_list">
                        <li class="footer-main_item_list_item">
                            <a class="footer-main_item_list_link" target="_blank" href="https://play.google.com/store/apps/details?id=wakanimapp.wakanimapp">Android</a>
                        </li>
                        <li class="footer-main_item_list_item">
                            <a class="footer-main_item_list_link" target="_blank" href="https://itunes.apple.com/app/wakanim/id1182134583?mt=8">iOS</a>
                        </li>
                        <li class="footer-main_item_list_item">
                            <a class="footer-main_item_list_link" target="_blank" href="https://www.microsoft.com/store/p/wakanim/9nblggh535xh">Xbox One</a>
                        </li>
                        <li class="footer-main_item_list_item">
                            <a class="footer-main_item_list_link" target="_blank" href="https://www.microsoft.com/store/p/wakanim/9nblggh535xh">Windows</a>
                        </li>

                            <li class="footer-main_item_list_item">
                                <a class="footer-main_item_list_link" target="_blank" href="https://store.playstation.com/de-de/product/EP8833-CUSA07017_00-WAKANIM000000000">PS4</a>
                            </li>
                        <li class="footer-main_item_list_item">
                            <a class="footer-main_item_list_link" target="_blank" href="https://www.amazon.de/Productions-Wakanim-Inc/dp/B077GDDNJ2/ref=sr_1_1?ie=UTF8&amp;qid=1516051215&amp;sr=8-1">FireTV</a>
                        </li>
                        
                        
                    </ul>
                </div>
                    <div class="footer-main_item">
                        <span class="footer-main_item_title">Folge uns!</span>
                        <ul class="footer-main_item_list">
                                                            <li class="footer-main_item_list_item">
                                    <a class="footer-main_item_list_link" href="https://www.facebook.com/WakanimDE" target="_blank">Facebook</a>
                                </li>
                                                                                        <li class="footer-main_item_list_item">
                                    <a class="footer-main_item_list_link" href="https://www.instagram.com/wakanim/" target="_blank">Instagram</a>
                                </li>
                                                                                        <li class="footer-main_item_list_item">
                                    <a class="footer-main_item_list_link" href="https://twitter.com/WakanimDE" target="_blank">Twitter</a>
                                </li>
                                                            <li class="footer-main_item_list_item">
                                    <a class="footer-main_item_list_link" href="http://youtube.com/c/WakanimDE?sub_confirmation=1" target="_blank">YouTube</a>
                                </li>
                                                            <li class="footer-main_item_list_item">
                                    <a class="footer-main_item_list_link" href="https://discord.gg/D9uvDaX" target="_blank">Discord</a>
                                </li>
                        </ul>
                    </div>

            </div>
            <hr class="footer-main_hr">

            <div class="footer-main_bottom">
                <a class="footer-main_logo" href="/">
                    <svg role="img" title="Wakanim"><use xlink:href="/assets/images/dist/svgs.svg#logo"></use></svg>
                </a>
                <p class="footer-main_copy">
                    © 2023 Wakanim
                </p>
            </div>

        </div>
    </footer>

        <div class="overlay"></div>


    <div class="lightbox-wrap js-lightbox" id="js-review-lightbox">
        <div class="lightbox-background js-close-lightbox"></div>
        <div class="lightbox -light iframe-content">
        </div>
    </div>
    <div class="lightbox-wrap js-lightbox" id="js-episode-lightbox">
        <div class="lightbox-background js-episode-close"></div>
        <div class="lightbox iframe-ep-content">
        </div>
    </div>
    <div class="lightbox-wrap js-lightbox" id="js-calendar-lightbox">
        <div class="lightbox-background js-episode-close"></div>
        <div class="lightbox iframe-ep-content">
        </div>
    </div>
        <div class="lightbox-wrap js-lightbox" id="js-connect">
            <div class="lightbox-background js-close-lightbox"></div>
            <div class="lightbox">
                <div class="lightbox_grid">
                    <div class="lightbox_info">
                        <div class="lightbox_info_header">
                            <p class="episode_subtitle">
                                <span>Hast du schon ein Konto?</span>
                            </p>
                            <nav class="">
                                <div class="">
<form action="/de/v2/account/login?ReturnUrl=%2Fde%2Fv2%2Fcatalogue%2Fshow%2F493%2Fafterlost-omu%2Fseason%2F870%2Fstaffel-1" class="nav-user_login" method="post" role="form" style="padding:0px">                                        <div class="input-group">
                                            <label class="label" for="username2">Benutzername/E-Mail-Adresse</label>
                                            <input class="input" type="text" id="username2" name="Username">
                                        </div>
                                        <div class="input-group">
                                            <label class="label" for="password2">Passwort</label>
                                            <input class="input" type="password" id="password2" name="Password">
                                        </div>
                                                <input type="hidden" name="2cf31ec8cce98c0767773833a376f684" value="7LnwaXW/GaHPbgvG7Z3RBghPQdhWl4Dt9S13P6JotzOftV4mxCOEt+EJx4HMD3tSvngCqgbWcxmKiuLtHecavQXoT4ZuibehbiS9BRRj6hQEYyR6k/F+bOp2TUqvlVr5JYUQLvdMSTp1uUZe+wCC0xaJkJjRag2HdGlxCCCj25bGFFq2Dc0PNNQ3tHYCKNh1zGNiffEaRUxWUEXROUVbnCmkVbcgR7QrPIfw0cAQakIWvtzdkj2aw+AAEpDj8gLpb+0jwCR1xiYQMCeiQs0mSJSKps3dA85jgdcRu0tJLY2lyncc0Q2mb0Vs9KBWSXLPQs6GdOMOEHwYAOcn/6K0pQ==">
                                                <input type="hidden" name="44c6be1eed44c9d6379a605a79b7db4b" value="7LnwaXW/GaHPbgvG7Z3RBghPQdhWl4Dt9S13P6JotzOftV4mxCOEt+EJx4HMD3tSvngCqgbWcxmKiuLtHecavQXoT4ZuibehbiS9BRRj6hQEYyR6k/F+bOp2TUqvlVr5JYUQLvdMSTp1uUZe+wCC0xaJkJjRag2HdGlxCCCj25bGFFq2Dc0PNNQ3tHYCKNh1zGNiffEaRUxWUEXROUVbnJqEAczaFupqr8s5AJStEJXIu1n++/a5fHcDkR2bxu2/Mk4KXtpyrGdUCLvwzVjy6GqBiKSfNw+rAueVTJzsQNP02pFkk76L8c7ZohyqyQymQbUjIhqfrpjmVYUxp74FJg==">
                                                <input type="hidden" name="3a13f0328c75f9e902e122cc3d1c3950" value="7LnwaXW/GaHPbgvG7Z3RBghPQdhWl4Dt9S13P6JotzOftV4mxCOEt+EJx4HMD3tSvngCqgbWcxmKiuLtHecavQXoT4ZuibehbiS9BRRj6hQEYyR6k/F+bOp2TUqvlVr5JYUQLvdMSTp1uUZe+wCC0xaJkJjRag2HdGlxCCCj25bGFFq2Dc0PNNQ3tHYCKNh1zGNiffEaRUxWUEXROUVbnKPrge0dZolVwmEJXcwebTCbcAfVSHgbYx1hLLwnWdQQuKlfnGTqXK6bvRsJZdl8uiqAqm+tq+ARtSxU2CYEwE4SDWk02SQkhVdbYAkS9YFJCjdShph404MpTo/K2RrbvQ==">
                                        <button class="button" type="submit" name="login">Verbindung</button>
                                        <div class="nav-user_login_checkbox">
                                            <input class="checkbox" type="checkbox" id="remember2">
                                            <label class="checkbox-label" for="remember2">Daten speichern?</label>
                                        </div>
                                        <a class="nav-user_login_link" href="/de/v2/account/forgotpassword">Passwort vergessen?</a>
</form>                                </div>
                            </nav>
                        </div>
                    </div>
                    <div class="lightbox_main">
                        <div class="lightbox_content">
                            <div>
                                <p class="lightbox_title">Du musst verbunden und daher registriert sein, um diese Funktion zu nutzen.</p>
                                <p class="lightbox_text">Genieße erweiterte Funktionen der Plattform, indem du ein Konto erstellst.</p>
                                <span style="font-weight:bold">Deine kostenlose Registrierung bzw. dein Abo erlauben es dir außerdem, deine Sammlung zu beginnen und komplette Serien zu kaufen oder vorzubestellen!</span>
                                <br><br>
                                <span>* Konditionen und Vorteile jedes Konto-Typs sind auf der Abo-Seite aufgeführt.</span>
                            </div>
                        </div>
                    </div>
                </div>
                <button class="lightbox_close js-close-lightbox" type="button">
                    <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#close"></use></svg>
                </button>
            </div>
        </div>
    <div class="lightbox-wrap js-lightbox" id="js-connect-noad">
        <div class="lightbox-background js-close-lightbox"></div>
        <div class="lightbox">
            <div class="lightbox_grid">
                <div class="lightbox_info">
                    <div class="lightbox_info_header">
                        <p class="episode_subtitle">
                            <span>Hast du schon ein Konto?</span>
                        </p>
                        <nav class="">
                            <div class="">
<form action="/de/v2/account/login?ReturnUrl=%2Fde%2Fv2%2Fcatalogue%2Fshow%2F493%2Fafterlost-omu%2Fseason%2F870%2Fstaffel-1" class="nav-user_login" method="post" role="form" style="padding:0px">                                    <div class="input-group">
                                        <label class="label" for="username2">Benutzername/E-Mail-Adresse</label>
                                        <input class="input" type="text" id="username2" name="Username">
                                    </div>
                                    <div class="input-group">
                                        <label class="label" for="password2">Passwort</label>
                                        <input class="input" type="password" id="password2" name="Password">
                                    </div>
                                            <input type="hidden" name="2cf31ec8cce98c0767773833a376f684" value="7LnwaXW/GaHPbgvG7Z3RBghPQdhWl4Dt9S13P6JotzOftV4mxCOEt+EJx4HMD3tSvngCqgbWcxmKiuLtHecavQXoT4ZuibehbiS9BRRj6hQEYyR6k/F+bOp2TUqvlVr5JYUQLvdMSTp1uUZe+wCC0xaJkJjRag2HdGlxCCCj25bGFFq2Dc0PNNQ3tHYCKNh1zGNiffEaRUxWUEXROUVbnCmkVbcgR7QrPIfw0cAQakIWvtzdkj2aw+AAEpDj8gLpb+0jwCR1xiYQMCeiQs0mSJSKps3dA85jgdcRu0tJLY2lyncc0Q2mb0Vs9KBWSXLPQs6GdOMOEHwYAOcn/6K0pQ==">
                                            <input type="hidden" name="44c6be1eed44c9d6379a605a79b7db4b" value="7LnwaXW/GaHPbgvG7Z3RBghPQdhWl4Dt9S13P6JotzOftV4mxCOEt+EJx4HMD3tSvngCqgbWcxmKiuLtHecavQXoT4ZuibehbiS9BRRj6hQEYyR6k/F+bOp2TUqvlVr5JYUQLvdMSTp1uUZe+wCC0xaJkJjRag2HdGlxCCCj25bGFFq2Dc0PNNQ3tHYCKNh1zGNiffEaRUxWUEXROUVbnJqEAczaFupqr8s5AJStEJXIu1n++/a5fHcDkR2bxu2/Mk4KXtpyrGdUCLvwzVjy6GqBiKSfNw+rAueVTJzsQNP02pFkk76L8c7ZohyqyQymQbUjIhqfrpjmVYUxp74FJg==">
                                            <input type="hidden" name="3a13f0328c75f9e902e122cc3d1c3950" value="7LnwaXW/GaHPbgvG7Z3RBghPQdhWl4Dt9S13P6JotzOftV4mxCOEt+EJx4HMD3tSvngCqgbWcxmKiuLtHecavQXoT4ZuibehbiS9BRRj6hQEYyR6k/F+bOp2TUqvlVr5JYUQLvdMSTp1uUZe+wCC0xaJkJjRag2HdGlxCCCj25bGFFq2Dc0PNNQ3tHYCKNh1zGNiffEaRUxWUEXROUVbnKPrge0dZolVwmEJXcwebTCbcAfVSHgbYx1hLLwnWdQQuKlfnGTqXK6bvRsJZdl8uiqAqm+tq+ARtSxU2CYEwE4SDWk02SQkhVdbYAkS9YFJCjdShph404MpTo/K2RrbvQ==">
                                    <button class="button" type="submit" name="login">Verbindung</button>
                                    <div class="nav-user_login_checkbox">
                                        <input class="checkbox" type="checkbox" id="remember2">
                                        <label class="checkbox-label" for="remember2">Daten speichern?</label>
                                    </div>
                                    <a class="nav-user_login_link" href="/de/v2/account/forgotpassword">Passwort vergessen?</a>
</form>                            </div>
                        </nav>
                    </div>
                </div>
                <div class="lightbox_main">
                    <div class="lightbox_content">
                        <div>
                            <p class="lightbox_title">Die Folge im Abo ansehen</p>
                            <span class="button_icon -left">
                                <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#small-noad-icon"></use></svg>
                            </span>
                            <span class="button_text js-button-text">Zugang zum Abo</span>
                            <br>
                            <span>* Konditionen und Vorteile jedes Konto-Typs sind auf der Abo-Seite aufgeführt.</span>
                        </div>
                    </div>
                </div>
            </div>
            <button class="lightbox_close js-close-lightbox" type="button">
                <svg role="img"><use xlink:href="/assets/images/dist/svgs.svg#close"></use></svg>
            </button>
        </div>
    </div>
    <div class="Notification-actionsPopupAbs"></div>
    <script crossorigin="anonymous" src="//cdncontent.wakanim.tv/scripts/dist/main.js?v14.47"></script><iframe name="__tcfapiLocator" style="display: none;"></iframe>
    <script crossorigin="anonymous" src="//cdncontent.wakanim.tv/scripts/dist/moment.min.js"></script>
    <script crossorigin="anonymous" src="//cdncontent.wakanim.tv/scripts/dist/moment-timezone.min.js"></script>
    
        <script crossorigin="anonymous" src="//cdncontent.wakanim.tv/scripts/dist/momentlocale/de.js"></script>




    <script type="text/javascript">
                function refreshSocialNumber() {
                    if ($(".count").length > 0) {
                        $.getJSON('//count.Wakanim.TV/?url=' + encodeURIComponent('https://www.wakanim.tv/de/v2/catalogue/show/493/afterlost-omu/season/870/staffel-1') + "&callback=?", function (data) {
                            shares = data.shares;
                            $(".count").each(function (index, el) {
                                service = $(el).parents(".share-btn").attr("data-service");
                                count = shares[service];
                                if (count > 1000) {
                                    count = (count / 1000).toFixed(1);
                                    if (count > 1000) count = (count / 1000).toFixed(1) + "M";
                                    else count = count + "k";
                                }
                                $(el).html(count);
                            });
                        });
                    }
                    }

                $(function () {

                    setTimeout("refreshSocialNumber()", 2000);
                });
    </script>
<form action="/de/v2/account/modifyavatar" enctype="multipart/form-data" id="modifyAvatarForm" method="post" role="form">        <input style="display:none;" type="file" accept="image/*" id="ModifyAvatar" name="ModifyAvatar">
</form>    <script type="text/javascript">
                var oldPic = "";
                $(".avatar-modify").click(function (e) {
                    e.preventDefault();
                    var $fileInput = $('#ModifyAvatar');

                    $fileInput.click();
                    $fileInput.change(function (e) {
                        $('.avatar-actions').show();
                        var fileName = $(this)[0].files[0].name;

                        $('.js-file-name').text(fileName);

                        var reader = new FileReader();
                        var jspreviewtoupdate = $('.nav-user_info_avatar');
                        var jspreviewtoupdate2 = $('.profile_avatar img');
                        reader.onload = function () {
                            if (oldPic == "") oldPic = jspreviewtoupdate2.css('background-image');
                            var dataURL = reader.result;
                            jspreviewtoupdate.css('background', 'url(' + dataURL + ') no-repeat');
                            jspreviewtoupdate.css('background-size', '100% auto');
                            jspreviewtoupdate2.attr('src', dataURL);
                        };
                        reader.readAsDataURL($(this)[0].files[0]);
                    });
                });

                $('.modify-avatar-button-cancel').click(function (e) {
                    e.preventDefault();
                    var jspreviewtoupdate = $('.nav-user_info_avatar');
                    jspreviewtoupdate.css('background-image', oldPic);
                    oldPic = "";
                    $('#ModifyAvatar').val('');
                    $('.avatar-actions').fadeOut();
                });

                $('.modify-avatar-button-validate').click(function (e) {
                    e.preventDefault();
                    var $form = $("#modifyAvatarForm");
                    var formdata = (window.FormData) ? new FormData($form[0]) : null;
                    var data = (formdata !== null) ? formdata : $form.serialize();
                    $.ajax({
                        url: $form.attr('action'),
                        type: $form.attr('method'),
                        contentType: false,
                        processData: false,
                        //dataType: 'json',
                        data: data,
                        success: function (response) {
                            oldPic = "";
                            $('#ModifyAvatar').val('');
                            $('.avatar-actions').fadeOut();
                            location.reload();
                        }
                    });
                });
                    
                    window.onerror = function (errorMsg, url, line, col, error) {
                        console.log("debug : " + errorMsg + " : url : " + url);
                        if (errorMsg.indexOf('Script error.') > -1 || errorMsg.indexOf('ad blocker') > -1) {
                            return true;
                        }
                    };
                    
    </script>
    
    <div class="lightbox-wrap js-lightbox" id="js-buying-season-lightbox">
        <div class="lightbox-background js-buying-season-close"></div>
        <div class="lightbox iframe-buying-season-content"></div>
    </div>
    <div id="js-trailer-lightbox" class="lightbox-wrap js-lightbox">
        <div class="lightbox-background js-close-lightbox"></div>
        <div class="lightbox iframe-content"></div>
    </div>
    <script type="text/javascript" src="//cdncontent.wakanim.tv/scripts/dist/lottie.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/history.js/1.8/bundled/html4+html5/jquery.history.min.js"></script>
<script type="text/javascript">
    var heightFull = 0;
    var History = window.History;
    var statEpHeader = 'full';
    var manualStateChange = true;
    var stateinfos = [];
    var topContentPosInit = 0;
    var ajaxRequest;
    var isAjaxAborted = false;

    $(document).ready(function () {
        var loaderLottieContainer = document.getElementById('SerieV2-loaderLottie');
        var animItem = bodymovin.loadAnimation({
            wrapper: loaderLottieContainer,
            animType: 'svg',
            loop: true,
            path: $('.SerieV2-loaderLottie').data("loader-src")
        });
        $('.SerieV2-loaderLottie').addClass("lottieLoaded");

        var loaderLottieContainer = document.getElementById('SerieV2-subContent-loaderLottie');
        var animItem = bodymovin.loadAnimation({
            wrapper: loaderLottieContainer,
            animType: 'svg',
            loop: true,
            path: $('.SerieV2-subContent-loader .SerieV2-loaderLottie').data("loader-src")
        });
        $('.SerieV2-subContent-loader').addClass("lottieLoaded");

        History.replaceState({ path: window.location.pathname }, document.title, window.location.pathname);
        History.Adapter.bind(window, 'statechange', function () {
            if (manualStateChange == true) {
                var State = History.getState();
                var itemBtn = $('.SerieNav-btn[href="' + State.data.path + '"], .SerieSubNav-btn[href="' + State.data.path + '"]');
                var href = itemBtn.attr("href");
                if (ajaxRequest && ajaxRequest.readyState != 4) {
                    ajaxRequest.abort();
                    isAjaxAborted = true;
                }

                if (itemBtn.hasClass("SerieSubNav-btn")) {
                    subnavReplaceContent(itemBtn, function () {
                        ajaxRequest = $.ajax({
                            url: href,
                            type: "POST",
                            beforeSend: function (jqXHR, settings) {
                                isAjaxAborted = false;
                            },
                            success: function (data) {
                                $('.SerieV2-subContent-loader').css("display", "none");
                                $("#container-show").html(data);
                                HistoryEnd();
                            }
                        });
                    });
                } else {
                    replaceContent(itemBtn, function () {
                        ajaxRequest = $.ajax({
                            url: href,
                            type: "POST",
                            beforeSend: function (jqXHR, settings) {
                                isAjaxAborted = false;
                            },
                            success: function (data) {
                                $("#container-show").html(data);
                                HistoryEnd();
                            }
                        });
                    });
                }
            }
            manualStateChange = true;
        });

        $(window).load(function () {
            defineMaxHeightHeader();
            $(".SerieV2-header").css("min-height", heightFull + "px");
            if (lastSize == "extra-small") {
                $(".SerieHeader-minimizeContent").css("top", "");
            } else {
                $(".SerieHeader-minimizeContent").css("top", $(".SerieHeader-right").position().top + "px");
            }
            if (statEpHeader == "full") {
                $(".SerieV2-content").css("margin-top", "");
            } else {
                var heightImgReduce = $(".SerieHeader-titleImgFake .SerieHeader-titleImg").outerHeight(false) * 0.4;
                var marginTop = ($(".SerieV2-header").outerHeight() + parseInt($(".SerieV2-header").css('marginBottom'))) - (heightImgReduce + parseInt($(".SerieHeader-titleImgFake .SerieHeader-titleImg").css('marginBottom')) + $(".SerieHeader-actionsPos").outerHeight(true) + $(".SerieHeader-rating").outerHeight(true));
                $(".SerieV2-content").css("transition", "none");
                $(".SerieV2-content").css("margin-top", "-" + marginTop + "px");
            }
            moveAjaxContentForResize();

            var minHeightAjaxContent = $('.SerieV2-ajaxContent').outerHeight(true);
            $('.SerieV2-ajaxBlock').css('min-height', minHeightAjaxContent + "px");
            var minHeightAjaxSubContent = $('.SerieV2-subContentAjax').outerHeight(true) + $('.SerieSubNav').outerHeight(true);
            $('.SerieV2-subContent').css('min-height', minHeightAjaxSubContent + "px");
        });

        defineMaxHeightHeader();
        $(".SerieV2-header").css("min-height", heightFull + "px");
        if (lastSize == "extra-small") {
            $(".SerieHeader-minimizeContent").css("top", "");
        } else {
            $(".SerieHeader-minimizeContent").css("top", $(".SerieHeader-right").position().top + "px");
        }

        var $actionsHtml = $('.SerieHeader-actions').clone();
        $('.SerieHeader-actionsPos').append($actionsHtml);

        $('.SerieV2').on('click', '.SerieNav-btn, .SerieSubNav-btn', function (e) {
            e.preventDefault();
            _this = $(this);
            if (!_this.hasClass("active")) {
                if (ajaxRequest && ajaxRequest.readyState != 4) {
                    ajaxRequest.abort();
                    isAjaxAborted = true;
                }
                if (lastSize == "extra-small") {
                    $('.SerieNav-btn').removeClass('active');
                    _this.addClass('active');
                    if (!_this.hasClass("SerieSubNav-btn")) {
                        $("#container-show").slideUp("slow", function () {
                            $('html,body').animate({
                                scrollTop: $(".SerieNav-btn.active").offset().top - $(".header-main").outerHeight(true)
                            }, "slow", function () {
                                moveAjaxContentForResize();
                                getAjaxContent(_this);
                            });
                        });
                    } else {
                        moveAjaxContentForResize();
                        getAjaxContent(_this);
                    }
                } else {
                    getAjaxContent(_this);
                }
            }
        });

        $('.SerieV2').on('click', '.ReviewListBtn-next, .ReviewListBtn-prev', function (e) {
            e.preventDefault();
            _this = $(this);
            var href = _this.attr("href");
            if (ajaxRequest && ajaxRequest.readyState != 4) {
                ajaxRequest.abort();
                isAjaxAborted = true;
            }
            ajaxRequest = $.ajax({
                url: href,
                type: "POST",
                beforeSend: function (jqXHR, settings) {
                    isAjaxAborted = false;
                    hidereviews();
                },
                success: function (data) {
                    $("#list-reviews").html(data);
                    saveState(data, _this);
                }
            });
        });

        $(document).on("change", "select[data-ajaxselect=true]", function (evt) {
            evt.preventDefault();
            var dest = $($(this).data('ajax-update'));
            var href = $(this).val();
            $('.SerieV2-loader').css("display", "block");
            dest.empty();
            $.post(href, {}, function (data) {
                dest.replaceWith(data);
                saveStateSpec(data, href);
            });
        });

        $('.SerieV2').on('click', '.ReviewItem-inner', function (e) {
            e.preventDefault();
            $(".SerieV2").dequeue();
            var idReview = $(this).closest(".ReviewItem").data("reviewid");
            $(".ReviewList, .ReviewListBtn").addClass("inactive");
            $('.ReviewDetailList, .ReviewBtns-back, .ReviewDetailItem[data-reviewid="' + idReview + '"]').addClass("active");
            if (lastSize == "extra-small") {
                $('html,body').animate({
                    scrollTop: $(".ReviewsListing").offset().top - $(".header-main").outerHeight(true) - $(window).height() * 0.1
                }, "slow", function () {
                });
            }
        });

        $('.SerieV2').on('click', '.ReviewBtns-edit', function (e) {
            if (!$(this).hasClass('--nouser')) {
                e.preventDefault();
                $(".SerieV2").dequeue();
                $(".ReviewDetailItem").removeClass("active");
                $(".ReviewList, .ReviewListBtn, .ReviewBtns-edit").addClass("inactive");
                $('.ReviewWriter, .ReviewBtns-back, .ReviewBtns-submit').addClass("active");
                //$(".ReviewBtns-edit").text($(".ReviewBtns-edit").data("reviewsavetext"));
                if (lastSize == "extra-small") {
                    $('html,body').animate({
                        scrollTop: $(".ReviewsListing").offset().top - $(".header-main").outerHeight(true) - $(window).height() * 0.1
                    }, "slow", function () {
                    });
                }
            }
        });

        $('.SerieV2').on('click', '.ReviewBtns-submit', function (e) {
            e.preventDefault();
            $('.ReviewWriter form').submit();
            $(".SerieV2").dequeue();
            $(".ReviewList, .ReviewListBtn, .ReviewBtns-edit").removeClass("inactive");
            $(".ReviewDetailList, .ReviewWriter, .ReviewBtns-back").removeClass("active");
            if (lastSize == "extra-small") {
                $('html,body').animate({
                    scrollTop: $(".ReviewsListing").offset().top - $(".header-main").outerHeight(true) - $(window).height() * 0.1
                }, "slow", function () {
                });
                $(".ReviewDetailItem.active").removeClass("active");
                $(".SerieV2").dequeue();
            } else {
                $(".SerieV2").delay(500).queue(function () {
                    $(".ReviewDetailItem.active").removeClass("active");
                    $(".SerieV2").dequeue();
                });
            }
        });

        $('.SerieV2').on('click', '.ReviewBtns-back', function (e) {
            e.preventDefault();
            $(".SerieV2").dequeue();
            $(".ReviewList, .ReviewListBtn, .ReviewBtns-edit").removeClass("inactive");
            $(".ReviewDetailList, .ReviewWriter, .ReviewBtns-back, .ReviewBtns-submit").removeClass("active");
            if (lastSize == "extra-small") {
                $('html,body').animate({
                    scrollTop: $(".ReviewsListing").offset().top - $(".header-main").outerHeight(true) - $(window).height() * 0.1
                }, "slow", function () {
                });
                $(".ReviewDetailItem.active").removeClass("active");
                $(".SerieV2").dequeue();
            } else {
                $(".SerieV2").delay(500).queue(function () {
                    $(".ReviewDetailItem.active").removeClass("active");
                    $(".SerieV2").dequeue();
                });
            }
        });

        $('.SerieV2').on('click', '.js-review-action', function (e) {
            e.preventDefault();
            e.stopPropagation();
            var link = $(this);
            $('.js-review-action.active').removeClass('active');
            link.addClass('active');
            $('.review-actions-active').empty().attr('data-action', 'none').removeClass('review-actions-active');
            var result = true;
            if (link.attr('data-confirm')) {
                result = confirm(link.attr('data-confirm'));
            }
            if (result) {
                link.closest('.ReviewItem').remove();
                $(window).resize();
                if (ajaxRequest && ajaxRequest.readyState != 4) {
                    ajaxRequest.abort();
                    isAjaxAborted = true;
                }
                ajaxRequest = $.ajax({
                    url: link.attr('href'),
                    type: "POST",
                    success: function (data) {
                        link.closest('.ReviewItem').remove();
                        $(window).resize();
                    },
                    error: function (error) {
                        alert('error during get review : ' + error);
                    },
                    complete: function () {
                    }
                });
            }
        });

        $('.SerieV2').on('click', '.VoiceActorsItem', function (e) {
            e.preventDefault();
            var vaId = $(this).data("va-id");
            if (!$(this).hasClass('active')) {
                $(".SerieV2").dequeue();
                $('.VoiceActorsItem.active').removeClass('active');
                $('.VoiceActorsDetail-item.active').removeClass('active');
                $(this).addClass('active');
                $('.VoiceActorsDetail-item[data-va-id="' + vaId + '"]').addClass('active');
                if (lastSize == "extra-small") {
                    $('html,body').animate({
                        scrollTop: $(".VoiceActorsDetail-list").offset().top - $(".header-main").outerHeight(true) - $(window).height() * 0.1
                    }, "slow", function () {
                    });
                }
            }
        });

        moveAjaxContentForResize();
    });

    $(window).resize(function () {
        defineMaxHeightHeader();
        $(".SerieV2-header").css("min-height", heightFull + "px");
        if (lastSize == "extra-small") {
            $(".SerieHeader-minimizeContent").css("top", "");
        } else {
            $(".SerieHeader-minimizeContent").css("top", $(".SerieHeader-right").position().top + "px");
        }
        if (statEpHeader == "full") {
            $(".SerieV2-content").css("margin-top", "");
            if (lastSize == "extra-small") {
                $('.SerieHeader-minimizeContent').css("padding-top", "");
                $(".SerieHeader-minimizeContent").css("top", "");
            } else {
                $('.SerieHeader-minimizeContent').css("padding-top", $(".SerieHeader-titleImgFake .SerieHeader-titleImg").outerHeight(false) + parseInt($(".SerieHeader-titleImgFake .SerieHeader-titleImg").css('marginBottom')));
                $(".SerieHeader-minimizeContent").css("top", $(".SerieHeader-right").position().top + "px");
            }
        } else {
            var heightImgReduce = $(".SerieHeader-titleImgFake .SerieHeader-titleImg").outerHeight(false) * 0.4;
            var marginTop = ($(".SerieV2-header").outerHeight() + parseInt($(".SerieV2-header").css('marginBottom'))) - (heightImgReduce + parseInt($(".SerieHeader-titleImgFake .SerieHeader-titleImg").css('marginBottom')) + $(".SerieHeader-actionsPos").outerHeight(true) + $(".SerieHeader-rating").outerHeight(true));
            if (lastSize == "extra-small") {
                $('.SerieHeader-minimizeContent').css("padding-top", "");
                $(".SerieV2-content").css("margin-top", "");
            } else {
                $('.SerieHeader-minimizeContent').css("padding-top", $(".SerieHeader-titleImgFake .SerieHeader-titleImg").outerHeight(false) * 0.4 + parseInt($(".SerieHeader-titleImgFake .SerieHeader-titleImg").css('marginBottom')));
                $(".SerieV2-content").css("margin-top", "-" + marginTop + "px");
            }
            $(".SerieV2-content").css("transition", "none");

            $(".SerieHeader-minimizeContent").css("top", "0px");
        }
        moveAjaxContentForResize();
    });

    function getAjaxContent(itemClick) {
        _this = itemClick;
        var href = _this.attr("href");

        if (_this.hasClass("SerieSubNav-btn")) {
            subnavReplaceContent(_this, function () {
                ajaxRequest = $.ajax({
                    url: href,
                    type: "POST",
                    beforeSend: function (jqXHR, settings) {
                        isAjaxAborted = false;
                    },
                    success: function (data) {
                        if (!isAjaxAborted) {
                            $('.SerieV2-subContent-loader').css("display", "none");
                            $("#container-show").html(data);
                            saveState(data, _this);
                        }
                    }
                });
            });
        } else {
            replaceContent(_this, function () {
                ajaxRequest = $.ajax({
                    url: href,
                    type: "POST",
                    beforeSend: function (jqXHR, settings) {
                        isAjaxAborted = false;
                    },
                    success: function (data) {
                        if (!isAjaxAborted) {
                            $("#container-show").html(data);
                            saveState(data, _this);
                        }
                    }
                });
            });
        }
    }

    function moveAjaxContentForResize() {
        if (lastSize == "extra-small") {
            $(".SerieV2-ajaxBlock").appendTo($(".SerieNav-btn.active").closest("li"));
            /*if ($(".SerieV2-ajaxBlock").closest("#nav-show").length <= 0) {
                $(".SerieV2-ajaxBlock").appendTo($(".SerieNav-btn.active").closest("li"));
            }*/
        } else {
            if ($(".SerieV2-ajaxBlock").closest("#nav-show").length > 0) {
                $(".SerieV2-ajaxBlock").insertAfter($(".SerieV2-nav"));
            }
        }
    }

    function defineMaxHeightHeader() {
        heightFull = $(".SerieHeader-left").outerHeight();
        if ($(".SerieHeader-right").outerHeight() > heightFull) {
            heightFull = $(".SerieHeader-right").outerHeight();
        }
    }

    function saveState(content, itemClick) {
        _this = itemClick;
        saveStateSpec(content, _this.attr('href'));
    }

    function saveStateSpec(content, href) {
        var urlPath = href;
        var title = $(content).data('title');
        manualStateChange = false;
        History.pushState({ path: urlPath }, title, urlPath);
        if (typeof (ga) !== "undefined") {
            ga('set', {
                page: urlPath,
                title: title
            });
            ga('send', 'pageview');
        }
        HistoryEnd();
    }

    function HistoryEnd() {
        maximize();
        if (typeof reloadNewAds !== 'undefined')
            reloadNewAds();
        $('.ProgressBar').each(function (i, obj) {
            var item = $(obj);
            var progressChildDiv = item.find('.ProgressBar-progress');
            progressChildDiv.css('width', ((typeof (item.data('progress')) != "undefined" && item.data('progress') != "") ? item.data('progress') : 0) + '%');
        });
    }

    function maximize() {
        if (!$('.SerieV2-subContent-loader').hasClass("lottieLoaded")) {
            var loaderLottieContainer = document.getElementById('SerieV2-subContent-loaderLottie');
            var animItem = bodymovin.loadAnimation({
                wrapper: loaderLottieContainer,
                animType: 'svg',
                loop: true,
                path: $('.SerieV2-subContent-loader .SerieV2-loaderLottie').data("loader-src")
            });
            $('.SerieV2-subContent-loader').addClass("lottieLoaded");
        }

        if (lastSize == "extra-small") {
            $('.SerieV2-subContentAjax').css("display", "block");
            $("#container-show").stop().slideDown("slow", function () {
            });
        } else {
            $('#container-show, .SerieV2-subContentAjax').fadeIn(500);
        }

        var minHeightAjaxContent = $('.SerieV2-ajaxContent').outerHeight(true);
        $('.SerieV2-ajaxBlock').css('min-height', minHeightAjaxContent + "px");
        var minHeightAjaxSubContent = $('.SerieV2-subContentAjax').outerHeight(true) + $('.SerieSubNav').outerHeight(true);
        $('.SerieV2-subContent').css('min-height', minHeightAjaxSubContent + "px");

        $('.SerieV2-loader, .SerieV2-subContent-loader').css("display", "none");
    }

    function manageHeaderReduce(itemClick) {
        if (itemClick.data('showfull')) {
            statEpHeader = 'full'
        } else {
            statEpHeader = 'reduce';
        }

        $('.SerieNav-btn').removeClass('active');
        itemClick.addClass('active');

        moveAjaxContentForResize();

        $(".SerieV2").dequeue();
        $(".SerieV2-content").css("transition", "");
        if (itemClick.data('showfull')) {
            $(".SerieV2").removeClass("anim-reduce-step2");
            $(".SerieV2").delay(500).queue(function () {
                $(".SerieV2").removeClass("anim-reduce");
                $(".SerieV2-content").css("margin-top", "");
                if (lastSize == "extra-small") {
                    $(".SerieHeader-minimizeContent").css("padding-top", "");
                    $(".SerieHeader-minimizeContent").css("top", $(".SerieHeader-right").position().top + "px");
                } else {
                    $('.SerieHeader-minimizeContent').css("padding-top", $(".SerieHeader-titleImgFake .SerieHeader-titleImg").outerHeight(false) + parseInt($(".SerieHeader-titleImgFake .SerieHeader-titleImg").css('marginBottom')));
                    $(".SerieHeader-minimizeContent").css("top", $(".SerieHeader-right").position().top + "px");
                }
                $(".SerieV2").dequeue();
            });
        } else {
            $(".SerieV2").addClass("anim-reduce");
            $(".SerieHeader-minimizeContent").css("top", "0px");
            $(".SerieV2").delay(1200).queue(function () {
                $(".SerieV2").addClass("anim-reduce-step2");
                $(".SerieV2").dequeue();
            });
            var heightImgReduce = $(".SerieHeader-titleImgFake .SerieHeader-titleImg").outerHeight(false) * 0.4;
            var marginTop = ($(".SerieV2-header").outerHeight() + parseInt($(".SerieV2-header").css('marginBottom'))) - (heightImgReduce + parseInt($(".SerieHeader-titleImgFake .SerieHeader-titleImg").css('marginBottom')) + $(".SerieHeader-actionsPos").outerHeight(true) + $(".SerieHeader-rating").outerHeight(true));
            if (lastSize == "extra-small") {
                $(".SerieHeader-minimizeContent").css("padding-top", "");
                $(".SerieV2-content").css("top", "");
            } else {
                $('.SerieHeader-minimizeContent').css("padding-top", $(".SerieHeader-titleImgFake .SerieHeader-titleImg").outerHeight(false) * 0.4 + parseInt($(".SerieHeader-titleImgFake .SerieHeader-titleImg").css('marginBottom')));
                $(".SerieV2-content").css("margin-top", "-" + marginTop + "px");
            }
        }
    }

    function replaceContent(itemClick, fadeOutComplete) {

        var minHeightAjaxContent = $('.SerieV2-ajaxContent').outerHeight(true);
        $('.SerieV2-ajaxBlock').css('min-height', minHeightAjaxContent + "px");
        var minHeightAjaxSubContent = $('.SerieV2-subContentAjax').outerHeight(true) + $('.SerieSubNav').outerHeight(true);
        $('.SerieV2-subContent').css('min-height', minHeightAjaxSubContent + "px");

        manageHeaderReduce(itemClick);

        if (lastSize == "extra-small") {
            $('.SerieV2-loader').css("display", "block");
            fadeOutComplete();
        } else {
            $('#container-show').fadeOut(500, function () {
                $('.SerieV2-loader').css("display", "block");
                fadeOutComplete();
            });
        }
    }

    function subnavReplaceContent(itemClick, fadeOutComplete) {

        var minHeightAjaxContent = $('.SerieV2-ajaxContent').outerHeight(true);
        $('.SerieV2-ajaxBlock').css('min-height', minHeightAjaxContent + "px");
        var minHeightAjaxSubContent = $('.SerieV2-subContentAjax').outerHeight(true) + $('.SerieSubNav').outerHeight(true);
        $('.SerieV2-subContent').css('min-height', minHeightAjaxSubContent + "px");

        $('.SerieSubNav-btn').removeClass('active');
        itemClick.addClass('active');

        if (lastSize == "extra-small") {
            $('.SerieV2-subContentAjax').css("display", "none");
            $('.SerieV2-subContent-loader').css("display", "block");
            fadeOutComplete();
        } else {
            $('.SerieV2-subContentAjax').fadeOut(500, function () {
                $('.SerieV2-subContent-loader').css("display", "block");
                fadeOutComplete();
            });
        }

        manageHeaderReduce($('.SerieNav-btn[data-subnavid="' + itemClick.data("subnavid") + '"]'));
    }
</script>
<script type="text/javascript">
	var watchlistAjaxWorked = false;
	$(document).ready(function(){
        $("body").on("click", ".WatchlistBtn", function (e) {
			e.preventDefault();
			if(!watchlistAjaxWorked){
				var $target = $(this);
				watchlistAjaxWorked = true;
				if($target.hasClass('active')){
					$.ajax({
						url: '/de/v2/watchlist/deletefromwatchlist',
						type: 'DELETE',
						data: 'showId=' + $target.data('showid'),
						success: function (result) {
							$target.removeClass('active');
                            watchlistAjaxWorked = false;
                            /* specifity for page -my page- with the followed series slider */
                            if ($target.closest(".js-slider-followedShow").length > 0) {
                                $target.closest(".slider_item").remove();
                                $('.js-slider').each(function (index, value) {
                                    var $slider = $(this);
                                    var itemSize = $slider.data("slider");

                                    $(window).resize();
                                    if (typeof (sliderArr) != "undefined" && sliderArr.length > 0 && typeof (sliderArr[index]) != "undefined" && sliderArr[index] != null) {
                                        if ($(sliderArr[index].frame).closest(".js-slider-followedShow").length > 0) {
                                            sliderArr[index].reload();
                                        }
                                    }
                                });
                            }
						}
					});
				} else {
					$.ajax({
						url: '/de/v2/watchlist/addtowatchlist',
						type: 'POST',
						data: 'showId=' + $target.data('showid'),
						success: function (result) {
							$target.addClass('active');
							watchlistAjaxWorked = false;
						}
					});
				}
			}
		});
	});
</script>
    <script type="text/javascript">
        $(document).ready(function () {
            ;
        });
    </script>

<script type="text/javascript">
    var terms = {
        Like: 'gef&#228;llt dein Kommentar',
        LikeMany: 'Person(en) gef&#228;llt dein Kommentar',
        Reply: 'hat auf deinen Kommentar geantwortet',
        ReplyMany: 'Person(en) haben auf deinen Kommentar geantwortet',
        Vote: 'hat f&#252;r deinen Kommentar abgestimmt',
        VoteMany: 'Person(en) haben f&#252;r deinen Kommentar abgestimmt',
        and: 'und'
    };
</script>
<script id="stdMessage" type="text/x-jsrender">
    <div class="Notification-item Notification-item--message {{if Image}}Notification-content--messageImage{{/if}} {{:cssclasses}} {{if isNew || unSeen}}new{{/if}}" data-id="{{:idn}}">
        <div class="Notification-inner">
            <div class="Notification-category"></div>
            {{if Image}}
            <div class="Notification-avatar"><img src="{{:Image}}" /></div>
            {{/if}}
            <div class="Notification-content {{if !Image}}Notification-content--full{{/if}}">
                {{if heading}}
                <p class="Notification-title">{{:heading}}</p>
                {{/if}}
                <p class="Notification-text">
                    {{:content}}
                </p>
                <p class="Notification-timeago">{{:~timeFromNow(lastupdatedat)}}</p>
            </div>
            <div class="Notification-actionsMenu">
                <span class="Notification-actionsMenuBtn">
                    <span class="Notification-menuLine Notification-menuLine--one"></span>
                    <span class="Notification-menuLine Notification-menuLine--two"></span>
                    <span class="Notification-menuLine Notification-menuLine--three"></span>
                </span>
                <div class="Notification-actionsPopup">
                    <a class="Notification-menuAction Notification-actionRemove" href="#" data-id="{{:idn}}">Diese Benachrichtigung l&#246;schen</a>
                </div>
            </div>
            <a href="{{:url}}" class="Notification-link"></a>
        </div>
    </div>
</script>
<script id="stdVerb" type="text/x-jsrender">
    <div class="Notification-item {{if isNew || unSeen}}new{{/if}}" data-id="{{:verb}}:{{:relatedid}}">
        <div class="Notification-inner">
            <div class="Notification-category"></div>
            <div class="Notification-avatar"><img src="{{:LatestUser.Avatar}}" /></div>
            <div class="Notification-content">
                <p class="Notification-text">
                    <strong>{{:LatestUser.DisplayName}}{{if nbactions == 1}}</strong> {{:~tr(verb)}} "{{:data}}"{{else nbactions > 1}} {{:~tr('and')}} {{:nbactions-1}}</strong> {{:~tr(verb+'Many')}} "{{:data}}"
                    {{/if}}
                </p>
                <p class="Notification-timeago">{{:~timeFromNow(lastupdatedat)}}</p>
            </div>
            <div class="Notification-actionsMenu">
                <span class="Notification-actionsMenuBtn">
                    <span class="Notification-menuLine Notification-menuLine--one"></span>
                    <span class="Notification-menuLine Notification-menuLine--two"></span>
                    <span class="Notification-menuLine Notification-menuLine--three"></span>
                </span>
                <div class="Notification-actionsPopup">
                    <a class="Notification-menuAction Notification-actionRemove" href="#" data-id="{{:verb}}:{{:relatedid}}">Diese Benachrichtigung l&#246;schen</a>
                </div>
            </div>
            <a href="{{:url}}" class="Notification-link"></a>
        </div>
    </div>
</script>
<script id="stdShow" type="text/x-jsrender">
    <div class="Notification-item Notification-item--show {{if isNew || unSeen}}new{{/if}}"  data-id="{{:idn}}">
        <div class="Notification-inner">
            <div class="Notification-category"></div>
            <div class="Notification-avatar"><img src="{{:Image}}" /></div>
            <div class="Notification-content">
                <p class="Notification-text">
                    <strong>Wakanim</strong> empfiehlt dich <strong>{{:Name}}</strong>
                </p>
                <p class="Notification-timeago">{{:~timeFromNow(lastupdatedat)}}</p>
            </div>
            <div class="Notification-actionsMenu">
                <span class="Notification-actionsMenuBtn">
                    <span class="Notification-menuLine Notification-menuLine--one"></span>
                    <span class="Notification-menuLine Notification-menuLine--two"></span>
                    <span class="Notification-menuLine Notification-menuLine--three"></span>
                </span>
                <div class="Notification-actionsPopup">
                    <a class="Notification-menuAction Notification-actionRemove" href="#" data-id="{{:idn}}">Diese Benachrichtigung l&#246;schen</a>
                </div>
            </div>
            <a href="{{:url}}" class="Notification-link"></a>
        </div>
    </div>
</script>
<script id="stdNewEpisode" type="text/x-jsrender">
    <div class="Notification-item Notification-item--newEpisode {{if isNew || unSeen}}new{{/if}}" data-id="{{:idn}}">
        <div class="Notification-inner">
            <div class="Notification-category"></div>
            <div class="Notification-avatar"><img src="{{:Image}}" /></div>
            <div class="Notification-content">
                <p class="Notification-text">
                    <strong>{{:Name}}</strong>
                </p>
                <p class="Notification-timeago">{{:~timeFromNow(lastupdatedat)}}</p>
            </div>
            <div class="Notification-actionsMenu">
                <span class="Notification-actionsMenuBtn">
                    <span class="Notification-menuLine Notification-menuLine--one"></span>
                    <span class="Notification-menuLine Notification-menuLine--two"></span>
                    <span class="Notification-menuLine Notification-menuLine--three"></span>
                </span>
                <div class="Notification-actionsPopup">
                    <a class="Notification-menuAction Notification-actionRemove" href="#" data-id="{{:idn}}">Diese Benachrichtigung l&#246;schen</a>
                </div>
            </div>
            <a href="{{:url}}" class="Notification-link"></a>
        </div>
    </div>
</script>
            <script type="text/javascript" src="//shop.akibapass.de/logout-shop.php"></script>
                <div id="breakpoints">
        <div class="breakpoint-extra-small" data-size="extra-small"></div>
        <div class="breakpoint-small" data-size="small"></div>
        <div class="breakpoint-middle" data-size="middle"></div>
        <div class="breakpoint-large" data-size="large"></div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/lozad/dist/lozad.min.js"></script>
    <script type="text/javascript">
        $(function () {
            const observer = lozad();
            observer.observe();
            var token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJXZWJzaXRlSWQiOiIzIiwiTGFuZ3VhZ2VJZCI6IjIiLCJDb3VudHJ5IjoiREUiLCJMYW5ndWFnZSI6ImRlIiwiaXNzIjoid2FrYW5pbS50diIsImF1ZCI6Indha2FuaW0udHYiLCJleHAiOjE2OTY1MzA0NzEsIm5iZiI6MTY5NjM1NzY2MX0.5pxp_qg5f1Y5ukMVQG6uHVwMYPMjoLQssQFSiVISRnc';
            $.typeahead({
                input: '#searchtxtheader',
                minLength: 3,
                delay:200,
                order: "asc",
                group: true,
                filter:false,
                hint: true,
                group: {
                    template: function (item) {
                        return item.group;
                    }
                },
                maxItemPerGroup: 6,
                backdrop: {
                    "background-color": "#fff"
                },
                maxItems: 12,
                href: "",
                dropdownFilter: false,
                emptyTemplate: 'Wir haben keine passende Serie in unserem Katalog f&#252;r diese Suche',
                dynamic: true,
                source: {
                    "Anime": {
                        ajax: function (query) {
                            return {
                                type: "GET",
                                url: "https://apiwaka.azure-api.net/search/v2/",
                                data: {
                                    search: "{{query}}",
                                    token: token
                                },
                                callback: {
                                    done: function (data) {
                                        return data.value;
                                    },
                                    fail: function (jqXHR, textStatus, errorThrown) { console.log(textStatus);},
                                }
                            }
                        },
                        href: '/de/v2/catalogue/show/{{IdShowItem}}/{{Slug}}',
                        template: function (query, item) {
                            return "<span>{{Name}}</span>";
                        },
                        display: "Name",
                    },
                    "News": {
                        ajax: function (query) {
                            return {
                                type: "GET",
                                url: "https://apiwaka.azure-api.net/search/v2/lookupnews",
                                data: {
                                    search: "{{query}}",
                                    token: token
                                },
                                callback: {
                                    done: function (dataa) {
                                        return dataa.value;
                                    },
                                    fail: function (jqXHR, textStatus, errorThrown) { console.log(textStatus); },
                                }
                            }
                        },
                        display: "Title",
                        href: '/de/v2/news/detail/{{IdArticle}}/{{Title|slugify}}',
                        template: function (query, item) {
                            var date = new Date(item.UtcDateCreated);
                            return "<span>" + date.toLocaleDateString() + " - {{Title}}</span>";
                        }
                    },
                },
                callback: {
                    onClickAfter: function (node, a, item, event) {
                        event.preventDefault();
                        window.location.href = item.href;
                        $('#result-container').text('');

                    }
                },
                debug: false
            });
        });
    </script>
<script type="text/javascript" src="/_Incapsula_Resource?SWJIYLWA=719d34d31c8e3a6e6fffd425f7e032f3&amp;ns=4&amp;cb=532036546" async=""></script>

<iframe name="__privateStripeMetricsController6960" frameborder="0" allowtransparency="true" scrolling="no" role="presentation" allow="payment *" src="https://js.stripe.com/v3/m-outer-27c67c0d52761104439bb051c7856ab1.html#url=https%3A%2F%2Fwww.wakanim.tv%2Fde%2Fv2%2Fcatalogue%2Fshow%2F493%2Fafterlost-omu%2Fseason%2F870%2Fstaffel-1&amp;title=AFTERLOST%20(OmU.)%20Staffel%201%20-%20Wakanim.TV&amp;referrer=&amp;muid=NA&amp;sid=NA&amp;version=6&amp;preview=false" aria-hidden="true" tabindex="-1" style="border: none !important; margin: 0px !important; padding: 0px !important; width: 1px !important; min-width: 100% !important; overflow: hidden !important; display: block !important; visibility: hidden !important; position: fixed !important; height: 1px !important; pointer-events: none !important; user-select: none !important;"></iframe></body></html>