<!DOCTYPE html><html lang="es"><head><meta http-equiv="origin-trial" content="A/kargTFyk8MR5ueravczef/wIlTkbVk1qXQesp39nV+xNECPdLBVeYffxrM8TmZT6RArWGQVCJ0LRivD7glcAUAAACQeyJvcmlnaW4iOiJodHRwczovL2dvb2dsZS5jb206NDQzIiwiZmVhdHVyZSI6IkRpc2FibGVUaGlyZFBhcnR5U3RvcmFnZVBhcnRpdGlvbmluZzIiLCJleHBpcnkiOjE3NDIzNDIzOTksImlzU3ViZG9tYWluIjp0cnVlLCJpc1RoaXJkUGFydHkiOnRydWV9">
    <meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=EmulateIE9">
<meta name="viewport" content="width=device-width, initial-scale=1.0,shrink-to-fit=no">
<meta content="text/html; charset=UTF-8; X-Content-Type-Options=nosniff" http-equiv="Content-Type">
<meta name="exoclick-site-verification" content="043e4ac6d429fc45736a2571151745ed">
<meta name="trafficjunky-site-verification" content="vnrwaw9t0">
<meta name="csrf-token" content="fk20X4ragMx8REEBey8gokyrCRrTRoHExQKXotdg">

<meta name="Trafficstars" content="siteID">

<title>
        ¿Qué pasaría si decido ayudar a dos hermanas que odian a los hombres?  - Capítulo 3.00  - El culto de la Neko -
            ZonaTMO
    </title>

<link rel="apple-touch-icon" sizes="180x180" href="/favicon/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/favicon/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/favicon/favicon-16x16.png">
<link rel="manifest" href="/favicon/manifest.json">
<link rel="mask-icon" href="/favicon/safari-pinned-tab.svg" color="#2957ba">
<link rel="shortcut icon" href="/favicon/favicon.ico">
<meta name="msapplication-TileColor" content="#2957ba">
<meta name="msapplication-TileImage" content="/favicon/mstile-144x144.png">
<meta name="msapplication-config" content="/favicon/browserconfig.xml">
<meta name="theme-color" content="#2957ba">
<meta name="author" content="TuMangaOnline">
<meta name="subject" content="Manga Online">

<!-- Open Graph -->
<meta name="description" content="Aina y Arisa son dos hermanas gemelas bastante populares entre los alumnos del instituto, sin embargo, existen rumores de que ambas odian a los hombre, aunque existe una excepción…
Hay un joven que resalta entre el resto y es la excepción a esta regla, ya que fue él quien rescató a ambas hermanas junto a su madre de un fatídico destino.
Ahora, ambas hermanas quieren volcar todo su amor y deseo sobre él, mientras que una lo mima con sus grandes pechos, otra quiere ser su fiel sirvienta.
Así es da inicio la comedia-romántica/harem de estos protagonistas.">
<meta name="keywords" content="Manga,Manhua,Leer Manga, Online">
<meta name="”robots”" content="”Index,Follow”">
<meta name="twitter:card" content="summary">
<meta name="twitter:site" content="@TuMangaOnline">
<meta name="twitter:creator" content="@TuMangaOnline">
<meta name="twitter:title" content="    ¿Qué pasaría si decido ayudar a dos hermanas que odian a los hombres?  - Capítulo 3.00  - El culto de la Neko -
            ZonaTMO
    ">
<meta name="twitter:description" content="Aina y Arisa son dos hermanas gemelas bastante populares entre los alumnos del instituto, sin embargo, existen rumores de que ambas odian a los hombre, aunque existe una excepción…
Hay un joven que resalta entre el resto y es la excepción a esta regla, ya que fue él quien rescató a ambas hermanas junto a su madre de un fatídico destino.
Ahora, ambas hermanas quieren volcar todo su amor y deseo sobre él, mientras que una lo mima con sus grandes pechos, otra quiere ser su fiel sirvienta.
Así es da inicio la comedia-romántica/harem de estos protagonistas.">
<meta name="twitter:image" content="https://otakuteca.com/images/books/cover/649a63246e01e.webp">
<meta name="twitter:image:alt" content="    ¿Qué pasaría si decido ayudar a dos hermanas que odian a los hombres?  - Capítulo 3.00  - El culto de la Neko -
            ZonaTMO
    ">
<meta property="og:type" content="website">
<meta property="og:url" content="https://zonatmo.com/viewer/1a75a74709e4aeab2791ca782d32d51c/paginated">
<meta property="og:title" content="    ¿Qué pasaría si decido ayudar a dos hermanas que odian a los hombres?  - Capítulo 3.00  - El culto de la Neko -
            ZonaTMO
    ">
<meta property="og:description" content="Aina y Arisa son dos hermanas gemelas bastante populares entre los alumnos del instituto, sin embargo, existen rumores de que ambas odian a los hombre, aunque existe una excepción…
Hay un joven que resalta entre el resto y es la excepción a esta regla, ya que fue él quien rescató a ambas hermanas junto a su madre de un fatídico destino.
Ahora, ambas hermanas quieren volcar todo su amor y deseo sobre él, mientras que una lo mima con sus grandes pechos, otra quiere ser su fiel sirvienta.
Así es da inicio la comedia-romántica/harem de estos protagonistas.">
<meta property="og:image" content="https://otakuteca.com/images/books/cover/649a63246e01e.webp">
<meta property="og:image:width" content="300">
<meta property="og:image:height" content="450">
<meta property="fb:app_id" content="173650823343275">
<meta property="og:locale" content="es_ES">

<!-- Styles -->
<link href="/css/app.css?id=fcfbee8dc89ec522e321?v=1.0.34" rel="stylesheet">
<!--[if IE 9]>
<link href="/css/bootstrap-ie9.min.css" rel="stylesheet">
<![endif]-->
<!--[if lte IE 8]>
<link href="/css/bootstrap-ie8.min.css" rel="stylesheet">
<script type="text/javascript" src="/js/html5shiv@3.7.3"></script>
<![endif]-->
<!-- InMobi Choice. Consent Manager Tag v3.0 (for TCF 2.2) -->
<script src="https://connect.facebook.net/en_US/sdk.js?hash=a9cd461479320ab27d50ac17ba59ec32" async="" crossorigin="anonymous"></script><script type="text/javascript" async="" charset="utf-8" src="https://www.gstatic.com/recaptcha/releases/zIriijn3uj5Vpknvt_LnfNbF/recaptcha__es.js" crossorigin="anonymous" integrity="sha384-SqXppBPQv2E3iDNxJpzDneSiITmveGgQHVVsRDEOqOuBuo8PeF7Zjy4vKn3lSNYZ"></script><script id="facebook-jssdk" src="https://connect.facebook.net/en_US/sdk.js"></script><script async="" type="text/javascript" src="https://cmp.inmobi.com/choice/p5pLPFWZhaDH8/zonatmo.com/choice.js?tag_version=V3"></script><script type="text/javascript" async="true">
    (function() {
        var host = window.location.hostname;
        var element = document.createElement('script');
        var firstScript = document.getElementsByTagName('script')[0];
        var url = 'https://cmp.inmobi.com'
            .concat('/choice/', 'p5pLPFWZhaDH8', '/', host, '/choice.js?tag_version=V3');
        var uspTries = 0;
        var uspTriesLimit = 3;
        element.async = true;
        element.type = 'text/javascript';
        element.src = url;

        firstScript.parentNode.insertBefore(element, firstScript);

        function makeStub() {
            var TCF_LOCATOR_NAME = '__tcfapiLocator';
            var queue = [];
            var win = window;
            var cmpFrame;

            function addFrame() {
                var doc = win.document;
                var otherCMP = !!(win.frames[TCF_LOCATOR_NAME]);

                if (!otherCMP) {
                    if (doc.body) {
                        var iframe = doc.createElement('iframe');

                        iframe.style.cssText = 'display:none';
                        iframe.name = TCF_LOCATOR_NAME;
                        doc.body.appendChild(iframe);
                    } else {
                        setTimeout(addFrame, 5);
                    }
                }
                return !otherCMP;
            }

            function tcfAPIHandler() {
                var gdprApplies;
                var args = arguments;

                if (!args.length) {
                    return queue;
                } else if (args[0] === 'setGdprApplies') {
                    if (
                        args.length > 3 &&
                        args[2] === 2 &&
                        typeof args[3] === 'boolean'
                    ) {
                        gdprApplies = args[3];
                        if (typeof args[2] === 'function') {
                            args[2]('set', true);
                        }
                    }
                } else if (args[0] === 'ping') {
                    var retr = {
                        gdprApplies: gdprApplies,
                        cmpLoaded: false,
                        cmpStatus: 'stub'
                    };

                    if (typeof args[2] === 'function') {
                        args[2](retr);
                    }
                } else {
                    if(args[0] === 'init' && typeof args[3] === 'object') {
                        args[3] = Object.assign(args[3], { tag_version: 'V3' });
                    }
                    queue.push(args);
                }
            }

            function postMessageEventHandler(event) {
                var msgIsString = typeof event.data === 'string';
                var json = {};

                try {
                    if (msgIsString) {
                        json = JSON.parse(event.data);
                    } else {
                        json = event.data;
                    }
                } catch (ignore) {}

                var payload = json.__tcfapiCall;

                if (payload) {
                    window.__tcfapi(
                        payload.command,
                        payload.version,
                        function(retValue, success) {
                            var returnMsg = {
                                __tcfapiReturn: {
                                    returnValue: retValue,
                                    success: success,
                                    callId: payload.callId
                                }
                            };
                            if (msgIsString) {
                                returnMsg = JSON.stringify(returnMsg);
                            }
                            if (event && event.source && event.source.postMessage) {
                                event.source.postMessage(returnMsg, '*');
                            }
                        },
                        payload.parameter
                    );
                }
            }

            while (win) {
                try {
                    if (win.frames[TCF_LOCATOR_NAME]) {
                        cmpFrame = win;
                        break;
                    }
                } catch (ignore) {}

                if (win === window.top) {
                    break;
                }
                win = win.parent;
            }
            if (!cmpFrame) {
                addFrame();
                win.__tcfapi = tcfAPIHandler;
                win.addEventListener('message', postMessageEventHandler, false);
            }
        };

        makeStub();

        function makeGppStub() {
            const CMP_ID = 10;
            const SUPPORTED_APIS = [
                '2:tcfeuv2',
                '6:uspv1',
                '7:usnatv1',
                '8:usca',
                '9:usvav1',
                '10:uscov1',
                '11:usutv1',
                '12:usctv1'
            ];

            window.__gpp_addFrame = function (n) {
                if (!window.frames[n]) {
                    if (document.body) {
                        var i = document.createElement("iframe");
                        i.style.cssText = "display:none";
                        i.name = n;
                        document.body.appendChild(i);
                    } else {
                        window.setTimeout(window.__gpp_addFrame, 10, n);
                    }
                }
            };
            window.__gpp_stub = function () {
                var b = arguments;
                __gpp.queue = __gpp.queue || [];
                __gpp.events = __gpp.events || [];

                if (!b.length || (b.length == 1 && b[0] == "queue")) {
                    return __gpp.queue;
                }

                if (b.length == 1 && b[0] == "events") {
                    return __gpp.events;
                }

                var cmd = b[0];
                var clb = b.length > 1 ? b[1] : null;
                var par = b.length > 2 ? b[2] : null;
                if (cmd === "ping") {
                    clb(
                        {
                            gppVersion: "1.1", // must be “Version.Subversion”, current: “1.1”
                            cmpStatus: "stub", // possible values: stub, loading, loaded, error
                            cmpDisplayStatus: "hidden", // possible values: hidden, visible, disabled
                            signalStatus: "not ready", // possible values: not ready, ready
                            supportedAPIs: SUPPORTED_APIS, // list of supported APIs
                            cmpId: CMP_ID, // IAB assigned CMP ID, may be 0 during stub/loading
                            sectionList: [],
                            applicableSections: [-1],
                            gppString: "",
                            parsedSections: {},
                        },
                        true
                    );
                } else if (cmd === "addEventListener") {
                    if (!("lastId" in __gpp)) {
                        __gpp.lastId = 0;
                    }
                    __gpp.lastId++;
                    var lnr = __gpp.lastId;
                    __gpp.events.push({
                        id: lnr,
                        callback: clb,
                        parameter: par,
                    });
                    clb(
                        {
                            eventName: "listenerRegistered",
                            listenerId: lnr, // Registered ID of the listener
                            data: true, // positive signal
                            pingData: {
                                gppVersion: "1.1", // must be “Version.Subversion”, current: “1.1”
                                cmpStatus: "stub", // possible values: stub, loading, loaded, error
                                cmpDisplayStatus: "hidden", // possible values: hidden, visible, disabled
                                signalStatus: "not ready", // possible values: not ready, ready
                                supportedAPIs: SUPPORTED_APIS, // list of supported APIs
                                cmpId: CMP_ID, // list of supported APIs
                                sectionList: [],
                                applicableSections: [-1],
                                gppString: "",
                                parsedSections: {},
                            },
                        },
                        true
                    );
                } else if (cmd === "removeEventListener") {
                    var success = false;
                    for (var i = 0; i < __gpp.events.length; i++) {
                        if (__gpp.events[i].id == par) {
                            __gpp.events.splice(i, 1);
                            success = true;
                            break;
                        }
                    }
                    clb(
                        {
                            eventName: "listenerRemoved",
                            listenerId: par, // Registered ID of the listener
                            data: success, // status info
                            pingData: {
                                gppVersion: "1.1", // must be “Version.Subversion”, current: “1.1”
                                cmpStatus: "stub", // possible values: stub, loading, loaded, error
                                cmpDisplayStatus: "hidden", // possible values: hidden, visible, disabled
                                signalStatus: "not ready", // possible values: not ready, ready
                                supportedAPIs: SUPPORTED_APIS, // list of supported APIs
                                cmpId: CMP_ID, // CMP ID
                                sectionList: [],
                                applicableSections: [-1],
                                gppString: "",
                                parsedSections: {},
                            },
                        },
                        true
                    );
                } else if (cmd === "hasSection") {
                    clb(false, true);
                } else if (cmd === "getSection" || cmd === "getField") {
                    clb(null, true);
                }
                //queue all other commands
                else {
                    __gpp.queue.push([].slice.apply(b));
                }
            };
            window.__gpp_msghandler = function (event) {
                var msgIsString = typeof event.data === "string";
                try {
                    var json = msgIsString ? JSON.parse(event.data) : event.data;
                } catch (e) {
                    var json = null;
                }
                if (typeof json === "object" && json !== null && "__gppCall" in json) {
                    var i = json.__gppCall;
                    window.__gpp(
                        i.command,
                        function (retValue, success) {
                            var returnMsg = {
                                __gppReturn: {
                                    returnValue: retValue,
                                    success: success,
                                    callId: i.callId,
                                },
                            };
                            event.source.postMessage(msgIsString ? JSON.stringify(returnMsg) : returnMsg, "*");
                        },
                        "parameter" in i ? i.parameter : null,
                        "version" in i ? i.version : "1.1"
                    );
                }
            };
            if (!("__gpp" in window) || typeof window.__gpp !== "function") {
                window.__gpp = window.__gpp_stub;
                window.addEventListener("message", window.__gpp_msghandler, false);
                window.__gpp_addFrame("__gppLocator");
            }
        };

        makeGppStub();

        var uspStubFunction = function() {
            var arg = arguments;
            if (typeof window.__uspapi !== uspStubFunction) {
                setTimeout(function() {
                    if (typeof window.__uspapi !== 'undefined') {
                        window.__uspapi.apply(window.__uspapi, arg);
                    }
                }, 500);
            }
        };

        var checkIfUspIsReady = function() {
            uspTries++;
            if (window.__uspapi === uspStubFunction && uspTries < uspTriesLimit) {
                console.warn('USP is not accessible');
            } else {
                clearInterval(uspInterval);
            }
        };

        if (typeof window.__uspapi === 'undefined') {
            window.__uspapi = uspStubFunction;
            var uspInterval = setInterval(checkIfUspIsReady, 6000);
        }
    })();
</script>
<!-- End InMobi Choice. Consent Manager Tag v3.0 (for TCF 2.2) -->
<!-- Google Analytics -->
<!-- Google tag (gtag.js) -->
<script async="" src="https://www.googletagmanager.com/gtag/js?id=G-EHS1DCQ6B2"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'G-EHS1DCQ6B2');
</script>
<!-- End Google Analytics -->

<!-- Outbrain -->
<script type="text/javascript" async="async" src="//widgets.outbrain.com/outbrain.js"></script>
<script src="https://www.google.com/recaptcha/api.js?render=6Le223cUAAAAAH6ZdiltvWrWiEUSfx5BwRfrQGU-&amp;hl=es" async="" defer=""></script><style type="text/css" data-fbcssmodules="css:fb.css.base css:fb.css.dialog css:fb.css.iframewidget">.fb_hidden{position:absolute;top:-10000px;z-index:10001}.fb_reposition{overflow:hidden;position:relative}.fb_invisible{display:none}.fb_reset{background:none;border:0px;border-spacing:0;color:#000;cursor:auto;direction:ltr;font-family:'lucida grande', tahoma, verdana, arial, sans-serif;font-size:11px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:1;margin:0;overflow:visible;padding:0;text-align:left;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;visibility:visible;white-space:normal;word-spacing:normal}.fb_reset>div{overflow:hidden}@keyframes fb_transform{from{opacity:0;transform:scale(.95)}to{opacity:1;transform:scale(1)}}.fb_animate{animation:fb_transform .3s forwards}
.fb_hidden{position:absolute;top:-10000px;z-index:10001}.fb_reposition{overflow:hidden;position:relative}.fb_invisible{display:none}.fb_reset{background:none;border:0px;border-spacing:0;color:#000;cursor:auto;direction:ltr;font-family:'lucida grande', tahoma, verdana, arial, sans-serif;font-size:11px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:1;margin:0;overflow:visible;padding:0;text-align:left;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;visibility:visible;white-space:normal;word-spacing:normal}.fb_reset>div{overflow:hidden}@keyframes fb_transform{from{opacity:0;transform:scale(.95)}to{opacity:1;transform:scale(1)}}.fb_animate{animation:fb_transform .3s forwards}
.fb_dialog{background:rgba(82, 82, 82, .7);position:absolute;top:-10000px;z-index:10001}.fb_dialog_advanced{border-radius:8px;padding:10px}.fb_dialog_content{background:#fff;color:#373737}.fb_dialog_close_icon{background:url(https://connect.facebook.net/rsrc.php/v4/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 0 transparent;cursor:pointer;display:block;height:15px;position:absolute;right:18px;top:17px;width:15px}.fb_dialog_mobile .fb_dialog_close_icon{left:5px;right:auto;top:5px}.fb_dialog_padding{background-color:transparent;position:absolute;width:1px;z-index:-1}.fb_dialog_close_icon:hover{background:url(https://connect.facebook.net/rsrc.php/v4/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -15px transparent}.fb_dialog_close_icon:active{background:url(https://connect.facebook.net/rsrc.php/v4/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -30px transparent}.fb_dialog_iframe{line-height:0}.fb_dialog_content .dialog_title{background:#6d84b4;border:1px solid #365899;color:#fff;font-size:14px;font-weight:bold;margin:0}.fb_dialog_content .dialog_title>span{background:url(https://connect.facebook.net/rsrc.php/v4/yd/r/Cou7n-nqK52.gif) no-repeat 5px 50%;float:left;padding:5px 0 7px 26px}body.fb_hidden{height:100%;left:0px;margin:0px;overflow:visible;position:absolute;top:-10000px;transform:none;width:100%}.fb_dialog.fb_dialog_mobile.loading{background:url(https://connect.facebook.net/rsrc.php/v4/ya/r/3rhSv5V8j3o.gif) white no-repeat 50% 50%;min-height:100%;min-width:100%;overflow:hidden;position:absolute;top:0;z-index:10001}.fb_dialog.fb_dialog_mobile.loading.centered{background:none;height:auto;min-height:initial;min-width:initial;width:auto}.fb_dialog.fb_dialog_mobile.loading.centered #fb_dialog_loader_spinner{width:100%}.fb_dialog.fb_dialog_mobile.loading.centered .fb_dialog_content{background:none}.loading.centered #fb_dialog_loader_close{clear:both;color:#fff;display:block;font-size:18px;padding-top:20px}#fb-root #fb_dialog_ipad_overlay{background:rgba(0, 0, 0, .4);bottom:0;left:0;min-height:100%;position:absolute;right:0;top:0;width:100%;z-index:10000}#fb-root #fb_dialog_ipad_overlay.hidden{display:none}.fb_dialog.fb_dialog_mobile.loading iframe{visibility:hidden}.fb_dialog_mobile .fb_dialog_iframe{position:sticky;top:0}.fb_dialog_content .dialog_header{background:linear-gradient(from(#738aba), to(#2c4987));border-bottom:1px solid;border-color:#043b87;box-shadow:white 0px 1px 1px -1px inset;color:#fff;font:bold 14px Helvetica, sans-serif;text-overflow:ellipsis;text-shadow:rgba(0, 30, 84, .296875) 0px -1px 0px;vertical-align:middle;white-space:nowrap}.fb_dialog_content .dialog_header table{height:43px;width:100%}.fb_dialog_content .dialog_header td.header_left{font-size:12px;padding-left:5px;vertical-align:middle;width:60px}.fb_dialog_content .dialog_header td.header_right{font-size:12px;padding-right:5px;vertical-align:middle;width:60px}.fb_dialog_content .touchable_button{background:linear-gradient(from(#4267B2), to(#2a4887));background-clip:padding-box;border:1px solid #29487d;border-radius:3px;display:inline-block;line-height:18px;margin-top:3px;max-width:85px;padding:4px 12px;position:relative}.fb_dialog_content .dialog_header .touchable_button input{background:none;border:none;color:#fff;font:bold 12px Helvetica, sans-serif;margin:2px -12px;padding:2px 6px 3px 6px;text-shadow:rgba(0, 30, 84, .296875) 0px -1px 0px}.fb_dialog_content .dialog_header .header_center{color:#fff;font-size:16px;font-weight:bold;line-height:18px;text-align:center;vertical-align:middle}.fb_dialog_content .dialog_content{background:url(https://connect.facebook.net/rsrc.php/v4/y9/r/jKEcVPZFk-2.gif) no-repeat 50% 50%;border:1px solid #4a4a4a;border-bottom:0;border-top:0;height:150px}.fb_dialog_content .dialog_footer{background:#f5f6f7;border:1px solid #4a4a4a;border-top-color:#ccc;height:40px}#fb_dialog_loader_close{float:left}.fb_dialog.fb_dialog_mobile .fb_dialog_close_icon{visibility:hidden}#fb_dialog_loader_spinner{animation:rotateSpinner 1.2s linear infinite;background-color:transparent;background-image:url(https://connect.facebook.net/rsrc.php/v4/yD/r/t-wz8gw1xG1.png);background-position:50% 50%;background-repeat:no-repeat;height:24px;width:24px}@keyframes rotateSpinner{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}
.fb_iframe_widget{display:inline-block;position:relative}.fb_iframe_widget span{display:inline-block;position:relative;text-align:justify}.fb_iframe_widget iframe{position:absolute}.fb_iframe_widget_fluid_desktop,.fb_iframe_widget_fluid_desktop span,.fb_iframe_widget_fluid_desktop iframe{max-width:100%}.fb_iframe_widget_fluid_desktop iframe{min-width:220px;position:relative}.fb_iframe_widget_lift{z-index:1}.fb_iframe_widget_fluid{display:inline}.fb_iframe_widget_fluid span{width:100%}</style><style>.\[\&_\.gdprAdTransparencyCogWheelButton\]\:\!pjra-z-\[5\],
AD-SLOT,
DFP-AD,
[class^="adDisplay-module"],
[class^="amp-ad-"],
[data-ad-cls],
[data-adbridg-ad-class],
[data-adshim],
[data-block-type="ad"],
[data-css-class="dfp-inarticle"],
[data-d-ad-id],
[data-desktop-ad-id],
[data-dynamic-ads],
[data-ez-name],
[data-freestar-ad][id],
[data-id^="div-gpt-ad"],
[data-identity="adhesive-ad"],
[data-m-ad-id],
[data-mobile-ad-id],
[data-name="adaptiveConstructorAd"],
[data-rc-widget="data-rc-widget"],
[data-rc-widget],
[data-role="tile-ads-module"],
[data-template-type="nativead"],
[data-testid="adBanner-wrapper"],
[data-testid="ad_testID"],
[data-testid="prism-ad-wrapper"],
[data-type="ad-vertical"],
[data-wpas-zoneid],
[id^="ad-wrap-"],
[id^="ad_sky"],
[id^="ad_slider"],
[id^="section-ad-banner"],
[onclick^="location.href='https://1337x.vpnonly.site/"],
a-ad,
a[data-href^="http://ads.trafficjunky.net/"],
a[data-url^="https://vulpix.bet/?ref="],
a[style="width:100%;height:100%;z-index:10000000000000000;position:absolute;top:0;left:0;"],
ad-shield-ads,
ad-slot,
app-ad,
app-advertisement,
app-large-ad,
ark-top-ad,
aside[id^="adrotate_widgets-"],
atf-ad-slot,
bottomadblock,
display-ads,
div[class^="Adstyled__AdWrapper-"],
div[class^="Display_displayAd"],
div[class^="kiwi-ad-wrapper"],
div[class^="native-ad-"],
div[data-ad-placeholder],
div[data-ad-wrapper],
div[data-adname],
div[data-adunit-path],
div[data-adunit],
div[data-adzone],
div[data-alias="300x250 Ad 1"],
div[data-alias="300x250 Ad 2"],
div[data-contentexchange-widget],
div[data-dfp-id],
div[data-id-advertdfpconf],
div[id^="ad-div-"],
div[id^="ad-position-"],
div[id^="adngin-"],
div[id^="adrotate_widgets-"],
div[id^="adspot-"],
div[id^="crt-"][style],
div[id^="div-ads-"],
div[id^="google_dfp_"],
div[id^="gpt_ad_"],
div[id^="lazyad-"],
div[id^="optidigital-adslot"],
div[id^="pa_sticky_ad_box_middle_"],
div[id^="rc-widget-"],
div[id^="st"][style^="z-index: 999999999;"],
div[id^="sticky_ad_"],
div[id^="vuukle-ad-"],
gpt-ad,
guj-ad,
hl-adsense,
img[src^="https://images.purevpnaffiliates.com"],
ps-connatix-module,
span[data-ez-ph-id],
span[id^="ezoic-pub-ad-placeholder-"],
topadblock,
zeus-ad,
[class^="tile-picker__CitrusBannerContainer-sc-"],
citrus-ad-wrapper,
[class^="s2nPlayer"],
[data-taboola-options],
div[id*="MarketGid"],
[onclick*="content.ad/"],
AMP-AD,
amp-ad,
amp-ad-custom,
amp-connatix-player,
amp-fx-flying-carpet,
a[data-oburl^="https://paid.outbrain.com/network/redir?"],
a[data-redirect^="https://paid.outbrain.com/network/redir?"],
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"][target="_blank"] + .ob_source,
div[id^="taboola-stream-"],
div[id^="zergnet-widget"],
html[lang] > body.ishome > div.adult + main.main,
html[lang] > body.startnew > div#sections > section#section_uname,
html[lang] > body:not([style]) > div.captchaBody,
html[lang] > body#body > * > div.cv-xwrapper > div.cvc > div.cv-inner,
html[lang] > body#body > * > div.cvh.BlockClicksActivityBusy,
html#html[sti][vic][lang] > body#allbody,
html > body.hold-transition.theme-primary.bg-img[style^="background-image"][style*="wallpaperaccess.com"][style*="background-repeat"][style*="background-size"],
html > body > div.container > form#unsubscribe-form[onsubmit="submitUnsubscribeForm(event)"],
html > body > div.content > dl > dd.dd1 > div.min_sider > form#form1[action="unsubscribe.php"],
html > body.body > div.container > div.content > form > table.optoutForm,
[src^="https://forum.picbaron.com/Banner"],
div[id][style^="position: fixed; inset: 0px; z-index: 2147483647; background: black"][style*="opacity: 0.01"],
div[class$="player-promo-col"],
div#spot-holder.spot-holder[style="display: block;"],
a[dontfo=""][style$="position: absolute; z-index: 2147483647;"],
[data-ad-module]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-width]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-adblockkey]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(html):not(.adsbygoogle),
[data-advadstrackid]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-manager-id]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
div[style^="z-index: 999999; background-image: url(\"data:image/gif;base64,"][style$="position: absolute;"],
a[onclick="openAuc();"],
div[style="position: fixed; display: block; width: 100%; height: 100%; inset: 0px; background-color: rgba(0, 0, 0, 0); z-index: 300000;"],
body > div[style$="z-index: 2147483647; top: 0px; left: 0px; position: fixed; display: block;"],
div[style^="position:fixed;inset:0px;z-index:2147483647;background:black;opacity:0.01"],
div[style^="position: fixed; inset: 0px; z-index: 2147483647; background: black; opacity: 0.01"],
a[id][href="https://chpadblock.com/"][rel^="noopener noreferrer"],
a[id][href="https://hamrocsit.com"][rel^="noopener noreferrer"],
a[id][href="https://toolkitspro.com"][rel^="noopener noreferrer"],
iframe.lazyloaded[data-src^="https://rcm-fe.amazon-adsystem.com/"],
div[style="top: 0px; left: 0px; width: 1287px; height: 500px; position: fixed; z-index: 2147483647;"],
div[style="position: fixed; inset: 0px; z-index: 2147483647; pointer-events: auto;"],
#player div[style$="cursor: pointer; position: absolute; width: 100%; height: 100%; padding: 1rem; z-index: 2147483647;"],
html[lang][style^="--main-bg-color"] > body:not([class]):not([id]) > div#container[style="visibility: visible;"] > div#banner[style="opacity:0"] ~ main:not([class]):not([id]) > div#message,
[data-uri^="https://s3.amazonaws.com"],
[data-lnguri^="https://s3.amazonaws.com"],
[onclick*="postlnk.com"],
[data-lnguri*="vipbox"],
[class^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]),
div[id^="div-gpt-"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]):not([style="pointer-events: none; height: 1px; width: 0px; opacity: 0; visibility: hidden; position: fixed; bottom: 0px;"]),
[id^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]):not([style="pointer-events: none; height: 1px; width: 0px; opacity: 0; visibility: hidden; position: fixed; bottom: 0px;"]),
[src^="//dombnrs.com/"] { display: none !important; }

[data-ad-name],
[data-revive-zoneid],
[name^="google_ads_iframe"],
display-ad-component,
div[aria-label="Ads"],
div[data-ad-targeting],
div[id^="ad_position_"],
div[id^="dfp-ad-"],
div[id^="ezoic-pub-ad-"],
div[id^="yandex_ad"],
ins.adsbygoogle[data-ad-client],
ins.adsbygoogle[data-ad-slot],
div[id*="ScriptRoot"],
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"][target="_blank"],
amp-embed[type="taboola"] { display: none !important; }</style><style>[href="https://t.me/Russia_Vs_Ukraine_War3"],
[href*="uselnk.com/"],
[href*="postlnk.com"],
[href*="passtechusa.com"] { display: none !important; }</style></head>
<body>
<div id="app" class="pb-5">
        <header>
    <nav class="navbar navbar-fixed-top navbar-light bg-light px-0">
        <div class="row d-flex flex-row justify-content-center m-0 mx-auto col-12">
            <a class="col-8 col-md-3 navbar-brand text-center" href="https://zonatmo.com">
                TU<b>MANGA</b><i>ONLINE</i>
            </a>
            <div class="d-inline px-1">
                <a class="nav-link" href="#" id="toggleLightDarkBtn" data-theme="light" title="Modo nocturno"><i class="fas fa-eye fa-fw"></i><span id="toggleLightDarkIcon"><i class="fas fa-toggle-off fa-fw"></i></span></a>
            </div>
            <div class="d-inline px-1">
                <a class="nav-link" href="https://zonatmo.com/library/manga/78082/otokogirainabijinshimaiwonamaemotsugezunitasuketaraittaidounaru" title="Volver"><i class="far fa-arrow-alt-circle-left fa-fw"></i> <span class="d-none d-md-inline">Volver</span></a>
            </div>
            <div class="d-inline px-1">
                <a class="nav-link" href="https://zonatmo.com/viewer/1a75a74709e4aeab2791ca782d32d51c/cascade" title="Cascada"><i class="far fa-copy fa-fw"></i> <span class="d-none d-md-inline">Cascada</span></a>
            </div>
            <div class="d-inline px-1">
                <a class="nav-link" href="#" id="fullWidthBtn" title="Ancho"><i class="fas fa-fw fa-expand"></i> <span class="d-none d-md-inline">Ancho</span></a>
                <a class="nav-link" href="#" style="display: none;" id="adaptedBtn" title="Ajustado"><i class="fas fa-fw fa-compress"></i> <span class="d-none d-md-inline">Ajustado</span></a>
            </div>
            <div class="d-inline px-1">
                <a class="nav-link" href="#" id="fullScreenBtn" title="Completa"><i class="direction-btn fas fa-fw fa-expand-arrows-alt"></i> <span class="d-none d-md-inline">Completa</span></a>
            </div>
        </div>
    </nav>
</header>    <section class="container-fluid text-center bg-manga">
    <div class="row align-items-center">
        <div class="col-12">
            <h1>¿Qué pasaría si decido ayudar a dos hermanas que odian a los hombres?</h1>
            <h2> Capítulo 3.00  Subido por
                                    <a href="https://zonatmo.com/groups/157299/el-culto-de-la-neko">El culto de la Neko</a>
                            </h2>
            <h4 class="no-margin">
                                    <i class="fa fa-arrow-left fa-animated-right"></i>&nbsp;<i class="fa fa-arrow-left fa-animated-right"></i>&nbsp;&nbsp;<b>MANGA</b>. Sentido de lectura: De derecha a izquierda&nbsp;&nbsp;<i class="fa fa-arrow-left fa-animated-right"></i>&nbsp;<i class="fa fa-arrow-left fa-animated-right"></i>
                            </h4>
        </div>
    </div>
</section>        
            <div class="pbk my-2 pbk_t text-center col-12 col-md-8 offset-md-2">
        <div class="row">
            <div class="col-12 col-md-8 offset-md-2" style="max-width: 600px">
                
            </div>
        </div>
        <div class="row">
            <div class="col-12 text-center my-2">
                
                <div><script data-cfasync="false" async="" type="text/javascript" src="//pl.caecadissoul.com/tyA3fSO7xKDM/46809"></script></div>
            </div>
        </div>
    </div>
    <div class="container">
    <div class="row text-center">
        <div class="col-12 col-sm-6 offset-sm-3 col-md-4 offset-md-4 text-center d-flex">
            <button onclick="goPrevPage()" class="btn btn-default"><i class="fa fa-caret-left fa-2x fa-fw" title="&amp;laquo; Anterior"></i></button>
            <select class="form-control form-control-lg form-control-lg viewer-pages-select" style="text-align-last: center;-moz-text-align-last:center; " id="viewer-pages-select" onchange="goToPage(this)">
                                    <option value="1" selected="selected">1</option>
                                    <option value="2">2</option>
                                    <option value="3">3</option>
                                    <option value="4">4</option>
                                    <option value="5">5</option>
                                    <option value="6">6</option>
                                    <option value="7">7</option>
                                    <option value="8">8</option>
                                    <option value="9">9</option>
                                    <option value="10">10</option>
                                    <option value="11">11</option>
                                    <option value="12">12</option>
                                    <option value="13">13</option>
                                    <option value="14">14</option>
                                    <option value="15">15</option>
                                    <option value="16">16</option>
                                    <option value="17">17</option>
                                    <option value="18">18</option>
                                    <option value="19">19</option>
                                    <option value="20">20</option>
                                    <option value="21">21</option>
                                    <option value="22">22</option>
                                    <option value="23">23</option>
                                    <option value="24">24</option>
                                    <option value="25">25</option>
                            </select>
            <button onclick="goNextPage()" class="btn btn-default"><i class="fa fa-caret-right fa-2x fa-fw" title="Siguiente &amp;raquo;"></i></button>
        </div>
    </div>
</div>

    <div id="viewer-container" class="viewer-container container">
        <div class="viewer-image-container text-center">
                                                        <img src="https://imgtmo.com/uploads/20230830/1a75a74709e4aeab2791ca782d32d51c/c1c092f5.webp" id="viewer_image" data-src="https://imgtmo.com/uploads/20230830/1a75a74709e4aeab2791ca782d32d51c/c1c092f5.webp" class="viewer-image loaded" oncontextmenu="return false;" data-was-processed="true" style="padding: 0px;">
                    </div>
    </div>
    <div class="container">
    <div class="row text-center">
        <div class="col-12 col-sm-6 offset-sm-3 col-md-4 offset-md-4 text-center d-flex">
            <button onclick="goPrevPage()" class="btn btn-default"><i class="fa fa-caret-left fa-2x fa-fw" title="&amp;laquo; Anterior"></i></button>
            <select class="form-control form-control-lg form-control-lg viewer-pages-select" style="text-align-last: center;-moz-text-align-last:center; " id="viewer-pages-select" onchange="goToPage(this)">
                                    <option value="1" selected="selected">1</option>
                                    <option value="2">2</option>
                                    <option value="3">3</option>
                                    <option value="4">4</option>
                                    <option value="5">5</option>
                                    <option value="6">6</option>
                                    <option value="7">7</option>
                                    <option value="8">8</option>
                                    <option value="9">9</option>
                                    <option value="10">10</option>
                                    <option value="11">11</option>
                                    <option value="12">12</option>
                                    <option value="13">13</option>
                                    <option value="14">14</option>
                                    <option value="15">15</option>
                                    <option value="16">16</option>
                                    <option value="17">17</option>
                                    <option value="18">18</option>
                                    <option value="19">19</option>
                                    <option value="20">20</option>
                                    <option value="21">21</option>
                                    <option value="22">22</option>
                                    <option value="23">23</option>
                                    <option value="24">24</option>
                                    <option value="25">25</option>
                            </select>
            <button onclick="goNextPage()" class="btn btn-default"><i class="fa fa-caret-right fa-2x fa-fw" title="Siguiente &amp;raquo;"></i></button>
        </div>
    </div>
</div>
    
        <div class="pbk my-2 pbk_m1 text-center col-12 col-md-8 offset-md-2">
        
        <div class="row">
            <div class="col-12 text-center my-2">
                <div id="ts_ad_native_crle9"></div>
                <script src="//cdn.runative-syndicate.com/sdk/v1/n.js"></script>
                <script>
                    NativeAd({
                        element_id: "ts_ad_native_crle9",
                        spot: "8d58fd6d889c4ae094b842ae1de2ce1a",
                        type: "label-under",
                        cols: 4,
                        rows: 1,
                        title: "Suggested for you",
                        titlePosition: "left",
                        adsByPosition: "right",
                        breakpoints: [
                            {
                                "cols": 2,
                                "width": 770
                            }
                        ],
                    });
                </script>
            </div>
        </div>
    </div>
    <section class="container-fluid text-center bg-manga">
    <div class="d-flex flex-row row align-items-center">
        <div class="col-6 col-sm-2 order-1 order-sm-1 chapter-arrow chapter-prev">
                            <a href="https://zonatmo.com/view_uploads/1310546">
                    <i class="fas fa-backward fa-2x"></i> <small class="d-block">Cap. Anterior</small>
                </a>
                    </div>
        <div class="order-3 order-sm-2 col-12 col-sm-8">
            <a class="social-share btn btn-xs btn-social btn-facebook" href="https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fzonatmo.com%2Fviewer%2F1a75a74709e4aeab2791ca782d32d51c%2Fpaginated" target="_blank">
                <i class="fab fa-facebook-f fa-fw"></i> Compartir
            </a>
            <a class="social-share btn btn-xs btn-social btn-twitter" href="https://twitter.com/intent/tweet?url=https%3A%2F%2Fzonatmo.com%2Fviewer%2F1a75a74709e4aeab2791ca782d32d51c%2Fpaginated&amp;title=¿Qué pasaría si decido ayudar a dos hermanas que odian a los hombres?" target="_blank">
                <i class="fab fa-twitter fa-fw"></i> Compartir
            </a>
            <a class="social-share btn btn-xs btn-social btn-vkontakte" href="http://vk.com/share.php?url=https%3A%2F%2Fzonatmo.com%2Fviewer%2F1a75a74709e4aeab2791ca782d32d51c%2Fpaginated&amp;title=¿Qué pasaría si decido ayudar a dos hermanas que odian a los hombres?" target="_blank">
                <i class="fab fa-vk fa-fw"></i> Compartir
            </a>
            <a class="social-share btn btn-xs btn-social btn-telegram" href="https://t.me/share/url?url=https%3A%2F%2Fzonatmo.com%2Fviewer%2F1a75a74709e4aeab2791ca782d32d51c%2Fpaginated&amp;text=¿Qué pasaría si decido ayudar a dos hermanas que odian a los hombres?" target="_blank">
                <i class="fab fa-telegram-plane fa-fw"></i> Compartir
            </a>
            <a class="social-share btn btn-xs btn-social btn-whatsapp" href="https://api.whatsapp.com/send?text=https%3A%2F%2Fzonatmo.com%2Fviewer%2F1a75a74709e4aeab2791ca782d32d51c%2Fpaginated" target="_blank">
                <i class="fab fa-whatsapp fa-fw"></i> Compartir
            </a>
            <button class="btn btn-xs btn-social btn-primary" onclick="copyToClipboard('https://zonatmo.com/viewer/1a75a74709e4aeab2791ca782d32d51c/paginated');return false;">
                <i class="fas fa-link fa-fw"></i> Compartir
            </button>
            <script>
                const copyToClipboard = str => {
                    const el = document.createElement('textarea');  // Create a <textarea> element
                    el.value = str;                                 // Set its value to the string that you want copied
                    el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof
                    el.style.position = 'absolute';
                    el.style.left = '-9999px';                      // Move outside the screen to make it invisible
                    document.body.appendChild(el);                  // Append the <textarea> element to the HTML document
                    const selected =
                        document.getSelection().rangeCount > 0        // Check if there is any content selected previously
                            ? document.getSelection().getRangeAt(0)     // Store selection if found
                            : false;                                    // Mark as false to know no selection existed before
                    el.select();                                    // Select the <textarea> content
                    document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)
                    document.body.removeChild(el);                  // Remove the <textarea> element
                    if (selected) {                                 // If a selection existed before copying
                        document.getSelection().removeAllRanges();    // Unselect everything on the HTML document
                        document.getSelection().addRange(selected);   // Restore the original selection
                    }
                    alert('Enlace copiado en el portapapeles');
                };
            </script>
        </div>
        <div class="col-6 col-sm-2 order-2 order-sm-3 chapter-arrow chapter-next">
                            <a href="https://zonatmo.com/view_uploads/1325602">
                    <i class="fas fa-forward fa-2x"></i> <small class="d-block">Cap. Siguiente</small>
                </a>
                    </div>
    </div>
</section>
    <section>
    <nav class="navbar navbar-fixed-top navbar-light bg-light px-0">
        <div class="row d-flex flex-row justify-content-center m-0 mx-auto col-12">
            <div class="d-inline px-2">
                <a class="nav-link" href="https://zonatmo.com" title="Inicio"><i class="fas fa-home fa-fw"></i> <span class="d-none d-md-inline">Inicio</span></a>
            </div>
            <div class="d-inline px-2">
                <a class="nav-link" href="https://zonatmo.com/library/manga/78082/otokogirainabijinshimaiwonamaemotsugezunitasuketaraittaidounaru" title="Volver"><i class="far fa-arrow-alt-circle-left fa-fw"></i> <span class="d-none d-md-inline">Volver</span></a>
            </div>
                                </div>
    </nav>
</section>    <div class="row p-0 m-0">
    <div class="disqus col-12 col-lg-8 col-xl-9">
        
            <div class="pbk my-2 pbk_m2 text-center">
        <div class="row" style="max-width: 600px">
            
        </div>
    </div>
        <div class="container">
            <div id="disqus_thread">
                <button class="btn btn-block btn-primary btn-lg" onclick="loadDisqus();return false;">Cargar comentarios</button>
            </div>
        </div>
        
            <div class="pbk my-2 pbk_b text-center">
        <div id="movie_video"></div><script type="text/javascript" src="https://21wiz.com/s.js?v=20cc3ff22a8255c27c236222507dbc11" async=""></script>
    </div>
    </div>
    <div class="col-12 col-lg-4 col-xl-3">
        <div class="sticky-top">
            
                <div class="pbk my-2 pbk_l_top text-center">
        
        <script type="text/javascript" src="//cdn.runative-syndicate.com/sdk/v1/bi.js" data-ts-spot="75d40a0a93f449b6a361c6358a88e029" data-ts-width="300" data-ts-height="250" async="" defer=""></script>
    </div>
            
                <div class="pbk my-2 pbk_l_mid text-center">
        <br>
    </div>
            
                <div class="pbk my-2 pbk_l_bottom text-center">

    </div>
        </div>
    </div>
</div>    <div class="col-xs-12 text-center">
    <h5>¿Hay algo que quieras hacernos saber sobre este elemento?</h5>
    <a class="text-danger" href="#" data-toggle="modal" data-target="#reportModal"><i class="fas fa-exclamation-circle"></i> Reportar</a>
</div>

<div class="modal fade" id="reportModal" tabindex="-1" role="dialog" aria-labelledby="reportModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="reportModalLabel">Reportar elemento</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">×</span></button>
            </div>
            <form method="POST" action="https://zonatmo.com/reports/1310548/upload" accept-charset="UTF-8" class="form-horizontal-edit" id="form-report"><input name="_method" type="hidden" value="PUT"><input name="_token" type="hidden" value="fk20X4ragMx8REEBey8gokyrCRrTRoHExQKXotdg">
                            <input name="host" type="hidden" value="F41 | zonatmo.com">
                        <div class="modal-body">
                <div class="form-group row">
                    <label for="type" class="control-label col-xs-12 col-sm-3">Tipo</label>
                    <div class="col-xs-12 col-sm-9">
                        <select class="form-control" required="required" id="type" name="type"><option value="incorrect_chapter" selected="selected">Capítulo incorrecto</option><option value="incorrect_book">No corresponde a esta obra</option><option value="broken_images">Las imagenes están caídas</option><option value="incorrect_language">Idioma incorrecto</option><option value="other">Otro</option></select>
                    </div>
                </div>
                <div class="form-group row">
                    <label for="description" class="control-label col-xs-12 col-sm-3">Descripción</label>
                    <div class="col-xs-12 col-sm-9">
                        <textarea class="form-control" minlength="15" maxlength="500" placeholder="Introduzca una breve descripción sobre el motivo" style="height:150px;" required="required" name="description" cols="50" rows="10" id="description"></textarea>
                    </div>
                </div>
            </div>
            <div class="modal-footer justify-content-between">
                <button type="button" class="btn btn-danger" data-dismiss="modal"><i class="fas fa-times"></i> Cancelar</button>
                <button type="submit" class="btn btn-success"><i class="fas fa-save"></i> Guardar</button>
            </div>
            </form>
        </div>
    </div>
</div>
    <div class="col-xs-12 text-center">
    <p>Tumangaonline o lectormanga no cede ni comparte de forma voluntaria los proyectos aquí publicados. Si usted considera que el contenido de tumangaonline o lectormanga está siendo copiado o distribuido en otras webs o aplicaciones, le recomendamos que deje de visitar esas webs que copian el contenido y perjudican a los grupos que realizan las traducciones. El contenido aquí expuesto se proporciona de forma pública únicamente por parte de los grupos de traducción para uso personal y no se cede, vende o permite la copia o el uso de este contenido ninguna webs o aplicación de terceros</p>
</div></div>
<!-- Scripts -->
<script type="text/javascript" src="/js/app.js?id=1e6e0cc28845d2d47776?v=1.0.30"></script><iframe name="__tcfapiLocator" style="display: none;"></iframe><iframe name="__gppLocator" style="display: none;"></iframe>
<style>
            .grecaptcha-badge {
                visibility: hidden;
            }
        </style>
        <script>
        if (!document.getElementById('gReCaptchaScript')) {
            let reCaptchaScript = document.createElement('script');
            reCaptchaScript.setAttribute('src', 'https://www.google.com/recaptcha/api.js?render=6Le223cUAAAAAH6ZdiltvWrWiEUSfx5BwRfrQGU-&hl=es');
            reCaptchaScript.async = true;
            reCaptchaScript.defer = true;
            document.head.appendChild(reCaptchaScript);
        }
    </script>



<script>
    function refreshReCaptchaV3(fieldId,action){
        return new Promise(function (resolve, reject) {
            grecaptcha.ready(function () {
                grecaptcha.execute(window['client'+fieldId], {
                    action: action
                }).then(resolve);
            });
        });
    }

    function getReCaptchaV3Response(fieldId){
        return grecaptcha.getResponse(window['client'+fieldId])
    }
</script>


<!--[if lte IE 8]>
<script type="text/javascript" src="/js/jquery-1.12.4.min.js"></script>
<script type="text/javascript" src="/js/bootstrap-ie8.js"></script>
<![endif]-->
<script>
    window.fbAsyncInit = function () {
        FB.init({
            appId: '214430138908782',
            cookie: true,
            xfbml: true,
            version: 'v3.0'
        });

        FB.AppEvents.logPageView();

    };

    (function (d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) {
            return;
        }
        js = d.createElement(s);
        js.id = id;
        js.src = "https://connect.facebook.net/en_US/sdk.js";
        fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));
</script>
    <script src="https://cdn.jsdelivr.net/npm/vanilla-lazyload@13.0.1/dist/lazyload.min.js"></script>
    <script type="text/javascript">
        var ll;
        var imageElement = document.getElementById('viewer_image');
        var current_page = parseInt(1);
        var disqus_shortname = "tumangaonline";
        var disqus_config = function () {
                            this.page.identifier = "TMOUpload_1a75a74709e4aeab2791ca782d32d51c";
                    };
        var is_disqus_loaded = false;
        var fullScreenMode = false;
        var dirPath = 'https://imgtmo.com/uploads/20230830/1a75a74709e4aeab2791ca782d32d51c/';
        var images = JSON.parse('["c1c092f5.webp","d92b58d1.webp","01001d29.webp","01d9d1f7.webp","9a4f801a.webp","f4e3da00.webp","e4b90908.webp","43de9a9e.webp","d8895286.webp","8926e0e7.webp","a404f826.webp","630be6ad.webp","0567c3ff.webp","488c6901.webp","561d9aa8.webp","04d2cd67.webp","60e44251.webp","f341ea9c.webp","d51395e9.webp","51d25a49.webp","19dffa43.webp","ec93b06e.webp","cf8395f3.webp","b113f61c.webp","b904e7f6.webp"]');
        (function() {
            function logElementEvent(eventName, element) {
                console.log("Error cargando imagen:", eventName);
            }
            var callback_loaded = function(element) {
                element.style.padding = "0";
            };
            var callback_error = function(element) {
                logElementEvent("💀 ERROR", element);
                element.src = "https://via.placeholder.com/440x560/?text=Error+Placeholder";
            };

            ll = new LazyLoad({
                elements_selector: ".viewer-image",
                thresholds:"600%",
                callback_loaded: callback_loaded,
                callback_error: callback_error,
            });
        })();

        function launchIntoFullscreen(element) {
            if(element.requestFullscreen) {
                element.requestFullscreen();
            } else if(element.mozRequestFullScreen) {
                element.mozRequestFullScreen();
            } else if(element.webkitRequestFullscreen) {
                element.webkitRequestFullscreen();
            } else if(element.msRequestFullscreen) {
                element.msRequestFullscreen();
            }
        }

        function exitFullscreen() {
            if(document.exitFullscreen) {
                document.exitFullscreen();
            } else if(document.mozCancelFullScreen) {
                document.mozCancelFullScreen();
            } else if(document.webkitExitFullscreen) {
                document.webkitExitFullscreen();
            }
        }
        function goNextPage(){
            if(images.length>current_page){
                current_page++;
                imageElement.setAttribute('src','/images/defaults/loading.gif');
                imageElement.setAttribute('data-src',dirPath+images[current_page-1]);
                imageElement.setAttribute('data-was-processed',false);
                var pageSelectors = document.getElementsByClassName('viewer-pages-select');
                Array.prototype.forEach.call(pageSelectors, function(pageSelector) {
                    pageSelector.selectedIndex = current_page-1;
                });
                ll.update();
            }
        }
        function goPrevPage(){
            if(current_page>1){
                current_page--;
                imageElement.setAttribute('src','/images/defaults/loading.gif');
                imageElement.setAttribute('data-src',dirPath+images[current_page-1]);
                imageElement.setAttribute('data-was-processed',false);
                var pageSelectors = document.getElementsByClassName('viewer-pages-select');
                Array.prototype.forEach.call(pageSelectors, function(pageSelector) {
                    pageSelector.selectedIndex = current_page-1;
                });
                ll.update();
            }
        }
        function goToPage(object){
            var selected = object.options[object.selectedIndex].value;
            current_page = selected;
            imageElement.setAttribute('src','/images/defaults/loading.gif')
            imageElement.setAttribute('data-src',dirPath+images[current_page-1]);
            imageElement.setAttribute('data-was-processed',false);
            var pageSelectors = document.getElementsByClassName('viewer-pages-select');
            Array.prototype.forEach.call(pageSelectors, function(pageSelector) {
                pageSelector.selectedIndex = current_page-1;
            });
            ll.update();
        }

        function keyPressed(e) {
            var keyCode = 0;
            if (navigator.appName === "Microsoft Internet Explorer") {
                if (!e) {
                    var e = window.event;
                }
                if (e.keyCode) {
                    keyCode = e.keyCode;
                    if ((keyCode === 37) || (keyCode === 39)) {
                        window.event.keyCode = 0;
                    }
                } else {
                    keyCode = e.which;
                }
            } else {
                if (e.which) {
                    keyCode = e.which;
                } else {
                    keyCode = e.keyCode;
                }
            }
            switch (keyCode) {
                case 37:
                    goPrevPage();
                    return false;
                case 39:
                    goNextPage();
                    return false;
                default:
                    return true;
            }
        }

        function loadDisqus() {
            if (!is_disqus_loaded){
                is_disqus_loaded = true;
                var d = document, s = d.createElement('script');
                s.src = '//' + disqus_shortname +'.disqus.com/embed.js';
                s.setAttribute('data-timestamp', +new Date());
                (d.head || d.body).appendChild(s);
            }

        }
        $("#fullWidthBtn").on( "click", function(e){
            localStorage.setItem('viewer-full-width','full_width');
            if($('#viewer-container').hasClass('container')){
                element = $('#viewer-container');
                element.removeClass('container').addClass('container-fluid p-0 m-0');
            }
            $( "#fullWidthBtn" ).hide();
            $( "#adaptedBtn" ).show();
        });

        $("#adaptedBtn").on( "click", function(e){
            localStorage.setItem('viewer-full-width','adapted');
            if($('#viewer-container').hasClass('container-fluid')){
                element = $('#viewer-container');
                element.removeClass('container-fluid p-0 m-0').addClass('container');
            }
            $( "#adaptedBtn" ).hide();
            $( "#fullWidthBtn" ).show();
        });
        $( "#fullScreenBtn" ).on( "click", function(e){
            if(!fullScreenMode) {
                launchIntoFullscreen(document.documentElement);
            }else{
                exitFullscreen();
            }
            fullScreenMode = !fullScreenMode;
        });
        document.onkeydown = keyPressed;
        if (localStorage.getItem('viewer-full-width')) {
            var viewer_width = localStorage.getItem('viewer-full-width');
            if(viewer_width==="full_width"){
                $( "#fullWidthBtn" ).trigger( "click" );
            }else{
                $( "#adaptedBtn" ).trigger( "click" );
            }
        }
        $( ".viewer-image" ).on( "click", function(e){
            goNextPage();
        });
    </script>
    <script type="application/ld+json">
        {
          "@context": "http://schema.org",
          "@type": "NewsArticle",
          "mainEntityOfPage": {
            "@type": "WebPage",
            "@id": "https://google.com/article"
          },
          "headline": "¿Qué pasaría si decido ayudar a dos hermanas que odian a los hombres?  - Capítulo 3.00  - El culto de la Neko",
          "image": [
            "https://otakuteca.com/images/books/cover/649a63246e01e.webp"
           ],
          "thumbnailUrl": "https://otakuteca.com/images/books/cover/649a63246e01e.webp",
          "datePublished": "2023-08-30 04:48:39",
          "dateModified": "2023-08-30 04:49:27",
          "author": {
            "@type": "Person",
            "name": "TuMangaOnline"
          },
           "publisher": {
           "@type": "Organization",
           "name": "ZonaTMO"
         },
          "description": "Aina y Arisa son dos hermanas gemelas bastante populares entre los alumnos del instituto, sin embargo, existen rumores de que ambas odian a los hombre, aunque existe una excepción…
Hay un joven que resalta entre el resto y es la excepción a esta regla, ya que fue él quien rescató a ambas hermanas junto a su madre de un fatídico destino.
Ahora, ambas hermanas quieren volcar todo su amor y deseo sobre él, mientras que una lo mima con sus grandes pechos, otra quiere ser su fiel sirvienta.
Así es da inicio la comedia-romántica/harem de estos protagonistas."
        }
    </script>
<script type="text/javascript">
    jQuery(document).ready(function ($) {
        $('.gauge-arrow').cmGauge();
        $('.extendSelect').extendSelect();
            });
    $.ajaxSetup({
        headers: {
            'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
        }
    });
</script>




<div id="fb-root" class=" fb_reset"><div style="position: absolute; top: -10000px; width: 0px; height: 0px;"><div></div></div></div><div><div class="grecaptcha-badge" data-style="bottomright" style="width: 256px; height: 60px; display: block; transition: right 0.3s; position: fixed; bottom: 14px; right: -186px; box-shadow: gray 0px 0px 5px; border-radius: 2px; overflow: hidden;"><div class="grecaptcha-logo"><iframe title="reCAPTCHA" width="256" height="60" role="presentation" name="a-24moewcaswti" frameborder="0" scrolling="no" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation" src="https://www.google.com/recaptcha/api2/anchor?ar=1&amp;k=6Le223cUAAAAAH6ZdiltvWrWiEUSfx5BwRfrQGU-&amp;co=aHR0cHM6Ly96b25hdG1vLmNvbTo0NDM.&amp;hl=es&amp;v=zIriijn3uj5Vpknvt_LnfNbF&amp;size=invisible&amp;cb=259xxcbgx9op"></iframe></div><div class="grecaptcha-error"></div><textarea id="g-recaptcha-response-100000" name="g-recaptcha-response" class="g-recaptcha-response" style="width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;"></textarea></div><iframe style="display: none;"></iframe></div></body></html>