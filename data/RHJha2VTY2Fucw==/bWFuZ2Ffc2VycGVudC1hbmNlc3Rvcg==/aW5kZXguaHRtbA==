<html lang="en-US">

<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta name="viewport" content="width=device-width">
  <meta name="theme-color" content="#3367d6">
  <meta name="msapplication-navbutton-color" content="#3367d6">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="#3367d6">
  <meta property="og:title" content="Drake Scans - High-Quality Manhua Translations">
  <meta property="og:description"
    content="Drake Scans delivers fast and high-quality manhua translations. Enjoy the latest chapters with accurate translations and quick updates.">
  <meta property="og:image" content="https://drakecomic.org/wp-content/uploads/2025/09/34234-small.png">
  <meta property="og:url" content="https://drakecomic.org/">
  <meta property="og:type" content="website">

  <!-- Twitter Card -->
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content="Drake Scans - High-Quality Manhua Translations">
  <meta name="twitter:description"
    content="Drake Scans delivers fast and high-quality manhua translations. Enjoy the latest chapters with accurate translations and quick updates.">
  <meta name="twitter:image" content="https://drakecomic.org/wp-content/uploads/2025/09/34234-small.png">

  <!-- SEO Meta Description -->
  <meta name="description"
    content="Drake Scans is your go-to site for high-quality and fast manhua translations. Stay updated with the latest chapters and enjoy accurate, clear translations.">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
  <meta name="robots" content="index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1">
  <style>
    img:is([sizes="auto" i], [sizes^="auto," i]) {
      contain-intrinsic-size: 3000px 1500px
    }
  </style>

  <!-- This site is optimized with the Yoast SEO plugin v25.9 - https://yoast.com/wordpress/plugins/seo/ -->
  <title>Serpent Ancestor - Drake Scans</title>
  <link rel="canonical" href="https://drakecomic.org/manga/serpent-ancestor/">
  <meta property="og:locale" content="en_US">
  <meta property="og:type" content="article">
  <meta property="og:title" content="Serpent Ancestor - Drake Scans">
  <meta property="og:description"
    content="In a village, an old snake inadvertently swallowed a cultivator’s human-shaped pill, gaining intelligence and setting off on the path of cultivation. With only a brief decade to live, the...">
  <meta property="og:url" content="https://drakecomic.org/manga/serpent-ancestor/">
  <meta property="og:site_name" content="Drake Scans">
  <meta property="article:modified_time" content="2025-10-04T09:28:37+00:00">
  <meta property="og:image" content="https://drakecomic.org/wp-content/uploads/2025/09/kRxWky.webp">
  <meta property="og:image:width" content="600">
  <meta property="og:image:height" content="900">
  <meta property="og:image:type" content="image/webp">
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:label1" content="Est. reading time">
  <meta name="twitter:data1" content="1 minute">
  <script type="application/ld+json"
    class="yoast-schema-graph">{"@context":"https://schema.org","@graph":[{"@type":"WebPage","@id":"https://drakecomic.org/manga/serpent-ancestor/","url":"https://drakecomic.org/manga/serpent-ancestor/","name":"Serpent Ancestor - Drake Scans","isPartOf":{"@id":"https://drakecomic.org/#website"},"primaryImageOfPage":{"@id":"https://drakecomic.org/manga/serpent-ancestor/#primaryimage"},"image":{"@id":"https://drakecomic.org/manga/serpent-ancestor/#primaryimage"},"thumbnailUrl":"https://drakecomic.org/wp-content/uploads/2025/09/kRxWky.webp","datePublished":"2025-09-09T10:55:10+00:00","dateModified":"2025-10-04T09:28:37+00:00","breadcrumb":{"@id":"https://drakecomic.org/manga/serpent-ancestor/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https://drakecomic.org/manga/serpent-ancestor/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https://drakecomic.org/manga/serpent-ancestor/#primaryimage","url":"https://drakecomic.org/wp-content/uploads/2025/09/kRxWky.webp","contentUrl":"https://drakecomic.org/wp-content/uploads/2025/09/kRxWky.webp","width":600,"height":900},{"@type":"BreadcrumbList","@id":"https://drakecomic.org/manga/serpent-ancestor/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https://drakecomic.org/"},{"@type":"ListItem","position":2,"name":"Manga","item":"https://drakecomic.org/manga/"},{"@type":"ListItem","position":3,"name":"Serpent Ancestor"}]},{"@type":"WebSite","@id":"https://drakecomic.org/#website","url":"https://drakecomic.org/","name":"Drake Scans","description":"Home","publisher":{"@id":"https://drakecomic.org/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https://drakecomic.org/?s={search_term_string}"},"query-input":{"@type":"PropertyValueSpecification","valueRequired":true,"valueName":"search_term_string"}}],"inLanguage":"en-US"},{"@type":"Organization","@id":"https://drakecomic.org/#organization","name":"Drake Scans","url":"https://drakecomic.org/","logo":{"@type":"ImageObject","inLanguage":"en-US","@id":"https://drakecomic.org/#/schema/logo/image/","url":"https://i3.wp.com/drakecomic.org/wp-content/uploads/2025/09/34234-small-1.png","contentUrl":"https://i3.wp.com/drakecomic.org/wp-content/uploads/2025/09/34234-small-1.png","width":626,"height":647,"caption":"Drake Scans"},"image":{"@id":"https://drakecomic.org/#/schema/logo/image/"}}]}</script>
  <!-- / Yoast SEO plugin. -->


  <link rel="alternate" type="application/rss+xml" title="Drake Scans » Serpent Ancestor Comments Feed"
    href="https://drakecomic.org/manga/serpent-ancestor/feed/">
  <script type="text/javascript">
    /* <![CDATA[ */
    window._wpemojiSettings = { "baseUrl": "https:\/\/s.w.org\/images\/core\/emoji\/16.0.1\/72x72\/", "ext": ".png", "svgUrl": "https:\/\/s.w.org\/images\/core\/emoji\/16.0.1\/svg\/", "svgExt": ".svg", "source": { "concatemoji": "https:\/\/drakecomic.org\/wp-includes\/js\/wp-emoji-release.min.js?ver=6.8.2" } };
    /*! This file is auto-generated */
    !function (s, n) { var o, i, e; function c(e) { try { var t = { supportTests: e, timestamp: (new Date).valueOf() }; sessionStorage.setItem(o, JSON.stringify(t)) } catch (e) { } } function p(e, t, n) { e.clearRect(0, 0, e.canvas.width, e.canvas.height), e.fillText(t, 0, 0); var t = new Uint32Array(e.getImageData(0, 0, e.canvas.width, e.canvas.height).data), a = (e.clearRect(0, 0, e.canvas.width, e.canvas.height), e.fillText(n, 0, 0), new Uint32Array(e.getImageData(0, 0, e.canvas.width, e.canvas.height).data)); return t.every(function (e, t) { return e === a[t] }) } function u(e, t) { e.clearRect(0, 0, e.canvas.width, e.canvas.height), e.fillText(t, 0, 0); for (var n = e.getImageData(16, 16, 1, 1), a = 0; a < n.data.length; a++)if (0 !== n.data[a]) return !1; return !0 } function f(e, t, n, a) { switch (t) { case "flag": return n(e, "\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f", "\ud83c\udff3\ufe0f\u200b\u26a7\ufe0f") ? !1 : !n(e, "\ud83c\udde8\ud83c\uddf6", "\ud83c\udde8\u200b\ud83c\uddf6") && !n(e, "\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f", "\ud83c\udff4\u200b\udb40\udc67\u200b\udb40\udc62\u200b\udb40\udc65\u200b\udb40\udc6e\u200b\udb40\udc67\u200b\udb40\udc7f"); case "emoji": return !a(e, "\ud83e\udedf") }return !1 } function g(e, t, n, a) { var r = "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? new OffscreenCanvas(300, 150) : s.createElement("canvas"), o = r.getContext("2d", { willReadFrequently: !0 }), i = (o.textBaseline = "top", o.font = "600 32px Arial", {}); return e.forEach(function (e) { i[e] = t(o, e, n, a) }), i } function t(e) { var t = s.createElement("script"); t.src = e, t.defer = !0, s.head.appendChild(t) } "undefined" != typeof Promise && (o = "wpEmojiSettingsSupports", i = ["flag", "emoji"], n.supports = { everything: !0, everythingExceptFlag: !0 }, e = new Promise(function (e) { s.addEventListener("DOMContentLoaded", e, { once: !0 }) }), new Promise(function (t) { var n = function () { try { var e = JSON.parse(sessionStorage.getItem(o)); if ("object" == typeof e && "number" == typeof e.timestamp && (new Date).valueOf() < e.timestamp + 604800 && "object" == typeof e.supportTests) return e.supportTests } catch (e) { } return null }(); if (!n) { if ("undefined" != typeof Worker && "undefined" != typeof OffscreenCanvas && "undefined" != typeof URL && URL.createObjectURL && "undefined" != typeof Blob) try { var e = "postMessage(" + g.toString() + "(" + [JSON.stringify(i), f.toString(), p.toString(), u.toString()].join(",") + "));", a = new Blob([e], { type: "text/javascript" }), r = new Worker(URL.createObjectURL(a), { name: "wpTestEmojiSupports" }); return void (r.onmessage = function (e) { c(n = e.data), r.terminate(), t(n) }) } catch (e) { } c(n = g(i, f, p, u)) } t(n) }).then(function (e) { for (var t in e) n.supports[t] = e[t], n.supports.everything = n.supports.everything && n.supports[t], "flag" !== t && (n.supports.everythingExceptFlag = n.supports.everythingExceptFlag && n.supports[t]); n.supports.everythingExceptFlag = n.supports.everythingExceptFlag && !n.supports.flag, n.DOMReady = !1, n.readyCallback = function () { n.DOMReady = !0 } }).then(function () { return e }).then(function () { var e; n.supports.everything || (n.readyCallback(), (e = n.source || {}).concatemoji ? t(e.concatemoji) : e.wpemoji && e.twemoji && (t(e.twemoji), t(e.wpemoji))) })) }((window, document), window._wpemojiSettings);
    /* ]]> */
  </script>
  <link rel="stylesheet" id="mycred-rank-shortcodes-css"
    href="https://drakecomic.org/wp-content/plugins/mycred/addons/rank-plus/assets/css/mycred-rank-shortcodes.css?ver=1.0.2"
    type="text/css" media="all">
  <link rel="stylesheet" id="dashicons-css" href="https://drakecomic.org/wp-includes/css/dashicons.min.css?ver=6.8.2"
    type="text/css" media="all">
  <link rel="stylesheet" id="menu-icons-extra-css"
    href="https://drakecomic.org/wp-content/plugins/menu-icons/css/extra.min.css?ver=0.13.19" type="text/css"
    media="all">
  <style id="wp-emoji-styles-inline-css" type="text/css">
    img.wp-smiley,
    img.emoji {
      display: inline !important;
      border: none !important;
      box-shadow: none !important;
      height: 1em !important;
      width: 1em !important;
      margin: 0 0.07em !important;
      vertical-align: -0.1em !important;
      background: none !important;
      padding: 0 !important;
    }
  </style>
  <style id="classic-theme-styles-inline-css" type="text/css">
    /*! This file is auto-generated */
    .wp-block-button__link {
      color: #fff;
      background-color: #32373c;
      border-radius: 9999px;
      box-shadow: none;
      text-decoration: none;
      padding: calc(.667em + 2px) calc(1.333em + 2px);
      font-size: 1.125em
    }

    .wp-block-file__button {
      background: #32373c;
      color: #fff;
      text-decoration: none
    }
  </style>
  <link rel="stylesheet" id="style-css" href="https://drakecomic.org/wp-content/themes/mangareader/style.css?ver=2.2.0"
    type="text/css" media="all">
  <link rel="stylesheet" id="ts-lightstyle-css"
    href="https://drakecomic.org/wp-content/themes/mangareader/assets/css/lightmode.css?ver=2.2.0" type="text/css"
    media="all">
  <link rel="stylesheet" id="ts-blueimp-css"
    href="https://drakecomic.org/wp-content/themes/mangareader/assets/css/blueimp-gallery.min.css?ver=2.38.0"
    type="text/css" media="all">
  <link rel="stylesheet" id="mycred-front-css"
    href="https://drakecomic.org/wp-content/plugins/mycred/assets/css/mycred-front.css?ver=2.9.5" type="text/css"
    media="all">
  <link rel="stylesheet" id="mycred-social-share-icons-css"
    href="https://drakecomic.org/wp-content/plugins/mycred/assets/css/mycred-social-icons.css?ver=2.9.5" type="text/css"
    media="all">
  <link rel="stylesheet" id="mycred-social-share-style-css"
    href="https://drakecomic.org/wp-content/plugins/mycred/assets/css/mycred-social-share.css?ver=2.9.5" type="text/css"
    media="all">
  <link rel="stylesheet" id="wpdiscuz-frontend-css-css"
    href="https://drakecomic.org/wp-content/plugins/wpdiscuz/themes/default/style.css?ver=7.6.34" type="text/css"
    media="all">
  <style id="wpdiscuz-frontend-css-inline-css" type="text/css">
    #wpdcom .wpd-blog-administrator .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-administrator .wpd-comment-author,
    #wpdcom .wpd-blog-administrator .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-1 .wpd-comment .wpd-blog-administrator .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment.wpd-reply .wpd-comment-wrap.wpd-blog-administrator {
      border-left: 3px solid #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-administrator .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-administrator .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-reply .wpd-blog-administrator .wpd-comment-right {
      border-left: 1px solid #00B38F
    }

    #wpdcom .wpd-blog-editor .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-editor .wpd-comment-author,
    #wpdcom .wpd-blog-editor .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-1 .wpd-comment .wpd-blog-editor .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment.wpd-reply .wpd-comment-wrap.wpd-blog-editor {
      border-left: 3px solid #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-editor .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-editor .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-reply .wpd-blog-editor .wpd-comment-right {
      border-left: 1px solid #00B38F
    }

    #wpdcom .wpd-blog-author .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-author .wpd-comment-author,
    #wpdcom .wpd-blog-author .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-1 .wpd-comment .wpd-blog-author .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-author .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-author .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-reply .wpd-blog-author .wpd-comment-right {
      border-left: 1px solid #00B38F
    }

    #wpdcom .wpd-blog-contributor .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-contributor .wpd-comment-author,
    #wpdcom .wpd-blog-contributor .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-1 .wpd-comment .wpd-blog-contributor .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-contributor .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-contributor .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-reply .wpd-blog-contributor .wpd-comment-right {
      border-left: 1px solid #00B38F
    }

    #wpdcom .wpd-blog-subscriber .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-subscriber .wpd-comment-author,
    #wpdcom .wpd-blog-subscriber .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-subscriber .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-subscriber .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom .wpd-blog-wpseo_manager .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-wpseo_manager .wpd-comment-author,
    #wpdcom .wpd-blog-wpseo_manager .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-1 .wpd-comment .wpd-blog-wpseo_manager .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-wpseo_manager .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-wpseo_manager .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-reply .wpd-blog-wpseo_manager .wpd-comment-right {
      border-left: 1px solid #00B38F
    }

    #wpdcom .wpd-blog-wpseo_editor .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-wpseo_editor .wpd-comment-author,
    #wpdcom .wpd-blog-wpseo_editor .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-1 .wpd-comment .wpd-blog-wpseo_editor .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-wpseo_editor .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-wpseo_editor .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-reply .wpd-blog-wpseo_editor .wpd-comment-right {
      border-left: 1px solid #00B38F
    }

    #wpdcom .wpd-blog-post_author .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-post_author .wpd-comment-author,
    #wpdcom .wpd-blog-post_author .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom .wpd-blog-post_author .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-1 .wpd-comment .wpd-blog-post_author .wpd-avatar img {
      border-color: #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment.wpd-reply .wpd-comment-wrap.wpd-blog-post_author {
      border-left: 3px solid #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment .wpd-blog-post_author .wpd-avatar img {
      border-bottom-color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-post_author .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-reply .wpd-blog-post_author .wpd-comment-right {
      border-left: 1px solid #00B38F
    }

    #wpdcom .wpd-blog-guest .wpd-comment-label {
      color: #ffffff;
      background-color: #00B38F;
      border: none
    }

    #wpdcom .wpd-blog-guest .wpd-comment-author,
    #wpdcom .wpd-blog-guest .wpd-comment-author a {
      color: #00B38F
    }

    #wpdcom.wpd-layout-3 .wpd-blog-guest .wpd-comment-subheader {
      border-top: 1px dashed #00B38F
    }

    #comments,
    #respond,
    .comments-area,
    #wpdcom.wpd-dark {
      background: #111111;
      color: #CCCCCC
    }

    #wpdcom .ql-editor>* {
      color: #000000
    }

    #wpdcom .ql-editor::before {
      opacity: 1;
      color: #DDDDDD
    }

    #wpdcom .ql-toolbar {
      border: 1px solid #D1D1D1;
      border-top: none
    }

    #wpdcom .ql-container {
      background: #999999;
      border: 1px solid #D1D1D1;
      border-bottom: none
    }

    #wpdcom .wpd-form-row .wpdiscuz-item input[type="text"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="email"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="url"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="color"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="date"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="datetime"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="datetime-local"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="month"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="number"],
    #wpdcom .wpd-form-row .wpdiscuz-item input[type="time"],
    #wpdcom textarea,
    #wpdcom select {
      background: #999999;
      border: 1px solid #D1D1D1;
      color: #000000
    }

    #wpdcom.wpd-dark .wpdiscuz-item.wpd-field-select select.wpdiscuz_select,
    #wpdcom.wpd-dark select {
      background: #999999 !important;
      border: 1px solid #D1D1D1 !important;
      color: #000000 !important
    }

    #wpdcom .wpd-form-row .wpdiscuz-item textarea {
      border: 1px solid #D1D1D1
    }

    #wpdcom input::placeholder,
    #wpdcom textarea::placeholder,
    #wpdcom input::-moz-placeholder,
    #wpdcom textarea::-webkit-input-placeholder {
      opacity: 1;
      color: #DDDDDD
    }

    #wpdcom .wpd-comment-text {
      color: #CCCCCC
    }

    .lity-wrap .wpd-item a {
      color: #666
    }

    .lity-wrap .wpd-item a:hover {
      color: #222
    }

    .wpd-inline-shortcode.wpd-active {
      background-color: #666
    }

    #wpdcom .wpd-thread-head .wpd-thread-info {
      border-bottom: 2px solid #00B38F
    }

    #wpdcom .wpd-thread-head .wpd-thread-info.wpd-reviews-tab svg {
      fill: #00B38F
    }

    #wpdcom .wpd-thread-head .wpdiscuz-user-settings {
      border-bottom: 2px solid #00B38F
    }

    #wpdcom .wpd-thread-head .wpdiscuz-user-settings:hover {
      color: #00B38F
    }

    #wpdcom .wpd-comment .wpd-follow-link:hover {
      color: #00B38F
    }

    #wpdcom .wpd-comment-status .wpd-sticky {
      color: #00B38F
    }

    #wpdcom .wpd-thread-filter .wpdf-active {
      color: #00B38F;
      border-bottom-color: #00B38F
    }

    #wpdcom .wpd-comment-info-bar {
      border: 1px dashed #33c3a6;
      background: #e6f8f4
    }

    #wpdcom .wpd-comment-info-bar .wpd-current-view i {
      color: #00B38F
    }

    #wpdcom .wpd-filter-view-all:hover {
      background: #00B38F
    }

    #wpdcom .wpdiscuz-item .wpdiscuz-rating>label {
      color: #DDDDDD
    }

    #wpdcom .wpdiscuz-item .wpdiscuz-rating:not(:checked)>label:hover,
    .wpdiscuz-rating:not(:checked)>label:hover~label {}

    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input~label:hover,
    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input:not(:checked)~label:hover~label,
    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input:not(:checked)~label:hover~label {
      color: #FFED85
    }

    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input:checked~label:hover,
    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input:checked~label:hover,
    #wpdcom .wpdiscuz-item .wpdiscuz-rating>label:hover~input:checked~label,
    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input:checked+label:hover~label,
    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input:checked~label:hover~label,
    .wpd-custom-field .wcf-active-star,
    #wpdcom .wpdiscuz-item .wpdiscuz-rating>input:checked~label {
      color: #FFD700
    }

    #wpd-post-rating .wpd-rating-wrap .wpd-rating-stars svg .wpd-star {
      fill: #DDDDDD
    }

    #wpd-post-rating .wpd-rating-wrap .wpd-rating-stars svg .wpd-active {
      fill: #FFD700
    }

    #wpd-post-rating .wpd-rating-wrap .wpd-rate-starts svg .wpd-star {
      fill: #DDDDDD
    }

    #wpd-post-rating .wpd-rating-wrap .wpd-rate-starts:hover svg .wpd-star {
      fill: #FFED85
    }

    #wpd-post-rating.wpd-not-rated .wpd-rating-wrap .wpd-rate-starts svg:hover~svg .wpd-star {
      fill: #DDDDDD
    }

    .wpdiscuz-post-rating-wrap .wpd-rating .wpd-rating-wrap .wpd-rating-stars svg .wpd-star {
      fill: #DDDDDD
    }

    .wpdiscuz-post-rating-wrap .wpd-rating .wpd-rating-wrap .wpd-rating-stars svg .wpd-active {
      fill: #FFD700
    }

    #wpdcom .wpd-comment .wpd-follow-active {
      color: #ff7a00
    }

    #wpdcom .page-numbers {
      color: #555;
      border: #555 1px solid
    }

    #wpdcom span.current {
      background: #555
    }

    #wpdcom.wpd-layout-1 .wpd-new-loaded-comment>.wpd-comment-wrap>.wpd-comment-right {
      background: #FFFAD6
    }

    #wpdcom.wpd-layout-2 .wpd-new-loaded-comment.wpd-comment>.wpd-comment-wrap>.wpd-comment-right {
      background: #FFFAD6
    }

    #wpdcom.wpd-layout-2 .wpd-new-loaded-comment.wpd-comment.wpd-reply>.wpd-comment-wrap>.wpd-comment-right {
      background: transparent
    }

    #wpdcom.wpd-layout-2 .wpd-new-loaded-comment.wpd-comment.wpd-reply>.wpd-comment-wrap {
      background: #FFFAD6
    }

    #wpdcom.wpd-layout-3 .wpd-new-loaded-comment.wpd-comment>.wpd-comment-wrap>.wpd-comment-right {
      background: #FFFAD6
    }

    #wpdcom .wpd-follow:hover i,
    #wpdcom .wpd-unfollow:hover i,
    #wpdcom .wpd-comment .wpd-follow-active:hover i {
      color: #00B38F
    }

    #wpdcom .wpdiscuz-readmore {
      cursor: pointer;
      color: #00B38F
    }

    .wpd-custom-field .wcf-pasiv-star,
    #wpcomm .wpdiscuz-item .wpdiscuz-rating>label {
      color: #DDDDDD
    }

    .wpd-wrapper .wpd-list-item.wpd-active {
      border-top: 3px solid #00B38F
    }

    #wpdcom.wpd-layout-2 .wpd-comment.wpd-reply.wpd-unapproved-comment .wpd-comment-wrap {
      border-left: 3px solid #FFFAD6
    }

    #wpdcom.wpd-layout-3 .wpd-comment.wpd-reply.wpd-unapproved-comment .wpd-comment-right {
      border-left: 1px solid #FFFAD6
    }

    #wpdcom .wpd-prim-button {
      background-color: #07B290;
      color: #FFFFFF
    }

    #wpdcom .wpd_label__check i.wpdicon-on {
      color: #07B290;
      border: 1px solid #83d9c8
    }

    #wpd-bubble-wrapper #wpd-bubble-all-comments-count {
      color: #1DB99A
    }

    #wpd-bubble-wrapper>div {
      background-color: #1DB99A
    }

    #wpd-bubble-wrapper>#wpd-bubble #wpd-bubble-add-message {
      background-color: #1DB99A
    }

    #wpd-bubble-wrapper>#wpd-bubble #wpd-bubble-add-message::before {
      border-left-color: #1DB99A;
      border-right-color: #1DB99A
    }

    #wpd-bubble-wrapper.wpd-right-corner>#wpd-bubble #wpd-bubble-add-message::before {
      border-left-color: #1DB99A;
      border-right-color: #1DB99A
    }

    .wpd-inline-icon-wrapper path.wpd-inline-icon-first {
      fill: #1DB99A
    }

    .wpd-inline-icon-count {
      background-color: #1DB99A
    }

    .wpd-inline-icon-count::before {
      border-right-color: #1DB99A
    }

    .wpd-inline-form-wrapper::before {
      border-bottom-color: #1DB99A
    }

    .wpd-inline-form-question {
      background-color: #1DB99A
    }

    .wpd-inline-form {
      background-color: #1DB99A
    }

    .wpd-last-inline-comments-wrapper {
      border-color: #1DB99A
    }

    .wpd-last-inline-comments-wrapper::before {
      border-bottom-color: #1DB99A
    }

    .wpd-last-inline-comments-wrapper .wpd-view-all-inline-comments {
      background: #1DB99A
    }

    .wpd-last-inline-comments-wrapper .wpd-view-all-inline-comments:hover,
    .wpd-last-inline-comments-wrapper .wpd-view-all-inline-comments:active,
    .wpd-last-inline-comments-wrapper .wpd-view-all-inline-comments:focus {
      background-color: #1DB99A
    }

    #wpdcom .ql-snow .ql-tooltip[data-mode="link"]::before {
      content: "Enter link:"
    }

    #wpdcom .ql-snow .ql-tooltip.ql-editing a.ql-action::after {
      content: "Save"
    }

    .comments-area {
      width: auto
    }
  </style>
  <link rel="stylesheet" id="wpdiscuz-fa-css"
    href="https://drakecomic.org/wp-content/plugins/wpdiscuz/assets/third-party/font-awesome-5.13.0/css/fa.min.css?ver=7.6.34"
    type="text/css" media="all">
  <link rel="stylesheet" id="wpdiscuz-combo-css-css"
    href="https://drakecomic.org/wp-content/plugins/wpdiscuz/assets/css/wpdiscuz-combo.min.css?ver=6.8.2"
    type="text/css" media="all">
  <link rel="stylesheet" id="um_modal-css"
    href="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/css/um-modal.min.css?ver=2.10.5"
    type="text/css" media="all">
  <link rel="stylesheet" id="um_ui-css"
    href="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/libs/jquery-ui/jquery-ui.min.css?ver=1.13.2"
    type="text/css" media="all">
  <link rel="stylesheet" id="um_tipsy-css"
    href="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/libs/tipsy/tipsy.min.css?ver=1.0.0a"
    type="text/css" media="all">
  <link rel="stylesheet" id="um_raty-css"
    href="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/libs/raty/um-raty.min.css?ver=2.6.0"
    type="text/css" media="all">
  <link rel="stylesheet" id="select2-css"
    href="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/libs/select2/select2.min.css?ver=4.0.13"
    type="text/css" media="all">
  <link rel="stylesheet" id="um_fileupload-css"
    href="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/css/um-fileupload.min.css?ver=2.10.5"
    type="text/css" media="all">
  <link rel="stylesheet" id="um_confirm-css"
    href="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/libs/um-confirm/um-confirm.min.css?ver=1.0"
    type="text/css" media="all">
  <link rel="stylesheet" id="um_datetime-css"
    href="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/libs/pickadate/default.min.css?ver=3.6.2"
    type="text/css" media="all">
  <link rel="stylesheet" id="um_datetime_date-css"
    href="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/libs/pickadate/default.date.min.css?ver=3.6.2"
    type="text/css" media="all">
  <link rel="stylesheet" id="um_datetime_time-css"
    href="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/libs/pickadate/default.time.min.css?ver=3.6.2"
    type="text/css" media="all">
  <link rel="stylesheet" id="um_fonticons_ii-css"
    href="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/libs/legacy/fonticons/fonticons-ii.min.css?ver=2.10.5"
    type="text/css" media="all">
  <link rel="stylesheet" id="um_fonticons_fa-css"
    href="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/libs/legacy/fonticons/fonticons-fa.min.css?ver=2.10.5"
    type="text/css" media="all">
  <link rel="stylesheet" id="um_fontawesome-css"
    href="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/css/um-fontawesome.min.css?ver=6.5.2"
    type="text/css" media="all">
  <link rel="stylesheet" id="um_common-css"
    href="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/css/common.min.css?ver=2.10.5"
    type="text/css" media="all">
  <link rel="stylesheet" id="um_responsive-css"
    href="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/css/um-responsive.min.css?ver=2.10.5"
    type="text/css" media="all">
  <link rel="stylesheet" id="um_styles-css"
    href="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/css/um-styles.min.css?ver=2.10.5"
    type="text/css" media="all">
  <link rel="stylesheet" id="um_crop-css"
    href="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/libs/cropper/cropper.min.css?ver=1.6.1"
    type="text/css" media="all">
  <link rel="stylesheet" id="um_profile-css"
    href="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/css/um-profile.min.css?ver=2.10.5"
    type="text/css" media="all">
  <link rel="stylesheet" id="um_account-css"
    href="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/css/um-account.min.css?ver=2.10.5"
    type="text/css" media="all">
  <link rel="stylesheet" id="um_misc-css"
    href="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/css/um-misc.min.css?ver=2.10.5"
    type="text/css" media="all">
  <link rel="stylesheet" id="um_default_css-css"
    href="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/css/um-old-default.min.css?ver=2.10.5"
    type="text/css" media="all">
  <script>
    var baseurl = "https://drakecomic.org/";
    var ajaxurl = "https://drakecomic.org/wp-admin/admin-ajax.php";

    var max_bookmark = 50;

    var max_history = 10;
    var defaultTheme = "darkmode";
  </script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/themes/mangareader/assets/js/jquery.min.js?ver=3.5.1"
    id="jquery-js"></script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/themes/mangareader/assets/js/bookmark.js?ver=2.2.0"
    id="bookmarks_script-js"></script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/themes/mangareader/assets/js/series-history.js?ver=2.2.0"
    id="series_history_script-js"></script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/themes/mangareader/assets/js/history.js?ver=2.2.0"
    id="ts-history_script-js"></script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/themes/mangareader/assets/js/function.js?ver=2.2.0"
    id="tsfn_scripts-js"></script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/themes/mangareader/assets/js/tsmedia.js?ver=2.2.0" id="tsmedia-js"></script>
  <script type="text/javascript" src="https://drakecomic.org/wp-content/themes/mangareader/assets/js/nsfw.js?ver=2.2.0"
    id="ts-nsfw_scripts-js"></script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/themes/mangareader/assets/js/blueimp-gallery.min.js?ver=2.38.0"
    id="ts-blueimp-js"></script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/themes/mangareader/assets/js/chapter-search.js?ver=2.2.0"
    id="ts-chapter-search-js"></script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/plugins/mycred/addons/badges/assets/js/front.js?ver=1.3"
    id="mycred-badge-front-js"></script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/js/um-gdpr.min.js?ver=2.10.5"
    id="um-gdpr-js"></script>
  <link rel="https://api.w.org/" href="https://drakecomic.org/wp-json/">
  <link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://drakecomic.org/xmlrpc.php?rsd">
  <meta name="generator" content="WordPress 6.8.2">
  <link rel="shortlink" href="https://drakecomic.org/?p=17815">
  <link rel="alternate" title="oEmbed (JSON)" type="application/json+oembed"
    href="https://drakecomic.org/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fdrakecomic.org%2Fmanga%2Fserpent-ancestor%2F">
  <link rel="alternate" title="oEmbed (XML)" type="text/xml+oembed"
    href="https://drakecomic.org/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fdrakecomic.org%2Fmanga%2Fserpent-ancestor%2F&amp;format=xml">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="">
  <link
    href="https://fonts.googleapis.com/css2?family=Fira+Sans:ital,wght@0,400;0,500;0,600;0,700;1,400;1,500;1,600;1,700&amp;family=Poppins:ital,wght@0,400;0,500;0,600;0,700;1,400;1,500;1,600;1,700&amp;display=swap"
    rel="stylesheet">
  <script>
    $(document).ready(function () {
      $(".shme").click(function () {
        $(".mm").toggleClass("shwx");
      });
      $(".srcmob").click(function () {
        $(".minmb").toggleClass("minmbx");
      });
    });
  </script>
  <script type="text/javascript">
    $(document).ready(function () {

      //Check to see if the window is top if not then display button
      $(window).scroll(function () {
        if ($(this).scrollTop() > 100) {
          $('.scrollToTop').fadeIn();
        } else {
          $('.scrollToTop').fadeOut();
        }
      });

      //Click event to scroll to top
      $('.scrollToTop').click(function () {
        $('html, body').animate({ scrollTop: 0 }, 800);
        return false;
      });

    });
  </script>
  <style>
    @media only screen and (max-width:570px) {

      #floatcenter,
      #teaser1,
      #teaser2,
      #teaserbottom,
      #teaser4 {
        display: none;
      }
    }
  </style>
  <script type="text/javascript">
    var sf_templates = "<a href=\"{search_url_escaped}\">View All Results<\/a>";
    var sf_position = '0';
    var sf_input = '.search-live';
    jQuery(document).ready(function () {
      jQuery(sf_input).ajaxyLiveSearch({ "expand": false, "searchUrl": "https:\/\/drakecomic.org\/?s=%s", "text": "Search", "delay": 500, "iwidth": 180, "width": 350, "ajaxUrl": "https:\/\/drakecomic.org\/wp-admin\/admin-ajax.php", "rtl": 0 });
      jQuery(".live-search_ajaxy-selective-input").keyup(function () {
        var width = jQuery(this).val().length * 8;
        if (width < 50) {
          width = 50;
        }
        jQuery(this).width(width);
      });
      jQuery(".live-search_ajaxy-selective-search").click(function () {
        jQuery(this).find(".live-search_ajaxy-selective-input").focus();
      });
      jQuery(".live-search_ajaxy-selective-close").click(function () {
        jQuery(this).parent().remove();
      });
    });
  </script>
  <link rel="icon" href="https://drakecomic.org/wp-content/uploads/2025/09/cropped-34234-small-32x32.png" sizes="32x32">
  <link rel="icon" href="https://drakecomic.org/wp-content/uploads/2025/09/cropped-34234-small-192x192.png"
    sizes="192x192">
  <link rel="apple-touch-icon" href="https://drakecomic.org/wp-content/uploads/2025/09/cropped-34234-small-180x180.png">
  <meta name="msapplication-TileImage"
    content="https://drakecomic.org/wp-content/uploads/2025/09/cropped-34234-small-270x270.png">
  <style type="text/css" id="wp-custom-css">
    #wpdcom .ql-editor>* {
      color: #ffffff;
    }


    #sidebar .section #searchform #searchsubmit,
    .series-gen .nav-tabs li.active a,
    .lastend .inepcx a,
    .nav_apb a:hover,
    #top-menu li a:hover,
    .readingnav.rnavbot .readingnavbot .readingbar .readingprogress,
    .lightmode .main-info .info-desc .wd-full .mgen a:hover,
    .lightmode .bxcl ul li .chbox:hover,
    .lightmode ul.taxindex li a:hover,
    .comment-list .comment-body .reply a:hover,
    .topmobile,
    .bxcl ul::-webkit-scrollbar-thumb,
    .lightmode .slider::before,
    .quickfilter .filters .filter .genrez::-webkit-scrollbar-thumb,
    .hothome .releases,
    .lightmode .seriestucon .seriestucont .seriestucontr .seriestugenre a:hover,
    .bloglist .blogbox .innerblog .thumb .btags,
    .slidernom2 .mainslider .limit .sliderinfo .sliderinfolimit .start-reading span:hover,
    .lightmode .bixbox .bvlcen .bvl,
    .tsfront .headfront .fsearch #submit,
    .tsfront .headfront .fhomebutton a,
    .section .wp-block-search .wp-block-search__button {
      background-image: initial;
      background-color: rgb(0 0 0 / 37%) !important;
    }




    .series-gen .nav-tabs {
      list-style: none;
      margin: 0;
      padding: 6px;
      overflow: hidden;
      background: #08111a;
      border-radius: 14px;
      font-weight: 500;
    }










    .searchx {
      float: right;
      width: 270px;
      margin: 23px 0 16px 0;
      position: relative;
    }

    .searchx #form #s {

      background: #21416369;
    }


    @import url('https://fonts.googleapis.com/css2?family=Bangers&display=swap');

    .mcl-chapter-title {
      font-family: 'Bangers', cursive !important;
      color: white;
      font-size: 2.2em;
      font-weight: 400;
    }

    .mcl-packages-store {
      display: flex;
      flex-wrap: wrap;
      gap: 32px;
      justify-content: center;
      margin: 30px 0;
    }

    .mcl-packages-store>* {
      flex: 0 0 calc(50% - 16px);
      max-width: calc(50% - 16px);
      font-size: 1.1rem;
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .mcl-packages-store>* img {
      width: 100%;
      height: auto;
      max-height: 250px;
      object-fit: contain;
      border-radius: 10px;
      margin-bottom: 10px;
    }

    @media (max-width: 768px) {
      .mcl-packages-store>* {
        flex: 0 0 100%;
        max-width: 100%;
      }

      .mcl-packages-store>* img {
        max-height: 200px;
      }
    }




    .kiwi-balance-box {
      margin: 51px auto 38px auto !important;

    }







    .kiwi-balance-box {

      border-color: dodgerblue !important;
    }

    .kiwi-balance-box .balance {
      color: #4ea3ff !important;
    }

    .kiwi-balance-box .username {
      color: #ffffff !important;
    }

    #content.readercontent .chaptertags {
      background-image: initial;
      background-color: #00000000;
      color: #00000000;
    }



    .mcl-price-amount {
      font-family: 'UnifrakturCook', 'Quicksand', cursive;
      font-size: 1.37em;
      color: white !important;
      font-weight: bold;
      text-shadow: 0 0 8px #00000000;
      margin-left: 7px;
      letter-spacing: 2px;
    }


    .mcl-packages-store {
      display: flex;
      flex-wrap: wrap;
      gap: 32px;
      justify-content: center;
      margin: 30px 0;
      align-content: center;
    }



    .mcl-package-card {
      background: #d4d4d417 !important;
      border: 0px solid #333 !important;
      box-shadow: 0px #00000000 !important;
    }


    .mcl-package-img {

      background: #25252500 !important;
      box-shadow: 0 0px 0px #00000000 !important;
      border: 0px solid #00000000 !important;
    }


    .mcl-buy-btn {

      background: #47474761 !important;
    }

    .mcl-buy-btn:hover {
      background: #003b6d82 !important;
    }



    #wpdcom .wpd-form-head {
      border-left: 0px solid #cccccc;
      padding: 7px 2px 9px 2px;
      margin-top: 20px;
      margin-bottom: 5px;
      display: flex;
      flex-wrap: wrap;
      flex-direction: row;
      justify-content: space-between;
    }



    #wpdcom .wpd-auth .wpd-login a {
      color: #3399ff75;
      text-decoration: none;
    }




    #wpdcom .wpd-prim-button {
      background-color: #2e90ff6b;
      color: #FFFFFF;
    }




    #wpdcom.wpd-dark .ql-toolbar {
      background-color: #00134c54;
    }


    #comments,
    #respond,
    .comments-area,
    #wpdcom.wpd-dark {
      background: #11111100;
    }

    #wpdcom .ql-container {
      background: #1495ff24;
      border: 0px solid #D1D1D1;
      border-bottom: none;
    }


    #wpdcom .ql-toolbar {
      border: 0px solid #d1d1d14f;
      border-top: none;
    }


    .mainslider .limit img {
      position: static !important;
    }


    #main-menu ul li ul {
      background-image: initial;
      background-color: #71717133;
      box-shadow: var(--darkreader-background-00000061, rgba(0, 0, 0, 0.38)) 0px 4px 4px;
    }


    #main-menu ul li ul li a:hover {
      background-image: initial;
      background-color: rgb(18 18 18 / 0%);
    }



    .bookmark:hover {
      background-image: initial;
      background-color: #ff00bc30;
    }


    #content.manga-info .postbody.full {

      padding-top: 20px;
    }

    @media only screen and (max-width: 800px) {
      .main-info .info-left .thumb {
        border-top-color: #b3aca200;
        border-right-color: #b3aca200;
        border-bottom-color: #b3aca200;
        border-left-color: #b3aca200;
      }
    }

    #main-menu.shwx {
      background-image: initial;
      background-color: #000000c2;
    }


    #main-menu.shwx ul li ul {
      background-image: initial;
      background-color: #00000057;
    }


    .main-info .info-left .thumb img {
      width: 100%;
      display: grid;
      border-radius: 14px;
    }

    .main-info .wd-full .entry-content.entry-content-single {
      line-height: 16px;
      font-size: 13px;
    }


    .chfiv li.locked {
      position: relative;
      overflow: hidden;
      border-radius: 8px;
    }

    .chfiv li.locked::before {
      content: "";
      position: absolute;
      inset: 0;
      background: rgb(0 45 82 / 50%);
      z-index: 2;
      pointer-events: none;
      border-radius: 8px;
    }


    .chfiv li.locked {
      position: relative;
    }


    .chfiv li.locked::before {
      inset: auto;
    }


    .chfiv li.locked::before {
      content: "";
      position: absolute;
      top: 50%;
      left: 50%;
      width: 100%;
      height: 52px;
      transform: translate(-50%, -50%) scale(0.94);
      border-radius: 50%;
      pointer-events: none;
      z-index: 2;


      background: radial-gradient(closest-side,
          rgba(122, 178, 255, 0.35) 0%,
          rgba(122, 178, 255, 0.20) 50%,
          rgba(122, 178, 255, 0.00) 72%);

      -webkit-backdrop-filter: blur(6px);
      backdrop-filter: blur(1px);

    }


    .chfiv li.locked::after {
      content: "";
      position: absolute;
      top: 50%;
      left: 50%;

      width: 24px;
      height: 24px;

      transform: translate(-50%, -50%);
      transform-origin: center;
      z-index: 3;
      pointer-events: none;


      background-image: url("data:image/svg+xml;utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Ccircle cx='50' cy='50' r='46' fill='none' stroke='%23FFFFFF' stroke-width='5'/%3E%3Ccircle cx='50' cy='50' r='33' fill='none' stroke='%237AB2FF' stroke-width='3' stroke-dasharray='7 6' stroke-linecap='round'/%3E%3Ccircle cx='50' cy='50' r='3' fill='%23FFFFFF'/%3E%3C/svg%3E");
      background-repeat: no-repeat;
      background-position: center;
      background-size: contain;

      filter: drop-shadow(0 1px 3px rgba(0, 0, 0, 0.5));
      backface-visibility: hidden;
      /* reduce 360° seam flicker */
      will-change: transform;


      animation: sigilSpinSmooth 11s linear infinite;
    }


    @media (max-width: 480px) {
      .chfiv li.locked::before {
        width: 100%;
        height: 58px;
        transform: translate(-50%, -50%) scale(0.96);
        -webkit-backdrop-filter: blur(7px);
        backdrop-filter: blur(1px);
        animation-duration: 2s;
      }

      .chfiv li.locked::after {
        width: 28px;
        height: 22px;
        animation-duration: 8s;
      }
    }


    @keyframes auraPulseSmooth {
      0% {
        transform: translate(-50%, -50%) scale(0.94);
        opacity: 0.95;
      }

      50% {
        transform: translate(-50%, -50%) scale(1.10);
        opacity: 0.70;
      }

      100% {
        transform: translate(-50%, -50%) scale(0.94);
        opacity: 0.95;
      }
    }


    @keyframes sigilSpinSmooth {
      from {
        transform: translate(-50%, -50%) rotate(0turn);
      }

      to {
        transform: translate(-50%, -50%) rotate(1turn);
      }
    }


    .chfiv li.locked::after {}

    @keyframes mclSpinVar {
      to {
        --mcl-rot: 1turn;
      }
    }


    @supports not ((backdrop-filter: blur(4px)) or (-webkit-backdrop-filter: blur(4px))) {
      .chfiv li.locked::before {
        background: radial-gradient(closest-side,
            rgba(122, 178, 255, 0.45) 0%,
            rgba(122, 178, 255, 0.18) 52%,
            rgba(122, 178, 255, 0.00) 74%);
        box-shadow:
          0 0 16px rgba(122, 178, 255, 0.42),
          0 0 34px rgba(122, 178, 255, 0.22);
      }
    }




    #main-menu ul li a {
      display: block;
      text-align: center;
      line-height: 85px;
      height: 66px;
      padding: 0 10px;
      color: #FFF;
      border-left: 0;
      transition: color .5s;
      position: relative;
      font-weight: 500;
      font-size: 1.3rem;
    }





    .postbody.full {
      position: relative;
      background: rgba(255, 255, 255, 0.9);
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 0 20px rgb(0 0 0 / 0%) !important;
    }

    .main-info .info-left .thumb {
      max-width: 100%;
    }


    .chfiv li.new .fivchap {
      position: relative;
      font-weight: bold;
      color: #66b2ff;
    }

    .chfiv li.new .new-pulse-dot {
      display: inline-block;
      width: 9px;
      height: 9px;
      margin-left: 7px;
      border-radius: 50%;
      background: radial-gradient(circle at 60% 40%, #fff 65%, #e6f2ff 100%);
      box-shadow: 0 0 2px 1px #66b2ff55;
      vertical-align: middle;
      position: relative;
      animation: pulse-dot-small 1.1s cubic-bezier(0.66, 0, 0.34, 1) infinite;
    }

    @keyframes pulse-dot-small {
      0% {
        transform: scale(1);
      }

      60% {
        transform: scale(1.11);
      }

      100% {
        transform: scale(1);
      }
    }








    .postbody.full {
      position: relative;
      background: rgb(255 255 255 / 0%) !important;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    }



    .rating-prc .rtp .rtb {
      position: relative;
      overflow: hidden;
      color: #ffdb1d5e;
      height: 15px;
      line-height: 1;
      width: 85px;
      font-size: 15px;
      margin: 0 auto;
    }




    .black {
      background: #000000;
      color: #cacaca;
    }



    .live-search_result_container li:hover {
      background: #0080ff00;
    }


    #live-search_results {
      background: #0000008c;
      border-radius: 11px;
      z-index: 550 !important;
      border: 1px solid rgba(255, 255, 255, 0.6);

      -webkit-box-shadow: 0 4px 20px #000;
      -khtml-box-shadow: 0 4px 20px #000;
      -moz-box-shadow: 0 4px 20px #000;
      -ms-box-shadow: 0 4px 20px #000;
      -o-box-shadow: 0 4px 20px #000;
      box-shadow: 0 4px 20px #000;
    }


    .live-search_result_container .post-thumbnail img {
      width: 100% !important;
      height: auto !important;
      padding-top: 8px;
    }


    .logos img {
      max-height: 70px;
      transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out;
      filter: grayscale(30%);
      opacity: 0.9;
    }

    .logos img:hover {
      transform: scale(1.08);
      filter: grayscale(0%);
      opacity: 1;
      cursor: pointer;
    }







    .th,
    .serieslist.pop ul li.topone .limit .bw .ctr,
    .releases .vl,
    .scrollToTop,
    #sidebar #bm-history li a:hover,
    .hpage a,
    #footer .footermenu,
    .footer-az .az-list li a,
    .main-info .info-desc .spe span::before,
    .bxcl ul li span.dt a,
    .bookmark,
    .commentx #submit,
    .radiox input:checked~.checkmarkx,
    .advancedsearch button.searchz,
    .lightmode .nav_apb a:hover,
    .lista a,
    .lightmode .lista a:hover,
    .nextprev a,
    .disqusmen #commentform #submit,
    .blogbox .btitle .vl,
    .bigblogt span a,
    .big-slider .paging .centerpaging .swiper-pagination span.swiper-pagination-bullet-active {
      background-image: initial;
      background-color: #00000000;
      padding-top: 7px;

    }



    body {
      background-color: #000000;
    }




    .bixbox {
      background-color: #00000000;


      -webkit-box-shadow: 0 0px 0px rgba(0, 0, 0, .1);
      */ -khtml-box-shadow: 0 0px 0px rgba(0, 0, 0, .1);
      -moz-box-shadow: 0 0px 0px rgba(0, 0, 0, .1);
      -ms-box-shadow: 0 0px 0px rgba(0, 0, 0, .1);
      -o-box-shadow: 0 0px 0px rgba(0, 0, 0, .1);
      box-shadow: 0 0px 0px rgba(0, 0, 0, .0);


    }


    .hothome .releases h2 {
      background-color: #00000000;
    }


    #sidebar .section {
      background: #00000000;
    }


    .releases {
      border-bottom: 1px solid #00000000;

    }





    #sidebar .section .ts-wpop-series-gen .ts-wpop-nav-tabs {
      background: #007bff4a;
      border-radius: 13px;

    }

    .pagination span.page-numbers.current,
    .quickfilter .filters .filter.submit button,
    #sidebar .section .ts-wpop-series-gen .ts-wpop-nav-tabs li.active span,
    #gallery.owl-loaded .owl-dots .owl-dot.active span,
    .bs.stylefiv .bsx .chfiv li a:hover,
    .bs.stylesix .bsx .chfiv li a:hover {
      background: #000000 !important;
      border-radius: 11px;
    }





    .ts-wpop-series-gen .ts-wpop-nav-tabs li span {
      color: white;
    }



    .bs .bsx .limit img {
      width: 100%;
      height: 100%;
      transition: transform 1s;
    }




    .bs.stylefiv .bsx .chfiv li {

      border-radius: 35px;
    }











    .pagination span.page-numbers.current,
    .quickfilter .filters .filter.submit button,
    #sidebar .section .ts-wpop-series-gen .ts-wpop-nav-tabs li.active span,
    #gallery.owl-loaded .owl-dots .owl-dot.active span,
    .bs.stylefiv .bsx .chfiv li a:hover,
    .bs.stylesix .bsx .chfiv li a:hover {
      background: #0e3e76 !important;
      border-radius: 8px;
    }





    .bs.stylefiv .bsx .chfiv li {
      background: #007bff21;

    }







    .lightmode #sidebar .section h4,
    .lightmode .serieslist ul li .ctr,
    .listupd .utao .uta .luf ul li,
    .lightmode .bs .bsx:hover .tt,
    .soralist ul,
    a:hover,
    .lightmode .blogbox .btitle h3,
    .lightmode .blogbox .btitle h1,
    .bxcl ul li .lchx a:visited,
    .listupd .utao .uta .luf ul li a:visited,
    .lightmode .pagination a:hover,
    .lightmode a:hover,
    #sidebar .serieslist ul li .leftseries h2 a:hover,
    .bs.styletere .epxs,
    .bxcl ul li .dt a,
    .lightmode .main-info .info-desc .wd-full .mgen a,
    .lightmode #sidebar .serieslist ul li .leftseries h2 a:hover,
    .comment-list .comment-body .reply a,
    .bxcl ul li .eph-num a:visited,
    .headpost .allc a,
    .lightmode .seriestucon .seriestucont .seriestucontr .seriestugenre a,
    .bs.stylesix .bsx .chfiv li a,
    .bs.stylefor .bsx a:visited .bigor .adds .epxs,
    .bs.stylefiv .bsx .chfiv li a:visited .fivchap,
    .stylesven .sveninner .svenbottom .svenmetabot .svenchapters li a:visited,
    .listupd .utao.stylegg .uta .luf ul li a:visited .eggchap,
    .lightmode .listupd .utao.stylegg .uta .luf ul li a:visited .eggchap,
    .lightmode .serieslist ul li .leftseries span a {
      color: #007bff;

    }





    .bs .bsx {
      transition: transform 0.3s ease;
    }





    .slidernom3 .mainslider .limit .sliderinfo .sliderinfolimit .start-reading span {
      display: inline-block;
      background: #9b9b9b61;
      color: #000000;
      font-weight: 500;
      font-size: 14px;
      line-height: 35px;
      padding: 0 20px;
      border-radius: 4px;
      transition: background 0.3s ease, transform 0.2s ease;
    }

    .slidernom3 .mainslider .limit .sliderinfo .sliderinfolimit .start-reading span:hover {
      background: #d4e9ff;
      transform: scale(1.05);
      cursor: pointer;
    }



    .main-info .wd-full .mgen a {
      background: #007bff0d;
      border-radius: 14px;
    }





    #footer {
      color: #00000000;
      background: #00000000;

    }




    .bxcl ul li .chbox {
      background: #007bff0d;
      border: 0px;
    }


    .bxcl ul li .chbox:hover {
      background: #004a7c;
    }


    .swiper-container {
      border-radius: 25px;
    }



    #wpop-items .serieslist ul li .imgseries {
      margin-left: 37px;
      transition: transform 0.4s ease, box-shadow 0.4s ease;
    }

    .serieslist ul li .imgseries:hover {
      transform: scale(1.12) rotate3d(1, 1, 0, 5deg);
      box-shadow: 0 15px 25px rgba(0, 0, 0, 0.3);
    }

    .serieslist ul li .imgseries {
      max-height: 100%;
      max-width: 100%;
      width: 73px;
      transition: transform 0.2s ease;
      position: relative;
    }


    #sidebar .section #searchform #searchsubmit,
    .series-gen .nav-tabs li.active a,
    .lastend .inepcx a,
    .nav_apb a:hover,
    #top-menu li a:hover,
    .readingnav.rnavbot .readingnavbot .readingbar .readingprogress,
    .lightmode .main-info .info-desc .wd-full .mgen a:hover,
    .lightmode .bxcl ul li .chbox:hover,
    .lightmode ul.taxindex li a:hover,
    .comment-list .comment-body .reply a:hover,
    .topmobile,
    .bxcl ul::-webkit-scrollbar-thumb,
    .lightmode .slider::before,
    .quickfilter .filters .filter .genrez::-webkit-scrollbar-thumb,
    .hothome .releases,
    .lightmode .seriestucon .seriestucont .seriestucontr .seriestugenre a:hover,
    .bloglist .blogbox .innerblog .thumb .btags,
    .slidernom2 .mainslider .limit .sliderinfo .sliderinfolimit .start-reading span:hover,
    .lightmode .bixbox .bvlcen .bvl,
    .tsfront .headfront .fsearch #submit,
    .tsfront .headfront .fhomebutton a,
    .section .wp-block-search .wp-block-search__button {
      background-image: initial;
      background-color: #00000000;
    }

    .lastend .inepcx a:hover {
      background-image: initial;
      background-color: #004d794d;
    }





    .slidernom3 .mainslider .slidtrithumb {
      position: absolute;
      top: -68px;
      right: -3%;
      z-index: 9;
      width: 455px;
      height: 538px;
      overflow: hidden;
      transform: rotate(18deg);
      box-shadow: 0 30px 30px rgba(0, 0, 0, .2);
    }



    @media only screen and (max-width: 767px) {
      .slidernom3 .mainslider .slidtrithumb {
        position: absolute;
        top: 49px;
        right: -3%;
        z-index: 9;
        width: 20%;
        height: 90px;
        overflow: hidden;
        transform: rotate(0deg);
        box-shadow: 0 30px 30px rgba(0, 0, 0, .2);
      }
    }




    @media only screen and (max-width: 500px) {
      .slidernom3 .mainslider .slidtrithumb {
        width: 83px;
        height: 110px;
        border-radius: 10px;
        top: 38px;
      }
    }
  </style>
  <script src="https://drakecomic.org/wp-includes/js/wp-emoji-release.min.js?ver=6.8.2" defer=""></script>
</head>

<body class="darkmode wpdiscuz_7.6.34" itemscope="itemscope" itemtype="http://schema.org/WebPage">
  <script>ts_darkmode.init();</script>

  <div class="mainholder">
    <div class="th">
      <div class="centernav bound">

        <div class="shme"><i class="fa fa-bars" aria-hidden="true"></i></div>

        <header role="banner" itemscope="" itemtype="http://schema.org/WPHeader">
          <div class="site-branding logox">
            <span class="logos">
              <a title="Drake Scans - Home" itemprop="url" href="https://drakecomic.org/"><img
                  src="https://drakecomic.org/wp-content/uploads/2025/09/34234-small.png" width="195" height="50"
                  alt="Drake Scans - Home"><span class="hdl">Drake Scans</span></a>
            </span>
            <meta itemprop="name" content="Drake Scans">
          </div>
        </header>

        <nav id="main-menu" class="mm">
          <span itemscope="itemscope" itemtype="http://schema.org/SiteNavigationElement" role="navigation">
            <ul id="menu-header" class="menu">
              <li id="menu-item-10553" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-10553">
                <a href="https://discord.gg/HdyPNm7wJT" itemprop="url"><span itemprop="name"><i
                      class="fa-brands fa-discord"></i> Discord</span></a></li>
              <li id="menu-item-21" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-21"><a
                  href="https://drakecomic.org/bookmarks/" itemprop="url"><span itemprop="name"><i
                      class="fa-solid fa-bookmark"></i> Bookmarks</span></a></li>
              <li id="menu-item-24" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-24"><a
                  href="https://drakecomic.org/manga/?status=&amp;type=&amp;order=" itemprop="url"><span
                    itemprop="name"><i class="fa-solid fa-book-open"></i> Comics</span></a></li>
              <li id="menu-item-37"
                class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-37"><a
                  href="https://drakecomic.org/login/" itemprop="url"><span itemprop="name"><i
                      class="fa-solid fa-right-to-bracket"></i> Login</span></a>
                <ul class="sub-menu">
                  <li id="menu-item-38" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-38"><a
                      href="https://drakecomic.org/register/" itemprop="url"><span itemprop="name"><i
                          class="fa-solid fa-user-plus"></i> Register</span></a></li>
                </ul>
              </li>
            </ul>
          </span>
          <div class="clear"></div>
        </nav>
        <div class="searchx minmb">
          <form action="https://drakecomic.org/" id="form" method="get" itemprop="potentialAction" itemscope=""
            itemtype="http://schema.org/SearchAction">
            <meta itemprop="target" content="https://drakecomic.org/?s={query}">
            <input id="s" itemprop="query-input" class="search-live" type="text" placeholder="Search" name="s"
              autocomplete="off">
            <button type="submit" id="submit" aria-label="search"><i class="fas fa-search"
                aria-hidden="true"></i></button>
            <div class="srcmob srccls"><i class="fas fa-times-circle"></i></div>
          </form>
        </div>

        <div class="srcmob"><i class="fas fa-search" aria-hidden="true"></i></div>

      </div>
      <div class="clear"></div>
    </div>

    <div id="content" class="manga-info mangastyle">


      <div class="wrapper">

        <div class="postbody full">
          <article id="post-17815" class="post-17815 hentry" itemscope="itemscope"
            itemtype="http://schema.org/CreativeWorkSeries">
            <div class="main-info">
              <div class="info-left">
                <div class="info-left-margin">
                  <div class="thumb" itemprop="image" itemscope="" itemtype="https://schema.org/ImageObject">
                    <img width="600" height="900" src="https://drakecomic.org/wp-content/uploads/2025/09/kRxWky.webp"
                      class="attachment- size- wp-post-image" alt="Serpent Ancestor" title="Serpent Ancestor"
                      itemprop="image" decoding="async" fetchpriority="high">
                  </div>
                  <div data-id="17815" class="bookmark"><i class="far fa-bookmark" aria-hidden="true"></i> Bookmark
                  </div>
                  <div class="bmc">
                    Followed by 62 people </div>
                  <div class="rating bixbox">
                    <div class="rating-prc" itemscope="itemscope" itemprop="aggregateRating"
                      itemtype="//schema.org/AggregateRating">
                      <meta itemprop="worstRating" content="1">
                      <meta itemprop="bestRating" content="10">
                      <meta itemprop="ratingCount" content="10">
                      <div class="rtp">
                        <div class="rtb"><span style="width:90%"></span></div>
                      </div>
                      <div class="num" itemprop="ratingValue" content="9">9</div>
                    </div>
                  </div>

                  <div class="tsinfo bixbox">
                    <div class="imptdt">
                      Status <i>Ongoing</i>
                    </div>
                    <div class="imptdt">
                      Type <a href="https://drakecomic.org//?order=title&amp;type=Manhua">Manhua</a>
                    </div>
                    <div class="imptdt">
                      Released <i>2024</i>
                    </div>
                    <div class="imptdt">
                      Author <i>Eternal Sea Studio</i>
                    </div>
                    <div class="imptdt">
                      Artist <i>Eternal Sea Studio</i>
                    </div>
                    <div class="imptdt">
                      Serialization <i>Kuaikan</i>
                    </div>
                    <div class="imptdt">
                      Posted on <i><time itemprop="datePublished" datetime="2025-09-09T10:55:10+00:00">September 9,
                          2025</time></i>
                    </div>
                    <div class="imptdt">
                      Updated on <i><time itemprop="dateModified" datetime="2025-10-04T09:28:37+00:00">October 4,
                          2025</time></i>
                    </div>
                  </div>
                </div>
              </div>
              <div class="info-right">
                <div class="info-desc bixbox">
                  <div id="titledesktop">
                    <div id="titlemove">
                      <h1 class="entry-title" itemprop="name">Serpent Ancestor</h1>
                      <span class="alternative">A Ascensão da Cobra Imortal, Lǎo Shé Xiū Xiān Chuán, Serpent Ancestor,
                        Snake Ancestor, Snake Immortal: The Tale of a Snake's Cultivation to Immortality, Tale of the
                        Old Snake's Immortal Cultivation, The Immortal Art of Becoming A Dragon, The Legend of the Black
                        Snake, 老蛇修仙�, 老蛇修仙传（蛇祖）, 黒蛇の修仙伝説</span>

                    </div>

                  </div>
                  <div class="wd-full"><span class="mgen"><a href="https://drakecomic.org/genres/action/"
                        rel="tag">Action</a> <a href="https://drakecomic.org/genres/fantasy/" rel="tag">Fantasy</a> <a
                        href="https://drakecomic.org/genres/martial-arts/" rel="tag">Martial Arts</a> <a
                        href="https://drakecomic.org/genres/seinen/" rel="tag">Seinen</a></span></div>
                  <div class="wd-full">
                    <h2>Synopsis Serpent Ancestor</h2>
                    <div class="entry-content entry-content-single" itemprop="description">
                      <p>In a village, an old snake inadvertently swallowed a cultivator’s human-shaped pill, gaining
                        intelligence and setting off on the path of cultivation. With only a brief decade to live, the
                        snake does not fear the passing of time but makes the most of every moment.</p>
                    </div>
                  </div>
                </div>



                <style>
                  .series-history-pool {
                    margin: 15px;
                  }
                </style>

                <!-- series history-->
                <div class="bixbox bxcl" id="series-history" style="display:none;">
                  <div class="releases">
                    <h2>Recent reads</h2>
                  </div>
                  <div class="series-history-pool">
                    <ul class="clstyle" id="series-history-ul"></ul>
                  </div>
                </div>
                <span id="series-history-tpl" style="display:none">
                  <li data-id="{{id}}" data-num="{{number}}">
                    <div class="chbox">
                      <div class="eph-num">
                        <a onclick="return series_history.redirect({{id}});" href="#/chapter-{{number}}">
                          <span class="chapternum">Chapter {{number}}</span>
                          <span class="chapterdate">{{date}}</span>
                        </a>
                      </div>
                    </div>
                  </li>
                </span>
                <!-- /series history-->
                <div class="bixbox bxcl epcheck">
                  <div class="releases">
                    <h2>Chapter Serpent Ancestor</h2>
                  </div>

                  <div class="lastend">
                    <div class="inepcx">
                      <a href="https://drakecomic.org/serpent-ancestor-chapter-0/">
                        <span>First chapter</span>
                        <span class="epcur epcurfirst">Chapter 0</span>
                      </a>
                    </div>
                    <div class="inepcx">
                      <a href="https://drakecomic.org/serpent-ancestor-chapter-58/">
                        <span>New chapter</span>
                        <span class="epcur epcurlast">Chapter 58</span>
                      </a>
                    </div>
                  </div>


                  <div class="search-chapter">
                    <input id="searchchapter" type="text" placeholder="Search a chapter. Example: 25 or 178"
                      autocomplete="off">
                  </div>
                  <div class="eplister" id="chapterlist">
                    <ul>
                      <li data-num="58">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-58/">
                              <span class="chapternum" data-post-id="103213">
                                Chapter 58 </span>
                              <span class="chapterdate">October 4, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="57">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-57/">
                              <span class="chapternum" data-post-id="100873">
                                Chapter 57 </span>
                              <span class="chapterdate">September 27, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="56">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-56/">
                              <span class="chapternum" data-post-id="100586">
                                Chapter 56 </span>
                              <span class="chapterdate">September 23, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="55">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-55/">
                              <span class="chapternum" data-post-id="100578">
                                Chapter 55 </span>
                              <span class="chapterdate">September 23, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="54">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-54/">
                              <span class="chapternum" data-post-id="100570">
                                Chapter 54 </span>
                              <span class="chapterdate">September 23, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="53">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-53/">
                              <span class="chapternum" data-post-id="100555">
                                Chapter 53 </span>
                              <span class="chapterdate">September 23, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="52">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-52/">
                              <span class="chapternum" data-post-id="100539">
                                Chapter 52 </span>
                              <span class="chapterdate">September 23, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="51">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-51/">
                              <span class="chapternum" data-post-id="100501">
                                Chapter 51 </span>
                              <span class="chapterdate">September 23, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="50">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-50/">
                              <span class="chapternum" data-post-id="100490">
                                Chapter 50 </span>
                              <span class="chapterdate">September 23, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="49">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-49/">
                              <span class="chapternum" data-post-id="100479">
                                Chapter 49 </span>
                              <span class="chapterdate">September 23, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="48">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-48/">
                              <span class="chapternum" data-post-id="100469">
                                Chapter 48 </span>
                              <span class="chapterdate">September 23, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="47">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-47/">
                              <span class="chapternum" data-post-id="100457">
                                Chapter 47 </span>
                              <span class="chapterdate">September 23, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="46">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-46/">
                              <span class="chapternum" data-post-id="100445">
                                Chapter 46 </span>
                              <span class="chapterdate">September 23, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="45">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-45/">
                              <span class="chapternum" data-post-id="100434">
                                Chapter 45 </span>
                              <span class="chapterdate">September 23, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="44">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-44/">
                              <span class="chapternum" data-post-id="100421">
                                Chapter 44 </span>
                              <span class="chapterdate">September 23, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="43">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-43/">
                              <span class="chapternum" data-post-id="100410">
                                Chapter 43 </span>
                              <span class="chapterdate">September 23, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="42">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-42/">
                              <span class="chapternum" data-post-id="100397">
                                Chapter 42 </span>
                              <span class="chapterdate">September 23, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="41">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-41/">
                              <span class="chapternum" data-post-id="100385">
                                Chapter 41 </span>
                              <span class="chapterdate">September 23, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="40">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-40/">
                              <span class="chapternum" data-post-id="100374">
                                Chapter 40 </span>
                              <span class="chapterdate">September 23, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="39">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-39/">
                              <span class="chapternum" data-post-id="100362">
                                Chapter 39 </span>
                              <span class="chapterdate">September 23, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="38">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-38/">
                              <span class="chapternum" data-post-id="100351">
                                Chapter 38 </span>
                              <span class="chapterdate">September 23, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="37">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-37/">
                              <span class="chapternum" data-post-id="19883">
                                Chapter 37 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="36">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-36/">
                              <span class="chapternum" data-post-id="19868">
                                Chapter 36 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="35">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-35/">
                              <span class="chapternum" data-post-id="19852">
                                Chapter 35 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="34">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-34/">
                              <span class="chapternum" data-post-id="19837">
                                Chapter 34 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="33">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-33/">
                              <span class="chapternum" data-post-id="19819">
                                Chapter 33 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="32">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-32/">
                              <span class="chapternum" data-post-id="19802">
                                Chapter 32 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="31">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-31/">
                              <span class="chapternum" data-post-id="19788">
                                Chapter 31 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="30">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-30/">
                              <span class="chapternum" data-post-id="19770">
                                Chapter 30 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="29">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-29/">
                              <span class="chapternum" data-post-id="19750">
                                Chapter 29 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="28">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-28/">
                              <span class="chapternum" data-post-id="19730">
                                Chapter 28 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="27">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-27/">
                              <span class="chapternum" data-post-id="19711">
                                Chapter 27 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="26">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-26/">
                              <span class="chapternum" data-post-id="19692">
                                Chapter 26 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="25">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-25/">
                              <span class="chapternum" data-post-id="19676">
                                Chapter 25 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="24">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-24/">
                              <span class="chapternum" data-post-id="19658">
                                Chapter 24 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="23">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-23/">
                              <span class="chapternum" data-post-id="19645">
                                Chapter 23 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="22">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-22/">
                              <span class="chapternum" data-post-id="19618">
                                Chapter 22 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="21">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-21/">
                              <span class="chapternum" data-post-id="19604">
                                Chapter 21 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="20">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-20/">
                              <span class="chapternum" data-post-id="19588">
                                Chapter 20 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="19">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-19/">
                              <span class="chapternum" data-post-id="19574">
                                Chapter 19 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="18">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-18/">
                              <span class="chapternum" data-post-id="19559">
                                Chapter 18 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="17">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-17/">
                              <span class="chapternum" data-post-id="19538">
                                Chapter 17 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="16">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-16/">
                              <span class="chapternum" data-post-id="19516">
                                Chapter 16 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="15">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-15/">
                              <span class="chapternum" data-post-id="19494">
                                Chapter 15 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="14">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-14/">
                              <span class="chapternum" data-post-id="19470">
                                Chapter 14 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="13">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-13/">
                              <span class="chapternum" data-post-id="19447">
                                Chapter 13 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="12">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-12/">
                              <span class="chapternum" data-post-id="19422">
                                Chapter 12 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="11">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-11/">
                              <span class="chapternum" data-post-id="19399">
                                Chapter 11 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="10">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-10/">
                              <span class="chapternum" data-post-id="19375">
                                Chapter 10 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="9">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-9/">
                              <span class="chapternum" data-post-id="19352">
                                Chapter 9 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="8">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-8/">
                              <span class="chapternum" data-post-id="19329">
                                Chapter 8 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="7">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-7/">
                              <span class="chapternum" data-post-id="19306">
                                Chapter 7 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="6">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-6/">
                              <span class="chapternum" data-post-id="19283">
                                Chapter 6 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="5">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-5/">
                              <span class="chapternum" data-post-id="19260">
                                Chapter 5 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="4">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-4/">
                              <span class="chapternum" data-post-id="19236">
                                Chapter 4 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="3">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-3/">
                              <span class="chapternum" data-post-id="19203">
                                Chapter 3 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="2">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-2/">
                              <span class="chapternum" data-post-id="19171">
                                Chapter 2 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="1">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-1/">
                              <span class="chapternum" data-post-id="19129">
                                Chapter 1 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                      <li data-num="0" class="first-chapter">
                        <div class="chbox" style="position:relative;">
                          <div class="eph-num">
                            <a href="https://drakecomic.org/serpent-ancestor-chapter-0/">
                              <span class="chapternum" data-post-id="19126">
                                Chapter 0 </span>
                              <span class="chapterdate">September 9, 2025</span>
                            </a>
                          </div>
                        </div>
                      </li>
                    </ul>
                    <link rel="stylesheet"
                      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

                    <style>
                      /* Glow animation for lock icon inside the price badge (desktop and mobile) */
                      .mcl-price-num .mcl-lock-icon {
                        display: inline-block;
                        color: #a8d4ff;
                        /* icon color */
                        text-shadow:
                          0 0 4px rgba(120, 180, 255, .75),
                          0 0 10px rgba(120, 180, 255, .45);
                        filter:
                          drop-shadow(0 0 4px rgba(120, 180, 255, .35)) drop-shadow(0 0 10px rgba(120, 180, 255, .25));
                        animation: mclLockGlow 2.2s ease-in-out infinite;
                        vertical-align: -1px;
                      }

                      @keyframes mclLockGlow {
                        0% {
                          transform: scale(1);
                          text-shadow:
                            0 0 3px rgba(120, 180, 255, .55),
                            0 0 8px rgba(120, 180, 255, .35);
                          filter:
                            drop-shadow(0 0 3px rgba(120, 180, 255, .30)) drop-shadow(0 0 8px rgba(120, 180, 255, .20));
                          opacity: .96;
                        }

                        50% {
                          transform: scale(1.08);
                          text-shadow:
                            0 0 6px rgba(120, 180, 255, .95),
                            0 0 14px rgba(120, 180, 255, .55);
                          filter:
                            drop-shadow(0 0 6px rgba(120, 180, 255, .60)) drop-shadow(0 0 16px rgba(120, 180, 255, .35));
                          opacity: 1;
                        }

                        100% {
                          transform: scale(1);
                          text-shadow:
                            0 0 3px rgba(120, 180, 255, .55),
                            0 0 8px rgba(120, 180, 255, .35);
                          filter:
                            drop-shadow(0 0 3px rgba(120, 180, 255, .30)) drop-shadow(0 0 8px rgba(120, 180, 255, .20));
                          opacity: .96;
                        }
                      }

                      /* Phones only: blur the locked list item content while keeping the lock badge crisp.
   We add a backdrop-blur overlay on li.locked that sits UNDER the price badge. */
                      @media (max-width: 600px) {

                        /* ensure the list item can host the overlay */
                        li.locked {
                          position: relative;
                        }

                        /* backdrop blur overlay */
                        li.locked::before {
                          content: "";
                          position: absolute;
                          inset: 0;
                          border-radius: 10px;
                          pointer-events: none;
                          /* keep links clickable */
                          z-index: 1;
                          /* under the price badge which has z-index: 2 inline */
                          background: rgba(14, 24, 42, 0.25);
                          /* translucent tint for better blur visibility */
                          -webkit-backdrop-filter: blur(1.2px) saturate(110%);
                          backdrop-filter: blur(1.2px) saturate(110%);
                        }

                        /* elevate the price badge above the blur just in case some themes override z-index */
                        li.locked .mcl-price-num {
                          position: absolute;
                          z-index: 3 !important;
                        }
                      }
                    </style>
                  </div>
                </div>
                <div class="ts-breadcrumb bixbox">
                  <div itemscope="" itemtype="http://schema.org/BreadcrumbList">
                    <span itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem">
                      <a itemprop="item" href="https://drakecomic.org/"><span itemprop="name">Drake Scans</span></a>
                      <meta itemprop="position" content="1">
                    </span>
                    ›
                    <span itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem">
                      <a itemprop="item" href="https://drakecomic.org/manga/serpent-ancestor/"><span
                          itemprop="name">Serpent Ancestor</span></a>
                      <meta itemprop="position" content="2">
                    </span>
                  </div>
                </div>
              </div>
            </div>
            <script>
              var chapterSearchNotFound = "No chapter found";
              series_chapters.setFirstChapterData();
              series_chapters.controlSearchInput();

            </script>

            <div class="bixbox">
              <div class="releases">
                <h2><span>Related series</span></h2>
              </div>
              <div class="listupd">
                <div class="bs">
                  <div class="bsx">

                    <a href="https://drakecomic.org/manga/i-the-demon-lord-am-being-targeted-by-my-female-disciples/"
                      title="I, The Demon Lord am being targeted by my female Disciples!">
                      <div class="limit">
                        <div class="ply"></div>
                        <span class="type Manhua"></span>
                        <img src="https://drakecomic.org/wp-content/uploads/2025/09/R82gjz-m-226x300.jpg"
                          class="ts-post-image wp-post-image attachment-medium size-medium" loading="lazy"
                          title="I, The Demon Lord am being targeted by my female Disciples!"
                          alt="I, The Demon Lord am being targeted by my female Disciples!" width="226" height="300">
                      </div>
                      <div class="bigor">
                        <div class="tt">
                          I, The Demon Lord am being targeted by my female Disciples! </div>
                        <div class="adds">
                          <div class="epxs">Chapter 93</div>
                          <div class="rt">
                            <div class="rating">
                              <div class="rating-prc">
                                <div class="rtp">
                                  <div class="rtb"><span style="width:90%"></span></div>
                                </div>
                              </div>
                              <div class="numscore">9</div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </a>
                  </div>
                </div>
                <div class="bs">
                  <div class="bsx">

                    <a href="https://drakecomic.org/manga/golden-core-is-a-star-and-you-call-this-cultivation/"
                      title="Golden Core is a Star, and You Call This Cultivation?">
                      <div class="limit">
                        <div class="ply"></div>
                        <span class="type Manhua"></span>
                        <img src="https://drakecomic.org/wp-content/uploads/2025/10/thumbnail-2-225x300.jpg"
                          class="ts-post-image wp-post-image attachment-medium size-medium" loading="lazy"
                          title="Golden Core is a Star, and You Call This Cultivation?"
                          alt="Golden Core is a Star, and You Call This Cultivation?" width="225" height="300">
                      </div>
                      <div class="bigor">
                        <div class="tt">
                          Golden Core is a Star, and You Call This Cultivation? </div>
                        <div class="adds">
                          <div class="epxs">Chapter 2</div>
                          <div class="rt">
                            <div class="rating">
                              <div class="rating-prc">
                                <div class="rtp">
                                  <div class="rtb"><span style="width:100%"></span></div>
                                </div>
                              </div>
                              <div class="numscore">10</div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </a>
                  </div>
                </div>
                <div class="bs">
                  <div class="bsx">

                    <a href="https://drakecomic.org/manga/global-beast-tamer-i-can-see-the-path-of-evolution/"
                      title="Global Beast Tamer: I Can See the Path of Evolution">
                      <div class="limit">
                        <div class="ply"></div>
                        <span class="type Manhua"></span>
                        <img src="https://drakecomic.org/wp-content/uploads/2025/09/4kOOpO-226x300.webp"
                          class="ts-post-image wp-post-image attachment-medium size-medium" loading="lazy"
                          title="Global Beast Tamer: I Can See the Path of Evolution"
                          alt="Global Beast Tamer: I Can See the Path of Evolution" width="226" height="300">
                      </div>
                      <div class="bigor">
                        <div class="tt">
                          Global Beast Tamer: I Can See the Path of Evolution </div>
                        <div class="adds">
                          <div class="epxs">Chapter 41</div>
                          <div class="rt">
                            <div class="rating">
                              <div class="rating-prc">
                                <div class="rtp">
                                  <div class="rtb"><span style="width:100%"></span></div>
                                </div>
                              </div>
                              <div class="numscore">10</div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </a>
                  </div>
                </div>
                <div class="bs">
                  <div class="bsx">

                    <a href="https://drakecomic.org/manga/the-more-i-die-the-more-invincible-i-become/"
                      title="The More I Die, the More Invincible I Become">
                      <div class="limit">
                        <div class="ply"></div>
                        <span class="type Manhua"></span>
                        <img src="https://drakecomic.org/wp-content/uploads/2025/09/R8277q-m-1-225x300.jpg"
                          class="ts-post-image wp-post-image attachment-medium size-medium" loading="lazy"
                          title="The More I Die, the More Invincible I Become"
                          alt="The More I Die, the More Invincible I Become" width="225" height="300">
                      </div>
                      <div class="bigor">
                        <div class="tt">
                          The More I Die, the More Invincible I Become </div>
                        <div class="adds">
                          <div class="epxs">Chapter 65</div>
                          <div class="rt">
                            <div class="rating">
                              <div class="rating-prc">
                                <div class="rtp">
                                  <div class="rtb"><span style="width:100%"></span></div>
                                </div>
                              </div>
                              <div class="numscore">10</div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </a>
                  </div>
                </div>
                <div class="bs">
                  <div class="bsx">

                    <a href="https://drakecomic.org/manga/i-build-an-industrial-empire-on-the-magic-continent/"
                      title="I Build an Industrial Empire on the Magic Continent">
                      <div class="limit">
                        <div class="ply"></div>
                        <span class="type Manhua"></span>
                        <img src="https://drakecomic.org/wp-content/uploads/2025/09/7yKegd-225x300.webp"
                          class="ts-post-image wp-post-image attachment-medium size-medium" loading="lazy"
                          title="I Build an Industrial Empire on the Magic Continent"
                          alt="I Build an Industrial Empire on the Magic Continent" width="225" height="300">
                      </div>
                      <div class="bigor">
                        <div class="tt">
                          I Build an Industrial Empire on the Magic Continent </div>
                        <div class="adds">
                          <div class="epxs">Chapter 54</div>
                          <div class="rt">
                            <div class="rating">
                              <div class="rating-prc">
                                <div class="rtp">
                                  <div class="rtb"><span style="width:90%"></span></div>
                                </div>
                              </div>
                              <div class="numscore">9</div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </a>
                  </div>
                </div>
                <div class="bs">
                  <div class="bsx">

                    <a href="https://drakecomic.org/manga/logging-10000-years-into-the-future/"
                      title="Logging 10,000 Years into the Future">
                      <div class="limit">
                        <div class="ply"></div>
                        <span class="type Manhua"></span>
                        <img src="https://drakecomic.org/wp-content/uploads/2025/09/aagWOY-m-226x300.jpg"
                          class="ts-post-image wp-post-image attachment-medium size-medium" loading="lazy"
                          title="Logging 10,000 Years into the Future" alt="Logging 10,000 Years into the Future"
                          width="226" height="300">
                      </div>
                      <div class="bigor">
                        <div class="tt">
                          Logging 10,000 Years into the Future </div>
                        <div class="adds">
                          <div class="epxs">Chapter 260</div>
                          <div class="rt">
                            <div class="rating">
                              <div class="rating-prc">
                                <div class="rtp">
                                  <div class="rtb"><span style="width:100%"></span></div>
                                </div>
                              </div>
                              <div class="numscore">10</div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </a>
                  </div>
                </div>
                <div class="bs">
                  <div class="bsx">

                    <a href="https://drakecomic.org/manga/i-shall-seal-the-heavens/" title="I Shall Seal the Heavens">
                      <div class="limit">
                        <div class="ply"></div>
                        <span class="type Manhua"></span>
                        <img src="https://drakecomic.org/wp-content/uploads/2025/09/thumbnail-7.jpg"
                          class="ts-post-image wp-post-image attachment-medium size-medium" loading="lazy"
                          title="I Shall Seal the Heavens" alt="I Shall Seal the Heavens" width="210" height="280">
                      </div>
                      <div class="bigor">
                        <div class="tt">
                          I Shall Seal the Heavens </div>
                        <div class="adds">
                          <div class="epxs">Chapter 5</div>
                          <div class="rt">
                            <div class="rating">
                              <div class="rating-prc">
                                <div class="rtp">
                                  <div class="rtb"><span style="width:100%"></span></div>
                                </div>
                              </div>
                              <div class="numscore">10</div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </a>
                  </div>
                </div>
              </div>
            </div>
            <div id="comments" class="bixbox comments-area">
              <div class="releases">
                <h2><span>Comments</span></h2>
              </div>
              <div class="cmt commentx">
                <div class="wpdiscuz_top_clearing"></div>
                <div id="comments" class="comments-area">
                  <div id="respond" style="width: 0;height: 0;clear: both;margin: 0;padding: 0;"></div>
                  <div id="wpd-post-rating" class="wpd-not-rated">
                    <div class="wpd-rating-wrap">
                      <div class="wpd-rating-left"></div>
                      <div class="wpd-rating-data">
                        <div class="wpd-rating-value">
                          <span class="wpdrv">5</span>
                          <span class="wpdrc">2</span>
                          <span class="wpdrt">votes</span>
                        </div>
                        <div class="wpd-rating-title">Article Rating</div>
                        <div class="wpd-rating-stars"><svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24">
                            <path d="M0 0h24v24H0z" fill="none"></path>
                            <path class="wpd-star wpd-active"
                              d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z">
                            </path>
                            <path d="M0 0h24v24H0z" fill="none"></path>
                          </svg><svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24">
                            <path d="M0 0h24v24H0z" fill="none"></path>
                            <path class="wpd-star wpd-active"
                              d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z">
                            </path>
                            <path d="M0 0h24v24H0z" fill="none"></path>
                          </svg><svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24">
                            <path d="M0 0h24v24H0z" fill="none"></path>
                            <path class="wpd-star wpd-active"
                              d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z">
                            </path>
                            <path d="M0 0h24v24H0z" fill="none"></path>
                          </svg><svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24">
                            <path d="M0 0h24v24H0z" fill="none"></path>
                            <path class="wpd-star wpd-active"
                              d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z">
                            </path>
                            <path d="M0 0h24v24H0z" fill="none"></path>
                          </svg><svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24">
                            <path d="M0 0h24v24H0z" fill="none"></path>
                            <path class="wpd-star wpd-active"
                              d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z">
                            </path>
                            <path d="M0 0h24v24H0z" fill="none"></path>
                          </svg></div>
                        <div class="wpd-rate-starts"><svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24">
                            <path d="M0 0h24v24H0z" fill="none"></path>
                            <path class="wpd-star"
                              d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z">
                            </path>
                            <path d="M0 0h24v24H0z" fill="none"></path>
                          </svg><svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24">
                            <path d="M0 0h24v24H0z" fill="none"></path>
                            <path class="wpd-star"
                              d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z">
                            </path>
                            <path d="M0 0h24v24H0z" fill="none"></path>
                          </svg><svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24">
                            <path d="M0 0h24v24H0z" fill="none"></path>
                            <path class="wpd-star"
                              d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z">
                            </path>
                            <path d="M0 0h24v24H0z" fill="none"></path>
                          </svg><svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24">
                            <path d="M0 0h24v24H0z" fill="none"></path>
                            <path class="wpd-star"
                              d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z">
                            </path>
                            <path d="M0 0h24v24H0z" fill="none"></path>
                          </svg><svg xmlns="https://www.w3.org/2000/svg" viewBox="0 0 24 24">
                            <path d="M0 0h24v24H0z" fill="none"></path>
                            <path class="wpd-star"
                              d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z">
                            </path>
                            <path d="M0 0h24v24H0z" fill="none"></path>
                          </svg></div>
                      </div>
                      <div class="wpd-rating-right"></div>
                    </div>
                  </div>
                  <div id="wpdcom" class="wpdiscuz_unauth wpd-dark wpd-layout-2 wpd-comments-open">
                    <div class="wc_social_plugin_wrapper">
                    </div>
                    <div class="wpd-form-wrap">
                      <div class="wpd-form-head">
                        <div class="wpd-sbs-toggle">
                          <i class="far fa-envelope"></i> <span class="wpd-sbs-title">Subscribe</span>
                          <i class="fas fa-caret-down"></i>
                        </div>
                        <div class="wpd-auth">
                          <div class="wpd-login">
                            <a rel="nofollow"
                              href="https://drakecomic.org/wp-login.php?redirect_to=https%3A%2F%2Fdrakecomic.org%2Fmanga%2Fserpent-ancestor%2F"><i
                                class="fas fa-sign-in-alt"></i> Login</a>
                          </div>
                        </div>
                      </div>
                      <div class="wpdiscuz-subscribe-bar wpdiscuz-hidden">
                        <form action="https://drakecomic.org/wp-admin/admin-ajax.php?action=wpdAddSubscription"
                          method="post" id="wpdiscuz-subscribe-form">
                          <div class="wpdiscuz-subscribe-form-intro">Notify of </div>
                          <div class="wpdiscuz-subscribe-form-option" style="width:40%;">
                            <select class="wpdiscuz_select" name="wpdiscuzSubscriptionType">
                              <option value="post">new follow-up comments</option>
                              <option value="all_comment">new replies to my comments</option>
                            </select>
                          </div>
                          <div class="wpdiscuz-item wpdiscuz-subscribe-form-email">
                            <input class="email" type="email" name="wpdiscuzSubscriptionEmail" required="required"
                              value="" placeholder="Email">
                          </div>
                          <div class="wpdiscuz-subscribe-form-button">
                            <input id="wpdiscuz_subscription_button" class="wpd-prim-button wpd_not_clicked"
                              type="submit" value="›" name="wpdiscuz_subscription_button">
                          </div>
                          <input type="hidden" id="wpdiscuz_subscribe_form_nonce" name="wpdiscuz_subscribe_form_nonce"
                            value="7cf82f343c"><input type="hidden" name="_wp_http_referer"
                            value="/manga/serpent-ancestor/">
                        </form>
                      </div>
                      <div class="wpd-form wpd-form-wrapper wpd-main-form-wrapper" id="wpd-main-form-wrapper-0_0">
                        <form method="post" enctype="multipart/form-data" data-uploading="false"
                          class="wpd_comm_form wpd_main_comm_form">
                          <div class="wpd-field-comment">
                            <div class="wpdiscuz-item wc-field-textarea">
                              <div class="wpdiscuz-textarea-wrap ">
                                <div class="wpd-avatar">
                                  <img alt="guest"
                                    src="https://secure.gravatar.com/avatar/56e864bcf8b9050bdf021fdeebc14d02ea37aa678dcd93ceb84e1e7e59486985?s=56&amp;d=mm&amp;r=g"
                                    srcset="https://secure.gravatar.com/avatar/56e864bcf8b9050bdf021fdeebc14d02ea37aa678dcd93ceb84e1e7e59486985?s=112&amp;d=mm&amp;r=g 2x"
                                    class="avatar avatar-56 photo" height="56" width="56" decoding="async">
                                </div>
                                <div id="wpd-editor-wraper-0_0" style="">

                                  <label style="display: none;" for="wc-textarea-0_0">Label</label>

                                  <div id="wpd-editor-0_0" class="ql-container ql-snow">
                                    <div class="ql-editor ql-blank" data-gramm="false" contenteditable="true"
                                      data-placeholder="Be the First to Comment!">
                                      <p><br></p>
                                    </div>
                                    <div class="ql-clipboard" contenteditable="true" tabindex="-1"></div>
                                    <div class="ql-tooltip ql-hidden"><a class="ql-preview" target="_blank"
                                        href="about:blank"></a><input type="text" data-formula="e=mc^2"
                                        data-link="https://example.com" data-video="Embed URL"><a
                                        class="ql-action"></a><a class="ql-remove"></a></div>
                                    <div class="ql-texteditor"><textarea id="wc-textarea-0_0" name="wc_comment"
                                        class="wc_comment wpd-field" style="display: none;"></textarea></div>
                                  </div>
                                  <div id="wpd-editor-toolbar-0_0" class="ql-toolbar ql-snow">
                                    <button title="Bold" class="ql-bold" type="button"><svg viewBox="0 0 18 18">
                                        <path class="ql-stroke"
                                          d="M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z">
                                        </path>
                                        <path class="ql-stroke"
                                          d="M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z">
                                        </path>
                                      </svg></button>
                                    <button title="Italic" class="ql-italic" type="button"><svg viewBox="0 0 18 18">
                                        <line class="ql-stroke" x1="7" x2="13" y1="4" y2="4"></line>
                                        <line class="ql-stroke" x1="5" x2="11" y1="14" y2="14"></line>
                                        <line class="ql-stroke" x1="8" x2="10" y1="14" y2="4"></line>
                                      </svg></button>
                                    <button title="Underline" class="ql-underline" type="button"><svg
                                        viewBox="0 0 18 18">
                                        <path class="ql-stroke"
                                          d="M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3"></path>
                                        <rect class="ql-fill" height="1" rx="0.5" ry="0.5" width="12" x="3" y="15">
                                        </rect>
                                      </svg></button>
                                    <button title="Strike" class="ql-strike" type="button"><svg viewBox="0 0 18 18">
                                        <line class="ql-stroke ql-thin" x1="15.5" x2="2.5" y1="8.5" y2="9.5"></line>
                                        <path class="ql-fill"
                                          d="M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z">
                                        </path>
                                        <path class="ql-fill"
                                          d="M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z">
                                        </path>
                                      </svg></button>
                                    <button title="Ordered List" class="ql-list" value="ordered" type="button"><svg
                                        viewBox="0 0 18 18">
                                        <line class="ql-stroke" x1="7" x2="15" y1="4" y2="4"></line>
                                        <line class="ql-stroke" x1="7" x2="15" y1="9" y2="9"></line>
                                        <line class="ql-stroke" x1="7" x2="15" y1="14" y2="14"></line>
                                        <line class="ql-stroke ql-thin" x1="2.5" x2="4.5" y1="5.5" y2="5.5"></line>
                                        <path class="ql-fill"
                                          d="M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z">
                                        </path>
                                        <path class="ql-stroke ql-thin"
                                          d="M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156">
                                        </path>
                                        <path class="ql-stroke ql-thin"
                                          d="M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109">
                                        </path>
                                      </svg></button>
                                    <button title="Unordered List" class="ql-list" value="bullet" type="button"><svg
                                        viewBox="0 0 18 18">
                                        <line class="ql-stroke" x1="6" x2="15" y1="4" y2="4"></line>
                                        <line class="ql-stroke" x1="6" x2="15" y1="9" y2="9"></line>
                                        <line class="ql-stroke" x1="6" x2="15" y1="14" y2="14"></line>
                                        <line class="ql-stroke" x1="3" x2="3" y1="4" y2="4"></line>
                                        <line class="ql-stroke" x1="3" x2="3" y1="9" y2="9"></line>
                                        <line class="ql-stroke" x1="3" x2="3" y1="14" y2="14"></line>
                                      </svg></button>
                                    <button title="Blockquote" class="ql-blockquote" type="button"><svg
                                        viewBox="0 0 18 18">
                                        <rect class="ql-fill ql-stroke" height="3" width="3" x="4" y="5"></rect>
                                        <rect class="ql-fill ql-stroke" height="3" width="3" x="11" y="5"></rect>
                                        <path class="ql-even ql-fill ql-stroke" d="M7,8c0,4.031-3,5-3,5"></path>
                                        <path class="ql-even ql-fill ql-stroke" d="M14,8c0,4.031-3,5-3,5"></path>
                                      </svg></button>
                                    <button title="Code Block" class="ql-code-block" type="button"><svg
                                        viewBox="0 0 18 18">
                                        <polyline class="ql-even ql-stroke" points="5 7 3 9 5 11"></polyline>
                                        <polyline class="ql-even ql-stroke" points="13 7 15 9 13 11"></polyline>
                                        <line class="ql-stroke" x1="10" x2="8" y1="5" y2="13"></line>
                                      </svg></button>
                                    <button title="Link" class="ql-link" type="button"><svg viewBox="0 0 18 18">
                                        <line class="ql-stroke" x1="7" x2="11" y1="7" y2="11"></line>
                                        <path class="ql-even ql-stroke"
                                          d="M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z">
                                        </path>
                                        <path class="ql-even ql-stroke"
                                          d="M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z">
                                        </path>
                                      </svg></button>
                                    <button title="Source Code" class="ql-sourcecode" data-wpde_button_name="sourcecode"
                                      type="button">{}</button>
                                    <button title="Spoiler" class="ql-spoiler" data-wpde_button_name="spoiler"
                                      type="button">[+]</button>
                                    <div class="wpd-editor-buttons-right">
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                          <div class="wpd-form-foot" style="display:none;">
                            <div class="wpdiscuz-textarea-foot">
                              <div class="wpdiscuz-button-actions"></div>
                            </div>
                            <div class="wpd-form-row">
                              <div class="wpd-form-col-left">
                                <div class="wpdiscuz-item wc_name-wrapper wpd-has-icon">
                                  <div class="wpd-field-icon"><i class="fas fa-user"></i>
                                  </div>
                                  <input id="wc_name-0_0" value="" required="required" aria-required="true"
                                    class="wc_name wpd-field" type="text" name="wc_name" placeholder="Name*"
                                    maxlength="50" pattern=".{3,50}" title="">
                                  <label for="wc_name-0_0" class="wpdlb">Name*</label>
                                </div>
                                <div class="wpdiscuz-item wc_email-wrapper wpd-has-icon">
                                  <div class="wpd-field-icon"><i class="fas fa-at"></i>
                                  </div>
                                  <input id="wc_email-0_0" value="" required="required" aria-required="true"
                                    class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
                                  <label for="wc_email-0_0" class="wpdlb">Email*</label>
                                </div>
                                <div class="wpdiscuz-item wc_website-wrapper wpd-has-icon">
                                  <div class="wpd-field-icon"><i class="fas fa-link"></i>
                                  </div>
                                  <input id="wc_website-0_0" value="" class="wc_website wpd-field" type="text"
                                    name="wc_website" placeholder="Website">
                                  <label for="wc_website-0_0" class="wpdlb">Website</label>
                                </div>
                              </div>
                              <div class="wpd-form-col-right">
                                <div class="wc-field-submit">
                                  <label class="wpd_label" wpd-tooltip="Notify of new replies to this comment">
                                    <input id="wc_notification_new_comment-0_0"
                                      class="wc_notification_new_comment-0_0 wpd_label__checkbox" value="comment"
                                      type="checkbox" name="wpdiscuz_notification_type">
                                    <span class="wpd_label__text">
                                      <span class="wpd_label__check">
                                        <i class="fas fa-bell wpdicon wpdicon-on"></i>
                                        <i class="fas fa-bell-slash wpdicon wpdicon-off"></i>
                                      </span>
                                    </span>
                                  </label>
                                  <input id="wpd-field-submit-0_0"
                                    class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit"
                                    value="Post Comment" aria-label="Post Comment">
                                </div>
                              </div>
                              <div class="clearfix"></div>
                            </div>
                          </div>
                          <input type="hidden" class="wpdiscuz_unique_id" value="0_0" name="wpdiscuz_unique_id">
                        </form>
                      </div>
                      <div id="wpdiscuz_hidden_secondary_form" style="display: none;">
                        <div class="wpd-form wpd-form-wrapper wpd-secondary-form-wrapper"
                          id="wpd-secondary-form-wrapper-wpdiscuzuniqueid" style="display: none;">
                          <div class="wpd-secondary-forms-social-content"></div>
                          <div class="clearfix"></div>
                          <form method="post" enctype="multipart/form-data" data-uploading="false"
                            class="wpd_comm_form wpd-secondary-form-wrapper">
                            <div class="wpd-field-comment">
                              <div class="wpdiscuz-item wc-field-textarea">
                                <div class="wpdiscuz-textarea-wrap ">
                                  <div class="wpd-avatar">
                                    <img alt="guest"
                                      src="https://secure.gravatar.com/avatar/238758b6032c57f5644ff264e860c4dcff493135c40c51933f60deef289227ce?s=56&amp;d=mm&amp;r=g"
                                      srcset="https://secure.gravatar.com/avatar/238758b6032c57f5644ff264e860c4dcff493135c40c51933f60deef289227ce?s=112&amp;d=mm&amp;r=g 2x"
                                      class="avatar avatar-56 photo" height="56" width="56" decoding="async">
                                  </div>
                                  <div id="wpd-editor-wraper-wpdiscuzuniqueid" style="display: none;">
                                    <div id="wpd-editor-char-counter-wpdiscuzuniqueid" class="wpd-editor-char-counter">
                                    </div>
                                    <label style="display: none;" for="wc-textarea-wpdiscuzuniqueid">Label</label>
                                    <textarea id="wc-textarea-wpdiscuzuniqueid" name="wc_comment"
                                      class="wc_comment wpd-field"></textarea>
                                    <div id="wpd-editor-wpdiscuzuniqueid"></div>
                                    <div id="wpd-editor-toolbar-wpdiscuzuniqueid">
                                      <button title="Bold" class="ql-bold"></button>
                                      <button title="Italic" class="ql-italic"></button>
                                      <button title="Underline" class="ql-underline"></button>
                                      <button title="Strike" class="ql-strike"></button>
                                      <button title="Ordered List" class="ql-list" value="ordered"></button>
                                      <button title="Unordered List" class="ql-list" value="bullet"></button>
                                      <button title="Blockquote" class="ql-blockquote"></button>
                                      <button title="Code Block" class="ql-code-block"></button>
                                      <button title="Link" class="ql-link"></button>
                                      <button title="Source Code" class="ql-sourcecode"
                                        data-wpde_button_name="sourcecode">{}</button>
                                      <button title="Spoiler" class="ql-spoiler"
                                        data-wpde_button_name="spoiler">[+]</button>
                                      <div class="wpd-editor-buttons-right">
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                            <div class="wpd-form-foot" style="display:none;">
                              <div class="wpdiscuz-textarea-foot">
                                <div class="wpdiscuz-button-actions"></div>
                              </div>
                              <div class="wpd-form-row">
                                <div class="wpd-form-col-left">
                                  <div class="wpdiscuz-item wc_name-wrapper wpd-has-icon">
                                    <div class="wpd-field-icon"><i class="fas fa-user"></i>
                                    </div>
                                    <input id="wc_name-wpdiscuzuniqueid" value="" required="required"
                                      aria-required="true" class="wc_name wpd-field" type="text" name="wc_name"
                                      placeholder="Name*" maxlength="50" pattern=".{3,50}" title="">
                                    <label for="wc_name-wpdiscuzuniqueid" class="wpdlb">Name*</label>
                                  </div>
                                  <div class="wpdiscuz-item wc_email-wrapper wpd-has-icon">
                                    <div class="wpd-field-icon"><i class="fas fa-at"></i>
                                    </div>
                                    <input id="wc_email-wpdiscuzuniqueid" value="" required="required"
                                      aria-required="true" class="wc_email wpd-field" type="email" name="wc_email"
                                      placeholder="Email*">
                                    <label for="wc_email-wpdiscuzuniqueid" class="wpdlb">Email*</label>
                                  </div>
                                  <div class="wpdiscuz-item wc_website-wrapper wpd-has-icon">
                                    <div class="wpd-field-icon"><i class="fas fa-link"></i>
                                    </div>
                                    <input id="wc_website-wpdiscuzuniqueid" value="" class="wc_website wpd-field"
                                      type="text" name="wc_website" placeholder="Website">
                                    <label for="wc_website-wpdiscuzuniqueid" class="wpdlb">Website</label>
                                  </div>
                                </div>
                                <div class="wpd-form-col-right">
                                  <div class="wc-field-submit">
                                    <label class="wpd_label" wpd-tooltip="Notify of new replies to this comment">
                                      <input id="wc_notification_new_comment-wpdiscuzuniqueid"
                                        class="wc_notification_new_comment-wpdiscuzuniqueid wpd_label__checkbox"
                                        value="comment" type="checkbox" name="wpdiscuz_notification_type">
                                      <span class="wpd_label__text">
                                        <span class="wpd_label__check">
                                          <i class="fas fa-bell wpdicon wpdicon-on"></i>
                                          <i class="fas fa-bell-slash wpdicon wpdicon-off"></i>
                                        </span>
                                      </span>
                                    </label>
                                    <input id="wpd-field-submit-wpdiscuzuniqueid"
                                      class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit"
                                      value="Post Comment" aria-label="Post Comment">
                                  </div>
                                </div>
                                <div class="clearfix"></div>
                              </div>
                            </div>
                            <input type="hidden" class="wpdiscuz_unique_id" value="wpdiscuzuniqueid"
                              name="wpdiscuz_unique_id">
                          </form>
                        </div>
                      </div>
                    </div>
                    <div id="wpd-threads" class="wpd-thread-wrapper">
                      <div class="wpd-thread-head">
                        <div class="wpd-thread-info " data-comments-count="0">
                          <span class="wpdtc" title="0">0</span> Comments
                        </div>
                        <div class="wpd-space"></div>
                        <div class="wpd-thread-filter">
                          <div class="wpd-filter wpdf-reacted wpd_not_clicked wpdiscuz-hidden"
                            wpd-tooltip="Most reacted comment">
                            <i class="fas fa-bolt"></i>
                          </div>
                          <div class="wpd-filter wpdf-hottest wpd_not_clicked wpdiscuz-hidden"
                            wpd-tooltip="Hottest comment thread">
                            <i class="fas fa-fire"></i>
                          </div>
                          <div class="wpd-filter wpdf-sorting wpdiscuz-hidden">
                            <span class="wpdiscuz-sort-button wpdiscuz-date-sort-asc wpdiscuz-sort-button-active"
                              data-sorting="oldest">Oldest</span>
                            <i class="fas fa-sort-down"></i>
                            <div class="wpdiscuz-sort-buttons">
                              <span class="wpdiscuz-sort-button wpdiscuz-date-sort-desc"
                                data-sorting="newest">Newest</span>
                              <span class="wpdiscuz-sort-button wpdiscuz-vote-sort-up" data-sorting="by_vote">Most
                                Voted</span>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class="wpd-comment-info-bar">
                        <div class="wpd-current-view"><i class="fas fa-quote-left"></i> Inline Feedbacks </div>
                        <div class="wpd-filter-view-all">View all comments</div>
                      </div>
                      <div class="wpd-thread-list">
                        <!-- // From wpDiscuz's Caches // -->
                        <div class="wpdiscuz-comment-pagination">
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div id="wpdiscuz-loading-bar" class="wpdiscuz-loading-bar-unauth"></div>
                <div id="wpdiscuz-comment-message" class="wpdiscuz-comment-message-unauth"></div>
              </div>
            </div>
            <span style="display: none;" itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization">
              <span style="display: none;" itemprop="logo" itemscope="" itemtype="https://schema.org/ImageObject">
                <meta itemprop="url" content="https://drakecomic.org/wp-content/uploads/2025/09/34234-small.png">
              </span>
              <meta itemprop="name" content="Drake Scans">
            </span>
          </article>
        </div>

        <script>
          if ("tsMedia" in window) {
            tsMedia(tsmmedia);
          } else {
            jQuery(document).ready(function () {
              tsMedia(tsmmedia);
            });
          }
        </script>

        <style>
          .series-bg-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -2;
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            filter: blur(20px);
            opacity: 0.3;
          }

          /* تأثير Vignette */
          body::after {
            content: "";
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
            background: radial-gradient(ellipse at center, rgba(0, 0, 0, 0) 20%, rgba(0, 0, 0, 0.5) 100%);
          }

          .postbody.full {
            position: relative;
            background: rgba(255, 255, 255, 0.9);
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
          }
        </style>


        <div class="series-bg-container">
          <style>
            .series-bg-container {
              background-image: url("https://drakecomic.org/wp-content/uploads/2025/09/kRxWky.webp");
            }
          </style>
        </div>

        <div class="postbody full">
          <article id="post-17815" class="post-17815 hentry" itemscope="itemscope"
            itemtype="http://schema.org/CreativeWorkSeries">
          </article>
        </div>

        <script>
          if ("tsMedia" in window) {
            tsMedia(tsmmedia);
          } else {
            jQuery(document).ready(function () {
              tsMedia(tsmmedia);
            });
          }
        </script>
        <script>
          ts_dynamic_ajax_view(17815)
            .then(function (resp) {
              if (!resp) return;
              if ("views" in resp === false) return;
              var view_count_element = jQuery('.ts-views-count');
              if (view_count_element.length) view_count_element.html(resp.views);
            });
        </script>
      </div>
    </div>
    <div id="footer">
      <footer id="colophon" class="site-footer" itemscope="itemscope" itemtype="http://schema.org/WPFooter"
        role="contentinfo">
        <div class="footercopyright">
          <div class="sosmedmrgn"></div>
          <div class="copyright">
            <div class="txt">
              <p>All the manga on this site are only previews of the original versions; there may be errors in language,
                character names, or plot. For the original version, please purchase the manga if it is available in your
                city.</p>
            </div>
          </div>
        </div>
      </footer>
    </div>
    <div id="live-search_sb" class="live-search_sb" style="position:absolute;display:none;width:350px;z-index:9999">
      <div class="live-search_sb_cont">
        <div class="live-search_sb_top"></div>
        <div id="live-search_results" style="width:100%">
          <div id="live-search_val"></div>
          <div id="live-search_more"></div>
        </div>
        <div class="live-search_sb_bottom"></div>
      </div>
    </div>
  </div>

  <div id="um_upload_single" style="display:none;"></div>

  <div id="um_view_photo" style="display:none;">
    <a href="javascript:void(0);" data-action="um_remove_modal" class="um-modal-close"
      aria-label="Close view photo modal">
      <i class="um-faicon-times"></i>
    </a>

    <div class="um-modal-body photo">
      <div class="um-modal-photo"></div>
    </div>
  </div>
  <script type="speculationrules">
{"prefetch":[{"source":"document","where":{"and":[{"href_matches":"\/*"},{"not":{"href_matches":["\/wp-*.php","\/wp-admin\/*","\/wp-content\/uploads\/*","\/wp-content\/*","\/wp-content\/plugins\/*","\/wp-content\/themes\/mangareader\/*","\/*\\?(.+)"]}},{"not":{"selector_matches":"a[rel~=\"nofollow\"]"}},{"not":{"selector_matches":".no-prefetch, .no-prefetch a"}}]},"eagerness":"conservative"}]}
</script>
  <script>series_history.run(17815, { "prefixAgo": "", "prefixFromNow": "", "suffixAgo": "ago", "suffixFromNow": "from now", "seconds": "less than a minute", "minute": "about a minute", "minutes": "%d minutes", "hour": "about an hour", "hours": "about %d hours", "day": "a day", "days": "%d days", "month": "about a month", "months": "%d months", "year": "about a year", "years": "%d years" });</script>
  <span class="scrollToTop"><span class="fas fa-angle-up"></span></span>


  <script>
    $(document).ready(function () {
      $('.owl-carousel').owlCarousel({
        stagePadding: 50,
        loop: true,
        margin: 10,
        responsive: {
          0: {
            items: 1
          },
          600: {
            items: 4
          },
          1000: {
            items: 4
          }
        }
      });
    });

    var isGalleryDragging = false;
    $("#gallery").on("mousedown touchstart", function () {
      isGalleryDragging = false;
    }).on("mousemove touchmove", function () {
      isGalleryDragging = true;
    }).on("mouseup touchend", function (event) {
      event.preventDefault();
      var wasGallerDragging = isGalleryDragging;
      isGalleryDragging = false;
      if (!wasGallerDragging) {
        event = event || window.event;
        var target = event.target || event.srcElement;
        var link = target.src ? target.parentNode : target;
        var options = { index: link, event: event };
        var links = this.getElementsByTagName('a');
        blueimp.Gallery(links, options);
      }
    });
    $("#gallery a").on("click", function () { return false; });
  </script>
  <div id="blueimp-gallery" class="blueimp-gallery blueimp-gallery-controls">
    <div class="slides"></div>
    <h3 class="title"></h3>
    <span class="prev">‹</span>
    <span class="next">›</span>
    <span class="close">×</span>
    <span class="play-pause"></span>
    <ol class="indicator"></ol>
  </div>
  <script>ts_darkmode.listen();</script>

  <script>
    jQuery.event.special.touchstart = {
      setup: function (_, ns, handle) {
        this.addEventListener("touchstart", handle, { passive: !ns.includes("noPreventDefault") });
      }
    };
    jQuery.event.special.touchmove = {
      setup: function (_, ns, handle) {
        this.addEventListener("touchmove", handle, { passive: !ns.includes("noPreventDefault") });
      }
    };
    jQuery.event.special.wheel = {
      setup: function (_, ns, handle) {
        this.addEventListener("wheel", handle, { passive: true });
      }
    };
    jQuery.event.special.mousewheel = {
      setup: function (_, ns, handle) {
        this.addEventListener("mousewheel", handle, { passive: true });
      }
    };
  </script>
  <span id="wpdUserContentInfoAnchor" style="display:none;" rel="#wpdUserContentInfo" data-wpd-lity="">wpDiscuz</span>
  <div id="wpdUserContentInfo"
    style="overflow:auto;background:#FDFDF6;padding:20px;width:600px;max-width:100%;border-radius:6px;"
    class="lity-hide"></div>
  <div id="wpd-editor-source-code-wrapper-bg"></div>
  <div id="wpd-editor-source-code-wrapper"><textarea id="wpd-editor-source-code"></textarea><button
      id="wpd-insert-source-code">Insert</button><input type="hidden" id="wpd-editor-uid"></div>
  <link rel="stylesheet" id="ts-fontawesome-css"
    href="https://drakecomic.org/wp-content/themes/mangareader/assets/css/font-awesome.min.css?ver=5.13.0"
    type="text/css" media="all">
  <link rel="stylesheet" id="ts-owl-carousel-css"
    href="https://drakecomic.org/wp-content/themes/mangareader/assets/css/owl.carousel.css?ver=1.0.0" type="text/css"
    media="all">
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/themes/mangareader/assets/js/filter.js?ver=2.2.0" id="ts-filter-js"></script>
  <script type="text/javascript" id="wpdiscuz-combo-js-js-extra">
    /* <![CDATA[ */
    var wpdiscuzAjaxObj = { "wc_hide_replies_text": "Hide Replies", "wc_show_replies_text": "View Replies", "wc_msg_required_fields": "Please fill out required fields", "wc_invalid_field": "Some of field value is invalid", "wc_error_empty_text": "please fill out this field to comment", "wc_error_url_text": "url is invalid", "wc_error_email_text": "email address is invalid", "wc_invalid_captcha": "Invalid Captcha Code", "wc_login_to_vote": "You Must Be Logged In To Vote", "wc_deny_voting_from_same_ip": "You are not allowed to vote for this comment", "wc_self_vote": "You cannot vote for your comment", "wc_vote_only_one_time": "You've already voted for this comment", "wc_voting_error": "Voting Error", "wc_banned_user": "You are banned", "wc_comment_edit_not_possible": "Sorry, this comment is no longer possible to edit", "wc_comment_not_updated": "Sorry, the comment was not updated", "wc_comment_not_edited": "You've not made any changes", "wc_msg_input_min_length": "Input is too short", "wc_msg_input_max_length": "Input is too long", "wc_spoiler_title": "Spoiler Title", "wc_cannot_rate_again": "You cannot rate again", "wc_not_allowed_to_rate": "You're not allowed to rate here", "wc_confirm_rate_edit": "Are you sure you want to edit your rate?", "wc_follow_user": "Follow this user", "wc_unfollow_user": "Unfollow this user", "wc_follow_success": "You started following this comment author", "wc_follow_canceled": "You stopped following this comment author.", "wc_follow_email_confirm": "Please check your email and confirm the user following request.", "wc_follow_email_confirm_fail": "Sorry, we couldn't send confirmation email.", "wc_follow_login_to_follow": "Please login to follow users.", "wc_follow_impossible": "We are sorry, but you can't follow this user.", "wc_follow_not_added": "Following failed. Please try again later.", "is_user_logged_in": "", "commentListLoadType": "0", "commentListUpdateType": "0", "commentListUpdateTimer": "60", "liveUpdateGuests": "0", "wordpressThreadCommentsDepth": "5", "wordpressIsPaginate": "0", "commentTextMaxLength": "0", "replyTextMaxLength": "0", "commentTextMinLength": "1", "replyTextMinLength": "1", "storeCommenterData": "100000", "socialLoginAgreementCheckbox": "1", "enableFbLogin": "0", "fbUseOAuth2": "0", "enableFbShare": "0", "facebookAppID": "", "facebookUseOAuth2": "0", "enableGoogleLogin": "0", "googleClientID": "", "googleClientSecret": "", "cookiehash": "f26cd56fb232bd4e8a8d789801c8e7a1", "isLoadOnlyParentComments": "0", "scrollToComment": "1", "commentFormView": "collapsed", "enableDropAnimation": "1", "isNativeAjaxEnabled": "1", "userInteractionCheck": "1", "enableBubble": "0", "bubbleLiveUpdate": "0", "bubbleHintTimeout": "45", "bubbleHintHideTimeout": "10", "cookieHideBubbleHint": "wpdiscuz_hide_bubble_hint", "bubbleHintShowOnce": "1", "bubbleHintCookieExpires": "7", "bubbleShowNewCommentMessage": "1", "bubbleLocation": "content_left", "firstLoadWithAjax": "0", "wc_copied_to_clipboard": "Copied to clipboard!", "inlineFeedbackAttractionType": "blink", "loadRichEditor": "1", "wpDiscuzReCaptchaSK": "", "wpDiscuzReCaptchaTheme": "light", "wpDiscuzReCaptchaVersion": "2.0", "wc_captcha_show_for_guest": "0", "wc_captcha_show_for_members": "0", "wpDiscuzIsShowOnSubscribeForm": "0", "wmuEnabled": "1", "wmuInput": "wmu_files", "wmuMaxFileCount": "1", "wmuMaxFileSize": "2097152", "wmuPostMaxSize": "52428800", "wmuIsLightbox": "1", "wmuMimeTypes": { "jpg": "image\/jpeg", "jpeg": "image\/jpeg", "jpe": "image\/jpeg", "gif": "image\/gif", "png": "image\/png", "bmp": "image\/bmp", "tiff": "image\/tiff", "tif": "image\/tiff", "ico": "image\/x-icon" }, "wmuPhraseConfirmDelete": "Are you sure you want to delete this attachment?", "wmuPhraseNotAllowedFile": "Not allowed file type", "wmuPhraseMaxFileCount": "Maximum number of uploaded files is 1", "wmuPhraseMaxFileSize": "Maximum upload file size is 2MB", "wmuPhrasePostMaxSize": "Maximum post size is 50MB", "wmuPhraseDoingUpload": "Uploading in progress! Please wait.", "msgEmptyFile": "File is empty. Please upload something more substantial. This error could also be caused by uploads being disabled in your php.ini or by post_max_size being defined as smaller than upload_max_filesize in php.ini.", "msgPostIdNotExists": "Post ID not exists", "msgUploadingNotAllowed": "Sorry, uploading not allowed for this post", "msgPermissionDenied": "You do not have sufficient permissions to perform this action", "wmuKeyImages": "images", "wmuSingleImageWidth": "auto", "wmuSingleImageHeight": "200", "previewTemplate": "<div class=\"wmu-preview [PREVIEW_TYPE_CLASS]\" title=\"[PREVIEW_TITLE]\" data-wmu-type=\"[PREVIEW_TYPE]\" data-wmu-attachment=\"[PREVIEW_ID]\">\r\n    <div class=\"wmu-preview-remove\">\r\n        <img class=\"wmu-preview-img\" src=\"[PREVIEW_ICON]\">\r\n        <div class=\"wmu-file-name\">[PREVIEW_FILENAME]<\/div>\r\n        <!--        <div class=\"wmu-delete\">\u00a0<\/div>-->\r\n    <\/div>\r\n<\/div>\r\n" ,"isUserRated" :"0" ,"version" :"7.6.34" ,"wc_post_id" :"17815" ,"isCookiesEnabled" :"1" ,"loadLastCommentId" :"0" ,"dataFilterCallbacks" :[] ,"phraseFilters" :[] ,"scrollSize" :"32" ,"url" :"https:\/\/drakecomic.org\/wp-admin\/admin-ajax.php" ,"customAjaxUrl" :"https:\/\/drakecomic.org\/wp-content\/plugins\/wpdiscuz\/utils\/ajax\/wpdiscuz-ajax.php" ,"bubbleUpdateUrl" :"https:\/\/drakecomic.org\/wp-json\/wpdiscuz\/v1\/update" ,"restNonce" :"cc1681f334" ,"is_rate_editable" :"0" ,"menu_icon" :"https:\/\/drakecomic.org\/wp-content\/plugins\/wpdiscuz\/assets\/img\/plugin-icon\/wpdiscuz-svg.svg" ,"menu_icon_hover" :"https:\/\/drakecomic.org\/wp-content\/plugins\/wpdiscuz\/assets\/img\/plugin-icon\/wpdiscuz-svg_hover.svg" ,"is_email_field_required" :"1 "};
    var wpdiscuzUCObj = { "msgConfirmDeleteComment": "Are you sure you want to delete this comment?", "msgConfirmCancelSubscription": "Are you sure you want to cancel this subscription?", "msgConfirmCancelFollow": "Are you sure you want to cancel this follow?", "additionalTab": "0" };
    /* ]]> */
  </script>
  <script type="text/javascript" id="wpdiscuz-combo-js-js-before">
    /* <![CDATA[ */
    var wpdiscuzEditorOptions = {
      modules: {
        toolbar: "",
        counter: {
          uniqueID: "",
          commentmaxcount: 0,
          replymaxcount: 0,
          commentmincount: 1,
          replymincount: 1,
        },
      },
      wc_be_the_first_text: "Be the First to Comment!",
      wc_comment_join_text: "Join the discussion",
      theme: 'snow',
      debug: 'error'
    };

    /* ]]> */
  </script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/plugins/wpdiscuz/assets/js/wpdiscuz-combo.min.js?ver=7.6.34"
    id="wpdiscuz-combo-js-js"></script>
  <script type="text/javascript" src="https://drakecomic.org/wp-includes/js/underscore.min.js?ver=1.13.7"
    id="underscore-js"></script>
  <script type="text/javascript" id="wp-util-js-extra">
    /* <![CDATA[ */
    var _wpUtilSettings = { "ajax": { "url": "\/wp-admin\/admin-ajax.php" } };
    /* ]]> */
  </script>
  <script type="text/javascript" src="https://drakecomic.org/wp-includes/js/wp-util.min.js?ver=6.8.2"
    id="wp-util-js"></script>
  <script type="text/javascript" src="https://drakecomic.org/wp-includes/js/dist/hooks.min.js?ver=4d63a3d491d11ffd8ac6"
    id="wp-hooks-js"></script>
  <script type="text/javascript" src="https://drakecomic.org/wp-includes/js/dist/i18n.min.js?ver=5e580eb46a90c2b997e6"
    id="wp-i18n-js"></script>
  <script type="text/javascript" id="wp-i18n-js-after">
    /* <![CDATA[ */
    wp.i18n.setLocaleData({ 'text direction\u0004ltr': ['ltr'] });
    /* ]]> */
  </script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/libs/tipsy/tipsy.min.js?ver=1.0.0a"
    id="um_tipsy-js"></script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/libs/um-confirm/um-confirm.min.js?ver=1.0"
    id="um_confirm-js"></script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/libs/pickadate/picker.min.js?ver=3.6.2"
    id="um_datetime-js"></script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/libs/pickadate/picker.date.min.js?ver=3.6.2"
    id="um_datetime_date-js"></script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/libs/pickadate/picker.time.min.js?ver=3.6.2"
    id="um_datetime_time-js"></script>
  <script type="text/javascript" id="um_common-js-extra">
    /* <![CDATA[ */
    var um_common_variables = { "locale": "en_US" };
    var um_common_variables = { "locale": "en_US" };
    /* ]]> */
  </script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/js/common.min.js?ver=2.10.5"
    id="um_common-js"></script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/libs/cropper/cropper.min.js?ver=1.6.1"
    id="um_crop-js"></script>
  <script type="text/javascript" id="um_frontend_common-js-extra">
    /* <![CDATA[ */
    var um_frontend_common_variables = [];
    /* ]]> */
  </script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/js/common-frontend.min.js?ver=2.10.5"
    id="um_frontend_common-js"></script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/js/um-modal.min.js?ver=2.10.5"
    id="um_modal-js"></script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/libs/jquery-form/jquery-form.min.js?ver=2.10.5"
    id="um_jquery_form-js"></script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/libs/fileupload/fileupload.js?ver=2.10.5"
    id="um_fileupload-js"></script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/js/um-functions.min.js?ver=2.10.5"
    id="um_functions-js"></script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/js/um-responsive.min.js?ver=2.10.5"
    id="um_responsive-js"></script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/js/um-conditional.min.js?ver=2.10.5"
    id="um_conditional-js"></script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/libs/select2/select2.full.min.js?ver=4.0.13"
    id="select2-js"></script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/libs/select2/i18n/en.js?ver=4.0.13"
    id="um_select2_locale-js"></script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/libs/raty/um-raty.min.js?ver=2.6.0"
    id="um_raty-js"></script>
  <script type="text/javascript" id="um_scripts-js-extra">
    /* <![CDATA[ */
    var um_scripts = { "max_upload_size": "52428800", "nonce": "0e8376188d" };
    /* ]]> */
  </script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/js/um-scripts.min.js?ver=2.10.5"
    id="um_scripts-js"></script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/js/um-profile.min.js?ver=2.10.5"
    id="um_profile-js"></script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/plugins/ultimate-member/assets/js/um-account.min.js?ver=2.10.5"
    id="um_account-js"></script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/themes/mangareader/assets/js/search-V2.js?ver=6.8.2"
    id="ts-search-js"></script>
  <script type="text/javascript"
    src="https://drakecomic.org/wp-content/themes/mangareader/assets/js/owl.carousel.min.js?ver=2.3.4"
    id="ts-owl-carousel-js"></script>

  <div id="cboxOverlay" style="display: none;"></div>
  <div id="colorbox" class="" role="dialog" tabindex="-1" style="display: none;">
    <div id="cboxWrapper">
      <div>
        <div id="cboxTopLeft" style="float: left;"></div>
        <div id="cboxTopCenter" style="float: left;"></div>
        <div id="cboxTopRight" style="float: left;"></div>
      </div>
      <div style="clear: left;">
        <div id="cboxMiddleLeft" style="float: left;"></div>
        <div id="cboxContent" style="float: left;">
          <div id="cboxTitle" style="float: left;"></div>
          <div id="cboxCurrent" style="float: left;"></div><button type="button" id="cboxPrevious"></button><button
            type="button" id="cboxNext"></button><button type="button" id="cboxSlideshow"></button>
          <div id="cboxLoadingOverlay" style="float: left;"></div>
          <div id="cboxLoadingGraphic" style="float: left;"></div>
        </div>
        <div id="cboxMiddleRight" style="float: left;"></div>
      </div>
      <div style="clear: left;">
        <div id="cboxBottomLeft" style="float: left;"></div>
        <div id="cboxBottomCenter" style="float: left;"></div>
        <div id="cboxBottomRight" style="float: left;"></div>
      </div>
    </div>
    <div style="position: absolute; width: 9999px; visibility: hidden; display: none; max-width: none;"></div>
  </div>
</body>

</html>
