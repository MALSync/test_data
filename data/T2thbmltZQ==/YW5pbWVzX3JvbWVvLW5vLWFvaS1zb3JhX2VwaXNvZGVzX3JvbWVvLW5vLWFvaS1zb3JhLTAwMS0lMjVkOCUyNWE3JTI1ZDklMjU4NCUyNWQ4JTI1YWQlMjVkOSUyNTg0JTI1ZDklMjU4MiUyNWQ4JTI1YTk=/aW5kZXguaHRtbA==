<html dir="rtl" lang="ar" data-fp="r3rut9vrza">

<head>
  <script src="https://onesignal.com/api/v1/sync/b6f50bb6-4894-4b58-a0fd-32e5650d75b8/web?callback=__jp0"></script>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
  <meta name="theme-color" content="#4b367c">
  <meta name="mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="Add to Home">
  <meta name="apple-mobile-web-app-title" content="Add to Home">
  <meta name="”msapplication-TileColor”" content="”#ffffff&quot;">
  <script src="/cdn-cgi/apps/head/yMWQjnZlSXpMoaASXkVhbBXjjG8.js"></script>
  <link rel="icon" sizes="192x192" href="android-icon-192x192.png">
  <link rel="manifest" href="/manifest.json">
  <title>Okanime</title>
  <link rel="stylesheet" media="all"
    href="/assets/application-35f7866e7d3f4d6bc6ff90a6fea2773aaf3a41dff0529dff2f1bea0fffef3699.css">
  <script src="/assets/application-4707a86191cb2aa7af1e2b34b9705733a2f470f6144fb674a7b180f5526c7999.js"
    type="text/javascript"></script>
  <meta property="og:name" content="okanime">
  <meta property="og:url" content="https://www.okanime.tv/">
  <meta property="url" content="https://www.okanime.tv/">
  <meta property="description" content="Romeo no Aoi Sora">
  <meta property="og:description" content="Romeo no Aoi Sora">
  <meta property="title" content="OKanime | Romeo no Aoi Sora">
  <meta property="og:title" content="OKanime | Romeo no Aoi Sora">
  <meta property="keywords"
    content="Romeo no Aoi Sora, عهد الأصدقاء ,Romeo and the Black Brothers,okanime , مشاهدة مباشرة, مترجم">
  <meta property="og:url" content="https://www.okanime.tv/">

  <link href="https://plus.google.com/+okanimecom" rel="publisher">
  <link href="/favicon.ico" rel="icon" type="image/x-icon">
  <link
    href="https://okanime.tv/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-001-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9"
    rel="canonical">
  <meta content="https://www.okanime.tv/" name="og:site_name">
  <meta content="https://www.okanime.tv/" name="identifier-URL">
  <meta content="general" name="rating">
  <meta content="website" property="og:type">
  <meta content="@okanime7" name="twitter:site">
  <meta content="ar-sa" name="language">
  <meta content="info[at]okanime.tv" name="reply-to">
  <meta content="text/html; charset=UTF-8" http-equiv="Content-Type">
  <meta charset="utf-8">
  <meta content="IE=edge" http-equiv="X-UA-Compatible">
  <meta content="width=device-width, initial-scale=1" name="viewport">
  <meta name="csrf-param" content="authenticity_token">
  <meta name="csrf-token"
    content="gX3jcqhECvg8byCkiJOGCC1Sz3Fkj8m+QRUPbZvMXTZL2ujmmWii4ckHNpQfJEfEnxXWkoSVcLLNHsoVbeWZaQ==">
  <script async="" src="https://cdn.onesignal.com/sdks/OneSignalSDK.js" type="text/javascript"></script>
  <script type="text/javascript">
    window.OneSignal = window.OneSignal || [];
    OneSignal.push(function () {
      OneSignal.init({
        appId: "b6f50bb6-4894-4b58-a0fd-32e5650d75b8",
      });
    });
  </script>
  <script src="https://cdn.onesignal.com/sdks/OneSignalPageSDKES6.js?v=151604" async=""></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-mousewheel/3.1.13/jquery.mousewheel.min.js"></script>
  <style type="text/css">
    .jw-reset {
      color: inherit;
      background-color: transparent;
      padding: 0;
      margin: 0;
      float: none;
      font-family: Arial, Helvetica, sans-serif;
      font-size: 1em;
      line-height: 1em;
      list-style: none;
      text-align: left;
      text-transform: none;
      vertical-align: baseline;
      border: 0;
      direction: ltr;
      font-variant: inherit;
      font-stretch: inherit;
      -webkit-tap-highlight-color: rgba(255, 255, 255, 0)
    }

    @font-face {
      font-family: 'jw-icons';
      src: url(data:application/font-woff;base64,d09GRgABAAAAABQ4AAsAAAAAE+wAAQABAAAAAAAAAAAAAAAAAAAAAAAAAABPUy8yAAABCAAAAGAAAABgDxID2WNtYXAAAAFoAAAAVAAAAFQaVsydZ2FzcAAAAbwAAAAIAAAACAAAABBnbHlmAAABxAAAD3AAAA9wKJaoQ2hlYWQAABE0AAAANgAAADYIhqKNaGhlYQAAEWwAAAAkAAAAJAmCBdxobXR4AAARkAAAAGwAAABscmAHPWxvY2EAABH8AAAAOAAAADg2EDnwbWF4cAAAEjQAAAAgAAAAIAAiANFuYW1lAAASVAAAAcIAAAHCwZOZtHBvc3QAABQYAAAAIAAAACAAAwAAAAMEmQGQAAUAAAKZAswAAACPApkCzAAAAesAMwEJAAAAAAAAAAAAAAAAAAAAARAAAAAAAAAAAAAAAAAAAAAAQAAA5hYDwP/AAEADwABAAAAAAQAAAAAAAAAAAAAAIAAAAAAAAwAAAAMAAAAcAAEAAwAAABwAAwABAAAAHAAEADgAAAAKAAgAAgACAAEAIOYW//3//wAAAAAAIOYA//3//wAB/+MaBAADAAEAAAAAAAAAAAAAAAEAAf//AA8AAQAAAAAAAAAAAAIAADc5AQAAAAABAAAAAAAAAAAAAgAANzkBAAAAAAEAAAAAAAAAAAACAAA3OQEAAAAABABgAAAFoAOAADoAPwBEAEkAACUVIi4CNTQ2Ny4BNTQ+AjMyHgIVFAYHHgEVFA4CIxEyFhc+ATU0LgIjIg4CFRQWFz4BMxExARUhNSEXFSE1IRcVITUhAUAuUj0jCgoKCkZ6o11do3pGCgoKCiM9Ui4qSh4BAjpmiE1NiGY6AQIeSioCVQIL/fWWAXX+i0oBK/7VHh4jPVIuGS4VH0MiXaN6RkZ6o10iQx8VLhkuUj0jAcAdGQ0bDk2IZjo6ZohNDhsNGR3+XgNilZXglZXglZUAAAABAEAAAAPAA4AAIQAAExQeAjMyPgI1MxQOAiMiLgI1ND4CMxUiDgIVMYs6ZohNTYhmOktGeqNdXaN6RkZ6o11NiGY6AcBNiGY6OmaITV2jekZGeqNdXaN6Rks6ZohNAAAEAEAAAATAA4AADgAcACoAMQAAJS4BJyERIREuAScRIREhByMuAyc1HgMXMSsBLgMnNR4DFzErATUeARcxAn8DBQQCDPxGCysLBDz9v1NaCERrjE9irINTCLVbByc6Sio9a1I1CLaBL0YMQgsoCgLB/ukDCgIBSPzCQk6HaEIIWAhQgKdgKUg5JgdYBzRRZzx9C0QuAAAAAAUAQAAABMADgAAOABkAJwA1ADwAACUuASchESERLgEnESERIQE1IREhLgMnMQEjLgMnNR4DFzErAS4DJzUeAxcxKwE1HgEXMQKAAgYFAg38QAwqCgRA/cD+gANA/iAYRVlsPgEtWghFa4xPYq2DUgmzWgcnO0oqPGpSNgm6gDBEDEAMKAwCwP7tAggDAUb8wAHQ8P3APWdUQRf98E2IaEIHWghQgKhgKUg4JgdaCDVRZzt9DEMuAAAEAEAAAAXAA4AABAAJAGcAxQAANxEhESEBIREhEQU+ATc+ATMyFhceARceARceARcjLgEnLgEnLgEnLgEjIgYHDgEHDgEHDgEVFBYXHgEXHgEXHgEzMjY3PgE3Mw4BBw4BBw4BBw4BIyImJy4BJy4BJy4BNTQ2Nz4BNzEhPgE3PgEzMhYXHgEXHgEXHgEXIy4BJy4BJy4BJy4BIyIGBw4BBw4BBw4BFRQWFx4BFx4BFx4BMzI2Nz4BNzMOAQcOAQcOAQcOASMiJicuAScuAScuATU0Njc+ATcxQAWA+oAFNvsUBOz8Iw4hExQsGBIhEA8cDQwUCAgLAlsBBQUECgYHDggIEAkQGgsLEgcHCgMDAwMDAwoHBxILCxoQFiEMDA8DWgIJBwgTDQwcERAkFBgsFBMhDg0VBwcHBwcHFQ0Bug0hFBMsGREhEBAcDAwVCAgKAloCBQQECwYGDggIEQgQGwsLEgcHCgMDAwMDAwoHBxILCxsQFSIMDA4DWwIJCAcUDAwdEBEkExksExQhDQ4UBwcICAcHFA4AA4D8gAM1/RYC6tcQGAgJCQUFBQ8KChgPDiETCQ4HBwwFBQgDAwIGBgYRCgoYDQ0cDg0aDQ0XCgoRBgYGDQ0OIhYUJBEQHAsLEgYGBgkICRcPDyQUFCwXGC0VFCQPEBgICQkFBQUPCgoYDw4hEwkOBwcMBQUIAwMCBgYGEQoKGA0NHA4NGg0NFwoKEQYGBg0NDiIWFCQREBwLCxIGBgYJCAkXDw8kFBQsFxgtFRQkDwAAAAADAEAAAAXAA4AAEABvAM4AACUhIiY1ETQ2MyEyFhURFAYjAT4BNz4BNz4BMzIWFx4BFx4BFx4BFzMuAScuAScuAScuASMiBgcOAQcOAQcOARUUFhceARceARceATMyNjc+ATc+ATc+ATcjDgEHDgEjIiYnLgEnLgEnLgE1NDY3OQEhPgE3PgE3PgEzMhYXHgEXHgEXHgEXMy4BJy4BJy4BJy4BIyIGBw4BBw4BBw4BFRQWFx4BFx4BFx4BMzI2Nz4BNz4BNz4BNyMOAQcOASMiJicuAScuAScuATU0Njc5AQUs+6g9V1c9BFg9V1c9/JoDCgcGEgsLGxAJEAgIDgYHCgQEBgFaAgoICBQNDBwQDyESGCwUEyEODRUHBwcHBwcVDQ4hExQrGRQkEBAdDAwUCAcJAloDDwwMIhUQGwsLEgYHCgMEAwMEAbkDCgcHEgsLGxAIEQgHDwYGCwQEBQFbAgoICBUMDBwQECERGSwTFCENDhQHBwgIBwcUDg0hFBMsGRMkERAdDAwUBwgJAlsDDgwNIRUQGwsLEgcHCgMDAwMDAFc+AlY+V1c+/ao+VwH0DRgKCxAGBgYCAwMIBQUMBwcOCRMhDg8YCgoOBgUFCQkIGBAPJBQVLRgXLBQUJA8PFwkICQYGBhILCxwQESQUFiIODQ0GBgYRCgoXDQ0aDg4bDQ0YCgsQBgYGAgMDCAUFDAcHDgkTIQ4PGAoKDgYFBQkJCBgQDyQUFS0YFywUFCQPDxcJCAkGBgYSCwscEBEkFBYiDg0NBgYGEQoKFw0NGg4OGw0AAAABAOAAoAMgAuAAFAAAARQOAiMiLgI1ND4CMzIeAhUDIC1OaTw8aU4tLU5pPDxpTi0BwDxpTi0tTmk8PGlOLS1OaTwAAAMAQAAQBEADkAADABAAHwAANwkBISUyNjU0JiMiBhUUFjMTNCYjIgYVERQWMzI2NRFAAgACAPwAAgAOFRUODhUVDiMVDg4VFQ4OFRADgPyAcBYQDxgWERAWAeYPGBYR/tcPGBYRASkAAgBAAAADwAOAAAcADwAANxEXNxcHFyEBIREnByc3J0CAsI2wgP5zAfMBjYCwjbCAAAGNgLCNsIADgP5zgLCNsIAAAAAFAEAAAAXAA4AABAAJABYAMwBPAAA3ESERIQEhESERATM1MxEjNSMVIxEzFSUeARceARceARUUBgcOAQcOAQcOASsBETMeARcxBxEzMjY3PgE3PgE3PgE1NCYnLgEnLgEnLgErAUAFgPqABTb7FATs/FS2YGC2ZGQCXBQeDg8UBwcJBgcHEwwMIRMTLBuwsBYqE6BHCRcJChIIBw0FBQUEAwINBwcTDAwgETcAA4D8gAM2/RcC6f7Arf5AwMABwK2dBxQODyIWFTAbGC4TFiIPDhgKCQcBwAIHB0P+5gQDAg0HBxcMDCETER0PDhgKCQ8EBQUABAA9AAAFwAOAABAAHQA7AFkAACUhIiY1ETQ2MyEyFhURFAYjASMVIzUjETM1MxUzEQUuAScuAScuASsBETMyNjc+ATc+ATc+ATUuASc5AQcOAQcOASsBETMyFhceARceARceARUUBgcOAQc5AQUq+6k+WFg+BFc+WFg+/bNgs2Rks2ABsAcXDA4fExMnFrCwGywTEx4PDBMHBwYCCAl3CBIKCRQMRzcTHgwMEwcHCwQDBAUFBQ0HAFg+AlQ+WFg+/aw+WAKdra3+QMDAAcB9FiIODxQHBwb+QAkHCRgPDiUTFiwYHTAW4ggNAgMEAR8EBQUPCgoYDw4fERMfDwwXBwAAAAABAEMABgOgA3oAjwAAExQiNScwJic0JicuAQcOARUcARUeARceATc+ATc+ATE2MhUwFAcUFhceARceATMyNjc+ATc+ATc+AzE2MhUwDgIVFBYXHgEXFjY3PgE3PgE3PgE3PgM3PAE1NCYnJgYHDgMxBiI1MDwCNTQmJyYGBw4BBw4DMQYiNTAmJy4BJyYGBw4BMRWQBgQIBAgCBQ4KBwkDFgcHIQ8QDwcHNgUEAwMHBQsJChcMBQ0FBwsHDBMICR8cFQUFAwQDCAUHFRERJBEMEwgJEgUOGQwGMjgvBAkHDBYEAz1IPAQFLyQRIhEQFgoGIiUcBQUEAgMYKCcmCgcsAboFBQwYDwUKBwUEAgMNBwcLBxRrDhENBwggDxOTCgqdMBM1EQwTCAcFBAIFCgcPIw4UQ0IxCgpTc3glEyMREBgIBwEKBxUKESUQJ00mE6/JrA8FBgIHDQMECAkGla2PCQk1VGYxNTsHAgUKChwQC2BqVQoKehYfTwUDRx8TkAMAAAAAAgBGAAAENgOAAAQACAAAJREzESMJAhEDxnBw/IADgPyAAAOA/IADgP5A/kADgAAAAgCAAAADgAOAAAQACQAAJREhESEBIREhEQKAAQD/AP4AAQD/AAADgPyAA4D8gAOAAAAAAAEAgAAABAADgAADAAAJAREBBAD8gAOAAcD+QAOA/kAAAgBKAAAEOgOAAAQACAAANxEjETMJAhG6cHADgPyAA4AAA4D8gAOA/kD+QAOAAAAAAQBDACADQwOgACkAAAEeARUUDgIjIi4CNTQ+AjM1DQE1Ig4CFRQeAjMyPgI1NCYnNwMNGhw8aYxPT4xoPT1ojE8BQP7APGlOLS1OaTw8aU4tFhNTAmMrYzVPjGg9PWiMT0+MaD2ArbOALU5pPDxpTi0tTmk8KUsfMAAAAAEAQABmAiADEwAGAAATETMlESUjQM0BE/7tzQEzARPN/VPNAAQAQAAABJADgAAXACsAOgBBAAAlJz4DNTQuAic3HgMVFA4CBzEvAT4BNTQmJzceAxUOAwcxJz4BNTQmJzceARUUBgcnBREzJRElIwPaKiY+KxcXKz4mKipDMBkZMEMqpCk5REQ5KSE0JBQBFCQzIcMiKCgiKiYwMCYq/c3NARP+7c0AIyheaXI8PHFpXikjK2ZyfEFBfHJmK4MjNZFUVJE1Ix5IUFgvL1lRRx2zFkgpK0YVIxxcNDVZHykDARPN/VPNAAACAEAAAAPDA4AABwAPAAABFyERFzcXBwEHJzcnIREnAypw/qlwl3mZ/iaWepZwAVdtAnNwAVdwlnqT/iOWepZw/qpsAAMAQAETBcACYAAMABkAJgAAARQGIyImNTQ2MzIWFSEUBiMiJjU0NjMyFhUhFAYjIiY1NDYzMhYVAY1iRUVhYUVFYgIWYUVFYmJFRWECHWFFRWJiRUVhAbpFYmJFRWFhRUViYkVFYWFFRWJiRUVhYUUAAAAAAQBmACYDmgNaACAAAAEXFhQHBiIvAQcGIicmND8BJyY0NzYyHwE3NjIXFhQPAQKj9yQkJGMd9vYkYx0kJPf3JCQkYx329iRjHSQk9wHA9iRjHSQk9/ckJCRjHfb2JGMdJCT39yQkJGMd9gAABgBEAAQDvAN8AAQACQAOABMAGAAdAAABIRUhNREhFSE1ESEVITUBMxUjNREzFSM1ETMVIzUBpwIV/esCFf3rAhX96/6dsrKysrKyA3xZWf6dWVn+nVlZAsaysv6dsrL+nbKyAAEAAAABGZqh06s/Xw889QALBAAAAAAA0dQiKwAAAADR1CIrAAAAAAXAA6AAAAAIAAIAAAAAAAAAAQAAA8D/wAAABgAAAAAABcAAAQAAAAAAAAAAAAAAAAAAABsEAAAAAAAAAAAAAAACAAAABgAAYAQAAEAFAABABQAAQAYAAEAGAABABAAA4ASAAEAEAABABgAAQAYAAD0D4ABDBIAARgQAAIAEAACABIAASgOAAEMEwABABMAAQAQAAEAGAABABAAAZgQAAEQAAAAAAAoAFAAeAIgAuAEEAWAChgOyA9QECAQqBKQFJgXoBgAGGgYqBkIGgAaSBvQHFgdQB4YHuAABAAAAGwDPAAYAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAADgCuAAEAAAAAAAEADAAAAAEAAAAAAAIABwCNAAEAAAAAAAMADABFAAEAAAAAAAQADACiAAEAAAAAAAUACwAkAAEAAAAAAAYADABpAAEAAAAAAAoAGgDGAAMAAQQJAAEAGAAMAAMAAQQJAAIADgCUAAMAAQQJAAMAGABRAAMAAQQJAAQAGACuAAMAAQQJAAUAFgAvAAMAAQQJAAYAGAB1AAMAAQQJAAoANADganctc2l4LWljb25zAGoAdwAtAHMAaQB4AC0AaQBjAG8AbgBzVmVyc2lvbiAxLjEAVgBlAHIAcwBpAG8AbgAgADEALgAxanctc2l4LWljb25zAGoAdwAtAHMAaQB4AC0AaQBjAG8AbgBzanctc2l4LWljb25zAGoAdwAtAHMAaQB4AC0AaQBjAG8AbgBzUmVndWxhcgBSAGUAZwB1AGwAYQByanctc2l4LWljb25zAGoAdwAtAHMAaQB4AC0AaQBjAG8AbgBzRm9udCBnZW5lcmF0ZWQgYnkgSWNvTW9vbi4ARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAYgB5ACAASQBjAG8ATQBvAG8AbgAuAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==) format('woff'), url(data:application/octet-stream;base64,AAEAAAALAIAAAwAwT1MvMg8SA9kAAAC8AAAAYGNtYXAaVsydAAABHAAAAFRnYXNwAAAAEAAAAXAAAAAIZ2x5ZiiWqEMAAAF4AAAPcGhlYWQIhqKNAAAQ6AAAADZoaGVhCYIF3AAAESAAAAAkaG10eHJgBz0AABFEAAAAbGxvY2E2EDnwAAARsAAAADhtYXhwACIA0QAAEegAAAAgbmFtZcGTmbQAABIIAAABwnBvc3QAAwAAAAATzAAAACAAAwSZAZAABQAAApkCzAAAAI8CmQLMAAAB6wAzAQkAAAAAAAAAAAAAAAAAAAABEAAAAAAAAAAAAAAAAAAAAABAAADmFgPA/8AAQAPAAEAAAAABAAAAAAAAAAAAAAAgAAAAAAADAAAAAwAAABwAAQADAAAAHAADAAEAAAAcAAQAOAAAAAoACAACAAIAAQAg5hb//f//AAAAAAAg5gD//f//AAH/4xoEAAMAAQAAAAAAAAAAAAAAAQAB//8ADwABAAAAAAAAAAAAAgAANzkBAAAAAAEAAAAAAAAAAAACAAA3OQEAAAAAAQAAAAAAAAAAAAIAADc5AQAAAAAEAGAAAAWgA4AAOgA/AEQASQAAJRUiLgI1NDY3LgE1ND4CMzIeAhUUBgceARUUDgIjETIWFz4BNTQuAiMiDgIVFBYXPgEzETEBFSE1IRcVITUhFxUhNSEBQC5SPSMKCgoKRnqjXV2jekYKCgoKIz1SLipKHgECOmaITU2IZjoBAh5KKgJVAgv99ZYBdf6LSgEr/tUeHiM9Ui4ZLhUfQyJdo3pGRnqjXSJDHxUuGS5SPSMBwB0ZDRsOTYhmOjpmiE0OGw0ZHf5eA2KVleCVleCVlQAAAAEAQAAAA8ADgAAhAAATFB4CMzI+AjUzFA4CIyIuAjU0PgIzFSIOAhUxizpmiE1NiGY6S0Z6o11do3pGRnqjXU2IZjoBwE2IZjo6ZohNXaN6RkZ6o11do3pGSzpmiE0AAAQAQAAABMADgAAOABwAKgAxAAAlLgEnIREhES4BJxEhESEHIy4DJzUeAxcxKwEuAyc1HgMXMSsBNR4BFzECfwMFBAIM/EYLKwsEPP2/U1oIRGuMT2Ksg1MItVsHJzpKKj1rUjUItoEvRgxCCygKAsH+6QMKAgFI/MJCTodoQghYCFCAp2ApSDkmB1gHNFFnPH0LRC4AAAAABQBAAAAEwAOAAA4AGQAnADUAPAAAJS4BJyERIREuAScRIREhATUhESEuAycxASMuAyc1HgMXMSsBLgMnNR4DFzErATUeARcxAoACBgUCDfxADCoKBED9wP6AA0D+IBhFWWw+AS1aCEVrjE9irYNSCbNaByc7Sio8alI2CbqAMEQMQAwoDALA/u0CCAMBRvzAAdDw/cA9Z1RBF/3wTYhoQgdaCFCAqGApSDgmB1oINVFnO30MQy4AAAQAQAAABcADgAAEAAkAZwDFAAA3ESERIQEhESERBT4BNz4BMzIWFx4BFx4BFx4BFyMuAScuAScuAScuASMiBgcOAQcOAQcOARUUFhceARceARceATMyNjc+ATczDgEHDgEHDgEHDgEjIiYnLgEnLgEnLgE1NDY3PgE3MSE+ATc+ATMyFhceARceARceARcjLgEnLgEnLgEnLgEjIgYHDgEHDgEHDgEVFBYXHgEXHgEXHgEzMjY3PgE3Mw4BBw4BBw4BBw4BIyImJy4BJy4BJy4BNTQ2Nz4BNzFABYD6gAU2+xQE7PwjDiETFCwYEiEQDxwNDBQICAsCWwEFBQQKBgcOCAgQCRAaCwsSBwcKAwMDAwMDCgcHEgsLGhAWIQwMDwNaAgkHCBMNDBwRECQUGCwUEyEODRUHBwcHBwcVDQG6DSEUEywZESEQEBwMDBUICAoCWgIFBAQLBgYOCAgRCBAbCwsSBwcKAwMDAwMDCgcHEgsLGxAVIgwMDgNbAgkIBxQMDB0QESQTGSwTFCENDhQHBwgIBwcUDgADgPyAAzX9FgLq1xAYCAkJBQUFDwoKGA8OIRMJDgcHDAUFCAMDAgYGBhEKChgNDRwODRoNDRcKChEGBgYNDQ4iFhQkERAcCwsSBgYGCQgJFw8PJBQULBcYLRUUJA8QGAgJCQUFBQ8KChgPDiETCQ4HBwwFBQgDAwIGBgYRCgoYDQ0cDg0aDQ0XCgoRBgYGDQ0OIhYUJBEQHAsLEgYGBgkICRcPDyQUFCwXGC0VFCQPAAAAAAMAQAAABcADgAAQAG8AzgAAJSEiJjURNDYzITIWFREUBiMBPgE3PgE3PgEzMhYXHgEXHgEXHgEXMy4BJy4BJy4BJy4BIyIGBw4BBw4BBw4BFRQWFx4BFx4BFx4BMzI2Nz4BNz4BNz4BNyMOAQcOASMiJicuAScuAScuATU0Njc5ASE+ATc+ATc+ATMyFhceARceARceARczLgEnLgEnLgEnLgEjIgYHDgEHDgEHDgEVFBYXHgEXHgEXHgEzMjY3PgE3PgE3PgE3Iw4BBw4BIyImJy4BJy4BJy4BNTQ2NzkBBSz7qD1XVz0EWD1XVz38mgMKBwYSCwsbEAkQCAgOBgcKBAQGAVoCCggIFA0MHBAPIRIYLBQTIQ4NFQcHBwcHBxUNDiETFCsZFCQQEB0MDBQIBwkCWgMPDAwiFRAbCwsSBgcKAwQDAwQBuQMKBwcSCwsbEAgRCAcPBgYLBAQFAVsCCggIFQwMHBAQIREZLBMUIQ0OFAcHCAgHBxQODSEUEywZEyQREB0MDBQHCAkCWwMODA0hFRAbCwsSBwcKAwMDAwMAVz4CVj5XVz79qj5XAfQNGAoLEAYGBgIDAwgFBQwHBw4JEyEODxgKCg4GBQUJCQgYEA8kFBUtGBcsFBQkDw8XCQgJBgYGEgsLHBARJBQWIg4NDQYGBhEKChcNDRoODhsNDRgKCxAGBgYCAwMIBQUMBwcOCRMhDg8YCgoOBgUFCQkIGBAPJBQVLRgXLBQUJA8PFwkICQYGBhILCxwQESQUFiIODQ0GBgYRCgoXDQ0aDg4bDQAAAAEA4ACgAyAC4AAUAAABFA4CIyIuAjU0PgIzMh4CFQMgLU5pPDxpTi0tTmk8PGlOLQHAPGlOLS1OaTw8aU4tLU5pPAAAAwBAABAEQAOQAAMAEAAfAAA3CQEhJTI2NTQmIyIGFRQWMxM0JiMiBhURFBYzMjY1EUACAAIA/AACAA4VFQ4OFRUOIxUODhUVDg4VEAOA/IBwFhAPGBYREBYB5g8YFhH+1w8YFhEBKQACAEAAAAPAA4AABwAPAAA3ERc3FwcXIQEhEScHJzcnQICwjbCA/nMB8wGNgLCNsIAAAY2AsI2wgAOA/nOAsI2wgAAAAAUAQAAABcADgAAEAAkAFgAzAE8AADcRIREhASERIREBMzUzESM1IxUjETMVJR4BFx4BFx4BFRQGBw4BBw4BBw4BKwERMx4BFzEHETMyNjc+ATc+ATc+ATU0JicuAScuAScuASsBQAWA+oAFNvsUBOz8VLZgYLZkZAJcFB4ODxQHBwkGBwcTDAwhExMsG7CwFioToEcJFwkKEggHDQUFBQQDAg0HBxMMDCARNwADgPyAAzb9FwLp/sCt/kDAwAHArZ0HFA4PIhYVMBsYLhMWIg8OGAoJBwHAAgcHQ/7mBAMCDQcHFwwMIRMRHQ8OGAoJDwQFBQAEAD0AAAXAA4AAEAAdADsAWQAAJSEiJjURNDYzITIWFREUBiMBIxUjNSMRMzUzFTMRBS4BJy4BJy4BKwERMzI2Nz4BNz4BNz4BNS4BJzkBBw4BBw4BKwERMzIWFx4BFx4BFx4BFRQGBw4BBzkBBSr7qT5YWD4EVz5YWD79s2CzZGSzYAGwBxcMDh8TEycWsLAbLBMTHg8MEwcHBgIICXcIEgoJFAxHNxMeDAwTBwcLBAMEBQUFDQcAWD4CVD5YWD79rD5YAp2trf5AwMABwH0WIg4PFAcHBv5ACQcJGA8OJRMWLBgdMBbiCA0CAwQBHwQFBQ8KChgPDh8REx8PDBcHAAAAAAEAQwAGA6ADegCPAAATFCI1JzAmJzQmJy4BBw4BFRwBFR4BFx4BNz4BNz4BMTYyFTAUBxQWFx4BFx4BMzI2Nz4BNz4BNz4DMTYyFTAOAhUUFhceARcWNjc+ATc+ATc+ATc+Azc8ATU0JicmBgcOAzEGIjUwPAI1NCYnJgYHDgEHDgMxBiI1MCYnLgEnJgYHDgExFZAGBAgECAIFDgoHCQMWBwchDxAPBwc2BQQDAwcFCwkKFwwFDQUHCwcMEwgJHxwVBQUDBAMIBQcVEREkEQwTCAkSBQ4ZDAYyOC8ECQcMFgQDPUg8BAUvJBEiERAWCgYiJRwFBQQCAxgoJyYKBywBugUFDBgPBQoHBQQCAw0HBwsHFGsOEQ0HCCAPE5MKCp0wEzURDBMIBwUEAgUKBw8jDhRDQjEKClNzeCUTIxEQGAgHAQoHFQoRJRAnTSYTr8msDwUGAgcNAwQICQaVrY8JCTVUZjE1OwcCBQoKHBALYGpVCgp6Fh9PBQNHHxOQAwAAAAACAEYAAAQ2A4AABAAIAAAlETMRIwkCEQPGcHD8gAOA/IAAA4D8gAOA/kD+QAOAAAACAIAAAAOAA4AABAAJAAAlESERIQEhESERAoABAP8A/gABAP8AAAOA/IADgPyAA4AAAAAAAQCAAAAEAAOAAAMAAAkBEQEEAPyAA4ABwP5AA4D+QAACAEoAAAQ6A4AABAAIAAA3ESMRMwkCEbpwcAOA/IADgAADgPyAA4D+QP5AA4AAAAABAEMAIANDA6AAKQAAAR4BFRQOAiMiLgI1ND4CMzUNATUiDgIVFB4CMzI+AjU0Jic3Aw0aHDxpjE9PjGg9PWiMTwFA/sA8aU4tLU5pPDxpTi0WE1MCYytjNU+MaD09aIxPT4xoPYCts4AtTmk8PGlOLS1OaTwpSx8wAAAAAQBAAGYCIAMTAAYAABMRMyURJSNAzQET/u3NATMBE839U80ABABAAAAEkAOAABcAKwA6AEEAACUnPgM1NC4CJzceAxUUDgIHMS8BPgE1NCYnNx4DFQ4DBzEnPgE1NCYnNx4BFRQGBycFETMlESUjA9oqJj4rFxcrPiYqKkMwGRkwQyqkKTlERDkpITQkFAEUJDMhwyIoKCIqJjAwJir9zc0BE/7tzQAjKF5pcjw8cWleKSMrZnJ8QUF8cmYrgyM1kVRUkTUjHkhQWC8vWVFHHbMWSCkrRhUjHFw0NVkfKQMBE839U80AAAIAQAAAA8MDgAAHAA8AAAEXIREXNxcHAQcnNychEScDKnD+qXCXeZn+JpZ6lnABV20Cc3ABV3CWepP+I5Z6lnD+qmwAAwBAARMFwAJgAAwAGQAmAAABFAYjIiY1NDYzMhYVIRQGIyImNTQ2MzIWFSEUBiMiJjU0NjMyFhUBjWJFRWFhRUViAhZhRUViYkVFYQIdYUVFYmJFRWEBukViYkVFYWFFRWJiRUVhYUVFYmJFRWFhRQAAAAABAGYAJgOaA1oAIAAAARcWFAcGIi8BBwYiJyY0PwEnJjQ3NjIfATc2MhcWFA8BAqP3JCQkYx329iRjHSQk9/ckJCRjHfb2JGMdJCT3AcD2JGMdJCT39yQkJGMd9vYkYx0kJPf3JCQkYx32AAAGAEQABAO8A3wABAAJAA4AEwAYAB0AAAEhFSE1ESEVITURIRUhNQEzFSM1ETMVIzURMxUjNQGnAhX96wIV/esCFf3r/p2ysrKysrIDfFlZ/p1ZWf6dWVkCxrKy/p2ysv6dsrIAAQAAAAEZmqHTqz9fDzz1AAsEAAAAAADR1CIrAAAAANHUIisAAAAABcADoAAAAAgAAgAAAAAAAAABAAADwP/AAAAGAAAAAAAFwAABAAAAAAAAAAAAAAAAAAAAGwQAAAAAAAAAAAAAAAIAAAAGAABgBAAAQAUAAEAFAABABgAAQAYAAEAEAADgBIAAQAQAAEAGAABABgAAPQPgAEMEgABGBAAAgAQAAIAEgABKA4AAQwTAAEAEwABABAAAQAYAAEAEAABmBAAARAAAAAAACgAUAB4AiAC4AQQBYAKGA7ID1AQIBCoEpAUmBegGAAYaBioGQgaABpIG9AcWB1AHhge4AAEAAAAbAM8ABgAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAOAK4AAQAAAAAAAQAMAAAAAQAAAAAAAgAHAI0AAQAAAAAAAwAMAEUAAQAAAAAABAAMAKIAAQAAAAAABQALACQAAQAAAAAABgAMAGkAAQAAAAAACgAaAMYAAwABBAkAAQAYAAwAAwABBAkAAgAOAJQAAwABBAkAAwAYAFEAAwABBAkABAAYAK4AAwABBAkABQAWAC8AAwABBAkABgAYAHUAAwABBAkACgA0AOBqdy1zaXgtaWNvbnMAagB3AC0AcwBpAHgALQBpAGMAbwBuAHNWZXJzaW9uIDEuMQBWAGUAcgBzAGkAbwBuACAAMQAuADFqdy1zaXgtaWNvbnMAagB3AC0AcwBpAHgALQBpAGMAbwBuAHNqdy1zaXgtaWNvbnMAagB3AC0AcwBpAHgALQBpAGMAbwBuAHNSZWd1bGFyAFIAZQBnAHUAbABhAHJqdy1zaXgtaWNvbnMAagB3AC0AcwBpAHgALQBpAGMAbwBuAHNGb250IGdlbmVyYXRlZCBieSBJY29Nb29uLgBGAG8AbgB0ACAAZwBlAG4AZQByAGEAdABlAGQAIABiAHkAIABJAGMAbwBNAG8AbwBuAC4AAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) format('truetype');
      font-weight: normal;
      font-style: normal
    }

    .jw-icon-inline,
    .jw-icon-tooltip,
    .jw-icon-display,
    .jw-controlbar .jw-menu .jw-option:before {
      font-family: 'jw-icons';
      -webkit-font-smoothing: antialiased;
      font-style: normal;
      font-weight: normal;
      text-transform: none;
      background-color: transparent;
      font-variant: normal;
      -webkit-font-feature-settings: "liga";
      -ms-font-feature-settings: "liga" 1;
      -o-font-feature-settings: "liga";
      font-feature-settings: "liga";
      -moz-osx-font-smoothing: grayscale
    }

    .jw-icon-audio-tracks:before {
      content: "\e600"
    }

    .jw-icon-buffer:before {
      content: "\e601"
    }

    .jw-icon-cast:before {
      content: "\e603"
    }

    .jw-icon-cast.jw-off:before {
      content: "\e602"
    }

    .jw-icon-cc:before {
      content: "\e605"
    }

    .jw-icon-cue:before {
      content: "\e606"
    }

    .jw-icon-menu-bullet:before {
      content: "\e606"
    }

    .jw-icon-error:before {
      content: "\e607"
    }

    .jw-icon-fullscreen:before {
      content: "\e608"
    }

    .jw-icon-fullscreen.jw-off:before {
      content: "\e613"
    }

    .jw-icon-hd:before {
      content: "\e60a"
    }

    .jw-watermark:before,
    .jw-rightclick-logo:before {
      content: "\e60b"
    }

    .jw-icon-next:before {
      content: "\e60c"
    }

    .jw-icon-pause:before {
      content: "\e60d"
    }

    .jw-icon-play:before {
      content: "\e60e"
    }

    .jw-icon-prev:before {
      content: "\e60f"
    }

    .jw-icon-replay:before {
      content: "\e610"
    }

    .jw-icon-volume:before {
      content: "\e612"
    }

    .jw-icon-volume.jw-off:before {
      content: "\e611"
    }

    .jw-icon-more:before {
      content: "\e614"
    }

    .jw-icon-close:before {
      content: "\e615"
    }

    .jw-icon-playlist:before {
      content: "\e616"
    }

    .jwplayer {
      width: 100%;
      font-size: 16px;
      position: relative;
      display: block;
      min-height: 0;
      overflow: hidden;
      box-sizing: border-box;
      font-family: Arial, Helvetica, sans-serif;
      background-color: #000;
      -webkit-touch-callout: none;
      -webkit-user-select: none;
      -khtml-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none
    }

    .jwplayer * {
      box-sizing: inherit
    }

    .jwplayer.jw-flag-aspect-mode {
      height: auto !important
    }

    .jwplayer.jw-flag-aspect-mode .jw-aspect {
      display: block
    }

    .jwplayer .jw-aspect {
      display: none
    }

    .jwplayer:focus,
    .jwplayer .jw-swf {
      outline: none
    }

    .jwplayer:hover .jw-display-icon-container {
      background-color: #333;
      background: #333;
      background-size: #333
    }

    .jw-media,
    .jw-preview,
    .jw-overlays,
    .jw-controls {
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      bottom: 0;
      right: 0
    }

    .jw-media {
      overflow: hidden;
      cursor: pointer
    }

    .jw-overlays {
      cursor: auto
    }

    .jw-media.jw-media-show {
      visibility: visible;
      opacity: 1
    }

    .jw-media video {
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 100%;
      margin: auto;
      background: transparent
    }

    .jw-media video::-webkit-media-controls-start-playback-button {
      display: none
    }

    .jw-controls.jw-controls-disabled {
      display: none
    }

    .jw-controls .jw-controls-right {
      position: absolute;
      top: 0;
      right: 0
    }

    .jw-text {
      height: 1em;
      font-family: Arial, Helvetica, sans-serif;
      font-size: .75em;
      font-style: normal;
      font-weight: normal;
      color: white;
      text-align: center;
      font-variant: normal;
      font-stretch: normal
    }

    .jw-plugin {
      position: absolute;
      bottom: 2.5em
    }

    .jw-plugin .jw-banner {
      max-width: 100%;
      opacity: 0;
      cursor: pointer;
      position: absolute;
      margin: auto auto 0 auto;
      left: 0;
      right: 0;
      bottom: 0;
      display: block
    }

    .jw-cast-screen {
      width: 100%;
      height: 100%
    }

    .jw-instream {
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      display: none
    }

    .jw-icon-playback:before {
      content: "\e60e"
    }

    .jw-tab-focus:focus {
      outline: solid 2px #0b7ef4
    }

    .jw-preview,
    .jw-captions,
    .jw-title,
    .jw-overlays,
    .jw-controls {
      pointer-events: none
    }

    .jw-overlays>div,
    .jw-media,
    .jw-controlbar,
    .jw-dock,
    .jw-logo,
    .jw-skip,
    .jw-display-icon-container {
      pointer-events: all
    }

    .jw-click {
      position: absolute;
      width: 100%;
      height: 100%
    }

    .jw-preview {
      position: absolute;
      display: none;
      opacity: 1;
      visibility: visible;
      width: 100%;
      height: 100%;
      background: #000 no-repeat 50% 50%
    }

    .jwplayer .jw-preview,
    .jw-error .jw-preview,
    .jw-stretch-uniform .jw-preview {
      background-size: contain
    }

    .jw-stretch-none .jw-preview {
      background-size: auto auto
    }

    .jw-stretch-fill .jw-preview {
      background-size: cover
    }

    .jw-stretch-exactfit .jw-preview {
      background-size: 100% 100%
    }

    .jw-display-icon-container {
      position: relative;
      top: 50%;
      display: table;
      height: 3.5em;
      width: 3.5em;
      margin: -1.75em auto 0;
      cursor: pointer
    }

    .jw-display-icon-container .jw-icon-display {
      position: relative;
      display: table-cell;
      text-align: center;
      vertical-align: middle !important;
      background-position: 50% 50%;
      background-repeat: no-repeat;
      font-size: 2em
    }

    .jw-flag-audio-player .jw-display-icon-container,
    .jw-flag-dragging .jw-display-icon-container {
      display: none
    }

    .jw-icon {
      font-family: 'jw-icons';
      -webkit-font-smoothing: antialiased;
      font-style: normal;
      font-weight: normal;
      text-transform: none;
      background-color: transparent;
      font-variant: normal;
      -webkit-font-feature-settings: "liga";
      -ms-font-feature-settings: "liga" 1;
      -o-font-feature-settings: "liga";
      font-feature-settings: "liga";
      -moz-osx-font-smoothing: grayscale
    }

    .jw-controlbar {
      display: table;
      position: absolute;
      right: 0;
      left: 0;
      bottom: 0;
      height: 2em;
      padding: 0 .25em
    }

    .jw-controlbar .jw-hidden {
      display: none
    }

    .jw-controlbar.jw-drawer-expanded .jw-controlbar-left-group,
    .jw-controlbar.jw-drawer-expanded .jw-controlbar-center-group {
      opacity: 0
    }

    .jw-background-color {
      background-color: #414040
    }

    .jw-group {
      display: table-cell
    }

    .jw-controlbar-center-group {
      width: 100%;
      padding: 0 .25em
    }

    .jw-controlbar-center-group .jw-slider-time,
    .jw-controlbar-center-group .jw-text-alt {
      padding: 0
    }

    .jw-controlbar-center-group .jw-text-alt {
      display: none
    }

    .jw-controlbar-left-group,
    .jw-controlbar-right-group {
      white-space: nowrap
    }

    .jw-knob:hover,
    .jw-icon-inline:hover,
    .jw-icon-tooltip:hover,
    .jw-icon-display:hover,
    .jw-option:before:hover {
      color: #eee
    }

    .jw-icon-inline,
    .jw-icon-tooltip,
    .jw-slider-horizontal,
    .jw-text-elapsed,
    .jw-text-duration {
      display: inline-block;
      height: 2em;
      position: relative;
      line-height: 2em;
      vertical-align: middle;
      cursor: pointer
    }

    .jw-icon-inline,
    .jw-icon-tooltip {
      min-width: 1.25em;
      text-align: center
    }

    .jw-icon-playback {
      min-width: 2.25em
    }

    .jw-icon-volume {
      min-width: 1.75em;
      text-align: left
    }

    .jw-time-tip {
      line-height: 1em;
      pointer-events: none
    }

    .jw-icon-inline:after,
    .jw-icon-tooltip:after {
      width: 100%;
      height: 100%;
      font-size: 1em
    }

    .jw-icon-cast {
      display: none
    }

    .jw-slider-volume.jw-slider-horizontal,
    .jw-icon-inline.jw-icon-volume {
      display: none
    }

    .jw-dock {
      margin: .75em;
      display: block;
      opacity: 1;
      clear: right
    }

    .jw-dock:after {
      content: '';
      clear: both;
      display: block
    }

    .jw-dock-button {
      cursor: pointer;
      float: right;
      position: relative;
      width: 2.5em;
      height: 2.5em;
      margin: .5em
    }

    .jw-dock-button .jw-arrow {
      display: none;
      position: absolute;
      bottom: -0.2em;
      width: .5em;
      height: .2em;
      left: 50%;
      margin-left: -0.25em
    }

    .jw-dock-button .jw-overlay {
      display: none;
      position: absolute;
      top: 2.5em;
      right: 0;
      margin-top: .25em;
      padding: .5em;
      white-space: nowrap
    }

    .jw-dock-button:hover .jw-overlay,
    .jw-dock-button:hover .jw-arrow {
      display: block
    }

    .jw-dock-image {
      width: 100%;
      height: 100%;
      background-position: 50% 50%;
      background-repeat: no-repeat;
      opacity: .75
    }

    .jw-title {
      display: none;
      position: absolute;
      top: 0;
      width: 100%;
      font-size: .875em;
      height: 8em;
      background: -webkit-linear-gradient(top, #000 0, #000 18%, rgba(0, 0, 0, 0) 100%);
      background: linear-gradient(to bottom, #000 0, #000 18%, rgba(0, 0, 0, 0) 100%)
    }

    .jw-title-primary,
    .jw-title-secondary {
      padding: .75em 1.5em;
      min-height: 2.5em;
      width: 75%;
      color: white;
      white-space: nowrap;
      text-overflow: ellipsis;
      overflow-x: hidden
    }

    .jw-title-primary {
      font-weight: bold
    }

    .jw-title-secondary {
      margin-top: -0.5em
    }

    .jw-slider-container {
      display: inline-block;
      height: 1em;
      position: relative;
      -ms-touch-action: none;
      touch-action: none
    }

    .jw-rail,
    .jw-buffer,
    .jw-progress {
      position: absolute;
      cursor: pointer
    }

    .jw-progress {
      background-color: #fff
    }

    .jw-rail {
      background-color: #aaa
    }

    .jw-buffer {
      background-color: #202020
    }

    .jw-cue,
    .jw-knob {
      position: absolute;
      cursor: pointer
    }

    .jw-cue {
      background-color: #fff;
      width: .1em;
      height: .4em
    }

    .jw-knob {
      background-color: #aaa;
      width: .4em;
      height: .4em
    }

    .jw-slider-horizontal {
      width: 4em;
      height: 1em
    }

    .jw-slider-horizontal.jw-slider-volume {
      margin-right: 5px
    }

    .jw-slider-horizontal .jw-rail,
    .jw-slider-horizontal .jw-buffer,
    .jw-slider-horizontal .jw-progress {
      width: 100%;
      height: .4em
    }

    .jw-slider-horizontal .jw-progress,
    .jw-slider-horizontal .jw-buffer {
      width: 0
    }

    .jw-slider-horizontal .jw-rail,
    .jw-slider-horizontal .jw-progress,
    .jw-slider-horizontal .jw-slider-container {
      width: 100%
    }

    .jw-slider-horizontal .jw-knob {
      left: 0;
      margin-left: -0.325em
    }

    .jw-slider-vertical {
      width: .75em;
      height: 4em;
      bottom: 0;
      position: absolute;
      padding: 1em
    }

    .jw-slider-vertical .jw-rail,
    .jw-slider-vertical .jw-buffer,
    .jw-slider-vertical .jw-progress {
      bottom: 0;
      height: 100%
    }

    .jw-slider-vertical .jw-progress,
    .jw-slider-vertical .jw-buffer {
      height: 0
    }

    .jw-slider-vertical .jw-slider-container,
    .jw-slider-vertical .jw-rail,
    .jw-slider-vertical .jw-progress {
      bottom: 0;
      width: .75em;
      height: 100%;
      left: 0;
      right: 0;
      margin: 0 auto
    }

    .jw-slider-vertical .jw-slider-container {
      height: 4em;
      position: relative
    }

    .jw-slider-vertical .jw-knob {
      bottom: 0;
      left: 0;
      right: 0;
      margin: 0 auto
    }

    .jw-slider-time {
      right: 0;
      left: 0;
      width: 100%
    }

    .jw-tooltip-time {
      position: absolute
    }

    .jw-slider-volume .jw-buffer {
      display: none
    }

    .jw-captions {
      position: absolute;
      display: none;
      margin: 0 auto;
      width: 100%;
      left: 0;
      bottom: 3em;
      right: 0;
      max-width: 90%;
      text-align: center
    }

    .jw-captions.jw-captions-enabled {
      display: block
    }

    .jw-captions-window {
      display: none;
      padding: .25em;
      border-radius: .25em
    }

    .jw-captions-window.jw-captions-window-active {
      display: inline-block
    }

    .jw-captions-text {
      display: inline-block;
      color: white;
      background-color: black;
      word-wrap: break-word;
      white-space: pre-line;
      font-style: normal;
      font-weight: normal;
      text-align: center;
      text-decoration: none;
      line-height: 1.3em;
      padding: .1em .8em
    }

    .jw-rightclick {
      display: none;
      position: absolute;
      white-space: nowrap
    }

    .jw-rightclick.jw-open {
      display: block
    }

    .jw-rightclick ul {
      list-style: none;
      font-weight: bold;
      border-radius: .15em;
      margin: 0;
      border: 1px solid #444;
      padding-left: 0
    }

    .jw-rightclick .jw-rightclick-logo {
      font-size: 2em;
      color: #ff0147;
      vertical-align: middle;
      padding-right: .3em;
      margin-right: .3em;
      border-right: 1px solid #444
    }

    .jw-rightclick li {
      background-color: #000;
      border-bottom: 1px solid #444;
      margin: 0
    }

    .jw-rightclick a {
      color: #fff;
      text-decoration: none;
      padding: 1em;
      display: block;
      font-size: .6875em
    }

    .jw-rightclick li:last-child {
      border-bottom: none
    }

    .jw-rightclick li:hover {
      background-color: #1a1a1a;
      cursor: pointer
    }

    .jw-rightclick .jw-featured {
      background-color: #252525;
      vertical-align: middle
    }

    .jw-rightclick .jw-featured a {
      color: #777
    }

    .jw-logo {
      float: right;
      padding: .75em;
      cursor: pointer;
      pointer-events: all
    }

    .jw-logo .jw-flag-audio-player {
      display: none
    }

    .jw-watermark {
      position: absolute;
      top: 50%;
      left: 0;
      right: 0;
      bottom: 0;
      text-align: center;
      font-size: 14em;
      color: #eee;
      opacity: .33;
      pointer-events: none
    }

    .jw-icon-tooltip.jw-open .jw-overlay {
      opacity: 1;
      visibility: visible
    }

    .jw-icon-tooltip.jw-hidden {
      display: none
    }

    .jw-overlay-horizontal {
      display: none
    }

    .jw-icon-tooltip.jw-open-drawer:before {
      display: none
    }

    .jw-icon-tooltip.jw-open-drawer .jw-overlay-horizontal {
      opacity: 1;
      display: inline-block;
      vertical-align: top
    }

    .jw-overlay:before {
      position: absolute;
      top: 0;
      bottom: 0;
      left: -50%;
      width: 100%;
      background-color: rgba(0, 0, 0, 0);
      content: " "
    }

    .jw-slider-time .jw-overlay:before {
      height: 1em;
      top: auto
    }

    .jw-time-tip,
    .jw-volume-tip,
    .jw-menu {
      position: relative;
      left: -50%;
      border: solid 1px #000;
      margin: 0
    }

    .jw-volume-tip {
      width: 100%;
      height: 100%;
      display: block
    }

    .jw-time-tip {
      text-align: center;
      font-family: inherit;
      color: #aaa;
      bottom: 1em;
      border: solid 4px #000
    }

    .jw-time-tip .jw-text {
      line-height: 1em
    }

    .jw-controlbar .jw-overlay {
      margin: 0;
      position: absolute;
      bottom: 2em;
      left: 50%;
      opacity: 0;
      visibility: hidden
    }

    .jw-controlbar .jw-overlay .jw-contents {
      position: relative
    }

    .jw-controlbar .jw-option {
      position: relative;
      white-space: nowrap;
      cursor: pointer;
      list-style: none;
      height: 1.5em;
      font-family: inherit;
      line-height: 1.5em;
      color: #aaa;
      padding: 0 .5em;
      font-size: .8em
    }

    .jw-controlbar .jw-option:hover,
    .jw-controlbar .jw-option:before:hover {
      color: #eee
    }

    .jw-controlbar .jw-option:before {
      padding-right: .125em
    }

    .jw-playlist-container ::-webkit-scrollbar-track {
      background-color: #333;
      border-radius: 10px
    }

    .jw-playlist-container ::-webkit-scrollbar {
      width: 5px;
      border: 10px solid black;
      border-bottom: 0;
      border-top: 0
    }

    .jw-playlist-container ::-webkit-scrollbar-thumb {
      background-color: white;
      border-radius: 5px
    }

    .jw-tooltip-title {
      border-bottom: 1px solid #444;
      text-align: left;
      padding-left: .7em
    }

    .jw-playlist {
      max-height: 11em;
      min-height: 4.5em;
      overflow-x: hidden;
      overflow-y: scroll;
      width: calc(100% - 4px)
    }

    .jw-playlist .jw-option {
      height: 3em;
      margin-right: 5px;
      color: white;
      padding-left: 1em;
      font-size: .8em
    }

    .jw-playlist .jw-label,
    .jw-playlist .jw-name {
      display: inline-block;
      line-height: 3em;
      text-align: left;
      overflow: hidden;
      white-space: nowrap
    }

    .jw-playlist .jw-label {
      width: 1em
    }

    .jw-playlist .jw-name {
      width: 11em
    }

    .jw-skip {
      cursor: default;
      position: absolute;
      float: right;
      display: inline-block;
      right: .75em;
      bottom: 3em
    }

    .jw-skip.jw-skippable {
      cursor: pointer
    }

    .jw-skip.jw-hidden {
      visibility: hidden
    }

    .jw-skip .jw-skip-icon {
      display: none;
      margin-left: -0.75em
    }

    .jw-skip .jw-skip-icon:before {
      content: "\e60c"
    }

    .jw-skip .jw-text,
    .jw-skip .jw-skip-icon {
      color: #aaa;
      vertical-align: middle;
      line-height: 1.5em;
      font-size: .7em
    }

    .jw-skip.jw-skippable:hover {
      cursor: pointer
    }

    .jw-skip.jw-skippable:hover .jw-text,
    .jw-skip.jw-skippable:hover .jw-skip-icon {
      color: #eee
    }

    .jw-skip.jw-skippable .jw-skip-icon {
      display: inline;
      margin: 0
    }

    .jwplayer.jw-state-playing.jw-flag-casting .jw-display-icon-container,
    .jwplayer.jw-state-paused.jw-flag-casting .jw-display-icon-container {
      display: table
    }

    .jwplayer.jw-flag-casting .jw-display-icon-container {
      border-radius: 0;
      top: 8em;
      padding: 2em 5em;
      border: 1px solid white
    }

    .jwplayer.jw-flag-casting .jw-display-icon-container .jw-icon {
      font-size: 3em
    }

    .jwplayer.jw-flag-casting.jw-state-complete .jw-preview {
      display: none
    }

    .jw-cast {
      position: absolute;
      width: 100%;
      height: 100%;
      background-repeat: no-repeat;
      background-size: auto;
      background-position: 50% 50%
    }

    .jw-cast-label {
      position: absolute;
      left: 10px;
      right: 10px;
      bottom: 50%;
      margin-bottom: 100px;
      text-align: center
    }

    .jw-cast-name {
      color: #ccc
    }

    .jw-state-idle .jw-preview {
      display: block
    }

    .jw-state-idle .jw-icon-display:before {
      content: "\e60e"
    }

    .jw-state-idle .jw-controlbar {
      display: none
    }

    .jw-state-idle .jw-captions {
      display: none
    }

    .jw-state-idle .jw-title {
      display: block
    }

    .jwplayer.jw-state-playing .jw-display-icon-container {
      display: none
    }

    .jwplayer.jw-state-playing .jw-display-icon-container .jw-icon-display:before {
      content: "\e60d"
    }

    .jwplayer.jw-state-playing .jw-icon-playback:before {
      content: "\e60d"
    }

    .jwplayer.jw-state-paused .jw-display-icon-container {
      display: none
    }

    .jwplayer.jw-state-paused .jw-display-icon-container .jw-icon-display:before {
      content: "\e60e"
    }

    .jwplayer.jw-state-paused .jw-icon-playback:before {
      content: "\e60e"
    }

    .jwplayer.jw-state-buffering .jw-display-icon-container .jw-icon-display {
      -webkit-animation: spin 2s linear infinite;
      animation: spin 2s linear infinite
    }

    .jwplayer.jw-state-buffering .jw-display-icon-container .jw-icon-display:before {
      content: "\e601"
    }

    @-webkit-keyframes spin {
      100% {
        -webkit-transform: rotate(360deg)
      }
    }

    @keyframes spin {
      100% {
        -webkit-transform: rotate(360deg);
        transform: rotate(360deg)
      }
    }

    .jwplayer.jw-state-buffering .jw-display-icon-container .jw-text {
      display: none
    }

    .jwplayer.jw-state-buffering .jw-icon-playback:before {
      content: "\e60d"
    }

    .jwplayer.jw-state-complete .jw-preview {
      display: block
    }

    .jwplayer.jw-state-complete .jw-display-icon-container .jw-icon-display:before {
      content: "\e610"
    }

    .jwplayer.jw-state-complete .jw-display-icon-container .jw-text {
      display: none
    }

    .jwplayer.jw-state-complete .jw-icon-playback:before {
      content: "\e60e"
    }

    .jwplayer.jw-state-complete .jw-captions {
      display: none
    }

    body .jw-error .jw-title,
    .jwplayer.jw-state-error .jw-title {
      display: block
    }

    body .jw-error .jw-title .jw-title-primary,
    .jwplayer.jw-state-error .jw-title .jw-title-primary {
      white-space: normal
    }

    body .jw-error .jw-preview,
    .jwplayer.jw-state-error .jw-preview {
      display: block
    }

    body .jw-error .jw-controlbar,
    .jwplayer.jw-state-error .jw-controlbar {
      display: none
    }

    body .jw-error .jw-captions,
    .jwplayer.jw-state-error .jw-captions {
      display: none
    }

    body .jw-error:hover .jw-display-icon-container,
    .jwplayer.jw-state-error:hover .jw-display-icon-container {
      cursor: default;
      color: #fff;
      background: #000
    }

    body .jw-error .jw-icon-display,
    .jwplayer.jw-state-error .jw-icon-display {
      cursor: default;
      font-family: 'jw-icons';
      -webkit-font-smoothing: antialiased;
      font-style: normal;
      font-weight: normal;
      text-transform: none;
      background-color: transparent;
      font-variant: normal;
      -webkit-font-feature-settings: "liga";
      -ms-font-feature-settings: "liga" 1;
      -o-font-feature-settings: "liga";
      font-feature-settings: "liga";
      -moz-osx-font-smoothing: grayscale
    }

    body .jw-error .jw-icon-display:before,
    .jwplayer.jw-state-error .jw-icon-display:before {
      content: "\e607"
    }

    body .jw-error .jw-icon-display:hover,
    .jwplayer.jw-state-error .jw-icon-display:hover {
      color: #fff
    }

    body .jw-error {
      font-size: 16px;
      background-color: #000;
      color: #eee;
      width: 100%;
      height: 100%;
      display: table;
      opacity: 1;
      position: relative
    }

    body .jw-error .jw-icon-container {
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      bottom: 0;
      right: 0
    }

    .jwplayer.jw-flag-cast-available .jw-controlbar {
      display: table
    }

    .jwplayer.jw-flag-cast-available .jw-icon-cast {
      display: inline-block
    }

    .jwplayer.jw-flag-skin-loading .jw-captions,
    .jwplayer.jw-flag-skin-loading .jw-controls,
    .jwplayer.jw-flag-skin-loading .jw-title {
      display: none
    }

    .jwplayer.jw-flag-fullscreen {
      width: 100% !important;
      height: 100% !important;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      z-index: 1000;
      margin: 0;
      position: fixed
    }

    .jwplayer.jw-flag-fullscreen.jw-flag-user-inactive {
      cursor: none;
      -webkit-cursor-visibility: auto-hide
    }

    .jwplayer.jw-flag-live .jw-controlbar .jw-text-elapsed,
    .jwplayer.jw-flag-live .jw-controlbar .jw-text-duration,
    .jwplayer.jw-flag-live .jw-controlbar .jw-slider-time {
      display: none
    }

    .jwplayer.jw-flag-live .jw-controlbar .jw-text-alt {
      display: inline
    }

    .jw-flag-user-inactive.jw-state-playing .jw-controlbar,
    .jw-flag-user-inactive.jw-state-playing .jw-dock {
      display: none
    }

    .jw-flag-user-inactive.jw-state-playing .jw-logo.jw-hide {
      display: none
    }

    .jw-flag-user-inactive.jw-state-playing .jw-plugin,
    .jw-flag-user-inactive.jw-state-playing .jw-captions {
      bottom: .5em
    }

    .jwplayer.jw-flag-media-audio .jw-controlbar {
      display: table
    }

    .jw-flag-media-audio .jw-preview {
      display: block
    }

    .jwplayer.jw-flag-ads .jw-preview,
    .jwplayer.jw-flag-ads .jw-dock {
      display: none
    }

    .jwplayer.jw-flag-ads .jw-controlbar .jw-icon-inline,
    .jwplayer.jw-flag-ads .jw-controlbar .jw-icon-tooltip,
    .jwplayer.jw-flag-ads .jw-controlbar .jw-text,
    .jwplayer.jw-flag-ads .jw-controlbar .jw-slider-horizontal {
      display: none
    }

    .jwplayer.jw-flag-ads .jw-controlbar .jw-icon-playback,
    .jwplayer.jw-flag-ads .jw-controlbar .jw-icon-volume,
    .jwplayer.jw-flag-ads .jw-controlbar .jw-slider-volume,
    .jwplayer.jw-flag-ads .jw-controlbar .jw-icon-fullscreen {
      display: inline-block
    }

    .jwplayer.jw-flag-ads .jw-controlbar .jw-text-alt {
      display: inline
    }

    .jwplayer.jw-flag-ads .jw-controlbar .jw-slider-volume.jw-slider-horizontal,
    .jwplayer.jw-flag-ads .jw-controlbar .jw-icon-inline.jw-icon-volume {
      display: inline-block
    }

    .jwplayer.jw-flag-ads .jw-controlbar .jw-icon-tooltip.jw-icon-volume {
      display: none
    }

    .jwplayer.jw-flag-ads .jw-logo {
      display: none
    }

    .jwplayer.jw-flag-ads-hide-controls .jw-controls {
      display: none !important
    }

    .jwplayer.jw-flag-ads.jw-flag-touch .jw-controlbar {
      display: table
    }

    .jwplayer.jw-flag-overlay-open .jw-title {
      display: none
    }

    .jwplayer.jw-flag-overlay-open .jw-controls-right .jw-logo {
      display: none
    }

    .jwplayer.jw-flag-rightclick-open {
      overflow: visible
    }

    .jwplayer.jw-flag-rightclick-open .jw-rightclick {
      z-index: 16777215
    }

    .jw-flag-controls-disabled .jw-controls {
      visibility: hidden
    }

    .jw-flag-controls-disabled .jw-logo {
      visibility: visible
    }

    .jw-flag-controls-disabled .jw-media {
      cursor: auto
    }

    body .jwplayer.jw-flag-flash-blocked .jw-title {
      display: block
    }

    body .jwplayer.jw-flag-flash-blocked .jw-controls,
    body .jwplayer.jw-flag-flash-blocked .jw-overlays,
    body .jwplayer.jw-flag-flash-blocked .jw-preview {
      display: none
    }

    .jw-flag-touch .jw-controlbar,
    .jw-flag-touch .jw-skip,
    .jw-flag-touch .jw-plugin {
      font-size: 1.5em
    }

    .jw-flag-touch .jw-captions {
      bottom: 4.25em
    }

    .jw-flag-touch .jw-icon-tooltip.jw-open-drawer:before {
      display: inline
    }

    .jw-flag-touch .jw-icon-tooltip.jw-open-drawer:before {
      content: "\e615"
    }

    .jw-flag-touch .jw-display-icon-container {
      pointer-events: none
    }

    .jw-flag-touch.jw-state-paused .jw-display-icon-container {
      display: table
    }

    .jw-flag-touch.jw-state-paused.jw-flag-dragging .jw-display-icon-container {
      display: none
    }

    .jw-flag-compact-player .jw-icon-playlist,
    .jw-flag-compact-player .jw-icon-next,
    .jw-flag-compact-player .jw-icon-prev,
    .jw-flag-compact-player .jw-text-elapsed,
    .jw-flag-compact-player .jw-text-duration {
      display: none
    }

    .jw-flag-audio-player {
      background-color: transparent
    }

    .jw-flag-audio-player .jw-media {
      visibility: hidden
    }

    .jw-flag-audio-player .jw-media object {
      width: 1px;
      height: 1px
    }

    .jw-flag-audio-player .jw-controlbar {
      display: table;
      bottom: 0;
      margin: 0;
      width: 100%;
      min-width: 100%;
      opacity: 1
    }

    .jw-flag-audio-player .jw-controlbar .jw-icon-fullscreen {
      display: none
    }

    .jw-flag-audio-player .jw-controlbar .jw-icon-tooltip {
      display: none
    }

    .jw-flag-audio-player .jw-controlbar .jw-slider-volume.jw-slider-horizontal,
    .jw-flag-audio-player .jw-controlbar .jw-icon-inline.jw-icon-volume {
      display: inline-block
    }

    .jw-flag-audio-player .jw-controlbar .jw-icon-tooltip.jw-icon-volume {
      display: none
    }

    .jwplayer.jw-flag-audio-player .jw-controlbar {
      display: table;
      left: 0
    }

    .jwplayer.jw-flag-audio-player .jw-controlbar {
      height: auto
    }

    .jwplayer.jw-flag-audio-player .jw-preview {
      display: none
    }

    .jwplayer.jw-flag-audio-player .jw-display-icon-container {
      display: none
    }

    .jw-skin-seven .jw-background-color {
      background: #000
    }

    .jw-skin-seven .jw-controlbar {
      border-top: #333 1px solid;
      height: 2.5em
    }

    .jw-skin-seven .jw-group {
      vertical-align: middle
    }

    .jw-skin-seven .jw-playlist {
      background-color: rgba(0, 0, 0, 0.5)
    }

    .jw-skin-seven .jw-playlist-container {
      left: -43%;
      background-color: rgba(0, 0, 0, 0.5)
    }

    .jw-skin-seven .jw-playlist-container .jw-option {
      border-bottom: 1px solid #444
    }

    .jw-skin-seven .jw-playlist-container .jw-option:hover,
    .jw-skin-seven .jw-playlist-container .jw-option.jw-active-option {
      background-color: black
    }

    .jw-skin-seven .jw-playlist-container .jw-option:hover .jw-label {
      color: #ff0046
    }

    .jw-skin-seven .jw-playlist-container .jw-icon-playlist {
      margin-left: 0
    }

    .jw-skin-seven .jw-playlist-container .jw-label .jw-icon-play {
      color: #ff0046
    }

    .jw-skin-seven .jw-playlist-container .jw-label .jw-icon-play:before {
      padding-left: 0
    }

    .jw-skin-seven .jw-tooltip-title {
      background-color: #000;
      color: #fff
    }

    .jw-skin-seven .jw-text {
      color: #fff
    }

    .jw-skin-seven .jw-button-color {
      color: #fff
    }

    .jw-skin-seven .jw-button-color:hover {
      color: #ff0046
    }

    .jw-skin-seven .jw-toggle {
      color: #ff0046
    }

    .jw-skin-seven .jw-toggle.jw-off {
      color: #fff
    }

    .jw-skin-seven .jw-controlbar .jw-icon:before,
    .jw-skin-seven .jw-text-elapsed,
    .jw-skin-seven .jw-text-duration {
      padding: 0 .7em
    }

    .jw-skin-seven .jw-controlbar .jw-icon-prev:before {
      padding-right: .25em
    }

    .jw-skin-seven .jw-controlbar .jw-icon-playlist:before {
      padding: 0 .45em
    }

    .jw-skin-seven .jw-controlbar .jw-icon-next:before {
      padding-left: .25em
    }

    .jw-skin-seven .jw-icon-prev,
    .jw-skin-seven .jw-icon-next {
      font-size: .7em
    }

    .jw-skin-seven .jw-icon-prev:before {
      border-left: 1px solid #666
    }

    .jw-skin-seven .jw-icon-next:before {
      border-right: 1px solid #666
    }

    .jw-skin-seven .jw-icon-display {
      color: #fff
    }

    .jw-skin-seven .jw-icon-display:before {
      padding-left: 0
    }

    .jw-skin-seven .jw-display-icon-container {
      border-radius: 50%;
      border: 1px solid #333
    }

    .jw-skin-seven .jw-rail {
      background-color: #384154;
      box-shadow: none
    }

    .jw-skin-seven .jw-buffer {
      background-color: #666f82
    }

    .jw-skin-seven .jw-progress {
      background: #ff0046
    }

    .jw-skin-seven .jw-knob {
      width: .6em;
      height: .6em;
      background-color: #fff;
      box-shadow: 0 0 0 1px #000;
      border-radius: 1em
    }

    .jw-skin-seven .jw-slider-horizontal .jw-slider-container {
      height: .95em
    }

    .jw-skin-seven .jw-slider-horizontal .jw-rail,
    .jw-skin-seven .jw-slider-horizontal .jw-buffer,
    .jw-skin-seven .jw-slider-horizontal .jw-progress {
      height: .2em;
      border-radius: 0
    }

    .jw-skin-seven .jw-slider-horizontal .jw-knob {
      top: -0.2em
    }

    .jw-skin-seven .jw-slider-horizontal .jw-cue {
      top: -0.05em;
      width: .3em;
      height: .3em;
      background-color: #fff;
      border-radius: 50%
    }

    .jw-skin-seven .jw-slider-vertical .jw-rail,
    .jw-skin-seven .jw-slider-vertical .jw-buffer,
    .jw-skin-seven .jw-slider-vertical .jw-progress {
      width: .2em
    }

    .jw-skin-seven .jw-volume-tip {
      width: 100%;
      left: -45%;
      padding-bottom: .7em
    }

    .jw-skin-seven .jw-text-duration {
      color: #666f82
    }

    .jw-skin-seven .jw-controlbar-right-group .jw-icon-tooltip:before,
    .jw-skin-seven .jw-controlbar-right-group .jw-icon-inline:before {
      border-left: 1px solid #666
    }

    .jw-skin-seven .jw-controlbar-right-group .jw-icon-inline:first-child:before {
      border: none
    }

    .jw-skin-seven .jw-dock .jw-dock-button {
      border-radius: 50%;
      border: 1px solid #333
    }

    .jw-skin-seven .jw-dock .jw-overlay {
      border-radius: 2.5em
    }

    .jw-skin-seven .jw-icon-tooltip .jw-active-option {
      background-color: #ff0046;
      color: #fff
    }

    .jw-skin-seven .jw-icon-volume {
      min-width: 2.6em
    }

    .jw-skin-seven .jw-time-tip,
    .jw-skin-seven .jw-menu,
    .jw-skin-seven .jw-volume-tip,
    .jw-skin-seven .jw-skip {
      border: 1px solid #333
    }

    .jw-skin-seven .jw-time-tip {
      padding: .2em;
      bottom: 1.3em
    }

    .jw-skin-seven .jw-menu,
    .jw-skin-seven .jw-volume-tip {
      bottom: .24em
    }

    .jw-skin-seven .jw-skip {
      padding: .4em;
      border-radius: 1.75em
    }

    .jw-skin-seven .jw-skip .jw-text,
    .jw-skin-seven .jw-skip .jw-icon-inline {
      color: #fff;
      line-height: 1.75em
    }

    .jw-skin-seven .jw-skip.jw-skippable:hover .jw-text,
    .jw-skin-seven .jw-skip.jw-skippable:hover .jw-icon-inline {
      color: #ff0046
    }

    .jw-skin-seven.jw-flag-touch .jw-controlbar .jw-icon:before,
    .jw-skin-seven.jw-flag-touch .jw-text-elapsed,
    .jw-skin-seven.jw-flag-touch .jw-text-duration {
      padding: 0 .35em
    }

    .jw-skin-seven.jw-flag-touch .jw-controlbar .jw-icon-prev:before {
      padding: 0 .125em 0 .7em
    }

    .jw-skin-seven.jw-flag-touch .jw-controlbar .jw-icon-next:before {
      padding: 0 .7em 0 .125em
    }

    .jw-skin-seven.jw-flag-touch .jw-controlbar .jw-icon-playlist:before {
      padding: 0 .225em
    }
  </style>
  <style id="theia-sticky-sidebar-stylesheet-TSS">
    .theiaStickySidebar:after {
      content: "";
      display: table;
      clear: both;
    }
  </style>
</head>

<body class="">

  <div id="sticky-wrapper" class="sticky-wrapper" style="height: 50px;">
    <header class="batnie-header">
      <div class="row align-items-center">
        <div class="col-xl-8 col-md-6 col-7">
          <div class="brand-wrap">
            <a href="javascript:void(0);" class="batnie-toggle">
              <span class="toggle-separator"></span>
            </a>
            <div class="batnie-brand">
              <a href="/">Okanime</a>
            </div>
          </div>
          <nav class="navbar navbar-expand d-inline-block">
            <ul class="navbar-nav">
              <li class="nav-item hide-m">
                <a class="nav-link" href="/animes">الانمي</a>
              </li>
              <li class="nav-item hide-m">
                <a class="nav-link" href="/movies">الأفلام</a>
              </li>
              <li class="nav-item hide-m">
                <a class="nav-link" href="/pages/in-progress">الأخبار</a>
              </li>
              <li class="nav-item hide-m">
                <a class="nav-link" href="/walls">الحائط</a>
              </li>
              <li class="nav-item d-xl-none">
                <a href="javascript:void(0);" class="nav-link search-toggle"><i class="far fa-search"></i></a>
              </li>
              <li class="nav-item nav-item-no-before nav-item-more dropdown">
                <a href="javascript:void(0)" class="nav-link dropdown-toggle" data-toggle="dropdown"><i
                    class="fas fa-ellipsis-h"></i></a>
                <div class="dropdown-menu">
                  <div class="dropdown-title">خدماتنا لكم</div>
                  <div class="row">
                    <div class="col-4">
                      <a href="/dashboard/newest_episodes" class="quick-link">
                        <img width="39" alt="Latest episodes"
                          src="/assets/icons/icon3@1x-e8360bbab3da25b2a9c3d8605e01e37f15423ed8b4b2d454465b056e6c22aecb.svg">
                        <span class="quick-link-title">آخر الحلقات</span>
                      </a>
                    </div>
                    <div class="col-4">
                      <a href="/dashboard/checked_animes" class="quick-link">
                        <img width="39" alt=""
                          src="/assets/icons/icon4@1x-f757de57b5be6b4417073047a44968d59dbb99d57c6253b6e4d2f9fa426dc87f.svg">
                        <span class="quick-link-title">انميات تم التحقق منها</span>
                      </a>
                    </div>
                    <div class="col-4">
                      <a href="/playlists" class="quick-link">
                        <img width="39" alt=""
                          src="/assets/icons/icon5@1x-68ac4934bc4f70524e21fc5c3a2e9378a4a3db7e06a78e66aaa8e13cf2682783.svg">
                        <span class="quick-link-title">مجموعات مقترحة</span>
                      </a>
                    </div>
                    <div class="col-4">
                      <a href="/schedule" class="quick-link">
                        <img width="39" alt=""
                          src="/assets/icons/icon6@1x-17b36f7f3ec0ac997d5a61b59920cee91256c52c64b99d25e6d895344a117dad.svg">
                        <span class="quick-link-title">مواعيد البث</span>
                      </a>
                    </div>
                    <div class="col-4">
                      <a href="/pages/request" class="quick-link">
                        <img width="39" alt="Requests"
                          src="/assets/icons/icon7@1x-c0d22af11a87d45e68d670eca7202569ca10397bbf24d1fb23cb9a598ea23b04.svg">
                        <span class="quick-link-title">طلبات</span>
                      </a>
                    </div>
                    <div class="col-4">
                      <a href="/walls" class="quick-link">
                        <img width="39" alt="The wall"
                          src="/assets/icons/icon8@1x-0723a2caaf434d56665d7d584e37ea44c5da124639c3bb8928b7a8b524c003c1.svg">
                        <span class="quick-link-title">الحائط</span>
                      </a>
                    </div>
                    <div class="col-4">
                      <a href="/pages/staff" class="quick-link">
                        <img width="39" alt="Crew"
                          src="/assets/icons/icon9@1x-f3090bc86955a097d265a30fd7278c60d1b7ee2c303372d4ba3bf7ee67475269.svg">
                        <span class="quick-link-title">طاقم العمل</span>
                      </a>
                    </div>
                    <div class="col-4">
                      <a href="/pages/discord" class="quick-link">
                        <img width="39" alt="Discovery"
                          src="/assets/icons/icon10@1x-65d463f0b4a5bedf54fd843000640e758c496fa1137dcb89ad0c01dbe4371149.svg">
                        <span class="quick-link-title">ديسكورد</span>
                      </a>
                    </div>
                    <div class="col-4">
                      <a href="/pages/tutorial" class="quick-link">
                        <img width="39" alt="Explained Ok Anime"
                          src="/assets/icons/icon11@1x-4d050aee5f115bf32d63f268d28720da9c79218afe72c5f7f57801b7e055f119.svg">
                        <span class="quick-link-title">شرح اوك انمي</span>
                      </a>
                    </div>
                  </div>
                </div>
                <div class="mobile-nav">
                  <div class="dropdown-menu2">
                    <div class="asidebar-menu-item">
                      <ul class="top-black-nav">
                        <li><a href="javascript:void(0)">مكتبتي</a></li>
                        <li><a href="javascript:void(0)">اكمل المتابعة</a></li>
                      </ul>
                    </div>
                    <div class="asidebar-menu-item">
                      <ul>
                        <li><a href="/animes">الانمي</a></li>
                        <li><a href="/movies">الافلام</a></li>
                        <li><a href="/under_construction">الأخبار</a></li>
                        <li><a href="/walls">الحائط</a></li>
                      </ul>
                    </div>
                    <div class="asidebar-menu-item">
                      <ul>
                        <li><a href="/dashboard/newest_episodes">آخر الحلقات</a></li>
                        <li><a href="/dashboard/checked_animes">انميات تم التحقق منها</a></li>
                        <li><a href="/playlists">مجموعات مقترحة</a></li>
                        <li><a href="/schedule">مواعيد البث</a></li>
                        <li><a href="/pages/request">طلبات</a></li>
                        <li><a href="/pages/staff">طاقم العمل</a></li>
                        <li><a href="/pages/discord">ديسكورد</a></li>
                        <li><a href="/pages/tutorial">شرح اوك انمي</a></li>
                      </ul>
                    </div>
                  </div>
                </div>
              </li>
            </ul>
          </nav>
          <form class="form-inline form-search" id="search-form" action="/search">
            <div class="form-wrap">
              <input type="text" name="search" placeholder="بحث"
                onkeyup="if (!window.__cfRLUnblockHandlers) return false; SearchAnimeFunction()" class="form-control"
                id="Search" autocomplete="off">
              <div class="search-results">
                <div class="batnie-vertical-scroll mCustomScrollbar _mCS_1 mCS-dir-rtl mCS_no_scrollbar">
                  <div id="mCSB_1" class="mCustomScrollBox mCS-light mCSB_vertical mCSB_inside"
                    style="max-height: none;" tabindex="0">
                    <div id="mCSB_1_container" class="mCSB_container mCS_y_hidden mCS_no_scrollbar_y"
                      style="position:relative; top:0; left:0;" dir="rtl">
                      <ul id="SearchResults">
                      </ul>
                    </div>
                    <div id="mCSB_1_scrollbar_vertical"
                      class="mCSB_scrollTools mCSB_1_scrollbar mCS-light mCSB_scrollTools_vertical"
                      style="display: none;">
                      <div class="mCSB_draggerContainer">
                        <div id="mCSB_1_dragger_vertical" class="mCSB_dragger"
                          style="position: absolute; min-height: 30px; top: 0px;">
                          <div class="mCSB_dragger_bar" style="line-height: 30px;"></div>
                        </div>
                        <div class="mCSB_draggerRail"></div>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="dropdown-footer">
                  <a href="/search" class="dropdown-footer-link">البحث المتقدم</a>
                </div>
              </div>
              <div class="search-btn-wrap">
                <ul class="navbar-nav">
                  <li class="nav-item dropdown">
                    <a href="/animes" class="nav-link dropdown-toggle" data-toggle="dropdown"><span
                        class="form-search-text">الكل</span></a>
                    <div class="dropdown-menu dropdown-menu-right search-categories">
                      <div class="form-check">
                        <label for="All" class="form-check-label">
                          <input type="radio" name="All" value="all" class="form-check-input" id="All">
                          الكل
                        </label>
                      </div>
                      <div class="form-check">
                        <label for="Anime" class="form-check-label">
                          <input type="radio" name="All" value="anime" class="form-check-input" id="Anime">
                          الأنمي
                        </label>
                      </div>
                      <div class="form-check">
                        <label for="Movies" class="form-check-label">
                          <input type="radio" name="All" value="movies" class="form-check-input" id="Movies">
                          الأفلام
                        </label>
                      </div>
                      <div class="form-check">
                        <label for="ova" class="form-check-label">
                          <input type="radio" name="All" value="ova" class="form-check-input" id="ova">
                          اوفا
                        </label>
                      </div>
                      <div class="form-check">
                        <label for="ona" class="form-check-label">
                          <input type="radio" name="All" value="ona" class="form-check-input" id="ona">
                          اونا
                        </label>
                      </div>
                      <div class="form-check">
                        <label for="Member" class="form-check-label">
                          <input type="radio" name="All" value="member" class="form-check-input" id="Member">
                          عضو
                        </label>
                      </div>
                    </div>
                  </li>
                </ul>
                <button class="btn" type="submit"><i class="far fa-search"></i></button>
              </div>
            </div>
          </form>
        </div>
        <div class="col-xl-4 col-md-6 col-5">
          <div class="header-links">
            <nav class="navbar navbar-expand float-left">
              <ul class="navbar-nav">
                <li class="nav-item nav-item-no-before nav-item-winner dropdown hide-m">
                  <a href="javascript:void(0)" class="nav-link dropdown-toggle" data-toggle="dropdown">
                    <img width="21" alt="Winner"
                      src="/assets/icons/icon2@1x-fc0442fabd51c892e69bf5feff9127400bb9ce8f0575698fc8c1a77e7b360b3b.svg">
                  </a>
                  <div class="dropdown-menu">
                    <div class="winner-notification">
                      <div class="batnie-icon">
                        <img width="110" alt="Winner"
                          src="/assets/icons/icon12@1x-117799c8d2d3f3a05dc2b627704013f2591775b17e2f9c0a935fc9bf163b5e22.svg">
                      </div>
                      <h6 class="winner-title">رقي حسابك، و كن باتريون</h6>
                      <p>احصل على مزايا و غنائم عديدة و ادعم الموقع على الاستمرار و التطور</p>
                      <div class="book-items-wrap">
                        <div class="row">
                          <div class="col-sm-4 col-6">
                            <a href="javascript:void(0)" class="book-item">
                              <img width="55" alt="إلا علانات"
                                src="/assets/icons/icon13@1x-5342c355c828d9587deeae200aa8ca5ab7a909f7280cce84e7413dc9bc360307.svg">
                              <span>لا إعلانات</span>
                            </a>
                          </div>
                          <div class="col-sm-4 col-6">
                            <a href="javascript:void(0)" class="book-item">
                              <img width="55" alt="اللاولوية"
                                src="/assets/icons/icon14@1x-27af05994e4ded5ae84acc37bc332b51d810736323786ef6b1faa5c4a6d3c1fc.svg">
                              <span>لك الاولوية</span>
                            </a>
                          </div>
                          <div class="col-sm-4 col-6">
                            <a href="javascript:void(0)" class="book-item">
                              <img width="55" alt="غنائم و أوسمة"
                                src="/assets/icons/icon15@1x-0f1ce013f55bbed3742cb79b744a7ca0b180ab937600657f7c8dd245778fe051.svg">
                              <span>غنائم و أوسمة</span>
                            </a>
                          </div>
                        </div>
                      </div>
                      <p> لننشيء معا افضل و اسهل موقع لمشاهدة الانمي بالوطن العربي و افضل وسيلة لمشاركة شغفك مع اصدقاء
                        جدد</p>
                      <a href="/patreon/index" class="btn btn-light-violet btn-lg">اقرئ كل التفاصيل</a>
                    </div>
                  </div>

                </li>
                <li class="nav-item nav-item-no-before nav-item-mega-dropdown play-dropdown dropdown hide-m">
                  <a href="#0" class="nav-link dropdown-toggle" data-toggle="dropdown"><i class="fas fa-play"></i></a>
                  <div class="dropdown-menu">
                    <div class="dropdown-empty-wrap">
                      <div class="batnie-icon"><img
                          src="/assets/icons/icon16@1x-a2279617f3d225335e17364733a30415efe82c85852300dab6d1511fe4be07c1.svg"
                          alt="" width="88"></div>
                      <h6 class="empty-wrap-title">احيانا لا تتذكر في اي حلقة توقفت ؟</h6>
                      <p>هنا ستجد تلقائيا اخر الحلقات اللي قمت بمتابعتها لتستكمل المشاهدة من اين توقفت بنقرة زر واحدة
                      </p>
                      <a href="/pages/continue-watching" class="btn btn-border-violet">شرح الخاصية بالفيديو</a>
                    </div>
                  </div>
                </li>
                <li class="nav-item nav-item-no-before nav-item-message dropdown">
                  <a href="#0" class="nav-link dropdown-toggle" data-toggle="dropdown"><i
                      class="fas fa-envelope"></i></a>
                  <div class="dropdown-menu">
                    <div class="dropdown-empty-wrap empty-wrap-style-three">
                      <p>ليست لديك اي رسائل</p>
                      <div class="batnie-icon">
                        <img data-sizes="auto" width="90" data-src="icons/icon18@1x.svg"
                          class="lazyautosizes lazyloaded" sizes="90px" src="icons/icon18@1x.svg">
                        <p>تعرف و تواصل مع اشخاص يشاركونك نفس الشغف عبر عن رأيك و افكارك في حائط اوك انمي</p>
                      </div>
                      <div class="dropdown-footer">
                        <a href="/pages/the-wall" class="dropdown-footer-link">طريقة استخدام الحائط</a>
                      </div>
                    </div>
                  </div>
                </li>
                <li class="nav-item nav-item-no-before nav-item-notification dropdown">
                  <a href="" class="nav-link dropdown-toggle" data-toggle="dropdown"><i class="fas fa-bell"></i></a>
                  <div class="dropdown-menu">
                    <div class="dropdown-empty-wrap empty-wrap-style-three">
                      <p>لا تضيع الوقت في البحث عن اخر الحلقات المستمرة اللي تتابعها،</p>
                      <div class="batnie-icon">
                        <img width="80" alt="Notification"
                          src="/assets/icons/icon19@1x-c85b331e6cadaeacaed5272a4bba729fd24795792679ed4e7c3e0b753d63cee4.svg">
                      </div>
                      <p> عند الإنخراط، ستتوصل بإشعارات فور صدور حلقة جديدة، لتكون السباق لمشاهدتها</p>
                    </div>
                    <div class="dropdown-footer">
                      <a href="/pages/notifications" class="dropdown-footer-link">شرح خاصية الإنخراط</a>
                    </div>
                  </div>
                </li>
                <li class="nav-item d-md-none">
                  <a data-toggle="modal" data-target="#BatnieLogin" href="javascript:void(0);" class="nav-link"><i
                      class="fas fa-user"></i></a>
                </li>
                <li class="nav-item nav-item-mega-dropdown nav-item-library dropdown hide-m">
                  <a href="javascript:void(0)" class="nav-link dropdown-toggle btn btn-default btn-outline-light"
                    data-toggle="dropdown">
                    <i class="fas fa-book-heart"></i>
                    <span> مكتبتي </span>
                  </a>
                  <div class="dropdown-menu">
                    <div class="dropdown-empty-wrap empty-wrap-style-two">
                      <div class="batnie-icon">
                        <img width="83" alt="Screen"
                          src="/assets/icons/icon17@1x-0e2298fc9e49e4963d8696c029e487aa71c806383d7755c747e29cab33c52031.svg">
                      </div>
                      <h6 class="empty-wrap-title">مكتبتك فارغة</h6>
                      <p>انشئ مكتبتك الخاصة، و شاركها مع اصدقائك،</p>
                      <a href="javascript:void(0)" class="btn btn-border-blue"> كيفية استخدام المكتبة</a>
                    </div>
                  </div>
                </li>
                <li class="nav-item hide-m">
                  <a href="#0" data-toggle="modal" data-target="#BatnieLogin" class="nav-link btn btn-violet">تسجيل
                    الدخول</a>
                </li>
              </ul>
            </nav>
          </div>
        </div>
      </div>
    </header>
  </div>

  <div class="modal fade" id="BatnieLogin">
    <div class="modal-dialog modal-dialog-centered modal-lg">
      <div class="modal-content">
        <button type="button" class="btn btn-default close-popup" data-dismiss="modal"><i
            class="far fa-times"></i></button>
        <div class="modal-body">
          <div class="modal-form-wrap">
            <div class="row">
              <div class="col-md-5">
                <div class="login-wrap">
                  <h6 class="form-wrap-title">تسجيل الدخول</h6>
                  <form class="new_user" id="login-box" action="/users/sign_in" accept-charset="UTF-8" method="post">
                    <input name="utf8" type="hidden" value="✓" autocomplete="off"><input type="hidden"
                      name="authenticity_token"
                      value="gX3jcqhECvg8byCkiJOGCC1Sz3Fkj8m+QRUPbZvMXTZL2ujmmWii4ckHNpQfJEfEnxXWkoSVcLLNHsoVbeWZaQ=="
                      autocomplete="off">
                    <ul class="list-group-item-danger error-list" id="errors-list" style="display: none"></ul>
                    <div class="form-group">
                      <input placeholder="بريد او اسم الحساب" class="form-control form-control-lg" id="login-email"
                        type="text" name="user[login]">
                    </div>
                    <div class="form-group">
                      <input placeholder="كلمة السر" class="form-control form-control-lg" id="login-password"
                        type="password" name="user[password]">
                    </div>
                    <div class="form-submit-group">
                      <div class="row align-items-center">
                        <div class="col-7">
                          <input type="submit" name="commit" value="تسجيل الدخول" class="btn btn-danger btn-lg"
                            data-disable-with="تسجيل الدخول">
                        </div>
                        <div class="col-5">
                          <div class="form-check form-custom-check float-left">
                            <label class="form-check-label" for="RememberMe">
                              <input name="user[remember_me]" type="hidden" value="0" autocomplete="off"><input
                                class="form-check-input" id="RememberMe" value="1" type="checkbox"
                                name="user[remember_me]">
                              تذكرني
                              <span class="form-check-wrap"></span>
                            </label>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div class="form-links-group">
                      <span class="link-item">
                        <a href="javascript:void(0)" data-toggle="modal" data-target="#BatnieSignup"
                          id="signup-button">التسجيل</a>
                      </span>
                      <a class="link-item" href="/users/password/new">نسيت كلمة السر؟</a>
                    </div>
                  </form>
                </div>
              </div>
              <div class="col-md-2 text-center">
                <div class="divider-line">
                  <span>أو</span>
                </div>
              </div>
              <div class="col-md-5">
                <div class="batnie-socials-links">
                  <ul>
                    <li class="patreon">
                      <a href="/patreon/authentication" style="background-color: #F79A59;">تسجيل الدخول بالباترون<i
                          class="fab fa-patreon"></i></a>
                    </li>
                    <li class="discord">
                      <a href="/users/auth/discord">تسجيل الدخول بالديسكورد <i class="fab fa-discord"></i></a>
                    </li>
                    <li class="google-plus">
                      <a href="/users/auth/google_oauth2">تسجيل الدخول بجوجل<i class="fab fa-google-plus-g"></i></a>
                    </li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="modal fade" id="BatnieSignup">
    <div class="modal-dialog modal-dialog-centered modal-lg">
      <div class="modal-content">
        <button type="button" class="btn btn-default close-popup" data-dismiss="modal"><i
            class="far fa-times"></i></button>
        <div class="modal-body">
          <div class="modal-form-wrap">
            <div class="row">
              <div class="col-md-5">
                <div class="signup-wrap">
                  <h6 class="form-wrap-title">تسجيل الدخول</h6>
                  <form class="new_user" id="signup-box" action="/users" accept-charset="UTF-8" method="post"><input
                      name="utf8" type="hidden" value="✓" autocomplete="off"><input type="hidden"
                      name="authenticity_token"
                      value="gX3jcqhECvg8byCkiJOGCC1Sz3Fkj8m+QRUPbZvMXTZL2ujmmWii4ckHNpQfJEfEnxXWkoSVcLLNHsoVbeWZaQ=="
                      autocomplete="off">
                    <ul class="list-group-item-danger error-list" id="errors-list" style="display: none"></ul>
                    <div class="form-group">
                      <input placeholder="الاسم" class="form-control form-control-lg" id="signup-name" type="text"
                        name="user[username]">
                      <em></em>
                    </div>
                    <div class="form-group">
                      <input placeholder="بريد او اسم الحساب" class="form-control form-control-lg" id="signup-email"
                        type="text" value="" name="user[email]">
                      <em></em>
                    </div>
                    <div class="form-group">
                      <input placeholder="كلمة السر" class="form-control form-control-lg" id="signup-password"
                        type="password" name="user[password]">
                      <em></em>
                    </div>
                    <div class="form-group">
                      <input placeholder="تاكيد كلمة السر" class="form-control form-control-lg"
                        id="signup-password-confirmation" type="password" name="user[password_confirmation]">
                      <em></em>
                    </div>
                    <div class="form-submit-group">
                      <div class="row align-items-center">
                        <div class="col-7">
                          <input type="submit" name="commit" value="تسجيل الدخول" class="btn btn-danger btn-lg"
                            data-disable-with="تسجيل الدخول">
                        </div>
                      </div>
                    </div>
                  </form>
                </div>
              </div>
              <div class="col-md-2 text-center">
                <div class="divider-line">
                  <span>أو</span>
                </div>
              </div>
              <div class="col-md-5">
                <div class="batnie-socials-links">
                  <ul>



                    <li class="discord">
                      <a href="/users/auth/discord">تسجيل الدخول بالديسكورد <i class="fab fa-discord"></i></a>
                    </li>
                    <li class="google-plus">
                      <a href="/users/auth/google_oauth2">تسجيل الدخول بجوجل<i class="fab fa-google-plus-g"></i></a>
                    </li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <aside class="episode-sidebar batnie-asidebar player-sidebar">
    <div class="asidebar-wrap">
      <div class="batnie-vertical-scroll asidebar-scroll mCustomScrollbar _mCS_2 mCS-dir-rtl">
        <div id="mCSB_2" class="mCustomScrollBox mCS-light mCSB_vertical mCSB_inside" style="max-height: none;"
          tabindex="0">
          <div id="mCSB_2_container" class="mCSB_container" style="position:relative; top:0; left:0;" dir="rtl">
            <div class="player-sidebar-wrap">
              <div class="okanime-rating" id="funsib_id" data-funsub="80">
                <a href="javascript:void(0)"><span>1 الترجمات</span> <small>Fan-sub</small> <i
                    class="fal fa-chevron-down"></i></a>
              </div>
              <div class="rating-list-block">
                <ul>
                  <li data-filter="60407">

                    <a href="javascript:void(0);"
                      onclick="if (!window.__cfRLUnblockHandlers) return false; display_video_version(60407)"><span>Fan-sub</span></a>
                  </li>
                </ul>
              </div>
              <div class="tabs">
                <ul class="nav nav-tabs" id="myTab" role="tablist">
                  <li class="nav-item">
                    <a class="nav-link active first" id="watch-tab" data-toggle="tab" href="#watch" role="tab"
                      aria-controls="episodes" aria-selected="true"><i class="far fa-play"></i> <span>مشاهدة</span></a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link" id="suggestions-tab" data-toggle="tab" href="#suggestions" role="tab"
                      aria-controls="suggestions" aria-selected="false"><i class="fal fa-layer-group"></i>
                      <span>حلقات</span></a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link" id="download-tab" data-toggle="tab" href="#download" role="tab"
                      aria-controls="download" aria-selected="false"><i class="fal fa-cloud-download"></i>
                      <span>تحميل</span></a>
                  </li>
                </ul>
                <div class="tab-content" id="myTabContent">
                  <div class="tab-pane fade show active" id="watch" role="tabpanel" aria-labelledby="watch-tab">
                    <div class="masonry-wrap video_version video_version_60407 watching_video_version_60407 " style="">
                      <div class="masonry-filters">
                        <ul>
                          <li><a href="javascript:void(0);" data-filter="*" class="active">الكل</a></li>
                          <li><a href="javascript:void(0);" data-filter=".ld">LD</a></li>
                          <li><a href="javascript:void(0);" data-filter=".sd">SD</a></li>
                          <li><a href="javascript:void(0);" data-filter=".hd">HD</a></li>
                          <li><a href="javascript:void(0);" data-filter=".fhd">FHD</a></li>
                        </ul>
                      </div>
                      <div class="webinars-inner-wrap">
                        <div class="batnie-vertical-scroll mCustomScrollbar _mCS_3 mCS-dir-rtl">
                          <div id="mCSB_3" class="mCustomScrollBox mCS-light mCSB_vertical mCSB_inside"
                            style="max-height: 407px;" tabindex="0">
                            <div id="mCSB_3_container" class="mCSB_container" style="position:relative; top:0; left:0;"
                              dir="rtl">
                              <div class="batnie-masonry" style="position: relative; height: 419.5px;">
                                <div class="batnie-scroll">
                                  <div class="masonry-item all masonry-filtered"
                                    onclick="if (!window.__cfRLUnblockHandlers) return false; $('#okfeatures').modal()"
                                    style="position: absolute; right: 0%; top: 0px;">
                                    <div class="quality-listing"
                                      style="font-size: small;font-weight: 600;color: #E6D283;">
                                      <span>SUSHI
                                        <i class="fas fa-crown"></i>
                                      </span>
                                      <small>MULTI</small>
                                    </div>
                                  </div>
                                  <div class="servers-list load_player_episode masonry-item all sd masonry-filtered"
                                    data-provider="mp4upload" data-provider_name="Mp4upload" data-vip="false"
                                    data-category="sd" data-href="/json/remote_files/508841?provider=mp4upload"
                                    style="position: absolute; right: 0%; top: 39.5px;">
                                    <div class="quality-listing">
                                      <span>Mp4upload</span>
                                      <small>SD</small>
                                    </div>
                                  </div>
                                  <div class="servers-list load_player_episode masonry-item all sd masonry-filtered"
                                    data-provider="uptobox" data-provider_name="Uptobox" data-vip="false"
                                    data-category="sd" data-href="/json/remote_files/508847?provider=uptobox"
                                    style="position: absolute; right: 0%; top: 77.5px;">
                                    <div class="quality-listing">
                                      <span>Uptobox</span>
                                      <small>SD</small>
                                    </div>
                                  </div>
                                  <div class="servers-list load_player_episode masonry-item all sd masonry-filtered"
                                    data-provider="vidoza" data-provider_name="Vidoza" data-vip="false"
                                    data-category="sd" data-href="/json/remote_files/508849?provider=vidoza"
                                    style="position: absolute; right: 0%; top: 115.5px;">
                                    <div class="quality-listing">
                                      <span>Vidoza</span>
                                      <small>SD</small>
                                    </div>
                                  </div>
                                  <div class="servers-list load_player_episode masonry-item all sd masonry-filtered"
                                    data-provider="my_stream" data-provider_name="MyStream" data-vip="false"
                                    data-category="sd" data-href="/json/remote_files/508842?provider=my_stream"
                                    style="position: absolute; right: 0%; top: 153.5px;">
                                    <div class="quality-listing">
                                      <span>MyStream</span>
                                      <small>SD</small>
                                    </div>
                                  </div>
                                  <div class="servers-list load_player_episode masonry-item all sd masonry-filtered"
                                    data-provider="rutube" data-provider_name="Rutube" data-vip="false"
                                    data-category="sd" data-href="/json/remote_files/508845?provider=rutube"
                                    style="position: absolute; right: 0%; top: 191.5px;">
                                    <div class="quality-listing">
                                      <span>Rutube</span>
                                      <small>SD</small>
                                    </div>
                                  </div>
                                  <div class="servers-list load_player_episode masonry-item all sd masonry-filtered"
                                    data-provider="clip_watching" data-provider_name="ClipWatching" data-vip="false"
                                    data-category="sd" data-href="/json/remote_files/508838?provider=clip_watching"
                                    style="position: absolute; right: 0%; top: 229.5px;">
                                    <div class="quality-listing">
                                      <span>ClipWatching</span>
                                      <small>SD</small>
                                    </div>
                                  </div>
                                  <div class="servers-list load_player_episode masonry-item all sd masonry-filtered"
                                    data-provider="yourupload" data-provider_name="Yourupload" data-vip="false"
                                    data-category="sd" data-href="/json/remote_files/508850?provider=yourupload"
                                    style="position: absolute; right: 0%; top: 267.5px;">
                                    <div class="quality-listing">
                                      <span>Yourupload</span>
                                      <small>SD</small>
                                    </div>
                                  </div>
                                  <div class="servers-list load_player_episode masonry-item all sd masonry-filtered"
                                    data-provider="vid_bom" data-provider_name="VidBom" data-vip="false"
                                    data-category="sd" data-href="/json/remote_files/508848?provider=vid_bom"
                                    style="position: absolute; right: 0%; top: 305.5px;">
                                    <div class="quality-listing">
                                      <span>VidBom</span>
                                      <small>SD</small>
                                    </div>
                                  </div>
                                  <div class="servers-list load_player_episode masonry-item all sd masonry-filtered"
                                    data-provider="server3" data-provider_name="Server 3" data-vip="false"
                                    data-category="sd" data-href="/json/remote_files/-508843?provider=server3"
                                    style="position: absolute; right: 0%; top: 343.5px;">
                                    <div class="quality-listing">
                                      <span>Server 3</span>
                                      <small>SD</small>
                                    </div>
                                  </div>
                                  <div class="servers-list load_player_episode masonry-item all sd masonry-filtered"
                                    data-provider="server4" data-provider_name="Server 4" data-vip="false"
                                    data-category="sd" data-href="/json/remote_files/-508844?provider=server4"
                                    style="position: absolute; right: 0%; top: 381.5px;">
                                    <div class="quality-listing">
                                      <span>Server 4</span>
                                      <small>SD</small>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                            <div id="mCSB_3_scrollbar_vertical"
                              class="mCSB_scrollTools mCSB_3_scrollbar mCS-light mCSB_scrollTools_vertical"
                              style="display: block;">
                              <div class="mCSB_draggerContainer">
                                <div id="mCSB_3_dragger_vertical" class="mCSB_dragger"
                                  style="position: absolute; min-height: 30px; display: block; height: 394px; max-height: 397px; top: 0px;">
                                  <div class="mCSB_dragger_bar" style="line-height: 30px;"></div>
                                </div>
                                <div class="mCSB_draggerRail"></div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="tab-pane fade" id="suggestions" role="tabpanel" aria-labelledby="suggestions-tab">
                    <form class="form-inline form-search" action="javascript:void(0)">
                      <div class="form-wrap">
                        <input type="text" name="Search" placeholder="اكتب رقم الحلقة" class="form-control"
                          id="episodeSearch"
                          onkeyup="if (!window.__cfRLUnblockHandlers) return false; filterEpisodeData('episodeSearch', 'episodes-search-results')">
                        <div class="search-keywords"></div>
                        <div class="search-results" id="search-results5">
                          <div class="batnie-vertical-scroll mCustomScrollbar _mCS_4 mCS-dir-rtl mCS_no_scrollbar">
                            <div id="mCSB_4" class="mCustomScrollBox mCS-light mCSB_vertical mCSB_inside"
                              style="max-height: none;" tabindex="0">
                              <div id="mCSB_4_container" class="mCSB_container mCS_y_hidden mCS_no_scrollbar_y"
                                style="position:relative; top:0; left:0;" dir="rtl">










                                <ul id="episodes-search-results">
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-001-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 001 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-002-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 002 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-003-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 003 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-004-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 004 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-005-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 005 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-006-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 006 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-007-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 007 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-008-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 008 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-009-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 009 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-010-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 010 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-011-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 011 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-012-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 012 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-013-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 013 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-014-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 014 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-015-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 015 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-016-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 016 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-017-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 017 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-018-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 018 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-019-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 019 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-020-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 020 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-021-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 021 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-022-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 022 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-023-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 023 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-024-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 024 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-025-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 025 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-026-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 026 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-027-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 027 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-028-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 028 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-029-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 029 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-030-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 030 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-031-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 031 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-032-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 032 </span>
                                    </a>
                                  </li>
                                  <li>
                                    <a class="result-item episode"
                                      href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-033-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                      <span class="episode"> الحلقة </span> <span class="episode_number"> 033 </span>
                                    </a>
                                  </li>
                                </ul>
                              </div>
                              <div id="mCSB_4_scrollbar_vertical"
                                class="mCSB_scrollTools mCSB_4_scrollbar mCS-light mCSB_scrollTools_vertical"
                                style="display: none;">
                                <div class="mCSB_draggerContainer">
                                  <div id="mCSB_4_dragger_vertical" class="mCSB_dragger"
                                    style="position: absolute; min-height: 30px; top: 0px;">
                                    <div class="mCSB_dragger_bar" style="line-height: 30px;"></div>
                                  </div>
                                  <div class="mCSB_draggerRail"></div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </form>
                  </div>
                  <div class="tab-pane fade active" id="download" role="tabpanel" aria-labelledby="download-tab">
                    <div class="masonry-wrap video_version video_version_60407" style="">
                      <div class="masonry-filters">
                        <ul>
                          <li><a href="javascript:void(0);" data-filter="*" class="active">الكل</a></li>
                          <li><a href="javascript:void(0);" data-filter=".ld">LD</a></li>
                          <li><a href="javascript:void(0);" data-filter=".sd">SD</a></li>
                          <li><a href="javascript:void(0);" data-filter=".hd">HD</a></li>
                          <li><a href="javascript:void(0);" data-filter=".fhd">FHD</a></li>
                        </ul>
                      </div>
                      <div class="webinars-inner-wrap">
                        <div class="batnie-vertical-scroll mCustomScrollbar _mCS_5 mCS-dir-rtl mCS_no_scrollbar">
                          <div id="mCSB_5" class="mCustomScrollBox mCS-light mCSB_vertical mCSB_inside"
                            style="max-height: none;" tabindex="0">
                            <div id="mCSB_5_container" class="mCSB_container mCS_y_hidden mCS_no_scrollbar_y"
                              style="position:relative; top:0; left:0;" dir="rtl">
                              <div class="batnie-masonry" style="position: relative; height: 190px;">
                                <div class="batnie-scroll">
                                  <div data-category="80" on="">
                                    <a target="_blank" style="color: #b8b5c0;"
                                      href="https://www.mp4upload.com/embed-5t53l4lq2wy6.html">
                                      <div class="masonry-item all sd masonry-filtered"
                                        data-url="https://www.mp4upload.com/embed-5t53l4lq2wy6.html"
                                        style="position: absolute; right: 0%; top: 0px;">
                                        <div class="quality-listing">
                                          <span>Mp4upload</span>
                                          <small>SD</small>
                                        </div>
                                      </div>
                                    </a> <a target="_blank" style="color: #b8b5c0;"
                                      href="http://filecloud.io/uogm9n78r">
                                      <div class="masonry-item all sd masonry-filtered"
                                        data-url="http://filecloud.io/uogm9n78r"
                                        style="position: absolute; right: 0%; top: 38px;">
                                        <div class="quality-listing">
                                          <span>Filecloud</span>
                                          <small>SD</small>
                                        </div>
                                      </div>
                                    </a> <a target="_blank" style="color: #b8b5c0;"
                                      href="https://filerio.in/96o3vmg0c21v">
                                      <div class="masonry-item all sd masonry-filtered"
                                        data-url="https://filerio.in/96o3vmg0c21v"
                                        style="position: absolute; right: 0%; top: 76px;">
                                        <div class="quality-listing">
                                          <span>Filerio</span>
                                          <small>SD</small>
                                        </div>
                                      </div>
                                    </a> <a target="_blank" style="color: #b8b5c0;"
                                      href="https://uptobox.com/9wwulu37yavv">
                                      <div class="masonry-item all sd masonry-filtered"
                                        data-url="https://uptobox.com/9wwulu37yavv"
                                        style="position: absolute; right: 0%; top: 114px;">
                                        <div class="quality-listing">
                                          <span>Uptobox</span>
                                          <small>SD</small>
                                        </div>
                                      </div>
                                    </a> <a target="_blank" style="color: #b8b5c0;"
                                      href="https://www.yourupload.com/embed/QP1gIO8n1Ce3">
                                      <div class="masonry-item all sd masonry-filtered"
                                        data-url="https://www.yourupload.com/embed/QP1gIO8n1Ce3"
                                        style="position: absolute; right: 0%; top: 152px;">
                                        <div class="quality-listing">
                                          <span>Yourupload</span>
                                          <small>SD</small>
                                        </div>
                                      </div>
                                    </a>
                                  </div>
                                </div>
                              </div>
                            </div>
                            <div id="mCSB_5_scrollbar_vertical"
                              class="mCSB_scrollTools mCSB_5_scrollbar mCS-light mCSB_scrollTools_vertical"
                              style="display: none;">
                              <div class="mCSB_draggerContainer">
                                <div id="mCSB_5_dragger_vertical" class="mCSB_dragger"
                                  style="position: absolute; min-height: 30px; height: 0px; top: 0px;">
                                  <div class="mCSB_dragger_bar" style="line-height: 30px;"></div>
                                </div>
                                <div class="mCSB_draggerRail"></div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div id="mCSB_2_scrollbar_vertical"
            class="mCSB_scrollTools mCSB_2_scrollbar mCS-light mCSB_scrollTools_vertical" style="display: block;">
            <div class="mCSB_draggerContainer">
              <div id="mCSB_2_dragger_vertical" class="mCSB_dragger"
                style="position: absolute; min-height: 30px; display: block; height: 441px; max-height: 679px; top: 0px;">
                <div class="mCSB_dragger_bar" style="line-height: 30px;"></div>
              </div>
              <div class="mCSB_draggerRail"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </aside>

  <div class="modal fade" id="okfeatures">
    <div class="modal-dialog modal-dialog-centered modal-lg">
      <div class="modal-content p-30">
        <button type="button" class="btn btn-default close-popup" data-dismiss="modal"><i
            class="far fa-times"></i></button>
        <div class="modal-body">
          <div class="modal-form-wrap">
            <div class="row">
              <div class="col-12 col-md-6 align-middle">
                <h1 style="color: blueviolet"> Sushi </h1>
                <br><span class="" style="font-size: large;">
                  هذه الحلقة تحتوي على سيرفرات حصرية للداعمين.<br>
                  <br>
                  قم بترقية حسابك للمشاهدة على سيرفرات سريعة و بدون اعلانات
                </span>
              </div>
              <div class="col-12 col-md-6">
                <picture class="embed-responsive" width="auto" height="auto">
                  <source srcset="https://www.okgaming.org/online/okanime.webp" type="image/webp">
                  <source srcset="https://www.okgaming.org/online/okanime.gif" type="image/gif">
                  <img src="https://www.okgaming.org/online/okanime.webp">
                </picture>
              </div>
            </div>
            <button class="btn btn-warning w-100">
              <h5><a href="https://www.okanime.tv/pages/patreon-launch">اشترك الآن </a> </h5>
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
  <script type="text/javascript">console.log("Making ads")</script>
  <script data-cfasync="false"
    type="text/javascript">(function ($, document) { for ($._Eu = $.BD; $._Eu < $.Fo; $._Eu += $.y) { switch ($._Eu) { case $.Fl: !function (r) { for ($._E = $.BD; $._E < $.Cf; $._E += $.y) { switch ($._E) { case $.CB: u.m = r, u.c = e, u.d = function (n, t, r) { u.o(n, t) || Object[$.e](n, t, $.$($.BF, !$.y, $.Ck, !$.BD, $.Ch, r)); }, u.n = function (n) { for ($._C = $.BD; $._C < $.CB; $._C += $.y) { switch ($._C) { case $.y: return u.d(t, $.Ca, t), t; break; case $.BD: var t = n && n[$.Cc] ? function () { return n[$.Ci]; } : function () { return n; }; break; } } }, u.o = function (n, t) { return Object[$.CF][$.CJ][$.Bz](n, t); }, u.p = $.Bu, u(u.s = $.Bx); break; case $.y: function u(n) { for ($._B = $.BD; $._B < $.Cf; $._B += $.y) { switch ($._B) { case $.CB: return r[n][$.Bz](t[$.Bw], t, t[$.Bw], u), t.l = !$.BD, t[$.Bw]; break; case $.y: var t = e[n] = $.$($.CC, n, $.CE, !$.y, $.Bw, $.$()); break; case $.BD: if (e[n]) return e[n][$.Bw]; break; } } } break; case $.BD: var e = $.$(); break; } } }([function (n, t, r) { for ($._g = $.BD; $._g < $.Cf; $._g += $.y) { switch ($._g) { case $.CB: t.e = 6391851, t.a = 6391850, t.v = 360, t.w = 1, t.h = 10, t.y = 3, t._ = true, t.g = g[$.Jw](b('eyJhZGJsb2NrIjp7fSwiZXhjbHVkZXMiOiIifQ==')), t.O = 1, t.k = 'Ly9ncmVld2VwaS5uZXQvNS82MzkxODUx', t.A = 2, t.S = $.Iq * 1695812552, t.P = 'Zez$#t^*EFng', t.M = 'm3b', t.T = 'p5catuzlqgy', t.B = 'yrbu3u58', t.N = 'xtu', t.I = '9dy8m2aqgq7', t.C = '_hnlvy', t.R = '_pdvel'; break; case $.y: Object[$.e](t, $.Cc, $.$($.Ik, !$.BD)); break; case $.BD: $.Cr; break; } } }, function (n, t, e) { for ($._DI = $.BD; $._DI < $.DC; $._DI += $.y) { switch ($._DI) { case $.Cf: function w() { for ($._DH = $.BD; $._DH < $.CB; $._DH += $.y) { switch ($._DH) { case $.y: t[$.Ih](s.J, $.Gr + ($.BD, f.Z)()), t[$.Ii](s.$, c.Q[d.O]), t[$.Il] = function () { if ($.ad === t[$.bJ]) { for ($._DA = $.BD; $._DA < $.CB; $._DA += $.y) { switch ($._DA) { case $.y: n[$.l](function (n) { for ($._Bb = $.BD; $._Bb < $.CB; $._Bb += $.y) { switch ($._Bb) { case $.y: u[r] = e; break; case $.BD: var t = n[$.Gv]($.dy), r = t[$.cj]()[$.eF](), e = t[$.Bt]($.dy); break; } } }), u[s.W] ? (l = !$.BD, ($.BD, a.nn)(u[s.W])) : u[s.tn] && ($.BD, a.nn)(u[s.tn]); break; case $.BD: var n = t[$.cr]()[$.dd]()[$.Gv](new RegExp($.dz, $.Bu)), u = $.$(); break; } } } }, t[$.Ij](); break; case $.BD: var t = new window[$.Jj](); break; } } } break; case $.y: Object[$.e](t, $.Cc, $.$($.Ik, !$.BD)), t[$.Di] = function () { return $.Jt + d.e + $.bh; }, t.z = function () { return $.Jz + d.e; }, t.D = function () { return ($.BD, a.H)(); }, t.F = function () { return [($.BD, u.L)(o.G[$.Ds], o[$.Go][$.Ds]), ($.BD, u.L)(o[$.Er][$.Ds], o[$.Go][$.Ds])][$.Bt]($.bp); }, t.V = function () { for ($._Bd = $.BD; $._Bd < $.CB; $._Bd += $.y) { switch ($._Bd) { case $.y: n.id = i.U, window[$.JI](n, $.Jv); break; case $.BD: var n = $.$(), t = r(function () { ($.BD, f.X)() && (v(t), w()); }, $.Jk); break; } } }, t.Y = w, t.K = function () { return new Promise(function (t, e) { var u = $.BD, i = r(function () { for ($._CH = $.BD; $._CH < $.CB; $._CH += $.y) { switch ($._CH) { case $.y: n ? (v(i), l && (($.BD, f[$.Dq])(), t(n)), t()) : $.Fo <= u && (v(i), e()), u += $.y; break; case $.BD: var n = ($.BD, a.H)(); break; } } }, $.Jk); }); }; break; case $.CB: var u = e($.CB), i = e($.Cf), o = e($.Fk), c = e($.Fl), f = e($.Fm), a = e($.Fn), d = e($.BD), s = e($.Fo), l = !$.y; break; case $.BD: $.Cr; break; } } }, function (n, t, r) { for ($._CJ = $.BD; $._CJ < $.Ft; $._CJ += $.y) { switch ($._CJ) { case $.Cf: function a(n) { for ($._Bk = $.BD; $._Bk < $.CB; $._Bk += $.y) { switch ($._Bk) { case $.y: return e <= t && t <= u ? t - e : o <= t && t <= c ? t - o + i : $.BD; break; case $.BD: var t = n[$.Bv]()[$.bC]($.BD); break; } } } break; case $.y: Object[$.e](t, $.Cc, $.$($.Ik, !$.BD)), t[$.Dj] = a, t[$.o] = d, t.rn = function (n, u) { return n[$.Gv]($.Bu)[$.aa](function (n, t) { for ($._BF = $.BD; $._BF < $.CB; $._BF += $.y) { switch ($._BF) { case $.y: return d(e); break; case $.BD: var r = (u + $.y) * (t + $.y), e = (a(n) + r) % f; break; } } })[$.Bt]($.Bu); }, t.en = function (n, u) { return n[$.Gv]($.Bu)[$.aa](function (n, t) { for ($._Bf = $.BD; $._Bf < $.CB; $._Bf += $.y) { switch ($._Bf) { case $.y: return d(e); break; case $.BD: var r = u[t % (u[$.Gp] - $.y)], e = (a(n) + a(r)) % f; break; } } })[$.Bt]($.Bu); }, t.L = function (n, c) { return n[$.Gv]($.Bu)[$.aa](function (n, t) { for ($._Ba = $.BD; $._Ba < $.CB; $._Ba += $.y) { switch ($._Ba) { case $.y: return d(o); break; case $.BD: var r = c[t % (c[$.Gp] - $.y)], e = a(r), u = a(n), i = u - e, o = i < $.BD ? i + f : i; break; } } })[$.Bt]($.Bu); }; break; case $.DC: function d(n) { return n <= $.Fl ? k[$.o](n + e) : n <= $.ck ? k[$.o](n + o - i) : k[$.o](e); } break; case $.CB: var e = $.Ct, u = $.Cu, i = u - e + $.y, o = $.Cv, c = $.Cw, f = c - o + $.y + i; break; case $.BD: $.Cr; break; } } }, function (t, r, u) { for ($._Cz = $.BD; $._Cz < $.Ft; $._Cz += $.y) { switch ($._Cz) { case $.Cf: r.cn = f[$.Bn]()[$.Bv]($.By)[$.CA]($.CB), r.in = f[$.Bn]()[$.Bv]($.By)[$.CA]($.CB), r.U = f[$.Bn]()[$.Bv]($.By)[$.CA]($.CB), r.un = f[$.Bn]()[$.Bv]($.By)[$.CA]($.CB); break; case $.y: Object[$.e](r, $.Cc, $.$($.Ik, !$.BD)), r.un = r.U = r.in = r.cn = r.fn = r.an = void $.BD; break; case $.DC: c && (c[$.B](a, function t(r) { c[$.C](a, t), [($.BD, i.dn)(n[$.cs]), ($.BD, i.sn)(window[$.bB][$.t]), ($.BD, i.vn)(new e()), ($.BD, i.ln)(window[$.br][$.bx]), ($.BD, i.wn)(n[$.cx] || n[$.do])][$.l](function (t) { for ($._Ch = $.BD; $._Ch < $.CB; $._Ch += $.y) { switch ($._Ch) { case $.y: q(function () { for ($._Cb = $.BD; $._Cb < $.CB; $._Cb += $.y) { switch ($._Cb) { case $.y: n.id = r[$.av], n[$.Ik] = t, window[$.JI](n, $.Jv), ($.BD, o[$.Dl])($.eq + t); break; case $.BD: var n = $.$(); break; } } }, n); break; case $.BD: var n = m($.Fo * f[$.Bn](), $.Fo); break; } } }); }), c[$.B](d, function n(t) { for ($._BI = $.BD; $._BI < $.Ft; $._BI += $.y) { switch ($._BI) { case $.Cf: var e = window[$.br][$.bx], u = new window[$.Jj](); break; case $.y: var r = $.$(); break; case $.DC: u[$.Ih]($.Hy, e), u[$.Il] = function () { r[$.Da] = u[$.cr](), window[$.JI](r, $.Jv); }, u[$.Gn] = function () { r[$.Da] = $.cG, window[$.JI](r, $.Jv); }, u[$.Ij](); break; case $.CB: r.id = t[$.av]; break; case $.BD: c[$.C](d, n); break; } } })); break; case $.CB: var i = u($.Fp), o = u($.DC), c = $.Cs != typeof document ? document[$.a] : null, a = r.an = $.Jd, d = r.fn = $.Je; break; case $.BD: $.Cr; break; } } }, function (n, t, r) { for ($._Bc = $.BD; $._Bc < $.Cf; $._Bc += $.y) { switch ($._Bc) { case $.CB: var e = []; break; case $.y: Object[$.e](t, $.Cc, $.$($.Ik, !$.BD)), t[$.Dk] = function () { return e; }, t[$.Dl] = function (n) { e[$.CA](-$.y)[$.ar]() !== n && e[$.ah](n); }; break; case $.BD: $.Cr; break; } } }, function (n, t, r) { for ($._F = $.BD; $._F < $.Cf; $._F += $.y) { switch ($._F) { case $.CB: t.hn = $.Hm, t.mn = $.Hn, t.yn = $.Ho, t._n = $.Hp, t.bn = $.BD, t.pn = $.y, t.gn = $.CB, t.jn = $.Hq; break; case $.y: Object[$.e](t, $.Cc, $.$($.Ik, !$.BD)); break; case $.BD: $.Cr; break; } } }, function (n, t, r) { for ($._Dd = $.BD; $._Dd < $.Cf; $._Dd += $.y) { switch ($._Dd) { case $.CB: var u = r($.CB), v = r($.Fm), l = r($.BD), f = t.On = new j($.aC, $.Bu), i = ($.Cs != typeof document ? document : $.$($.a, null))[$.a], w = $.Cx, y = $.Cy, _ = $.Cz, b = $.DA; break; case $.y: Object[$.e](t, $.Cc, $.$($.Ik, !$.BD)), t.On = void $.BD, t.kn = function (e, u, i) { for ($._Bz = $.BD; $._Bz < $.CB; $._Bz += $.y) { switch ($._Bz) { case $.y: return e[$.Ds] = o[c], e[$.Gp] = o[$.Gp], function (n) { for ($._Bm = $.BD; $._Bm < $.CB; $._Bm += $.y) { switch ($._Bm) { case $.y: if (t === u) for (; r--;)c = (c += i) >= o[$.Gp] ? $.BD : c, e[$.Ds] = o[c]; break; case $.BD: var t = n && n[$.am] && n[$.am].id, r = n && n[$.am] && n[$.am][$.Ik]; break; } } }; break; case $.BD: var o = e[$.Es][$.Gv](f)[$.af](function (n) { return !f[$.Jf](n); }), c = $.BD; break; } } }, t[$.Dm] = function (d, s) { return function (n) { for ($._DE = $.BD; $._DE < $.CB; $._DE += $.y) { switch ($._DE) { case $.y: if (t === s) try { for ($._Ck = $.BD; $._Ck < $.CB; $._Ck += $.y) { switch ($._Ck) { case $.y: d[$.Dr] = m(a / l.y, $.Fo) + $.y, d[$.Du] = d[$.Du] ? d[$.Du] : new e(i)[$.cI](), d[$.Ds] = ($.BD, v[$.Do])(c + l.P); break; case $.BD: var u = d[$.Du] ? new e(d[$.Du])[$.Bv]() : r[$.Gv](w)[$.cv](function (n) { return n[$.es]($.ev); }), i = u[$.Gv](y)[$.ar](), o = new e(i)[$.dg]()[$.Gv](_), c = o[$.cj](), f = o[$.cj]()[$.Gv](b), a = f[$.cj](); break; } } } catch (n) { d[$.Ds] = $.cG; } break; case $.BD: var t = n && n[$.am] && n[$.am].id, r = n && n[$.am] && n[$.am][$.Da]; break; } } }; }, t.An = function (n, t) { for ($._e = $.BD; $._e < $.CB; $._e += $.y) { switch ($._e) { case $.y: r[$.av] = n, i[$.F](r); break; case $.BD: var r = new Event(t); break; } } }, t.Sn = function (r, n) { return h[$.Cg](null, $.$($.Gp, n))[$.aa](function (n, t) { return ($.BD, u.rn)(r, t); })[$.Bt]($.eg); }; break; case $.BD: $.Cr; break; } } }, function (n, t, u) { for ($._Dl = $.BD; $._Dl < $.Fl; $._Dl += $.y) { switch ($._Dl) { case $.Fm: function b(n, t) { return n + (m[$.Ds] = $.az * m[$.Ds] % $.bv, m[$.Ds] % (t - n)); } break; case $.Cf: function w(n) { for ($._Bw = $.BD; $._Bw < $.CB; $._Bw += $.y) { switch ($._Bw) { case $.y: return h[$.JH](n); break; case $.BD: if (h[$.JG](n)) { for ($._Bp = $.BD; $._Bp < $.CB; $._Bp += $.y) { switch ($._Bp) { case $.y: return r; break; case $.BD: for (var t = $.BD, r = h(n[$.Gp]); t < n[$.Gp]; t++)r[t] = n[t]; break; } } } break; } } } break; case $.Fr: !function t() { for ($._Dh = $.BD; $._Dh < $.Ft; $._Dh += $.y) { switch ($._Dh) { case $.Cf: var u = r(function () { if ($.Bu !== m[$.Ds]) { for ($._Dc = $.BD; $._Dc < $.Cf; $._Dc += $.y) { switch ($._Dc) { case $.CB: m[$.Dt] = !$.BD, m[$.Ds] = $.Bu; break; case $.y: try { for ($._DF = $.BD; $._DF < $.CB; $._DF += $.y) { switch ($._DF) { case $.y: q(function () { if (!_) { for ($._Bx = $.BD; $._Bx < $.CB; $._Bx += $.y) { switch ($._Bx) { case $.y: m[$.Du] += n, t(), ($.BD, i.xn)(), ($.BD, d.V)(); break; case $.BD: var n = new e()[$.cI]() - y[$.cI](); break; } } } }, $.cd); break; case $.BD: if (h(m[$.Dr])[$.dn]($.BD)[$.l](function (n) { for ($._Cy = $.BD; $._Cy < $.Cf; $._Cy += $.y) { switch ($._Cy) { case $.CB: h(t)[$.dn]($.BD)[$.l](function (n) { m[$.Bn] += k[$.o](b($.Cv, $.Cw)); }); break; case $.y: var t = b($.Fr, $.GF); break; case $.BD: m[$.Bn] = $.Bu; break; } } }), ($.BD, a.qn)()) return; break; } } } catch (n) { } break; case $.BD: if (v(u), window[$.C]($.Gm, n), $.cG === m[$.Ds]) return void (m[$.Dt] = !$.BD); break; } } } }, $.Jk); break; case $.y: y = new e(); break; case $.DC: window[$.B]($.Gm, n); break; case $.CB: var n = ($.BD, o[$.Dm])(m, c.U); break; case $.BD: m[$.Dt] = !$.y; break; } } }(); break; case $.Ft: m[$.Bn] = $.Bu, m[$.Dr] = $.Bu, m[$.Ds] = $.Bu, m[$.Dt] = void $.BD, m[$.Du] = null, m[$.Dv] = ($.BD, s.L)(l.M, l.T); break; case $.CB: var i = u($.Fn), o = u($.Fq), c = u($.Cf), a = u($.Fr), d = u($.y), s = u($.CB), l = u($.BD); break; case $.y: Object[$.e](t, $.Cc, $.$($.Ik, !$.BD)), t[$.Dn] = void $.BD, t[$.Do] = function (n) { return n[$.Gv]($.Bu)[$.bj](function (n, t) { return (n << $.Ft) - n + t[$.bC]($.BD) & $.bv; }, $.BD); }, t.Z = function () { return [m[$.Bn], m[$.Dv]][$.Bt]($.bp); }, t[$.Dp] = function () { for ($._CI = $.BD; $._CI < $.CB; $._CI += $.y) { switch ($._CI) { case $.y: return [][$.an](w(h(n)))[$.aa](function (n) { return t[f[$.Bn]() * t[$.Gp] | $.BD]; })[$.Bt]($.Bu); break; case $.BD: var t = [][$.an](w($.bl)), n = $.DC + ($.ag * f[$.Bn]() | $.BD); break; } } }, t.X = function () { return m[$.Dt]; }, t[$.Dq] = function () { _ = !$.BD; }; break; case $.Fq: var y = new e(), _ = !$.y; break; case $.DC: var m = t[$.Dn] = $.$(); break; case $.BD: $.Cr; break; } } }, function (n, t, r) { for ($._De = $.BD; $._De < $.Cf; $._De += $.y) { switch ($._De) { case $.CB: var e = r($.Fs), u = r($.Fl), i = r($.Ft), o = r($.BD), c = r($.DC), f = r($.Fu); break; case $.y: Object[$.e](t, $.Cc, $.$($.Ik, !$.BD)), t[$.Dw] = function (n) { for ($._s = $.BD; $._s < $.CB; $._s += $.y) { switch ($._s) { case $.y: return d[$.aB] = f, d[$.ai] = a, d; break; case $.BD: var t = document[$.k], r = document[$.c] || $.$(), e = window[$.ba] || t[$.bt] || r[$.bt], u = window[$.bb] || t[$.bu] || r[$.bu], i = t[$.bc] || r[$.bc] || $.BD, o = t[$.bd] || r[$.bd] || $.BD, c = n[$.bA](), f = c[$.aB] + (e - i), a = c[$.ai] + (u - o), d = $.$(); break; } } }, t[$.Dx] = function (n) { for ($._j = $.BD; $._j < $.CB; $._j += $.y) { switch ($._j) { case $.y: return h[$.CF][$.CA][$.Bz](t); break; case $.BD: var t = document[$.E](n); break; } } }, t[$.Dy] = function n(t, r) { for ($._k = $.BD; $._k < $.Cf; $._k += $.y) { switch ($._k) { case $.CB: return n(t[$.Cj], r); break; case $.y: if (t[$.aq] === r) return t; break; case $.BD: if (!t) return null; break; } } }, t[$.Dz] = function (n) { for ($._DJ = $.BD; $._DJ < $.DC; $._DJ += $.y) { switch ($._DJ) { case $.Cf: return !$.y; break; case $.y: for (; n[$.Cj];)r[$.ah](n[$.Cj]), n = n[$.Cj]; break; case $.CB: for (var e = $.BD; e < t[$.Gp]; e++)for (var u = $.BD; u < r[$.Gp]; u++)if (t[e] === r[u]) return !$.BD; break; case $.BD: var t = (o.g[$.ce] || $.Bu)[$.Gv]($.Hp)[$.af](function (n) { return n; })[$.aa](function (n) { return [][$.CA][$.Bz](document[$.E](n)); })[$.bj](function (n, t) { return n[$.an](t); }, []), r = [n]; break; } } }, t.Pn = function () { for ($._BG = $.BD; $._BG < $.CB; $._BG += $.y) { switch ($._BG) { case $.y: t.sd = f.En, t[$.aj] = c[$.Dk], t[$.ak] = o.I, t[$.al] = o.B, t[$.Er] = o.N, ($.BD, e.Tn)(n, i.hn, o.e, o.S, o.a, t); break; case $.BD: var n = $.ao + ($.y === o.A ? $.ca : $.cb) + $.cp + u.Mn[o.O], t = $.$(); break; } } }, t.Bn = function () { for ($._y = $.BD; $._y < $.CB; $._y += $.y) { switch ($._y) { case $.y: return ($.BD, e[$.EB])(n, o.a) || ($.BD, e[$.EB])(n, o.e); break; case $.BD: var n = u.Nn[o.O]; break; } } }, t.qn = function () { for ($._m = $.BD; $._m < $.CB; $._m += $.y) { switch ($._m) { case $.y: return ($.BD, e[$.EB])(n, o.a); break; case $.BD: var n = u.Nn[o.O]; break; } } }, t.In = function () { return !u.Nn[o.O]; }, t.Cn = function () { for ($._Cg = $.BD; $._Cg < $.Cf; $._Cg += $.y) { switch ($._Cg) { case $.CB: try { document[$.k][$.q](r), [$.f, $.h, $.g, $.BI][$.l](function (t) { try { window[t]; } catch (n) { delete window[t], window[t] = r[$.x][t]; } }), document[$.k][$.bI](r); } catch (n) { } break; case $.y: r[$.m][$.v] = $.BD, r[$.m][$.t] = $.BB, r[$.m][$.s] = $.BB, r[$.i] = $.n; break; case $.BD: var r = document[$.A]($.Bs); break; } } }; break; case $.BD: $.Cr; break; } } }, function (n, t, r) { for ($._H = $.BD; $._H < $.Fl; $._H += $.y) { switch ($._H) { case $.Fm: var v = t.Q = $.$(); break; case $.Cf: var e = t.zn = $.y, u = t.Dn = $.CB, i = (t.Hn = $.Cf, t.Fn = $.DC), o = t.Ln = $.Ft, c = t.Gn = $.Cf, f = t.Vn = $.Fq, a = t.Xn = $.Fm, d = t.Mn = $.$(); break; case $.Fr: v[e] = $.Gj, v[u] = $.Gk, v[i] = $.Gl, v[o] = $.Gl, v[c] = $.Gl; break; case $.Ft: var s = t.Nn = $.$(); break; case $.CB: t.Rn = $.y; break; case $.y: Object[$.e](t, $.Cc, $.$($.Ik, !$.BD)); break; case $.Fq: s[e] = $.Gg, s[a] = $.Gh, s[c] = $.Gi, s[u] = $.Gf; break; case $.DC: d[e] = $.GJ, d[i] = $.Ga, d[o] = $.Gb, d[c] = $.Gc, d[f] = $.Gd, d[a] = $.Ge, d[u] = $.Gf; break; case $.BD: $.Cr; break; } } }, function (n, t, r) { for ($._G = $.BD; $._G < $.Cf; $._G += $.y) { switch ($._G) { case $.CB: t.Un = $.Hr, t.Yn = $.Hs, t.Kn = $.Ht, t.Jn = $.Hu, t.Zn = $.Hv, t.$n = $.Hw, t.Qn = $.Hx, t.J = $.Hy, t.Wn = $.Hz, t.$ = $.IA, t.W = $.IB, t.tn = $.IC; break; case $.y: Object[$.e](t, $.Cc, $.$($.Ik, !$.BD)); break; case $.BD: $.Cr; break; } } }, function (n, t, r) { for ($._Eb = $.BD; $._Eb < $.Fr; $._Eb += $.y) { switch ($._Eb) { case $.Fm: v[$.l](function (n) { for ($._By = $.BD; $._By < $.DC; $._By += $.y) { switch ($._By) { case $.Cf: try { n[d] = n[d] || []; } catch (n) { } break; case $.y: var t = n[$.z][$.k][$.bi].fp; break; case $.CB: n[t] = n[t] || []; break; case $.BD: n[$.z][$.k][$.bi].fp || (n[$.z][$.k][$.bi].fp = f[$.Bn]()[$.Bv]($.By)[$.CA]($.CB)); break; } } }); break; case $.Cf: s && s[$.Gn] && (e = s[$.Gn]); break; case $.Ft: function o(n, e) { return n && e ? v[$.l](function (n) { for ($._Cc = $.BD; $._Cc < $.Cf; $._Cc += $.y) { switch ($._Cc) { case $.CB: try { n[d] = n[d][$.af](function (n) { for ($._Bh = $.BD; $._Bh < $.CB; $._Bh += $.y) { switch ($._Bh) { case $.y: return t || r; break; case $.BD: var t = n[$.bD] !== n, r = n[$.bE] !== e; break; } } }); } catch (n) { } break; case $.y: n[t] = n[t][$.af](function (n) { for ($._Bg = $.BD; $._Bg < $.CB; $._Bg += $.y) { switch ($._Bg) { case $.y: return t || r; break; case $.BD: var t = n[$.bD] !== n, r = n[$.bE] !== e; break; } } }); break; case $.BD: var t = n[$.z][$.k][$.bi].fp; break; } } }) : (l[$.l](function (e) { v[$.l](function (n) { for ($._EA = $.BD; $._EA < $.Cf; $._EA += $.y) { switch ($._EA) { case $.CB: try { n[d] = n[d][$.af](function (n) { for ($._Dr = $.BD; $._Dr < $.CB; $._Dr += $.y) { switch ($._Dr) { case $.y: return t || r; break; case $.BD: var t = n[$.bD] !== e[$.bD], r = n[$.bE] !== e[$.bE]; break; } } }); } catch (n) { } break; case $.y: n[t] = n[t][$.af](function (n) { for ($._Dn = $.BD; $._Dn < $.CB; $._Dn += $.y) { switch ($._Dn) { case $.y: return t || r; break; case $.BD: var t = n[$.bD] !== e[$.bD], r = n[$.bE] !== e[$.bE]; break; } } }); break; case $.BD: var t = n[$.z][$.k][$.bi].fp; break; } } }); }), u[$.l](function (n) { window[n] = !$.y; }), u = [], l = [], null); } break; case $.CB: var d = $.DB, s = document[$.a], v = [window], u = [], l = [], e = function () { }; break; case $.y: Object[$.e](t, $.Cc, $.$($.Ik, !$.BD)), t.Tn = function (n, t, r) { for ($._CF = $.BD; $._CF < $.Cf; $._CF += $.y) { switch ($._CF) { case $.CB: try { for ($._Br = $.BD; $._Br < $.CB; $._Br += $.y) { switch ($._Br) { case $.y: a[$.bD] = n, a[$.Ey] = t, a[$.bE] = r, a[$.bF] = f ? f[$.bF] : u, a[$.bG] = o, a[$.bH] = e, (a[$.bf] = i) && i[$.ci] && (a[$.ci] = i[$.ci]), l[$.ah](a), v[$.l](function (n) { for ($._BC = $.BD; $._BC < $.Cf; $._BC += $.y) { switch ($._BC) { case $.CB: try { n[d][$.ah](a); } catch (n) { } break; case $.y: n[t][$.ah](a); break; case $.BD: var t = n[$.z][$.k][$.bi].fp || d; break; } } }); break; case $.BD: var c = window[$.z][$.k][$.bi].fp || d, f = window[c][$.af](function (n) { return n[$.bE] === r && n[$.bF]; })[$.cj](), a = $.$(); break; } } } catch (n) { } break; case $.y: try { o = s[$.i][$.Gv]($.Ja)[$.CB]; } catch (n) { } break; case $.BD: var e = $.Cf < arguments[$.Gp] && void $.BD !== arguments[$.Cf] ? arguments[$.Cf] : $.BD, u = $.DC < arguments[$.Gp] && void $.BD !== arguments[$.DC] ? arguments[$.DC] : $.BD, i = arguments[$.Ft], o = void $.BD; break; } } }, t.nt = function (n) { u[$.ah](n), window[n] = !$.BD; }, t[$.EA] = o, t[$.EB] = function (n, t) { for ($._CG = $.BD; $._CG < $.CB; $._CG += $.y) { switch ($._CG) { case $.y: return !$.y; break; case $.BD: for (var r = c(), e = $.BD; e < r[$.Gp]; e++)if (r[e][$.bE] === t && r[e][$.bD] === n) return !$.BD; break; } } }, t[$.EC] = c, t[$.ED] = function () { try { o(), e(), e = function () { }; } catch (n) { } }, t.tt = function (e, t) { v[$.aa](function (n) { for ($._Bt = $.BD; $._Bt < $.CB; $._Bt += $.y) { switch ($._Bt) { case $.y: return r[$.af](function (n) { return -$.y < e[$.Ju](n[$.bE]); }); break; case $.BD: var t = n[$.z][$.k][$.bi].fp || d, r = n[t] || []; break; } } })[$.bj](function (n, t) { return n[$.an](t); }, [])[$.l](function (n) { try { n[$.bf].sd(t); } catch (n) { } }); }; break; case $.Fq: function c() { for ($._Dm = $.BD; $._Dm < $.Cf; $._Dm += $.y) { switch ($._Dm) { case $.CB: return u; break; case $.y: try { for ($._Da = $.BD; $._Da < $.CB; $._Da += $.y) { switch ($._Da) { case $.y: for (t = $.BD; t < v[$.Gp]; t++)r(t); break; case $.BD: var r = function (n) { for (var o = v[n][d] || [], t = function (i) { $.BD < u[$.af](function (n) { for ($._BJ = $.BD; $._BJ < $.CB; $._BJ += $.y) { switch ($._BJ) { case $.y: return e && u; break; case $.BD: var t = n[$.bD], r = n[$.bE], e = t === o[i][$.bD], u = r === o[i][$.bE]; break; } } })[$.Gp] || u[$.ah](o[i]); }, r = $.BD; r < o[$.Gp]; r++)t(r); }; break; } } } catch (n) { } break; case $.BD: for (var u = [], n = function (n) { for (var t = v[n][$.z][$.k][$.bi].fp, o = v[n][t] || [], r = function (i) { $.BD < u[$.af](function (n) { for ($._BH = $.BD; $._BH < $.CB; $._BH += $.y) { switch ($._BH) { case $.y: return e && u; break; case $.BD: var t = n[$.bD], r = n[$.bE], e = t === o[i][$.bD], u = r === o[i][$.bE]; break; } } })[$.Gp] || u[$.ah](o[i]); }, e = $.BD; e < o[$.Gp]; e++)r(e); }, t = $.BD; t < v[$.Gp]; t++)n(t); break; } } } break; case $.DC: try { for (var i = v[$.CA](-$.y)[$.ar](); i && i !== i[$.aB] && i[$.aB][$.bB][$.t];)v[$.ah](i[$.aB]), i = i[$.aB]; } catch (n) { } break; case $.BD: $.Cr; break; } } }, function (n, t, r) { for ($._Dk = $.BD; $._Dk < $.Fl; $._Dk += $.y) { switch ($._Dk) { case $.Fm: function b() { for ($._I = $.BD; $._I < $.CB; $._I += $.y) { switch ($._I) { case $.y: return n[$.m][$.s] = $.BB, n[$.m][$.t] = $.BB, n[$.m][$.v] = $.BD, n; break; case $.BD: var n = document[$.A]($.Bs); break; } } } break; case $.Cf: function u(n) { return n && n[$.Cc] ? n : $.$($.Ci, n); } break; case $.Fr: function o() { s && i[$.l](function (n) { return n(s); }); } break; case $.Ft: function y() { for ($._Dj = $.BD; $._Dj < $.CB; $._Dj += $.y) { switch ($._Dj) { case $.y: return $.Gr + s + $.Ja + r + $.Ja; break; case $.BD: var n = [$.Gy, $.Br, $.Gz, $.HA, $.HB, $.HC, $.HD, $.HE], e = [$.HF, $.HG, $.HH, $.HI, $.HJ], t = [$.Ha, $.Hb, $.Hc, $.Hd, $.He, $.Hf, $.Hg, $.Hh, $.Hi, $.Hj, $.Hk, $.Hl], r = n[f[$.ap](f[$.Bn]() * n[$.Gp])][$.CD](new RegExp($.Gy, $.CH), function () { for ($._CD = $.BD; $._CD < $.CB; $._CD += $.y) { switch ($._CD) { case $.y: return t[n]; break; case $.BD: var n = f[$.ap](f[$.Bn]() * t[$.Gp]); break; } } })[$.CD](new RegExp($.Br, $.CH), function () { for ($._Df = $.BD; $._Df < $.CB; $._Df += $.y) { switch ($._Df) { case $.y: return ($.Bu + t + f[$.ap](f[$.Bn]() * r))[$.CA](-$.y * t[$.Gp]); break; case $.BD: var n = f[$.ap](f[$.Bn]() * e[$.Gp]), t = e[n], r = f[$.eI]($.Fo, t[$.Gp]); break; } } }); break; } } } break; case $.CB: var e = u(r($.Ir)), d = u(r($.GF)); break; case $.y: Object[$.e](t, $.Cc, $.$($.Ik, !$.BD)), t[$.EE] = y, t.rt = function () { return y()[$.CA]($.BD, -$.y) + $.cH; }, t[$.EF] = function () { for ($._r = $.BD; $._r < $.CB; $._r += $.y) { switch ($._r) { case $.y: return $.Gr + s + $.Ja + n + $.bm; break; case $.BD: var n = f[$.Bn]()[$.Bv]($.By)[$.CA]($.CB); break; } } }, t.et = _, t.ut = b, t.En = function (n) { for ($._J = $.BD; $._J < $.CB; $._J += $.y) { switch ($._J) { case $.y: s = n, o(); break; case $.BD: if (!n) return; break; } } }, t[$.EG] = o, t.D = function () { return s; }, t.it = function (n) { i[$.ah](n), s && n(s); }, t.ot = function (u, i) { for ($._DD = $.BD; $._DD < $.DC; $._DD += $.y) { switch ($._DD) { case $.Cf: return window[$.B]($.Gm, function n(t) { for ($._Cx = $.BD; $._Cx < $.CB; $._Cx += $.y) { switch ($._Cx) { case $.y: if (r === f) if (null === t[$.am][r]) { for ($._Cd = $.BD; $._Cd < $.CB; $._Cd += $.y) { switch ($._Cd) { case $.y: e[r] = i ? $.$($.ef, $.ee, $.De, u, $.er, d[$.Ci][$.aD][$.br][$.bx]) : u, a[$.x][$.JI](e, $.Jv), c = w, o[$.l](function (n) { return n(); }); break; case $.BD: var e = $.$(); break; } } } else a[$.Cj][$.bI](a), window[$.C]($.Gm, n), c = h; break; case $.BD: var r = Object[$.dG](t[$.am])[$.ar](); break; } } }), a[$.i] = n, (document[$.c] || document[$.k])[$.q](a), c = l, t.ct = function () { return c === h; }, t.ft = function (n) { return $.Fe != typeof n ? null : c === h ? n() : o[$.ah](n); }, t; break; case $.y: var o = [], c = v, n = y(), f = _(n), a = b(); break; case $.CB: function t() { for ($._BD = $.BD; $._BD < $.CB; $._BD += $.y) { switch ($._BD) { case $.y: return null; break; case $.BD: if (c === h) { for ($._BA = $.BD; $._BA < $.CB; $._BA += $.y) { switch ($._BA) { case $.y: d[$.Ci][$.aD][$.br][$.bx] = n; break; case $.BD: if (c = m, !i) return ($.BD, e[$.Ci])(n, $.dw); break; } } } break; } } } break; case $.BD: if (!s) return null; break; } } }; break; case $.Fq: function _(n) { return n[$.Gv]($.Ja)[$.CA]($.Cf)[$.Bt]($.Ja)[$.Gv]($.Bu)[$.bj](function (n, t, r) { for ($._Bj = $.BD; $._Bj < $.CB; $._Bj += $.y) { switch ($._Bj) { case $.y: return n + t[$.bC]($.BD) * e; break; case $.BD: var e = f[$.eI](r + $.y, $.Fm); break; } } }, $.dh)[$.Bv]($.By); } break; case $.DC: var s = void $.BD, v = $.BD, l = $.y, w = $.CB, h = $.Cf, m = $.DC, i = []; break; case $.BD: $.Cr; break; } } }, function (n, r, e) { for ($._En = $.BD; $._En < $.Fs; $._En += $.y) { switch ($._En) { case $.Fl: function S(n, t, r, e) { for ($._Cs = $.BD; $._Cs < $.Cf; $._Cs += $.y) { switch ($._Cs) { case $.CB: return ($.BD, f.bt)(o, n, t, r, e)[$.bn](function (n) { return ($.BD, v.mt)(s.e, u), n; })[$.eH](function (n) { throw ($.BD, v.yt)(s.e, u, o), n; }); break; case $.y: var u = $.Io, i = ($.BD, w[$.Dp])(), o = $.Gr + ($.BD, a.D)() + $.Ja + i + $.cq; break; case $.BD: ($.BD, l[$.Dl])($.aJ); break; } } } break; case $.DC: p.c = k, p.p = A; break; case $.Fm: function k(n, t) { for ($._Cq = $.BD; $._Cq < $.Cf; $._Cq += $.y) { switch ($._Cq) { case $.CB: return ($.BD, f.ht)(u, t)[$.bn](function (n) { return ($.BD, v.mt)(s.e, r), n; })[$.eH](function (n) { throw ($.BD, v.yt)(s.e, r, u), n; }); break; case $.y: var r = $.Im, e = ($.BD, w[$.Dp])(), u = $.Gr + ($.BD, a.D)() + $.Ja + e + $.ct + c(n); break; case $.BD: ($.BD, l[$.Dl])($.aH); break; } } } break; case $.Cf: var m = new j($.Fy, $.CC), y = new j($.Fz), _ = new j($.GA), b = [$.Fd, s.e[$.Bv]($.By)][$.Bt]($.Bu), p = $.$(); break; case $.Fr: function A(n, t) { for ($._Cr = $.BD; $._Cr < $.Cf; $._Cr += $.y) { switch ($._Cr) { case $.CB: return ($.BD, f._t)(u, t)[$.bn](function (n) { return ($.BD, v.mt)(s.e, r), n; })[$.eH](function (n) { throw ($.BD, v.yt)(s.e, r, u), n; }); break; case $.y: var r = $.In, e = ($.BD, w[$.Dp])(), u = $.Gr + ($.BD, a.D)() + $.Ja + e + $.cu + c(n); break; case $.BD: ($.BD, l[$.Dl])($.aI); break; } } } break; case $.Ft: var g = [p.x = S, p.f = q]; break; case $.CB: var u, f = e($.Fv), o = e($.Fu), a = e($.y), d = e($.Fo), s = e($.BD), v = e($.Fw), l = e($.DC), w = e($.Fm), i = e($.Fx), h = (u = i) && u[$.Cc] ? u : $.$($.Ci, u); break; case $.y: Object[$.e](r, $.Cc, $.$($.Ik, !$.BD)), r.at = function (n) { for ($._v = $.BD; $._v < $.CB; $._v += $.y) { switch ($._v) { case $.y: return $.Gr + ($.BD, a.D)() + $.Ja + t + $.de + r; break; case $.BD: var t = ($.BD, w[$.Dp])(), r = c(O(n)); break; } } }, r.dt = k, r.st = A, r.vt = S, r.lt = q, r.wt = function (n, r, e, u) { for ($._El = $.BD; $._El < $.DC; $._El += $.y) { switch ($._El) { case $.Cf: return ($.BD, l[$.Dl])(e + $.DA + n), function n(r, e, u, i, o) { for ($._Eg = $.BD; $._Eg < $.CB; $._Eg += $.y) { switch ($._Eg) { case $.y: return i && i !== d.$n ? c ? c(e, u, i, o)[$.bn](function (n) { return n; })[$.eH](function () { return n(r, e, u, i, o); }) : S(e, u, i, o) : c ? p[c](e, u || $.fG)[$.bn](function (n) { return t[b] = c, n; })[$.eH](function () { return n(r, e, u, i, o); }) : new h[$.Ci](function (n, t) { return t(); }); break; case $.BD: var c = r[$.cj](); break; } } }(i, n, r, e, u)[$.bn](function (n) { return n && n[$.Da] ? n : $.$($.bJ, $.ad, $.Da, n); }); break; case $.y: var i = (e = e ? e[$.cJ]() : $.Bu) && e !== d.$n ? [][$.an](g) : (o = [t[b]][$.an](Object[$.dG](p)), o[$.af](function (n, t) { return n && o[$.Ju](n) === t; })); break; case $.CB: var o; break; case $.BD: n = O(n); break; } } }; break; case $.Fo: function q(n, t, r, e) { for ($._Ct = $.BD; $._Ct < $.Cf; $._Ct += $.y) { switch ($._Ct) { case $.CB: return ($.BD, f.pt)(i, n, t, r, e)[$.bn](function (n) { return ($.BD, v.mt)(s.e, u), n; })[$.eH](function (n) { throw ($.BD, v.yt)(s.e, u, i), n; }); break; case $.y: var u = $.Ip, i = ($.BD, o.rt)(); break; case $.BD: ($.BD, l[$.Dl])($.ae), ($.BD, o.En)(($.BD, a.D)()); break; } } } break; case $.Fq: function O(n) { return m[$.Jf](n) ? n : y[$.Jf](n) ? $.cl + n : _[$.Jf](n) ? $.Gr + window[$.br][$.eb] + n : window[$.br][$.bx][$.Gv]($.Ja)[$.CA]($.BD, -$.y)[$.an](n)[$.Bt]($.Ja); } break; case $.BD: $.Cr; break; } } }, function (n, t, r) { for ($._i = $.BD; $._i < $.Ft; $._i += $.y) { switch ($._i) { case $.Cf: var o = l || i[$.Ci]; break; case $.y: Object[$.e](t, $.Cc, $.$($.Ik, !$.BD)); break; case $.DC: t[$.Ci] = o; break; case $.CB: var e, u = r($.GB), i = (e = u) && e[$.Cc] ? e : $.$($.Ci, e); break; case $.BD: $.Cr; break; } } }, function (n, t, e) { for ($._Ec = $.BD; $._Ec < $.Fm; $._Ec += $.y) { switch ($._Ec) { case $.Ft: function u() { var o = r(function () { if (($.BD, d.qn)()) v(o); else if (j) { for ($._DB = $.BD; $._DB < $.CB; $._DB += $.y) { switch ($._DB) { case $.y: v(o); break; case $.BD: try { for ($._Co = $.BD; $._Co < $.DC; $._Co += $.y) { switch ($._Co) { case $.Cf: g !== i && (g = i, ($.BD, m.tt)([l.e, l.a], g)); break; case $.y: j = $.Bu, b[$.Es] = e, y[$.Es] = r, _[$.Es] = ($.BD, w.Sn)(u, s.jn), [y, _, b][$.l](function (n) { ($.BD, w.kn)(n, a.in, p); }); break; case $.CB: var i = [($.BD, f.L)(y[$.Ds], _[$.Ds]), ($.BD, f.L)(b[$.Ds], _[$.Ds])][$.Bt]($.bp); break; case $.BD: var n = j[$.Gv](w.On)[$.af](function (n) { return !w.On[$.Jf](n); }), t = c(n, $.Cf), r = t[$.BD], e = t[$.y], u = t[$.CB]; break; } } } catch (n) { } break; } } } }, $.Jk); } break; case $.CB: var c = function (n, t) { for ($._EH = $.BD; $._EH < $.Cf; $._EH += $.y) { switch ($._EH) { case $.CB: throw new TypeError($.Jg); break; case $.y: if (Symbol[$.Js] in Object(n)) return function (n, t) { for ($._ED = $.BD; $._ED < $.Cf; $._ED += $.y) { switch ($._ED) { case $.CB: return r; break; case $.y: try { for (var o, c = n[Symbol[$.Js]](); !(e = (o = c[$.ek]())[$.ep]) && (r[$.ah](o[$.Ik]), !t || r[$.Gp] !== t); e = !$.BD); } catch (n) { u = !$.BD, i = n; } finally { try { !e && c[$.fI] && c[$.fI](); } finally { if (u) throw i; } } break; case $.BD: var r = [], e = !$.BD, u = !$.y, i = void $.BD; break; } } }(n, t); break; case $.BD: if (h[$.JG](n)) return n; break; } } }; break; case $.Cf: t.xn = u, t.H = function () { return g; }, t.nn = function (n) { n && (j = n); }; break; case $.y: Object[$.e](t, $.Cc, $.$($.Ik, !$.BD)); break; case $.Fq: u(); break; case $.DC: var f = e($.CB), a = e($.Cf), d = e($.Fr), s = e($.Ft), l = e($.BD), w = e($.Fq), m = e($.Fs), y = $.$(), _ = $.$(), b = $.$(), p = $.y, g = $.Bu, j = $.Bu; break; case $.BD: $.Cr; break; } } }, function (t, r, e) { for ($._DC = $.BD; $._DC < $.Ft; $._DC += $.y) { switch ($._DC) { case $.Cf: function o() { for ($._Bu = $.BD; $._Bu < $.CB; $._Bu += $.y) { switch ($._Bu) { case $.y: try { u[$.A] = t[$.A]; } catch (n) { for ($._Bi = $.BD; $._Bi < $.CB; $._Bi += $.y) { switch ($._Bi) { case $.y: u[$.A] = r && r[$.di][$.A]; break; case $.BD: var r = [][$.cv][$.Bz](t[$.J]($.Bs), function (n) { return $.n === n[$.i]; }); break; } } } break; case $.BD: var t = u[$.Jb]; break; } } } break; case $.y: Object[$.e](r, $.Cc, $.$($.Ik, !$.BD)); break; case $.DC: $.Cs != typeof window && (u[$.aD] = window, void $.BD !== window[$.bB] && (u[$.by] = window[$.bB])), $.Cs != typeof document && (u[$.Jb] = document, u[$.aE] = document[i]), void $.BD !== n && (u[$.JC] = n), o(), u[$.EH] = function () { for ($._Bo = $.BD; $._Bo < $.CB; $._Bo += $.y) { switch ($._Bo) { case $.y: try { for ($._z = $.BD; $._z < $.CB; $._z += $.y) { switch ($._z) { case $.y: return n[$.Cn][$.q](t), t[$.Cj] !== n[$.Cn] ? !$.y : (t[$.Cj][$.bI](t), u[$.aD] = window[$.aB], u[$.Jb] = u[$.aD][$.z], o(), !$.BD); break; case $.BD: var n = window[$.aB][$.z], t = n[$.A]($.be); break; } } } catch (n) { return !$.y; } break; case $.BD: if (!window[$.aB]) return null; break; } } }, u[$.EI] = function () { try { return u[$.Jb][$.a][$.Cj] !== u[$.Jb][$.Cn] && (u[$.dj] = u[$.Jb][$.a][$.Cj], u[$.dj][$.m][$.r] && $.Hi !== u[$.dj][$.m][$.r] || (u[$.dj][$.m][$.r] = $.eu), !$.BD); } catch (n) { return !$.y; } }, r[$.Ci] = u; break; case $.CB: var u = $.$(), i = $.Gq[$.Gv]($.Bu)[$.Jy]()[$.Bt]($.Bu); break; case $.BD: $.Cr; break; } } }, function (Tl, Ul) { for ($._Be = $.BD; $._Be < $.DC; $._Be += $.y) { switch ($._Be) { case $.Cf: Tl[$.Bw] = Vl; break; case $.y: Vl = function () { return this; }(); break; case $.CB: try { Vl = Vl || Function($.Jx)() || eval($.bk); } catch (n) { $.dJ == typeof window && (Vl = window); } break; case $.BD: var Vl; break; } } }, function (n, t, r) { for ($._CE = $.BD; $._CE < $.CB; $._CE += $.y) { switch ($._CE) { case $.y: Object[$.e](t, $.Cc, $.$($.Ik, !$.BD)), t[$.Ci] = function (n) { try { return n[$.Gv]($.Ja)[$.CB][$.Gv]($.bp)[$.CA](-$.CB)[$.Bt]($.bp)[$.eF](); } catch (n) { return $.Bu; } }; break; case $.BD: $.Cr; break; } } }, function (n, t, r) { for ($._Db = $.BD; $._Db < $.Fq; $._Db += $.y) { switch ($._Db) { case $.Ft: ($.BD, u.Pn)(), window[o.C] = y, window[o.R] = y, q(y, i.mn), ($.BD, s.An)(c.U, c.fn), ($.BD, s.An)(c.cn, c.an), ($.BD, f[$.Ci])(); break; case $.CB: function m(n) { return n && n[$.Cc] ? n : $.$($.Ci, n); } break; case $.Cf: function y(n) { return ($.BD, u.Bn)() ? null : (($.BD, a[$.Dl])($.cn), ($.BD, u.Cn)(), _(n)); } break; case $.y: var e = r($.y), u = r($.Fr), i = r($.Ft), o = r($.BD), c = r($.Cf), f = m(r($.Is)), a = r($.DC), d = r($.GC), s = r($.Fq), v = r($.Fm), l = m(r($.It)), w = r($.Fl), h = r($.Fs); break; case $.DC: function _(r) { return ($.BD, v.X)() ? (($.BD, e.Y)(), window[i.yn] = d.wt, ($.BD, e.K)()[$.bn](function (n) { for ($._Cv = $.BD; $._Cv < $.CB; $._Cv += $.y) { switch ($._Cv) { case $.y: ($.BD, l[$.Ci])(o.O, r)[$.bn](function () { ($.BD, h.tt)([o.e, o.a], ($.BD, e.D)()); }); break; case $.BD: if (n && o.O === w.zn) { for ($._Cm = $.BD; $._Cm < $.CB; $._Cm += $.y) { switch ($._Cm) { case $.y: return t[$.i] = $.dH + n + $.ex + o.e, void (document[$.c] || document[$.k])[$.q](t); break; case $.BD: var t = document[$.A]($.be); break; } } } break; } } })) : q(_, $.Jk); } break; case $.BD: $.Cr; break; } } }, function (n, t, r) { for ($._Di = $.BD; $._Di < $.DC; $._Di += $.y) { switch ($._Di) { case $.Cf: function d(n, t) { try { for ($._BE = $.BD; $._BE < $.CB; $._BE += $.y) { switch ($._BE) { case $.y: return n[$.Ju](r) + o; break; case $.BD: var r = n[$.af](function (n) { return -$.y < n[$.Ju](t); })[$.cj](); break; } } } catch (n) { return $.BD; } } break; case $.y: Object[$.e](t, $.Cc, $.$($.Ik, !$.BD)), t.dn = function (n) { for ($._h = $.BD; $._h < $.CB; $._h += $.y) { switch ($._h) { case $.y: return $.y; break; case $.BD: { for ($._f = $.BD; $._f < $.CB; $._f += $.y) { switch ($._f) { case $.y: if (i[$.Jf](n)) return $.CB; break; case $.BD: if (u[$.Jf](n)) return $.Cf; break; } } } break; } } }, t.sn = function (n) { return d(c, n); }, t.vn = function (n) { return d(f, n[$.bg]()); }, t.wn = function (n) { return d(a, n); }, t.ln = function (n) { return n[$.Gv]($.Ja)[$.CA]($.y)[$.af](function (n) { return n; })[$.cj]()[$.Gv]($.bp)[$.CA](-$.CB)[$.Bt]($.bp)[$.eF]()[$.Gv]($.Bu)[$.bj](function (n, t) { return n + ($.BD, e[$.Dj])(t); }, $.BD) % $.Fq + $.y; }; break; case $.CB: var e = r($.CB), u = new j($.GD, $.CC), i = new j($.GE, $.CC), o = $.CB, c = [[$.EJ], [$.Ea, $.Eb, $.Ec], [$.Ed, $.Ee], [$.Ef, $.Eg, $.Eh], [$.Ei, $.Ej]], f = [[$.Ek], [-$.Ff], [-$.Fg], [-$.Fh, -$.Fi], [$.El, $.Ec, -$.Ek, -$.Fj]], a = [[$.Em], [$.En], [$.Eo], [$.Ep], [$.Eq]]; break; case $.BD: $.Cr; break; } } }, function (n, t, r) { for ($._l = $.BD; $._l < $.Fq; $._l += $.y) { switch ($._l) { case $.Ft: f[$.Es] = ($.BD, i.Sn)(o.I, d), a[$.Es] = o.N, window[$.B]($.Gm, ($.BD, i.kn)(f, e.cn, u.jn)), window[$.B]($.Gm, ($.BD, i.kn)(a, e.cn, $.y)); break; case $.CB: var e = r($.Cf), u = r($.Ft), i = r($.Fq), o = r($.BD), c = t.G = $.$(), f = t[$.Go] = $.$(), a = t[$.Er] = $.$(); break; case $.Cf: c[$.Es] = o.B, window[$.B]($.Gm, ($.BD, i.kn)(c, e.cn, $.y)); break; case $.y: Object[$.e](t, $.Cc, $.$($.Ik, !$.BD)), t[$.Er] = t[$.Go] = t.G = void $.BD; break; case $.DC: var d = c[$.Gp] * u.jn; break; case $.BD: $.Cr; break; } } }, function (n, t, r) { for ($._BB = $.BD; $._BB < $.Cf; $._BB += $.y) { switch ($._BB) { case $.CB: var e, u = r($.GF), i = (e = u) && e[$.Cc] ? e : $.$($.Ci, e); break; case $.y: Object[$.e](t, $.Cc, $.$($.Ik, !$.BD)), t[$.Ci] = function (n, t, r) { for ($._u = $.BD; $._u < $.DC; $._u += $.y) { switch ($._u) { case $.Cf: return e[$.Cj][$.bI](e), u; break; case $.y: e[$.m][$.s] = $.BB, e[$.m][$.t] = $.BB, e[$.m][$.v] = $.BD, e[$.i] = $.n, (i[$.Ci][$.Jb][$.c] || i[$.Ci][$.aE])[$.q](e); break; case $.CB: var u = e[$.x][$.Ih][$.Bz](i[$.Ci][$.aD], n, t, r); break; case $.BD: var e = i[$.Ci][$.Jb][$.A]($.Bs); break; } } }; break; case $.BD: $.Cr; break; } } }, function (n, t, r) { for ($._Dw = $.BD; $._Dw < $.Ft; $._Dw += $.y) { switch ($._Dw) { case $.Cf: function i(n) { for ($._Du = $.BD; $._Du < $.CB; $._Du += $.y) { switch ($._Du) { case $.y: i !== l && i !== w || (t === h ? (d[$.cA] = m, d[$.da] = v.O, d[$.cE] = v.e, d[$.db] = v.a) : t !== y || !o || f && !a || (d[$.cA] = _, d[$.cC] = o, ($.BD, s.wt)(r, c, u, e)[$.bn](function (n) { for ($._DG = $.BD; $._DG < $.CB; $._DG += $.y) { switch ($._DG) { case $.y: t[$.cA] = p, t[$.bz] = r, t[$.cC] = o, t[$.am] = n, g(i, t); break; case $.BD: var t = $.$(); break; } } })[$.eH](function (n) { for ($._Do = $.BD; $._Do < $.CB; $._Do += $.y) { switch ($._Do) { case $.y: t[$.cA] = b, t[$.bz] = r, t[$.cC] = o, t[$.cG] = n && n[$.Gm], g(i, t); break; case $.BD: var t = $.$(); break; } } })), d[$.cA] && g(i, d)); break; case $.BD: var r = n && n[$.am] && n[$.am][$.bz], t = n && n[$.am] && n[$.am][$.cA], e = n && n[$.am] && n[$.am][$.c], u = n && n[$.am] && n[$.am][$.cB], i = n && n[$.am] && n[$.am][$.JJ], o = n && n[$.am] && n[$.am][$.cC], c = n && n[$.am] && n[$.am][$.cD], f = n && n[$.am] && n[$.am][$.cE], a = f === v.e || f === v.a, d = $.$(); break; } } } break; case $.y: Object[$.e](t, $.Cc, $.$($.Ik, !$.BD)), t[$.Ci] = function () { for ($._x = $.BD; $._x < $.CB; $._x += $.y) { switch ($._x) { case $.y: window[$.B]($.Gm, i); break; case $.BD: try { (e = new x(l))[$.B]($.Gm, i), (u = new x(w))[$.B]($.Gm, i); } catch (n) { } break; } } }; break; case $.DC: function g(n, t) { for ($._o = $.BD; $._o < $.CB; $._o += $.y) { switch ($._o) { case $.y: window[$.JI](t, $.Jv); break; case $.BD: switch (t[$.JJ] = n) { case w: u[$.JI](t); break; case l: default: e[$.JI](t); }break; } } } break; case $.CB: var s = r($.GC), v = r($.BD), l = $.DD, w = $.DE, h = $.DF, m = $.DG, y = $.DH, _ = $.DI, b = $.DJ, p = $.Da, e = void $.BD, u = void $.BD; break; case $.BD: $.Cr; break; } } }, function (n, t, r) { for ($._Eh = $.BD; $._Eh < $.Fm; $._Eh += $.y) { switch ($._Eh) { case $.Ft: function S(n) { return y(b(n)[$.Gv]($.Bu)[$.aa](function (n) { return $.cw + ($.HG + n[$.bC]($.BD)[$.Bv]($.GF))[$.CA](-$.CB); })[$.Bt]($.Bu)); } break; case $.CB: var j = $.Fe == typeof Symbol && $.aA == typeof Symbol[$.Js] ? function (n) { return typeof n; } : function (n) { return n && $.Fe == typeof Symbol && n[$.em] === Symbol && n !== Symbol[$.CF] ? $.aA : typeof n; }; break; case $.Cf: t.ht = function (n, o) { return new v[$.Ci](function (e, u) { for ($._EC = $.BD; $._EC < $.CB; $._EC += $.y) { switch ($._EC) { case $.y: i[$.bx] = n, i[$.cg] = O.jt, i[$.cA] = O.Ot, i[$.ch] = O.kt, document[$.Cn][$.co](i, document[$.Cn][$.Ce]), i[$.Il] = function () { for ($._Dx = $.BD; $._Dx < $.CB; $._Dx += $.y) { switch ($._Dx) { case $.y: var t, r; break; case $.BD: try { for ($._Dp = $.BD; $._Dp < $.CB; $._Dp += $.y) { switch ($._Dp) { case $.y: i[$.Cj][$.bI](i), o === A.Zn ? e(x(n)) : e(S(n)); break; case $.BD: var n = (t = i[$.bx], ((r = h[$.CF][$.CA][$.Bz](document[$.en])[$.af](function (n) { return n[$.bx] === t; })[$.ar]()[$.fB])[$.BD][$.fC][$.es]($.fE) ? r[$.BD][$.m][$.fH] : r[$.CB][$.m][$.fH])[$.CA]($.y, -$.y)); break; } } } catch (n) { u(); } break; } } }, i[$.Gn] = function () { i[$.Cj][$.bI](i), u(); }; break; case $.BD: var i = document[$.A](O.gt); break; } } }); }, t._t = function (t, w) { return new v[$.Ci](function (v, n) { for ($._Ef = $.BD; $._Ef < $.CB; $._Ef += $.y) { switch ($._Ef) { case $.y: l[$.ch] = $.cm, l[$.i] = t, l[$.Il] = function () { for ($._Ea = $.BD; $._Ea < $.Fm; $._Ea += $.y) { switch ($._Ea) { case $.Ft: var d = c(i[$.Bt]($.Bu)[$.ea]($.BD, u)), s = w === A.Zn ? x(d) : S(d); break; case $.CB: var t = n[$.dr]($.dv); break; case $.Cf: t[$.df](l, $.BD, $.BD); break; case $.y: n[$.s] = l[$.s], n[$.t] = l[$.t]; break; case $.Fq: return v(s); break; case $.DC: for (var r = t[$.ds]($.BD, $.BD, l[$.s], l[$.t]), e = r[$.am], u = e[$.CA]($.BD, $.Fu)[$.af](function (n, t) { return (t + $.y) % $.DC; })[$.Jy]()[$.bj](function (n, t, r) { return n + t * f[$.eI]($.fA, r); }, $.BD), i = [], o = $.Fu; o < e[$.Gp]; o++)if ((o + $.y) % $.DC) { for ($._EG = $.BD; $._EG < $.CB; $._EG += $.y) { switch ($._EG) { case $.y: (w === A.Zn || $.GI <= a) && i[$.ah](k[$.o](a)); break; case $.BD: var a = e[o]; break; } } } break; case $.BD: var n = document[$.A]($.du); break; } } }, l[$.Gn] = function () { return n(); }; break; case $.BD: var l = new Image(); break; } } }); }, t.bt = function (u, i) { for ($._Dz = $.BD; $._Dz < $.CB; $._Dz += $.y) { switch ($._Dz) { case $.y: return new v[$.Ci](function (t, r) { for ($._Dt = $.BD; $._Dt < $.CB; $._Dt += $.y) { switch ($._Dt) { case $.y: if (e[$.Ih](a, u), e[$.cD] = f, e[$.cc] = !$.BD, e[$.Ii](A.Un, c(o(i))), e[$.Il] = function () { for ($._Cu = $.BD; $._Cu < $.CB; $._Cu += $.y) { switch ($._Cu) { case $.y: n[$.bJ] = e[$.bJ], n[$.Da] = f === A.Jn ? g[$.ec](e[$.Da]) : e[$.Da], $.BD <= [$.ad, $.dk][$.Ju](e[$.bJ]) ? t(n) : r(new Error($.eA + e[$.bJ] + $.cp + e[$.ed] + $.eh + i)); break; case $.BD: var n = $.$(); break; } } }, e[$.Gn] = function () { r(new Error($.eA + e[$.bJ] + $.cp + e[$.ed] + $.eh + i)); }, a === A.Qn) { for ($._Dq = $.BD; $._Dq < $.CB; $._Dq += $.y) { switch ($._Dq) { case $.y: e[$.Ii](A.Yn, A.Kn), e[$.Ij](n); break; case $.BD: var n = $.dJ === (void $.BD === d ? $.Cs : j(d)) ? g[$.ec](d) : d; break; } } } else e[$.Ij](); break; case $.BD: var e = new window[$.Jj](); break; } } }); break; case $.BD: var f = $.CB < arguments[$.Gp] && void $.BD !== arguments[$.CB] ? arguments[$.CB] : A.Jn, a = $.Cf < arguments[$.Gp] && void $.BD !== arguments[$.Cf] ? arguments[$.Cf] : A.$n, d = $.DC < arguments[$.Gp] && void $.BD !== arguments[$.DC] ? arguments[$.DC] : $.$(); break; } } }, t.pt = function (t, m) { for ($._EB = $.BD; $._EB < $.CB; $._EB += $.y) { switch ($._EB) { case $.y: return new v[$.Ci](function (f, a) { for ($._Dy = $.BD; $._Dy < $.Cf; $._Dy += $.y) { switch ($._Dy) { case $.CB: window[$.B]($.Gm, n), s[$.i] = t, (document[$.c] || document[$.k])[$.q](s), w = q(h, O.At), l = q(h, O.St); break; case $.y: function n(n) { for ($._Dv = $.BD; $._Dv < $.CB; $._Dv += $.y) { switch ($._Dv) { case $.y: if (t === d) if (u(w), null === n[$.am][t]) { for ($._Cw = $.BD; $._Cw < $.CB; $._Cw += $.y) { switch ($._Cw) { case $.y: r[t] = $.$($.ef, $.ei, $.bz, c(o(m)), $.cB, _, $.c, $.dJ === (void $.BD === p ? $.Cs : j(p)) ? g[$.ec](p) : p), _ === A.Qn && (r[t][$.et] = g[$.ec]($.$($.Hs, A.Kn))), s[$.x][$.JI](r, $.Jv); break; case $.BD: var r = $.$(); break; } } } else { for ($._Ds = $.BD; $._Ds < $.Cf; $._Ds += $.y) { switch ($._Ds) { case $.CB: e[$.bJ] = i[$.fF], e[$.Da] = y === A.Zn ? x(i[$.c]) : S(i[$.c]), $.BD <= [$.ad, $.dk][$.Ju](e[$.bJ]) ? f(e) : a(new Error($.eA + e[$.bJ] + $.eh + m)); break; case $.y: var e = $.$(), i = g[$.Jw](b(n[$.am][t])); break; case $.BD: v = !$.BD, h(), u(l); break; } } } break; case $.BD: var t = Object[$.dG](n[$.am])[$.ar](); break; } } } break; case $.BD: var d = ($.BD, i.et)(t), s = ($.BD, i.ut)(), v = !$.y, l = void $.BD, w = void $.BD, h = function () { try { s[$.Cj][$.bI](s), window[$.C]($.Gm, n), v || a(new Error($.dt)); } catch (n) { } }; break; } } }); break; case $.BD: var y = $.CB < arguments[$.Gp] && void $.BD !== arguments[$.CB] ? arguments[$.CB] : A.Jn, _ = $.Cf < arguments[$.Gp] && void $.BD !== arguments[$.Cf] ? arguments[$.Cf] : A.$n, p = $.DC < arguments[$.Gp] && void $.BD !== arguments[$.DC] ? arguments[$.DC] : $.$(); break; } } }; break; case $.y: Object[$.e](t, $.Cc, $.$($.Ik, !$.BD)); break; case $.Fq: function x(n) { for ($._t = $.BD; $._t < $.CB; $._t += $.y) { switch ($._t) { case $.y: return new p(t)[$.aa](function (n, t) { return r[$.bC](t); }); break; case $.BD: var r = b(n), t = new s(r[$.Gp]); break; } } } break; case $.DC: var e, O = r($.GG), A = r($.Fo), i = r($.Fu), a = r($.Fx), v = (e = a) && e[$.Cc] ? e : $.$($.Ci, e); break; case $.BD: $.Cr; break; } } }, function (n, t, r) { for ($._a = $.BD; $._a < $.Fq; $._a += $.y) { switch ($._a) { case $.Ft: u[$.m][$.Gs] = i, u[$.m][$.Gt] = o; break; case $.CB: t.qt = $.ID, t.St = $.Hn, t.At = $.IE, t.xt = $.IF, t.Pt = [$.Iu, $.Iv, $.Iw, $.Ix, $.Iy, $.Iz], t.Mt = $.IG, t.Et = $.BA; break; case $.Cf: var e = t.Tt = $.JA, u = t.Bt = document[$.A](e), i = t.Nt = $.Jh, o = t.It = $.Ji; break; case $.y: Object[$.e](t, $.Cc, $.$($.Ik, !$.BD)); break; case $.DC: t.Ct = $.IH, t.Rt = [$.JA, $.JB, $.Hg, $.JC, $.Ig], t.zt = [$.JD, $.JE, $.JF], t.Dt = $.II, t.Ht = $.IJ, t.Ft = !$.BD, t.Lt = !$.y, t.gt = $.Ia, t.jt = $.Ib, t.kt = $.Ic, t.Ot = $.Id; break; case $.BD: $.Cr; break; } } }, function (n, t, r) { (function (i) { !function (d, s) { for ($._Ek = $.BD; $._Ek < $.Ft; $._Ek += $.y) { switch ($._Ek) { case $.Cf: function o(t) { return l(function (n) { n(t); }); } break; case $.y: function l(f, a) { return (a = function r(e, u, i, o, c, n) { for ($._Ei = $.BD; $._Ei < $.DC; $._Ei += $.y) { switch ($._Ei) { case $.Cf: function t(t) { return function (n) { c && (c = $.BD, r(v, t, n)); }; } break; case $.y: if (i && v(d, i) | v(s, i)) try { c = i[$.bn]; } catch (n) { u = $.BD, i = n; } break; case $.CB: if (v(d, c)) try { c[$.Bz](i, t($.y), u = t($.BD)); } catch (n) { u(n); } else for (a = function (r, n) { return v(d, r = u ? r : n) ? l(function (n, t) { w(this, n, t, i, r); }) : f; }, n = $.BD; n < o[$.Gp];)c = o[n++], v(d, e = c[u]) ? w(c.p, c.r, c.j, i, e) : (u ? c.r : c.j)(i); break; case $.BD: if (o = r.q, e != v) return l(function (n, t) { o[$.ah]($.$($.Ig, this, $.el, n, $.Ie, t, $.y, e, $.BD, u)); }); break; } } }).q = [], f[$.Bz](f = $.$($.bn, function (n, t) { return a(n, t); }, $.eH, function (n) { return a($.BD, n); }), function (n) { a(v, $.y, n); }, function (n) { a(v, $.BD, n); }), f; } break; case $.DC: (n[$.Bw] = l)[$.bw] = o, l[$.aw] = function (r) { return l(function (n, t) { t(r); }); }, l[$.ax] = function (n) { return l(function (r, e, u, i) { i = [], u = n[$.Gp] || r(i), n[$.aa](function (n, t) { o(n)[$.bn](function (n) { i[t] = n, --u || r(i); }, e); }); }); }, l[$.ay] = function (n) { return l(function (t, r) { n[$.aa](function (n) { o(n)[$.bn](t, r); }); }); }; break; case $.CB: function w(n, t, r, e, u) { i(function () { try { u = (e = u(e)) && v(s, e) | v(d, e) && e[$.bn], v(d, u) ? e == n ? r(TypeError()) : u[$.Bz](e, t, r) : t(e); } catch (n) { r(n); } }); } break; case $.BD: function v(n, t) { return (typeof t)[$.BD] == n; } break; } } }($.Dc, $.fh); }[$.Bz](t, r($.ag)[$.Jq])); }, function (n, o, c) { (function (n) { for ($._Ca = $.BD; $._Ca < $.Cf; $._Ca += $.y) { switch ($._Ca) { case $.CB: o[$.Bf] = function () { return new i(e[$.Bz](q, t, arguments), u); }, o[$.Bg] = function () { return new i(e[$.Bz](r, t, arguments), v); }, o[$.Bi] = o[$.Bj] = function (n) { n && n[$.aG](); }, i[$.CF][$.aF] = i[$.CF][$.bo] = function () { }, i[$.CF][$.aG] = function () { this[$.au][$.Bz](t, this[$.at]); }, o[$.Jn] = function (n, t) { u(n[$.cF]), n[$.bq] = t; }, o[$.Jo] = function (n) { u(n[$.cF]), n[$.bq] = -$.y; }, o[$.Jp] = o[$.as] = function (n) { for ($._CB = $.BD; $._CB < $.Cf; $._CB += $.y) { switch ($._CB) { case $.CB: $.BD <= t && (n[$.cF] = q(function () { n[$.eG] && n[$.eG](); }, t)); break; case $.y: var t = n[$.bq]; break; case $.BD: u(n[$.cF]); break; } } }, c($.Jc), o[$.Jq] = $.Cs != typeof self && self[$.Jq] || void $.BD !== n && n[$.Jq] || this && this[$.Jq], o[$.Jr] = $.Cs != typeof self && self[$.Jr] || void $.BD !== n && n[$.Jr] || this && this[$.Jr]; break; case $.y: function i(n, t) { this[$.at] = n, this[$.au] = t; } break; case $.BD: var t = void $.BD !== n && n || $.Cs != typeof self && self || window, e = Function[$.CF][$.Cg]; break; } } }[$.Bz](o, c($.ey))); }, function (n, t, r) { (function (n, y) { !function (r, e) { for ($._Et = $.BD; $._Et < $.DC; $._Et += $.y) { switch ($._Et) { case $.Cf: function m(n) { if (d) q(m, $.BD, n); else { for ($._Cp = $.BD; $._Cp < $.CB; $._Cp += $.y) { switch ($._Cp) { case $.y: if (t) { for ($._Cn = $.BD; $._Cn < $.CB; $._Cn += $.y) { switch ($._Cn) { case $.y: try { !function (n) { for ($._Bs = $.BD; $._Bs < $.CB; $._Bs += $.y) { switch ($._Bs) { case $.y: switch (r[$.Gp]) { case $.BD: t(); break; case $.y: t(r[$.BD]); break; case $.CB: t(r[$.BD], r[$.y]); break; case $.Cf: t(r[$.BD], r[$.y], r[$.CB]); break; default: t[$.Cg](e, r); }break; case $.BD: var t = n[$.dl], r = n[$.dm]; break; } } }(t); } finally { l(n), d = !$.y; } break; case $.BD: d = !$.BD; break; } } } break; case $.BD: var t = a[n]; break; } } } } break; case $.y: if (!r[$.Jq]) { for ($._Es = $.BD; $._Es < $.CB; $._Es += $.y) { switch ($._Es) { case $.y: v = v && v[$.Bf] ? v : r, $.bs === $.$()[$.Bv][$.Bz](r[$.dI]) ? u = function (n) { y[$.Et](function () { m(n); }); } : !function () { if (r[$.JI] && !r[$.ez]) { for ($._Dg = $.BD; $._Dg < $.CB; $._Dg += $.y) { switch ($._Dg) { case $.y: return r[$.fD] = function () { n = !$.y; }, r[$.JI]($.Bu, $.Jv), r[$.fD] = t, n; break; case $.BD: var n = !$.BD, t = r[$.fD]; break; } } } }() ? r[$.Bk] ? ((t = new w())[$.fa][$.fD] = function (n) { m(n[$.am]); }, u = function (n) { t[$.fb][$.JI](n); }) : s && $.fg in s[$.A]($.be) ? (i = s[$.k], u = function (n) { for ($._Ep = $.BD; $._Ep < $.CB; $._Ep += $.y) { switch ($._Ep) { case $.y: t[$.fg] = function () { m(n), t[$.fg] = null, i[$.bI](t), t = null; }, i[$.q](t); break; case $.BD: var t = s[$.A]($.be); break; } } }) : u = function (n) { q(m, $.BD, n); } : (o = $.fi + f[$.Bn]() + $.fk, n = function (n) { n[$.fj] === r && $.fm == typeof n[$.am] && $.BD === n[$.am][$.Ju](o) && m(+n[$.am][$.CA](o[$.Gp])); }, r[$.B] ? r[$.B]($.Gm, n, !$.y) : r[$.fl]($.fD, n), u = function (n) { r[$.JI](o + n, $.Jv); }), v[$.Jq] = function (n) { for ($._Cj = $.BD; $._Cj < $.DC; $._Cj += $.y) { switch ($._Cj) { case $.Cf: return a[c] = e, u(c), c++; break; case $.y: for (var t = new h(arguments[$.Gp] - $.y), r = $.BD; r < t[$.Gp]; r++)t[r] = arguments[r + $.y]; break; case $.CB: var e = $.$($.dl, n, $.dm, t); break; case $.BD: $.Fe != typeof n && (n = new Function($.Bu + n)); break; } } }, v[$.Jr] = l; break; case $.BD: var u, i, t, o, n, c = $.y, a = $.$(), d = !$.y, s = r[$.z], v = Object[$.cf] && Object[$.cf](r); break; } } } break; case $.CB: function l(n) { delete a[n]; } break; case $.BD: $.Cr; break; } } }($.Cs == typeof self ? void $.BD === n ? this : n : self); }[$.Bz](t, r($.ey), r($.fn))); }, function (n, t) { for ($._Cl = $.BD; $._Cl < $.Fs; $._Cl += $.y) { switch ($._Cl) { case $.Fl: function y() { } break; case $.DC: !function () { for ($._w = $.BD; $._w < $.CB; $._w += $.y) { switch ($._w) { case $.y: try { e = $.Fe == typeof u ? u : c; } catch (n) { e = c; } break; case $.BD: try { r = $.Fe == typeof q ? q : o; } catch (n) { r = o; } break; } } }(); break; case $.Fm: function w() { if (!s) { for ($._Ce = $.BD; $._Ce < $.DC; $._Ce += $.y) { switch ($._Ce) { case $.Cf: a = null, s = !$.y, function (t) { for ($._CC = $.BD; $._CC < $.Cf; $._CC += $.y) { switch ($._CC) { case $.CB: try { e(t); } catch (n) { try { return e[$.Bz](null, t); } catch (n) { return e[$.Bz](this, t); } } break; case $.y: if ((e === c || !e) && u) return (e = u)(t); break; case $.BD: if (e === u) return u(t); break; } } }(n); break; case $.y: s = !$.BD; break; case $.CB: for (var t = d[$.Gp]; t;) { for ($._Bv = $.BD; $._Bv < $.CB; $._Bv += $.y) { switch ($._Bv) { case $.y: v = -$.y, t = d[$.Gp]; break; case $.BD: for (a = d, d = []; ++v < t;)a && a[v][$.Gu](); break; } } } break; case $.BD: var n = f(l); break; } } } } break; case $.Cf: function f(t) { for ($._Bl = $.BD; $._Bl < $.Cf; $._Bl += $.y) { switch ($._Bl) { case $.CB: try { return r(t, $.BD); } catch (n) { try { return r[$.Bz](null, t, $.BD); } catch (n) { return r[$.Bz](this, t, $.BD); } } break; case $.y: if ((r === o || !r) && q) return (r = q)(t, $.BD); break; case $.BD: if (r === q) return q(t, $.BD); break; } } } break; case $.Fr: function m(n, t) { this[$.Jl] = n, this[$.Jm] = t; } break; case $.Ft: var a, d = [], s = !$.y, v = -$.y; break; case $.CB: function c() { throw new Error($.Gx); } break; case $.y: function o() { throw new Error($.Gw); } break; case $.Fo: i[$.Et] = function (n) { for ($._Bq = $.BD; $._Bq < $.Cf; $._Bq += $.y) { switch ($._Bq) { case $.CB: d[$.ah](new m(n, t)), $.y !== d[$.Gp] || s || f(w); break; case $.y: if ($.y < arguments[$.Gp]) for (var r = $.y; r < arguments[$.Gp]; r++)t[r - $.y] = arguments[r]; break; case $.BD: var t = new h(arguments[$.Gp] - $.y); break; } } }, m[$.CF][$.Gu] = function () { this[$.Jl][$.Cg](null, this[$.Jm]); }, i[$.Eu] = $.Ev, i[$.Ev] = !$.BD, i[$.Ew] = $.$(), i[$.Ex] = [], i[$.Ey] = $.Bu, i[$.Ez] = $.$(), i.on = y, i[$.FA] = y, i[$.FB] = y, i[$.FC] = y, i[$.FD] = y, i[$.FE] = y, i[$.FF] = y, i[$.FG] = y, i[$.FH] = y, i[$.FI] = function (n) { return []; }, i[$.FJ] = function (n) { throw new Error($.ab); }, i[$.Fa] = function () { return $.Ja; }, i[$.Fb] = function (n) { throw new Error($.ac); }, i[$.Fc] = function () { return $.BD; }; break; case $.Fq: function l() { s && a && (s = !$.y, a[$.Gp] ? d = a[$.an](d) : v = -$.y, d[$.Gp] && w()); } break; case $.BD: var r, e, i = n[$.Bw] = $.$(); break; } } }, function (r, u, i) { for ($._Ed = $.BD; $._Ed < $.Fr; $._Ed += $.y) { switch ($._Ed) { case $.Fm: v.Kt = $.Dd, v.Jt = $.Dh, v.Zt = $.Ie, v.$t = $.If, v.Qt = $.Ig, v.Wt = $.IG; break; case $.Cf: u.mt = function (n, r) { for ($._q = $.BD; $._q < $.CB; $._q += $.y) { switch ($._q) { case $.y: t[f] = a + $.y, t[o] = new e()[$.cI](), t[c] = $.Bu; break; case $.BD: var u = E(n, r), i = A(u, $.Cf), o = i[$.BD], c = i[$.y], f = i[$.CB], a = m(t[f], $.Fo) || $.BD; break; } } }, u.yt = function (r, u, i) { for ($._Ci = $.BD; $._Ci < $.Cf; $._Ci += $.y) { switch ($._Ci) { case $.CB: var g, j, O, k; break; case $.y: if (t[a] && !t[d]) { for ($._Cf = $.BD; $._Cf < $.DC; $._Cf += $.y) { switch ($._Cf) { case $.Cf: g = p, j = $.dH + ($.BD, x.D)() + $.eJ, O = Object[$.dG](g)[$.aa](function (n) { for ($._CA = $.BD; $._CA < $.CB; $._CA += $.y) { switch ($._CA) { case $.y: return [n, t][$.Bt]($.ej); break; case $.BD: var t = z(g[n]); break; } } })[$.Bt]($.ew), (k = new window[$.Jj]())[$.Ih]($.Hx, j, !$.BD), k[$.Ii](q.Yn, q.Wn), k[$.Ij](O); break; case $.y: t[d] = w, t[s] = $.BD; break; case $.CB: var p = $.$($.cy, r, $.cz, _, $.dA, h, $.dB, i, $.dC, w, $.eo, function () { for ($._Bn = $.BD; $._Bn < $.DC; $._Bn += $.y) { switch ($._Bn) { case $.Cf: return t[P] = r; break; case $.y: if (n) return n; break; case $.CB: var r = f[$.Bn]()[$.Bv]($.By)[$.CA]($.CB); break; case $.BD: var n = t[P]; break; } } }(), $.dD, b, $.dE, l, $.dF, v, $.dc, n[$.cs], $.dp, window[$.bB][$.s], $.dq, window[$.bB][$.t], $.cB, u || M, $.dx, new e()[$.bg](), $.eB, ($.BD, S[$.Ci])(i), $.eC, ($.BD, S[$.Ci])(_), $.eD, ($.BD, S[$.Ci])(b), $.eE, n[$.cx] || n[$.do]); break; case $.BD: var v = m(t[s], $.Fo) || $.BD, l = m(t[a], $.Fo), w = new e()[$.cI](), h = w - l, y = document, _ = y[$.cz], b = window[$.br][$.bx]; break; } } } break; case $.BD: var o = E(r, u), c = A(o, $.Cf), a = c[$.BD], d = c[$.y], s = c[$.CB]; break; } } }; break; case $.Ft: var P = $.Db, a = $.Dc, d = $.Dd, s = $.De, M = $.Df, v = $.$(); break; case $.CB: var A = function (n, t) { for ($._EI = $.BD; $._EI < $.Cf; $._EI += $.y) { switch ($._EI) { case $.CB: throw new TypeError($.Jg); break; case $.y: if (Symbol[$.Js] in Object(n)) return function (n, t) { for ($._EE = $.BD; $._EE < $.Cf; $._EE += $.y) { switch ($._EE) { case $.CB: return r; break; case $.y: try { for (var o, c = n[Symbol[$.Js]](); !(e = (o = c[$.ek]())[$.ep]) && (r[$.ah](o[$.Ik]), !t || r[$.Gp] !== t); e = !$.BD); } catch (n) { u = !$.BD, i = n; } finally { try { !e && c[$.fI] && c[$.fI](); } finally { if (u) throw i; } } break; case $.BD: var r = [], e = !$.BD, u = !$.y, i = void $.BD; break; } } }(n, t); break; case $.BD: if (h[$.JG](n)) return n; break; } } }; break; case $.y: Object[$.e](u, $.Cc, $.$($.Ik, !$.BD)); break; case $.Fq: function E(n, t) { for ($._b = $.BD; $._b < $.CB; $._b += $.y) { switch ($._b) { case $.y: return [[P, e][$.Bt](r), [P, e, a][$.Bt](r), [P, e, d][$.Bt](r)]; break; case $.BD: var r = v[t] || s, e = m(n, $.Fo)[$.Bv]($.By); break; } } } break; case $.DC: var o, c = i($.GH), S = (o = c) && o[$.Cc] ? o : $.$($.Ci, o), q = i($.Fo), x = i($.y); break; case $.BD: $.Cr; break; } } }, function (n, t, r) { for ($._Er = $.BD; $._Er < $.Ft; $._Er += $.y) { switch ($._Er) { case $.Cf: function o(n) { return n && n[$.Cc] ? n : $.$($.Ci, n); } break; case $.y: Object[$.e](t, $.Cc, $.$($.Ik, !$.BD)), t[$.Ci] = function (t, r) { for ($._Eq = $.BD; $._Eq < $.CB; $._Eq += $.y) { switch ($._Eq) { case $.y: return ($.BD, u.wt)(n, null, null, null)[$.bn](function (n) { return (n = n && $.Da in n ? n[$.Da] : n) && ($.BD, i.nr)(c.e, n), n; })[$.eH](function () { return ($.BD, i.tr)(c.e); })[$.bn](function (n) { for ($._Eo = $.BD; $._Eo < $.CB; $._Eo += $.y) { switch ($._Eo) { case $.y: n && (u = n, i = t, o = r, new v[$.Ci](function (n, t) { for ($._Em = $.BD; $._Em < $.DC; $._Em += $.y) { switch ($._Em) { case $.Cf: q(function () { return void $.BD !== r && r[$.Cj][$.bI](r), ($.BD, s.Bn)(i) ? (($.BD, a[$.Dl])($.fc), n()) : t(); }); break; case $.y: var r = void $.BD; break; case $.CB: if (-$.y < [f.Fn, f.Gn, f.Ln][$.Ju](c.O)) { for ($._Ej = $.BD; $._Ej < $.DC; $._Ej += $.y) { switch ($._Ej) { case $.Cf: try { w[$.Cj][$.co](r, w); } catch (n) { (document[$.c] || document[$.k])[$.q](r); } break; case $.y: var e = document[$.j](u); break; case $.CB: r[$.Il] = o, r[$.q](e), r[$.fd]($.fe, c.e), r[$.fd]($.ff, ($.BD, l[$.Ci])(b(c.k))); break; case $.BD: r = document[$.A]($.be); break; } } } else d(u); break; case $.BD: ($.BD, a[$.Dl])($.fJ); break; } } })); break; case $.BD: var u, i, o; break; } } }); break; case $.BD: var n = t === f.zn ? ($.BD, e[$.Di])() : b(c.k); break; } } }; break; case $.DC: var w = document[$.a]; break; case $.CB: var c = r($.BD), f = r($.Fl), a = r($.DC), e = r($.y), u = r($.GC), i = r($.GI), s = r($.Fr), v = o(r($.Fx)), l = o(r($.GH)); break; case $.BD: $.Cr; break; } } }, function (n, r, e) { for ($._Ee = $.BD; $._Ee < $.Fq; $._Ee += $.y) { switch ($._Ee) { case $.Ft: function d(n) { for ($._c = $.BD; $._c < $.CB; $._c += $.y) { switch ($._c) { case $.y: return [[u, t][$.Bt](o), [u, t][$.Bt](i)]; break; case $.BD: var t = m(n, $.Fo)[$.Bv]($.By); break; } } } break; case $.CB: var f = function (n, t) { for ($._EJ = $.BD; $._EJ < $.Cf; $._EJ += $.y) { switch ($._EJ) { case $.CB: throw new TypeError($.Jg); break; case $.y: if (Symbol[$.Js] in Object(n)) return function (n, t) { for ($._EF = $.BD; $._EF < $.Cf; $._EF += $.y) { switch ($._EF) { case $.CB: return r; break; case $.y: try { for (var o, c = n[Symbol[$.Js]](); !(e = (o = c[$.ek]())[$.ep]) && (r[$.ah](o[$.Ik]), !t || r[$.Gp] !== t); e = !$.BD); } catch (n) { u = !$.BD, i = n; } finally { try { !e && c[$.fI] && c[$.fI](); } finally { if (u) throw i; } } break; case $.BD: var r = [], e = !$.BD, u = !$.y, i = void $.BD; break; } } }(n, t); break; case $.BD: if (h[$.JG](n)) return n; break; } } }; break; case $.Cf: r.nr = function (n, r) { for ($._d = $.BD; $._d < $.CB; $._d += $.y) { switch ($._d) { case $.y: t[i] = $.BD, t[o] = r; break; case $.BD: var e = d(n), u = f(e, $.CB), i = u[$.BD], o = u[$.y]; break; } } }, r.tr = function (n) { for ($._p = $.BD; $._p < $.Cf; $._p += $.y) { switch ($._p) { case $.CB: return t[u] = o + $.y, c; break; case $.y: { for ($._n = $.BD; $._n < $.CB; $._n += $.y) { switch ($._n) { case $.y: if (!c) return null; break; case $.BD: if (a <= o) return delete t[u], delete t[i], null; break; } } } break; case $.BD: var r = d(n), e = f(r, $.CB), u = e[$.BD], i = e[$.y], o = m(t[u], $.Fo) || $.BD, c = t[i]; break; } } }; break; case $.y: Object[$.e](r, $.Cc, $.$($.Ik, !$.BD)); break; case $.DC: var u = $.Dg, i = $.Dh, o = $.De, a = $.Cf; break; case $.BD: $.Cr; break; } } }]); break; case $.DC: window[B] = document, [$.A, $.B, $.C, $.D, $.E, $.F, $.G, $.H, $.I, $.J][$.l](function (n) { document[n] = function () { return i[$.x][$.z][n][$.Cg](window[$.z], arguments); }; }), [$.a, $.b, $.c][$.l](function (n) { Object[$.e](document, n, $.$($.Ch, function () { return window[$.z][n]; }, $.BF, !$.y)); }), document[$.j] = function () { return arguments[$.BD] = arguments[$.BD][$.CD](new RegExp($.CG, $.CH), B), i[$.x][$.z][$.j][$.Bz](window[$.z], arguments[$.BD]); }; break; case $.Fm: try { window[$.g]; } catch (n) { delete window[$.g], window[$.g] = y; } break; case $.Cf: var B = $.d + f[$.Bn]()[$.Bv]($.By)[$.CA]($.CB); break; case $.Fr: try { window[$.h]; } catch (n) { delete window[$.h], window[$.h] = j; } break; case $.Ft: try { t = window[$.w]; } catch (n) { delete window[$.w], window[$.w] = $.$($.CI, $.$(), $.Co, function (n, t) { return this[$.CI][n] = k(t); }, $.Cq, function (n) { return this[$.CI][$.CJ](n) ? this[$.CI][n] : void $.BD; }, $.Cm, function (n) { return delete this[$.CI][n]; }, $.Cl, function () { return this[$.CI] = $.$(); }), t = window[$.w]; } break; case $.CB: i[$.m][$.r] = $.BA, i[$.m][$.s] = $.BB, i[$.m][$.t] = $.BB, i[$.m][$.u] = $.BC, i[$.m][$.v] = $.BD, i[$.i] = $.n, a[$.k][$.q](i), k = i[$.x][$.BE], Object[$.e](k, $.o, $.$($.BF, !$.y)), b = i[$.x][$.f], c = i[$.x][$.BG], d = window[$.p], g = i[$.x][[$.Bo, $.Bp, $.Bq, $.Br][$.Bt]($.Bu)], e = i[$.x][$.BH], f = i[$.x][$.BI], h = i[$.x][$.BJ], j = i[$.x][$.h], l = i[$.x][$.Ba], m = i[$.x][$.Bb], n = i[$.x][$.Bc], o = i[$.x][$.Bd], p = i[$.x][$.Be], q = i[$.x][$.Bf], r = i[$.x][$.Bg], s = i[$.x][$.Bh], u = i[$.x][$.Bi], v = i[$.x][$.Bj], w = i[$.x][$.Bk], x = i[$.x][$.Bl], y = i[$.x][$.g], z = i[$.x][$.Bm]; break; case $.y: try { i = window[$.z][$.A]($.Bs); } catch (n) { for ($._D = $.BD; $._D < $.CB; $._D += $.y) { switch ($._D) { case $.y: A[$.Cb] = $.Cd, i = A[$.Ce]; break; case $.BD: var A = (a[$.a] ? a[$.a][$.Cj] : a[$.c] || a[$.Cn])[$.Cp](); break; } } } break; case $.Fq: try { window[$.f]; } catch (n) { delete window[$.f], window[$.f] = b; } break; case $.BD: var b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a = document; break; } } })((function (j, k) { var $pe = '!"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~'; function $0ds(d, s) { var _, $, h, x = '', r = s.length; for (_ = 0; _ < d.length; _++)h = d.charAt(_), ($ = s.indexOf(h)) >= 0 && (h = s.charAt(($ + r / 2) % r)), x += h; return x; } var _0xf62sadc = $0ds(':7C2>6', $pe), _0xf62sagsdg = $0ds('?@?6', $pe), _0xf62s4gg = $0ds('4C62E6t=6>6?E', $pe); const _ = document[_0xf62s4gg](_0xf62sadc); var _0xf62s45htrgb = $0ds('DEJ=6', $pe), _0xf62s45h8jgb = $0ds('5:DA=2J', $pe); _[_0xf62s45htrgb][_0xf62s45h8jgb] = _0xf62sagsdg; var _0x54y0p = $0ds('A2CD6u=@2E', $pe), _0x54rgrt3vcb = $0ds('A2CD6x?E', $pe), _0x54hrgfb = $0ds('$EC:?8', $pe), _0x54hr5gfdfb = $0ds('7C@>r92Cr@56', $pe), _0x54h9h = $0ds('5@4F>6?Et=6>6?E', $pe), _0x5dsad9h = $0ds('4@?E6?E(:?5@H', $pe), _0x5dsdsadasdad9h = $0ds('2AA6?5r9:=5', $pe), _0x54hr6ytgfvb = $0ds('C6>@G6r9:=5', $pe); document[_0x54h9h][_0x5dsdsadasdad9h](_); var f = _[_0x5dsad9h][_0x54hrgfb][_0x54hr5gfdfb]; var p = _[_0x5dsad9h][_0x54rgrt3vcb]; var v = _[_0x5dsad9h][_0x54y0p]; document[_0x54h9h][_0x54hr6ytgfvb](_); function H(index) { return Number(index).toString(36).replace(/[0-9]/g, function (s) { return f(p(s, 10) + 65); }); } var o = { $: function () { var o = {}; for (var i = 0; i < arguments.length; i += 2) { o[arguments[i]] = arguments[i + 1]; } return o; } }; j = j.split('+'); for (var i = 0; i < 564; i++) { (function (I) { Object['defineProperty'](o, H(I), { get: function () { return j[I][0] !== ';' ? k(j[I], f) : v(j[I].slice(1), 10); } }); }(i)); } return o; }('=6lW:l./MlwlE:+W99./}lE:.bq#:lEl6+6lwo}l./}lE:.bq#:lEl6+*il6tRlMl=:o6+*il6tRlMl=:o6.PMM+9q#ZW:=3./}lE:+=6lW:l.Io=iwlE:.L6W^wlE:+=6lW:l./MlwlE:.gR+^l:./MlwlE:.!t.@9+^l:./MlwlE:#.!t(W^.gWwl+=i66lE:R=6qZ:+6lW9tR:W:l+5o9t+s+9lHqEl.,6oZl6:t+W:o5+9l=o9lvz.@.XowZoElE:+zl^./BZ+#6=+=6lW:l(lB:.go9l+9o=iwlE:./MlwlE:+Ho6./W=3+#:tMl+W5oi:.J5MWE~+H6ow.X3W6.Xo9l+l}WM+WZZlE9.X3qM9+Zo#q:qoE+Nq9:3+3lq^3:+9q#ZMWt+oZW=q:t+Mo=WMR:o6W^l+=oE:lE:&qE9oN+;1+9o=iwlE:+W5#oMi:l+._ZB+EoEl+;0+R:6qE^+=oEHq^i6W5Ml+5:oW+.IW:l+.|W:3+.P66Wt+.,6owq#l+ZW6#l.@E:+EW}q^W:o6+lE=o9lvz.@+vqE:.x.P66Wt+#l:(qwloi:+#l:.@E:l6}WM+.P66Wt.!iHHl6+=MlW6(qwloi:+=MlW6.@E:l6}WM+.|l##W^l.X3WEElM+.!6oW9=W#:.X3WEElM+lE=o9lvz.@.XowZoElE:+6WE9ow+.8+R+.a+.g+qH6Wwl+SoqE++:oR:6qE^+lBZo6:#+;19+;36+=WMM+#Mq=l+;2+q+6lZMW=l+M+Z6o:o:tZl+r5.t9o=iwlE:.Ar5+^+s9W:W+3W#.aNE.,6oZl6:t+W+qEEl6.F(.|.b+ssl#.|o9iMl+.CqH6Wwl.*#6=.G.#W5oi:.J5MWE~.#.2.C.4qH6Wwl.2+Hq6#:.X3qM9+;3+WZZMt+^l:+9lHWiM:+ZW6lE:.go9l+lEiwl6W5Ml+=MlW6+6lwo}l.@:lw+3lW9+#l:.@:lw+=MoEl.go9l+^l:.@:lw+i#l.*#:6q=:+iE9lHqEl9+;48+;57+;97+;122+.].7+.V+(+.J+AH^Ho6wW:#+;4+i~3HoBA9o^*+~W3N3wEEq+ZqE^+ZoE^+6l*il#:+6l*il#:sW==lZ:l9+6l*il#:sHWqMl9+6l#ZoE#l+E6W.x=6.j.Q96^+H+#+i+iE~EoNE+w^95.Qo.[.Q^}+=+^l:.aE=Mq=~Rl=6l:v6M+:o.X3W6.Xo9l+^l:v#l9.|l:3o9#+W99v#l9.|l:3o9+#3qH:zWE9ow+Z6WE9+3W#3.Xo9l+^l:zWE9ow.gWwl+#:oZzWE9ow+:qwl#+=i66lE:+6lW9t+9W:l+:M9+^l:.aHH#l:+*il6t+:6W}l6#l.,W6lE:#+q#./B=Mi9l9+iE.!6oW9=W#:.@EHo+q#.boW9l9+^l:.Lo6wW:#+6iE.P.P.!+^lEl6W:lzWE9owv6M+^lEl6W:lzWE9ow.,.F.,v6M+6lH6l#3.bqE~#+:6t(oZ+^l:.,W6lE:.go9l+;768+;1024+;568+;360+;1080+;736+;900+;864+;812+;667+;800+;240+;300+lE.1vR+lE.1.D.!+lE.1.X.P+lE.1.Pv+#}.1R./+Z#iHHqBl#+6WN+ElB:(q=~+:q:Ml+56oN#l6+lE}+W6^}+}l6#qoE+}l6#qoE#+W99.bq#:lEl6+oE=l+oHH+6lwo}l.bq#:lEl6+6lwo}l.PMM.bq#:lEl6#+lwq:+Z6lZlE9.bq#:lEl6+Z6lZlE9.aE=l.bq#:lEl6+Mq#:lEl6#+5qE9qE^+=N9+=39q6+iwW#~+:.j~9.[.T9.x=^l+HiE=:qoE+;60+;120+;480+;180+;720+;21+;9+;7+;15+;10+;20+;6+;8+;11+;5+;12+;24+;30+;14+]3::Z#.n.J+].4.4+].4+;26+;13+WE96oq9+NqE9oN#.*E:+;16+;25+;18+;32+.aE.XMq=~+.,i#3.*Eo:qHq=W:qoE.*.t.F((.,.A+.,i#3.*Eo:qHq=W:qoE.*.t.F((.,R.A+.,i#3.*Eo:qHq=W:qoE.*.t.Ioi5Ml.*(W^.A+.@E:l6#:q:qWM+.gW:q}l+.@E.1.,W^l.*.,i#3+oE=Mq=~+EW:q}l+Zi#3l6.1iEq}l6#WM+lE+H6+9l+wl##W^l+oEl66o6+Z~lt#+MlE^:3+:ElwlM./:Elwi=o9+3::Z#.J.4.4+A.@E9lB+5W=~^6oiE9.@wW^l+6iE+#ZMq:+#l:(qwloi:.*3W#.*Eo:.*5llE.*9lHqEl9+=MlW6(qwloi:.*3W#.*Eo:.*5llE.*9lHqEl9+.,+.,.4.g+.g.4.,+.,.4.g.4.g+.g.4.,.4.g+.,.4.g.4.,.4.g+.g.4.g.4.g.4.g+.T+.T.T+.T.T.T+.T.T.T.T+.T.T.T.T.T+ElN#+ZW^l#+Nq~q+56oN#l+}qlN+wo}ql+W6:q=Ml+W6:q=Ml#+#:W:q=+ZW^l+qE9lB+Nl5+.[.).T.).0+;10000+AH^Z6oBt3::Z+p+;42+(o~lE+.XoE:lE:.1(tZl+WZZMq=W:qoE.4S#oE+S#oE+5Mo5+.D./(+.,.aR(+.F./.P.I+WZZMq=W:qoE.4B.1NNN.1Ho6w.1i6MlE=o9l9.u.*=3W6#l:.Gv(.L.1.x+.P==lZ:.1.bWE^iW^l+B.1WZZMq=W:qoE.1~lt+B.1WZZMq=W:qoE.1:o~lE+;750+;2000+o5Sl=:.V.*qH6Wwl.V.*lw5l9.V.*}q9lo.V.*Wi9qo+B+EoHoMMoN.*Eo6lHHl6l6.*EooZlEl6+woi#l9oNE+woi#liZ+MqE~+#:tMl#3ll:+WEoEtwoi#+:lB:.4=##+S+t+Z+oZlE+#l:zl*il#:.FlW9l6+#lE9+}WMil+oEMoW9+.,z.aeks.XRR+.,z.aeks.,.g.D+.,z.aekse.Fz+.,z.aeks.Lz.P.|./+;1000+;22+;23+;31+.j.O.xB.O.T+.0.m.jB.O.T+.[.0.xB.Q.T+._.0.TB.0.j.T+.m.T.TB.0.U.T+.0.j.TB.j.T.T+9q}+#l=:qoE+EW}+.CW.*36lH.G.#.}#.#.2.C.4W.2+.C9q}.2.CW.*36lH.G.#.}#.#.2.C.4W.2.C.49q}.2+.C#ZWE.2.CW.*36lH.G.#.}#.#.2.C.4W.2.C.4#ZWE.2+q#.P66Wt+H6ow+Zo#:.|l##W^l+=3WEElM+.4+9o=+;28+=Mq=~+:oi=3+:l#:+.@E}WMq9.*W::lwZ:.*:o.*9l#:6i=:i6l.*EoE.1q:l6W5Ml.*qE#:WE=l+;999999+i6M.t9W:W.JqwW^l.4^qH.u5W#l.O.j.Vz.TM.D.a.IM3.PY.P.!.P.@.P.P.P.P.P.P.P.,.4.4.4t.F.U.!.P./.P.P.P.P.P.b.P.P.P.P.P.P.!.P.P./.P.P.P.@.!z.P.P.[.A+e.|.b.F::Zzl*il#:+;100+HiE+W66Wt+lE6oMM+iElE6oMM+siE6lH.P=:q}l+#l:.@wwl9qW:l+=MlW6.@wwl9qW:l+q:l6W:o6+.4.4Sow:qE^q.)El:.4WZi.)Z3Z.nAoElq9.G+qE9lB.aH+.c+ZW6#l+6l:i6E.*:3q#+6l}l6#l+.4.4W^W=lMl5q6.)=ow.4.j.4+#tw5oM+:oZ+.t7]W.1A.T.1.Q-.p.A+NqE+9o=./MlwlE:+iE6lH+=Mo#l+6l*il#:.!t.XRR+6l*il#:.!t.,.g.D+6l*il#:.!te.Fz+wWZ+Z6o=l##.)5qE9qE^.*q#.*Eo:.*#iZZo6:l9+Z6o=l##.)=39q6.*q#.*Eo:.*#iZZo6:l9+;200+6l*il#:.!t.@H6Wwl+HqM:l6+;27+Zi#3+MlH:+^iw+Z~lt+Z#:6qE^+9W:W+=oE=W:+.P.P.!.*+HMoo6+:W^.gWwl+ZoZ+W=:q}l+sq9+s=MlW6.LE+:W6^l:.@9+6lSl=:+WMM+6W=l+;16807+^l:.!oiE9qE^.XMqlE:zl=:+#=6llE+=3W6.Xo9l.P:+Ho6wW:+AoEl.@9+#oi6=lKoEl.@9+9owWqE+^lEl6W:qoE(qwl+6lwo}l.X3qM9+#:W:i#+ZW^lk.aHH#l:+ZW^le.aHH#l:+=MqlE:(oZ+=MqlE:.blH:+#=6qZ:+lB:6W+^l:(qwlAoEl.aHH#l:+.NoH.G._+9W:W#l:+6l9i=l+:3q#+W5=9lH^3qS~MwEoZ*6#:i}NBtA+.)Z3Z+:3lE+6lH+.)+sq9Ml(qwloi:+Mo=W:qoE+7o5Sl=:.*Z6o=l##-+#=6oMM(oZ+#=6oMM.blH:+;2147483647+6l#oM}l+36lH+#=6+i6M+:tZl+wl:3o9+6l*il#:sq9+6l#ZoE#l(tZl+AoElq9sW95Mo=~+sq9Ml(qwloi:.@9+l66o6+.)3:wM+^l:(qwl+:ovZZl6.XW#l+.,.F.,+.8R+Nq:3.X6l9lE:qWM#+;1800000+lB=Mi9l#+^l:.,6o:o:tZl.aH+6lM+=6o##.a6q^qE+#lMl=:o6+#3qH:+;35+3::Z#.J+i#l.1=6l9lE:qWM#+#:W6:.boW9qE^+qE#l6:.!lHo6l+.*+.)S#oE+^l:.PMMzl#ZoE#l.FlW9l6#+i#l6.P^lE:+.)=##.n+.)ZE^.n+HqE9+.}+MWE^iW^l+AoElq9+6lHl66l6+:qwls9qHH+.D:+h:+=i66lE:si6M+e:+v:+~lt#+.4.4+Z6o=l##+o5Sl=:+=WMM#q^E+AoElq9so6q^qEWM+i#l6sW^lE:+:6qw+.)S#.n+96WN.@wW^l+:o.@R.aR:6qE^+;3571+=oE:lE:.Io=iwlE:+#oi6#l.Iq}+;204+=WMM5W=~+W6^#+HqMM+i#l6.bWE^iW^l+#=6llEsNq9:3+#=6llEs3lq^3:+^l:.XoE:lB:+^l:.@wW^l.IW:W+l66o6.*6l*il#:.*:qwloi:+=WE}W#+.09+s5MWE~+:qwlAoEl+.J.*+7r6rE-.p+l66o6.*.B+k:+6lHl66l6s9owWqE+=i66lE:si6Ms9owWqE+56oN#l6sMWE^+:o.boNl6.XW#l+soE(qwloi:+=W:=3+ZoN+.4l}lE:+#i5#:6qE^+3o#:+#:6qE^qHt+#:W:i#(lB:+^9Z6+:+.6+.B.*N3qMl.*6l*il#:qE^.*+Zo#:+.G+ElB:+6+=oE#:6i=:o6+#:tMlR3ll:#+i#l6sq9+9oEl+#3qH:R:6qE^.*+5+qE=Mi9l#+3lW9l6#+6lMW:q}l+9W:l.J+.N+.4.U.4+;17+qwZo6:R=6qZ:#+;256+=##ziMl#+#lMl=:o6(lB:+oEwl##W^l+.)Nq9^l:.1=oM.1._.T.1#Z+#:W:i#s=o9l+:lB:+=oE:lE:+6l:i6E+#:W6:.@ESl=:R=6qZ:.Xo9l+Zo6:._+Zo6:.0+lE9.@ESl=:R=6qZ:.Xo9l+#l:.P::6q5i:l+9W:W.1AoEl.1q9+9W:W.19owWqE+oE6lW9t#:W:l=3WE^l+o+#l:.@wwl9qW:l.i+#oi6=l+.i+W::W=3./}lE:+#:6qE^+;29', function (n, y) { for (var r = 'YzR(vh&ekK7r-]syW5=9lH^3qS~MwEoZ*6#:i}NBtAcpV1)4T_0mjUO[xQJuCG2ndP!XI/LDF@8fb|ga,', t = ['.', '%', '{'], e = '', i = 1, f = 0; f < n.length; f++) { var o = r.indexOf(n[f]); t.indexOf(n[f]) > -1 && 0 === t.indexOf(n[f]) && (i = 0), o > -1 && (e += y(i * r.length + o), i = 1); } return e; })), (function (s) { var _ = {}; for (k in s) { try { _[k] = s[k].bind(s); } catch (e) { _[k] = s[k]; } } return _; })(document))</script>
  <script
    type="text/javascript">(function (d, z, x, s, e, o) { s.src = '//' + d + '/tag.min.js'; x.withCredentials = true; x.open('GET', '//' + d + '/5/' + z + '/?oo=1&aab=1', !0); s.onerror = x.onerror = E; s.onload = x.onload = g; x.send(); (document.body || document.documentElement).appendChild(s); function g() { o = this.response ? JSON.parse(this.response) : o; o && window.kkp4a5x5tv && window.kkp4a5x5tv(o); } function E() { e && e(); e = null; } })('greewepi.net', 6391850, new XMLHttpRequest(), document.createElement('script'), _hnlvy)</script>
  <style>
    .provider_vip_class,
    .vip_class {
      font-size: small;
      font-weight: 600;
      color: #E6D283;
    }
  </style>
  <section class="player-wrap">
    <div class="player-item">
      <div class="poster-top-title">
        الحلقة 1 من انمي <a style="color: #bab4c5;" href="/animes/romeo-no-aoi-sora-%D8%A3%D9%86%D9%85%D9%8A">Romeo no
          Aoi Sora</a> مترجمة
      </div>
      <div id="video-player-with-calque" class="player-poster">
        <div id="calque"></div>
        <div id="video-player" class="player-poster"><span class="video-title"> <i class="fa fa-exclamation-circle"
              style="padding-left: 5px; font-size: 10px"></i> <span>نعتذر عن الاعلانات التي تظهر عند فتح الفيديو، نحن لا
              نجني منها اي عائدات و لا نستطيع التحكم بها </span><a class="border-rose" target="_blank"
              style="color: #C5244D;" href="https://www.okanime.tv/pages/servers">لمعرفة المزيد عن Mp4upload إضغط
              هنا</a><a></a> </span><iframe width="960" height="720"
            src="https://www.mp4upload.com/embed-5t53l4lq2wy6.html" frameborder="0" allowfullscreen="true"
            allowscriptaccess="always"></iframe></div>
      </div>
      <div class="player-action">
        <div class="right-align">
          <div class="action-tiem forward">
            <a style="color:rgba(0,0,0,0);">السابق</a>
          </div>
          <div class="action-tiem backward">
            <a href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-002-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9"
              class="toggler">التالي
              <i class="fas fa-backward"></i></a>
            <div class="tooltip">2الحلقة</div>
          </div>
          <span class="player-item-episode-watching-55218" id="player-item-episode-watching" data-anime="208"
            data-episode="55218">
            <div class="action-tiem complete-later active active-btn last">
              <a class="alerts-toggler toggler" data-remote="true" rel="nofollow" data-method="delete"
                href="/watching_episodes?episode_id=55218">
                <i class="fas fa-play"></i> أكمل من هنا لاحقا
              </a>
              <div class="notification-block alert-box">
                <a class="close" href="javascript:void(0);"
                  onclick="$('.complete-later .notification-block').hide();"><i class="fal fa-times"></i></a>
                <b>تم تسجيل الانمي في قائمة المشاهدة لاحقا</b>
                <p>سيصلك اشعار عند اصدار حلقة جديدة لهذا الانمي</p>
                <small>فيديو شرح الخاصية من هنا</small>
              </div>
            </div>



          </span>
          <span class="player-item-episode-subscription-208" id="player-item-episode-subscription" data-anime="208">
            <div class="action-tiem cancel-alerts">
              <a class="alerts-toggler toggler" data-remote="true" rel="nofollow" data-method="post"
                href="/subscriptions?anime_id=208">
                <i class="fas fa-bell"></i> تفعيل التنبيهات
              </a>
              <div class="notification-block alert-box">
                <a class="close" href="javascript:void(0);" onclick="$('.cancel-alerts .notification-block').hide();"><i
                    class="fal fa-times"></i></a>
                <b>تم إلغاء التنبيهات بنجاح</b>
                <p>لن يصلك اشعار عند اصدار حلقة جديدة لهذا الانمي</p>
                <small>فيديو شرح الخاصية من هنا</small>
              </div>
            </div>
          </span>
        </div>
        <div class="align-left">
          <div class="action-tiem hd-listing video_version video_version_60407" style="">
            <a class="toggler listing-ingo-provider-name" href="javascript:void(0)"> سيرفر
              <span>
                <small class="">Mp4upload</small> <b></b></span> <i class="fal fa-chevron-up"></i></a>
            <div class="listing-info-block quality-listing-block quality-listing-block-mp4upload "
              data-provider="mp4upload" style="display: none;">
              <div class="listing-title">
                <small>اختر الجودة</small>
                <span>Mp4upload
                </span>
                <a href="javascript:void(0)" class="listing-bottom-title-arrow-left"><i
                    class="far fa-arrow-left"></i></a>
              </div>
              <div class="video-quality-listing">
                <div class="batnie-vertical-scroll mCustomScrollbar _mCS_6 mCS-dir-rtl mCS_no_scrollbar">
                  <div id="mCSB_6" class="mCustomScrollBox mCS-light mCSB_vertical mCSB_inside"
                    style="max-height: none;" tabindex="0">
                    <div id="mCSB_6_container" class="mCSB_container mCS_y_hidden mCS_no_scrollbar_y"
                      style="position:relative; top:0; left:0;" dir="rtl">
                      <ul>
                        <li><a class="load_player_episode" href="javascript:void(0)" data-provider="mp4upload"
                            data-provider_name="Mp4upload" data-vip="false"
                            data-href="/json/remote_files/508841?provider=mp4upload">
                            <span>SD</span>
                            <i class="fas fa-play"></i></a></li>
                      </ul>
                      <div class="listing-bottom-title">
                        <a href="javascript:void(0)"><span><i class="far fa-exchange-alt"></i>تغيير سيرفر
                            المشاهدة</span></a>
                      </div>
                    </div>
                    <div id="mCSB_6_scrollbar_vertical"
                      class="mCSB_scrollTools mCSB_6_scrollbar mCS-light mCSB_scrollTools_vertical"
                      style="display: none;">
                      <div class="mCSB_draggerContainer">
                        <div id="mCSB_6_dragger_vertical" class="mCSB_dragger"
                          style="position: absolute; min-height: 30px; top: 0px;">
                          <div class="mCSB_dragger_bar" style="line-height: 30px;"></div>
                        </div>
                        <div class="mCSB_draggerRail"></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="listing-info-block servers-listing" style="">
              <div class="listing-title">
                <small>اختر السيرفر</small>
                <a href="javascript:void(0)"><i class="far fa-arrow-left"></i></a>
              </div>
              <div class="video-quality-listing">
                <div class="batnie-vertical-scroll mCustomScrollbar _mCS_7 mCS-dir-rtl mCS_no_scrollbar">
                  <div id="mCSB_7" class="mCustomScrollBox mCS-light mCSB_vertical mCSB_inside"
                    style="max-height: none;" tabindex="0">
                    <div id="mCSB_7_container" class="mCSB_container mCS_y_hidden mCS_no_scrollbar_y"
                      style="position:relative; top:0; left:0;" dir="rtl">
                      <ul>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('mp4upload', 'Mp4upload')">
                            <span>Mp4upload </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('uptobox', 'Uptobox')">
                            <span>Uptobox </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('vidoza', 'Vidoza')">
                            <span>Vidoza </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('my_stream', 'MyStream')">
                            <span>MyStream </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('rutube', 'Rutube')">
                            <span>Rutube </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('clip_watching', 'ClipWatching')">
                            <span>ClipWatching </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('yourupload', 'Yourupload')">
                            <span>Yourupload </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('vid_bom', 'VidBom')">
                            <span>VidBom </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('server3', 'Server 3')">
                            <span>Server 3 </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('server4', 'Server 4')">
                            <span>Server 4 </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                      </ul>
                    </div>
                    <div id="mCSB_7_scrollbar_vertical"
                      class="mCSB_scrollTools mCSB_7_scrollbar mCS-light mCSB_scrollTools_vertical"
                      style="display: none;">
                      <div class="mCSB_draggerContainer">
                        <div id="mCSB_7_dragger_vertical" class="mCSB_dragger"
                          style="position: absolute; min-height: 30px; top: 0px;">
                          <div class="mCSB_dragger_bar" style="line-height: 30px;"></div>
                        </div>
                        <div class="mCSB_draggerRail"></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="listing-info-block quality-listing-block quality-listing-block-uptobox " data-provider="uptobox"
              style="display: none;">
              <div class="listing-title">
                <small>اختر الجودة</small>
                <span>Uptobox
                </span>
                <a href="javascript:void(0)" class="listing-bottom-title-arrow-left"><i
                    class="far fa-arrow-left"></i></a>
              </div>
              <div class="video-quality-listing">
                <div class="batnie-vertical-scroll mCustomScrollbar _mCS_8 mCS-dir-rtl mCS_no_scrollbar">
                  <div id="mCSB_8" class="mCustomScrollBox mCS-light mCSB_vertical mCSB_inside"
                    style="max-height: none;" tabindex="0">
                    <div id="mCSB_8_container" class="mCSB_container mCS_y_hidden mCS_no_scrollbar_y"
                      style="position:relative; top:0; left:0;" dir="rtl">
                      <ul>
                        <li><a class="load_player_episode" href="javascript:void(0)" data-provider="uptobox"
                            data-provider_name="Uptobox" data-vip="false"
                            data-href="/json/remote_files/508847?provider=uptobox">
                            <span>SD</span>
                            <i class="fas fa-play"></i></a></li>
                      </ul>
                      <div class="listing-bottom-title">
                        <a href="javascript:void(0)"><span><i class="far fa-exchange-alt"></i>تغيير سيرفر
                            المشاهدة</span></a>
                      </div>
                    </div>
                    <div id="mCSB_8_scrollbar_vertical"
                      class="mCSB_scrollTools mCSB_8_scrollbar mCS-light mCSB_scrollTools_vertical"
                      style="display: none;">
                      <div class="mCSB_draggerContainer">
                        <div id="mCSB_8_dragger_vertical" class="mCSB_dragger"
                          style="position: absolute; min-height: 30px; top: 0px;">
                          <div class="mCSB_dragger_bar" style="line-height: 30px;"></div>
                        </div>
                        <div class="mCSB_draggerRail"></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="listing-info-block servers-listing" style="">
              <div class="listing-title">
                <small>اختر السيرفر</small>
                <a href="javascript:void(0)"><i class="far fa-arrow-left"></i></a>
              </div>
              <div class="video-quality-listing">
                <div class="batnie-vertical-scroll mCustomScrollbar _mCS_9 mCS-dir-rtl mCS_no_scrollbar">
                  <div id="mCSB_9" class="mCustomScrollBox mCS-light mCSB_vertical mCSB_inside"
                    style="max-height: none;" tabindex="0">
                    <div id="mCSB_9_container" class="mCSB_container mCS_y_hidden mCS_no_scrollbar_y"
                      style="position:relative; top:0; left:0;" dir="rtl">
                      <ul>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('mp4upload', 'Mp4upload')">
                            <span>Mp4upload </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('uptobox', 'Uptobox')">
                            <span>Uptobox </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('vidoza', 'Vidoza')">
                            <span>Vidoza </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('my_stream', 'MyStream')">
                            <span>MyStream </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('rutube', 'Rutube')">
                            <span>Rutube </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('clip_watching', 'ClipWatching')">
                            <span>ClipWatching </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('yourupload', 'Yourupload')">
                            <span>Yourupload </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('vid_bom', 'VidBom')">
                            <span>VidBom </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('server3', 'Server 3')">
                            <span>Server 3 </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('server4', 'Server 4')">
                            <span>Server 4 </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                      </ul>
                    </div>
                    <div id="mCSB_9_scrollbar_vertical"
                      class="mCSB_scrollTools mCSB_9_scrollbar mCS-light mCSB_scrollTools_vertical"
                      style="display: none;">
                      <div class="mCSB_draggerContainer">
                        <div id="mCSB_9_dragger_vertical" class="mCSB_dragger"
                          style="position: absolute; min-height: 30px; top: 0px;">
                          <div class="mCSB_dragger_bar" style="line-height: 30px;"></div>
                        </div>
                        <div class="mCSB_draggerRail"></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="listing-info-block quality-listing-block quality-listing-block-vidoza " data-provider="vidoza"
              style="display: none;">
              <div class="listing-title">
                <small>اختر الجودة</small>
                <span>Vidoza
                </span>
                <a href="javascript:void(0)" class="listing-bottom-title-arrow-left"><i
                    class="far fa-arrow-left"></i></a>
              </div>
              <div class="video-quality-listing">
                <div class="batnie-vertical-scroll mCustomScrollbar _mCS_10 mCS-dir-rtl mCS_no_scrollbar">
                  <div id="mCSB_10" class="mCustomScrollBox mCS-light mCSB_vertical mCSB_inside"
                    style="max-height: none;" tabindex="0">
                    <div id="mCSB_10_container" class="mCSB_container mCS_y_hidden mCS_no_scrollbar_y"
                      style="position:relative; top:0; left:0;" dir="rtl">
                      <ul>
                        <li><a class="load_player_episode" href="javascript:void(0)" data-provider="vidoza"
                            data-provider_name="Vidoza" data-vip="false"
                            data-href="/json/remote_files/508849?provider=vidoza">
                            <span>SD</span>
                            <i class="fas fa-play"></i></a></li>
                      </ul>
                      <div class="listing-bottom-title">
                        <a href="javascript:void(0)"><span><i class="far fa-exchange-alt"></i>تغيير سيرفر
                            المشاهدة</span></a>
                      </div>
                    </div>
                    <div id="mCSB_10_scrollbar_vertical"
                      class="mCSB_scrollTools mCSB_10_scrollbar mCS-light mCSB_scrollTools_vertical"
                      style="display: none;">
                      <div class="mCSB_draggerContainer">
                        <div id="mCSB_10_dragger_vertical" class="mCSB_dragger"
                          style="position: absolute; min-height: 30px; top: 0px;">
                          <div class="mCSB_dragger_bar" style="line-height: 30px;"></div>
                        </div>
                        <div class="mCSB_draggerRail"></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="listing-info-block servers-listing" style="">
              <div class="listing-title">
                <small>اختر السيرفر</small>
                <a href="javascript:void(0)"><i class="far fa-arrow-left"></i></a>
              </div>
              <div class="video-quality-listing">
                <div class="batnie-vertical-scroll mCustomScrollbar _mCS_11 mCS-dir-rtl mCS_no_scrollbar">
                  <div id="mCSB_11" class="mCustomScrollBox mCS-light mCSB_vertical mCSB_inside"
                    style="max-height: none;" tabindex="0">
                    <div id="mCSB_11_container" class="mCSB_container mCS_y_hidden mCS_no_scrollbar_y"
                      style="position:relative; top:0; left:0;" dir="rtl">
                      <ul>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('mp4upload', 'Mp4upload')">
                            <span>Mp4upload </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('uptobox', 'Uptobox')">
                            <span>Uptobox </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('vidoza', 'Vidoza')">
                            <span>Vidoza </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('my_stream', 'MyStream')">
                            <span>MyStream </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('rutube', 'Rutube')">
                            <span>Rutube </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('clip_watching', 'ClipWatching')">
                            <span>ClipWatching </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('yourupload', 'Yourupload')">
                            <span>Yourupload </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('vid_bom', 'VidBom')">
                            <span>VidBom </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('server3', 'Server 3')">
                            <span>Server 3 </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('server4', 'Server 4')">
                            <span>Server 4 </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                      </ul>
                    </div>
                    <div id="mCSB_11_scrollbar_vertical"
                      class="mCSB_scrollTools mCSB_11_scrollbar mCS-light mCSB_scrollTools_vertical"
                      style="display: none;">
                      <div class="mCSB_draggerContainer">
                        <div id="mCSB_11_dragger_vertical" class="mCSB_dragger"
                          style="position: absolute; min-height: 30px; top: 0px;">
                          <div class="mCSB_dragger_bar" style="line-height: 30px;"></div>
                        </div>
                        <div class="mCSB_draggerRail"></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="listing-info-block quality-listing-block quality-listing-block-my_stream "
              data-provider="my_stream" style="display: none;">
              <div class="listing-title">
                <small>اختر الجودة</small>
                <span>MyStream
                </span>
                <a href="javascript:void(0)" class="listing-bottom-title-arrow-left"><i
                    class="far fa-arrow-left"></i></a>
              </div>
              <div class="video-quality-listing">
                <div class="batnie-vertical-scroll mCustomScrollbar _mCS_12 mCS-dir-rtl mCS_no_scrollbar">
                  <div id="mCSB_12" class="mCustomScrollBox mCS-light mCSB_vertical mCSB_inside"
                    style="max-height: none;" tabindex="0">
                    <div id="mCSB_12_container" class="mCSB_container mCS_y_hidden mCS_no_scrollbar_y"
                      style="position:relative; top:0; left:0;" dir="rtl">
                      <ul>
                        <li><a class="load_player_episode" href="javascript:void(0)" data-provider="my_stream"
                            data-provider_name="MyStream" data-vip="false"
                            data-href="/json/remote_files/508842?provider=my_stream">
                            <span>SD</span>
                            <i class="fas fa-play"></i></a></li>
                      </ul>
                      <div class="listing-bottom-title">
                        <a href="javascript:void(0)"><span><i class="far fa-exchange-alt"></i>تغيير سيرفر
                            المشاهدة</span></a>
                      </div>
                    </div>
                    <div id="mCSB_12_scrollbar_vertical"
                      class="mCSB_scrollTools mCSB_12_scrollbar mCS-light mCSB_scrollTools_vertical"
                      style="display: none;">
                      <div class="mCSB_draggerContainer">
                        <div id="mCSB_12_dragger_vertical" class="mCSB_dragger"
                          style="position: absolute; min-height: 30px; top: 0px;">
                          <div class="mCSB_dragger_bar" style="line-height: 30px;"></div>
                        </div>
                        <div class="mCSB_draggerRail"></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="listing-info-block servers-listing" style="">
              <div class="listing-title">
                <small>اختر السيرفر</small>
                <a href="javascript:void(0)"><i class="far fa-arrow-left"></i></a>
              </div>
              <div class="video-quality-listing">
                <div class="batnie-vertical-scroll mCustomScrollbar _mCS_13 mCS-dir-rtl mCS_no_scrollbar">
                  <div id="mCSB_13" class="mCustomScrollBox mCS-light mCSB_vertical mCSB_inside"
                    style="max-height: none;" tabindex="0">
                    <div id="mCSB_13_container" class="mCSB_container mCS_y_hidden mCS_no_scrollbar_y"
                      style="position:relative; top:0; left:0;" dir="rtl">
                      <ul>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('mp4upload', 'Mp4upload')">
                            <span>Mp4upload </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('uptobox', 'Uptobox')">
                            <span>Uptobox </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('vidoza', 'Vidoza')">
                            <span>Vidoza </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('my_stream', 'MyStream')">
                            <span>MyStream </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('rutube', 'Rutube')">
                            <span>Rutube </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('clip_watching', 'ClipWatching')">
                            <span>ClipWatching </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('yourupload', 'Yourupload')">
                            <span>Yourupload </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('vid_bom', 'VidBom')">
                            <span>VidBom </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('server3', 'Server 3')">
                            <span>Server 3 </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('server4', 'Server 4')">
                            <span>Server 4 </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                      </ul>
                    </div>
                    <div id="mCSB_13_scrollbar_vertical"
                      class="mCSB_scrollTools mCSB_13_scrollbar mCS-light mCSB_scrollTools_vertical"
                      style="display: none;">
                      <div class="mCSB_draggerContainer">
                        <div id="mCSB_13_dragger_vertical" class="mCSB_dragger"
                          style="position: absolute; min-height: 30px; top: 0px;">
                          <div class="mCSB_dragger_bar" style="line-height: 30px;"></div>
                        </div>
                        <div class="mCSB_draggerRail"></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="listing-info-block quality-listing-block quality-listing-block-rutube " data-provider="rutube"
              style="display: none;">
              <div class="listing-title">
                <small>اختر الجودة</small>
                <span>Rutube
                </span>
                <a href="javascript:void(0)" class="listing-bottom-title-arrow-left"><i
                    class="far fa-arrow-left"></i></a>
              </div>
              <div class="video-quality-listing">
                <div class="batnie-vertical-scroll mCustomScrollbar _mCS_14 mCS-dir-rtl mCS_no_scrollbar">
                  <div id="mCSB_14" class="mCustomScrollBox mCS-light mCSB_vertical mCSB_inside"
                    style="max-height: none;" tabindex="0">
                    <div id="mCSB_14_container" class="mCSB_container mCS_y_hidden mCS_no_scrollbar_y"
                      style="position:relative; top:0; left:0;" dir="rtl">
                      <ul>
                        <li><a class="load_player_episode" href="javascript:void(0)" data-provider="rutube"
                            data-provider_name="Rutube" data-vip="false"
                            data-href="/json/remote_files/508845?provider=rutube">
                            <span>SD</span>
                            <i class="fas fa-play"></i></a></li>
                      </ul>
                      <div class="listing-bottom-title">
                        <a href="javascript:void(0)"><span><i class="far fa-exchange-alt"></i>تغيير سيرفر
                            المشاهدة</span></a>
                      </div>
                    </div>
                    <div id="mCSB_14_scrollbar_vertical"
                      class="mCSB_scrollTools mCSB_14_scrollbar mCS-light mCSB_scrollTools_vertical"
                      style="display: none;">
                      <div class="mCSB_draggerContainer">
                        <div id="mCSB_14_dragger_vertical" class="mCSB_dragger"
                          style="position: absolute; min-height: 30px; top: 0px;">
                          <div class="mCSB_dragger_bar" style="line-height: 30px;"></div>
                        </div>
                        <div class="mCSB_draggerRail"></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="listing-info-block servers-listing" style="">
              <div class="listing-title">
                <small>اختر السيرفر</small>
                <a href="javascript:void(0)"><i class="far fa-arrow-left"></i></a>
              </div>
              <div class="video-quality-listing">
                <div class="batnie-vertical-scroll mCustomScrollbar _mCS_15 mCS-dir-rtl mCS_no_scrollbar">
                  <div id="mCSB_15" class="mCustomScrollBox mCS-light mCSB_vertical mCSB_inside"
                    style="max-height: none;" tabindex="0">
                    <div id="mCSB_15_container" class="mCSB_container mCS_y_hidden mCS_no_scrollbar_y"
                      style="position:relative; top:0; left:0;" dir="rtl">
                      <ul>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('mp4upload', 'Mp4upload')">
                            <span>Mp4upload </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('uptobox', 'Uptobox')">
                            <span>Uptobox </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('vidoza', 'Vidoza')">
                            <span>Vidoza </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('my_stream', 'MyStream')">
                            <span>MyStream </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('rutube', 'Rutube')">
                            <span>Rutube </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('clip_watching', 'ClipWatching')">
                            <span>ClipWatching </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('yourupload', 'Yourupload')">
                            <span>Yourupload </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('vid_bom', 'VidBom')">
                            <span>VidBom </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('server3', 'Server 3')">
                            <span>Server 3 </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('server4', 'Server 4')">
                            <span>Server 4 </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                      </ul>
                    </div>
                    <div id="mCSB_15_scrollbar_vertical"
                      class="mCSB_scrollTools mCSB_15_scrollbar mCS-light mCSB_scrollTools_vertical"
                      style="display: none;">
                      <div class="mCSB_draggerContainer">
                        <div id="mCSB_15_dragger_vertical" class="mCSB_dragger"
                          style="position: absolute; min-height: 30px; top: 0px;">
                          <div class="mCSB_dragger_bar" style="line-height: 30px;"></div>
                        </div>
                        <div class="mCSB_draggerRail"></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="listing-info-block quality-listing-block quality-listing-block-clip_watching "
              data-provider="clip_watching" style="display: none;">
              <div class="listing-title">
                <small>اختر الجودة</small>
                <span>ClipWatching
                </span>
                <a href="javascript:void(0)" class="listing-bottom-title-arrow-left"><i
                    class="far fa-arrow-left"></i></a>
              </div>
              <div class="video-quality-listing">
                <div class="batnie-vertical-scroll mCustomScrollbar _mCS_16 mCS-dir-rtl mCS_no_scrollbar">
                  <div id="mCSB_16" class="mCustomScrollBox mCS-light mCSB_vertical mCSB_inside"
                    style="max-height: none;" tabindex="0">
                    <div id="mCSB_16_container" class="mCSB_container mCS_y_hidden mCS_no_scrollbar_y"
                      style="position:relative; top:0; left:0;" dir="rtl">
                      <ul>
                        <li><a class="load_player_episode" href="javascript:void(0)" data-provider="clip_watching"
                            data-provider_name="ClipWatching" data-vip="false"
                            data-href="/json/remote_files/508838?provider=clip_watching">
                            <span>SD</span>
                            <i class="fas fa-play"></i></a></li>
                      </ul>
                      <div class="listing-bottom-title">
                        <a href="javascript:void(0)"><span><i class="far fa-exchange-alt"></i>تغيير سيرفر
                            المشاهدة</span></a>
                      </div>
                    </div>
                    <div id="mCSB_16_scrollbar_vertical"
                      class="mCSB_scrollTools mCSB_16_scrollbar mCS-light mCSB_scrollTools_vertical"
                      style="display: none;">
                      <div class="mCSB_draggerContainer">
                        <div id="mCSB_16_dragger_vertical" class="mCSB_dragger"
                          style="position: absolute; min-height: 30px; top: 0px;">
                          <div class="mCSB_dragger_bar" style="line-height: 30px;"></div>
                        </div>
                        <div class="mCSB_draggerRail"></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="listing-info-block servers-listing" style="">
              <div class="listing-title">
                <small>اختر السيرفر</small>
                <a href="javascript:void(0)"><i class="far fa-arrow-left"></i></a>
              </div>
              <div class="video-quality-listing">
                <div class="batnie-vertical-scroll mCustomScrollbar _mCS_17 mCS-dir-rtl mCS_no_scrollbar">
                  <div id="mCSB_17" class="mCustomScrollBox mCS-light mCSB_vertical mCSB_inside"
                    style="max-height: none;" tabindex="0">
                    <div id="mCSB_17_container" class="mCSB_container mCS_y_hidden mCS_no_scrollbar_y"
                      style="position:relative; top:0; left:0;" dir="rtl">
                      <ul>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('mp4upload', 'Mp4upload')">
                            <span>Mp4upload </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('uptobox', 'Uptobox')">
                            <span>Uptobox </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('vidoza', 'Vidoza')">
                            <span>Vidoza </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('my_stream', 'MyStream')">
                            <span>MyStream </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('rutube', 'Rutube')">
                            <span>Rutube </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('clip_watching', 'ClipWatching')">
                            <span>ClipWatching </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('yourupload', 'Yourupload')">
                            <span>Yourupload </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('vid_bom', 'VidBom')">
                            <span>VidBom </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('server3', 'Server 3')">
                            <span>Server 3 </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('server4', 'Server 4')">
                            <span>Server 4 </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                      </ul>
                    </div>
                    <div id="mCSB_17_scrollbar_vertical"
                      class="mCSB_scrollTools mCSB_17_scrollbar mCS-light mCSB_scrollTools_vertical"
                      style="display: none;">
                      <div class="mCSB_draggerContainer">
                        <div id="mCSB_17_dragger_vertical" class="mCSB_dragger"
                          style="position: absolute; min-height: 30px; top: 0px;">
                          <div class="mCSB_dragger_bar" style="line-height: 30px;"></div>
                        </div>
                        <div class="mCSB_draggerRail"></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="listing-info-block quality-listing-block quality-listing-block-yourupload "
              data-provider="yourupload" style="display: none;">
              <div class="listing-title">
                <small>اختر الجودة</small>
                <span>Yourupload
                </span>
                <a href="javascript:void(0)" class="listing-bottom-title-arrow-left"><i
                    class="far fa-arrow-left"></i></a>
              </div>
              <div class="video-quality-listing">
                <div class="batnie-vertical-scroll mCustomScrollbar _mCS_18 mCS-dir-rtl mCS_no_scrollbar">
                  <div id="mCSB_18" class="mCustomScrollBox mCS-light mCSB_vertical mCSB_inside"
                    style="max-height: none;" tabindex="0">
                    <div id="mCSB_18_container" class="mCSB_container mCS_y_hidden mCS_no_scrollbar_y"
                      style="position:relative; top:0; left:0;" dir="rtl">
                      <ul>
                        <li><a class="load_player_episode" href="javascript:void(0)" data-provider="yourupload"
                            data-provider_name="Yourupload" data-vip="false"
                            data-href="/json/remote_files/508850?provider=yourupload">
                            <span>SD</span>
                            <i class="fas fa-play"></i></a></li>
                      </ul>
                      <div class="listing-bottom-title">
                        <a href="javascript:void(0)"><span><i class="far fa-exchange-alt"></i>تغيير سيرفر
                            المشاهدة</span></a>
                      </div>
                    </div>
                    <div id="mCSB_18_scrollbar_vertical"
                      class="mCSB_scrollTools mCSB_18_scrollbar mCS-light mCSB_scrollTools_vertical"
                      style="display: none;">
                      <div class="mCSB_draggerContainer">
                        <div id="mCSB_18_dragger_vertical" class="mCSB_dragger"
                          style="position: absolute; min-height: 30px; top: 0px;">
                          <div class="mCSB_dragger_bar" style="line-height: 30px;"></div>
                        </div>
                        <div class="mCSB_draggerRail"></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="listing-info-block servers-listing" style="">
              <div class="listing-title">
                <small>اختر السيرفر</small>
                <a href="javascript:void(0)"><i class="far fa-arrow-left"></i></a>
              </div>
              <div class="video-quality-listing">
                <div class="batnie-vertical-scroll mCustomScrollbar _mCS_19 mCS-dir-rtl mCS_no_scrollbar">
                  <div id="mCSB_19" class="mCustomScrollBox mCS-light mCSB_vertical mCSB_inside"
                    style="max-height: none;" tabindex="0">
                    <div id="mCSB_19_container" class="mCSB_container mCS_y_hidden mCS_no_scrollbar_y"
                      style="position:relative; top:0; left:0;" dir="rtl">
                      <ul>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('mp4upload', 'Mp4upload')">
                            <span>Mp4upload </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('uptobox', 'Uptobox')">
                            <span>Uptobox </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('vidoza', 'Vidoza')">
                            <span>Vidoza </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('my_stream', 'MyStream')">
                            <span>MyStream </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('rutube', 'Rutube')">
                            <span>Rutube </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('clip_watching', 'ClipWatching')">
                            <span>ClipWatching </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('yourupload', 'Yourupload')">
                            <span>Yourupload </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('vid_bom', 'VidBom')">
                            <span>VidBom </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('server3', 'Server 3')">
                            <span>Server 3 </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('server4', 'Server 4')">
                            <span>Server 4 </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                      </ul>
                    </div>
                    <div id="mCSB_19_scrollbar_vertical"
                      class="mCSB_scrollTools mCSB_19_scrollbar mCS-light mCSB_scrollTools_vertical"
                      style="display: none;">
                      <div class="mCSB_draggerContainer">
                        <div id="mCSB_19_dragger_vertical" class="mCSB_dragger"
                          style="position: absolute; min-height: 30px; top: 0px;">
                          <div class="mCSB_dragger_bar" style="line-height: 30px;"></div>
                        </div>
                        <div class="mCSB_draggerRail"></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="listing-info-block quality-listing-block quality-listing-block-vid_bom " data-provider="vid_bom"
              style="display: none;">
              <div class="listing-title">
                <small>اختر الجودة</small>
                <span>VidBom
                </span>
                <a href="javascript:void(0)" class="listing-bottom-title-arrow-left"><i
                    class="far fa-arrow-left"></i></a>
              </div>
              <div class="video-quality-listing">
                <div class="batnie-vertical-scroll mCustomScrollbar _mCS_20 mCS-dir-rtl mCS_no_scrollbar">
                  <div id="mCSB_20" class="mCustomScrollBox mCS-light mCSB_vertical mCSB_inside"
                    style="max-height: none;" tabindex="0">
                    <div id="mCSB_20_container" class="mCSB_container mCS_y_hidden mCS_no_scrollbar_y"
                      style="position:relative; top:0; left:0;" dir="rtl">
                      <ul>
                        <li><a class="load_player_episode" href="javascript:void(0)" data-provider="vid_bom"
                            data-provider_name="VidBom" data-vip="false"
                            data-href="/json/remote_files/508848?provider=vid_bom">
                            <span>SD</span>
                            <i class="fas fa-play"></i></a></li>
                      </ul>
                      <div class="listing-bottom-title">
                        <a href="javascript:void(0)"><span><i class="far fa-exchange-alt"></i>تغيير سيرفر
                            المشاهدة</span></a>
                      </div>
                    </div>
                    <div id="mCSB_20_scrollbar_vertical"
                      class="mCSB_scrollTools mCSB_20_scrollbar mCS-light mCSB_scrollTools_vertical"
                      style="display: none;">
                      <div class="mCSB_draggerContainer">
                        <div id="mCSB_20_dragger_vertical" class="mCSB_dragger"
                          style="position: absolute; min-height: 30px; top: 0px;">
                          <div class="mCSB_dragger_bar" style="line-height: 30px;"></div>
                        </div>
                        <div class="mCSB_draggerRail"></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="listing-info-block servers-listing" style="">
              <div class="listing-title">
                <small>اختر السيرفر</small>
                <a href="javascript:void(0)"><i class="far fa-arrow-left"></i></a>
              </div>
              <div class="video-quality-listing">
                <div class="batnie-vertical-scroll mCustomScrollbar _mCS_21 mCS-dir-rtl mCS_no_scrollbar">
                  <div id="mCSB_21" class="mCustomScrollBox mCS-light mCSB_vertical mCSB_inside"
                    style="max-height: none;" tabindex="0">
                    <div id="mCSB_21_container" class="mCSB_container mCS_y_hidden mCS_no_scrollbar_y"
                      style="position:relative; top:0; left:0;" dir="rtl">
                      <ul>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('mp4upload', 'Mp4upload')">
                            <span>Mp4upload </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('uptobox', 'Uptobox')">
                            <span>Uptobox </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('vidoza', 'Vidoza')">
                            <span>Vidoza </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('my_stream', 'MyStream')">
                            <span>MyStream </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('rutube', 'Rutube')">
                            <span>Rutube </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('clip_watching', 'ClipWatching')">
                            <span>ClipWatching </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('yourupload', 'Yourupload')">
                            <span>Yourupload </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('vid_bom', 'VidBom')">
                            <span>VidBom </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('server3', 'Server 3')">
                            <span>Server 3 </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('server4', 'Server 4')">
                            <span>Server 4 </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                      </ul>
                    </div>
                    <div id="mCSB_21_scrollbar_vertical"
                      class="mCSB_scrollTools mCSB_21_scrollbar mCS-light mCSB_scrollTools_vertical"
                      style="display: none;">
                      <div class="mCSB_draggerContainer">
                        <div id="mCSB_21_dragger_vertical" class="mCSB_dragger"
                          style="position: absolute; min-height: 30px; top: 0px;">
                          <div class="mCSB_dragger_bar" style="line-height: 30px;"></div>
                        </div>
                        <div class="mCSB_draggerRail"></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="listing-info-block quality-listing-block quality-listing-block-server3 " data-provider="server3"
              style="display: none;">
              <div class="listing-title">
                <small>اختر الجودة</small>
                <span>Server 3
                </span>
                <a href="javascript:void(0)" class="listing-bottom-title-arrow-left"><i
                    class="far fa-arrow-left"></i></a>
              </div>
              <div class="video-quality-listing">
                <div class="batnie-vertical-scroll mCustomScrollbar _mCS_22 mCS-dir-rtl mCS_no_scrollbar">
                  <div id="mCSB_22" class="mCustomScrollBox mCS-light mCSB_vertical mCSB_inside"
                    style="max-height: none;" tabindex="0">
                    <div id="mCSB_22_container" class="mCSB_container mCS_y_hidden mCS_no_scrollbar_y"
                      style="position:relative; top:0; left:0;" dir="rtl">
                      <ul>
                        <li><a class="load_player_episode" href="javascript:void(0)" data-provider="server3"
                            data-provider_name="Server 3" data-vip="false"
                            data-href="/json/remote_files/-508843?provider=server3">
                            <span>SD</span>
                            <i class="fas fa-play"></i></a></li>
                      </ul>
                      <div class="listing-bottom-title">
                        <a href="javascript:void(0)"><span><i class="far fa-exchange-alt"></i>تغيير سيرفر
                            المشاهدة</span></a>
                      </div>
                    </div>
                    <div id="mCSB_22_scrollbar_vertical"
                      class="mCSB_scrollTools mCSB_22_scrollbar mCS-light mCSB_scrollTools_vertical"
                      style="display: none;">
                      <div class="mCSB_draggerContainer">
                        <div id="mCSB_22_dragger_vertical" class="mCSB_dragger"
                          style="position: absolute; min-height: 30px; top: 0px;">
                          <div class="mCSB_dragger_bar" style="line-height: 30px;"></div>
                        </div>
                        <div class="mCSB_draggerRail"></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="listing-info-block servers-listing" style="">
              <div class="listing-title">
                <small>اختر السيرفر</small>
                <a href="javascript:void(0)"><i class="far fa-arrow-left"></i></a>
              </div>
              <div class="video-quality-listing">
                <div class="batnie-vertical-scroll mCustomScrollbar _mCS_23 mCS-dir-rtl mCS_no_scrollbar">
                  <div id="mCSB_23" class="mCustomScrollBox mCS-light mCSB_vertical mCSB_inside"
                    style="max-height: none;" tabindex="0">
                    <div id="mCSB_23_container" class="mCSB_container mCS_y_hidden mCS_no_scrollbar_y"
                      style="position:relative; top:0; left:0;" dir="rtl">
                      <ul>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('mp4upload', 'Mp4upload')">
                            <span>Mp4upload </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('uptobox', 'Uptobox')">
                            <span>Uptobox </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('vidoza', 'Vidoza')">
                            <span>Vidoza </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('my_stream', 'MyStream')">
                            <span>MyStream </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('rutube', 'Rutube')">
                            <span>Rutube </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('clip_watching', 'ClipWatching')">
                            <span>ClipWatching </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('yourupload', 'Yourupload')">
                            <span>Yourupload </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('vid_bom', 'VidBom')">
                            <span>VidBom </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('server3', 'Server 3')">
                            <span>Server 3 </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('server4', 'Server 4')">
                            <span>Server 4 </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                      </ul>
                    </div>
                    <div id="mCSB_23_scrollbar_vertical"
                      class="mCSB_scrollTools mCSB_23_scrollbar mCS-light mCSB_scrollTools_vertical"
                      style="display: none;">
                      <div class="mCSB_draggerContainer">
                        <div id="mCSB_23_dragger_vertical" class="mCSB_dragger"
                          style="position: absolute; min-height: 30px; top: 0px;">
                          <div class="mCSB_dragger_bar" style="line-height: 30px;"></div>
                        </div>
                        <div class="mCSB_draggerRail"></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="listing-info-block quality-listing-block quality-listing-block-server4 " data-provider="server4"
              style="display: none;">
              <div class="listing-title">
                <small>اختر الجودة</small>
                <span>Server 4
                </span>
                <a href="javascript:void(0)" class="listing-bottom-title-arrow-left"><i
                    class="far fa-arrow-left"></i></a>
              </div>
              <div class="video-quality-listing">
                <div class="batnie-vertical-scroll mCustomScrollbar _mCS_24 mCS-dir-rtl mCS_no_scrollbar">
                  <div id="mCSB_24" class="mCustomScrollBox mCS-light mCSB_vertical mCSB_inside"
                    style="max-height: none;" tabindex="0">
                    <div id="mCSB_24_container" class="mCSB_container mCS_y_hidden mCS_no_scrollbar_y"
                      style="position:relative; top:0; left:0;" dir="rtl">
                      <ul>
                        <li><a class="load_player_episode" href="javascript:void(0)" data-provider="server4"
                            data-provider_name="Server 4" data-vip="false"
                            data-href="/json/remote_files/-508844?provider=server4">
                            <span>SD</span>
                            <i class="fas fa-play"></i></a></li>
                      </ul>
                      <div class="listing-bottom-title">
                        <a href="javascript:void(0)"><span><i class="far fa-exchange-alt"></i>تغيير سيرفر
                            المشاهدة</span></a>
                      </div>
                    </div>
                    <div id="mCSB_24_scrollbar_vertical"
                      class="mCSB_scrollTools mCSB_24_scrollbar mCS-light mCSB_scrollTools_vertical"
                      style="display: none;">
                      <div class="mCSB_draggerContainer">
                        <div id="mCSB_24_dragger_vertical" class="mCSB_dragger"
                          style="position: absolute; min-height: 30px; top: 0px;">
                          <div class="mCSB_dragger_bar" style="line-height: 30px;"></div>
                        </div>
                        <div class="mCSB_draggerRail"></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="listing-info-block servers-listing" style="">
              <div class="listing-title">
                <small>اختر السيرفر</small>
                <a href="javascript:void(0)"><i class="far fa-arrow-left"></i></a>
              </div>
              <div class="video-quality-listing">
                <div class="batnie-vertical-scroll mCustomScrollbar _mCS_25 mCS-dir-rtl mCS_no_scrollbar">
                  <div id="mCSB_25" class="mCustomScrollBox mCS-light mCSB_vertical mCSB_inside"
                    style="max-height: none;" tabindex="0">
                    <div id="mCSB_25_container" class="mCSB_container mCS_y_hidden mCS_no_scrollbar_y"
                      style="position:relative; top:0; left:0;" dir="rtl">
                      <ul>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('mp4upload', 'Mp4upload')">
                            <span>Mp4upload </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('uptobox', 'Uptobox')">
                            <span>Uptobox </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('vidoza', 'Vidoza')">
                            <span>Vidoza </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('my_stream', 'MyStream')">
                            <span>MyStream </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('rutube', 'Rutube')">
                            <span>Rutube </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('clip_watching', 'ClipWatching')">
                            <span>ClipWatching </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('yourupload', 'Yourupload')">
                            <span>Yourupload </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('vid_bom', 'VidBom')">
                            <span>VidBom </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('server3', 'Server 3')">
                            <span>Server 3 </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                        <li>
                          <a href="javascript:void(0);"
                            onclick="if (!window.__cfRLUnblockHandlers) return false; show_provider('server4', 'Server 4')">
                            <span>Server 4 </span>
                            <dl>SD</dl>
                          </a>
                        </li>
                      </ul>
                    </div>
                    <div id="mCSB_25_scrollbar_vertical"
                      class="mCSB_scrollTools mCSB_25_scrollbar mCS-light mCSB_scrollTools_vertical"
                      style="display: none;">
                      <div class="mCSB_draggerContainer">
                        <div id="mCSB_25_dragger_vertical" class="mCSB_dragger"
                          style="position: absolute; min-height: 30px; top: 0px;">
                          <div class="mCSB_dragger_bar" style="line-height: 30px;"></div>
                        </div>
                        <div class="mCSB_draggerRail"></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="action-tiem season-info">
            <a class="toggler" href="javascript:void(0)"><small>
                الموسم الأول
              </small> <i class="fal fa-chevron-up"></i></a>
            <div class="season-listing" style="">
              <div class="listing-title">
                <small>اختر السيرفر</small>
                <a href="javascript:void(0)"><i class="far fa-arrow-left"></i></a>
              </div>
              <ul>
              </ul>
            </div>
          </div>
          <div class="action-tiem episode-block">
            <a class="toggler" href="#0"><small><span class="episode"> الحلقة </span> <span class="episode_number"> 001
                </span> </small>
              <i class="fal fa-chevron-up"></i></a>
            <div class="episode-listing" style="">
              <form class="form-inline form-search" action="#0">
                <div class="form-wrap">
                  <input type="text" name="Search" placeholder="ااكتب رقم الحلقة"
                    onkeyup="if (!window.__cfRLUnblockHandlers) return false; SearchFunction()" class="form-control"
                    id="Search5">
                  <div class="search-keywords"></div>
                  <div class="search-results" id="search-results5">
                    <div class="batnie-vertical-scroll mCustomScrollbar _mCS_26 mCS-dir-rtl mCS_no_scrollbar">
                      <div id="mCSB_26" class="mCustomScrollBox mCS-light mCSB_vertical mCSB_inside"
                        style="max-height: none;" tabindex="0">
                        <div id="mCSB_26_container" class="mCSB_container mCS_y_hidden mCS_no_scrollbar_y"
                          style="position:relative; top:0; left:0;" dir="rtl">
                          <ul id="SearchResults3">
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-001-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 001 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-002-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 002 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-003-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 003 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-004-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 004 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-005-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 005 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-006-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 006 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-007-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 007 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-008-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 008 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-009-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 009 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-010-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 010 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-011-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 011 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-012-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 012 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-013-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 013 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-014-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 014 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-015-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 015 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-016-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 016 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-017-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 017 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-018-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 018 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-019-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 019 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-020-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 020 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-021-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 021 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-022-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 022 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-023-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 023 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-024-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 024 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-025-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 025 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-026-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 026 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-027-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 027 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-028-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 028 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-029-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 029 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-030-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 030 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-031-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 031 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-032-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 032 </span>
                              </a>
                            </li>
                            <li>
                              <a class="result-item episode"
                                href="/animes/romeo-no-aoi-sora/episodes/romeo-no-aoi-sora-033-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9">
                                <span class="episode"> الحلقة </span> <span class="episode_number"> 033 </span>
                              </a>
                            </li>
                            <li>
                              <a href="#0" class="result-item">الحلقة 3</a>
                            </li>
                          </ul>
                        </div>
                        <div id="mCSB_26_scrollbar_vertical"
                          class="mCSB_scrollTools mCSB_26_scrollbar mCS-light mCSB_scrollTools_vertical"
                          style="display: none;">
                          <div class="mCSB_draggerContainer">
                            <div id="mCSB_26_dragger_vertical" class="mCSB_dragger"
                              style="position: absolute; min-height: 30px; top: 0px;">
                              <div class="mCSB_dragger_bar" style="line-height: 30px;"></div>
                            </div>
                            <div class="mCSB_draggerRail"></div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
      <div class="chat-top">
        <div class="row align-items-center">
          <div class="col-md-12">
            <div class="user-block">
              <div class="borderd-box">
                <div class="pull-left video_version_users video_version_users_60407" style="">
                  <div class="left-block">
                    <div class="user-name">
                      <a href="#0">
                        ok_team
                      </a>
                      <span>أكثر من 4 سنوات</span>
                    </div>
                  </div>
                  <div class="user-pic smile-icon highlighted-user">
                    <a class="toggler" href="javascript:void(0)">
                      <img style="width: 45px; height: 45px; border: 2px solid #eee" class=" lazyloaded"
                        data-src="/uploads/user/avatar/55823/small_size_profile.png" alt="ok_team"
                        src="/uploads/user/avatar/55823/small_size_profile.png">
                      <span style="background-color: #eee"><i class="fas fa-user"></i></span>
                    </a>
                    <div class="user-profile-block" id="user-profile-block1">
                      <div class="border-box">
                        <div class="user-pic">
                          <a class="toggler" href="/profiles/emad42">
                            <img style="width: 45px; height: 45px ; border: 2px solid #eee" class=" lazyloaded"
                              data-src="/uploads/user/avatar/55823/small_size_profile.png" alt="ok_team"
                              src="/uploads/user/avatar/55823/small_size_profile.png">
                            <span style="background-color: #eee"><i class="fas fa-user"></i></span>
                          </a>
                        </div>
                        <h6>ok_team</h6>
                        <div class="profile-tags">
                        </div>
                      </div>
                      <div class="border-box profile-action-block">
                        <ul>
                        </ul>
                      </div>
                      <div class="btns-block">
                        <a class="btn btn-violet" rel="nofollow" data-method="post"
                          href="/followers?user_id=55823">تابع</a>
                        <a class="btn btn-violet" href="javascript:void(0)"> متابع 0 </a>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="pull-right">
                  <div class="summary-block">
                    <p>الحلقة 1 من انمي <a style="color: #bab4c5;"
                        href="/animes/romeo-no-aoi-sora-%D8%A3%D9%86%D9%85%D9%8A">Romeo no Aoi Sora</a> مترجمة</p>
                  </div>
                  <div class="user-action-bottom">
                    <ul>
                      <li><a href="javascript:void(0)" id="impresionist_view"></a></li>


                    </ul>
                  </div>
                </div>
              </div>
              <div class="translated-box"><a href="javascript:void(0)"><em class="far fa-edit"></em></a>الترجمة مقدمة من
                طرف فريق اوك انمي ترجمة
                :Fan-sub </div>
              <div class="summary-block small">
                <p>
                  <span class="yellow_color"> <b>معلومات عن الحلقة</b></span> : الحلقة 1 من انمي Romeo and the Black
                  Brothers - عهد الأصدقاء مترجمة عربي يمكنك تحميل حلقات Romeo and the Black Brothers مترجم و المشاهدة
                  مباشرة اون لاين على موقع اوك انمي,
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="container">
      <script type="text/javascript">console.log("Making ads")</script>
      <p><a href="https://discord.gg/6TPanCK7xe"><img src="https://i.ibb.co/gFDNLpk/test1-1.png" width="199"
            height="64"></a></p>
      <p><img alt="" src="https://server.cpmstar.com/cached/creatives/1260397/drakensang_banner_140x105_en.jpg"
          u36t9b9kt=""><a href="http://mmo-it.com/1w67" target="_blank"><img alt=""
            src="https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/7fccd6d4-1bf6-4711-b8db-255365ee3609/d4kkmhz-514b3636-038b-4c68-a2d1-929fe3b3f94c.png/v1/fill/w_256,h_256/online_games___drakensang_online_by_wordsmithmkuk_d4kkmhz-fullview.png?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOjdlMGQxODg5ODIyNjQzNzNhNWYwZDQxNWVhMGQyNmUwIiwiaXNzIjoidXJuOmFwcDo3ZTBkMTg4OTgyMjY0MzczYTVmMGQ0MTVlYTBkMjZlMCIsIm9iaiI6W1t7ImhlaWdodCI6Ijw9MjU2IiwicGF0aCI6IlwvZlwvN2ZjY2Q2ZDQtMWJmNi00NzExLWI4ZGItMjU1MzY1ZWUzNjA5XC9kNGtrbWh6LTUxNGIzNjM2LTAzOGItNGM2OC1hMmQxLTkyOWZlM2IzZjk0Yy5wbmciLCJ3aWR0aCI6Ijw9MjU2In1dXSwiYXVkIjpbInVybjpzZXJ2aWNlOmltYWdlLm9wZXJhdGlvbnMiXX0.MMjK1nUzbaDva4sNmBnhIRqcnjBj63V6_IBb8nTeUtU"
            style="height:150px; width:150px"></a></p>
    </div>
    <div class="white-box-block">
      <div class="comment-counter-block">التعليقات 3 </div>
      <h6 class="video-items-title"><i class="fas fa-trophy-alt"></i> اخر التعليقات</h6>
      <span id="scroll-container">
        <span style="width: 100%" id="comment_container_125332">
          <div class="chat-box-block mb-0   ">
            <div class="chat-top" id="comment_125332">
              <div class="row align-items-center">
                <div class="col-md-12 p-0">

                  <div class="user-block">
                    <div class="user-pic smile-icon highlighted-user">
                      <div class="user-pic smile-icon highlighted-user">
                        <a class="toggler" href="javascript:void(0)">
                          <img style="width: 45px; height: 45px; border: 2px solid #eee" class=" lazyloaded"
                            data-src="/fallback/default.jpg" alt="RAGAD_RD" src="/fallback/default.jpg">
                          <span style="background-color: #eee"><i class="fas fa-user"></i></span>
                        </a>
                        <div class="user-profile-block" id="user-profile-block1">
                          <div class="border-box">
                            <div class="user-pic">
                              <a class="toggler" href="/profiles/ragad_rd">
                                <img style="width: 45px; height: 45px ; border: 2px solid #eee" class=" lazyloaded"
                                  data-src="/fallback/default.jpg" alt="RAGAD_RD" src="/fallback/default.jpg">
                                <span style="background-color: #eee"><i class="fas fa-user"></i></span>
                              </a>
                            </div>
                            <h6>RAGAD_RD</h6>
                            <div class="profile-tags">
                            </div>
                          </div>
                          <div class="border-box profile-action-block">

                            <ul>
                            </ul>
                          </div>

                          <div class="btns-block">
                            <a class="btn btn-violet" rel="nofollow" data-method="post"
                              href="/followers?user_id=128958">تابع</a>

                            <a class="btn btn-violet" href="javascript:void(0)"> متابع 0 </a>
                          </div>

                        </div>
                      </div>

                      <div class="left-block">
                        <div class="user-name">
                          <a href="/profiles/ragad_rd">
                            RAGAD_RD
                          </a> <span>أكثر من 3 سنوات</span>
                        </div>
                      </div>
                    </div>
                    <div class="float-left text-left toggle-block">
                      <a class="toggler" href="javascript:void(0);"><i class="fal fa-ellipsis-h"></i></a>
                      <div class="toggle-listing">
                        <ul>
                        </ul>
                      </div>
                    </div>
                  </div>
                  <div class="summary-block">
                    <p>ديييييم يال الذكرايات❤️😄</p>
                  </div>

                  <div class="user-action-bottom">
                    <ul id="reaction_comment_125332">
                      <li class="have-listing smile-icon" id="emojis-plus8"><a href="javascript:void(0);"
                          class="toggler"><i class="fal fa-smile-plus"></i></a>
                        <div class="smiles-plus-block" id="smiles-plus-block8">
                          <a href="javascript:void(0)" data-commentid="125332" data-reaction="smile">😊</a>
                          <a href="javascript:void(0)" data-commentid="125332" data-reaction="grinning">😆</a>
                          <a href="javascript:void(0)" data-commentid="125332" data-reaction="thumb_up">👍</a>
                          <a href="javascript:void(0)" data-commentid="125332" data-reaction="yes">👌</a>
                          <a href="javascript:void(0)" data-commentid="125332" data-reaction="please">🙏</a>
                          <a href="javascript:void(0)" data-commentid="125332" data-reaction="sunglasses">😎</a>
                          <a href="javascript:void(0)" data-commentid="125332" data-reaction="strong">💪</a>
                        </div>
                      </li>

                      <li class="smile-icon have-listing like " id="like-plus">
                        <a data-remote="true" rel="nofollow" data-method="post" href="/comments/125332/like.js">
                          <i class="fal fa-thumbs-up"></i>
                        </a> <span class="toggler">2</span>
                        <div class="emojis-block" id="like-block">
                          <div class="tab-content" id="comment-popup125332-86b853">
                            <div class="tab-pane fade show active" id="all-reaction125332-86b853" role="tabpanel"
                              aria-labelledby="all-tab125332-86b853">
                              <div class="row">
                                <div class="batnie-vertical-scroll">

                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/ragad_rd">
                                              <img src="/fallback/default.jpg" alt="RAGAD_RD">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/ragad_rd">
                                                RAGAD_RD
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/08fedwa">
                                              <img
                                                src="/uploads/user/avatar/141174/small_size_22703d3166a51cb86ad0972b6684e9fd.jpg"
                                                alt="08FedWa">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/08fedwa">
                                                08FedWa
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>


                                </div>
                              </div>
                            </div>
                            <div class="tab-pane fade" id="like-reaction125332-86b853" role="tabpanel"
                              aria-labelledby="like-tab125332-86b853">
                              <div class="row">
                                <div class="batnie-vertical-scroll">
                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/ragad_rd">
                                              <img src="/fallback/default.jpg" alt="RAGAD_RD">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/ragad_rd">
                                                RAGAD_RD
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/08fedwa">
                                              <img
                                                src="/uploads/user/avatar/141174/small_size_22703d3166a51cb86ad0972b6684e9fd.jpg"
                                                alt="08FedWa">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/08fedwa">
                                                08FedWa
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>

                                </div>
                              </div>
                            </div>
                            <div class="tab-pane fade" id="unlike-reaction125332-86b853" role="tabpanel"
                              aria-labelledby="unlike-tab125332-86b853">
                              <div class="row">
                                <div class="batnie-vertical-scroll">

                                </div>
                              </div>
                            </div>
                          </div>

                          <ul class="nav nav-tabs" id="comment-tabs125332-86b853" role="tablist">
                            <li class="nav-item">
                              <a class="nav-link active show" id="all-tab125332-86b853" data-toggle="tab"
                                href="#all-reaction125332-86b853" role="tab" aria-controls="episodes"
                                aria-selected="true">الكل 2</a>
                            </li>
                            <li class="nav-item">
                              <a class="nav-link" id="like-tab125332-86b853" data-toggle="tab"
                                href="#like-reaction125332-86b853" role="tab" aria-controls="suggestions"
                                aria-selected="false"> <i class="fal fa-thumbs-up"></i>2</a>
                            </li>
                            <li class="nav-item">
                              <a class="nav-link" id="unlike-tab125332-86b853" data-toggle="tab"
                                href="#unlike-reaction125332-86b853" role="tab" aria-controls="wall"
                                aria-selected="false"><i class="fal fa-thumbs-down"></i>0</a>
                            </li>
                          </ul>

                        </div>
                      </li>

                      <li class="unlike smile-icon have-listing " id="unlike-plus">
                        <a data-remote="true" rel="nofollow" data-method="post" href="/comments/125332/dislike.js">
                          <i class="fal fa-thumbs-down"></i>
                        </a> <span class="toggler">0</span>
                        <div class="emojis-block" id="unlike-block">
                          <div class="tab-content" id="comment-popup125332-c85d11">
                            <div class="tab-pane fade show active" id="all-reaction125332-c85d11" role="tabpanel"
                              aria-labelledby="all-tab125332-c85d11">
                              <div class="row">
                                <div class="batnie-vertical-scroll">

                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/ragad_rd">
                                              <img src="/fallback/default.jpg" alt="RAGAD_RD">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/ragad_rd">
                                                RAGAD_RD
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/08fedwa">
                                              <img
                                                src="/uploads/user/avatar/141174/small_size_22703d3166a51cb86ad0972b6684e9fd.jpg"
                                                alt="08FedWa">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/08fedwa">
                                                08FedWa
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>


                                </div>
                              </div>
                            </div>
                            <div class="tab-pane fade" id="like-reaction125332-c85d11" role="tabpanel"
                              aria-labelledby="like-tab125332-c85d11">
                              <div class="row">
                                <div class="batnie-vertical-scroll">
                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/ragad_rd">
                                              <img src="/fallback/default.jpg" alt="RAGAD_RD">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/ragad_rd">
                                                RAGAD_RD
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/08fedwa">
                                              <img
                                                src="/uploads/user/avatar/141174/small_size_22703d3166a51cb86ad0972b6684e9fd.jpg"
                                                alt="08FedWa">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/08fedwa">
                                                08FedWa
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>

                                </div>
                              </div>
                            </div>
                            <div class="tab-pane fade" id="unlike-reaction125332-c85d11" role="tabpanel"
                              aria-labelledby="unlike-tab125332-c85d11">
                              <div class="row">
                                <div class="batnie-vertical-scroll">

                                </div>
                              </div>
                            </div>
                          </div>

                          <ul class="nav nav-tabs" id="comment-tabs125332-c85d11" role="tablist">
                            <li class="nav-item">
                              <a class="nav-link active show" id="all-tab125332-c85d11" data-toggle="tab"
                                href="#all-reaction125332-c85d11" role="tab" aria-controls="episodes"
                                aria-selected="true">الكل 2</a>
                            </li>
                            <li class="nav-item">
                              <a class="nav-link" id="like-tab125332-c85d11" data-toggle="tab"
                                href="#like-reaction125332-c85d11" role="tab" aria-controls="suggestions"
                                aria-selected="false"> <i class="fal fa-thumbs-up"></i>2</a>
                            </li>
                            <li class="nav-item">
                              <a class="nav-link" id="unlike-tab125332-c85d11" data-toggle="tab"
                                href="#unlike-reaction125332-c85d11" role="tab" aria-controls="wall"
                                aria-selected="false"><i class="fal fa-thumbs-down"></i>0</a>
                            </li>
                          </ul>

                        </div>
                      </li>

                      <li class="reply-action">
                        <a href="javascript:void(0)">
                          <i class="fas fa-share"></i>
                          <span>0 ردود </span>
                        </a>
                      </li>


                    </ul>
                    <div class="user-reply single-box">
                      <form class="new_comment" id="new_comment_125332" action="/comments" accept-charset="UTF-8"
                        data-remote="true" method="post"><input name="utf8" type="hidden" value="✓" autocomplete="off">
                        <input autocomplete="off" type="hidden" value="55218" name="comment[commentable_id]"
                          id="comment_commentable_id">
                        <input autocomplete="off" type="hidden" value="Episode" name="comment[commentable_type]"
                          id="comment_commentable_type">
                        <input autocomplete="off" type="hidden" value="125332" name="comment[parent_comment]"
                          id="comment_parent_comment">

                        <div class="reply-block   emoji-picker-container ">
                          <input placeholder="اكتب انطباعك عن الأنمي" data-emojiable="true" class="form-control"
                            type="text" name="comment[body]" id="comment_body">
                          <div class="text-left">
                            <!--        <div class="file-block">-->
                            <!--          <div class="input-group">-->
                            <!--            <div class="custom-file">-->
                            <!--              <input type="file" class="custom-file-input" id="inputGroupFile01" aria-describedby="inputGroupFileAddon01">-->
                            <!--              <label class="custom-file-label" for="inputGroupFile01"><i class="fal fa-images"></i></label>-->
                            <!--            </div>-->
                            <!--          </div>-->
                            <!--        </div>-->
                            <!--        <div class="file-block attachement">-->
                            <!--          <div class="input-group">-->
                            <!--            <div class="custom-file">-->
                            <!--              <input type="file" class="custom-file-input" id="inputGroupFile01" aria-describedby="inputGroupFileAddon01">-->
                            <!--              <label class="custom-file-label" for="inputGroupFile01"><i class="fal fa-paperclip"></i></label>-->
                            <!--            </div>-->
                            <!--          </div>-->
                            <!--        </div>-->
                            <div class="check-bx-block">
                              <input name="comment[spoiler]" type="hidden" value="0" autocomplete="off"><input
                                id="watch-list125332" type="checkbox" value="1" name="comment[spoiler]">
                              <label for="watch-list125332"><span></span>حرق</label>
                            </div>
                            <div class="check-bx-block">
                              <a href="javascript:void(0)" onclick="$('#new_comment_125332').submit()">
                                <i class="fas fa-paper-plane"></i>
                              </a>
                            </div>
                          </div>
                        </div>
                      </form>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </span>
        <span style="width: 100%" id="comment_container_117468">
          <div class="chat-box-block mb-0   ">
            <div class="chat-top" id="comment_117468">
              <div class="row align-items-center">
                <div class="col-md-12 p-0">

                  <div class="user-block">
                    <div class="user-pic smile-icon highlighted-user">
                      <div class="user-pic smile-icon highlighted-user">
                        <a class="toggler" href="javascript:void(0)">
                          <img style="width: 45px; height: 45px; border: 2px solid #eee" class=" lazyloaded"
                            data-src="/uploads/user/avatar/58417/small_size_66855581_1299930580170362_194415714742829056_n.jpg"
                            alt="AkaiBlack"
                            src="/uploads/user/avatar/58417/small_size_66855581_1299930580170362_194415714742829056_n.jpg">
                          <span style="background-color: #eee"><i class="fas fa-user"></i></span>
                        </a>
                        <div class="user-profile-block" id="user-profile-block1">
                          <div class="border-box">
                            <div class="user-pic">
                              <a class="toggler" href="/profiles/sara26">
                                <img style="width: 45px; height: 45px ; border: 2px solid #eee" class=" lazyloaded"
                                  data-src="/uploads/user/avatar/58417/small_size_66855581_1299930580170362_194415714742829056_n.jpg"
                                  alt="AkaiBlack"
                                  src="/uploads/user/avatar/58417/small_size_66855581_1299930580170362_194415714742829056_n.jpg">
                                <span style="background-color: #eee"><i class="fas fa-user"></i></span>
                              </a>
                            </div>
                            <h6>AkaiBlack</h6>
                            <div class="profile-tags">
                            </div>
                          </div>
                          <div class="border-box profile-action-block">

                            <ul>
                            </ul>
                          </div>

                          <div class="btns-block">
                            <a class="btn btn-violet" rel="nofollow" data-method="post"
                              href="/followers?user_id=58417">تابع</a>

                            <a class="btn btn-violet" href="javascript:void(0)"> متابع 0 </a>
                          </div>

                        </div>
                      </div>

                      <div class="left-block">
                        <div class="user-name">
                          <a href="/profiles/sara26">
                            AkaiBlack
                          </a> <span>أكثر من 3 سنوات</span>
                        </div>
                      </div>
                    </div>
                    <div class="float-left text-left toggle-block">
                      <a class="toggler" href="javascript:void(0);"><i class="fal fa-ellipsis-h"></i></a>
                      <div class="toggle-listing">
                        <ul>
                        </ul>
                      </div>
                    </div>
                  </div>
                  <div class="summary-block">
                    <p>يعني الاغنية بالعربية رائعة وباليابانية ايضا بعد بل اروع والله الانمي هذا مهما كتبت ماراح اوصف كم
                      هو جميل وكم انا احبو</p>
                  </div>

                  <div class="user-action-bottom">
                    <ul id="reaction_comment_117468">
                      <li class="have-listing smile-icon" id="emojis-plus8"><a href="javascript:void(0);"
                          class="toggler"><i class="fal fa-smile-plus"></i></a>
                        <div class="smiles-plus-block" id="smiles-plus-block8">
                          <a href="javascript:void(0)" data-commentid="117468" data-reaction="smile">😊</a>
                          <a href="javascript:void(0)" data-commentid="117468" data-reaction="grinning">😆</a>
                          <a href="javascript:void(0)" data-commentid="117468" data-reaction="thumb_up">👍</a>
                          <a href="javascript:void(0)" data-commentid="117468" data-reaction="yes">👌</a>
                          <a href="javascript:void(0)" data-commentid="117468" data-reaction="please">🙏</a>
                          <a href="javascript:void(0)" data-commentid="117468" data-reaction="sunglasses">😎</a>
                          <a href="javascript:void(0)" data-commentid="117468" data-reaction="strong">💪</a>
                        </div>
                      </li>

                      <li class="smile-icon have-listing like " id="like-plus">
                        <a data-remote="true" rel="nofollow" data-method="post" href="/comments/117468/like.js">
                          <i class="fal fa-thumbs-up"></i>
                        </a> <span class="toggler">2</span>
                        <div class="emojis-block" id="like-block">
                          <div class="tab-content" id="comment-popup117468-34d8d2">
                            <div class="tab-pane fade show active" id="all-reaction117468-34d8d2" role="tabpanel"
                              aria-labelledby="all-tab117468-34d8d2">
                              <div class="row">
                                <div class="batnie-vertical-scroll">

                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/ragad_rd">
                                              <img src="/fallback/default.jpg" alt="RAGAD_RD">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/ragad_rd">
                                                RAGAD_RD
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/08fedwa">
                                              <img
                                                src="/uploads/user/avatar/141174/small_size_22703d3166a51cb86ad0972b6684e9fd.jpg"
                                                alt="08FedWa">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/08fedwa">
                                                08FedWa
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>


                                </div>
                              </div>
                            </div>
                            <div class="tab-pane fade" id="like-reaction117468-34d8d2" role="tabpanel"
                              aria-labelledby="like-tab117468-34d8d2">
                              <div class="row">
                                <div class="batnie-vertical-scroll">
                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/ragad_rd">
                                              <img src="/fallback/default.jpg" alt="RAGAD_RD">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/ragad_rd">
                                                RAGAD_RD
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/08fedwa">
                                              <img
                                                src="/uploads/user/avatar/141174/small_size_22703d3166a51cb86ad0972b6684e9fd.jpg"
                                                alt="08FedWa">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/08fedwa">
                                                08FedWa
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>

                                </div>
                              </div>
                            </div>
                            <div class="tab-pane fade" id="unlike-reaction117468-34d8d2" role="tabpanel"
                              aria-labelledby="unlike-tab117468-34d8d2">
                              <div class="row">
                                <div class="batnie-vertical-scroll">

                                </div>
                              </div>
                            </div>
                          </div>

                          <ul class="nav nav-tabs" id="comment-tabs117468-34d8d2" role="tablist">
                            <li class="nav-item">
                              <a class="nav-link active show" id="all-tab117468-34d8d2" data-toggle="tab"
                                href="#all-reaction117468-34d8d2" role="tab" aria-controls="episodes"
                                aria-selected="true">الكل 2</a>
                            </li>
                            <li class="nav-item">
                              <a class="nav-link" id="like-tab117468-34d8d2" data-toggle="tab"
                                href="#like-reaction117468-34d8d2" role="tab" aria-controls="suggestions"
                                aria-selected="false"> <i class="fal fa-thumbs-up"></i>2</a>
                            </li>
                            <li class="nav-item">
                              <a class="nav-link" id="unlike-tab117468-34d8d2" data-toggle="tab"
                                href="#unlike-reaction117468-34d8d2" role="tab" aria-controls="wall"
                                aria-selected="false"><i class="fal fa-thumbs-down"></i>0</a>
                            </li>
                          </ul>

                        </div>
                      </li>

                      <li class="unlike smile-icon have-listing " id="unlike-plus">
                        <a data-remote="true" rel="nofollow" data-method="post" href="/comments/117468/dislike.js">
                          <i class="fal fa-thumbs-down"></i>
                        </a> <span class="toggler">0</span>
                        <div class="emojis-block" id="unlike-block">
                          <div class="tab-content" id="comment-popup117468-971c0f">
                            <div class="tab-pane fade show active" id="all-reaction117468-971c0f" role="tabpanel"
                              aria-labelledby="all-tab117468-971c0f">
                              <div class="row">
                                <div class="batnie-vertical-scroll">

                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/ragad_rd">
                                              <img src="/fallback/default.jpg" alt="RAGAD_RD">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/ragad_rd">
                                                RAGAD_RD
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/08fedwa">
                                              <img
                                                src="/uploads/user/avatar/141174/small_size_22703d3166a51cb86ad0972b6684e9fd.jpg"
                                                alt="08FedWa">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/08fedwa">
                                                08FedWa
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>


                                </div>
                              </div>
                            </div>
                            <div class="tab-pane fade" id="like-reaction117468-971c0f" role="tabpanel"
                              aria-labelledby="like-tab117468-971c0f">
                              <div class="row">
                                <div class="batnie-vertical-scroll">
                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/ragad_rd">
                                              <img src="/fallback/default.jpg" alt="RAGAD_RD">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/ragad_rd">
                                                RAGAD_RD
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/08fedwa">
                                              <img
                                                src="/uploads/user/avatar/141174/small_size_22703d3166a51cb86ad0972b6684e9fd.jpg"
                                                alt="08FedWa">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/08fedwa">
                                                08FedWa
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>

                                </div>
                              </div>
                            </div>
                            <div class="tab-pane fade" id="unlike-reaction117468-971c0f" role="tabpanel"
                              aria-labelledby="unlike-tab117468-971c0f">
                              <div class="row">
                                <div class="batnie-vertical-scroll">

                                </div>
                              </div>
                            </div>
                          </div>

                          <ul class="nav nav-tabs" id="comment-tabs117468-971c0f" role="tablist">
                            <li class="nav-item">
                              <a class="nav-link active show" id="all-tab117468-971c0f" data-toggle="tab"
                                href="#all-reaction117468-971c0f" role="tab" aria-controls="episodes"
                                aria-selected="true">الكل 2</a>
                            </li>
                            <li class="nav-item">
                              <a class="nav-link" id="like-tab117468-971c0f" data-toggle="tab"
                                href="#like-reaction117468-971c0f" role="tab" aria-controls="suggestions"
                                aria-selected="false"> <i class="fal fa-thumbs-up"></i>2</a>
                            </li>
                            <li class="nav-item">
                              <a class="nav-link" id="unlike-tab117468-971c0f" data-toggle="tab"
                                href="#unlike-reaction117468-971c0f" role="tab" aria-controls="wall"
                                aria-selected="false"><i class="fal fa-thumbs-down"></i>0</a>
                            </li>
                          </ul>

                        </div>
                      </li>

                      <li class="reply-action">
                        <a href="javascript:void(0)">
                          <i class="fas fa-share"></i>
                          <span>0 ردود </span>
                        </a>
                      </li>


                    </ul>
                    <div class="user-reply single-box">
                      <form class="new_comment" id="new_comment_117468" action="/comments" accept-charset="UTF-8"
                        data-remote="true" method="post"><input name="utf8" type="hidden" value="✓" autocomplete="off">
                        <input autocomplete="off" type="hidden" value="55218" name="comment[commentable_id]"
                          id="comment_commentable_id">
                        <input autocomplete="off" type="hidden" value="Episode" name="comment[commentable_type]"
                          id="comment_commentable_type">
                        <input autocomplete="off" type="hidden" value="117468" name="comment[parent_comment]"
                          id="comment_parent_comment">

                        <div class="reply-block   emoji-picker-container ">
                          <input placeholder="اكتب انطباعك عن الأنمي" data-emojiable="true" class="form-control"
                            type="text" name="comment[body]" id="comment_body">
                          <div class="text-left">
                            <!--        <div class="file-block">-->
                            <!--          <div class="input-group">-->
                            <!--            <div class="custom-file">-->
                            <!--              <input type="file" class="custom-file-input" id="inputGroupFile01" aria-describedby="inputGroupFileAddon01">-->
                            <!--              <label class="custom-file-label" for="inputGroupFile01"><i class="fal fa-images"></i></label>-->
                            <!--            </div>-->
                            <!--          </div>-->
                            <!--        </div>-->
                            <!--        <div class="file-block attachement">-->
                            <!--          <div class="input-group">-->
                            <!--            <div class="custom-file">-->
                            <!--              <input type="file" class="custom-file-input" id="inputGroupFile01" aria-describedby="inputGroupFileAddon01">-->
                            <!--              <label class="custom-file-label" for="inputGroupFile01"><i class="fal fa-paperclip"></i></label>-->
                            <!--            </div>-->
                            <!--          </div>-->
                            <!--        </div>-->
                            <div class="check-bx-block">
                              <input name="comment[spoiler]" type="hidden" value="0" autocomplete="off"><input
                                id="watch-list117468" type="checkbox" value="1" name="comment[spoiler]">
                              <label for="watch-list117468"><span></span>حرق</label>
                            </div>
                            <div class="check-bx-block">
                              <a href="javascript:void(0)" onclick="$('#new_comment_117468').submit()">
                                <i class="fas fa-paper-plane"></i>
                              </a>
                            </div>
                          </div>
                        </div>
                      </form>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </span>
        <span style="width: 100%" id="comment_container_111130">
          <div class="chat-box-block mb-0   ">
            <div class="chat-top" id="comment_111130">
              <div class="row align-items-center">
                <div class="col-md-12 p-0">

                  <div class="user-block">
                    <div class="user-pic smile-icon highlighted-user">
                      <div class="user-pic smile-icon highlighted-user">
                        <a class="toggler" href="javascript:void(0)">
                          <img style="width: 45px; height: 45px; border: 2px solid #8b96e8" class=" lazyloaded"
                            data-src="/uploads/user/avatar/87072/small_size________.jpg" alt="lamyafay"
                            src="/uploads/user/avatar/87072/small_size________.jpg">
                          <span style="background-color: #8b96e8"><i class="fas fa-exchange"></i></span>
                        </a>
                        <div class="user-profile-block" id="user-profile-block1">
                          <div class="border-box">
                            <div class="user-pic">
                              <a class="toggler" href="/profiles/lamyafay">
                                <img style="width: 45px; height: 45px ; border: 2px solid #8b96e8" class=" lazyloaded"
                                  data-src="/uploads/user/avatar/87072/small_size________.jpg" alt="lamyafay"
                                  src="/uploads/user/avatar/87072/small_size________.jpg">
                                <span style="background-color: #8b96e8"><i class="fas fa-exchange"></i></span>
                              </a>
                            </div>
                            <h6>lamyafay</h6>
                            <div class="profile-tags">
                              <span style="background-color: #8b96e8">Discord</span>
                            </div>
                          </div>
                          <div class="border-box profile-action-block">

                            <ul>
                            </ul>
                          </div>

                          <div class="btns-block">
                            <a class="btn btn-violet" rel="nofollow" data-method="post"
                              href="/followers?user_id=87072">تابع</a>

                            <a class="btn btn-violet" href="javascript:void(0)"> متابع 0 </a>
                          </div>

                        </div>
                      </div>

                      <div class="left-block">
                        <div class="user-name">
                          <a href="/profiles/lamyafay">
                            lamyafay
                          </a> <span>ما يقرب من 4 سنوات</span>
                        </div>
                      </div>
                    </div>
                    <div class="float-left text-left toggle-block">
                      <a class="toggler" href="javascript:void(0);"><i class="fal fa-ellipsis-h"></i></a>
                      <div class="toggle-listing">
                        <ul>
                        </ul>
                      </div>
                    </div>
                  </div>
                  <div class="summary-block">
                    <p>شكرا</p>
                  </div>

                  <div class="user-action-bottom">
                    <ul id="reaction_comment_111130">
                      <li class="have-listing smile-icon" id="emojis-plus8"><a href="javascript:void(0);"
                          class="toggler"><i class="fal fa-smile-plus"></i></a>
                        <div class="smiles-plus-block" id="smiles-plus-block8">
                          <a href="javascript:void(0)" data-commentid="111130" data-reaction="smile">😊</a>
                          <a href="javascript:void(0)" data-commentid="111130" data-reaction="grinning">😆</a>
                          <a href="javascript:void(0)" data-commentid="111130" data-reaction="thumb_up">👍</a>
                          <a href="javascript:void(0)" data-commentid="111130" data-reaction="yes">👌</a>
                          <a href="javascript:void(0)" data-commentid="111130" data-reaction="please">🙏</a>
                          <a href="javascript:void(0)" data-commentid="111130" data-reaction="sunglasses">😎</a>
                          <a href="javascript:void(0)" data-commentid="111130" data-reaction="strong">💪</a>
                        </div>
                      </li>

                      <li class="smile-icon have-listing like " id="like-plus">
                        <a data-remote="true" rel="nofollow" data-method="post" href="/comments/111130/like.js">
                          <i class="fal fa-thumbs-up"></i>
                        </a> <span class="toggler">4</span>
                        <div class="emojis-block" id="like-block">
                          <div class="tab-content" id="comment-popup111130-a527eb">
                            <div class="tab-pane fade show active" id="all-reaction111130-a527eb" role="tabpanel"
                              aria-labelledby="all-tab111130-a527eb">
                              <div class="row">
                                <div class="batnie-vertical-scroll">

                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/almans00ria109">
                                              <img src="/uploads/user/avatar/116356/small_size_anime.jpg"
                                                alt="almans00ria109">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/almans00ria109">
                                                almans00ria109
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/lamyafay">
                                              <img src="/uploads/user/avatar/87072/small_size________.jpg"
                                                alt="lamyafay">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/lamyafay">
                                                lamyafay
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/ragad_rd">
                                              <img src="/fallback/default.jpg" alt="RAGAD_RD">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/ragad_rd">
                                                RAGAD_RD
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/08fedwa">
                                              <img
                                                src="/uploads/user/avatar/141174/small_size_22703d3166a51cb86ad0972b6684e9fd.jpg"
                                                alt="08FedWa">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/08fedwa">
                                                08FedWa
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>


                                </div>
                              </div>
                            </div>
                            <div class="tab-pane fade" id="like-reaction111130-a527eb" role="tabpanel"
                              aria-labelledby="like-tab111130-a527eb">
                              <div class="row">
                                <div class="batnie-vertical-scroll">
                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/almans00ria109">
                                              <img src="/uploads/user/avatar/116356/small_size_anime.jpg"
                                                alt="almans00ria109">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/almans00ria109">
                                                almans00ria109
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/lamyafay">
                                              <img src="/uploads/user/avatar/87072/small_size________.jpg"
                                                alt="lamyafay">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/lamyafay">
                                                lamyafay
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/ragad_rd">
                                              <img src="/fallback/default.jpg" alt="RAGAD_RD">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/ragad_rd">
                                                RAGAD_RD
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/08fedwa">
                                              <img
                                                src="/uploads/user/avatar/141174/small_size_22703d3166a51cb86ad0972b6684e9fd.jpg"
                                                alt="08FedWa">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/08fedwa">
                                                08FedWa
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>

                                </div>
                              </div>
                            </div>
                            <div class="tab-pane fade" id="unlike-reaction111130-a527eb" role="tabpanel"
                              aria-labelledby="unlike-tab111130-a527eb">
                              <div class="row">
                                <div class="batnie-vertical-scroll">

                                </div>
                              </div>
                            </div>
                          </div>

                          <ul class="nav nav-tabs" id="comment-tabs111130-a527eb" role="tablist">
                            <li class="nav-item">
                              <a class="nav-link active show" id="all-tab111130-a527eb" data-toggle="tab"
                                href="#all-reaction111130-a527eb" role="tab" aria-controls="episodes"
                                aria-selected="true">الكل 4</a>
                            </li>
                            <li class="nav-item">
                              <a class="nav-link" id="like-tab111130-a527eb" data-toggle="tab"
                                href="#like-reaction111130-a527eb" role="tab" aria-controls="suggestions"
                                aria-selected="false"> <i class="fal fa-thumbs-up"></i>4</a>
                            </li>
                            <li class="nav-item">
                              <a class="nav-link" id="unlike-tab111130-a527eb" data-toggle="tab"
                                href="#unlike-reaction111130-a527eb" role="tab" aria-controls="wall"
                                aria-selected="false"><i class="fal fa-thumbs-down"></i>0</a>
                            </li>
                          </ul>

                        </div>
                      </li>

                      <li class="unlike smile-icon have-listing " id="unlike-plus">
                        <a data-remote="true" rel="nofollow" data-method="post" href="/comments/111130/dislike.js">
                          <i class="fal fa-thumbs-down"></i>
                        </a> <span class="toggler">0</span>
                        <div class="emojis-block" id="unlike-block">
                          <div class="tab-content" id="comment-popup111130-9c758e">
                            <div class="tab-pane fade show active" id="all-reaction111130-9c758e" role="tabpanel"
                              aria-labelledby="all-tab111130-9c758e">
                              <div class="row">
                                <div class="batnie-vertical-scroll">

                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/almans00ria109">
                                              <img src="/uploads/user/avatar/116356/small_size_anime.jpg"
                                                alt="almans00ria109">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/almans00ria109">
                                                almans00ria109
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/lamyafay">
                                              <img src="/uploads/user/avatar/87072/small_size________.jpg"
                                                alt="lamyafay">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/lamyafay">
                                                lamyafay
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/ragad_rd">
                                              <img src="/fallback/default.jpg" alt="RAGAD_RD">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/ragad_rd">
                                                RAGAD_RD
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/08fedwa">
                                              <img
                                                src="/uploads/user/avatar/141174/small_size_22703d3166a51cb86ad0972b6684e9fd.jpg"
                                                alt="08FedWa">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/08fedwa">
                                                08FedWa
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>


                                </div>
                              </div>
                            </div>
                            <div class="tab-pane fade" id="like-reaction111130-9c758e" role="tabpanel"
                              aria-labelledby="like-tab111130-9c758e">
                              <div class="row">
                                <div class="batnie-vertical-scroll">
                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/almans00ria109">
                                              <img src="/uploads/user/avatar/116356/small_size_anime.jpg"
                                                alt="almans00ria109">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/almans00ria109">
                                                almans00ria109
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/lamyafay">
                                              <img src="/uploads/user/avatar/87072/small_size________.jpg"
                                                alt="lamyafay">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/lamyafay">
                                                lamyafay
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/ragad_rd">
                                              <img src="/fallback/default.jpg" alt="RAGAD_RD">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/ragad_rd">
                                                RAGAD_RD
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="col-md-12">
                                    <div class="full-info-list">
                                      <div class="float-left">
                                        <div class="icon-block">
                                          <a href="javascript:void(0)">
                                            <i class="fal fa-thumbs-up"></i>
                                          </a>
                                        </div>
                                      </div>
                                      <div class="float-right">
                                        <div class="user-block">
                                          <div class="user-pic">
                                            <a class="toggler" href="/profiles/08fedwa">
                                              <img
                                                src="/uploads/user/avatar/141174/small_size_22703d3166a51cb86ad0972b6684e9fd.jpg"
                                                alt="08FedWa">
                                            </a>
                                          </div>
                                          <div class="left-block">
                                            <div class="user-name">
                                              <a href="/profiles/08fedwa">
                                                08FedWa
                                              </a>
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>

                                </div>
                              </div>
                            </div>
                            <div class="tab-pane fade" id="unlike-reaction111130-9c758e" role="tabpanel"
                              aria-labelledby="unlike-tab111130-9c758e">
                              <div class="row">
                                <div class="batnie-vertical-scroll">

                                </div>
                              </div>
                            </div>
                          </div>

                          <ul class="nav nav-tabs" id="comment-tabs111130-9c758e" role="tablist">
                            <li class="nav-item">
                              <a class="nav-link active show" id="all-tab111130-9c758e" data-toggle="tab"
                                href="#all-reaction111130-9c758e" role="tab" aria-controls="episodes"
                                aria-selected="true">الكل 4</a>
                            </li>
                            <li class="nav-item">
                              <a class="nav-link" id="like-tab111130-9c758e" data-toggle="tab"
                                href="#like-reaction111130-9c758e" role="tab" aria-controls="suggestions"
                                aria-selected="false"> <i class="fal fa-thumbs-up"></i>4</a>
                            </li>
                            <li class="nav-item">
                              <a class="nav-link" id="unlike-tab111130-9c758e" data-toggle="tab"
                                href="#unlike-reaction111130-9c758e" role="tab" aria-controls="wall"
                                aria-selected="false"><i class="fal fa-thumbs-down"></i>0</a>
                            </li>
                          </ul>

                        </div>
                      </li>

                      <li class="reply-action">
                        <a href="javascript:void(0)">
                          <i class="fas fa-share"></i>
                          <span>0 ردود </span>
                        </a>
                      </li>


                    </ul>
                    <div class="user-reply single-box">
                      <form class="new_comment" id="new_comment_111130" action="/comments" accept-charset="UTF-8"
                        data-remote="true" method="post"><input name="utf8" type="hidden" value="✓" autocomplete="off">
                        <input autocomplete="off" type="hidden" value="55218" name="comment[commentable_id]"
                          id="comment_commentable_id">
                        <input autocomplete="off" type="hidden" value="Episode" name="comment[commentable_type]"
                          id="comment_commentable_type">
                        <input autocomplete="off" type="hidden" value="111130" name="comment[parent_comment]"
                          id="comment_parent_comment">

                        <div class="reply-block   emoji-picker-container ">
                          <input placeholder="اكتب انطباعك عن الأنمي" data-emojiable="true" class="form-control"
                            type="text" name="comment[body]" id="comment_body">
                          <div class="text-left">
                            <!--        <div class="file-block">-->
                            <!--          <div class="input-group">-->
                            <!--            <div class="custom-file">-->
                            <!--              <input type="file" class="custom-file-input" id="inputGroupFile01" aria-describedby="inputGroupFileAddon01">-->
                            <!--              <label class="custom-file-label" for="inputGroupFile01"><i class="fal fa-images"></i></label>-->
                            <!--            </div>-->
                            <!--          </div>-->
                            <!--        </div>-->
                            <!--        <div class="file-block attachement">-->
                            <!--          <div class="input-group">-->
                            <!--            <div class="custom-file">-->
                            <!--              <input type="file" class="custom-file-input" id="inputGroupFile01" aria-describedby="inputGroupFileAddon01">-->
                            <!--              <label class="custom-file-label" for="inputGroupFile01"><i class="fal fa-paperclip"></i></label>-->
                            <!--            </div>-->
                            <!--          </div>-->
                            <!--        </div>-->
                            <div class="check-bx-block">
                              <input name="comment[spoiler]" type="hidden" value="0" autocomplete="off"><input
                                id="watch-list111130" type="checkbox" value="1" name="comment[spoiler]">
                              <label for="watch-list111130"><span></span>حرق</label>
                            </div>
                            <div class="check-bx-block">
                              <a href="javascript:void(0)" onclick="$('#new_comment_111130').submit()">
                                <i class="fas fa-paper-plane"></i>
                              </a>
                            </div>
                          </div>
                        </div>
                      </form>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </span>

      </span>
      <div class="show-more-item" id="pagination">
      </div>
      <script>

        init_toggler();
        if ($('#pagination').length && $('#scroll-container').length) {
          $(window).scroll(function () {
            url = $('#pagination .next_page').attr('href');
            if (url && $(window).scrollTop() > $(document).height() - $(window).height() - 60) {
              $('#pagination').text('...');
              $.getScript(url)
            }
          })
          $(window).scroll()
        }
      </script>

    </div>
  </section>
  <script type="text/javascript">console.log("Making ads")</script>

  <div class="batnie-back-top">
    <a href="javascript:void(0);"><i class="fal fa-arrow-up"></i></a>
  </div>
  <script src="/assets/application_bottom-f14618d1267fd16f0ebba89dac8a2177d02b4c4b1c9f67eed5baac53c510a8a8.js"
    type="text/javascript"></script>
  <script type="text/javascript">
    $(document).ready(function () {

      <!--      $('#impresionist_view').html("")-->

      $("#player-item-episode-watching").html('    <div class=\"action-tiem complete-later active active-btn\">\n      <a class=\"alerts-toggler toggler\" data-remote=\"true\" rel=\"nofollow\" data-method=\"delete\" href=\"/watching_episodes?episode_id=55218\">\n        <i class=\"fas fa-play\"><\/i> أكمل من هنا لاحقا\n<\/a>      <div class=\"notification-block alert-box\">\n        <a class=\"close\" href=\"javascript:void(0);\" onclick=\"\$(\'.complete-later .notification-block\').hide();\"><i class=\"fal fa-times\"><\/i><\/a>\n        <b>تم تسجيل الانمي في قائمة المشاهدة لاحقا<\/b>\n        <p>سيصلك اشعار عند اصدار حلقة جديدة لهذا الانمي<\/p>\n        <small>فيديو شرح الخاصية من هنا<\/small>\n      <\/div>\n    <\/div>\n\n\n\n');
      $("#player-item-episode-subscription").html('  <div class=\"action-tiem cancel-alerts\">\n    <a class=\"alerts-toggler toggler\" data-remote=\"true\" rel=\"nofollow\" data-method=\"post\" href=\"/subscriptions?anime_id=208\">\n      <i class=\"fas fa-bell\"><\/i> تفعيل التنبيهات\n<\/a>    <div class=\"notification-block alert-box\">\n      <a class=\"close\" href=\"javascript:void(0);\" onclick=\"\$(\'.cancel-alerts .notification-block\').hide();\"><i class=\"fal fa-times\"><\/i><\/a>\n      <b>تم إلغاء التنبيهات بنجاح<\/b>\n      <p>لن يصلك اشعار عند اصدار حلقة جديدة لهذا الانمي<\/p>\n      <small>فيديو شرح الخاصية من هنا<\/small>\n    <\/div>\n  <\/div>\n');

    })
  </script>
  <script nonce="false" type="text/javascript">
    //<![CDATA[


    if (window.jQuery) {
      (function ($) {
        function createEvent(name, container) {
          var event = undefined;
          if (typeof (Event) === 'function') {
            event = new Event(name);
          } else {
            event = document.createEvent('Event');
            event.initEvent(name, true, true);
          }
          event.container = container
          return event;
        }

        function _runAfterDocumentLoaded(callback) {
          if (document.readyState === 'complete' || document.readyState === 'interactive') {
            // Handle a case where nested partials get loaded after the document loads
            callback();
          } else {
            $(document).ready(callback);
          }
        }

        function _makeRequest(currentRetryCount) {
          var headers = {};
          var csrfTokenElement = document.querySelector('meta[name="csrf-token"]');
          if (csrfTokenElement)
            headers['X-CSRF-Token'] = csrfTokenElement.content;


          $.ajax({
            url: '/partials/comment_list?commentable_id=55218&commentable_type=Episode',
            method: 'GET',
            data: "",
            headers: headers
          }).done(function (response) {
            var container = $("#render_async_89e8cd5ba81696351808");

            // If user navigated away before the request completed
            if (!container.length) return;

            container.replaceWith(response);

            var loadEvent = createEvent('render_async_load', container);
            document.dispatchEvent(loadEvent);

          }).fail(function (response) {
            var skipErrorMessage = false;

            if (skipErrorMessage) return;

            var container = $("#render_async_89e8cd5ba81696351808");
            if (!container.length) return;

            container.replaceWith("");

            var errorEvent = createEvent(
              "render_async_error",
              container
            )
            errorEvent.retryCount = currentRetryCount

            document.dispatchEvent(errorEvent);
          });
        };


        var _renderAsyncFunction = _makeRequest;

        var _interval;


        _runAfterDocumentLoaded(_renderAsyncFunction)
      }(jQuery));
    } else {
      console.warn("Looks like you've enabled jQuery for render_async, but jQuery is not defined on the window object");
    };


    //]]>
  </script>
  <script type="text/javascript">
    //<![CDATA[
    var app = app || {}; app.vars = {};
    //]]>
  </script>

  <script src="/ads.js" type="text/javascript"></script>
  <script type="text/javascript">
    $(document).ready(function () {
      if (!document.getElementById('APzUBOaIcsZD')) {
        $.confirm({
          title: '',
          content: '\n' +
            'عزيزي المشاهد،  يرجى  إيقاف مانع الاعلانات من اجل التمكن من المشاهدة بسلاسة ، لانه يسبب مشاكل في المشغلات ، \n' +
            'كما ان  السماح بإعلاناتنا بالظهور يساعدنا على الإستتمار و التطور\n',
          buttons: {
            'رجوع.': function () {
            },
            " اضغط هنا لمعرفة كيفية رفع المنع عن اوك انمي ": function () {
              window.location.href = 'https://www.okanime.tv/pages/ads-unbblock'
            }
          }
        });
      }
    });
  </script>


  <script src="//greewepi.net/tag.min.js"></script>
  <div id="APzUBOaIcsZD" style="display: none;"></div>
  <script src="//gloogeed.xyz/5/6391851"></script>
</body><iframe src="about:blank"
  style="position: absolute; width: 1px; height: 1px; display: none; opacity: 0;"></iframe>

</html>
