<!DOCTYPE html><html lang="en" data-fp="96o8qqi01rk"><head><meta http-equiv="origin-trial" content="Az520Inasey3TAyqLyojQa8MnmCALSEU29yQFW8dePZ7xQTvSt73pHazLFTK5f7SyLUJSo2uKLesEtEa9aUYcgMAAACPeyJvcmlnaW4iOiJodHRwczovL2dvb2dsZS5jb206NDQzIiwiZmVhdHVyZSI6IkRpc2FibGVUaGlyZFBhcnR5U3RvcmFnZVBhcnRpdGlvbmluZyIsImV4cGlyeSI6MTcyNTQwNzk5OSwiaXNTdWJkb21haW4iOnRydWUsImlzVGhpcmRQYXJ0eSI6dHJ1ZX0=">
    <title>Read Solo Leveling Chapter 168 in English Online Free</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="robots" content="index,follow">
<meta http-equiv="content-language" content="en">
<meta name="description" content="Read and Download Solo Leveling Chapter 168 in EN Online on MangaReader. No Account Required to Read Manga. Check now!">
<meta name="keywords" content="Solo Leveling chapter 168, Solo Leveling info, Solo Leveling manga, Solo Leveling download, Solo Leveling read, read Solo Leveling online, read Solo Leveling free">
<meta property="og:type" content="website">
<meta property="og:url" content="https://mangareader.to/read/solo-leveling-21/en/chapter-168">
<meta property="og:title" content="Read Solo Leveling Chapter 168 in English Online Free">
<meta property="og:image" content="https://mangareader.to/images/share.png">
<meta property="og:image:width" content="650">
<meta property="og:image:height" content="350">
<meta property="og:description" content="Read and Download Solo Leveling Chapter 168 in EN Online on MangaReader. No Account Required to Read Manga. Check now!">
<meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=2">
<meta name="p:domain_verify" content="af0275499319c533df212167fc646dfb">
<link rel="shortcut icon" href="/favicon.ico?v=0.1">
<link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon.png">
<link rel="manifest" href="/manifest.json">
<link rel="mask-icon" href="/images/safari-pinned-tab.svg" color="#5f25a6">
<meta name="msapplication-TileColor" content="#5f25a6">
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.3.1/css/all.css">
<link rel="stylesheet" href="/css/styles.min.css?v=1.7">
<script async="" src="https://gdpr-api.sharethis.com/cmp-v2.js"></script><script async="" src="https://buttons-config.sharethis.com/js/64ce3af00fa8ca0019efa09b.js"></script><script type="text/javascript" async="" src="https://www.gstatic.com/recaptcha/releases/pxZcVU8Dk73FyvFvdCgp2MSG/recaptcha__en.js" crossorigin="anonymous" integrity="sha384-Lo3ZXU7l5KjVR72cD8bbMsXArkkXuD31OpIB/WF4jL1Ck1rSPx8ijndY5XejGW85"></script><script async="" src="https://www.googletagmanager.com/gtag/js?id=UA-207641274-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];

    function gtag() {
        dataLayer.push(arguments);
    }

    gtag('js', new Date());

    gtag('config', 'UA-207641274-1');
</script>
<style>AD-SLOT,
AD-TRIPLE-BOX,
DFP-AD,
[class^="adDisplay-module"],
[class^="amp-ad-"],
[data-ad-cls],
[data-adbridg-ad-class],
[data-css-class="dfp-inarticle"],
[data-d-ad-id],
[data-desktop-ad-id],
[data-dynamic-ads],
[data-ez-name],
[data-freestar-ad],
[data-id^="div-gpt-ad"],
[data-m-ad-id],
[data-mobile-ad-id],
[data-name="adaptiveConstructorAd"],
[data-rc-widget],
[data-role="tile-ads-module"],
[data-template-type="nativead"],
[data-testid="ad_testID"],
[data-type="ad-vertical"],
[id^="ad-wrap-"],
[id^="ad_sky"],
[id^="ad_slider"],
[id^="section-ad-banner"],
[onclick^="location.href='http://www.reimageplus.com"],
a-ad,
a[style="width:100%;height:100%;z-index:10000000000000000;position:absolute;top:0;left:0;"],
ad-shield-ads,
app-ad,
app-advertisement,
app-large-ad,
ark-top-ad,
article.ad,
aside[id^="adrotate_widgets-"],
atf-ad-slot,
bottomadblock,
display-ads,
div[class^="Adstyled__AdWrapper-"],
div[class^="Display_displayAd"],
div[class^="kiwi-ad-wrapper"],
div[class^="native-ad-"],
div[data-ad-placeholder],
div[data-ad-wrapper],
div[data-adname],
div[data-adunit-path],
div[data-adunit],
div[data-adzone],
div[data-alias="300x250 Ad 1"],
div[data-alias="300x250 Ad 2"],
div[data-content="Advertisement"],
div[data-contentexchange-widget],
div[data-dfp-id],
div[data-id-advertdfpconf],
div[data-insertion],
div[data-mini-ad-unit],
div[data-native-ad],
div[data-spotim-slot],
div[id^="_vdo_ads_player_ai_"],
div[id^="ad-div-"],
div[id^="ad-position-"],
div[id^="adngin-"],
div[id^="adrotate_widgets-"],
div[id^="ads250_250-widget-"],
div[id^="ads300_100-widget-"],
div[id^="ads300_250-widget-"],
div[id^="adspot-"],
div[id^="advads_ad_"],
div[id^="crt-"][style],
div[id^="div-ads-"],
div[id^="google_dfp_"],
div[id^="gpt_ad_"],
div[id^="lazyad-"],
div[id^="optidigital-adslot"],
div[id^="pa_sticky_ad_box_middle_"],
div[id^="rc-widget-"],
div[id^="sticky_ad_"],
div[id^="vuukle-ad-"],
div[recirculation-ad-container],
gpt-ad,
guj-ad,
hl-adsense,
img[src^="https://images.purevpnaffiliates.com"],
ps-connatix-module,
span[data-ez-ph-id],
span[id^="ezoic-pub-ad-placeholder-"],
topadblock,
zeus-ad,
[class^="tile-picker__CitrusBannerContainer-sc-"],
citrus-ad-wrapper,
[class^="s2nPlayer"],
div[id*="MarketGid"],
[onclick*="content.ad/"],
AMP-AD,
amp-ad,
amp-ad-custom,
amp-connatix-player,
amp-fx-flying-carpet,
a[data-obtrack^="http://paid.outbrain.com/network/redir?"],
a[data-oburl^="https://paid.outbrain.com/network/redir?"],
a[data-redirect^="https://paid.outbrain.com/network/redir?"],
a[data-url^="http://paid.outbrain.com/network/redir?"] + .author,
a[data-widget-outbrain-redirect^="http://paid.outbrain.com/network/redir?"],
a[onmousedown^="this.href='http://paid.outbrain.com/network/redir?"][target="_blank"],
a[onmousedown^="this.href='http://paid.outbrain.com/network/redir?"][target="_blank"] + .ob_source,
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"][target="_blank"] + .ob_source,
a[target="_blank"][onmousedown="this.href^='http://paid.outbrain.com/network/redir?"],
div[id^="taboola-stream-"],
display-ad-component,
div[id^="zergnet-widget"],
a[aria-label="Werbelink"],
[onclick*="window.open('http://deloplen.com/"],
[data-uri^="https://s3.amazonaws.com"],
[data-lnguri^="https://s3.amazonaws.com"],
[onclick*="postlnk.com"],
[class^="DisplayAd"],
div[class*="displayAdRight"],
[data-lnguri*="vipbox"],
[src^="https://aff1xstavka.com"],
[class^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]),
[id^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]),
div[id^="div-gpt-"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]),
.samBannerUnit, .samCodeUnit,
[src^="//dombnrs.com/"],
[src^="https://forum.picbaron.com/Banner"],
div[id][style^="position: fixed; inset: 0px; z-index: 2147483647; background: black"][style*="opacity: 0.01"],
div[class$="player-promo-col"],
div#spot-holder.spot-holder[style="display: block;"],
a[dontfo=""][style$="position: absolute; z-index: 2147483647;"],
[data-ad-module]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-width]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-adblockkey]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(html):not(.adsbygoogle),
[data-advadstrackid]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-manager-id]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
div[style^="z-index: 999999; background-image: url(\"data:image/gif;base64,"][style$="position: absolute;"],
a[onclick="openAuc();"],
div[style="position: fixed; display: block; width: 100%; height: 100%; inset: 0px; background-color: rgba(0, 0, 0, 0); z-index: 300000;"],
div[style^="position:fixed;inset:0px;z-index:2147483647;background:black;opacity:0.01"],
a[id][href="https://chpadblock.com/"][rel^="noopener noreferrer"],
a[id][href="https://toolkitspro.com"][rel^="noopener noreferrer"],
a[id][href="https://hamrocsit.com"][rel^="noopener noreferrer"],
iframe.lazyloaded[data-src^="https://rcm-fe.amazon-adsystem.com/"],
[style="position:absolute;top:0;left:0;width: 100%;height: 100%;z-index:2147483647"],
[style="top: 0px; left: 0px; width: 940px; height: 600px; position: absolute; z-index: 2147483647;"],
div[style="position: fixed;top: 0;left: 0;right: 0;bottom:0;z-index: 99999999;background: rgba(0,0,0,.6);"] { display: none !important; }

[data-ad-name],
[data-revive-zoneid],
[name^="google_ads_iframe"],
div[aria-label="Ads"],
div[data-ad-targeting],
div[data-google-query-id],
div[data-native_ad],
div[id^="ad_position_"],
div[id^="dfp-ad-"],
div[id^="ezoic-pub-ad-"],
div[id^="yandex_ad"],
ins.adsbygoogle,
div[id*="ScriptRoot"],
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"][target="_blank"],
.trc_related_container div[data-item-syndicated="true"],
amp-embed[type="taboola"],
[id^="google_ads_iframe"]:not(.rb-adbanner) { display: none !important; }</style><style type="text/css">@import url(https://fonts.googleapis.com/css?family=Open+Sans:300,400,600);</style><style type="text/css">#st-cmp-v2 .st-cmp-app {
  position: fixed;
  top: 0;
  left: 0;
  z-index: 9999999999;
  width: 100%;
  height: 100%;
}
#st-cmp-v2 .st-cmp-app * {
  box-sizing: border-box;
  font-family: "Open Sans";
  font-size: 13px;
}
#st-cmp-v2 .st-cmp-app .st-switch {
  height: unset;
}
#st-cmp-v2 .st-cmp-app .st-cmp-header-nav-buttons {
  display: none;
}
#st-cmp-v2 .st-cmp-app .st-cmp-footer-nav-buttons {
  display: inline-block;
}
#st-cmp-v2 .st-cmp-app .st-cmp-permanent-footer-nav-buttons {
  float: right;
}
#st-cmp-v2 .st-cmp-app .st-cmp-scroll-buttons {
  float: right;
}
#st-cmp-v2 .st-cmp-app .st-cmp-overlay {
  z-index: 1000000000;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0,0,0,0.3);
}
#st-cmp-v2 .st-cmp-app .st-layer {
  height: 100%;
}
#st-cmp-v2 .st-cmp-app .st-cmp-content {
  padding: 30px 40px;
  z-index: 1000000001;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 60%;
  height: 80%;
  background-color: #fff;
  border-radius: 4px;
}
#st-cmp-v2 .st-cmp-app .st-cmp-content * {
  list-style: disc;
}
#st-cmp-v2 .st-cmp-app .st-cmp-content ul {
  margin: 0px 0px;
}
#st-cmp-v2 .st-cmp-app .st-cmp-content a {
  color: #09cd18;
  text-decoration: none;
  font-size: 15px;
  cursor: pointer;
}
#st-cmp-v2 .st-cmp-app .st-cmp-content a:hover {
  color: #08b515;
}
#st-cmp-v2 .st-cmp-app .st-cmp-content p {
  font-weight: 100;
  font-size: 17px;
  margin-top: 0;
}
#st-cmp-v2 .st-cmp-app .st-cmp-content h1 {
  color: #09cd18;
  display: inline-block;
  font-size: 40px;
  font-weight: 100;
  letter-spacing: 1px;
  margin: 0 0 20px 0;
  margin-bottom: 10px;
  max-width: none;
  padding: 0 0;
  position: inherit;
  text-align: left;
  text-transform: uppercase;
  transform: none;
  word-spacing: 1px;
  width: fit-content;
}
#st-cmp-v2 .st-cmp-app .st-cmp-content h2 {
  line-height: 26px;
  margin: 20px 0 0 10px;
  font-size: 22px;
  font-weight: 600;
}
#st-cmp-v2 .st-cmp-app .st-cmp-content h3 {
  line-height: 18px;
  margin: 10px 0 5px 10px;
  font-size: 16px;
  font-weight: 600;
}
#st-cmp-v2 .st-cmp-app .st-cmp-content h4 {
  font-size: 16px;
  font-weight: 600;
  line-height: 20px;
  margin: 0 0 20px 10px;
  font-size: 14px;
  margin-bottom: 0px;
  color: inherit;
}
#st-cmp-v2 .st-cmp-app .st-cmp-content h5 {
  font-size: 14px;
  font-weight: normal;
  line-height: 14px;
  margin: 0 0 10px 0;
}
#st-cmp-v2 .st-cmp-app .st-cmp-content .header {
  display: inline-block;
  width: 100%;
}
#st-cmp-v2 .st-cmp-app .st-cmp-content .header .st-text {
  vertical-align: text-top;
}
#st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-selection-cards {
  padding: 0px 0px 10px 0px;
  background-color: #f8f8f8;
  overflow: scroll;
  max-height: 47vh;
}
#st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-selection-cards-full {
  max-height: 60.4vh;
}
#st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-disclaimer {
  padding: 0px 5px;
  overflow: scroll;
  height: 13vh;
  margin-top: 15px;
}
#st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-disclaimer p {
  font-size: 15px;
}
#st-cmp-v2 .st-cmp-app .st-cmp-settings {
  width: 86px;
  height: 24px;
  background-color: #09cd18;
  color: #fff;
  cursor: pointer;
  position: fixed;
  right: -7px;
  bottom: 55px;
  border-radius: 2px;
  line-height: 11px;
  box-shadow: 0 1px 4px 0 rgba(0,0,0,0.14);
}
#st-cmp-v2 .st-cmp-app .st-cmp-settings span {
  text-transform: uppercase;
  font-size: 12px;
  vertical-align: text-top;
  position: absolute;
  left: 10px;
  top: 6px;
}
#st-cmp-v2 .st-cmp-app .st-cmp-settings img {
  width: 17px;
  height: 17px;
  filter: invert(100%);
  position: absolute;
  left: 60px;
  top: 3px;
}
#st-cmp-v2 .st-cmp-app .st-cmp-settings:hover {
  background-color: #08b916;
}
#st-cmp-v2 .st-cmp-app-hidden {
  width: 0px !important;
  height: 0px !important;
}
@media (max-height: 1000px) {
  #st-cmp-v2 .st-cmp-app .st-cmp-content {
    width: 65%;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-selection-cards {
    max-height: 43vh;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-selection-cards-full {
    max-height: 58vh;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-disclaimer {
    height: 14.5vh;
  }
}
@media (max-height: 835px) {
  #st-cmp-v2 .st-cmp-app .st-cmp-content {
    width: 75%;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-selection-cards {
    max-height: 36.3vh;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-selection-cards-full {
    max-height: 54.9vh;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-disclaimer {
    height: 18vh;
  }
}
@media (max-height: 690px) {
  #st-cmp-v2 .st-cmp-app .st-cmp-content {
    width: 75%;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-selection-cards {
    max-height: 33vh;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-selection-cards-full {
    max-height: 49.3vh;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-disclaimer {
    height: 15.5vh;
  }
}
@media (max-height: 550px) {
  #st-cmp-v2 .st-cmp-app .st-cmp-content {
    width: 85%;
    height: 85%;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-selection-cards {
    max-height: 32.1vh;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-selection-cards-full {
    max-height: 48vh;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-disclaimer {
    height: 15vh;
  }
}
@media (max-height: 450px) {
  #st-cmp-v2 .st-cmp-app .st-cmp-content {
    width: 95%;
    height: 95%;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-selection-cards {
    max-height: 27vh;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-selection-cards-full {
    max-height: 38.3vh;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-disclaimer {
    height: 10vh;
  }
}
@media (max-width: 1300px) {
  #st-cmp-v2 .st-cmp-app .st-cmp-content {
    width: 75%;
    height: 80%;
  }
}
@media (max-width: 1200px) {
  #st-cmp-v2 .st-cmp-app .st-cmp-content {
    width: 80%;
    height: 80%;
  }
}
@media (max-width: 1100px) {
  #st-cmp-v2 .st-cmp-app .st-cmp-content h1 {
    font-size: 35px;
  }
}
@media (max-width: 1000px) {
  #st-cmp-v2 .st-cmp-app .st-cmp-content h1 {
    font-size: 30px;
  }
}
@media (max-width: 900px) {
  #st-cmp-v2 .st-cmp-app .st-cmp-content {
    width: 90%;
    height: 90%;
  }
}
@media (max-width: 850px) {
  #st-cmp-v2 .st-cmp-app .st-button .st-text {
    display: unset;
  }
}
@media only screen and (max-device-height: 950px) and (max-device-width: 700px) {
  #st-cmp-v2 .st-cmp-app {
    height: 65%;
    top: 35%;
    border-top-left-radius: 0px;
    border-top-right-raidus: 0px;
    border-top: 1px solid #ddd;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-overlay {
    width: 0%;
    height: 0%;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-full-header {
    margin-left: -15px;
    padding-left: 15px;
    margin-top: -15px;
    padding-top: 15px;
    width: calc(100% + 30px);
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-header-nav-buttons {
    display: block;
    margin-left: -3px;
    margin-top: -10px;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-header-nav-buttons .st-button-inner {
    min-width: 0px !important;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-footer-nav-buttons {
    display: none;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-permanent-footer-nav-buttons {
    float: none;
    background-color: #fff;
    display: flex;
    justify-st-cmp-content: space-around;
    position: absolute;
    width: 100%;
    left: 0px;
    bottom: 0px;
    padding: 10px 10px 20px 10px;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-permanent-footer-nav-buttons .st-button-inner {
    width: 28vw !important;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-scroll-buttons {
    display: none;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content {
    width: 100%;
    height: 100%;
    padding: 15px;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content h1 {
    font-size: 22px;
    letter-spacing: 0px;
    margin-bottom: 0px;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content h2 {
    font-size: 17px;
    margin-top: 10px;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content h3 {
    font-size: 15px;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content h4 {
    font-size: 13px;
    margin-top: 0px;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-disclaimer {
    height: 75%;
    margin-top: 0px;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-selection-cards {
    display: none;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-selection-cards-full {
    display: inherit;
    height: 75%;
    max-height: unset;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-selection-cards-full .st-cmp-item h4 {
    width: 190px;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-selection-cards-full .st-cmp-li-label-full {
    display: none;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-selection-cards-full .st-cmp-li-label-mobile {
    display: unset !important;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-selection-card {
    margin-top: 10px;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-selection-card .st-switch label {
    width: 230px;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-detailed-selection-card {
    margin-top: -10px;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-vendor-selection-card {
    margin: 0px;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-vendor-selection-card h3 {
    width: 170px;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-third-layer .st-cmp-selection-cards h2 {
    margin-bottom: 10px;
  }
}
@media only screen and (max-device-height: 700px) and (max-device-width: 700px) {
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-selection-cards {
    height: 0%;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-selection-cards-full {
    height: 75%;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-disclaimer {
    height: 75%;
  }
}
@media only screen and (max-device-width: 370px) {
  #st-cmp-v2 .st-cmp-app .st-cmp-content h1 {
    font-size: 20px;
    letter-spacing: -0.5px;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-selection-cards-full .st-cmp-item h4 {
    width: 145px;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-selection-card .st-switch label {
    width: 210px;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-vendor-selection-card h3 {
    width: 150px;
  }
}
@media only screen and (max-device-width: 350px) {
  #st-cmp-v2 .st-cmp-app .st-cmp-content h1 {
    font-size: 20px;
    letter-spacing: -0.5px;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-selection-cards-full .st-cmp-item h4 {
    width: 140px;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-selection-card .st-switch label {
    width: 180px;
  }
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-vendor-selection-card h3 {
    width: 140px;
  }
}
@media only screen and (max-device-width: 320px) {
  #st-cmp-v2 .st-cmp-app .st-cmp-content .st-cmp-vendor-selection-card h3 {
    width: 110px;
  }
}
</style><style type="text/css">#st-cmp-v2 .st-cmp-app.st-cmp-twitter-orange h1,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-orange .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-orange .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #ff6900;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-orange a {
  color: #ff6900;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-orange a:hover {
  color: #e65e00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-orange .st-button .st-button-inner {
  background: #ff6900;
  border-color: #ff6900;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-orange .st-button .st-button-inner:hover {
  background: #e65e00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-orange .st-button.ghost .st-button-inner {
  color: #ff6900;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-orange .st-button.ghost .st-button-inner:hover {
  background: none;
  color: #e65e00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-orange .st-switch .slider[data-checked] {
  background-color: #ff6900;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-orange .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-orange .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  border-right: 2px solid #ff6900;
  border-bottom: 2px solid #ff6900;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-orange .st-cmp-settings {
  background-color: #ff6900;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-orange .st-cmp-settings:hover {
  background-color: #ff781a;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-yellow h1,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-yellow .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-yellow .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #fcb900;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-yellow a {
  color: #fcb900;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-yellow a:hover {
  color: #e3a600;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-yellow .st-button .st-button-inner {
  background: #fcb900;
  border-color: #fcb900;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-yellow .st-button .st-button-inner:hover {
  background: #e3a600;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-yellow .st-button.ghost .st-button-inner {
  color: #fcb900;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-yellow .st-button.ghost .st-button-inner:hover {
  background: none;
  color: #e3a600;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-yellow .st-switch .slider[data-checked] {
  background-color: #fcb900;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-yellow .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-yellow .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  border-right: 2px solid #fcb900;
  border-bottom: 2px solid #fcb900;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-yellow .st-cmp-settings {
  background-color: #fcb900;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-yellow .st-cmp-settings:hover {
  background-color: #ffc117;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-light-green h1,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-light-green .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-light-green .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #7bdcb5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-light-green a {
  color: #7bdcb5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-light-green a:hover {
  color: #67d7aa;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-light-green .st-button .st-button-inner {
  background: #7bdcb5;
  border-color: #7bdcb5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-light-green .st-button .st-button-inner:hover {
  background: #67d7aa;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-light-green .st-button.ghost .st-button-inner {
  color: #7bdcb5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-light-green .st-button.ghost .st-button-inner:hover {
  background: none;
  color: #67d7aa;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-light-green .st-switch .slider[data-checked] {
  background-color: #7bdcb5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-light-green .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-light-green .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  border-right: 2px solid #7bdcb5;
  border-bottom: 2px solid #7bdcb5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-light-green .st-cmp-settings {
  background-color: #7bdcb5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-light-green .st-cmp-settings:hover {
  background-color: #60d5a6;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-green h1,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-green .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-green .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #00d084;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-green a {
  color: #00d084;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-green a:hover {
  color: #00b674;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-green .st-button .st-button-inner {
  background: #00d084;
  border-color: #00d084;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-green .st-button .st-button-inner:hover {
  background: #00b674;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-green .st-button.ghost .st-button-inner {
  color: #00d084;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-green .st-button.ghost .st-button-inner:hover {
  background: none;
  color: #00b674;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-green .st-switch .slider[data-checked] {
  background-color: #00d084;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-green .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-green .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  border-right: 2px solid #00d084;
  border-bottom: 2px solid #00d084;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-green .st-cmp-settings {
  background-color: #00d084;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-green .st-cmp-settings:hover {
  background-color: #0b7;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-light-blue h1,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-light-blue .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-light-blue .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #8ed1fc;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-light-blue a {
  color: #8ed1fc;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-light-blue a:hover {
  color: #75c7fb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-light-blue .st-button .st-button-inner {
  background: #8ed1fc;
  border-color: #8ed1fc;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-light-blue .st-button .st-button-inner:hover {
  background: #75c7fb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-light-blue .st-button.ghost .st-button-inner {
  color: #8ed1fc;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-light-blue .st-button.ghost .st-button-inner:hover {
  background: none;
  color: #75c7fb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-light-blue .st-switch .slider[data-checked] {
  background-color: #8ed1fc;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-light-blue .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-light-blue .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  border-right: 2px solid #8ed1fc;
  border-bottom: 2px solid #8ed1fc;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-light-blue .st-cmp-settings {
  background-color: #8ed1fc;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-light-blue .st-cmp-settings:hover {
  background-color: #68c1fb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-blue h1,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-blue .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-blue .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #0693e3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-blue a {
  color: #0693e3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-blue a:hover {
  color: #0583ca;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-blue .st-button .st-button-inner {
  background: #0693e3;
  border-color: #0693e3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-blue .st-button .st-button-inner:hover {
  background: #0583ca;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-blue .st-button.ghost .st-button-inner {
  color: #0693e3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-blue .st-button.ghost .st-button-inner:hover {
  background: none;
  color: #0583ca;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-blue .st-switch .slider[data-checked] {
  background-color: #0693e3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-blue .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-blue .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  border-right: 2px solid #0693e3;
  border-bottom: 2px solid #0693e3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-blue .st-cmp-settings {
  background-color: #0693e3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-blue .st-cmp-settings:hover {
  background-color: #0ca3f9;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-grey h1,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-grey .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-grey .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #abb8c3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-grey a {
  color: #abb8c3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-grey a:hover {
  color: #9cabb8;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-grey .st-button .st-button-inner {
  background: #abb8c3;
  border-color: #abb8c3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-grey .st-button .st-button-inner:hover {
  background: #9cabb8;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-grey .st-button.ghost .st-button-inner {
  color: #abb8c3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-grey .st-button.ghost .st-button-inner:hover {
  background: none;
  color: #9cabb8;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-grey .st-switch .slider[data-checked] {
  background-color: #abb8c3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-grey .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-grey .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  border-right: 2px solid #abb8c3;
  border-bottom: 2px solid #abb8c3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-grey .st-cmp-settings {
  background-color: #abb8c3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-grey .st-cmp-settings:hover {
  background-color: #b3bfc9;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-magenta h1,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-magenta .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-magenta .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #eb144c;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-magenta a {
  color: #eb144c;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-magenta a:hover {
  color: #d31244;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-magenta .st-button .st-button-inner {
  background: #eb144c;
  border-color: #eb144c;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-magenta .st-button .st-button-inner:hover {
  background: #d31244;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-magenta .st-button.ghost .st-button-inner {
  color: #eb144c;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-magenta .st-button.ghost .st-button-inner:hover {
  background: none;
  color: #d31244;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-magenta .st-switch .slider[data-checked] {
  background-color: #eb144c;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-magenta .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-magenta .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  border-right: 2px solid #eb144c;
  border-bottom: 2px solid #eb144c;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-magenta .st-cmp-settings {
  background-color: #eb144c;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-magenta .st-cmp-settings:hover {
  background-color: #ed2c5e;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-pink h1,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-pink .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-pink .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #f78da7;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-pink a {
  color: #f78da7;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-pink a:hover {
  color: #f57595;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-pink .st-button .st-button-inner {
  background: #f78da7;
  border-color: #f78da7;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-pink .st-button .st-button-inner:hover {
  background: #f57595;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-pink .st-button.ghost .st-button-inner {
  color: #f78da7;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-pink .st-button.ghost .st-button-inner:hover {
  background: none;
  color: #f57595;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-pink .st-switch .slider[data-checked] {
  background-color: #f78da7;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-pink .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-pink .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  border-right: 2px solid #f78da7;
  border-bottom: 2px solid #f78da7;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-pink .st-cmp-settings {
  background-color: #f78da7;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-pink .st-cmp-settings:hover {
  background-color: #f898b0;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-purple h1,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-purple .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-purple .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #9900ef;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-purple a {
  color: #9900ef;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-purple a:hover {
  color: #8900d5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-purple .st-button .st-button-inner {
  background: #9900ef;
  border-color: #9900ef;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-purple .st-button .st-button-inner:hover {
  background: #8900d5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-purple .st-button.ghost .st-button-inner {
  color: #9900ef;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-purple .st-button.ghost .st-button-inner:hover {
  background: none;
  color: #8900d5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-purple .st-switch .slider[data-checked] {
  background-color: #9900ef;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-purple .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-purple .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  border-right: 2px solid #9900ef;
  border-bottom: 2px solid #9900ef;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-purple .st-cmp-settings {
  background-color: #9900ef;
}
#st-cmp-v2 .st-cmp-app.st-cmp-twitter-purple .st-cmp-settings:hover {
  background-color: #a70bff;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-red h1,
#st-cmp-v2 .st-cmp-app.st-cmp-github-red .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active,
#st-cmp-v2 .st-cmp-app.st-cmp-github-red .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #b80000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-red a {
  color: #b80000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-red a:hover {
  color: #9f0000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-red .st-button .st-button-inner {
  background: #b80000;
  border-color: #b80000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-red .st-button .st-button-inner:hover {
  background: #9f0000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-red .st-button.ghost .st-button-inner {
  color: #b80000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-red .st-button.ghost .st-button-inner:hover {
  background: none;
  color: #9f0000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-red .st-switch .slider[data-checked] {
  background-color: #b80000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-red .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-github-red .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  border-right: 2px solid #b80000;
  border-bottom: 2px solid #b80000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-red .st-cmp-settings {
  background-color: #b80000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-red .st-cmp-settings:hover {
  background-color: #d90000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-orange h1,
#st-cmp-v2 .st-cmp-app.st-cmp-github-orange .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active,
#st-cmp-v2 .st-cmp-app.st-cmp-github-orange .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #db3e00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-orange a {
  color: #db3e00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-orange a:hover {
  color: #c23700;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-orange .st-button .st-button-inner {
  background: #db3e00;
  border-color: #db3e00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-orange .st-button .st-button-inner:hover {
  background: #c23700;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-orange .st-button.ghost .st-button-inner {
  color: #db3e00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-orange .st-button.ghost .st-button-inner:hover {
  background: none;
  color: #c23700;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-orange .st-switch .slider[data-checked] {
  background-color: #db3e00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-orange .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-github-orange .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  border-right: 2px solid #db3e00;
  border-bottom: 2px solid #db3e00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-orange .st-cmp-settings {
  background-color: #db3e00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-orange .st-cmp-settings:hover {
  background-color: #f84600;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-yellow h1,
#st-cmp-v2 .st-cmp-app.st-cmp-github-yellow .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active,
#st-cmp-v2 .st-cmp-app.st-cmp-github-yellow .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #fccb00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-yellow a {
  color: #fccb00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-yellow a:hover {
  color: #e3b600;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-yellow .st-button .st-button-inner {
  background: #fccb00;
  border-color: #fccb00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-yellow .st-button .st-button-inner:hover {
  background: #e3b600;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-yellow .st-button.ghost .st-button-inner {
  color: #fccb00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-yellow .st-button.ghost .st-button-inner:hover {
  background: none;
  color: #e3b600;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-yellow .st-switch .slider[data-checked] {
  background-color: #fccb00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-yellow .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-github-yellow .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  border-right: 2px solid #fccb00;
  border-bottom: 2px solid #fccb00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-yellow .st-cmp-settings {
  background-color: #fccb00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-yellow .st-cmp-settings:hover {
  background-color: #ffd217;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-green h1,
#st-cmp-v2 .st-cmp-app.st-cmp-github-green .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active,
#st-cmp-v2 .st-cmp-app.st-cmp-github-green .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #008b02;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-green a {
  color: #008b02;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-green a:hover {
  color: #007202;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-green .st-button .st-button-inner {
  background: #008b02;
  border-color: #008b02;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-green .st-button .st-button-inner:hover {
  background: #007202;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-green .st-button.ghost .st-button-inner {
  color: #008b02;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-green .st-button.ghost .st-button-inner:hover {
  background: none;
  color: #007202;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-green .st-switch .slider[data-checked] {
  background-color: #008b02;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-green .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-github-green .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  border-right: 2px solid #008b02;
  border-bottom: 2px solid #008b02;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-green .st-cmp-settings {
  background-color: #008b02;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-green .st-cmp-settings:hover {
  background-color: #00b003;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-dark-green h1,
#st-cmp-v2 .st-cmp-app.st-cmp-github-dark-green .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active,
#st-cmp-v2 .st-cmp-app.st-cmp-github-dark-green .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #006b76;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-dark-green a {
  color: #006b76;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-dark-green a:hover {
  color: #00545d;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-dark-green .st-button .st-button-inner {
  background: #006b76;
  border-color: #006b76;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-dark-green .st-button .st-button-inner:hover {
  background: #00545d;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-dark-green .st-button.ghost .st-button-inner {
  color: #006b76;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-dark-green .st-button.ghost .st-button-inner:hover {
  background: none;
  color: #00545d;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-dark-green .st-switch .slider[data-checked] {
  background-color: #006b76;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-dark-green .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-github-dark-green .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  border-right: 2px solid #006b76;
  border-bottom: 2px solid #006b76;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-dark-green .st-cmp-settings {
  background-color: #006b76;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-dark-green .st-cmp-settings:hover {
  background-color: #008f9d;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-light-blue h1,
#st-cmp-v2 .st-cmp-app.st-cmp-github-light-blue .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active,
#st-cmp-v2 .st-cmp-app.st-cmp-github-light-blue .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #1273de;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-light-blue a {
  color: #1273de;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-light-blue a:hover {
  color: #1067c6;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-light-blue .st-button .st-button-inner {
  background: #1273de;
  border-color: #1273de;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-light-blue .st-button .st-button-inner:hover {
  background: #1067c6;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-light-blue .st-button.ghost .st-button-inner {
  color: #1273de;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-light-blue .st-button.ghost .st-button-inner:hover {
  background: none;
  color: #1067c6;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-light-blue .st-switch .slider[data-checked] {
  background-color: #1273de;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-light-blue .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-github-light-blue .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  border-right: 2px solid #1273de;
  border-bottom: 2px solid #1273de;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-light-blue .st-cmp-settings {
  background-color: #1273de;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-light-blue .st-cmp-settings:hover {
  background-color: #1e80ed;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-blue h1,
#st-cmp-v2 .st-cmp-app.st-cmp-github-blue .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active,
#st-cmp-v2 .st-cmp-app.st-cmp-github-blue .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #004dcf;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-blue a {
  color: #004dcf;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-blue a:hover {
  color: #0044b5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-blue .st-button .st-button-inner {
  background: #004dcf;
  border-color: #004dcf;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-blue .st-button .st-button-inner:hover {
  background: #0044b5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-blue .st-button.ghost .st-button-inner {
  color: #004dcf;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-blue .st-button.ghost .st-button-inner:hover {
  background: none;
  color: #0044b5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-blue .st-switch .slider[data-checked] {
  background-color: #004dcf;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-blue .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-github-blue .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  border-right: 2px solid #004dcf;
  border-bottom: 2px solid #004dcf;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-blue .st-cmp-settings {
  background-color: #004dcf;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-blue .st-cmp-settings:hover {
  background-color: #0058ed;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-purple h1,
#st-cmp-v2 .st-cmp-app.st-cmp-github-purple .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active,
#st-cmp-v2 .st-cmp-app.st-cmp-github-purple .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #5300eb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-purple a {
  color: #5300eb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-purple a:hover {
  color: #4a00d2;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-purple .st-button .st-button-inner {
  background: #5300eb;
  border-color: #5300eb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-purple .st-button .st-button-inner:hover {
  background: #4a00d2;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-purple .st-button.ghost .st-button-inner {
  color: #5300eb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-purple .st-button.ghost .st-button-inner:hover {
  background: none;
  color: #4a00d2;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-purple .st-switch .slider[data-checked] {
  background-color: #5300eb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-purple .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-github-purple .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  border-right: 2px solid #5300eb;
  border-bottom: 2px solid #5300eb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-purple .st-cmp-settings {
  background-color: #5300eb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-purple .st-cmp-settings:hover {
  background-color: #5f07ff;
}
#st-cmp-v2 .st-cmp-app.st-cmp-black h1,
#st-cmp-v2 .st-cmp-app.st-cmp-black .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active,
#st-cmp-v2 .st-cmp-app.st-cmp-black .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-black a {
  color: #000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-black a:hover {
  color: #000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-black .st-button .st-button-inner {
  background: #000;
  border-color: #000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-black .st-button .st-button-inner:hover {
  background: #000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-black .st-button.ghost .st-button-inner {
  color: #000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-black .st-button.ghost .st-button-inner:hover {
  background: none;
  color: #000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-black .st-switch .slider[data-checked] {
  background-color: #000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-black .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-black .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  border-right: 2px solid #000;
  border-bottom: 2px solid #000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-black .st-cmp-settings {
  background-color: #000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-black .st-cmp-settings:hover {
  background-color: #1a1a1a;
}
#st-cmp-v2 .st-cmp-app.st-cmp-red h1,
#st-cmp-v2 .st-cmp-app.st-cmp-red .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active,
#st-cmp-v2 .st-cmp-app.st-cmp-red .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #e31010;
}
#st-cmp-v2 .st-cmp-app.st-cmp-red a {
  color: #e31010;
}
#st-cmp-v2 .st-cmp-app.st-cmp-red a:hover {
  color: #cb0e0e;
}
#st-cmp-v2 .st-cmp-app.st-cmp-red .st-button .st-button-inner {
  background: #e31010;
  border-color: #e31010;
}
#st-cmp-v2 .st-cmp-app.st-cmp-red .st-button .st-button-inner:hover {
  background: #cb0e0e;
}
#st-cmp-v2 .st-cmp-app.st-cmp-red .st-button.ghost .st-button-inner {
  color: #e31010;
}
#st-cmp-v2 .st-cmp-app.st-cmp-red .st-button.ghost .st-button-inner:hover {
  background: none;
  color: #cb0e0e;
}
#st-cmp-v2 .st-cmp-app.st-cmp-red .st-switch .slider[data-checked] {
  background-color: #e31010;
}
#st-cmp-v2 .st-cmp-app.st-cmp-red .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-red .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  border-right: 2px solid #e31010;
  border-bottom: 2px solid #e31010;
}
#st-cmp-v2 .st-cmp-app.st-cmp-red .st-cmp-settings {
  background-color: #e31010;
}
#st-cmp-v2 .st-cmp-app.st-cmp-red .st-cmp-settings:hover {
  background-color: #ef1f1f;
}
#st-cmp-v2 .st-cmp-app.st-cmp-white h1,
#st-cmp-v2 .st-cmp-app.st-cmp-white .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active,
#st-cmp-v2 .st-cmp-app.st-cmp-white .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #fff;
}
#st-cmp-v2 .st-cmp-app.st-cmp-white a {
  color: #fff;
}
#st-cmp-v2 .st-cmp-app.st-cmp-white a:hover {
  color: #f2f2f2;
}
#st-cmp-v2 .st-cmp-app.st-cmp-white .st-button .st-button-inner {
  background: #fff;
  border-color: #fff;
}
#st-cmp-v2 .st-cmp-app.st-cmp-white .st-button .st-button-inner:hover {
  background: #f2f2f2;
}
#st-cmp-v2 .st-cmp-app.st-cmp-white .st-button.ghost .st-button-inner {
  color: #fff;
}
#st-cmp-v2 .st-cmp-app.st-cmp-white .st-button.ghost .st-button-inner:hover {
  background: none;
  color: #f2f2f2;
}
#st-cmp-v2 .st-cmp-app.st-cmp-white .st-switch .slider[data-checked] {
  background-color: #fff;
}
#st-cmp-v2 .st-cmp-app.st-cmp-white .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-white .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  border-right: 2px solid #fff;
  border-bottom: 2px solid #fff;
}
#st-cmp-v2 .st-cmp-app.st-cmp-white .st-cmp-settings {
  background-color: #fff;
  color: #000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-white .st-cmp-settings img {
  filter: invert(0%);
}
#st-cmp-v2 .st-cmp-app.st-cmp-white .st-cmp-settings:hover {
  background-color: #e6e6e6;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-red h1,
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-red .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active,
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-red .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #eb9694;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-red a {
  color: #eb9694;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-red a:hover {
  color: #e7817f;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-red .st-button .st-button-inner {
  background: #eb9694;
  border-color: #eb9694;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-red .st-button .st-button-inner:hover {
  background: #e7817f;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-red .st-button.ghost .st-button-inner {
  color: #eb9694;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-red .st-button.ghost .st-button-inner:hover {
  background: none;
  color: #e7817f;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-red .st-switch .slider[data-checked] {
  background-color: #eb9694;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-red .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-red .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  border-right: 2px solid #eb9694;
  border-bottom: 2px solid #eb9694;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-red .st-cmp-settings {
  background-color: #eb9694;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-red .st-cmp-settings:hover {
  background-color: #eda19f;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-orange h1,
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-orange .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active,
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-orange .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #fad0c3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-orange a {
  color: #fad0c3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-orange a:hover {
  color: #f8beab;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-orange .st-button .st-button-inner {
  background: #fad0c3;
  border-color: #fad0c3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-orange .st-button .st-button-inner:hover {
  background: #f8beab;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-orange .st-button.ghost .st-button-inner {
  color: #fad0c3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-orange .st-button.ghost .st-button-inner:hover {
  background: none;
  color: #f8beab;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-orange .st-switch .slider[data-checked] {
  background-color: #fad0c3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-orange .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-orange .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  border-right: 2px solid #fad0c3;
  border-bottom: 2px solid #fad0c3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-orange .st-cmp-settings {
  background-color: #fad0c3;
  color: #000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-orange .st-cmp-settings img {
  filter: invert(0%);
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-orange .st-cmp-settings:hover {
  background-color: #fbd5c9;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-yellow h1,
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-yellow .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active,
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-yellow .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #fef3bd;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-yellow a {
  color: #fef3bd;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-yellow a:hover {
  color: #feeea4;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-yellow .st-button .st-button-inner {
  background: #fef3bd;
  border-color: #fef3bd;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-yellow .st-button .st-button-inner:hover {
  background: #feeea4;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-yellow .st-button.ghost .st-button-inner {
  color: #fef3bd;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-yellow .st-button.ghost .st-button-inner:hover {
  background: none;
  color: #feeea4;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-yellow .st-switch .slider[data-checked] {
  background-color: #fef3bd;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-yellow .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-yellow .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  border-right: 2px solid #fef3bd;
  border-bottom: 2px solid #fef3bd;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-yellow .st-cmp-settings {
  background-color: #fef3bd;
  color: #000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-yellow .st-cmp-settings img {
  filter: invert(0%);
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-yellow .st-cmp-settings:hover {
  background-color: #fdeb91;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-green h1,
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-green .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active,
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-green .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #c1e1c5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-green a {
  color: #c1e1c5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-green a:hover {
  color: #b0d9b5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-green .st-button .st-button-inner {
  background: #c1e1c5;
  border-color: #c1e1c5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-green .st-button .st-button-inner:hover {
  background: #b0d9b5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-green .st-button.ghost .st-button-inner {
  color: #c1e1c5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-green .st-button.ghost .st-button-inner:hover {
  background: none;
  color: #b0d9b5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-green .st-switch .slider[data-checked] {
  background-color: #c1e1c5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-green .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-green .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  border-right: 2px solid #c1e1c5;
  border-bottom: 2px solid #c1e1c5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-green .st-cmp-settings {
  background-color: #c1e1c5;
  color: #000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-green .st-cmp-settings img {
  filter: invert(0%);
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-green .st-cmp-settings:hover {
  background-color: #c7e4cb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-dark-green h1,
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-dark-green .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active,
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-dark-green .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #bedadc;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-dark-green a {
  color: #bedadc;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-dark-green a:hover {
  color: #add1d3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-dark-green .st-button .st-button-inner {
  background: #bedadc;
  border-color: #bedadc;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-dark-green .st-button .st-button-inner:hover {
  background: #add1d3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-dark-green .st-button.ghost .st-button-inner {
  color: #bedadc;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-dark-green .st-button.ghost .st-button-inner:hover {
  background: none;
  color: #add1d3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-dark-green .st-switch .slider[data-checked] {
  background-color: #bedadc;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-dark-green .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-dark-green .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  border-right: 2px solid #bedadc;
  border-bottom: 2px solid #bedadc;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-dark-green .st-cmp-settings {
  background-color: #bedadc;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-dark-green .st-cmp-settings:hover {
  background-color: #c4dee0;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-light-blue h1,
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-light-blue .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active,
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-light-blue .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #c4def6;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-light-blue a {
  color: #c4def6;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-light-blue a:hover {
  color: #aed2f3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-light-blue .st-button .st-button-inner {
  background: #c4def6;
  border-color: #c4def6;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-light-blue .st-button .st-button-inner:hover {
  background: #aed2f3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-light-blue .st-button.ghost .st-button-inner {
  color: #c4def6;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-light-blue .st-button.ghost .st-button-inner:hover {
  background: none;
  color: #aed2f3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-light-blue .st-switch .slider[data-checked] {
  background-color: #c4def6;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-light-blue .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-light-blue .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  border-right: 2px solid #c4def6;
  border-bottom: 2px solid #c4def6;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-light-blue .st-cmp-settings {
  background-color: #c4def6;
  color: #000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-light-blue .st-cmp-settings img {
  filter: invert(0%);
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-light-blue .st-cmp-settings:hover {
  background-color: #cae1f7;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-blue h1,
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-blue .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active,
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-blue .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #bed3f3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-blue a {
  color: #bed3f3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-blue a:hover {
  color: #a8c4ef;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-blue .st-button .st-button-inner {
  background: #bed3f3;
  border-color: #bed3f3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-blue .st-button .st-button-inner:hover {
  background: #a8c4ef;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-blue .st-button.ghost .st-button-inner {
  color: #bed3f3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-blue .st-button.ghost .st-button-inner:hover {
  background: none;
  color: #a8c4ef;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-blue .st-switch .slider[data-checked] {
  background-color: #bed3f3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-blue .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-blue .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  border-right: 2px solid #bed3f3;
  border-bottom: 2px solid #bed3f3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-blue .st-cmp-settings {
  background-color: #bed3f3;
  color: #000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-blue .st-cmp-settings img {
  filter: invert(0%);
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-blue .st-cmp-settings:hover {
  background-color: #c5d7f4;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-purple h1,
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-purple .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active,
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-purple .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #d4c4fb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-purple a {
  color: #d4c4fb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-purple a:hover {
  color: #c3acf9;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-purple .st-button .st-button-inner {
  background: #d4c4fb;
  border-color: #d4c4fb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-purple .st-button .st-button-inner:hover {
  background: #c3acf9;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-purple .st-button.ghost .st-button-inner {
  color: #d4c4fb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-purple .st-button.ghost .st-button-inner:hover {
  background: none;
  color: #c3acf9;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-purple .st-switch .slider[data-checked] {
  background-color: #d4c4fb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-purple .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-purple .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  border-right: 2px solid #d4c4fb;
  border-bottom: 2px solid #d4c4fb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-purple .st-cmp-settings {
  background-color: #d4c4fb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-github-white-purple .st-cmp-settings:hover {
  background-color: #d8cafb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-red .st-cmp-content {
  background-color: #e31010;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-red .st-cmp-content .st-cmp-selection-cards {
  background-color: #d50f0f;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-red .st-cmp-content .st-cmp-item {
  background-color: #c60e0e;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-red .st-cmp-content .st-cmp-body {
  background-color: #d50f0f;
  border-color: #b80d0d;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-red .st-cmp-content .st-cmp-header {
  background-color: #c60e0e;
  border-color: #b80d0d;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-red .st-switch .slider {
  background-color: #9c0b0b;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-red .st-switch .slider:before {
  background-color: #e31010;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-red .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-background-red .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #e31010;
  border-color: #6c0808;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-red .st-button .st-button-inner {
  color: #e31010;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-black .st-cmp-content {
  background-color: #000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-black .st-cmp-content .st-cmp-selection-cards {
  background-color: #101010;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-black .st-cmp-content .st-cmp-item {
  background-color: #171717;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-black .st-cmp-content .st-cmp-body {
  background-color: #101010;
  border-color: #232323;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-black .st-cmp-content .st-cmp-header {
  background-color: #171717;
  border-color: #232323;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-black .st-switch .slider {
  background-color: #555;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-black .st-switch .slider:before {
  background-color: #000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-black .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-background-black .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #000;
  border-color: #777;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-black .st-button .st-button-inner {
  color: #000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-st-green .st-cmp-content {
  background-color: #09cd18;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-st-green .st-cmp-content .st-cmp-selection-cards {
  background-color: #08be16;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-st-green .st-cmp-content .st-cmp-item {
  background-color: #08b015;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-st-green .st-cmp-content .st-cmp-body {
  background-color: #08be16;
  border-color: #07a113;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-st-green .st-cmp-content .st-cmp-header {
  background-color: #08b015;
  border-color: #07a113;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-st-green .st-switch .slider {
  background-color: #06840f;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-st-green .st-switch .slider:before {
  background-color: #09cd18;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-st-green .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-background-st-green .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #09cd18;
  border-color: #04530a;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-st-green .st-button .st-button-inner {
  color: #09cd18;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-orange .st-cmp-content {
  background-color: #ff6900;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-orange .st-cmp-content .st-cmp-selection-cards {
  background-color: #f06300;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-orange .st-cmp-content .st-cmp-item {
  background-color: #e05c00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-orange .st-cmp-content .st-cmp-body {
  background-color: #f06300;
  border-color: #d15600;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-orange .st-cmp-content .st-cmp-header {
  background-color: #e05c00;
  border-color: #d15600;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-orange .st-switch .slider {
  background-color: #b34900;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-orange .st-switch .slider:before {
  background-color: #ff6900;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-orange .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-orange .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #ff6900;
  border-color: #803500;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-orange .st-button .st-button-inner {
  color: #ff6900;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-yellow .st-cmp-content {
  background-color: #fcb900;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-yellow .st-cmp-content .st-cmp-selection-cards {
  background-color: #edae00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-yellow .st-cmp-content .st-cmp-item {
  background-color: #dda300;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-yellow .st-cmp-content .st-cmp-body {
  background-color: #edae00;
  border-color: #ce9700;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-yellow .st-cmp-content .st-cmp-header {
  background-color: #dda300;
  border-color: #ce9700;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-yellow .st-switch .slider {
  background-color: #b08100;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-yellow .st-switch .slider:before {
  background-color: #fcb900;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-yellow .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-yellow .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #fcb900;
  border-color: #7d5b00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-yellow .st-button .st-button-inner {
  color: #fcb900;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-light-green .st-cmp-content {
  background-color: #7bdcb5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-light-green .st-cmp-content .st-cmp-selection-cards {
  background-color: #6fd9ae;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-light-green .st-cmp-content .st-cmp-item {
  background-color: #63d6a7;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-light-green .st-cmp-content .st-cmp-body {
  background-color: #6fd9ae;
  border-color: #57d2a1;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-light-green .st-cmp-content .st-cmp-header {
  background-color: #63d6a7;
  border-color: #57d2a1;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-light-green .st-switch .slider {
  background-color: #3fcc93;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-light-green .st-switch .slider:before {
  background-color: #7bdcb5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-light-green .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-light-green .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #7bdcb5;
  border-color: #2daa78;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-light-green .st-button .st-button-inner {
  color: #7bdcb5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-green .st-cmp-content {
  background-color: #00d084;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-green .st-cmp-content .st-cmp-selection-cards {
  background-color: #00c17a;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-green .st-cmp-content .st-cmp-item {
  background-color: #00b171;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-green .st-cmp-content .st-cmp-body {
  background-color: #00c17a;
  border-color: #00a267;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-green .st-cmp-content .st-cmp-header {
  background-color: #00b171;
  border-color: #00a267;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-green .st-switch .slider {
  background-color: #008453;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-green .st-switch .slider:before {
  background-color: #00d084;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-green .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-green .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #00d084;
  border-color: #005033;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-green .st-button .st-button-inner {
  color: #00d084;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-light-blue .st-cmp-content {
  background-color: #8ed1fc;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-light-blue .st-cmp-content .st-cmp-selection-cards {
  background-color: #7fcbfc;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-light-blue .st-cmp-content .st-cmp-item {
  background-color: #70c5fb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-light-blue .st-cmp-content .st-cmp-body {
  background-color: #7fcbfc;
  border-color: #61bffb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-light-blue .st-cmp-content .st-cmp-header {
  background-color: #70c5fb;
  border-color: #61bffb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-light-blue .st-switch .slider {
  background-color: #43b3fa;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-light-blue .st-switch .slider:before {
  background-color: #8ed1fc;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-light-blue .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-light-blue .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #8ed1fc;
  border-color: #129ef9;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-light-blue .st-button .st-button-inner {
  color: #8ed1fc;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-blue .st-cmp-content {
  background-color: #0693e3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-blue .st-cmp-content .st-cmp-selection-cards {
  background-color: #0689d4;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-blue .st-cmp-content .st-cmp-item {
  background-color: #0580c5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-blue .st-cmp-content .st-cmp-body {
  background-color: #0689d4;
  border-color: #0576b6;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-blue .st-cmp-content .st-cmp-header {
  background-color: #0580c5;
  border-color: #0576b6;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-blue .st-switch .slider {
  background-color: #046398;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-blue .st-switch .slider:before {
  background-color: #0693e3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-blue .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-blue .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #0693e3;
  border-color: #034367;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-blue .st-button .st-button-inner {
  color: #0693e3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-grey .st-cmp-content {
  background-color: #abb8c3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-grey .st-cmp-content .st-cmp-selection-cards {
  background-color: #a2b0bd;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-grey .st-cmp-content .st-cmp-item {
  background-color: #99a9b6;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-grey .st-cmp-content .st-cmp-body {
  background-color: #a2b0bd;
  border-color: #90a1b0;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-grey .st-cmp-content .st-cmp-header {
  background-color: #99a9b6;
  border-color: #90a1b0;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-grey .st-switch .slider {
  background-color: #7e92a3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-grey .st-switch .slider:before {
  background-color: #abb8c3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-grey .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-grey .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #abb8c3;
  border-color: #63798b;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-grey .st-button .st-button-inner {
  color: #abb8c3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-magenta .st-cmp-content {
  background-color: #eb144c;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-magenta .st-cmp-content .st-cmp-selection-cards {
  background-color: #dd1347;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-magenta .st-cmp-content .st-cmp-item {
  background-color: #cf1243;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-magenta .st-cmp-content .st-cmp-body {
  background-color: #dd1347;
  border-color: #c1103e;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-magenta .st-cmp-content .st-cmp-header {
  background-color: #cf1243;
  border-color: #c1103e;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-magenta .st-switch .slider {
  background-color: #a40e35;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-magenta .st-switch .slider:before {
  background-color: #eb144c;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-magenta .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-magenta .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #eb144c;
  border-color: #760a26;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-magenta .st-button .st-button-inner {
  color: #eb144c;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-pink .st-cmp-content {
  background-color: #f78da7;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-pink .st-cmp-content .st-cmp-selection-cards {
  background-color: #f67f9c;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-pink .st-cmp-content .st-cmp-item {
  background-color: #f57091;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-pink .st-cmp-content .st-cmp-body {
  background-color: #f67f9c;
  border-color: #f46286;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-pink .st-cmp-content .st-cmp-header {
  background-color: #f57091;
  border-color: #f46286;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-pink .st-switch .slider {
  background-color: #f24670;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-pink .st-switch .slider:before {
  background-color: #f78da7;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-pink .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-pink .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #f78da7;
  border-color: #ef164b;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-pink .st-button .st-button-inner {
  color: #f78da7;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-purple .st-cmp-content {
  background-color: #9900ef;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-purple .st-cmp-content .st-cmp-selection-cards {
  background-color: #8f00e0;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-purple .st-cmp-content .st-cmp-item {
  background-color: #8500d0;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-purple .st-cmp-content .st-cmp-body {
  background-color: #8f00e0;
  border-color: #7c00c1;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-purple .st-cmp-content .st-cmp-header {
  background-color: #8500d0;
  border-color: #7c00c1;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-purple .st-switch .slider {
  background-color: #6800a3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-purple .st-switch .slider:before {
  background-color: #9900ef;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-purple .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-purple .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #9900ef;
  border-color: #47006f;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-twitter-purple .st-button .st-button-inner {
  color: #9900ef;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-red .st-cmp-content {
  background-color: #b80000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-red .st-cmp-content .st-cmp-selection-cards {
  background-color: #a90000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-red .st-cmp-content .st-cmp-item {
  background-color: #900;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-red .st-cmp-content .st-cmp-body {
  background-color: #a90000;
  border-color: #8a0000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-red .st-cmp-content .st-cmp-header {
  background-color: #900;
  border-color: #8a0000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-red .st-switch .slider {
  background-color: #6c0000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-red .st-switch .slider:before {
  background-color: #b80000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-red .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-red .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #b80000;
  border-color: #390000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-red .st-button .st-button-inner {
  color: #b80000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-red .st-cmp-content {
  background-color: #eb9694;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-red .st-cmp-content .st-cmp-selection-cards {
  background-color: #e98987;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-red .st-cmp-content .st-cmp-item {
  background-color: #e67d7a;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-red .st-cmp-content .st-cmp-body {
  background-color: #e98987;
  border-color: #e4706d;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-red .st-cmp-content .st-cmp-header {
  background-color: #e67d7a;
  border-color: #e4706d;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-red .st-switch .slider {
  background-color: #df5754;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-red .st-switch .slider:before {
  background-color: #eb9694;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-red .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-red .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #eb9694;
  border-color: #d72d29;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-red .st-button .st-button-inner {
  color: #eb9694;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-orange .st-cmp-content {
  background-color: #db3e00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-orange .st-cmp-content .st-cmp-selection-cards {
  background-color: #cc3a00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-orange .st-cmp-content .st-cmp-item {
  background-color: #bc3500;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-orange .st-cmp-content .st-cmp-body {
  background-color: #cc3a00;
  border-color: #ad3100;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-orange .st-cmp-content .st-cmp-header {
  background-color: #bc3500;
  border-color: #ad3100;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-orange .st-switch .slider {
  background-color: #8e2800;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-orange .st-switch .slider:before {
  background-color: #db3e00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-orange .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-orange .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #db3e00;
  border-color: #5b1a00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-orange .st-button .st-button-inner {
  color: #db3e00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-orange .st-cmp-content {
  background-color: #fad0c3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-orange .st-cmp-content .st-cmp-selection-cards {
  background-color: #f9c5b5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-orange .st-cmp-content .st-cmp-item {
  background-color: #f8baa7;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-orange .st-cmp-content .st-cmp-body {
  background-color: #f9c5b5;
  border-color: #f6af99;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-orange .st-cmp-content .st-cmp-header {
  background-color: #f8baa7;
  border-color: #f6af99;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-orange .st-switch .slider {
  background-color: #f4997c;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-orange .st-switch .slider:before {
  background-color: #fad0c3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-orange .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-orange .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #fad0c3;
  border-color: #f0744d;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-orange .st-button .st-button-inner {
  color: #fad0c3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-yellow .st-cmp-content {
  background-color: #fccb00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-yellow .st-cmp-content .st-cmp-selection-cards {
  background-color: #edbf00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-yellow .st-cmp-content .st-cmp-item {
  background-color: #ddb200;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-yellow .st-cmp-content .st-cmp-body {
  background-color: #edbf00;
  border-color: #cea600;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-yellow .st-cmp-content .st-cmp-header {
  background-color: #ddb200;
  border-color: #cea600;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-yellow .st-switch .slider {
  background-color: #b08d00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-yellow .st-switch .slider:before {
  background-color: #fccb00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-yellow .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-yellow .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #fccb00;
  border-color: #7d6400;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-yellow .st-button .st-button-inner {
  color: #fccb00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-yellow .st-cmp-content {
  background-color: #fef3bd;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-yellow .st-cmp-content .st-cmp-selection-cards {
  background-color: #fef0ae;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-yellow .st-cmp-content .st-cmp-item {
  background-color: #feee9f;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-yellow .st-cmp-content .st-cmp-body {
  background-color: #fef0ae;
  border-color: #fdeb90;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-yellow .st-cmp-content .st-cmp-header {
  background-color: #feee9f;
  border-color: #fdeb90;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-yellow .st-switch .slider {
  background-color: #fde572;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-yellow .st-switch .slider:before {
  background-color: #fef3bd;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-yellow .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-yellow .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #fef3bd;
  border-color: #fcdc3f;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-yellow .st-button .st-button-inner {
  color: #fef3bd;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-green .st-cmp-content {
  background-color: #008b02;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-green .st-cmp-content .st-cmp-selection-cards {
  background-color: #007c02;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-green .st-cmp-content .st-cmp-item {
  background-color: #006c02;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-green .st-cmp-content .st-cmp-body {
  background-color: #007c02;
  border-color: #005d01;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-green .st-cmp-content .st-cmp-header {
  background-color: #006c02;
  border-color: #005d01;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-green .st-switch .slider {
  background-color: #003f01;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-green .st-switch .slider:before {
  background-color: #008b02;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-green .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-green .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #008b02;
  border-color: #000b00;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-green .st-button .st-button-inner {
  color: #008b02;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-green .st-cmp-content {
  background-color: #c1e1c5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-green .st-cmp-content .st-cmp-selection-cards {
  background-color: #b7dcbb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-green .st-cmp-content .st-cmp-item {
  background-color: #acd7b2;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-green .st-cmp-content .st-cmp-body {
  background-color: #b7dcbb;
  border-color: #a2d2a8;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-green .st-cmp-content .st-cmp-header {
  background-color: #acd7b2;
  border-color: #a2d2a8;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-green .st-switch .slider {
  background-color: #8dc895;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-green .st-switch .slider:before {
  background-color: #c1e1c5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-green .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-green .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #c1e1c5;
  border-color: #6bb775;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-green .st-button .st-button-inner {
  color: #c1e1c5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-dark-green .st-cmp-content {
  background-color: #006b76;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-dark-green .st-cmp-content .st-cmp-selection-cards {
  background-color: #005d67;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-dark-green .st-cmp-content .st-cmp-item {
  background-color: #004f57;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-dark-green .st-cmp-content .st-cmp-body {
  background-color: #005d67;
  border-color: #004148;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-dark-green .st-cmp-content .st-cmp-header {
  background-color: #004f57;
  border-color: #004148;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-dark-green .st-switch .slider {
  background-color: #002629;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-dark-green .st-switch .slider:before {
  background-color: #006b76;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-dark-green .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-dark-green .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #006b76;
  border-color: #000;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-dark-green .st-button .st-button-inner {
  color: #006b76;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-dark-green .st-cmp-content {
  background-color: #bedadc;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-dark-green .st-cmp-content .st-cmp-selection-cards {
  background-color: #b4d4d7;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-dark-green .st-cmp-content .st-cmp-item {
  background-color: #aacfd1;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-dark-green .st-cmp-content .st-cmp-body {
  background-color: #b4d4d7;
  border-color: #a0c9cc;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-dark-green .st-cmp-content .st-cmp-header {
  background-color: #aacfd1;
  border-color: #a0c9cc;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-dark-green .st-switch .slider {
  background-color: #8cbec1;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-dark-green .st-switch .slider:before {
  background-color: #bedadc;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-dark-green .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-dark-green .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #bedadc;
  border-color: #6babaf;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-dark-green .st-button .st-button-inner {
  color: #bedadc;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-light-blue .st-cmp-content {
  background-color: #1273de;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-light-blue .st-cmp-content .st-cmp-selection-cards {
  background-color: #116cd0;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-light-blue .st-cmp-content .st-cmp-item {
  background-color: #1064c2;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-light-blue .st-cmp-content .st-cmp-body {
  background-color: #116cd0;
  border-color: #0f5db4;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-light-blue .st-cmp-content .st-cmp-header {
  background-color: #1064c2;
  border-color: #0f5db4;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-light-blue .st-switch .slider {
  background-color: #0c4e97;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-light-blue .st-switch .slider:before {
  background-color: #1273de;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-light-blue .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-light-blue .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #1273de;
  border-color: #083668;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-light-blue .st-button .st-button-inner {
  color: #1273de;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-light-blue .st-cmp-content {
  background-color: #c4def6;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-light-blue .st-cmp-content .st-cmp-selection-cards {
  background-color: #b7d7f4;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-light-blue .st-cmp-content .st-cmp-item {
  background-color: #a9cff2;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-light-blue .st-cmp-content .st-cmp-body {
  background-color: #b7d7f4;
  border-color: #9cc8f0;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-light-blue .st-cmp-content .st-cmp-header {
  background-color: #a9cff2;
  border-color: #9cc8f0;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-light-blue .st-switch .slider {
  background-color: #82b9ec;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-light-blue .st-switch .slider:before {
  background-color: #c4def6;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-light-blue .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-light-blue .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #c4def6;
  border-color: #55a0e5;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-light-blue .st-button .st-button-inner {
  color: #c4def6;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-blue .st-cmp-content {
  background-color: #004dcf;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-blue .st-cmp-content .st-cmp-selection-cards {
  background-color: #0047c0;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-blue .st-cmp-content .st-cmp-item {
  background-color: #0042b0;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-blue .st-cmp-content .st-cmp-body {
  background-color: #0047c0;
  border-color: #003ca1;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-blue .st-cmp-content .st-cmp-header {
  background-color: #0042b0;
  border-color: #003ca1;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-blue .st-switch .slider {
  background-color: #003183;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-blue .st-switch .slider:before {
  background-color: #004dcf;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-blue .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-blue .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #004dcf;
  border-color: #001e4f;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-blue .st-button .st-button-inner {
  color: #004dcf;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-blue .st-cmp-content {
  background-color: #bed3f3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-blue .st-cmp-content .st-cmp-selection-cards {
  background-color: #b1caf1;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-blue .st-cmp-content .st-cmp-item {
  background-color: #a4c2ee;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-blue .st-cmp-content .st-cmp-body {
  background-color: #b1caf1;
  border-color: #97b9ec;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-blue .st-cmp-content .st-cmp-header {
  background-color: #a4c2ee;
  border-color: #97b9ec;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-blue .st-switch .slider {
  background-color: #7da7e7;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-blue .st-switch .slider:before {
  background-color: #bed3f3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-blue .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-blue .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #bed3f3;
  border-color: #528adf;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-blue .st-button .st-button-inner {
  color: #bed3f3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-purple .st-cmp-content {
  background-color: #5300eb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-purple .st-cmp-content .st-cmp-selection-cards {
  background-color: #4e00dc;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-purple .st-cmp-content .st-cmp-item {
  background-color: #4800cc;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-purple .st-cmp-content .st-cmp-body {
  background-color: #4e00dc;
  border-color: #4300bd;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-purple .st-cmp-content .st-cmp-header {
  background-color: #4800cc;
  border-color: #4300bd;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-purple .st-switch .slider {
  background-color: #38009f;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-purple .st-switch .slider:before {
  background-color: #5300eb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-purple .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-purple .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #5300eb;
  border-color: #26006c;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-purple .st-button .st-button-inner {
  color: #5300eb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-purple .st-cmp-content {
  background-color: #d4c4fb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-purple .st-cmp-content .st-cmp-selection-cards {
  background-color: #cab6fa;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-purple .st-cmp-content .st-cmp-item {
  background-color: #bfa7f9;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-purple .st-cmp-content .st-cmp-body {
  background-color: #cab6fa;
  border-color: #b599f8;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-purple .st-cmp-content .st-cmp-header {
  background-color: #bfa7f9;
  border-color: #b599f8;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-purple .st-switch .slider {
  background-color: #a07cf6;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-purple .st-switch .slider:before {
  background-color: #d4c4fb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-purple .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-purple .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #d4c4fb;
  border-color: #7d4df3;
}
#st-cmp-v2 .st-cmp-app.st-cmp-background-github-white-purple .st-button .st-button-inner {
  color: #d4c4fb;
}
#st-cmp-v2 .st-cmp-app.st-cmp-text-white :not(.st-text):not(a):not(h1) {
  color: #fff;
}
#st-cmp-v2 .st-cmp-app.st-cmp-text-white .st-switch label {
  color: #fff;
}
#st-cmp-v2 .st-cmp-app.st-cmp-text-white .st-cmp-selection-card .st-cmp-item li {
  color: #fff;
}
#st-cmp-v2 .st-cmp-app.st-cmp-text-white .st-cmp-detailed-selection-card .st-cmp-item h4 {
  color: #fff;
}
#st-cmp-v2 .st-cmp-app.st-cmp-text-white .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-icon {
  filter: invert(100%);
}
#st-cmp-v2 .st-cmp-app.st-cmp-gear-bottom-left .st-cmp-settings {
  left: -3px;
  right: unset;
}
#st-cmp-v2 .st-cmp-app.st-cmp-gear-top-left .st-cmp-settings {
  left: -3px;
  top: 50px;
  right: unset;
  bottom: unset;
}
#st-cmp-v2 .st-cmp-app.st-cmp-gear-top-right .st-cmp-settings {
  top: 50px;
  bottom: unset;
}
</style><style type="text/css">@import url(https://fonts.googleapis.com/css?family=Open+Sans:300,400,700&display=swap);</style><style type="text/css">#st-cmp-v2 .st-cmp-app .st-button {
  display: inline-block;
  margin: 5px;
}
#st-cmp-v2 .st-cmp-app .st-button .st-button-inner {
  background: #09cd18;
  border: 1px solid #09cd18;
  border-radius: 2px;
  box-shadow: 0 2px 4px 0 rgba(0,0,0,0.14);
  color: #fff;
  cursor: pointer;
  font-weight: 600;
  height: 40px;
  letter-spacing: -0.3px;
  line-height: 40px;
  min-width: 90px;
  padding: 0 16px;
  text-align: center;
  transition: color 0.5s;
  transition: background-color 0.3s;
}
#st-cmp-v2 .st-cmp-app .st-button .st-button-inner:hover {
  background: #08b916;
}
#st-cmp-v2 .st-cmp-app .st-button .st-button-inner:active {
  background: #07a613;
}
#st-cmp-v2 .st-cmp-app .st-button > a {
  color: #fff;
}
#st-cmp-v2 .st-cmp-app .st-button img {
  display: inline-block;
  max-height: 30px;
  vertical-align: middle;
  margin: 0 10px;
}
#st-cmp-v2 .st-cmp-app .st-button .st-icon {
  height: 20px;
  margin: -4px 4px 0 0;
}
#st-cmp-v2 .st-cmp-app .st-button .st-icon img {
  height: 20px;
  margin: 0 auto;
  vertical-align: top;
}
#st-cmp-v2 .st-cmp-app .st-button.large .st-button-inner {
  font-size: 18px;
  height: 60px;
  line-height: 60px;
  min-width: 200px;
}
#st-cmp-v2 .st-cmp-app .st-button.large .st-button-inner .st-icon {
  height: 24px;
  margin: -4px 10px 0 0;
}
#st-cmp-v2 .st-cmp-app .st-button.large .st-button-inner .st-icon img {
  height: 24px;
}
#st-cmp-v2 .st-cmp-app .st-button.small .st-button-inner {
  font-size: 12px;
  height: 32px;
  line-height: 32px;
  min-width: 60px;
  padding: 0 14px;
}
#st-cmp-v2 .st-cmp-app .st-button.small .st-button-inner .st-icon {
  height: 18px;
  margin: -4px 10px 0 0;
}
#st-cmp-v2 .st-cmp-app .st-button.small .st-button-inner .st-icon img {
  height: 18px;
}
#st-cmp-v2 .st-cmp-app .st-button.smaller .st-button-inner {
  font-size: 11px;
  height: 28px;
  line-height: 26px;
  padding: 0 12px;
  min-width: 50px;
}
#st-cmp-v2 .st-cmp-app .st-button.smaller .st-button-inner .st-icon {
  height: 14px;
  margin: -4px 10px 0 0;
}
#st-cmp-v2 .st-cmp-app .st-button.smaller .st-button-inner .st-icon img {
  height: 14px;
}
#st-cmp-v2 .st-cmp-app .st-button.smallest .st-button-inner {
  font-size: 10px;
  height: 24px;
  line-height: 22px;
  padding: 0 10px;
  min-width: 30px;
}
#st-cmp-v2 .st-cmp-app .st-button.smallest .st-button-inner .st-icon {
  height: 12px;
  margin: -4px 10px 0 0;
}
#st-cmp-v2 .st-cmp-app .st-button.smallest .st-button-inner .st-icon img {
  height: 12px;
}
#st-cmp-v2 .st-cmp-app .st-button.right {
  float: right;
}
#st-cmp-v2 .st-cmp-app .st-button.red .st-button-inner {
  background: #eb3232;
  border: 1px solid #eb3232;
}
#st-cmp-v2 .st-cmp-app .st-button.red .st-button-inner:hover {
  background: #de1616;
}
#st-cmp-v2 .st-cmp-app .st-button.red .st-button-inner:active {
  background: #b91212;
}
#st-cmp-v2 .st-cmp-app .st-button.red.outline .st-button-inner {
  color: #eb3232;
}
#st-cmp-v2 .st-cmp-app .st-button.rounded .st-button-inner {
  border-radius: 5px;
}
#st-cmp-v2 .st-cmp-app .st-button.secondary .st-button-inner,
#st-cmp-v2 .st-cmp-app .st-button.outline .st-button-inner {
  background: #fff;
  color: #09cd18;
}
#st-cmp-v2 .st-cmp-app .st-button.secondary .st-button-inner:hover,
#st-cmp-v2 .st-cmp-app .st-button.outline .st-button-inner:hover {
  background: #f5fff6;
}
#st-cmp-v2 .st-cmp-app .st-button.secondary .st-button-inner:active,
#st-cmp-v2 .st-cmp-app .st-button.outline .st-button-inner:active {
  background: #e1fee4;
}
#st-cmp-v2 .st-cmp-app .st-button.secondary > a,
#st-cmp-v2 .st-cmp-app .st-button.outline > a {
  color: #09cd18;
}
#st-cmp-v2 .st-cmp-app .st-button.secondary .st-icon,
#st-cmp-v2 .st-cmp-app .st-button.outline .st-icon {
  filter: invert(0.5) sepia(1) saturate(8) hue-rotate(90deg);
}
#st-cmp-v2 .st-cmp-app .st-button.plain .st-button-inner {
  background: #fff;
  border: 1px solid #ddd;
  color: #333;
}
#st-cmp-v2 .st-cmp-app .st-button.plain .st-button-inner:hover {
  background: #f2f2f2;
}
#st-cmp-v2 .st-cmp-app .st-button.plain .st-button-inner:active {
  background: #e6e6e6;
}
#st-cmp-v2 .st-cmp-app .st-button.plain > a {
  color: #333;
}
#st-cmp-v2 .st-cmp-app .st-button.ghost .st-button-inner {
  background: transparent;
  border: none;
  box-shadow: none;
  color: #09cd18;
  min-width: 40px;
  padding: 0;
}
#st-cmp-v2 .st-cmp-app .st-button.ghost > a {
  color: #09cd18;
}
#st-cmp-v2 .st-cmp-app .st-button.small-text .st-button-inner {
  font-size: 13px;
}
#st-cmp-v2 .st-cmp-app .st-button[disabled] {
  opacity: 0.4;
  pointer-events: none;
}
#st-cmp-v2 .st-cmp-app .st-button.black .st-button-inner {
  filter: invert(1);
}
#st-cmp-v2 .st-cmp-app .st-button.white .st-button-inner {
  filter: invert(0);
}
#st-cmp-v2 .st-cmp-app .st-button.green .st-button-inner {
  filter: invert(0.5) sepia(1) saturate(8) hue-rotate(90deg);
}
@media (max-width: 850px) {
  #st-cmp-v2 .st-cmp-app .st-button .st-button-inner {
    border: 0;
    min-width: 50px;
    padding: 0 10px;
  }
}
</style><style type="text/css">#st-cmp-v2 .st-cmp-app .st-checkbox [type="checkbox"]:not(:checked),
#st-cmp-v2 .st-cmp-app .st-checkbox [type="checkbox"]:checked {
  position: absolute;
  left: -9999px;
  opacity: 0;
}
#st-cmp-v2 .st-cmp-app .st-checkbox [type="checkbox"] + label {
  position: relative;
  padding-left: 35px;
  cursor: pointer;
  display: inline-block;
  height: 25px;
  line-height: 25px;
  font-size: 1rem;
  -webkit-user-select: none;
  -moz-user-select: none;
  -khtml-user-select: none;
  -ms-user-select: none;
}
#st-cmp-v2 .st-cmp-app .st-checkbox [type="checkbox"] + label:before,
#st-cmp-v2 .st-cmp-app .st-checkbox [type="checkbox"]:not(.filled-in) + label:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 18px;
  height: 18px;
  z-index: 0;
  border: 2px solid #5a5a5a;
  border-radius: 1px;
  margin-top: 1px;
  transition: 0.2s;
}
#st-cmp-v2 .st-cmp-app .st-checkbox [type="checkbox"].small + label:before,
#st-cmp-v2 .st-cmp-app .st-checkbox [type="checkbox"]:not(.filled-in).small + label:after {
  width: 10px;
  height: 10px;
}
#st-cmp-v2 .st-cmp-app .st-checkbox [type="checkbox"]:not(.filled-in) + label:after {
  border: 0;
  transform: scale(0);
}
#st-cmp-v2 .st-cmp-app .st-checkbox [type="checkbox"]:not(:checked):disabled + label:before {
  border: none;
  background-color: rgba(0,0,0,0.26);
}
#st-cmp-v2 .st-cmp-app .st-checkbox [type="checkbox"].tabbed:focus + label:after {
  transform: scale(1);
  border: 0;
  border-radius: 50%;
  box-shadow: 0 0 0 10px rgba(0,0,0,0.1);
  background-color: rgba(0,0,0,0.1);
}
#st-cmp-v2 .st-cmp-app .st-checkbox [type="checkbox"]:checked + label:before {
  top: -4px;
  left: -5px;
  width: 12px;
  height: 22px;
  border-top: 2px solid transparent;
  border-left: 2px solid transparent;
  border-right: 2px solid #92d400;
  border-bottom: 2px solid #92d400;
  transform: rotate(40deg);
  backface-visibility: hidden;
  transform-origin: 100% 100%;
}
#st-cmp-v2 .st-cmp-app .st-checkbox [type="checkbox"]:checked.small + label:before {
  width: 9.3px;
  height: 17.1px;
}
#st-cmp-v2 .st-cmp-app .st-checkbox [type="checkbox"]:checked:disabled + label:before {
  border-right: 2px solid rgba(0,0,0,0.26);
  border-bottom: 2px solid rgba(0,0,0,0.26);
}
</style><style type="text/css">@import url(https://fonts.googleapis.com/css?family=Open+Sans:300,400,700&display=swap);</style><style type="text/css">#st-cmp-v2 .st-cmp-app .st-switch {
  display: block;
  margin: 0 0 20px 0;
  position: relative;
}
#st-cmp-v2 .st-cmp-app .st-switch label {
  color: #333;
  display: block;
  font-size: 16px;
  font-weight: 600;
  line-height: 24px;
  margin-bottom: 4px;
}
#st-cmp-v2 .st-cmp-app .st-switch input {
  opacity: 0;
  width: 0;
  height: 0;
}
#st-cmp-v2 .st-cmp-app .st-switch .switch {
  display: block;
  height: 24px;
  position: relative;
  width: 40px;
}
#st-cmp-v2 .st-cmp-app .st-switch .slider {
  -webkit-transition: 0.4s;
  background-color: #ccc;
  border-radius: 4px;
  bottom: 0;
  cursor: pointer;
  height: 24px;
  left: 0;
  margin-left: 0;
  margin-right: auto;
  position: absolute;
  right: 0;
  top: 0;
  transition: 0.4s;
  width: 40px;
}
#st-cmp-v2 .st-cmp-app .st-switch .slider:before {
  -webkit-transition: 0.4s;
  background-color: #fff;
  bottom: 4px;
  content: "";
  height: 16px;
  left: 4px;
  position: absolute;
  transition: 0.4s;
  width: 16px;
}
#st-cmp-v2 .st-cmp-app .st-switch .slider[data-checked] {
  background-color: #09cd18;
}
#st-cmp-v2 .st-cmp-app .st-switch .slider[data-checked]:before {
  -webkit-transform: translateX(16px);
  -ms-transform: translateX(16px);
  transform: translateX(16px);
}
</style><style type="text/css">.st-first-layer h1 {
  margin-bottom: 10px;
  text-align: left;
}
.st-first-layer h2 {
  margin-left: 0px;
}
.st-first-layer h3 {
  margin-left: 10px;
}
.st-first-layer h4 {
  margin-left: 15px;
  margin-top: 10px;
  margin-bottom: 10px !important;
}
.st-first-layer .st-cmp-nav-buttons {
  margin-top: 10px;
}
</style><style type="text/css">@import url(https://fonts.googleapis.com/css?family=Open+Sans:300,400,700&display=swap);</style><style type="text/css">.st-button {
  display: inline-block;
  margin: 5px;
}
.st-button .st-button-inner {
  background: #09cd18;
  border: 1px solid #09cd18;
  border-radius: 2px;
  box-shadow: 0 2px 4px 0 rgba(0,0,0,0.14);
  color: #fff;
  cursor: pointer;
  font-weight: 600;
  height: 40px;
  letter-spacing: -0.3px;
  line-height: 40px;
  min-width: 90px;
  padding: 0 16px;
  text-align: center;
  transition: color 0.5s;
  transition: background-color 0.3s;
}
.st-button .st-button-inner:hover {
  background: #08b916;
}
.st-button .st-button-inner:active {
  background: #07a613;
}
.st-button > a {
  color: #fff;
}
.st-button img {
  display: inline-block;
  max-height: 30px;
  vertical-align: middle;
  margin: 0 10px;
}
.st-button .st-icon {
  height: 20px;
  margin: -4px 4px 0 0;
}
.st-button .st-icon img {
  height: 20px;
  margin: 0 auto;
  vertical-align: top;
}
.st-button.large .st-button-inner {
  font-size: 18px;
  height: 60px;
  line-height: 60px;
  min-width: 200px;
}
.st-button.large .st-button-inner .st-icon {
  height: 24px;
  margin: -4px 10px 0 0;
}
.st-button.large .st-button-inner .st-icon img {
  height: 24px;
}
.st-button.small .st-button-inner {
  font-size: 12px;
  height: 32px;
  line-height: 32px;
  min-width: 60px;
  padding: 0 14px;
}
.st-button.small .st-button-inner .st-icon {
  height: 18px;
  margin: -4px 10px 0 0;
}
.st-button.small .st-button-inner .st-icon img {
  height: 18px;
}
.st-button.smaller .st-button-inner {
  font-size: 11px;
  height: 28px;
  line-height: 26px;
  padding: 0 12px;
  min-width: 50px;
}
.st-button.smaller .st-button-inner .st-icon {
  height: 14px;
  margin: -4px 10px 0 0;
}
.st-button.smaller .st-button-inner .st-icon img {
  height: 14px;
}
.st-button.smallest .st-button-inner {
  font-size: 10px;
  height: 24px;
  line-height: 22px;
  padding: 0 10px;
  min-width: 30px;
}
.st-button.smallest .st-button-inner .st-icon {
  height: 12px;
  margin: -4px 10px 0 0;
}
.st-button.smallest .st-button-inner .st-icon img {
  height: 12px;
}
.st-button.right {
  float: right;
}
.st-button.red .st-button-inner {
  background: #eb3232;
  border: 1px solid #eb3232;
}
.st-button.red .st-button-inner:hover {
  background: #de1616;
}
.st-button.red .st-button-inner:active {
  background: #b91212;
}
.st-button.red.outline .st-button-inner {
  color: #eb3232;
}
.st-button.rounded .st-button-inner {
  border-radius: 5px;
}
.st-button.secondary .st-button-inner,
.st-button.outline .st-button-inner {
  background: #fff;
  color: #09cd18;
}
.st-button.secondary .st-button-inner:hover,
.st-button.outline .st-button-inner:hover {
  background: #f5fff6;
}
.st-button.secondary .st-button-inner:active,
.st-button.outline .st-button-inner:active {
  background: #e1fee4;
}
.st-button.secondary > a,
.st-button.outline > a {
  color: #09cd18;
}
.st-button.secondary .st-icon,
.st-button.outline .st-icon {
  filter: invert(0.5) sepia(1) saturate(8) hue-rotate(90deg);
}
.st-button.plain .st-button-inner {
  background: #fff;
  border: 1px solid #ddd;
  color: #333;
}
.st-button.plain .st-button-inner:hover {
  background: #f2f2f2;
}
.st-button.plain .st-button-inner:active {
  background: #e6e6e6;
}
.st-button.plain > a {
  color: #333;
}
.st-button.ghost .st-button-inner {
  background: transparent;
  border: none;
  box-shadow: none;
  color: #09cd18;
  min-width: 40px;
  padding: 0;
}
.st-button.ghost > a {
  color: #09cd18;
}
.st-button.small-text .st-button-inner {
  font-size: 13px;
}
.st-button[disabled] {
  opacity: 0.4;
  pointer-events: none;
}
.st-button.black .st-button-inner {
  filter: invert(1);
}
.st-button.white .st-button-inner {
  filter: invert(0);
}
.st-button.green .st-button-inner {
  filter: invert(0.5) sepia(1) saturate(8) hue-rotate(90deg);
}
@media (max-width: 850px) {
  .st-button .st-button-inner {
    border: 0;
    min-width: 50px;
    padding: 0 10px;
  }
}
</style><style type="text/css">@import url(https://fonts.googleapis.com/css?family=Open+Sans:300,400,700&display=swap);</style><style type="text/css">.st-dialog3 {
  bottom: 0;
  display: block;
  left: 0;
  position: fixed;
  right: 0;
  top: 100%;
  z-index: 1300;
}
.st-dialog3 .background {
  -webkit-tap-highlight-color: transparent;
  background-color: rgba(255,255,255,0.9);
  bottom: 0;
  left: 0;
  position: fixed;
  right: 0;
  top: 0;
  touch-action: none;
  z-index: -1;
}
.st-dialog3 .content {
  align-items: center;
  background: #fff;
  border: solid 1px #eaeaea;
  border-radius: 3px;
  box-shadow: 0 0 100px rgba(0,0,0,0.4);
  left: 50%;
  max-height: 100%;
  min-width: 400px;
  outline: none;
  overflow: auto;
  padding: 20px;
  position: fixed;
  top: 50%;
  transform: translate(-50%, -50%);
}
.st-dialog3 .content .title {
  color: #00d334;
  font-size: 18px;
  font-weight: 500;
  letter-spacing: -0.22px;
  padding-bottom: 10px;
  padding-top: 20px;
}
.st-dialog3 .content .st-input {
  text-align: left;
}
</style><style type="text/css">.st-icon {
  display: inline-block;
  filter: invert(1);
  height: 24px;
  margin: 0 10px;
  vertical-align: middle;
  width: 24px;
  transition: filter 0.3s linear;
}
.st-icon.black {
  filter: invert(1);
}
.st-icon.carbon {
  filter: invert(0.8);
}
.st-icon.grey {
  filter: invert(0.4);
}
.st-icon.white {
  filter: invert(0);
}
.st-icon.green {
  filter: invert(0.5) sepia(1) saturate(8) hue-rotate(90deg);
}
.st-icon.st-icon-sort {
  cursor: pointer;
}
</style><style type="text/css">#st-cmp-v2 .st-cmp-app .st-cmp-selection-card {
  margin-top: 20px;
}
#st-cmp-v2 .st-cmp-app .st-cmp-selection-card .st-cmp-item {
  padding: 7px 0px;
  background-color: #f0f0f0;
  margin-top: 10px;
}
#st-cmp-v2 .st-cmp-app .st-cmp-selection-card .st-cmp-item h3 {
  margin-left: 20px;
}
#st-cmp-v2 .st-cmp-app .st-cmp-selection-card .st-cmp-item li {
  color: #333;
  font-size: 15px;
  font-weight: 500;
}
#st-cmp-v2 .st-cmp-app .st-cmp-selection-card .st-switch {
  padding: 0px 20px;
  margin: 0px 0px 5px 0px;
}
#st-cmp-v2 .st-cmp-app .st-cmp-selection-card .st-switch label {
  display: inline-block;
  font-size: 15px;
  font-weight: 500;
}
#st-cmp-v2 .st-cmp-app .st-cmp-selection-card .st-switch .switch {
  float: right;
  display: inline-block;
  margin-left: 20px;
  vertical-align: top;
}
</style><style type="text/css">@import url(https://fonts.googleapis.com/css?family=Open+Sans:300,400,700&display=swap);</style><style type="text/css">.st-switch {
  display: block;
  margin: 0 0 20px 0;
  position: relative;
}
.st-switch label {
  color: #333;
  display: block;
  font-size: 16px;
  font-weight: 600;
  line-height: 24px;
  margin-bottom: 4px;
}
.st-switch input {
  opacity: 0;
  width: 0;
  height: 0;
}
.st-switch .switch {
  display: block;
  height: 24px;
  position: relative;
  width: 40px;
}
.st-switch .slider {
  -webkit-transition: 0.4s;
  background-color: #ccc;
  border-radius: 4px;
  bottom: 0;
  cursor: pointer;
  height: 24px;
  left: 0;
  margin-left: 0;
  margin-right: auto;
  position: absolute;
  right: 0;
  top: 0;
  transition: 0.4s;
  width: 40px;
}
.st-switch .slider:before {
  -webkit-transition: 0.4s;
  background-color: #fff;
  bottom: 4px;
  content: "";
  height: 16px;
  left: 4px;
  position: absolute;
  transition: 0.4s;
  width: 16px;
}
.st-switch .slider[data-checked] {
  background-color: #09cd18;
}
.st-switch .slider[data-checked]:before {
  -webkit-transform: translateX(16px);
  -ms-transform: translateX(16px);
  transform: translateX(16px);
}
</style><style type="text/css">.st-second-layer .st-cmp-nav-buttons {
  margin-top: 20px;
}
</style><style type="text/css">#st-cmp-v2 .st-cmp-app .st-cmp-detailed-selection-card {
  margin-top: 20px;
}
#st-cmp-v2 .st-cmp-app .st-cmp-detailed-selection-card h3 {
  margin-top: 20px !important;
  margin-left: 10px;
}
#st-cmp-v2 .st-cmp-app .st-cmp-detailed-selection-card .st-cmp-item {
  padding: 7px 0px;
  background-color: #f0f0f0;
  margin-top: 10px;
}
#st-cmp-v2 .st-cmp-app .st-cmp-detailed-selection-card .st-cmp-item h4 {
  display: inline-block;
  width: 410px;
  margin-top: 10px;
  margin-left: 20px;
  margin-bottom: 20px;
  color: #000;
}
#st-cmp-v2 .st-cmp-app .st-cmp-detailed-selection-card .st-cmp-item .h4-width-1 {
  width: 500px;
}
#st-cmp-v2 .st-cmp-app .st-cmp-detailed-selection-card .st-cmp-item .h4-width-2 {
  width: 450px;
}
#st-cmp-v2 .st-cmp-app .st-cmp-detailed-selection-card .st-cmp-item .h4-width-3 {
  width: 410px;
}
#st-cmp-v2 .st-cmp-app .st-cmp-detailed-selection-card .st-cmp-item .h4-width-4 {
  width: 340px;
}
#st-cmp-v2 .st-cmp-app .st-cmp-detailed-selection-card .st-cmp-toggles {
  display: inline-block;
  float: right;
}
#st-cmp-v2 .st-cmp-app .st-cmp-detailed-selection-card .st-switch {
  float: right;
  display: inline-block;
  padding: 0px;
  margin: 7px 20px 0px -15px;
}
#st-cmp-v2 .st-cmp-app .st-cmp-detailed-selection-card .st-switch label {
  display: inline-block;
  width: 510px;
}
#st-cmp-v2 .st-cmp-app .st-cmp-detailed-selection-card .st-switch .switch {
  display: inline-block;
  margin-left: 20px;
  vertical-align: top;
}
#st-cmp-v2 .st-cmp-app .st-cmp-detailed-selection-card .st-cmp-checkbox {
  cursor: pointer;
  margin-right: 10px;
  margin-top: 2px;
  display: inline-block;
  line-height: 30px;
}
#st-cmp-v2 .st-cmp-app .st-cmp-detailed-selection-card .st-cmp-checkbox .st-cmp-li-label {
  color: #777;
  font-weight: 500;
  line-height: 30px;
}
#st-cmp-v2 .st-cmp-app .st-cmp-detailed-selection-card .st-cmp-checkbox .st-cmp-li-label-mobile {
  display: none;
}
#st-cmp-v2 .st-cmp-app .st-cmp-detailed-selection-card .st-cmp-checkbox .st-cmp-li-label-active {
  color: #09cd18;
}
#st-cmp-v2 .st-cmp-app .st-cmp-detailed-selection-card .st-cmp-checkbox .st-checkbox {
  display: inline-block;
  margin-left: 7px;
  line-height: 30px;
  vertical-align: middle;
  margin-top: 5px;
}
#st-cmp-v2 .st-cmp-app .st-cmp-detailed-selection-card .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  background-color: #fff;
  border-color: #ccc;
}
#st-cmp-v2 .st-cmp-app .st-cmp-detailed-selection-card .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  background-color: transparent;
  border-top: 2px solid transparent;
  border-left: 2px solid transparent;
  border-right: 2px solid #09cd18;
  border-bottom: 2px solid #09cd18;
}
#st-cmp-v2 .st-cmp-app .st-cmp-detailed-selection-card .st-cmp-intro {
  display: block;
  margin-left: 20px;
}
</style><style type="text/css">.st-checkbox [type="checkbox"]:not(:checked),
.st-checkbox [type="checkbox"]:checked {
  position: absolute;
  left: -9999px;
  opacity: 0;
}
.st-checkbox [type="checkbox"] + label {
  position: relative;
  padding-left: 35px;
  cursor: pointer;
  display: inline-block;
  height: 25px;
  line-height: 25px;
  font-size: 1rem;
  -webkit-user-select: none;
  -moz-user-select: none;
  -khtml-user-select: none;
  -ms-user-select: none;
}
.st-checkbox [type="checkbox"] + label:before,
.st-checkbox [type="checkbox"]:not(.filled-in) + label:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 18px;
  height: 18px;
  z-index: 0;
  border: 2px solid #5a5a5a;
  border-radius: 1px;
  margin-top: 1px;
  transition: 0.2s;
}
.st-checkbox [type="checkbox"].small + label:before,
.st-checkbox [type="checkbox"]:not(.filled-in).small + label:after {
  width: 10px;
  height: 10px;
}
.st-checkbox [type="checkbox"]:not(.filled-in) + label:after {
  border: 0;
  transform: scale(0);
}
.st-checkbox [type="checkbox"]:not(:checked):disabled + label:before {
  border: none;
  background-color: rgba(0,0,0,0.26);
}
.st-checkbox [type="checkbox"].tabbed:focus + label:after {
  transform: scale(1);
  border: 0;
  border-radius: 50%;
  box-shadow: 0 0 0 10px rgba(0,0,0,0.1);
  background-color: rgba(0,0,0,0.1);
}
.st-checkbox [type="checkbox"]:checked + label:before {
  top: -4px;
  left: -5px;
  width: 12px;
  height: 22px;
  border-top: 2px solid transparent;
  border-left: 2px solid transparent;
  border-right: 2px solid #92d400;
  border-bottom: 2px solid #92d400;
  transform: rotate(40deg);
  backface-visibility: hidden;
  transform-origin: 100% 100%;
}
.st-checkbox [type="checkbox"]:checked.small + label:before {
  width: 9.3px;
  height: 17.1px;
}
.st-checkbox [type="checkbox"]:checked:disabled + label:before {
  border-right: 2px solid rgba(0,0,0,0.26);
  border-bottom: 2px solid rgba(0,0,0,0.26);
}
</style><style type="text/css">#st-cmp-v2 .st-cmp-app .st-third-layer .st-cmp-selection-cards h2 {
  margin-bottom: 20px;
}
#st-cmp-v2 .st-cmp-app .st-third-layer .st-cmp-selection-cards h3 {
  margin-left: 0px;
}
#st-cmp-v2 .st-cmp-app .st-third-layer .st-cmp-selection-cards h4 {
  margin-left: 0px;
}
#st-cmp-v2 .st-cmp-app .st-third-layer .st-cmp-nav-buttons {
  margin-top: 20px;
}
</style><style type="text/css">#st-cmp-v2 .st-cmp-app .st-cmp-vendor-selection-card {
  margin: 0px 0px;
}
#st-cmp-v2 .st-cmp-app .st-cmp-vendor-selection-card .st-cmp-header {
  background-color: #f0f0f0;
  padding: 5px 10px;
  border-bottom: 1px solid #e1e1e1;
}
#st-cmp-v2 .st-cmp-app .st-cmp-vendor-selection-card .st-cmp-header h3 {
  display: inline-block;
}
#st-cmp-v2 .st-cmp-app .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles {
  margin-top: 4px;
  display: inline-block;
  line-height: 29px;
  float: right;
}
#st-cmp-v2 .st-cmp-app .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox {
  cursor: pointer;
  display: inline-block;
}
#st-cmp-v2 .st-cmp-app .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label {
  cursor: pointer;
  vertical-align: top;
  margin-right: 10px;
  font-weight: 500;
  color: #555;
}
#st-cmp-v2 .st-cmp-app .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-mobile {
  display: none;
}
#st-cmp-v2 .st-cmp-app .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-cmp-li-label-active {
  color: #09cd18;
}
#st-cmp-v2 .st-cmp-app .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox {
  display: inline-block;
  margin-right: 10px;
}
#st-cmp-v2 .st-cmp-app .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox > span > label {
  margin-bottom: 0rem;
}
#st-cmp-v2 .st-cmp-app .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"] + label:before {
  margin-top: 2px;
  background-color: #fff;
  border-color: #ccc;
}
#st-cmp-v2 .st-cmp-app .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-checkbox .st-checkbox [type="checkbox"]:checked + label:before {
  background-color: transparent;
  border-top: 2px solid transparent;
  border-left: 2px solid transparent;
  border-right: 2px solid #09cd18;
  border-bottom: 2px solid #09cd18;
}
#st-cmp-v2 .st-cmp-app .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-switch {
  display: inline-block;
  margin-bottom: 0px;
}
#st-cmp-v2 .st-cmp-app .st-cmp-vendor-selection-card .st-cmp-header .st-cmp-toggles .st-cmp-icon {
  display: inline-block;
  margin-left: 10px;
  width: 25px;
  height: 25px;
  cursor: pointer;
  vertical-align: unset;
}
#st-cmp-v2 .st-cmp-app .st-cmp-vendor-selection-card .st-cmp-body {
  background-color: #f7f7f7;
  padding: 15px 20px 5px 20px;
  border-bottom: 1px solid #e1e1e1;
}
#st-cmp-v2 .st-cmp-app .st-cmp-vendor-selection-card .st-cmp-body .st-cmp-section {
  margin-bottom: 10px;
}
</style></head>
<body class="page-reader darkmode page-reader-ver">
<script>
    var uiMode = localStorage.getItem('uiMode');
    const body = document.body, btnMode = document.getElementById('toggle-mode'),
        sbBtnMode = document.getElementById('sb-toggle-mode');

    function activeUiMode() {
        if (uiMode === 'dark') {
            btnMode && btnMode.classList.add('active');
            sbBtnMode && sbBtnMode.classList.add('active');
            body.classList.add("darkmode");
        } else {
            btnMode && btnMode.classList.remove('active');
            sbBtnMode && sbBtnMode.classList.remove('active');
            body.classList.remove("darkmode");
        }
    }

    if (uiMode) {
        activeUiMode();
    } else {
        window.matchMedia('(prefers-color-scheme: dark)').matches ? uiMode = 'dark' : uiMode = 'light';
        activeUiMode();
    }
    [btnMode, sbBtnMode].forEach(item => {
        if (item) {
            item.addEventListener('click', function () {
                this.classList.contains('active') ? uiMode = 'light' : uiMode = 'dark';
                localStorage.setItem('uiMode', uiMode);
                activeUiMode();
            });
        }
    })
</script>
<div id="wrapper" data-reading-id="163680" data-reading-by="chap" data-lang-code="en" data-manga-id="21">
    <!--Begin: Header-->
    <div id="header" class="header-reader">
        <div class="container">
            <div class="auto-div">
                <a href="/" id="logo" class="mr-0">
                    <img src="/images/logo.png" alt="logo">
                    <div class="clearfix"></div>
                </a>
                <div class="hr-line"></div>
                <a href="/solo-leveling-21" class="hr-manga">
                    <h2 class="manga-name">Solo Leveling</h2>
                </a>
                <div class="hr-navigation" style="">
                    <div class="rt-item rt-read">
                        <button type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" class="btn">
                            <div class="d-block">You are reading</div>
                            <span class="name" id="reading-by">By
                                    Chapter</span><span class="m-show">Reading</span><i class="fas fa-angle-down ml-2"></i>
                        </button>
                        <div class="dropdown-menu dropdown-menu-model" aria-labelledby="ssc-list">
                            
                                <a class="dropdown-item select-reading-by active" data-value="chap" href="javascript:void(0)">By
                                    Chapter</a>
                            
                            
                        </div>
                    </div>
                    <div id="reading-list" style="display: initial">
    <div class="rt-item rt-lang">
        <button type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" class="btn" id="c-selected-lang"><span>Language: </span>EN<i class="fas fa-angle-down ml-2"></i></button>
        <div class="dropdown-menu dropdown-menu-model" aria-labelledby="ssc-list">
            
            <a data-code="fr" data-type="chap" class="dropdown-item lang-item c-select-lang" href="javascript:;">[FR] French</a>
            
            <a data-code="en" data-type="chap" class="dropdown-item lang-item c-select-lang active" href="javascript:;">[EN] English</a>
            
            <a data-code="ko" data-type="chap" class="dropdown-item lang-item c-select-lang" href="javascript:;">[KO] Korean</a>
            
        </div>
    </div>

<div class="rt-item rt-chap" id="dropdown-chapters">
    <button type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" class="btn"><span id="current-chapter">Chapter 168</span><i class="fas fa-angle-down ml-2"></i>
    </button>
    <div class="dropdown-menu dropdown-menu-model dropdown-menu-fixed" aria-labelledby="ssc-list">
        <div class="chapter-list-read">
            <div class="chapter-section">
                <div class="chapter-s-search">
                    <form class="preform search-reading-item-form">
                        <div class="css-icon"><i class="fas fa-search"></i></div>
                        <input class="form-control search-reading-item" type="text" placeholder="Number of Chapter" autofocus="autofocus" autocomplete="off">
                    </form>
                </div>
                <div class="clearfix"></div>
            </div>
            <div class="chapters-list-ul">
                
                    <ul class="ulclear reading-list lang-chapters" id="fr-chapters" style="display:none;">
                        
                        <li class="item reading-item chapter-item" data-id="1944965" data-number="179.21" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-179.21" title="Chap 179.21: Epilogue 21" class="item-link" data-shortname="Chapter 179.21">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.21: Epilogue 21</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944963" data-number="179.2" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-179.2" title="Chap 179.2: Epilogue 20" class="item-link" data-shortname="Chapter 179.2">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.2: Epilogue 20</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944961" data-number="179.19" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-179.19" title="Chap 179.19: Epilogue 19" class="item-link" data-shortname="Chapter 179.19">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.19: Epilogue 19</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944959" data-number="179.18" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-179.18" title="Chap 179.18: Epilogue 18" class="item-link" data-shortname="Chapter 179.18">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.18: Epilogue 18</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944957" data-number="179.17" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-179.17" title="Chap 179.17: Epilogue 17" class="item-link" data-shortname="Chapter 179.17">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.17: Epilogue 17</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944955" data-number="179.16" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-179.16" title="Chap 179.16: Epilogue 16" class="item-link" data-shortname="Chapter 179.16">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.16: Epilogue 16</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944953" data-number="179.15" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-179.15" title="Chap 179.15: Epilogue 15" class="item-link" data-shortname="Chapter 179.15">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.15: Epilogue 15</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944951" data-number="179.14" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-179.14" title="Chap 179.14: Epilogue 14" class="item-link" data-shortname="Chapter 179.14">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.14: Epilogue 14</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944949" data-number="179.13" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-179.13" title="Chap 179.13: Epilogue 13" class="item-link" data-shortname="Chapter 179.13">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.13: Epilogue 13</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944947" data-number="179.12" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-179.12" title="Chap 179.12: Epilogue 12" class="item-link" data-shortname="Chapter 179.12">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.12: Epilogue 12</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944945" data-number="179.11" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-179.11" title="Chap 179.11: Epilogue 11" class="item-link" data-shortname="Chapter 179.11">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.11: Epilogue 11</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944943" data-number="179.1" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-179.1" title="Chap 179.1: Epilogue 10" class="item-link" data-shortname="Chapter 179.1">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.1: Epilogue 10</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944941" data-number="179.09" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-179.09" title="Chap 179.09: Epilogue 9" class="item-link" data-shortname="Chapter 179.09">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.09: Epilogue 9</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944939" data-number="179.08" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-179.08" title="Chap 179.08: Epilogue 8" class="item-link" data-shortname="Chapter 179.08">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.08: Epilogue 8</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944937" data-number="179.07" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-179.07" title="Chap 179.07: Epilogue 7" class="item-link" data-shortname="Chapter 179.07">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.07: Epilogue 7</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944935" data-number="179.06" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-179.06" title="Chap 179.06: Epilogue 6" class="item-link" data-shortname="Chapter 179.06">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.06: Epilogue 6</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944933" data-number="179.05" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-179.05" title="Chap 179.05: Epilogue 5" class="item-link" data-shortname="Chapter 179.05">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.05: Epilogue 5</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944931" data-number="179.04" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-179.04" title="Chap 179.04: Epilogue 4" class="item-link" data-shortname="Chapter 179.04">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.04: Epilogue 4</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944929" data-number="179.03" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-179.03" title="Chap 179.03: Epilogue 3" class="item-link" data-shortname="Chapter 179.03">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.03: Epilogue 3</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944927" data-number="179.02" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-179.02" title="Chap 179.02: Epilogue 2" class="item-link" data-shortname="Chapter 179.02">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.02: Epilogue 2</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944925" data-number="179.01" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-179.01" title="Chap 179.01: Epilogue 1" class="item-link" data-shortname="Chapter 179.01">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.01: Epilogue 1</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944919" data-number="179" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-179" title="Chap 179: Chapter 179" class="item-link" data-shortname="Chapter 179">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179: Chapter 179</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944917" data-number="178" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-178" title="Chap 178: Chapter 178" class="item-link" data-shortname="Chapter 178">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 178: Chapter 178</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944915" data-number="177" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-177" title="Chap 177: Chapter 177" class="item-link" data-shortname="Chapter 177">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 177: Chapter 177</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944913" data-number="176" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-176" title="Chap 176: Chapter 176" class="item-link" data-shortname="Chapter 176">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 176: Chapter 176</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944911" data-number="175" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-175" title="Chap 175: Chapter 175" class="item-link" data-shortname="Chapter 175">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 175: Chapter 175</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944909" data-number="174" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-174" title="Chap 174: Chapter 174" class="item-link" data-shortname="Chapter 174">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 174: Chapter 174</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944907" data-number="173" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-173" title="Chap 173: Chapter 173" class="item-link" data-shortname="Chapter 173">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 173: Chapter 173</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944905" data-number="172" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-172" title="Chap 172: Chapter 172" class="item-link" data-shortname="Chapter 172">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 172: Chapter 172</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944903" data-number="171" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-171" title="Chap 171: Chapter 171" class="item-link" data-shortname="Chapter 171">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 171: Chapter 171</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944901" data-number="170" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-170" title="Chap 170: Chapter 170" class="item-link" data-shortname="Chapter 170">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 170: Chapter 170</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944899" data-number="169" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-169" title="Chap 169: Chapter 169" class="item-link" data-shortname="Chapter 169">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 169: Chapter 169</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944897" data-number="168" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-168" title="Chap 168: Chapter 168" class="item-link" data-shortname="Chapter 168">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 168: Chapter 168</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944895" data-number="167" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-167" title="Chap 167: Chapter 167" class="item-link" data-shortname="Chapter 167">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 167: Chapter 167</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944893" data-number="166" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-166" title="Chap 166: Chapter 166" class="item-link" data-shortname="Chapter 166">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 166: Chapter 166</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944891" data-number="165" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-165" title="Chap 165: Chapter 165" class="item-link" data-shortname="Chapter 165">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 165: Chapter 165</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944889" data-number="164" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-164" title="Chap 164: Chapter 164" class="item-link" data-shortname="Chapter 164">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 164: Chapter 164</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944887" data-number="163" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-163" title="Chap 163: Chapter 163" class="item-link" data-shortname="Chapter 163">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 163: Chapter 163</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944885" data-number="162" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-162" title="Chap 162: Chapter 162" class="item-link" data-shortname="Chapter 162">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 162: Chapter 162</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944883" data-number="161" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-161" title="Chap 161: Chapter 161" class="item-link" data-shortname="Chapter 161">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 161: Chapter 161</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944881" data-number="160" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-160" title="Chap 160: Chapter 160" class="item-link" data-shortname="Chapter 160">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 160: Chapter 160</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944879" data-number="159" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-159" title="Chap 159: Chapter 159" class="item-link" data-shortname="Chapter 159">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 159: Chapter 159</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944877" data-number="158" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-158" title="Chap 158: Chapter 158" class="item-link" data-shortname="Chapter 158">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 158: Chapter 158</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944875" data-number="157" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-157" title="Chap 157: Chapter 157" class="item-link" data-shortname="Chapter 157">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 157: Chapter 157</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944873" data-number="156" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-156" title="Chap 156: Chapter 156" class="item-link" data-shortname="Chapter 156">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 156: Chapter 156</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944871" data-number="155" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-155" title="Chap 155: Chapter 155" class="item-link" data-shortname="Chapter 155">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 155: Chapter 155</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944869" data-number="154" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-154" title="Chap 154: Chapter 154" class="item-link" data-shortname="Chapter 154">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 154: Chapter 154</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944867" data-number="153" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-153" title="Chap 153: Chapter 153" class="item-link" data-shortname="Chapter 153">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 153: Chapter 153</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944865" data-number="152" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-152" title="Chap 152: Chapter 152" class="item-link" data-shortname="Chapter 152">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 152: Chapter 152</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944863" data-number="151" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-151" title="Chap 151: Chapter 151" class="item-link" data-shortname="Chapter 151">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 151: Chapter 151</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944861" data-number="150" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-150" title="Chap 150: Chapter 150" class="item-link" data-shortname="Chapter 150">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 150: Chapter 150</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944859" data-number="149" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-149" title="Chap 149: Chapter 149" class="item-link" data-shortname="Chapter 149">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 149: Chapter 149</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944857" data-number="148" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-148" title="Chap 148: Chapter 148" class="item-link" data-shortname="Chapter 148">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 148: Chapter 148</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944855" data-number="147" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-147" title="Chap 147: Chapter 147" class="item-link" data-shortname="Chapter 147">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 147: Chapter 147</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944853" data-number="146" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-146" title="Chap 146: Chapter 146" class="item-link" data-shortname="Chapter 146">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 146: Chapter 146</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944851" data-number="145" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-145" title="Chap 145: Chapter 145" class="item-link" data-shortname="Chapter 145">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 145: Chapter 145</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944849" data-number="144" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-144" title="Chap 144: Chapter 144" class="item-link" data-shortname="Chapter 144">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 144: Chapter 144</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944847" data-number="143" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-143" title="Chap 143: Chapter 143" class="item-link" data-shortname="Chapter 143">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 143: Chapter 143</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944845" data-number="142" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-142" title="Chap 142: Chapter 142" class="item-link" data-shortname="Chapter 142">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 142: Chapter 142</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944843" data-number="141" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-141" title="Chap 141: Chapter 141" class="item-link" data-shortname="Chapter 141">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 141: Chapter 141</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944841" data-number="140" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-140" title="Chap 140: Chapter 140" class="item-link" data-shortname="Chapter 140">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 140: Chapter 140</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944839" data-number="139" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-139" title="Chap 139: Chapter 139" class="item-link" data-shortname="Chapter 139">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 139: Chapter 139</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944837" data-number="138" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-138" title="Chap 138: Chapter 138" class="item-link" data-shortname="Chapter 138">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 138: Chapter 138</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944835" data-number="137" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-137" title="Chap 137: Chapter 137" class="item-link" data-shortname="Chapter 137">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 137: Chapter 137</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944833" data-number="136" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-136" title="Chap 136: Chapter 136" class="item-link" data-shortname="Chapter 136">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 136: Chapter 136</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944831" data-number="135" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-135" title="Chap 135: Chapter 135" class="item-link" data-shortname="Chapter 135">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 135: Chapter 135</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944829" data-number="134" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-134" title="Chap 134: Chapter 134" class="item-link" data-shortname="Chapter 134">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 134: Chapter 134</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944827" data-number="133" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-133" title="Chap 133: Chapter 133" class="item-link" data-shortname="Chapter 133">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 133: Chapter 133</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944825" data-number="132" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-132" title="Chap 132: Chapter 132" class="item-link" data-shortname="Chapter 132">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 132: Chapter 132</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944823" data-number="131" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-131" title="Chap 131: Chapter 131" class="item-link" data-shortname="Chapter 131">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 131: Chapter 131</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944821" data-number="130" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-130" title="Chap 130: Chapter 130" class="item-link" data-shortname="Chapter 130">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 130: Chapter 130</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944819" data-number="129" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-129" title="Chap 129: Chapter 129" class="item-link" data-shortname="Chapter 129">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 129: Chapter 129</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944817" data-number="128" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-128" title="Chap 128: Chapter 128" class="item-link" data-shortname="Chapter 128">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 128: Chapter 128</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944815" data-number="127" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-127" title="Chap 127: Chapter 127" class="item-link" data-shortname="Chapter 127">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 127: Chapter 127</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944813" data-number="126" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-126" title="Chap 126: Chapter 126" class="item-link" data-shortname="Chapter 126">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 126: Chapter 126</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944811" data-number="125" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-125" title="Chap 125: Chapter 125" class="item-link" data-shortname="Chapter 125">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 125: Chapter 125</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944809" data-number="124" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-124" title="Chap 124: Chapter 124" class="item-link" data-shortname="Chapter 124">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 124: Chapter 124</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944807" data-number="123" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-123" title="Chap 123: Chapter 123" class="item-link" data-shortname="Chapter 123">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 123: Chapter 123</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944805" data-number="122" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-122" title="Chap 122: Chapter 122" class="item-link" data-shortname="Chapter 122">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 122: Chapter 122</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944803" data-number="121" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-121" title="Chap 121: Chapter 121" class="item-link" data-shortname="Chapter 121">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 121: Chapter 121</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944801" data-number="120" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-120" title="Chap 120: Chapter 120" class="item-link" data-shortname="Chapter 120">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 120: Chapter 120</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944799" data-number="119" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-119" title="Chap 119: Chapter 119" class="item-link" data-shortname="Chapter 119">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 119: Chapter 119</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944797" data-number="118" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-118" title="Chap 118: Chapter 118" class="item-link" data-shortname="Chapter 118">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 118: Chapter 118</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944795" data-number="117" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-117" title="Chap 117: Chapter 117" class="item-link" data-shortname="Chapter 117">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 117: Chapter 117</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944793" data-number="116" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-116" title="Chap 116: Chapter 116" class="item-link" data-shortname="Chapter 116">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 116: Chapter 116</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944791" data-number="115" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-115" title="Chap 115: Chapter 115" class="item-link" data-shortname="Chapter 115">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 115: Chapter 115</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944789" data-number="114" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-114" title="Chap 114: Chapter 114" class="item-link" data-shortname="Chapter 114">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 114: Chapter 114</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944787" data-number="113" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-113" title="Chap 113: Chapter 113" class="item-link" data-shortname="Chapter 113">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 113: Chapter 113</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944785" data-number="112" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-112" title="Chap 112: Chapter 112" class="item-link" data-shortname="Chapter 112">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 112: Chapter 112</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944783" data-number="111" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-111" title="Chap 111: Chapter 111" class="item-link" data-shortname="Chapter 111">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 111: Chapter 111</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944781" data-number="110" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-110" title="Chap 110: Chapter 110" class="item-link" data-shortname="Chapter 110">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 110: Chapter 110</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944779" data-number="109" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-109" title="Chap 109: Chapter 109" class="item-link" data-shortname="Chapter 109">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 109: Chapter 109</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944777" data-number="108" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-108" title="Chap 108: Chapter 108" class="item-link" data-shortname="Chapter 108">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 108: Chapter 108</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944775" data-number="107" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-107" title="Chap 107: Chapter 107" class="item-link" data-shortname="Chapter 107">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 107: Chapter 107</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944773" data-number="106" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-106" title="Chap 106: Chapter 106" class="item-link" data-shortname="Chapter 106">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 106: Chapter 106</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944771" data-number="105" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-105" title="Chap 105: Chapter 105" class="item-link" data-shortname="Chapter 105">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 105: Chapter 105</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944769" data-number="104" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-104" title="Chap 104: Chapter 104" class="item-link" data-shortname="Chapter 104">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 104: Chapter 104</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944767" data-number="103" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-103" title="Chap 103: Chapter 103" class="item-link" data-shortname="Chapter 103">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 103: Chapter 103</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944765" data-number="102" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-102" title="Chap 102: Chapter 102" class="item-link" data-shortname="Chapter 102">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 102: Chapter 102</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944763" data-number="101" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-101" title="Chap 101: Chapter 101" class="item-link" data-shortname="Chapter 101">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 101: Chapter 101</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944761" data-number="100" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-100" title="Chap 100: Chapter 100" class="item-link" data-shortname="Chapter 100">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 100: Chapter 100</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944759" data-number="99" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-99" title="Chap 99: Chapter 99" class="item-link" data-shortname="Chapter 99">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 99: Chapter 99</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944757" data-number="98" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-98" title="Chap 98: Chapter 98" class="item-link" data-shortname="Chapter 98">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 98: Chapter 98</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944755" data-number="97" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-97" title="Chap 97: Chapter 97" class="item-link" data-shortname="Chapter 97">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 97: Chapter 97</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944753" data-number="96" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-96" title="Chap 96: Chapter 96" class="item-link" data-shortname="Chapter 96">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 96: Chapter 96</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944751" data-number="95" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-95" title="Chap 95: Chapter 95" class="item-link" data-shortname="Chapter 95">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 95: Chapter 95</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944749" data-number="94" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-94" title="Chap 94: Chapter 94" class="item-link" data-shortname="Chapter 94">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 94: Chapter 94</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944747" data-number="93" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-93" title="Chap 93: Chapter 93" class="item-link" data-shortname="Chapter 93">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 93: Chapter 93</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944745" data-number="92" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-92" title="Chap 92: Chapter 92" class="item-link" data-shortname="Chapter 92">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 92: Chapter 92</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944743" data-number="91" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-91" title="Chap 91: Chapter 91" class="item-link" data-shortname="Chapter 91">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 91: Chapter 91</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944923" data-number="90.2" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-90.2" title="Chap 90.2: Chapter 90.2" class="item-link" data-shortname="Chapter 90.2">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 90.2: Chapter 90.2</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944741" data-number="90" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-90" title="Chap 90: Chapter 90" class="item-link" data-shortname="Chapter 90">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 90: Chapter 90</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944739" data-number="89" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-89" title="Chap 89: Chapter 89" class="item-link" data-shortname="Chapter 89">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 89: Chapter 89</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944737" data-number="88" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-88" title="Chap 88: Chapter 88" class="item-link" data-shortname="Chapter 88">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 88: Chapter 88</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944735" data-number="87" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-87" title="Chap 87: Chapter 87" class="item-link" data-shortname="Chapter 87">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 87: Chapter 87</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944733" data-number="86" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-86" title="Chap 86: Chapter 86" class="item-link" data-shortname="Chapter 86">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 86: Chapter 86</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944731" data-number="85" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-85" title="Chap 85: Chapter 85" class="item-link" data-shortname="Chapter 85">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 85: Chapter 85</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944729" data-number="84" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-84" title="Chap 84: Chapter 84" class="item-link" data-shortname="Chapter 84">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 84: Chapter 84</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944727" data-number="83" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-83" title="Chap 83: Chapter 83" class="item-link" data-shortname="Chapter 83">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 83: Chapter 83</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944725" data-number="82" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-82" title="Chap 82: Chapter 82" class="item-link" data-shortname="Chapter 82">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 82: Chapter 82</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944723" data-number="81" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-81" title="Chap 81: Chapter 81" class="item-link" data-shortname="Chapter 81">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 81: Chapter 81</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944721" data-number="80" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-80" title="Chap 80: Chapter 80" class="item-link" data-shortname="Chapter 80">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 80: Chapter 80</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944719" data-number="79" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-79" title="Chap 79: Chapter 79" class="item-link" data-shortname="Chapter 79">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 79: Chapter 79</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944717" data-number="78" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-78" title="Chap 78: Chapter 78" class="item-link" data-shortname="Chapter 78">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 78: Chapter 78</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944715" data-number="77" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-77" title="Chap 77: Chapter 77" class="item-link" data-shortname="Chapter 77">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 77: Chapter 77</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944713" data-number="76" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-76" title="Chap 76: Chapter 76" class="item-link" data-shortname="Chapter 76">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 76: Chapter 76</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944711" data-number="75" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-75" title="Chap 75: Chapter 75" class="item-link" data-shortname="Chapter 75">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 75: Chapter 75</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944709" data-number="74" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-74" title="Chap 74: Chapter 74" class="item-link" data-shortname="Chapter 74">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 74: Chapter 74</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944707" data-number="73" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-73" title="Chap 73: Chapter 73" class="item-link" data-shortname="Chapter 73">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 73: Chapter 73</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944705" data-number="72" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-72" title="Chap 72: Chapter 72" class="item-link" data-shortname="Chapter 72">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 72: Chapter 72</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944703" data-number="71" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-71" title="Chap 71: Chapter 71" class="item-link" data-shortname="Chapter 71">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 71: Chapter 71</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944701" data-number="70" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-70" title="Chap 70: Chapter 70" class="item-link" data-shortname="Chapter 70">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 70: Chapter 70</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944699" data-number="69" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-69" title="Chap 69: Chapter 69" class="item-link" data-shortname="Chapter 69">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 69: Chapter 69</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944697" data-number="68" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-68" title="Chap 68: Chapter 68" class="item-link" data-shortname="Chapter 68">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 68: Chapter 68</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944695" data-number="67" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-67" title="Chap 67: Chapter 67" class="item-link" data-shortname="Chapter 67">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 67: Chapter 67</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944693" data-number="66" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-66" title="Chap 66: Chapter 66" class="item-link" data-shortname="Chapter 66">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 66: Chapter 66</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944691" data-number="65" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-65" title="Chap 65: Chapter 65" class="item-link" data-shortname="Chapter 65">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 65: Chapter 65</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944689" data-number="64" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-64" title="Chap 64: Chapter 64" class="item-link" data-shortname="Chapter 64">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 64: Chapter 64</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944687" data-number="63" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-63" title="Chap 63: Chapter 63" class="item-link" data-shortname="Chapter 63">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 63: Chapter 63</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944685" data-number="62" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-62" title="Chap 62: Chapter 62" class="item-link" data-shortname="Chapter 62">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 62: Chapter 62</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944683" data-number="61" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-61" title="Chap 61: Chapter 61" class="item-link" data-shortname="Chapter 61">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 61: Chapter 61</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944681" data-number="60" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-60" title="Chap 60: Chapter 60" class="item-link" data-shortname="Chapter 60">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 60: Chapter 60</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944679" data-number="59" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-59" title="Chap 59: Chapter 59" class="item-link" data-shortname="Chapter 59">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 59: Chapter 59</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944677" data-number="58" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-58" title="Chap 58: Chapter 58" class="item-link" data-shortname="Chapter 58">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 58: Chapter 58</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944675" data-number="57" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-57" title="Chap 57: Chapter 57" class="item-link" data-shortname="Chapter 57">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 57: Chapter 57</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944673" data-number="56" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-56" title="Chap 56: Chapter 56" class="item-link" data-shortname="Chapter 56">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 56: Chapter 56</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944671" data-number="55" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-55" title="Chap 55: Chapter 55" class="item-link" data-shortname="Chapter 55">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 55: Chapter 55</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944669" data-number="54" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-54" title="Chap 54: Chapter 54" class="item-link" data-shortname="Chapter 54">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 54: Chapter 54</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944667" data-number="53" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-53" title="Chap 53: Chapter 53" class="item-link" data-shortname="Chapter 53">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 53: Chapter 53</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944665" data-number="52" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-52" title="Chap 52: Chapter 52" class="item-link" data-shortname="Chapter 52">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 52: Chapter 52</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944663" data-number="51" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-51" title="Chap 51: Chapter 51" class="item-link" data-shortname="Chapter 51">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 51: Chapter 51</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944661" data-number="50" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-50" title="Chap 50: Chapter 50" class="item-link" data-shortname="Chapter 50">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 50: Chapter 50</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944659" data-number="49" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-49" title="Chap 49: Chapter 49" class="item-link" data-shortname="Chapter 49">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 49: Chapter 49</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944657" data-number="48" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-48" title="Chap 48: Chapter 48" class="item-link" data-shortname="Chapter 48">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 48: Chapter 48</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944655" data-number="47" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-47" title="Chap 47: Chapter 47" class="item-link" data-shortname="Chapter 47">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 47: Chapter 47</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944653" data-number="46" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-46" title="Chap 46: Chapter 46" class="item-link" data-shortname="Chapter 46">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 46: Chapter 46</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944651" data-number="45" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-45" title="Chap 45: Chapter 45" class="item-link" data-shortname="Chapter 45">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 45: Chapter 45</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944649" data-number="44" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-44" title="Chap 44: Chapter 44" class="item-link" data-shortname="Chapter 44">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 44: Chapter 44</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944647" data-number="43" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-43" title="Chap 43: Chapter 43" class="item-link" data-shortname="Chapter 43">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 43: Chapter 43</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944645" data-number="42" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-42" title="Chap 42: Chapter 42" class="item-link" data-shortname="Chapter 42">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 42: Chapter 42</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944643" data-number="41" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-41" title="Chap 41: Chapter 41" class="item-link" data-shortname="Chapter 41">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 41: Chapter 41</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944641" data-number="40" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-40" title="Chap 40: Chapter 40" class="item-link" data-shortname="Chapter 40">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 40: Chapter 40</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944639" data-number="39" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-39" title="Chap 39: Chapter 39" class="item-link" data-shortname="Chapter 39">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 39: Chapter 39</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944637" data-number="38" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-38" title="Chap 38: Chapter 38" class="item-link" data-shortname="Chapter 38">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 38: Chapter 38</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944635" data-number="37" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-37" title="Chap 37: Chapter 37" class="item-link" data-shortname="Chapter 37">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 37: Chapter 37</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944633" data-number="36" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-36" title="Chap 36: Chapter 36" class="item-link" data-shortname="Chapter 36">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 36: Chapter 36</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944631" data-number="35" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-35" title="Chap 35: Chapter 35" class="item-link" data-shortname="Chapter 35">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 35: Chapter 35</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944629" data-number="34" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-34" title="Chap 34: Chapter 34" class="item-link" data-shortname="Chapter 34">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 34: Chapter 34</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944627" data-number="33" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-33" title="Chap 33: Chapter 33" class="item-link" data-shortname="Chapter 33">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 33: Chapter 33</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944625" data-number="32" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-32" title="Chap 32: Chapter 32" class="item-link" data-shortname="Chapter 32">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 32: Chapter 32</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944623" data-number="31" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-31" title="Chap 31: Chapter 31" class="item-link" data-shortname="Chapter 31">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 31: Chapter 31</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944621" data-number="30" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-30" title="Chap 30: Chapter 30" class="item-link" data-shortname="Chapter 30">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 30: Chapter 30</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944619" data-number="29" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-29" title="Chap 29: Chapter 29" class="item-link" data-shortname="Chapter 29">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 29: Chapter 29</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944617" data-number="28" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-28" title="Chap 28: Chapter 28" class="item-link" data-shortname="Chapter 28">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 28: Chapter 28</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944615" data-number="27" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-27" title="Chap 27: Chapter 27" class="item-link" data-shortname="Chapter 27">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 27: Chapter 27</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944613" data-number="26" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-26" title="Chap 26: Chapter 26" class="item-link" data-shortname="Chapter 26">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 26: Chapter 26</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944611" data-number="25" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-25" title="Chap 25: Chapter 25" class="item-link" data-shortname="Chapter 25">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 25: Chapter 25</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944609" data-number="24" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-24" title="Chap 24: Chapter 24" class="item-link" data-shortname="Chapter 24">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 24: Chapter 24</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944607" data-number="23" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-23" title="Chap 23: Chapter 23" class="item-link" data-shortname="Chapter 23">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 23: Chapter 23</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944605" data-number="22" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-22" title="Chap 22: Chapter 22" class="item-link" data-shortname="Chapter 22">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 22: Chapter 22</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944603" data-number="21" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-21" title="Chap 21: Chapter 21" class="item-link" data-shortname="Chapter 21">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 21: Chapter 21</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944601" data-number="20" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-20" title="Chap 20: Chapter 20" class="item-link" data-shortname="Chapter 20">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 20: Chapter 20</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944599" data-number="19" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-19" title="Chap 19: Chapter 19" class="item-link" data-shortname="Chapter 19">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 19: Chapter 19</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944597" data-number="18" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-18" title="Chap 18: Chapter 18" class="item-link" data-shortname="Chapter 18">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 18: Chapter 18</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944595" data-number="17" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-17" title="Chap 17: Chapter 17" class="item-link" data-shortname="Chapter 17">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 17: Chapter 17</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944593" data-number="16" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-16" title="Chap 16: Chapter 16" class="item-link" data-shortname="Chapter 16">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 16: Chapter 16</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944591" data-number="15" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-15" title="Chap 15: Chapter 15" class="item-link" data-shortname="Chapter 15">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 15: Chapter 15</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944589" data-number="14" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-14" title="Chap 14: Chapter 14" class="item-link" data-shortname="Chapter 14">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 14: Chapter 14</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944587" data-number="13" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-13" title="Chap 13: Chapter 13" class="item-link" data-shortname="Chapter 13">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 13: Chapter 13</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944585" data-number="12" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-12" title="Chap 12: Chapter 12" class="item-link" data-shortname="Chapter 12">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 12: Chapter 12</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944583" data-number="11" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-11" title="Chap 11: Chapter 11" class="item-link" data-shortname="Chapter 11">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 11: Chapter 11</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944581" data-number="10" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-10" title="Chap 10: Chapter 10" class="item-link" data-shortname="Chapter 10">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 10: Chapter 10</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944579" data-number="9" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-9" title="Chap 9: Chapter 9" class="item-link" data-shortname="Chapter 9">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 9: Chapter 9</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944577" data-number="8" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-8" title="Chap 8: Chapter 8" class="item-link" data-shortname="Chapter 8">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 8: Chapter 8</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944575" data-number="7" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-7" title="Chap 7: Chapter 7" class="item-link" data-shortname="Chapter 7">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 7: Chapter 7</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944573" data-number="6" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-6" title="Chap 6: Chapter 6" class="item-link" data-shortname="Chapter 6">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 6: Chapter 6</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944571" data-number="5" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-5" title="Chap 5: Chapter 5" class="item-link" data-shortname="Chapter 5">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 5: Chapter 5</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944569" data-number="4" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-4" title="Chap 4: Chapter 4" class="item-link" data-shortname="Chapter 4">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 4: Chapter 4</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944567" data-number="3" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-3" title="Chap 3: Chapter 3" class="item-link" data-shortname="Chapter 3">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 3: Chapter 3</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944565" data-number="2" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-2" title="Chap 2: Chapter 2" class="item-link" data-shortname="Chapter 2">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 2: Chapter 2</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944563" data-number="1" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-1" title="Chap 1: Chapter 1" class="item-link" data-shortname="Chapter 1">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 1: Chapter 1</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1944561" data-number="0" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/fr/chapter-0" title="Chap 0: Chapter 0" class="item-link" data-shortname="Chapter 0">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 0: Chapter 0</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                    </ul>
                
                    <ul class="ulclear reading-list lang-chapters active" id="en-chapters" style="">
                        
                        <li class="item reading-item chapter-item" data-id="1864080" data-number="179.21" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-179.21" title="Chap 179.21: Epilogue 21-End" class="item-link" data-shortname="Chapter 179.21">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.21: Epilogue 21-End</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1861962" data-number="179.2" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-179.2" title="Chap 179.2: Epilogue 20" class="item-link" data-shortname="Chapter 179.2">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.2: Epilogue 20</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1861623" data-number="179.19" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-179.19" title="Chap 179.19: Epilogue 19" class="item-link" data-shortname="Chapter 179.19">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.19: Epilogue 19</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1847775" data-number="179.18" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-179.18" title="Chap 179.18: Epilogue 18" class="item-link" data-shortname="Chapter 179.18">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.18: Epilogue 18</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1838611" data-number="179.17" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-179.17" title="Chap 179.17: Epilogue 17" class="item-link" data-shortname="Chapter 179.17">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.17: Epilogue 17</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1826919" data-number="179.16" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-179.16" title="Chap 179.16: Epilogue 16" class="item-link" data-shortname="Chapter 179.16">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.16: Epilogue 16</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1816341" data-number="179.15" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-179.15" title="Chap 179.15: Epilogue 15" class="item-link" data-shortname="Chapter 179.15">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.15: Epilogue 15</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1809311" data-number="179.14" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-179.14" title="Chap 179.14: Epilogue 14" class="item-link" data-shortname="Chapter 179.14">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.14: Epilogue 14</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1798601" data-number="179.13" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-179.13" title="Chap 179.13: Epilogue 13" class="item-link" data-shortname="Chapter 179.13">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.13: Epilogue 13</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1787539" data-number="179.12" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-179.12" title="Chap 179.12: Epilogue 12" class="item-link" data-shortname="Chapter 179.12">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.12: Epilogue 12</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1777701" data-number="179.11" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-179.11" title="Chap 179.11: Epilogue 11" class="item-link" data-shortname="Chapter 179.11">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.11: Epilogue 11</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1767747" data-number="179.1" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-179.1" title="Chap 179.1: Epilogue 10" class="item-link" data-shortname="Chapter 179.1">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.1: Epilogue 10</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1757363" data-number="179.09" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-179.09" title="Chap 179.09: Epilogue 9" class="item-link" data-shortname="Chapter 179.09">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.09: Epilogue 9</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1742197" data-number="179.08" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-179.08" title="Chap 179.08: Epilogue 8" class="item-link" data-shortname="Chapter 179.08">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.08: Epilogue 8</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1728743" data-number="179.07" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-179.07" title="Chap 179.07: Epilogue 7" class="item-link" data-shortname="Chapter 179.07">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.07: Epilogue 7</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1713517" data-number="179.06" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-179.06" title="Chap 179.06: Epilogue 6" class="item-link" data-shortname="Chapter 179.06">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.06: Epilogue 6</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1697523" data-number="179.05" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-179.05" title="Chap 179.05: Epilogue 5" class="item-link" data-shortname="Chapter 179.05">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.05: Epilogue 5</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1665613" data-number="179.04" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-179.04" title="Chap 179.04: Epilogue 4" class="item-link" data-shortname="Chapter 179.04">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.04: Epilogue 4</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1658211" data-number="179.03" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-179.03" title="Chap 179.03: Epilogue 3" class="item-link" data-shortname="Chapter 179.03">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.03: Epilogue 3</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1658209" data-number="179.02" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-179.02" title="Chap 179.02: Epilogue 2" class="item-link" data-shortname="Chapter 179.02">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.02: Epilogue 2</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="1658213" data-number="179.01" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-179.01" title="Chap 179.01: Epilogue 1" class="item-link" data-shortname="Chapter 179.01">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179.01: Epilogue 1</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="534210" data-number="179" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-179" title="Chap 179: Chapter 179" class="item-link" data-shortname="Chapter 179">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179: Chapter 179</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="505642" data-number="178" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-178" title="Chap 178: Chapter 178" class="item-link" data-shortname="Chapter 178">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 178: Chapter 178</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="478704" data-number="177" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-177" title="Chap 177: Chapter 177" class="item-link" data-shortname="Chapter 177">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 177: Chapter 177</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="451634" data-number="176" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-176" title="Chap 176: Chapter 176" class="item-link" data-shortname="Chapter 176">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 176: Chapter 176</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="398068" data-number="175" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-175" title="Chap 175: Chapter 175" class="item-link" data-shortname="Chapter 175">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 175: Chapter 175</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="369680" data-number="174" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-174" title="Chap 174: Chapter 174" class="item-link" data-shortname="Chapter 174">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 174: Chapter 174</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="343150" data-number="173" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-173" title="Chap 173: Chapter 173" class="item-link" data-shortname="Chapter 173">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 173: Chapter 173</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="323390" data-number="172" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-172" title="Chap 172: Chapter 172" class="item-link" data-shortname="Chapter 172">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 172: Chapter 172</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="292346" data-number="171" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-171" title="Chap 171: Chapter 171" class="item-link" data-shortname="Chapter 171">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 171: Chapter 171</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="245752" data-number="170" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-170" title="Chap 170: Chapter 170" class="item-link" data-shortname="Chapter 170">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 170: Chapter 170</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="224648" data-number="169" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-169" title="Chap 169: Chapter 169" class="item-link" data-shortname="Chapter 169">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 169: Chapter 169</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item active" data-id="163680" data-number="168" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-168" title="Chap 168: Chapter 168" class="item-link" data-shortname="Chapter 168">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 168: Chapter 168</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="157352" data-number="167" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-167" title="Chap 167: Chapter 167" class="item-link" data-shortname="Chapter 167">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 167: Chapter 167</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154768" data-number="166" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-166" title="Chap 166: Chapter 166" class="item-link" data-shortname="Chapter 166">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 166: Chapter 166</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154766" data-number="165" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-165" title="Chap 165: Chapter 165" class="item-link" data-shortname="Chapter 165">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 165: Chapter 165</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154764" data-number="164" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-164" title="Chap 164: Chapter 164" class="item-link" data-shortname="Chapter 164">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 164: Chapter 164</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154762" data-number="163" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-163" title="Chap 163: Chapter 163" class="item-link" data-shortname="Chapter 163">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 163: Chapter 163</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154760" data-number="162" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-162" title="Chap 162: Chapter 162" class="item-link" data-shortname="Chapter 162">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 162: Chapter 162</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154758" data-number="161" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-161" title="Chap 161: Chapter 161" class="item-link" data-shortname="Chapter 161">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 161: Chapter 161</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154756" data-number="160" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-160" title="Chap 160: Chapter 160" class="item-link" data-shortname="Chapter 160">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 160: Chapter 160</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154754" data-number="159" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-159" title="Chap 159: Chapter 159" class="item-link" data-shortname="Chapter 159">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 159: Chapter 159</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154752" data-number="158" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-158" title="Chap 158: Chapter 158" class="item-link" data-shortname="Chapter 158">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 158: Chapter 158</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154750" data-number="157" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-157" title="Chap 157: Chapter 157" class="item-link" data-shortname="Chapter 157">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 157: Chapter 157</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154748" data-number="156" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-156" title="Chap 156: Chapter 156" class="item-link" data-shortname="Chapter 156">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 156: Chapter 156</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154746" data-number="155" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-155" title="Chap 155: Chapter 155" class="item-link" data-shortname="Chapter 155">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 155: Chapter 155</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154744" data-number="154" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-154" title="Chap 154: Chapter 154" class="item-link" data-shortname="Chapter 154">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 154: Chapter 154</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154742" data-number="153" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-153" title="Chap 153: Chapter 153" class="item-link" data-shortname="Chapter 153">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 153: Chapter 153</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154740" data-number="152" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-152" title="Chap 152: Chapter 152" class="item-link" data-shortname="Chapter 152">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 152: Chapter 152</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154738" data-number="151" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-151" title="Chap 151: Chapter 151" class="item-link" data-shortname="Chapter 151">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 151: Chapter 151</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154736" data-number="150" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-150" title="Chap 150: Chapter 150" class="item-link" data-shortname="Chapter 150">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 150: Chapter 150</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154734" data-number="149" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-149" title="Chap 149: Chapter 149" class="item-link" data-shortname="Chapter 149">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 149: Chapter 149</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154732" data-number="148" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-148" title="Chap 148: Chapter 148" class="item-link" data-shortname="Chapter 148">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 148: Chapter 148</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154730" data-number="147" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-147" title="Chap 147: Chapter 147" class="item-link" data-shortname="Chapter 147">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 147: Chapter 147</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154728" data-number="146" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-146" title="Chap 146: Chapter 146" class="item-link" data-shortname="Chapter 146">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 146: Chapter 146</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154726" data-number="145" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-145" title="Chap 145: Chapter 145" class="item-link" data-shortname="Chapter 145">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 145: Chapter 145</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154724" data-number="144" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-144" title="Chap 144: Chapter 144" class="item-link" data-shortname="Chapter 144">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 144: Chapter 144</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154722" data-number="143" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-143" title="Chap 143: Chapter 143" class="item-link" data-shortname="Chapter 143">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 143: Chapter 143</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154720" data-number="142" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-142" title="Chap 142: Chapter 142" class="item-link" data-shortname="Chapter 142">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 142: Chapter 142</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154718" data-number="141" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-141" title="Chap 141: Chapter 141" class="item-link" data-shortname="Chapter 141">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 141: Chapter 141</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154716" data-number="140" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-140" title="Chap 140: Chapter 140" class="item-link" data-shortname="Chapter 140">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 140: Chapter 140</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154714" data-number="139" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-139" title="Chap 139: Chapter 139" class="item-link" data-shortname="Chapter 139">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 139: Chapter 139</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154712" data-number="138" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-138" title="Chap 138: Chapter 138" class="item-link" data-shortname="Chapter 138">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 138: Chapter 138</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154710" data-number="137" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-137" title="Chap 137: Chapter 137" class="item-link" data-shortname="Chapter 137">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 137: Chapter 137</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154708" data-number="136" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-136" title="Chap 136: Chapter 136" class="item-link" data-shortname="Chapter 136">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 136: Chapter 136</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154706" data-number="135" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-135" title="Chap 135: Chapter 135" class="item-link" data-shortname="Chapter 135">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 135: Chapter 135</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154704" data-number="134" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-134" title="Chap 134: Chapter 134" class="item-link" data-shortname="Chapter 134">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 134: Chapter 134</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154702" data-number="133" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-133" title="Chap 133: Chapter 133" class="item-link" data-shortname="Chapter 133">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 133: Chapter 133</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154700" data-number="132" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-132" title="Chap 132: Chapter 132" class="item-link" data-shortname="Chapter 132">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 132: Chapter 132</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154698" data-number="131" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-131" title="Chap 131: Chapter 131" class="item-link" data-shortname="Chapter 131">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 131: Chapter 131</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154696" data-number="130" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-130" title="Chap 130: Chapter 130" class="item-link" data-shortname="Chapter 130">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 130: Chapter 130</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154694" data-number="129" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-129" title="Chap 129: Chapter 129" class="item-link" data-shortname="Chapter 129">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 129: Chapter 129</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154692" data-number="128" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-128" title="Chap 128: Chapter 128" class="item-link" data-shortname="Chapter 128">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 128: Chapter 128</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154690" data-number="127" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-127" title="Chap 127: Chapter 127" class="item-link" data-shortname="Chapter 127">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 127: Chapter 127</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154688" data-number="126" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-126" title="Chap 126: Chapter 126" class="item-link" data-shortname="Chapter 126">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 126: Chapter 126</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154686" data-number="125" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-125" title="Chap 125: Chapter 125" class="item-link" data-shortname="Chapter 125">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 125: Chapter 125</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154684" data-number="124" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-124" title="Chap 124: Chapter 124" class="item-link" data-shortname="Chapter 124">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 124: Chapter 124</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154682" data-number="123" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-123" title="Chap 123: Chapter 123" class="item-link" data-shortname="Chapter 123">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 123: Chapter 123</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154680" data-number="122" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-122" title="Chap 122: Chapter 122" class="item-link" data-shortname="Chapter 122">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 122: Chapter 122</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154678" data-number="121" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-121" title="Chap 121: Chapter 121" class="item-link" data-shortname="Chapter 121">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 121: Chapter 121</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154676" data-number="120" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-120" title="Chap 120: Chapter 120" class="item-link" data-shortname="Chapter 120">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 120: Chapter 120</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154674" data-number="119" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-119" title="Chap 119: Chapter 119" class="item-link" data-shortname="Chapter 119">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 119: Chapter 119</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154672" data-number="118" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-118" title="Chap 118: Chapter 118" class="item-link" data-shortname="Chapter 118">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 118: Chapter 118</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154670" data-number="117" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-117" title="Chap 117: Chapter 117" class="item-link" data-shortname="Chapter 117">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 117: Chapter 117</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154668" data-number="116" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-116" title="Chap 116: Chapter 116" class="item-link" data-shortname="Chapter 116">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 116: Chapter 116</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154666" data-number="115" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-115" title="Chap 115: Chapter 115" class="item-link" data-shortname="Chapter 115">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 115: Chapter 115</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154664" data-number="114" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-114" title="Chap 114: Chapter 114" class="item-link" data-shortname="Chapter 114">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 114: Chapter 114</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154662" data-number="113" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-113" title="Chap 113: Chapter 113" class="item-link" data-shortname="Chapter 113">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 113: Chapter 113</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154660" data-number="112" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-112" title="Chap 112: Chapter 112" class="item-link" data-shortname="Chapter 112">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 112: Chapter 112</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154658" data-number="111" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-111" title="Chap 111: Chapter 111" class="item-link" data-shortname="Chapter 111">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 111: Chapter 111</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154656" data-number="110" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-110" title="Chap 110: Chapter 110" class="item-link" data-shortname="Chapter 110">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 110: Chapter 110</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154654" data-number="109" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-109" title="Chap 109: Chapter 109" class="item-link" data-shortname="Chapter 109">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 109: Chapter 109</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154652" data-number="108" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-108" title="Chap 108: Chapter 108" class="item-link" data-shortname="Chapter 108">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 108: Chapter 108</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154650" data-number="107" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-107" title="Chap 107: Chapter 107" class="item-link" data-shortname="Chapter 107">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 107: Chapter 107</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154648" data-number="106" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-106" title="Chap 106: Chapter 106" class="item-link" data-shortname="Chapter 106">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 106: Chapter 106</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154646" data-number="105" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-105" title="Chap 105: Chapter 105" class="item-link" data-shortname="Chapter 105">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 105: Chapter 105</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154644" data-number="104" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-104" title="Chap 104: Chapter 104" class="item-link" data-shortname="Chapter 104">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 104: Chapter 104</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154642" data-number="103" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-103" title="Chap 103: Chapter 103" class="item-link" data-shortname="Chapter 103">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 103: Chapter 103</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154640" data-number="102" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-102" title="Chap 102: Chapter 102" class="item-link" data-shortname="Chapter 102">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 102: Chapter 102</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154638" data-number="101" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-101" title="Chap 101: Chapter 101" class="item-link" data-shortname="Chapter 101">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 101: Chapter 101</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154636" data-number="100" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-100" title="Chap 100: Chapter 100" class="item-link" data-shortname="Chapter 100">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 100: Chapter 100</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154634" data-number="99" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-99" title="Chap 99: Chapter 99" class="item-link" data-shortname="Chapter 99">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 99: Chapter 99</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154632" data-number="98" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-98" title="Chap 98: Chapter 98" class="item-link" data-shortname="Chapter 98">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 98: Chapter 98</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154630" data-number="97" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-97" title="Chap 97: Chapter 97" class="item-link" data-shortname="Chapter 97">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 97: Chapter 97</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154628" data-number="96" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-96" title="Chap 96: Chapter 96" class="item-link" data-shortname="Chapter 96">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 96: Chapter 96</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154626" data-number="95" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-95" title="Chap 95: Chapter 95" class="item-link" data-shortname="Chapter 95">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 95: Chapter 95</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154624" data-number="94" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-94" title="Chap 94: Chapter 94" class="item-link" data-shortname="Chapter 94">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 94: Chapter 94</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154622" data-number="93" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-93" title="Chap 93: Chapter 93" class="item-link" data-shortname="Chapter 93">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 93: Chapter 93</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154620" data-number="92" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-92" title="Chap 92: Chapter 92" class="item-link" data-shortname="Chapter 92">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 92: Chapter 92</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154618" data-number="91" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-91" title="Chap 91: Chapter 91" class="item-link" data-shortname="Chapter 91">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 91: Chapter 91</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154616" data-number="90" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-90" title="Chap 90: Chapter 90" class="item-link" data-shortname="Chapter 90">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 90: Chapter 90</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154614" data-number="89" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-89" title="Chap 89: Chapter 89" class="item-link" data-shortname="Chapter 89">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 89: Chapter 89</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154612" data-number="88" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-88" title="Chap 88: Chapter 88" class="item-link" data-shortname="Chapter 88">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 88: Chapter 88</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154610" data-number="87" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-87" title="Chap 87: Chapter 87" class="item-link" data-shortname="Chapter 87">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 87: Chapter 87</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154608" data-number="86" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-86" title="Chap 86: Chapter 86" class="item-link" data-shortname="Chapter 86">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 86: Chapter 86</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154606" data-number="85" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-85" title="Chap 85: Chapter 85" class="item-link" data-shortname="Chapter 85">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 85: Chapter 85</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154604" data-number="84" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-84" title="Chap 84: Chapter 84" class="item-link" data-shortname="Chapter 84">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 84: Chapter 84</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154602" data-number="83" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-83" title="Chap 83: Chapter 83" class="item-link" data-shortname="Chapter 83">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 83: Chapter 83</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154600" data-number="82" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-82" title="Chap 82: Chapter 82" class="item-link" data-shortname="Chapter 82">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 82: Chapter 82</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154598" data-number="81" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-81" title="Chap 81: Chapter 81" class="item-link" data-shortname="Chapter 81">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 81: Chapter 81</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154596" data-number="80" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-80" title="Chap 80: Chapter 80" class="item-link" data-shortname="Chapter 80">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 80: Chapter 80</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154594" data-number="79" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-79" title="Chap 79: Chapter 79" class="item-link" data-shortname="Chapter 79">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 79: Chapter 79</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154592" data-number="78" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-78" title="Chap 78: Chapter 78" class="item-link" data-shortname="Chapter 78">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 78: Chapter 78</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154590" data-number="77" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-77" title="Chap 77: Chapter 77" class="item-link" data-shortname="Chapter 77">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 77: Chapter 77</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154588" data-number="76" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-76" title="Chap 76: Chapter 76" class="item-link" data-shortname="Chapter 76">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 76: Chapter 76</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154586" data-number="75" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-75" title="Chap 75: Chapter 75" class="item-link" data-shortname="Chapter 75">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 75: Chapter 75</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154584" data-number="74" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-74" title="Chap 74: Chapter 74" class="item-link" data-shortname="Chapter 74">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 74: Chapter 74</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154582" data-number="73" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-73" title="Chap 73: Chapter 73" class="item-link" data-shortname="Chapter 73">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 73: Chapter 73</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154580" data-number="72" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-72" title="Chap 72: Chapter 72" class="item-link" data-shortname="Chapter 72">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 72: Chapter 72</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154578" data-number="71" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-71" title="Chap 71: Chapter 71" class="item-link" data-shortname="Chapter 71">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 71: Chapter 71</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154576" data-number="70" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-70" title="Chap 70: Chapter 70" class="item-link" data-shortname="Chapter 70">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 70: Chapter 70</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154574" data-number="69" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-69" title="Chap 69: Chapter 69" class="item-link" data-shortname="Chapter 69">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 69: Chapter 69</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154572" data-number="68" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-68" title="Chap 68: Chapter 68" class="item-link" data-shortname="Chapter 68">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 68: Chapter 68</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154570" data-number="67" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-67" title="Chap 67: Chapter 67" class="item-link" data-shortname="Chapter 67">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 67: Chapter 67</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154568" data-number="66" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-66" title="Chap 66: Chapter 66" class="item-link" data-shortname="Chapter 66">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 66: Chapter 66</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154566" data-number="65" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-65" title="Chap 65: Chapter 65" class="item-link" data-shortname="Chapter 65">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 65: Chapter 65</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154564" data-number="64" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-64" title="Chap 64: Chapter 64" class="item-link" data-shortname="Chapter 64">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 64: Chapter 64</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154562" data-number="63" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-63" title="Chap 63: Chapter 63" class="item-link" data-shortname="Chapter 63">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 63: Chapter 63</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154560" data-number="62" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-62" title="Chap 62: Chapter 62" class="item-link" data-shortname="Chapter 62">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 62: Chapter 62</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154558" data-number="61" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-61" title="Chap 61: Chapter 61" class="item-link" data-shortname="Chapter 61">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 61: Chapter 61</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154556" data-number="60" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-60" title="Chap 60: Chapter 60" class="item-link" data-shortname="Chapter 60">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 60: Chapter 60</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154554" data-number="59" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-59" title="Chap 59: Chapter 59" class="item-link" data-shortname="Chapter 59">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 59: Chapter 59</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154552" data-number="58" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-58" title="Chap 58: Chapter 58" class="item-link" data-shortname="Chapter 58">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 58: Chapter 58</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154550" data-number="57" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-57" title="Chap 57: Chapter 57" class="item-link" data-shortname="Chapter 57">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 57: Chapter 57</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154548" data-number="56" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-56" title="Chap 56: Chapter 56" class="item-link" data-shortname="Chapter 56">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 56: Chapter 56</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154546" data-number="55" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-55" title="Chap 55: Chapter 55" class="item-link" data-shortname="Chapter 55">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 55: Chapter 55</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154544" data-number="54" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-54" title="Chap 54: Chapter 54" class="item-link" data-shortname="Chapter 54">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 54: Chapter 54</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154542" data-number="53" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-53" title="Chap 53: Chapter 53" class="item-link" data-shortname="Chapter 53">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 53: Chapter 53</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154540" data-number="52" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-52" title="Chap 52: Chapter 52" class="item-link" data-shortname="Chapter 52">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 52: Chapter 52</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154538" data-number="51" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-51" title="Chap 51: Chapter 51" class="item-link" data-shortname="Chapter 51">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 51: Chapter 51</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154536" data-number="50" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-50" title="Chap 50: Chapter 50" class="item-link" data-shortname="Chapter 50">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 50: Chapter 50</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154534" data-number="49" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-49" title="Chap 49: Chapter 49" class="item-link" data-shortname="Chapter 49">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 49: Chapter 49</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154532" data-number="48" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-48" title="Chap 48: Chapter 48" class="item-link" data-shortname="Chapter 48">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 48: Chapter 48</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154530" data-number="47" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-47" title="Chap 47: Chapter 47" class="item-link" data-shortname="Chapter 47">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 47: Chapter 47</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154528" data-number="46" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-46" title="Chap 46: Chapter 46" class="item-link" data-shortname="Chapter 46">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 46: Chapter 46</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154526" data-number="45" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-45" title="Chap 45: Chapter 45" class="item-link" data-shortname="Chapter 45">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 45: Chapter 45</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154524" data-number="44" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-44" title="Chap 44: Chapter 44" class="item-link" data-shortname="Chapter 44">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 44: Chapter 44</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154522" data-number="43" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-43" title="Chap 43: Chapter 43" class="item-link" data-shortname="Chapter 43">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 43: Chapter 43</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154520" data-number="42" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-42" title="Chap 42: Chapter 42" class="item-link" data-shortname="Chapter 42">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 42: Chapter 42</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154518" data-number="41" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-41" title="Chap 41: Chapter 41" class="item-link" data-shortname="Chapter 41">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 41: Chapter 41</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154516" data-number="40" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-40" title="Chap 40: Chapter 40" class="item-link" data-shortname="Chapter 40">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 40: Chapter 40</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154514" data-number="39" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-39" title="Chap 39: Chapter 39" class="item-link" data-shortname="Chapter 39">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 39: Chapter 39</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154512" data-number="38" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-38" title="Chap 38: Chapter 38" class="item-link" data-shortname="Chapter 38">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 38: Chapter 38</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154510" data-number="37" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-37" title="Chap 37: Chapter 37" class="item-link" data-shortname="Chapter 37">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 37: Chapter 37</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154508" data-number="36" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-36" title="Chap 36: Chapter 36" class="item-link" data-shortname="Chapter 36">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 36: Chapter 36</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154506" data-number="35" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-35" title="Chap 35: Chapter 35" class="item-link" data-shortname="Chapter 35">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 35: Chapter 35</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154504" data-number="34" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-34" title="Chap 34: Chapter 34" class="item-link" data-shortname="Chapter 34">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 34: Chapter 34</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154502" data-number="33" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-33" title="Chap 33: Chapter 33" class="item-link" data-shortname="Chapter 33">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 33: Chapter 33</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154500" data-number="32" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-32" title="Chap 32: Chapter 32" class="item-link" data-shortname="Chapter 32">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 32: Chapter 32</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154498" data-number="31" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-31" title="Chap 31: Chapter 31" class="item-link" data-shortname="Chapter 31">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 31: Chapter 31</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154496" data-number="30" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-30" title="Chap 30: Chapter 30" class="item-link" data-shortname="Chapter 30">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 30: Chapter 30</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154494" data-number="29" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-29" title="Chap 29: Chapter 29" class="item-link" data-shortname="Chapter 29">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 29: Chapter 29</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154492" data-number="28" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-28" title="Chap 28: Chapter 28" class="item-link" data-shortname="Chapter 28">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 28: Chapter 28</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154380" data-number="27" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-27" title="Chap 27: Chapter 27" class="item-link" data-shortname="Chapter 27">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 27: Chapter 27</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154488" data-number="26" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-26" title="Chap 26: Chapter 26" class="item-link" data-shortname="Chapter 26">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 26: Chapter 26</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154486" data-number="25" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-25" title="Chap 25: Chapter 25" class="item-link" data-shortname="Chapter 25">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 25: Chapter 25</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154484" data-number="24" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-24" title="Chap 24: Chapter 24" class="item-link" data-shortname="Chapter 24">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 24: Chapter 24</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154482" data-number="23" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-23" title="Chap 23: Chapter 23" class="item-link" data-shortname="Chapter 23">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 23: Chapter 23</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154480" data-number="22" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-22" title="Chap 22: Chapter 22" class="item-link" data-shortname="Chapter 22">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 22: Chapter 22</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154478" data-number="21" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-21" title="Chap 21: Chapter 21" class="item-link" data-shortname="Chapter 21">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 21: Chapter 21</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154476" data-number="20" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-20" title="Chap 20: Chapter 20" class="item-link" data-shortname="Chapter 20">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 20: Chapter 20</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154474" data-number="19" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-19" title="Chap 19: Chapter 19" class="item-link" data-shortname="Chapter 19">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 19: Chapter 19</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154472" data-number="18" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-18" title="Chap 18: Chapter 18" class="item-link" data-shortname="Chapter 18">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 18: Chapter 18</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154470" data-number="17" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-17" title="Chap 17: Chapter 17" class="item-link" data-shortname="Chapter 17">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 17: Chapter 17</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154468" data-number="16" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-16" title="Chap 16: Chapter 16" class="item-link" data-shortname="Chapter 16">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 16: Chapter 16</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154466" data-number="15" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-15" title="Chap 15: Chapter 15" class="item-link" data-shortname="Chapter 15">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 15: Chapter 15</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154464" data-number="14" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-14" title="Chap 14: Chapter 14" class="item-link" data-shortname="Chapter 14">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 14: Chapter 14</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154462" data-number="13" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-13" title="Chap 13: Chapter 13" class="item-link" data-shortname="Chapter 13">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 13: Chapter 13</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154460" data-number="12" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-12" title="Chap 12: Chapter 12" class="item-link" data-shortname="Chapter 12">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 12: Chapter 12</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154458" data-number="11" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-11" title="Chap 11: Chapter 11" class="item-link" data-shortname="Chapter 11">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 11: Chapter 11</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154456" data-number="10" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-10" title="Chap 10: Chapter 10" class="item-link" data-shortname="Chapter 10">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 10: Chapter 10</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154454" data-number="9" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-9" title="Chap 9: Chapter 9" class="item-link" data-shortname="Chapter 9">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 9: Chapter 9</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154452" data-number="8" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-8" title="Chap 8: Chapter 8" class="item-link" data-shortname="Chapter 8">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 8: Chapter 8</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154450" data-number="7" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-7" title="Chap 7: Chapter 7" class="item-link" data-shortname="Chapter 7">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 7: Chapter 7</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154448" data-number="6" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-6" title="Chap 6: Chapter 6" class="item-link" data-shortname="Chapter 6">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 6: Chapter 6</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154446" data-number="5" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-5" title="Chap 5: Chapter 5" class="item-link" data-shortname="Chapter 5">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 5: Chapter 5</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154444" data-number="4" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-4" title="Chap 4: Chapter 4" class="item-link" data-shortname="Chapter 4">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 4: Chapter 4</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154442" data-number="3" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-3" title="Chap 3: Chapter 3" class="item-link" data-shortname="Chapter 3">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 3: Chapter 3</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154440" data-number="2" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-2" title="Chap 2: Chapter 2" class="item-link" data-shortname="Chapter 2">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 2: Chapter 2</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154438" data-number="1" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-1" title="Chap 1: Chapter 1" class="item-link" data-shortname="Chapter 1">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 1: Chapter 1</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="154490" data-number="0" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/en/chapter-0" title="Chap 0: Chapter 0" class="item-link" data-shortname="Chapter 0">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 0: Chapter 0</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                    </ul>
                
                    <ul class="ulclear reading-list lang-chapters" id="ko-chapters" style="display:none;">
                        
                        <li class="item reading-item chapter-item" data-id="539812" data-number="179" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-179" title="Chap 179: Chapter 179" class="item-link" data-shortname="Chapter 179">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 179: Chapter 179</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="539810" data-number="178" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-178" title="Chap 178: Chapter 178" class="item-link" data-shortname="Chapter 178">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 178: Chapter 178</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="539808" data-number="177" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-177" title="Chap 177: Chapter 177" class="item-link" data-shortname="Chapter 177">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 177: Chapter 177</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="454648" data-number="176" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-176" title="Chap 176: Chapter 176" class="item-link" data-shortname="Chapter 176">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 176: Chapter 176</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407340" data-number="175" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-175" title="Chap 175: Chapter 175" class="item-link" data-shortname="Chapter 175">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 175: Chapter 175</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407338" data-number="174" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-174" title="Chap 174: Chapter 174" class="item-link" data-shortname="Chapter 174">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 174: Chapter 174</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407336" data-number="173" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-173" title="Chap 173: Chapter 173" class="item-link" data-shortname="Chapter 173">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 173: Chapter 173</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407334" data-number="172" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-172" title="Chap 172: Chapter 172" class="item-link" data-shortname="Chapter 172">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 172: Chapter 172</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407332" data-number="171" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-171" title="Chap 171: Chapter 171" class="item-link" data-shortname="Chapter 171">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 171: Chapter 171</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407330" data-number="170" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-170" title="Chap 170: Chapter 170" class="item-link" data-shortname="Chapter 170">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 170: Chapter 170</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407328" data-number="169" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-169" title="Chap 169: Chapter 169" class="item-link" data-shortname="Chapter 169">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 169: Chapter 169</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407326" data-number="168" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-168" title="Chap 168: Chapter 168" class="item-link" data-shortname="Chapter 168">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 168: Chapter 168</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407324" data-number="167" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-167" title="Chap 167: Chapter 167" class="item-link" data-shortname="Chapter 167">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 167: Chapter 167</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407322" data-number="166" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-166" title="Chap 166: Chapter 166" class="item-link" data-shortname="Chapter 166">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 166: Chapter 166</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407320" data-number="165" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-165" title="Chap 165: Chapter 165" class="item-link" data-shortname="Chapter 165">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 165: Chapter 165</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407318" data-number="164" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-164" title="Chap 164: Chapter 164" class="item-link" data-shortname="Chapter 164">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 164: Chapter 164</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407316" data-number="163" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-163" title="Chap 163: Chapter 163" class="item-link" data-shortname="Chapter 163">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 163: Chapter 163</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407314" data-number="162" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-162" title="Chap 162: Chapter 162" class="item-link" data-shortname="Chapter 162">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 162: Chapter 162</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407312" data-number="161" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-161" title="Chap 161: Chapter 161" class="item-link" data-shortname="Chapter 161">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 161: Chapter 161</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407310" data-number="160" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-160" title="Chap 160: Chapter 160" class="item-link" data-shortname="Chapter 160">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 160: Chapter 160</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407308" data-number="159" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-159" title="Chap 159: Chapter 159" class="item-link" data-shortname="Chapter 159">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 159: Chapter 159</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407306" data-number="158" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-158" title="Chap 158: Chapter 158" class="item-link" data-shortname="Chapter 158">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 158: Chapter 158</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407304" data-number="157" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-157" title="Chap 157: Chapter 157" class="item-link" data-shortname="Chapter 157">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 157: Chapter 157</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407302" data-number="156" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-156" title="Chap 156: Chapter 156" class="item-link" data-shortname="Chapter 156">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 156: Chapter 156</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407300" data-number="155" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-155" title="Chap 155: Chapter 155" class="item-link" data-shortname="Chapter 155">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 155: Chapter 155</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407298" data-number="154" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-154" title="Chap 154: Chapter 154" class="item-link" data-shortname="Chapter 154">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 154: Chapter 154</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407296" data-number="153" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-153" title="Chap 153: Chapter 153" class="item-link" data-shortname="Chapter 153">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 153: Chapter 153</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407294" data-number="152" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-152" title="Chap 152: Chapter 152" class="item-link" data-shortname="Chapter 152">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 152: Chapter 152</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407292" data-number="151" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-151" title="Chap 151: Chapter 151" class="item-link" data-shortname="Chapter 151">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 151: Chapter 151</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407290" data-number="150" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-150" title="Chap 150: Chapter 150" class="item-link" data-shortname="Chapter 150">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 150: Chapter 150</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407288" data-number="149" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-149" title="Chap 149: Chapter 149" class="item-link" data-shortname="Chapter 149">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 149: Chapter 149</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407286" data-number="148" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-148" title="Chap 148: Chapter 148" class="item-link" data-shortname="Chapter 148">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 148: Chapter 148</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407284" data-number="147" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-147" title="Chap 147: Chapter 147" class="item-link" data-shortname="Chapter 147">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 147: Chapter 147</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407282" data-number="146" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-146" title="Chap 146: Chapter 146" class="item-link" data-shortname="Chapter 146">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 146: Chapter 146</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407280" data-number="145" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-145" title="Chap 145: Chapter 145" class="item-link" data-shortname="Chapter 145">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 145: Chapter 145</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407278" data-number="144" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-144" title="Chap 144: Chapter 144" class="item-link" data-shortname="Chapter 144">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 144: Chapter 144</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407276" data-number="143" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-143" title="Chap 143: Chapter 143" class="item-link" data-shortname="Chapter 143">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 143: Chapter 143</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407274" data-number="142" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-142" title="Chap 142: Chapter 142" class="item-link" data-shortname="Chapter 142">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 142: Chapter 142</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407272" data-number="141" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-141" title="Chap 141: Chapter 141" class="item-link" data-shortname="Chapter 141">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 141: Chapter 141</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407270" data-number="140" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-140" title="Chap 140: Chapter 140" class="item-link" data-shortname="Chapter 140">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 140: Chapter 140</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407268" data-number="139" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-139" title="Chap 139: Chapter 139" class="item-link" data-shortname="Chapter 139">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 139: Chapter 139</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407266" data-number="138" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-138" title="Chap 138: Chapter 138" class="item-link" data-shortname="Chapter 138">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 138: Chapter 138</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407264" data-number="137" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-137" title="Chap 137: Chapter 137" class="item-link" data-shortname="Chapter 137">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 137: Chapter 137</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407262" data-number="136" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-136" title="Chap 136: Chapter 136" class="item-link" data-shortname="Chapter 136">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 136: Chapter 136</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407260" data-number="135" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-135" title="Chap 135: Chapter 135" class="item-link" data-shortname="Chapter 135">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 135: Chapter 135</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407258" data-number="134" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-134" title="Chap 134: Chapter 134" class="item-link" data-shortname="Chapter 134">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 134: Chapter 134</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407256" data-number="133" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-133" title="Chap 133: Chapter 133" class="item-link" data-shortname="Chapter 133">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 133: Chapter 133</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407254" data-number="132" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-132" title="Chap 132: Chapter 132" class="item-link" data-shortname="Chapter 132">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 132: Chapter 132</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407252" data-number="131" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-131" title="Chap 131: Chapter 131" class="item-link" data-shortname="Chapter 131">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 131: Chapter 131</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407250" data-number="130" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-130" title="Chap 130: Chapter 130" class="item-link" data-shortname="Chapter 130">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 130: Chapter 130</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407248" data-number="129" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-129" title="Chap 129: Chapter 129" class="item-link" data-shortname="Chapter 129">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 129: Chapter 129</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407246" data-number="128" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-128" title="Chap 128: Chapter 128" class="item-link" data-shortname="Chapter 128">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 128: Chapter 128</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407244" data-number="127" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-127" title="Chap 127: Chapter 127" class="item-link" data-shortname="Chapter 127">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 127: Chapter 127</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407242" data-number="126" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-126" title="Chap 126: Chapter 126" class="item-link" data-shortname="Chapter 126">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 126: Chapter 126</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407240" data-number="125" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-125" title="Chap 125: Chapter 125" class="item-link" data-shortname="Chapter 125">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 125: Chapter 125</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407238" data-number="124" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-124" title="Chap 124: Chapter 124" class="item-link" data-shortname="Chapter 124">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 124: Chapter 124</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407236" data-number="123" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-123" title="Chap 123: Chapter 123" class="item-link" data-shortname="Chapter 123">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 123: Chapter 123</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407234" data-number="122" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-122" title="Chap 122: Chapter 122" class="item-link" data-shortname="Chapter 122">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 122: Chapter 122</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407232" data-number="121" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-121" title="Chap 121: Chapter 121" class="item-link" data-shortname="Chapter 121">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 121: Chapter 121</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407230" data-number="120" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-120" title="Chap 120: Chapter 120" class="item-link" data-shortname="Chapter 120">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 120: Chapter 120</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407228" data-number="119" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-119" title="Chap 119: Chapter 119" class="item-link" data-shortname="Chapter 119">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 119: Chapter 119</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407226" data-number="118" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-118" title="Chap 118: Chapter 118" class="item-link" data-shortname="Chapter 118">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 118: Chapter 118</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407224" data-number="117" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-117" title="Chap 117: Chapter 117" class="item-link" data-shortname="Chapter 117">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 117: Chapter 117</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407222" data-number="116" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-116" title="Chap 116: Chapter 116" class="item-link" data-shortname="Chapter 116">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 116: Chapter 116</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407220" data-number="115" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-115" title="Chap 115: Chapter 115" class="item-link" data-shortname="Chapter 115">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 115: Chapter 115</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407218" data-number="114" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-114" title="Chap 114: Chapter 114" class="item-link" data-shortname="Chapter 114">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 114: Chapter 114</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407216" data-number="113" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-113" title="Chap 113: Chapter 113" class="item-link" data-shortname="Chapter 113">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 113: Chapter 113</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407214" data-number="112" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-112" title="Chap 112: Chapter 112" class="item-link" data-shortname="Chapter 112">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 112: Chapter 112</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407212" data-number="111" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-111" title="Chap 111: Chapter 111" class="item-link" data-shortname="Chapter 111">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 111: Chapter 111</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407210" data-number="110" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-110" title="Chap 110: Chapter 110" class="item-link" data-shortname="Chapter 110">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 110: Chapter 110</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407208" data-number="109" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-109" title="Chap 109: Chapter 109" class="item-link" data-shortname="Chapter 109">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 109: Chapter 109</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407206" data-number="108" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-108" title="Chap 108: Chapter 108" class="item-link" data-shortname="Chapter 108">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 108: Chapter 108</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407204" data-number="107" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-107" title="Chap 107: Chapter 107" class="item-link" data-shortname="Chapter 107">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 107: Chapter 107</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407202" data-number="106" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-106" title="Chap 106: Chapter 106" class="item-link" data-shortname="Chapter 106">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 106: Chapter 106</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407200" data-number="105" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-105" title="Chap 105: Chapter 105" class="item-link" data-shortname="Chapter 105">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 105: Chapter 105</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407198" data-number="104" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-104" title="Chap 104: Chapter 104" class="item-link" data-shortname="Chapter 104">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 104: Chapter 104</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407196" data-number="103" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-103" title="Chap 103: Chapter 103" class="item-link" data-shortname="Chapter 103">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 103: Chapter 103</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407194" data-number="102" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-102" title="Chap 102: Chapter 102" class="item-link" data-shortname="Chapter 102">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 102: Chapter 102</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407192" data-number="101" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-101" title="Chap 101: Chapter 101" class="item-link" data-shortname="Chapter 101">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 101: Chapter 101</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407190" data-number="100" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-100" title="Chap 100: Chapter 100" class="item-link" data-shortname="Chapter 100">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 100: Chapter 100</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407188" data-number="99" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-99" title="Chap 99: Chapter 99" class="item-link" data-shortname="Chapter 99">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 99: Chapter 99</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407186" data-number="98" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-98" title="Chap 98: Chapter 98" class="item-link" data-shortname="Chapter 98">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 98: Chapter 98</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407184" data-number="97" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-97" title="Chap 97: Chapter 97" class="item-link" data-shortname="Chapter 97">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 97: Chapter 97</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407182" data-number="96" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-96" title="Chap 96: Chapter 96" class="item-link" data-shortname="Chapter 96">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 96: Chapter 96</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407180" data-number="95" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-95" title="Chap 95: Chapter 95" class="item-link" data-shortname="Chapter 95">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 95: Chapter 95</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407178" data-number="94" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-94" title="Chap 94: Chapter 94" class="item-link" data-shortname="Chapter 94">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 94: Chapter 94</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407176" data-number="93" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-93" title="Chap 93: Chapter 93" class="item-link" data-shortname="Chapter 93">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 93: Chapter 93</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407174" data-number="92" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-92" title="Chap 92: Chapter 92" class="item-link" data-shortname="Chapter 92">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 92: Chapter 92</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407172" data-number="91" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-91" title="Chap 91: Chapter 91" class="item-link" data-shortname="Chapter 91">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 91: Chapter 91</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407170" data-number="90" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-90" title="Chap 90: Chapter 90" class="item-link" data-shortname="Chapter 90">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 90: Chapter 90</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407168" data-number="89" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-89" title="Chap 89: Chapter 89" class="item-link" data-shortname="Chapter 89">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 89: Chapter 89</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407166" data-number="88" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-88" title="Chap 88: Chapter 88" class="item-link" data-shortname="Chapter 88">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 88: Chapter 88</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407164" data-number="87" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-87" title="Chap 87: Chapter 87" class="item-link" data-shortname="Chapter 87">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 87: Chapter 87</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407162" data-number="86" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-86" title="Chap 86: Chapter 86" class="item-link" data-shortname="Chapter 86">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 86: Chapter 86</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407160" data-number="85" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-85" title="Chap 85: Chapter 85" class="item-link" data-shortname="Chapter 85">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 85: Chapter 85</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407158" data-number="84" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-84" title="Chap 84: Chapter 84" class="item-link" data-shortname="Chapter 84">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 84: Chapter 84</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407156" data-number="83" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-83" title="Chap 83: Chapter 83" class="item-link" data-shortname="Chapter 83">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 83: Chapter 83</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407154" data-number="82" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-82" title="Chap 82: Chapter 82" class="item-link" data-shortname="Chapter 82">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 82: Chapter 82</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407152" data-number="81" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-81" title="Chap 81: Chapter 81" class="item-link" data-shortname="Chapter 81">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 81: Chapter 81</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407150" data-number="80" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-80" title="Chap 80: Chapter 80" class="item-link" data-shortname="Chapter 80">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 80: Chapter 80</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407148" data-number="79" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-79" title="Chap 79: Chapter 79" class="item-link" data-shortname="Chapter 79">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 79: Chapter 79</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407146" data-number="78" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-78" title="Chap 78: Chapter 78" class="item-link" data-shortname="Chapter 78">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 78: Chapter 78</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407144" data-number="77" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-77" title="Chap 77: Chapter 77" class="item-link" data-shortname="Chapter 77">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 77: Chapter 77</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407142" data-number="76" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-76" title="Chap 76: Chapter 76" class="item-link" data-shortname="Chapter 76">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 76: Chapter 76</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407140" data-number="75" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-75" title="Chap 75: Chapter 75" class="item-link" data-shortname="Chapter 75">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 75: Chapter 75</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407138" data-number="74" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-74" title="Chap 74: Chapter 74" class="item-link" data-shortname="Chapter 74">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 74: Chapter 74</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407136" data-number="73" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-73" title="Chap 73: Chapter 73" class="item-link" data-shortname="Chapter 73">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 73: Chapter 73</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407134" data-number="72" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-72" title="Chap 72: Chapter 72" class="item-link" data-shortname="Chapter 72">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 72: Chapter 72</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407132" data-number="71" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-71" title="Chap 71: Chapter 71" class="item-link" data-shortname="Chapter 71">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 71: Chapter 71</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407130" data-number="70" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-70" title="Chap 70: Chapter 70" class="item-link" data-shortname="Chapter 70">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 70: Chapter 70</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407128" data-number="69" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-69" title="Chap 69: Chapter 69" class="item-link" data-shortname="Chapter 69">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 69: Chapter 69</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407126" data-number="68" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-68" title="Chap 68: Chapter 68" class="item-link" data-shortname="Chapter 68">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 68: Chapter 68</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407124" data-number="67" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-67" title="Chap 67: Chapter 67" class="item-link" data-shortname="Chapter 67">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 67: Chapter 67</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407122" data-number="66" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-66" title="Chap 66: Chapter 66" class="item-link" data-shortname="Chapter 66">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 66: Chapter 66</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407120" data-number="65" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-65" title="Chap 65: Chapter 65" class="item-link" data-shortname="Chapter 65">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 65: Chapter 65</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407118" data-number="64" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-64" title="Chap 64: Chapter 64" class="item-link" data-shortname="Chapter 64">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 64: Chapter 64</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407116" data-number="63" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-63" title="Chap 63: Chapter 63" class="item-link" data-shortname="Chapter 63">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 63: Chapter 63</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407114" data-number="62" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-62" title="Chap 62: Chapter 62" class="item-link" data-shortname="Chapter 62">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 62: Chapter 62</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407112" data-number="61" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-61" title="Chap 61: Chapter 61" class="item-link" data-shortname="Chapter 61">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 61: Chapter 61</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407110" data-number="60" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-60" title="Chap 60: Chapter 60" class="item-link" data-shortname="Chapter 60">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 60: Chapter 60</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407108" data-number="59" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-59" title="Chap 59: Chapter 59" class="item-link" data-shortname="Chapter 59">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 59: Chapter 59</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407106" data-number="58" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-58" title="Chap 58: Chapter 58" class="item-link" data-shortname="Chapter 58">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 58: Chapter 58</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407104" data-number="57" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-57" title="Chap 57: Chapter 57" class="item-link" data-shortname="Chapter 57">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 57: Chapter 57</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407102" data-number="56" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-56" title="Chap 56: Chapter 56" class="item-link" data-shortname="Chapter 56">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 56: Chapter 56</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407100" data-number="55" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-55" title="Chap 55: Chapter 55" class="item-link" data-shortname="Chapter 55">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 55: Chapter 55</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407098" data-number="54" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-54" title="Chap 54: Chapter 54" class="item-link" data-shortname="Chapter 54">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 54: Chapter 54</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407096" data-number="53" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-53" title="Chap 53: Chapter 53" class="item-link" data-shortname="Chapter 53">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 53: Chapter 53</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407094" data-number="52" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-52" title="Chap 52: Chapter 52" class="item-link" data-shortname="Chapter 52">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 52: Chapter 52</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407092" data-number="51" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-51" title="Chap 51: Chapter 51" class="item-link" data-shortname="Chapter 51">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 51: Chapter 51</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407090" data-number="50" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-50" title="Chap 50: Chapter 50" class="item-link" data-shortname="Chapter 50">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 50: Chapter 50</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407088" data-number="49" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-49" title="Chap 49: Chapter 49" class="item-link" data-shortname="Chapter 49">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 49: Chapter 49</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407086" data-number="48" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-48" title="Chap 48: Chapter 48" class="item-link" data-shortname="Chapter 48">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 48: Chapter 48</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407084" data-number="47" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-47" title="Chap 47: Chapter 47" class="item-link" data-shortname="Chapter 47">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 47: Chapter 47</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407082" data-number="46" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-46" title="Chap 46: Chapter 46" class="item-link" data-shortname="Chapter 46">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 46: Chapter 46</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407080" data-number="45" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-45" title="Chap 45: Chapter 45" class="item-link" data-shortname="Chapter 45">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 45: Chapter 45</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407078" data-number="44" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-44" title="Chap 44: Chapter 44" class="item-link" data-shortname="Chapter 44">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 44: Chapter 44</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407076" data-number="43" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-43" title="Chap 43: Chapter 43" class="item-link" data-shortname="Chapter 43">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 43: Chapter 43</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407074" data-number="42" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-42" title="Chap 42: Chapter 42" class="item-link" data-shortname="Chapter 42">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 42: Chapter 42</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407072" data-number="41" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-41" title="Chap 41: Chapter 41" class="item-link" data-shortname="Chapter 41">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 41: Chapter 41</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407070" data-number="40" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-40" title="Chap 40: Chapter 40" class="item-link" data-shortname="Chapter 40">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 40: Chapter 40</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407068" data-number="39" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-39" title="Chap 39: Chapter 39" class="item-link" data-shortname="Chapter 39">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 39: Chapter 39</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407066" data-number="38" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-38" title="Chap 38: Chapter 38" class="item-link" data-shortname="Chapter 38">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 38: Chapter 38</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407064" data-number="37" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-37" title="Chap 37: Chapter 37" class="item-link" data-shortname="Chapter 37">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 37: Chapter 37</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407062" data-number="36" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-36" title="Chap 36: Chapter 36" class="item-link" data-shortname="Chapter 36">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 36: Chapter 36</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407060" data-number="35" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-35" title="Chap 35: Chapter 35" class="item-link" data-shortname="Chapter 35">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 35: Chapter 35</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407058" data-number="34" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-34" title="Chap 34: Chapter 34" class="item-link" data-shortname="Chapter 34">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 34: Chapter 34</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407056" data-number="33" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-33" title="Chap 33: Chapter 33" class="item-link" data-shortname="Chapter 33">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 33: Chapter 33</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407054" data-number="32" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-32" title="Chap 32: Chapter 32" class="item-link" data-shortname="Chapter 32">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 32: Chapter 32</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407052" data-number="31" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-31" title="Chap 31: Chapter 31" class="item-link" data-shortname="Chapter 31">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 31: Chapter 31</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407050" data-number="30" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-30" title="Chap 30: Chapter 30" class="item-link" data-shortname="Chapter 30">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 30: Chapter 30</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407048" data-number="29" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-29" title="Chap 29: Chapter 29" class="item-link" data-shortname="Chapter 29">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 29: Chapter 29</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407046" data-number="28" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-28" title="Chap 28: Chapter 28" class="item-link" data-shortname="Chapter 28">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 28: Chapter 28</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407044" data-number="27" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-27" title="Chap 27: Chapter 27" class="item-link" data-shortname="Chapter 27">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 27: Chapter 27</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407042" data-number="26" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-26" title="Chap 26: Chapter 26" class="item-link" data-shortname="Chapter 26">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 26: Chapter 26</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407040" data-number="25" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-25" title="Chap 25: Chapter 25" class="item-link" data-shortname="Chapter 25">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 25: Chapter 25</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407038" data-number="24" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-24" title="Chap 24: Chapter 24" class="item-link" data-shortname="Chapter 24">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 24: Chapter 24</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407036" data-number="23" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-23" title="Chap 23: Chapter 23" class="item-link" data-shortname="Chapter 23">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 23: Chapter 23</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407034" data-number="22" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-22" title="Chap 22: Chapter 22" class="item-link" data-shortname="Chapter 22">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 22: Chapter 22</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407032" data-number="21" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-21" title="Chap 21: Chapter 21" class="item-link" data-shortname="Chapter 21">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 21: Chapter 21</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407030" data-number="20" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-20" title="Chap 20: Chapter 20" class="item-link" data-shortname="Chapter 20">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 20: Chapter 20</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407028" data-number="19" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-19" title="Chap 19: Chapter 19" class="item-link" data-shortname="Chapter 19">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 19: Chapter 19</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407026" data-number="18" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-18" title="Chap 18: Chapter 18" class="item-link" data-shortname="Chapter 18">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 18: Chapter 18</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407024" data-number="17" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-17" title="Chap 17: Chapter 17" class="item-link" data-shortname="Chapter 17">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 17: Chapter 17</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407022" data-number="16" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-16" title="Chap 16: Chapter 16" class="item-link" data-shortname="Chapter 16">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 16: Chapter 16</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407020" data-number="15" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-15" title="Chap 15: Chapter 15" class="item-link" data-shortname="Chapter 15">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 15: Chapter 15</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407018" data-number="14" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-14" title="Chap 14: Chapter 14" class="item-link" data-shortname="Chapter 14">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 14: Chapter 14</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407016" data-number="13" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-13" title="Chap 13: Chapter 13" class="item-link" data-shortname="Chapter 13">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 13: Chapter 13</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407014" data-number="12" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-12" title="Chap 12: Chapter 12" class="item-link" data-shortname="Chapter 12">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 12: Chapter 12</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407012" data-number="11" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-11" title="Chap 11: Chapter 11" class="item-link" data-shortname="Chapter 11">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 11: Chapter 11</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407010" data-number="10" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-10" title="Chap 10: Chapter 10" class="item-link" data-shortname="Chapter 10">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 10: Chapter 10</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407008" data-number="9" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-9" title="Chap 9: Chapter 9" class="item-link" data-shortname="Chapter 9">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 9: Chapter 9</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407006" data-number="8" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-8" title="Chap 8: Chapter 8" class="item-link" data-shortname="Chapter 8">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 8: Chapter 8</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407004" data-number="7" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-7" title="Chap 7: Chapter 7" class="item-link" data-shortname="Chapter 7">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 7: Chapter 7</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407002" data-number="6" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-6" title="Chap 6: Chapter 6" class="item-link" data-shortname="Chapter 6">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 6: Chapter 6</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407000" data-number="5" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-5" title="Chap 5: Chapter 5" class="item-link" data-shortname="Chapter 5">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 5: Chapter 5</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="406998" data-number="4" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-4" title="Chap 4: Chapter 4" class="item-link" data-shortname="Chapter 4">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 4: Chapter 4</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="406996" data-number="3" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-3" title="Chap 3: Chapter 3" class="item-link" data-shortname="Chapter 3">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 3: Chapter 3</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="406994" data-number="2" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-2" title="Chap 2: Chapter 2" class="item-link" data-shortname="Chapter 2">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 2: Chapter 2</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="406992" data-number="1" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-1" title="Chap 1: Chapter 1" class="item-link" data-shortname="Chapter 1">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 1: Chapter 1</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                        <li class="item reading-item chapter-item" data-id="407342" data-number="0" data-reading-mode="1">
                            <a href="/read/solo-leveling-21/ko/chapter-0" title="Chap 0: chapter 0" class="item-link" data-shortname="Chapter 0">
                                <span class="arrow mr-2"><i class="fas fa-caret-right"></i></span>
                                <span class="name">Chap 0: chapter 0</span>
                            </a>
                            <div class="clearfix"></div>
                        </li>
                        
                    </ul>
                
            </div>
        </div>
    </div>
</div></div>
                    <div class="rt-item rt-navi">
                        <button type="button" class="btn btn-navi" onclick="prevChapterVolume()"><i class="fas fa-arrow-left mr-2"></i>
                        </button>
                    </div>
                    <div class="rt-item rt-navi right">
                        <button type="button" class="btn btn-navi" onclick="nextChapterVolume()"><i class="fas fa-arrow-right ml-2"></i>
                        </button>
                    </div>
                    <div class="clearfix"></div>
                </div>
                <div class="float-right hr-right">
                    <div class="hr-comment mr-2">
                        <a href="javascript:;" class="btn btn-sm hrr-btn">
                            <i class="far fa-comment-alt"></i>
                            <span class="number">8832</span>
                            <span class="hrr-name">Comments</span>
                        </a>
                        <div class="clearfix"></div>
                    </div>
                    <div class="hr-setting mr-2" style="">
                        <a class="btn btn-sm hrr-btn"><i class="fas fa-cog"></i><span class="hrr-name">Settings</span></a>
                        <div class="clearfix"></div>
                    </div>
                    <div class="hr-info mr-2">
                        <a href="/solo-leveling-21" class="btn btn-sm hrr-btn"><i class="fas fa-info"></i><span class="hrr-name">Manga Detail</span></a>
                        <div class="clearfix"></div>
                    </div>
                    <div class="hr-fav" id="reading-list-info">
<a data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" class="btn btn-sm hrr-btn "><i class="far fa-bookmark"></i><span class="hrr-name">Reading List</span></a>

<div class="dropdown-menu dropdown-menu-model" aria-labelledby="ssc-list">
    
        
            <a class="rl-item dropdown-item" data-type="1" data-manga-id="21" data-page="read" href="javascript:;">Reading
            </a>
        
    
        
            <a class="rl-item dropdown-item" data-type="2" data-manga-id="21" data-page="read" href="javascript:;">On-Hold
            </a>
        
    
        
            <a class="rl-item dropdown-item" data-type="3" data-manga-id="21" data-page="read" href="javascript:;">Plan to read
            </a>
        
    
        
            <a class="rl-item dropdown-item" data-type="4" data-manga-id="21" data-page="read" href="javascript:;">Dropped
            </a>
        
    
        
            <a class="rl-item dropdown-item" data-type="5" data-manga-id="21" data-page="read" href="javascript:;">Completed
            </a>
        
    
    
</div>
<div class="clearfix"></div></div>
                </div>
                <div class="clearfix"></div>
            </div>
            <div class="ad-toggle"><i class="fas fa-expand-arrows-alt"></i></div>
        </div>
    </div>
    <!--End: Header-->
    <div class="clearfix"></div>
    <div class="mr-tools mrt-top">
        <div class="container">
            <div class="read_tool">
                <div class="float-left">
                    <div class="rt-item">
                        <button type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" class="btn">Reading Mode: <span id="current-mode">Vertical</span> <i class="fas fa-angle-down ml-2"></i>
                        </button>
                        <div class="dropdown-menu dropdown-menu-model" aria-labelledby="ssc-list">
                            <a class="dropdown-item mode-item active" data-value="vertical" href="javascript:;">Vertical</a>
                            <a class="dropdown-item mode-item" data-value="horizontal" href="javascript:;">Horizontal</a>
                        </div>
                    </div>
                    <div class="rt-item">
                        <button type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" class="btn">Reading Direction: <span id="current-direction">RTL</span> <i class="fas fa-angle-down ml-2"></i>
                        </button>
                        <div class="dropdown-menu dropdown-menu-model" aria-labelledby="ssc-list">
                            <a class="dropdown-item direction-item active" data-value="rtl" href="javascript:;">RTL</a>
                            <a class="dropdown-item direction-item" data-value="ltr" href="javascript:;">LTR</a>
                        </div>
                    </div>
                    <div class="rt-item">
                        <button type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" class="btn">Quality: <span id="current-quality">Medium</span> <i class="fas fa-angle-down ml-2"></i>
                        </button>
                        <div class="dropdown-menu dropdown-menu-model" aria-labelledby="ssc-list">
                            <a class="dropdown-item quality-item" data-value="high">High</a>
                            <a class="dropdown-item quality-item active" data-value="medium">Medium</a>
                            <a class="dropdown-item quality-item" data-value="low">Low</a>
                        </div>
                    </div>
                    <div class="clearfix"></div>
                </div>
                <div class="float-right">
                    <div class="rt-item" id="rt-close">
                        <button type="button" class="btn"><i class="fas fa-times mr-2"></i>Close</button>
                    </div>
                </div>
                <div class="clearfix"></div>
            </div>
        </div>
    </div>
    <div id="images-content">
        <div id="first-read" style="display: none;">
            <div class="read-tips">
                <div class="read-tips-layout">
                    <div class="rtl-head">Setting for the first time...</div>
                    <div class="description">Select the reading mode you want. You can re-config in <strong class="ml-2"><i class="fas fa-cog mr-2"></i>Settings &gt; Reading Mode</strong>
                    </div>
                    <div class="rtl-rows">
                        <a href="javascript:;" class="rtl-row mode-item active" data-value="vertical">
                            <div class="rtl-btn rtl-ver">
                                <div class="rtl-container">
                                    <span></span><span></span><span></span><span></span><span></span><span></span>
                                </div>
                            </div>
                            <div class="label-row">Vertical Follow</div>
                            <div class="checked"><i class="fas fa-check-circle"></i></div>
                            <div class="clearfix"></div>
                        </a>
                        <a href="javascript:;" class="rtl-row mode-item" data-value="horizontal">
                            <div class="rtl-btn rtl-hoz">
                                <div class="rtl-container">
                                    <span></span><span></span><span></span><span></span><span></span><span></span>
                                </div>
                            </div>
                            <div class="label-row">Horizontal Follow</div>
                            <div class="checked"><i class="fas fa-check-circle"></i></div>
                            <div class="clearfix"></div>
                        </a>
                        <div class="clearfix"></div>
                    </div>
                </div>
            </div>
            <div id="main-wrapper" class="page-layout page-read mb-0">
                <div class="page-read-setting">
                    <div class="anis-cover" style="background-image: url(https://img.mreadercdn.com/_m/300x400/100/33/5c/335c2630179dae77a5caf05d297367e5/335c2630179dae77a5caf05d297367e5.jpg)"></div>
                </div>
            </div>
        </div>
    </div>
    <div class="clearfix"></div>
    <div id="read-comment">
        <div class="rc-close"><span aria-hidden="true">×</span></div>
        <div class="comments-wrap">
            <div class="sc-header">
                <div class="sc-h-title">8832 Comments</div>
                <div class="sc-h-sort">
                    <a class="btn btn-sm" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><i class="fas fa-angle-down mr-2"></i>Sort by</a>
                    <div class="dropdown-menu dropdown-menu-model dropdown-menu-normal" aria-labelledby="ssc-list">
                        <a class="dropdown-item cm-sort" data-value="top" href="javascript:;">Top<i class="fas fa-check ml-2" style="display: none;"></i></a>
                        <a class="dropdown-item cm-sort active" data-value="newest" href="javascript:;">Newest<i class="fas fa-check ml-2"></i></a>
                        <a class="dropdown-item cm-sort" data-value="oldest" href="javascript:;">Oldest<i class="fas fa-check ml-2" style="display: none;"></i></a>
                    </div>
                </div>
                <div class="clearfix"></div>
            </div>
            <div id="content-comments"></div>
        </div>
    </div>
</div>
<div class="modal fade premodal premodal-login" id="modal-auth">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="tab-content">
                <!--Begin: tab login-->
                <div id="modal-tab-login" class="tab-pane active">
                    <div class="modal-header">
                        <h5 class="modal-title" id="modallogintitle">Welcome back!</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">×</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-danger" id="login-error" style="display: none;"></div>
                        <form class="preform" id="login-form" method="post">
                            <div class="form-group">
                                <label class="prelabel" for="email">Email address</label>
                                <input type="text" class="form-control" id="email" placeholder="name@email.com" name="email" required="">
                            </div>
                            <div class="form-group">
                                <label class="prelabel" for="password">Password</label>
                                <input type="password" class="form-control" id="password" placeholder="Password" name="password" required="">
                            </div>
                            <div class="form-check custom-control custom-checkbox">
                                <div class="float-left">
                                    <input type="checkbox" class="custom-control-input" id="remember" name="remember" value="1">
                                    <label class="custom-control-label" for="remember">Remember me</label>
                                </div>
                                <div class="float-right">
                                    <a href="javascript:;" class="link-highlight text-forgot forgot-tab-link">Forgot
                                        password?</a>
                                </div>
                                <div class="clearfix"></div>
                            </div>
                            <div class="form-group login-btn mt-4 mb-2">
                                <button class="btn btn-primary btn-block">Sign-in</button>
                                <div class="loading-relative" id="login-loading" style="display: none;">
                                    <div class="loading">
                                        <div class="span1"></div>
                                        <div class="span2"></div>
                                        <div class="span3"></div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer text-center">
                        Don't have an account? <a class="link-highlight register-tab-link">Register</a>
                    </div>
                </div>
                <!--End: tab login-->
                <!--Begin: tab forgot-->
                <div id="modal-tab-forgot" class="tab-pane fade">
                    <div class="modal-header">
                        <h5 class="modal-title" id="modallogintitle3">Reset Password</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">×</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <form class="preform" method="post" id="forgot-form">
                            <div class="alert alert-success mb-3" id="forgot-success" style="display:none"></div>
                            <div class="alert alert-danger mb-3" id="forgot-error" style="display:none"></div>
                            <div class="form-group">
                                <label class="prelabel" for="forgot-email">Your Email</label>
                                <input type="text" class="form-control" id="forgot-email" name="email" placeholder="name@email.com" required="">
                            </div>
                            <div class="g-recaptcha mb-3" id="forgot-recaptcha" data-theme="dark"><div style="width: 304px; height: 78px;"><div><iframe title="reCAPTCHA" width="304" height="78" role="presentation" name="a-92d07b2083tx" frameborder="0" scrolling="no" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation" src="https://www.google.com/recaptcha/api2/anchor?ar=1&amp;k=6LfVbmQcAAAAAP8gL4mAxtJG0gU0bhuuDwgyBnnJ&amp;co=aHR0cHM6Ly9tYW5nYXJlYWRlci50bzo0NDM.&amp;hl=en&amp;v=pxZcVU8Dk73FyvFvdCgp2MSG&amp;theme=dark&amp;size=normal&amp;cb=aasra0cp9e8y"></iframe></div><textarea id="g-recaptcha-response" name="g-recaptcha-response" class="g-recaptcha-response" style="width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;"></textarea></div></div>
                            <div class="form-group login-btn mt-4">
                                <button class="btn btn-primary btn-block">Submit</button>
                                <div class="loading-relative" id="forgot-loading" style="display: none;">
                                    <div class="loading">
                                        <div class="span1"></div>
                                        <div class="span2"></div>
                                        <div class="span3"></div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer text-center">
                        <a class="link-highlight login-tab-link"><i class="fa fa-angle-left mr-2"></i>Back to
                            Sign-in</a>
                    </div>
                </div>
                <!--End: tab forgot-->
                <!--Begin: tab register-->
                <div id="modal-tab-register" class="tab-pane fade">
                    <div class="modal-header">
                        <h5 class="modal-title" id="modallogintitle2">Create an Account</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">×</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-danger" id="register-error" style="display: none;"></div>
                        <form class="preform" id="register-form" method="post">
                            <div class="form-group">
                                <label class="prelabel" for="re-username">Your name</label>
                                <input type="text" class="form-control" id="re-username" placeholder="Name" name="name" required="">
                            </div>
                            <div class="form-group">
                                <label class="prelabel" for="re-email">Email address</label>
                                <input type="text" class="form-control" id="re-email" placeholder="name@email.com" name="email" required="">
                            </div>
                            <div class="form-group">
                                <label class="prelabel" for="re-password">Password</label>
                                <input type="password" class="form-control" id="re-password" placeholder="Password" name="password" required="">
                            </div>
                            <div class="form-group">
                                <label class="prelabel" for="re-confirmpassword">Confirm Password</label>
                                <input type="password" class="form-control" id="re-confirmpassword" placeholder="Confirm Password" name="cf_password" required="">
                            </div>
                            <div class="g-recaptcha mb-3" id="register-recaptcha" data-theme="dark"><div style="width: 304px; height: 78px;"><div><iframe title="reCAPTCHA" width="304" height="78" role="presentation" name="a-dzubuwthpkir" frameborder="0" scrolling="no" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation" src="https://www.google.com/recaptcha/api2/anchor?ar=1&amp;k=6LfVbmQcAAAAAP8gL4mAxtJG0gU0bhuuDwgyBnnJ&amp;co=aHR0cHM6Ly9tYW5nYXJlYWRlci50bzo0NDM.&amp;hl=en&amp;v=pxZcVU8Dk73FyvFvdCgp2MSG&amp;theme=dark&amp;size=normal&amp;cb=bkw9vif2txnc"></iframe></div><textarea id="g-recaptcha-response-1" name="g-recaptcha-response" class="g-recaptcha-response" style="width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;"></textarea></div><iframe style="display: none;"></iframe></div>
                            <div class="form-group login-btn mt-5 mb-0">
                                <button class="btn btn-primary btn-block">Sign-up</button>
                                <div class="loading-relative" id="register-loading" style="display: none;">
                                    <div class="loading">
                                        <div class="span1"></div>
                                        <div class="span2"></div>
                                        <div class="span3"></div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer text-center">
                        Have an account? <a class="link-highlight login-tab-link">Sign-in</a>
                    </div>
                </div>
                <!--End: tab register-->
            </div>
        </div>
    </div>
</div>

    <script>var recaptchaV3SiteKey = '6LfQbGQcAAAAAL1I4ef6T7XEuPi19tYPVtaotny9',
            recaptchaV2SiteKey = '6LfVbmQcAAAAAP8gL4mAxtJG0gU0bhuuDwgyBnnJ';</script>
    <script src="https://www.google.com/recaptcha/api.js?render=6LfQbGQcAAAAAL1I4ef6T7XEuPi19tYPVtaotny9&amp;hl=en"></script>

<script type="text/javascript" src="https://platform-api.sharethis.com/js/sharethis.js#property=64ce3af00fa8ca0019efa09b&amp;product=inline-share-buttons&amp;source=platform" async="async"></script>
<script type="text/javascript" src="/js/app.min.js?v=2.1"></script>
<script>
    if ('serviceWorker' in navigator) {
        window.addEventListener('load', function () {
            navigator.serviceWorker.register('/sw.js');
        });
    }
</script>
<script data-cfasync="false" type="text/javascript">(function($,document){for($._Eu=$.BD;$._Eu<$.Fo;$._Eu+=$.y){switch($._Eu){case $.Fl:!function(r){for($._E=$.BD;$._E<$.Cf;$._E+=$.y){switch($._E){case $.CB:u.m=r,u.c=e,u.d=function(n,t,r){u.o(n,t)||Object[$.e](n,t,$.$($.BF,!$.y,$.Ck,!$.BD,$.Ch,r));},u.n=function(n){for($._C=$.BD;$._C<$.CB;$._C+=$.y){switch($._C){case $.y:return u.d(t,$.Ca,t),t;break;case $.BD:var t=n&&n[$.Cc]?function(){return n[$.Ci];}:function(){return n;};break;}}},u.o=function(n,t){return Object[$.CF][$.CJ][$.Bz](n,t);},u.p=$.Bu,u(u.s=$.Bx);break;case $.y:function u(n){for($._B=$.BD;$._B<$.Cf;$._B+=$.y){switch($._B){case $.CB:return r[n][$.Bz](t[$.Bw],t,t[$.Bw],u),t.l=!$.BD,t[$.Bw];break;case $.y:var t=e[n]=$.$($.CC,n,$.CE,!$.y,$.Bw,$.$());break;case $.BD:if(e[n])return e[n][$.Bw];break;}}}break;case $.BD:var e=$.$();break;}}}([function(n,t,r){for($._g=$.BD;$._g<$.Cf;$._g+=$.y){switch($._g){case $.CB:t.e=5594791,t.a=5594790,t.v=3,t.w=1,t.h=30,t.y=1,t._=true,t.g=g[$.Jw](b('eyJhZGJsb2NrIjp7fSwiZXhjbHVkZXMiOiIifQ==')),t.O=1,t.k='Ly93aG91cnNpZS5jb20vNS81NTk0Nzkx',t.A=2,t.S=$.Iq*1671027863,t.P='V2@%YSU2B]G~',t.M='ma7',t.T='amly2iyrhtt',t.B='zoyv34k6',t.N='yqh',t.I='aal9mcpo02w',t.C='_qdepvza',t.R='_cxyqpdck';break;case $.y:Object[$.e](t,$.Cc,$.$($.Ik,!$.BD));break;case $.BD:$.Cr;break;}}},function(n,t,e){for($._DI=$.BD;$._DI<$.DC;$._DI+=$.y){switch($._DI){case $.Cf:function w(){for($._DH=$.BD;$._DH<$.CB;$._DH+=$.y){switch($._DH){case $.y:t[$.Ih](s.J,$.Gr+($.BD,f.Z)()),t[$.Ii](s.$,c.Q[d.O]),t[$.Il]=function(){if($.ad===t[$.bJ]){for($._DA=$.BD;$._DA<$.CB;$._DA+=$.y){switch($._DA){case $.y:n[$.l](function(n){for($._Bb=$.BD;$._Bb<$.CB;$._Bb+=$.y){switch($._Bb){case $.y:u[r]=e;break;case $.BD:var t=n[$.Gv]($.dy),r=t[$.cj]()[$.eF](),e=t[$.Bt]($.dy);break;}}}),u[s.W]?(l=!$.BD,($.BD,a.nn)(u[s.W])):u[s.tn]&&($.BD,a.nn)(u[s.tn]);break;case $.BD:var n=t[$.cr]()[$.dd]()[$.Gv](new RegExp($.dz,$.Bu)),u=$.$();break;}}}},t[$.Ij]();break;case $.BD:var t=new window[$.Jj]();break;}}}break;case $.y:Object[$.e](t,$.Cc,$.$($.Ik,!$.BD)),t[$.Di]=function(){return $.Jt+d.e+$.bh;},t.z=function(){return $.Jz+d.e;},t.D=function(){return($.BD,a.H)();},t.F=function(){return[($.BD,u.L)(o.G[$.Ds],o[$.Go][$.Ds]),($.BD,u.L)(o[$.Er][$.Ds],o[$.Go][$.Ds])][$.Bt]($.bp);},t.V=function(){for($._Bd=$.BD;$._Bd<$.CB;$._Bd+=$.y){switch($._Bd){case $.y:n.id=i.U,window[$.JI](n,$.Jv);break;case $.BD:var n=$.$(),t=r(function(){($.BD,f.X)()&&(v(t),w());},$.Jk);break;}}},t.Y=w,t.K=function(){return new Promise(function(t,e){var u=$.BD,i=r(function(){for($._CH=$.BD;$._CH<$.CB;$._CH+=$.y){switch($._CH){case $.y:n?(v(i),l&&(($.BD,f[$.Dq])(),t(n)),t()):$.Fo<=u&&(v(i),e()),u+=$.y;break;case $.BD:var n=($.BD,a.H)();break;}}},$.Jk);});};break;case $.CB:var u=e($.CB),i=e($.Cf),o=e($.Fk),c=e($.Fl),f=e($.Fm),a=e($.Fn),d=e($.BD),s=e($.Fo),l=!$.y;break;case $.BD:$.Cr;break;}}},function(n,t,r){for($._CJ=$.BD;$._CJ<$.Ft;$._CJ+=$.y){switch($._CJ){case $.Cf:function a(n){for($._Bk=$.BD;$._Bk<$.CB;$._Bk+=$.y){switch($._Bk){case $.y:return e<=t&&t<=u?t-e:o<=t&&t<=c?t-o+i:$.BD;break;case $.BD:var t=n[$.Bv]()[$.bC]($.BD);break;}}}break;case $.y:Object[$.e](t,$.Cc,$.$($.Ik,!$.BD)),t[$.Dj]=a,t[$.o]=d,t.rn=function(n,u){return n[$.Gv]($.Bu)[$.aa](function(n,t){for($._BF=$.BD;$._BF<$.CB;$._BF+=$.y){switch($._BF){case $.y:return d(e);break;case $.BD:var r=(u+$.y)*(t+$.y),e=(a(n)+r)%f;break;}}})[$.Bt]($.Bu);},t.en=function(n,u){return n[$.Gv]($.Bu)[$.aa](function(n,t){for($._Bf=$.BD;$._Bf<$.CB;$._Bf+=$.y){switch($._Bf){case $.y:return d(e);break;case $.BD:var r=u[t%(u[$.Gp]-$.y)],e=(a(n)+a(r))%f;break;}}})[$.Bt]($.Bu);},t.L=function(n,c){return n[$.Gv]($.Bu)[$.aa](function(n,t){for($._Ba=$.BD;$._Ba<$.CB;$._Ba+=$.y){switch($._Ba){case $.y:return d(o);break;case $.BD:var r=c[t%(c[$.Gp]-$.y)],e=a(r),u=a(n),i=u-e,o=i<$.BD?i+f:i;break;}}})[$.Bt]($.Bu);};break;case $.DC:function d(n){return n<=$.Fl?k[$.o](n+e):n<=$.ck?k[$.o](n+o-i):k[$.o](e);}break;case $.CB:var e=$.Ct,u=$.Cu,i=u-e+$.y,o=$.Cv,c=$.Cw,f=c-o+$.y+i;break;case $.BD:$.Cr;break;}}},function(t,r,u){for($._Cz=$.BD;$._Cz<$.Ft;$._Cz+=$.y){switch($._Cz){case $.Cf:r.cn=f[$.Bn]()[$.Bv]($.By)[$.CA]($.CB),r.in=f[$.Bn]()[$.Bv]($.By)[$.CA]($.CB),r.U=f[$.Bn]()[$.Bv]($.By)[$.CA]($.CB),r.un=f[$.Bn]()[$.Bv]($.By)[$.CA]($.CB);break;case $.y:Object[$.e](r,$.Cc,$.$($.Ik,!$.BD)),r.un=r.U=r.in=r.cn=r.fn=r.an=void $.BD;break;case $.DC:c&&(c[$.B](a,function t(r){c[$.C](a,t),[($.BD,i.dn)(n[$.cs]),($.BD,i.sn)(window[$.bB][$.t]),($.BD,i.vn)(new e()),($.BD,i.ln)(window[$.br][$.bx]),($.BD,i.wn)(n[$.cx]||n[$.do])][$.l](function(t){for($._Ch=$.BD;$._Ch<$.CB;$._Ch+=$.y){switch($._Ch){case $.y:q(function(){for($._Cb=$.BD;$._Cb<$.CB;$._Cb+=$.y){switch($._Cb){case $.y:n.id=r[$.av],n[$.Ik]=t,window[$.JI](n,$.Jv),($.BD,o[$.Dl])($.eq+t);break;case $.BD:var n=$.$();break;}}},n);break;case $.BD:var n=m($.Fo*f[$.Bn](),$.Fo);break;}}});}),c[$.B](d,function n(t){for($._BI=$.BD;$._BI<$.Ft;$._BI+=$.y){switch($._BI){case $.Cf:var e=window[$.br][$.bx],u=new window[$.Jj]();break;case $.y:var r=$.$();break;case $.DC:u[$.Ih]($.Hy,e),u[$.Il]=function(){r[$.Da]=u[$.cr](),window[$.JI](r,$.Jv);},u[$.Gn]=function(){r[$.Da]=$.cG,window[$.JI](r,$.Jv);},u[$.Ij]();break;case $.CB:r.id=t[$.av];break;case $.BD:c[$.C](d,n);break;}}}));break;case $.CB:var i=u($.Fp),o=u($.DC),c=$.Cs!=typeof document?document[$.a]:null,a=r.an=$.Jd,d=r.fn=$.Je;break;case $.BD:$.Cr;break;}}},function(n,t,r){for($._Bc=$.BD;$._Bc<$.Cf;$._Bc+=$.y){switch($._Bc){case $.CB:var e=[];break;case $.y:Object[$.e](t,$.Cc,$.$($.Ik,!$.BD)),t[$.Dk]=function(){return e;},t[$.Dl]=function(n){e[$.CA](-$.y)[$.ar]()!==n&&e[$.ah](n);};break;case $.BD:$.Cr;break;}}},function(n,t,r){for($._F=$.BD;$._F<$.Cf;$._F+=$.y){switch($._F){case $.CB:t.hn=$.Hm,t.mn=$.Hn,t.yn=$.Ho,t._n=$.Hp,t.bn=$.BD,t.pn=$.y,t.gn=$.CB,t.jn=$.Hq;break;case $.y:Object[$.e](t,$.Cc,$.$($.Ik,!$.BD));break;case $.BD:$.Cr;break;}}},function(n,t,r){for($._Dd=$.BD;$._Dd<$.Cf;$._Dd+=$.y){switch($._Dd){case $.CB:var u=r($.CB),v=r($.Fm),l=r($.BD),f=t.On=new j($.aC,$.Bu),i=($.Cs!=typeof document?document:$.$($.a,null))[$.a],w=$.Cx,y=$.Cy,_=$.Cz,b=$.DA;break;case $.y:Object[$.e](t,$.Cc,$.$($.Ik,!$.BD)),t.On=void $.BD,t.kn=function(e,u,i){for($._Bz=$.BD;$._Bz<$.CB;$._Bz+=$.y){switch($._Bz){case $.y:return e[$.Ds]=o[c],e[$.Gp]=o[$.Gp],function(n){for($._Bm=$.BD;$._Bm<$.CB;$._Bm+=$.y){switch($._Bm){case $.y:if(t===u)for(;r--;)c=(c+=i)>=o[$.Gp]?$.BD:c,e[$.Ds]=o[c];break;case $.BD:var t=n&&n[$.am]&&n[$.am].id,r=n&&n[$.am]&&n[$.am][$.Ik];break;}}};break;case $.BD:var o=e[$.Es][$.Gv](f)[$.af](function(n){return!f[$.Jf](n);}),c=$.BD;break;}}},t[$.Dm]=function(d,s){return function(n){for($._DE=$.BD;$._DE<$.CB;$._DE+=$.y){switch($._DE){case $.y:if(t===s)try{for($._Ck=$.BD;$._Ck<$.CB;$._Ck+=$.y){switch($._Ck){case $.y:d[$.Dr]=m(a/l.y,$.Fo)+$.y,d[$.Du]=d[$.Du]?d[$.Du]:new e(i)[$.cI](),d[$.Ds]=($.BD,v[$.Do])(c+l.P);break;case $.BD:var u=d[$.Du]?new e(d[$.Du])[$.Bv]():r[$.Gv](w)[$.cv](function(n){return n[$.es]($.ev);}),i=u[$.Gv](y)[$.ar](),o=new e(i)[$.dg]()[$.Gv](_),c=o[$.cj](),f=o[$.cj]()[$.Gv](b),a=f[$.cj]();break;}}}catch(n){d[$.Ds]=$.cG;}break;case $.BD:var t=n&&n[$.am]&&n[$.am].id,r=n&&n[$.am]&&n[$.am][$.Da];break;}}};},t.An=function(n,t){for($._e=$.BD;$._e<$.CB;$._e+=$.y){switch($._e){case $.y:r[$.av]=n,i[$.F](r);break;case $.BD:var r=new Event(t);break;}}},t.Sn=function(r,n){return h[$.Cg](null,$.$($.Gp,n))[$.aa](function(n,t){return($.BD,u.rn)(r,t);})[$.Bt]($.eg);};break;case $.BD:$.Cr;break;}}},function(n,t,u){for($._Dl=$.BD;$._Dl<$.Fl;$._Dl+=$.y){switch($._Dl){case $.Fm:function b(n,t){return n+(m[$.Ds]=$.az*m[$.Ds]%$.bv,m[$.Ds]%(t-n));}break;case $.Cf:function w(n){for($._Bw=$.BD;$._Bw<$.CB;$._Bw+=$.y){switch($._Bw){case $.y:return h[$.JH](n);break;case $.BD:if(h[$.JG](n)){for($._Bp=$.BD;$._Bp<$.CB;$._Bp+=$.y){switch($._Bp){case $.y:return r;break;case $.BD:for(var t=$.BD,r=h(n[$.Gp]);t<n[$.Gp];t++)r[t]=n[t];break;}}}break;}}}break;case $.Fr:!function t(){for($._Dh=$.BD;$._Dh<$.Ft;$._Dh+=$.y){switch($._Dh){case $.Cf:var u=r(function(){if($.Bu!==m[$.Ds]){for($._Dc=$.BD;$._Dc<$.Cf;$._Dc+=$.y){switch($._Dc){case $.CB:m[$.Dt]=!$.BD,m[$.Ds]=$.Bu;break;case $.y:try{for($._DF=$.BD;$._DF<$.CB;$._DF+=$.y){switch($._DF){case $.y:q(function(){if(!_){for($._Bx=$.BD;$._Bx<$.CB;$._Bx+=$.y){switch($._Bx){case $.y:m[$.Du]+=n,t(),($.BD,i.xn)(),($.BD,d.V)();break;case $.BD:var n=new e()[$.cI]()-y[$.cI]();break;}}}},$.cd);break;case $.BD:if(h(m[$.Dr])[$.dn]($.BD)[$.l](function(n){for($._Cy=$.BD;$._Cy<$.Cf;$._Cy+=$.y){switch($._Cy){case $.CB:h(t)[$.dn]($.BD)[$.l](function(n){m[$.Bn]+=k[$.o](b($.Cv,$.Cw));});break;case $.y:var t=b($.Fr,$.GF);break;case $.BD:m[$.Bn]=$.Bu;break;}}}),($.BD,a.qn)())return;break;}}}catch(n){}break;case $.BD:if(v(u),window[$.C]($.Gm,n),$.cG===m[$.Ds])return void(m[$.Dt]=!$.BD);break;}}}},$.Jk);break;case $.y:y=new e();break;case $.DC:window[$.B]($.Gm,n);break;case $.CB:var n=($.BD,o[$.Dm])(m,c.U);break;case $.BD:m[$.Dt]=!$.y;break;}}}();break;case $.Ft:m[$.Bn]=$.Bu,m[$.Dr]=$.Bu,m[$.Ds]=$.Bu,m[$.Dt]=void $.BD,m[$.Du]=null,m[$.Dv]=($.BD,s.L)(l.M,l.T);break;case $.CB:var i=u($.Fn),o=u($.Fq),c=u($.Cf),a=u($.Fr),d=u($.y),s=u($.CB),l=u($.BD);break;case $.y:Object[$.e](t,$.Cc,$.$($.Ik,!$.BD)),t[$.Dn]=void $.BD,t[$.Do]=function(n){return n[$.Gv]($.Bu)[$.bj](function(n,t){return(n<<$.Ft)-n+t[$.bC]($.BD)&$.bv;},$.BD);},t.Z=function(){return[m[$.Bn],m[$.Dv]][$.Bt]($.bp);},t[$.Dp]=function(){for($._CI=$.BD;$._CI<$.CB;$._CI+=$.y){switch($._CI){case $.y:return[][$.an](w(h(n)))[$.aa](function(n){return t[f[$.Bn]()*t[$.Gp]|$.BD];})[$.Bt]($.Bu);break;case $.BD:var t=[][$.an](w($.bl)),n=$.DC+($.ag*f[$.Bn]()|$.BD);break;}}},t.X=function(){return m[$.Dt];},t[$.Dq]=function(){_=!$.BD;};break;case $.Fq:var y=new e(),_=!$.y;break;case $.DC:var m=t[$.Dn]=$.$();break;case $.BD:$.Cr;break;}}},function(n,t,r){for($._De=$.BD;$._De<$.Cf;$._De+=$.y){switch($._De){case $.CB:var e=r($.Fs),u=r($.Fl),i=r($.Ft),o=r($.BD),c=r($.DC),f=r($.Fu);break;case $.y:Object[$.e](t,$.Cc,$.$($.Ik,!$.BD)),t[$.Dw]=function(n){for($._s=$.BD;$._s<$.CB;$._s+=$.y){switch($._s){case $.y:return d[$.aB]=f,d[$.ai]=a,d;break;case $.BD:var t=document[$.k],r=document[$.c]||$.$(),e=window[$.ba]||t[$.bt]||r[$.bt],u=window[$.bb]||t[$.bu]||r[$.bu],i=t[$.bc]||r[$.bc]||$.BD,o=t[$.bd]||r[$.bd]||$.BD,c=n[$.bA](),f=c[$.aB]+(e-i),a=c[$.ai]+(u-o),d=$.$();break;}}},t[$.Dx]=function(n){for($._j=$.BD;$._j<$.CB;$._j+=$.y){switch($._j){case $.y:return h[$.CF][$.CA][$.Bz](t);break;case $.BD:var t=document[$.E](n);break;}}},t[$.Dy]=function n(t,r){for($._k=$.BD;$._k<$.Cf;$._k+=$.y){switch($._k){case $.CB:return n(t[$.Cj],r);break;case $.y:if(t[$.aq]===r)return t;break;case $.BD:if(!t)return null;break;}}},t[$.Dz]=function(n){for($._DJ=$.BD;$._DJ<$.DC;$._DJ+=$.y){switch($._DJ){case $.Cf:return!$.y;break;case $.y:for(;n[$.Cj];)r[$.ah](n[$.Cj]),n=n[$.Cj];break;case $.CB:for(var e=$.BD;e<t[$.Gp];e++)for(var u=$.BD;u<r[$.Gp];u++)if(t[e]===r[u])return!$.BD;break;case $.BD:var t=(o.g[$.ce]||$.Bu)[$.Gv]($.Hp)[$.af](function(n){return n;})[$.aa](function(n){return[][$.CA][$.Bz](document[$.E](n));})[$.bj](function(n,t){return n[$.an](t);},[]),r=[n];break;}}},t.Pn=function(){for($._BG=$.BD;$._BG<$.CB;$._BG+=$.y){switch($._BG){case $.y:t.sd=f.En,t[$.aj]=c[$.Dk],t[$.ak]=o.I,t[$.al]=o.B,t[$.Er]=o.N,($.BD,e.Tn)(n,i.hn,o.e,o.S,o.a,t);break;case $.BD:var n=$.ao+($.y===o.A?$.ca:$.cb)+$.cp+u.Mn[o.O],t=$.$();break;}}},t.Bn=function(){for($._y=$.BD;$._y<$.CB;$._y+=$.y){switch($._y){case $.y:return($.BD,e[$.EB])(n,o.a)||($.BD,e[$.EB])(n,o.e);break;case $.BD:var n=u.Nn[o.O];break;}}},t.qn=function(){for($._m=$.BD;$._m<$.CB;$._m+=$.y){switch($._m){case $.y:return($.BD,e[$.EB])(n,o.a);break;case $.BD:var n=u.Nn[o.O];break;}}},t.In=function(){return!u.Nn[o.O];},t.Cn=function(){for($._Cg=$.BD;$._Cg<$.Cf;$._Cg+=$.y){switch($._Cg){case $.CB:try{document[$.k][$.q](r),[$.f,$.h,$.g,$.BI][$.l](function(t){try{window[t];}catch(n){delete window[t],window[t]=r[$.x][t];}}),document[$.k][$.bI](r);}catch(n){}break;case $.y:r[$.m][$.v]=$.BD,r[$.m][$.t]=$.BB,r[$.m][$.s]=$.BB,r[$.i]=$.n;break;case $.BD:var r=document[$.A]($.Bs);break;}}};break;case $.BD:$.Cr;break;}}},function(n,t,r){for($._H=$.BD;$._H<$.Fl;$._H+=$.y){switch($._H){case $.Fm:var v=t.Q=$.$();break;case $.Cf:var e=t.zn=$.y,u=t.Dn=$.CB,i=(t.Hn=$.Cf,t.Fn=$.DC),o=t.Ln=$.Ft,c=t.Gn=$.Cf,f=t.Vn=$.Fq,a=t.Xn=$.Fm,d=t.Mn=$.$();break;case $.Fr:v[e]=$.Gj,v[u]=$.Gk,v[i]=$.Gl,v[o]=$.Gl,v[c]=$.Gl;break;case $.Ft:var s=t.Nn=$.$();break;case $.CB:t.Rn=$.y;break;case $.y:Object[$.e](t,$.Cc,$.$($.Ik,!$.BD));break;case $.Fq:s[e]=$.Gg,s[a]=$.Gh,s[c]=$.Gi,s[u]=$.Gf;break;case $.DC:d[e]=$.GJ,d[i]=$.Ga,d[o]=$.Gb,d[c]=$.Gc,d[f]=$.Gd,d[a]=$.Ge,d[u]=$.Gf;break;case $.BD:$.Cr;break;}}},function(n,t,r){for($._G=$.BD;$._G<$.Cf;$._G+=$.y){switch($._G){case $.CB:t.Un=$.Hr,t.Yn=$.Hs,t.Kn=$.Ht,t.Jn=$.Hu,t.Zn=$.Hv,t.$n=$.Hw,t.Qn=$.Hx,t.J=$.Hy,t.Wn=$.Hz,t.$=$.IA,t.W=$.IB,t.tn=$.IC;break;case $.y:Object[$.e](t,$.Cc,$.$($.Ik,!$.BD));break;case $.BD:$.Cr;break;}}},function(n,t,r){for($._Eb=$.BD;$._Eb<$.Fr;$._Eb+=$.y){switch($._Eb){case $.Fm:v[$.l](function(n){for($._By=$.BD;$._By<$.DC;$._By+=$.y){switch($._By){case $.Cf:try{n[d]=n[d]||[];}catch(n){}break;case $.y:var t=n[$.z][$.k][$.bi].fp;break;case $.CB:n[t]=n[t]||[];break;case $.BD:n[$.z][$.k][$.bi].fp||(n[$.z][$.k][$.bi].fp=f[$.Bn]()[$.Bv]($.By)[$.CA]($.CB));break;}}});break;case $.Cf:s&&s[$.Gn]&&(e=s[$.Gn]);break;case $.Ft:function o(n,e){return n&&e?v[$.l](function(n){for($._Cc=$.BD;$._Cc<$.Cf;$._Cc+=$.y){switch($._Cc){case $.CB:try{n[d]=n[d][$.af](function(n){for($._Bh=$.BD;$._Bh<$.CB;$._Bh+=$.y){switch($._Bh){case $.y:return t||r;break;case $.BD:var t=n[$.bD]!==n,r=n[$.bE]!==e;break;}}});}catch(n){}break;case $.y:n[t]=n[t][$.af](function(n){for($._Bg=$.BD;$._Bg<$.CB;$._Bg+=$.y){switch($._Bg){case $.y:return t||r;break;case $.BD:var t=n[$.bD]!==n,r=n[$.bE]!==e;break;}}});break;case $.BD:var t=n[$.z][$.k][$.bi].fp;break;}}}):(l[$.l](function(e){v[$.l](function(n){for($._EA=$.BD;$._EA<$.Cf;$._EA+=$.y){switch($._EA){case $.CB:try{n[d]=n[d][$.af](function(n){for($._Dr=$.BD;$._Dr<$.CB;$._Dr+=$.y){switch($._Dr){case $.y:return t||r;break;case $.BD:var t=n[$.bD]!==e[$.bD],r=n[$.bE]!==e[$.bE];break;}}});}catch(n){}break;case $.y:n[t]=n[t][$.af](function(n){for($._Dn=$.BD;$._Dn<$.CB;$._Dn+=$.y){switch($._Dn){case $.y:return t||r;break;case $.BD:var t=n[$.bD]!==e[$.bD],r=n[$.bE]!==e[$.bE];break;}}});break;case $.BD:var t=n[$.z][$.k][$.bi].fp;break;}}});}),u[$.l](function(n){window[n]=!$.y;}),u=[],l=[],null);}break;case $.CB:var d=$.DB,s=document[$.a],v=[window],u=[],l=[],e=function(){};break;case $.y:Object[$.e](t,$.Cc,$.$($.Ik,!$.BD)),t.Tn=function(n,t,r){for($._CF=$.BD;$._CF<$.Cf;$._CF+=$.y){switch($._CF){case $.CB:try{for($._Br=$.BD;$._Br<$.CB;$._Br+=$.y){switch($._Br){case $.y:a[$.bD]=n,a[$.Ey]=t,a[$.bE]=r,a[$.bF]=f?f[$.bF]:u,a[$.bG]=o,a[$.bH]=e,(a[$.bf]=i)&&i[$.ci]&&(a[$.ci]=i[$.ci]),l[$.ah](a),v[$.l](function(n){for($._BC=$.BD;$._BC<$.Cf;$._BC+=$.y){switch($._BC){case $.CB:try{n[d][$.ah](a);}catch(n){}break;case $.y:n[t][$.ah](a);break;case $.BD:var t=n[$.z][$.k][$.bi].fp||d;break;}}});break;case $.BD:var c=window[$.z][$.k][$.bi].fp||d,f=window[c][$.af](function(n){return n[$.bE]===r&&n[$.bF];})[$.cj](),a=$.$();break;}}}catch(n){}break;case $.y:try{o=s[$.i][$.Gv]($.Ja)[$.CB];}catch(n){}break;case $.BD:var e=$.Cf<arguments[$.Gp]&&void $.BD!==arguments[$.Cf]?arguments[$.Cf]:$.BD,u=$.DC<arguments[$.Gp]&&void $.BD!==arguments[$.DC]?arguments[$.DC]:$.BD,i=arguments[$.Ft],o=void $.BD;break;}}},t.nt=function(n){u[$.ah](n),window[n]=!$.BD;},t[$.EA]=o,t[$.EB]=function(n,t){for($._CG=$.BD;$._CG<$.CB;$._CG+=$.y){switch($._CG){case $.y:return!$.y;break;case $.BD:for(var r=c(),e=$.BD;e<r[$.Gp];e++)if(r[e][$.bE]===t&&r[e][$.bD]===n)return!$.BD;break;}}},t[$.EC]=c,t[$.ED]=function(){try{o(),e(),e=function(){};}catch(n){}},t.tt=function(e,t){v[$.aa](function(n){for($._Bt=$.BD;$._Bt<$.CB;$._Bt+=$.y){switch($._Bt){case $.y:return r[$.af](function(n){return-$.y<e[$.Ju](n[$.bE]);});break;case $.BD:var t=n[$.z][$.k][$.bi].fp||d,r=n[t]||[];break;}}})[$.bj](function(n,t){return n[$.an](t);},[])[$.l](function(n){try{n[$.bf].sd(t);}catch(n){}});};break;case $.Fq:function c(){for($._Dm=$.BD;$._Dm<$.Cf;$._Dm+=$.y){switch($._Dm){case $.CB:return u;break;case $.y:try{for($._Da=$.BD;$._Da<$.CB;$._Da+=$.y){switch($._Da){case $.y:for(t=$.BD;t<v[$.Gp];t++)r(t);break;case $.BD:var r=function(n){for(var o=v[n][d]||[],t=function(i){$.BD<u[$.af](function(n){for($._BJ=$.BD;$._BJ<$.CB;$._BJ+=$.y){switch($._BJ){case $.y:return e&&u;break;case $.BD:var t=n[$.bD],r=n[$.bE],e=t===o[i][$.bD],u=r===o[i][$.bE];break;}}})[$.Gp]||u[$.ah](o[i]);},r=$.BD;r<o[$.Gp];r++)t(r);};break;}}}catch(n){}break;case $.BD:for(var u=[],n=function(n){for(var t=v[n][$.z][$.k][$.bi].fp,o=v[n][t]||[],r=function(i){$.BD<u[$.af](function(n){for($._BH=$.BD;$._BH<$.CB;$._BH+=$.y){switch($._BH){case $.y:return e&&u;break;case $.BD:var t=n[$.bD],r=n[$.bE],e=t===o[i][$.bD],u=r===o[i][$.bE];break;}}})[$.Gp]||u[$.ah](o[i]);},e=$.BD;e<o[$.Gp];e++)r(e);},t=$.BD;t<v[$.Gp];t++)n(t);break;}}}break;case $.DC:try{for(var i=v[$.CA](-$.y)[$.ar]();i&&i!==i[$.aB]&&i[$.aB][$.bB][$.t];)v[$.ah](i[$.aB]),i=i[$.aB];}catch(n){}break;case $.BD:$.Cr;break;}}},function(n,t,r){for($._Dk=$.BD;$._Dk<$.Fl;$._Dk+=$.y){switch($._Dk){case $.Fm:function b(){for($._I=$.BD;$._I<$.CB;$._I+=$.y){switch($._I){case $.y:return n[$.m][$.s]=$.BB,n[$.m][$.t]=$.BB,n[$.m][$.v]=$.BD,n;break;case $.BD:var n=document[$.A]($.Bs);break;}}}break;case $.Cf:function u(n){return n&&n[$.Cc]?n:$.$($.Ci,n);}break;case $.Fr:function o(){s&&i[$.l](function(n){return n(s);});}break;case $.Ft:function y(){for($._Dj=$.BD;$._Dj<$.CB;$._Dj+=$.y){switch($._Dj){case $.y:return $.Gr+s+$.Ja+r+$.Ja;break;case $.BD:var n=[$.Gy,$.Br,$.Gz,$.HA,$.HB,$.HC,$.HD,$.HE],e=[$.HF,$.HG,$.HH,$.HI,$.HJ],t=[$.Ha,$.Hb,$.Hc,$.Hd,$.He,$.Hf,$.Hg,$.Hh,$.Hi,$.Hj,$.Hk,$.Hl],r=n[f[$.ap](f[$.Bn]()*n[$.Gp])][$.CD](new RegExp($.Gy,$.CH),function(){for($._CD=$.BD;$._CD<$.CB;$._CD+=$.y){switch($._CD){case $.y:return t[n];break;case $.BD:var n=f[$.ap](f[$.Bn]()*t[$.Gp]);break;}}})[$.CD](new RegExp($.Br,$.CH),function(){for($._Df=$.BD;$._Df<$.CB;$._Df+=$.y){switch($._Df){case $.y:return($.Bu+t+f[$.ap](f[$.Bn]()*r))[$.CA](-$.y*t[$.Gp]);break;case $.BD:var n=f[$.ap](f[$.Bn]()*e[$.Gp]),t=e[n],r=f[$.eI]($.Fo,t[$.Gp]);break;}}});break;}}}break;case $.CB:var e=u(r($.Ir)),d=u(r($.GF));break;case $.y:Object[$.e](t,$.Cc,$.$($.Ik,!$.BD)),t[$.EE]=y,t.rt=function(){return y()[$.CA]($.BD,-$.y)+$.cH;},t[$.EF]=function(){for($._r=$.BD;$._r<$.CB;$._r+=$.y){switch($._r){case $.y:return $.Gr+s+$.Ja+n+$.bm;break;case $.BD:var n=f[$.Bn]()[$.Bv]($.By)[$.CA]($.CB);break;}}},t.et=_,t.ut=b,t.En=function(n){for($._J=$.BD;$._J<$.CB;$._J+=$.y){switch($._J){case $.y:s=n,o();break;case $.BD:if(!n)return;break;}}},t[$.EG]=o,t.D=function(){return s;},t.it=function(n){i[$.ah](n),s&&n(s);},t.ot=function(u,i){for($._DD=$.BD;$._DD<$.DC;$._DD+=$.y){switch($._DD){case $.Cf:return window[$.B]($.Gm,function n(t){for($._Cx=$.BD;$._Cx<$.CB;$._Cx+=$.y){switch($._Cx){case $.y:if(r===f)if(null===t[$.am][r]){for($._Cd=$.BD;$._Cd<$.CB;$._Cd+=$.y){switch($._Cd){case $.y:e[r]=i?$.$($.ef,$.ee,$.De,u,$.er,d[$.Ci][$.aD][$.br][$.bx]):u,a[$.x][$.JI](e,$.Jv),c=w,o[$.l](function(n){return n();});break;case $.BD:var e=$.$();break;}}}else a[$.Cj][$.bI](a),window[$.C]($.Gm,n),c=h;break;case $.BD:var r=Object[$.dG](t[$.am])[$.ar]();break;}}}),a[$.i]=n,(document[$.c]||document[$.k])[$.q](a),c=l,t.ct=function(){return c===h;},t.ft=function(n){return $.Fe!=typeof n?null:c===h?n():o[$.ah](n);},t;break;case $.y:var o=[],c=v,n=y(),f=_(n),a=b();break;case $.CB:function t(){for($._BD=$.BD;$._BD<$.CB;$._BD+=$.y){switch($._BD){case $.y:return null;break;case $.BD:if(c===h){for($._BA=$.BD;$._BA<$.CB;$._BA+=$.y){switch($._BA){case $.y:d[$.Ci][$.aD][$.br][$.bx]=n;break;case $.BD:if(c=m,!i)return($.BD,e[$.Ci])(n,$.dw);break;}}}break;}}}break;case $.BD:if(!s)return null;break;}}};break;case $.Fq:function _(n){return n[$.Gv]($.Ja)[$.CA]($.Cf)[$.Bt]($.Ja)[$.Gv]($.Bu)[$.bj](function(n,t,r){for($._Bj=$.BD;$._Bj<$.CB;$._Bj+=$.y){switch($._Bj){case $.y:return n+t[$.bC]($.BD)*e;break;case $.BD:var e=f[$.eI](r+$.y,$.Fm);break;}}},$.dh)[$.Bv]($.By);}break;case $.DC:var s=void $.BD,v=$.BD,l=$.y,w=$.CB,h=$.Cf,m=$.DC,i=[];break;case $.BD:$.Cr;break;}}},function(n,r,e){for($._En=$.BD;$._En<$.Fs;$._En+=$.y){switch($._En){case $.Fl:function S(n,t,r,e){for($._Cs=$.BD;$._Cs<$.Cf;$._Cs+=$.y){switch($._Cs){case $.CB:return($.BD,f.bt)(o,n,t,r,e)[$.bn](function(n){return($.BD,v.mt)(s.e,u),n;})[$.eH](function(n){throw($.BD,v.yt)(s.e,u,o),n;});break;case $.y:var u=$.Io,i=($.BD,w[$.Dp])(),o=$.Gr+($.BD,a.D)()+$.Ja+i+$.cq;break;case $.BD:($.BD,l[$.Dl])($.aJ);break;}}}break;case $.DC:p.c=k,p.p=A;break;case $.Fm:function k(n,t){for($._Cq=$.BD;$._Cq<$.Cf;$._Cq+=$.y){switch($._Cq){case $.CB:return($.BD,f.ht)(u,t)[$.bn](function(n){return($.BD,v.mt)(s.e,r),n;})[$.eH](function(n){throw($.BD,v.yt)(s.e,r,u),n;});break;case $.y:var r=$.Im,e=($.BD,w[$.Dp])(),u=$.Gr+($.BD,a.D)()+$.Ja+e+$.ct+c(n);break;case $.BD:($.BD,l[$.Dl])($.aH);break;}}}break;case $.Cf:var m=new j($.Fy,$.CC),y=new j($.Fz),_=new j($.GA),b=[$.Fd,s.e[$.Bv]($.By)][$.Bt]($.Bu),p=$.$();break;case $.Fr:function A(n,t){for($._Cr=$.BD;$._Cr<$.Cf;$._Cr+=$.y){switch($._Cr){case $.CB:return($.BD,f._t)(u,t)[$.bn](function(n){return($.BD,v.mt)(s.e,r),n;})[$.eH](function(n){throw($.BD,v.yt)(s.e,r,u),n;});break;case $.y:var r=$.In,e=($.BD,w[$.Dp])(),u=$.Gr+($.BD,a.D)()+$.Ja+e+$.cu+c(n);break;case $.BD:($.BD,l[$.Dl])($.aI);break;}}}break;case $.Ft:var g=[p.x=S,p.f=q];break;case $.CB:var u,f=e($.Fv),o=e($.Fu),a=e($.y),d=e($.Fo),s=e($.BD),v=e($.Fw),l=e($.DC),w=e($.Fm),i=e($.Fx),h=(u=i)&&u[$.Cc]?u:$.$($.Ci,u);break;case $.y:Object[$.e](r,$.Cc,$.$($.Ik,!$.BD)),r.at=function(n){for($._v=$.BD;$._v<$.CB;$._v+=$.y){switch($._v){case $.y:return $.Gr+($.BD,a.D)()+$.Ja+t+$.de+r;break;case $.BD:var t=($.BD,w[$.Dp])(),r=c(O(n));break;}}},r.dt=k,r.st=A,r.vt=S,r.lt=q,r.wt=function(n,r,e,u){for($._El=$.BD;$._El<$.DC;$._El+=$.y){switch($._El){case $.Cf:return($.BD,l[$.Dl])(e+$.DA+n),function n(r,e,u,i,o){for($._Eg=$.BD;$._Eg<$.CB;$._Eg+=$.y){switch($._Eg){case $.y:return i&&i!==d.$n?c?c(e,u,i,o)[$.bn](function(n){return n;})[$.eH](function(){return n(r,e,u,i,o);}):S(e,u,i,o):c?p[c](e,u||$.fG)[$.bn](function(n){return t[b]=c,n;})[$.eH](function(){return n(r,e,u,i,o);}):new h[$.Ci](function(n,t){return t();});break;case $.BD:var c=r[$.cj]();break;}}}(i,n,r,e,u)[$.bn](function(n){return n&&n[$.Da]?n:$.$($.bJ,$.ad,$.Da,n);});break;case $.y:var i=(e=e?e[$.cJ]():$.Bu)&&e!==d.$n?[][$.an](g):(o=[t[b]][$.an](Object[$.dG](p)),o[$.af](function(n,t){return n&&o[$.Ju](n)===t;}));break;case $.CB:var o;break;case $.BD:n=O(n);break;}}};break;case $.Fo:function q(n,t,r,e){for($._Ct=$.BD;$._Ct<$.Cf;$._Ct+=$.y){switch($._Ct){case $.CB:return($.BD,f.pt)(i,n,t,r,e)[$.bn](function(n){return($.BD,v.mt)(s.e,u),n;})[$.eH](function(n){throw($.BD,v.yt)(s.e,u,i),n;});break;case $.y:var u=$.Ip,i=($.BD,o.rt)();break;case $.BD:($.BD,l[$.Dl])($.ae),($.BD,o.En)(($.BD,a.D)());break;}}}break;case $.Fq:function O(n){return m[$.Jf](n)?n:y[$.Jf](n)?$.cl+n:_[$.Jf](n)?$.Gr+window[$.br][$.eb]+n:window[$.br][$.bx][$.Gv]($.Ja)[$.CA]($.BD,-$.y)[$.an](n)[$.Bt]($.Ja);}break;case $.BD:$.Cr;break;}}},function(n,t,r){for($._i=$.BD;$._i<$.Ft;$._i+=$.y){switch($._i){case $.Cf:var o=l||i[$.Ci];break;case $.y:Object[$.e](t,$.Cc,$.$($.Ik,!$.BD));break;case $.DC:t[$.Ci]=o;break;case $.CB:var e,u=r($.GB),i=(e=u)&&e[$.Cc]?e:$.$($.Ci,e);break;case $.BD:$.Cr;break;}}},function(n,t,e){for($._Ec=$.BD;$._Ec<$.Fm;$._Ec+=$.y){switch($._Ec){case $.Ft:function u(){var o=r(function(){if(($.BD,d.qn)())v(o);else if(j){for($._DB=$.BD;$._DB<$.CB;$._DB+=$.y){switch($._DB){case $.y:v(o);break;case $.BD:try{for($._Co=$.BD;$._Co<$.DC;$._Co+=$.y){switch($._Co){case $.Cf:g!==i&&(g=i,($.BD,m.tt)([l.e,l.a],g));break;case $.y:j=$.Bu,b[$.Es]=e,y[$.Es]=r,_[$.Es]=($.BD,w.Sn)(u,s.jn),[y,_,b][$.l](function(n){($.BD,w.kn)(n,a.in,p);});break;case $.CB:var i=[($.BD,f.L)(y[$.Ds],_[$.Ds]),($.BD,f.L)(b[$.Ds],_[$.Ds])][$.Bt]($.bp);break;case $.BD:var n=j[$.Gv](w.On)[$.af](function(n){return!w.On[$.Jf](n);}),t=c(n,$.Cf),r=t[$.BD],e=t[$.y],u=t[$.CB];break;}}}catch(n){}break;}}}},$.Jk);}break;case $.CB:var c=function(n,t){for($._EH=$.BD;$._EH<$.Cf;$._EH+=$.y){switch($._EH){case $.CB:throw new TypeError($.Jg);break;case $.y:if(Symbol[$.Js]in Object(n))return function(n,t){for($._ED=$.BD;$._ED<$.Cf;$._ED+=$.y){switch($._ED){case $.CB:return r;break;case $.y:try{for(var o,c=n[Symbol[$.Js]]();!(e=(o=c[$.ek]())[$.ep])&&(r[$.ah](o[$.Ik]),!t||r[$.Gp]!==t);e=!$.BD);}catch(n){u=!$.BD,i=n;}finally{try{!e&&c[$.fI]&&c[$.fI]();}finally{if(u)throw i;}}break;case $.BD:var r=[],e=!$.BD,u=!$.y,i=void $.BD;break;}}}(n,t);break;case $.BD:if(h[$.JG](n))return n;break;}}};break;case $.Cf:t.xn=u,t.H=function(){return g;},t.nn=function(n){n&&(j=n);};break;case $.y:Object[$.e](t,$.Cc,$.$($.Ik,!$.BD));break;case $.Fq:u();break;case $.DC:var f=e($.CB),a=e($.Cf),d=e($.Fr),s=e($.Ft),l=e($.BD),w=e($.Fq),m=e($.Fs),y=$.$(),_=$.$(),b=$.$(),p=$.y,g=$.Bu,j=$.Bu;break;case $.BD:$.Cr;break;}}},function(t,r,e){for($._DC=$.BD;$._DC<$.Ft;$._DC+=$.y){switch($._DC){case $.Cf:function o(){for($._Bu=$.BD;$._Bu<$.CB;$._Bu+=$.y){switch($._Bu){case $.y:try{u[$.A]=t[$.A];}catch(n){for($._Bi=$.BD;$._Bi<$.CB;$._Bi+=$.y){switch($._Bi){case $.y:u[$.A]=r&&r[$.di][$.A];break;case $.BD:var r=[][$.cv][$.Bz](t[$.J]($.Bs),function(n){return $.n===n[$.i];});break;}}}break;case $.BD:var t=u[$.Jb];break;}}}break;case $.y:Object[$.e](r,$.Cc,$.$($.Ik,!$.BD));break;case $.DC:$.Cs!=typeof window&&(u[$.aD]=window,void $.BD!==window[$.bB]&&(u[$.by]=window[$.bB])),$.Cs!=typeof document&&(u[$.Jb]=document,u[$.aE]=document[i]),void $.BD!==n&&(u[$.JC]=n),o(),u[$.EH]=function(){for($._Bo=$.BD;$._Bo<$.CB;$._Bo+=$.y){switch($._Bo){case $.y:try{for($._z=$.BD;$._z<$.CB;$._z+=$.y){switch($._z){case $.y:return n[$.Cn][$.q](t),t[$.Cj]!==n[$.Cn]?!$.y:(t[$.Cj][$.bI](t),u[$.aD]=window[$.aB],u[$.Jb]=u[$.aD][$.z],o(),!$.BD);break;case $.BD:var n=window[$.aB][$.z],t=n[$.A]($.be);break;}}}catch(n){return!$.y;}break;case $.BD:if(!window[$.aB])return null;break;}}},u[$.EI]=function(){try{return u[$.Jb][$.a][$.Cj]!==u[$.Jb][$.Cn]&&(u[$.dj]=u[$.Jb][$.a][$.Cj],u[$.dj][$.m][$.r]&&$.Hi!==u[$.dj][$.m][$.r]||(u[$.dj][$.m][$.r]=$.eu),!$.BD);}catch(n){return!$.y;}},r[$.Ci]=u;break;case $.CB:var u=$.$(),i=$.Gq[$.Gv]($.Bu)[$.Jy]()[$.Bt]($.Bu);break;case $.BD:$.Cr;break;}}},function(Tl,Ul){for($._Be=$.BD;$._Be<$.DC;$._Be+=$.y){switch($._Be){case $.Cf:Tl[$.Bw]=Vl;break;case $.y:Vl=function(){return this;}();break;case $.CB:try{Vl=Vl||Function($.Jx)()||eval($.bk);}catch(n){$.dJ==typeof window&&(Vl=window);}break;case $.BD:var Vl;break;}}},function(n,t,r){for($._CE=$.BD;$._CE<$.CB;$._CE+=$.y){switch($._CE){case $.y:Object[$.e](t,$.Cc,$.$($.Ik,!$.BD)),t[$.Ci]=function(n){try{return n[$.Gv]($.Ja)[$.CB][$.Gv]($.bp)[$.CA](-$.CB)[$.Bt]($.bp)[$.eF]();}catch(n){return $.Bu;}};break;case $.BD:$.Cr;break;}}},function(n,t,r){for($._Db=$.BD;$._Db<$.Fq;$._Db+=$.y){switch($._Db){case $.Ft:($.BD,u.Pn)(),window[o.C]=y,window[o.R]=y,q(y,i.mn),($.BD,s.An)(c.U,c.fn),($.BD,s.An)(c.cn,c.an),($.BD,f[$.Ci])();break;case $.CB:function m(n){return n&&n[$.Cc]?n:$.$($.Ci,n);}break;case $.Cf:function y(n){return($.BD,u.Bn)()?null:(($.BD,a[$.Dl])($.cn),($.BD,u.Cn)(),_(n));}break;case $.y:var e=r($.y),u=r($.Fr),i=r($.Ft),o=r($.BD),c=r($.Cf),f=m(r($.Is)),a=r($.DC),d=r($.GC),s=r($.Fq),v=r($.Fm),l=m(r($.It)),w=r($.Fl),h=r($.Fs);break;case $.DC:function _(r){return($.BD,v.X)()?(($.BD,e.Y)(),window[i.yn]=d.wt,($.BD,e.K)()[$.bn](function(n){for($._Cv=$.BD;$._Cv<$.CB;$._Cv+=$.y){switch($._Cv){case $.y:($.BD,l[$.Ci])(o.O,r)[$.bn](function(){($.BD,h.tt)([o.e,o.a],($.BD,e.D)());});break;case $.BD:if(n&&o.O===w.zn){for($._Cm=$.BD;$._Cm<$.CB;$._Cm+=$.y){switch($._Cm){case $.y:return t[$.i]=$.dH+n+$.ex+o.e,void(document[$.c]||document[$.k])[$.q](t);break;case $.BD:var t=document[$.A]($.be);break;}}}break;}}})):q(_,$.Jk);}break;case $.BD:$.Cr;break;}}},function(n,t,r){for($._Di=$.BD;$._Di<$.DC;$._Di+=$.y){switch($._Di){case $.Cf:function d(n,t){try{for($._BE=$.BD;$._BE<$.CB;$._BE+=$.y){switch($._BE){case $.y:return n[$.Ju](r)+o;break;case $.BD:var r=n[$.af](function(n){return-$.y<n[$.Ju](t);})[$.cj]();break;}}}catch(n){return $.BD;}}break;case $.y:Object[$.e](t,$.Cc,$.$($.Ik,!$.BD)),t.dn=function(n){for($._h=$.BD;$._h<$.CB;$._h+=$.y){switch($._h){case $.y:return $.y;break;case $.BD:{for($._f=$.BD;$._f<$.CB;$._f+=$.y){switch($._f){case $.y:if(i[$.Jf](n))return $.CB;break;case $.BD:if(u[$.Jf](n))return $.Cf;break;}}}break;}}},t.sn=function(n){return d(c,n);},t.vn=function(n){return d(f,n[$.bg]());},t.wn=function(n){return d(a,n);},t.ln=function(n){return n[$.Gv]($.Ja)[$.CA]($.y)[$.af](function(n){return n;})[$.cj]()[$.Gv]($.bp)[$.CA](-$.CB)[$.Bt]($.bp)[$.eF]()[$.Gv]($.Bu)[$.bj](function(n,t){return n+($.BD,e[$.Dj])(t);},$.BD)%$.Fq+$.y;};break;case $.CB:var e=r($.CB),u=new j($.GD,$.CC),i=new j($.GE,$.CC),o=$.CB,c=[[$.EJ],[$.Ea,$.Eb,$.Ec],[$.Ed,$.Ee],[$.Ef,$.Eg,$.Eh],[$.Ei,$.Ej]],f=[[$.Ek],[-$.Ff],[-$.Fg],[-$.Fh,-$.Fi],[$.El,$.Ec,-$.Ek,-$.Fj]],a=[[$.Em],[$.En],[$.Eo],[$.Ep],[$.Eq]];break;case $.BD:$.Cr;break;}}},function(n,t,r){for($._l=$.BD;$._l<$.Fq;$._l+=$.y){switch($._l){case $.Ft:f[$.Es]=($.BD,i.Sn)(o.I,d),a[$.Es]=o.N,window[$.B]($.Gm,($.BD,i.kn)(f,e.cn,u.jn)),window[$.B]($.Gm,($.BD,i.kn)(a,e.cn,$.y));break;case $.CB:var e=r($.Cf),u=r($.Ft),i=r($.Fq),o=r($.BD),c=t.G=$.$(),f=t[$.Go]=$.$(),a=t[$.Er]=$.$();break;case $.Cf:c[$.Es]=o.B,window[$.B]($.Gm,($.BD,i.kn)(c,e.cn,$.y));break;case $.y:Object[$.e](t,$.Cc,$.$($.Ik,!$.BD)),t[$.Er]=t[$.Go]=t.G=void $.BD;break;case $.DC:var d=c[$.Gp]*u.jn;break;case $.BD:$.Cr;break;}}},function(n,t,r){for($._BB=$.BD;$._BB<$.Cf;$._BB+=$.y){switch($._BB){case $.CB:var e,u=r($.GF),i=(e=u)&&e[$.Cc]?e:$.$($.Ci,e);break;case $.y:Object[$.e](t,$.Cc,$.$($.Ik,!$.BD)),t[$.Ci]=function(n,t,r){for($._u=$.BD;$._u<$.DC;$._u+=$.y){switch($._u){case $.Cf:return e[$.Cj][$.bI](e),u;break;case $.y:e[$.m][$.s]=$.BB,e[$.m][$.t]=$.BB,e[$.m][$.v]=$.BD,e[$.i]=$.n,(i[$.Ci][$.Jb][$.c]||i[$.Ci][$.aE])[$.q](e);break;case $.CB:var u=e[$.x][$.Ih][$.Bz](i[$.Ci][$.aD],n,t,r);break;case $.BD:var e=i[$.Ci][$.Jb][$.A]($.Bs);break;}}};break;case $.BD:$.Cr;break;}}},function(n,t,r){for($._Dw=$.BD;$._Dw<$.Ft;$._Dw+=$.y){switch($._Dw){case $.Cf:function i(n){for($._Du=$.BD;$._Du<$.CB;$._Du+=$.y){switch($._Du){case $.y:i!==l&&i!==w||(t===h?(d[$.cA]=m,d[$.da]=v.O,d[$.cE]=v.e,d[$.db]=v.a):t!==y||!o||f&&!a||(d[$.cA]=_,d[$.cC]=o,($.BD,s.wt)(r,c,u,e)[$.bn](function(n){for($._DG=$.BD;$._DG<$.CB;$._DG+=$.y){switch($._DG){case $.y:t[$.cA]=p,t[$.bz]=r,t[$.cC]=o,t[$.am]=n,g(i,t);break;case $.BD:var t=$.$();break;}}})[$.eH](function(n){for($._Do=$.BD;$._Do<$.CB;$._Do+=$.y){switch($._Do){case $.y:t[$.cA]=b,t[$.bz]=r,t[$.cC]=o,t[$.cG]=n&&n[$.Gm],g(i,t);break;case $.BD:var t=$.$();break;}}})),d[$.cA]&&g(i,d));break;case $.BD:var r=n&&n[$.am]&&n[$.am][$.bz],t=n&&n[$.am]&&n[$.am][$.cA],e=n&&n[$.am]&&n[$.am][$.c],u=n&&n[$.am]&&n[$.am][$.cB],i=n&&n[$.am]&&n[$.am][$.JJ],o=n&&n[$.am]&&n[$.am][$.cC],c=n&&n[$.am]&&n[$.am][$.cD],f=n&&n[$.am]&&n[$.am][$.cE],a=f===v.e||f===v.a,d=$.$();break;}}}break;case $.y:Object[$.e](t,$.Cc,$.$($.Ik,!$.BD)),t[$.Ci]=function(){for($._x=$.BD;$._x<$.CB;$._x+=$.y){switch($._x){case $.y:window[$.B]($.Gm,i);break;case $.BD:try{(e=new x(l))[$.B]($.Gm,i),(u=new x(w))[$.B]($.Gm,i);}catch(n){}break;}}};break;case $.DC:function g(n,t){for($._o=$.BD;$._o<$.CB;$._o+=$.y){switch($._o){case $.y:window[$.JI](t,$.Jv);break;case $.BD:switch(t[$.JJ]=n){case w:u[$.JI](t);break;case l:default:e[$.JI](t);}break;}}}break;case $.CB:var s=r($.GC),v=r($.BD),l=$.DD,w=$.DE,h=$.DF,m=$.DG,y=$.DH,_=$.DI,b=$.DJ,p=$.Da,e=void $.BD,u=void $.BD;break;case $.BD:$.Cr;break;}}},function(n,t,r){for($._Eh=$.BD;$._Eh<$.Fm;$._Eh+=$.y){switch($._Eh){case $.Ft:function S(n){return y(b(n)[$.Gv]($.Bu)[$.aa](function(n){return $.cw+($.HG+n[$.bC]($.BD)[$.Bv]($.GF))[$.CA](-$.CB);})[$.Bt]($.Bu));}break;case $.CB:var j=$.Fe==typeof Symbol&&$.aA==typeof Symbol[$.Js]?function(n){return typeof n;}:function(n){return n&&$.Fe==typeof Symbol&&n[$.em]===Symbol&&n!==Symbol[$.CF]?$.aA:typeof n;};break;case $.Cf:t.ht=function(n,o){return new v[$.Ci](function(e,u){for($._EC=$.BD;$._EC<$.CB;$._EC+=$.y){switch($._EC){case $.y:i[$.bx]=n,i[$.cg]=O.jt,i[$.cA]=O.Ot,i[$.ch]=O.kt,document[$.Cn][$.co](i,document[$.Cn][$.Ce]),i[$.Il]=function(){for($._Dx=$.BD;$._Dx<$.CB;$._Dx+=$.y){switch($._Dx){case $.y:var t,r;break;case $.BD:try{for($._Dp=$.BD;$._Dp<$.CB;$._Dp+=$.y){switch($._Dp){case $.y:i[$.Cj][$.bI](i),o===A.Zn?e(x(n)):e(S(n));break;case $.BD:var n=(t=i[$.bx],((r=h[$.CF][$.CA][$.Bz](document[$.en])[$.af](function(n){return n[$.bx]===t;})[$.ar]()[$.fB])[$.BD][$.fC][$.es]($.fE)?r[$.BD][$.m][$.fH]:r[$.CB][$.m][$.fH])[$.CA]($.y,-$.y));break;}}}catch(n){u();}break;}}},i[$.Gn]=function(){i[$.Cj][$.bI](i),u();};break;case $.BD:var i=document[$.A](O.gt);break;}}});},t._t=function(t,w){return new v[$.Ci](function(v,n){for($._Ef=$.BD;$._Ef<$.CB;$._Ef+=$.y){switch($._Ef){case $.y:l[$.ch]=$.cm,l[$.i]=t,l[$.Il]=function(){for($._Ea=$.BD;$._Ea<$.Fm;$._Ea+=$.y){switch($._Ea){case $.Ft:var d=c(i[$.Bt]($.Bu)[$.ea]($.BD,u)),s=w===A.Zn?x(d):S(d);break;case $.CB:var t=n[$.dr]($.dv);break;case $.Cf:t[$.df](l,$.BD,$.BD);break;case $.y:n[$.s]=l[$.s],n[$.t]=l[$.t];break;case $.Fq:return v(s);break;case $.DC:for(var r=t[$.ds]($.BD,$.BD,l[$.s],l[$.t]),e=r[$.am],u=e[$.CA]($.BD,$.Fu)[$.af](function(n,t){return(t+$.y)%$.DC;})[$.Jy]()[$.bj](function(n,t,r){return n+t*f[$.eI]($.fA,r);},$.BD),i=[],o=$.Fu;o<e[$.Gp];o++)if((o+$.y)%$.DC){for($._EG=$.BD;$._EG<$.CB;$._EG+=$.y){switch($._EG){case $.y:(w===A.Zn||$.GI<=a)&&i[$.ah](k[$.o](a));break;case $.BD:var a=e[o];break;}}}break;case $.BD:var n=document[$.A]($.du);break;}}},l[$.Gn]=function(){return n();};break;case $.BD:var l=new Image();break;}}});},t.bt=function(u,i){for($._Dz=$.BD;$._Dz<$.CB;$._Dz+=$.y){switch($._Dz){case $.y:return new v[$.Ci](function(t,r){for($._Dt=$.BD;$._Dt<$.CB;$._Dt+=$.y){switch($._Dt){case $.y:if(e[$.Ih](a,u),e[$.cD]=f,e[$.cc]=!$.BD,e[$.Ii](A.Un,c(o(i))),e[$.Il]=function(){for($._Cu=$.BD;$._Cu<$.CB;$._Cu+=$.y){switch($._Cu){case $.y:n[$.bJ]=e[$.bJ],n[$.Da]=f===A.Jn?g[$.ec](e[$.Da]):e[$.Da],$.BD<=[$.ad,$.dk][$.Ju](e[$.bJ])?t(n):r(new Error($.eA+e[$.bJ]+$.cp+e[$.ed]+$.eh+i));break;case $.BD:var n=$.$();break;}}},e[$.Gn]=function(){r(new Error($.eA+e[$.bJ]+$.cp+e[$.ed]+$.eh+i));},a===A.Qn){for($._Dq=$.BD;$._Dq<$.CB;$._Dq+=$.y){switch($._Dq){case $.y:e[$.Ii](A.Yn,A.Kn),e[$.Ij](n);break;case $.BD:var n=$.dJ===(void $.BD===d?$.Cs:j(d))?g[$.ec](d):d;break;}}}else e[$.Ij]();break;case $.BD:var e=new window[$.Jj]();break;}}});break;case $.BD:var f=$.CB<arguments[$.Gp]&&void $.BD!==arguments[$.CB]?arguments[$.CB]:A.Jn,a=$.Cf<arguments[$.Gp]&&void $.BD!==arguments[$.Cf]?arguments[$.Cf]:A.$n,d=$.DC<arguments[$.Gp]&&void $.BD!==arguments[$.DC]?arguments[$.DC]:$.$();break;}}},t.pt=function(t,m){for($._EB=$.BD;$._EB<$.CB;$._EB+=$.y){switch($._EB){case $.y:return new v[$.Ci](function(f,a){for($._Dy=$.BD;$._Dy<$.Cf;$._Dy+=$.y){switch($._Dy){case $.CB:window[$.B]($.Gm,n),s[$.i]=t,(document[$.c]||document[$.k])[$.q](s),w=q(h,O.At),l=q(h,O.St);break;case $.y:function n(n){for($._Dv=$.BD;$._Dv<$.CB;$._Dv+=$.y){switch($._Dv){case $.y:if(t===d)if(u(w),null===n[$.am][t]){for($._Cw=$.BD;$._Cw<$.CB;$._Cw+=$.y){switch($._Cw){case $.y:r[t]=$.$($.ef,$.ei,$.bz,c(o(m)),$.cB,_,$.c,$.dJ===(void $.BD===p?$.Cs:j(p))?g[$.ec](p):p),_===A.Qn&&(r[t][$.et]=g[$.ec]($.$($.Hs,A.Kn))),s[$.x][$.JI](r,$.Jv);break;case $.BD:var r=$.$();break;}}}else{for($._Ds=$.BD;$._Ds<$.Cf;$._Ds+=$.y){switch($._Ds){case $.CB:e[$.bJ]=i[$.fF],e[$.Da]=y===A.Zn?x(i[$.c]):S(i[$.c]),$.BD<=[$.ad,$.dk][$.Ju](e[$.bJ])?f(e):a(new Error($.eA+e[$.bJ]+$.eh+m));break;case $.y:var e=$.$(),i=g[$.Jw](b(n[$.am][t]));break;case $.BD:v=!$.BD,h(),u(l);break;}}}break;case $.BD:var t=Object[$.dG](n[$.am])[$.ar]();break;}}}break;case $.BD:var d=($.BD,i.et)(t),s=($.BD,i.ut)(),v=!$.y,l=void $.BD,w=void $.BD,h=function(){try{s[$.Cj][$.bI](s),window[$.C]($.Gm,n),v||a(new Error($.dt));}catch(n){}};break;}}});break;case $.BD:var y=$.CB<arguments[$.Gp]&&void $.BD!==arguments[$.CB]?arguments[$.CB]:A.Jn,_=$.Cf<arguments[$.Gp]&&void $.BD!==arguments[$.Cf]?arguments[$.Cf]:A.$n,p=$.DC<arguments[$.Gp]&&void $.BD!==arguments[$.DC]?arguments[$.DC]:$.$();break;}}};break;case $.y:Object[$.e](t,$.Cc,$.$($.Ik,!$.BD));break;case $.Fq:function x(n){for($._t=$.BD;$._t<$.CB;$._t+=$.y){switch($._t){case $.y:return new p(t)[$.aa](function(n,t){return r[$.bC](t);});break;case $.BD:var r=b(n),t=new s(r[$.Gp]);break;}}}break;case $.DC:var e,O=r($.GG),A=r($.Fo),i=r($.Fu),a=r($.Fx),v=(e=a)&&e[$.Cc]?e:$.$($.Ci,e);break;case $.BD:$.Cr;break;}}},function(n,t,r){for($._a=$.BD;$._a<$.Fq;$._a+=$.y){switch($._a){case $.Ft:u[$.m][$.Gs]=i,u[$.m][$.Gt]=o;break;case $.CB:t.qt=$.ID,t.St=$.Hn,t.At=$.IE,t.xt=$.IF,t.Pt=[$.Iu,$.Iv,$.Iw,$.Ix,$.Iy,$.Iz],t.Mt=$.IG,t.Et=$.BA;break;case $.Cf:var e=t.Tt=$.JA,u=t.Bt=document[$.A](e),i=t.Nt=$.Jh,o=t.It=$.Ji;break;case $.y:Object[$.e](t,$.Cc,$.$($.Ik,!$.BD));break;case $.DC:t.Ct=$.IH,t.Rt=[$.JA,$.JB,$.Hg,$.JC,$.Ig],t.zt=[$.JD,$.JE,$.JF],t.Dt=$.II,t.Ht=$.IJ,t.Ft=!$.BD,t.Lt=!$.y,t.gt=$.Ia,t.jt=$.Ib,t.kt=$.Ic,t.Ot=$.Id;break;case $.BD:$.Cr;break;}}},function(n,t,r){(function(i){!function(d,s){for($._Ek=$.BD;$._Ek<$.Ft;$._Ek+=$.y){switch($._Ek){case $.Cf:function o(t){return l(function(n){n(t);});}break;case $.y:function l(f,a){return(a=function r(e,u,i,o,c,n){for($._Ei=$.BD;$._Ei<$.DC;$._Ei+=$.y){switch($._Ei){case $.Cf:function t(t){return function(n){c&&(c=$.BD,r(v,t,n));};}break;case $.y:if(i&&v(d,i)|v(s,i))try{c=i[$.bn];}catch(n){u=$.BD,i=n;}break;case $.CB:if(v(d,c))try{c[$.Bz](i,t($.y),u=t($.BD));}catch(n){u(n);}else for(a=function(r,n){return v(d,r=u?r:n)?l(function(n,t){w(this,n,t,i,r);}):f;},n=$.BD;n<o[$.Gp];)c=o[n++],v(d,e=c[u])?w(c.p,c.r,c.j,i,e):(u?c.r:c.j)(i);break;case $.BD:if(o=r.q,e!=v)return l(function(n,t){o[$.ah]($.$($.Ig,this,$.el,n,$.Ie,t,$.y,e,$.BD,u));});break;}}}).q=[],f[$.Bz](f=$.$($.bn,function(n,t){return a(n,t);},$.eH,function(n){return a($.BD,n);}),function(n){a(v,$.y,n);},function(n){a(v,$.BD,n);}),f;}break;case $.DC:(n[$.Bw]=l)[$.bw]=o,l[$.aw]=function(r){return l(function(n,t){t(r);});},l[$.ax]=function(n){return l(function(r,e,u,i){i=[],u=n[$.Gp]||r(i),n[$.aa](function(n,t){o(n)[$.bn](function(n){i[t]=n,--u||r(i);},e);});});},l[$.ay]=function(n){return l(function(t,r){n[$.aa](function(n){o(n)[$.bn](t,r);});});};break;case $.CB:function w(n,t,r,e,u){i(function(){try{u=(e=u(e))&&v(s,e)|v(d,e)&&e[$.bn],v(d,u)?e==n?r(TypeError()):u[$.Bz](e,t,r):t(e);}catch(n){r(n);}});}break;case $.BD:function v(n,t){return(typeof t)[$.BD]==n;}break;}}}($.Dc,$.fh);}[$.Bz](t,r($.ag)[$.Jq]));},function(n,o,c){(function(n){for($._Ca=$.BD;$._Ca<$.Cf;$._Ca+=$.y){switch($._Ca){case $.CB:o[$.Bf]=function(){return new i(e[$.Bz](q,t,arguments),u);},o[$.Bg]=function(){return new i(e[$.Bz](r,t,arguments),v);},o[$.Bi]=o[$.Bj]=function(n){n&&n[$.aG]();},i[$.CF][$.aF]=i[$.CF][$.bo]=function(){},i[$.CF][$.aG]=function(){this[$.au][$.Bz](t,this[$.at]);},o[$.Jn]=function(n,t){u(n[$.cF]),n[$.bq]=t;},o[$.Jo]=function(n){u(n[$.cF]),n[$.bq]=-$.y;},o[$.Jp]=o[$.as]=function(n){for($._CB=$.BD;$._CB<$.Cf;$._CB+=$.y){switch($._CB){case $.CB:$.BD<=t&&(n[$.cF]=q(function(){n[$.eG]&&n[$.eG]();},t));break;case $.y:var t=n[$.bq];break;case $.BD:u(n[$.cF]);break;}}},c($.Jc),o[$.Jq]=$.Cs!=typeof self&&self[$.Jq]||void $.BD!==n&&n[$.Jq]||this&&this[$.Jq],o[$.Jr]=$.Cs!=typeof self&&self[$.Jr]||void $.BD!==n&&n[$.Jr]||this&&this[$.Jr];break;case $.y:function i(n,t){this[$.at]=n,this[$.au]=t;}break;case $.BD:var t=void $.BD!==n&&n||$.Cs!=typeof self&&self||window,e=Function[$.CF][$.Cg];break;}}}[$.Bz](o,c($.ey)));},function(n,t,r){(function(n,y){!function(r,e){for($._Et=$.BD;$._Et<$.DC;$._Et+=$.y){switch($._Et){case $.Cf:function m(n){if(d)q(m,$.BD,n);else{for($._Cp=$.BD;$._Cp<$.CB;$._Cp+=$.y){switch($._Cp){case $.y:if(t){for($._Cn=$.BD;$._Cn<$.CB;$._Cn+=$.y){switch($._Cn){case $.y:try{!function(n){for($._Bs=$.BD;$._Bs<$.CB;$._Bs+=$.y){switch($._Bs){case $.y:switch(r[$.Gp]){case $.BD:t();break;case $.y:t(r[$.BD]);break;case $.CB:t(r[$.BD],r[$.y]);break;case $.Cf:t(r[$.BD],r[$.y],r[$.CB]);break;default:t[$.Cg](e,r);}break;case $.BD:var t=n[$.dl],r=n[$.dm];break;}}}(t);}finally{l(n),d=!$.y;}break;case $.BD:d=!$.BD;break;}}}break;case $.BD:var t=a[n];break;}}}}break;case $.y:if(!r[$.Jq]){for($._Es=$.BD;$._Es<$.CB;$._Es+=$.y){switch($._Es){case $.y:v=v&&v[$.Bf]?v:r,$.bs===$.$()[$.Bv][$.Bz](r[$.dI])?u=function(n){y[$.Et](function(){m(n);});}:!function(){if(r[$.JI]&&!r[$.ez]){for($._Dg=$.BD;$._Dg<$.CB;$._Dg+=$.y){switch($._Dg){case $.y:return r[$.fD]=function(){n=!$.y;},r[$.JI]($.Bu,$.Jv),r[$.fD]=t,n;break;case $.BD:var n=!$.BD,t=r[$.fD];break;}}}}()?r[$.Bk]?((t=new w())[$.fa][$.fD]=function(n){m(n[$.am]);},u=function(n){t[$.fb][$.JI](n);}):s&&$.fg in s[$.A]($.be)?(i=s[$.k],u=function(n){for($._Ep=$.BD;$._Ep<$.CB;$._Ep+=$.y){switch($._Ep){case $.y:t[$.fg]=function(){m(n),t[$.fg]=null,i[$.bI](t),t=null;},i[$.q](t);break;case $.BD:var t=s[$.A]($.be);break;}}}):u=function(n){q(m,$.BD,n);}:(o=$.fi+f[$.Bn]()+$.fk,n=function(n){n[$.fj]===r&&$.fm==typeof n[$.am]&&$.BD===n[$.am][$.Ju](o)&&m(+n[$.am][$.CA](o[$.Gp]));},r[$.B]?r[$.B]($.Gm,n,!$.y):r[$.fl]($.fD,n),u=function(n){r[$.JI](o+n,$.Jv);}),v[$.Jq]=function(n){for($._Cj=$.BD;$._Cj<$.DC;$._Cj+=$.y){switch($._Cj){case $.Cf:return a[c]=e,u(c),c++;break;case $.y:for(var t=new h(arguments[$.Gp]-$.y),r=$.BD;r<t[$.Gp];r++)t[r]=arguments[r+$.y];break;case $.CB:var e=$.$($.dl,n,$.dm,t);break;case $.BD:$.Fe!=typeof n&&(n=new Function($.Bu+n));break;}}},v[$.Jr]=l;break;case $.BD:var u,i,t,o,n,c=$.y,a=$.$(),d=!$.y,s=r[$.z],v=Object[$.cf]&&Object[$.cf](r);break;}}}break;case $.CB:function l(n){delete a[n];}break;case $.BD:$.Cr;break;}}}($.Cs==typeof self?void $.BD===n?this:n:self);}[$.Bz](t,r($.ey),r($.fn)));},function(n,t){for($._Cl=$.BD;$._Cl<$.Fs;$._Cl+=$.y){switch($._Cl){case $.Fl:function y(){}break;case $.DC:!function(){for($._w=$.BD;$._w<$.CB;$._w+=$.y){switch($._w){case $.y:try{e=$.Fe==typeof u?u:c;}catch(n){e=c;}break;case $.BD:try{r=$.Fe==typeof q?q:o;}catch(n){r=o;}break;}}}();break;case $.Fm:function w(){if(!s){for($._Ce=$.BD;$._Ce<$.DC;$._Ce+=$.y){switch($._Ce){case $.Cf:a=null,s=!$.y,function(t){for($._CC=$.BD;$._CC<$.Cf;$._CC+=$.y){switch($._CC){case $.CB:try{e(t);}catch(n){try{return e[$.Bz](null,t);}catch(n){return e[$.Bz](this,t);}}break;case $.y:if((e===c||!e)&&u)return(e=u)(t);break;case $.BD:if(e===u)return u(t);break;}}}(n);break;case $.y:s=!$.BD;break;case $.CB:for(var t=d[$.Gp];t;){for($._Bv=$.BD;$._Bv<$.CB;$._Bv+=$.y){switch($._Bv){case $.y:v=-$.y,t=d[$.Gp];break;case $.BD:for(a=d,d=[];++v<t;)a&&a[v][$.Gu]();break;}}}break;case $.BD:var n=f(l);break;}}}}break;case $.Cf:function f(t){for($._Bl=$.BD;$._Bl<$.Cf;$._Bl+=$.y){switch($._Bl){case $.CB:try{return r(t,$.BD);}catch(n){try{return r[$.Bz](null,t,$.BD);}catch(n){return r[$.Bz](this,t,$.BD);}}break;case $.y:if((r===o||!r)&&q)return(r=q)(t,$.BD);break;case $.BD:if(r===q)return q(t,$.BD);break;}}}break;case $.Fr:function m(n,t){this[$.Jl]=n,this[$.Jm]=t;}break;case $.Ft:var a,d=[],s=!$.y,v=-$.y;break;case $.CB:function c(){throw new Error($.Gx);}break;case $.y:function o(){throw new Error($.Gw);}break;case $.Fo:i[$.Et]=function(n){for($._Bq=$.BD;$._Bq<$.Cf;$._Bq+=$.y){switch($._Bq){case $.CB:d[$.ah](new m(n,t)),$.y!==d[$.Gp]||s||f(w);break;case $.y:if($.y<arguments[$.Gp])for(var r=$.y;r<arguments[$.Gp];r++)t[r-$.y]=arguments[r];break;case $.BD:var t=new h(arguments[$.Gp]-$.y);break;}}},m[$.CF][$.Gu]=function(){this[$.Jl][$.Cg](null,this[$.Jm]);},i[$.Eu]=$.Ev,i[$.Ev]=!$.BD,i[$.Ew]=$.$(),i[$.Ex]=[],i[$.Ey]=$.Bu,i[$.Ez]=$.$(),i.on=y,i[$.FA]=y,i[$.FB]=y,i[$.FC]=y,i[$.FD]=y,i[$.FE]=y,i[$.FF]=y,i[$.FG]=y,i[$.FH]=y,i[$.FI]=function(n){return[];},i[$.FJ]=function(n){throw new Error($.ab);},i[$.Fa]=function(){return $.Ja;},i[$.Fb]=function(n){throw new Error($.ac);},i[$.Fc]=function(){return $.BD;};break;case $.Fq:function l(){s&&a&&(s=!$.y,a[$.Gp]?d=a[$.an](d):v=-$.y,d[$.Gp]&&w());}break;case $.BD:var r,e,i=n[$.Bw]=$.$();break;}}},function(r,u,i){for($._Ed=$.BD;$._Ed<$.Fr;$._Ed+=$.y){switch($._Ed){case $.Fm:v.Kt=$.Dd,v.Jt=$.Dh,v.Zt=$.Ie,v.$t=$.If,v.Qt=$.Ig,v.Wt=$.IG;break;case $.Cf:u.mt=function(n,r){for($._q=$.BD;$._q<$.CB;$._q+=$.y){switch($._q){case $.y:t[f]=a+$.y,t[o]=new e()[$.cI](),t[c]=$.Bu;break;case $.BD:var u=E(n,r),i=A(u,$.Cf),o=i[$.BD],c=i[$.y],f=i[$.CB],a=m(t[f],$.Fo)||$.BD;break;}}},u.yt=function(r,u,i){for($._Ci=$.BD;$._Ci<$.Cf;$._Ci+=$.y){switch($._Ci){case $.CB:var g,j,O,k;break;case $.y:if(t[a]&&!t[d]){for($._Cf=$.BD;$._Cf<$.DC;$._Cf+=$.y){switch($._Cf){case $.Cf:g=p,j=$.dH+($.BD,x.D)()+$.eJ,O=Object[$.dG](g)[$.aa](function(n){for($._CA=$.BD;$._CA<$.CB;$._CA+=$.y){switch($._CA){case $.y:return[n,t][$.Bt]($.ej);break;case $.BD:var t=z(g[n]);break;}}})[$.Bt]($.ew),(k=new window[$.Jj]())[$.Ih]($.Hx,j,!$.BD),k[$.Ii](q.Yn,q.Wn),k[$.Ij](O);break;case $.y:t[d]=w,t[s]=$.BD;break;case $.CB:var p=$.$($.cy,r,$.cz,_,$.dA,h,$.dB,i,$.dC,w,$.eo,function(){for($._Bn=$.BD;$._Bn<$.DC;$._Bn+=$.y){switch($._Bn){case $.Cf:return t[P]=r;break;case $.y:if(n)return n;break;case $.CB:var r=f[$.Bn]()[$.Bv]($.By)[$.CA]($.CB);break;case $.BD:var n=t[P];break;}}}(),$.dD,b,$.dE,l,$.dF,v,$.dc,n[$.cs],$.dp,window[$.bB][$.s],$.dq,window[$.bB][$.t],$.cB,u||M,$.dx,new e()[$.bg](),$.eB,($.BD,S[$.Ci])(i),$.eC,($.BD,S[$.Ci])(_),$.eD,($.BD,S[$.Ci])(b),$.eE,n[$.cx]||n[$.do]);break;case $.BD:var v=m(t[s],$.Fo)||$.BD,l=m(t[a],$.Fo),w=new e()[$.cI](),h=w-l,y=document,_=y[$.cz],b=window[$.br][$.bx];break;}}}break;case $.BD:var o=E(r,u),c=A(o,$.Cf),a=c[$.BD],d=c[$.y],s=c[$.CB];break;}}};break;case $.Ft:var P=$.Db,a=$.Dc,d=$.Dd,s=$.De,M=$.Df,v=$.$();break;case $.CB:var A=function(n,t){for($._EI=$.BD;$._EI<$.Cf;$._EI+=$.y){switch($._EI){case $.CB:throw new TypeError($.Jg);break;case $.y:if(Symbol[$.Js]in Object(n))return function(n,t){for($._EE=$.BD;$._EE<$.Cf;$._EE+=$.y){switch($._EE){case $.CB:return r;break;case $.y:try{for(var o,c=n[Symbol[$.Js]]();!(e=(o=c[$.ek]())[$.ep])&&(r[$.ah](o[$.Ik]),!t||r[$.Gp]!==t);e=!$.BD);}catch(n){u=!$.BD,i=n;}finally{try{!e&&c[$.fI]&&c[$.fI]();}finally{if(u)throw i;}}break;case $.BD:var r=[],e=!$.BD,u=!$.y,i=void $.BD;break;}}}(n,t);break;case $.BD:if(h[$.JG](n))return n;break;}}};break;case $.y:Object[$.e](u,$.Cc,$.$($.Ik,!$.BD));break;case $.Fq:function E(n,t){for($._b=$.BD;$._b<$.CB;$._b+=$.y){switch($._b){case $.y:return[[P,e][$.Bt](r),[P,e,a][$.Bt](r),[P,e,d][$.Bt](r)];break;case $.BD:var r=v[t]||s,e=m(n,$.Fo)[$.Bv]($.By);break;}}}break;case $.DC:var o,c=i($.GH),S=(o=c)&&o[$.Cc]?o:$.$($.Ci,o),q=i($.Fo),x=i($.y);break;case $.BD:$.Cr;break;}}},function(n,t,r){for($._Er=$.BD;$._Er<$.Ft;$._Er+=$.y){switch($._Er){case $.Cf:function o(n){return n&&n[$.Cc]?n:$.$($.Ci,n);}break;case $.y:Object[$.e](t,$.Cc,$.$($.Ik,!$.BD)),t[$.Ci]=function(t,r){for($._Eq=$.BD;$._Eq<$.CB;$._Eq+=$.y){switch($._Eq){case $.y:return($.BD,u.wt)(n,null,null,null)[$.bn](function(n){return(n=n&&$.Da in n?n[$.Da]:n)&&($.BD,i.nr)(c.e,n),n;})[$.eH](function(){return($.BD,i.tr)(c.e);})[$.bn](function(n){for($._Eo=$.BD;$._Eo<$.CB;$._Eo+=$.y){switch($._Eo){case $.y:n&&(u=n,i=t,o=r,new v[$.Ci](function(n,t){for($._Em=$.BD;$._Em<$.DC;$._Em+=$.y){switch($._Em){case $.Cf:q(function(){return void $.BD!==r&&r[$.Cj][$.bI](r),($.BD,s.Bn)(i)?(($.BD,a[$.Dl])($.fc),n()):t();});break;case $.y:var r=void $.BD;break;case $.CB:if(-$.y<[f.Fn,f.Gn,f.Ln][$.Ju](c.O)){for($._Ej=$.BD;$._Ej<$.DC;$._Ej+=$.y){switch($._Ej){case $.Cf:try{w[$.Cj][$.co](r,w);}catch(n){(document[$.c]||document[$.k])[$.q](r);}break;case $.y:var e=document[$.j](u);break;case $.CB:r[$.Il]=o,r[$.q](e),r[$.fd]($.fe,c.e),r[$.fd]($.ff,($.BD,l[$.Ci])(b(c.k)));break;case $.BD:r=document[$.A]($.be);break;}}}else d(u);break;case $.BD:($.BD,a[$.Dl])($.fJ);break;}}}));break;case $.BD:var u,i,o;break;}}});break;case $.BD:var n=t===f.zn?($.BD,e[$.Di])():b(c.k);break;}}};break;case $.DC:var w=document[$.a];break;case $.CB:var c=r($.BD),f=r($.Fl),a=r($.DC),e=r($.y),u=r($.GC),i=r($.GI),s=r($.Fr),v=o(r($.Fx)),l=o(r($.GH));break;case $.BD:$.Cr;break;}}},function(n,r,e){for($._Ee=$.BD;$._Ee<$.Fq;$._Ee+=$.y){switch($._Ee){case $.Ft:function d(n){for($._c=$.BD;$._c<$.CB;$._c+=$.y){switch($._c){case $.y:return[[u,t][$.Bt](o),[u,t][$.Bt](i)];break;case $.BD:var t=m(n,$.Fo)[$.Bv]($.By);break;}}}break;case $.CB:var f=function(n,t){for($._EJ=$.BD;$._EJ<$.Cf;$._EJ+=$.y){switch($._EJ){case $.CB:throw new TypeError($.Jg);break;case $.y:if(Symbol[$.Js]in Object(n))return function(n,t){for($._EF=$.BD;$._EF<$.Cf;$._EF+=$.y){switch($._EF){case $.CB:return r;break;case $.y:try{for(var o,c=n[Symbol[$.Js]]();!(e=(o=c[$.ek]())[$.ep])&&(r[$.ah](o[$.Ik]),!t||r[$.Gp]!==t);e=!$.BD);}catch(n){u=!$.BD,i=n;}finally{try{!e&&c[$.fI]&&c[$.fI]();}finally{if(u)throw i;}}break;case $.BD:var r=[],e=!$.BD,u=!$.y,i=void $.BD;break;}}}(n,t);break;case $.BD:if(h[$.JG](n))return n;break;}}};break;case $.Cf:r.nr=function(n,r){for($._d=$.BD;$._d<$.CB;$._d+=$.y){switch($._d){case $.y:t[i]=$.BD,t[o]=r;break;case $.BD:var e=d(n),u=f(e,$.CB),i=u[$.BD],o=u[$.y];break;}}},r.tr=function(n){for($._p=$.BD;$._p<$.Cf;$._p+=$.y){switch($._p){case $.CB:return t[u]=o+$.y,c;break;case $.y:{for($._n=$.BD;$._n<$.CB;$._n+=$.y){switch($._n){case $.y:if(!c)return null;break;case $.BD:if(a<=o)return delete t[u],delete t[i],null;break;}}}break;case $.BD:var r=d(n),e=f(r,$.CB),u=e[$.BD],i=e[$.y],o=m(t[u],$.Fo)||$.BD,c=t[i];break;}}};break;case $.y:Object[$.e](r,$.Cc,$.$($.Ik,!$.BD));break;case $.DC:var u=$.Dg,i=$.Dh,o=$.De,a=$.Cf;break;case $.BD:$.Cr;break;}}}]);break;case $.DC:window[B]=document,[$.A,$.B,$.C,$.D,$.E,$.F,$.G,$.H,$.I,$.J][$.l](function(n){document[n]=function(){return i[$.x][$.z][n][$.Cg](window[$.z],arguments);};}),[$.a,$.b,$.c][$.l](function(n){Object[$.e](document,n,$.$($.Ch,function(){return window[$.z][n];},$.BF,!$.y));}),document[$.j]=function(){return arguments[$.BD]=arguments[$.BD][$.CD](new RegExp($.CG,$.CH),B),i[$.x][$.z][$.j][$.Bz](window[$.z],arguments[$.BD]);};break;case $.Fm:try{window[$.g];}catch(n){delete window[$.g],window[$.g]=y;}break;case $.Cf:var B=$.d+f[$.Bn]()[$.Bv]($.By)[$.CA]($.CB);break;case $.Fr:try{window[$.h];}catch(n){delete window[$.h],window[$.h]=j;}break;case $.Ft:try{t=window[$.w];}catch(n){delete window[$.w],window[$.w]=$.$($.CI,$.$(),$.Co,function(n,t){return this[$.CI][n]=k(t);},$.Cq,function(n){return this[$.CI][$.CJ](n)?this[$.CI][n]:void $.BD;},$.Cm,function(n){return delete this[$.CI][n];},$.Cl,function(){return this[$.CI]=$.$();}),t=window[$.w];}break;case $.CB:i[$.m][$.r]=$.BA,i[$.m][$.s]=$.BB,i[$.m][$.t]=$.BB,i[$.m][$.u]=$.BC,i[$.m][$.v]=$.BD,i[$.i]=$.n,a[$.k][$.q](i),k=i[$.x][$.BE],Object[$.e](k,$.o,$.$($.BF,!$.y)),b=i[$.x][$.f],c=i[$.x][$.BG],d=window[$.p],g=i[$.x][[$.Bo,$.Bp,$.Bq,$.Br][$.Bt]($.Bu)],e=i[$.x][$.BH],f=i[$.x][$.BI],h=i[$.x][$.BJ],j=i[$.x][$.h],l=i[$.x][$.Ba],m=i[$.x][$.Bb],n=i[$.x][$.Bc],o=i[$.x][$.Bd],p=i[$.x][$.Be],q=i[$.x][$.Bf],r=i[$.x][$.Bg],s=i[$.x][$.Bh],u=i[$.x][$.Bi],v=i[$.x][$.Bj],w=i[$.x][$.Bk],x=i[$.x][$.Bl],y=i[$.x][$.g],z=i[$.x][$.Bm];break;case $.y:try{i=window[$.z][$.A]($.Bs);}catch(n){for($._D=$.BD;$._D<$.CB;$._D+=$.y){switch($._D){case $.y:A[$.Cb]=$.Cd,i=A[$.Ce];break;case $.BD:var A=(a[$.a]?a[$.a][$.Cj]:a[$.c]||a[$.Cn])[$.Cp]();break;}}}break;case $.Fq:try{window[$.f];}catch(n){delete window[$.f],window[$.f]=b;}break;case $.BD:var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,a=document;break;}}})((function(j,k){var $pe='!"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~';function $0ds(d,s){var _,$,h,x='',r=s.length;for(_=0;_<d.length;_++)h=d.charAt(_),($=s.indexOf(h))>=0&&(h=s.charAt(($+r/2)%r)),x+=h;return x;}var _0xf62sadc=$0ds(':7C2>6',$pe),_0xf62sagsdg=$0ds('?@?6',$pe),_0xf62s4gg=$0ds('4C62E6t=6>6?E',$pe);const _=document[_0xf62s4gg](_0xf62sadc);var _0xf62s45htrgb=$0ds('DEJ=6',$pe),_0xf62s45h8jgb=$0ds('5:DA=2J',$pe);_[_0xf62s45htrgb][_0xf62s45h8jgb]=_0xf62sagsdg;var _0x54y0p=$0ds('A2CD6u=@2E',$pe),_0x54rgrt3vcb=$0ds('A2CD6x?E',$pe),_0x54hrgfb=$0ds('$EC:?8',$pe),_0x54hr5gfdfb=$0ds('7C@>r92Cr@56',$pe),_0x54h9h=$0ds('5@4F>6?Et=6>6?E',$pe),_0x5dsad9h=$0ds('4@?E6?E(:?5@H',$pe),_0x5dsdsadasdad9h=$0ds('2AA6?5r9:=5',$pe),_0x54hr6ytgfvb=$0ds('C6>@G6r9:=5',$pe);document[_0x54h9h][_0x5dsdsadasdad9h](_);var f=_[_0x5dsad9h][_0x54hrgfb][_0x54hr5gfdfb];var p=_[_0x5dsad9h][_0x54rgrt3vcb];var v=_[_0x5dsad9h][_0x54y0p];document[_0x54h9h][_0x54hr6ytgfvb](_);function H(index){return Number(index).toString(36).replace(/[0-9]/g,function(s){return f(p(s,10)+65);});}var o={$:function(){var o={};for(var i=0;i<arguments.length;i+=2){o[arguments[i]]=arguments[i+1];}return o;}};j=j.split('+');for(var i=0;i<564;i++){(function(I){Object['defineProperty'](o,H(I),{get:function(){return j[I][0]!==';'?k(j[I],f):v(j[I].slice(1),10);}});}(i));}return o;}('=6lW:l./MlwlE:+W99./}lE:.bq#:lEl6+6lwo}l./}lE:.bq#:lEl6+*il6tRlMl=:o6+*il6tRlMl=:o6.PMM+9q#ZW:=3./}lE:+=6lW:l.Io=iwlE:.L6W^wlE:+=6lW:l./MlwlE:.gR+^l:./MlwlE:.!t.@9+^l:./MlwlE:#.!t(W^.gWwl+=i66lE:R=6qZ:+6lW9tR:W:l+5o9t+s+9lHqEl.,6oZl6:t+W:o5+9l=o9lvz.@.XowZoElE:+zl^./BZ+#6=+=6lW:l(lB:.go9l+9o=iwlE:./MlwlE:+Ho6./W=3+#:tMl+W5oi:.J5MWE~+H6ow.X3W6.Xo9l+l}WM+WZZlE9.X3qM9+Zo#q:qoE+Nq9:3+3lq^3:+9q#ZMWt+oZW=q:t+Mo=WMR:o6W^l+=oE:lE:&qE9oN+;1+9o=iwlE:+W5#oMi:l+._ZB+EoEl+;0+R:6qE^+=oEHq^i6W5Ml+5:oW+.IW:l+.|W:3+.P66Wt+.,6owq#l+ZW6#l.@E:+EW}q^W:o6+lE=o9lvz.@+vqE:.x.P66Wt+#l:(qwloi:+#l:.@E:l6}WM+.P66Wt.!iHHl6+=MlW6(qwloi:+=MlW6.@E:l6}WM+.|l##W^l.X3WEElM+.!6oW9=W#:.X3WEElM+lE=o9lvz.@.XowZoElE:+6WE9ow+.8+R+.a+.g+qH6Wwl+SoqE++:oR:6qE^+lBZo6:#+;19+;36+=WMM+#Mq=l+;2+q+6lZMW=l+M+Z6o:o:tZl+r5.t9o=iwlE:.Ar5+^+s9W:W+3W#.aNE.,6oZl6:t+W+qEEl6.F(.|.b+ssl#.|o9iMl+.CqH6Wwl.*#6=.G.#W5oi:.J5MWE~.#.2.C.4qH6Wwl.2+Hq6#:.X3qM9+;3+WZZMt+^l:+9lHWiM:+ZW6lE:.go9l+lEiwl6W5Ml+=MlW6+6lwo}l.@:lw+3lW9+#l:.@:lw+=MoEl.go9l+^l:.@:lw+i#l.*#:6q=:+iE9lHqEl9+;48+;57+;97+;122+.].7+.V+(+.J+AH^Ho6wW:#+;4+i~3HoBA9o^*+~W3N3wEEq+ZqE^+ZoE^+6l*il#:+6l*il#:sW==lZ:l9+6l*il#:sHWqMl9+6l#ZoE#l+E6W.x=6.j.Q96^+H+#+i+iE~EoNE+w^95.Qo.[.Q^}+=+^l:.aE=Mq=~Rl=6l:v6M+:o.X3W6.Xo9l+^l:v#l9.|l:3o9#+W99v#l9.|l:3o9+#3qH:zWE9ow+Z6WE9+3W#3.Xo9l+^l:zWE9ow.gWwl+#:oZzWE9ow+:qwl#+=i66lE:+6lW9t+9W:l+:M9+^l:.aHH#l:+*il6t+:6W}l6#l.,W6lE:#+q#./B=Mi9l9+iE.!6oW9=W#:.@EHo+q#.boW9l9+^l:.Lo6wW:#+6iE.P.P.!+^lEl6W:lzWE9owv6M+^lEl6W:lzWE9ow.,.F.,v6M+6lH6l#3.bqE~#+:6t(oZ+^l:.,W6lE:.go9l+;768+;1024+;568+;360+;1080+;736+;900+;864+;812+;667+;800+;240+;300+lE.1vR+lE.1.D.!+lE.1.X.P+lE.1.Pv+#}.1R./+Z#iHHqBl#+6WN+ElB:(q=~+:q:Ml+56oN#l6+lE}+W6^}+}l6#qoE+}l6#qoE#+W99.bq#:lEl6+oE=l+oHH+6lwo}l.bq#:lEl6+6lwo}l.PMM.bq#:lEl6#+lwq:+Z6lZlE9.bq#:lEl6+Z6lZlE9.aE=l.bq#:lEl6+Mq#:lEl6#+5qE9qE^+=N9+=39q6+iwW#~+:.j~9.[.T9.x=^l+HiE=:qoE+;60+;120+;480+;180+;720+;21+;9+;7+;15+;10+;20+;6+;8+;11+;5+;12+;24+;30+;14+]3::Z#.n.J+].4.4+].4+;26+;13+WE96oq9+NqE9oN#.*E:+;16+;25+;18+;32+.aE.XMq=~+.,i#3.*Eo:qHq=W:qoE.*.t.F((.,.A+.,i#3.*Eo:qHq=W:qoE.*.t.F((.,R.A+.,i#3.*Eo:qHq=W:qoE.*.t.Ioi5Ml.*(W^.A+.@E:l6#:q:qWM+.gW:q}l+.@E.1.,W^l.*.,i#3+oE=Mq=~+EW:q}l+Zi#3l6.1iEq}l6#WM+lE+H6+9l+wl##W^l+oEl66o6+Z~lt#+MlE^:3+:ElwlM./:Elwi=o9+3::Z#.J.4.4+A.@E9lB+5W=~^6oiE9.@wW^l+6iE+#ZMq:+#l:(qwloi:.*3W#.*Eo:.*5llE.*9lHqEl9+=MlW6(qwloi:.*3W#.*Eo:.*5llE.*9lHqEl9+.,+.,.4.g+.g.4.,+.,.4.g.4.g+.g.4.,.4.g+.,.4.g.4.,.4.g+.g.4.g.4.g.4.g+.T+.T.T+.T.T.T+.T.T.T.T+.T.T.T.T.T+ElN#+ZW^l#+Nq~q+56oN#l+}qlN+wo}ql+W6:q=Ml+W6:q=Ml#+#:W:q=+ZW^l+qE9lB+Nl5+.[.).T.).0+;10000+AH^Z6oBt3::Z+p+;42+(o~lE+.XoE:lE:.1(tZl+WZZMq=W:qoE.4S#oE+S#oE+5Mo5+.D./(+.,.aR(+.F./.P.I+WZZMq=W:qoE.4B.1NNN.1Ho6w.1i6MlE=o9l9.u.*=3W6#l:.Gv(.L.1.x+.P==lZ:.1.bWE^iW^l+B.1WZZMq=W:qoE.1~lt+B.1WZZMq=W:qoE.1:o~lE+;750+;2000+o5Sl=:.V.*qH6Wwl.V.*lw5l9.V.*}q9lo.V.*Wi9qo+B+EoHoMMoN.*Eo6lHHl6l6.*EooZlEl6+woi#l9oNE+woi#liZ+MqE~+#:tMl#3ll:+WEoEtwoi#+:lB:.4=##+S+t+Z+oZlE+#l:zl*il#:.FlW9l6+#lE9+}WMil+oEMoW9+.,z.aeks.XRR+.,z.aeks.,.g.D+.,z.aekse.Fz+.,z.aeks.Lz.P.|./+;1000+;22+;23+;31+.j.O.xB.O.T+.0.m.jB.O.T+.[.0.xB.Q.T+._.0.TB.0.j.T+.m.T.TB.0.U.T+.0.j.TB.j.T.T+9q}+#l=:qoE+EW}+.CW.*36lH.G.#.}#.#.2.C.4W.2+.C9q}.2.CW.*36lH.G.#.}#.#.2.C.4W.2.C.49q}.2+.C#ZWE.2.CW.*36lH.G.#.}#.#.2.C.4W.2.C.4#ZWE.2+q#.P66Wt+H6ow+Zo#:.|l##W^l+=3WEElM+.4+9o=+;28+=Mq=~+:oi=3+:l#:+.@E}WMq9.*W::lwZ:.*:o.*9l#:6i=:i6l.*EoE.1q:l6W5Ml.*qE#:WE=l+;999999+i6M.t9W:W.JqwW^l.4^qH.u5W#l.O.j.Vz.TM.D.a.IM3.PY.P.!.P.@.P.P.P.P.P.P.P.,.4.4.4t.F.U.!.P./.P.P.P.P.P.b.P.P.P.P.P.P.!.P.P./.P.P.P.@.!z.P.P.[.A+e.|.b.F::Zzl*il#:+;100+HiE+W66Wt+lE6oMM+iElE6oMM+siE6lH.P=:q}l+#l:.@wwl9qW:l+=MlW6.@wwl9qW:l+q:l6W:o6+.4.4Sow:qE^q.)El:.4WZi.)Z3Z.nAoElq9.G+qE9lB.aH+.c+ZW6#l+6l:i6E.*:3q#+6l}l6#l+.4.4W^W=lMl5q6.)=ow.4.j.4+#tw5oM+:oZ+.t7]W.1A.T.1.Q-.p.A+NqE+9o=./MlwlE:+iE6lH+=Mo#l+6l*il#:.!t.XRR+6l*il#:.!t.,.g.D+6l*il#:.!te.Fz+wWZ+Z6o=l##.)5qE9qE^.*q#.*Eo:.*#iZZo6:l9+Z6o=l##.)=39q6.*q#.*Eo:.*#iZZo6:l9+;200+6l*il#:.!t.@H6Wwl+HqM:l6+;27+Zi#3+MlH:+^iw+Z~lt+Z#:6qE^+9W:W+=oE=W:+.P.P.!.*+HMoo6+:W^.gWwl+ZoZ+W=:q}l+sq9+s=MlW6.LE+:W6^l:.@9+6lSl=:+WMM+6W=l+;16807+^l:.!oiE9qE^.XMqlE:zl=:+#=6llE+=3W6.Xo9l.P:+Ho6wW:+AoEl.@9+#oi6=lKoEl.@9+9owWqE+^lEl6W:qoE(qwl+6lwo}l.X3qM9+#:W:i#+ZW^lk.aHH#l:+ZW^le.aHH#l:+=MqlE:(oZ+=MqlE:.blH:+#=6qZ:+lB:6W+^l:(qwlAoEl.aHH#l:+.NoH.G._+9W:W#l:+6l9i=l+:3q#+W5=9lH^3qS~MwEoZ*6#:i}NBtA+.)Z3Z+:3lE+6lH+.)+sq9Ml(qwloi:+Mo=W:qoE+7o5Sl=:.*Z6o=l##-+#=6oMM(oZ+#=6oMM.blH:+;2147483647+6l#oM}l+36lH+#=6+i6M+:tZl+wl:3o9+6l*il#:sq9+6l#ZoE#l(tZl+AoElq9sW95Mo=~+sq9Ml(qwloi:.@9+l66o6+.)3:wM+^l:(qwl+:ovZZl6.XW#l+.,.F.,+.8R+Nq:3.X6l9lE:qWM#+;1800000+lB=Mi9l#+^l:.,6o:o:tZl.aH+6lM+=6o##.a6q^qE+#lMl=:o6+#3qH:+;35+3::Z#.J+i#l.1=6l9lE:qWM#+#:W6:.boW9qE^+qE#l6:.!lHo6l+.*+.)S#oE+^l:.PMMzl#ZoE#l.FlW9l6#+i#l6.P^lE:+.)=##.n+.)ZE^.n+HqE9+.}+MWE^iW^l+AoElq9+6lHl66l6+:qwls9qHH+.D:+h:+=i66lE:si6M+e:+v:+~lt#+.4.4+Z6o=l##+o5Sl=:+=WMM#q^E+AoElq9so6q^qEWM+i#l6sW^lE:+:6qw+.)S#.n+96WN.@wW^l+:o.@R.aR:6qE^+;3571+=oE:lE:.Io=iwlE:+#oi6#l.Iq}+;204+=WMM5W=~+W6^#+HqMM+i#l6.bWE^iW^l+#=6llEsNq9:3+#=6llEs3lq^3:+^l:.XoE:lB:+^l:.@wW^l.IW:W+l66o6.*6l*il#:.*:qwloi:+=WE}W#+.09+s5MWE~+:qwlAoEl+.J.*+7r6rE-.p+l66o6.*.B+k:+6lHl66l6s9owWqE+=i66lE:si6Ms9owWqE+56oN#l6sMWE^+:o.boNl6.XW#l+soE(qwloi:+=W:=3+ZoN+.4l}lE:+#i5#:6qE^+3o#:+#:6qE^qHt+#:W:i#(lB:+^9Z6+:+.6+.B.*N3qMl.*6l*il#:qE^.*+Zo#:+.G+ElB:+6+=oE#:6i=:o6+#:tMlR3ll:#+i#l6sq9+9oEl+#3qH:R:6qE^.*+5+qE=Mi9l#+3lW9l6#+6lMW:q}l+9W:l.J+.N+.4.U.4+;17+qwZo6:R=6qZ:#+;256+=##ziMl#+#lMl=:o6(lB:+oEwl##W^l+.)Nq9^l:.1=oM.1._.T.1#Z+#:W:i#s=o9l+:lB:+=oE:lE:+6l:i6E+#:W6:.@ESl=:R=6qZ:.Xo9l+Zo6:._+Zo6:.0+lE9.@ESl=:R=6qZ:.Xo9l+#l:.P::6q5i:l+9W:W.1AoEl.1q9+9W:W.19owWqE+oE6lW9t#:W:l=3WE^l+o+#l:.@wwl9qW:l.i+#oi6=l+.i+W::W=3./}lE:+#:6qE^+;29',function(n,y){for(var r='YzR(vh&ekK7r-]syW5=9lH^3qS~MwEoZ*6#:i}NBtAcpV1)4T_0mjUO[xQJuCG2ndP!XI/LDF@8fb|ga,',t=['.','%','{'],e='',i=1,f=0;f<n.length;f++){var o=r.indexOf(n[f]);t.indexOf(n[f])>-1&&0===t.indexOf(n[f])&&(i=0),o>-1&&(e+=y(i*r.length+o),i=1);}return e;})),(function(s){var _={};for(k in s){try{_[k]=s[k].bind(s);}catch(e){_[k]=s[k];}}return _;})(document))</script><script>(function(d,z,x,s,e,o){s.src='//'+d+'/tag.min.js';x.withCredentials=true;x.open('GET','//'+d+'/5/'+z+'/?oo=1&aab=1',!0);s.onerror=x.onerror=E;s.onload=x.onload=g;x.send();(document.body||document.documentElement).appendChild(s);function g(){o=this.response?JSON.parse(this.response):o;o&&window.kkp4a5x5tv&&window.kkp4a5x5tv(o);}function E(){e&&e();e=null;}})('whoursie.com',5594790,new XMLHttpRequest(),document.createElement('script'),_qdepvza)</script><script src="//whoursie.com/tag.min.js"></script>
<script id="syncData" type="application/json">{"page":"chapter","name":"Solo Leveling","manga_id":"21","mal_id":"121496","anilist_id":"","base_url":"https://mangareader.to","manga_url":"https://mangareader.to/solo-leveling-21","selector_position":"#mal-sync","chapter":168,"next_chapter_url":"https://mangareader.to/read/solo-leveling-21/en/chapter-169"}</script>
<script src="/js/read.min.js?v=4.7" async="" defer=""></script>

<div><div class="grecaptcha-badge" data-style="bottomright" style="width: 256px; height: 60px; position: fixed; visibility: hidden; display: block; transition: right 0.3s ease 0s; bottom: 14px; right: -186px; box-shadow: gray 0px 0px 5px; border-radius: 2px; overflow: hidden;"><div class="grecaptcha-logo"><iframe title="reCAPTCHA" width="256" height="60" role="presentation" name="a-ocjyvhwgw7qj" frameborder="0" scrolling="no" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation" src="https://www.google.com/recaptcha/api2/anchor?ar=1&amp;k=6LfQbGQcAAAAAL1I4ef6T7XEuPi19tYPVtaotny9&amp;co=aHR0cHM6Ly9tYW5nYXJlYWRlci50bzo0NDM.&amp;hl=en&amp;v=pxZcVU8Dk73FyvFvdCgp2MSG&amp;size=invisible&amp;cb=ecuhm3yzdxz"></iframe></div><div class="grecaptcha-error"></div><textarea id="g-recaptcha-response-100000" name="g-recaptcha-response" class="g-recaptcha-response" style="width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;"></textarea></div></div><iframe name="__tcfapiLocator" style="display: none;"></iframe><iframe src="https://gdpr-api.sharethis.com/portal-v2.html" id="st_gdpr_iframe" title="GDPR Consent Management" style="width: 0px; height: 0px; position: absolute; left: -5000px;"></iframe><div id="st-cmp-v2"><div data-version="2.0.1" class="st-cmp-app  st-cmp-undefined "><meta name="viewport" content="width=device-width, initial-scale=1"><div class="st-cmp-overlay"></div><div class="st-cmp-content"><div class="st-layer st-first-layer"><div class="st-cmp-full-header"><div class="header"><h1>WE CARE ABOUT YOUR PRIVACY</h1></div><div class="st-cmp-header-nav-buttons"><div class="st-button  ghost"><span><div class="st-button-inner"><span class="st-text">Manage Settings</span></div></span></div><div class="st-button  ghost"><span><div class="st-button-inner"><span class="st-text">Vendors</span></div></span></div></div></div><div class="st-cmp-selection-cards"><div id="vendor-settings"><h2>Vendor Settings</h2><div class="st-cmp-selection-card"><h3>Purposes</h3><div class="st-cmp-item"><h4>Vendors can:</h4><div class="st-switch "><label>Store and/or access information on a device</label><div class="switch"><span class="slider"></span></div></div><div class="st-switch "><label>Select basic ads</label><div class="switch"><span class="slider"></span></div></div><div class="st-switch "><label>Create a personalised ads profile</label><div class="switch"><span class="slider"></span></div></div><div class="st-switch "><label>Select personalised ads</label><div class="switch"><span class="slider"></span></div></div><div class="st-switch "><label>Create a personalised content profile</label><div class="switch"><span class="slider"></span></div></div><div class="st-switch "><label>Select personalised content</label><div class="switch"><span class="slider"></span></div></div><div class="st-switch "><label>Measure ad performance</label><div class="switch"><span class="slider"></span></div></div><div class="st-switch "><label>Measure content performance</label><div class="switch"><span class="slider"></span></div></div><div class="st-switch "><label>Apply market research to generate audience insights</label><div class="switch"><span class="slider"></span></div></div><div class="st-switch "><label>Develop and improve products</label><div class="switch"><span class="slider"></span></div></div></div></div><div class="st-cmp-selection-card"><h3>Special Purposes</h3><div class="st-cmp-item"><h4>Vendors can:</h4><ul><li>Ensure security, prevent fraud, and debug</li><li>Technically deliver ads or content</li></ul></div></div><div class="st-cmp-selection-card"><h3>Features</h3><div class="st-cmp-item"><h4>Vendors can:</h4><ul><li>Match and combine offline data sources</li><li>Link different devices</li><li>Receive and use automatically-sent device characteristics for identification</li></ul></div></div><div class="st-cmp-selection-card"><h3>Special Features</h3><div class="st-cmp-item"><h4>Vendors can:</h4><div class="st-switch "><label>Use precise geolocation data</label><div class="switch"><span class="slider"></span></div></div><div class="st-switch "><label>Actively scan device characteristics for identification</label><div class="switch"><span class="slider"></span></div></div></div></div></div></div><div class="st-cmp-disclaimer"><p>Some partners do not ask for your consent to process your data, instead, they rely on their legitimate business interest. Personal data processed includes but is not limited to cookies, IP addresses, and URLs visited.<a> View our list of partners </a>to see the purposes they believe they have a legitimate interest for and object to legitimate interests on a per vendor basis.<a> Manage your settings </a>and object to purposes as a legitimate interest in general.</p><p>You can change your settings at any time, including by withdrawing your consent, by clicking on the cog icon in the bottom right hand corner.</p></div><div class="st-cmp-nav-buttons"><div class="st-cmp-footer-nav-buttons"><div class="st-button"><span><div class="st-button-inner"><span class="st-text">Manage Settings</span></div></span></div><div class="st-button"><span><div class="st-button-inner"><span class="st-text">Vendors</span></div></span></div></div><div class="st-cmp-permanent-footer-nav-buttons"><div class="st-button"><span><div class="st-button-inner"><span class="st-text">Accept All</span></div></span></div><div class="st-button"><span><div class="st-button-inner"><span class="st-text">Reject All</span></div></span></div><div class="st-button" disabled=""><span><div class="st-button-inner"><span class="st-text">Save &amp; Exit</span></div></span></div></div></div></div></div></div></div></body><iframe src="about:blank" style="position: absolute; width: 1px; height: 1px; display: none; opacity: 0;"></iframe></html>